void createSwitchOp<mlir::pdl_interp::SwitchResultCountOp,mlir::pdl_to_pdl_interp::UnsignedAnswer,int>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned char *v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  long long v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  long long *v45;
  uint64_t v46;
  long long v47;
  uint64_t Loc;
  void *__p;
  void *v51;
  char *v52;
  void *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  __p = 0;
  v56 = a2;
  v57 = a1;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v51 = 0;
  v52 = 0;
  v4 = *(unsigned int *)(a4 + 32);
  if (v4)
  {
    v53 = operator new(4 * v4);
    v54 = (char *)v53;
    v55 = (char *)v53 + 4 * v4;
    v6 = (char *)operator new(8 * v4);
    v7 = *(void **)(a4 + 24);
    v8 = &v7[2 * v4];
    __p = v6;
    v51 = v6;
    v52 = &v6[8 * v4];
    while (1)
    {
      if (v6 < v52)
      {
        *(void *)v6 = v7[1];
        v6 += 8;
        v51 = v6;
        v10 = *(_DWORD *)(*v7 + 8);
        v12 = v54;
        v11 = v55;
        if (v54 >= v55) {
          goto LABEL_27;
        }
        goto LABEL_3;
      }
      v13 = (char *)__p;
      v14 = v6 - (unsigned char *)__p;
      v15 = (v6 - (unsigned char *)__p) >> 3;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61) {
        goto LABEL_61;
      }
      v17 = v52 - (unsigned char *)__p;
      if ((v52 - (unsigned char *)__p) >> 2 > v16) {
        v16 = v17 >> 2;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 61) {
          goto LABEL_62;
        }
        v19 = operator new(8 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[8 * v15];
      *(void *)v20 = v7[1];
      v21 = v20 + 8;
      if (v6 == v13)
      {
        __p = &v19[8 * v15];
        v52 = &v19[8 * v18];
LABEL_25:
        operator delete(v6);
        goto LABEL_26;
      }
      v22 = v6 - 8 - v13;
      if (v22 < 0x168)
      {
        v23 = v6;
        goto LABEL_21;
      }
      if (&v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v19[v14 - 8]) {
        break;
      }
      if (&v6[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
      {
        v23 = v6;
        do
        {
LABEL_21:
          v24 = *((void *)v23 - 1);
          v23 -= 8;
          *((void *)v20 - 1) = v24;
          v20 -= 8;
        }
        while (v23 != v13);
        goto LABEL_22;
      }
      if ((unint64_t)(v6 - &v19[v14]) < 0x20)
      {
        v23 = v6;
        goto LABEL_21;
      }
      v42 = (v22 >> 3) + 1;
      v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = &v6[-v43];
      v20 -= v43;
      v44 = &v19[8 * v15 - 16];
      v45 = (long long *)(v6 - 16);
      v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v47 = *v45;
        *(v44 - 1) = *(v45 - 1);
        *v44 = v47;
        v44 -= 2;
        v45 -= 2;
        v46 -= 4;
      }
      while (v46);
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
LABEL_22:
      v6 = (char *)__p;
      __p = v20;
      v52 = &v19[8 * v18];
      if (v6) {
        goto LABEL_25;
      }
LABEL_26:
      v6 = v21;
      v51 = v21;
      v10 = *(_DWORD *)(*v7 + 8);
      v12 = v54;
      v11 = v55;
      if (v54 >= v55)
      {
LABEL_27:
        v25 = (char *)v53;
        v26 = v12 - (unsigned char *)v53;
        v27 = (v12 - (unsigned char *)v53) >> 2;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62) {
LABEL_61:
        }
          abort();
        v29 = v11 - (unsigned char *)v53;
        if (v29 >> 1 > v28) {
          v28 = v29 >> 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          v30 = v28;
        }
        if (v30)
        {
          if (v30 >> 62) {
LABEL_62:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          v31 = operator new(4 * v30);
          v32 = &v31[4 * v27];
          *v32 = v10;
          v9 = (uint64_t)(v32 + 1);
          if (v12 == v25) {
            goto LABEL_44;
          }
LABEL_38:
          v33 = v12 - 4 - v25;
          if (v33 < 0x2C) {
            goto LABEL_65;
          }
          if ((unint64_t)(v12 - &v31[v26]) < 0x20) {
            goto LABEL_65;
          }
          v34 = (v33 >> 2) + 1;
          v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
          v36 = &v12[-v35];
          v32 = (_DWORD *)((char *)v32 - v35);
          v37 = &v31[4 * v27 - 16];
          v38 = v12 - 16;
          v39 = v34 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            *v37 = v40;
            v37 -= 2;
            v38 -= 32;
            v39 -= 8;
          }
          while (v39);
          v12 = v36;
          if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_65:
            do
            {
              v41 = *((_DWORD *)v12 - 1);
              v12 -= 4;
              *--v32 = v41;
            }
            while (v12 != v25);
          }
        }
        else
        {
          v31 = 0;
          v32 = (_DWORD *)(4 * v27);
          *(_DWORD *)(4 * v27) = v10;
          v9 = 4 * v27 + 4;
          if (v12 != v25) {
            goto LABEL_38;
          }
        }
LABEL_44:
        v53 = v32;
        v55 = &v31[4 * v30];
        if (v25) {
          operator delete(v25);
        }
        goto LABEL_4;
      }
LABEL_3:
      *(_DWORD *)v12 = v10;
      v9 = (uint64_t)(v12 + 4);
LABEL_4:
      v54 = (char *)v9;
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_56;
      }
    }
    v23 = v6;
    goto LABEL_21;
  }
LABEL_56:
  Loc = mlir::Value::getLoc((mlir::Value *)&v57);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchResultCountOp,mlir::Value &,std::vector<int> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v57, (uint64_t *)&v53, &v56, (uint64_t *)&__p);
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
  if (v53)
  {
    v54 = (char *)v53;
    operator delete(v53);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchOperationNameOp,mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, uint64_t a4)
{
  __p = 0;
  uint64_t v55 = a2;
  uint64_t v56 = a1;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v50 = 0;
  v51 = 0;
  uint64_t v4 = *(unsigned int *)(a4 + 32);
  if (v4)
  {
    v52 = operator new(8 * v4);
    v53 = (char *)v52;
    v54 = (char *)v52 + 8 * v4;
    __p = operator new(8 * v4);
    v50 = (char *)__p;
    v51 = (char *)__p + 8 * v4;
    v6 = *(uint64_t **)(a4 + 24);
    v7 = &v6[2 * v4];
    while (1)
    {
      v9 = v50;
      if (v50 < v51)
      {
        *(void *)v50 = v6[1];
        uint64_t v10 = (uint64_t)(v9 + 8);
        goto LABEL_27;
      }
      v11 = (char *)__p;
      int64_t v12 = v50 - (unsigned char *)__p;
      uint64_t v13 = (v50 - (unsigned char *)__p) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v15 = v51 - (unsigned char *)__p;
      if ((v51 - (unsigned char *)__p) >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      unint64_t v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v14;
      if (v16) {
        break;
      }
      v17 = 0;
      v18 = (void *)(8 * v13);
      *(void *)(8 * v13) = v6[1];
      uint64_t v10 = 8 * v13 + 8;
      if (v9 != v11) {
        goto LABEL_18;
      }
LABEL_25:
      __p = v18;
      v51 = &v17[8 * v16];
      if (v9) {
        operator delete(v9);
      }
LABEL_27:
      v50 = (char *)v10;
      uint64_t v28 = *v6;
      v29 = v53;
      if (v53 >= v54)
      {
        v30 = v52;
        int64_t v31 = v53 - (unsigned char *)v52;
        uint64_t v32 = (v53 - (unsigned char *)v52) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
LABEL_53:
        }
          abort();
        uint64_t v34 = v54 - (unsigned char *)v52;
        if ((v54 - (unsigned char *)v52) >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 >> 61) {
LABEL_54:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          v36 = operator new(8 * v35);
          v37 = &v36[8 * v32];
          void *v37 = *(void *)(v28 + 8);
          uint64_t v8 = (uint64_t)(v37 + 1);
          if (v29 == v30) {
            goto LABEL_46;
          }
LABEL_39:
          unint64_t v38 = v29 - 8 - v30;
          if (v38 < 0x58) {
            goto LABEL_57;
          }
          if ((unint64_t)(v29 - &v36[v31]) < 0x20) {
            goto LABEL_57;
          }
          uint64_t v39 = (v38 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v29[-v40];
          v37 = (void *)((char *)v37 - v40);
          v42 = &v36[8 * v32 - 16];
          v43 = (long long *)(v29 - 16);
          uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            _OWORD *v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          v29 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            do
            {
              uint64_t v46 = *((void *)v29 - 1);
              v29 -= 8;
              *--v37 = v46;
            }
            while (v29 != v30);
          }
          v29 = v52;
        }
        else
        {
          v36 = 0;
          v37 = (void *)(8 * v32);
          *(void *)(8 * v32) = *(void *)(v28 + 8);
          uint64_t v8 = 8 * v32 + 8;
          if (v29 != v30) {
            goto LABEL_39;
          }
        }
LABEL_46:
        v52 = v37;
        v54 = &v36[8 * v35];
        if (v29) {
          operator delete(v29);
        }
        goto LABEL_4;
      }
      *(void *)v53 = *(void *)(v28 + 8);
      uint64_t v8 = (uint64_t)(v29 + 8);
LABEL_4:
      v53 = (char *)v8;
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_48;
      }
    }
    if (v16 >> 61) {
      goto LABEL_54;
    }
    v17 = operator new(8 * v16);
    v18 = &v17[8 * v13];
    void *v18 = v6[1];
    uint64_t v10 = (uint64_t)(v18 + 1);
    if (v9 == v11) {
      goto LABEL_25;
    }
LABEL_18:
    unint64_t v19 = v9 - 8 - v11;
    if (v19 < 0x58) {
      goto LABEL_58;
    }
    if ((unint64_t)(v9 - &v17[v12]) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v9[-v21];
    v18 = (void *)((char *)v18 - v21);
    v23 = &v17[8 * v13 - 16];
    v24 = v9 - 16;
    uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      _OWORD *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v9 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *--v18 = v27;
      }
      while (v9 != v11);
    }
    v9 = (char *)__p;
    goto LABEL_25;
  }
LABEL_48:
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v56);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchOperationNameOp,mlir::Value &,std::vector<mlir::OperationName> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v56, (uint64_t)&v52, &v55, (uint64_t *)&__p);
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    v53 = (char *)v52;
    operator delete(v52);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchTypesOp,mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute>(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, uint64_t a4)
{
  __p = 0;
  uint64_t v55 = a2;
  uint64_t v56 = a1;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v50 = 0;
  v51 = 0;
  uint64_t v4 = *(unsigned int *)(a4 + 32);
  if (v4)
  {
    v52 = operator new(8 * v4);
    v53 = (char *)v52;
    v54 = (char *)v52 + 8 * v4;
    __p = operator new(8 * v4);
    v50 = (char *)__p;
    v51 = (char *)__p + 8 * v4;
    v6 = *(uint64_t **)(a4 + 24);
    v7 = &v6[2 * v4];
    while (1)
    {
      v9 = v50;
      if (v50 < v51)
      {
        *(void *)v50 = v6[1];
        uint64_t v10 = (uint64_t)(v9 + 8);
        goto LABEL_27;
      }
      v11 = (char *)__p;
      int64_t v12 = v50 - (unsigned char *)__p;
      uint64_t v13 = (v50 - (unsigned char *)__p) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v15 = v51 - (unsigned char *)__p;
      if ((v51 - (unsigned char *)__p) >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      unint64_t v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v14;
      if (v16) {
        break;
      }
      v17 = 0;
      v18 = (void *)(8 * v13);
      *(void *)(8 * v13) = v6[1];
      uint64_t v10 = 8 * v13 + 8;
      if (v9 != v11) {
        goto LABEL_18;
      }
LABEL_25:
      __p = v18;
      v51 = &v17[8 * v16];
      if (v9) {
        operator delete(v9);
      }
LABEL_27:
      v50 = (char *)v10;
      uint64_t v28 = *v6;
      v29 = v53;
      if (v53 >= v54)
      {
        v30 = v52;
        int64_t v31 = v53 - (unsigned char *)v52;
        uint64_t v32 = (v53 - (unsigned char *)v52) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
LABEL_53:
        }
          abort();
        uint64_t v34 = v54 - (unsigned char *)v52;
        if ((v54 - (unsigned char *)v52) >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 >> 61) {
LABEL_54:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          v36 = operator new(8 * v35);
          v37 = &v36[8 * v32];
          void *v37 = *(void *)(v28 + 8);
          uint64_t v8 = (uint64_t)(v37 + 1);
          if (v29 == v30) {
            goto LABEL_46;
          }
LABEL_39:
          unint64_t v38 = v29 - 8 - v30;
          if (v38 < 0x58) {
            goto LABEL_57;
          }
          if ((unint64_t)(v29 - &v36[v31]) < 0x20) {
            goto LABEL_57;
          }
          uint64_t v39 = (v38 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v29[-v40];
          v37 = (void *)((char *)v37 - v40);
          v42 = &v36[8 * v32 - 16];
          v43 = (long long *)(v29 - 16);
          uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            _OWORD *v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          v29 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            do
            {
              uint64_t v46 = *((void *)v29 - 1);
              v29 -= 8;
              *--v37 = v46;
            }
            while (v29 != v30);
          }
          v29 = v52;
        }
        else
        {
          v36 = 0;
          v37 = (void *)(8 * v32);
          *(void *)(8 * v32) = *(void *)(v28 + 8);
          uint64_t v8 = 8 * v32 + 8;
          if (v29 != v30) {
            goto LABEL_39;
          }
        }
LABEL_46:
        v52 = v37;
        v54 = &v36[8 * v35];
        if (v29) {
          operator delete(v29);
        }
        goto LABEL_4;
      }
      *(void *)v53 = *(void *)(v28 + 8);
      uint64_t v8 = (uint64_t)(v29 + 8);
LABEL_4:
      v53 = (char *)v8;
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_48;
      }
    }
    if (v16 >> 61) {
      goto LABEL_54;
    }
    v17 = operator new(8 * v16);
    v18 = &v17[8 * v13];
    void *v18 = v6[1];
    uint64_t v10 = (uint64_t)(v18 + 1);
    if (v9 == v11) {
      goto LABEL_25;
    }
LABEL_18:
    unint64_t v19 = v9 - 8 - v11;
    if (v19 < 0x58) {
      goto LABEL_58;
    }
    if ((unint64_t)(v9 - &v17[v12]) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v9[-v21];
    v18 = (void *)((char *)v18 - v21);
    v23 = &v17[8 * v13 - 16];
    v24 = v9 - 16;
    uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      _OWORD *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v9 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *--v18 = v27;
      }
      while (v9 != v11);
    }
    v9 = (char *)__p;
    goto LABEL_25;
  }
LABEL_48:
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v56);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchTypesOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v56, (uint64_t *)&v52, &v55, (uint64_t *)&__p);
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    v53 = (char *)v52;
    operator delete(v52);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchTypeOp,mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute>(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, uint64_t a4)
{
  __p = 0;
  uint64_t v55 = a2;
  uint64_t v56 = a1;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v50 = 0;
  v51 = 0;
  uint64_t v4 = *(unsigned int *)(a4 + 32);
  if (v4)
  {
    v52 = operator new(8 * v4);
    v53 = (char *)v52;
    v54 = (char *)v52 + 8 * v4;
    __p = operator new(8 * v4);
    v50 = (char *)__p;
    v51 = (char *)__p + 8 * v4;
    v6 = *(uint64_t **)(a4 + 24);
    v7 = &v6[2 * v4];
    while (1)
    {
      v9 = v50;
      if (v50 < v51)
      {
        *(void *)v50 = v6[1];
        uint64_t v10 = (uint64_t)(v9 + 8);
        goto LABEL_27;
      }
      v11 = (char *)__p;
      int64_t v12 = v50 - (unsigned char *)__p;
      uint64_t v13 = (v50 - (unsigned char *)__p) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v15 = v51 - (unsigned char *)__p;
      if ((v51 - (unsigned char *)__p) >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      unint64_t v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v14;
      if (v16) {
        break;
      }
      v17 = 0;
      v18 = (void *)(8 * v13);
      *(void *)(8 * v13) = v6[1];
      uint64_t v10 = 8 * v13 + 8;
      if (v9 != v11) {
        goto LABEL_18;
      }
LABEL_25:
      __p = v18;
      v51 = &v17[8 * v16];
      if (v9) {
        operator delete(v9);
      }
LABEL_27:
      v50 = (char *)v10;
      uint64_t v28 = *v6;
      v29 = v53;
      if (v53 >= v54)
      {
        v30 = v52;
        int64_t v31 = v53 - (unsigned char *)v52;
        uint64_t v32 = (v53 - (unsigned char *)v52) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
LABEL_53:
        }
          abort();
        uint64_t v34 = v54 - (unsigned char *)v52;
        if ((v54 - (unsigned char *)v52) >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 >> 61) {
LABEL_54:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          v36 = operator new(8 * v35);
          v37 = &v36[8 * v32];
          void *v37 = *(void *)(v28 + 8);
          uint64_t v8 = (uint64_t)(v37 + 1);
          if (v29 == v30) {
            goto LABEL_46;
          }
LABEL_39:
          unint64_t v38 = v29 - 8 - v30;
          if (v38 < 0x58) {
            goto LABEL_57;
          }
          if ((unint64_t)(v29 - &v36[v31]) < 0x20) {
            goto LABEL_57;
          }
          uint64_t v39 = (v38 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v29[-v40];
          v37 = (void *)((char *)v37 - v40);
          v42 = &v36[8 * v32 - 16];
          v43 = (long long *)(v29 - 16);
          uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            _OWORD *v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          v29 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            do
            {
              uint64_t v46 = *((void *)v29 - 1);
              v29 -= 8;
              *--v37 = v46;
            }
            while (v29 != v30);
          }
          v29 = v52;
        }
        else
        {
          v36 = 0;
          v37 = (void *)(8 * v32);
          *(void *)(8 * v32) = *(void *)(v28 + 8);
          uint64_t v8 = 8 * v32 + 8;
          if (v29 != v30) {
            goto LABEL_39;
          }
        }
LABEL_46:
        v52 = v37;
        v54 = &v36[8 * v35];
        if (v29) {
          operator delete(v29);
        }
        goto LABEL_4;
      }
      *(void *)v53 = *(void *)(v28 + 8);
      uint64_t v8 = (uint64_t)(v29 + 8);
LABEL_4:
      v53 = (char *)v8;
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_48;
      }
    }
    if (v16 >> 61) {
      goto LABEL_54;
    }
    v17 = operator new(8 * v16);
    v18 = &v17[8 * v13];
    void *v18 = v6[1];
    uint64_t v10 = (uint64_t)(v18 + 1);
    if (v9 == v11) {
      goto LABEL_25;
    }
LABEL_18:
    unint64_t v19 = v9 - 8 - v11;
    if (v19 < 0x58) {
      goto LABEL_58;
    }
    if ((unint64_t)(v9 - &v17[v12]) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v9[-v21];
    v18 = (void *)((char *)v18 - v21);
    v23 = &v17[8 * v13 - 16];
    v24 = v9 - 16;
    uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      _OWORD *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v9 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *--v18 = v27;
      }
      while (v9 != v11);
    }
    v9 = (char *)__p;
    goto LABEL_25;
  }
LABEL_48:
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v56);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchTypeOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v56, (uint64_t *)&v52, &v55, (uint64_t *)&__p);
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    v53 = (char *)v52;
    operator delete(v52);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchAttributeOp,mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute>(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, uint64_t a4)
{
  __p = 0;
  uint64_t v55 = a2;
  uint64_t v56 = a1;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v50 = 0;
  v51 = 0;
  uint64_t v4 = *(unsigned int *)(a4 + 32);
  if (v4)
  {
    v52 = operator new(8 * v4);
    v53 = (char *)v52;
    v54 = (char *)v52 + 8 * v4;
    __p = operator new(8 * v4);
    v50 = (char *)__p;
    v51 = (char *)__p + 8 * v4;
    v6 = *(uint64_t **)(a4 + 24);
    v7 = &v6[2 * v4];
    while (1)
    {
      v9 = v50;
      if (v50 < v51)
      {
        *(void *)v50 = v6[1];
        uint64_t v10 = (uint64_t)(v9 + 8);
        goto LABEL_27;
      }
      v11 = (char *)__p;
      int64_t v12 = v50 - (unsigned char *)__p;
      uint64_t v13 = (v50 - (unsigned char *)__p) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v15 = v51 - (unsigned char *)__p;
      if ((v51 - (unsigned char *)__p) >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      unint64_t v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v14;
      if (v16) {
        break;
      }
      v17 = 0;
      v18 = (void *)(8 * v13);
      *(void *)(8 * v13) = v6[1];
      uint64_t v10 = 8 * v13 + 8;
      if (v9 != v11) {
        goto LABEL_18;
      }
LABEL_25:
      __p = v18;
      v51 = &v17[8 * v16];
      if (v9) {
        operator delete(v9);
      }
LABEL_27:
      v50 = (char *)v10;
      uint64_t v28 = *v6;
      v29 = v53;
      if (v53 >= v54)
      {
        v30 = v52;
        int64_t v31 = v53 - (unsigned char *)v52;
        uint64_t v32 = (v53 - (unsigned char *)v52) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
LABEL_53:
        }
          abort();
        uint64_t v34 = v54 - (unsigned char *)v52;
        if ((v54 - (unsigned char *)v52) >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 >> 61) {
LABEL_54:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          v36 = operator new(8 * v35);
          v37 = &v36[8 * v32];
          void *v37 = *(void *)(v28 + 8);
          uint64_t v8 = (uint64_t)(v37 + 1);
          if (v29 == v30) {
            goto LABEL_46;
          }
LABEL_39:
          unint64_t v38 = v29 - 8 - v30;
          if (v38 < 0x58) {
            goto LABEL_57;
          }
          if ((unint64_t)(v29 - &v36[v31]) < 0x20) {
            goto LABEL_57;
          }
          uint64_t v39 = (v38 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v29[-v40];
          v37 = (void *)((char *)v37 - v40);
          v42 = &v36[8 * v32 - 16];
          v43 = (long long *)(v29 - 16);
          uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            _OWORD *v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          v29 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            do
            {
              uint64_t v46 = *((void *)v29 - 1);
              v29 -= 8;
              *--v37 = v46;
            }
            while (v29 != v30);
          }
          v29 = v52;
        }
        else
        {
          v36 = 0;
          v37 = (void *)(8 * v32);
          *(void *)(8 * v32) = *(void *)(v28 + 8);
          uint64_t v8 = 8 * v32 + 8;
          if (v29 != v30) {
            goto LABEL_39;
          }
        }
LABEL_46:
        v52 = v37;
        v54 = &v36[8 * v35];
        if (v29) {
          operator delete(v29);
        }
        goto LABEL_4;
      }
      *(void *)v53 = *(void *)(v28 + 8);
      uint64_t v8 = (uint64_t)(v29 + 8);
LABEL_4:
      v53 = (char *)v8;
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_48;
      }
    }
    if (v16 >> 61) {
      goto LABEL_54;
    }
    v17 = operator new(8 * v16);
    v18 = &v17[8 * v13];
    void *v18 = v6[1];
    uint64_t v10 = (uint64_t)(v18 + 1);
    if (v9 == v11) {
      goto LABEL_25;
    }
LABEL_18:
    unint64_t v19 = v9 - 8 - v11;
    if (v19 < 0x58) {
      goto LABEL_58;
    }
    if ((unint64_t)(v9 - &v17[v12]) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v9[-v21];
    v18 = (void *)((char *)v18 - v21);
    v23 = &v17[8 * v13 - 16];
    v24 = v9 - 16;
    uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      _OWORD *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v9 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *--v18 = v27;
      }
      while (v9 != v11);
    }
    v9 = (char *)__p;
    goto LABEL_25;
  }
LABEL_48:
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v56);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchAttributeOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v56, (uint64_t *)&v52, &v55, (uint64_t *)&__p);
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    v53 = (char *)v52;
    operator delete(v52);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,anonymous namespace'::PatternLowering::generate(mlir::pdl_to_pdl_interp::SwitchNode *,mlir::Block *,mlir::Value)::$_0 &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  v11 = (unsigned int *)result;
  while (2)
  {
    int64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        v11 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        uint64_t v14 = a2 - v12;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0:
            case 1:
              return result;
            case 2:
              uint64_t v98 = *(a2 - 1);
              uint64_t v99 = *v12;
              if (*(_DWORD *)(*(void *)(*(void *)(**(void **)a3 + 72) + 16 * v98) + 8) <= *(_DWORD *)(*(void *)(*(void *)(**(void **)a3 + 72) + 16 * v99) + 8)) {
                return result;
              }
              *int64_t v12 = v98;
              goto LABEL_173;
            case 3:
              uint64_t v100 = *(void *)(**(void **)a3 + 72);
              uint64_t v99 = *v12;
              uint64_t v101 = v12[1];
              unsigned int v102 = *(_DWORD *)(*(void *)(v100 + 16 * v101) + 8);
              uint64_t v103 = *(void *)(v100 + 16 * v99);
              uint64_t v104 = *(a2 - 1);
              unsigned int v105 = *(_DWORD *)(*(void *)(v100 + 16 * v104) + 8);
              if (v102 <= *(_DWORD *)(v103 + 8))
              {
                if (v105 > v102)
                {
                  v12[1] = v104;
                  *(a2 - 1) = v101;
                  uint64_t v161 = *v12;
                  uint64_t v160 = v12[1];
                  if (*(_DWORD *)(*(void *)(v100 + 16 * v160) + 8) > *(_DWORD *)(*(void *)(v100 + 16 * v161) + 8))
                  {
                    *int64_t v12 = v160;
                    v12[1] = v161;
                  }
                }
              }
              else
              {
                if (v105 <= v102)
                {
                  *int64_t v12 = v101;
                  v12[1] = v99;
                  uint64_t v168 = *(a2 - 1);
                  if (*(_DWORD *)(*(void *)(v100 + 16 * v168) + 8) <= *(_DWORD *)(v103 + 8)) {
                    return result;
                  }
                  v12[1] = v168;
                }
                else
                {
                  *int64_t v12 = v104;
                }
LABEL_173:
                *(a2 - 1) = v99;
              }
              break;
            case 4:
              uint64_t v106 = *(void *)(**(void **)a3 + 72);
            case 5:
              v107 = v12 + 2;
              v108 = v12 + 3;
              uint64_t v109 = *(a2 - 1);
              uint64_t v110 = v11[3];
              uint64_t v111 = *(void *)(**(void **)a3 + 72);
              if (*(_DWORD *)(*(void *)(v111 + 16 * v109) + 8) > *(_DWORD *)(*(void *)(v111 + 16 * v110) + 8))
              {
                _DWORD *v108 = v109;
                *(a2 - 1) = v110;
                uint64_t v112 = *v108;
                uint64_t v113 = *v107;
                uint64_t v114 = *(void *)(v111 + 16 * v112);
                if (*(_DWORD *)(v114 + 8) > *(_DWORD *)(*(void *)(v111 + 16 * v113) + 8))
                {
                  _DWORD *v107 = v112;
                  _DWORD *v108 = v113;
                  uint64_t v115 = v11[1];
                  if (*(_DWORD *)(v114 + 8) > *(_DWORD *)(*(void *)(v111 + 16 * v115) + 8))
                  {
                    v11[1] = v112;
                    v11[2] = v115;
                    uint64_t v116 = *v11;
                    if (*(_DWORD *)(v114 + 8) > *(_DWORD *)(*(void *)(v111 + 16 * v116) + 8))
                    {
                      unsigned int *v11 = v112;
                      v11[1] = v116;
                    }
                  }
                }
              }
              return result;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 95)
        {
          uint64_t v117 = *(void *)a3;
          if (a5)
          {
            if (v12 != a2)
            {
              v118 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v119 = 0;
                uint64_t v120 = *(void *)(*(void *)v117 + 72);
                v121 = v12;
                do
                {
                  uint64_t v124 = *v121;
                  uint64_t v123 = v121[1];
                  v121 = v118;
                  uint64_t v125 = *(void *)(v120 + 16 * v123);
                  if (*(_DWORD *)(v125 + 8) > *(_DWORD *)(*(void *)(v120 + 16 * v124) + 8))
                  {
                    uint64_t v126 = v119;
                    do
                    {
                      *(unsigned int *)((char *)v12 + v126 + 4) = v124;
                      if (!v126)
                      {
                        v122 = v12;
                        goto LABEL_120;
                      }
                      uint64_t v124 = *(unsigned int *)((char *)v12 + v126 - 4);
                      v126 -= 4;
                    }
                    while (*(_DWORD *)(v125 + 8) > *(_DWORD *)(*(void *)(v120 + 16 * v124) + 8));
                    v122 = (unsigned int *)((char *)v12 + v126 + 4);
LABEL_120:
                    unsigned int *v122 = v123;
                  }
                  v118 = v121 + 1;
                  v119 += 4;
                }
                while (v121 + 1 != a2);
              }
            }
          }
          else if (v12 != a2)
          {
            v162 = v12 + 1;
            if (v12 + 1 != a2)
            {
              uint64_t v163 = *(void *)(*(void *)v117 + 72);
              do
              {
                uint64_t v165 = *v11;
                uint64_t v164 = v11[1];
                v11 = v162;
                uint64_t v166 = *(void *)(v163 + 16 * v164);
                if (*(_DWORD *)(v166 + 8) > *(_DWORD *)(*(void *)(v163 + 16 * v165) + 8))
                {
                  v167 = v11;
                  do
                  {
                    unsigned int *v167 = v165;
                    uint64_t v165 = *(v167 - 2);
                    --v167;
                  }
                  while (*(_DWORD *)(v166 + 8) > *(_DWORD *)(*(void *)(v163 + 16 * v165) + 8));
                  unsigned int *v167 = v164;
                }
                v162 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            int64_t v127 = (unint64_t)(v14 - 2) >> 1;
            uint64_t v128 = *(void *)a3;
            int64_t v129 = v127;
            do
            {
              int64_t v130 = v129;
              if (v127 >= v129)
              {
                uint64_t v131 = (2 * v129) | 1;
                v132 = &v12[v131];
                uint64_t v133 = *v132;
                if (2 * v130 + 2 < v14)
                {
                  uint64_t v134 = *(void *)(*(void *)v128 + 72);
                  if (*(unsigned int *)(*(void *)(v134 + 16 * v133) + 8) > (unint64_t)*(unsigned int *)(*(void *)(v134 + 16 * v132[1]) + 8))
                  {
                    uint64_t v133 = v132[1];
                    ++v132;
                    uint64_t v131 = 2 * v130 + 2;
                  }
                }
                else
                {
                  uint64_t v134 = *(void *)(*(void *)v128 + 72);
                }
                v135 = &v12[v130];
                uint64_t v136 = *v135;
                result = *(void *)(v134 + 16 * v136);
                if (*(_DWORD *)(*(void *)(v134 + 16 * v133) + 8) <= *(_DWORD *)(result + 8))
                {
                  do
                  {
                    v137 = v132;
                    unsigned int *v135 = v133;
                    if (v127 < v131) {
                      break;
                    }
                    uint64_t v138 = (2 * v131) | 1;
                    v132 = &v12[v138];
                    uint64_t v139 = 2 * v131 + 2;
                    uint64_t v133 = *v132;
                    if (v139 < v14
                      && *(unsigned int *)(*(void *)(v134 + 16 * v133) + 8) > (unint64_t)*(unsigned int *)(*(void *)(v134 + 16 * v132[1]) + 8))
                    {
                      uint64_t v133 = v132[1];
                      ++v132;
                      uint64_t v138 = v139;
                    }
                    v135 = v137;
                    uint64_t v131 = v138;
                  }
                  while (*(_DWORD *)(*(void *)(v134 + 16 * v133) + 8) <= *(_DWORD *)(result + 8));
                  unsigned int *v137 = v136;
                  uint64_t v128 = *(void *)a3;
                }
              }
              int64_t v129 = v130 - 1;
            }
            while (v130);
            uint64_t v140 = (unint64_t)v13 >> 2;
            do
            {
              uint64_t v142 = 0;
              unsigned int v143 = *v12;
              uint64_t v144 = *(void *)a3;
              int64_t v145 = (unint64_t)(v140 - 2) >> 1;
              v146 = v12;
              do
              {
                while (1)
                {
                  v149 = &v146[v142];
                  unsigned int v150 = v149[1];
                  v148 = v149 + 1;
                  uint64_t v147 = v150;
                  uint64_t v151 = (2 * v142) | 1;
                  uint64_t v142 = 2 * v142 + 2;
                  if (v142 < v140) {
                    break;
                  }
                  uint64_t v142 = v151;
                  unsigned int *v146 = v147;
                  v146 = v148;
                  if (v151 > v145) {
                    goto LABEL_154;
                  }
                }
                result = v148[1];
                if (*(_DWORD *)(*(void *)(*(void *)(*(void *)v144 + 72) + 16 * v147) + 8) <= *(_DWORD *)(*(void *)(*(void *)(*(void *)v144 + 72) + 16 * result) + 8))
                {
                  uint64_t v142 = v151;
                }
                else
                {
                  LODWORD(v147) = v148[1];
                  ++v148;
                }
                unsigned int *v146 = v147;
                v146 = v148;
              }
              while (v142 <= v145);
LABEL_154:
              if (v148 == --a2)
              {
                unsigned int *v148 = v143;
              }
              else
              {
                unsigned int *v148 = *a2;
                *a2 = v143;
                uint64_t v152 = (char *)v148 - (char *)v12 + 4;
                if (v152 >= 5)
                {
                  unint64_t v153 = (((unint64_t)v152 >> 2) - 2) >> 1;
                  v154 = &v12[v153];
                  uint64_t v155 = *v154;
                  uint64_t v156 = *v148;
                  uint64_t v157 = *(void *)(**(void **)a3 + 72);
                  uint64_t v158 = *(void *)(v157 + 16 * v156);
                  if (*(_DWORD *)(*(void *)(v157 + 16 * v155) + 8) > *(_DWORD *)(v158 + 8))
                  {
                    do
                    {
                      v159 = v154;
                      unsigned int *v148 = v155;
                      if (!v153) {
                        break;
                      }
                      unint64_t v153 = (v153 - 1) >> 1;
                      v154 = &v12[v153];
                      uint64_t v155 = *v154;
                      result = *(unsigned int *)(v158 + 8);
                      v148 = v159;
                    }
                    while (*(_DWORD *)(*(void *)(v157 + 16 * v155) + 8) > result);
                    unsigned int *v159 = v156;
                  }
                }
              }
            }
            while (v140-- > 2);
          }
          return result;
        }
        unint64_t v15 = (unint64_t)v14 >> 1;
        unint64_t v16 = &v12[(unint64_t)v14 >> 1];
        uint64_t v17 = *(void *)(**(void **)a3 + 72);
        uint64_t v18 = *(a2 - 1);
        unsigned int v19 = *(_DWORD *)(*(void *)(v17 + 16 * v18) + 8);
        if ((unint64_t)v13 >= 0x201) {
          break;
        }
        uint64_t v24 = *v12;
        uint64_t v25 = *v16;
        unsigned int v26 = *(_DWORD *)(*(void *)(v17 + 16 * v24) + 8);
        uint64_t v27 = *(void *)(v17 + 16 * v25);
        if (v26 > *(_DWORD *)(v27 + 8))
        {
          if (v19 <= v26)
          {
            *unint64_t v16 = v24;
            *int64_t v12 = v25;
            uint64_t v45 = *(a2 - 1);
            if (*(_DWORD *)(*(void *)(v17 + 16 * v45) + 8) <= *(_DWORD *)(v27 + 8)) {
              goto LABEL_33;
            }
            *int64_t v12 = v45;
          }
          else
          {
            *unint64_t v16 = v18;
          }
          *(a2 - 1) = v25;
LABEL_33:
          --a4;
          uint64_t v32 = *v12;
          if (a5) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }
        if (v19 <= v26) {
          goto LABEL_33;
        }
        *int64_t v12 = v18;
        *(a2 - 1) = v24;
        uint64_t v30 = *v12;
        uint64_t v31 = *v16;
        if (*(_DWORD *)(*(void *)(v17 + 16 * v30) + 8) <= *(_DWORD *)(*(void *)(v17 + 16 * v31) + 8)) {
          goto LABEL_33;
        }
        *unint64_t v16 = v30;
        *int64_t v12 = v31;
        --a4;
        uint64_t v32 = v31;
        if (a5) {
          goto LABEL_57;
        }
LABEL_56:
        uint64_t v67 = *(void *)(v17 + 16 * v32);
        unsigned int v68 = *(_DWORD *)(v67 + 8);
        if (*(_DWORD *)(*(void *)(v17 + 16 * *(v12 - 1)) + 8) > v68) {
          goto LABEL_57;
        }
        if (v68 <= *(_DWORD *)(*(void *)(v17 + 16 * *(a2 - 1)) + 8))
        {
          v89 = v12 + 1;
          do
          {
            int64_t v12 = v89;
            if (v89 >= a2) {
              break;
            }
            ++v89;
          }
          while (v68 <= *(_DWORD *)(*(void *)(v17 + 16 * *v12) + 8));
        }
        else
        {
          do
          {
            unsigned int v88 = v12[1];
            ++v12;
          }
          while (v68 <= *(_DWORD *)(*(void *)(v17 + 16 * v88) + 8));
        }
        v90 = a2;
        if (v12 < a2)
        {
          v90 = a2;
          do
            unsigned int v91 = *--v90;
          while (v68 > *(_DWORD *)(*(void *)(v17 + 16 * v91) + 8));
        }
        if (v12 < v90)
        {
          unsigned int v92 = *v12;
          unsigned int v93 = *v90;
          do
          {
            *int64_t v12 = v93;
            unsigned int *v90 = v92;
            unsigned int v94 = *(_DWORD *)(v67 + 8);
            do
            {
              unsigned int v95 = v12[1];
              ++v12;
              unsigned int v92 = v95;
            }
            while (v94 <= *(_DWORD *)(*(void *)(v17 + 16 * v95) + 8));
            do
            {
              unsigned int v96 = *--v90;
              unsigned int v93 = v96;
            }
            while (v94 > *(_DWORD *)(*(void *)(v17 + 16 * v96) + 8));
          }
          while (v12 < v90);
        }
        v97 = v12 - 1;
        BOOL v5 = v12 - 1 >= v11;
        BOOL v6 = v12 - 1 == v11;
        if (v12 - 1 != v11) {
          unsigned int *v11 = *v97;
        }
        a5 = 0;
        unsigned int *v97 = v32;
      }
      uint64_t v20 = *v16;
      uint64_t v21 = *v12;
      unsigned int v22 = *(_DWORD *)(*(void *)(v17 + 16 * v20) + 8);
      uint64_t v23 = *(void *)(v17 + 16 * v21);
      if (v22 <= *(_DWORD *)(v23 + 8))
      {
        if (v19 > v22)
        {
          *unint64_t v16 = v18;
          *(a2 - 1) = v20;
          uint64_t v28 = *v16;
          uint64_t v29 = *v12;
          if (*(_DWORD *)(*(void *)(v17 + 16 * v28) + 8) > *(_DWORD *)(*(void *)(v17 + 16 * v29) + 8))
          {
            *int64_t v12 = v28;
            *unint64_t v16 = v29;
          }
        }
      }
      else
      {
        if (v19 <= v22)
        {
          *int64_t v12 = v20;
          *unint64_t v16 = v21;
          uint64_t v33 = *(a2 - 1);
          if (*(_DWORD *)(*(void *)(v17 + 16 * v33) + 8) <= *(_DWORD *)(v23 + 8)) {
            goto LABEL_24;
          }
          *unint64_t v16 = v33;
        }
        else
        {
          *int64_t v12 = v18;
        }
        *(a2 - 1) = v21;
      }
LABEL_24:
      uint64_t v34 = &v12[v15];
      unsigned int v37 = *(v34 - 1);
      unint64_t v35 = v34 - 1;
      unsigned int v36 = v37;
      uint64_t v38 = v12[1];
      unsigned int v39 = *(_DWORD *)(*(void *)(v17 + 16 * v37) + 8);
      uint64_t v40 = *(void *)(v17 + 16 * v38);
      uint64_t v41 = *(a2 - 2);
      unsigned int v42 = *(_DWORD *)(*(void *)(v17 + 16 * v41) + 8);
      if (v39 <= *(_DWORD *)(v40 + 8))
      {
        if (v42 > v39)
        {
          *unint64_t v35 = v41;
          *(a2 - 2) = v36;
          uint64_t v43 = *v35;
          uint64_t v44 = v12[1];
          if (*(_DWORD *)(*(void *)(v17 + 16 * v43) + 8) > *(_DWORD *)(*(void *)(v17 + 16 * v44) + 8))
          {
            v12[1] = v43;
            *unint64_t v35 = v44;
          }
        }
      }
      else
      {
        if (v42 <= v39)
        {
          v12[1] = v36;
          *unint64_t v35 = v38;
          uint64_t v46 = *(a2 - 2);
          if (*(_DWORD *)(*(void *)(v17 + 16 * v46) + 8) <= *(_DWORD *)(v40 + 8)) {
            goto LABEL_38;
          }
          *unint64_t v35 = v46;
        }
        else
        {
          v12[1] = v41;
        }
        *(a2 - 2) = v38;
      }
LABEL_38:
      v47 = &v12[v15];
      unsigned int v50 = v47[1];
      v48 = v47 + 1;
      unsigned int v49 = v50;
      uint64_t v51 = v12[2];
      unsigned int v52 = *(_DWORD *)(*(void *)(v17 + 16 * v50) + 8);
      uint64_t v53 = *(void *)(v17 + 16 * v51);
      uint64_t v54 = *(a2 - 3);
      unsigned int v55 = *(_DWORD *)(*(void *)(v17 + 16 * v54) + 8);
      if (v52 <= *(_DWORD *)(v53 + 8))
      {
        if (v55 > v52)
        {
          unsigned int *v48 = v54;
          *(a2 - 3) = v49;
          uint64_t v56 = *v48;
          uint64_t v57 = v12[2];
          if (*(_DWORD *)(*(void *)(v17 + 16 * v56) + 8) > *(_DWORD *)(*(void *)(v17 + 16 * v57) + 8))
          {
            v12[2] = v56;
            unsigned int *v48 = v57;
          }
        }
      }
      else
      {
        if (v55 <= v52)
        {
          v12[2] = v49;
          unsigned int *v48 = v51;
          uint64_t v58 = *(a2 - 3);
          if (*(_DWORD *)(*(void *)(v17 + 16 * v58) + 8) <= *(_DWORD *)(v53 + 8)) {
            goto LABEL_47;
          }
          unsigned int *v48 = v58;
        }
        else
        {
          v12[2] = v54;
        }
        *(a2 - 3) = v51;
      }
LABEL_47:
      uint64_t v59 = *v16;
      uint64_t v60 = *v35;
      unsigned int v61 = *(_DWORD *)(*(void *)(v17 + 16 * v59) + 8);
      uint64_t v62 = *(void *)(v17 + 16 * v60);
      uint64_t v63 = *v48;
      uint64_t v64 = *(void *)(v17 + 16 * v63);
      result = *(unsigned int *)(v64 + 8);
      if (v61 <= *(_DWORD *)(v62 + 8))
      {
        if (result <= v61) {
          goto LABEL_55;
        }
        *unint64_t v16 = v63;
        unsigned int *v48 = v59;
        v48 = v16;
        LODWORD(v59) = v60;
        if (*(_DWORD *)(v64 + 8) > *(_DWORD *)(v62 + 8))
        {
LABEL_54:
          *unint64_t v35 = v63;
          unsigned int *v48 = v60;
LABEL_55:
          unsigned int v66 = *v12;
          *int64_t v12 = v59;
          *unint64_t v16 = v66;
          --a4;
          uint64_t v32 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        unsigned int v87 = *v12;
        *int64_t v12 = v63;
        *unint64_t v16 = v87;
        --a4;
        uint64_t v32 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (result > v61) {
        goto LABEL_54;
      }
      *unint64_t v35 = v59;
      *unint64_t v16 = v60;
      unint64_t v35 = v16;
      LODWORD(v59) = v63;
      if (*(_DWORD *)(v64 + 8) > *(_DWORD *)(v62 + 8)) {
        goto LABEL_54;
      }
      unsigned int v65 = *v12;
      *int64_t v12 = v60;
      *unint64_t v16 = v65;
      --a4;
      uint64_t v32 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v69 = 0;
      uint64_t v70 = *(void *)(**(void **)a3 + 72);
      uint64_t v71 = *(void *)(v70 + 16 * v32);
      unsigned int v72 = *(_DWORD *)(v71 + 8);
      do
        uint64_t v73 = v12[++v69];
      while (*(_DWORD *)(*(void *)(v70 + 16 * v73) + 8) > v72);
      v74 = &v12[v69];
      v75 = a2;
      if (v69 == 1)
      {
        v75 = a2;
        do
        {
          if (v74 >= v75) {
            break;
          }
          unsigned int v77 = *--v75;
        }
        while (*(_DWORD *)(*(void *)(v70 + 16 * v77) + 8) <= v72);
      }
      else
      {
        do
          unsigned int v76 = *--v75;
        while (*(_DWORD *)(*(void *)(v70 + 16 * v76) + 8) <= v72);
      }
      if (v74 >= v75)
      {
        v85 = v74 - 1;
        if (v74 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *int64_t v12 = *v85;
        goto LABEL_75;
      }
      unsigned int v78 = *v75;
      unsigned int v79 = v73;
      v80 = v74;
      v81 = v75;
      do
      {
        unsigned int *v80 = v78;
        unsigned int *v81 = v79;
        unsigned int v82 = *(_DWORD *)(v71 + 8);
        do
        {
          unsigned int v83 = v80[1];
          ++v80;
          unsigned int v79 = v83;
        }
        while (*(_DWORD *)(*(void *)(v70 + 16 * v83) + 8) > v82);
        do
        {
          unsigned int v84 = *--v81;
          unsigned int v78 = v84;
        }
        while (*(_DWORD *)(*(void *)(v70 + 16 * v84) + 8) <= v82);
      }
      while (v80 < v81);
      v85 = v80 - 1;
      if (v80 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      unsigned int *v85 = v32;
      if (v74 < v75) {
        goto LABEL_78;
      }
      int64_t v12 = v85 + 1;
      if (result) {
        break;
      }
      if (!v86)
      {
LABEL_78:
        a5 = 0;
        int64_t v12 = v85 + 1;
      }
    }
    a2 = v85;
    if (!v86) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::PatternLowering::generate(mlir::pdl_to_pdl_interp::SwitchNode *,mlir::Block *,mlir::Value)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(_DWORD *)(*(void *)(*(void *)(**(void **)a3 + 72) + 16 * v8) + 8) > *(_DWORD *)(*(void *)(*(void *)(**(void **)a3 + 72) + 16 * v9) + 8))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      uint64_t v10 = *(void *)(**(void **)a3 + 72);
      uint64_t v11 = *a1;
      uint64_t v12 = a1[1];
      unsigned int v13 = *(_DWORD *)(*(void *)(v10 + 16 * v12) + 8);
      uint64_t v14 = *(void *)(v10 + 16 * v11);
      uint64_t v15 = *(a2 - 1);
      unsigned int v16 = *(_DWORD *)(*(void *)(v10 + 16 * v15) + 8);
      if (v13 <= *(_DWORD *)(v14 + 8))
      {
        if (v16 > v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          uint64_t v41 = *a1;
          uint64_t v40 = a1[1];
          if (*(_DWORD *)(*(void *)(v10 + 16 * v40) + 8) > *(_DWORD *)(*(void *)(v10 + 16 * v41) + 8))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else if (v16 <= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        uint64_t v50 = *(a2 - 1);
        if (*(_DWORD *)(*(void *)(v10 + 16 * v50) + 8) > *(_DWORD *)(v14 + 8))
        {
          a1[1] = v50;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      return 1;
    case 5:
      uint64_t v30 = a1 + 2;
      uint64_t v31 = a1 + 3;
      uint64_t v32 = *(a2 - 1);
      uint64_t v33 = a1[3];
      uint64_t v34 = *(void *)(**(void **)a3 + 72);
      if (*(_DWORD *)(*(void *)(v34 + 16 * v32) + 8) <= *(_DWORD *)(*(void *)(v34 + 16 * v33) + 8)) {
        return 1;
      }
      *uint64_t v31 = v32;
      *(a2 - 1) = v33;
      uint64_t v35 = *v31;
      uint64_t v36 = *v30;
      uint64_t v37 = *(void *)(v34 + 16 * v35);
      if (*(_DWORD *)(v37 + 8) <= *(_DWORD *)(*(void *)(v34 + 16 * v36) + 8)) {
        return 1;
      }
      _DWORD *v30 = v35;
      *uint64_t v31 = v36;
      uint64_t v38 = a1[1];
      if (*(_DWORD *)(v37 + 8) <= *(_DWORD *)(*(void *)(v34 + 16 * v38) + 8)) {
        return 1;
      }
      a1[1] = v35;
      a1[2] = v38;
      uint64_t v39 = *a1;
      if (*(_DWORD *)(v37 + 8) <= *(_DWORD *)(*(void *)(v34 + 16 * v39) + 8)) {
        return 1;
      }
      *a1 = v35;
      a1[1] = v39;
      return 1;
    default:
      uint64_t v18 = a1 + 2;
      uint64_t v17 = a1[2];
      uint64_t v19 = a1[1];
      uint64_t v20 = *(void *)(**(void **)a3 + 72);
      uint64_t v21 = *a1;
      unsigned int v22 = *(_DWORD *)(*(void *)(v20 + 16 * v19) + 8);
      uint64_t v23 = *(void *)(v20 + 16 * v21);
      uint64_t v24 = *(void *)(v20 + 16 * v17);
      unsigned int v25 = *(_DWORD *)(v24 + 8);
      if (v22 <= *(_DWORD *)(v23 + 8))
      {
        if (v25 <= v22) {
          goto LABEL_25;
        }
        a1[1] = v17;
        _DWORD *v18 = v19;
        unsigned int v28 = *(_DWORD *)(v24 + 8);
        unsigned int v29 = *(_DWORD *)(v23 + 8);
        unsigned int v26 = a1;
        uint64_t v27 = a1 + 1;
      }
      else
      {
        unsigned int v26 = a1;
        uint64_t v27 = a1 + 2;
        if (v25 > v22) {
          goto LABEL_24;
        }
        *a1 = v19;
        a1[1] = v21;
        unsigned int v28 = *(_DWORD *)(v24 + 8);
        unsigned int v29 = *(_DWORD *)(v23 + 8);
        unsigned int v26 = a1 + 1;
        uint64_t v27 = a1 + 2;
      }
      if (v28 <= v29) {
        goto LABEL_25;
      }
LABEL_24:
      *unsigned int v26 = v17;
      *uint64_t v27 = v21;
LABEL_25:
      unsigned int v42 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v43 = 0;
      uint64_t v44 = 12;
      break;
  }
  while (1)
  {
    uint64_t v45 = *v42;
    uint64_t v46 = *v18;
    uint64_t v47 = *(void *)(v20 + 16 * v45);
    if (*(_DWORD *)(v47 + 8) > *(_DWORD *)(*(void *)(v20 + 16 * v46) + 8)) {
      break;
    }
LABEL_34:
    uint64_t v18 = v42;
    v44 += 4;
    if (++v42 == a2) {
      return 1;
    }
  }
  uint64_t v48 = v44;
  do
  {
    *(unsigned int *)((char *)a1 + v48) = v46;
    uint64_t v49 = v48 - 4;
    if (v48 == 4)
    {
      *a1 = v45;
      if (++v43 != 8) {
        goto LABEL_34;
      }
      return v42 + 1 == a2;
    }
    uint64_t v46 = *(unsigned int *)((char *)a1 + v48 - 8);
    v48 -= 4;
  }
  while (*(_DWORD *)(v47 + 8) > *(_DWORD *)(*(void *)(v20 + 16 * v46) + 8));
  *(unsigned int *)((char *)a1 + v49) = v45;
  if (++v43 != 8) {
    goto LABEL_34;
  }
  return v42 + 1 == a2;
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::PatternLowering::generate(mlir::pdl_to_pdl_interp::SwitchNode *,mlir::Block *,mlir::Value)::$_0 &,unsigned int *>(_DWORD *result, _DWORD *a2, unsigned int *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *result;
  unsigned int v7 = *(_DWORD *)(*(void *)(a5 + 16 * v5) + 8);
  uint64_t v8 = *(void *)(a5 + 16 * v6);
  int v9 = *a3;
  unsigned int v10 = *(_DWORD *)(*(void *)(a5 + 16 * *a3) + 8);
  if (v7 <= *(_DWORD *)(v8 + 8))
  {
    if (v10 <= v7)
    {
      uint64_t v6 = *a3;
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v5;
    uint64_t v11 = *a2;
    uint64_t v12 = *result;
    if (*(_DWORD *)(*(void *)(a5 + 16 * v11) + 8) <= *(_DWORD *)(*(void *)(a5 + 16 * v12) + 8))
    {
      uint64_t v6 = v5;
      int v9 = v5;
      goto LABEL_14;
    }
    *BOOL result = v11;
    *a2 = v12;
    uint64_t v6 = *a3;
  }
  else
  {
    if (v10 <= v7)
    {
      *BOOL result = v5;
      *a2 = v6;
      int v9 = *a3;
      if (*(_DWORD *)(*(void *)(a5 + 16 * *a3) + 8) <= *(_DWORD *)(v8 + 8))
      {
        uint64_t v6 = *a3;
        goto LABEL_14;
      }
      *a2 = v9;
    }
    else
    {
      *BOOL result = v9;
    }
    *a3 = v6;
  }
  int v9 = v6;
LABEL_14:
  uint64_t v13 = *a4;
  if (*(_DWORD *)(*(void *)(a5 + 16 * v13) + 8) > *(_DWORD *)(*(void *)(a5 + 16 * v6) + 8))
  {
    *a3 = v13;
    *a4 = v9;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(_DWORD *)(*(void *)(a5 + 16 * v14) + 8) > *(_DWORD *)(*(void *)(a5 + 16 * v15) + 8))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *result;
      if (*(_DWORD *)(*(void *)(a5 + 16 * v16) + 8) > *(_DWORD *)(*(void *)(a5 + 16 * v17) + 8))
      {
        *BOOL result = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t llvm::MapVector<mlir::pdl_to_pdl_interp::Qualifier *,mlir::Block *,llvm::DenseMap<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Qualifier *,void>,llvm::detail::DenseMapPair<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int>>,llvm::SmallVector<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,mlir::Block *>,0u>>::try_emplace<mlir::Block *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v7 - 1);
  unsigned int v10 = (void *)(*(void *)a1 + 16 * v9);
  uint64_t v11 = *v10;
  if (v6 == *v10) {
    return *(void *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
  }
  uint64_t v20 = 0;
  int v21 = 1;
  while (v11 != -4096)
  {
    if (v20) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v11 == -8192;
    }
    if (v22) {
      uint64_t v20 = v10;
    }
    int v23 = v9 + v21++;
    uint64_t v9 = v23 & (v7 - 1);
    unsigned int v10 = (void *)(v8 + 16 * v9);
    uint64_t v11 = *v10;
    if (v6 == *v10) {
      return *(void *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
    }
  }
  uint64_t v24 = (uint64_t)(v20 ? v20 : v10);
  int v25 = *(_DWORD *)(a1 + 8);
  if (4 * v25 + 4 < 3 * v7)
  {
    if (v7 + ~v25 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_24:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1, v7);
  int v26 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v27 = v26 & ((v6 >> 4) ^ (v6 >> 9));
  uint64_t v24 = *(void *)a1 + 16 * v27;
  uint64_t v28 = *(void *)v24;
  if (v6 == *(void *)v24)
  {
LABEL_26:
    ++*(_DWORD *)(a1 + 8);
    if (v6 == -4096) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v32 = 0;
  int v33 = 1;
  while (v28 != -4096)
  {
    if (v32) {
      BOOL v34 = 0;
    }
    else {
      BOOL v34 = v28 == -8192;
    }
    if (v34) {
      uint64_t v32 = v24;
    }
    unsigned int v35 = v27 + v33++;
    unsigned int v27 = v35 & v26;
    uint64_t v24 = *(void *)a1 + 16 * (v35 & v26);
    uint64_t v28 = *(void *)v24;
    if (v6 == *(void *)v24) {
      goto LABEL_26;
    }
  }
  if (v32) {
    uint64_t v24 = v32;
  }
LABEL_6:
  uint64_t v13 = *(void *)v24;
  ++*(_DWORD *)(a1 + 8);
  if (v13 != -4096) {
LABEL_7:
  }
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *(void *)uint64_t v24 = v6;
  *(_DWORD *)(v24 + 8) = 0;
  uint64_t v14 = (uint64_t *)(a1 + 24);
  uint64_t v15 = *(unsigned int *)(a1 + 32);
  unsigned int v16 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v24 + 8) = v15;
  if (v15 >= v16)
  {
    uint64_t v29 = *a2;
    uint64_t v30 = *a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v14, (void *)(a1 + 40), v15 + 1, 16);
    uint64_t v31 = (void *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 32));
    *uint64_t v31 = v29;
    v31[1] = v30;
    LODWORD(v15) = *(_DWORD *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 24);
  }
  else
  {
    uint64_t v17 = *v14;
    uint64_t v18 = (uint64_t *)(*v14 + 16 * v15);
    uint64_t *v18 = *a2;
    v18[1] = *a3;
  }
  unsigned int v19 = v15 + 1;
  *(_DWORD *)(a1 + 32) = v19;
  return v17 + 16 * v19 - 16;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::SwitchOperandCountOp,mlir::Value &,std::vector<int> &,mlir::Block *&,std::vector<mlir::Block *> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v28[38] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_operand_count", (const unsigned __int8 *)0x1F, Context);
  if (!v14)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_operand_count";
    v25[3] = 31;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = (a4[1] - *a4) >> 2;
  uint64_t v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchOperandCountOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  unsigned int v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperandCountOp,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::SwitchResultCountOp,mlir::Value &,std::vector<int> &,mlir::Block *&,std::vector<mlir::Block *> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v28[38] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_result_count", (const unsigned __int8 *)0x1E, Context);
  if (!v14)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_result_count";
    v25[3] = 30;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = (a4[1] - *a4) >> 2;
  uint64_t v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchResultCountOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  unsigned int v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchResultCountOp,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::SwitchOperationNameOp,mlir::Value &,std::vector<mlir::OperationName> &,mlir::Block *&,std::vector<mlir::Block *> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  v28[38] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_operation_name", (const unsigned __int8 *)0x20, Context);
  if (!v14)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_operation_name";
    v25[3] = 32;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *(uint64_t **)a4;
  uint64_t v17 = (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3;
  uint64_t v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchOperationNameOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  unsigned int v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperationNameOp,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::SwitchTypesOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v28[38] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_types", (const unsigned __int8 *)0x17, Context);
  if (!v14)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_types";
    v25[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = (a4[1] - *a4) >> 3;
  uint64_t v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchTypesOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  unsigned int v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypesOp,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::SwitchTypeOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v28[38] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_type", (const unsigned __int8 *)0x16, Context);
  if (!v14)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_type";
    v25[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = (a4[1] - *a4) >> 3;
  uint64_t v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchTypeOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  unsigned int v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypeOp,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::SwitchAttributeOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v28[38] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_attribute", (const unsigned __int8 *)0x1B, Context);
  if (!v14)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_attribute";
    v25[3] = 27;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = (a4[1] - *a4) >> 3;
  uint64_t v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchAttributeOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  unsigned int v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchAttributeOp,void>::id) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

double mlir::Region::getOps<mlir::pdl::OperationOp>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&v12[8] = v18;
  uint64_t v4 = v10;
  *(void *)uint64_t v12 = v10;
  long long v11 = v9;
  *(void *)&v12[24] = v19;
  for (i = mlir::detail::op_filter_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::filter;
        *(void *)v12 != *(void *)&v12[24];
        uint64_t v4 = *(mlir::GenericProgramPoint **)v12)
  {
    uint64_t v5 = (uint64_t (*)(void))i;
    mlir::GenericProgramPoint::~GenericProgramPoint(v4);
    if (v5()) {
      break;
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  long long v14 = v11;
  long long v15 = *(_OWORD *)v12;
  long long v16 = *(_OWORD *)&v12[16];
  uint64_t v17 = i;
  *(void *)uint64_t v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(void *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  long long v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = mlir::detail::op_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::unwrap;
  *(void *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::filter;
  *(void *)(a2 + 120) = mlir::detail::op_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::unwrap;
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::RecordMatchOp,std::vector<mlir::Value> &,llvm::ArrayRef<mlir::Value>,mlir::SymbolRefAttr &,mlir::StringAttr &,mlir::ArrayAttr &,mlir::IntegerAttr,mlir::Block *&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  v30[38] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v23);
  uint64_t v18 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.record_match", (const unsigned __int8 *)0x17, Context);
  if (!v19)
  {
    __int16 v27 = 1283;
    v26[2] = (uint64_t)"pdl_interp.record_match";
    v26[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v25 = 259;
    llvm::operator+(v26, (uint64_t *)&v24, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v18);
  mlir::ValueRange::ValueRange(v29, *a3, (a3[1] - *a3) >> 3);
  mlir::ValueRange::ValueRange(v28, *(void *)a4, *(void *)(a4 + 8));
  mlir::pdl_interp::RecordMatchOp::build((uint64_t)a1, (uint64_t)v30, v29[0], v29[1], v28[0], v28[1], *a5, *a6, *a7, *a8, *a9);
  uint64_t v20 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((void *)v20 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::RecordMatchOp,void>::id) {
    int v21 = v20;
  }
  else {
    int v21 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v21;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::FuncOp,char const(&)[23],mlir::FunctionType>(mlir::StringAttr **a1, uint64_t a2, const char *a3, uint64_t *a4)
{
  v20[38] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.func", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"pdl_interp.func";
    v18[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  size_t v11 = strlen(a3);
  mlir::pdl_interp::FuncOp::build(a1, (uint64_t)v20, (uint64_t)a3, v11, *a4, 0, 0);
  uint64_t v12 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::FuncOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

void *anonymous namespace'::PatternLowering::generateRewriter(mlir::pdl::PatternOp,llvm::SmallVectorImpl<mlir::pdl_to_pdl_interp::Position *> &)::$_0::operator()(uint64_t a1, unint64_t a2)
{
  unint64_t v27 = a2;
  uint64_t v28 = 0;
  uint64_t v4 = *(uint64_t **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v5 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(*(uint64_t **)a1, &v27, &v28);
  long long v6 = v28;
  if (v5)
  {
    double result = (void *)v28[1];
    if (result) {
      return result;
    }
  }
  else
  {
    long long v6 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v4, (uint64_t)&v27, &v27, v28);
    void *v6 = v27;
    v6[1] = 0;
  }
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v27);
  uint64_t v9 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeOp,void>::id) {
    char v10 = (void *)DefiningOp;
  }
  else {
    char v10 = 0;
  }
  uint64_t v28 = v10;
  if (v10)
  {
    uint64_t FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v28);
    if (FastmathAttr)
    {
      size_t v11 = mlir::OpBuilder::create<mlir::pdl_interp::CreateAttributeOp,mlir::Attribute const&>((mlir::MLIRContext **)v3, v28[3], &FastmathAttr);
LABEL_23:
      double result = (void *)((char *)v11 - 16);
      v6[1] = result;
      return result;
    }
  }
  else
  {
    if (v9 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id) {
      uint64_t v12 = DefiningOp;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t FastmathAttr = v12;
    if (v12)
    {
      uint64_t v25 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&FastmathAttr);
      if (v25)
      {
        size_t v11 = mlir::OpBuilder::create<mlir::pdl_interp::CreateTypeOp,mlir::TypeAttr &>((mlir::MLIRContext **)v3, *(void *)(FastmathAttr + 24), &v25);
        goto LABEL_23;
      }
    }
    else
    {
      if (v9 == &mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id) {
        uint64_t v13 = DefiningOp;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v25 = v13;
      if (v13)
      {
        uint64_t v24 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v25);
        if (v24)
        {
          uint64_t v14 = *(void *)(v25 + 24);
          unint64_t v23 = *(void *)(v25 - 8) & 0xFFFFFFFFFFFFFFF8;
          size_t v11 = mlir::OpBuilder::create<mlir::pdl_interp::CreateTypesOp,mlir::pdl::RangeType,mlir::ArrayAttr &>((mlir::OpBuilder *)v3, v14, (uint64_t *)&v23, &v24);
          goto LABEL_23;
        }
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v15 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(v3 + 200), &v27, &v28))uint64_t v15 = v28[1]; {
  uint64_t v16 = *(void *)(a1 + 16);
  }
  uint64_t v17 = *(unsigned int *)(v16 + 8);
  if (v17 >= *(_DWORD *)(v16 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(a1 + 16), (void *)(v16 + 16), v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(v16 + 8);
  }
  *(void *)(*(void *)v16 + 8 * v17) = v15;
  ++*(_DWORD *)(v16 + 8);
  uint64_t v18 = **(void **)(a1 + 24);
  uint64_t v19 = *(void *)(((v18
                    + 16 * (((unint64_t)*(unsigned int *)(v18 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(v18 + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v18 + 40)
                  + 8);
  if (v19) {
    uint64_t v20 = (void *)(v19 - 8);
  }
  else {
    uint64_t v20 = 0;
  }
  unint64_t v21 = *(void *)(v27 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v27);
  double result = mlir::Block::addArgument(v20, v21, Loc);
  v6[1] = result;
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::ApplyRewriteOp,mlir::TypeRange,mlir::StringAttr &,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v25[38] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.apply_rewrite", (const unsigned __int8 *)0x18, Context);
  if (!v12)
  {
    __int16 v23 = 1283;
    v22[2] = (uint64_t)"pdl_interp.apply_rewrite";
    v22[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v11);
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v15 = *a4;
  mlir::ValueRange::ValueRange(v24, *(void *)a5, *(unsigned int *)(a5 + 8));
  mlir::pdl_interp::ApplyRewriteOp::build((uint64_t)a1, (uint64_t)v25, v14, v13, v15, v24[0], v24[1]);
  uint64_t v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyRewriteOp,void>::id) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v17;
}

void mlir::detail::FunctionOpInterfaceTrait<mlir::pdl_interp::FuncOp>::setType(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(v3 + 48);
  char v5 = *(void **)(v4 + 16);
  BOOL v6 = v5 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v5 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(void *)(v3 + 48);
  }
  if (v6)
  {
    uint64_t v12 = *(void *)(v4 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v12);
    if (Values)
    {
      uint64_t v11 = v4;
      goto LABEL_10;
    }
LABEL_11:
    uint64_t v9 = 0;
    goto LABEL_12;
  }
  unint64_t v8 = v7 | v4 & 0xFFFFFFFFFFFFFF00;
  uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::FunctionOpInterface>(v8 + 32);
  if (!v9)
  {
    uint64_t Values = *(void *)(v8 + 24);
    uint64_t v11 = *(void *)(v3 + 48);
LABEL_10:
    uint64_t v9 = mlir::Dialect::getRegisteredInterfaceForOp<mlir::FunctionOpInterface>(Values, v11);
  }
LABEL_12:
  mlir::function_interface_impl::setFunctionType(v3, v9, a2);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::CreateTypesOp,mlir::pdl::RangeType,mlir::ArrayAttr &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_types", (const unsigned __int8 *)0x17, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"pdl_interp.create_types";
    v17[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::pdl_interp::CreateTypesOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypesOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::ApplyRewriteOp,mlir::ValueTypeRange<mlir::ResultRange>,mlir::StringAttr,llvm::SmallVector<mlir::Value,2u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.apply_rewrite", (const unsigned __int8 *)0x18, Context);
  if (!v12)
  {
    __int16 v27 = 1283;
    v26[2] = (uint64_t)"pdl_interp.apply_rewrite";
    v26[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v26, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v11);
  uint64_t NextResultAtOffset = *a3;
  uint64_t v14 = a3[1];
  uint64_t v15 = a3[3];
  if (v14) {
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v14);
  }
  mlir::ValueRange::ValueRange((unint64_t *)v26, NextResultAtOffset, v15 - v14);
  mlir::TypeRange::TypeRange(v24, v26[0], v26[1]);
  uint64_t v16 = *a4;
  mlir::ValueRange::ValueRange(v23, *(void *)a5, *(unsigned int *)(a5 + 8));
  mlir::pdl_interp::ApplyRewriteOp::build((uint64_t)a1, (uint64_t)v25, v24[0], v24[1], v16, v23[0], v23[1]);
  uint64_t v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyRewriteOp,void>::id) {
    __int16 v18 = v17;
  }
  else {
    __int16 v18 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::EraseOp,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.erase", (const unsigned __int8 *)0x10, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.erase";
    v15[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::EraseOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::EraseOp,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::CreateOperationOp,llvm::StringRef,llvm::SmallVector<mlir::Value,2u> &,BOOL &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::Value,4u> &,mlir::ArrayAttr>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  v34[38] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  uint64_t v17 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_operation", (const unsigned __int8 *)0x1B, Context);
  if (!v18)
  {
    __int16 v30 = 1283;
    unint64_t v29[2] = (uint64_t)"pdl_interp.create_operation";
    v29[3] = 27;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v34);
    llvm::report_fatal_error((llvm::Twine *)v34, 1);
  }
  mlir::OperationState::OperationState(v34, a2, v17);
  uint64_t v20 = *a3;
  uint64_t v19 = a3[1];
  mlir::ValueRange::ValueRange(v33, *(void *)a4, *(unsigned int *)(a4 + 8));
  char v21 = *a5;
  mlir::ValueRange::ValueRange(v32, *(void *)a6, *(unsigned int *)(a6 + 8));
  mlir::ValueRange::ValueRange(v31, *(void *)a7, *(unsigned int *)(a7 + 8));
  mlir::pdl_interp::CreateOperationOp::build(a1, (uint64_t)v34, v20, v19, v33[0], v33[1], v21, v22, v32[0], v32[1], v31[0], v31[1], *a8);
  __int16 v23 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v34);
  if (*(_UNKNOWN **)(*((void *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateOperationOp,void>::id) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v34);
  return v24;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Value &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_results", (const unsigned __int8 *)0x16, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.get_results";
    v15[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::GetResultsOp::build(a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::GetValueTypeOp,mlir::pdl_interp::GetResultsOp &>(mlir::MLIRContext **a1, uint64_t a2, void *a3)
{
  v17[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_value_type", (const unsigned __int8 *)0x19, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.get_value_type";
    v15[3] = 25;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::GetValueTypeOp::build(a1, (uint64_t)v17, *a3 - 16);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetValueTypeOp,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Type &,mlir::Value &,unsigned long>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_results", (const unsigned __int8 *)0x16, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"pdl_interp.get_results";
    v19[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::GetResultsOp::build(a1, (uint64_t)v21, *a3, *a4, *a5 | 0x100000000);
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id) {
    __int16 v14 = v13;
  }
  else {
    __int16 v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::CreateRangeOp,mlir::pdl::RangeType,llvm::SmallVector<mlir::Value,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_range", (const unsigned __int8 *)0x17, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"pdl_interp.create_range";
    v18[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = *a3;
  mlir::ValueRange::ValueRange(v20, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::pdl_interp::CreateRangeOp::build((uint64_t)a1, (uint64_t)v21, v11, v20[0], v20[1]);
  char v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateRangeOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::pdl_interp::ReplaceOp,mlir::Value,llvm::SmallVector<mlir::Value,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.replace", (const unsigned __int8 *)0x12, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"pdl_interp.replace";
    v18[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = *a3;
  mlir::ValueRange::ValueRange(v20, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::pdl_interp::ReplaceOp::build((uint64_t)a1, (uint64_t)v21, v11, v20[0], v20[1]);
  char v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ReplaceOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

BOOL mlir::detail::op_filter_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id;
}

int32x2_t **llvm::ScopedHashTableScope<mlir::pdl_to_pdl_interp::Position *,mlir::Value,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Position *,void>,llvm::MallocAllocator>::~ScopedHashTableScope(int32x2_t **result)
{
  v1 = result;
  (*result)[3] = (int32x2_t)result[1];
  v2 = (uint64_t *)result[2];
  if (v2)
  {
    uint64_t v7 = v2[1];
    char v8 = *result;
    if (!v7)
    {
      __int32 v12 = v8[2].i32[0];
      if (v12)
      {
        int32x2_t v13 = *v8;
        uint64_t v14 = v2[2];
        __int32 v15 = v12 - 1;
        LODWORD(v16) = ((v14 >> 4) ^ (v14 >> 9)) & (v12 - 1);
        __int16 v17 = (uint64_t *)(*(void *)v8 + 16 * v16);
        uint64_t v18 = *v17;
        if (v14 != *v17)
        {
          int v23 = 1;
          do
          {
            if (v18 == -4096) {
              goto LABEL_5;
            }
            int v24 = v16 + v23++;
            uint64_t v16 = v24 & v15;
            uint64_t v18 = *(void *)(*(void *)&v13 + 16 * v16);
          }
          while (v14 != v18);
          __int16 v17 = (uint64_t *)(*(void *)&v13 + 16 * v16);
        }
        uint64_t *v17 = -8192;
        v8[1] = vadd_s32(v8[1], (int32x2_t)0x1FFFFFFFFLL);
      }
LABEL_5:
      v1[2] = (int32x2_t *)*v2;
      llvm::deallocate_buffer((llvm *)v2, (void *)0x20);
    }
    uint64_t v9 = v2 + 2;
    __int32 v10 = v8[2].i32[0];
    if (v10)
    {
      __int32 v3 = v10 - 1;
      unsigned int v4 = ((*v9 >> 4) ^ (*v9 >> 9)) & (v10 - 1);
      inserted = (uint64_t *)(*(void *)v8 + 16 * v4);
      uint64_t v6 = *inserted;
      if (*v9 == *inserted)
      {
LABEL_4:
        inserted[1] = v7;
        goto LABEL_5;
      }
      __int16 v19 = 0;
      int v20 = 1;
      while (v6 != -4096)
      {
        if (v19) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v6 == -8192;
        }
        if (v21) {
          __int16 v19 = inserted;
        }
        unsigned int v22 = v4 + v20++;
        unsigned int v4 = v22 & v3;
        inserted = (uint64_t *)(*(void *)v8 + 16 * (v22 & v3));
        uint64_t v6 = *inserted;
        if (*v9 == *inserted) {
          goto LABEL_4;
        }
      }
      if (v19) {
        uint64_t v11 = v19;
      }
      else {
        uint64_t v11 = inserted;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    inserted = llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>((uint64_t)v8, v11, v9);
    uint64_t v7 = v2[1];
    goto LABEL_4;
  }
  return result;
}

double mlir::Region::getOps<mlir::pdl::PatternOp>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&v12[8] = v18;
  unsigned int v4 = v10;
  *(void *)__int32 v12 = v10;
  long long v11 = v9;
  *(void *)&v12[24] = v19;
  for (i = mlir::detail::op_filter_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::filter;
        *(void *)v12 != *(void *)&v12[24];
        unsigned int v4 = *(mlir::GenericProgramPoint **)v12)
  {
    char v5 = (uint64_t (*)(void))i;
    mlir::GenericProgramPoint::~GenericProgramPoint(v4);
    if (v5()) {
      break;
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  long long v14 = v11;
  long long v15 = *(_OWORD *)v12;
  long long v16 = *(_OWORD *)&v12[16];
  __int16 v17 = i;
  *(void *)char v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(void *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  long long v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = mlir::detail::op_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::unwrap;
  *(void *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::filter;
  *(void *)(a2 + 120) = mlir::detail::op_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::unwrap;
  return result;
}

BOOL mlir::detail::op_filter_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id;
}

uint64_t mlir::pdl_to_pdl_interp::Position::getOperationDepth(uint64_t this)
{
  while (!this || *(_DWORD *)(this + 16))
  {
    this = *(void *)(this + 8);
    if (!this) {
      return this;
    }
  }
  return *(unsigned int *)(this + 32);
}

__n128 mlir::pdl_to_pdl_interp::AttributePosition::AttributePosition(uint64_t a1, __n128 *a2)
{
  *(_DWORD *)(a1 + 16) = 3;
  *(void *)a1 = &unk_1EC9AA9B8;
  *(void *)(a1 + 8) = 0;
  __n128 result = *a2;
  *(__n128 *)(a1 + 24) = *a2;
  unint64_t v3 = a2->n128_u64[0];
  *(void *)a1 = &unk_1EC9AAAB8;
  *(void *)(a1 + 8) = v3;
  return result;
}

__n128 mlir::pdl_to_pdl_interp::OperandPosition::OperandPosition(uint64_t a1, __n128 *a2)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)a1 = &unk_1EC9AA998;
  *(void *)(a1 + 8) = 0;
  __n128 result = *a2;
  *(__n128 *)(a1 + 24) = *a2;
  unint64_t v3 = a2->n128_u64[0];
  *(void *)a1 = &unk_1EC9AAA98;
  *(void *)(a1 + 8) = v3;
  return result;
}

__n128 mlir::pdl_to_pdl_interp::OperandGroupPosition::OperandGroupPosition(uint64_t a1, __n128 *a2)
{
  *(_DWORD *)(a1 + 16) = 2;
  *(void *)a1 = &unk_1EC9AAA18;
  *(void *)(a1 + 8) = 0;
  __n128 result = *a2;
  *(void *)(a1 + 40) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 24) = result;
  unint64_t v3 = a2->n128_u64[0];
  *(void *)a1 = &unk_1EC9AAB38;
  *(void *)(a1 + 8) = v3;
  return result;
}

BOOL mlir::pdl_to_pdl_interp::OperationPosition::isOperandDefiningOp(mlir::pdl_to_pdl_interp::OperationPosition *this)
{
  uint64_t v1 = *((void *)this + 1);
  return v1 && (*(_DWORD *)(v1 + 16) - 1) < 2;
}

void mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v41[80] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  unint64_t v3 = *(unsigned int *)(a1 + 44);
  uint64_t v39 = v41;
  uint64_t v40 = 0x1000000000;
  mlir::Region::getOps<mlir::pdl::PatternOp>((mlir::Region *)(((a1 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v4), (uint64_t)&v32);
  uint64_t v31 = v37;
  if (v33 != v38)
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v33);
    char v5 = (llvm *)v31();
    buildPredicateList(v5);
  }
  if (v40)
  {
    long long v6 = v39;
    while (1)
    {
      uint64_t v7 = (long long *)v6[2];
      if (v7 != (long long *)v6[3]) {
        break;
      }
      v6 += 5;
      if (v6 == (void *)((char *)v39 + 40 * v40))
      {
        int64_t v9 = 40 * v40;
        __int32 v10 = (char *)operator new(v9);
        __int16 v30 = (llvm **)v10;
        uint64_t v29 = v10;
        uint64_t v27 = *(void *)v39;
        uint64_t v28 = *((void *)v39 + 1);
        if (*((void *)v39 + 2) != *((void *)v39 + 3)) {
          llvm::deallocate_buffer(0, 0);
        }
        if (v10 < &v10[v9])
        {
          *(void *)__int32 v10 = v27;
          *((void *)v10 + 1) = v28;
          *((void *)v10 + 2) = 0;
          *((_DWORD *)v10 + 6) = 0;
          *(void *)(v10 + 28) = 0;
        }
        else
        {
          unint64_t v11 = 1;
          if (0x999999999999999ALL * (v9 >> 3) > 1) {
            unint64_t v11 = 0x999999999999999ALL * (v9 >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * (v9 >> 3) >= 0x333333333333333) {
            unint64_t v11 = 0x666666666666666;
          }
          if (v11 > 0x666666666666666) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          __int32 v12 = operator new(40 * v11);
          *__int32 v12 = v27;
          v12[1] = v28;
          v12[2] = 0;
          v12[3] = 0;
          *((_DWORD *)v12 + 6) = 0;
          *((_DWORD *)v12 + 7) = 0;
          *((_DWORD *)v12 + 8) = 0;
          int32x2_t v13 = (char *)v30;
          long long v14 = v12;
          if (v30 != (llvm **)v29)
          {
            do
            {
              *(_OWORD *)(v14 - 5) = *(_OWORD *)(v13 - 40);
              *(v14 - 3) = *((void *)v13 - 3);
              *((_DWORD *)v14 - 4) = *((_DWORD *)v13 - 4);
              *((_DWORD *)v13 - 4) = 0;
              *((_DWORD *)v14 - 3) = *((_DWORD *)v13 - 3);
              *((_DWORD *)v13 - 3) = 0;
              *((_DWORD *)v14 - 2) = *((_DWORD *)v13 - 2);
              v14 -= 5;
              *((void *)v13 - 3) = 0;
              *((_DWORD *)v13 - 2) = 0;
              v13 -= 40;
            }
            while (v13 != v29);
            llvm::deallocate_buffer(*(v30 - 3), (void *)(8 * *((unsigned int *)v30 - 2)));
          }
          if (v29) {
            operator delete(v29);
          }
        }
        llvm::deallocate_buffer(0, 0);
      }
    }
    long long v32 = *v7;
    int v33 = 0;
    int v34 = 0;
    v35[0] = 0;
    v35[1] = 0;
    int v36 = 0;
    buffer = llvm::allocate_buffer(0xE00uLL, (std::align_val_t)8uLL);
    void *buffer = -4096;
    buffer[1] = -4096;
    buffer[2] = 0;
    *((_DWORD *)buffer + 6) = 0;
    buffer[4] = 0;
    buffer[5] = 0;
    *((_DWORD *)buffer + 12) = 0;
    llvm::deallocate_buffer(0, 0);
  }
  *a2 = 0;
  foldSwitchToBool(a2);
  do
  {
    long long v15 = a2;
    uint64_t v16 = *a2;
    a2 = (uint64_t *)(*a2 + 24);
  }
  while (v16);
  __int16 v17 = (char *)operator new(0x30uLL);
  {
    *(void *)&long long v32 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ExitNode]";
    *((void *)&v32 + 1) = 83;
    unint64_t v20 = llvm::StringRef::find((uint64_t *)&v32, "DesiredTypeName = ", 0x12uLL, 0);
    if (*((void *)&v32 + 1) >= v20) {
      unint64_t v21 = v20;
    }
    else {
      unint64_t v21 = *((void *)&v32 + 1);
    }
    uint64_t v22 = v32 + v21;
    unint64_t v23 = *((void *)&v32 + 1) - v21;
    if (*((void *)&v32 + 1) - v21 >= 0x12) {
      uint64_t v24 = 18;
    }
    else {
      uint64_t v24 = *((void *)&v32 + 1) - v21;
    }
    unint64_t v25 = v23 - v24;
    if (v25 >= v25 - 1) {
      uint64_t v26 = v25 - 1;
    }
    else {
      uint64_t v26 = v25;
    }
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ExitNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v22 + v24, v26);
  }
  uint64_t v18 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ExitNode,void>::resolveTypeID(void)::id;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *((void *)v17 + 5) = v18;
  *(void *)__int16 v17 = &unk_1EC9AAB98;
  uint64_t v19 = *v15;
  *long long v15 = (uint64_t)v17;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  llvm::deallocate_buffer(0, 0);
}

void buildPredicateList(llvm *a1)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  v52[3] = a1;
  v52[0] = a1;
  v62[1] = 0;
  v62[0] = 0;
  LODWORD(v63) = 0;
  Body = (mlir::Region *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)v52);
  mlir::Region::getOps<mlir::pdl::OperationOp>(Body, (uint64_t)&v65);
  *(_OWORD *)uint64_t v58 = v65;
  *(_OWORD *)uint64_t v59 = v66;
  long long v60 = v67;
  long long v61 = v68;
  v2 = (mlir::GenericProgramPoint *)v66;
  uint64_t v50 = (mlir::GenericProgramPoint *)v69;
  if ((void)v66 == (void)v69)
  {
LABEL_69:
    mlir::pdl::PatternOp::getRewriter((mlir::pdl::PatternOp *)v52);
    *(void *)&long long v65 = v43;
    v58[0] = (void *)mlir::pdl::RewriteOp::getRoot((mlir::pdl::RewriteOp *)&v65);
    if (v58[0])
    {
      *(void *)&long long v65 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v62, (unint64_t *)v58, &v65))
      {
        *(void *)long long v65 = -8192;
        v62[1] = (llvm *)vadd_s32((int32x2_t)v62[1], (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    unsigned int v55 = v57;
    uint64_t v56 = 0x600000000;
    uint64_t v44 = (mlir::Region *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)v52);
    mlir::Region::getOps<mlir::pdl::OperationOp>(v44, (uint64_t)&v65);
    *(_OWORD *)uint64_t v58 = v65;
    *(_OWORD *)uint64_t v59 = v66;
    long long v60 = v67;
    long long v61 = v68;
    uint64_t v45 = (mlir::GenericProgramPoint *)v69;
LABEL_73:
    uint64_t v46 = v59[0];
    while (1)
    {
      if (v46 == v45) {
        llvm::deallocate_buffer(v62[0], (void *)(8 * v63));
      }
      mlir::GenericProgramPoint::~GenericProgramPoint(v46);
      *(void *)&long long v53 = (*((uint64_t (**)(void))&v61 + 1))() - 16;
      uint64_t v64 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v62, (unint64_t *)&v53, &v64)|| v64 == (char *)v62[0] + 8 * v63)
      {
        uint64_t v47 = v53;
        uint64_t v48 = v56;
        if (v56 >= (unint64_t)HIDWORD(v56))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 8);
          uint64_t v48 = v56;
        }
        *((void *)v55 + v48) = v47;
        LODWORD(v56) = v56 + 1;
      }
      while (1)
      {
        mlir::Region::OpIterator::operator++((uint64_t *)v58);
        uint64_t v46 = v59[0];
        if (v59[0] == *((mlir::GenericProgramPoint **)&v60 + 1)) {
          break;
        }
        uint64_t v49 = (unsigned int (*)(void))v61;
        mlir::GenericProgramPoint::~GenericProgramPoint(v59[0]);
        if (v49()) {
          goto LABEL_73;
        }
      }
    }
  }
LABEL_4:
  mlir::GenericProgramPoint::~GenericProgramPoint(v2);
  uint64_t v51 = (llvm *)(*((uint64_t (**)(void))&v61 + 1))();
  Operanduint64_t Values = mlir::pdl::OperationOp::getOperandValues((mlir::pdl::OperationOp *)&v51);
  if (!v4) {
    goto LABEL_66;
  }
  uint64_t v5 = OperandValues;
  uint64_t v6 = v4;
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t v54 = *(void *)(v5 + 32 * v7 + 24);
    uint64_t DefiningOp = (void *)mlir::Value::getDefiningOp((mlir::Value *)&v54);
    int64_t v9 = *(int **)(DefiningOp[6] + 16);
    if (DefiningOp)
    {
      if (v9 == &mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id) {
        break;
      }
    }
    if (v9 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id)
    {
      uint64_t v64 = DefiningOp;
      uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v64);
      *(void *)&long long v53 = Input;
      int v24 = (int)v63;
      if (!v63)
      {
        int v37 = 0;
        goto LABEL_55;
      }
      unint64_t v25 = Input;
      uint64_t v26 = v62[0];
      {
        unint64_t v41 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v41 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v41;
      }
      unint64_t v27 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v25) ^ HIDWORD(v25));
      unint64_t v28 = 0x9DDFEA08EB382D69 * (HIDWORD(v25) ^ (v27 >> 47) ^ v27);
      unsigned int v29 = (-348639895 * ((v28 >> 47) ^ v28)) & (v24 - 1);
      __int16 v30 = (void *)((char *)v26 + 8 * v29);
      uint64_t v31 = *v30;
      if ((void)v53 == *v30) {
        goto LABEL_7;
      }
      long long v32 = 0;
      int v33 = 1;
      while (v31 != -4096)
      {
        if (v32) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = v31 == -8192;
        }
        if (v34) {
          long long v32 = v30;
        }
        unsigned int v35 = v29 + v33++;
        unsigned int v29 = v35 & (v24 - 1);
        __int16 v30 = (void *)((char *)v26 + 8 * v29);
        uint64_t v31 = *v30;
        if ((void)v53 == *v30) {
          goto LABEL_7;
        }
      }
      if (v32) {
        uint64_t v39 = v32;
      }
      else {
        uint64_t v39 = v30;
      }
      int v37 = (int)v63;
      if (4 * LODWORD(v62[1]) + 4 < (3 * v63))
      {
        if ((int)v63 + ~LODWORD(v62[1]) - HIDWORD(v62[1]) <= v63 >> 3) {
          goto LABEL_56;
        }
        ++LODWORD(v62[1]);
        if (*v39 == -4096)
        {
LABEL_43:
          *uint64_t v39 = v53;
          goto LABEL_7;
        }
      }
      else
      {
LABEL_55:
        v37 *= 2;
LABEL_56:
        llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow((uint64_t)v62, v37);
        unsigned int v55 = 0;
        llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v62, (unint64_t *)&v53, &v55);
        uint64_t v39 = v55;
        ++LODWORD(v62[1]);
        if (*(void *)v55 == -4096) {
          goto LABEL_43;
        }
      }
      --HIDWORD(v62[1]);
      goto LABEL_43;
    }
LABEL_7:
    if (++v7 == v6)
    {
      do
      {
LABEL_66:
        mlir::Region::OpIterator::operator++((uint64_t *)v58);
        v2 = v59[0];
        if (v59[0] == *((mlir::GenericProgramPoint **)&v60 + 1)) {
          goto LABEL_3;
        }
        unsigned int v42 = (unsigned int (*)(void))v61;
        mlir::GenericProgramPoint::~GenericProgramPoint(v59[0]);
      }
      while (!v42());
      v2 = v59[0];
LABEL_3:
      if (v2 == v50) {
        goto LABEL_69;
      }
      goto LABEL_4;
    }
  }
  uint64_t v64 = DefiningOp;
  uint64_t v10 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v64);
  *(void *)&long long v53 = v10;
  int v11 = (int)v63;
  if (v63)
  {
    unint64_t v12 = v10;
    int32x2_t v13 = v62[0];
    {
      unint64_t v40 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v40 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v40;
    }
    unint64_t v14 = 0x9DDFEA08EB382D69
        * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v12) ^ HIDWORD(v12));
    unint64_t v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v12) ^ (v14 >> 47) ^ v14);
    unsigned int v16 = (-348639895 * ((v15 >> 47) ^ v15)) & (v11 - 1);
    __int16 v17 = (void *)((char *)v13 + 8 * v16);
    uint64_t v18 = *v17;
    if ((void)v53 == *v17) {
      goto LABEL_7;
    }
    uint64_t v19 = 0;
    int v20 = 1;
    while (v18 != -4096)
    {
      if (v19) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = v18 == -8192;
      }
      if (v21) {
        uint64_t v19 = v17;
      }
      unsigned int v22 = v16 + v20++;
      unsigned int v16 = v22 & (v11 - 1);
      __int16 v17 = (void *)((char *)v13 + 8 * v16);
      uint64_t v18 = *v17;
      if ((void)v53 == *v17) {
        goto LABEL_7;
      }
    }
    if (v19) {
      uint64_t v38 = v19;
    }
    else {
      uint64_t v38 = v17;
    }
    int v36 = (int)v63;
    if (4 * LODWORD(v62[1]) + 4 < (3 * v63))
    {
      if ((int)v63 + ~LODWORD(v62[1]) - HIDWORD(v62[1]) > v63 >> 3)
      {
        ++LODWORD(v62[1]);
        if (*v38 == -4096)
        {
LABEL_6:
          *uint64_t v38 = v53;
          goto LABEL_7;
        }
LABEL_38:
        --HIDWORD(v62[1]);
        goto LABEL_6;
      }
LABEL_49:
      llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow((uint64_t)v62, v36);
      unsigned int v55 = 0;
      llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v62, (unint64_t *)&v53, &v55);
      uint64_t v38 = v55;
      ++LODWORD(v62[1]);
      if (*(void *)v55 == -4096) {
        goto LABEL_6;
      }
      goto LABEL_38;
    }
  }
  else
  {
    int v36 = 0;
  }
  v36 *= 2;
  goto LABEL_49;
}

uint64_t propagatePattern(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (a3 == a4 || (uint64_t v6 = *(unsigned int *)(a2 + 32), !v6))
  {
LABEL_16:
    uint64_t v19 = operator new(0x40uLL);
    uint64_t v20 = *(void *)a2;
    uint64_t v21 = *(void *)(a2 + 8);
    uint64_t v22 = *a1;
    *a1 = 0;
    uint64_t v46 = v22;
    mlir::pdl_to_pdl_interp::SuccessNode::SuccessNode(v19, v20, v21, &v46);
    if (v46) {
      (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
    }
    uint64_t result = *a1;
    *a1 = (uint64_t)v19;
    if (result)
    {
      int v24 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v24();
    }
    return result;
  }
  char v8 = a3;
  uint64_t v9 = *(void *)(a2 + 16);
  unsigned int v10 = v6 - 1;
  int v11 = (uint64_t *)(v9 + 8 * v6);
  while (1)
  {
    while (1)
    {
      uint64_t v12 = *v8;
      LODWORD(v13) = ((*v8 >> 4) ^ (*v8 >> 9)) & v10;
      unint64_t v14 = (uint64_t *)(v9 + 8 * v13);
      uint64_t v15 = *v14;
      if (*v14 != *v8)
      {
        int v16 = 1;
        while (v15 != -4096)
        {
          int v17 = v13 + v16++;
          uint64_t v13 = v17 & v10;
          uint64_t v15 = *(void *)(v9 + 8 * v13);
          if (v15 == v12)
          {
            if ((uint64_t *)(v9 + 8 * v13) == v11) {
              goto LABEL_6;
            }
            goto LABEL_12;
          }
        }
        goto LABEL_6;
      }
      if (v14 != v11) {
        break;
      }
LABEL_6:
      if (++v8 == a4) {
        goto LABEL_16;
      }
    }
LABEL_12:
    uint64_t v18 = (void *)*a1;
    if (!*a1)
    {
      unint64_t v25 = operator new(0x58uLL);
      uint64_t v26 = mlir::pdl_to_pdl_interp::SwitchNode::SwitchNode((uint64_t)v25, *(void *)v12, *(void *)(v12 + 8));
      uint64_t v27 = *a1;
      *a1 = v26;
      if (v27)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        uint64_t v26 = *a1;
      }
      uint64_t v28 = *(void *)(*v8 + 32);
      uint64_t v29 = *(unsigned int *)(*v8 + 48);
      if (v29)
      {
        LODWORD(v30) = ((*(void *)a2 >> 4) ^ (*(void *)a2 >> 9)) & (v29 - 1);
        uint64_t v31 = (uint64_t *)(v28 + 16 * v30);
        uint64_t v32 = *v31;
        if (*v31 == *(void *)a2)
        {
LABEL_31:
          uint64_t v35 = v26 + 48;
          uint64_t v36 = v31[1];
          goto LABEL_40;
        }
        int v33 = 1;
        while (v32 != -4096)
        {
          int v34 = v30 + v33++;
          uint64_t v30 = v34 & (v29 - 1);
          uint64_t v32 = *(void *)(v28 + 16 * v30);
          if (v32 == *(void *)a2)
          {
            uint64_t v31 = (uint64_t *)(v28 + 16 * v30);
            goto LABEL_31;
          }
        }
      }
      uint64_t v31 = (uint64_t *)(v28 + 16 * v29);
      goto LABEL_31;
    }
    if (v18[1] == *(void *)v12 && v18[2] == *(void *)(v12 + 8)) {
      break;
    }
    a1 = v18 + 3;
    if (v8 == a4) {
      goto LABEL_16;
    }
  }
  uint64_t v37 = *(void *)(v12 + 32);
  uint64_t v38 = *(unsigned int *)(v12 + 48);
  if (!v38) {
    goto LABEL_38;
  }
  LODWORD(v39) = ((*(void *)a2 >> 4) ^ (*(void *)a2 >> 9)) & (v38 - 1);
  unint64_t v40 = (uint64_t *)(v37 + 16 * v39);
  uint64_t v41 = *v40;
  if (*v40 != *(void *)a2)
  {
    int v42 = 1;
    while (v41 != -4096)
    {
      int v43 = v39 + v42++;
      uint64_t v39 = v43 & (v38 - 1);
      uint64_t v41 = *(void *)(v37 + 16 * v39);
      if (v41 == *(void *)a2)
      {
        unint64_t v40 = (uint64_t *)(v37 + 16 * v39);
        goto LABEL_39;
      }
    }
LABEL_38:
    unint64_t v40 = (uint64_t *)(v37 + 16 * v38);
  }
LABEL_39:
  uint64_t v35 = (uint64_t)(v18 + 6);
  uint64_t v36 = v40[1];
LABEL_40:
  uint64_t v46 = v36;
  uint64_t v47 = 0;
  uint64_t v44 = llvm::MapVector<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>,llvm::DenseMap<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Qualifier *,void>,llvm::detail::DenseMapPair<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int>>,llvm::SmallVector<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>,0u>>::try_emplace<std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>(v35, &v46, &v47);
  uint64_t v45 = v47;
  uint64_t v47 = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  return propagatePattern(v44 + 8, a2, v8 + 1, a4);
}

void *foldSwitchToBool(void *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    v2 = result;
    uint64_t v3 = *(void *)(v1 + 40);
    {
      if (v18)
      {
        uint64_t v46 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::SwitchNode]";
        unint64_t v47 = 85;
        unint64_t v19 = llvm::StringRef::find((uint64_t *)&v46, "DesiredTypeName = ", 0x12uLL, 0);
        if (v47 >= v19) {
          unint64_t v20 = v19;
        }
        else {
          unint64_t v20 = v47;
        }
        uint64_t v21 = &v46[v20];
        unint64_t v22 = v47 - v20;
        if (v47 - v20 >= 0x12) {
          uint64_t v23 = 18;
        }
        else {
          uint64_t v23 = v47 - v20;
        }
        unint64_t v24 = v22 - v23;
        if (v24 >= v24 - 1) {
          uint64_t v25 = v24 - 1;
        }
        else {
          uint64_t v25 = v24;
        }
        mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SwitchNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v21[v23], v25);
      }
    }
    if (v3 == v4[17])
    {
      uint64_t v8 = *(unsigned int *)(v1 + 80);
      if (v8)
      {
        uint64_t v9 = 16 * v8;
        uint64_t v10 = *(void *)(v1 + 72) + 8;
        do
        {
          foldSwitchToBool(v10);
          v10 += 16;
          v9 -= 16;
        }
        while (v9);
        if (*(_DWORD *)(v1 + 80) == 1)
        {
          int v11 = *(long long **)(v1 + 72);
          uint64_t v12 = *v2;
          long long v45 = *(_OWORD *)(*v2 + 8);
          uint64_t v13 = (char *)operator new(0x40uLL);
          long long v14 = *v11;
          *((void *)v11 + 1) = 0;
          uint64_t v15 = *(void *)(v12 + 24);
          *(void *)(v12 + 24) = 0;
          {
            int v34 = v13;
            long long v44 = v14;
            long long v14 = v44;
            int v36 = v35;
            uint64_t v13 = v34;
            if (v36)
            {
              uint64_t v46 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::BoolNode]";
              unint64_t v47 = 83;
              unint64_t v37 = llvm::StringRef::find((uint64_t *)&v46, "DesiredTypeName = ", 0x12uLL, 0);
              if (v47 >= v37) {
                unint64_t v38 = v37;
              }
              else {
                unint64_t v38 = v47;
              }
              uint64_t v39 = &v46[v38];
              unint64_t v40 = v47 - v38;
              if (v47 - v38 >= 0x12) {
                uint64_t v41 = 18;
              }
              else {
                uint64_t v41 = v47 - v38;
              }
              unint64_t v42 = v40 - v41;
              if (v42 >= v42 - 1) {
                uint64_t v43 = v42 - 1;
              }
              else {
                uint64_t v43 = v42;
              }
              mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::BoolNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v39[v41], v43);
              long long v14 = v44;
              uint64_t v13 = v34;
            }
          }
          uint64_t v16 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::BoolNode,void>::resolveTypeID(void)::id;
          *(_OWORD *)(v13 + 8) = v45;
          *((void *)v13 + 3) = v15;
          *((void *)v13 + 4) = 0;
          *((void *)v13 + 5) = v16;
          *(void *)uint64_t v13 = &unk_1EC9AAB78;
          *((_OWORD *)v13 + 3) = v14;
          uint64_t v17 = *v2;
          void *v2 = v13;
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
        }
      }
    }
    else
    {
      uint64_t v5 = *v2;
      uint64_t v6 = *(void *)(*v2 + 40);
      {
        if (v26)
        {
          uint64_t v46 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::BoolNode]";
          unint64_t v47 = 83;
          unint64_t v27 = llvm::StringRef::find((uint64_t *)&v46, "DesiredTypeName = ", 0x12uLL, 0);
          if (v47 >= v27) {
            unint64_t v28 = v27;
          }
          else {
            unint64_t v28 = v47;
          }
          uint64_t v29 = &v46[v28];
          unint64_t v30 = v47 - v28;
          if (v47 - v28 >= 0x12) {
            uint64_t v31 = 18;
          }
          else {
            uint64_t v31 = v47 - v28;
          }
          unint64_t v32 = v30 - v31;
          if (v32 >= v32 - 1) {
            uint64_t v33 = v32 - 1;
          }
          else {
            uint64_t v33 = v32;
          }
          mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::BoolNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v29[v31], v33);
        }
      }
      if (v6 == v7[15]) {
        foldSwitchToBool(v5 + 56);
      }
    }
    return (void *)foldSwitchToBool(*v2 + 24);
  }
  return result;
}

void *mlir::pdl_to_pdl_interp::SuccessNode::SuccessNode(void *result, uint64_t a2, uint64_t a3, void *a4)
{
  {
    uint64_t v18 = a3;
    unint64_t v19 = result;
    uint64_t v16 = a4;
    uint64_t v17 = a2;
    a4 = v16;
    a2 = v17;
    int v8 = v7;
    a3 = v18;
    uint64_t result = v19;
    if (v8)
    {
      unint64_t v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::SuccessNode]";
      unint64_t v21 = 86;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v21;
      }
      int v11 = &v20[v10];
      unint64_t v12 = v21 - v10;
      if (v21 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v21 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SuccessNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      a4 = v16;
      a2 = v17;
      a3 = v18;
      uint64_t result = v19;
    }
  }
  __guard v5 = v4[19];
  uint64_t v6 = *a4;
  *a4 = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  result[4] = 0;
  result[5] = v5;
  result[6] = a2;
  *uint64_t result = &unk_1EC9AA8F8;
  result[7] = a3;
  return result;
}

uint64_t mlir::pdl_to_pdl_interp::SwitchNode::SwitchNode(uint64_t result, uint64_t a2, uint64_t a3)
{
  {
    uint64_t v15 = a3;
    uint64_t v16 = result;
    uint64_t v14 = a2;
    a2 = v14;
    a3 = v15;
    int v6 = v5;
    uint64_t result = v16;
    if (v6)
    {
      uint64_t v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::SwitchNode]";
      unint64_t v18 = 85;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v18;
      }
      unint64_t v9 = &v17[v8];
      unint64_t v10 = v18 - v8;
      if (v18 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v18 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SwitchNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      a2 = v14;
      a3 = v15;
      uint64_t result = v16;
    }
  }
  __guard v4 = v3[17];
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = v4;
  *(void *)(result + 48) = 0;
  *(void *)uint64_t result = &unk_1EC9AA8B8;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 72) = result + 88;
  *(void *)(result + 80) = 0;
  return result;
}

void mlir::pdl_to_pdl_interp::MatcherNode::~MatcherNode(mlir::pdl_to_pdl_interp::MatcherNode *this)
{
  *(void *)this = &unk_1EC9AA8D8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1EC9AA8D8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  operator delete(this);
}

void mlir::pdl_to_pdl_interp::BoolNode::~BoolNode(mlir::pdl_to_pdl_interp::BoolNode *this)
{
  *(void *)this = &unk_1EC9AAB78;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1EC9AA8D8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1EC9AAB78;
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1EC9AA8D8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  operator delete(this);
}

void mlir::pdl_to_pdl_interp::SuccessNode::~SuccessNode(mlir::pdl_to_pdl_interp::SuccessNode *this)
{
  *(void *)this = &unk_1EC9AA8D8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1EC9AA8D8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  operator delete(this);
}

void mlir::pdl_to_pdl_interp::SwitchNode::~SwitchNode(mlir::pdl_to_pdl_interp::SwitchNode *this)
{
  *(void *)this = &unk_1EC9AA8B8;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = *((unsigned int *)this + 20);
  if (v3)
  {
    uint64_t v4 = v2 - 8;
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = *(void *)&v4[v5];
      *(void *)&v4[v5] = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5 -= 16;
    }
    while (v5);
    uint64_t v2 = (char *)*((void *)this + 9);
  }
  if (v2 != (char *)this + 88) {
    free(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 6), (void *)(16 * *((unsigned int *)this + 16)));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  *(void *)this = &unk_1EC9AA8B8;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = *((unsigned int *)this + 20);
  if (v3)
  {
    uint64_t v4 = v2 - 8;
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = *(void *)&v4[v5];
      *(void *)&v4[v5] = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5 -= 16;
    }
    while (v5);
    uint64_t v2 = (char *)*((void *)this + 9);
  }
  if (v2 != (char *)this + 88) {
    free(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 6), (void *)(16 * *((unsigned int *)this + 16)));
}

void *sub_180697DDC()
{
  void *v0 = &unk_1EC9AA8D8;
  uint64_t v1 = v0[4];
  v0[4] = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  uint64_t v2 = v0[3];
  v0[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return v0;
}

void sub_180697F1C()
{
  void *v0 = &unk_1EC9AA8D8;
  uint64_t v1 = v0[4];
  v0[4] = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  uint64_t v2 = v0[3];
  v0[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  operator delete(v0);
}

void getTreePredicates(uint64_t **a1, uint64_t *a2, unsigned __int8 ***a3, uint64_t *a4, uint64_t a5)
{
  v107 = a2;
  v108[0] = 0;
  int v9 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(a4, (unint64_t *)&v107, v108);
  unint64_t v10 = v108[0];
  if (v9)
  {
    uint64_t v11 = *(void **)(*(void *)(mlir::Value::getDefiningOp((mlir::Value *)&v107) + 48) + 16);
    if (v11 != &mlir::detail::TypeIDResolver<mlir::pdl::AttributeOp,void>::id
      && v11 != &mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id
      && v11 != &mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id
      && v11 != &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id
      && v11 != &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id)
    {
      return;
    }
    unsigned int OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v10[1]);
    unsigned int v17 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(a5);
    unint64_t v18 = (void *)a5;
    if (OperationDepth < v17) {
      unint64_t v18 = (void *)v10[1];
    }
    v108[0] = v18;
    uint64_t v19 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(*a3, 0, 0, v108);
    uint64_t v20 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*a3);
    uint64_t v21 = v20;
    uint64_t v23 = a1[1];
    unint64_t v22 = (unint64_t)a1[2];
    if ((unint64_t)v23 < v22)
    {
      if (OperationDepth >= v17) {
        a5 = v10[1];
      }
      uint64_t *v23 = a5;
      v23[1] = v19;
      unint64_t v23[2] = v20;
      a1[1] = v23 + 3;
      return;
    }
    uint64_t v106 = a1;
    unint64_t v32 = (unint64_t *)*a1;
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (v23 - *a1);
    unint64_t v34 = v33 + 1;
    if (v33 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v32) >> 3);
      if (2 * v35 > v34) {
        unint64_t v34 = 2 * v35;
      }
      if (v35 >= 0x555555555555555) {
        unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36 <= 0xAAAAAAAAAAAAAAALL)
      {
        uint64_t v37 = 24 * v36;
        unint64_t v38 = (char *)operator new(24 * v36);
        uint64_t v39 = (uint64_t *)&v38[24 * v33];
        if (OperationDepth >= v17) {
          a5 = v10[1];
        }
        *uint64_t v39 = a5;
        unint64_t v40 = v39 + 3;
        uint64_t v41 = &v38[v37];
        unint64_t v42 = &v38[24 * v33];
        *((void *)v42 + 1) = v19;
        *((void *)v42 + 2) = v21;
        if (v23 == (uint64_t *)v32)
        {
          uint64_t v43 = v106;
          *uint64_t v106 = v39;
          v106[1] = v40;
          v106[2] = (uint64_t *)v41;
          if (!v32) {
            goto LABEL_43;
          }
        }
        else
        {
          uint64_t v43 = v106;
          do
          {
            long long v44 = *(_OWORD *)(v23 - 3);
            long long v45 = v39 - 3;
            *(v39 - 1) = *(v23 - 1);
            *(_OWORD *)(v39 - 3) = v44;
            v23 -= 3;
            v39 -= 3;
          }
          while (v23 != (uint64_t *)v32);
          *uint64_t v106 = v45;
          v106[1] = v40;
          v106[2] = (uint64_t *)v41;
          if (!v32) {
            goto LABEL_43;
          }
        }
        operator delete(v32);
LABEL_43:
        v43[1] = v40;
        return;
      }
LABEL_125:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_124:
    abort();
  }
  unint64_t v24 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a4, (uint64_t)&v107, (unint64_t *)&v107, v108[0]);
  void *v24 = v107;
  v24[1] = a5;
  int v25 = *(_DWORD *)(a5 + 16);
  if (a5 && v25 == 3)
  {
    v109[0] = v107;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v109);
    uint64_t IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>((uint64_t *)*a3);
    uint64_t v27 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*a3);
    uint64_t v28 = v27;
    unint64_t v30 = a1[1];
    unint64_t v29 = (unint64_t)a1[2];
    if ((unint64_t)v30 < v29)
    {
      uint64_t *v30 = a5;
      v30[1] = IsNotNull;
      uint64_t v31 = v30 + 3;
      v30[2] = v27;
      goto LABEL_56;
    }
    uint64_t v46 = a1;
    unint64_t v47 = *a1;
    unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (v30 - *a1);
    unint64_t v49 = v48 + 1;
    if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_124;
    }
    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)v47) >> 3);
    if (2 * v50 > v49) {
      unint64_t v49 = 2 * v50;
    }
    if (v50 >= 0x555555555555555) {
      unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v51 = v49;
    }
    if (v51 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_125;
    }
    uint64_t v52 = 24 * v51;
    long long v53 = (char *)operator new(24 * v51);
    uint64_t v54 = (uint64_t *)&v53[24 * v48];
    unsigned int v55 = &v53[v52];
    uint64_t *v54 = a5;
    v54[1] = IsNotNull;
    v54[2] = v28;
    uint64_t v31 = v54 + 3;
    if (v30 == v47)
    {
      a1 = v46;
      *uint64_t v46 = v54;
      v46[1] = v31;
      v46[2] = (uint64_t *)v55;
      if (v47) {
LABEL_55:
      }
        operator delete(v47);
    }
    else
    {
      a1 = v46;
      do
      {
        long long v56 = *(_OWORD *)(v30 - 3);
        uint64_t v57 = v54 - 3;
        *(v54 - 1) = *(v30 - 1);
        *(_OWORD *)(v54 - 3) = v56;
        v30 -= 3;
        v54 -= 3;
      }
      while (v30 != v47);
      *uint64_t v46 = v57;
      v46[1] = v31;
      v46[2] = (uint64_t *)v55;
      if (v47) {
        goto LABEL_55;
      }
    }
LABEL_56:
    a1[1] = v31;
    uint64_t ValueType = mlir::pdl::AttributeOp::getValueType((mlir::pdl::AttributeOp *)&DefiningOp);
    if (ValueType)
    {
      uint64_t v59 = ValueType;
      v108[0] = (void *)a5;
      uint64_t v60 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*a3, 0, 0, v108);
      getTreePredicates(a1, v59, a3, a4, v60);
      return;
    }
    uint64_t FastmathAttr = (void *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&DefiningOp);
    if (FastmathAttr)
    {
      v108[0] = FastmathAttr;
      uint64_t v70 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeQuestion>((uint64_t *)*a3);
      uint64_t v71 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(*a3, 0, 0, v108);
      uint64_t v73 = a1[1];
      unint64_t v88 = (unint64_t)a1[2];
      if ((unint64_t)v73 < v88) {
        goto LABEL_85;
      }
      v74 = a1;
      v75 = (unint64_t *)*a1;
      unint64_t v90 = 0xAAAAAAAAAAAAAAABLL * (v73 - *a1);
      unint64_t v91 = v90 + 1;
      if (v90 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_124;
      }
      unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - (void)v75) >> 3);
      if (2 * v92 > v91) {
        unint64_t v91 = 2 * v92;
      }
      if (v92 >= 0x555555555555555) {
        unint64_t v93 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v93 = v91;
      }
      if (v93 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_125;
      }
      uint64_t v94 = 24 * v93;
      unsigned int v95 = (char *)operator new(24 * v93);
      unsigned int v82 = (uint64_t *)&v95[24 * v90];
      unsigned int v83 = &v95[v94];
      *unsigned int v82 = a5;
      v82[1] = v70;
      v82[2] = v71;
      unsigned int v84 = v82 + 3;
      if (v73 != (uint64_t *)v75)
      {
        a1 = v74;
        do
        {
          long long v96 = *(_OWORD *)(v73 - 3);
          BOOL v86 = v82 - 3;
          *(v82 - 1) = *(v73 - 1);
          *(_OWORD *)(v82 - 3) = v96;
          v73 -= 3;
          v82 -= 3;
        }
        while (v73 != (uint64_t *)v75);
        goto LABEL_120;
      }
LABEL_119:
      BOOL v86 = v82;
      a1 = v74;
      goto LABEL_120;
    }
    return;
  }
  if (a5 && !v25)
  {
    getTreePredicates((unint64_t **)a1, (uint64_t)v107, (uint64_t **)a3, (uint64_t)a4, (mlir::pdl_to_pdl_interp::OperationPosition *)a5, 0);
    return;
  }
  if (v25 == 6)
  {
    v109[0] = v107;
    uint64_t v61 = mlir::Value::getDefiningOp((mlir::Value *)v109);
    if (v61
      && ((uint64_t v62 = *(void **)(*(void *)(v61 + 48) + 16),
           BOOL v63 = v62 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id,
           v62 != &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id)
        ? (uint64_t v64 = 0)
        : (uint64_t v64 = v61),
          uint64_t DefiningOp = v64,
          v63))
    {
      v97 = (void *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&DefiningOp);
      if (!v97) {
        return;
      }
      v108[0] = v97;
      uint64_t v70 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeQuestion>((uint64_t *)*a3);
      uint64_t v71 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(*a3, 0, 0, v108);
      uint64_t v73 = a1[1];
      unint64_t v98 = (unint64_t)a1[2];
      if ((unint64_t)v73 < v98) {
        goto LABEL_85;
      }
      v74 = a1;
      v75 = (unint64_t *)*a1;
      unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * (v73 - *a1);
      unint64_t v100 = v99 + 1;
      if (v99 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_124;
      }
      unint64_t v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (void)v75) >> 3);
      if (2 * v101 > v100) {
        unint64_t v100 = 2 * v101;
      }
      if (v101 >= 0x555555555555555) {
        unint64_t v102 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v102 = v100;
      }
      if (v102 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_125;
      }
      uint64_t v103 = 24 * v102;
      uint64_t v104 = (char *)operator new(24 * v102);
      unsigned int v82 = (uint64_t *)&v104[24 * v99];
      unsigned int v83 = &v104[v103];
      *unsigned int v82 = a5;
      v82[1] = v70;
      v82[2] = v71;
      unsigned int v84 = v82 + 3;
      if (v73 == (uint64_t *)v75) {
        goto LABEL_119;
      }
      a1 = v74;
      do
      {
        long long v105 = *(_OWORD *)(v73 - 3);
        BOOL v86 = v82 - 3;
        *(v82 - 1) = *(v73 - 1);
        *(_OWORD *)(v82 - 3) = v105;
        v73 -= 3;
        v82 -= 3;
      }
      while (v73 != (uint64_t *)v75);
    }
    else
    {
      uint64_t v65 = mlir::Value::getDefiningOp((mlir::Value *)v109);
      if (!v65) {
        return;
      }
      long long v66 = *(void **)(*(void *)(v65 + 48) + 16);
      BOOL v67 = v66 == &mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id;
      long long v68 = v66 == &mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id ? (uint64_t *)v65 : 0;
      uint64_t v114 = v68;
      if (!v67) {
        return;
      }
      long long v69 = (void *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v114);
      if (!v69) {
        return;
      }
      v108[0] = v69;
      uint64_t v70 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeQuestion>((uint64_t *)*a3);
      uint64_t v71 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(*a3, 0, 0, v108);
      uint64_t v73 = a1[1];
      unint64_t v72 = (unint64_t)a1[2];
      if ((unint64_t)v73 < v72)
      {
LABEL_85:
        *uint64_t v73 = a5;
        v73[1] = v70;
        unsigned int v84 = v73 + 3;
        v73[2] = v71;
LABEL_122:
        a1[1] = v84;
        return;
      }
      v74 = a1;
      v75 = (unint64_t *)*a1;
      unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * (v73 - *a1);
      unint64_t v77 = v76 + 1;
      if (v76 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_124;
      }
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - (void)v75) >> 3);
      if (2 * v78 > v77) {
        unint64_t v77 = 2 * v78;
      }
      if (v78 >= 0x555555555555555) {
        unint64_t v79 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_125;
      }
      uint64_t v80 = 24 * v79;
      v81 = (char *)operator new(24 * v79);
      unsigned int v82 = (uint64_t *)&v81[24 * v76];
      unsigned int v83 = &v81[v80];
      *unsigned int v82 = a5;
      v82[1] = v70;
      v82[2] = v71;
      unsigned int v84 = v82 + 3;
      if (v73 == (uint64_t *)v75) {
        goto LABEL_119;
      }
      a1 = v74;
      do
      {
        long long v85 = *(_OWORD *)(v73 - 3);
        BOOL v86 = v82 - 3;
        *(v82 - 1) = *(v73 - 1);
        *(_OWORD *)(v82 - 3) = v85;
        v73 -= 3;
        v82 -= 3;
      }
      while (v73 != (uint64_t *)v75);
    }
LABEL_120:
    *a1 = v86;
    a1[1] = v84;
    a1[2] = (uint64_t *)v83;
    if (v75) {
      operator delete(v75);
    }
    goto LABEL_122;
  }
  if (a5 && v25 == 1 || a5 && v25 == 2)
  {
    uint64_t v113 = a5;
    uint64_t v114 = v107;
    BOOL v112 = *(void *)(*(void *)(v107[1] & 0xFFFFFFFFFFFFFFF8) + 136) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
    uint64_t v89 = mlir::Value::getDefiningOp((mlir::Value *)&v114);
    v109[3] = a4;
    uint64_t DefiningOp = v89;
    char v111 = 0;
    v109[0] = &v113;
    v109[1] = (uint64_t *)a1;
    v109[2] = (uint64_t *)a3;
    llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::OperandOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_0 &>(&DefiningOp, v109);
    llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::OperandsOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_0 &>(&DefiningOp, v109);
    v108[0] = a1;
    v108[1] = &v113;
    v108[2] = a3;
    v108[3] = &v112;
    v108[4] = a4;
    llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::ResultOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_1 &>(&DefiningOp, (uint64_t *)v108);
    llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::ResultsOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_1 &>(&DefiningOp, (uint64_t *)v108);
  }
}

void std::deque<buildCostGraph(llvm::ArrayRef<mlir::Value>,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>> &,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>> &)::Entry,std::allocator<buildCostGraph(llvm::ArrayRef<mlir::Value>,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>> &,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>> &)::Entry>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v6 = (void *)a1[1];
    uint64_t v5 = (char *)a1[2];
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_94:
      *(void *)uint64_t v5 = v8;
      goto LABEL_95;
    }
    int v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      uint64_t v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = v10 + 2;
      }
      uint64_t v12 = v11 >> 1;
      uint64_t v13 = -v12;
      uint64_t v14 = &v7[-8 * v12];
      int64_t v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        unint64_t v7 = (char *)a1[1];
      }
      uint64_t v5 = &v14[v15];
      uint64_t v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    unint64_t v37 = (v5 - v9) >> 2;
    if (v5 == v9) {
      unint64_t v37 = 1;
    }
    if (v37 >> 61) {
      goto LABEL_110;
    }
    unint64_t v38 = v37 >> 2;
    uint64_t v39 = 8 * v37;
    unint64_t v40 = (char *)operator new(8 * v37);
    uint64_t v41 = &v40[8 * v38];
    int64_t v43 = v5 - v7;
    BOOL v42 = v5 == v7;
    uint64_t v5 = v41;
    if (!v42)
    {
      uint64_t v5 = &v41[v43 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v44 = v43 - 8;
      if ((unint64_t)(v43 - 8) >= 0x38)
      {
        unsigned int v95 = &v40[8 * v38];
        long long v45 = v95;
        if ((unint64_t)(v95 - v7) >= 0x20)
        {
          uint64_t v96 = (v44 >> 3) + 1;
          uint64_t v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
          long long v45 = &v41[v97];
          v7 += v97;
          unint64_t v98 = (long long *)(v6 + 3);
          unint64_t v99 = v95 + 16;
          uint64_t v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v101 = *v98;
            *(v99 - 1) = *(v98 - 1);
            *unint64_t v99 = v101;
            v98 += 2;
            v99 += 2;
            v100 -= 4;
          }
          while (v100);
          if (v96 == (v96 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        long long v45 = &v40[8 * v38];
      }
      do
      {
        uint64_t v102 = *(void *)v7;
        v7 += 8;
        *(void *)long long v45 = v102;
        v45 += 8;
      }
      while (v45 != v5);
    }
LABEL_91:
    *a1 = v40;
    a1[1] = v41;
    a1[2] = v5;
    a1[3] = &v40[v39];
    if (!v9) {
      goto LABEL_94;
    }
    uint64_t v103 = v9;
LABEL_93:
    operator delete(v103);
    uint64_t v5 = (char *)a1[2];
    goto LABEL_94;
  }
  unint64_t v18 = (char *)*a1;
  unsigned int v17 = (char *)a1[1];
  uint64_t v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  uint64_t v21 = v20 - v17;
  uint64_t v22 = (v20 - v17) >> 3;
  uint64_t v23 = (uint64_t)&v19[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    unint64_t v24 = operator new(0x1000uLL);
    int v25 = v24;
    if (v19 != v20)
    {
      *(void *)uint64_t v20 = v24;
LABEL_95:
      a1[2] += 8;
      return;
    }
    if (v17 == v18)
    {
      unint64_t v72 = (v19 - v17) >> 2;
      if (v20 == v17) {
        unint64_t v72 = 1;
      }
      if (v72 >> 61) {
        goto LABEL_110;
      }
      unint64_t v73 = (v72 + 3) >> 2;
      uint64_t v74 = 8 * v72;
      v75 = (char *)operator new(8 * v72);
      uint64_t v46 = &v75[8 * v73];
      unint64_t v76 = v46;
      if (v20 != v17)
      {
        unint64_t v76 = &v46[8 * v22];
        unint64_t v77 = &v75[8 * v73];
        unint64_t v78 = v17;
        if ((unint64_t)(v21 - 8) < 0x38) {
          goto LABEL_113;
        }
        unint64_t v79 = &v75[8 * v73];
        unint64_t v77 = v79;
        unint64_t v78 = v17;
        if ((unint64_t)(v79 - v17) < 0x20) {
          goto LABEL_113;
        }
        unint64_t v80 = ((unint64_t)(v21 - 8) >> 3) + 1;
        uint64_t v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v77 = &v46[v81];
        unint64_t v78 = &v17[v81];
        unsigned int v82 = (long long *)(v17 + 16);
        unsigned int v83 = v79 + 16;
        uint64_t v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v85 = *v82;
          *(v83 - 1) = *(v82 - 1);
          *unsigned int v83 = v85;
          v82 += 2;
          v83 += 2;
          v84 -= 4;
        }
        while (v84);
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            uint64_t v86 = *(void *)v78;
            v78 += 8;
            *(void *)unint64_t v77 = v86;
            v77 += 8;
          }
          while (v77 != v76);
        }
      }
      *a1 = v75;
      a1[1] = v46;
      a1[2] = v76;
      a1[3] = &v75[v74];
      if (v17)
      {
        operator delete(v17);
        uint64_t v46 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v46 = v17;
    }
    *((void *)v46 - 1) = v25;
    unsigned int v87 = (char *)a1[1];
    uint64_t v5 = (char *)a1[2];
    a1[1] = v87 - 8;
    uint64_t v8 = *((void *)v87 - 1);
    a1[1] = v87;
    if (v5 != (char *)a1[3]) {
      goto LABEL_94;
    }
    unint64_t v88 = (char *)*a1;
    if ((unint64_t)v87 > *a1)
    {
      uint64_t v89 = (uint64_t)&v87[-*a1] >> 3;
      if (v89 >= -1) {
        uint64_t v90 = v89 + 1;
      }
      else {
        uint64_t v90 = v89 + 2;
      }
      uint64_t v91 = v90 >> 1;
      uint64_t v92 = -v91;
      unint64_t v93 = &v87[-8 * v91];
      int64_t v94 = v5 - v87;
      if (v5 != v87)
      {
        memmove(&v87[-8 * v91], v87, v5 - v87);
        unsigned int v87 = (char *)a1[1];
      }
      uint64_t v5 = &v93[v94];
      uint64_t v16 = &v87[8 * v92];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_94;
    }
    unint64_t v104 = (v5 - v88) >> 2;
    if (v5 == v88) {
      unint64_t v104 = 1;
    }
    if (!(v104 >> 61))
    {
      unint64_t v105 = v104 >> 2;
      uint64_t v106 = 8 * v104;
      v107 = (char *)operator new(8 * v104);
      v108 = &v107[8 * v105];
      int64_t v109 = v5 - v87;
      BOOL v42 = v5 == v87;
      uint64_t v5 = v108;
      if (!v42)
      {
        uint64_t v5 = &v108[v109 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v110 = v109 - 8;
        if ((unint64_t)(v109 - 8) >= 0x38)
        {
          BOOL v112 = &v107[8 * v105];
          char v111 = v112;
          if ((unint64_t)(v112 - v87) >= 0x20)
          {
            uint64_t v113 = (v110 >> 3) + 1;
            uint64_t v114 = 8 * (v113 & 0x3FFFFFFFFFFFFFFCLL);
            char v111 = &v108[v114];
            uint64_t v115 = &v87[v114];
            uint64_t v116 = (long long *)(v87 + 16);
            uint64_t v117 = v112 + 16;
            uint64_t v118 = v113 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v119 = *v116;
              *(v117 - 1) = *(v116 - 1);
              *uint64_t v117 = v119;
              v116 += 2;
              v117 += 2;
              v118 -= 4;
            }
            while (v118);
            unsigned int v87 = v115;
            if (v113 == (v113 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_108;
            }
          }
        }
        else
        {
          char v111 = &v107[8 * v105];
        }
        do
        {
          uint64_t v120 = *(void *)v87;
          v87 += 8;
          *(void *)char v111 = v120;
          v111 += 8;
        }
        while (v111 != v5);
      }
LABEL_108:
      *a1 = v107;
      a1[1] = v108;
      a1[2] = v5;
      a1[3] = &v107[v106];
      if (!v88) {
        goto LABEL_94;
      }
      uint64_t v103 = v88;
      goto LABEL_93;
    }
LABEL_110:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v26 = v23 >> 2;
  if (v19 == v18) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_110;
  }
  uint64_t v28 = (char *)operator new(8 * v27);
  unint64_t v29 = &v28[8 * v22];
  unint64_t v30 = &v28[8 * v27];
  uint64_t v31 = operator new(0x1000uLL);
  unint64_t v32 = v31;
  if (v22 != v27) {
    goto LABEL_24;
  }
  if (v21 >= 1)
  {
    unint64_t v33 = v22 + 2;
    if (v22 >= -1) {
      unint64_t v33 = v22 + 1;
    }
    v29 -= 8 * (v33 >> 1);
LABEL_24:
    *(void *)unint64_t v29 = v31;
    unint64_t v34 = v29 + 8;
    if (v20 != v17) {
      goto LABEL_46;
    }
    goto LABEL_25;
  }
  if (v20 == v17) {
    unint64_t v47 = 1;
  }
  else {
    unint64_t v47 = v21 >> 2;
  }
  if (v47 >> 61) {
    goto LABEL_110;
  }
  uint64_t v48 = 8 * v47;
  unint64_t v49 = (char *)operator new(8 * v47);
  unint64_t v29 = &v49[8 * (v47 >> 2)];
  unint64_t v30 = &v49[v48];
  operator delete(v28);
  unint64_t v50 = (char *)a1[1];
  uint64_t v20 = (char *)a1[2];
  uint64_t v28 = v49;
  *(void *)unint64_t v29 = v32;
  unint64_t v34 = v29 + 8;
  if (v20 != v50)
  {
    while (1)
    {
LABEL_46:
      if (v29 == v28)
      {
        if (v34 >= v30)
        {
          unint64_t v57 = (v30 - v29) >> 2;
          if (v30 == v29) {
            unint64_t v57 = 1;
          }
          if (v57 >> 61) {
            goto LABEL_110;
          }
          unint64_t v58 = (v57 + 3) >> 2;
          uint64_t v59 = 8 * v57;
          uint64_t v60 = (char *)operator new(8 * v57);
          uint64_t v28 = v60;
          unint64_t v51 = &v60[8 * v58];
          int64_t v61 = v34 - v29;
          BOOL v42 = v34 == v29;
          unint64_t v34 = v51;
          if (!v42)
          {
            unint64_t v34 = &v51[v61 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v62 = v61 - 8;
            BOOL v63 = &v60[8 * v58];
            uint64_t v64 = v29;
            if (v62 < 0x38) {
              goto LABEL_114;
            }
            BOOL v63 = &v60[8 * v58];
            uint64_t v64 = v29;
            if ((unint64_t)(v63 - v29) < 0x20) {
              goto LABEL_114;
            }
            uint64_t v65 = (v62 >> 3) + 1;
            uint64_t v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
            BOOL v63 = &v51[v66];
            uint64_t v64 = &v29[v66];
            BOOL v67 = (long long *)(v29 + 16);
            long long v68 = &v60[8 * v58 + 16];
            uint64_t v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v70 = *v67;
              *((_OWORD *)v68 - 1) = *(v67 - 1);
              *(_OWORD *)long long v68 = v70;
              v67 += 2;
              v68 += 32;
              v69 -= 4;
            }
            while (v69);
            if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_114:
              do
              {
                uint64_t v71 = *(void *)v64;
                v64 += 8;
                *(void *)BOOL v63 = v71;
                v63 += 8;
              }
              while (v63 != v34);
            }
          }
          unint64_t v30 = &v60[v59];
          operator delete(v29);
        }
        else
        {
          uint64_t v53 = (v30 - v34) >> 3;
          if (v53 >= -1) {
            unint64_t v54 = v53 + 1;
          }
          else {
            unint64_t v54 = v53 + 2;
          }
          unsigned int v55 = &v34[8 * (v54 >> 1)];
          unint64_t v51 = &v55[-(v34 - v29)];
          size_t v56 = v34 - v29;
          BOOL v42 = v34 == v29;
          unint64_t v34 = v55;
          if (!v42) {
            memmove(v51, v29, v56);
          }
          uint64_t v28 = v29;
        }
      }
      else
      {
        unint64_t v51 = v29;
      }
      uint64_t v52 = *((void *)v20 - 1);
      v20 -= 8;
      *((void *)v51 - 1) = v52;
      unint64_t v35 = v51 - 8;
      unint64_t v29 = v35;
      if (v20 == (char *)a1[1]) {
        goto LABEL_26;
      }
    }
  }
LABEL_25:
  unint64_t v35 = v29;
LABEL_26:
  unint64_t v36 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v34;
  a1[3] = v30;
  if (v36)
  {
    operator delete(v36);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>>,mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>>::LookupBucketFor<mlir::Value>(uint64_t result, int a2, unint64_t *a3, void *a4)
{
  if (a2)
  {
    unint64_t v4 = *a3;
    unint64_t v5 = 0x1E8EB8000uLL;
    {
      uint64_t v22 = result;
      uint64_t v19 = a3;
      uint64_t v20 = a4;
      int v21 = a2;
      unint64_t v18 = v4;
      unint64_t v5 = 0x1E8EB8000uLL;
      unint64_t v4 = v18;
      a3 = v19;
      a2 = v21;
      a4 = v20;
      int v16 = v15;
      uint64_t result = v22;
      if (v16)
      {
        unint64_t v17 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v17 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v17;
        unint64_t v5 = 0x1E8EB8000;
        unint64_t v4 = v18;
        a3 = v19;
        a2 = v21;
        uint64_t result = v22;
        a4 = v20;
      }
    }
    uint64_t v6 = (*(void *)(v5 + 3024) + 8 * v4) ^ HIDWORD(v4);
    unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
    unint64_t v8 = (-348639895 * ((v7 >> 47) ^ v7)) & (a2 - 1);
    int v9 = (void *)(result + 32 * v8);
    uint64_t v10 = *v9;
    if (*a3 == *v9)
    {
LABEL_4:
      *a4 = v9;
    }
    else
    {
      uint64_t v11 = 0;
      int v12 = 1;
      while (v10 != -4096)
      {
        if (v11) {
          BOOL v13 = 0;
        }
        else {
          BOOL v13 = v10 == -8192;
        }
        if (v13) {
          uint64_t v11 = v9;
        }
        int v14 = v8 + v12++;
        unint64_t v8 = v14 & (a2 - 1);
        int v9 = (void *)(result + 32 * v8);
        uint64_t v10 = *v9;
        if (*a3 == *v9) {
          goto LABEL_4;
        }
      }
      if (v11) {
        int v9 = v11;
      }
      *a4 = v9;
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>>,mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      uint64_t v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      BOOL v13 = result + 4;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *BOOL v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        int v15 = &result[4 * v11];
        do
        {
          *uint64_t v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    int v16 = (void *)(32 * v3);
    if (v3)
    {
      uint64_t v17 = 32 * v3;
      unint64_t v18 = v4;
      do
      {
        if ((*(void *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v19 = *(void *)a1;
          int v20 = *(_DWORD *)(a1 + 16);
          uint64_t v29 = 0;
          uint64_t v21 = v29;
          unint64_t v22 = *(void *)v18;
          *(_DWORD *)(v29 + 24) = 0;
          *(void *)(v21 + 8) = 0;
          *(void *)(v21 + 16) = 0;
          *(void *)uint64_t v21 = v22;
          *(void *)(v21 + 8) = *((void *)v18 + 1);
          *((void *)v18 + 1) = 0;
          *(_DWORD *)(v21 + 16) = *((_DWORD *)v18 + 4);
          *((_DWORD *)v18 + 4) = 0;
          LODWORD(v22) = *(_DWORD *)(v21 + 20);
          *(_DWORD *)(v21 + 20) = *((_DWORD *)v18 + 5);
          *((_DWORD *)v18 + 5) = v22;
          uint64_t v23 = *(unsigned int *)(v21 + 24);
          *(_DWORD *)(v21 + 24) = *((_DWORD *)v18 + 6);
          *((_DWORD *)v18 + 6) = v23;
          ++*(_DWORD *)(a1 + 8);
          llvm::deallocate_buffer(0, (void *)(24 * v23));
        }
        unint64_t v18 = (llvm *)((char *)v18 + 32);
        v17 -= 32;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v24 = *(unsigned int *)(a1 + 16);
  if (v24)
  {
    if (((v24 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_25;
    }
    uint64_t v25 = ((v24 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    uint64_t v10 = &result[4 * (v25 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v26 = result + 4;
    uint64_t v27 = v25 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v26 - 4) = -4096;
      *uint64_t v26 = -4096;
      v26 += 8;
      v27 -= 2;
    }
    while (v27);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_25:
      uint64_t v28 = &result[4 * v24];
      do
      {
        *uint64_t v10 = -4096;
        v10 += 4;
      }
      while (v10 != v28);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>::LookupBucketFor<mlir::Value>(uint64_t result, int a2, unint64_t *a3, void *a4)
{
  if (a2)
  {
    unint64_t v4 = *a3;
    unint64_t v5 = 0x1E8EB8000uLL;
    {
      uint64_t v23 = result;
      int v20 = a3;
      uint64_t v21 = a4;
      int v22 = a2;
      unint64_t v19 = v4;
      unint64_t v5 = 0x1E8EB8000uLL;
      unint64_t v4 = v19;
      a3 = v20;
      a2 = v22;
      a4 = v21;
      int v17 = v16;
      uint64_t result = v23;
      if (v17)
      {
        unint64_t v18 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v18 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v18;
        unint64_t v5 = 0x1E8EB8000;
        unint64_t v4 = v19;
        a3 = v20;
        a2 = v22;
        uint64_t result = v23;
        a4 = v21;
      }
    }
    uint64_t v6 = (*(void *)(v5 + 3024) + 8 * v4) ^ HIDWORD(v4);
    unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
    int v8 = a2 - 1;
    unsigned int v9 = (-348639895 * ((v7 >> 47) ^ v7)) & (a2 - 1);
    uint64_t v10 = (void *)(result + 24 * v9);
    uint64_t v11 = *v10;
    if (*a3 == *v10)
    {
LABEL_4:
      *a4 = v10;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -8192;
        }
        if (v14) {
          uint64_t v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        uint64_t v10 = (void *)(result + 24 * (v15 & v8));
        uint64_t v11 = *v10;
        if (*a3 == *v10) {
          goto LABEL_4;
        }
      }
      if (v12) {
        uint64_t v10 = v12;
      }
      *a4 = v10;
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      uint64_t v12 = &result[3 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v18 = result;
      do
      {
        void *v18 = -4096;
        v18[3] = -4096;
        v18 += 6;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if (v3)
        {
          uint64_t v20 = 24 * v3;
          uint64_t v21 = v4;
          do
          {
            if ((*(void *)v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              uint64_t v22 = *(void *)a1;
              int v23 = *(_DWORD *)(a1 + 16);
              uint64_t v29 = 0;
              uint64_t v24 = v29;
              void *v29 = *(void *)v21;
              *(_OWORD *)(v24 + 1) = *(_OWORD *)((char *)v21 + 8);
              ++*(_DWORD *)(a1 + 8);
            }
            uint64_t v21 = (llvm *)((char *)v21 + 24);
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      uint64_t v12 = result;
    }
    unint64_t v19 = &result[3 * v10];
    do
    {
      *uint64_t v12 = -4096;
      v12 += 3;
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      unsigned int v15 = result;
LABEL_27:
      uint64_t v28 = &result[3 * v13];
      do
      {
        *unsigned int v15 = -4096;
        v15 += 3;
      }
      while (v15 != v28);
      return result;
    }
    unint64_t v25 = v14 / 0x18 + 1;
    unsigned int v15 = &result[3 * (v25 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v26 = v25 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v27 = result;
    do
    {
      *uint64_t v27 = -4096;
      v27[3] = -4096;
      v27 += 6;
      v26 -= 2;
    }
    while (v26);
    if (v25 != (v25 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_27;
    }
  }
  return result;
}

void llvm::SmallVectorTemplateBase<std::pair<mlir::Value,llvm::SmallVector<buildCostGraph(llvm::ArrayRef<mlir::Value>,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>> &,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::OpIndex>>>> &)::RootDepth,1u>>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v24 = 0;
  uint64_t v3 = (char *)(a1 + 16);
  unint64_t v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 40, &v24);
  unint64_t v5 = *(char **)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (!v6) {
    goto LABEL_21;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 40 * v6;
  do
  {
    unsigned int v10 = &v4[v7];
    unint64_t v11 = &v5[v7];
    *(void *)unsigned int v10 = *(void *)&v5[v7];
    uint64_t v12 = &v4[v7 + 24];
    *(void *)&v4[v7 + 8] = v12;
    unsigned int v13 = &v4[v7 + 8];
    *((void *)v10 + 2) = 0x100000000;
    if (v5 != v4)
    {
      unsigned int v14 = *((_DWORD *)v11 + 4);
      if (v14)
      {
        unsigned int v15 = (const void *)*((void *)v11 + 1);
        unint64_t v16 = &v5[v7];
        uint64_t v17 = (uint64_t)&v5[v7 + 24];
        if ((const void *)v17 != v15)
        {
          *(void *)unsigned int v13 = v15;
          int v9 = *((_DWORD *)v16 + 5);
          *((_DWORD *)v10 + 4) = v14;
          *((_DWORD *)v10 + 5) = v9;
          *((void *)v11 + 1) = v17;
          *((_DWORD *)v16 + 5) = 0;
LABEL_4:
          *((_DWORD *)v11 + 4) = 0;
          goto LABEL_5;
        }
        if (v14 < 2)
        {
          size_t v19 = 16;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v4[v7 + 8], &v4[v7 + 24], *((unsigned int *)v11 + 4), 16);
          uint64_t v18 = *((unsigned int *)v11 + 4);
          if (!v18)
          {
LABEL_14:
            *((_DWORD *)v10 + 4) = v14;
            goto LABEL_4;
          }
          unsigned int v15 = (const void *)*((void *)v11 + 1);
          uint64_t v12 = *(char **)v13;
          size_t v19 = 16 * v18;
        }
        memcpy(v12, v15, v19);
        goto LABEL_14;
      }
    }
LABEL_5:
    v7 += 40;
  }
  while (v8 != v7);
  unint64_t v5 = *(char **)a1;
  uint64_t v20 = *(unsigned int *)(a1 + 8);
  if (v20)
  {
    uint64_t v21 = 40 * v20;
    do
    {
      uint64_t v22 = *(char **)&v5[v21 - 32];
      if (&v5[v21 - 16] != v22) {
        free(v22);
      }
      v21 -= 40;
    }
    while (v21);
    unint64_t v5 = *(char **)a1;
  }
LABEL_21:
  int v23 = v24;
  if (v5 != v3) {
    free(v5);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v23;
}

void llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::copyFrom(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  unint64_t v2 = *(llvm **)a1;
  if (v1)
  {
    uint64_t v3 = 32 * v1;
    while ((*(void *)v2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      unint64_t v2 = (llvm *)((char *)v2 + 32);
      v3 -= 32;
      if (!v3) {
        llvm::deallocate_buffer(*(llvm **)a1, (void *)(32 * *(unsigned int *)(a1 + 16)));
      }
    }
    llvm::deallocate_buffer(*((llvm **)v2 + 1), (void *)(24 * *((unsigned int *)v2 + 6)));
  }
  llvm::deallocate_buffer(*(llvm **)a1, 0);
}

void sub_18069988C()
{
  int v2 = *(_DWORD *)(v1 + 16);
  *(_DWORD *)(v0 + 16) = v2;
  if (!v2) {
    JUMPOUT(0x180699898);
  }
  JUMPOUT(0x180699844);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::copyFrom<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>>(uint64_t result, void *a2)
{
  *(void *)(result + 8) = a2[1];
  if (*(_DWORD *)(result + 16))
  {
    unint64_t v2 = 0;
    do
    {
      *(void *)(*(void *)result + 32 * v2) = *(void *)(*a2 + 32 * v2);
      uint64_t v3 = *(void *)result + 32 * v2;
      if ((*(void *)v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(void *)(v3 + 8) = 0;
        *(void *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        llvm::deallocate_buffer(0, 0);
      }
      ++v2;
    }
    while (v2 < *(unsigned int *)(result + 16));
  }
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  unint64_t v4 = &unk_1E8EBA000;
  {
    uint64_t v18 = a4;
    size_t v19 = a1;
    unint64_t v16 = a2;
    unint64_t v17 = a3;
    unint64_t v4 = (void *)&unk_1E8EBA000;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      int v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::EqualToQuestion]";
      unint64_t v24 = 90;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      unint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::EqualToQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      unint64_t v4 = (void *)&unk_1E8EBA000;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[507];
  int v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  uint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::EqualToQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::EqualToQuestion *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::EqualToQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::EqualToQuestion *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::EqualToQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::EqualToQuestion *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::EqualToQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::EqualToQuestion *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a1;
  *(void *)(a2 + 80) += 16;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 16 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 16;
  *(_DWORD *)unint64_t v10 = 19;
  *(void *)(v10 + 8) = *v4;
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*(void *)(v11 + 8), v10);
  }
  return v10;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(uint64_t *a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  unint64_t v12 = a1;
  uint64_t v1 = (void *)&unk_1E8EBA000;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[503]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TrueAnswer]";
  unint64_t v14 = 85;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TrueAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TrueAnswer,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(uint64_t *a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  unint64_t v12 = a1;
  uint64_t v1 = (void *)&unk_1E8EBA000;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[511]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::IsNotNullQuestion]";
  unint64_t v14 = 92;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::IsNotNullQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::IsNotNullQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  int v4 = &unk_1E8EBA000;
  {
    uint64_t v18 = a4;
    size_t v19 = a1;
    unint64_t v16 = a2;
    unint64_t v17 = a3;
    int v4 = (void *)&unk_1E8EBA000;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      int v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypePosition]";
      unint64_t v24 = 87;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      uint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypePosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      int v4 = (void *)&unk_1E8EBA000;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[487];
  int v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  uint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position,mlir::pdl_to_pdl_interp::Position*,(mlir::pdl_to_pdl_interp::Predicates::Kind)6>::construct<mlir::pdl_to_pdl_interp::Position*>(a2, *(void **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position,mlir::pdl_to_pdl_interp::Position*,(mlir::pdl_to_pdl_interp::Predicates::Kind)6>::construct<mlir::pdl_to_pdl_interp::Position*>(uint64_t a1, void *a2)
{
  *(void *)(a1 + 80) += 32;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 32 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t result = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = result + 32;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 6;
  *(void *)(result + 24) = *a2;
  uint64_t v10 = *a2;
  *(void *)unint64_t result = &unk_1EC9AA918;
  *(void *)(result + 8) = v10;
  return result;
}

void mlir::pdl_to_pdl_interp::TypePosition::~TypePosition(mlir::pdl_to_pdl_interp::TypePosition *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeQuestion>(uint64_t *a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  unint64_t v12 = a1;
  uint64_t v1 = (void *)&unk_1E8EBA000;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[509]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeQuestion]";
  unint64_t v14 = 92;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  int v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  int v4 = &unk_1E8EBA000;
  {
    uint64_t v18 = a4;
    size_t v19 = a1;
    unint64_t v16 = a2;
    unint64_t v17 = a3;
    int v4 = (void *)&unk_1E8EBA000;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      int v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeAnswer]";
      unint64_t v24 = 90;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      uint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      int v4 = (void *)&unk_1E8EBA000;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[493];
  int v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  uint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  *(void *)(a2 + 80) += 16;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 16 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 16;
  *(_DWORD *)unint64_t v10 = 21;
  *(void *)(v10 + 8) = *v4;
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*(void *)(v11 + 8), v10);
  }
  return v10;
}

uint64_t getTreePredicates(unint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t a4, mlir::pdl_to_pdl_interp::OperationPosition *a5, uint64_t a6)
{
  uint64_t v204 = *MEMORY[0x1E4F143B8];
  uint64_t v194 = a2;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v194);
  v190 = a3;
  v191 = a1;
  if (*((_DWORD *)a5 + 8))
  {
    uint64_t IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*a3);
    uint64_t v12 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*a3);
    uint64_t v13 = v12;
    uint64_t v15 = a1[1];
    unint64_t v14 = (unint64_t)a1[2];
    if ((unint64_t)v15 >= v14)
    {
      unint64_t v17 = *a1;
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v15 - *a1);
      unint64_t v19 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_171;
      }
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v17) >> 3);
      if (2 * v20 > v19) {
        unint64_t v19 = 2 * v20;
      }
      if (v20 >= 0x555555555555555) {
        unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_172;
      }
      uint64_t v22 = 24 * v21;
      int v23 = (char *)operator new(24 * v21);
      unint64_t v24 = &v23[24 * v18];
      unint64_t v25 = &v23[v22];
      *(void *)unint64_t v24 = a5;
      *((void *)v24 + 1) = IsNotNull;
      *((void *)v24 + 2) = v13;
      unint64_t v16 = (unint64_t *)(v24 + 24);
      if (v15 == v17)
      {
        a1 = v191;
        *v191 = (unint64_t *)v24;
        v191[1] = v16;
        v191[2] = (unint64_t *)v25;
        if (!v17) {
          goto LABEL_16;
        }
      }
      else
      {
        a1 = v191;
        do
        {
          long long v26 = *(_OWORD *)(v15 - 3);
          uint64_t v27 = (unint64_t *)(v24 - 24);
          *((void *)v24 - 1) = *(v15 - 1);
          *(_OWORD *)(v24 - 24) = v26;
          v15 -= 3;
          v24 -= 24;
        }
        while (v15 != v17);
        *v191 = v27;
        v191[1] = v16;
        v191[2] = (unint64_t *)v25;
        if (!v17) {
          goto LABEL_16;
        }
      }
      operator delete(v17);
    }
    else
    {
      *uint64_t v15 = (unint64_t)a5;
      v15[1] = IsNotNull;
      unint64_t v16 = v15 + 3;
      v15[2] = v12;
    }
LABEL_16:
    a1[1] = v16;
  }
  mlir::pdl::OperationOp::getOpName((uint64_t)&DefiningOp, (uint64_t)&v201);
  if (!(_BYTE)v202) {
    goto LABEL_33;
  }
  __n128 v28 = v201;
  uint64_t v29 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameQuestion>(*v190);
  unint64_t v30 = *v190;
  mlir::OperationName::OperationName(&v196, v28.n128_u64[0], v28.n128_u64[1], v190[1]);
  uint64_t v31 = (unsigned __int8 **)v30;
  a1 = v191;
  uint64_t v32 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(v31, 0, 0, &v196);
  uint64_t v33 = v32;
  unint64_t v35 = v191[1];
  unint64_t v34 = (unint64_t)v191[2];
  if ((unint64_t)v35 >= v34)
  {
    unint64_t v37 = *v191;
    unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (v35 - *v191);
    unint64_t v39 = v38 + 1;
    if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_171;
    }
    unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (void)v37) >> 3);
    if (2 * v40 > v39) {
      unint64_t v39 = 2 * v40;
    }
    if (v40 >= 0x555555555555555) {
      unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_172;
    }
    uint64_t v42 = 24 * v41;
    int64_t v43 = (char *)operator new(24 * v41);
    unint64_t v44 = &v43[24 * v38];
    long long v45 = &v43[v42];
    *(void *)unint64_t v44 = a5;
    *((void *)v44 + 1) = v29;
    *((void *)v44 + 2) = v33;
    unint64_t v36 = (unint64_t *)(v44 + 24);
    if (v35 == (unint64_t *)v28.n128_u64[1])
    {
      a1 = v191;
      *v191 = (unint64_t *)v44;
      v191[1] = v36;
      v191[2] = (unint64_t *)v45;
      if (!v37) {
        goto LABEL_32;
      }
    }
    else
    {
      a1 = v191;
      do
      {
        long long v46 = *(_OWORD *)(v35 - 3);
        unint64_t v47 = (unint64_t *)(v44 - 24);
        *((void *)v44 - 1) = *(v35 - 1);
        *(_OWORD *)(v44 - 24) = v46;
        v35 -= 3;
        v44 -= 24;
      }
      while (v35 != v37);
      *v191 = v47;
      v191[1] = v36;
      v191[2] = (unint64_t *)v45;
      if (!v37) {
        goto LABEL_32;
      }
    }
    operator delete(v37);
  }
  else
  {
    *unint64_t v35 = (unint64_t)a5;
    v35[1] = v29;
    unint64_t v36 = v35 + 3;
    v35[2] = v32;
  }
LABEL_32:
  a1[1] = v36;
LABEL_33:
  uint64_t v183 = a6;
  Operanduint64_t Values = mlir::pdl::OperationOp::getOperandValues((mlir::pdl::OperationOp *)&DefiningOp);
  unint64_t v189 = v48;
  mlir::ValueRange::ValueRange(v199.n128_u64, OperandValues, v48);
  __n128 v200 = v199;
  mlir::ValueRange::getTypes(&v200, &v201);
  uint64_t v49 = v201.n128_i64[1];
  long long v50 = v202;
  __n128 v196 = v201;
  if (*(_OWORD *)&v201 == v202)
  {
    if (v189) {
      goto LABEL_80;
    }
    unsigned __int32 v51 = 0;
  }
  else
  {
    unsigned __int32 v51 = 0;
    do
    {
      if (*(_UNKNOWN **)(*(void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v196, v49) + 8) & 0xFFFFFFFFFFFFFFF8)
                        + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
        ++v51;
      uint64_t v49 = ++v196.n128_u64[1];
    }
    while (v196.n128_u64[0] != (void)v50 || v49 != *((void *)&v50 + 1));
    if (v189 != v51)
    {
      if (!v51) {
        goto LABEL_80;
      }
      v201.n128_u32[0] = v51;
      uint64_t v59 = a1;
      uint64_t v60 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion>(*v190);
      uint64_t v61 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>((unsigned __int8 **)*v190, 0, 0, &v201);
      uint64_t v62 = v61;
      uint64_t v64 = v59[1];
      unint64_t v63 = (unint64_t)v59[2];
      if ((unint64_t)v64 < v63)
      {
        *uint64_t v64 = (unint64_t)a5;
        v64[1] = v60;
        unint64_t v58 = v64 + 3;
        v64[2] = v61;
        a1 = v59;
        goto LABEL_79;
      }
      uint64_t v65 = *v59;
      unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * (v64 - *v59);
      unint64_t v77 = v76 + 1;
      if (v76 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_171;
      }
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (void)v65) >> 3);
      if (2 * v78 > v77) {
        unint64_t v77 = 2 * v78;
      }
      if (v78 >= 0x555555555555555) {
        unint64_t v79 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_172;
      }
      uint64_t v80 = 24 * v79;
      uint64_t v81 = (char *)operator new(24 * v79);
      unint64_t v72 = &v81[24 * v76];
      unint64_t v73 = &v81[v80];
      *(void *)unint64_t v72 = a5;
      *((void *)v72 + 1) = v60;
      *((void *)v72 + 2) = v62;
      unint64_t v58 = (unint64_t *)(v72 + 24);
      if (v64 != v65)
      {
        a1 = v191;
        do
        {
          long long v82 = *(_OWORD *)(v64 - 3);
          v75 = v72 - 24;
          *((void *)v72 - 1) = *(v64 - 1);
          *(_OWORD *)(v72 - 24) = v82;
          v64 -= 3;
          v72 -= 24;
        }
        while (v64 != v65);
LABEL_77:
        *a1 = (unint64_t *)v75;
        a1[1] = v58;
        a1[2] = (unint64_t *)v73;
        if (v65) {
          operator delete(v65);
        }
        goto LABEL_79;
      }
LABEL_76:
      v75 = v72;
      a1 = v191;
      goto LABEL_77;
    }
  }
  v201.n128_u32[0] = v51;
  uint64_t v53 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandCountQuestion>(*v190);
  uint64_t v54 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>((unsigned __int8 **)*v190, 0, 0, &v201);
  uint64_t v55 = v54;
  unint64_t v57 = v191[1];
  unint64_t v56 = (unint64_t)v191[2];
  if ((unint64_t)v57 >= v56)
  {
    uint64_t v65 = *v191;
    unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * (v57 - *v191);
    unint64_t v67 = v66 + 1;
    if (v66 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_171;
    }
    unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (void)v65) >> 3);
    if (2 * v68 > v67) {
      unint64_t v67 = 2 * v68;
    }
    if (v68 >= 0x555555555555555) {
      unint64_t v69 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v69 = v67;
    }
    if (v69 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_172;
    }
    uint64_t v70 = 24 * v69;
    uint64_t v71 = (char *)operator new(24 * v69);
    unint64_t v72 = &v71[24 * v66];
    unint64_t v73 = &v71[v70];
    *(void *)unint64_t v72 = a5;
    *((void *)v72 + 1) = v53;
    *((void *)v72 + 2) = v55;
    unint64_t v58 = (unint64_t *)(v72 + 24);
    if (v57 != v65)
    {
      a1 = v191;
      do
      {
        long long v74 = *(_OWORD *)(v57 - 3);
        v75 = v72 - 24;
        *((void *)v72 - 1) = *(v57 - 1);
        *(_OWORD *)(v72 - 24) = v74;
        v57 -= 3;
        v72 -= 24;
      }
      while (v57 != v65);
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  *unint64_t v57 = (unint64_t)a5;
  v57[1] = v53;
  unint64_t v58 = v57 + 3;
  v57[2] = v54;
  a1 = v191;
LABEL_79:
  a1[1] = v58;
LABEL_80:
  Typeuint64_t Values = mlir::pdl::OperationOp::getTypeValues((mlir::pdl::OperationOp *)&DefiningOp);
  unint64_t v85 = v84;
  uint64_t v186 = TypeValues;
  mlir::ValueRange::ValueRange(v198.n128_u64, TypeValues, v84);
  __n128 v200 = v198;
  mlir::ValueRange::getTypes(&v200, &v201);
  uint64_t v86 = v201.n128_i64[1];
  long long v87 = v202;
  __n128 v196 = v201;
  unint64_t v188 = (unint64_t)a5;
  unint64_t v185 = v85;
  if (*(_OWORD *)&v201 == v202)
  {
    if (v85) {
      goto LABEL_119;
    }
LABEL_92:
    v201.n128_u32[0] = v85;
    uint64_t v90 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultCountQuestion>(*v190);
    uint64_t v91 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>((unsigned __int8 **)*v190, 0, 0, &v201);
    unint64_t v93 = a1[1];
    unint64_t v92 = (unint64_t)a1[2];
    if ((unint64_t)v93 >= v92)
    {
      int64_t v94 = *a1;
      unint64_t v95 = 0xAAAAAAAAAAAAAAABLL * (v93 - *a1);
      unint64_t v96 = v95 + 1;
      if (v95 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v92 - (void)v94) >> 3);
        if (2 * v97 > v96) {
          unint64_t v96 = 2 * v97;
        }
        if (v97 >= 0x555555555555555) {
          unint64_t v98 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v98 = v96;
        }
        if (v98 <= 0xAAAAAAAAAAAAAAALL)
        {
          uint64_t v99 = 24 * v98;
          uint64_t v100 = (char *)operator new(24 * v98);
          long long v101 = (unint64_t *)&v100[24 * v95];
          uint64_t v102 = &v100[v99];
          *long long v101 = v188;
          v101[1] = v90;
          v101[2] = v91;
          uint64_t v103 = v101 + 3;
          if (v93 != v94)
          {
            do
            {
              long long v104 = *(_OWORD *)(v93 - 3);
              unint64_t v105 = v101 - 3;
              *(v101 - 1) = *(v93 - 1);
              *(_OWORD *)(v101 - 3) = v104;
              v93 -= 3;
              v101 -= 3;
            }
            while (v93 != v94);
            goto LABEL_115;
          }
          goto LABEL_169;
        }
        goto LABEL_172;
      }
      goto LABEL_171;
    }
    goto LABEL_105;
  }
  unsigned __int32 v88 = 0;
  do
  {
    if (*(_UNKNOWN **)(*(void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v196, v86) + 8) & 0xFFFFFFFFFFFFFFF8)
                      + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
      ++v88;
    uint64_t v86 = ++v196.n128_u64[1];
  }
  while (v196.n128_u64[0] != (void)v87 || v86 != *((void *)&v87 + 1));
  if (v85 == v88) {
    goto LABEL_92;
  }
  if (!v88) {
    goto LABEL_119;
  }
  v201.n128_u32[0] = v88;
  uint64_t v90 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion>(*v190);
  uint64_t v91 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>((unsigned __int8 **)*v190, 0, 0, &v201);
  unint64_t v93 = a1[1];
  unint64_t v106 = (unint64_t)a1[2];
  if ((unint64_t)v93 >= v106)
  {
    int64_t v94 = *a1;
    unint64_t v107 = 0xAAAAAAAAAAAAAAABLL * (v93 - *a1);
    unint64_t v108 = v107 + 1;
    if (v107 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - (void)v94) >> 3);
      if (2 * v109 > v108) {
        unint64_t v108 = 2 * v109;
      }
      if (v109 >= 0x555555555555555) {
        unint64_t v110 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v110 = v108;
      }
      if (v110 <= 0xAAAAAAAAAAAAAAALL)
      {
        uint64_t v111 = 24 * v110;
        BOOL v112 = (char *)operator new(24 * v110);
        long long v101 = (unint64_t *)&v112[24 * v107];
        uint64_t v102 = &v112[v111];
        *long long v101 = v188;
        v101[1] = v90;
        v101[2] = v91;
        uint64_t v103 = v101 + 3;
        if (v93 != v94)
        {
          do
          {
            long long v113 = *(_OWORD *)(v93 - 3);
            unint64_t v105 = v101 - 3;
            *(v101 - 1) = *(v93 - 1);
            *(_OWORD *)(v101 - 3) = v113;
            v93 -= 3;
            v101 -= 3;
          }
          while (v93 != v94);
LABEL_115:
          *a1 = v105;
          a1[1] = v103;
          a1[2] = (unint64_t *)v102;
          if (!v94)
          {
LABEL_117:
            a5 = (mlir::pdl_to_pdl_interp::OperationPosition *)v188;
            goto LABEL_118;
          }
LABEL_116:
          operator delete(v94);
          goto LABEL_117;
        }
LABEL_169:
        *a1 = v101;
        a1[1] = v103;
        a1[2] = (unint64_t *)v102;
        if (!v94) {
          goto LABEL_117;
        }
        goto LABEL_116;
      }
LABEL_172:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_171:
    abort();
  }
LABEL_105:
  *unint64_t v93 = (unint64_t)a5;
  v93[1] = v90;
  uint64_t v103 = v93 + 3;
  v93[2] = v91;
LABEL_118:
  a1[1] = v103;
LABEL_119:
  uint64_t FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&DefiningOp);
  Attributeuint64_t Values = mlir::pdl::OperationOp::getAttributeValues((mlir::pdl::OperationOp *)&DefiningOp);
  v196.n128_u64[0] = FastmathAttr;
  v196.n128_u64[1] = AttributeValues;
  uint64_t v197 = v116;
  uint64_t v117 = a5;
  Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v196);
  unint64_t v119 = v196.n128_u64[1];
  uint64_t result = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v196);
  v122 = (uint64_t *)(result + 8 * v121);
  uint64_t v187 = a4;
  uint64_t v123 = (unsigned __int8 ***)v190;
  if (v122 != Value)
  {
    if (v119 == v196.n128_u64[1])
    {
      uint64_t v133 = v197;
      uint64_t v134 = (uint64_t *)(v119 + 24);
      uint64_t v117 = (mlir::pdl_to_pdl_interp::OperationPosition *)v188;
      uint64_t v123 = (unsigned __int8 ***)v190;
      do
      {
        if (!v133) {
          break;
        }
        uint64_t v136 = *v134;
        v134 += 4;
        uint64_t v135 = v136;
        uint64_t v137 = *Value++;
        uint64_t v192 = v137;
        uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v192);
        v200.n128_u64[0] = v188;
        uint64_t v140 = *v190;
        uint64_t v139 = (mlir::StringAttr *)v190[1];
        __int16 v203 = 261;
        v201.n128_u64[0] = AttrData;
        v201.n128_u64[1] = v141;
        uint64_t v195 = mlir::StringAttr::get(v139, (mlir::MLIRContext *)&v201);
        uint64_t v142 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>((unsigned __int8 **)v140, 0, 0, &v200, &v195);
        uint64_t result = getTreePredicates(v191, v135, v190, a4, v142);
        --v133;
      }
      while (Value != v122);
    }
    else
    {
      uint64_t v124 = (uint64_t *)(v119 + 24);
      uint64_t v117 = (mlir::pdl_to_pdl_interp::OperationPosition *)v188;
      uint64_t v123 = (unsigned __int8 ***)v190;
      do
      {
        uint64_t v126 = *v124;
        v124 += 4;
        uint64_t v125 = v126;
        uint64_t v127 = *Value++;
        uint64_t v192 = v127;
        uint64_t v128 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v192);
        v200.n128_u64[0] = v188;
        int64_t v130 = *v190;
        int64_t v129 = (mlir::StringAttr *)v190[1];
        __int16 v203 = 261;
        v201.n128_u64[0] = v128;
        v201.n128_u64[1] = v131;
        uint64_t v195 = mlir::StringAttr::get(v129, (mlir::MLIRContext *)&v201);
        uint64_t v132 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>((unsigned __int8 **)v130, 0, 0, &v200, &v195);
        uint64_t result = getTreePredicates(v191, v125, v190, a4, v132);
      }
      while (Value != v122);
    }
  }
  unsigned int v143 = v123;
  unint64_t v144 = (unint64_t)v117;
  if (v189)
  {
    if (v189 == 1
      && (uint64_t v145 = *(void *)(OperandValues + 24),
          *(_UNKNOWN **)(*(void *)(*(void *)(v145 + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id))
    {
      if (*((_DWORD *)v117 + 8))
      {
        uint64_t result = mlir::pdl_to_pdl_interp::OperationPosition::isOperandDefiningOp(v117);
        if (!result) {
          goto LABEL_142;
        }
        uint64_t v145 = *(void *)(OperandValues + 24);
      }
      v201.n128_u64[0] = 0;
      v196.n128_u64[0] = (unint64_t)v117;
      v200.n128_u8[0] = 1;
      uint64_t v152 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v123, 0, 0, (const char **)&v196, v201.n128_u64, (char *)&v200);
      uint64_t result = getTreePredicates(v191, v145, v123, a4, v152);
    }
    else
    {
      char v146 = 0;
      uint64_t v147 = 0;
      uint64_t v148 = OperandValues + 24;
      do
      {
        uint64_t v150 = *(void *)v148;
        uint64_t v151 = *(void **)(*(void *)(*(void *)(*(void *)v148 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
        v146 |= v151 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
        if ((v183 & 0xFF00000000) == 0 || v183 != v147)
        {
          if (v146)
          {
            v201.n128_u64[0] = v147 | 0x100000000;
            v196.n128_u64[0] = v144;
            v200.n128_u8[0] = v151 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
            uint64_t v149 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v123, 0, 0, (const char **)&v196, v201.n128_u64, (char *)&v200);
          }
          else
          {
            v201.n128_u64[0] = v144;
            v196.n128_u32[0] = v147;
            uint64_t v149 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(*v123, 0, 0, &v201, (unsigned int *)&v196);
          }
          uint64_t result = getTreePredicates(v191, v150, v123, a4, v149);
        }
        ++v147;
        v148 += 32;
      }
      while (v189 != v147);
    }
  }
LABEL_142:
  unint64_t v153 = v191;
  unint64_t v154 = v185;
  if (v185)
  {
    if (v185 != 1
      || (uint64_t v155 = *(void *)(v186 + 24),
          *(_UNKNOWN **)(*(void *)(*(void *)(v155 + 8) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id))
    {
      int v156 = 0;
      uint64_t v157 = 0;
      while (1)
      {
        uint64_t v160 = *(void *)(v186 + 32 * v157 + 24);
        uint64_t v161 = *(void **)(*(void *)(*(void *)(v160 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
        v156 |= v161 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
        if (v156)
        {
          v201.n128_u64[0] = v157 | 0x100000000;
          v196.n128_u64[0] = v144;
          v200.n128_u8[0] = v161 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
          uint64_t v162 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v143, 0, 0, (const char **)&v196, v201.n128_u64, (char *)&v200);
        }
        else
        {
          v201.n128_u64[0] = v144;
          v196.n128_u32[0] = v157;
          uint64_t v162 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(*v143, 0, 0, &v201, (unsigned int *)&v196);
        }
        unint64_t v163 = v162;
        uint64_t v164 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>((uint64_t *)*v143);
        uint64_t v165 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*v143);
        uint64_t v166 = v165;
        uint64_t v168 = v153[1];
        unint64_t v167 = (unint64_t)v153[2];
        if ((unint64_t)v168 >= v167) {
          break;
        }
        *uint64_t v168 = v163;
        v168[1] = v164;
        uint64_t v158 = v168 + 3;
        v168[2] = v165;
        unsigned int v143 = (unsigned __int8 ***)v190;
        unint64_t v144 = v188;
LABEL_147:
        v153[1] = v158;
        v201.n128_u64[0] = v163;
        uint64_t v159 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*v143, 0, 0, &v201);
        uint64_t result = getTreePredicates(v153, v160, v143, v187, v159);
        if (++v157 == v154) {
          return result;
        }
      }
      v169 = *v153;
      unint64_t v170 = 0xAAAAAAAAAAAAAAABLL * (v168 - *v153);
      unint64_t v171 = v170 + 1;
      if (v170 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_171;
      }
      unint64_t v172 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v167 - (void)v169) >> 3);
      if (2 * v172 > v171) {
        unint64_t v171 = 2 * v172;
      }
      if (v172 >= 0x555555555555555) {
        unint64_t v173 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v173 = v171;
      }
      if (v173 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_172;
      }
      uint64_t v174 = 24 * v173;
      v175 = (char *)operator new(24 * v173);
      v176 = (unint64_t *)&v175[24 * v170];
      unint64_t *v176 = v163;
      v176[1] = v164;
      v176[2] = v166;
      if (v168 == v169)
      {
        unint64_t v144 = v188;
        v181 = &v175[v174];
        uint64_t v158 = v176 + 3;
        unint64_t v153 = v191;
        *v191 = v176;
        v191[1] = v176 + 3;
        v191[2] = (unint64_t *)v181;
        if (!v169) {
          goto LABEL_164;
        }
      }
      else
      {
        v177 = &v175[24 * v170];
        unint64_t v144 = v188;
        do
        {
          long long v178 = *(_OWORD *)(v168 - 3);
          v179 = v177 - 24;
          *((void *)v177 - 1) = *(v168 - 1);
          *(_OWORD *)(v177 - 24) = v178;
          v168 -= 3;
          v177 -= 24;
        }
        while (v168 != v169);
        v180 = &v175[v174];
        uint64_t v158 = v176 + 3;
        unint64_t v153 = v191;
        *v191 = (unint64_t *)v179;
        v191[1] = v176 + 3;
        v191[2] = (unint64_t *)v180;
        if (!v169) {
          goto LABEL_164;
        }
      }
      operator delete(v169);
LABEL_164:
      unsigned int v143 = (unsigned __int8 ***)v190;
      unint64_t v154 = v185;
      goto LABEL_147;
    }
    v201.n128_u64[0] = 0;
    v196.n128_u64[0] = v144;
    v200.n128_u8[0] = 1;
    v201.n128_u64[0] = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v123, 0, 0, (const char **)&v196, v201.n128_u64, (char *)&v200);
    uint64_t v182 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*v123, 0, 0, &v201);
    return getTreePredicates(v191, v155, v123, a4, v182);
  }
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameQuestion>(uint64_t *a1)
{
  uint64_t v12 = a1;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[5]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationNameQuestion]";
  unint64_t v14 = 96;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationNameQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationNameQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  int v4 = &unk_1E8EBA000;
  {
    unint64_t v18 = a4;
    unint64_t v19 = a1;
    unint64_t v16 = a2;
    unint64_t v17 = a3;
    int v4 = (void *)&unk_1E8EBA000;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      int v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationNameAnswer]";
      unint64_t v24 = 94;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      uint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationNameAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      int v4 = (void *)&unk_1E8EBA000;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[495];
  int v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  unint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationNameAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameAnswer *)>,mlir::TypeID,mlir::OperationName &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationNameAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameAnswer *)>,mlir::TypeID,mlir::OperationName &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationNameAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameAnswer *)>,mlir::TypeID,mlir::OperationName &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationNameAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameAnswer *)>,mlir::TypeID,mlir::OperationName &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  *(void *)(a2 + 80) += 16;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 16 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 16;
  *(_DWORD *)unint64_t v10 = 23;
  *(void *)(v10 + 8) = *v4;
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*(void *)(v11 + 8), v10);
  }
  return v10;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion>(uint64_t *a1)
{
  unint64_t v12 = a1;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[3]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion]";
  unint64_t v14 = 102;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(unsigned __int8 **a1, const char *a2, unint64_t a3, _DWORD *a4)
{
  int v4 = &unk_1E8EBA000;
  {
    unint64_t v18 = a4;
    unint64_t v19 = a1;
    unint64_t v16 = a2;
    unint64_t v17 = a3;
    int v4 = (void *)&unk_1E8EBA000;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      int v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::UnsignedAnswer]";
      unint64_t v24 = 89;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      uint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::UnsignedAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      int v4 = (void *)&unk_1E8EBA000;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[499];
  int v23 = a2;
  unint64_t v24 = a3;
  int v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  unint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, 37 * v22, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::UnsignedAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UnsignedAnswer *)>,mlir::TypeID,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::UnsignedAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UnsignedAnswer *)>,mlir::TypeID,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::UnsignedAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UnsignedAnswer *)>,mlir::TypeID,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_DWORD **a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == **a1;
}

_DWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::UnsignedAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UnsignedAnswer *)>,mlir::TypeID,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD **)a1;
  *(void *)(a2 + 80) += 16;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 16 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (_DWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t v10 = (_DWORD *)((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a2 = v10 + 4;
  *unint64_t v10 = 26;
  v10[2] = *v4;
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(void *)v11) {
    (*(void (**)(void, _DWORD *))v11)(*(void *)(v11 + 8), v10);
  }
  return v10;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandCountQuestion>(uint64_t *a1)
{
  unint64_t v12 = a1;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[1]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandCountQuestion]";
  unint64_t v14 = 95;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultCountQuestion>(uint64_t *a1)
{
  unint64_t v12 = a1;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[7]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultCountQuestion]";
  unint64_t v14 = 94;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion>(uint64_t *a1)
{
  unint64_t v12 = a1;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[9]);
  }
  uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion]";
  unint64_t v14 = 101;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4, void *a5)
{
  unint64_t v5 = &unk_1E8EBA000;
  {
    unint64_t v24 = a5;
    unint64_t v25 = a1;
    unint64_t v22 = a3;
    int v23 = a4;
    unint64_t v21 = a2;
    unint64_t v5 = (void *)&unk_1E8EBA000;
    a2 = v21;
    a3 = v22;
    a4 = v23;
    a5 = v24;
    int v13 = v12;
    a1 = v25;
    if (v13)
    {
      uint64_t v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributePosition]";
      unint64_t v30 = 92;
      unint64_t v14 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if (v30 >= v14) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = v30;
      }
      unint64_t v16 = &v29[v15];
      unint64_t v17 = v30 - v15;
      if (v30 - v15 >= 0x12) {
        uint64_t v18 = 18;
      }
      else {
        uint64_t v18 = v30 - v15;
      }
      unint64_t v19 = v17 - v18;
      if (v19 >= v19 - 1) {
        uint64_t v20 = v19 - 1;
      }
      else {
        uint64_t v20 = v19;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributePosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      unint64_t v5 = (void *)&unk_1E8EBA000;
      a2 = v21;
      a3 = v22;
      a4 = v23;
      a5 = v24;
      a1 = v25;
    }
  }
  uint64_t v6 = v5[471];
  uint64_t v29 = a2;
  unint64_t v30 = a3;
  uint64_t v7 = *a5;
  v28[0] = *a4;
  v28[1] = v7;
  unint64_t v8 = ((v7 >> 4) ^ (v7 >> 9) | ((unint64_t)((LODWORD(v28[0]) >> 4) ^ (LODWORD(v28[0]) >> 9)) << 32))
     + ~((unint64_t)((v7 >> 4) ^ (v7 >> 9)) << 32);
  unint64_t v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  unint64_t v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  v26[0] = v28;
  v26[1] = &v29;
  uint64_t v27 = v28;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, ((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~(v10 << 27)), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v27, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v26);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)a1 && *(void *)(a2 + 32) == *(void *)(*(void *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  double v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>,(mlir::pdl_to_pdl_interp::Predicates::Kind)3>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>>(a2, *(__n128 **)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, double))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

double mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>,(mlir::pdl_to_pdl_interp::Predicates::Kind)3>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 40;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 40;

  *(void *)&double result = mlir::pdl_to_pdl_interp::AttributePosition::AttributePosition(v9, a2).n128_u64[0];
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, const char **a4, unint64_t *a5, char *a6)
{
  {
    unint64_t v22 = a5;
    int v23 = a6;
    uint64_t v20 = a3;
    unint64_t v21 = a4;
    uint64_t v19 = a2;
    a2 = v19;
    a3 = v20;
    a4 = v21;
    a5 = v22;
    a6 = v23;
    if (v11)
    {
      long long v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandGroupPosition]";
      unint64_t v27 = 95;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = v27;
      }
      unint64_t v14 = &v26[v13];
      unint64_t v15 = v27 - v13;
      if (v27 - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = v27 - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandGroupPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      a2 = v19;
      a3 = v20;
      a4 = v21;
      a5 = v22;
      a6 = v23;
    }
  }
  uint64_t v7 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandGroupPosition,void>::resolveTypeID(void)::id;
  v29[0] = a2;
  v29[1] = a3;
  unint64_t v8 = *a5;
  long long v26 = *a4;
  unint64_t v27 = v8;
  v28[0] = *a6;
  unsigned int v9 = llvm::hash_combine<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>(&v26, (uint64_t)&v27, v28);
  v24[0] = &v26;
  v24[1] = v29;
  unint64_t v25 = &v26;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v7, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperandGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v25, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperandGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v24);
}

unint64_t llvm::hash_combine<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>(void *a1, uint64_t a2, char *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  {
    unint64_t v13 = a1;
    uint64_t v9 = a2;
    a2 = v9;
    int v11 = v10;
    a1 = v13;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      a1 = v13;
      a2 = v9;
    }
  }
  uint64_t v4 = *a1;
  uint64_t v19 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v16[0] = v4;
  unint64_t v14 = 0;
  unint64_t v5 = llvm::hash_value<unsigned int>(a2);
  uint64_t v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v16, (uint64_t *)&v14, (void *)v16 + 1, (unint64_t)v17, v5);
  unint64_t v15 = v14;
  uint64_t v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v16, (uint64_t *)&v15, v6, (unint64_t)v17, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v16, v15, v7, (char *)v17);
}

unint64_t llvm::hash_value<unsigned int>(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 4))
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    memset(v9, 0, sizeof(v9));
    unint64_t v1 = 0x1E8EB8000uLL;
    {
      uint64_t v8 = a1;
      unint64_t v1 = 0x1E8EB8000uLL;
      int v5 = v4;
      a1 = v8;
      if (v5)
      {
        unint64_t v6 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v6 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v6;
        unint64_t v1 = 0x1E8EB8000;
        a1 = v8;
      }
    }
    uint64_t v12 = *(void *)(v1 + 3024);
    LOBYTE(v9[0]) = 1;
    *(_DWORD *)((char *)v9 + 1) = *(_DWORD *)a1;
    return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v9, 0, (char *)v9 + 5, (char *)v10);
  }
  else
  {
    {
      unint64_t v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v7 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v7;
    }
    unint64_t v3 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * llvm::hashing::detail::get_execution_seed(void)::seed) ^ ((0x9DDFEA08EB382D69
                                                                                           * llvm::hashing::detail::get_execution_seed(void)::seed) >> 47));
    return 0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47));
  }
}

char *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(void *a1, uint64_t *a2, unsigned char *__dst, unint64_t a4, char a5)
{
  char __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    uint64_t v9 = *a2;
    if (*a2)
    {
      uint64_t v10 = a1[9];
      uint64_t v11 = a1[11];
      uint64_t v12 = a1[1];
      uint64_t v13 = a1[12];
      uint64_t v14 = a1[13];
      uint64_t v16 = a1[6];
      uint64_t v15 = a1[7];
      uint64_t v17 = a1[14];
      unint64_t v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      uint64_t v19 = v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      unint64_t v20 = 0xB492B66FBE98F273 * __ROR8__(v14 + a1[10], 33);
      uint64_t v21 = *a1 - 0x4B6D499041670D8DLL * v13;
      uint64_t v22 = v21 + v14;
      uint64_t v24 = a1[2];
      uint64_t v23 = a1[3];
      uint64_t v25 = a1[5];
      uint64_t v26 = v19 + v25;
      unint64_t v27 = a1[4] + v17 + v20;
      uint64_t v28 = v21 + v12 + v24;
      unint64_t v29 = v25 + v16 + v27;
      a1[12] = __ROR8__(v22 + v23 + v18, 21) + v21 + __ROR8__(v28, 44);
      a1[13] = v29 + v15;
      a1[14] = __ROR8__(v27 + v15 + v24 + v26, 21) + v27 + __ROR8__(v29, 44);
      a1[10] = v18;
      a1[11] = v28 + v23;
      a1[8] = v20;
      a1[9] = v26;
      *a2 = v9 + 64;
      size_t v30 = 1 - v8;
      uint64_t v31 = (char *)a1 + 1 - v8;
      if ((unint64_t)v31 > a4) {
        return (char *)a1;
      }
      goto LABEL_7;
    }
    unint64_t v32 = a1[15];
    uint64_t v33 = __ROR8__(v32 ^ 0xB492B66FBE98F273, 49);
    unint64_t v34 = v32 ^ (v32 >> 47);
    uint64_t v35 = a1[1];
    uint64_t v36 = v35 + v32 + v33;
    uint64_t v37 = a1[6];
    uint64_t v38 = a1[7];
    uint64_t v39 = a1[5];
    uint64_t v40 = v39 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v37 + v32 - 0x4B6D499041670D8DLL * v32, 42);
    unint64_t v41 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    unint64_t v42 = 0x9DDFEA08EB382D69
        * (v32 ^ (((0x9DDFEA08EB382D69 * (v34 ^ (0xB492B66FBE98F273 * v32))) ^ v32) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                * (v34 ^ (0xB492B66FBE98F273 * v32))));
    unint64_t v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    unint64_t v44 = 0xB492B66FBE98F273 * __ROR8__(v34 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 33);
    uint64_t v45 = *a1 - 0x6D8ED9027DD26057 * v32;
    uint64_t v47 = a1[2];
    uint64_t v46 = a1[3];
    uint64_t v48 = v45 + v35 + v47;
    unint64_t v49 = v43 ^ (0xB492B66FBE98F273 * __ROR8__(v36, 37));
    unint64_t v50 = v44 + a1[4] + v43;
    a1[8] = v44;
    a1[9] = v40;
    a1[10] = v49;
    a1[11] = v48 + v46;
    a1[12] = __ROR8__(v48, 44) + v45 + __ROR8__(v45 + v34 + v46 + v49, 21);
    a1[13] = v39 + v37 + v50 + v38;
    a1[14] = __ROR8__(v39 + v37 + v50, 44) + v50 + __ROR8__(v40 + v47 + v38 + v50, 21);
    *a2 = 64;
    size_t v30 = 1 - v8;
    uint64_t v31 = (char *)a1 + 1 - v8;
    if ((unint64_t)v31 <= a4)
    {
LABEL_7:
      memcpy(a1, &__src + v8, v30);
      return v31;
    }
  }
  return (char *)a1;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperandGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  unint64_t v2 = (void *)*a1;
  if (*(void *)(a2 + 24) != *(void *)*a1) {
    return 0;
  }
  int v4 = *((unsigned __int8 *)v2 + 12);
  if (*(unsigned char *)(a2 + 36)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if ((*(unsigned char *)(a2 + 36) != 0) == (v4 != 0)) {
      return *(unsigned __int8 *)(a2 + 40) == *((unsigned __int8 *)v2 + 16);
    }
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) != *((_DWORD *)v2 + 2)) {
    return 0;
  }
  return *(unsigned __int8 *)(a2 + 40) == *((unsigned __int8 *)v2 + 16);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperandGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  double v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)2>::construct<std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>>(a2, *(__n128 **)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, double))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

double mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)2>::construct<std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 48;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 48 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 48;

  *(void *)&double result = mlir::pdl_to_pdl_interp::OperandGroupPosition::OperandGroupPosition(v9, a2).n128_u64[0];
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4, unsigned int *a5)
{
  unsigned int v5 = &unk_1E8EBA000;
  {
    uint64_t v24 = a5;
    uint64_t v25 = a1;
    unint64_t v22 = a3;
    uint64_t v23 = a4;
    uint64_t v21 = a2;
    unsigned int v5 = (void *)&unk_1E8EBA000;
    a2 = v21;
    a3 = v22;
    a4 = v23;
    a5 = v24;
    int v13 = v12;
    a1 = v25;
    if (v13)
    {
      unint64_t v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandPosition]";
      unint64_t v30 = 90;
      unint64_t v14 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if (v30 >= v14) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = v30;
      }
      uint64_t v16 = &v29[v15];
      unint64_t v17 = v30 - v15;
      if (v30 - v15 >= 0x12) {
        uint64_t v18 = 18;
      }
      else {
        uint64_t v18 = v30 - v15;
      }
      unint64_t v19 = v17 - v18;
      if (v19 >= v19 - 1) {
        uint64_t v20 = v19 - 1;
      }
      else {
        uint64_t v20 = v19;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      unsigned int v5 = (void *)&unk_1E8EBA000;
      a2 = v21;
      a3 = v22;
      a4 = v23;
      a5 = v24;
      a1 = v25;
    }
  }
  uint64_t v6 = v5[477];
  unint64_t v29 = a2;
  unint64_t v30 = a3;
  uint64_t v7 = *a5;
  v28[0] = *a4;
  v28[1] = v7;
  unint64_t v8 = ~((unint64_t)(37 * v7) << 32)
     + (37 * v7)
     + ((unint64_t)((LODWORD(v28[0]) >> 4) ^ (LODWORD(v28[0]) >> 9)) << 32);
  unint64_t v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  unint64_t v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  v26[0] = v28;
  v26[1] = &v29;
  unint64_t v27 = v28;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, ((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~(v10 << 27)), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperandPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v27, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperandPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v26);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperandPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(void *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperandPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  double v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)1>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>>(a2, *(__n128 **)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, double))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

double mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)1>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 40;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 40;

  *(void *)&double result = mlir::pdl_to_pdl_interp::OperandPosition::OperandPosition(v9, a2).n128_u64[0];
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, const char **a4, unint64_t *a5, char *a6)
{
  {
    unint64_t v22 = a5;
    uint64_t v23 = a6;
    uint64_t v20 = a3;
    uint64_t v21 = a4;
    uint64_t v19 = a2;
    a2 = v19;
    a3 = v20;
    a4 = v21;
    a5 = v22;
    a6 = v23;
    if (v11)
    {
      uint64_t v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultGroupPosition]";
      unint64_t v27 = 94;
      unint64_t v12 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v12) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = v27;
      }
      unint64_t v14 = &v26[v13];
      unint64_t v15 = v27 - v13;
      if (v27 - v13 >= 0x12) {
        uint64_t v16 = 18;
      }
      else {
        uint64_t v16 = v27 - v13;
      }
      unint64_t v17 = v15 - v16;
      if (v17 >= v17 - 1) {
        uint64_t v18 = v17 - 1;
      }
      else {
        uint64_t v18 = v17;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultGroupPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      a2 = v19;
      a3 = v20;
      a4 = v21;
      a5 = v22;
      a6 = v23;
    }
  }
  uint64_t v7 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultGroupPosition,void>::resolveTypeID(void)::id;
  v29[0] = a2;
  v29[1] = a3;
  unint64_t v8 = *a5;
  uint64_t v26 = *a4;
  unint64_t v27 = v8;
  v28[0] = *a6;
  unsigned int v9 = llvm::hash_combine<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>(&v26, (uint64_t)&v27, v28);
  v24[0] = &v26;
  v24[1] = v29;
  uint64_t v25 = &v26;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v7, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ResultGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v25, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ResultGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v24);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ResultGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  unint64_t v2 = (void *)*a1;
  if (*(void *)(a2 + 24) != *(void *)*a1) {
    return 0;
  }
  int v4 = *((unsigned __int8 *)v2 + 12);
  if (*(unsigned char *)(a2 + 36)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if ((*(unsigned char *)(a2 + 36) != 0) == (v4 != 0)) {
      return *(unsigned __int8 *)(a2 + 40) == *((unsigned __int8 *)v2 + 16);
    }
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) != *((_DWORD *)v2 + 2)) {
    return 0;
  }
  return *(unsigned __int8 *)(a2 + 40) == *((unsigned __int8 *)v2 + 16);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ResultGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  __n128 v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)5>::construct<std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>>(a2, (__n128 *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)5>::construct<std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 48;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 48 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 48;
  *(_DWORD *)(v9 + 16) = 5;
  *(void *)unint64_t v9 = &unk_1EC9AA9F8;
  *(void *)(v9 + 8) = 0;
  __n128 result = *a2;
  *(void *)(v9 + 40) = a2[1].n128_u64[0];
  *(__n128 *)(v9 + 24) = result;
  unint64_t v11 = a2->n128_u64[0];
  *(void *)unint64_t v9 = &unk_1EC9AAAF8;
  *(void *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::ResultGroupPosition::~ResultGroupPosition(mlir::pdl_to_pdl_interp::ResultGroupPosition *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)5>::~PredicateBase(mlir::GenericProgramPoint *a1)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(a1);

  operator delete(v1);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4, unsigned int *a5)
{
  unsigned int v5 = &unk_1E8EBA000;
  {
    uint64_t v24 = a5;
    uint64_t v25 = a1;
    unint64_t v22 = a3;
    uint64_t v23 = a4;
    uint64_t v21 = a2;
    unsigned int v5 = (void *)&unk_1E8EBA000;
    a2 = v21;
    a3 = v22;
    a4 = v23;
    a5 = v24;
    int v13 = v12;
    a1 = v25;
    if (v13)
    {
      unint64_t v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultPosition]";
      unint64_t v30 = 89;
      unint64_t v14 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if (v30 >= v14) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = v30;
      }
      uint64_t v16 = &v29[v15];
      unint64_t v17 = v30 - v15;
      if (v30 - v15 >= 0x12) {
        uint64_t v18 = 18;
      }
      else {
        uint64_t v18 = v30 - v15;
      }
      unint64_t v19 = v17 - v18;
      if (v19 >= v19 - 1) {
        uint64_t v20 = v19 - 1;
      }
      else {
        uint64_t v20 = v19;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      unsigned int v5 = (void *)&unk_1E8EBA000;
      a2 = v21;
      a3 = v22;
      a4 = v23;
      a5 = v24;
      a1 = v25;
    }
  }
  uint64_t v6 = v5[483];
  unint64_t v29 = a2;
  unint64_t v30 = a3;
  uint64_t v7 = *a5;
  v28[0] = *a4;
  v28[1] = v7;
  unint64_t v8 = ~((unint64_t)(37 * v7) << 32)
     + (37 * v7)
     + ((unint64_t)((LODWORD(v28[0]) >> 4) ^ (LODWORD(v28[0]) >> 9)) << 32);
  unint64_t v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  unint64_t v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  v26[0] = v28;
  v26[1] = &v29;
  unint64_t v27 = v28;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, ((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~(v10 << 27)), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ResultPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v27, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ResultPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v26);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ResultPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(void *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ResultPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  __n128 v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)4>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>>(a2, (__n128 *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)4>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 40;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 40;
  *(_DWORD *)(v9 + 16) = 4;
  *(void *)unint64_t v9 = &unk_1EC9AA958;
  *(void *)(v9 + 8) = 0;
  __n128 result = *a2;
  *(__n128 *)(v9 + 24) = *a2;
  unint64_t v11 = a2->n128_u64[0];
  *(void *)unint64_t v9 = &unk_1EC9AAA58;
  *(void *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::ResultPosition::~ResultPosition(mlir::pdl_to_pdl_interp::ResultPosition *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)4>::~PredicateBase(mlir::GenericProgramPoint *a1)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(a1);

  operator delete(v1);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeQuestion>(uint64_t *a1)
{
  int v12 = a1;
  int v4 = v3;
  a1 = v12;
  if (!v4) {
    return mlir::StorageUniquer::getSingletonImpl(a1, v1[11]);
  }
  int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeQuestion]";
  unint64_t v14 = 87;
  unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
  if (v14 >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v14;
  }
  uint64_t v7 = &v13[v6];
  unint64_t v8 = v14 - v6;
  if (v14 - v6 >= 0x12) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = v14 - v6;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= v10 - 1) {
    uint64_t v11 = v10 - 1;
  }
  else {
    uint64_t v11 = v10;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
  return mlir::StorageUniquer::getSingletonImpl(v12, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  int v4 = &unk_1E8EBA000;
  {
    uint64_t v18 = a4;
    unint64_t v19 = a1;
    uint64_t v16 = a2;
    unint64_t v17 = a3;
    int v4 = (void *)&unk_1E8EBA000;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      uint64_t v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeAnswer]";
      unint64_t v24 = 85;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      uint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      int v4 = (void *)&unk_1E8EBA000;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[497];
  uint64_t v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  uint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  *(void *)(a2 + 80) += 16;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 16 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 16;
  *(_DWORD *)unint64_t v10 = 25;
  *(void *)(v10 + 8) = *v4;
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*(void *)(v11 + 8), v10);
  }
  return v10;
}

unsigned char *llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::OperandOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_0 &>(unsigned char *a1, uint64_t **a2)
{
  if (a1[8]) {
    return a1;
  }
  if (!*(void *)a1
    || *(void *)(*(void *)(*(void *)a1 + 48) + 16) != (void)&mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id)
  {
    return a1;
  }
  uint64_t v32 = *(void *)a1;
  unsigned int v6 = *a2;
  BOOL v5 = a2[1];
  uint64_t v7 = (uint64_t **)a2[2];
  uint64_t IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v7);
  uint64_t v9 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v7);
  uint64_t v10 = v9;
  unint64_t v12 = (uint64_t *)v5[1];
  unint64_t v11 = v5[2];
  if ((unint64_t)v12 < v11)
  {
    *unint64_t v12 = *v6;
    v12[1] = IsNotNull;
    v12[2] = v9;
    uint64_t v13 = v12 + 3;
    goto LABEL_20;
  }
  unint64_t v14 = (uint64_t *)*v5;
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *v5) >> 3);
  unint64_t v16 = v15 + 1;
  if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 3);
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x555555555555555) {
    unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v18 = v16;
  }
  if (v18 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v19 = 24 * v18;
  uint64_t v20 = (char *)operator new(24 * v18);
  uint64_t v21 = &v20[24 * v15];
  uint64_t v22 = &v20[v19];
  *(void *)uint64_t v21 = *v6;
  *((void *)v21 + 1) = IsNotNull;
  *((void *)v21 + 2) = v10;
  uint64_t v13 = v21 + 24;
  if (v12 == v14)
  {
    *BOOL v5 = (uint64_t)v21;
    v5[1] = (uint64_t)v13;
    v5[2] = (uint64_t)v22;
    if (!v14) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  do
  {
    long long v23 = *(_OWORD *)(v12 - 3);
    unint64_t v24 = v21 - 24;
    *((void *)v21 - 1) = *(v12 - 1);
    *(_OWORD *)(v21 - 24) = v23;
    v12 -= 3;
    v21 -= 24;
  }
  while (v12 != v14);
  *BOOL v5 = (uint64_t)v24;
  v5[1] = (uint64_t)v13;
  v5[2] = (uint64_t)v22;
  if (v14) {
LABEL_19:
  }
    operator delete(v14);
LABEL_20:
  v5[1] = (uint64_t)v13;
  uint64_t ValueType = mlir::pdl::AttributeOp::getValueType((mlir::pdl::AttributeOp *)&v32);
  if (ValueType)
  {
    uint64_t v26 = ValueType;
    unint64_t v27 = (unsigned __int8 ***)a2[2];
    uint64_t v28 = a2[3];
    unint64_t v29 = a2[1];
    uint64_t v33 = **a2;
    uint64_t v30 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*v27, 0, 0, &v33);
    getTreePredicates(v29, v26, v27, v28, v30);
  }
  a1[8] = 1;
  return a1;
}

unsigned char *llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::OperandsOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_0 &>(unsigned char *a1, uint64_t **a2)
{
  if (a1[8]) {
    return a1;
  }
  if (!*(void *)a1
    || *(void *)(*(void *)(*(void *)a1 + 48) + 16) != (void)&mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id)
  {
    return a1;
  }
  uint64_t v32 = *(void *)a1;
  BOOL v5 = *a2;
  if (*(unsigned char *)(**a2 + 36))
  {
    uint64_t v7 = (char **)a2[1];
    unsigned int v6 = (uint64_t **)a2[2];
    uint64_t IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v6);
    uint64_t v9 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v6);
    uint64_t v10 = v9;
    unint64_t v12 = v7[1];
    unint64_t v11 = (unint64_t)v7[2];
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v14 = *v7;
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *v7) >> 3);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 3);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v19 = 24 * v18;
      uint64_t v20 = (char *)operator new(24 * v18);
      uint64_t v21 = &v20[24 * v15];
      uint64_t v22 = &v20[v19];
      *(void *)uint64_t v21 = *v5;
      *((void *)v21 + 1) = IsNotNull;
      *((void *)v21 + 2) = v10;
      uint64_t v13 = v21 + 24;
      if (v12 == v14)
      {
        const char *v7 = v21;
        v7[1] = v13;
        v7[2] = v22;
        if (!v14) {
          goto LABEL_21;
        }
      }
      else
      {
        do
        {
          long long v23 = *(_OWORD *)(v12 - 24);
          unint64_t v24 = v21 - 24;
          *((void *)v21 - 1) = *((void *)v12 - 1);
          *(_OWORD *)(v21 - 24) = v23;
          v12 -= 24;
          v21 -= 24;
        }
        while (v12 != v14);
        const char *v7 = v24;
        v7[1] = v13;
        v7[2] = v22;
        if (!v14) {
          goto LABEL_21;
        }
      }
      operator delete(v14);
    }
    else
    {
      *(void *)unint64_t v12 = *v5;
      *((void *)v12 + 1) = IsNotNull;
      *((void *)v12 + 2) = v9;
      uint64_t v13 = v12 + 24;
    }
LABEL_21:
    v7[1] = v13;
  }
  uint64_t ValueType = mlir::pdl::AttributeOp::getValueType((mlir::pdl::AttributeOp *)&v32);
  if (ValueType)
  {
    uint64_t v26 = ValueType;
    unint64_t v27 = (unsigned __int8 ***)a2[2];
    uint64_t v28 = a2[3];
    unint64_t v29 = a2[1];
    uint64_t v33 = **a2;
    uint64_t v30 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*v27, 0, 0, &v33);
    getTreePredicates(v29, v26, v27, v28, v30);
  }
  a1[8] = 1;
  return a1;
}

unsigned char *llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::ResultOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_1 &>(unsigned char *a1, uint64_t *a2)
{
  if (!a1[8]
    && *(void *)a1
    && *(void *)(*(void *)(*(void *)a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id)
  {
    uint64_t v74 = *(void *)a1;
    unsigned int Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v74);
    uint64_t v7 = *a2;
    unsigned int v6 = (void *)a2[1];
    int v8 = (uint64_t **)a2[2];
    uint64_t IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v8);
    uint64_t v10 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v8);
    uint64_t v11 = v10;
    uint64_t v13 = *(void **)(v7 + 8);
    unint64_t v12 = *(void *)(v7 + 16);
    unsigned int v72 = Index;
    if ((unint64_t)v13 < v12)
    {
      *uint64_t v13 = *v6;
      v13[1] = IsNotNull;
      v13[2] = v10;
      unint64_t v14 = v13 + 3;
      goto LABEL_21;
    }
    unint64_t v15 = *(void **)v7;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *(void *)v7) >> 3);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_57;
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v15) >> 3);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x555555555555555) {
      unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_58;
    }
    uint64_t v20 = 24 * v19;
    uint64_t v21 = (char *)operator new(24 * v19);
    uint64_t v22 = &v21[24 * v16];
    long long v23 = &v21[v20];
    *(void *)uint64_t v22 = *v6;
    *((void *)v22 + 1) = IsNotNull;
    *((void *)v22 + 2) = v11;
    unint64_t v14 = v22 + 24;
    if (v13 == v15)
    {
      unsigned int Index = v72;
      *(void *)uint64_t v7 = v22;
      *(void *)(v7 + 8) = v14;
      *(void *)(v7 + 16) = v23;
      if (v15) {
LABEL_20:
      }
        operator delete(v15);
    }
    else
    {
      unsigned int Index = v72;
      do
      {
        long long v24 = *(_OWORD *)(v13 - 3);
        uint64_t v25 = v22 - 24;
        *((void *)v22 - 1) = *(v13 - 1);
        *(_OWORD *)(v22 - 24) = v24;
        v13 -= 3;
        v22 -= 24;
      }
      while (v13 != v15);
      *(void *)uint64_t v7 = v25;
      *(void *)(v7 + 8) = v14;
      *(void *)(v7 + 16) = v23;
      if (v15) {
        goto LABEL_20;
      }
    }
LABEL_21:
    *(void *)(v7 + 8) = v14;
    uint64_t v26 = *(unsigned __int8 ***)a2[2];
    uint64_t v76 = *(void *)a2[1];
    unsigned int v75 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v76) + 1;
    uint64_t v27 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(v26, 0, 0, &v76, &v75);
    uint64_t v28 = *a2;
    unint64_t v29 = (uint64_t **)a2[2];
    uint64_t v30 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v29);
    uint64_t v31 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v29);
    uint64_t v32 = v31;
    unint64_t v34 = *(uint64_t **)(v28 + 8);
    unint64_t v33 = *(void *)(v28 + 16);
    if ((unint64_t)v34 < v33)
    {
      *unint64_t v34 = v27;
      v34[1] = v30;
      uint64_t v35 = v34 + 3;
      v34[2] = v31;
      goto LABEL_35;
    }
    uint64_t v36 = *(uint64_t **)v28;
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v34 - *(void *)v28) >> 3);
    unint64_t v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_57;
    }
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (void)v36) >> 3);
    if (2 * v39 > v38) {
      unint64_t v38 = 2 * v39;
    }
    if (v39 >= 0x555555555555555) {
      unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v40 = v38;
    }
    if (v40 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_58;
    }
    uint64_t v41 = v27;
    uint64_t v42 = 24 * v40;
    unint64_t v43 = (char *)operator new(24 * v40);
    unint64_t v44 = (uint64_t *)&v43[24 * v37];
    uint64_t v45 = &v43[v42];
    uint64_t v27 = v41;
    *unint64_t v44 = v41;
    v44[1] = v30;
    v44[2] = v32;
    uint64_t v35 = v44 + 3;
    if (v34 == v36)
    {
      unsigned int Index = v72;
      *(void *)uint64_t v28 = v44;
      *(void *)(v28 + 8) = v35;
      *(void *)(v28 + 16) = v45;
      if (v36) {
LABEL_34:
      }
        operator delete(v36);
    }
    else
    {
      unsigned int Index = v72;
      do
      {
        long long v46 = *(_OWORD *)(v34 - 3);
        uint64_t v47 = v44 - 3;
        *(v44 - 1) = *(v34 - 1);
        *(_OWORD *)(v44 - 3) = v46;
        v34 -= 3;
        v44 -= 3;
      }
      while (v34 != v36);
      *(void *)uint64_t v28 = v47;
      *(void *)(v28 + 8) = v35;
      *(void *)(v28 + 16) = v45;
      if (v36) {
        goto LABEL_34;
      }
    }
LABEL_35:
    *(void *)(v28 + 8) = v35;
    uint64_t v48 = (unsigned __int8 ***)a2[2];
    uint64_t v76 = v27;
    unsigned int v75 = Index;
    uint64_t v49 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(*v48, 0, 0, &v76, &v75);
    unint64_t v50 = (unsigned __int8 ***)a2[2];
    uint64_t v51 = *a2;
    uint64_t v76 = *(void *)a2[1];
    uint64_t v52 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(*v50, 0, 0, &v76);
    uint64_t v53 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*v50);
    uint64_t v54 = v53;
    unint64_t v56 = *(uint64_t **)(v51 + 8);
    unint64_t v55 = *(void *)(v51 + 16);
    if ((unint64_t)v56 < v55)
    {
      *unint64_t v56 = v49;
      v56[1] = v52;
      unint64_t v57 = v56 + 3;
      v56[2] = v53;
      goto LABEL_49;
    }
    unint64_t v58 = *(uint64_t **)v51;
    unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v56 - *(void *)v51) >> 3);
    unint64_t v60 = v59 + 1;
    if (v59 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      uint64_t v73 = v27;
      unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (void)v58) >> 3);
      if (2 * v61 > v60) {
        unint64_t v60 = 2 * v61;
      }
      if (v61 >= 0x555555555555555) {
        unint64_t v62 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v62 = v60;
      }
      if (v62 <= 0xAAAAAAAAAAAAAAALL)
      {
        uint64_t v63 = 24 * v62;
        uint64_t v64 = (char *)operator new(24 * v62);
        uint64_t v65 = (uint64_t *)&v64[24 * v59];
        unint64_t v66 = &v64[v63];
        *uint64_t v65 = v49;
        v65[1] = v52;
        v65[2] = v54;
        unint64_t v57 = v65 + 3;
        if (v56 == v58)
        {
          uint64_t v27 = v73;
          *(void *)uint64_t v51 = v65;
          *(void *)(v51 + 8) = v57;
          *(void *)(v51 + 16) = v66;
          if (!v58) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v27 = v73;
          do
          {
            long long v67 = *(_OWORD *)(v56 - 3);
            unint64_t v68 = v65 - 3;
            *(v65 - 1) = *(v56 - 1);
            *(_OWORD *)(v65 - 3) = v67;
            v56 -= 3;
            v65 -= 3;
          }
          while (v56 != v58);
          *(void *)uint64_t v51 = v68;
          *(void *)(v51 + 8) = v57;
          *(void *)(v51 + 16) = v66;
          if (!v58) {
            goto LABEL_49;
          }
        }
        operator delete(v58);
LABEL_49:
        *(void *)(v51 + 8) = v57;
        uint64_t v69 = *a2;
        uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v74);
        getTreePredicates(v69, Input, a2[2], a2[4], v27);
        a1[8] = 1;
        return a1;
      }
LABEL_58:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_57:
    abort();
  }
  return a1;
}

unsigned char *llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::ResultsOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_1 &>(unsigned char *a1, uint64_t *a2)
{
  if (!a1[8]
    && *(void *)a1
    && *(void *)(*(void *)(*(void *)a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id)
  {
    uint64_t v76 = *(void *)a1;
    uint64_t Index = mlir::pdl::ResultsOp::getIndex((mlir::pdl::ResultsOp *)&v76);
    if ((Index & 0xFF00000000) == 0) {
      goto LABEL_23;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = (void *)a2[1];
    int v8 = (uint64_t **)a2[2];
    uint64_t IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v8);
    uint64_t v10 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v8);
    uint64_t v11 = v10;
    uint64_t v13 = *(void **)(v6 + 8);
    unint64_t v12 = *(void *)(v6 + 16);
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v73 = Index;
      unint64_t v15 = *(void **)v6;
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *(void *)v6) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_59;
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v15) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_60;
      }
      uint64_t v20 = 24 * v19;
      uint64_t v21 = (char *)operator new(24 * v19);
      uint64_t v22 = &v21[24 * v16];
      long long v23 = &v21[v20];
      *(void *)uint64_t v22 = *v7;
      *((void *)v22 + 1) = IsNotNull;
      *((void *)v22 + 2) = v11;
      unint64_t v14 = v22 + 24;
      if (v13 == v15)
      {
        uint64_t Index = v73;
        *(void *)uint64_t v6 = v22;
        *(void *)(v6 + 8) = v14;
        *(void *)(v6 + 16) = v23;
        if (!v15) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t Index = v73;
        do
        {
          long long v24 = *(_OWORD *)(v13 - 3);
          uint64_t v25 = v22 - 24;
          *((void *)v22 - 1) = *(v13 - 1);
          *(_OWORD *)(v22 - 24) = v24;
          v13 -= 3;
          v22 -= 24;
        }
        while (v13 != v15);
        *(void *)uint64_t v6 = v25;
        *(void *)(v6 + 8) = v14;
        *(void *)(v6 + 16) = v23;
        if (!v15) {
          goto LABEL_22;
        }
      }
      operator delete(v15);
    }
    else
    {
      *uint64_t v13 = *v7;
      v13[1] = IsNotNull;
      v13[2] = v10;
      unint64_t v14 = v13 + 3;
    }
LABEL_22:
    *(void *)(v6 + 8) = v14;
LABEL_23:
    uint64_t v26 = *(unsigned __int8 ***)a2[2];
    uint64_t v79 = *(void *)a2[1];
    LODWORD(v78) = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v79) + 1;
    uint64_t v27 = (const char *)mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(v26, 0, 0, &v79, (unsigned int *)&v78);
    uint64_t v28 = *a2;
    unint64_t v29 = (uint64_t **)a2[2];
    uint64_t v30 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v29);
    uint64_t v31 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v29);
    uint64_t v32 = v31;
    unint64_t v34 = *(const char ***)(v28 + 8);
    unint64_t v33 = *(void *)(v28 + 16);
    if ((unint64_t)v34 < v33)
    {
      *unint64_t v34 = v27;
      v34[1] = (const char *)v30;
      uint64_t v35 = v34 + 3;
      v34[2] = (const char *)v31;
      goto LABEL_37;
    }
    uint64_t v74 = Index;
    uint64_t v36 = *(const char ***)v28;
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v34 - *(void *)v28) >> 3);
    unint64_t v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_59;
    }
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (void)v36) >> 3);
    if (2 * v39 > v38) {
      unint64_t v38 = 2 * v39;
    }
    if (v39 >= 0x555555555555555) {
      unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v40 = v38;
    }
    if (v40 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_60;
    }
    uint64_t v41 = v27;
    uint64_t v42 = 24 * v40;
    unint64_t v43 = (char *)operator new(24 * v40);
    unint64_t v44 = (const char **)&v43[24 * v37];
    uint64_t v45 = &v43[v42];
    uint64_t v27 = v41;
    *unint64_t v44 = v41;
    v44[1] = (const char *)v30;
    v44[2] = (const char *)v32;
    uint64_t v35 = v44 + 3;
    if (v34 == v36)
    {
      uint64_t Index = v74;
      *(void *)uint64_t v28 = v44;
      *(void *)(v28 + 8) = v35;
      *(void *)(v28 + 16) = v45;
      if (v36) {
LABEL_36:
      }
        operator delete(v36);
    }
    else
    {
      uint64_t Index = v74;
      do
      {
        long long v46 = *(_OWORD *)(v34 - 3);
        uint64_t v47 = v44 - 3;
        *(v44 - 1) = *(v34 - 1);
        *(_OWORD *)(v44 - 3) = v46;
        v34 -= 3;
        v44 -= 3;
      }
      while (v34 != v36);
      *(void *)uint64_t v28 = v47;
      *(void *)(v28 + 8) = v35;
      *(void *)(v28 + 16) = v45;
      if (v36) {
        goto LABEL_36;
      }
    }
LABEL_37:
    *(void *)(v28 + 8) = v35;
    uint64_t v48 = (unsigned __int8 ***)a2[2];
    char v49 = *(unsigned char *)a2[3];
    unint64_t v78 = v27;
    uint64_t v79 = Index;
    char v77 = v49;
    uint64_t v50 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v48, 0, 0, &v78, (unint64_t *)&v79, &v77);
    uint64_t v51 = (unsigned __int8 ***)a2[2];
    uint64_t v52 = *a2;
    uint64_t v79 = *(void *)a2[1];
    uint64_t v53 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(*v51, 0, 0, &v79);
    uint64_t v54 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*v51);
    uint64_t v55 = v54;
    unint64_t v57 = *(uint64_t **)(v52 + 8);
    unint64_t v56 = *(void *)(v52 + 16);
    if ((unint64_t)v57 < v56)
    {
      *unint64_t v57 = v50;
      v57[1] = v53;
      unint64_t v58 = v57 + 3;
      v57[2] = v54;
      goto LABEL_51;
    }
    unint64_t v59 = *(uint64_t **)v52;
    unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v57 - *(void *)v52) >> 3);
    unint64_t v61 = v60 + 1;
    if (v60 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      unsigned int v75 = v27;
      unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (void)v59) >> 3);
      if (2 * v62 > v61) {
        unint64_t v61 = 2 * v62;
      }
      if (v62 >= 0x555555555555555) {
        unint64_t v63 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v63 = v61;
      }
      if (v63 <= 0xAAAAAAAAAAAAAAALL)
      {
        uint64_t v64 = 24 * v63;
        uint64_t v65 = (char *)operator new(24 * v63);
        unint64_t v66 = (uint64_t *)&v65[24 * v60];
        long long v67 = &v65[v64];
        *unint64_t v66 = v50;
        v66[1] = v53;
        v66[2] = v55;
        unint64_t v58 = v66 + 3;
        if (v57 == v59)
        {
          uint64_t v27 = v75;
          *(void *)uint64_t v52 = v66;
          *(void *)(v52 + 8) = v58;
          *(void *)(v52 + 16) = v67;
          if (!v59) {
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v27 = v75;
          do
          {
            long long v68 = *(_OWORD *)(v57 - 3);
            uint64_t v69 = v66 - 3;
            *(v66 - 1) = *(v57 - 1);
            *(_OWORD *)(v66 - 3) = v68;
            v57 -= 3;
            v66 -= 3;
          }
          while (v57 != v59);
          *(void *)uint64_t v52 = v69;
          *(void *)(v52 + 8) = v58;
          *(void *)(v52 + 16) = v67;
          if (!v59) {
            goto LABEL_51;
          }
        }
        operator delete(v59);
LABEL_51:
        *(void *)(v52 + 8) = v58;
        uint64_t v70 = *a2;
        uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v76);
        getTreePredicates(v70, Input, a2[2], a2[4], v27);
        a1[8] = 1;
        return a1;
      }
LABEL_60:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_59:
    abort();
  }
  return a1;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, void *a4, unsigned int *a5)
{
  uint64_t v6 = a4;
  uint64_t v7 = &unk_1E8EBA000;
  uint64_t v21 = a5;
  uint64_t v22 = a1;
  uint64_t v19 = a3;
  uint64_t v18 = a2;
  uint64_t v7 = (void *)&unk_1E8EBA000;
  a2 = v18;
  a3 = v19;
  uint64_t v6 = a4;
  a5 = v21;
  int v10 = v9;
  a1 = v22;
  if (!v10) {
    return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(a1, a2, a3, v7[481], v6, a5);
  }
  long long v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationPosition]";
  unint64_t v24 = 92;
  unint64_t v11 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
  if (v24 >= v11) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = v24;
  }
  uint64_t v13 = &v23[v12];
  unint64_t v14 = v24 - v12;
  if (v24 - v12 >= 0x12) {
    uint64_t v15 = 18;
  }
  else {
    uint64_t v15 = v24 - v12;
  }
  unint64_t v16 = v14 - v15;
  if (v16 >= v16 - 1) {
    uint64_t v17 = v16 - 1;
  }
  else {
    uint64_t v17 = v16;
  }
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
  return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(v22, v18, v19, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id, a4, v21);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unsigned int *a6)
{
  uint64_t v6 = a4;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  v19[0] = a2;
  v19[1] = a3;
  uint64_t v7 = *a6;
  *(void *)&long long v18 = *a5;
  *((void *)&v18 + 1) = v7;
  LODWORD(v21) = 0;
  uint64_t v20 = 0;
  unint64_t v8 = 0x1E8EB8000uLL;
  {
    unint64_t v16 = a1;
    unint64_t v8 = 0x1E8EB8000uLL;
    int v13 = v12;
    uint64_t v6 = a4;
    a1 = v16;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      unint64_t v8 = 0x1E8EB8000;
      uint64_t v6 = a4;
      a1 = v16;
    }
  }
  uint64_t v9 = __ROR8__(*(void *)((char *)&v18 + 4) + 12, 12);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * (v9 ^ ((0x9DDFEA08EB382D69 * (*(void *)(v8 + 3024) ^ (unint64_t)v18 ^ v9)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(void *)(v8 + 3024) ^ v18 ^ v9)));
  uint64_t v17 = &v18;
  uint64_t v20 = &v18;
  uint64_t v21 = v19;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, (-348639895 * ((v10 >> 47) ^ v10)) ^ DWORD1(v18), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(void *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  __n128 v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)0>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(a2, (__n128 *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unint64_t v5 = *a2;
    unint64_t v6 = 0x1E8EB8000uLL;
    {
      long long v23 = a3;
      uint64_t v21 = a2;
      uint64_t v24 = v4;
      int v22 = v3;
      unint64_t v25 = v5;
      unint64_t v6 = 0x1E8EB8000uLL;
      uint64_t v4 = v24;
      unint64_t v5 = v25;
      int v3 = v22;
      a2 = v21;
      a3 = v23;
      if (v19)
      {
        unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v20 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
        unint64_t v6 = 0x1E8EB8000;
        uint64_t v4 = v24;
        unint64_t v5 = v25;
        int v3 = v22;
        a2 = v21;
        a3 = v23;
      }
    }
    uint64_t v7 = (*(void *)(v6 + 3024) + 8 * v5) ^ HIDWORD(v5);
    unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
    int v9 = -348639895 * ((v8 >> 47) ^ v8);
    unsigned int v10 = v3 - 1;
    uint64_t v11 = v9 & (v3 - 1);
    int v12 = (void *)(v4 + 32 * v11);
    uint64_t v13 = *v12;
    if (*a2 == *v12)
    {
      uint64_t result = 1;
LABEL_5:
      *a3 = v12;
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      uint64_t result = 1;
      while (v13 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v13 == -8192;
        }
        if (v17) {
          uint64_t v15 = v12;
        }
        int v18 = v11 + v16++;
        uint64_t v11 = v18 & v10;
        int v12 = (void *)(v4 + 32 * v11);
        uint64_t v13 = *v12;
        if (*a2 == *v12) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v15) {
        int v12 = v15;
      }
      *a3 = v12;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::grow(a1, v7);
    int v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    unsigned int v10 = (void *)(32 * v3);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v10 + (void)v4);
    llvm::deallocate_buffer(v4, v10);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = (v11 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v12)
    {
      uint64_t v13 = v12 + 1;
      uint64_t v14 = (v12 + 1) & 0xFFFFFFFFFFFFFFELL;
      uint64_t v15 = &result[4 * v14];
      int v16 = result + 4;
      uint64_t v17 = v14;
      do
      {
        *(v16 - 4) = -4096;
        *int v16 = -4096;
        v16 += 8;
        v17 -= 2;
      }
      while (v17);
      if (v13 == v14) {
        return result;
      }
    }
    else
    {
      uint64_t v15 = result;
    }
    int v18 = &result[4 * v11];
    do
    {
      *uint64_t v15 = -4096;
      v15 += 4;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  *(void *)(result + 8) = 0;
  uint64_t v5 = *(unsigned int *)(result + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)result;
    uint64_t v7 = (v5 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (!v7)
    {
      unsigned int v10 = *(void **)result;
LABEL_8:
      uint64_t v13 = (void *)(v6 + 32 * v5);
      do
      {
        *unsigned int v10 = -4096;
        v10 += 4;
      }
      while (v10 != v13);
      goto LABEL_12;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = (v7 + 1) & 0xFFFFFFFFFFFFFFELL;
    unsigned int v10 = (void *)(v6 + 32 * v9);
    uint64_t v11 = (void *)(v6 + 32);
    uint64_t v12 = v9;
    do
    {
      *(v11 - 4) = -4096;
      void *v11 = -4096;
      v11 += 8;
      v12 -= 2;
    }
    while (v12);
    if (v8 != v9) {
      goto LABEL_8;
    }
  }
LABEL_12:
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v17 = 0;
      llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)result, (unint64_t *)a2, &v17);
      uint64_t v14 = v17;
      unint64_t v15 = *(void *)a2;
      *(_DWORD *)(v17 + 24) = 0;
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)uint64_t v14 = v15;
      *(void *)(v14 + 8) = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 0;
      LODWORD(v15) = *(_DWORD *)(v14 + 20);
      *(_DWORD *)(v14 + 20) = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a2 + 20) = v15;
      uint64_t v16 = *(unsigned int *)(v14 + 24);
      *(_DWORD *)(v14 + 24) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = v16;
      ++*(_DWORD *)(v4 + 8);
      llvm::deallocate_buffer(0, (void *)(24 * v16));
    }
    a2 += 32;
  }
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::UsersPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position *&,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UsersPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)a1
      && *(unsigned __int8 *)(a2 + 32) == *(unsigned __int8 *)(*(void *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::UsersPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position *&,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UsersPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  __n128 v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)9>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>>(a2, (__n128 *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)9>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 40;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 40;
  *(_DWORD *)(v9 + 16) = 9;
  *(void *)unint64_t v9 = &unk_1EC9AA938;
  *(void *)(v9 + 8) = 0;
  __n128 result = *a2;
  *(__n128 *)(v9 + 24) = *a2;
  unint64_t v11 = a2->n128_u64[0];
  *(void *)unint64_t v9 = &unk_1EC9AAA38;
  *(void *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::UsersPosition::~UsersPosition(mlir::pdl_to_pdl_interp::UsersPosition *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)9>::~PredicateBase(mlir::GenericProgramPoint *a1)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(a1);

  operator delete(v1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ForEachPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ForEachPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(void *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ForEachPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ForEachPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  __n128 v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)10>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(a2, (__n128 *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)10>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(uint64_t a1, __n128 *a2)
{
  *(void *)(a1 + 80) += 40;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 40;
  *(_DWORD *)(v9 + 16) = 10;
  *(void *)unint64_t v9 = &unk_1EC9AA978;
  *(void *)(v9 + 8) = 0;
  __n128 result = *a2;
  *(__n128 *)(v9 + 24) = *a2;
  unint64_t v11 = a2->n128_u64[0];
  *(void *)unint64_t v9 = &unk_1EC9AAA78;
  *(void *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::ForEachPosition::~ForEachPosition(mlir::pdl_to_pdl_interp::ForEachPosition *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)10>::~PredicateBase(mlir::GenericProgramPoint *a1)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(a1);

  operator delete(v1);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  BOOL v4 = &unk_1E8EBA000;
  {
    int v18 = a4;
    int v19 = a1;
    uint64_t v16 = a2;
    unint64_t v17 = a3;
    BOOL v4 = (void *)&unk_1E8EBA000;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      long long v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeLiteralPosition]";
      unint64_t v24 = 99;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      unint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      BOOL v4 = (void *)&unk_1E8EBA000;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[473];
  long long v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  uint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::pdl_to_pdl_interp::Position,mlir::Attribute,(mlir::pdl_to_pdl_interp::Predicates::Kind)7>::construct<mlir::Attribute>(a2, *(void **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::pdl_to_pdl_interp::Position,mlir::Attribute,(mlir::pdl_to_pdl_interp::Predicates::Kind)7>::construct<mlir::Attribute>(uint64_t a1, void *a2)
{
  *(void *)(a1 + 80) += 32;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 32 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t result = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = result + 32;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 7;
  *(void *)(result + 24) = *a2;
  *(void *)unint64_t result = &unk_1EC9AAB58;
  return result;
}

void mlir::pdl_to_pdl_interp::AttributeLiteralPosition::~AttributeLiteralPosition(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, long long *a4)
{
  {
    uint64_t v18 = a3;
    int v19 = a4;
    uint64_t v17 = a2;
    a2 = v17;
    a3 = v18;
    a4 = v19;
    if (v9)
    {
      *(void *)&long long v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ConstraintQuestion]";
      *((void *)&v22 + 1) = 93;
      unint64_t v10 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v22 + 1) >= v10) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = *((void *)&v22 + 1);
      }
      uint64_t v12 = v22 + v11;
      unint64_t v13 = *((void *)&v22 + 1) - v11;
      if (*((void *)&v22 + 1) - v11 >= 0x12) {
        uint64_t v14 = 18;
      }
      else {
        uint64_t v14 = *((void *)&v22 + 1) - v11;
      }
      unint64_t v15 = v13 - v14;
      if (v15 >= v15 - 1) {
        uint64_t v16 = v15 - 1;
      }
      else {
        uint64_t v16 = v15;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ConstraintQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v12 + v14, v16);
      a2 = v17;
      a3 = v18;
      a4 = v19;
    }
  }
  uint64_t v5 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ConstraintQuestion,void>::resolveTypeID(void)::id;
  v25[0] = a2;
  v25[1] = a3;
  long long v6 = a4[1];
  long long v22 = *a4;
  long long v23 = v6;
  uint64_t v24 = *((void *)a4 + 4);
  unsigned int v7 = llvm::hash_combine<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>((uint64_t)&v22, (uint64_t)&v23, (char *)&v24);
  v20[0] = &v22;
  v20[1] = v25;
  uint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

unint64_t llvm::hash_combine<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  {
    uint64_t v9 = a1;
    a1 = v9;
    if (v10)
    {
      unint64_t v11 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v11 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v11;
      a1 = v9;
    }
  }
  uint64_t v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v14[0] = llvm::hash_value(*(void **)a1, *(void *)(a1 + 8));
  unint64_t v12 = 0;
  unint64_t v5 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(void **)a2, *(void *)a2 + 8 * *(void *)(a2 + 8));
  long long v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v12, (void *)v14 + 1, (unint64_t)v15, v5);
  unint64_t v13 = v12;
  unsigned int v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v14, (uint64_t *)&v13, v6, (unint64_t)v15, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v14, v13, v7, (char *)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  size_t v3 = *(void *)(a2 + 16);
  if (v3 == *(void *)(*a1 + 8)
    && (!v3 || !memcmp(*(const void **)(a2 + 8), *(const void **)v2, v3))
    && (uint64_t v5 = *(void *)(a2 + 32), v5 == *(void *)(v2 + 24))
    && !memcmp(*(const void **)(a2 + 24), *(const void **)(v2 + 16), 8 * v5))
  {
    return *(unsigned __int8 *)(a2 + 40) == *(unsigned __int8 *)(v2 + 32);
  }
  else
  {
    return 0;
  }
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(long long **a1, size_t a2)
{
  long long v3 = **a1;
  long long v4 = (*a1)[1];
  uint64_t v9 = *((void *)*a1 + 4);
  v8[0] = v3;
  v8[1] = v4;
  unint64_t v5 = mlir::pdl_to_pdl_interp::ConstraintQuestion::construct(a2, (uint64_t *)v8);
  long long v6 = a1[1];
  if (*(void *)v6) {
    (*(void (**)(void, unint64_t))v6)(*((void *)v6 + 1), v5);
  }
  return v5;
}

unint64_t mlir::pdl_to_pdl_interp::ConstraintQuestion::construct(size_t __sz, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v4 + 1, 0);
    uint64_t v7 = v6;
    if (v4 < 8)
    {
      uint64_t v8 = (unsigned char *)v6;
      uint64_t v9 = (char *)v5;
      goto LABEL_18;
    }
    uint64_t v8 = (unsigned char *)v6;
    uint64_t v9 = (char *)v5;
    if ((unint64_t)(v6 - v5) < 0x20) {
      goto LABEL_18;
    }
    if (v4 >= 0x20)
    {
      unint64_t v10 = v4 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v13 = (long long *)(v5 + 16);
      uint64_t v14 = (_OWORD *)(v6 + 16);
      unint64_t v15 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *uint64_t v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 32;
      }
      while (v15);
      if (v4 == v10)
      {
LABEL_19:
        *(unsigned char *)(v6 + v4) = 0;
        uint64_t v11 = a2[3];
        if (v11) {
          goto LABEL_20;
        }
LABEL_7:
        uint64_t v12 = 0;
        goto LABEL_28;
      }
      if ((v4 & 0x18) == 0)
      {
        uint64_t v9 = (char *)(v5 + v10);
        uint64_t v8 = (unsigned char *)(v6 + v10);
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v10 = 0;
    }
    uint64_t v8 = (unsigned char *)(v6 + (v4 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v9 = (char *)(v5 + (v4 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v17 = (uint64_t *)(v5 + v10);
    uint64_t v18 = (void *)(v6 + v10);
    unint64_t v19 = v10 - (v4 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v20 = *v17++;
      *v18++ = v20;
      v19 += 8;
    }
    while (v19);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_19;
    }
    do
    {
LABEL_18:
      char v21 = *v9++;
      *v8++ = v21;
    }
    while (v9 != (char *)(v5 + v4));
    goto LABEL_19;
  }
  uint64_t v7 = 0;
  uint64_t v11 = a2[3];
  if (!v11) {
    goto LABEL_7;
  }
LABEL_20:
  uint64_t v22 = a2[2];
  uint64_t v23 = 8 * v11;
  uint64_t v24 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v11, 3);
  uint64_t v12 = v24;
  if ((unint64_t)(8 * v11 - 8) < 0x18)
  {
    unint64_t v25 = (void *)v24;
    uint64_t v26 = (uint64_t *)v22;
  }
  else
  {
    unint64_t v25 = (void *)v24;
    uint64_t v26 = (uint64_t *)v22;
    if ((unint64_t)(v24 - v22) >= 0x20)
    {
      unint64_t v27 = ((unint64_t)(v23 - 8) >> 3) + 1;
      uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v25 = (void *)(v24 + v28);
      uint64_t v26 = (uint64_t *)(v22 + v28);
      unint64_t v29 = (long long *)(v22 + 16);
      uint64_t v30 = (_OWORD *)(v24 + 16);
      uint64_t v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v32 = *v29;
        *(v30 - 1) = *(v29 - 1);
        _OWORD *v30 = v32;
        v29 += 2;
        v30 += 2;
        v31 -= 4;
      }
      while (v31);
      if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_28;
      }
    }
  }
  do
  {
    uint64_t v33 = *v26++;
    *v25++ = v33;
  }
  while (v26 != (uint64_t *)(v22 + v23));
LABEL_28:
  char v34 = *((unsigned char *)a2 + 32);
  *(void *)(__sz + 80) += 48;
  if (*(void *)__sz) {
    BOOL v35 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 48 > *(void *)(__sz + 8)
  }
                                                                                  - *(void *)__sz;
  else {
    BOOL v35 = 1;
  }
  if (v35)
  {
    unsigned int v36 = *(_DWORD *)(__sz + 24) >> 7;
    if (v36 >= 0x1E) {
      LOBYTE(v36) = 30;
    }
    uint64_t v37 = 4096 << v36;
    buffer = (char *)llvm::allocate_buffer(4096 << v36, (std::align_val_t)8uLL);
    uint64_t v39 = *(unsigned int *)(__sz + 24);
    if (v39 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v39 + 1, 8);
      LODWORD(v39) = *(_DWORD *)(__sz + 24);
    }
    *(void *)(*(void *)(__sz + 16) + 8 * v39) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(void *)(__sz + 8) = &buffer[v37];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t result = (*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)__sz = result + 48;
  *(_DWORD *)unint64_t result = 20;
  *(void *)(result + 8) = v7;
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v12;
  *(void *)(result + 32) = v11;
  *(unsigned char *)(result + 40) = v34;
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, void *a4)
{
  unint64_t v4 = &unk_1E8EBA000;
  {
    uint64_t v18 = a4;
    unint64_t v19 = a1;
    long long v16 = a2;
    unint64_t v17 = a3;
    unint64_t v4 = (void *)&unk_1E8EBA000;
    a2 = v16;
    a3 = v17;
    int v8 = v7;
    a4 = v18;
    a1 = v19;
    if (v8)
    {
      uint64_t v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeLiteralPosition]";
      unint64_t v24 = 94;
      unint64_t v9 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v9) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v24;
      }
      uint64_t v11 = &v23[v10];
      unint64_t v12 = v24 - v10;
      if (v24 - v10 >= 0x12) {
        uint64_t v13 = 18;
      }
      else {
        uint64_t v13 = v24 - v10;
      }
      unint64_t v14 = v12 - v13;
      if (v14 >= v14 - 1) {
        uint64_t v15 = v14 - 1;
      }
      else {
        uint64_t v15 = v14;
      }
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeLiteralPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      unint64_t v4 = (void *)&unk_1E8EBA000;
      a2 = v16;
      a3 = v17;
      a4 = v18;
      a1 = v19;
    }
  }
  uint64_t v5 = v4[489];
  uint64_t v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = *a4;
  v20[0] = &v22;
  v20[1] = &v23;
  char v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, (v22 >> 4) ^ (v22 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::pdl_to_pdl_interp::Position,mlir::Attribute,(mlir::pdl_to_pdl_interp::Predicates::Kind)8>::construct<mlir::Attribute>(a2, *(void **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::pdl_to_pdl_interp::Position,mlir::Attribute,(mlir::pdl_to_pdl_interp::Predicates::Kind)8>::construct<mlir::Attribute>(uint64_t a1, void *a2)
{
  *(void *)(a1 + 80) += 32;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 32 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t result = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = result + 32;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 8;
  *(void *)(result + 24) = *a2;
  *(void *)unint64_t result = &unk_1EC9AAB18;
  return result;
}

void mlir::pdl_to_pdl_interp::TypeLiteralPosition::~TypeLiteralPosition(mlir::pdl_to_pdl_interp::TypeLiteralPosition *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

uint64_t llvm::MapVector<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>,llvm::DenseMap<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Qualifier *,void>,llvm::detail::DenseMapPair<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int>>,llvm::SmallVector<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>,0u>>::try_emplace<std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v7 - 1);
  unint64_t v10 = (void *)(*(void *)a1 + 16 * v9);
  uint64_t v11 = *v10;
  if (v6 == *v10) {
    return *(void *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (v11 != -4096)
  {
    if (v18) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v11 == -8192;
    }
    if (v20) {
      uint64_t v18 = v10;
    }
    int v21 = v9 + v19++;
    uint64_t v9 = v21 & (v7 - 1);
    unint64_t v10 = (void *)(v8 + 16 * v9);
    uint64_t v11 = *v10;
    if (v6 == *v10) {
      return *(void *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
    }
  }
  uint64_t v22 = (uint64_t)(v18 ? v18 : v10);
  int v23 = *(_DWORD *)(a1 + 8);
  if (4 * v23 + 4 < 3 * v7)
  {
    if (v7 + ~v23 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_24:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1, v7);
  int v24 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v25 = v24 & ((v6 >> 4) ^ (v6 >> 9));
  uint64_t v22 = *(void *)a1 + 16 * v25;
  uint64_t v26 = *(void *)v22;
  if (v6 == *(void *)v22)
  {
LABEL_26:
    ++*(_DWORD *)(a1 + 8);
    if (v6 == -4096) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v27 = 0;
  int v28 = 1;
  while (v26 != -4096)
  {
    if (v27) {
      BOOL v29 = 0;
    }
    else {
      BOOL v29 = v26 == -8192;
    }
    if (v29) {
      uint64_t v27 = v22;
    }
    unsigned int v30 = v25 + v28++;
    unsigned int v25 = v30 & v24;
    uint64_t v22 = *(void *)a1 + 16 * (v30 & v24);
    uint64_t v26 = *(void *)v22;
    if (v6 == *(void *)v22) {
      goto LABEL_26;
    }
  }
  if (v27) {
    uint64_t v22 = v27;
  }
LABEL_6:
  uint64_t v13 = *(void *)v22;
  ++*(_DWORD *)(a1 + 8);
  if (v13 != -4096) {
LABEL_7:
  }
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *(void *)uint64_t v22 = v6;
  *(_DWORD *)(v22 + 8) = 0;
  uint64_t v14 = *(unsigned int *)(a1 + 32);
  *(_DWORD *)(v22 + 8) = v14;
  uint64_t v31 = a3;
  long long v32 = a2;
  if (v14 >= *(_DWORD *)(a1 + 36))
  {
    llvm::SmallVectorTemplateBase<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<mlir::pdl_to_pdl_interp::Qualifier *&&>,std::tuple<std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>&&>>(a1 + 24, (uint64_t)&std::piecewise_construct, &v32, &v31);
    unsigned int v17 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    uint64_t v15 = (void *)(*(void *)(a1 + 24) + 16 * v14);
    *uint64_t v15 = *a2;
    uint64_t v16 = *a3;
    *a3 = 0;
    v15[1] = v16;
    unsigned int v17 = v14 + 1;
    *(_DWORD *)(a1 + 32) = v14 + 1;
  }
  return *(void *)(a1 + 24) + 16 * v17 - 16;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<mlir::pdl_to_pdl_interp::Qualifier *&&>,std::tuple<std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>&&>>(uint64_t a1, uint64_t a2, void **a3, uint64_t **a4)
{
  unint64_t v32 = 0;
  unsigned int v7 = (char *)(a1 + 16);
  uint64_t v8 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 16, &v32);
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  uint64_t v10 = 16 * v9;
  uint64_t v11 = &v8[16 * v9];
  unint64_t v12 = *a4;
  *(void *)uint64_t v11 = **a3;
  uint64_t v13 = *v12;
  *unint64_t v12 = 0;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = *(char **)a1;
  if (!v9) {
    goto LABEL_19;
  }
  unint64_t v15 = (v9 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v15 < 7 || (v8 < &v14[v10] ? (BOOL v16 = v14 >= &v8[v10]) : (BOOL v16 = 1), !v16))
  {
    int v19 = v8;
    BOOL v20 = *(char **)a1;
    do
    {
LABEL_13:
      *(void *)int v19 = *(void *)v20;
      uint64_t v26 = *((void *)v20 + 1);
      *((void *)v20 + 1) = 0;
      *((void *)v19 + 1) = v26;
      v20 += 16;
      v19 += 16;
    }
    while (v20 != &v14[v10]);
    goto LABEL_14;
  }
  unint64_t v17 = v15 + 1;
  uint64_t v18 = (v15 + 1) & 0x1FFFFFFFFFFFFFFELL;
  int v19 = &v8[16 * v18];
  BOOL v20 = &v14[16 * v18];
  uint64_t v21 = v18;
  uint64_t v22 = v8;
  int v23 = *(char **)a1;
  do
  {
    long long v24 = *(_OWORD *)v23;
    long long v25 = *((_OWORD *)v23 + 1);
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 3) = 0;
    *(_OWORD *)uint64_t v22 = v24;
    *((_OWORD *)v22 + 1) = v25;
    v22 += 32;
    v23 += 32;
    v21 -= 2;
  }
  while (v21);
  if (v17 != v18) {
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v27 = *(void *)a1 - 8;
  do
  {
    uint64_t v28 = *(void *)(v27 + v10);
    *(void *)(v27 + v10) = 0;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    v10 -= 16;
  }
  while (v10);
  uint64_t v14 = *(char **)a1;
LABEL_19:
  int v29 = v32;
  if (v14 != v7) {
    free(v14);
  }
  *(void *)a1 = v8;
  unsigned int v30 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v30;
  *(_DWORD *)(a1 + 12) = v29;
  return (uint64_t)&v8[16 * v30 - 16];
}

void mlir::pdl_to_pdl_interp::ExitNode::~ExitNode(mlir::pdl_to_pdl_interp::ExitNode *this)
{
  *(void *)this = &unk_1EC9AA8D8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1EC9AA8D8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  operator delete(this);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<anonymous namespace'::OrderedPredicate,llvm::detail::DenseSetEmpty,anonymous namespace'::OrderedPredicateDenseInfo,llvm::detail::DenseSetPair<anonymous namespace'::OrderedPredicate>>,anonymous namespace'::OrderedPredicate,llvm::detail::DenseSetEmpty,anonymous namespace'::OrderedPredicateDenseInfo,llvm::detail::DenseSetPair<anonymous namespace'::OrderedPredicate>>::LookupBucketFor<anonymous namespace'::OrderedPredicate>(uint64_t result, int a2, void *a3, void *a4)
{
  if (a2)
  {
    {
      uint64_t v22 = result;
      int v21 = a2;
      BOOL v20 = a3;
      a3 = v20;
      a2 = v21;
      int v18 = v17;
      unint64_t result = v22;
      if (v18)
      {
        unint64_t v19 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v19 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v19;
        a3 = v20;
        a2 = v21;
        unint64_t result = v22;
      }
    }
    uint64_t v4 = a3[1];
    uint64_t v5 = __ROR8__(v4 + 16, 16);
    unsigned int v6 = (a2 - 1) & ((-348639895
                    * ((((0x9DDFEA08EB382D69
                                      * (v5 ^ ((0x9DDFEA08EB382D69
                                              * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *a3 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *a3 ^ v5)))) >> 32) >> 15) ^ (-348639895 * (v5 ^ (((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *a3 ^ v5)) >> 32) >> 15) ^ (-348639895 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *(_DWORD *)a3 ^ v5)))))) ^ v4);
    unsigned int v7 = (void *)(result + 56 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (*a3 != *v7 || v4 != v9)
    {
      uint64_t v11 = 0;
      int v12 = 1;
      do
      {
        if (v8 == -4096 && v9 == -4096) {
          break;
        }
        if (v11) {
          BOOL v13 = 0;
        }
        else {
          BOOL v13 = v9 == -8192;
        }
        if (v13 && v8 == -8192) {
          uint64_t v11 = v7;
        }
        unsigned int v15 = v6 + v12++;
        unsigned int v6 = v15 & (a2 - 1);
        unsigned int v7 = (void *)(result + 56 * v6);
        uint64_t v8 = *v7;
        uint64_t v9 = v7[1];
      }
      while (*a3 != *v7 || v4 != v9);
    }
    llvm::deallocate_buffer(0, 0);
  }
  *a4 = 0;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,anonymous namespace'::OrderedPredicate **,false>(uint64_t result, uint64_t **a2, uint64_t a3, char a4)
{
  v441 = (uint64_t **)result;
LABEL_2:
  unsigned int v7 = a2;
  v425 = a2 - 1;
  j = v441;
  while (1)
  {
    uint64_t v9 = j;
    uint64_t v10 = (char *)v7 - (char *)j;
    uint64_t v11 = v7 - j;
    v441 = v9;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v202 = (uint64_t)*(a2 - 1);
          __int16 v203 = *v9;
          uint64_t v204 = **v9;
          unsigned int OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v204);
          unsigned int v206 = *(_DWORD *)(v204 + 16);
          unsigned int v207 = *(_DWORD *)v203[1];
          unsigned int v209 = *(_DWORD *)(v202 + 16);
          unsigned int v208 = *(_DWORD *)(v202 + 20);
          unsigned int v210 = *((_DWORD *)v203 + 6);
          unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v202);
          unsigned int v211 = *((_DWORD *)v203 + 4);
          if (v211 < v209
            || v209 >= v211
            && ((unsigned int v212 = *((_DWORD *)v203 + 5), v212 < v208)
             || v208 >= v212
             && (result < OperationDepth
              || OperationDepth >= result
              && ((unsigned int v402 = *(_DWORD *)(*(void *)v202 + 16), v402 < v206)
               || v206 >= v402
               && ((unsigned int v403 = **(_DWORD **)(v202 + 8), v403 < v207)
                || (v207 >= v403 ? (BOOL v404 = *(_DWORD *)(v202 + 24) >= v210) : (BOOL v404 = 1), !v404))))))
          {
            v213 = *v9;
            char *v9 = *(a2 - 1);
            *(a2 - 1) = v213;
          }
          break;
        case 3:
          break;
        case 4:
          break;
        case 5:
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v10 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 != a2)
      {
        unint64_t v405 = v10;
        int64_t v250 = (unint64_t)(v11 - 2) >> 1;
        int64_t v251 = v250;
        uint64_t v422 = v11;
        do
        {
          int64_t v253 = v251;
          if (v250 >= v251)
          {
            uint64_t v254 = (2 * v251) | 1;
            v255 = &v441[v254];
            uint64_t v256 = 2 * v251 + 2;
            if (v256 < v11)
            {
              v257 = *v255;
              v259 = v255 + 1;
              v258 = v255[1];
              uint64_t v260 = *v258;
              int64_t v261 = v251;
              uint64_t v262 = (2 * v251) | 1;
              unsigned int v435 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v258);
              unsigned int v427 = *(_DWORD *)(v260 + 16);
              unsigned int v412 = *(_DWORD *)v258[1];
              unsigned int v264 = *((_DWORD *)v257 + 4);
              unsigned int v263 = *((_DWORD *)v257 + 5);
              unsigned int v407 = *((_DWORD *)v258 + 6);
              unsigned int v265 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v257);
              v255 = &v441[v254];
              uint64_t v254 = v262;
              uint64_t v11 = v422;
              int64_t v253 = v261;
              unsigned int v266 = *((_DWORD *)v258 + 4);
              if (v266 < v264
                || v264 >= v266
                && ((unsigned int v267 = *((_DWORD *)v258 + 5), v267 < v263)
                 || v263 >= v267
                 && (v265 < v435
                  || v435 >= v265
                  && ((unsigned int v312 = *(_DWORD *)(*v257 + 16), v312 < v427)
                   || v427 >= v312
                   && ((unsigned int v313 = *(_DWORD *)v257[1], v313 < v412)
                    || (v412 >= v313 ? (BOOL v314 = *((_DWORD *)v257 + 6) >= v407) : (BOOL v314 = 1), !v314))))))
              {
                v255 = v259;
                uint64_t v254 = v256;
              }
            }
            int64_t v418 = v253;
            v436 = v255;
            v268 = *v255;
            v269 = v441[v253];
            uint64_t v270 = *v269;
            unsigned int v271 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v269);
            unsigned int v272 = *(_DWORD *)(v270 + 16);
            unsigned int v428 = *(_DWORD *)v269[1];
            unsigned int v274 = *((_DWORD *)v268 + 4);
            unsigned int v273 = *((_DWORD *)v268 + 5);
            unsigned int v275 = *((_DWORD *)v269 + 6);
            unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v268);
            int64_t v253 = v418;
            unsigned int v276 = *((_DWORD *)v269 + 4);
            if (v276 >= v274)
            {
              if (v274 < v276
                || (unsigned int v277 = *((_DWORD *)v269 + 5), v277 >= v273)
                && (v273 < v277
                 || result >= v271
                 && (v271 < result
                  || (unsigned int v315 = *(_DWORD *)(*v268 + 16), v315 >= v272)
                  && (v272 < v315
                   || (unsigned int v316 = *(_DWORD *)v268[1], v316 >= v428)
                   && (v428 >= v316 ? (BOOL v317 = *((_DWORD *)v268 + 6) >= v275) : (BOOL v317 = 1), v317)))))
              {
                v252 = v436;
                v429 = v441[v418];
                v441[v418] = *v436;
                while (v250 >= v254)
                {
                  v437 = v252;
                  uint64_t v278 = 2 * v254;
                  uint64_t v279 = (2 * v254) | 1;
                  uint64_t v280 = v279;
                  v281 = &v441[v279];
                  uint64_t v282 = v278 + 2;
                  if (v278 + 2 < v11)
                  {
                    v283 = *v281;
                    v285 = v281 + 1;
                    v284 = v281[1];
                    uint64_t v286 = *v284;
                    v287 = &v441[v279];
                    unsigned int v413 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v284);
                    unsigned int v408 = *(_DWORD *)(v286 + 16);
                    unsigned int v288 = *(_DWORD *)v284[1];
                    unsigned int v290 = *((_DWORD *)v283 + 4);
                    unsigned int v289 = *((_DWORD *)v283 + 5);
                    unsigned int v406 = *((_DWORD *)v284 + 6);
                    unsigned int v291 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v283);
                    unsigned int v292 = *((_DWORD *)v284 + 4);
                    if (v292 < v290
                      || (v281 = v287, v290 >= v292)
                      && ((unsigned int v308 = *((_DWORD *)v284 + 5), v308 < v289)
                       || v289 >= v308
                       && (v291 < v413
                        || v413 >= v291
                        && ((unsigned int v309 = *(_DWORD *)(*v283 + 16), v309 < v408)
                         || v408 >= v309
                         && ((unsigned int v310 = *(_DWORD *)v283[1], v310 < v288)
                          || (v288 >= v310 ? (BOOL v311 = *((_DWORD *)v283 + 6) >= v406) : (BOOL v311 = 1), !v311))))))
                    {
                      v281 = v285;
                      uint64_t v280 = v282;
                    }
                  }
                  uint64_t v293 = v280;
                  int64_t v294 = v250;
                  v295 = v281;
                  v296 = *v281;
                  uint64_t v297 = *v429;
                  unsigned int v298 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v429);
                  unsigned int v299 = *(_DWORD *)(v297 + 16);
                  unsigned int v300 = *(_DWORD *)v429[1];
                  unsigned int v302 = *((_DWORD *)v296 + 4);
                  unsigned int v301 = *((_DWORD *)v296 + 5);
                  unsigned int v414 = *((_DWORD *)v429 + 6);
                  unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v296);
                  unsigned int v303 = *((_DWORD *)v429 + 4);
                  if (v303 < v302)
                  {
                    v252 = v437;
                    int64_t v250 = v294;
                    uint64_t v11 = v422;
                    break;
                  }
                  BOOL v4 = v302 >= v303;
                  int64_t v250 = v294;
                  v252 = v295;
                  uint64_t v254 = v293;
                  uint64_t v11 = v422;
                  if (v4)
                  {
                    unsigned int v304 = *((_DWORD *)v429 + 5);
                    if (v304 < v301
                      || v301 >= v304
                      && (result < v298
                       || v298 >= result
                       && ((unsigned int v305 = *(_DWORD *)(*v296 + 16), v305 < v299)
                        || v299 >= v305
                        && ((unsigned int v306 = *(_DWORD *)v296[1], v306 < v300)
                         || (v300 >= v306 ? (BOOL v307 = *((_DWORD *)v296 + 6) >= v414) : (BOOL v307 = 1), !v307)))))
                    {
                      v252 = v437;
                      break;
                    }
                  }
                  *v437 = *v252;
                }
                *v252 = v429;
                int64_t v253 = v418;
              }
            }
          }
          int64_t v251 = v253 - 1;
        }
        while (v253);
        uint64_t v318 = v405 >> 3;
        do
        {
          uint64_t v320 = 0;
          v409 = *v441;
          int64_t v321 = (unint64_t)(v318 - 2) >> 1;
          v322 = v441;
          do
          {
            v323 = v322;
            v322 += v320 + 1;
            uint64_t v324 = 2 * v320;
            uint64_t v320 = (2 * v320) | 1;
            uint64_t v325 = v324 + 2;
            if (v324 + 2 < v318)
            {
              v326 = *v322;
              v327 = v322[1];
              v438 = v322 + 1;
              uint64_t v328 = *v327;
              uint64_t v329 = v318;
              v330 = v322;
              unsigned int v430 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v327);
              unsigned int v423 = *(_DWORD *)(v328 + 16);
              unsigned int v332 = *((_DWORD *)v326 + 4);
              unsigned int v331 = *((_DWORD *)v326 + 5);
              unsigned int v415 = *((_DWORD *)v327 + 6);
              unsigned int v419 = *(_DWORD *)v327[1];
              unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v326);
              uint64_t v318 = v329;
              unsigned int v333 = *((_DWORD *)v327 + 4);
              if (v333 < v332
                || (v322 = v330, v332 >= v333)
                && ((unsigned int v334 = *((_DWORD *)v327 + 5), v334 < v331)
                 || v331 >= v334
                 && (result < v430
                  || v430 >= result
                  && ((unsigned int v335 = *(_DWORD *)(*v326 + 16), v335 < v423)
                   || v423 >= v335
                   && ((unsigned int v336 = *(_DWORD *)v326[1], v336 < v419)
                    || (v419 >= v336 ? (BOOL v337 = *((_DWORD *)v326 + 6) >= v415) : (BOOL v337 = 1), !v337))))))
              {
                v322 = v438;
                uint64_t v320 = v325;
              }
            }
            *v323 = *v322;
          }
          while (v320 <= v321);
          v338 = a2 - 1;
          BOOL v5 = v322 == --a2;
          if (v5)
          {
            *v322 = v409;
          }
          else
          {
            *v322 = *v338;
            *v338 = v409;
            uint64_t v339 = (char *)v322 - (char *)v441 + 8;
            if (v339 >= 9)
            {
              unint64_t v340 = ((unint64_t)v339 >> 3) - 2;
              unint64_t v341 = v340 >> 1;
              v342 = &v441[v340 >> 1];
              v343 = *v342;
              v344 = *v322;
              uint64_t v345 = **v322;
              uint64_t v424 = v318;
              v346 = v322;
              unsigned int v347 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v345);
              unsigned int v348 = *(_DWORD *)(v345 + 16);
              unsigned int v439 = *(_DWORD *)v344[1];
              unsigned int v350 = *((_DWORD *)v343 + 4);
              unsigned int v349 = *((_DWORD *)v343 + 5);
              unsigned int v431 = *((_DWORD *)v344 + 6);
              unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v343);
              uint64_t v318 = v424;
              unsigned int v351 = *((_DWORD *)v344 + 4);
              if (v351 < v350
                || v350 >= v351
                && ((unsigned int v366 = *((_DWORD *)v344 + 5), v366 < v349)
                 || v349 >= v366
                 && (result < v347
                  || v347 >= result
                  && ((unsigned int v367 = *(_DWORD *)(*v343 + 16), v367 < v348)
                   || v348 >= v367
                   && ((unsigned int v368 = *(_DWORD *)v343[1], v368 < v439)
                    || (v439 >= v368 ? (BOOL v369 = *((_DWORD *)v343 + 6) >= v431) : (BOOL v369 = 1), !v369))))))
              {
                v352 = *v346;
                *v346 = *v342;
                if (v340 >= 2)
                {
                  while (1)
                  {
                    unint64_t v354 = v341 - 1;
                    unint64_t v341 = (v341 - 1) >> 1;
                    v353 = &v441[v341];
                    v355 = *v353;
                    uint64_t v356 = *v352;
                    unsigned int v357 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v352);
                    unsigned int v358 = *(_DWORD *)(v356 + 16);
                    unsigned int v440 = *(_DWORD *)v352[1];
                    unsigned int v359 = *((_DWORD *)v355 + 4);
                    unsigned int v360 = *((_DWORD *)v355 + 5);
                    unsigned int v432 = *((_DWORD *)v352 + 6);
                    unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v355);
                    unsigned int v361 = *((_DWORD *)v352 + 4);
                    if (v361 >= v359)
                    {
                      if (v359 < v361) {
                        break;
                      }
                      unsigned int v362 = *((_DWORD *)v352 + 5);
                      if (v362 >= v360)
                      {
                        if (v360 < v362) {
                          break;
                        }
                        if (result >= v357)
                        {
                          if (v357 < result) {
                            break;
                          }
                          unsigned int v363 = *(_DWORD *)(*v355 + 16);
                          if (v363 >= v358)
                          {
                            if (v358 < v363) {
                              break;
                            }
                            unsigned int v364 = *(_DWORD *)v355[1];
                            if (v364 >= v440 && (v440 < v364 || *((_DWORD *)v355 + 6) >= v432)) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    *v342 = *v353;
                    v342 = &v441[v341];
                    if (v354 <= 1) {
                      goto LABEL_377;
                    }
                  }
                }
                v353 = v342;
LABEL_377:
                *v353 = v352;
                uint64_t v318 = v424;
              }
            }
          }
        }
        while (v318-- > 2);
      }
      return result;
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    BOOL v13 = &v9[(unint64_t)v11 >> 1];
    if ((unint64_t)v10 < 0x401)
    {
      uint64_t v420 = a3 - 1;
      if ((a4 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_22:
      uint64_t v35 = 0;
      unsigned int v36 = *v9;
      while (1)
      {
        uint64_t v37 = v9[v35 + 1];
        uint64_t v38 = *v36;
        unsigned int v39 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v36);
        unsigned int v40 = *(_DWORD *)(v38 + 16);
        unsigned int v41 = *(_DWORD *)v36[1];
        unsigned int v43 = *((_DWORD *)v37 + 4);
        unsigned int v42 = *((_DWORD *)v37 + 5);
        unsigned int v44 = *((_DWORD *)v36 + 6);
        unsigned int v45 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v37);
        unsigned int v46 = *((_DWORD *)v36 + 4);
        if (v46 >= v43)
        {
          if (v43 < v46) {
            break;
          }
          unsigned int v47 = *((_DWORD *)v36 + 5);
          if (v47 >= v42)
          {
            if (v42 < v47) {
              break;
            }
            if (v45 >= v39)
            {
              if (v39 < v45) {
                break;
              }
              unsigned int v48 = *(_DWORD *)(*v37 + 16);
              if (v48 >= v40)
              {
                if (v40 < v48) {
                  break;
                }
                unsigned int v49 = *(_DWORD *)v37[1];
                if (v49 >= v41 && (v41 < v49 || *((_DWORD *)v37 + 6) >= v44)) {
                  break;
                }
              }
            }
          }
        }
        ++v35;
      }
      v416 = &v9[v35];
      unint64_t v433 = (unint64_t)&v9[v35 + 1];
      uint64_t v51 = a2 - 1;
      if (v35 * 8)
      {
        while (1)
        {
          uint64_t v54 = v51;
          uint64_t v70 = *v51;
          uint64_t v71 = *v36;
          unsigned int v72 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v36);
          unsigned int v73 = *(_DWORD *)(v71 + 16);
          unsigned int v74 = *(_DWORD *)v36[1];
          unsigned int v75 = *((_DWORD *)v70 + 4);
          unsigned int v76 = *((_DWORD *)v70 + 5);
          unsigned int v77 = *((_DWORD *)v36 + 6);
          unsigned int v78 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v70);
          unsigned int v79 = *((_DWORD *)v36 + 4);
          if (v79 < v75) {
            break;
          }
          uint64_t v9 = v441;
          if (v75 >= v79)
          {
            unsigned int v80 = *((_DWORD *)v36 + 5);
            if (v80 < v76) {
              goto LABEL_77;
            }
            if (v76 >= v80)
            {
              if (v78 < v72) {
                goto LABEL_77;
              }
              if (v72 >= v78)
              {
                unsigned int v81 = *(_DWORD *)(*v70 + 16);
                if (v81 < v73) {
                  goto LABEL_77;
                }
                if (v73 >= v81)
                {
                  unsigned int v82 = *(_DWORD *)v70[1];
                  if (v82 < v74) {
                    goto LABEL_77;
                  }
                  if (v74 >= v82 && *((_DWORD *)v70 + 6) < v77) {
                    goto LABEL_77;
                  }
                }
              }
            }
          }
          uint64_t v51 = v54 - 1;
        }
      }
      else
      {
        uint64_t v52 = a2;
        if (v433 >= (unint64_t)a2) {
          goto LABEL_78;
        }
        for (i = a2 - 1; ; i = v52 - 1)
        {
          uint64_t v54 = i;
          uint64_t v55 = *i;
          uint64_t v56 = *v36;
          unsigned int v57 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v36);
          unsigned int v58 = *(_DWORD *)(v56 + 16);
          unsigned int v59 = *(_DWORD *)v36[1];
          unsigned int v60 = *((_DWORD *)v55 + 4);
          unsigned int v61 = *((_DWORD *)v55 + 5);
          unsigned int v62 = *((_DWORD *)v36 + 6);
          unsigned int v63 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v55);
          unsigned int v64 = *((_DWORD *)v36 + 4);
          if (v64 < v60) {
            break;
          }
          uint64_t v9 = v441;
          if (v60 < v64) {
            goto LABEL_49;
          }
          unsigned int v65 = *((_DWORD *)v36 + 5);
          if (v65 < v61) {
            goto LABEL_77;
          }
          if (v61 < v65) {
            goto LABEL_49;
          }
          if (v63 < v57) {
            goto LABEL_77;
          }
          if (v57 < v63) {
            goto LABEL_49;
          }
          unsigned int v66 = *(_DWORD *)(*v55 + 16);
          if (v66 < v58) {
            goto LABEL_77;
          }
          if (v58 >= v66)
          {
            unsigned int v67 = *(_DWORD *)v55[1];
            if (v67 < v59) {
              goto LABEL_77;
            }
            BOOL v69 = v59 < v67 || *((_DWORD *)v55 + 6) >= v62;
            uint64_t v52 = v54;
            if (v433 >= (unint64_t)v54 || !v69) {
              goto LABEL_78;
            }
          }
          else
          {
LABEL_49:
            uint64_t v52 = v54;
            if (v433 >= (unint64_t)v54) {
              goto LABEL_78;
            }
          }
        }
      }
      uint64_t v9 = v441;
LABEL_77:
      uint64_t v52 = v54;
LABEL_78:
      unint64_t v84 = v416;
      if (v433 < (unint64_t)v52)
      {
        unint64_t v85 = (uint64_t **)v433;
        v417 = v52;
        uint64_t v86 = v52;
        do
        {
          long long v87 = *v85;
          *v85++ = *v86;
          *uint64_t v86 = v87;
          while (1)
          {
            unsigned __int32 v88 = *v85;
            uint64_t v89 = *v36;
            unsigned int v90 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v36);
            unsigned int v91 = *(_DWORD *)(v89 + 16);
            unsigned int v92 = *(_DWORD *)v36[1];
            unsigned int v93 = *((_DWORD *)v88 + 4);
            unsigned int v94 = *((_DWORD *)v88 + 5);
            unsigned int v95 = *((_DWORD *)v36 + 6);
            unsigned int v96 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v88);
            unsigned int v97 = *((_DWORD *)v36 + 4);
            if (v97 >= v93)
            {
              if (v93 < v97) {
                break;
              }
              unsigned int v98 = *((_DWORD *)v36 + 5);
              if (v98 >= v94)
              {
                if (v94 < v98) {
                  break;
                }
                if (v96 >= v90)
                {
                  if (v90 < v96) {
                    break;
                  }
                  unsigned int v99 = *(_DWORD *)(*v88 + 16);
                  if (v99 >= v91)
                  {
                    if (v91 < v99) {
                      break;
                    }
                    unsigned int v100 = *(_DWORD *)v88[1];
                    if (v100 >= v92 && (v92 < v100 || *((_DWORD *)v88 + 6) >= v95)) {
                      break;
                    }
                  }
                }
              }
            }
            ++v85;
          }
          while (1)
          {
            uint64_t v103 = (uint64_t)*--v86;
            uint64_t v102 = v103;
            uint64_t v104 = *v36;
            unsigned int v105 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v36);
            unsigned int v106 = *(_DWORD *)(v104 + 16);
            unsigned int v107 = *(_DWORD *)v36[1];
            unsigned int v108 = *(_DWORD *)(v103 + 16);
            unsigned int v109 = *(_DWORD *)(v103 + 20);
            unsigned int v110 = *((_DWORD *)v36 + 6);
            unsigned int v111 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v103);
            unsigned int v112 = *((_DWORD *)v36 + 4);
            if (v112 < v108) {
              break;
            }
            if (v108 >= v112)
            {
              unsigned int v113 = *((_DWORD *)v36 + 5);
              if (v113 < v109) {
                break;
              }
              if (v109 >= v113)
              {
                if (v111 < v105) {
                  break;
                }
                if (v105 >= v111)
                {
                  unsigned int v114 = *(_DWORD *)(*(void *)v102 + 16);
                  if (v114 < v106) {
                    break;
                  }
                  if (v106 >= v114)
                  {
                    unsigned int v115 = **(_DWORD **)(v102 + 8);
                    if (v115 < v107) {
                      break;
                    }
                    if (v107 >= v115 && *(_DWORD *)(v102 + 24) < v110) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
        while (v85 < v86);
        unint64_t v84 = v85 - 1;
        uint64_t v9 = v441;
        uint64_t v52 = v417;
      }
      if (v84 != v9) {
        char *v9 = *v84;
      }
      *unint64_t v84 = v36;
      unsigned int v7 = a2;
      a3 = v420;
      if (v433 < (unint64_t)v52) {
        goto LABEL_117;
      }
      j = v84 + 1;
      if (result)
      {
        a2 = v84;
        if (v117) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v117)
      {
LABEL_117:
        a4 = 0;
        j = v84 + 1;
      }
    }
    else
    {
      uint64_t v14 = v9 + 1;
      uint64_t v15 = v12;
      BOOL v16 = &v9[v15];
      int v17 = &v9[v15 - 1];
      int v18 = &v14[v15];
      unint64_t v19 = v17;
      uint64_t v9 = v441;
      BOOL v20 = *v441;
      *v441 = *v16;
      *BOOL v16 = v20;
      uint64_t v420 = a3 - 1;
      if (a4) {
        goto LABEL_22;
      }
LABEL_11:
      uint64_t v21 = (uint64_t)*(v9 - 1);
      uint64_t v22 = *v9;
      uint64_t v23 = **v9;
      unsigned int v24 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v23);
      unsigned int v25 = *(_DWORD *)(v23 + 16);
      unsigned int v26 = *(_DWORD *)v22[1];
      unsigned int v28 = *(_DWORD *)(v21 + 16);
      unsigned int v27 = *(_DWORD *)(v21 + 20);
      unsigned int v29 = *((_DWORD *)v22 + 6);
      unsigned int v30 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v21);
      unsigned int v31 = *((_DWORD *)v22 + 4);
      if (v31 < v28) {
        goto LABEL_22;
      }
      if (v28 >= v31)
      {
        unsigned int v32 = *((_DWORD *)v22 + 5);
        if (v32 < v27) {
          goto LABEL_22;
        }
        if (v27 >= v32)
        {
          if (v30 < v24) {
            goto LABEL_22;
          }
          if (v24 >= v30)
          {
            unsigned int v33 = *(_DWORD *)(*(void *)v21 + 16);
            if (v33 < v25) {
              goto LABEL_22;
            }
            if (v25 >= v33)
            {
              unsigned int v34 = **(_DWORD **)(v21 + 8);
              if (v34 < v26 || v26 >= v34 && *(_DWORD *)(v21 + 24) < v29) {
                goto LABEL_22;
              }
            }
          }
        }
      }
      uint64_t v118 = *v9;
      unint64_t v119 = *v425;
      uint64_t v120 = **v425;
      unsigned int v121 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v120);
      unsigned int v122 = *(_DWORD *)(v120 + 16);
      unsigned int v123 = *(_DWORD *)v119[1];
      unsigned int v125 = *((_DWORD *)v118 + 4);
      unsigned int v124 = *((_DWORD *)v118 + 5);
      unsigned int v126 = *((_DWORD *)v119 + 6);
      unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v118);
      unsigned int v127 = *((_DWORD *)v119 + 4);
      if (v127 < v125
        || v125 >= v127
        && ((unsigned int v199 = *((_DWORD *)v119 + 5), v199 < v124)
         || v124 >= v199
         && (result < v121
          || v121 >= result
          && ((unsigned int v200 = *(_DWORD *)(*v118 + 16), v200 < v122)
           || v122 >= v200 && ((unsigned int v201 = *(_DWORD *)v118[1], v201 < v123) || v123 >= v201 && *((_DWORD *)v118 + 6) < v126)))))
      {
        for (j = v441 + 1; ; ++j)
        {
          uint64_t v128 = *j;
          uint64_t v129 = **j;
          unsigned int v130 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v129);
          unsigned int v131 = *(_DWORD *)(v129 + 16);
          unsigned int v132 = *(_DWORD *)v128[1];
          unsigned int v134 = *((_DWORD *)v118 + 4);
          unsigned int v133 = *((_DWORD *)v118 + 5);
          unsigned int v135 = *((_DWORD *)v128 + 6);
          unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v118);
          unsigned int v136 = *((_DWORD *)v128 + 4);
          if (v136 < v134) {
            break;
          }
          if (v134 >= v136)
          {
            unsigned int v137 = *((_DWORD *)v128 + 5);
            if (v137 < v133) {
              break;
            }
            if (v133 >= v137)
            {
              if (result < v130) {
                break;
              }
              if (v130 >= result)
              {
                unsigned int v138 = *(_DWORD *)(*v118 + 16);
                if (v138 < v131) {
                  break;
                }
                if (v131 >= v138)
                {
                  unsigned int v139 = *(_DWORD *)v118[1];
                  if (v139 < v132) {
                    break;
                  }
                  if (v132 >= v139 && *((_DWORD *)v118 + 6) < v135) {
                    break;
                  }
                }
              }
            }
          }
        }
LABEL_134:
        unint64_t v141 = a2;
      }
      else
      {
        for (j = v441 + 1; ; ++j)
        {
          unint64_t v141 = a2;
          if (j >= a2) {
            break;
          }
          uint64_t v186 = *j;
          uint64_t v187 = **j;
          unsigned int v188 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v187);
          unsigned int v189 = *(_DWORD *)(v187 + 16);
          unsigned int v190 = *(_DWORD *)v186[1];
          unsigned int v192 = *((_DWORD *)v118 + 4);
          unsigned int v191 = *((_DWORD *)v118 + 5);
          unsigned int v193 = *((_DWORD *)v186 + 6);
          unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v118);
          unsigned int v194 = *((_DWORD *)v186 + 4);
          if (v194 < v192) {
            goto LABEL_134;
          }
          if (v192 >= v194)
          {
            unsigned int v195 = *((_DWORD *)v186 + 5);
            if (v195 < v191) {
              goto LABEL_134;
            }
            if (v191 >= v195)
            {
              if (result < v188) {
                goto LABEL_134;
              }
              if (v188 >= result)
              {
                unsigned int v196 = *(_DWORD *)(*v118 + 16);
                if (v196 < v189) {
                  goto LABEL_134;
                }
                if (v189 >= v196)
                {
                  unsigned int v197 = *(_DWORD *)v118[1];
                  if (v197 < v190) {
                    goto LABEL_134;
                  }
                  if (v190 >= v197 && *((_DWORD *)v118 + 6) < v193) {
                    goto LABEL_134;
                  }
                }
              }
            }
          }
        }
      }
      k = v141;
      if (j < v141)
      {
        for (k = a2 - 1; ; --k)
        {
          unsigned int v143 = *k;
          uint64_t v144 = **k;
          unsigned int v145 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v144);
          unsigned int v146 = *(_DWORD *)(v144 + 16);
          unsigned int v147 = *(_DWORD *)v143[1];
          unsigned int v149 = *((_DWORD *)v118 + 4);
          unsigned int v148 = *((_DWORD *)v118 + 5);
          unsigned int v150 = *((_DWORD *)v143 + 6);
          unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v118);
          unsigned int v151 = *((_DWORD *)v143 + 4);
          if (v151 >= v149)
          {
            if (v149 < v151) {
              break;
            }
            unsigned int v152 = *((_DWORD *)v143 + 5);
            if (v152 >= v148)
            {
              if (v148 < v152) {
                break;
              }
              if (result >= v145)
              {
                if (v145 < result) {
                  break;
                }
                unsigned int v153 = *(_DWORD *)(*v118 + 16);
                if (v153 >= v146)
                {
                  if (v146 < v153) {
                    break;
                  }
                  unsigned int v154 = *(_DWORD *)v118[1];
                  if (v154 >= v147 && (v147 < v154 || *((_DWORD *)v118 + 6) >= v150)) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
      while (j < k)
      {
        int v156 = *j;
        *j++ = *k;
        *k = v156;
        while (1)
        {
          uint64_t v157 = *j;
          uint64_t v158 = **j;
          unsigned int v159 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v158);
          unsigned int v160 = *(_DWORD *)(v158 + 16);
          unsigned int v161 = *(_DWORD *)v157[1];
          unsigned int v163 = *((_DWORD *)v118 + 4);
          unsigned int v162 = *((_DWORD *)v118 + 5);
          unsigned int v164 = *((_DWORD *)v157 + 6);
          unsigned int v165 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v118);
          unsigned int v166 = *((_DWORD *)v157 + 4);
          if (v166 < v163) {
            break;
          }
          if (v163 >= v166)
          {
            unsigned int v167 = *((_DWORD *)v157 + 5);
            if (v167 < v162) {
              break;
            }
            if (v162 >= v167)
            {
              if (v165 < v159) {
                break;
              }
              if (v159 >= v165)
              {
                unsigned int v168 = *(_DWORD *)(*v118 + 16);
                if (v168 < v160) {
                  break;
                }
                if (v160 >= v168)
                {
                  unsigned int v169 = *(_DWORD *)v118[1];
                  if (v169 < v161) {
                    break;
                  }
                  if (v161 >= v169 && *((_DWORD *)v118 + 6) < v164) {
                    break;
                  }
                }
              }
            }
          }
          ++j;
        }
        while (1)
        {
          do
          {
            uint64_t v172 = (uint64_t)*--k;
            uint64_t v171 = v172;
            uint64_t v173 = *(void *)v172;
            unsigned int v174 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v172);
            unsigned int v175 = *(_DWORD *)(v173 + 16);
            unsigned int v176 = **(_DWORD **)(v172 + 8);
            unsigned int v178 = *((_DWORD *)v118 + 4);
            unsigned int v177 = *((_DWORD *)v118 + 5);
            unsigned int v179 = *(_DWORD *)(v172 + 24);
            unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v118);
            unsigned int v180 = *(_DWORD *)(v172 + 16);
          }
          while (v180 < v178);
          if (v178 < v180) {
            break;
          }
          unsigned int v181 = *(_DWORD *)(v171 + 20);
          if (v181 >= v177)
          {
            if (v177 < v181) {
              break;
            }
            if (result >= v174)
            {
              if (v174 < result) {
                break;
              }
              unsigned int v182 = *(_DWORD *)(*v118 + 16);
              if (v182 >= v175)
              {
                if (v175 < v182) {
                  break;
                }
                unsigned int v183 = *(_DWORD *)v118[1];
                if (v183 >= v176 && (v176 < v183 || *((_DWORD *)v118 + 6) >= v179)) {
                  break;
                }
              }
            }
          }
        }
      }
      unint64_t v185 = j - 1;
      BOOL v4 = j - 1 >= v441;
      BOOL v5 = j - 1 == v441;
      if (j - 1 != v441) {
        *v441 = *v185;
      }
      a4 = 0;
      *unint64_t v185 = v118;
      unsigned int v7 = a2;
      a3 = v420;
    }
  }
  v214 = v9 + 1;
  BOOL v216 = v9 == a2 || v214 == a2;
  if ((a4 & 1) == 0)
  {
    if (!v216)
    {
      do
      {
        v371 = v441;
        v370 = v214;
        v373 = *v441;
        v372 = v441[1];
        uint64_t v374 = **v441;
        unsigned int v375 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v374);
        unsigned int v376 = *(_DWORD *)(v374 + 16);
        unsigned int v377 = *(_DWORD *)v373[1];
        unsigned int v379 = *((_DWORD *)v372 + 4);
        unsigned int v378 = *((_DWORD *)v372 + 5);
        unsigned int v380 = *((_DWORD *)v373 + 6);
        unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v372);
        unsigned int v381 = *((_DWORD *)v373 + 4);
        v441 = v370;
        if (v381 < v379
          || v379 >= v381
          && ((unsigned int v382 = *((_DWORD *)v373 + 5), v382 < v378)
           || v378 >= v382
           && (result < v375
            || v375 >= result
            && ((unsigned int v399 = *(_DWORD *)(*v372 + 16), v399 < v376)
             || v376 >= v399
             && ((unsigned int v400 = *(_DWORD *)v372[1], v400 < v377)
              || (v377 >= v400 ? (BOOL v401 = *((_DWORD *)v372 + 6) >= v380) : (BOOL v401 = 1), !v401))))))
        {
          v383 = *v370;
          while (1)
          {
            do
            {
              v384 = v371;
              v371[1] = *v371;
              uint64_t v386 = (uint64_t)*--v371;
              uint64_t v385 = v386;
              uint64_t v387 = *(void *)v386;
              unsigned int v388 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v386);
              unsigned int v389 = *(_DWORD *)(v387 + 16);
              unsigned int v390 = **(_DWORD **)(v386 + 8);
              unsigned int v392 = *((_DWORD *)v383 + 4);
              unsigned int v391 = *((_DWORD *)v383 + 5);
              unsigned int v393 = *(_DWORD *)(v386 + 24);
              unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v383);
              unsigned int v394 = *(_DWORD *)(v386 + 16);
            }
            while (v394 < v392);
            if (v392 < v394) {
              break;
            }
            unsigned int v395 = *(_DWORD *)(v385 + 20);
            if (v395 >= v391)
            {
              if (v391 < v395) {
                break;
              }
              if (result >= v388)
              {
                if (v388 < result) {
                  break;
                }
                unsigned int v396 = *(_DWORD *)(*v383 + 16);
                if (v396 >= v389)
                {
                  if (v389 < v396) {
                    break;
                  }
                  unsigned int v397 = *(_DWORD *)v383[1];
                  if (v397 >= v390 && (v390 < v397 || *((_DWORD *)v383 + 6) >= v393)) {
                    break;
                  }
                }
              }
            }
          }
          *v384 = v383;
          v370 = v441;
        }
        v214 = v370 + 1;
      }
      while (v370 + 1 != a2);
    }
    return result;
  }
  if (v216) {
    return result;
  }
  uint64_t v217 = 0;
  v218 = v441;
  while (2)
  {
    v426 = v214;
    v221 = *v218;
    v220 = v218[1];
    uint64_t v222 = **v218;
    unsigned int v223 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v222);
    unsigned int v224 = *(_DWORD *)(v222 + 16);
    unsigned int v225 = *(_DWORD *)v221[1];
    unsigned int v226 = *((_DWORD *)v220 + 4);
    unsigned int v227 = *((_DWORD *)v220 + 5);
    unsigned int v228 = *((_DWORD *)v221 + 6);
    unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v220);
    unsigned int v229 = *((_DWORD *)v221 + 4);
    if (v229 >= v226)
    {
      if (v226 < v229) {
        goto LABEL_242;
      }
      unsigned int v230 = *((_DWORD *)v221 + 5);
      if (v230 >= v227)
      {
        if (v227 < v230) {
          goto LABEL_242;
        }
        if (result >= v223)
        {
          if (v223 < result) {
            goto LABEL_242;
          }
          unsigned int v247 = *(_DWORD *)(*v220 + 16);
          if (v247 >= v224)
          {
            if (v224 < v247) {
              goto LABEL_242;
            }
            unsigned int v248 = *(_DWORD *)v220[1];
            if (v248 >= v225 && (v225 < v248 || *((_DWORD *)v220 + 6) >= v228)) {
              goto LABEL_242;
            }
          }
        }
      }
    }
    v231 = v218[1];
    v218[1] = *v218;
    v232 = v441;
    v219 = v441;
    if (v218 == v441) {
      goto LABEL_241;
    }
    uint64_t v421 = v217;
    uint64_t v233 = v217;
    while (2)
    {
      v234 = (uint64_t **)((char *)v232 + v233);
      uint64_t v235 = *(uint64_t *)((char *)v232 + v233 - 8);
      uint64_t v236 = *(void *)v235;
      unsigned int v237 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v235);
      unsigned int v238 = *(_DWORD *)(v236 + 16);
      unsigned int v239 = **(_DWORD **)(v235 + 8);
      unsigned int v241 = *((_DWORD *)v231 + 4);
      unsigned int v240 = *((_DWORD *)v231 + 5);
      unsigned int v434 = *(_DWORD *)(v235 + 24);
      unint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v231);
      unsigned int v242 = *(_DWORD *)(v235 + 16);
      if (v242 < v241) {
        goto LABEL_248;
      }
      if (v241 < v242) {
        goto LABEL_263;
      }
      unsigned int v243 = *(_DWORD *)(v235 + 20);
      if (v243 < v240) {
        goto LABEL_248;
      }
      if (v240 < v243) {
        goto LABEL_263;
      }
      if (result < v237) {
        goto LABEL_248;
      }
      if (v237 < result) {
        goto LABEL_263;
      }
      unsigned int v244 = *(_DWORD *)(*v231 + 16);
      if (v244 < v238)
      {
LABEL_248:
        --v218;
        void *v234 = *(v234 - 1);
        v233 -= 8;
        v232 = v441;
        if (!v233)
        {
          v219 = v441;
          goto LABEL_240;
        }
        continue;
      }
      break;
    }
    if (v238 >= v244)
    {
      unsigned int v245 = *(_DWORD *)v231[1];
      if (v245 >= v239 && (v239 < v245 || *((_DWORD *)v231 + 6) >= v434))
      {
LABEL_263:
        v219 = v218;
        goto LABEL_240;
      }
      goto LABEL_248;
    }
    v219 = (uint64_t **)((char *)v441 + v233);
LABEL_240:
    uint64_t v217 = v421;
LABEL_241:
    *v219 = v231;
LABEL_242:
    v218 = v426;
    v214 = v426 + 1;
    v217 += 8;
    if (v426 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,anonymous namespace'::OrderedPredicate **,0>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v8 = *a5;
  uint64_t v9 = *a4;
  uint64_t v10 = **a4;
  unsigned int OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v10);
  unsigned int v12 = *(_DWORD *)(v10 + 16);
  unsigned int v65 = *(_DWORD *)v9[1];
  unsigned int v14 = *((_DWORD *)v8 + 4);
  unsigned int v13 = *((_DWORD *)v8 + 5);
  unsigned int v15 = *((_DWORD *)v9 + 6);
  uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v8);
  unsigned int v17 = *((_DWORD *)v9 + 4);
  if (v17 < v14
    || v14 >= v17
    && ((unsigned int v54 = *((_DWORD *)v9 + 5), v54 < v13)
     || v13 >= v54
     && (result < OperationDepth
      || OperationDepth >= result
      && ((unsigned int v55 = *(_DWORD *)(*v8 + 16), v55 < v12)
       || v12 >= v55
       && ((unsigned int v56 = *(_DWORD *)v8[1], v56 < v65) || (v65 >= v56 ? (v57 = *((_DWORD *)v8 + 6) >= v15) : (v57 = 1), !v57))))))
  {
    int v18 = *a4;
    *a4 = *a5;
    *a5 = v18;
    unint64_t v19 = *a4;
    BOOL v20 = *a3;
    uint64_t v21 = **a3;
    unsigned int v22 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v21);
    unsigned int v23 = *(_DWORD *)(v21 + 16);
    unsigned int v24 = *(_DWORD *)v20[1];
    unsigned int v26 = *((_DWORD *)v19 + 4);
    unsigned int v25 = *((_DWORD *)v19 + 5);
    unsigned int v27 = *((_DWORD *)v20 + 6);
    uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v19);
    unsigned int v28 = *((_DWORD *)v20 + 4);
    if (v28 < v26
      || v26 >= v28
      && ((unsigned int v29 = *((_DWORD *)v20 + 5), v29 < v25)
       || v25 >= v29
       && (result < v22
        || v22 >= result
        && ((unsigned int v63 = *(_DWORD *)(*v19 + 16), v63 < v23)
         || v23 >= v63 && ((unsigned int v64 = *(_DWORD *)v19[1], v64 < v24) || v24 >= v64 && *((_DWORD *)v19 + 6) < v27)))))
    {
      unsigned int v30 = *a3;
      *a3 = *a4;
      *a4 = v30;
      unsigned int v31 = *a3;
      unsigned int v32 = *a2;
      uint64_t v33 = **a2;
      unsigned int v34 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v33);
      unsigned int v35 = *(_DWORD *)(v33 + 16);
      unsigned int v36 = *(_DWORD *)v32[1];
      unsigned int v38 = *((_DWORD *)v31 + 4);
      unsigned int v37 = *((_DWORD *)v31 + 5);
      unsigned int v39 = *((_DWORD *)v32 + 6);
      uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v31);
      unsigned int v40 = *((_DWORD *)v32 + 4);
      if (v40 < v38
        || v38 >= v40
        && ((unsigned int v41 = *((_DWORD *)v32 + 5), v41 < v37)
         || v37 >= v41
         && (result < v34
          || v34 >= result
          && ((unsigned int v61 = *(_DWORD *)(*v31 + 16), v61 < v35)
           || v35 >= v61 && ((unsigned int v62 = *(_DWORD *)v31[1], v62 < v36) || v36 >= v62 && *((_DWORD *)v31 + 6) < v39)))))
      {
        unsigned int v42 = *a2;
        *a2 = *a3;
        *a3 = v42;
        unsigned int v43 = *a2;
        unsigned int v44 = *a1;
        uint64_t v45 = **a1;
        unsigned int v46 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v45);
        unsigned int v47 = *(_DWORD *)(v45 + 16);
        unsigned int v48 = *(_DWORD *)v44[1];
        unsigned int v50 = *((_DWORD *)v43 + 4);
        unsigned int v49 = *((_DWORD *)v43 + 5);
        unsigned int v51 = *((_DWORD *)v44 + 6);
        uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v43);
        unsigned int v52 = *((_DWORD *)v44 + 4);
        if (v52 < v50
          || v50 >= v52
          && ((unsigned int v58 = *((_DWORD *)v44 + 5), v58 < v49)
           || v49 >= v58
           && (result < v46
            || v46 >= result
            && ((unsigned int v59 = *(_DWORD *)(*v43 + 16), v59 < v47)
             || v47 >= v59 && ((unsigned int v60 = *(_DWORD *)v43[1], v60 < v48) || v48 >= v60 && *((_DWORD *)v43 + 6) < v51)))))
        {
          uint64_t v53 = *a1;
          *a1 = *a2;
          *a2 = v53;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,anonymous namespace'::OrderedPredicate **>(uint64_t **a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3 = a2;
  BOOL v4 = a1;
  BOOL v5 = *a2;
  unsigned int v6 = *a1;
  uint64_t v7 = **a1;
  unsigned int OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v7);
  unsigned int v9 = *(_DWORD *)(v7 + 16);
  unsigned int v10 = *(_DWORD *)v6[1];
  unsigned int v11 = *((_DWORD *)v5 + 4);
  unsigned int v12 = *((_DWORD *)v5 + 5);
  unsigned int v13 = *((_DWORD *)v6 + 6);
  unsigned int v14 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v5);
  unsigned int v15 = *((_DWORD *)v6 + 4);
  if (v15 >= v11
    && (v11 < v15
     || (unsigned int v43 = *((_DWORD *)v6 + 5), v43 >= v12)
     && (v12 < v43
      || v14 >= OperationDepth
      && (OperationDepth < v14
       || (unsigned int v44 = *(_DWORD *)(*v5 + 16), v44 >= v9)
       && (v9 < v44
        || (unsigned int v45 = *(_DWORD *)v5[1], v45 >= v10) && (v10 >= v45 ? (v46 = *((_DWORD *)v5 + 6) >= v13) : (v46 = 1), v46))))))
  {
    BOOL v16 = *a3;
    unsigned int v17 = *v3;
    uint64_t v18 = **v3;
    unsigned int v19 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v18);
    unsigned int v20 = *(_DWORD *)(v18 + 16);
    unsigned int v21 = *(_DWORD *)v17[1];
    unsigned int v22 = *((_DWORD *)v16 + 4);
    unsigned int v23 = *((_DWORD *)v16 + 5);
    unsigned int v24 = *((_DWORD *)v17 + 6);
    uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v16);
    unsigned int v26 = *((_DWORD *)v17 + 4);
    if (v26 < v22
      || v22 >= v26
      && ((unsigned int v27 = *((_DWORD *)v17 + 5), v27 < v23)
       || v23 >= v27
       && (result < v19
        || v19 >= result
        && ((unsigned int v70 = *(_DWORD *)(*v16 + 16), v70 < v20)
         || v20 >= v70 && ((unsigned int v71 = *(_DWORD *)v16[1], v71 < v21) || v21 >= v71 && *((_DWORD *)v16 + 6) < v24)))))
    {
      unsigned int v28 = *v3;
      *uint64_t v3 = *a3;
      *a3 = v28;
      unsigned int v29 = *v3;
      unsigned int v30 = *v4;
      uint64_t v31 = **v4;
      unsigned int v32 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v31);
      unsigned int v33 = *(_DWORD *)(v31 + 16);
      unsigned int v34 = *(_DWORD *)v30[1];
      unsigned int v36 = *((_DWORD *)v29 + 4);
      unsigned int v35 = *((_DWORD *)v29 + 5);
      unsigned int v37 = *((_DWORD *)v30 + 6);
      uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v29);
      unsigned int v38 = *((_DWORD *)v30 + 4);
      if (v38 < v36) {
        goto LABEL_47;
      }
      if (v36 < v38) {
        return result;
      }
      unsigned int v39 = *((_DWORD *)v30 + 5);
      if (v39 < v35) {
        goto LABEL_47;
      }
      if (v35 < v39) {
        return result;
      }
      if (result < v32) {
        goto LABEL_47;
      }
      if (v32 < result) {
        return result;
      }
      unsigned int v40 = *(_DWORD *)(*v29 + 16);
      if (v40 < v33) {
        goto LABEL_47;
      }
      if (v33 < v40) {
        return result;
      }
      unsigned int v41 = *(_DWORD *)v29[1];
      if (v41 < v34) {
        goto LABEL_47;
      }
      if (v34 < v41) {
        return result;
      }
      unsigned int v42 = *((_DWORD *)v29 + 6);
      goto LABEL_66;
    }
  }
  else
  {
    unsigned int v47 = *a3;
    unsigned int v48 = *v3;
    uint64_t v49 = **v3;
    unsigned int v50 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v49);
    unsigned int v51 = *(_DWORD *)(v49 + 16);
    unsigned int v52 = *(_DWORD *)v48[1];
    unsigned int v53 = *((_DWORD *)v47 + 4);
    unsigned int v54 = *((_DWORD *)v47 + 5);
    unsigned int v74 = *((_DWORD *)v48 + 6);
    uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v47);
    unsigned int v55 = *((_DWORD *)v48 + 4);
    if (v55 < v53)
    {
      uint64_t v3 = a3;
LABEL_47:
      BOOL v69 = *v4;
      *BOOL v4 = *v3;
      *uint64_t v3 = v69;
      return result;
    }
    if (v53 >= v55)
    {
      unsigned int v65 = *((_DWORD *)v48 + 5);
      if (v65 < v54
        || v54 >= v65
        && (result < v50
         || v50 >= result
         && ((unsigned int v66 = *(_DWORD *)(*v47 + 16), v66 < v51)
          || v51 >= v66 && ((unsigned int v67 = *(_DWORD *)v47[1], v67 < v52) || v52 >= v67 && *((_DWORD *)v47 + 6) < v74))))
      {
LABEL_46:
        uint64_t v3 = a3;
        goto LABEL_47;
      }
    }
    unsigned int v56 = *v4;
    *BOOL v4 = *v3;
    *uint64_t v3 = v56;
    BOOL v57 = *a3;
    uint64_t v58 = *v56;
    unsigned int v59 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v56);
    unsigned int v60 = *(_DWORD *)(v58 + 16);
    unsigned int v61 = *(_DWORD *)v56[1];
    unsigned int v62 = *((_DWORD *)v57 + 4);
    unsigned int v63 = *((_DWORD *)v57 + 5);
    unsigned int v37 = *((_DWORD *)v56 + 6);
    uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v57);
    unsigned int v64 = *((_DWORD *)v56 + 4);
    if (v64 < v62)
    {
      BOOL v4 = v3;
      uint64_t v3 = a3;
      goto LABEL_47;
    }
    if (v62 < v64) {
      return result;
    }
    unsigned int v68 = *((_DWORD *)v56 + 5);
    if (v68 < v63)
    {
LABEL_45:
      BOOL v4 = v3;
      goto LABEL_46;
    }
    if (v63 >= v68)
    {
      if (result < v59) {
        goto LABEL_45;
      }
      if (v59 >= result)
      {
        unsigned int v72 = *(_DWORD *)(*v57 + 16);
        if (v72 < v60) {
          goto LABEL_45;
        }
        if (v60 >= v72)
        {
          unsigned int v73 = *(_DWORD *)v57[1];
          if (v73 < v61) {
            goto LABEL_45;
          }
          if (v61 >= v73)
          {
            unsigned int v42 = *((_DWORD *)v57 + 6);
            BOOL v4 = v3;
            uint64_t v3 = a3;
LABEL_66:
            if (v42 >= v37) {
              return result;
            }
            goto LABEL_47;
          }
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,anonymous namespace'::OrderedPredicate **>(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a2 - a1;
  BOOL result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v5 = (uint64_t)*(a2 - 1);
      unsigned int v6 = *a1;
      uint64_t v7 = **a1;
      unsigned int OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v7);
      unsigned int v9 = *(_DWORD *)(v7 + 16);
      unsigned int v10 = *(_DWORD *)v6[1];
      unsigned int v11 = *(_DWORD *)(v5 + 16);
      unsigned int v12 = *(_DWORD *)(v5 + 20);
      unsigned int v13 = *((_DWORD *)v6 + 6);
      unsigned int v14 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v5);
      unsigned int v15 = *((_DWORD *)v6 + 4);
      if (v15 < v11
        || v11 >= v15
        && ((unsigned int v51 = *((_DWORD *)v6 + 5), v51 < v12)
         || v12 >= v51
         && (v14 < OperationDepth
          || OperationDepth >= v14
          && ((unsigned int v52 = *(_DWORD *)(*(void *)v5 + 16), v52 < v9)
           || v9 >= v52
           && ((unsigned int v53 = **(_DWORD **)(v5 + 8), v53 < v10)
            || (v10 >= v53 ? (BOOL v54 = *(_DWORD *)(v5 + 24) >= v13) : (BOOL v54 = 1), !v54))))))
      {
        BOOL v16 = *a1;
        *a1 = *(v2 - 1);
        *(v2 - 1) = v16;
      }
      return 1;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      unsigned int v17 = a1 + 2;
      uint64_t v18 = a1 + 3;
      if (a1 + 3 == v2) {
        return 1;
      }
      uint64_t v58 = 0;
      int v56 = 0;
      unsigned int v55 = v2;
      break;
  }
  do
  {
    BOOL v57 = v18;
    unsigned int v20 = *v18;
    unsigned int v21 = *v17;
    uint64_t v22 = **v17;
    unsigned int v23 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v22);
    unsigned int v24 = *(_DWORD *)(v22 + 16);
    unsigned int v25 = *(_DWORD *)v21[1];
    unsigned int v26 = *((_DWORD *)v20 + 4);
    unsigned int v27 = *((_DWORD *)v20 + 5);
    unsigned int v28 = *((_DWORD *)v21 + 6);
    unsigned int v29 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v20);
    unsigned int v30 = *((_DWORD *)v21 + 4);
    if (v30 >= v26)
    {
      if (v26 < v30
        || (unsigned int v47 = *((_DWORD *)v21 + 5), v47 >= v27)
        && (v27 < v47
         || v29 >= v23
         && (v23 < v29
          || (unsigned int v48 = *(_DWORD *)(*v20 + 16), v48 >= v24)
          && (v24 < v48
           || (unsigned int v49 = *(_DWORD *)v20[1], v49 >= v25)
           && (v25 >= v49 ? (BOOL v50 = *((_DWORD *)v20 + 6) >= v28) : (BOOL v50 = 1), v50)))))
      {
        unsigned int v19 = v57;
        goto LABEL_8;
      }
    }
    unsigned int v19 = v57;
    uint64_t v31 = *v57;
    *BOOL v57 = *v17;
    unsigned int v32 = a1;
    if (v17 == a1) {
      goto LABEL_44;
    }
    uint64_t v33 = v58;
    while (1)
    {
      uint64_t v34 = *(uint64_t *)((char *)a1 + v33 + 8);
      uint64_t v35 = *(void *)v34;
      unsigned int v36 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(void *)v34);
      unsigned int v37 = *(_DWORD *)(v35 + 16);
      unsigned int v38 = **(_DWORD **)(v34 + 8);
      unsigned int v40 = *((_DWORD *)v31 + 4);
      unsigned int v39 = *((_DWORD *)v31 + 5);
      unsigned int v59 = *(_DWORD *)(v34 + 24);
      unsigned int v41 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v31);
      unsigned int v42 = *(_DWORD *)(v34 + 16);
      if (v42 >= v40)
      {
        if (v40 < v42) {
          goto LABEL_42;
        }
        unsigned int v43 = *(_DWORD *)(v34 + 20);
        if (v43 >= v39)
        {
          if (v39 < v43) {
            goto LABEL_42;
          }
          if (v41 >= v36)
          {
            if (v36 < v41) {
              goto LABEL_42;
            }
            unsigned int v44 = *(_DWORD *)(*v31 + 16);
            if (v44 >= v37) {
              break;
            }
          }
        }
      }
LABEL_12:
      --v17;
      *(uint64_t **)((char *)a1 + v33 + 16) = *(uint64_t **)((char *)a1 + v33 + 8);
      v33 -= 8;
      if (v33 == -16)
      {
        unsigned int v32 = a1;
        goto LABEL_43;
      }
    }
    if (v37 >= v44)
    {
      unsigned int v45 = *(_DWORD *)v31[1];
      if (v45 >= v38 && (v38 < v45 || *((_DWORD *)v31 + 6) >= v59))
      {
        unsigned int v32 = (uint64_t **)((char *)a1 + v33 + 16);
        goto LABEL_43;
      }
      goto LABEL_12;
    }
LABEL_42:
    unsigned int v32 = v17;
LABEL_43:
    uint64_t v2 = v55;
    unsigned int v19 = v57;
LABEL_44:
    *unsigned int v32 = v31;
    if (++v56 == 8) {
      return v19 + 1 == v2;
    }
LABEL_8:
    unsigned int v17 = v19;
    v58 += 8;
    uint64_t v18 = v19 + 1;
  }
  while (v19 + 1 != v2);
  return 1;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,anonymous namespace'::OrderedPredicate **>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v7 = *a4;
  uint64_t v8 = *a3;
  uint64_t v9 = **a3;
  unsigned int OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v9);
  unsigned int v11 = *(_DWORD *)(v9 + 16);
  unsigned int v50 = *(_DWORD *)v8[1];
  unsigned int v13 = *((_DWORD *)v7 + 4);
  unsigned int v12 = *((_DWORD *)v7 + 5);
  unsigned int v14 = *((_DWORD *)v8 + 6);
  uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v7);
  unsigned int v16 = *((_DWORD *)v8 + 4);
  if (v16 < v13
    || v13 >= v16
    && ((unsigned int v17 = *((_DWORD *)v8 + 5), v17 < v12)
     || v12 >= v17
     && (result < OperationDepth
      || OperationDepth >= result
      && ((unsigned int v47 = *(_DWORD *)(*v7 + 16), v47 < v11)
       || v11 >= v47
       && ((v48 = *(_DWORD *)v7[1], v48 < v50) || (v50 >= v48 ? (BOOL v49 = *((_DWORD *)v7 + 6) >= v14) : (BOOL v49 = 1), !v49))))))
  {
    uint64_t v18 = *a3;
    *a3 = *a4;
    *a4 = v18;
    unsigned int v19 = *a3;
    unsigned int v20 = *a2;
    uint64_t v21 = **a2;
    unsigned int v22 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v21);
    unsigned int v23 = *(_DWORD *)(v21 + 16);
    unsigned int v24 = *(_DWORD *)v20[1];
    unsigned int v26 = *((_DWORD *)v19 + 4);
    unsigned int v25 = *((_DWORD *)v19 + 5);
    unsigned int v27 = *((_DWORD *)v20 + 6);
    uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v19);
    unsigned int v28 = *((_DWORD *)v20 + 4);
    if (v28 < v26
      || v26 >= v28
      && ((unsigned int v29 = *((_DWORD *)v20 + 5), v29 < v25)
       || v25 >= v29
       && (result < v22
        || v22 >= result
        && ((unsigned int v45 = *(_DWORD *)(*v19 + 16), v45 < v23)
         || v23 >= v45 && ((unsigned int v46 = *(_DWORD *)v19[1], v46 < v24) || v24 >= v46 && *((_DWORD *)v19 + 6) < v27)))))
    {
      unsigned int v30 = *a2;
      *a2 = *a3;
      *a3 = v30;
      uint64_t v31 = *a2;
      unsigned int v32 = *a1;
      uint64_t v33 = **a1;
      unsigned int v34 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v33);
      unsigned int v35 = *(_DWORD *)(v33 + 16);
      unsigned int v36 = *(_DWORD *)v32[1];
      unsigned int v38 = *((_DWORD *)v31 + 4);
      unsigned int v37 = *((_DWORD *)v31 + 5);
      unsigned int v39 = *((_DWORD *)v32 + 6);
      uint64_t result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v31);
      unsigned int v40 = *((_DWORD *)v32 + 4);
      if (v40 < v38
        || v38 >= v40
        && ((unsigned int v42 = *((_DWORD *)v32 + 5), v42 < v37)
         || v37 >= v42
         && (result < v34
          || v34 >= result
          && ((unsigned int v43 = *(_DWORD *)(*v31 + 16), v43 < v35)
           || v35 >= v43 && ((unsigned int v44 = *(_DWORD *)v31[1], v44 < v36) || v36 >= v44 && *((_DWORD *)v31 + 6) < v39)))))
      {
        unsigned int v41 = *a1;
        *a1 = *a2;
        *a2 = v41;
      }
    }
  }
  return result;
}

uint64_t mlir::pdl_to_pdl_interp::OptimalBranching::OptimalBranching(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)uint64_t result = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v3 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v3;
  int v4 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 24) = a3;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void mlir::pdl_to_pdl_interp::OptimalBranching::solve(mlir::pdl_to_pdl_interp::OptimalBranching *this)
{
  v252[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)((char *)this + 32);
  if (!*((void *)this + 5)) {
    goto LABEL_15;
  }
  uint64_t v3 = *((unsigned int *)this + 12);
  if (v3 > 4 * *((_DWORD *)this + 10) && v3 >= 0x41)
  {
    llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)this + 32);
LABEL_15:
    int64_t v250 = 0;
    char v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, (unint64_t *)this + 3, &v250);
    unsigned int v13 = v250;
    if ((v12 & 1) == 0)
    {
      unsigned int v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v2, (uint64_t)this + 24, (unint64_t *)this + 3, v250);
      *unsigned int v13 = *((void *)this + 3);
      v13[1] = 0;
    }
    v13[1] = 0;
    unsigned int v238 = 0;
    uint64_t v239 = 0;
    unsigned int v240 = 0;
    int v14 = *((_DWORD *)this + 2);
    if (!v14) {
      goto LABEL_160;
    }
    unint64_t v15 = (4 * v14 / 3u + 1) | ((unint64_t)(4 * v14 / 3u + 1) >> 1);
    unint64_t v16 = v15 | (v15 >> 2) | ((v15 | (v15 >> 2)) >> 4);
    llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow((uint64_t)&v238, (((v16 | (v16 >> 8)) >> 16) | v16 | (v16 >> 8)) + 1);
    if (!*((_DWORD *)this + 2)) {
      goto LABEL_160;
    }
    uint64_t v17 = *((unsigned int *)this + 4);
    if (v17)
    {
      uint64_t v18 = 32 * v17;
      unsigned int v19 = *(unint64_t **)this;
      while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v19 += 4;
        v18 -= 32;
        if (!v18) {
          goto LABEL_160;
        }
      }
    }
    else
    {
      unsigned int v19 = *(unint64_t **)this;
    }
    uint64_t v20 = *(void *)this + 32 * v17;
    if (v19 == (unint64_t *)v20) {
      goto LABEL_160;
    }
    int v21 = 0;
LABEL_27:
    unint64_t v237 = *v19;
    int64_t v250 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, &v237, &v250))goto LABEL_157; {
    if (v239)
    }
    {
      unsigned int v22 = v240;
      if (v240 > 4 * (int)v239 && v240 >= 0x41)
      {
        int v23 = 1 << (33 - __clz(v239 - 1));
        if (v23 <= 64) {
          int v24 = 64;
        }
        else {
          int v24 = v23;
        }
        if (v24 == v240)
        {
          uint64_t v239 = 0;
          unsigned int v25 = v238;
          uint64_t v26 = (v240 - 1) & 0xFFFFFFFFFFFFFFFLL;
          if (!v26)
          {
            unsigned int v29 = v238;
LABEL_54:
            unsigned int v40 = (llvm *)((char *)v25 + 16 * v22);
            do
            {
              *(void *)unsigned int v29 = -4096;
              unsigned int v29 = (llvm *)((char *)v29 + 16);
            }
            while (v29 != v40);
            goto LABEL_56;
          }
          uint64_t v27 = v26 + 1;
          uint64_t v28 = (v26 + 1) & 0x1FFFFFFFFFFFFFFELL;
          unsigned int v29 = (llvm *)((char *)v238 + 16 * v28);
          unsigned int v30 = (void *)((char *)v238 + 16);
          uint64_t v31 = v28;
          do
          {
            *(v30 - 2) = -4096;
            void *v30 = -4096;
            v30 += 4;
            v31 -= 2;
          }
          while (v31);
          if (v27 != v28) {
            goto LABEL_54;
          }
LABEL_56:
          while (1)
          {
            uint64_t v41 = *(void *)this;
            int v42 = *((_DWORD *)this + 4);
            int v229 = v21;
            if (!v42) {
              break;
            }
            unint64_t v43 = v237;
            {
              unint64_t v102 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v102 = 0xFF51AFD7ED558CCDLL;
              }
              llvm::hashing::detail::get_execution_seed(void)::seed = v102;
            }
            unint64_t v44 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v43) ^ HIDWORD(v43));
            unint64_t v45 = 0x9DDFEA08EB382D69 * (HIDWORD(v43) ^ (v44 >> 47) ^ v44);
            unint64_t v46 = (-348639895 * ((v45 >> 47) ^ v45)) & (v42 - 1);
            unsigned int v47 = (uint64_t *)(v41 + 32 * v46);
            uint64_t v48 = *v47;
            if (v237 != *v47)
            {
              int v49 = 1;
              while (v48 != -4096)
              {
                int v50 = v46 + v49++;
                unint64_t v46 = v50 & (v42 - 1);
                uint64_t v48 = *(void *)(v41 + 32 * v46);
                if (v237 == v48)
                {
                  unsigned int v47 = (uint64_t *)(v41 + 32 * v46);
                  goto LABEL_65;
                }
              }
              uint64_t v41 = *(void *)this;
              uint64_t v51 = *((unsigned int *)this + 4);
              goto LABEL_64;
            }
LABEL_65:
            int v52 = *((_DWORD *)this + 12);
            if (!v52)
            {
              unsigned int v66 = 0;
LABEL_130:
              v66 *= 2;
LABEL_131:
              llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::grow((uint64_t)v2, v66);
              int64_t v250 = 0;
              llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, &v237, &v250);
              unsigned int v60 = v250;
              ++*((_DWORD *)this + 10);
              if (*v60 == -4096) {
                goto LABEL_81;
              }
LABEL_80:
              --*((_DWORD *)this + 11);
              goto LABEL_81;
            }
            uint64_t v53 = *((void *)this + 4);
            unint64_t v54 = v237;
            {
              unint64_t v103 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v103 = 0xFF51AFD7ED558CCDLL;
              }
              llvm::hashing::detail::get_execution_seed(void)::seed = v103;
            }
            unint64_t v55 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v54) ^ HIDWORD(v54));
            unint64_t v56 = 0x9DDFEA08EB382D69 * (HIDWORD(v54) ^ (v55 >> 47) ^ v55);
            int v57 = -348639895 * ((v56 >> 47) ^ v56);
            int v58 = v52 - 1;
            unsigned int v59 = v57 & (v52 - 1);
            unsigned int v60 = (unint64_t *)(v53 + 16 * v59);
            unint64_t v61 = *v60;
            if (v237 == *v60) {
              goto LABEL_82;
            }
            unsigned int v62 = 0;
            int v63 = 1;
            while (v61 != -4096)
            {
              if (v62) {
                BOOL v64 = 0;
              }
              else {
                BOOL v64 = v61 == -8192;
              }
              if (v64) {
                unsigned int v62 = v60;
              }
              unsigned int v65 = v59 + v63++;
              unsigned int v59 = v65 & v58;
              unsigned int v60 = (unint64_t *)(v53 + 16 * v59);
              unint64_t v61 = *v60;
              if (v237 == *v60) {
                goto LABEL_82;
              }
            }
            if (v62) {
              unsigned int v60 = v62;
            }
            unsigned int v66 = *((_DWORD *)this + 12);
            int v101 = *((_DWORD *)this + 10);
            if (4 * v101 + 4 >= 3 * v66) {
              goto LABEL_130;
            }
            if (v66 + ~v101 - *((_DWORD *)this + 11) <= v66 >> 3) {
              goto LABEL_131;
            }
            ++*((_DWORD *)this + 10);
            if (*v60 != -4096) {
              goto LABEL_80;
            }
LABEL_81:
            *unsigned int v60 = v237;
            v60[1] = 0;
LABEL_82:
            if (!*((_DWORD *)v47 + 4)) {
              goto LABEL_100;
            }
            uint64_t v67 = *((unsigned int *)v47 + 6);
            if (v67)
            {
              uint64_t v68 = 24 * v67;
              uint64_t v69 = v47[1];
              while ((*(void *)v69 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v69 += 24;
                v68 -= 24;
                if (!v68) {
                  goto LABEL_100;
                }
              }
            }
            else
            {
              uint64_t v69 = v47[1];
            }
            uint64_t v70 = v47[1] + 24 * v67;
            if (v69 == v70)
            {
LABEL_100:
              unsigned int v71 = 0;
            }
            else
            {
              unsigned int v71 = 0;
              unsigned int v72 = 0;
              unint64_t v73 = v60[1];
              do
              {
                unsigned int v74 = *(_DWORD *)(v69 + 8);
                if (!v73 || v74 < v71 || v71 >= v74 && *(_DWORD *)(v69 + 12) < v72)
                {
                  unint64_t v73 = *(void *)v69;
                  v60[1] = *(void *)v69;
                  unsigned int v72 = *(_DWORD *)(v69 + 12);
                  unsigned int v71 = v74;
                }
                do
                {
                  v69 += 24;
                  if (v69 == v70) {
                    goto LABEL_101;
                  }
                }
                while ((*(void *)v69 | 0x1000) == 0xFFFFFFFFFFFFF000);
              }
              while (v69 != v70);
            }
LABEL_101:
            unsigned int v75 = v240;
            if (!v240)
            {
              int v85 = 0;
              goto LABEL_137;
            }
            unsigned int v76 = v2;
            unint64_t v77 = v237;
            unsigned int v78 = v238;
            {
              unint64_t v104 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v104 = 0xFF51AFD7ED558CCDLL;
              }
              llvm::hashing::detail::get_execution_seed(void)::seed = v104;
            }
            unint64_t v79 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v77) ^ HIDWORD(v77));
            unint64_t v80 = 0x9DDFEA08EB382D69 * (HIDWORD(v77) ^ (v79 >> 47) ^ v79);
            unsigned int v81 = v75 - 1;
            unsigned int v82 = (-348639895 * ((v80 >> 47) ^ v80)) & (v75 - 1);
            unsigned int v83 = (unint64_t *)((char *)v78 + 16 * v82);
            unint64_t v84 = *v83;
            if (v237 != *v83)
            {
              unsigned int v97 = 0;
              int v98 = 1;
              while (v84 != -4096)
              {
                if (v97) {
                  BOOL v99 = 0;
                }
                else {
                  BOOL v99 = v84 == -8192;
                }
                if (v99) {
                  unsigned int v97 = v83;
                }
                unsigned int v100 = v82 + v98++;
                unsigned int v82 = v100 & v81;
                unsigned int v83 = (unint64_t *)((char *)v78 + 16 * (v100 & v81));
                unint64_t v84 = *v83;
                uint64_t v2 = v76;
                if (v237 == *v83) {
                  goto LABEL_110;
                }
              }
              if (v97) {
                unsigned int v83 = v97;
              }
              int v85 = v240;
              uint64_t v2 = v76;
              if (4 * (int)v239 + 4 < 3 * v240)
              {
                if (v240 + ~v239 - HIDWORD(v239) <= v240 >> 3) {
                  goto LABEL_138;
                }
                LODWORD(v239) = v239 + 1;
                if (*v83 == -4096)
                {
LABEL_109:
                  *unsigned int v83 = v237;
                  *((_DWORD *)v83 + 2) = 0;
                  goto LABEL_110;
                }
              }
              else
              {
LABEL_137:
                v85 *= 2;
LABEL_138:
                llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow((uint64_t)&v238, v85);
                int64_t v250 = 0;
                llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v238, &v237, &v250);
                unsigned int v83 = v250;
                LODWORD(v239) = v239 + 1;
                if (*v250 == -4096) {
                  goto LABEL_109;
                }
              }
              --HIDWORD(v239);
              goto LABEL_109;
            }
            uint64_t v2 = v76;
LABEL_110:
            *((_DWORD *)v83 + 2) = v71;
            unint64_t v86 = v60[1];
            unint64_t v237 = v86;
            int v21 = v71 + v229;
            int v87 = *((_DWORD *)this + 12);
            if (v87)
            {
              uint64_t v88 = *((void *)this + 4);
              {
                unint64_t v105 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v105 = 0xFF51AFD7ED558CCDLL;
                }
                llvm::hashing::detail::get_execution_seed(void)::seed = v105;
              }
              unint64_t v89 = 0x9DDFEA08EB382D69
                  * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v86) ^ HIDWORD(v86));
              unint64_t v90 = 0x9DDFEA08EB382D69 * (HIDWORD(v86) ^ (v89 >> 47) ^ v89);
              int v91 = -348639895 * ((v90 >> 47) ^ v90);
              int v92 = v87 - 1;
              unsigned int v93 = v91 & (v87 - 1);
              uint64_t v94 = *(void *)(v88 + 16 * v93);
              if (v237 == v94)
              {
LABEL_156:
                int64_t v250 = 0;
                if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v238, &v237, &v250))
                {
                  do
                  {
LABEL_157:
                    v19 += 4;
                    if (v19 == (unint64_t *)v20) {
                      goto LABEL_160;
                    }
                  }
                  while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000);
                  if (v19 == (unint64_t *)v20) {
LABEL_160:
                  }
                    llvm::deallocate_buffer(v238, (void *)(16 * v240));
                  goto LABEL_27;
                }
                unint64_t v106 = v237;
                int64_t v250 = v252;
                uint64_t v251 = 0x600000000;
                unint64_t v107 = v237;
                while (1)
                {
LABEL_163:
                  uint64_t v108 = v251;
                  if (v251 >= (unint64_t)HIDWORD(v251))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v250, v252, v251 + 1, 8);
                    uint64_t v108 = v251;
                  }
                  v250[v108] = v107;
                  LODWORD(v251) = v251 + 1;
                  int v109 = *((_DWORD *)this + 12);
                  if (!v109) {
                    goto LABEL_162;
                  }
                  uint64_t v110 = *((void *)this + 4);
                  {
                    unint64_t v117 = llvm::hashing::detail::fixed_seed_override;
                    if (!llvm::hashing::detail::fixed_seed_override) {
                      unint64_t v117 = 0xFF51AFD7ED558CCDLL;
                    }
                    llvm::hashing::detail::get_execution_seed(void)::seed = v117;
                  }
                  unint64_t v111 = 0x9DDFEA08EB382D69
                       * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v107) ^ HIDWORD(v107));
                  unint64_t v112 = 0x9DDFEA08EB382D69 * (HIDWORD(v107) ^ (v111 >> 47) ^ v111);
                  unint64_t v113 = (-348639895 * ((v112 >> 47) ^ v112)) & (v109 - 1);
                  uint64_t v114 = *(void *)(v110 + 16 * v113);
                  if (v107 != v114) {
                    break;
                  }
LABEL_168:
                  unint64_t v107 = *(void *)(v110 + 16 * v113 + 8);
                  if (v106 == v107)
                  {
LABEL_178:
                    v235[0] = 0;
                    v235[1] = 0;
                    int v236 = 0;
                    v232 = 0;
                    uint64_t v233 = 0;
                    unsigned int v234 = 0;
                    unint64_t v248 = *v250;
                    unsigned int v243 = v250;
                    v249 = &v250[v251];
                    llvm::detail::DenseSetImpl<mlir::Value,llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,llvm::DenseMapInfo<mlir::Value,void>>::DenseSetImpl<mlir::Value const*>((uint64_t)v246, &v243, &v249);
                    unsigned int v243 = 0;
                    uint64_t v244 = 0;
                    unsigned int v245 = 0;
                    if (!*((_DWORD *)this + 2)) {
                      goto LABEL_351;
                    }
                    uint64_t v118 = *((unsigned int *)this + 4);
                    if (v118)
                    {
                      uint64_t v119 = 32 * v118;
                      uint64_t v120 = *(int32x2_t **)this;
                      while ((*(void *)v120 | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v120 += 4;
                        v119 -= 32;
                        if (!v119) {
                          goto LABEL_351;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v120 = *(int32x2_t **)this;
                    }
                    uint64_t v121 = *(void *)this + 32 * v118;
                    if (v120 == (int32x2_t *)v121) {
                      goto LABEL_351;
                    }
                    unint64_t v122 = (unint64_t)*v120;
                    while (2)
                    {
                      unint64_t v242 = v122;
                      v249 = 0;
                      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v246, &v242, &v249))
                      {
                        unsigned int v123 = v249;
                        unsigned int v124 = v246[0];
                        uint64_t v125 = v247;
                      }
                      else
                      {
                        unsigned int v124 = v246[0];
                        uint64_t v125 = v247;
                        unsigned int v123 = (unint64_t *)((char *)v246[0] + 8 * v247);
                      }
                      unsigned int v126 = v125;
                      if (v123 != (unint64_t *)((char *)v124 + 8 * v125))
                      {
                        v249 = 0;
                        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v238, &v242, &v249))int v127 = *((_DWORD *)v249 + 2); {
                        else
                        }
                          int v127 = 0;
                        unsigned int v132 = (llvm *)v120[1];
                        uint64_t v133 = v120[3].u32[0];
                        if (!v120[2].i32[0]) {
LABEL_347:
                        }
                          llvm::deallocate_buffer(v132, (void *)(24 * v133));
                        unsigned int v134 = (char *)v120[1];
                        if (v133)
                        {
                          uint64_t v135 = 0;
                          while ((*(void *)((char *)v132 + v135) | 0x1000) == 0xFFFFFFFFFFFFF000)
                          {
                            v135 += 24;
                            if (24 * v133 == v135) {
                              goto LABEL_347;
                            }
                          }
                          unsigned int v134 = (char *)v132 + v135;
                        }
                        unsigned int v163 = (char *)v132 + 24 * v133;
                        if (v134 == v163) {
                          goto LABEL_347;
                        }
                        unint64_t v164 = *(void *)v134;
                        while (2)
                        {
                          unint64_t v241 = v164;
                          unsigned int v165 = v246[0];
                          unsigned int v166 = v247;
                          if (v247)
                          {
                            {
                              int v228 = v127;
                              int v127 = v228;
                              if (v213)
                              {
                                unint64_t v214 = llvm::hashing::detail::fixed_seed_override;
                                if (!llvm::hashing::detail::fixed_seed_override) {
                                  unint64_t v214 = 0xFF51AFD7ED558CCDLL;
                                }
                                llvm::hashing::detail::get_execution_seed(void)::seed = v214;
                                int v127 = v228;
                              }
                            }
                            unint64_t v168 = 0x9DDFEA08EB382D69
                                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v164) ^ HIDWORD(v164));
                            unint64_t v167 = 0x9DDFEA08EB382D69 * (HIDWORD(v164) ^ (v168 >> 47) ^ v168);
                            unint64_t v164 = v241;
                            LODWORD(v168) = (-348639895 * ((v167 >> 47) ^ v167)) & (v166 - 1);
                            unsigned int v169 = (uint64_t *)((char *)v165 + 8 * v168);
                            uint64_t v170 = *v169;
                            if (v241 == *v169)
                            {
LABEL_256:
                              unsigned int v165 = v246[0];
                              uint64_t v171 = v247;
                              goto LABEL_259;
                            }
                            int v209 = 1;
                            while (v170 != -4096)
                            {
                              int v210 = v168 + v209++;
                              unint64_t v168 = v210 & (v166 - 1);
                              uint64_t v170 = *((void *)v165 + v168);
                              if (v241 == v170)
                              {
                                unsigned int v169 = (uint64_t *)((char *)v165 + 8 * v168);
                                goto LABEL_256;
                              }
                            }
                            unsigned int v165 = v246[0];
                            uint64_t v171 = v247;
                          }
                          else
                          {
                            uint64_t v171 = 0;
                          }
                          unsigned int v169 = (uint64_t *)((char *)v165 + 8 * v171);
LABEL_259:
                          if (v169 == (uint64_t *)((char *)v165 + 8 * v171))
                          {
                            unsigned int v225 = v2;
                            unsigned int v223 = *((_DWORD *)v134 + 3);
                            int v227 = v127;
                            unsigned int v231 = *((_DWORD *)v134 + 2) - v127;
                            unsigned int v172 = v245;
                            if (v245)
                            {
                              uint64_t v173 = v243;
                              {
                                unint64_t v215 = llvm::hashing::detail::fixed_seed_override;
                                if (!llvm::hashing::detail::fixed_seed_override) {
                                  unint64_t v215 = 0xFF51AFD7ED558CCDLL;
                                }
                                llvm::hashing::detail::get_execution_seed(void)::seed = v215;
                              }
                              unint64_t v174 = 0x9DDFEA08EB382D69
                                   * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v164) ^ HIDWORD(v164));
                              unint64_t v175 = 0x9DDFEA08EB382D69 * (HIDWORD(v164) ^ (v174 >> 47) ^ v174);
                              LODWORD(v174) = -348639895 * ((v175 >> 47) ^ v175);
                              unsigned int v176 = v172 - 1;
                              unint64_t v164 = v241;
                              unsigned int v177 = v174 & (v172 - 1);
                              unsigned int v178 = &v173[3 * v177];
                              unint64_t v179 = *v178;
                              if (v241 == *v178)
                              {
LABEL_263:
                                if (v178 != &v243[3 * v245])
                                {
                                  unsigned int v180 = *((_DWORD *)v178 + 2);
                                  if (v231 >= v180)
                                  {
                                    int v127 = v227;
                                    if (v180 < v231 || *((_DWORD *)v178 + 3) <= v223) {
                                      goto LABEL_300;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                int v211 = 1;
                                while (v179 != -4096)
                                {
                                  unsigned int v212 = v177 + v211++;
                                  unsigned int v177 = v212 & v176;
                                  unsigned int v178 = &v173[3 * (v212 & v176)];
                                  unint64_t v179 = *v178;
                                  if (v241 == *v178) {
                                    goto LABEL_263;
                                  }
                                }
                              }
                            }
                            unsigned int v181 = v234;
                            if (!v234)
                            {
                              int v193 = 0;
                              goto LABEL_321;
                            }
                            unsigned int v182 = v232;
                            {
                              unint64_t v216 = llvm::hashing::detail::fixed_seed_override;
                              if (!llvm::hashing::detail::fixed_seed_override) {
                                unint64_t v216 = 0xFF51AFD7ED558CCDLL;
                              }
                              llvm::hashing::detail::get_execution_seed(void)::seed = v216;
                            }
                            unint64_t v183 = 0x9DDFEA08EB382D69
                                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v164) ^ HIDWORD(v164));
                            unint64_t v184 = 0x9DDFEA08EB382D69 * (HIDWORD(v164) ^ (v183 >> 47) ^ v183);
                            unsigned int v185 = v181 - 1;
                            unsigned int v186 = (-348639895 * ((v184 >> 47) ^ v184)) & (v181 - 1);
                            uint64_t v187 = (unint64_t *)((char *)v182 + 16 * v186);
                            unint64_t v188 = *v187;
                            if (v241 != *v187)
                            {
                              unsigned int v189 = 0;
                              int v190 = 1;
                              while (v188 != -4096)
                              {
                                if (v189) {
                                  BOOL v191 = 0;
                                }
                                else {
                                  BOOL v191 = v188 == -8192;
                                }
                                if (v191) {
                                  unsigned int v189 = v187;
                                }
                                unsigned int v192 = v186 + v190++;
                                unsigned int v186 = v192 & v185;
                                uint64_t v187 = (unint64_t *)((char *)v182 + 16 * (v192 & v185));
                                unint64_t v188 = *v187;
                                if (v241 == *v187) {
                                  goto LABEL_282;
                                }
                              }
                              if (v189) {
                                uint64_t v187 = v189;
                              }
                              int v193 = v234;
                              if (4 * (int)v233 + 4 >= 3 * v234)
                              {
LABEL_321:
                                v193 *= 2;
LABEL_322:
                                llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::grow((uint64_t)&v232, v193);
                                v249 = 0;
                                llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v232, &v241, &v249);
                                uint64_t v187 = v249;
                                LODWORD(v233) = v233 + 1;
                                if (*v249 == -4096) {
                                  goto LABEL_281;
                                }
LABEL_280:
                                --HIDWORD(v233);
                                goto LABEL_281;
                              }
                              if (v234 + ~v233 - HIDWORD(v233) <= v234 >> 3) {
                                goto LABEL_322;
                              }
                              LODWORD(v233) = v233 + 1;
                              if (*v187 != -4096) {
                                goto LABEL_280;
                              }
LABEL_281:
                              *uint64_t v187 = v241;
                              v187[1] = 0;
                            }
LABEL_282:
                            v187[1] = v242;
                            unsigned int v194 = v245;
                            if (!v245)
                            {
                              int v207 = 0;
                              goto LABEL_327;
                            }
                            unsigned int v195 = v243;
                            unint64_t v196 = v241;
                            {
                              unint64_t v217 = llvm::hashing::detail::fixed_seed_override;
                              if (!llvm::hashing::detail::fixed_seed_override) {
                                unint64_t v217 = 0xFF51AFD7ED558CCDLL;
                              }
                              llvm::hashing::detail::get_execution_seed(void)::seed = v217;
                            }
                            unint64_t v197 = 0x9DDFEA08EB382D69
                                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v196) ^ HIDWORD(v196));
                            unint64_t v198 = 0x9DDFEA08EB382D69 * (HIDWORD(v196) ^ (v197 >> 47) ^ v197);
                            unsigned int v199 = v194 - 1;
                            unsigned int v200 = (-348639895 * ((v198 >> 47) ^ v198)) & (v194 - 1);
                            unsigned int v201 = &v195[3 * v200];
                            unint64_t v202 = *v201;
                            if (v241 != *v201)
                            {
                              __int16 v203 = 0;
                              int v204 = 1;
                              while (v202 != -4096)
                              {
                                if (v203) {
                                  BOOL v205 = 0;
                                }
                                else {
                                  BOOL v205 = v202 == -8192;
                                }
                                if (v205) {
                                  __int16 v203 = v201;
                                }
                                unsigned int v206 = v200 + v204++;
                                unsigned int v200 = v206 & v199;
                                unsigned int v201 = &v195[3 * (v206 & v199)];
                                unint64_t v202 = *v201;
                                if (v241 == *v201) {
                                  goto LABEL_299;
                                }
                              }
                              if (v203) {
                                unsigned int v201 = v203;
                              }
                              int v207 = v245;
                              if (4 * (int)v244 + 4 >= 3 * v245)
                              {
LABEL_327:
                                v207 *= 2;
LABEL_328:
                                llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::grow((uint64_t)&v243, v207);
                                v249 = 0;
                                llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>((uint64_t *)&v243, &v241, &v249);
                                unsigned int v201 = v249;
                                LODWORD(v244) = v244 + 1;
                                if (*v249 == -4096) {
                                  goto LABEL_298;
                                }
LABEL_297:
                                --HIDWORD(v244);
                                goto LABEL_298;
                              }
                              if (v245 + ~v244 - HIDWORD(v244) <= v245 >> 3) {
                                goto LABEL_328;
                              }
                              LODWORD(v244) = v244 + 1;
                              if (*v201 != -4096) {
                                goto LABEL_297;
                              }
LABEL_298:
                              unint64_t v208 = v241;
                              v201[1] = 0;
                              v201[2] = 0;
                              *unsigned int v201 = v208;
                            }
LABEL_299:
                            *((_DWORD *)v201 + 2) = v231;
                            *((_DWORD *)v201 + 3) = v223;
                            uint64_t v2 = v225;
                            int v127 = v227;
                          }
LABEL_300:
                          v134 += 24;
                          if (v134 == v163) {
                            goto LABEL_346;
                          }
                          while (1)
                          {
                            unint64_t v164 = *(void *)v134;
                            if ((*(void *)v134 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                              break;
                            }
                            v134 += 24;
                            if (v134 == v163) {
                              goto LABEL_346;
                            }
                          }
                          if (v134 == v163)
                          {
LABEL_346:
                            unsigned int v132 = (llvm *)v120[1];
                            uint64_t v133 = v120[3].u32[0];
                            goto LABEL_347;
                          }
                          continue;
                        }
                      }
                      uint64_t v128 = (uint64_t *)&v120[1];
                      if (!v120[2].i32[0]) {
                        goto LABEL_348;
                      }
                      uint64_t v129 = v120[3].u32[0];
                      if (v129)
                      {
                        uint64_t v130 = 24 * v129;
                        unsigned int v131 = (void *)v120[1];
                        while ((*v131 | 0x1000) == 0xFFFFFFFFFFFFF000)
                        {
                          v131 += 3;
                          v130 -= 24;
                          if (!v130) {
                            goto LABEL_348;
                          }
                        }
                      }
                      else
                      {
                        unsigned int v131 = (void *)v120[1];
                      }
                      uint64_t v136 = *(void *)&v120[1] + 24 * v129;
                      if (v131 == (void *)v136) {
                        goto LABEL_348;
                      }
                      unsigned int v137 = 0;
                      unsigned int v138 = 0;
                      unint64_t v139 = 0;
LABEL_209:
                      unint64_t v140 = *v131;
                      unint64_t v141 = v246[0];
                      if (v126)
                      {
                        {
                          unint64_t v226 = v139;
                          unsigned int v230 = v128;
                          unsigned int v224 = v138;
                          unsigned int v222 = v137;
                          unsigned int v137 = v222;
                          unsigned int v138 = v224;
                          unint64_t v139 = v226;
                          uint64_t v128 = v230;
                          if (v152)
                          {
                            unint64_t v153 = llvm::hashing::detail::fixed_seed_override;
                            if (!llvm::hashing::detail::fixed_seed_override) {
                              unint64_t v153 = 0xFF51AFD7ED558CCDLL;
                            }
                            llvm::hashing::detail::get_execution_seed(void)::seed = v153;
                            unsigned int v137 = v222;
                            unsigned int v138 = v224;
                            unint64_t v139 = v226;
                            uint64_t v128 = v230;
                          }
                        }
                        unint64_t v142 = 0x9DDFEA08EB382D69
                             * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v140) ^ HIDWORD(v140));
                        unint64_t v143 = 0x9DDFEA08EB382D69 * (HIDWORD(v140) ^ (v142 >> 47) ^ v142);
                        LODWORD(v143) = (-348639895 * ((v143 >> 47) ^ v143)) & (v126 - 1);
                        uint64_t v144 = (uint64_t *)((char *)v141 + 8 * v143);
                        uint64_t v145 = *v144;
                        if (*v144 == v140)
                        {
LABEL_212:
                          unint64_t v141 = v246[0];
                          unsigned int v126 = v247;
                          uint64_t v146 = v247;
                          goto LABEL_219;
                        }
                        int v147 = 1;
                        while (v145 != -4096)
                        {
                          int v148 = v143 + v147++;
                          unint64_t v143 = v148 & (v126 - 1);
                          uint64_t v145 = *((void *)v141 + v143);
                          if (v145 == v140)
                          {
                            uint64_t v144 = (uint64_t *)((char *)v141 + 8 * v143);
                            goto LABEL_212;
                          }
                        }
                        unint64_t v141 = v246[0];
                        unsigned int v126 = v247;
                      }
                      uint64_t v146 = v126;
                      uint64_t v144 = (uint64_t *)((char *)v141 + 8 * v126);
LABEL_219:
                      if (v144 != (uint64_t *)((char *)v141 + 8 * v146))
                      {
                        unsigned int v149 = *((_DWORD *)v131 + 2);
                        if (v139 && v149 >= v137)
                        {
                          if (v137 < v149 || (unsigned int v151 = *((_DWORD *)v131 + 3), v151 >= v138))
                          {
LABEL_230:
                            unsigned int v150 = (void *)v136;
                            if (v131 + 3 != (void *)v136)
                            {
                              unsigned int v150 = v131 + 3;
                              do
                              {
                                if ((*v150 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                                  goto LABEL_235;
                                }
                                v150 += 3;
                              }
                              while (v150 != (void *)v136);
                              unsigned int v150 = (void *)v136;
                            }
LABEL_235:
                            *unsigned int v131 = -8192;
                            v120[2] = vadd_s32(v120[2], (int32x2_t)0x1FFFFFFFFLL);
                            goto LABEL_236;
                          }
                        }
                        else
                        {
                          unsigned int v151 = *((_DWORD *)v131 + 3);
                        }
                        unint64_t v139 = v140;
                        unsigned int v138 = v151;
                        unsigned int v137 = *((_DWORD *)v131 + 2);
                        goto LABEL_230;
                      }
                      unsigned int v150 = v131 + 3;
                      if (v131 + 3 == (void *)v136) {
                        goto LABEL_244;
                      }
                      while ((*v150 | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v150 += 3;
                        if (v150 == (void *)v136) {
                          goto LABEL_244;
                        }
                      }
LABEL_236:
                      unsigned int v131 = v150;
                      if (v150 == (void *)v136)
                      {
LABEL_244:
                        if (v139)
                        {
                          unsigned int v154 = v137;
                          unsigned int v155 = v138;
                          unint64_t v156 = v139;
                          v249 = 0;
                          uint64_t v157 = (uint64_t)v128;
                          char v158 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>(v128, &v248, &v249);
                          unsigned int v159 = v249;
                          if ((v158 & 1) == 0)
                          {
                            unsigned int v159 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::InsertIntoBucketImpl<mlir::Value>(v157, (uint64_t)&v248, &v248, v249);
                            unint64_t v160 = v248;
                            v159[1] = 0;
                            v159[2] = 0;
                            unint64_t *v159 = v160;
                          }
                          *((_DWORD *)v159 + 2) = v154;
                          *((_DWORD *)v159 + 3) = v155;
                          v249 = 0;
                          char v161 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v235, &v242, &v249);
                          unsigned int v162 = v249;
                          if ((v161 & 1) == 0)
                          {
                            unsigned int v162 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v235, (uint64_t)&v242, &v242, v249);
                            unint64_t *v162 = v242;
                            v162[1] = 0;
                          }
                          v162[1] = v156;
                        }
                        do
                        {
LABEL_348:
                          v120 += 4;
                          if (v120 == (int32x2_t *)v121) {
                            goto LABEL_351;
                          }
                          unint64_t v122 = (unint64_t)*v120;
                        }
                        while ((*(void *)v120 | 0x1000) == 0xFFFFFFFFFFFFF000);
                        if (v120 == (int32x2_t *)v121)
                        {
LABEL_351:
                          v249 = 0;
                          int v218 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)this, &v248, &v249);
                          v219 = v249;
                          if (v218)
                          {
                            v220 = (llvm *)v249[1];
                          }
                          else
                          {
                            v219 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this, (uint64_t)&v248, &v248, v249);
                            v220 = 0;
                            unint64_t v221 = v248;
                            v219[1] = 0;
                            v219[2] = 0;
                            unint64_t *v219 = v221;
                            *((_DWORD *)v219 + 6) = 0;
                          }
                          llvm::deallocate_buffer(v220, (void *)(24 * *((unsigned int *)v219 + 6)));
                        }
                        continue;
                      }
                      goto LABEL_209;
                    }
                  }
                }
                int v115 = 1;
                while (v114 != -4096)
                {
                  int v116 = v113 + v115++;
                  unint64_t v113 = v116 & (v109 - 1);
                  uint64_t v114 = *(void *)(v110 + 16 * v113);
                  if (v107 == v114) {
                    goto LABEL_168;
                  }
                }
LABEL_162:
                unint64_t v107 = 0;
                if (!v106) {
                  goto LABEL_178;
                }
                goto LABEL_163;
              }
              int v95 = 1;
              while (v94 != -4096)
              {
                unsigned int v96 = v93 + v95++;
                unsigned int v93 = v96 & v92;
                uint64_t v94 = *(void *)(v88 + 16 * (v96 & v92));
                if (v237 == v94) {
                  goto LABEL_156;
                }
              }
            }
          }
          uint64_t v51 = 0;
LABEL_64:
          unsigned int v47 = (uint64_t *)(v41 + 32 * v51);
          goto LABEL_65;
        }
LABEL_42:
        llvm::deallocate_buffer(v238, (void *)(16 * v22));
      }
    }
    else
    {
      if (!HIDWORD(v239)) {
        goto LABEL_56;
      }
      unsigned int v22 = v240;
      if (v240 > 0x40) {
        goto LABEL_42;
      }
    }
    if (v22)
    {
      unsigned int v32 = v238;
      uint64_t v33 = (v22 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v33)
      {
        uint64_t v34 = v33 + 1;
        uint64_t v35 = (v33 + 1) & 0x1FFFFFFFFFFFFFFELL;
        unsigned int v36 = (llvm *)((char *)v238 + 16 * v35);
        unsigned int v37 = (void *)((char *)v238 + 16);
        uint64_t v38 = v35;
        do
        {
          *(v37 - 2) = -4096;
          void *v37 = -4096;
          v37 += 4;
          v38 -= 2;
        }
        while (v38);
        if (v34 == v35) {
          goto LABEL_52;
        }
      }
      else
      {
        unsigned int v36 = v238;
      }
      unsigned int v39 = (llvm *)((char *)v32 + 16 * v22);
      do
      {
        *(void *)unsigned int v36 = -4096;
        unsigned int v36 = (llvm *)((char *)v36 + 16);
      }
      while (v36 != v39);
    }
LABEL_52:
    uint64_t v239 = 0;
    goto LABEL_56;
  }
  if (v3)
  {
    uint64_t v4 = *v2;
    uint64_t v5 = (v3 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v5)
    {
      uint64_t v6 = v5 + 1;
      uint64_t v7 = (v5 + 1) & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v8 = (void *)(v4 + 16 * v7);
      uint64_t v9 = (void *)(v4 + 16);
      uint64_t v10 = v7;
      do
      {
        *(v9 - 2) = -4096;
        void *v9 = -4096;
        v9 += 4;
        v10 -= 2;
      }
      while (v10);
      if (v6 == v7) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v8 = (void *)*v2;
    }
    unsigned int v11 = (void *)(v4 + 16 * v3);
    do
    {
      *uint64_t v8 = -4096;
      v8 += 2;
    }
    while (v8 != v11);
  }
LABEL_14:
  *((void *)this + 5) = 0;
  goto LABEL_15;
}

void mlir::pdl_to_pdl_interp::OptimalBranching::preOrderTraversal(uint64_t a1@<X0>, unint64_t *a2@<X1>, unint64_t a3@<X2>, char **a4@<X8>)
{
  v61[0] = 0;
  v61[1] = 0;
  unsigned int v62 = 0;
  if (!a3)
  {
    *a4 = 0;
    a4[2] = 0;
    a4[1] = 0;
    uint64_t v33 = a4 + 1;
    unsigned int v32 = (char *)operator new(0x10uLL);
    *(void *)unsigned int v32 = *(void *)(a1 + 24);
    *((void *)v32 + 1) = 0;
    uint64_t v34 = v32 + 16;
    *a4 = v32;
    *uint64_t v33 = v32 + 16;
    int v58 = a4 + 2;
    a4[2] = v32 + 16;
    goto LABEL_36;
  }
  uint64_t v6 = a2;
  uint64_t v7 = (uint64_t *)(a1 + 32);
  uint64_t v8 = &a2[a3];
  int v57 = (uint64_t *)(a1 + 32);
  unint64_t v56 = v8;
  while (1)
  {
    unint64_t v60 = *v6;
    if (*(void *)(a1 + 24) == v60) {
      goto LABEL_5;
    }
    int v63 = 0;
    int v10 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v7, &v60, &v63);
    unint64_t v11 = 0;
    if (v10) {
      unint64_t v11 = v63[1];
    }
    unint64_t v59 = v11;
    int v63 = 0;
    char v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)v61, &v59, &v63);
    unsigned int v13 = v63;
    if ((v12 & 1) == 0)
    {
      unsigned int v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>,mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v61, (uint64_t)&v59, &v59, v63);
      *unsigned int v13 = v59;
      v13[1] = 0;
      v13[2] = 0;
      v13[3] = 0;
    }
    unint64_t v15 = (char *)v13[2];
    unint64_t v14 = v13[3];
    if ((unint64_t)v15 >= v14) {
      break;
    }
    *(void *)unint64_t v15 = v60;
    uint64_t v9 = (uint64_t)(v15 + 8);
LABEL_4:
    v13[2] = v9;
LABEL_5:
    if (++v6 == v8)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      if (a3 >> 60) {
LABEL_70:
      }
        abort();
      unsigned int v32 = (char *)operator new(16 * a3);
      a4[2] = &v32[16 * a3];
      int v58 = a4 + 2;
      a4[1] = v32;
      uint64_t v33 = a4 + 1;
      *a4 = v32;
      *(void *)unsigned int v32 = *(void *)(a1 + 24);
      *((void *)v32 + 1) = 0;
      uint64_t v34 = v32 + 16;
LABEL_36:
      uint64_t v35 = 0;
      *uint64_t v33 = v34;
      while (2)
      {
        unint64_t v60 = *(void *)&v32[16 * v35];
        int v63 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)v61, &v60, &v63))
        {
          unsigned int v37 = (uint64_t *)v63[1];
          unsigned int v36 = (uint64_t *)v63[2];
          if (v37 == v36) {
            goto LABEL_38;
          }
        }
        else
        {
          uint64_t v38 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>,mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v61, (uint64_t)&v60, &v60, v63);
          unsigned int v37 = 0;
          *uint64_t v38 = v60;
          v38[1] = 0;
          v38[2] = 0;
          v38[3] = 0;
          unsigned int v36 = (uint64_t *)v38[2];
          if (!v36) {
            goto LABEL_38;
          }
        }
        unsigned int v39 = *v58;
LABEL_45:
        while (1)
        {
          uint64_t v41 = *v37;
          if (v34 >= v39) {
            break;
          }
          unint64_t v40 = v60;
          *(void *)uint64_t v34 = v41;
          *((void *)v34 + 1) = v40;
          v34 += 16;
          *uint64_t v33 = v34;
          if (++v37 == v36) {
            goto LABEL_37;
          }
        }
        uint64_t v42 = (v34 - v32) >> 4;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60) {
          goto LABEL_70;
        }
        if ((v39 - v32) >> 3 > v43) {
          unint64_t v43 = (v39 - v32) >> 3;
        }
        if ((unint64_t)(v39 - v32) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
        }
        if (v43 >> 60) {
          goto LABEL_71;
        }
        uint64_t v44 = 16 * v43;
        unint64_t v45 = (char *)operator new(16 * v43);
        unint64_t v46 = v60;
        unsigned int v47 = &v45[16 * v42];
        *(void *)unsigned int v47 = v41;
        *((void *)v47 + 1) = v46;
        if (v34 == v32)
        {
          int v49 = &v45[16 * v42];
          unsigned int v39 = &v45[v44];
          uint64_t v34 = v47 + 16;
          *a4 = v47;
          a4[1] = v47 + 16;
          a4[2] = v39;
          if (v32) {
            goto LABEL_56;
          }
        }
        else
        {
          uint64_t v48 = &v45[16 * v42];
          do
          {
            int v49 = v48 - 16;
            *((_OWORD *)v48 - 1) = *((_OWORD *)v34 - 1);
            v34 -= 16;
            v48 -= 16;
          }
          while (v34 != v32);
          unsigned int v39 = &v45[v44];
          uint64_t v34 = v47 + 16;
          *a4 = v49;
          a4[1] = v47 + 16;
          a4[2] = v39;
          if (v32) {
LABEL_56:
          }
            operator delete(v32);
        }
        unsigned int v32 = v49;
        *uint64_t v33 = v34;
        if (++v37 == v36)
        {
LABEL_37:
          unsigned int v32 = *a4;
LABEL_38:
          if (++v35 >= (unint64_t)((v34 - v32) >> 4))
          {
            int v50 = v61[0];
            if (v62)
            {
              uint64_t v51 = (void *)((char *)v61[0] + 16);
              uint64_t v52 = 32 * v62;
              do
              {
                if ((*(v51 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
                {
                  uint64_t v53 = (void *)*(v51 - 1);
                  if (v53)
                  {
                    void *v51 = v53;
                    operator delete(v53);
                  }
                }
                v51 += 4;
                v52 -= 32;
              }
              while (v52);
              int v50 = v61[0];
              unint64_t v54 = (void *)(32 * v62);
            }
            else
            {
              unint64_t v54 = 0;
            }
            llvm::deallocate_buffer(v50, v54);
          }
          continue;
        }
        goto LABEL_45;
      }
    }
  }
  unint64_t v16 = (char *)v13[1];
  uint64_t v17 = (v15 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_70;
  }
  uint64_t v19 = v14 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
LABEL_71:
    }
      std::__throw_bad_array_new_length[abi:nn180100]();
    int v21 = (char *)operator new(8 * v20);
    unsigned int v22 = &v21[8 * v17];
    *(void *)unsigned int v22 = v60;
    uint64_t v9 = (uint64_t)(v22 + 8);
    if (v15 == v16) {
      goto LABEL_30;
    }
  }
  else
  {
    int v21 = 0;
    unsigned int v22 = (char *)(8 * v17);
    *(void *)(8 * v17) = v60;
    uint64_t v9 = 8 * v17 + 8;
    if (v15 == v16)
    {
LABEL_30:
      v13[1] = v22;
      v13[2] = v9;
      v13[3] = &v21[8 * v20];
      uint64_t v7 = v57;
      if (v15) {
        operator delete(v15);
      }
      uint64_t v8 = v56;
      goto LABEL_4;
    }
  }
  unint64_t v23 = v15 - 8 - v16;
  if (v23 < 0x58) {
    goto LABEL_74;
  }
  if ((unint64_t)(v16 - v21) < 0x20) {
    goto LABEL_74;
  }
  uint64_t v24 = (v23 >> 3) + 1;
  uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v26 = &v15[-v25];
  v22 -= v25;
  uint64_t v27 = &v21[8 * v17 - 16];
  uint64_t v28 = (long long *)(v15 - 16);
  uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v30 = *v28;
    *((_OWORD *)v27 - 1) = *(v28 - 1);
    *(_OWORD *)uint64_t v27 = v30;
    v27 -= 32;
    v28 -= 2;
    v29 -= 4;
  }
  while (v29);
  unint64_t v15 = v26;
  if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_74:
    do
    {
      uint64_t v31 = *((void *)v15 - 1);
      v15 -= 8;
      *((void *)v22 - 1) = v31;
      v22 -= 8;
    }
    while (v15 != v16);
  }
  unint64_t v15 = (char *)v13[1];
  goto LABEL_30;
}

uint64_t llvm::detail::DenseSetImpl<mlir::Value,llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,llvm::DenseMapInfo<mlir::Value,void>>::DenseSetImpl<mlir::Value const*>(uint64_t a1, void *a2, void *a3)
{
  if (*a3 == *a2
    || (unint64_t v6 = (((uint64_t)(*a3 - *a2) >> 3) - 1) | ((unint64_t)(((uint64_t)(*a3 - *a2) >> 3) - 1) >> 1),
        unint64_t v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4),
        unint64_t v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16),
        LODWORD(v8) = HIDWORD(v8) | v8,
        BOOL v9 = __CFADD__(v8, 1),
        int v10 = v8 + 1,
        v9))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    unint64_t v14 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
    unint64_t v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    LODWORD(v15) = (((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v15;
    buffer = (int64x2_t *)llvm::allocate_buffer(8 * v15, (std::align_val_t)8uLL);
    *(void *)a1 = buffer;
    *(void *)(a1 + 8) = 0;
    uint64_t v17 = *(unsigned int *)(a1 + 16);
    if (v17)
    {
      unint64_t v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      uint64_t v19 = (char *)buffer;
      if (v18 < 3) {
        goto LABEL_16;
      }
      unint64_t v20 = v18 + 1;
      uint64_t v19 = &buffer->i8[8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
      int v21 = buffer + 1;
      int64x2_t v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21[-1] = v22;
        *int v21 = v22;
        v21 += 2;
        v23 -= 4;
      }
      while (v23);
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_16:
        uint64_t v24 = &buffer->i8[8 * v17];
        do
        {
          *(void *)uint64_t v19 = -4096;
          v19 += 8;
        }
        while (v19 != v24);
      }
    }
  }
  unint64_t v11 = (void *)*a2;
  char v12 = (void *)*a3;
  while (v11 != v12)
  {
    uint64_t v25 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, v11, &v25) & 1) == 0)*llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)v11, v11, v25) = *v11; {
    ++v11;
    }
  }
  return a1;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>,mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::grow(a1, v7);
    BOOL v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      int v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      unsigned int v13 = result + 4;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *unsigned int v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        unint64_t v15 = &result[4 * v11];
        do
        {
          *int v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    unint64_t v16 = (void *)(32 * v3);
    if (v3)
    {
      uint64_t v17 = 32 * v3;
      unint64_t v18 = v4;
      do
      {
        if ((*(void *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v18, &v25);
          uint64_t v19 = v25;
          *uint64_t v25 = *(void *)v18;
          v19[1] = 0;
          void v19[2] = 0;
          v19[3] = 0;
          *(_OWORD *)(v19 + 1) = *(_OWORD *)((char *)v18 + 8);
          v19[3] = *((void *)v18 + 3);
          *((void *)v18 + 1) = 0;
          *((void *)v18 + 2) = 0;
          *((void *)v18 + 3) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        unint64_t v18 = (llvm *)((char *)v18 + 32);
        v17 -= 32;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  if (v20)
  {
    if (((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_23;
    }
    uint64_t v21 = ((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    int v10 = &result[4 * (v21 & 0xFFFFFFFFFFFFFFELL)];
    int64x2_t v22 = result + 4;
    uint64_t v23 = v21 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 4) = -4096;
      void *v22 = -4096;
      v22 += 8;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_23:
      uint64_t v24 = &result[4 * v20];
      do
      {
        *int v10 = -4096;
        v10 += 4;
      }
      while (v10 != v24);
    }
  }
  return result;
}

mlir::Block *mlir::collect_regions::detail::verifyShouldAddToQueue(mlir::Block *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    return 0;
  }
  uint64_t result = *(mlir::Block **)(a4 + 16);
  if (result)
  {
    uint64_t result = (mlir::Block *)mlir::Block::getParentOp(result);
    if (result)
    {
      unsigned __int8 v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, a4, a5);
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
      uint64_t v23 = v11;
      if (*(unsigned char *)(a4 + 47))
      {
        uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v23);
        uint64_t InherentAttr = mlir::Operation::getInherentAttr(a4, AttrData, v13);
        if (v15)
        {
LABEL_8:
          if (InherentAttr) {
            unsigned __int8 v10 = 0;
          }
          ParentOp = *(mlir::Block **)(a4 + 16);
          if (ParentOp) {
            ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
          }
          if (ParentOp != a1) {
            unsigned __int8 v10 = 0;
          }
          uint64_t v17 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
          int v18 = v10 & (*(void *)(*(void *)(a4 + 48) + 16) != (void)&mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id) & ~(*(unsigned __int8 (**)(void, uint64_t))(**(void **)(a4 + 48) + 32))(*(void *)(a4 + 48), v17);
          if (a1 == (mlir::Block *)a4) {
            int v19 = 0;
          }
          else {
            int v19 = v18;
          }
          uint64_t v20 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
          int v21 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a4 + 48) + 32))(*(void *)(a4 + 48), v20);
          uint64_t v22 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
          return (mlir::Block *)(v19 & ((v21 | (*(unsigned int (**)(void, uint64_t))(**(void **)(a4 + 48)
                                                                                               + 32))(*(void *)(a4 + 48), v22)) ^ 1));
        }
        uint64_t v11 = v23;
      }
      uint64_t InherentAttr = mlir::DictionaryAttr::get(a4 + 56, v11);
      goto LABEL_8;
    }
  }
  return result;
}

void mlir::collect_regions::detail::buildLiveInsLiveOuts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t *a5, int a6)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t v6 = *((unsigned int *)a4 + 2);
  if (v6)
  {
    uint64_t v9 = a3;
    uint64_t v12 = *a4;
    unint64_t v56 = (void *)(a1 + 16);
    uint64_t v57 = (uint64_t)&(*a4)[v6];
    unint64_t v54 = (void *)(a3 + 16);
    unint64_t v55 = (void *)(a2 + 16);
    while (1)
    {
      uint64_t v13 = *v12;
      uint64_t v14 = *(void *)(*v12 + 24);
      unint64_t v15 = *(unsigned int *)(v9 + 8);
      if (v15 >= *(unsigned int *)(v9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v54, v15 + 1, 8);
        unint64_t v15 = *(unsigned int *)(v9 + 8);
      }
      *(void *)(*(void *)v9 + 8 * v15) = v14;
      ++*(_DWORD *)(v9 + 8);
      if ((*(unsigned char *)(v13 + 46) & 0x80) != 0)
      {
        uint64_t v16 = *(unsigned int *)(v13 + 68);
        if (v16)
        {
          uint64_t v17 = 0;
          uint64_t v18 = *(void *)(v13 + 72);
          do
          {
            uint64_t NextResultAtOffset = *(void *)(v18 + 32 * v17 + 24);
            if ((~*(_DWORD *)(NextResultAtOffset + 8) & 7) == 0)
            {
LABEL_20:
              uint64_t v27 = *(void **)a1;
              uint64_t v28 = *(unsigned int *)(a1 + 8);
              uint64_t v29 = *(void **)a1;
              if (v28)
              {
                uint64_t v30 = 8 * v28;
                uint64_t v29 = *(void **)a1;
                while (*v29 != NextResultAtOffset)
                {
                  ++v29;
                  v30 -= 8;
                  if (!v30)
                  {
                    uint64_t v29 = &v27[v28];
                    break;
                  }
                }
              }
              if (v28 == v29 - v27)
              {
                uint64_t v31 = NextResultAtOffset;
                if (v28 >= *(_DWORD *)(a1 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v56, v28 + 1, 8);
                  uint64_t v28 = *(unsigned int *)(a1 + 8);
                  uint64_t v27 = *(void **)a1;
                }
                v27[v28] = v31;
                ++*(_DWORD *)(a1 + 8);
              }
              goto LABEL_10;
            }
            uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
            uint64_t v20 = *a5;
            uint64_t v21 = *((unsigned int *)a5 + 4);
            if (v21)
            {
              LODWORD(v22) = ((DefiningOp >> 4) ^ (DefiningOp >> 9)) & (v21 - 1);
              uint64_t v23 = (uint64_t *)(v20 + 8 * v22);
              uint64_t v24 = *v23;
              if (*v23 == DefiningOp) {
                goto LABEL_19;
              }
              int v25 = 1;
              while (v24 != -4096)
              {
                int v26 = v22 + v25++;
                uint64_t v22 = v26 & (v21 - 1);
                uint64_t v24 = *(void *)(v20 + 8 * v22);
                if (v24 == DefiningOp)
                {
                  uint64_t v23 = (uint64_t *)(v20 + 8 * v22);
                  goto LABEL_19;
                }
              }
            }
            uint64_t v23 = (uint64_t *)(v20 + 8 * v21);
LABEL_19:
            if (v23 == (uint64_t *)(v20 + 8 * v21)) {
              goto LABEL_20;
            }
LABEL_10:
            ++v17;
          }
          while (v17 != v16);
        }
      }
      uint64_t v32 = *(unsigned int *)(v13 + 36);
      uint64_t v33 = v32 ? v13 - 16 : 0;
      if (v32) {
        break;
      }
LABEL_3:
      ++v12;
      uint64_t v9 = a3;
      if (v12 == (uint64_t *)v57) {
        return;
      }
    }
    uint64_t v34 = 0;
    while (1)
    {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v33, v34);
      uint64_t v35 = *(void **)NextResultAtOffset;
      if (*(void *)NextResultAtOffset)
      {
        uint64_t v36 = *((unsigned int *)a5 + 4);
        if (v36)
        {
          uint64_t v37 = *a5;
          unsigned int v38 = v36 - 1;
          uint64_t v39 = *a5 + 8 * v36;
          do
          {
            uint64_t v40 = v35[2];
            LODWORD(v41) = ((v40 >> 4) ^ (v40 >> 9)) & v38;
            uint64_t v42 = (uint64_t *)(v37 + 8 * v41);
            uint64_t v43 = *v42;
            if (*v42 != v40)
            {
              int v45 = 1;
              while (v43 != -4096)
              {
                int v46 = v41 + v45++;
                uint64_t v41 = v46 & v38;
                uint64_t v43 = *(void *)(v37 + 8 * v41);
                if (v43 == v40)
                {
                  uint64_t v42 = (uint64_t *)(v37 + 8 * v41);
                  goto LABEL_39;
                }
              }
              goto LABEL_50;
            }
LABEL_39:
            BOOL v44 = v42 == (uint64_t *)v39;
            if (v42 == (uint64_t *)v39) {
              break;
            }
            uint64_t v35 = (void *)*v35;
          }
          while (v35);
          if (a6) {
            goto LABEL_51;
          }
LABEL_52:
          if (v44)
          {
            int v49 = *(void **)a2;
            uint64_t v50 = *(unsigned int *)(a2 + 8);
            uint64_t v51 = *(void **)a2;
            if (v50)
            {
              uint64_t v52 = 8 * v50;
              uint64_t v51 = *(void **)a2;
              while (*v51 != NextResultAtOffset)
              {
                ++v51;
                v52 -= 8;
                if (!v52)
                {
                  uint64_t v51 = &v49[v50];
                  break;
                }
              }
            }
            if (v50 == v51 - v49)
            {
              uint64_t v53 = NextResultAtOffset;
              if (v50 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v55, v50 + 1, 8);
                uint64_t v50 = *(unsigned int *)(a2 + 8);
                int v49 = *(void **)a2;
              }
              v49[v50] = v53;
              ++*(_DWORD *)(a2 + 8);
            }
          }
          goto LABEL_34;
        }
LABEL_50:
        BOOL v44 = 1;
        if ((a6 & 1) == 0) {
          goto LABEL_52;
        }
      }
      else
      {
        if (!a6) {
          goto LABEL_34;
        }
        BOOL v44 = 0;
      }
LABEL_51:
      uint64_t v47 = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
      uint64_t v48 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v47 + 48) + 32))(*(void *)(v47 + 48), v48) & 1) == 0) {
        goto LABEL_52;
      }
LABEL_34:
      if (++v34 == v32) {
        goto LABEL_3;
      }
    }
  }
}

void mlir::collectRegions(mlir::GenericProgramPoint *a1, mlir::GenericProgramPoint *a2, void *a3)
{
  v67[9] = *MEMORY[0x1E4F143B8];
  v43[0] = a1;
  v43[1] = a2;
  uint64_t v42 = a3;
  uint64_t v4 = a3[1];
  int v38 = 0;
  uint64_t v40 = 0;
  uint64_t v37 = &unk_1EC9A5238;
  uint64_t v39 = 0;
  int v41 = 0;
  *(void *)(v4 + 8) = &v37;
  *(void *)&long long v22 = mlir::SymbolRefAttr::get(a1, a2);
  v56[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v22);
  mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v56);
  v36[2] = (*(uint64_t (**)(void *))(*a3 + 16))(a3);
  (*(void (**)(void *__return_ptr, void *))(*a3 + 56))(v36, a3);
  unsigned int v62 = &v65;
  int v64 = 6;
  unint64_t v59 = &v61;
  *(void *)unint64_t v60 = 0x600000000;
  char v35 = 1;
  unsigned int v63 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unsigned int v32 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  int v26 = 0;
  uint64_t v33 = v42;
  uint64_t v34 = 0;
  v57[0] = v58;
  v57[1] = (void *)0x600000000;
  v56[0] = (uint64_t)v43;
  v56[1] = (uint64_t)&v42;
  v56[2] = (uint64_t)&v22;
  v56[3] = (uint64_t)v57;
  mlir::detail::walk<mlir::ForwardIterator>(v43[0], (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_2>, (uint64_t)v56, 1);
  if (*((void *)&v24 + 1))
  {
    uint64_t v5 = *((void *)v43[0] + 2);
    mlir::GenericProgramPoint::~GenericProgramPoint(v43[0]);
    *(void *)(v4 + 16) = v5;
    *(void *)(v4 + 24) = v6;
    int v7 = (uint64_t **)(*((void *)&v22 + 1) + 8 * ((unint64_t)v24 >> 9));
    if ((void)v23 == *((void *)&v22 + 1))
    {
      unsigned int v8 = 0;
      unsigned __int8 v10 = 0;
      uint64_t v9 = (uint64_t **)(*((void *)&v22 + 1) + 8 * ((*((void *)&v24 + 1) + (void)v24) >> 9));
    }
    else
    {
      unsigned int v8 = &(*v7)[v24 & 0x1FF];
      uint64_t v9 = (uint64_t **)(*((void *)&v22 + 1) + 8 * ((*((void *)&v24 + 1) + (void)v24) >> 9));
      unsigned __int8 v10 = &(*v9)[(*((void *)&v24 + 1) + v24) & 0x1FF];
    }
    v56[0] = (uint64_t)&v62;
    std::__for_each_segment[abi:nn180100]<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::back_insert_iterator<llvm::SmallVector<mlir::Operation *,6u>>>>(v7, v8, v9, v10, v56);
    (*(void (**)(uint64_t *__return_ptr))(*v42 + 80))(v56);
    v66[0] = v67;
    v67[0] = "placement";
    v67[1] = 9;
    v66[1] = (uint64_t *)0x200000001;
    mlir::ConversionTarget::setDialectAction(v56, (uint64_t)v67, 1, 2);
    if (v66[0] != v67) {
      free(v66[0]);
    }
    uint64_t v53 = &v55;
    uint64_t v54 = 0x600000000;
    uint64_t v50 = &v52;
    uint64_t v51 = 0x600000000;
    v66[0] = (uint64_t *)v62;
    v13[0] = (llvm *)((char *)v62 + 8 * v63);
    llvm::detail::DenseSetImpl<mlir::Operation *,llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,llvm::DenseMapInfo<mlir::Operation *,void>>::DenseSetImpl<mlir::Operation **>((uint64_t)v21, v66, (uint64_t **)v13);
    mlir::collect_regions::detail::buildLiveInsLiveOuts((uint64_t)&v53, (uint64_t)&v50, (uint64_t)&v59, (uint64_t **)&v62, (uint64_t *)v21, 0);
    v48[0] = &v49;
    v48[1] = (void *)0x600000000;
    v46[0] = &v47;
    v46[1] = (void *)0x600000000;
    uint64_t v11 = v42;
    mlir::ValueRange::ValueRange(v45, (uint64_t)v50, v51);
    (*(void (**)(void *, unint64_t, unint64_t, void **))(*v11 + 192))(v11, v45[0], v45[1], v48);
    uint64_t v12 = v42;
    mlir::ValueRange::ValueRange(v44, (uint64_t)v53, v54);
    (*(void (**)(void *, unint64_t, unint64_t, void **))(*v12 + 192))(v12, v44[0], v44[1], v46);
    v13[1] = 0;
    v13[0] = 0;
    int v14 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = 0;
    mlir::FusedLoc::get((uint64_t **)v59, (mlir::MLIRContext *)v60[0], 0, *(mlir::UnknownLoc **)v4);
  }
  if (v57[0] != v58) {
    free(v57[0]);
  }
  llvm::deallocate_buffer(v30, (void *)(8 * v32));
}

uint64_t sub_1806A7AE4()
{
  return 1;
}

void mlir::anonymous namespace'::eraseOpsWeCannotConvert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  v247[0] = 0;
  v247[1] = 0;
  unsigned int v248 = 0;
  v245[0] = 0;
  v245[1] = 0;
  unsigned int v246 = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 8);
  if (v11)
  {
    uint64_t v13 = *(uint64_t **)a1;
    uint64_t v237 = *(void *)a1 + 8 * v11;
    while (1)
    {
      uint64_t v14 = *v13;
      uint64_t v244 = *v13;
      uint64_t v15 = *(void *)a7;
      uint64_t v16 = *(unsigned int *)(a7 + 16);
      if (v16)
      {
        LODWORD(v17) = (v16 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        uint64_t v18 = (uint64_t *)(v15 + 8 * v17);
        uint64_t v19 = *v18;
        if (*v18 != v14)
        {
          int v20 = 1;
          do
          {
            if (v19 == -4096) {
              goto LABEL_10;
            }
            int v21 = v17 + v20++;
            uint64_t v17 = v21 & (v16 - 1);
            uint64_t v19 = *(void *)(v15 + 8 * v17);
          }
          while (v19 != v14);
          uint64_t v18 = (uint64_t *)(v15 + 8 * v17);
        }
      }
      else
      {
LABEL_10:
        uint64_t v18 = (uint64_t *)(v15 + 8 * v16);
      }
      if (v18 == (uint64_t *)(v15 + 8 * v16)) {
        goto LABEL_14;
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v14, a7) & 1) == 0) {
        break;
      }
      if (++v13 == (uint64_t *)v237) {
        goto LABEL_167;
      }
    }
    uint64_t v14 = v244;
LABEL_14:
    uint64_t v22 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v14 + 48) + 32))(*(void *)(v14 + 48), v22) & 1) == 0)
    {
      int v23 = *(_DWORD *)(a7 + 16);
      if (v23)
      {
        uint64_t v24 = *(void *)a7;
        unsigned int v25 = v23 - 1;
        LODWORD(v26) = ((v244 >> 4) ^ (v244 >> 9)) & (v23 - 1);
        uint64_t v27 = (uint64_t *)(*(void *)a7 + 8 * v26);
        uint64_t v28 = *v27;
        if (v244 != *v27)
        {
          int v136 = 1;
          do
          {
            if (v28 == -4096) {
              goto LABEL_18;
            }
            int v137 = v26 + v136++;
            uint64_t v26 = v137 & v25;
            uint64_t v28 = *(void *)(v24 + 8 * v26);
          }
          while (v244 != v28);
          uint64_t v27 = (uint64_t *)(v24 + 8 * v26);
        }
        *uint64_t v27 = -8192;
        *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
LABEL_18:
    if ((*(unsigned char *)(v244 + 46) & 0x80) != 0)
    {
      uint64_t v29 = *(unsigned int *)(v244 + 68);
      if (v29)
      {
        uint64_t v30 = 0;
        uint64_t v31 = *(void *)(v244 + 72);
        do
        {
          uint64_t v37 = *(void **)(v31 + 32 * v30 + 24);
          __p[0] = v37;
          int v38 = (void *)*v37;
          if (*v37)
          {
            while (v244 == v38[2])
            {
              int v38 = (void *)*v38;
              if (!v38) {
                goto LABEL_29;
              }
            }
          }
          else
          {
LABEL_29:
            *(void *)&long long v249 = v37;
            uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v249);
            if (DefiningOp)
            {
              uint64_t v40 = DefiningOp;
              uint64_t v41 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v40 + 48) + 32))(*(void *)(v40 + 48), v41))
              {
                uint64_t v42 = mlir::Value::getDefiningOp((mlir::Value *)__p);
                uint64_t v43 = v42;
                uint64_t v44 = *(void *)a7;
                uint64_t v34 = *(unsigned int *)(a7 + 16);
                unsigned int v45 = v42 >> 4;
                if (v34)
                {
                  LODWORD(v46) = (v45 ^ (v42 >> 9)) & (v34 - 1);
                  uint64_t v47 = (uint64_t *)(v44 + 8 * v46);
                  uint64_t v48 = *v47;
                  if (*v47 != v42)
                  {
                    int v49 = 1;
                    do
                    {
                      if (v48 == -4096) {
                        goto LABEL_37;
                      }
                      int v50 = v46 + v49++;
                      uint64_t v46 = v50 & (v34 - 1);
                      uint64_t v48 = *(void *)(v44 + 8 * v46);
                    }
                    while (v48 != v42);
                    uint64_t v47 = (uint64_t *)(v44 + 8 * v46);
                  }
                }
                else
                {
LABEL_37:
                  uint64_t v47 = (uint64_t *)(v44 + 8 * v34);
                }
                if (v47 != (uint64_t *)(v44 + 8 * v34))
                {
                  mlir::Operation::removeAttr(v42, *a6);
                  uint64_t v44 = *(void *)a7;
                  LODWORD(v34) = *(_DWORD *)(a7 + 16);
                }
                if (v34)
                {
                  unsigned int v51 = v34 - 1;
                  LODWORD(v34) = (v34 - 1) & (v45 ^ (v43 >> 9));
                  uint64_t v36 = (uint64_t *)(v44 + 8 * v34);
                  uint64_t v35 = *v36;
                  if (v43 != *v36)
                  {
                    int v33 = 1;
                    do
                    {
                      if (v35 == -4096) {
                        goto LABEL_25;
                      }
                      int v32 = v34 + v33++;
                      uint64_t v34 = v32 & v51;
                      uint64_t v35 = *(void *)(v44 + 8 * v34);
                    }
                    while (v43 != v35);
                    uint64_t v36 = (uint64_t *)(v44 + 8 * v34);
                  }
                  uint64_t *v36 = -8192;
                  *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
                }
              }
            }
          }
LABEL_25:
          ++v30;
        }
        while (v30 != v29);
      }
    }
    long long v242 = 0u;
    unsigned long long v243 = 0u;
    *(_OWORD *)__p = 0u;
    v239[0] = 0;
    v239[1] = 0;
    unsigned int v240 = 0;
    std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
    uint64_t v53 = *((void *)&v243 + 1);
    unint64_t v52 = v243;
    *(void *)(*(void *)((char *)__p[1] + ((((void)v243 + *((void *)&v243 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((v243 + *((void *)&v243 + 1)) & 0x1FF)) = v244;
    *((void *)&v243 + 1) = v53 + 1;
    if (v53 == -1) {
      goto LABEL_111;
    }
    uint64_t v54 = (char *)__p[1];
LABEL_48:
    uint64_t v56 = *(void *)(*(void *)&v54[(v52 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v52 & 0x1FF));
    if ((*(unsigned char *)(v56 + 46) & 0x80) == 0 || (uint64_t v57 = *(unsigned int *)(v56 + 68), !v57))
    {
LABEL_99:
      char v96 = 0;
      goto LABEL_100;
    }
    uint64_t v58 = 0;
    uint64_t v59 = *(void *)(v56 + 72);
    while (1)
    {
      *(void *)&long long v249 = *(void *)(v59 + 32 * v58 + 24);
      *(void *)&v254[0] = 0;
      uint64_t v64 = mlir::Value::getDefiningOp((mlir::Value *)&v249);
      *(void *)&v254[0] = v64;
      if (v64)
      {
        uint64_t v65 = v64;
        uint64_t v66 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
        if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v65 + 48) + 32))(*(void *)(v65 + 48), v66) & 1) == 0)
        {
          uint64_t v67 = *(void *)&v254[0];
          uint64_t v68 = *(void *)a7;
          uint64_t v69 = *(unsigned int *)(a7 + 16);
          int v70 = LODWORD(v254[0]) >> 4;
          if (v69)
          {
            LODWORD(v71) = (v70 ^ (LODWORD(v254[0]) >> 9)) & (v69 - 1);
            unsigned int v72 = (uint64_t *)(v68 + 8 * v71);
            uint64_t v73 = *v72;
            if (*v72 != *(void *)&v254[0])
            {
              int v74 = 1;
              do
              {
                if (v73 == -4096) {
                  goto LABEL_61;
                }
                int v75 = v71 + v74++;
                uint64_t v71 = v75 & (v69 - 1);
                uint64_t v73 = *(void *)(v68 + 8 * v71);
              }
              while (v73 != *(void *)&v254[0]);
              unsigned int v72 = (uint64_t *)(v68 + 8 * v71);
            }
          }
          else
          {
LABEL_61:
            unsigned int v72 = (uint64_t *)(v68 + 8 * v69);
          }
          if (v72 != (uint64_t *)(v68 + 8 * v69))
          {
            char v96 = 1;
LABEL_100:
            uint64_t v54 = (char *)__p[1];
            uint64_t v97 = *((void *)&v243 + 1) - 1;
            unint64_t v52 = v243 + 1;
            unsigned long long v243 = __PAIR128__(*((unint64_t *)&v243 + 1), (uint64_t)v243 + 1) + __PAIR128__(-1, 0);
            if (v52 >= 0x400)
            {
              operator delete(*(void **)__p[1]);
              uint64_t v54 = (char *)__p[1] + 8;
              unint64_t v52 = v243 - 512;
              __p[1] = (char *)__p[1] + 8;
              *(void *)&unsigned long long v243 = v243 - 512;
              uint64_t v97 = *((void *)&v243 + 1);
            }
            BOOL v94 = v97 == 0;
            char v55 = v96 ^ 1;
            if (v94) {
              char v55 = 0;
            }
            if (v55) {
              goto LABEL_48;
            }
            if (v96)
            {
              uint64_t v98 = v244;
              uint64_t v99 = *(unsigned int *)(v244 + 36);
              uint64_t v100 = v244 - 16;
              if (v99) {
                uint64_t v101 = v244 - 16;
              }
              else {
                uint64_t v101 = 0;
              }
              uint64_t v256 = v101;
              uint64_t v257 = v99;
              mlir::ResultRange::use_begin(&v256, (uint64_t *)v254);
              uint64_t v102 = *(unsigned int *)(v98 + 36);
              if (v102) {
                uint64_t v103 = v100;
              }
              else {
                uint64_t v103 = 0;
              }
              uint64_t v256 = v103;
              uint64_t v257 = v102;
              mlir::ResultRange::use_end(&v256, v252);
              uint64_t v104 = v255;
              uint64_t v251 = v255;
              long long v249 = v254[0];
              long long v250 = v254[1];
              uint64_t v105 = v253;
              while (2)
              {
                if (v104 == v105) {
                  goto LABEL_159;
                }
                uint64_t v256 = *(void *)(v104 + 16);
                uint64_t v119 = v256;
                uint64_t v120 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
                if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v119 + 48) + 32))(*(void *)(v119 + 48), v120) & 1) == 0)
                {
                  uint64_t v121 = *(void *)a7;
                  uint64_t v116 = *(unsigned int *)(a7 + 16);
                  if (v116)
                  {
                    LODWORD(v122) = ((v256 >> 4) ^ (v256 >> 9)) & (v116 - 1);
                    unsigned int v123 = (uint64_t *)(v121 + 8 * v122);
                    uint64_t v124 = *v123;
                    if (*v123 != v256)
                    {
                      int v125 = 1;
                      do
                      {
                        if (v124 == -4096) {
                          goto LABEL_137;
                        }
                        int v126 = v122 + v125++;
                        uint64_t v122 = v126 & (v116 - 1);
                        uint64_t v124 = *(void *)(v121 + 8 * v122);
                      }
                      while (v124 != v256);
                      unsigned int v123 = (uint64_t *)(v121 + 8 * v122);
                    }
                  }
                  else
                  {
LABEL_137:
                    unsigned int v123 = (uint64_t *)(v121 + 8 * v116);
                  }
                  if (v123 != (uint64_t *)(v121 + 8 * v116))
                  {
                    mlir::Operation::removeAttr(v256, *a6);
                    if (!v246)
                    {
                      unsigned int v134 = 0;
                      goto LABEL_151;
                    }
                    unsigned int v127 = ((v256 >> 4) ^ (v256 >> 9)) & (v246 - 1);
                    uint64_t v128 = (uint64_t *)((char *)v245[0] + 8 * v127);
                    uint64_t v129 = *v128;
                    if (v256 != *v128)
                    {
                      uint64_t v130 = 0;
                      int v131 = 1;
                      while (v129 != -4096)
                      {
                        if (v130) {
                          BOOL v132 = 0;
                        }
                        else {
                          BOOL v132 = v129 == -8192;
                        }
                        if (v132) {
                          uint64_t v130 = v128;
                        }
                        unsigned int v133 = v127 + v131++;
                        unsigned int v127 = v133 & (v246 - 1);
                        uint64_t v128 = (uint64_t *)((char *)v245[0] + 8 * v127);
                        uint64_t v129 = *v128;
                        if (v256 == *v128) {
                          goto LABEL_152;
                        }
                      }
                      if (v130) {
                        unsigned int v134 = v130;
                      }
                      else {
                        unsigned int v134 = v128;
                      }
LABEL_151:
                      llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v245, v134, &v256);
                    }
LABEL_152:
                    uint64_t v121 = *(void *)a7;
                    LODWORD(v116) = *(_DWORD *)(a7 + 16);
                  }
                  if (v116)
                  {
                    unsigned int v135 = v116 - 1;
                    LODWORD(v116) = ((v256 >> 4) ^ (v256 >> 9)) & (v116 - 1);
                    uint64_t v118 = (uint64_t *)(v121 + 8 * v116);
                    uint64_t v117 = *v118;
                    if (v256 != *v118)
                    {
                      int v115 = 1;
                      do
                      {
                        if (v117 == -4096) {
                          goto LABEL_128;
                        }
                        int v114 = v116 + v115++;
                        uint64_t v116 = v114 & v135;
                        uint64_t v117 = *(void *)(v121 + 8 * v116);
                      }
                      while (v256 != v117);
                      uint64_t v118 = (uint64_t *)(v121 + 8 * v116);
                    }
                    uint64_t *v118 = -8192;
                    *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
                  }
                }
LABEL_128:
                mlir::ResultRange::UseIterator::operator++((uint64_t *)v254);
                uint64_t v104 = v255;
                continue;
              }
            }
LABEL_111:
            if (v248)
            {
              unsigned int v106 = ((v244 >> 4) ^ (v244 >> 9)) & (v248 - 1);
              unint64_t v107 = (uint64_t *)(v247[0] + 8 * v106);
              uint64_t v108 = *v107;
              if (v244 != *v107)
              {
                int v109 = 0;
                int v110 = 1;
                while (v108 != -4096)
                {
                  if (v109) {
                    BOOL v111 = 0;
                  }
                  else {
                    BOOL v111 = v108 == -8192;
                  }
                  if (v111) {
                    int v109 = v107;
                  }
                  unsigned int v112 = v106 + v110++;
                  unsigned int v106 = v112 & (v248 - 1);
                  unint64_t v107 = (uint64_t *)(v247[0] + 8 * v106);
                  uint64_t v108 = *v107;
                  if (v244 == *v107) {
                    goto LABEL_159;
                  }
                }
                if (v109) {
                  unint64_t v113 = v109;
                }
                else {
                  unint64_t v113 = v107;
                }
LABEL_123:
                llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v247, v113, &v244);
              }
LABEL_159:
              llvm::deallocate_buffer(v239[0], (void *)(8 * v240));
            }
            unint64_t v113 = 0;
            goto LABEL_123;
          }
          if (v248)
          {
            LODWORD(v76) = (v248 - 1) & (v70 ^ (LODWORD(v254[0]) >> 9));
            unint64_t v77 = (uint64_t *)(v247[0] + 8 * v76);
            uint64_t v78 = *v77;
            if (*v77 != *(void *)&v254[0])
            {
              int v79 = 1;
              do
              {
                if (v78 == -4096) {
                  goto LABEL_69;
                }
                int v80 = v76 + v79++;
                uint64_t v76 = v80 & (v248 - 1);
                uint64_t v78 = *(void *)(v247[0] + 8 * v76);
              }
              while (v78 != *(void *)&v254[0]);
              unint64_t v77 = (uint64_t *)(v247[0] + 8 * v76);
            }
          }
          else
          {
LABEL_69:
            unint64_t v77 = (uint64_t *)(v247[0] + 8 * v248);
          }
          if (v77 == (uint64_t *)(v247[0] + 8 * v248))
          {
            unsigned int v81 = v240;
            if (v240)
            {
              LODWORD(v82) = (v240 - 1) & (v70 ^ (LODWORD(v254[0]) >> 9));
              unsigned int v83 = (llvm *)((char *)v239[0] + 8 * v82);
              uint64_t v84 = *(void *)v83;
              if (*(void *)v83 != *(void *)&v254[0])
              {
                int v85 = 1;
                do
                {
                  if (v84 == -4096) {
                    goto LABEL_77;
                  }
                  int v86 = v82 + v85++;
                  uint64_t v82 = v86 & (v240 - 1);
                  uint64_t v84 = *((void *)v239[0] + v82);
                }
                while (v84 != *(void *)&v254[0]);
                unsigned int v83 = (llvm *)((char *)v239[0] + 8 * v82);
              }
            }
            else
            {
LABEL_77:
              unsigned int v83 = (llvm *)((char *)v239[0] + 8 * v240);
            }
            if (v83 == (llvm *)((char *)v239[0] + 8 * v240))
            {
              int v87 = (char *)__p[1];
              if ((void *)v242 == __p[1]) {
                unint64_t v88 = 0;
              }
              else {
                unint64_t v88 = (((void)v242 - (unint64_t)__p[1]) << 6) - 1;
              }
              uint64_t v89 = *((void *)&v243 + 1);
              unint64_t v90 = *((void *)&v243 + 1) + v243;
              if (v88 == *((void *)&v243 + 1) + (void)v243)
              {
                std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
                uint64_t v89 = *((void *)&v243 + 1);
                int v87 = (char *)__p[1];
                unint64_t v90 = v243 + *((void *)&v243 + 1);
                uint64_t v67 = *(void *)&v254[0];
                unsigned int v81 = v240;
              }
              *(void *)(*(void *)&v87[(v90 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v90 & 0x1FF)) = v67;
              *((void *)&v243 + 1) = v89 + 1;
              if (!v81)
              {
                int v91 = 0;
LABEL_86:
                llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v239, v91, (uint64_t *)v254);
                goto LABEL_52;
              }
              unsigned int v60 = v81 - 1;
              unsigned int v61 = ((LODWORD(v254[0]) >> 4) ^ (LODWORD(v254[0]) >> 9)) & v60;
              unsigned int v62 = (uint64_t *)((char *)v239[0] + 8 * v61);
              uint64_t v63 = *v62;
              if (*(void *)&v254[0] != *v62)
              {
                int v92 = 0;
                int v93 = 1;
                while (v63 != -4096)
                {
                  if (v92) {
                    BOOL v94 = 0;
                  }
                  else {
                    BOOL v94 = v63 == -8192;
                  }
                  if (v94) {
                    int v92 = v62;
                  }
                  unsigned int v95 = v61 + v93++;
                  unsigned int v61 = v95 & v60;
                  unsigned int v62 = (uint64_t *)((char *)v239[0] + 8 * v61);
                  uint64_t v63 = *v62;
                  if (*(void *)&v254[0] == *v62) {
                    goto LABEL_52;
                  }
                }
                if (v92) {
                  int v91 = v92;
                }
                else {
                  int v91 = v62;
                }
                goto LABEL_86;
              }
            }
          }
        }
      }
LABEL_52:
      if (++v58 == v57) {
        goto LABEL_99;
      }
    }
  }
LABEL_167:
  unsigned int v138 = (uint64_t **)a1;
  mlir::collect_regions::detail::buildLiveInsLiveOuts(a3, a4, a5, (uint64_t **)a1, (uint64_t *)a7, 0);
  uint64_t v139 = *(unsigned int *)(a1 + 8);
  if (!v139) {
    goto LABEL_274;
  }
  char v232 = 0;
  int v140 = a9;
  unint64_t v141 = *(uint64_t **)a1;
  uint64_t v142 = *(void *)a1 + 8 * v139;
  uint64_t v233 = v142;
  while (1)
  {
    uint64_t v143 = *v141;
    uint64_t v144 = *(void *)a7;
    uint64_t v145 = *(unsigned int *)(a7 + 16);
    if (v145)
    {
      LODWORD(v146) = ((v143 >> 4) ^ (v143 >> 9)) & (v145 - 1);
      int v147 = (uint64_t *)(v144 + 8 * v146);
      uint64_t v148 = *v147;
      if (*v147 != v143)
      {
        int v149 = 1;
        do
        {
          if (v148 == -4096) {
            goto LABEL_177;
          }
          int v150 = v146 + v149++;
          uint64_t v146 = v150 & (v145 - 1);
          uint64_t v148 = *(void *)(v144 + 8 * v146);
        }
        while (v148 != v143);
        int v147 = (uint64_t *)(v144 + 8 * v146);
      }
    }
    else
    {
LABEL_177:
      int v147 = (uint64_t *)(v144 + 8 * v145);
    }
    if (v147 == (uint64_t *)(v144 + 8 * v145) || v140 == 0) {
      goto LABEL_170;
    }
    uint64_t v152 = mlir::TypeID::get<mlir::OpTrait::TypeChanger<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::TypeChanger>(void)::Empty>>();
    if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v143 + 48) + 32))(*(void *)(v143 + 48), v152))goto LABEL_170; {
    if ((*(unsigned char *)(v143 + 46) & 0x80) != 0 && (uint64_t v153 = *(unsigned int *)(v143 + 68), v153))
    }
    {
      uint64_t v154 = 0;
      uint64_t v155 = *(void *)(v143 + 72);
      while (1)
      {
        uint64_t v157 = *(void *)(v155 + 32 * v154 + 24);
        *(void *)&long long v249 = v157;
        uint64_t v158 = mlir::Value::getDefiningOp((mlir::Value *)&v249);
        if (!v158
          || (uint64_t v159 = v158,
              uint64_t v160 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
              ((*(uint64_t (**)(void, uint64_t))(**(void **)(v159 + 48) + 32))(*(void *)(v159 + 48), v160) & 1) == 0))
        {
          char v161 = *(void **)a3;
          uint64_t v162 = *(unsigned int *)(a3 + 8);
          if (v162)
          {
            uint64_t v163 = 8 * v162;
            unint64_t v156 = *(void **)a3;
            do
            {
              if (*v156 == v157) {
                goto LABEL_187;
              }
              ++v156;
              v163 -= 8;
            }
            while (v163);
            unint64_t v156 = &v161[v162];
          }
          else
          {
            unint64_t v156 = *(void **)a3;
          }
LABEL_187:
          if (v162 == v156 - v161) {
            break;
          }
        }
        if (++v154 == v153) {
          goto LABEL_196;
        }
      }
      int v236 = 0;
    }
    else
    {
LABEL_196:
      int v236 = 1;
    }
    uint64_t v164 = *(unsigned int *)(v143 + 36);
    uint64_t v165 = v164 ? v143 - 16 : 0;
    if (!v164) {
      break;
    }
    uint64_t v166 = 0;
    do
    {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v165, v166);
      unsigned int v172 = *(void **)a4;
      uint64_t v173 = *(unsigned int *)(a4 + 8);
      if (v173)
      {
        uint64_t v174 = 8 * v173;
        unint64_t v167 = *(void **)a4;
        do
        {
          if (*v167 == NextResultAtOffset) {
            goto LABEL_204;
          }
          ++v167;
          v174 -= 8;
        }
        while (v174);
        unint64_t v167 = &v172[v173];
      }
      else
      {
        unint64_t v167 = *(void **)a4;
      }
LABEL_204:
      uint64_t v168 = v167 - v172;
      BOOL v169 = v168 == v173;
      ++v166;
    }
    while (v168 != v173 && v166 != v164);
    uint64_t v175 = *(unsigned int *)(v143 + 36);
    if (!v175) {
      goto LABEL_216;
    }
    uint64_t v176 = v143 - 16;
    int v140 = a9;
    uint64_t v142 = v233;
LABEL_217:
    *(void *)&v254[0] = v176;
    *((void *)&v254[0] + 1) = v175;
    mlir::ResultRange::use_begin((uint64_t *)v254, (uint64_t *)__p);
    uint64_t v177 = *(unsigned int *)(v143 + 36);
    if (v177) {
      uint64_t v178 = v143 - 16;
    }
    else {
      uint64_t v178 = 0;
    }
    *(void *)&v254[0] = v178;
    *((void *)&v254[0] + 1) = v177;
    mlir::ResultRange::use_end((uint64_t *)v254, v252);
    uint64_t v179 = v243;
    uint64_t v251 = v243;
    long long v249 = *(_OWORD *)__p;
    long long v250 = v242;
    uint64_t v180 = v253;
    if ((void)v243 == v253)
    {
      BOOL v190 = 0;
    }
    else
    {
      do
      {
        uint64_t v181 = *(void *)a7;
        uint64_t v182 = *(unsigned int *)(a7 + 16);
        if (v182)
        {
          uint64_t v183 = *(void *)(v179 + 16);
          LODWORD(v184) = ((v183 >> 4) ^ (v183 >> 9)) & (v182 - 1);
          unsigned int v185 = (uint64_t *)(v181 + 8 * v184);
          uint64_t v186 = *v185;
          if (*v185 != v183)
          {
            int v187 = 1;
            do
            {
              if (v186 == -4096) {
                goto LABEL_227;
              }
              int v188 = v184 + v187++;
              uint64_t v184 = v188 & (v182 - 1);
              uint64_t v186 = *(void *)(v181 + 8 * v184);
            }
            while (v186 != v183);
            unsigned int v185 = (uint64_t *)(v181 + 8 * v184);
          }
        }
        else
        {
LABEL_227:
          unsigned int v185 = (uint64_t *)(v181 + 8 * v182);
        }
        unsigned int v189 = (uint64_t *)(v181 + 8 * v182);
        BOOL v190 = v185 != v189;
        if (v185 != v189) {
          break;
        }
        mlir::ResultRange::UseIterator::operator++((uint64_t *)__p);
        uint64_t v179 = v243;
      }
      while ((void)v243 != v180);
    }
    unsigned int v138 = (uint64_t **)a1;
    if ((v236 | (!v169 && !v190)) == 1)
    {
      if ((*(unsigned char *)(v143 + 46) & 0x80) != 0)
      {
        uint64_t v191 = *(unsigned int *)(v143 + 68);
        if (v191)
        {
          uint64_t v192 = 0;
          uint64_t v193 = *(void *)(v143 + 72);
          do
          {
            v239[0] = *(llvm **)(v193 + 32 * v192 + 24);
            *(llvm **)&long long v249 = v239[0];
            uint64_t v199 = mlir::Value::getDefiningOp((mlir::Value *)&v249);
            if (v199)
            {
              uint64_t v200 = v199;
              uint64_t v201 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v200 + 48) + 32))(*(void *)(v200 + 48), v201))
              {
                uint64_t v202 = mlir::Value::getDefiningOp((mlir::Value *)v239);
                uint64_t v203 = v202;
                uint64_t v204 = *(unsigned int *)(v202 + 36);
                uint64_t v205 = v202 - 16;
                if (v204) {
                  uint64_t v206 = v202 - 16;
                }
                else {
                  uint64_t v206 = 0;
                }
                *(void *)&v254[0] = v206;
                *((void *)&v254[0] + 1) = v204;
                mlir::ResultRange::use_begin((uint64_t *)v254, (uint64_t *)__p);
                uint64_t v207 = *(unsigned int *)(v203 + 36);
                if (v207) {
                  uint64_t v208 = v205;
                }
                else {
                  uint64_t v208 = 0;
                }
                *(void *)&v254[0] = v208;
                *((void *)&v254[0] + 1) = v207;
                mlir::ResultRange::use_end((uint64_t *)v254, v252);
                uint64_t v209 = v243;
                uint64_t v251 = v243;
                long long v249 = *(_OWORD *)__p;
                long long v250 = v242;
                uint64_t v210 = v253;
                while (v209 != v210)
                {
                  uint64_t v212 = *(void *)(v209 + 16);
                  if (v143 != v212)
                  {
                    uint64_t v213 = *(void *)a7;
                    uint64_t v214 = *(unsigned int *)(a7 + 16);
                    if (v214)
                    {
                      LODWORD(v215) = (v214 - 1) & ((v212 >> 4) ^ (v212 >> 9));
                      int v211 = (uint64_t *)(v213 + 8 * v215);
                      uint64_t v216 = *v211;
                      if (*v211 != v212)
                      {
                        int v217 = 1;
                        do
                        {
                          if (v216 == -4096) {
                            goto LABEL_250;
                          }
                          int v218 = v215 + v217++;
                          uint64_t v215 = v218 & (v214 - 1);
                          uint64_t v216 = *(void *)(v213 + 8 * v215);
                        }
                        while (v216 != v212);
                        int v211 = (uint64_t *)(v213 + 8 * v215);
                      }
                    }
                    else
                    {
LABEL_250:
                      int v211 = (uint64_t *)(v213 + 8 * v214);
                    }
                    if (v211 != (uint64_t *)(v213 + 8 * v214)) {
                      goto LABEL_240;
                    }
                  }
                  mlir::ResultRange::UseIterator::operator++((uint64_t *)__p);
                  uint64_t v209 = v243;
                }
                int v219 = *(_DWORD *)(a7 + 16);
                if (v219)
                {
                  uint64_t v220 = *(void *)a7;
                  unsigned int v221 = v219 - 1;
                  LODWORD(v196) = (v219 - 1) & ((v203 >> 4) ^ (v203 >> 9));
                  unint64_t v198 = (uint64_t *)(*(void *)a7 + 8 * v196);
                  uint64_t v197 = *v198;
                  if (v203 != *v198)
                  {
                    int v195 = 1;
                    do
                    {
                      if (v197 == -4096) {
                        goto LABEL_240;
                      }
                      int v194 = v196 + v195++;
                      uint64_t v196 = v194 & v221;
                      uint64_t v197 = *(void *)(v220 + 8 * v196);
                    }
                    while (v203 != v197);
                    unint64_t v198 = (uint64_t *)(v220 + 8 * v196);
                  }
                  *unint64_t v198 = -8192;
                  *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
                }
              }
            }
LABEL_240:
            ++v192;
          }
          while (v192 != v191);
        }
      }
      int v222 = *(_DWORD *)(a7 + 16);
      if (v222)
      {
        uint64_t v223 = *(void *)a7;
        unsigned int v224 = v222 - 1;
        LODWORD(v225) = (v222 - 1) & ((v143 >> 4) ^ (v143 >> 9));
        unint64_t v226 = (uint64_t *)(*(void *)a7 + 8 * v225);
        uint64_t v227 = *v226;
        unsigned int v138 = (uint64_t **)a1;
        int v140 = a9;
        uint64_t v142 = v233;
        if (v143 != *v226)
        {
          int v228 = 1;
          do
          {
            if (v227 == -4096) {
              goto LABEL_267;
            }
            int v229 = v225 + v228++;
            uint64_t v225 = v229 & v224;
            uint64_t v227 = *(void *)(v223 + 8 * v225);
          }
          while (v143 != v227);
          unint64_t v226 = (uint64_t *)(v223 + 8 * v225);
        }
        *unint64_t v226 = -8192;
        *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
LABEL_267:
        char v232 = 1;
      }
      else
      {
        char v232 = 1;
        unsigned int v138 = (uint64_t **)a1;
        int v140 = a9;
        uint64_t v142 = v233;
      }
    }
LABEL_170:
    if (++v141 == (uint64_t *)v142)
    {
      if (v232)
      {
        mlir::collect_regions::detail::buildLiveInsLiveOuts(a3, a4, a5, v138, (uint64_t *)a7, 0);
      }
LABEL_274:
      llvm::deallocate_buffer(v245[0], (void *)(8 * v246));
    }
  }
  BOOL v169 = 0;
LABEL_216:
  int v140 = a9;
  uint64_t v142 = v233;
  uint64_t v175 = 0;
  uint64_t v176 = 0;
  goto LABEL_217;
}

void sub_1806A8BF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,llvm *a32,uint64_t a33,unsigned int a34)
{
}

uint64_t sub_1806A8C08()
{
  return v0 & 1;
}

uint64_t mlir::anonymous namespace'::preserveOutputsAndEraseUnusedOps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int32x2_t *a8, uint64_t a9, unsigned __int8 a10)
{
  v104[4] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a5 + 8))
  {
    uint64_t v15 = *(unsigned int *)(a5 + 16);
    if (v15 <= 4 * *(_DWORD *)(a5 + 8) || v15 < 0x41)
    {
      if (v15)
      {
        uint64_t v16 = *(int64x2_t **)a5;
        unint64_t v17 = (v15 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        uint64_t v18 = *(int64x2_t **)a5;
        if (v17 < 3) {
          goto LABEL_10;
        }
        unint64_t v19 = v17 + 1;
        uint64_t v18 = (int64x2_t *)((char *)v16 + 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL));
        int v20 = v16 + 1;
        int64x2_t v21 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v20[-1] = v21;
          *int v20 = v21;
          v20 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_10:
          int v23 = (int64x2_t *)((char *)v16 + 8 * v15);
          do
          {
            v18->i64[0] = -4096;
            uint64_t v18 = (int64x2_t *)((char *)v18 + 8);
          }
          while (v18 != v23);
        }
      }
      *(void *)(a5 + 8) = 0;
    }
    else
    {
      llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::shrink_and_clear(a5);
    }
  }
  *(void *)&long long v98 = &v99;
  *((void *)&v98 + 1) = 0x600000000;
  uint64_t v24 = *(unsigned int *)(a4 + 8);
  if (!v24)
  {
    *(void *)&long long v103 = v104;
    *((void *)&v103 + 1) = 0x400000000;
    unsigned int v43 = *(_DWORD *)(a4 + 8);
    if (v43)
    {
      unsigned int v41 = 0;
      goto LABEL_56;
    }
    goto LABEL_122;
  }
  int v91 = a7;
  unsigned int v25 = &v99;
  uint64_t v26 = *(void **)a4;
  uint64_t v27 = *(void *)a4 + 8 * v24;
  do
  {
    *(void *)&long long v103 = *v26;
    *(void *)&v96[0] = 0;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v103);
    *(void *)&v96[0] = DefiningOp;
    if (DefiningOp)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, int32x2_t *))(*(void *)a2 + 144))(a2, DefiningOp, a8))
      {
        uint64_t v34 = v103;
        uint64_t v35 = DWORD2(v98);
        if (DWORD2(v98) >= (unint64_t)HIDWORD(v98))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, &v99, DWORD2(v98) + 1, 8);
          uint64_t v35 = DWORD2(v98);
        }
        *(void *)(v98 + 8 * v35) = v34;
        ++DWORD2(v98);
      }
      else
      {
        int v28 = *(_DWORD *)(a5 + 16);
        if (v28)
        {
          int v29 = v28 - 1;
          unsigned int v30 = ((LODWORD(v96[0]) >> 4) ^ (LODWORD(v96[0]) >> 9)) & v29;
          uint64_t v31 = (uint64_t *)(*(void *)a5 + 8 * v30);
          uint64_t v32 = *v31;
          if (*(void *)&v96[0] == *v31) {
            goto LABEL_17;
          }
          uint64_t v37 = 0;
          int v38 = 1;
          while (v32 != -4096)
          {
            if (v37) {
              BOOL v39 = 0;
            }
            else {
              BOOL v39 = v32 == -8192;
            }
            if (v39) {
              uint64_t v37 = v31;
            }
            unsigned int v40 = v30 + v38++;
            unsigned int v30 = v40 & v29;
            uint64_t v31 = (uint64_t *)(*(void *)a5 + 8 * v30);
            uint64_t v32 = *v31;
            if (*(void *)&v96[0] == *v31) {
              goto LABEL_17;
            }
          }
          if (v37) {
            uint64_t v36 = v37;
          }
          else {
            uint64_t v36 = v31;
          }
        }
        else
        {
          uint64_t v36 = 0;
        }
        llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(a5, v36, (uint64_t *)v96);
      }
    }
LABEL_17:
    ++v26;
  }
  while (v26 != (void *)v27);
  unsigned int v41 = DWORD2(v98);
  uint64_t v42 = (long long *)v98;
  *(void *)&long long v103 = v104;
  *((void *)&v103 + 1) = 0x400000000;
  if (DWORD2(v98))
  {
    a7 = v91;
    if ((long long *)v98 == &v99)
    {
      unsigned int v44 = DWORD2(v98);
      if (DWORD2(v98) < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v104, DWORD2(v98), 8),
            unsigned int v44 = DWORD2(v98),
            unsigned int v25 = (long long *)v98,
            DWORD2(v98)))
      {
        memcpy((void *)v103, v25, 8 * v44);
        unsigned int v25 = (long long *)v98;
      }
      DWORD2(v103) = v41;
    }
    else
    {
      long long v103 = v98;
      *(void *)&long long v98 = &v99;
      HIDWORD(v98) = 0;
    }
    DWORD2(v98) = 0;
    uint64_t v42 = v25;
    if (v25 != &v99)
    {
LABEL_49:
      free(v42);
      unsigned int v41 = DWORD2(v103);
    }
  }
  else
  {
    a7 = v91;
    if ((long long *)v98 != &v99) {
      goto LABEL_49;
    }
  }
  unsigned int v43 = *(_DWORD *)(a4 + 8);
  if (v41 != v43)
  {
LABEL_56:
    if (&v103 == (long long *)a4) {
      goto LABEL_68;
    }
    if (v43 >= v41)
    {
      if (v41) {
        memmove(*(void **)a4, (const void *)v103, 8 * v41);
      }
      goto LABEL_67;
    }
    if (*(_DWORD *)(a4 + 12) >= v41)
    {
      if (v43)
      {
        uint64_t v48 = v43;
        memmove(*(void **)a4, (const void *)v103, 8 * v43);
        goto LABEL_65;
      }
    }
    else
    {
      *(_DWORD *)(a4 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v41, 8);
    }
    uint64_t v48 = 0;
LABEL_65:
    if (v48 != DWORD2(v103)) {
      memcpy((void *)(*(void *)a4 + 8 * v48), (const void *)(v103 + 8 * v48), 8 * DWORD2(v103) - 8 * v48);
    }
LABEL_67:
    *(_DWORD *)(a4 + 8) = v41;
LABEL_68:
    if (!*(_DWORD *)(a5 + 8)) {
      goto LABEL_122;
    }
    uint64_t v49 = *(unsigned int *)(a5 + 16);
    if (v49)
    {
      uint64_t v50 = 8 * v49;
      unsigned int v51 = *(int64x2_t **)a5;
      while ((v51->i64[0] | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        unsigned int v51 = (int64x2_t *)((char *)v51 + 8);
        v50 -= 8;
        if (!v50) {
          goto LABEL_122;
        }
      }
      int v92 = a7;
    }
    else
    {
      int v92 = a7;
      unsigned int v51 = *(int64x2_t **)a5;
    }
    uint64_t v52 = *(void *)a5 + 8 * v49;
    if (v51 == (int64x2_t *)v52) {
      goto LABEL_122;
    }
    int v53 = 0;
    while (1)
    {
      uint64_t v54 = (unsigned int *)v51->i64[0];
      int32x2_t v55 = *a8;
      uint64_t v56 = a8[2].u32[0];
      if (v56)
      {
        LODWORD(v57) = ((v54 >> 4) ^ (v54 >> 9)) & (v56 - 1);
        uint64_t v58 = (unsigned int **)(*(void *)&v55 + 8 * v57);
        uint64_t v59 = *v58;
        if (*v58 == v54) {
          goto LABEL_85;
        }
        int v60 = 1;
        while (v59 != (unsigned int *)-4096)
        {
          int v61 = v57 + v60++;
          uint64_t v57 = v61 & (v56 - 1);
          uint64_t v59 = *(unsigned int **)(*(void *)&v55 + 8 * v57);
          if (v59 == v54)
          {
            uint64_t v58 = (unsigned int **)(*(void *)&v55 + 8 * v57);
            goto LABEL_85;
          }
        }
      }
      uint64_t v58 = (unsigned int **)(*(void *)&v55 + 8 * v56);
LABEL_85:
      if (v58 != (unsigned int **)(*(void *)&v55 + 8 * v56))
      {
        int v88 = v53;
        uint64_t v62 = v54[9];
        if (v62) {
          uint64_t v63 = (uint64_t)(v54 - 4);
        }
        else {
          uint64_t v63 = 0;
        }
        uint64_t v94 = v63;
        uint64_t v95 = v62;
        mlir::ResultRange::use_begin(&v94, (uint64_t *)v96);
        uint64_t v64 = v54[9];
        if (v64) {
          uint64_t v65 = (uint64_t)(v54 - 4);
        }
        else {
          uint64_t v65 = 0;
        }
        uint64_t v94 = v65;
        uint64_t v95 = v64;
        uint64_t v66 = mlir::ResultRange::use_end(&v94, v101);
        uint64_t v67 = v97;
        uint64_t v100 = v97;
        long long v98 = v96[0];
        long long v99 = v96[1];
        uint64_t v68 = v102;
        while (v97 != v68)
        {
          int32x2_t v69 = *a8;
          uint64_t v70 = a8[2].u32[0];
          if (v70)
          {
            uint64_t v71 = *(void *)(v67 + 16);
            LODWORD(v72) = ((v71 >> 4) ^ (v71 >> 9)) & (v70 - 1);
            uint64_t v73 = (uint64_t *)(*(void *)&v69 + 8 * v72);
            uint64_t v74 = *v73;
            if (*v73 == v71) {
              goto LABEL_100;
            }
            int v75 = 1;
            while (v74 != -4096)
            {
              int v76 = v72 + v75++;
              uint64_t v72 = v76 & (v70 - 1);
              uint64_t v74 = *(void *)(*(void *)&v69 + 8 * v72);
              if (v74 == v71)
              {
                uint64_t v73 = (uint64_t *)(*(void *)&v69 + 8 * v72);
                goto LABEL_100;
              }
            }
          }
          uint64_t v73 = (uint64_t *)(*(void *)&v69 + 8 * v70);
LABEL_100:
          if (v73 != (uint64_t *)(*(void *)&v69 + 8 * v70))
          {
            int v53 = v88;
            goto LABEL_110;
          }
          uint64_t v66 = mlir::ResultRange::UseIterator::operator++((uint64_t *)v96);
          uint64_t v67 = v97;
        }
        __int32 v77 = a8[2].i32[0];
        if (v77)
        {
          int32x2_t v78 = *a8;
          __int32 v79 = v77 - 1;
          LODWORD(v80) = (v77 - 1) & ((v54 >> 4) ^ (v54 >> 9));
          unsigned int v81 = (unsigned int **)(*(void *)a8 + 8 * v80);
          uint64_t v82 = *v81;
          if (v54 == *v81)
          {
LABEL_104:
            char *v81 = (unsigned int *)-8192;
            a8[1] = vadd_s32(a8[1], (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            int v85 = 1;
            while (v82 != (unsigned int *)-4096)
            {
              int v86 = v80 + v85++;
              uint64_t v80 = v86 & v79;
              uint64_t v82 = *(unsigned int **)(*(void *)&v78 + 8 * v80);
              if (v54 == v82)
              {
                unsigned int v81 = (unsigned int **)(*(void *)&v78 + 8 * v80);
                goto LABEL_104;
              }
            }
          }
        }
        unsigned int v83 = (llvm::raw_ostream *)llvm::dbgs((llvm *)v66);
        uint64_t v84 = *((void *)v83 + 4);
        if ((unint64_t)(*((void *)v83 + 3) - v84) > 5)
        {
          *(_WORD *)(v84 + 4) = 2661;
          *(_DWORD *)uint64_t v84 = 1935766117;
          *((void *)v83 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v83, "erase\n", 6uLL);
        }
        mlir::Operation::dump((mlir::Operation *)v54);
        int v53 = 1;
      }
LABEL_110:
      unsigned int v51 = (int64x2_t *)((char *)v51 + 8);
      if (v51 != (int64x2_t *)v52)
      {
        while ((v51->i64[0] | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          unsigned int v51 = (int64x2_t *)((char *)v51 + 8);
          if (v51 == (int64x2_t *)v52) {
            goto LABEL_120;
          }
        }
        if (v51 != (int64x2_t *)v52) {
          continue;
        }
      }
LABEL_120:
      if (v53)
      {
        *(void *)&long long v98 = "Removing ops that could not be converted did not converge.";
        *((void *)&v98 + 1) = 58;
      }
      goto LABEL_122;
    }
  }
  if (v41)
  {
    unsigned int v45 = (void *)v103;
    uint64_t v46 = *(void **)a4;
    uint64_t v47 = 8 * v41;
    while (*v45 == *v46)
    {
      ++v45;
      ++v46;
      v47 -= 8;
      if (!v47) {
        goto LABEL_122;
      }
    }
    goto LABEL_56;
  }
LABEL_122:
  if ((void *)v103 != v104) {
    free((void *)v103);
  }
  return 0;
}

void mlir::OpBuilder::create<mlir::placement::ReplacedOps,std::string &,mlir::Operation *&,llvm::SmallVector<mlir::Operation *,6u> &,llvm::SmallVector<mlir::Value,6u> &,llvm::SmallVector<mlir::Value,6u> &>(uint64_t a1, uint64_t a2, void *a3, mlir::SymbolRefAttr **a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v31[38] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  uint64_t v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.replaced_ops", (const unsigned __int8 *)0x16, Context);
  if (v16)
  {
    mlir::OperationState::OperationState(v31, a2, v15);
    int v17 = *((char *)a3 + 23);
    uint64_t v18 = a3[1];
    if (v17 >= 0)
    {
      uint64_t v19 = v17;
    }
    else
    {
      a3 = (void *)*a3;
      uint64_t v19 = v18;
    }
    int v20 = *a4;
    int64x2_t v21 = *(mlir::Operation ***)a5;
    uint64_t v22 = *(unsigned int *)(a5 + 8);
    mlir::ValueRange::ValueRange(v30, *(void *)a6, *(unsigned int *)(a6 + 8));
    mlir::ValueRange::ValueRange(v29, *(void *)a7, *(unsigned int *)(a7 + 8));
    mlir::placement::ReplacedOps::build(a1, (mlir::Attribute *)v31, a3, v19, v20, v21, v22, v23, v30[0], v30[1], v29[0], v29[1]);
  }
  __int16 v28 = 1283;
  uint64_t v27[2] = (uint64_t)"placement.replaced_ops";
  v27[3] = 22;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  __int16 v26 = 259;
  llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v31);
  llvm::report_fatal_error((llvm::Twine *)v31, 1);
}

void mlir::anonymous namespace'::BuildContext::updateCreatedOpsList(int32x2_t *this, mlir::Operation *a2, mlir::Operation *a3, const mlir::ConversionTarget *a4)
{
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  unsigned int v44 = 0;
  v40[0] = 0;
  v40[1] = 0;
  unsigned int v41 = 0;
  v39[0] = (uint64_t)v40;
  ParentOp = (mlir::Block *)*((void *)a3 + 2);
  if (ParentOp) {
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  }
  v39[0] = (uint64_t)v40;
  v39[1] = (uint64_t)&v42;
  if (!this[3].i32[0]) {
    goto LABEL_41;
  }
  uint64_t v8 = this[4].u32[0];
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    unsigned __int8 v10 = (void *)this[2];
    while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++v10;
      v9 -= 8;
      if (!v9) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    unsigned __int8 v10 = (void *)this[2];
  }
  uint64_t v11 = *(void *)&this[2] + 8 * v8;
  if (v10 == (void *)v11) {
    goto LABEL_41;
  }
LABEL_11:
  v39[0] = 0;
  uint64_t v12 = (mlir::Operation *)*v10;
  v39[0] = *v10;
  if (v41)
  {
    LODWORD(v13) = (v41 - 1) & ((v12 >> 4) ^ (v12 >> 9));
    uint64_t v14 = (llvm *)((char *)v40[0] + 8 * v13);
    uint64_t v15 = *(mlir::Operation **)v14;
    if (*(mlir::Operation **)v14 != v12)
    {
      int v16 = 1;
      do
      {
        if (v15 == (mlir::Operation *)-4096) {
          goto LABEL_17;
        }
        int v17 = v13 + v16++;
        uint64_t v13 = v17 & (v41 - 1);
        uint64_t v15 = (mlir::Operation *)*((void *)v40[0] + v13);
      }
      while (v15 != v12);
      uint64_t v14 = (llvm *)((char *)v40[0] + 8 * v13);
    }
  }
  else
  {
LABEL_17:
    uint64_t v14 = (llvm *)((char *)v40[0] + 8 * v41);
  }
  if (v14 != (llvm *)((char *)v40[0] + 8 * v41))
  {
    if ((unsigned __int16)mlir::ConversionTarget::isLegal(a4, v12) > 0xFFu) {
      goto LABEL_34;
    }
    uint64_t v18 = v39[0];
    uint64_t v19 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v18 + 48) + 32))(*(void *)(v18 + 48), v19)) {
      goto LABEL_34;
    }
  }
  if (v44)
  {
    unsigned int v20 = ((LODWORD(v39[0]) >> 4) ^ (LODWORD(v39[0]) >> 9)) & (v44 - 1);
    int64x2_t v21 = &v42[v20];
    uint64_t v22 = *v21;
    if (v39[0] == *v21) {
      goto LABEL_34;
    }
    uint64_t v23 = 0;
    int v24 = 1;
    while (v22 != -4096)
    {
      if (v23) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v22 == -8192;
      }
      if (v25) {
        uint64_t v23 = v21;
      }
      unsigned int v26 = v20 + v24++;
      unsigned int v20 = v26 & (v44 - 1);
      int64x2_t v21 = &v42[v20];
      uint64_t v22 = *v21;
      if (v39[0] == *v21)
      {
        do
        {
LABEL_34:
          if (++v10 == (void *)v11) {
            goto LABEL_41;
          }
        }
        while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000);
        if (v10 == (void *)v11)
        {
LABEL_41:
          if (v43)
          {
            if (v44)
            {
              uint64_t v28 = 8 * v44;
              int v29 = v42;
              while ((*v29 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                ++v29;
                v28 -= 8;
                if (!v28) {
                  goto LABEL_61;
                }
              }
            }
            else
            {
              int v29 = v42;
            }
            unsigned int v30 = &v42[v44];
            if (v29 != v30)
            {
              __int32 v31 = this[4].i32[0];
              __int32 v32 = v31 - 1;
              do
              {
                if (!v31) {
                  goto LABEL_53;
                }
                int32x2_t v33 = this[2];
                LODWORD(v34) = ((*v29 >> 4) ^ (*v29 >> 9)) & v32;
                uint64_t v35 = (uint64_t *)(*(void *)&v33 + 8 * v34);
                uint64_t v36 = *v35;
                if (*v29 == *v35) {
                  goto LABEL_52;
                }
                int v37 = 1;
                while (v36 != -4096)
                {
                  int v38 = v34 + v37++;
                  uint64_t v34 = v38 & v32;
                  uint64_t v36 = *(void *)(*(void *)&v33 + 8 * v34);
                  if (*v29 == v36)
                  {
                    uint64_t v35 = (uint64_t *)(*(void *)&v33 + 8 * v34);
LABEL_52:
                    *uint64_t v35 = -8192;
                    this[3] = vadd_s32(this[3], (int32x2_t)0x1FFFFFFFFLL);
                    goto LABEL_53;
                  }
                }
                do
                {
LABEL_53:
                  if (++v29 == v30) {
                    goto LABEL_61;
                  }
                }
                while ((*v29 | 0x1000) == 0xFFFFFFFFFFFFF000);
              }
              while (v29 != v30);
            }
          }
LABEL_61:
          llvm::deallocate_buffer(v40[0], (void *)(8 * v41));
        }
        goto LABEL_11;
      }
    }
    if (v23) {
      uint64_t v27 = v23;
    }
    else {
      uint64_t v27 = v21;
    }
  }
  else
  {
    uint64_t v27 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)&v42, v27, v39);
  goto LABEL_34;
}

void sub_1806A98F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, llvm *a15, uint64_t a16, unsigned int a17)
{
}

void mlir::anonymous namespace'::BuildContext::rollbackCreatedOps(mlir::_anonymous_namespace_::BuildContext *this)
{
  v34[6] = *MEMORY[0x1E4F143B8];
  __int32 v32 = v34;
  uint64_t v33 = 0x600000000;
  uint64_t v2 = (int64x2_t **)((char *)this + 16);
  if (*((_DWORD *)this + 6))
  {
    uint64_t v3 = *((unsigned int *)this + 8);
    if (v3)
    {
      uint64_t v4 = 8 * v3;
      uint64_t v5 = (uint64_t *)*((void *)this + 2);
      while ((*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v5;
        v4 -= 8;
        if (!v4) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      uint64_t v5 = (uint64_t *)*((void *)this + 2);
    }
    uint64_t v6 = *((void *)this + 2) + 8 * v3;
    if (v5 != (uint64_t *)v6)
    {
LABEL_9:
      uint64_t v7 = *v5;
      uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v7 + 48) + 32))(*(void *)(v7 + 48), v8))
      {
        uint64_t v31 = v7;
        llvm::SmallVectorImpl<mlir::Operation *>::insert_one_impl<mlir::Operation *>((uint64_t)&v32, (uint64_t)v32, &v31);
      }
      else
      {
        uint64_t v9 = v33;
        if (v33 >= (unint64_t)HIDWORD(v33))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v33 + 1, 8);
          uint64_t v9 = v33;
        }
        *((void *)v32 + v9) = v7;
        LODWORD(v33) = v33 + 1;
      }
      while (++v5 != (uint64_t *)v6)
      {
        if ((*v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v5 != (uint64_t *)v6) {
            goto LABEL_9;
          }
          break;
        }
      }
      if (v33)
      {
        unsigned __int8 v10 = (char *)v32;
        uint64_t v11 = (char *)v32 + 8 * v33;
        do
        {
          uint64_t v13 = (unsigned int *)*((void *)v11 - 1);
          v11 -= 8;
          uint64_t v12 = (mlir::Operation *)v13;
          uint64_t v14 = v13[9];
          uint64_t v15 = (uint64_t)(v13 - 4);
          if (v14) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          if (v14)
          {
            for (uint64_t i = 0; i != v14; ++i)
            {
              uint64_t NextResultAtOffset = (void **)mlir::detail::OpResultImpl::getNextResultAtOffset(v16, i);
              while (1)
              {
                uint64_t v19 = *NextResultAtOffset;
                if (!*NextResultAtOffset) {
                  break;
                }
                unsigned int v20 = (void *)v19[1];
                if (v20)
                {
                  *unsigned int v20 = *v19;
                  if (*v19) {
                    *(void *)(*v19 + 8) = v19[1];
                  }
                }
                *uint64_t v19 = 0;
                v19[1] = 0;
                v19[3] = 0;
              }
            }
          }
          mlir::Operation::erase(v12);
        }
        while (v11 != v10);
      }
    }
  }
LABEL_32:
  int v21 = *((_DWORD *)this + 6);
  if (v21 || *((_DWORD *)this + 7))
  {
    uint64_t v22 = *((unsigned int *)this + 8);
    if (v22 <= 4 * v21 || v22 < 0x41)
    {
      if (v22)
      {
        uint64_t v23 = *v2;
        unint64_t v24 = (v22 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        BOOL v25 = *v2;
        if (v24 < 3) {
          goto LABEL_42;
        }
        unint64_t v26 = v24 + 1;
        BOOL v25 = (int64x2_t *)((char *)v23 + 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL));
        uint64_t v27 = v23 + 1;
        int64x2_t v28 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        uint64_t v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27[-1] = v28;
          *uint64_t v27 = v28;
          v27 += 2;
          v29 -= 4;
        }
        while (v29);
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_42:
          unsigned int v30 = (int64x2_t *)((char *)v23 + 8 * v22);
          do
          {
            v25->i64[0] = -4096;
            BOOL v25 = (int64x2_t *)((char *)v25 + 8);
          }
          while (v25 != v30);
        }
      }
      *((void *)this + 3) = 0;
    }
    else
    {
      llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::shrink_and_clear((uint64_t)v2);
    }
  }
  if (v32 != v34) {
    free(v32);
  }
}

llvm::BitVector *llvm::BitVector::BitVector(llvm::BitVector *this, int a2, uint64_t a3)
{
  int v3 = a3;
  unsigned int v6 = a2 + 63;
  uint64_t v7 = (a2 + 63) >> 6;
  unint64_t v8 = a3 << 63 >> 63;
  uint64_t v9 = (char *)this + 16;
  *(void *)this = (char *)this + 16;
  *((_DWORD *)this + 3) = 6;
  if (v6 < 0x1C0)
  {
    if (v6 >= 0x40)
    {
      uint64_t v15 = (unint64_t *)((char *)this + 16);
      uint64_t v16 = v6 >> 6;
      if (v6 < 0x100) {
        goto LABEL_19;
      }
      uint64_t v15 = (unint64_t *)&v9[8 * (v7 & 0x3FFFFFC)];
      uint64_t v16 = v7 & 3;
      int64x2_t v17 = vdupq_n_s64(v8);
      uint64_t v18 = (int64x2_t *)((char *)this + 32);
      uint64_t v19 = v7 & 0x3FFFFFC;
      do
      {
        v18[-1] = v17;
        int64x2_t *v18 = v17;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if ((v7 & 0x3FFFFFC) != v7)
      {
LABEL_19:
        do
        {
          *v15++ = v8;
          --v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, v9, v6 >> 6, 8);
    uint64_t v10 = 0;
    uint64_t v9 = *(char **)this;
    uint64_t v11 = 8 * (v7 & 0x3FFFFFC);
    uint64_t v12 = v7 & 3;
    int64x2_t v13 = vdupq_n_s64(v8);
    do
    {
      uint64_t v14 = (int64x2_t *)&v9[v10];
      *uint64_t v14 = v13;
      v14[1] = v13;
      v10 += 32;
    }
    while (v11 != v10);
    if ((v7 & 0x3FFFFFC) != v7)
    {
      do
      {
        *(void *)&v9[v11] = v8;
        v11 += 8;
        --v12;
      }
      while (v12);
    }
  }
  *((_DWORD *)this + 2) = v7;
  *((_DWORD *)this + 16) = a2;
  if (v3 && (a2 & 0x3F) != 0) {
    *(void *)&v9[8 * v7 - 8] &= ~(-1 << (a2 & 0x3F));
  }
  return this;
}

unint64_t *mlir::TypeRange::TypeRange<llvm::MutableArrayRef<mlir::BlockArgument>>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  v5[2] = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v5, a2, (a3 - a2) >> 3);
  mlir::TypeRange::TypeRange(a1, v5[0], v5[1]);
  return a1;
}

unint64_t *mlir::TypeRange::TypeRange<mlir::OperandRange>(unint64_t *a1, void *a2)
{
  v4[2] = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v4, *a2 + 32 * a2[1], a2[3] - a2[1]);
  mlir::TypeRange::TypeRange(a1, v4[0], v4[1]);
  return a1;
}

uint64_t llvm::dyn_cast<mlir::FunctionOpInterface,mlir::Operation>(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a1)) {
    return 0;
  }
  if (v1) {
    mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(v1);
  }
  return v1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::StartTimer,mlir::placement::TimerHandleType,mlir::FlatSymbolRefAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.start_timer", (const unsigned __int8 *)0x15, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"placement.start_timer";
    _OWORD v17[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::placement::StartTimer::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::StartTimer,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::HostTypeCast,mlir::Type const&,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.host_type_cast", (const unsigned __int8 *)0x18, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"placement.host_type_cast";
    _OWORD v17[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void *llvm::SmallVector<mlir::Value,4u>::SmallVector<llvm::mapped_iterator<mlir::Value*,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_0,mlir::Value>,void>(void *a1, uint64_t a2, unint64_t **a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  uint64_t v5 = *(unint64_t **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v6 = *a3;
  uint64_t v7 = (uint64_t)*a3 - *(void *)a2;
  if ((unint64_t)v7 < 0x21)
  {
    unsigned int v8 = 0;
    if (v5 == v6) {
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v7 >> 3, 8);
    unsigned int v8 = *((_DWORD *)a1 + 2);
    if (v5 == v6) {
      goto LABEL_11;
    }
  }
  uint64_t v9 = (unint64_t *)(*a1 + 8 * v8);
  do
  {
    unint64_t v10 = *v5;
    unint64_t v12 = *v5;
    uint64_t v13 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v4, &v12, &v13)&& v13 != *(void *)v4 + 16 * *(unsigned int *)(v4 + 16))
    {
      unint64_t v10 = *(void *)(v13 + 8);
    }
    *v9++ = v10;
    ++v5;
  }
  while (v5 != v6);
  unsigned int v8 = *((_DWORD *)a1 + 2);
LABEL_11:
  *((_DWORD *)a1 + 2) = v8 + ((unint64_t)v7 >> 3);
  return a1;
}

uint64_t mlir::Operation::getAttr(uint64_t a1, const void *a2, size_t a3)
{
  if (!*(unsigned char *)(a1 + 47) || (uint64_t result = mlir::Operation::getInherentAttr(a1, (uint64_t)a2, a3), !v7))
  {
    return mlir::DictionaryAttr::get(a1 + 56, a2, a3);
  }
  return result;
}

void mlir::Operation::setAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  __int16 v11 = 261;
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v9 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v10);
  mlir::Operation::setAttr(a1, v9, a4);
}

void *llvm::SmallVector<mlir::Value,4u>::SmallVector<llvm::mapped_iterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_1,mlir::Value>,void>(void *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  int v9 = v7 - v5;
  if ((unint64_t)(v7 - v5) < 5)
  {
    unsigned int v10 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v7 - v5, 8);
    unsigned int v10 = *((_DWORD *)a1 + 2);
  }
  if (v4 != v8 || v7 != v5)
  {
    unint64_t v12 = (uint64_t *)(*a1 + 8 * v10);
    uint64_t v13 = v7 - 1;
    do
    {
      uint64_t v14 = v5;
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, v5);
      uint64_t v17 = NextResultAtOffset;
      uint64_t v18 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v6, (unint64_t *)&v17, &v18)&& v18 != *(void *)v6 + 16 * *(unsigned int *)(v6 + 16))
      {
        uint64_t NextResultAtOffset = *(void *)(v18 + 8);
      }
      *v12++ = NextResultAtOffset;
      uint64_t v5 = v14 + 1;
    }
    while (v4 != v8 || v13 != v14);
    unsigned int v10 = *((_DWORD *)a1 + 2);
  }
  *((_DWORD *)a1 + 2) = v10 + v9;
  return a1;
}

uint64_t mlir::Operation::replaceAllUsesWith<llvm::SmallVector<mlir::Value,4u> &>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 36);
  if (v2) {
    uint64_t v3 = result - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v2) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(uint64_t ***)a2;
    uint64_t v8 = *(void *)a2 + 8 * v4;
    do
    {
      uint64_t result = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, v6);
      int v9 = *(uint64_t **)result;
      if (*(void *)result)
      {
        unsigned int v10 = *v7;
        do
        {
          __int16 v11 = (uint64_t *)v9[1];
          if (v11)
          {
            uint64_t *v11 = *v9;
            if (*v9) {
              *(void *)(*v9 + 8) = v9[1];
            }
          }
          v9[3] = (uint64_t)v10;
          uint64_t v12 = *v10;
          uint64_t *v9 = *v10;
          v9[1] = (uint64_t)v10;
          if (v12) {
            *(void *)(v12 + 8) = v9;
          }
          *unsigned int v10 = (uint64_t)v9;
          int v9 = *(uint64_t **)result;
        }
        while (*(void *)result);
      }
      if (++v6 == v2) {
        break;
      }
      ++v7;
    }
    while (v7 != (uint64_t **)v8);
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::StopTimer,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.stop_timer", (const unsigned __int8 *)0x14, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"placement.stop_timer";
    _OWORD v15[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::EraseOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  int v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::StopTimer,void>::id) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

void mlir::anonymous namespace'::moveErasedOpsAfter(uint64_t a1, uint64_t a2)
{
  uint64_t v101 = a1;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  uint64_t v6 = *(void *)a2 + 8 * v5;
  uint64_t v7 = *(void **)a2;
  if (v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = 8 * v5;
    while (*(void *)(*(void *)(v4 + v8) + 16) == v9)
    {
      v8 += 8;
      if (v10 == v8)
      {
        uint64_t v7 = (void *)v6;
        goto LABEL_17;
      }
    }
    uint64_t v7 = (void *)(v4 + v8);
  }
  __int16 v11 = v7 + 1;
  if (v7 != (void *)v6 && v11 != (void *)v6)
  {
    do
    {
      if (*(void *)(*v11 + 16) == *(void *)(v101 + 16)) {
        *v7++ = *v11;
      }
      ++v11;
    }
    while (v11 != (void *)v6);
    uint64_t v4 = *(void *)a2;
  }
LABEL_17:
  unint64_t v13 = ((unint64_t)v7 - v4) >> 3;
  unint64_t v14 = 126 - 2 * __clz(v13);
  *(_DWORD *)(a2 + 8) = v13;
  if (v13) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  __int16 v16 = (mlir::Block **)v101;
  v99[0] = 0;
  v99[1] = 0;
  unsigned int v100 = 0;
  long long v97 = 0u;
  unsigned long long v98 = 0u;
  *(_OWORD *)__p = 0u;
  std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
  unsigned int v17 = v100;
  uint64_t v18 = *((void *)&v98 + 1);
  *(void *)(*(void *)((char *)__p[1] + ((((void)v98 + *((void *)&v98 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((v98 + *((void *)&v98 + 1)) & 0x1FF)) = v101;
  uint64_t v19 = v18 + 1;
  *((void *)&v98 + 1) = v19;
  if (v17)
  {
    unsigned int v20 = v17 - 1;
    unsigned int v21 = ((v101 >> 4) ^ (v101 >> 9)) & v20;
    uint64_t v22 = (uint64_t *)((char *)v99[0] + 8 * v21);
    uint64_t v23 = *v22;
    if (v101 == *v22) {
      goto LABEL_33;
    }
    unint64_t v24 = 0;
    int v25 = 1;
    while (v23 != -4096)
    {
      if (v24) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v23 == -8192;
      }
      if (v26) {
        unint64_t v24 = v22;
      }
      unsigned int v27 = v21 + v25++;
      unsigned int v21 = v27 & v20;
      uint64_t v22 = (uint64_t *)((char *)v99[0] + 8 * v21);
      uint64_t v23 = *v22;
      if (v101 == *v22) {
        goto LABEL_33;
      }
    }
    if (v24) {
      int64x2_t v28 = v24;
    }
    else {
      int64x2_t v28 = v22;
    }
  }
  else
  {
    int64x2_t v28 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v99, v28, &v101);
  uint64_t v19 = *((void *)&v98 + 1);
LABEL_33:
  if (v19)
  {
    uint64_t v29 = (char *)__p[1];
    unint64_t v30 = v98;
    do
    {
      uint64_t v31 = *(void *)(*(void *)&v29[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF));
      uint64_t v32 = *(unsigned int *)(v31 + 36);
      if (v32) {
        uint64_t v33 = v31 - 16;
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v105 = v33;
      uint64_t v106 = v32;
      mlir::ResultRange::use_begin(&v105, (uint64_t *)&v102);
      uint64_t v34 = *(unsigned int *)(v31 + 36);
      if (v34) {
        uint64_t v35 = v31 - 16;
      }
      else {
        uint64_t v35 = 0;
      }
      uint64_t v105 = v35;
      uint64_t v106 = v34;
      mlir::ResultRange::use_end(&v105, v94);
      uint64_t v36 = v104;
      uint64_t v93 = v104;
      long long v91 = v102;
      long long v92 = v103;
      uint64_t v37 = v95;
      while (v36 != v37)
      {
        uint64_t v42 = *(void *)(v36 + 16);
        uint64_t v105 = v42;
        if (*(_UNKNOWN **)(*(void *)(v42 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
        {
          unsigned int v44 = (char *)__p[1];
          if ((void *)v97 == __p[1]) {
            unint64_t v45 = 0;
          }
          else {
            unint64_t v45 = (((void)v97 - (unint64_t)__p[1]) << 6) - 1;
          }
          uint64_t v46 = *((void *)&v98 + 1);
          unint64_t v47 = *((void *)&v98 + 1) + v98;
          if (v45 == *((void *)&v98 + 1) + (void)v98)
          {
            std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
            uint64_t v46 = *((void *)&v98 + 1);
            unsigned int v44 = (char *)__p[1];
            unint64_t v47 = v98 + *((void *)&v98 + 1);
            uint64_t v42 = v105;
          }
          *(void *)(*(void *)&v44[(v47 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v47 & 0x1FF)) = v42;
          *((void *)&v98 + 1) = v46 + 1;
          unsigned int v43 = v100;
          if (!v100)
          {
LABEL_55:
            uint64_t v48 = 0;
            goto LABEL_56;
          }
        }
        else
        {
          unsigned int v43 = v100;
          if (!v100) {
            goto LABEL_55;
          }
        }
        unsigned int v38 = v43 - 1;
        unsigned int v39 = ((v105 >> 4) ^ (v105 >> 9)) & v38;
        unsigned int v40 = (uint64_t *)((char *)v99[0] + 8 * v39);
        uint64_t v41 = *v40;
        if (v105 == *v40) {
          goto LABEL_44;
        }
        uint64_t v49 = 0;
        int v50 = 1;
        while (v41 != -4096)
        {
          if (v49) {
            BOOL v51 = 0;
          }
          else {
            BOOL v51 = v41 == -8192;
          }
          if (v51) {
            uint64_t v49 = v40;
          }
          unsigned int v52 = v39 + v50++;
          unsigned int v39 = v52 & v38;
          unsigned int v40 = (uint64_t *)((char *)v99[0] + 8 * v39);
          uint64_t v41 = *v40;
          if (v105 == *v40) {
            goto LABEL_44;
          }
        }
        if (v49) {
          uint64_t v48 = v49;
        }
        else {
          uint64_t v48 = v40;
        }
LABEL_56:
        llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v99, v48, &v105);
LABEL_44:
        mlir::ResultRange::UseIterator::operator++((uint64_t *)&v102);
        uint64_t v36 = v104;
      }
      BOOL v53 = mlir::Operation::isBeforeInBlock(v16, *(mlir::Operation **)(*(void *)((char *)__p[1] + (((unint64_t)v98 >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (v98 & 0x1FF)));
      uint64_t v29 = (char *)__p[1];
      if (v53) {
        __int16 v16 = *(mlir::Block ***)(*(void *)((char *)__p[1] + (((unint64_t)v98 >> 6) & 0x3FFFFFFFFFFFFF8))
      }
                               + 8 * (v98 & 0x1FF));
      uint64_t v54 = *((void *)&v98 + 1) - 1;
      unint64_t v30 = v98 + 1;
      unsigned long long v98 = __PAIR128__(*((unint64_t *)&v98 + 1), (uint64_t)v98 + 1) + __PAIR128__(-1, 0);
      if (v30 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        uint64_t v54 = *((void *)&v98 + 1);
        uint64_t v29 = (char *)__p[1] + 8;
        unint64_t v30 = v98 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(void *)&unsigned long long v98 = v98 - 512;
      }
    }
    while (v54);
  }
  uint64_t v55 = *(unsigned int *)(a2 + 8);
  if (v55)
  {
    uint64_t v56 = *(mlir::Operation ***)a2;
    uint64_t v57 = *(void *)a2 + 8 * v55;
    do
    {
      uint64_t v58 = *v56;
      if (mlir::Operation::isBeforeInBlock(v16, *v56)) {
        break;
      }
      if ((*((unsigned char *)v58 + 46) & 0x80) == 0 || (uint64_t v59 = *((unsigned int *)v58 + 17), !v59))
      {
LABEL_75:
        uint64_t v58 = (mlir::Operation *)v16;
        goto LABEL_76;
      }
      uint64_t v60 = 0;
      uint64_t v61 = *((void *)v58 + 9);
      while (1)
      {
        uint64_t v90 = *(void *)(v61 + 32 * v60 + 24);
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v90);
        uint64_t v63 = DefiningOp;
        if (v100)
        {
          LODWORD(v64) = ((DefiningOp >> 4) ^ (DefiningOp >> 9)) & (v100 - 1);
          uint64_t v65 = (llvm *)((char *)v99[0] + 8 * v64);
          uint64_t v66 = *(void *)v65;
          if (*(void *)v65 != DefiningOp)
          {
            int v67 = 1;
            do
            {
              if (v66 == -4096) {
                goto LABEL_87;
              }
              int v68 = v64 + v67++;
              uint64_t v64 = v68 & (v100 - 1);
              uint64_t v66 = *((void *)v99[0] + v64);
            }
            while (v66 != DefiningOp);
            uint64_t v65 = (llvm *)((char *)v99[0] + 8 * v64);
          }
        }
        else
        {
LABEL_87:
          uint64_t v65 = (llvm *)((char *)v99[0] + 8 * v100);
        }
        if (v65 != (llvm *)((char *)v99[0] + 8 * v100)) {
          break;
        }
        if (++v60 == v59) {
          goto LABEL_75;
        }
      }
      uint64_t v69 = *(unsigned int *)(DefiningOp + 36);
      if (v69) {
        uint64_t v70 = DefiningOp - 16;
      }
      else {
        uint64_t v70 = 0;
      }
      uint64_t v105 = v70;
      uint64_t v106 = v69;
      mlir::ResultRange::use_begin(&v105, (uint64_t *)&v102);
      uint64_t v71 = *(unsigned int *)(v63 + 36);
      if (v71) {
        uint64_t v72 = v63 - 16;
      }
      else {
        uint64_t v72 = 0;
      }
      uint64_t v105 = v72;
      uint64_t v106 = v71;
      mlir::ResultRange::use_end(&v105, v94);
      uint64_t v73 = v104;
      uint64_t v93 = v104;
      long long v91 = v102;
      long long v92 = v103;
      uint64_t v74 = v95;
      while (v73 != v74)
      {
        uint64_t v78 = *(void *)(v73 + 16);
        uint64_t v105 = v78;
        if (v100)
        {
          unsigned int v75 = (v100 - 1) & ((v78 >> 4) ^ (v78 >> 9));
          int v76 = (uint64_t *)((char *)v99[0] + 8 * v75);
          uint64_t v77 = *v76;
          if (v78 == *v76) {
            goto LABEL_99;
          }
          uint64_t v80 = 0;
          int v81 = 1;
          while (v77 != -4096)
          {
            if (v80) {
              BOOL v82 = 0;
            }
            else {
              BOOL v82 = v77 == -8192;
            }
            if (v82) {
              uint64_t v80 = v76;
            }
            unsigned int v83 = v75 + v81++;
            unsigned int v75 = v83 & (v100 - 1);
            int v76 = (uint64_t *)((char *)v99[0] + 8 * v75);
            uint64_t v77 = *v76;
            if (v78 == *v76) {
              goto LABEL_99;
            }
          }
          if (v80) {
            __int32 v79 = v80;
          }
          else {
            __int32 v79 = v76;
          }
        }
        else
        {
          __int32 v79 = 0;
        }
        llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v99, v79, &v105);
LABEL_99:
        mlir::ResultRange::UseIterator::operator++((uint64_t *)&v102);
        uint64_t v73 = v104;
      }
      mlir::Operation::moveAfter((uint64_t *)v58, (mlir::Operation *)v16);
LABEL_76:
      ++v56;
      __int16 v16 = (mlir::Block **)v58;
    }
    while (v56 != (mlir::Operation **)v57);
  }
  uint64_t v84 = (void **)__p[1];
  int v85 = (void **)v97;
  *((void *)&v98 + 1) = 0;
  unint64_t v86 = v97 - (unint64_t)__p[1];
  if ((unint64_t)v97 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v84);
      int v85 = (void **)v97;
      uint64_t v84 = (void **)((char *)__p[1] + 8);
      __p[1] = v84;
      unint64_t v86 = v97 - (void)v84;
    }
    while ((void)v97 - (void)v84 > 0x10uLL);
  }
  unint64_t v87 = v86 >> 3;
  if (v87 == 1)
  {
    uint64_t v88 = 256;
  }
  else
  {
    if (v87 != 2)
    {
LABEL_124:
      if (v84 != v85)
      {
        do
        {
          uint64_t v89 = *v84++;
          operator delete(v89);
        }
        while (v84 != v85);
        if ((void *)v97 != __p[1]) {
          *(void *)&long long v97 = v97 + (((unint64_t)__p[1] - v97 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
      }
      if (__p[0]) {
        operator delete(__p[0]);
      }
      llvm::deallocate_buffer(v99[0], (void *)(8 * v100));
    }
    uint64_t v88 = 512;
  }
  *(void *)&unsigned long long v98 = v88;
  goto LABEL_124;
}

uint64_t std::function<void ()(mlir::Operation *,mlir::Operation *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v7, &v6);
  }
  uint64_t v5 = (mlir::_anonymous_namespace_::BuildContext *)std::__throw_bad_function_call[abi:nn180100]();
}

uint64_t mlir::anonymous namespace'::BuildContext::commitChanges(uint64_t this)
{
  if (*(void *)(this + 24))
  {
    uint64_t v1 = (int64x2_t **)(this + 16);
    uint64_t v2 = *(unsigned int *)(this + 32);
    if (v2 <= 4 * *(_DWORD *)(this + 24) || v2 < 0x41)
    {
      if (v2)
      {
        uint64_t v3 = *v1;
        unint64_t v4 = (v2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        uint64_t v5 = *v1;
        if (v4 < 3) {
          goto LABEL_10;
        }
        unint64_t v6 = v4 + 1;
        uint64_t v5 = (int64x2_t *)((char *)v3 + 8 * (v6 & 0x3FFFFFFFFFFFFFFCLL));
        uint64_t v7 = v3 + 1;
        int64x2_t v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        uint64_t v9 = v6 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v7[-1] = v8;
          int64x2_t *v7 = v8;
          v7 += 2;
          v9 -= 4;
        }
        while (v9);
        if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_10:
          uint64_t v10 = (int64x2_t *)((char *)v3 + 8 * v2);
          do
          {
            v5->i64[0] = -4096;
            uint64_t v5 = (int64x2_t *)((char *)v5 + 8);
          }
          while (v5 != v10);
        }
      }
      *(void *)(this + 24) = 0;
    }
    else
    {
      return llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::shrink_and_clear(this + 16);
    }
  }
  return this;
}

void mlir::IRMapping::~IRMapping(llvm **this)
{
}

void sub_1806AADE8()
{
  llvm::deallocate_buffer(*(llvm **)(v0 + 24), (void *)(16 * *(unsigned int *)(v0 + 40)));
}

void sub_1806AADFC()
{
  llvm::deallocate_buffer(*(llvm **)v0, (void *)(16 * *(unsigned int *)(v0 + 16)));
}

uint64_t sub_1806AAE10()
{
  return v0;
}

void mlir::anonymous namespace'::BuildContext::~BuildContext(llvm **this)
{
  *this = (llvm *)&unk_1EC9A5238;
  llvm::deallocate_buffer(this[2], (void *)(8 * *((unsigned int *)this + 8)));
}

{
  *this = (llvm *)&unk_1EC9A5238;
  llvm::deallocate_buffer(this[2], (void *)(8 * *((unsigned int *)this + 8)));
}

uint64_t sub_1806AAE64()
{
  return v0;
}

void mlir::legalizeRegions(mlir::ForwardIterator *a1, uint64_t a2)
{
  v39[1] = *MEMORY[0x1E4F143B8];
  uint64_t v34 = a1;
  uint64_t v33 = a2;
  uint64_t v3 = *(mlir::ForwardIterator ***)(a2 + 8);
  v38[0] = v39;
  v38[1] = 0x100000000;
  uint64_t v31 = (mlir::Operation **)&v33;
  uint64_t v32 = 0;
  uint64_t v29 = (mlir::Operation **)&v31;
  uint64_t v30 = 0;
  v36[1] = 0x500000000;
  v21[0] = 0;
  v21[1] = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  BOOL v26 = 0;
  uint64_t v27 = 0;
  unsigned int v28 = 0;
  unint64_t v13 = v3;
  unint64_t v14 = &v33;
  uint64_t v15 = v21;
  uint64_t v35 = &v13;
  v36[0] = &v37;
  mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__0NS1_9placement12HostTypeCastEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v35, 1);
  unint64_t v13 = &v34;
  unint64_t v14 = v38;
  uint64_t v15 = v21;
  __int16 v16 = &v33;
  unsigned int v17 = v36;
  uint64_t v18 = v3;
  uint64_t v19 = &v31;
  unsigned int v20 = &v29;
  uint64_t v35 = &v13;
  if (mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)_ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__1NS1_24TargetLegalizerInterfaceES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESO_E4typeES4_OT1_EUlS4_E_EES2_lS4_, (uint64_t)&v35, 1))
  {
    uint64_t v4 = *(void *)((((unint64_t)v34
                     + 16 * (((unint64_t)*((unsigned int *)v34 + 11) >> 23) & 1)
                     + (((unint64_t)*((unsigned int *)v34 + 11) >> 21) & 0x7F8)
                     + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)v34 + 10)
                   + 8);
    if (v4) {
      uint64_t v5 = (mlir::ForwardIterator *)(v4 - 8);
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v6 = (mlir::ForwardIterator *)*((void *)v5 + 5);
    v3[2] = v5;
    v3[3] = v6;
    if (v32)
    {
      uint64_t v7 = v31;
      uint64_t v8 = 8 * v32;
      do
      {
        uint64_t v9 = *v7++;
        mlir::OpBuilder::insert((mlir::OpBuilder *)v3, v9);
        v8 -= 8;
      }
      while (v8);
    }
    if (v30)
    {
      uint64_t v10 = v29;
      uint64_t v11 = 8 * v30;
      do
      {
        uint64_t v12 = *v10++;
        mlir::Operation::erase(v12);
        v11 -= 8;
      }
      while (v11);
    }
  }
  llvm::deallocate_buffer(v26, (void *)(16 * v28));
}

void sub_1806AB040(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,llvm *a24,uint64_t a25,unsigned int a26)
{
}

void sub_1806AB054(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,llvm *a21,uint64_t a22,unsigned int a23)
{
}

uint64_t mlir::collectRegions(mlir::ForwardIterator *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  if (a3 && *(unsigned char *)(a3 + 1))
  {
    if (*(unsigned char *)(a3 + 2))
    {
      uint64_t v5 = (llvm *)(*(uint64_t (**)(uint64_t, mlir::ForwardIterator *))(*(void *)v17 + 120))(v17, a1);
      float v7 = v6;
      uint64_t v8 = (llvm::raw_ostream *)llvm::dbgs(v5);
      uint64_t v9 = v8;
      uint64_t v10 = (void *)*((void *)v8 + 4);
      if (*((void *)v8 + 3) - (void)v10 > 0xDuLL)
      {
        qmemcpy(v10, "Module Cost0: ", 14);
        *((void *)v8 + 4) += 14;
      }
      else
      {
        uint64_t v9 = llvm::raw_ostream::write(v8, "Module Cost0: ", 0xEuLL);
      }
      std::to_string(&__p, v7 * 1000.0);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __p.__r_.__value_.__l.__size_;
      }
      unint64_t v13 = llvm::raw_ostream::write(v9, (const char *)p_p, size);
      unint64_t v14 = (_DWORD *)*((void *)v13 + 4);
      if (*((void *)v13 + 3) - (void)v14 > 3uLL)
      {
        *unint64_t v14 = 175336736;
        *((void *)v13 + 4) += 4;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_19:
        }
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        llvm::raw_ostream::write(v13, " ms\n", 4uLL);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_19;
        }
      }
    }
    return 1;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v16;
  uint64_t v18 = &__p;
  uint64_t result = mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)_ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_14collectRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEPKNS1_15CostModelParamsEE3__0NS1_4func6FuncOpES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESS_E4typeES4_OT1_EUlS4_E_EES2_lS4_, (uint64_t)&v18, 1);
  if (result) {
    mlir::legalizeRegions(a1, v17);
  }
  return result;
}

uint64_t mlir::doPlacement(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  v69[6] = *MEMORY[0x1E4F143B8];
  v61[4] = 257;
  mlir::Operation::emitError(a1, (uint64_t)&v58, (uint64_t)&v46);
  v41[0] = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 3));
  memset(&v41[1], 0, 24);
  unsigned int v43 = v45;
  uint64_t v44 = 0x600000000;
  uint64_t v54 = &v43;
  uint64_t v58 = (uint64_t)&v54;
  mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a1, (mlir::Operation *)_ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_11doPlacementENS1_8ModuleOpExxxNS_8ArrayRefIPNS1_15DeviceInterfaceEEERKNS1_10DeviceInfoENSt3__18optionalIjEEbE3__1NS1_4func6FuncOpES2_EENSK_9enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESW_E4typeES4_OT1_EUlS4_E_EES2_lS4_, (uint64_t)&v58, 1);
  if (v44)
  {
    unint64_t v10 = *(void *)v43;
    v47[23] = -1;
    v47[24] = &v48;
    v47[25] = 0x600000000;
    uint64_t v49 = &v51;
    uint64_t v50 = 0x600000000;
    uint64_t v53 = 0;
    long long v52 = 0uLL;
    if (a6 == -1)
    {
      uint64_t v58 = -1;
      __dst = v61;
      unint64_t v60 = 0x600000000;
      char __src = v64;
      uint64_t v63 = 0x600000000;
      long long v65 = v52;
      uint64_t v66 = v53;
      uint64_t v37 = mlir::UnknownLoc::get(v41[0], v9);
      unsigned int v38 = (unsigned int *)mlir::OpBuilder::create<mlir::ModuleOp>(v41, v37);
    }
    uint64_t v11 = 0;
    uint64_t v12 = 1;
    uint64_t v55 = v57;
    uint64_t v56 = 0x200000000;
    unsigned int v13 = 0;
    if (a6)
    {
      unsigned int v14 = 1;
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = *(void *)(a5 + 8 * v15);
        if (v13 >= HIDWORD(v56))
        {
          uint64_t v17 = v11;
          uint64_t v18 = v12;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v13 + 1, 8);
          uint64_t v12 = v18;
          uint64_t v11 = v17;
          unsigned int v13 = v56;
        }
        *((void *)v55 + v13) = v16;
        unsigned int v13 = v56 + 1;
        LODWORD(v56) = v56 + 1;
        unint64_t v15 = v14++;
      }
      while (a6 > v15);
      unsigned int v40 = v55;
    }
    else
    {
      unsigned int v40 = v57;
    }
    uint64_t v19 = *((void *)&v52 + 1);
    unsigned int v20 = v13;
    uint64_t v58 = v13;
    __dst = v61;
    unint64_t v60 = 0x600000000;
    char __src = v64;
    uint64_t v63 = 0x600000000;
    long long v65 = v10;
    uint64_t v66 = 0;
    Context = (mlir::StringAttr *)&v58;
    LODWORD(v63) = v63 - 1;
    unint64_t v21 = v63;
    Context = (mlir::StringAttr *)v69;
    HIDWORD(v68) = 6;
    if (v63 <= 6)
    {
      if (v63) {
        memset(v69, 255, 8 * v63);
      }
      LODWORD(v68) = v21;
    }
    else
    {
      LODWORD(v68) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Context, v69, v63, 8);
      int v22 = Context;
      memset(Context, 255, 8 * v21);
      LODWORD(v68) = v21;
      if (v22 != (mlir::StringAttr *)v69)
      {
        if (__dst != v61)
        {
          free(__dst);
          int v22 = Context;
          LODWORD(v21) = v68;
        }
        __dst = v22;
        unint64_t v60 = __PAIR64__(HIDWORD(v68), v21);
        Context = (mlir::StringAttr *)v69;
        HIDWORD(v68) = 0;
LABEL_29:
        LODWORD(v68) = 0;
        if (Context != (mlir::StringAttr *)v69) {
          free(Context);
        }
        *((void *)&v65 + 1) = v19;
        Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v10 + 24));
        v69[0] = 0;
        v69[1] = 0;
        uint64_t v68 = 0;
        uint64_t v25 = mlir::UnknownLoc::get(Context, v24);
        mlir::OpBuilder::create<mlir::ModuleOp>(&Context, v25);
        uint64_t v27 = __dst;
        uint64_t v28 = v60;
        if (v60)
        {
          bzero(__dst, 8 * v60);
          uint64_t v29 = v28;
        }
        else
        {
          uint64_t v29 = 0;
        }
        v41[4] = 0;
        v41[5] = 0;
        int v42 = 0;
        if (v28 | v63)
        {
          uint64_t v30 = (uint64_t *)__src;
          uint64_t v31 = &v27[v29];
          uint64_t v32 = (uint64_t *)((char *)__src + 8 * v63);
          do
          {
            uint64_t v33 = *v30;
            uint64_t v34 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
            if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v33 + 48) + 32))(*(void *)(v33 + 48), v34))
            {
              *uint64_t v27 = 0;
            }
            else if (v20)
            {
              mlir::applyAnalysisConversion(v33, *(void *)(*(void *)v40 + 24), (mlir::FrozenRewritePatternSet *)(*(void *)v40 + 8));
            }
            ++v27;
            ++v30;
          }
          while (v27 != v31 || v30 != v32);
        }
        uint64_t v35 = mlir::UnknownLoc::get(Context, v26);
        uint64_t v36 = (unsigned int *)mlir::OpBuilder::create<mlir::ModuleOp>(&Context, v35);
      }
    }
    uint64_t v23 = v60;
    if (v60 >= v21)
    {
      if (v21) {
        memmove(__dst, v69, 8 * v21);
      }
      goto LABEL_28;
    }
    if (HIDWORD(v60) >= v21)
    {
      if (v60)
      {
        memmove(__dst, v69, 8 * v60);
        goto LABEL_26;
      }
    }
    else
    {
      LODWORD(v60) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v61, v21, 8);
    }
    uint64_t v23 = 0;
LABEL_26:
    if (v23 != v68) {
      memcpy((char *)__dst + 8 * v23, (char *)Context + 8 * v23, 8 * v68 - 8 * v23);
    }
LABEL_28:
    LODWORD(v60) = v21;
    goto LABEL_29;
  }
  mlir::InFlightDiagnostic::abandon(&v46);
  if (v43 != v45) {
    free(v43);
  }
  if (v46) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v46);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v47);
  return 1;
}

void sub_1806AC318()
{
  operator delete(v0);
}

uint64_t *mlir::anonymous namespace'::BuildContext::notifyOperationInserted(mlir::_anonymous_namespace_::BuildContext *this, mlir::Operation *a2)
{
  unint64_t v15 = a2;
  uint64_t v4 = *((void *)this + 2);
  uint64_t result = (uint64_t *)((char *)this + 16);
  uint64_t v3 = v4;
  int v5 = *((_DWORD *)result + 4);
  if (v5)
  {
    int v6 = v5 - 1;
    unsigned int v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (mlir::Operation **)(v3 + 8 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      return result;
    }
    unint64_t v10 = 0;
    int v11 = 1;
    while (v9 != (mlir::Operation *)-4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == (mlir::Operation *)-8192;
      }
      if (v12) {
        unint64_t v10 = (uint64_t *)v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      uint64_t v8 = (mlir::Operation **)(v3 + 8 * v7);
      uint64_t v9 = *v8;
      if (*v8 == a2) {
        return result;
      }
    }
    if (v10) {
      unsigned int v14 = v10;
    }
    else {
      unsigned int v14 = (uint64_t *)v8;
    }
  }
  else
  {
    unsigned int v14 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)result, v14, (uint64_t *)&v15);
}

uint64_t llvm::detail::DenseSetImpl<mlir::Operation *,llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,llvm::DenseMapInfo<mlir::Operation *,void>>::DenseSetImpl<mlir::Operation **>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  if (*a3 == *a2
    || (unint64_t v6 = (*a3 - *a2 - 1) | ((unint64_t)(*a3 - *a2 - 1) >> 1),
        unint64_t v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4),
        unint64_t v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16),
        LODWORD(v8) = HIDWORD(v8) | v8,
        BOOL v9 = __CFADD__(v8, 1),
        int v10 = v8 + 1,
        v9))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    unint64_t v24 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
    unint64_t v25 = v24 | (v24 >> 2) | ((v24 | (v24 >> 2)) >> 4);
    LODWORD(v25) = (((v25 | (v25 >> 8)) >> 16) | v25 | (v25 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v25;
    buffer = (int64x2_t *)llvm::allocate_buffer(8 * v25, (std::align_val_t)8uLL);
    *(void *)a1 = buffer;
    *(void *)(a1 + 8) = 0;
    uint64_t v27 = *(unsigned int *)(a1 + 16);
    if (v27)
    {
      unint64_t v28 = (v27 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      uint64_t v29 = (char *)buffer;
      if (v28 < 3) {
        goto LABEL_30;
      }
      unint64_t v30 = v28 + 1;
      uint64_t v29 = &buffer->i8[8 * (v30 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v31 = buffer + 1;
      int64x2_t v32 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v31[-1] = v32;
        *uint64_t v31 = v32;
        v31 += 2;
        v33 -= 4;
      }
      while (v33);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        uint64_t v34 = &buffer->i8[8 * v27];
        do
        {
          *(void *)uint64_t v29 = -4096;
          v29 += 8;
        }
        while (v29 != v34);
      }
    }
  }
  int v11 = *a2;
  BOOL v12 = *a3;
  if (v11 != v12)
  {
    while (1)
    {
      int v17 = *(_DWORD *)(a1 + 16);
      if (!v17) {
        break;
      }
      int v13 = v17 - 1;
      unsigned int v14 = ((*v11 >> 4) ^ (*v11 >> 9)) & v13;
      unint64_t v15 = (uint64_t *)(*(void *)a1 + 8 * v14);
      uint64_t v16 = *v15;
      if (*v11 != *v15)
      {
        uint64_t v19 = 0;
        int v20 = 1;
        while (v16 != -4096)
        {
          if (v19) {
            BOOL v21 = 0;
          }
          else {
            BOOL v21 = v16 == -8192;
          }
          if (v21) {
            uint64_t v19 = v15;
          }
          unsigned int v22 = v14 + v20++;
          unsigned int v14 = v22 & v13;
          unint64_t v15 = (uint64_t *)(*(void *)a1 + 8 * v14);
          uint64_t v16 = *v15;
          if (*v11 == *v15) {
            goto LABEL_8;
          }
        }
        if (v19) {
          uint64_t v18 = v19;
        }
        else {
          uint64_t v18 = v15;
        }
        goto LABEL_11;
      }
LABEL_8:
      if (++v11 == v12) {
        return a1;
      }
    }
    uint64_t v18 = 0;
LABEL_11:
    llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(a1, v18, v11);
    goto LABEL_8;
  }
  return a1;
}

void mlir::anonymous namespace'::eraseOpsFromRegion(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *(void **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  uint64_t v8 = *(void *)a1 + 8 * v7;
  BOOL v9 = (void *)v8;
  if (v7)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = *((unsigned int *)a2 + 4);
    unsigned int v12 = v11 - 1;
    uint64_t v13 = *a2 + 8 * v11;
    unsigned int v14 = *(void **)a1;
    while (1)
    {
      uint64_t v15 = *v14;
      if (!v11) {
        break;
      }
      LODWORD(v16) = ((v15 >> 4) ^ (v15 >> 9)) & v12;
      int v17 = (uint64_t *)(v10 + 8 * v16);
      uint64_t v18 = *v17;
      if (*v17 == v15)
      {
        if (v17 == (uint64_t *)v13) {
          goto LABEL_12;
        }
      }
      else
      {
        int v19 = 1;
        do
        {
          if (v18 == -4096) {
            goto LABEL_12;
          }
          int v20 = v16 + v19++;
          uint64_t v16 = v20 & v12;
          uint64_t v18 = *(void *)(v10 + 8 * v16);
        }
        while (v18 != v15);
        if (v10 + 8 * v16 == v13)
        {
LABEL_12:
          unint64_t v6 = v14;
          break;
        }
      }
      if (++v14 == (void *)v8) {
        goto LABEL_33;
      }
    }
    uint64_t v21 = *(unsigned int *)(a3 + 8);
    if (v21 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(a3 + 8);
    }
    *(void *)(*(void *)a3 + 8 * v21) = v15;
    ++*(_DWORD *)(a3 + 8);
  }
  if (v6 != (void *)v8)
  {
    unsigned int v22 = v6 + 1;
    if (v6 + 1 != (void *)v8)
    {
      BOOL v9 = v6;
      while (1)
      {
        uint64_t v23 = *v22;
        uint64_t v24 = *a2;
        uint64_t v25 = *((unsigned int *)a2 + 4);
        if (!v25) {
          goto LABEL_27;
        }
        LODWORD(v26) = ((v23 >> 4) ^ (v23 >> 9)) & (v25 - 1);
        uint64_t v27 = (uint64_t *)(v24 + 8 * v26);
        uint64_t v28 = *v27;
        if (*v27 != v23) {
          break;
        }
LABEL_28:
        if (v27 == (uint64_t *)(v24 + 8 * v25))
        {
          unint64_t v31 = *(unsigned int *)(a3 + 8);
          if (v31 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v31 + 1, 8);
            unint64_t v31 = *(unsigned int *)(a3 + 8);
          }
          *(void *)(*(void *)a3 + 8 * v31) = v23;
          ++*(_DWORD *)(a3 + 8);
        }
        else
        {
          *v9++ = v23;
        }
        if (++v22 == (uint64_t *)v8) {
          goto LABEL_33;
        }
      }
      int v29 = 1;
      while (v28 != -4096)
      {
        int v30 = v26 + v29++;
        uint64_t v26 = v30 & (v25 - 1);
        uint64_t v28 = *(void *)(v24 + 8 * v26);
        if (v28 == v23)
        {
          uint64_t v27 = (uint64_t *)(v24 + 8 * v26);
          goto LABEL_28;
        }
      }
LABEL_27:
      uint64_t v27 = (uint64_t *)(v24 + 8 * v25);
      goto LABEL_28;
    }
    BOOL v9 = v6;
  }
LABEL_33:
  *(_DWORD *)(a1 + 8) = ((unint64_t)v9 - *(void *)a1) >> 3;
}

uint64_t llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  int v2 = *(_DWORD *)(result + 8);
  int v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64) {
    int v3 = 64;
  }
  if (v2) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v4 != v1) {
    llvm::deallocate_buffer(*(llvm **)result, (void *)(8 * v1));
  }
  *(void *)(result + 8) = 0;
  if (v1)
  {
    int v5 = *(llvm **)result;
    unint64_t v6 = (v1 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v7 = *(llvm **)result;
    if (v6 < 3) {
      goto LABEL_12;
    }
    unint64_t v8 = v6 + 1;
    uint64_t v7 = (llvm *)((char *)v5 + 8 * (v8 & 0x3FFFFFFFFFFFFFFCLL));
    BOOL v9 = (int64x2_t *)((char *)v5 + 16);
    int64x2_t v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v9[-1] = v10;
      int64x2_t *v9 = v10;
      v9 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_12:
      unsigned int v12 = (llvm *)((char *)v5 + 8 * v1);
      do
      {
        *(void *)uint64_t v7 = -4096;
        uint64_t v7 = (llvm *)((char *)v7 + 8);
      }
      while (v7 != v12);
    }
  }
  return result;
}

uint64_t mlir::emitOptionalWarning<char const(&)[37],llvm::StringRef &>(uint64_t a1, char a2, char *a3, const void ***a4)
{
  v12[23] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitWarning(a1, (uint64_t)&v11);
  if (v11)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, a3);
    __int16 v10 = 261;
    unint64_t v6 = a4[1];
    v9[0] = *a4;
    v9[1] = v6;
    mlir::Diagnostic::operator<<((uint64_t)v12, v9);
  }
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v11);
  if (v11) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::anonymous namespace'::BuildContext::updateCreatedOpsList(mlir::Operation *,mlir::Operation *,mlir::ConversionTarget const&)::{lambda(mlir::Operation *)#1}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v13 = a2;
  uint64_t result = *a1;
  int v3 = *((_DWORD *)result + 4);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v6 = (uint64_t *)(*result + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      return result;
    }
    unint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        unint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      unint64_t v6 = (uint64_t *)(*result + 8 * v5);
      uint64_t v7 = *v6;
      if (*v6 == a2) {
        return result;
      }
    }
    if (v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v6;
    }
  }
  else
  {
    unsigned int v12 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)result, v12, &v13);
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::anonymous namespace'::BuildContext::updateCreatedOpsList(mlir::Operation *,mlir::Operation *,mlir::ConversionTarget const&)::{lambda(mlir::Operation *)#2}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = a2;
    int v6 = v4 - 1;
    unsigned int v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v8 = (uint64_t *)(*(void *)v3 + 8 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_14;
    }
    BOOL v10 = 0;
    int v11 = 1;
    while (v9 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == -8192;
      }
      if (v12) {
        BOOL v10 = v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      unint64_t v8 = (uint64_t *)(*(void *)v3 + 8 * v7);
      uint64_t v9 = *v8;
      if (*v8 == a2) {
        goto LABEL_14;
      }
    }
    if (v10) {
      unsigned int v14 = v10;
    }
    else {
      unsigned int v14 = v8;
    }
  }
  else
  {
    unsigned int v14 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(v3, v14, &v27);
  uint64_t v5 = v27;
LABEL_14:
  uint64_t v15 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 48) + 32))(*(void *)(v5 + 48), v15);
  if (!result) {
    return result;
  }
  uint64_t result = (uint64_t *)a1[1];
  int v17 = *((_DWORD *)result + 4);
  if (v17)
  {
    int v18 = v17 - 1;
    unsigned int v19 = ((v27 >> 4) ^ (v27 >> 9)) & v18;
    int v20 = (uint64_t *)(*result + 8 * v19);
    uint64_t v21 = *v20;
    if (v27 == *v20) {
      return result;
    }
    unsigned int v22 = 0;
    int v23 = 1;
    while (v21 != -4096)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v21 == -8192;
      }
      if (v24) {
        unsigned int v22 = v20;
      }
      unsigned int v25 = v19 + v23++;
      unsigned int v19 = v25 & v18;
      int v20 = (uint64_t *)(*result + 8 * v19);
      uint64_t v21 = *v20;
      if (v27 == *v20) {
        return result;
      }
    }
    if (v22) {
      uint64_t v26 = v22;
    }
    else {
      uint64_t v26 = v20;
    }
  }
  else
  {
    uint64_t v26 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)result, v26, &v27);
}

uint64_t llvm::SmallVectorImpl<mlir::Operation *>::insert_one_impl<mlir::Operation *>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (*(void *)a1 + 8 * v6 == a2)
  {
    uint64_t v10 = *a3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 8);
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      uint64_t v5 = *(void *)a1;
    }
    *(void *)(v5 + 8 * v6) = v10;
    unsigned int v11 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v11;
    return *(void *)a1 + 8 * v11 - 8;
  }
  else
  {
    uint64_t v7 = (a2 - v5) >> 3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 8);
      uint64_t v5 = *(void *)a1;
      uint64_t v6 = *(unsigned int *)(a1 + 8);
    }
    unint64_t v8 = (uint64_t *)(v5 + 8 * v7);
    *(void *)(v5 + 8 * v6) = *(void *)(v5 + 8 * v6 - 8);
    uint64_t v9 = *(void *)a1 + 8 * v6 - 8;
    if ((uint64_t *)v9 != v8)
    {
      memmove(v8 + 1, v8, v9 - (void)v8);
      LODWORD(v6) = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v6 + 1;
    *unint64_t v8 = *a3;
  }
  return (uint64_t)v8;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,mlir::anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **,false>(uint64_t result, mlir::Block ***a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = a2 - 1;
    uint64_t v88 = a2;
    uint64_t v89 = a2 - 2;
    unsigned int v11 = a2 - 3;
    BOOL v12 = (mlir::Operation **)v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = ((char *)a2 - (char *)v12) >> 3;
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t result = mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)v9);
                if (result)
                {
                  uint64_t v41 = *(mlir::Operation **)v9;
                  *(void *)unint64_t v9 = *(a2 - 1);
                  *(a2 - 1) = (mlir::Block **)v41;
                }
                break;
              case 3:
                break;
              case 4:
                int v42 = (mlir::Block ***)(v9 + 16);
                uint64_t result = mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)(v9 + 16));
                if (result)
                {
                  unsigned int v43 = *v42;
                  void *v42 = *(a2 - 1);
                  *(a2 - 1) = v43;
                  uint64_t result = mlir::Operation::isBeforeInBlock(*v42, *(mlir::Operation **)(v9 + 8));
                  if (result)
                  {
                    uint64_t v45 = *(void *)(v9 + 8);
                    uint64_t v44 = *(mlir::Block ***)(v9 + 16);
                    uint64_t v46 = *(mlir::Operation **)v9;
                    *(void *)(v9 + 8) = v44;
                    *(void *)(v9 + 16) = v45;
                    uint64_t result = mlir::Operation::isBeforeInBlock(v44, v46);
                    if (result) {
                      *(int8x16_t *)unint64_t v9 = vextq_s8(*(int8x16_t *)v9, *(int8x16_t *)v9, 8uLL);
                    }
                  }
                }
                break;
              case 5:
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            unint64_t v47 = v9 + 8;
            BOOL v49 = (mlir::Block ***)v9 == a2 || v47 == (void)a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                unint64_t v51 = v9;
                do
                {
                  uint64_t v54 = *(mlir::Operation **)v51;
                  uint64_t v53 = *(mlir::Block ***)(v51 + 8);
                  unint64_t v51 = v47;
                  uint64_t result = mlir::Operation::isBeforeInBlock(v53, v54);
                  if (result)
                  {
                    uint64_t v55 = *(mlir::Block ***)v51;
                    uint64_t v56 = v50;
                    do
                    {
                      *(void *)(v9 + v56 + 8) = *(void *)(v9 + v56);
                      if (!v56)
                      {
                        long long v52 = (void *)v9;
                        goto LABEL_78;
                      }
                      uint64_t result = mlir::Operation::isBeforeInBlock(v55, *(mlir::Operation **)(v9 + v56 - 8));
                      v56 -= 8;
                    }
                    while ((result & 1) != 0);
                    long long v52 = (void *)(v9 + v56 + 8);
LABEL_78:
                    void *v52 = v55;
                  }
                  unint64_t v47 = v51 + 8;
                  v50 += 8;
                }
                while ((mlir::Block ***)(v51 + 8) != a2);
              }
            }
            else if (!v49)
            {
              do
              {
                unsigned int v83 = *(mlir::Operation **)v9;
                BOOL v82 = *(mlir::Block ***)(v9 + 8);
                unint64_t v9 = v47;
                uint64_t result = mlir::Operation::isBeforeInBlock(v82, v83);
                if (result)
                {
                  uint64_t v84 = *(mlir::Operation **)v9;
                  int v85 = (void *)v9;
                  do
                  {
                    unint64_t v86 = v85;
                    uint64_t v87 = *--v85;
                    *unint64_t v86 = v87;
                    uint64_t result = mlir::Operation::isBeforeInBlock((mlir::Block **)v84, (mlir::Operation *)*(v86 - 2));
                  }
                  while ((result & 1) != 0);
                  void *v85 = v84;
                }
                unint64_t v47 = v9 + 8;
              }
              while ((mlir::Block ***)(v9 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((mlir::Block ***)v9 != a2)
            {
              int64_t v57 = (unint64_t)(v14 - 2) >> 1;
              int64_t v90 = v57;
              do
              {
                int64_t v58 = v57;
                if (v90 >= v57)
                {
                  uint64_t v59 = (2 * v57) | 1;
                  unint64_t v60 = v9 + 8 * v59;
                  if (2 * v57 + 2 < v14
                    && mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v60, *(mlir::Operation **)(v60 + 8)))
                  {
                    v60 += 8;
                    uint64_t v59 = 2 * v58 + 2;
                  }
                  uint64_t v61 = (mlir::Operation **)(v9 + 8 * v58);
                  uint64_t result = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v60, *v61);
                  if ((result & 1) == 0)
                  {
                    uint64_t v62 = *v61;
                    do
                    {
                      uint64_t v63 = (mlir::Operation **)v60;
                      *uint64_t v61 = *(mlir::Operation **)v60;
                      if (v90 < v59) {
                        break;
                      }
                      uint64_t v64 = (2 * v59) | 1;
                      unint64_t v60 = v9 + 8 * v64;
                      uint64_t v65 = 2 * v59 + 2;
                      if (v65 < v14
                        && mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v60, *(mlir::Operation **)(v60 + 8)))
                      {
                        v60 += 8;
                        uint64_t v64 = v65;
                      }
                      uint64_t result = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v60, v62);
                      uint64_t v61 = v63;
                      uint64_t v59 = v64;
                    }
                    while (!result);
                    *uint64_t v63 = v62;
                    a2 = v88;
                  }
                }
                int64_t v57 = v58 - 1;
              }
              while (v58);
              uint64_t v66 = (unint64_t)v13 >> 3;
              do
              {
                uint64_t v69 = a2;
                uint64_t v70 = 0;
                uint64_t v71 = *(mlir::Operation **)v9;
                uint64_t v72 = (void *)v9;
                do
                {
                  uint64_t v73 = (mlir::Block ***)&v72[v70 + 1];
                  uint64_t v74 = (2 * v70) | 1;
                  uint64_t v75 = 2 * v70 + 2;
                  if (v75 < v66)
                  {
                    uint64_t result = mlir::Operation::isBeforeInBlock(*v73, (mlir::Operation *)v72[v70 + 2]);
                    if (result)
                    {
                      ++v73;
                      uint64_t v74 = v75;
                    }
                  }
                  *uint64_t v72 = *v73;
                  uint64_t v72 = v73;
                  uint64_t v70 = v74;
                }
                while (v74 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                int v76 = v69 - 1;
                if (v73 == v76)
                {
                  int v67 = v76;
                  *uint64_t v73 = (mlir::Block **)v71;
                }
                else
                {
                  *uint64_t v73 = *v76;
                  int v67 = v76;
                  *int v76 = (mlir::Block **)v71;
                  uint64_t v77 = (uint64_t)v73 - v9 + 8;
                  if (v77 >= 9)
                  {
                    unint64_t v78 = (((unint64_t)v77 >> 3) - 2) >> 1;
                    __int32 v79 = (mlir::Block ***)(v9 + 8 * v78);
                    uint64_t result = mlir::Operation::isBeforeInBlock(*v79, (mlir::Operation *)*v73);
                    if (result)
                    {
                      uint64_t v80 = *v73;
                      do
                      {
                        int v81 = v79;
                        *uint64_t v73 = *v79;
                        if (!v78) {
                          break;
                        }
                        unint64_t v78 = (v78 - 1) >> 1;
                        __int32 v79 = (mlir::Block ***)(v9 + 8 * v78);
                        uint64_t result = mlir::Operation::isBeforeInBlock(*v79, (mlir::Operation *)v80);
                        uint64_t v73 = v81;
                      }
                      while ((result & 1) != 0);
                      char *v81 = v80;
                    }
                  }
                }
                BOOL v68 = v66-- <= 2;
                a2 = v67;
              }
              while (!v68);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = (mlir::Block ***)(v9 + 8 * ((unint64_t)v14 >> 1));
          if ((unint64_t)v13 < 0x401) {
            break;
          }
          uint64_t v17 = 8 * v15;
          int v18 = *(mlir::Operation **)v9;
          *(void *)unint64_t v9 = *(void *)(v9 + v17);
          *(void *)(v9 + v17) = v18;
          a2 = v88;
          --a3;
          if (a4) {
            goto LABEL_12;
          }
LABEL_11:
          if (mlir::Operation::isBeforeInBlock(*(mlir::Block ***)(v9 - 8), *(mlir::Operation **)v9)) {
            goto LABEL_12;
          }
          int64x2_t v32 = *(mlir::Operation **)v9;
          uint64_t result = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v9, (mlir::Operation *)*v10);
          if (result)
          {
            BOOL v12 = (mlir::Operation **)v9;
            do
            {
              uint64_t v33 = v12[1];
              ++v12;
              uint64_t result = mlir::Operation::isBeforeInBlock((mlir::Block **)v32, v33);
            }
            while ((result & 1) == 0);
          }
          else
          {
            unint64_t v34 = v9 + 8;
            do
            {
              BOOL v12 = (mlir::Operation **)v34;
              if (v34 >= (unint64_t)a2) {
                break;
              }
              v34 += 8;
              uint64_t result = mlir::Operation::isBeforeInBlock((mlir::Block **)v32, *v12);
            }
            while (!result);
          }
          uint64_t v35 = (mlir::Operation **)a2;
          if (v12 < (mlir::Operation **)a2)
          {
            uint64_t v35 = (mlir::Operation **)a2;
            do
            {
              uint64_t v36 = *--v35;
              uint64_t result = mlir::Operation::isBeforeInBlock((mlir::Block **)v32, v36);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v35)
          {
            uint64_t v37 = *v12;
            *BOOL v12 = *v35;
            *uint64_t v35 = v37;
            do
            {
              unsigned int v38 = v12[1];
              ++v12;
            }
            while (!mlir::Operation::isBeforeInBlock((mlir::Block **)v32, v38));
            do
            {
              unsigned int v39 = *--v35;
              uint64_t result = mlir::Operation::isBeforeInBlock((mlir::Block **)v32, v39);
            }
            while ((result & 1) != 0);
          }
          unsigned int v40 = v12 - 1;
          BOOL v4 = (unint64_t)(v12 - 1) >= v9;
          BOOL v5 = v12 - 1 == (mlir::Operation **)v9;
          if (v12 - 1 != (mlir::Operation **)v9) {
            *(void *)unint64_t v9 = *v40;
          }
          a4 = 0;
          *unsigned int v40 = v32;
        }
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v19 = 0;
        int v20 = *(mlir::Operation **)v9;
        do
        {
          BOOL v21 = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)(v9 + v19 + 8), v20);
          v19 += 8;
        }
        while (v21);
        unint64_t v22 = v9 + v19;
        if (v19 == 8)
        {
          a2 = v88;
          do
          {
            if (v22 >= (unint64_t)a2) {
              break;
            }
            BOOL v24 = *--a2;
          }
          while (!mlir::Operation::isBeforeInBlock(v24, v20));
        }
        else
        {
          do
            int v23 = *--a2;
          while (!mlir::Operation::isBeforeInBlock(v23, v20));
        }
        if (v22 >= (unint64_t)a2)
        {
          int v30 = (mlir::Block ***)(v22 - 8);
          if (v22 - 8 == v9) {
            goto LABEL_30;
          }
LABEL_29:
          *(void *)unint64_t v9 = *v30;
          goto LABEL_30;
        }
        unsigned int v25 = (mlir::Block ***)(v9 + v19);
        uint64_t v26 = a2;
        do
        {
          uint64_t v27 = *v25;
          *unsigned int v25 = *v26;
          *uint64_t v26 = v27;
          do
          {
            uint64_t v28 = v25[1];
            ++v25;
          }
          while (mlir::Operation::isBeforeInBlock(v28, v20));
          do
            int v29 = *--v26;
          while (!mlir::Operation::isBeforeInBlock(v29, v20));
        }
        while (v25 < v26);
        int v30 = v25 - 1;
        if (v30 != (mlir::Block ***)v9) {
          goto LABEL_29;
        }
LABEL_30:
        uint64_t *v30 = (mlir::Block **)v20;
        BOOL v4 = v22 >= (unint64_t)a2;
        a2 = v88;
        if (v4) {
          break;
        }
LABEL_34:
        a4 = 0;
        BOOL v12 = (mlir::Operation **)(v30 + 1);
      }
      BOOL v12 = (mlir::Operation **)(v30 + 1);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_34;
      }
    }
    a2 = v30;
    if (!v31) {
      continue;
    }
    return result;
  }
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **,0>(mlir::Operation **a1, mlir::Block ***a2, mlir::Block ***a3, mlir::Block ***a4, mlir::Block ***a5)
{
  if (mlir::Operation::isBeforeInBlock(*a4, (mlir::Operation *)*a3))
  {
    uint64_t v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (mlir::Operation::isBeforeInBlock(*a3, (mlir::Operation *)*a2))
    {
      unsigned int v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      if (mlir::Operation::isBeforeInBlock(*a2, *a1))
      {
        BOOL v12 = *a1;
        *a1 = (mlir::Operation *)*a2;
        *a2 = (mlir::Block **)v12;
      }
    }
  }
  BOOL result = mlir::Operation::isBeforeInBlock(*a5, (mlir::Operation *)*a4);
  if (result)
  {
    uint64_t v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    BOOL result = mlir::Operation::isBeforeInBlock(*a4, (mlir::Operation *)*a3);
    if (result)
    {
      unint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      BOOL result = mlir::Operation::isBeforeInBlock(*a3, (mlir::Operation *)*a2);
      if (result)
      {
        uint64_t v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        BOOL result = mlir::Operation::isBeforeInBlock(*a2, *a1);
        if (result)
        {
          uint64_t v17 = *a1;
          *a1 = (mlir::Operation *)*a2;
          *a2 = (mlir::Block **)v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **>(mlir::Operation **a1, mlir::Block ***a2, mlir::Block ***a3)
{
  BOOL v6 = mlir::Operation::isBeforeInBlock(*a2, *a1);
  BOOL result = mlir::Operation::isBeforeInBlock(*a3, (mlir::Operation *)*a2);
  if (v6)
  {
    unint64_t v8 = *a1;
    if (result)
    {
      *a1 = (mlir::Operation *)*a3;
      *a3 = (mlir::Block **)v8;
    }
    else
    {
      *a1 = (mlir::Operation *)*a2;
      *a2 = (mlir::Block **)v8;
      BOOL result = mlir::Operation::isBeforeInBlock(*a3, v8);
      if (result)
      {
        unsigned int v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    unint64_t v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    BOOL result = mlir::Operation::isBeforeInBlock(*a2, *a1);
    if (result)
    {
      uint64_t v10 = *a1;
      *a1 = (mlir::Operation *)*a2;
      *a2 = (mlir::Block **)v10;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **>(uint64_t a1, mlir::Block ***a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)a1))
      {
        BOOL v6 = *(mlir::Operation **)a1;
        *(void *)a1 = *(a2 - 1);
        *(a2 - 1) = (mlir::Block **)v6;
      }
      return 1;
    case 3:
      return 1;
    case 4:
      unint64_t v15 = (mlir::Block ***)(a1 + 16);
      if (mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)(a1 + 16)))
      {
        uint64_t v16 = *v15;
        *unint64_t v15 = *(a2 - 1);
        *(a2 - 1) = v16;
        if (mlir::Operation::isBeforeInBlock(*v15, *(mlir::Operation **)(a1 + 8)))
        {
          uint64_t v18 = *(void *)(a1 + 8);
          uint64_t v17 = *(mlir::Block ***)(a1 + 16);
          uint64_t v19 = *(mlir::Operation **)a1;
          *(void *)(a1 + 8) = v17;
          *(void *)(a1 + 16) = v18;
          if (mlir::Operation::isBeforeInBlock(v17, v19)) {
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      return 1;
    default:
      uint64_t v7 = (mlir::Operation **)(a1 + 16);
      unint64_t v8 = (mlir::Block ***)(a1 + 24);
      if ((mlir::Block ***)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (mlir::Operation::isBeforeInBlock(*v8, *v7))
    {
      BOOL v12 = *v8;
      uint64_t v13 = v9;
      do
      {
        uint64_t v14 = a1 + v13;
        *(void *)(a1 + v13 + 24) = *(void *)(a1 + v13 + 16);
        if (v13 == -16)
        {
          unsigned int v11 = (mlir::Block ***)a1;
          goto LABEL_7;
        }
        v13 -= 8;
      }
      while (mlir::Operation::isBeforeInBlock(v12, *(mlir::Operation **)(v14 + 8)));
      unsigned int v11 = (mlir::Block ***)(a1 + v13 + 24);
LABEL_7:
      uint64_t *v11 = v12;
      if (++v10 == 8) {
        return v8 + 1 == a2;
      }
    }
    uint64_t v7 = (mlir::Operation **)v8;
    v9 += 8;
    if (++v8 == a2) {
      return 1;
    }
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::ModuleOp>(mlir::StringAttr **a1, uint64_t a2)
{
  v16[38] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  uint64_t v5 = mlir::RegisteredOperationName::lookup((int8x16_t *)"builtin.module", (const unsigned __int8 *)0xE, Context);
  if (!v6)
  {
    __int16 v15 = 1283;
    v14[2] = (uint64_t)"builtin.module";
    v14[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v13 = 259;
    llvm::operator+(v14, (uint64_t *)&v12, (uint64_t)v16);
    llvm::report_fatal_error((llvm::Twine *)v16, 1);
  }
  mlir::OperationState::OperationState(v16, a2, v5);
  v10[0] = 0;
  v10[16] = 0;
  mlir::ModuleOp::build(a1, (mlir::OperationState *)v16, (uint64_t)v10);
  uint64_t v7 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v16);
  if (*(_UNKNOWN **)(*((void *)v7 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v16);
  return v8;
}

void mlir::anonymous namespace'::PlacementState::materializeState(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  v234[1] = *MEMORY[0x1E4F143B8];
  uint64_t v196 = &v198;
  uint64_t v197 = 0x100000000;
  uint64_t v193 = &v195;
  uint64_t v194 = 0x600000000;
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v3 | v4)
  {
    uint64_t v5 = *(llvm ***)(a1 + 8);
    char v6 = *(uint64_t **)(a1 + 72);
    uint64_t v7 = 8 * v4 - 8;
    uint64_t v8 = 8 * v3 - 8;
    uint64_t v9 = -1;
    do
    {
      Value = *v5;
      uint64_t v14 = *v6;
      uint64_t v15 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v14 + 48) + 32))(*(void *)(v14 + 48), v15) & 1) == 0)
      {
        uint64_t v16 = Value;
        if (v9 == -1 || Value != (llvm *)v9)
        {
          int v17 = v194;
          if (v194 >= HIDWORD(v194))
          {
            llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>((uint64_t)&v193, (uint64_t *)&Value);
          }
          else
          {
            *((void *)v193 + v194) = Value;
            LODWORD(v194) = v17 + 1;
          }
          if (v197 < HIDWORD(v197))
          {
            int v10 = (char *)v196 + 64 * (unint64_t)v197;
            *int v10 = v10 + 2;
            v10[1] = 0x600000000;
            LODWORD(v197) = v197 + 1;
          }
          else
          {
            llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::Value,6u>,false>::growAndEmplaceBack<>((uint64_t)&v196);
          }
          uint64_t v9 = (uint64_t)v16;
        }
        uint64_t v11 = (char *)v196 + 64 * (unint64_t)v197;
        unint64_t v12 = *((unsigned int *)v11 - 14);
        if (v12 >= *((unsigned int *)v11 - 13))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v11 - 64), v11 - 48, v12 + 1, 8);
          unint64_t v12 = *((unsigned int *)v11 - 14);
        }
        *(void *)(*((void *)v11 - 8) + 8 * v12) = v14;
        ++*((_DWORD *)v11 - 14);
      }
      ++v5;
      ++v6;
      uint64_t v13 = v8 | v7;
      v7 -= 8;
      v8 -= 8;
    }
    while (v13);
  }
  BOOL v190 = &v192;
  uint64_t v191 = 0x600000000;
  int v187 = &v189;
  uint64_t v188 = 0x600000000;
  uint64_t v184 = &v186;
  uint64_t v185 = 0x600000000;
  uint64_t v181 = &v183;
  uint64_t v182 = 0x600000000;
  uint64_t v178 = &v180;
  uint64_t v18 = (mlir::Attribute *)(*(void *)(a1 + 136) + 24);
  uint64_t v179 = 0x600000000;
  Context = (mlir::placement::TimerHandleType *)mlir::Attribute::getContext(v18);
  uint64_t v22 = a2[10];
  unint64_t v21 = a2[11];
  unsigned int v135 = a2 + 16;
  v157[0] = Context;
  v157[1] = 0;
  uint64_t v159 = 0;
  uint64_t v158 = 0;
  uint64_t v23 = *(void *)((((unint64_t)&a2[4 * ((v21 >> 23) & 1) + 17] + ((v21 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * v22
                  + 8);
  if (v23) {
    uint64_t v24 = v23 - 8;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(void *)(v24 + 40);
  uint64_t v158 = (_OWORD *)v24;
  uint64_t v159 = v25;
  uint64_t v156 = *(void *)(a1 + 136);
  uint64_t v26 = mlir::UnknownLoc::get(Context, v20);
  int v211 = (void *)mlir::SymbolRefAttr::get(*(mlir::SymbolRefAttr **)(a1 + 136), v27);
  Value = (llvm *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v211);
  Value = (llvm *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
  uint64_t v215 = v28;
  FunctionType = (void *)mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v156);
  uint64_t v155 = mlir::OpBuilder::create<mlir::func::FuncOp,llvm::StringRef const&,mlir::FunctionType &>(v157, v26, (uint64_t *)&Value, (uint64_t *)&FunctionType);
  int v29 = mlir::detail::FunctionOpInterfaceTrait<mlir::func::FuncOp>::addEntryBlock((mlir::func::FuncOp *)&v155);
  uint64_t v30 = *((void *)v29 + 5);
  if (!v158)
  {
    uint64_t v158 = 0;
    uint64_t v159 = 0;
  }
  v147[0] = 0;
  v147[1] = 0;
  int v148 = 0;
  int v149 = 0;
  uint64_t v150 = 0;
  int v151 = 0;
  uint64_t v152 = 0;
  uint64_t v153 = 0;
  unsigned int v154 = 0;
  Body = (void *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v156);
  if ((void *)*Body != Body)
  {
    uint64_t v32 = Body[1];
    uint64_t v33 = v32 ? v32 - 8 : 0;
    unint64_t v34 = *(void ***)(v33 + 48);
    uint64_t v35 = *(void *)(v33 + 56) - (void)v34;
    if (v35)
    {
      uint64_t v36 = 8 * (v35 >> 3);
      do
      {
        uint64_t v37 = *(void *)(*((void *)v29 + 6) + 8 * *((unsigned int *)*v34 + 6));
        int v211 = *v34;
        Value = 0;
        char v38 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v147, (unint64_t *)&v211, &Value);
        unsigned int v39 = Value;
        if ((v38 & 1) == 0)
        {
          unsigned int v39 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v147, (uint64_t)&v211, (unint64_t *)&v211, Value);
          *unsigned int v39 = v211;
          v39[1] = 0;
        }
        v39[1] = v37;
        ++v34;
        v36 -= 8;
      }
      while (v36);
    }
  }
  uint64_t v40 = *(void *)((((unint64_t)&v135[4 * (((unint64_t)a2[11] >> 23) & 1) + 1]
                    + (((unint64_t)a2[11] >> 21) & 0x7F8)
                    + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * a2[10]
                  + 8);
  int v140 = (_OWORD *)(v40 - 8);
  if (v40) {
    uint64_t v41 = v40 - 8;
  }
  else {
    uint64_t v41 = 0;
  }
  uint64_t v42 = *(void *)(v41 + 40);
  uint64_t v158 = (_OWORD *)v41;
  uint64_t v139 = v42;
  uint64_t v159 = v42;
  uint64_t v175 = v177;
  uint64_t v176 = 0x200000000;
  if (!v197) {
    goto LABEL_212;
  }
  uint64_t v43 = 0;
  uint64_t v44 = (const void **)v196;
  unsigned int v138 = (const void **)((char *)v196 + 64 * (unint64_t)v197);
  uint64_t v45 = (char *)&v206;
  uint64_t v46 = v30;
  while (1)
  {
    LODWORD(v191) = 0;
    LODWORD(v188) = 0;
    LODWORD(v185) = 0;
    LODWORD(v182) = 0;
    LODWORD(v179) = 0;
    unint64_t v47 = *v44;
    unint64_t v48 = *((unsigned int *)v44 + 2);
    int v211 = v213;
    uint64_t v212 = 0x600000000;
    if (v48 >= 7) {
      break;
    }
    if (v48)
    {
      uint64_t v49 = 0;
      uint64_t v50 = v213;
      goto LABEL_41;
    }
    int v51 = 0;
    long long v52 = v213;
LABEL_42:
    FunctionType = &v206;
    int v53 = v51 + v48;
    LODWORD(v212) = v53;
    *(void *)(a1 + 152) = *((unsigned int *)v44 + 2);
    uint64_t v205 = 0x600000000;
    if (v53)
    {
      uint64_t v144 = v44;
      uint64_t v145 = v43;
      uint64_t v54 = v46;
      uint64_t v55 = v29;
      uint64_t v56 = &v52[8 * v53];
      do
      {
        uint64_t v57 = *(void *)v52;
        if ((*(unsigned char *)(*(void *)v52 + 46) & 0x80) != 0)
        {
          uint64_t v58 = *(unsigned int *)(v57 + 68);
          if (v58)
          {
            uint64_t v59 = *(void *)(v57 + 72);
            uint64_t v60 = 32 * v58;
            do
            {
              Value = *(llvm **)(v59 + 24);
              uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Value);
              if (DefiningOp)
              {
                uint64_t v62 = DefiningOp;
                uint64_t v63 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
                if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v62 + 48) + 32))(*(void *)(v62 + 48), v63))
                {
                  uint64_t v64 = *(_OWORD **)(v57 + 16);
                  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v57);
                  uint64_t v158 = v64;
                  uint64_t v159 = v65;
                  Value = *(llvm **)(v59 + 24);
                  uint64_t v66 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&Value);
                  mlir::OpBuilder::clone((uint64_t **)v157, v66);
                }
              }
              v59 += 32;
              v60 -= 32;
            }
            while (v60);
          }
        }
        v52 += 8;
      }
      while (v52 != v56);
      long long v52 = v211;
      uint64_t v45 = (char *)FunctionType;
      uint64_t v67 = v205;
      int v29 = v55;
      uint64_t v46 = v54;
      uint64_t v44 = v144;
      uint64_t v43 = v145;
    }
    else
    {
      uint64_t v67 = 0;
    }
    llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)&v211, (uint64_t)v52, v45, &v45[8 * v67]);
    uint64_t v68 = *((void *)v193 + v43);
    if (v68)
    {
      v166[0] = *(void **)(a3 + 8 * v68 - 8);
      Value = (llvm *)v211;
      uint64_t v223 = (uint64_t *)((char *)v211 + 8 * v212);
      llvm::detail::DenseSetImpl<mlir::Operation *,llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,llvm::DenseMapInfo<mlir::Operation *,void>>::DenseSetImpl<mlir::Operation **>((uint64_t)&p_FunctionType, (uint64_t **)&Value, &v223);
      mlir::collect_regions::detail::buildLiveInsLiveOuts((uint64_t)&v190, (uint64_t)&v187, (uint64_t)&v178, (uint64_t **)&v211, (uint64_t *)&p_FunctionType, 0);
      if (v29)
      {
        uint64_t v158 = v29;
        uint64_t v159 = v46;
      }
      else
      {
        uint64_t v158 = 0;
        uint64_t v159 = 0;
      }
      uint64_t v223 = (uint64_t *)&v225;
      uint64_t v224 = 0x600000000;
      do
      {
        LOBYTE(v170) = 0;
        Value = (llvm *)&v190;
        uint64_t v215 = v157;
        uint64_t v216 = v147;
        int v217 = (llvm *)&v187;
        int v218 = &v223;
        int v219 = &v170;
        uint64_t v70 = (uint64_t *)v211;
        uint64_t v71 = (uint64_t *)((char *)v211 + 8 * v212);
        if (v212)
        {
          uint64_t v72 = 8 * v212;
          do
          {
            ++v70;
            v72 -= 8;
          }
          while (v72);
          uint64_t v70 = v71;
        }
        else
        {
LABEL_68:
          uint64_t v73 = v70 + 1;
          if (v70 != v71 && v73 != v71)
          {
            do
            {
              ++v73;
            }
            while (v73 != v71);
          }
        }
        unint64_t v75 = (unint64_t)((char *)v70 - (unsigned char *)v211) >> 3;
        LODWORD(v212) = v75;
        if (!(_BYTE)v170) {
          goto LABEL_105;
        }
        int v76 = v200;
        if (v200)
        {
          unsigned int v77 = v202;
          if (v202)
          {
            uint64_t v78 = 8 * v202;
            __int32 v79 = p_FunctionType;
            while ((*(void *)v79 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              __int32 v79 = (llvm *)((char *)v79 + 8);
              v78 -= 8;
              if (!v78) {
                goto LABEL_62;
              }
            }
          }
          else
          {
            __int32 v79 = p_FunctionType;
          }
          uint64_t v80 = (llvm *)((char *)p_FunctionType + 8 * v202);
          if (v79 != v80)
          {
            uint64_t v81 = ((unint64_t)((char *)v70 - (unsigned char *)v211) >> 3);
            unsigned int v82 = v202 - 1;
            int v83 = v201;
            uint64_t v84 = *(void *)v79;
            do
            {
              if (v75)
              {
                uint64_t v85 = 8 * v81;
                unint64_t v86 = (char *)v211;
                do
                {
                  if (*(void *)v86 == v84) {
                    goto LABEL_92;
                  }
                  v86 += 8;
                  v85 -= 8;
                }
                while (v85);
                unint64_t v86 = (char *)v211 + 8 * v81;
              }
              else
              {
                unint64_t v86 = (char *)v211;
              }
LABEL_92:
              if (v81 == (v86 - (unsigned char *)v211) >> 3 && v77)
              {
                LODWORD(v87) = ((v84 >> 4) ^ (v84 >> 9)) & v82;
                uint64_t v88 = (char *)p_FunctionType + 8 * v87;
                uint64_t v89 = *(void *)v88;
                if (v84 != *(void *)v88)
                {
                  int v90 = 1;
                  do
                  {
                    if (v89 == -4096) {
                      goto LABEL_96;
                    }
                    int v91 = v87 + v90++;
                    uint64_t v87 = v91 & v82;
                    uint64_t v89 = *((void *)p_FunctionType + v87);
                  }
                  while (v84 != v89);
                  uint64_t v88 = (char *)p_FunctionType + 8 * v87;
                }
                *(void *)uint64_t v88 = -8192;
                --v76;
                ++v83;
                int v200 = v76;
                int v201 = v83;
                goto LABEL_96;
              }
              do
              {
LABEL_96:
                __int32 v79 = (llvm *)((char *)v79 + 8);
                if (v79 == v80) {
                  goto LABEL_62;
                }
                uint64_t v84 = *(void *)v79;
              }
              while ((*(void *)v79 | 0x1000) == 0xFFFFFFFFFFFFF000);
            }
            while (v79 != v80);
          }
        }
LABEL_62:
        mlir::collect_regions::detail::buildLiveInsLiveOuts((uint64_t)&v190, (uint64_t)&v187, (uint64_t)&v178, (uint64_t **)&v211, (uint64_t *)&p_FunctionType, 0);
      }
      while ((_BYTE)v170);
      LODWORD(v75) = v212;
LABEL_105:
      if (v75)
      {
        uint64_t v92 = *(void *)((((unint64_t)&v135[4 * (((unint64_t)a2[11] >> 23) & 1) + 1]
                          + (((unint64_t)a2[11] >> 21) & 0x7F8)
                          + 3) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * a2[10]
                        + 8);
        if (v92) {
          uint64_t v93 = v92 - 8;
        }
        else {
          uint64_t v93 = 0;
        }
        uint64_t v94 = *(void *)(v93 + 40);
        uint64_t v158 = (_OWORD *)v93;
        uint64_t v159 = v94;
        uint64_t v95 = (unsigned __int8 (***)(void *, unint64_t, unint64_t, void **))v166[0];
        mlir::ValueRange::ValueRange(v174, (uint64_t)v190, v191);
        if ((**v95)(v95, v174[0], v174[1], &v184))
        {
          char v96 = (unsigned __int8 (***)(void *, unint64_t, unint64_t, void **))v166[0];
          mlir::ValueRange::ValueRange(v173, (uint64_t)v187, v188);
          if ((**v96)(v96, v173[0], v173[1], &v181))
          {
            uint64_t v215 = 0;
            Value = 0;
            LODWORD(v216) = 0;
            int v217 = 0;
            int v218 = 0;
            LODWORD(v219) = 0;
            uint64_t v220 = 0;
            uint64_t v221 = 0;
            int v222 = 0;
            uint64_t v164 = 0;
            mlir::Builder::getFusedLoc(v157, (uint64_t **)v178, (mlir::MLIRContext *)v179, 0);
          }
        }
      }
      else if (v224)
      {
        long long v97 = &v223[v224];
        do
        {
          unsigned long long v98 = (mlir::Operation *)*--v97;
          mlir::OpBuilder::clone((uint64_t **)v157, v98, (mlir::IRMapping *)v147);
        }
        while (v97 != v223);
      }
      if (v223 != (uint64_t *)&v225) {
        free(v223);
      }
      llvm::deallocate_buffer(p_FunctionType, (void *)(8 * v202));
    }
    if (v29)
    {
      uint64_t v158 = v29;
      uint64_t v159 = v46;
      uint64_t v69 = v212;
      if (v212) {
        goto LABEL_119;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v158 = 0;
      uint64_t v159 = 0;
      uint64_t v69 = v212;
      if (v212)
      {
LABEL_119:
        long long v99 = (mlir::Operation **)v211;
        uint64_t v100 = 8 * v69;
        do
        {
          uint64_t v101 = *v99++;
          mlir::OpBuilder::clone((uint64_t **)v157, v101, (mlir::IRMapping *)v147);
          v100 -= 8;
        }
        while (v100);
        int v29 = v158;
        uint64_t v46 = v159;
      }
    }
    if (FunctionType != &v206) {
      free(FunctionType);
    }
    if (v211 != v213) {
      free(v211);
    }
    uint64_t v158 = v140;
    uint64_t v159 = v139;
    ++v43;
    v44 += 8;
    uint64_t v45 = (char *)&v206;
    if (v44 == v138)
    {
      if (v176)
      {
        uint64_t v102 = *((void *)v175 + 2);
        long long v146 = *(_OWORD *)v175;
        long long v168 = *(_OWORD *)v175;
        uint64_t v167 = v102;
        char v232 = (unsigned int **)v234;
        uint64_t v233 = 0x100000000;
        v166[0] = &v167;
        v166[1] = 0;
        uint64_t v164 = (mlir *)v166;
        uint64_t v165 = 0;
        uint64_t v170 = &v172;
        uint64_t v171 = 0x500000000;
        uint64_t v223 = 0;
        uint64_t v224 = 0;
        unsigned int v225 = 0;
        uint64_t v226 = 0;
        uint64_t v227 = 0;
        int v228 = 0;
        int v229 = 0;
        uint64_t v230 = 0;
        unsigned int v231 = 0;
        FunctionType = v157;
        uint64_t v205 = (uint64_t)&v167;
        uint64_t v206 = &v223;
        p_FunctionType = (llvm *)&FunctionType;
        if (!mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a2, (mlir::Operation *)_ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_12_GLOBAL__N_114legalizeRegionENS1_8ModuleOpENS1_24TargetLegalizerInterfaceERNS1_9OpBuilderEPNS1_15DeviceInterfaceEE3__0NS1_9placement12HostTypeCastES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueEST_E4typeES4_OT1_EUlS4_E_EES2_lS4_, (uint64_t)&p_FunctionType, 1))goto LABEL_205; {
        mlir::SymbolTable::getSymbolUses((mlir::SymbolTable *)v146, (mlir::Operation *)a2, (uint64_t)&__p);
        }
        if (!v163)
        {
          FunctionType = "Operation has no symbol table uses";
          LOWORD(v208) = 259;
          mlir::OpState::emitOpError((uint64_t **)&v168, (const void ***)&FunctionType, (uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          unint64_t v107 = (uint64_t *)&v215;
          goto LABEL_202;
        }
        uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v168);
        LODWORD(v233) = 0;
        if (!v163) {
          std::__throw_bad_optional_access[abi:nn180100]();
        }
        long long v103 = (char *)__p;
        uint64_t v104 = v162;
        unsigned int v105 = 0;
        if (__p != v162)
        {
          do
          {
            uint64_t v106 = *(unsigned int **)v103;
            if (*(_UNKNOWN **)(*(void *)(*(void *)v103 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::ReplacedOps,void>::id)
            {
              if (v105 >= HIDWORD(v233))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v232, v234, v105 + 1, 8);
                unsigned int v105 = v233;
              }
              v232[v105] = v106;
              unsigned int v105 = v233 + 1;
              LODWORD(v233) = v233 + 1;
            }
            v103 += 16;
          }
          while (v103 != v104);
        }
        if (!v224) {
          goto LABEL_161;
        }
        uint64_t v108 = v225;
        if (v225 > 4 * (int)v224 && v225 >= 0x41)
        {
          llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)&v223);
          unsigned int v105 = v233;
LABEL_161:
          uint64_t v160 = mlir::TargetLegalizerInterface::legalizeRegionBody(&v168, (uint64_t)v157, (uint64_t)v232, v105, v167, (uint64_t)&v223);
          if (v160)
          {
            mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)&v168);
            if (!v233) {
              goto LABEL_192;
            }
            uint64_t v117 = v232;
            unint64_t v141 = &v232[v233];
LABEL_165:
            uint64_t v118 = *v117;
            LODWORD(v171) = 0;
            uint64_t v119 = v118[9];
            if (v119) {
              uint64_t v120 = (uint64_t)(v118 - 4);
            }
            else {
              uint64_t v120 = 0;
            }
            if (!v119) {
              goto LABEL_164;
            }
            char v121 = 0;
            uint64_t v122 = 0;
            while (1)
            {
              uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v120, v122);
              p_FunctionType = (llvm *)NextResultAtOffset;
              FunctionType = 0;
              if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v223, (unint64_t *)&p_FunctionType, &FunctionType))break; {
              if (FunctionType == &v223[2 * v225])
              }
                break;
              uint64_t v124 = (uint64_t *)*((void *)FunctionType + 1);
              if (!v124) {
                break;
              }
              if (v124 != (uint64_t *)NextResultAtOffset)
              {
                while (1)
                {
                  int v125 = *(uint64_t **)NextResultAtOffset;
                  if (!*(void *)NextResultAtOffset) {
                    break;
                  }
                  int v126 = (uint64_t *)v125[1];
                  if (v126)
                  {
                    *int v126 = *v125;
                    if (*v125) {
                      *(void *)(*v125 + 8) = v125[1];
                    }
                  }
                  v125[3] = (uint64_t)v124;
                  v125[1] = (uint64_t)v124;
                  uint64_t v127 = *v124;
                  *int v125 = *v124;
                  if (v127) {
                    *(void *)(v127 + 8) = v125;
                  }
                  *uint64_t v124 = (uint64_t)v125;
                }
                char v121 = 1;
              }
              if (++v122 == v119)
              {
                if (v121) {
                  mlir::Operation::erase((mlir::Operation *)v118);
                }
LABEL_164:
                if (++v117 != v141) {
                  goto LABEL_165;
                }
LABEL_192:
                if (v160 != ArgOperands) {
                  mlir::Operation::cloneWithoutRegions((mlir::Operation *)v168);
                }
                if (!v163) {
LABEL_205:
                }
                  llvm::deallocate_buffer(v229, (void *)(16 * v231));
LABEL_203:
                if (__p)
                {
                  uint64_t v162 = (char *)__p;
                  operator delete(__p);
                }
                goto LABEL_205;
              }
            }
            p_FunctionType = (llvm *)"Result has no mapping in the valueMap (result #";
            __int16 v203 = 259;
            mlir::Operation::emitOpError((uint64_t *)v118, (const void ***)&p_FunctionType, (uint64_t)&FunctionType);
            uint64_t v128 = *(void *)(NextResultAtOffset + 8) & 7;
            if (NextResultAtOffset && v128 == 6) {
              uint64_t v128 = (*(_DWORD *)(NextResultAtOffset + 16) + 6);
            }
            if (FunctionType)
            {
              LODWORD(v169[0]) = 5;
              v169[1] = (void *)v128;
              unint64_t v129 = v207;
              if (v208 >= v209)
              {
                unint64_t v133 = v208 + 1;
                if (v207 <= (unint64_t)v169 && v207 + 24 * v208 > (unint64_t)v169)
                {
                  unsigned int v134 = (char *)v169 - v207;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v207, v210, v133, 24);
                  unint64_t v129 = v207;
                  uint64_t v130 = (void **)&v134[v207];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v207, v210, v133, 24);
                  uint64_t v130 = v169;
                  unint64_t v129 = v207;
                }
              }
              else
              {
                uint64_t v130 = v169;
              }
              unint64_t v131 = v129 + 24 * v208;
              long long v132 = *(_OWORD *)v130;
              *(void *)(v131 + 16) = v130[2];
              *(_OWORD *)unint64_t v131 = v132;
              ++v208;
              if (FunctionType)
              {
                mlir::Diagnostic::operator<<((uint64_t)&v205, ")");
                if (FunctionType) {
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionType);
                }
              }
            }
            unint64_t v107 = &v205;
          }
          else
          {
            FunctionType = "Legalization failed";
            LOWORD(v208) = 259;
            mlir::OpState::emitOpError((uint64_t **)&v168, (const void ***)&FunctionType, (uint64_t)&v211);
            if (v211) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v211);
            }
            unint64_t v107 = &v212;
          }
LABEL_202:
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v107);
          if (!v163) {
            goto LABEL_205;
          }
          goto LABEL_203;
        }
        if (v225)
        {
          int v109 = v223;
          uint64_t v110 = (v225 - 1) & 0xFFFFFFFFFFFFFFFLL;
          if (v110)
          {
            uint64_t v111 = v110 + 1;
            uint64_t v112 = (v110 + 1) & 0x1FFFFFFFFFFFFFFELL;
            unint64_t v113 = &v223[2 * v112];
            int v114 = v223 + 2;
            uint64_t v115 = v112;
            do
            {
              *(v114 - 2) = -4096;
              *int v114 = -4096;
              v114 += 4;
              v115 -= 2;
            }
            while (v115);
            if (v111 == v112) {
              goto LABEL_160;
            }
          }
          else
          {
            unint64_t v113 = v223;
          }
          uint64_t v116 = &v109[2 * v108];
          do
          {
            *unint64_t v113 = -4096;
            v113 += 2;
          }
          while (v113 != v116);
        }
LABEL_160:
        uint64_t v224 = 0;
        goto LABEL_161;
      }
LABEL_212:
      if (v175 != v177) {
        free(v175);
      }
      llvm::deallocate_buffer(v152, (void *)(16 * v154));
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v213, v48, 8);
  uint64_t v49 = v212;
  uint64_t v50 = v211;
LABEL_41:
  memcpy(&v50[8 * v49], v47, 8 * v48);
  int v51 = v212;
  long long v52 = v211;
  uint64_t v45 = (char *)&v206;
  goto LABEL_42;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::anonymous namespace'::PlacementState::PlacementState(long long,mlir::func::FuncOp)::{lambda(mlir::Operation *)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(unsigned int *)(*a1 + 80);
  if (v4 >= *(_DWORD *)(*a1 + 84))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 72, (void *)(v3 + 88), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 80);
  }
  *(void *)(*(void *)(v3 + 72) + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 80);
}

uint64_t mlir::anonymous namespace'::eraseTypeChangers(llvm::SmallVectorImpl<mlir::Operation *> &,llvm::SmallVectorImpl<mlir::Value> &,llvm::SmallVectorImpl<mlir::Value> &,llvm::SmallVectorImpl<mlir::Location> &,llvm::DenseSet<mlir::Operation *,llvm::DenseMapInfo<mlir::Operation *,void>> &,llvm::SmallVector<mlir::Operation *,6u> &,mlir::OpBuilder &,mlir::IRMapping &)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::TypeChanger<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::TypeChanger>(void)::Empty>>();
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v4) & 1) != 0
    || (uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v5),
        result))
  {
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0 && (uint64_t v7 = *(unsigned int *)(a2 + 68), v7))
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(a2 + 72);
      uint64_t v10 = *a1;
      while (1)
      {
        uint64_t v12 = *(void *)(v9 + 32 * v8 + 24);
        uint64_t v32 = v12;
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v32);
        if (!DefiningOp
          || (uint64_t v14 = DefiningOp,
              uint64_t v15 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
              ((*(uint64_t (**)(void, uint64_t))(**(void **)(v14 + 48) + 32))(*(void *)(v14 + 48), v15) & 1) == 0))
        {
          uint64_t v16 = *(void **)v10;
          uint64_t v17 = *(unsigned int *)(v10 + 8);
          if (v17)
          {
            uint64_t v18 = 8 * v17;
            uint64_t v11 = *(void **)v10;
            while (*v11 != v12)
            {
              ++v11;
              v18 -= 8;
              if (!v18)
              {
                uint64_t v11 = &v16[v17];
                break;
              }
            }
          }
          else
          {
            uint64_t v11 = *(void **)v10;
          }
          if (v17 == v11 - v16) {
            break;
          }
        }
        if (++v8 == v7) {
          goto LABEL_16;
        }
      }
      int v19 = 0;
    }
    else
    {
LABEL_16:
      mlir::OpBuilder::clone((uint64_t **)a1[1], (mlir::Operation *)a2, (mlir::IRMapping *)a1[2]);
      int v19 = 1;
    }
    uint64_t v20 = *(unsigned int *)(a2 + 36);
    if (v20) {
      uint64_t v21 = a2 - 16;
    }
    else {
      uint64_t v21 = 0;
    }
    if (v20)
    {
      uint64_t v22 = 0;
      uint64_t v23 = a1[3];
      while (1)
      {
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v21, v22);
        uint64_t v25 = *(void **)v23;
        uint64_t v26 = *(unsigned int *)(v23 + 8);
        if (v26)
        {
          uint64_t v27 = 8 * v26;
          uint64_t v28 = *(void **)v23;
          while (*v28 != NextResultAtOffset)
          {
            ++v28;
            v27 -= 8;
            if (!v27)
            {
              uint64_t v28 = &v25[v26];
              break;
            }
          }
        }
        else
        {
          uint64_t v28 = *(void **)v23;
        }
        if (v26 == v28 - v25) {
          break;
        }
        if (++v22 == v20) {
          goto LABEL_31;
        }
      }
      uint64_t v31 = mlir::TypeID::get<mlir::OpTrait::TypeChanger<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::TypeChanger>(void)::Empty>>();
      uint64_t result = v19 & (*(unsigned int (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v31);
    }
    else
    {
LABEL_31:
      uint64_t v29 = a1[4];
      uint64_t v30 = *(unsigned int *)(v29 + 8);
      if (v30 >= *(_DWORD *)(v29 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1[4], (void *)(v29 + 16), v30 + 1, 8);
        LODWORD(v30) = *(_DWORD *)(v29 + 8);
      }
      *(void *)(*(void *)v29 + 8 * v30) = a2;
      ++*(_DWORD *)(v29 + 8);
      uint64_t result = 1;
    }
    *(unsigned char *)a1[5] |= result;
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<mlir::TargetLegalizerInterface,mlir::DeviceInterface *>,true>::growAndEmplaceBack<mlir::TargetLegalizerInterface,mlir::DeviceInterface *&>(uint64_t a1, long long *a2, uint64_t *a3)
{
  long long v13 = *a2;
  uint64_t v14 = *a3;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  char v6 = (char *)&v13;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v10 = v4 + 1;
    BOOL v11 = v5 + 24 * v4 > (unint64_t)&v13;
    if (v5 <= (unint64_t)&v13 && v11)
    {
      uint64_t v12 = (char *)&v13 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 24);
      unint64_t v5 = *(void *)a1;
      char v6 = &v12[*(void *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 24);
      unint64_t v5 = *(void *)a1;
      char v6 = (char *)&v13;
    }
  }
  uint64_t v7 = v5 + 24 * *(unsigned int *)(a1 + 8);
  long long v8 = *(_OWORD *)v6;
  *(void *)(v7 + 16) = *((void *)v6 + 2);
  *(_OWORD *)uint64_t v7 = v8;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(void *)a1 + 24 * v7 - 24;
}

double _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_12_GLOBAL__N_114legalizeRegionENS1_8ModuleOpENS1_24TargetLegalizerInterfaceERNS1_9OpBuilderEPNS1_15DeviceInterfaceEE3__0NS1_9placement12HostTypeCastES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueEST_E4typeES4_OT1_EUlS4_E_EES2_lS4_(uint64_t **a1, mlir::GenericProgramPoint *this, __n128 a3)
{
  if (!this
    || *(_UNKNOWN **)(*((void *)this + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
  {
    return a3.n128_f64[0];
  }
  uint64_t v4 = *a1;
  uint64_t v32 = this;
  uint64_t v5 = *v4;
  uint64_t v6 = *v4 + 16;
  __n128 v31 = *(__n128 *)v6;
  uint64_t v7 = *((void *)this + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  *(void *)uint64_t v6 = v7;
  *(void *)(v5 + 24) = v8;
  uint64_t v9 = *v4;
  uint64_t v10 = *(void *)v4[1];
  uint64_t v11 = *((void *)this + 3);
  uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v32);
  long long v13 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v32) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v13) {
    goto LABEL_12;
  }
  uint64_t v14 = *v13;
  unint64_t v15 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v16 = *(unsigned int *)(v14 + 16);
  if (!v16) {
    goto LABEL_12;
  }
  uint64_t v17 = *(void **)(v14 + 8);
  uint64_t v18 = &v17[2 * v16];
  do
  {
    unint64_t v19 = v16 >> 1;
    uint64_t v20 = &v17[2 * (v16 >> 1)];
    unint64_t v22 = *v20;
    uint64_t v21 = v20 + 2;
    v16 += ~(v16 >> 1);
    if (v22 < v15) {
      uint64_t v17 = v21;
    }
    else {
      unint64_t v16 = v19;
    }
  }
  while (v16);
  if (v17 != v18 && *v17 == v15) {
    uint64_t v23 = v17[1];
  }
  else {
LABEL_12:
  }
    uint64_t v23 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v10 + 24))(v10, v9, v11, Input, v13, v23, v4[2]))
  {
    a3 = v31;
    if (!v5) {
      return a3.n128_f64[0];
    }
    goto LABEL_22;
  }
  uint64_t v24 = v4[2];
  uint64_t v25 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v32);
  uint64_t v33 = v25;
  v34[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v24, (unint64_t *)&v33, v34)&& v34[0] != *(void *)v24 + 16 * *(unsigned int *)(v24 + 16))
  {
    uint64_t v25 = *(void *)(v34[0] + 8);
  }
  uint64_t v33 = v25;
  uint64_t v26 = v32;
  uint64_t DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v33);
  uint64_t v28 = *((unsigned int *)v26 + 9);
  uint64_t v29 = (uint64_t)v26 - 16;
  if (!v28) {
    uint64_t v29 = 0;
  }
  v34[0] = v29;
  v34[1] = v28;
  mlir::ResultRange::replaceAllUsesWith(v34, DefiningOp);
  mlir::Operation::erase(v32);
  a3 = v31;
  if (v5)
  {
LABEL_22:
    if (a3.n128_u64[0])
    {
      *(__n128 *)uint64_t v6 = a3;
    }
    else
    {
      *(void *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
  }
  return a3.n128_f64[0];
}

mlir::GenericProgramPoint *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::anonymous namespace'::legalizeRegion(mlir::ModuleOp,mlir::TargetLegalizerInterface,mlir::OpBuilder &,mlir::DeviceInterface *)::$_1>(uint64_t a1, mlir::Operation *a2)
{
  uint64_t result = (mlir::GenericProgramPoint *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  if (!result)
  {
    uint64_t v5 = *(uint64_t ***)a1;
    uint64_t v6 = *(mlir::IRMapping **)(a1 + 8);
    return mlir::OpBuilder::clone(v5, a2, v6);
  }
  return result;
}

BOOL llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_2>(uint64_t a1, uint64_t a2)
{
  int v2 = (llvm *)a2;
  if (!mlir::collect_regions::detail::verifyShouldAddToQueue(**(mlir::Block ***)a1, *(void *)(*(void *)a1 + 8), **(void **)(a1 + 8), a2, *(void *)(a1 + 16) + 48))goto LABEL_141; {
  uint64_t v4 = *(void *)(a1 + 16);
  }
  (*(void (**)(void))(**(void **)(v4 + 120) + 16))(*(void *)(v4 + 120));
  if ((*((unsigned char *)v2 + 46) & 0x80) == 0 || (uint64_t v5 = *((unsigned int *)v2 + 17), !v5))
  {
    uint64_t v8 = *(void *)(a1 + 16);
    v141[0] = v2;
LABEL_6:
    uint64_t v9 = *(void *)(v8 + 16);
    uint64_t v10 = *(void *)(v8 + 8);
    if (v9 == v10) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = ((v9 - v10) << 6) - 1;
    }
    uint64_t v12 = *(void *)(v8 + 40);
    unint64_t v13 = v12 + *(void *)(v8 + 32);
    if (v11 == v13)
    {
      std::deque<mlir::Operation *>::__add_back_capacity(v8);
      uint64_t v12 = *(void *)(v8 + 40);
      uint64_t v10 = *(void *)(v8 + 8);
      unint64_t v13 = *(void *)(v8 + 32) + v12;
    }
    *(void *)(*(void *)(v10 + ((v13 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v13 & 0x1FF)) = v2;
    *(void *)(v8 + 40) = v12 + 1;
    uint64_t v14 = *(void *)(v8 + 48);
    int v15 = *(_DWORD *)(v8 + 64);
    if (v15)
    {
      int v16 = v15 - 1;
      unsigned int v17 = v16 & ((v2 >> 4) ^ (v2 >> 9));
      uint64_t v18 = (uint64_t *)(v14 + 8 * v17);
      unint64_t v19 = (llvm *)*v18;
      if ((llvm *)*v18 == v2)
      {
LABEL_146:
        uint64_t v127 = (*(uint64_t (**)(void))(**(void **)(v8 + 120) + 16))(*(void *)(v8 + 120));
        uint64_t I32IntegerAttr = mlir::Builder::getI32IntegerAttr(*(mlir::Builder **)(*(void *)(v8 + 120) + 8), *(_DWORD *)(v8 + 128));
        mlir::Operation::setAttr((uint64_t)v2, v127, I32IntegerAttr);
        return *(void *)(*(void *)(a1 + 16) + 40) < *(void *)(**(void **)(a1 + 8) + 16);
      }
      uint64_t v20 = 0;
      int v21 = 1;
      while (v19 != (llvm *)-4096)
      {
        if (v20) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v19 == (llvm *)-8192;
        }
        if (v22) {
          uint64_t v20 = v18;
        }
        unsigned int v23 = v17 + v21++;
        unsigned int v17 = v23 & v16;
        uint64_t v18 = (uint64_t *)(v14 + 8 * v17);
        unint64_t v19 = (llvm *)*v18;
        if ((llvm *)*v18 == v2) {
          goto LABEL_146;
        }
      }
      if (v20) {
        int v126 = v20;
      }
      else {
        int v126 = v18;
      }
    }
    else
    {
      int v126 = 0;
    }
    llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(v8 + 48, v126, (uint64_t *)v141);
    int v2 = v141[0];
    goto LABEL_146;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *((void *)v2 + 9);
  while (1)
  {
    uint64_t v24 = *(_DWORD **)(v7 + 32 * v6 + 24);
    long long v146 = v24;
    if ((~v24[2] & 7) == 0) {
      goto LABEL_22;
    }
    __p[0] = v24;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)__p);
    if (DefiningOp)
    {
      uint64_t v26 = DefiningOp;
      uint64_t v27 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v26 + 48) + 32))(*(void *)(v26 + 48), v27)) {
        goto LABEL_22;
      }
    }
    uint64_t v28 = mlir::Value::getDefiningOp((mlir::Value *)&v146);
    uint64_t v29 = v28;
    uint64_t v30 = *(void *)(v4 + 48);
    uint64_t v31 = *(unsigned int *)(v4 + 64);
    if (v31)
    {
      LODWORD(v32) = ((v28 >> 4) ^ (v28 >> 9)) & (v31 - 1);
      uint64_t v33 = (uint64_t *)(v30 + 8 * v32);
      uint64_t v34 = *v33;
      if (*v33 == v28) {
        goto LABEL_33;
      }
      int v35 = 1;
      while (v34 != -4096)
      {
        int v36 = v32 + v35++;
        uint64_t v32 = v36 & (v31 - 1);
        uint64_t v34 = *(void *)(v30 + 8 * v32);
        if (v34 == v28)
        {
          uint64_t v33 = (uint64_t *)(v30 + 8 * v32);
          goto LABEL_33;
        }
      }
    }
    uint64_t v33 = (uint64_t *)(v30 + 8 * v31);
LABEL_33:
    if (v33 == (uint64_t *)(v30 + 8 * v31)) {
      break;
    }
LABEL_22:
    if (++v6 == v5)
    {
      int v129 = *((_DWORD *)v2 + 11);
      uint64_t v8 = *(void *)(a1 + 16);
      v141[0] = v2;
      if ((v129 & 0x800000) != 0)
      {
        uint64_t v130 = *((unsigned int *)v2 + 17);
        if (v130)
        {
          unint64_t v131 = (uint64_t *)(*((void *)v2 + 9) + 24);
          do
          {
            uint64_t v147 = *v131;
            uint64_t v134 = mlir::Value::getDefiningOp((mlir::Value *)&v147);
            if (v134)
            {
              unsigned int v135 = (mlir::Operation *)v134;
              uint64_t v136 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(void *, uint64_t))(**((void **)v135 + 6) + 32))(*((void **)v135 + 6), v136))
              {
                (*(void (**)(void))(**(void **)(v8 + 120) + 16))(*(void *)(v8 + 120));
                int v137 = *(_OWORD **)(*(void *)(v8 + 120) + 8);
                long long v138 = v137[1];
                *(_OWORD *)std::string __p = *v137;
                long long v144 = v138;
                uint64_t v139 = (void *)*((void *)v135 - 2);
                if (!v139 || *v139)
                {
                  uint64_t v132 = *((void *)v2 + 2);
                  mlir::GenericProgramPoint::~GenericProgramPoint(v2);
                  *(void *)&long long v144 = v132;
                  *((void *)&v144 + 1) = v133;
                  mlir::OpBuilder::clone((uint64_t **)__p, v135);
                }
              }
            }
            v131 += 4;
            --v130;
          }
          while (v130);
        }
      }
      goto LABEL_6;
    }
  }
  int v37 = *(_DWORD *)(v4 + 112);
  if (!v37) {
    goto LABEL_40;
  }
  uint64_t v38 = *(void *)(v4 + 96);
  int v39 = v37 - 1;
  unsigned int v40 = v39 & ((v28 >> 4) ^ (v28 >> 9));
  uint64_t v41 = *(void *)(v38 + 8 * v40);
  if (v41 != v28)
  {
    int v42 = 1;
    while (v41 != -4096)
    {
      unsigned int v43 = v40 + v42++;
      unsigned int v40 = v43 & v39;
      uint64_t v41 = *(void *)(v38 + 8 * v40);
      if (v41 == v28) {
        goto LABEL_141;
      }
    }
LABEL_40:
    long long v144 = 0u;
    unsigned long long v145 = 0u;
    *(_OWORD *)std::string __p = 0u;
    v141[0] = 0;
    v141[1] = 0;
    unsigned int v142 = 0;
    std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
    uint64_t v45 = *((void *)&v145 + 1);
    unint64_t v44 = v145;
    *(void *)(*(void *)((char *)__p[1] + (((*((void *)&v145 + 1) + (void)v145) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((*((void *)&v145 + 1) + v145) & 0x1FF)) = v29;
    *((void *)&v145 + 1) = v45 + 1;
    if (v45 == -1) {
      goto LABEL_118;
    }
    uint64_t v46 = (char *)__p[1];
    while (2)
    {
      uint64_t v47 = *(void *)(*(void *)&v46[(v44 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v44 & 0x1FF));
      int v48 = *(_DWORD *)(v47 + 44);
      if ((v48 & 0x7FFFFF) != 0)
      {
        uint64_t v49 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v47 + 48) + 32))(*(void *)(v47 + 48), v49))
        {
          int v48 = *(_DWORD *)(v47 + 44);
          goto LABEL_46;
        }
LABEL_102:
        int v99 = 1;
      }
      else
      {
LABEL_46:
        if ((v48 & 0x800000) != 0)
        {
          uint64_t v50 = *(unsigned int *)(v47 + 68);
          if (v50)
          {
            uint64_t v51 = 0;
            uint64_t v52 = *(void *)(v47 + 72);
            while (2)
            {
              uint64_t v147 = *(void *)(v52 + 32 * v51 + 24);
              uint64_t v140 = 0;
              uint64_t v58 = mlir::Value::getDefiningOp((mlir::Value *)&v147);
              uint64_t v140 = v58;
              if (v58)
              {
                uint64_t v59 = v58;
                uint64_t v60 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
                if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v59 + 48) + 32))(*(void *)(v59 + 48), v60) & 1) == 0)
                {
                  uint64_t v61 = v140;
                  if (*(_UNKNOWN **)(*(void *)(v140 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
                  {
                    uint64_t v62 = *(void *)(v4 + 48);
                    uint64_t v63 = *(unsigned int *)(v4 + 64);
                    unsigned int v64 = v140 >> 4;
                    if (v63)
                    {
                      LODWORD(v65) = (v63 - 1) & (v64 ^ (v140 >> 9));
                      uint64_t v66 = (uint64_t *)(v62 + 8 * v65);
                      uint64_t v67 = *v66;
                      if (*v66 != v140)
                      {
                        int v68 = 1;
                        do
                        {
                          if (v67 == -4096) {
                            goto LABEL_60;
                          }
                          int v69 = v65 + v68++;
                          uint64_t v65 = v69 & (v63 - 1);
                          uint64_t v67 = *(void *)(v62 + 8 * v65);
                        }
                        while (v67 != v140);
                        uint64_t v66 = (uint64_t *)(v62 + 8 * v65);
                      }
                    }
                    else
                    {
LABEL_60:
                      uint64_t v66 = (uint64_t *)(v62 + 8 * v63);
                    }
                    if (v66 != (uint64_t *)(v62 + 8 * v63)) {
                      goto LABEL_102;
                    }
                    int v70 = *(_DWORD *)(v4 + 112);
                    if (v70)
                    {
                      uint64_t v71 = *(void *)(v4 + 96);
                      int v72 = v70 - 1;
                      unsigned int v73 = v72 & (v64 ^ (v140 >> 9));
                      uint64_t v74 = *(void *)(v71 + 8 * v73);
                      if (v74 == v140) {
                        goto LABEL_102;
                      }
                      int v75 = 1;
                      while (v74 != -4096)
                      {
                        unsigned int v76 = v73 + v75++;
                        unsigned int v73 = v76 & v72;
                        uint64_t v74 = *(void *)(v71 + 8 * v73);
                        if (v74 == v140) {
                          goto LABEL_102;
                        }
                      }
                    }
                    unsigned int v77 = v142;
                    if (v142)
                    {
                      LODWORD(v78) = (v142 - 1) & (v64 ^ (v140 >> 9));
                      __int32 v79 = (llvm *)((char *)v141[0] + 8 * v78);
                      uint64_t v80 = *(void *)v79;
                      if (*(void *)v79 != v140)
                      {
                        int v81 = 1;
                        do
                        {
                          if (v80 == -4096) {
                            goto LABEL_74;
                          }
                          int v82 = v78 + v81++;
                          uint64_t v78 = v82 & (v142 - 1);
                          uint64_t v80 = *((void *)v141[0] + v78);
                        }
                        while (v80 != v140);
                        __int32 v79 = (llvm *)((char *)v141[0] + 8 * v78);
                      }
                    }
                    else
                    {
LABEL_74:
                      __int32 v79 = (llvm *)((char *)v141[0] + 8 * v142);
                    }
                    if (v79 == (llvm *)((char *)v141[0] + 8 * v142))
                    {
                      int v83 = *(_DWORD *)(v4 + 88);
                      if (!v83) {
                        goto LABEL_77;
                      }
                      uint64_t v53 = *(void *)(v4 + 72);
                      unsigned int v54 = v64 ^ (v140 >> 9);
                      int v55 = v83 - 1;
                      unsigned int v56 = (v83 - 1) & v54;
                      uint64_t v57 = *(void *)(v53 + 8 * v56);
                      if (v57 != v140)
                      {
                        int v97 = 1;
                        while (v57 != -4096)
                        {
                          unsigned int v98 = v56 + v97++;
                          unsigned int v56 = v98 & v55;
                          uint64_t v57 = *(void *)(v53 + 8 * v56);
                          if (v57 == v140) {
                            goto LABEL_50;
                          }
                        }
LABEL_77:
                        uint64_t v84 = (char *)__p[1];
                        if ((void *)v144 == __p[1]) {
                          unint64_t v85 = 0;
                        }
                        else {
                          unint64_t v85 = (((void)v144 - (unint64_t)__p[1]) << 6) - 1;
                        }
                        uint64_t v86 = *((void *)&v145 + 1);
                        unint64_t v87 = *((void *)&v145 + 1) + v145;
                        if (v85 == *((void *)&v145 + 1) + (void)v145)
                        {
                          std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
                          uint64_t v86 = *((void *)&v145 + 1);
                          uint64_t v84 = (char *)__p[1];
                          unint64_t v87 = v145 + *((void *)&v145 + 1);
                          uint64_t v61 = v140;
                          unsigned int v77 = v142;
                        }
                        *(void *)(*(void *)&v84[(v87 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v87 & 0x1FF)) = v61;
                        *((void *)&v145 + 1) = v86 + 1;
                        if (v77)
                        {
                          unsigned int v88 = v77 - 1;
                          unsigned int v89 = ((v140 >> 4) ^ (v140 >> 9)) & v88;
                          int v90 = (uint64_t *)((char *)v141[0] + 8 * v89);
                          uint64_t v91 = *v90;
                          if (v140 == *v90) {
                            goto LABEL_50;
                          }
                          uint64_t v92 = 0;
                          int v93 = 1;
                          while (v91 != -4096)
                          {
                            if (v92) {
                              BOOL v94 = 0;
                            }
                            else {
                              BOOL v94 = v91 == -8192;
                            }
                            if (v94) {
                              uint64_t v92 = v90;
                            }
                            unsigned int v95 = v89 + v93++;
                            unsigned int v89 = v95 & v88;
                            int v90 = (uint64_t *)((char *)v141[0] + 8 * v89);
                            uint64_t v91 = *v90;
                            if (v140 == *v90) {
                              goto LABEL_50;
                            }
                          }
                          if (v92) {
                            char v96 = v92;
                          }
                          else {
                            char v96 = v90;
                          }
                        }
                        else
                        {
                          char v96 = 0;
                        }
                        llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)v141, v96, &v140);
                      }
                    }
                  }
                }
              }
LABEL_50:
              if (++v51 == v50) {
                break;
              }
              continue;
            }
          }
        }
        int v99 = 0;
      }
      uint64_t v46 = (char *)__p[1];
      uint64_t v100 = *((void *)&v145 + 1) - 1;
      unint64_t v44 = v145 + 1;
      unsigned long long v145 = __PAIR128__(*((unint64_t *)&v145 + 1), (uint64_t)v145 + 1) + __PAIR128__(-1, 0);
      if (v44 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        uint64_t v46 = (char *)__p[1] + 8;
        unint64_t v44 = v145 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(void *)&unsigned long long v145 = v145 - 512;
        uint64_t v100 = *((void *)&v145 + 1);
      }
      if (((v100 != 0) & ~v99) == 0)
      {
        if (v99)
        {
          uint64_t v147 = v29;
          int v101 = *(_DWORD *)(v4 + 112);
          if (!v101)
          {
            uint64_t v122 = 0;
            goto LABEL_133;
          }
          uint64_t v102 = *(void *)(v4 + 96);
          int v103 = v101 - 1;
          unsigned int v104 = v103 & ((v29 >> 4) ^ (v29 >> 9));
          unsigned int v105 = (uint64_t *)(v102 + 8 * v104);
          uint64_t v106 = *v105;
          if (*v105 != v29)
          {
            unint64_t v107 = 0;
            int v108 = 1;
            while (v106 != -4096)
            {
              if (v107) {
                BOOL v109 = 0;
              }
              else {
                BOOL v109 = v106 == -8192;
              }
              if (v109) {
                unint64_t v107 = v105;
              }
              unsigned int v110 = v104 + v108++;
              unsigned int v104 = v110 & v103;
              unsigned int v105 = (uint64_t *)(v102 + 8 * v104);
              uint64_t v106 = *v105;
              if (*v105 == v29) {
                goto LABEL_134;
              }
            }
            if (v107) {
              uint64_t v122 = v107;
            }
            else {
              uint64_t v122 = v105;
            }
LABEL_133:
            llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(v4 + 96, v122, &v147);
          }
          goto LABEL_134;
        }
LABEL_118:
        uint64_t v147 = v29;
        int v111 = *(_DWORD *)(v4 + 88);
        if (v111)
        {
          uint64_t v112 = *(void *)(v4 + 72);
          int v113 = v111 - 1;
          unsigned int v114 = v113 & ((v29 >> 4) ^ (v29 >> 9));
          uint64_t v115 = (uint64_t *)(v112 + 8 * v114);
          uint64_t v116 = *v115;
          if (*v115 == v29) {
            goto LABEL_134;
          }
          uint64_t v117 = 0;
          int v118 = 1;
          while (v116 != -4096)
          {
            if (v117) {
              BOOL v119 = 0;
            }
            else {
              BOOL v119 = v116 == -8192;
            }
            if (v119) {
              uint64_t v117 = v115;
            }
            unsigned int v120 = v114 + v118++;
            unsigned int v114 = v120 & v113;
            uint64_t v115 = (uint64_t *)(v112 + 8 * v114);
            uint64_t v116 = *v115;
            if (*v115 == v29) {
              goto LABEL_134;
            }
          }
          if (v117) {
            char v121 = v117;
          }
          else {
            char v121 = v115;
          }
        }
        else
        {
          char v121 = 0;
        }
        llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(v4 + 72, v121, &v147);
LABEL_134:
        llvm::deallocate_buffer(v141[0], (void *)(8 * v142));
      }
      continue;
    }
  }
LABEL_141:
  uint64_t v123 = *(void *)(a1 + 24);
  uint64_t v124 = *(unsigned int *)(v123 + 8);
  if (v124 >= *(_DWORD *)(v123 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v123, (void *)(v123 + 16), v124 + 1, 8);
    LODWORD(v124) = *(_DWORD *)(v123 + 8);
  }
  *(void *)(*(void *)v123 + 8 * v124) = v2;
  ++*(_DWORD *)(v123 + 8);
  return 1;
}

void mlir::anonymous namespace'::RegionQueue::pushFront(mlir::_anonymous_namespace_::RegionQueue *this, mlir::Operation *a2)
{
  int v2 = a2;
  BOOL v22 = a2;
  unint64_t v4 = *((void *)this + 4);
  if (!v4)
  {
    std::deque<mlir::Operation *>::__add_front_capacity((uint64_t)this);
    unint64_t v4 = *((void *)this + 4);
  }
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = (void *)(v5 + 8 * (v4 >> 9));
  if (*((void *)this + 2) == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v6 + 8 * (v4 & 0x1FF);
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  *(void *)(v7 - 8) = v2;
  uint64_t v8 = *((void *)this + 5) + 1;
  *((void *)this + 4) = v4 - 1;
  *((void *)this + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  int v10 = *((_DWORD *)this + 16);
  if (!v10)
  {
    unint64_t v19 = 0;
LABEL_20:
    llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)this + 48, v19, (uint64_t *)&v22);
    int v2 = v22;
    goto LABEL_21;
  }
  int v11 = v10 - 1;
  unsigned int v12 = ((v2 >> 4) ^ (v2 >> 9)) & v11;
  unint64_t v13 = (uint64_t *)(v9 + 8 * v12);
  uint64_t v14 = (mlir::Operation *)*v13;
  if ((mlir::Operation *)*v13 != v2)
  {
    int v15 = 0;
    int v16 = 1;
    while (v14 != (mlir::Operation *)-4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == (mlir::Operation *)-8192;
      }
      if (v17) {
        int v15 = v13;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & v11;
      unint64_t v13 = (uint64_t *)(v9 + 8 * v12);
      uint64_t v14 = (mlir::Operation *)*v13;
      if ((mlir::Operation *)*v13 == v2) {
        goto LABEL_21;
      }
    }
    if (v15) {
      unint64_t v19 = v15;
    }
    else {
      unint64_t v19 = v13;
    }
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v20 = (*(uint64_t (**)(void))(**((void **)this + 15) + 16))(*((void *)this + 15));
  uint64_t I32IntegerAttr = mlir::Builder::getI32IntegerAttr(*(mlir::Builder **)(*((void *)this + 15) + 8), *((_DWORD *)this + 32));
  mlir::Operation::setAttr((uint64_t)v2, v20, I32IntegerAttr);
}

void std::deque<mlir::Operation *>::__add_front_capacity(uint64_t a1)
{
  int v2 = *(char **)(a1 + 8);
  uint64_t v3 = *(char **)(a1 + 16);
  if (v3 == v2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v3 - v2) << 6) - 1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if ((unint64_t)(v4 - (*(void *)(a1 + 40) + v5)) >= 0x200)
  {
    *(void *)(a1 + 32) = v5 + 512;
    unsigned int v43 = (void *)*((void *)v3 - 1);
    *(void *)(a1 + 16) = v3 - 8;
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v43);
    return;
  }
  uint64_t v6 = *(char **)(a1 + 24);
  uint64_t v7 = *(char **)a1;
  uint64_t v8 = (uint64_t)&v6[-*(void *)a1];
  if (v3 - v2 < (unint64_t)v8)
  {
    if (v2 == v7)
    {
      unsigned int v43 = operator new(0x1000uLL);
      std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back((char **)a1, &v43);
      uint64_t v13 = *(void *)(a1 + 16);
      unsigned int v43 = *(void **)(v13 - 8);
      *(void *)(a1 + 16) = v13 - 8;
    }
    else
    {
      unsigned int v43 = operator new(0x1000uLL);
    }
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v43);
    if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
      *(void *)(a1 + 32) = 256;
    }
    else {
      *(void *)(a1 + 32) += 512;
    }
    return;
  }
  if (v6 == v7) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = v8 >> 2;
  }
  if (v9 >> 61) {
LABEL_54:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  int v10 = (char *)operator new(8 * v9);
  int v11 = operator new(0x1000uLL);
  if (v9)
  {
    unsigned int v12 = &v10[8 * v9];
  }
  else
  {
    uint64_t v14 = (char *)operator new(8uLL);
    unsigned int v12 = v14 + 8;
    operator delete(v10);
    int v2 = *(char **)(a1 + 8);
    uint64_t v3 = *(char **)(a1 + 16);
    int v10 = v14;
  }
  *(void *)int v10 = v11;
  int v15 = v10 + 8;
  int v16 = v10;
  if (v2 != v3)
  {
    while (1)
    {
      if (v15 == v12)
      {
        if (v10 <= v16)
        {
          unint64_t v27 = (v15 - v16) >> 2;
          if (v15 == v16) {
            unint64_t v27 = 1;
          }
          if (v27 >> 61) {
            goto LABEL_54;
          }
          unint64_t v28 = v27 >> 2;
          uint64_t v29 = 8 * v27;
          uint64_t v30 = (char *)operator new(8 * v27);
          uint64_t v31 = v30;
          BOOL v17 = &v30[8 * v28];
          uint64_t v20 = v17;
          int64_t v32 = v15 - v10;
          if (v15 != v10)
          {
            uint64_t v20 = &v17[v32 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v33 = v32 - 8;
            if (v33 < 0x38 || (unint64_t)(&v30[8 * v28] - v10) < 0x20)
            {
              uint64_t v34 = &v30[8 * v28];
              int v35 = v10;
              goto LABEL_44;
            }
            uint64_t v37 = (v33 >> 3) + 1;
            uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v34 = &v17[v38];
            int v35 = &v10[v38];
            int v39 = (long long *)(v10 + 16);
            unsigned int v40 = &v30[8 * v28 + 16];
            uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v42 = *v39;
              *((_OWORD *)v40 - 1) = *(v39 - 1);
              *(_OWORD *)unsigned int v40 = v42;
              v39 += 2;
              v40 += 32;
              v41 -= 4;
            }
            while (v41);
            if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_44:
                uint64_t v36 = *(void *)v35;
                v35 += 8;
                *(void *)uint64_t v34 = v36;
                v34 += 8;
              }
              while (v34 != v20);
            }
          }
          int v15 = &v30[v29];
          if (v16) {
            operator delete(v16);
          }
          int v16 = v31;
          goto LABEL_28;
        }
        uint64_t v22 = (v10 - v16) >> 3;
        if (v22 >= -1) {
          uint64_t v23 = v22 + 1;
        }
        else {
          uint64_t v23 = v22 + 2;
        }
        uint64_t v24 = v23 >> 1;
        uint64_t v25 = &v10[-8 * (v23 >> 1)];
        uint64_t v26 = v15;
        if (v15 != v10)
        {
          memmove(v25, v10, v15 - v10);
          uint64_t v26 = v10;
        }
        uint64_t v20 = &v25[v15 - v10];
        BOOL v17 = &v26[-8 * v24];
      }
      else
      {
        BOOL v17 = v10;
        uint64_t v20 = v15;
        int v15 = v12;
      }
LABEL_28:
      unsigned int v12 = v15;
      uint64_t v21 = *(void *)v2;
      v2 += 8;
      *(void *)uint64_t v20 = v21;
      unsigned int v18 = v20 + 8;
      int v15 = v18;
      int v10 = v17;
      if (v2 == *(char **)(a1 + 16)) {
        goto LABEL_22;
      }
    }
  }
  BOOL v17 = v10;
  unsigned int v18 = v10 + 8;
LABEL_22:
  unint64_t v19 = *(void **)a1;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = v18;
  *(void *)(a1 + 24) = v12;
  if (v18 - v17 == 8)
  {
    *(void *)(a1 + 32) = 256;
    if (!v19) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 512;
    if (!v19) {
      return;
    }
  }

  operator delete(v19);
}

void std::__for_each_segment[abi:nn180100]<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::back_insert_iterator<llvm::SmallVector<mlir::Operation *,6u>>>>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v7 = a2;
  uint64_t v8 = *a5;
  if (a1 == a3)
  {
    if (a2 != a4)
    {
      unsigned int v22 = *(_DWORD *)(v8 + 8);
      do
      {
        uint64_t v23 = *v7;
        if (v22 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v22 + 1, 8);
          unsigned int v22 = *(_DWORD *)(v8 + 8);
        }
        *(void *)(*(void *)v8 + 8 * v22) = v23;
        unsigned int v22 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v22;
        ++v7;
      }
      while (v7 != a4);
    }
  }
  else
  {
    uint64_t v11 = (uint64_t)(*a1 + 512);
    if ((uint64_t *)v11 != a2)
    {
      unsigned int v12 = *(_DWORD *)(v8 + 8);
      do
      {
        uint64_t v13 = *v7;
        if (v12 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v12 + 1, 8);
          unsigned int v12 = *(_DWORD *)(v8 + 8);
        }
        *(void *)(*(void *)v8 + 8 * v12) = v13;
        unsigned int v12 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v12;
        ++v7;
      }
      while (v7 != (uint64_t *)v11);
    }
    *a5 = v8;
    for (uint64_t i = (uint64_t *)(a1 + 1); i != (uint64_t *)a3; ++i)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *i;
      unsigned int v17 = *(_DWORD *)(v8 + 8);
      do
      {
        uint64_t v18 = *(void *)(v16 + v15);
        if (v17 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v17 + 1, 8);
          unsigned int v17 = *(_DWORD *)(v8 + 8);
        }
        *(void *)(*(void *)v8 + 8 * v17) = v18;
        unsigned int v17 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v17;
        v15 += 8;
      }
      while (v15 != 4096);
      *a5 = v8;
    }
    unint64_t v19 = *a3;
    if (*a3 != a4)
    {
      unsigned int v20 = *(_DWORD *)(v8 + 8);
      do
      {
        uint64_t v21 = *v19;
        if (v20 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v20 + 1, 8);
          unsigned int v20 = *(_DWORD *)(v8 + 8);
        }
        *(void *)(*(void *)v8 + 8 * v20) = v21;
        unsigned int v20 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v20;
        ++v19;
      }
      while (v19 != a4);
    }
  }
  *a5 = v8;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (uint64_t *)result;
  while (2)
  {
    int v10 = a2 - 1;
    uint64_t v140 = a2;
    unint64_t v141 = a2 - 2;
    long long v138 = a2 - 3;
    uint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = v11;
        uint64_t v12 = (char *)a2 - (char *)v11;
        uint64_t v13 = a2 - v11;
        if (v5 || !v4)
        {
          switch(v13)
          {
            case 0:
            case 1:
              return result;
            case 2:
              uint64_t v66 = *(a2 - 1);
              uint64_t v144 = *v9;
              uint64_t v145 = v66;
              uint64_t DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
              int v68 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
              uint64_t result = mlir::Operation::isBeforeInBlock(DefiningOp, v68);
              if (result)
              {
                uint64_t v69 = *v9;
                uint64_t *v9 = *(a2 - 1);
                *(a2 - 1) = v69;
              }
              break;
            case 3:
              uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v9, v9 + 1, v10);
              break;
            case 4:
              uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v9, v9 + 1, v9 + 2, v10);
              break;
            case 5:
              uint64_t result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,0>(v9, v9 + 1, v9 + 2, v9 + 3, v10);
              break;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v12 <= 191)
        {
          int v70 = v9 + 1;
          BOOL v72 = v9 == a2 || v70 == a2;
          if (a4)
          {
            if (!v72)
            {
              uint64_t v73 = 0;
              uint64_t v74 = v9;
              do
              {
                uint64_t v77 = *v74;
                uint64_t v76 = v74[1];
                uint64_t v74 = v70;
                uint64_t v144 = v77;
                uint64_t v145 = v76;
                uint64_t v78 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                __int32 v79 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                uint64_t result = mlir::Operation::isBeforeInBlock(v78, v79);
                if (result)
                {
                  uint64_t v80 = *v74;
                  uint64_t v81 = v73;
                  do
                  {
                    *(uint64_t *)((char *)v9 + v81 + 8) = *(uint64_t *)((char *)v9 + v81);
                    if (!v81)
                    {
                      int v75 = v9;
                      goto LABEL_70;
                    }
                    uint64_t v144 = *(uint64_t *)((char *)v9 + v81 - 8);
                    uint64_t v145 = v80;
                    int v82 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                    int v83 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                    uint64_t result = mlir::Operation::isBeforeInBlock(v82, v83);
                    v81 -= 8;
                  }
                  while ((result & 1) != 0);
                  int v75 = (uint64_t *)((char *)v9 + v81 + 8);
LABEL_70:
                  uint64_t *v75 = v80;
                  a2 = v140;
                }
                int v70 = v74 + 1;
                v73 += 8;
              }
              while (v74 + 1 != a2);
            }
          }
          else if (!v72)
          {
            do
            {
              uint64_t v129 = *v9;
              uint64_t v128 = v9[1];
              unint64_t v9 = v70;
              uint64_t v144 = v129;
              uint64_t v145 = v128;
              uint64_t v130 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
              unint64_t v131 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
              uint64_t result = mlir::Operation::isBeforeInBlock(v130, v131);
              if (result)
              {
                uint64_t v132 = *v9;
                uint64_t v133 = v9;
                do
                {
                  uint64_t v134 = v133;
                  uint64_t v135 = *--v133;
                  *uint64_t v134 = v135;
                  uint64_t v144 = *(v134 - 2);
                  uint64_t v145 = v132;
                  uint64_t v136 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                  int v137 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                  uint64_t result = mlir::Operation::isBeforeInBlock(v136, v137);
                }
                while ((result & 1) != 0);
                *uint64_t v133 = v132;
              }
              int v70 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            int64_t v84 = (unint64_t)(v13 - 2) >> 1;
            int64_t v142 = v84;
            do
            {
              int64_t v85 = v84;
              if (v142 >= v84)
              {
                uint64_t v86 = (2 * v84) | 1;
                unint64_t v87 = &v9[v86];
                if (2 * v84 + 2 < v13)
                {
                  uint64_t v88 = *v87;
                  uint64_t v144 = v87[1];
                  uint64_t v145 = v88;
                  unsigned int v89 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                  int v90 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                  BOOL v91 = mlir::Operation::isBeforeInBlock(v89, v90);
                  if (v91) {
                    ++v87;
                  }
                  a2 = v140;
                  if (v91) {
                    uint64_t v86 = 2 * v85 + 2;
                  }
                }
                uint64_t v92 = &v9[v85];
                uint64_t v93 = *v87;
                uint64_t v144 = *v92;
                uint64_t v145 = v93;
                BOOL v94 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                unsigned int v95 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                uint64_t result = mlir::Operation::isBeforeInBlock(v94, v95);
                if ((result & 1) == 0)
                {
                  int64_t v139 = v85;
                  uint64_t v96 = *v92;
                  do
                  {
                    uint64_t v100 = v87;
                    *uint64_t v92 = *v87;
                    if (v142 < v86) {
                      break;
                    }
                    uint64_t v101 = (2 * v86) | 1;
                    unint64_t v87 = &v9[v101];
                    if (2 * v86 + 2 < v13)
                    {
                      uint64_t v102 = *v87;
                      uint64_t v144 = v87[1];
                      uint64_t v145 = v102;
                      int v103 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                      unsigned int v104 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                      if (mlir::Operation::isBeforeInBlock(v103, v104))
                      {
                        ++v87;
                        uint64_t v101 = 2 * v86 + 2;
                      }
                    }
                    uint64_t v97 = *v87;
                    uint64_t v144 = v96;
                    uint64_t v145 = v97;
                    unsigned int v98 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                    int v99 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                    uint64_t result = mlir::Operation::isBeforeInBlock(v98, v99);
                    uint64_t v92 = v100;
                    uint64_t v86 = v101;
                  }
                  while (!result);
                  *uint64_t v100 = v96;
                  int64_t v85 = v139;
                  a2 = v140;
                }
              }
              int64_t v84 = v85 - 1;
            }
            while (v85);
            uint64_t v105 = (unint64_t)v12 >> 3;
            do
            {
              uint64_t v108 = 0;
              uint64_t v143 = *v9;
              BOOL v109 = v9;
              do
              {
                unsigned int v110 = &v109[v108 + 1];
                uint64_t v111 = (2 * v108) | 1;
                uint64_t v112 = 2 * v108 + 2;
                if (v112 < v105)
                {
                  uint64_t v113 = *v110;
                  uint64_t v144 = v110[1];
                  uint64_t v145 = v113;
                  unsigned int v114 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                  uint64_t v115 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                  uint64_t result = mlir::Operation::isBeforeInBlock(v114, v115);
                  if (result)
                  {
                    ++v110;
                    uint64_t v111 = v112;
                  }
                }
                *BOOL v109 = *v110;
                BOOL v109 = v110;
                uint64_t v108 = v111;
              }
              while (v111 <= (uint64_t)((unint64_t)(v105 - 2) >> 1));
              uint64_t v116 = a2 - 1;
              if (v110 == a2 - 1)
              {
                uint64_t v106 = a2 - 1;
                *unsigned int v110 = v143;
              }
              else
              {
                *unsigned int v110 = *v116;
                uint64_t v106 = a2 - 1;
                *uint64_t v116 = v143;
                uint64_t v117 = (char *)v110 - (char *)v9 + 8;
                if (v117 >= 9)
                {
                  unint64_t v118 = (((unint64_t)v117 >> 3) - 2) >> 1;
                  BOOL v119 = &v9[v118];
                  uint64_t v120 = *v119;
                  uint64_t v144 = *v110;
                  uint64_t v145 = v120;
                  char v121 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                  uint64_t v122 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                  uint64_t result = mlir::Operation::isBeforeInBlock(v121, v122);
                  if (result)
                  {
                    uint64_t v123 = *v110;
                    do
                    {
                      uint64_t v124 = v119;
                      *unsigned int v110 = *v119;
                      if (!v118) {
                        break;
                      }
                      unint64_t v118 = (v118 - 1) >> 1;
                      BOOL v119 = &v9[v118];
                      uint64_t v125 = *v119;
                      uint64_t v144 = v123;
                      uint64_t v145 = v125;
                      int v126 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
                      uint64_t v127 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
                      uint64_t result = mlir::Operation::isBeforeInBlock(v126, v127);
                      unsigned int v110 = v124;
                    }
                    while ((result & 1) != 0);
                    *uint64_t v124 = v123;
                  }
                }
              }
              BOOL v107 = v105-- <= 2;
              a2 = v106;
            }
            while (!v107);
          }
          return result;
        }
        unint64_t v14 = (unint64_t)v13 >> 1;
        uint64_t v15 = &v9[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401) {
          break;
        }
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v9, v15, v10);
        uint64_t v16 = v14;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v9 + 1, &v9[v16 - 1], v141);
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v9 + 2, &v9[v16 + 1], v138);
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(&v9[v16 - 1], v15, &v9[v16 + 1]);
        uint64_t v17 = *v9;
        uint64_t *v9 = v9[v16];
        v9[v16] = v17;
        --a3;
        if (a4) {
          goto LABEL_12;
        }
LABEL_11:
        uint64_t v18 = *(v9 - 1);
        uint64_t v144 = *v9;
        uint64_t v145 = v18;
        unint64_t v19 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
        unsigned int v20 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        if (mlir::Operation::isBeforeInBlock(v19, v20)) {
          goto LABEL_12;
        }
        uint64_t v45 = *v9;
        uint64_t v144 = *v10;
        uint64_t v145 = v45;
        uint64_t v46 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
        uint64_t v47 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        uint64_t result = mlir::Operation::isBeforeInBlock(v46, v47);
        if (result)
        {
          uint64_t v11 = v9;
          do
          {
            uint64_t v48 = v11[1];
            ++v11;
            uint64_t v144 = v48;
            uint64_t v145 = v45;
            uint64_t v49 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
            uint64_t v50 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
            uint64_t result = mlir::Operation::isBeforeInBlock(v49, v50);
          }
          while ((result & 1) == 0);
        }
        else
        {
          uint64_t v51 = v9 + 1;
          do
          {
            uint64_t v11 = v51;
            if (v51 >= a2) {
              break;
            }
            ++v51;
            uint64_t v144 = *v11;
            uint64_t v145 = v45;
            uint64_t v52 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
            uint64_t v53 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
            uint64_t result = mlir::Operation::isBeforeInBlock(v52, v53);
          }
          while (!result);
        }
        unsigned int v54 = a2;
        if (v11 < a2)
        {
          unsigned int v54 = a2;
          do
          {
            uint64_t v55 = *--v54;
            uint64_t v144 = v55;
            uint64_t v145 = v45;
            unsigned int v56 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
            uint64_t v57 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
            uint64_t result = mlir::Operation::isBeforeInBlock(v56, v57);
          }
          while ((result & 1) != 0);
        }
        while (v11 < v54)
        {
          uint64_t v58 = *v11;
          uint64_t *v11 = *v54;
          uint64_t *v54 = v58;
          do
          {
            uint64_t v59 = v11[1];
            ++v11;
            uint64_t v144 = v59;
            uint64_t v145 = v45;
            uint64_t v60 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
            uint64_t v61 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
          }
          while (!mlir::Operation::isBeforeInBlock(v60, v61));
          do
          {
            uint64_t v62 = *--v54;
            uint64_t v144 = v62;
            uint64_t v145 = v45;
            uint64_t v63 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
            unsigned int v64 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
            uint64_t result = mlir::Operation::isBeforeInBlock(v63, v64);
          }
          while ((result & 1) != 0);
        }
        uint64_t v65 = v11 - 1;
        BOOL v4 = v11 - 1 >= v9;
        BOOL v5 = v11 - 1 == v9;
        if (v11 - 1 != v9) {
          uint64_t *v9 = *v65;
        }
        a4 = 0;
        *uint64_t v65 = v45;
      }
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v15, v9, v10);
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_12:
      uint64_t v21 = 0;
      uint64_t v22 = *v9;
      do
      {
        uint64_t v23 = v9[v21 + 1];
        uint64_t v144 = v22;
        uint64_t v145 = v23;
        uint64_t v24 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
        uint64_t v25 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        ++v21;
      }
      while (mlir::Operation::isBeforeInBlock(v24, v25));
      uint64_t v26 = &v9[v21];
      unint64_t v27 = v140;
      BOOL v5 = v21 == 1;
      a2 = v140;
      if (v5)
      {
        unint64_t v27 = v140;
        do
        {
          if (v26 >= v27) {
            break;
          }
          uint64_t v31 = *--v27;
          uint64_t v144 = v22;
          uint64_t v145 = v31;
          int64_t v32 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
          unint64_t v33 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        }
        while (!mlir::Operation::isBeforeInBlock(v32, v33));
      }
      else
      {
        do
        {
          uint64_t v28 = *--v27;
          uint64_t v144 = v22;
          uint64_t v145 = v28;
          uint64_t v29 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
          uint64_t v30 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        }
        while (!mlir::Operation::isBeforeInBlock(v29, v30));
      }
      if (v26 >= v27)
      {
        unsigned int v43 = v26 - 1;
        if (v26 - 1 == v9) {
          goto LABEL_30;
        }
LABEL_29:
        uint64_t *v9 = *v43;
        goto LABEL_30;
      }
      uint64_t v34 = v26;
      int v35 = v27;
      do
      {
        uint64_t v36 = *v34;
        *uint64_t v34 = *v35;
        *int v35 = v36;
        do
        {
          uint64_t v37 = v34[1];
          ++v34;
          uint64_t v144 = v22;
          uint64_t v145 = v37;
          uint64_t v38 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
          int v39 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        }
        while (mlir::Operation::isBeforeInBlock(v38, v39));
        do
        {
          uint64_t v40 = *--v35;
          uint64_t v144 = v22;
          uint64_t v145 = v40;
          uint64_t v41 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v145);
          long long v42 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v144);
        }
        while (!mlir::Operation::isBeforeInBlock(v41, v42));
      }
      while (v34 < v35);
      unsigned int v43 = v34 - 1;
      a2 = v140;
      if (v43 != v9) {
        goto LABEL_29;
      }
LABEL_30:
      uint64_t *v43 = v22;
      if (v26 < v27) {
        goto LABEL_33;
      }
      BOOL v44 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v9, v43);
      uint64_t v11 = v43 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(v43 + 1, a2);
      if (result) {
        break;
      }
      if (!v44)
      {
LABEL_33:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,false>(v9, v43, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v43 + 1;
      }
    }
    a2 = v43;
    if (!v44) {
      continue;
    }
    return result;
  }
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a2, a3, a4);
  uint64_t v10 = *a5;
  uint64_t v27 = *a4;
  uint64_t v28 = v10;
  uint64_t DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
  uint64_t v12 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
  BOOL result = mlir::Operation::isBeforeInBlock(DefiningOp, v12);
  if (result)
  {
    uint64_t v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    uint64_t v15 = *a4;
    uint64_t v27 = *a3;
    uint64_t v28 = v15;
    uint64_t v16 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
    uint64_t v17 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
    BOOL result = mlir::Operation::isBeforeInBlock(v16, v17);
    if (result)
    {
      uint64_t v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      uint64_t v19 = *a3;
      uint64_t v27 = *a2;
      uint64_t v28 = v19;
      unsigned int v20 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
      uint64_t v21 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
      BOOL result = mlir::Operation::isBeforeInBlock(v20, v21);
      if (result)
      {
        uint64_t v22 = *a2;
        *a2 = *a3;
        *a3 = v22;
        uint64_t v23 = *a2;
        uint64_t v27 = *a1;
        uint64_t v28 = v23;
        uint64_t v24 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
        uint64_t v25 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
        BOOL result = mlir::Operation::isBeforeInBlock(v24, v25);
        if (result)
        {
          uint64_t v26 = *a1;
          *a1 = *a2;
          *a2 = v26;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v6;
  uint64_t DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
  uint64_t v8 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
  BOOL v9 = mlir::Operation::isBeforeInBlock(DefiningOp, v8);
  uint64_t v10 = *a3;
  if (v9)
  {
    uint64_t v25 = *a2;
    uint64_t v26 = v10;
    uint64_t v11 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
    uint64_t v12 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
    BOOL result = mlir::Operation::isBeforeInBlock(v11, v12);
    uint64_t v14 = *a1;
    if (result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v14;
      uint64_t v22 = *a3;
      uint64_t v25 = v14;
      uint64_t v26 = v22;
      uint64_t v23 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
      uint64_t v24 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
      BOOL result = mlir::Operation::isBeforeInBlock(v23, v24);
      if (!result) {
        return result;
      }
      uint64_t v14 = *a2;
      *a2 = *a3;
    }
    *a3 = v14;
  }
  else
  {
    uint64_t v25 = *a2;
    uint64_t v26 = v10;
    uint64_t v15 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
    uint64_t v16 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
    BOOL result = mlir::Operation::isBeforeInBlock(v15, v16);
    if (result)
    {
      uint64_t v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      uint64_t v18 = *a2;
      uint64_t v25 = *a1;
      uint64_t v26 = v18;
      uint64_t v19 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
      unsigned int v20 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
      BOOL result = mlir::Operation::isBeforeInBlock(v19, v20);
      if (result)
      {
        uint64_t v21 = *a1;
        *a1 = *a2;
        *a2 = v21;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v22 = *a1;
      uint64_t v23 = v6;
      uint64_t DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v23);
      uint64_t v8 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v22);
      if (mlir::Operation::isBeforeInBlock(DefiningOp, v8))
      {
        uint64_t v9 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a1 + 1, a1 + 2);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v22 = *v10;
    uint64_t v23 = v15;
    uint64_t v16 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v23);
    uint64_t v17 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v22);
    if (mlir::Operation::isBeforeInBlock(v16, v17))
    {
      uint64_t v18 = *v11;
      uint64_t v19 = v12;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          uint64_t v14 = a1;
          goto LABEL_7;
        }
        uint64_t v22 = *(uint64_t *)((char *)a1 + v19 + 8);
        uint64_t v23 = v18;
        unsigned int v20 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v23);
        uint64_t v21 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v22);
        v19 -= 8;
      }
      while (mlir::Operation::isBeforeInBlock(v20, v21));
      uint64_t v14 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_7:
      *uint64_t v14 = v18;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_4 &,mlir::Value *>(a1, a2, a3);
  uint64_t v8 = *a4;
  uint64_t v21 = *a3;
  uint64_t v22 = v8;
  uint64_t DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v22);
  uint64_t v10 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v21);
  BOOL result = mlir::Operation::isBeforeInBlock(DefiningOp, v10);
  if (result)
  {
    uint64_t v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    uint64_t v13 = *a3;
    uint64_t v21 = *a2;
    uint64_t v22 = v13;
    uint64_t v14 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v22);
    uint64_t v15 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v21);
    BOOL result = mlir::Operation::isBeforeInBlock(v14, v15);
    if (result)
    {
      uint64_t v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      uint64_t v17 = *a2;
      uint64_t v21 = *a1;
      uint64_t v22 = v17;
      uint64_t v18 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v22);
      uint64_t v19 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v21);
      BOOL result = mlir::Operation::isBeforeInBlock(v18, v19);
      if (result)
      {
        uint64_t v20 = *a1;
        *a1 = *a2;
        *a2 = v20;
      }
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_6>(uint64_t **a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **a1);
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_7>(unsigned char **a1, uint64_t a2)
{
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v4)) {
    return 1;
  }
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v5)) {
    return 1;
  }
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v6)) {
    return 1;
  }
  uint64_t result = 0;
  **a1 = 0;
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_8>(uint64_t **a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **a1);
}

mlir::Block *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_9>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  uint64_t result = (mlir::Block *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v4);
  if ((result & 1) == 0)
  {
    uint64_t result = mlir::collect_regions::detail::verifyShouldAddToQueue(**(mlir::Block ***)a1, *(void *)(*(void *)a1 + 8), **(void **)(a1 + 8), a2, 0);
    if ((_BYTE)result) {
      **(unsigned char **)(a1 + 16) = 1;
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::FunctionOpInterface,mlir::RegionOpCreator *,mlir::CostModelParams const*,std::function<void ()(mlir::Operation *,mlir::Operation *)>)::$_10>(uint64_t **a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **a1);
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__0NS1_9placement12HostTypeCastEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t **a1, mlir::GenericProgramPoint *this)
{
  if (this
    && *(_UNKNOWN **)(*((void *)this + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
  {
    uint64_t v3 = *a1;
    uint64_t v29 = this;
    uint64_t v4 = *v3;
    uint64_t v5 = *v3 + 16;
    long long v28 = *(_OWORD *)v5;
    uint64_t v6 = *((void *)this + 2);
    mlir::GenericProgramPoint::~GenericProgramPoint(this);
    *(void *)uint64_t v5 = v6;
    *(void *)(v4 + 24) = v7;
    uint64_t v8 = *(void *)v3[1];
    uint64_t v9 = *((void *)this + 3);
    uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v29);
    uint64_t v11 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v29) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v11) {
      goto LABEL_12;
    }
    uint64_t v12 = *v11;
    unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v14 = *(unsigned int *)(v12 + 16);
    if (!v14) {
      goto LABEL_12;
    }
    uint64_t v15 = *(void **)(v12 + 8);
    uint64_t v16 = &v15[2 * v14];
    do
    {
      unint64_t v17 = v14 >> 1;
      uint64_t v18 = &v15[2 * (v14 >> 1)];
      unint64_t v20 = *v18;
      uint64_t v19 = v18 + 2;
      v14 += ~(v14 >> 1);
      if (v20 < v13) {
        uint64_t v15 = v19;
      }
      else {
        unint64_t v14 = v17;
      }
    }
    while (v14);
    if (v15 != v16 && *v15 == v13) {
      uint64_t v21 = v15[1];
    }
    else {
LABEL_12:
    }
      uint64_t v21 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v8 + 136))(v8, v9, Input, v11, v21, v3[2]);
    uint64_t v22 = v3[2];
    uint64_t v23 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v29);
    uint64_t v30 = v23;
    v31[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v22, (unint64_t *)&v30, v31)&& v31[0] != *(void *)v22 + 16 * *(unsigned int *)(v22 + 16))
    {
      uint64_t v23 = *(void *)(v31[0] + 8);
    }
    uint64_t v30 = v23;
    uint64_t v24 = v29;
    uint64_t DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v30);
    uint64_t v26 = *((unsigned int *)v24 + 9);
    uint64_t v27 = (uint64_t)v24 - 16;
    if (!v26) {
      uint64_t v27 = 0;
    }
    v31[0] = v27;
    v31[1] = v26;
    mlir::ResultRange::replaceAllUsesWith(v31, DefiningOp);
    mlir::Operation::erase(v29);
    if (v4)
    {
      if ((void)v28)
      {
        *(_OWORD *)uint64_t v5 = v28;
      }
      else
      {
        *(void *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
      }
    }
  }
}

uint64_t _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__1NS1_24TargetLegalizerInterfaceES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESO_E4typeES4_OT1_EUlS4_E_EES2_lS4_(uint64_t *a1, mlir::Operation *a2)
{
  v67[19] = *MEMORY[0x1E4F143B8];
  if (!mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2)
    || !a2)
  {
    return 1;
  }
  InterfaceFor = (mlir::Operation *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  uint64_t v5 = *a1;
  v58[0] = a2;
  v58[1] = InterfaceFor;
  mlir::SymbolTable::getSymbolUses(a2, **(mlir::Operation ***)v5, (uint64_t)&__p);
  if (!v57)
  {
    unint64_t v17 = "Operation has no symbol table uses";
    goto LABEL_59;
  }
  uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v58);
  *(_DWORD *)(*(void *)(v5 + 8) + 8) = 0;
  if (!v57)
  {
    uint64_t v50 = (unint64_t *)std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_82;
  }
  uint64_t v7 = ArgOperands;
  uint64_t v8 = (char *)__p;
  uint64_t v9 = v56;
  if (__p != v56)
  {
    do
    {
      uint64_t v10 = *(void *)v8;
      if (*(_UNKNOWN **)(*(void *)(*(void *)v8 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::ReplacedOps,void>::id)
      {
        uint64_t v11 = *(void *)(v5 + 8);
        unint64_t v12 = *(unsigned int *)(v11 + 8);
        if (v12 >= *(unsigned int *)(v11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(v5 + 8), (void *)(v11 + 16), v12 + 1, 8);
          unint64_t v12 = *(unsigned int *)(v11 + 8);
        }
        *(void *)(*(void *)v11 + 8 * v12) = v10;
        ++*(_DWORD *)(v11 + 8);
      }
      v8 += 16;
    }
    while (v8 != v9);
  }
  uint64_t v13 = *(void *)(v5 + 16);
  int v14 = *(_DWORD *)(v13 + 8);
  if (v14 || *(_DWORD *)(v13 + 12))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 16);
    if (v15 > 4 * v14 && v15 >= 0x41)
    {
      llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear(v13);
      goto LABEL_31;
    }
    if (!v15) {
      goto LABEL_30;
    }
    uint64_t v18 = *(void **)v13;
    uint64_t v19 = (v15 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v19)
    {
      uint64_t v20 = v19 + 1;
      uint64_t v21 = (v19 + 1) & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v22 = &v18[2 * v21];
      uint64_t v23 = v18 + 2;
      uint64_t v24 = v21;
      do
      {
        *(v23 - 2) = -4096;
        void *v23 = -4096;
        v23 += 4;
        v24 -= 2;
      }
      while (v24);
      if (v20 == v21) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v22 = *(void **)v13;
    }
    uint64_t v25 = &v18[2 * v15];
    do
    {
      void *v22 = -4096;
      v22 += 2;
    }
    while (v22 != v25);
LABEL_30:
    *(void *)(v13 + 8) = 0;
  }
LABEL_31:
  uint64_t v26 = mlir::TargetLegalizerInterface::legalizeBody((uint64_t)v58, **(void **)(v5 + 8), *(unsigned int *)(*(void *)(v5 + 8) + 8), **(void **)(v5 + 24), *(void *)(v5 + 16));
  if (!v26)
  {
    unint64_t v17 = "Legalization failed";
LABEL_59:
    uint64_t v60 = (const void **)v17;
    __int16 v61 = 259;
    mlir::OpState::emitOpError((uint64_t **)v58, &v60, (uint64_t)&v62);
    if (v62) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v62);
    }
    goto LABEL_70;
  }
  uint64_t v27 = v26;
  mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v58);
  uint64_t v28 = *(void *)(v5 + 8);
  uint64_t v29 = *(unsigned int *)(v28 + 8);
  if (v29)
  {
    uint64_t v30 = *(unsigned int ***)v28;
    uint64_t v31 = *(void *)v28 + 8 * v29;
    uint64_t v53 = v31;
    uint64_t v54 = v7;
    while (1)
    {
      int64_t v32 = *v30;
      *(_DWORD *)(*(void *)(v5 + 32) + 8) = 0;
      uint64_t v33 = v32[9];
      uint64_t v34 = v33 ? (uint64_t)(v32 - 4) : 0;
      if (v33) {
        break;
      }
LABEL_34:
      if (++v30 == (unsigned int **)v31) {
        goto LABEL_74;
      }
    }
    char v35 = 0;
    uint64_t v36 = 0;
    while (1)
    {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, v36);
      uint64_t v38 = *(void *)(v5 + 16);
      uint64_t v60 = (const void **)NextResultAtOffset;
      uint64_t v62 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v38, (unint64_t *)&v60, &v62)|| v62 == *(void *)v38 + 16 * *(unsigned int *)(v38 + 16))
      {
        break;
      }
      uint64_t v40 = *(uint64_t **)(v62 + 8);
      if (!v40) {
        break;
      }
      if (v40 != (uint64_t *)NextResultAtOffset)
      {
        while (1)
        {
          uint64_t v41 = *(uint64_t **)NextResultAtOffset;
          if (!*(void *)NextResultAtOffset) {
            break;
          }
          long long v42 = (uint64_t *)v41[1];
          if (v42)
          {
            uint64_t *v42 = *v41;
            if (*v41) {
              *(void *)(*v41 + 8) = v41[1];
            }
          }
          v41[3] = (uint64_t)v40;
          v41[1] = (uint64_t)v40;
          uint64_t v43 = *v40;
          uint64_t *v41 = *v40;
          if (v43) {
            *(void *)(v43 + 8) = v41;
          }
          *uint64_t v40 = (uint64_t)v41;
        }
        char v35 = 1;
      }
      if (++v36 == v33)
      {
        uint64_t v31 = v53;
        uint64_t v7 = v54;
        if (v35) {
          mlir::Operation::erase((mlir::Operation *)v32);
        }
        goto LABEL_34;
      }
    }
    uint64_t v60 = (const void **)"Result has no mapping in the valueMap (result #";
    __int16 v61 = 259;
    mlir::Operation::emitOpError((uint64_t *)v32, &v60, (uint64_t)&v62);
    uint64_t v44 = *(void *)(NextResultAtOffset + 8) & 7;
    if (NextResultAtOffset && v44 == 6) {
      uint64_t v44 = (*(_DWORD *)(NextResultAtOffset + 16) + 6);
    }
    if (!v62)
    {
LABEL_70:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v63);
      uint64_t v16 = 0;
      if (!v57) {
        return v16;
      }
      goto LABEL_71;
    }
    LODWORD(v59[0]) = 5;
    v59[1] = v44;
    uint64_t v45 = (char *)v59;
    unint64_t v46 = v64;
    if (v65 < v66) {
      goto LABEL_67;
    }
    uint64_t v50 = &v64;
    unint64_t v51 = v65 + 1;
    if (v64 > (unint64_t)v59 || v64 + 24 * v65 <= (unint64_t)v59)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
      uint64_t v45 = (char *)v59;
      unint64_t v46 = v64;
      goto LABEL_67;
    }
LABEL_82:
    uint64_t v52 = (char *)v59 - v46;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v50, v67, v51, 24);
    unint64_t v46 = v64;
    uint64_t v45 = &v52[v64];
LABEL_67:
    unint64_t v47 = v46 + 24 * v65;
    long long v48 = *(_OWORD *)v45;
    *(void *)(v47 + 16) = *((void *)v45 + 2);
    *(_OWORD *)unint64_t v47 = v48;
    ++v65;
    if (v62)
    {
      mlir::Diagnostic::operator<<((uint64_t)v63, ")");
      if (v62) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v62);
      }
    }
    goto LABEL_70;
  }
LABEL_74:
  if (v27 != v7) {
    mlir::Operation::cloneWithoutRegions(v58[0]);
  }
  uint64_t v16 = 1;
  if (v57)
  {
LABEL_71:
    if (__p)
    {
      unsigned int v56 = (char *)__p;
      operator delete(__p);
    }
  }
  return v16;
}

mlir::GenericProgramPoint *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::legalizeRegions(mlir::ModuleOp,mlir::RegionOpCreator *)::$_1::operator() const(mlir::TargetLegalizerInterface)::{lambda(mlir::Operation *)#1}>(uint64_t a1, mlir::Operation *a2)
{
  uint64_t result = (mlir::GenericProgramPoint *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  if (!result)
  {
    uint64_t v5 = *(uint64_t ***)a1;
    uint64_t v6 = *(mlir::IRMapping **)(a1 + 8);
    return mlir::OpBuilder::clone(v5, a2, v6);
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_11computeCostENS1_8ModuleOpERKNS1_10DeviceInfoERNS1_18InFlightDiagnosticEE3__0NS1_24ExecutionCostOpInterfaceEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESQ_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t *a1, uint64_t a2)
{
  uint64_t result = mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  if (result)
  {
    if (a2)
    {
      uint64_t InterfaceFor = mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
      uint64_t v6 = *a1;
      v8[0] = a2;
      v8[1] = InterfaceFor;
      uint64_t result = mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)v8, *(void *)v6);
      **(float **)(v6 + 8) = v7 + **(float **)(v6 + 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  int v2 = *(void **)(v1 + 16);
  BOOL v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  if (v3)
  {
    uint64_t v22 = *(void *)(v1 + 8);
    uint64_t result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v22);
    if (result)
    {
      uint64_t v20 = result;
      uint64_t v21 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 104))(v20, v21, v1);
    }
  }
  else
  {
    unint64_t v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    unint64_t v7 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
    unint64_t v8 = *(unsigned int *)(v6 + 40);
    if (!v8) {
      goto LABEL_14;
    }
    uint64_t v9 = *(void **)(v6 + 32);
    uint64_t v10 = &v9[2 * v8];
    do
    {
      unint64_t v11 = v8 >> 1;
      unint64_t v12 = &v9[2 * (v8 >> 1)];
      unint64_t v14 = *v12;
      uint64_t v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7) {
        uint64_t v9 = v13;
      }
      else {
        unint64_t v8 = v11;
      }
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (uint64_t result = v9[1]) == 0)
    {
LABEL_14:
      uint64_t v16 = *(void *)(v6 + 24);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 104);
      return v19(v16, v18, v17);
    }
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_14collectRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEPKNS1_15CostModelParamsEE3__0NS1_4func6FuncOpES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESS_E4typeES4_OT1_EUlS4_E_EES2_lS4_(void ****a1, mlir::GenericProgramPoint *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = 1;
  if (a2)
  {
    if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
    {
      uint64_t v5 = *a1;
      uint64_t InterfaceFor = (mlir::GenericProgramPoint *)mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
      unint64_t v7 = **v5;
      uint64_t v8 = 0;
      mlir::collectRegions(a2, InterfaceFor, v7);
    }
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_11doPlacementENS1_8ModuleOpExxxNS_8ArrayRefIPNS1_15DeviceInterfaceEEERKNS1_10DeviceInfoENSt3__18optionalIjEEbE3__1NS1_4func6FuncOpES2_EENSK_9enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESW_E4typeES4_OT1_EUlS4_E_EES2_lS4_(uint64_t **a1, uint64_t a2)
{
  if (a2 && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
  {
    uint64_t v3 = **a1;
    uint64_t v4 = *(unsigned int *)(v3 + 8);
    if (v4 >= *(_DWORD *)(v3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(**a1, (void *)(v3 + 16), v4 + 1, 8);
      LODWORD(v4) = *(_DWORD *)(v3 + 8);
    }
    *(void *)(*(void *)v3 + 8 * v4) = a2;
    ++*(_DWORD *)(v3 + 8);
  }
  return 1;
}

uint64_t mlir::RegionOpCreator::getRegionCall(void *a1, uint64_t a2, mlir::Operation **a3, uint64_t a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  p_p = a5;
  uint64_t v107 = 0;
  if (a6)
  {
    __int32 v79 = a3;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    while (1)
    {
      uint64_t v88 = (void *)mlir::ValueRange::dereference_iterator(&p_p, v11);
      uint64_t DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v88);
      unint64_t v14 = (mlir::Block **)DefiningOp;
      if (v12 == 0 && DefiningOp != 0) {
        uint64_t v15 = DefiningOp;
      }
      else {
        uint64_t v15 = v12;
      }
      if ((v12 != 0 || DefiningOp == 0) && DefiningOp)
      {
        if (mlir::Operation::isBeforeInBlock((mlir::Block **)v12, DefiningOp)) {
          uint64_t v15 = (mlir::Operation *)v14;
        }
        else {
          uint64_t v15 = v12;
        }
      }
      uint64_t v16 = (void *)*v88;
      unint64_t v12 = v15;
      if (*v88) {
        break;
      }
LABEL_12:
      uint64_t v11 = ++v107;
      if (p_p == a5 && v11 == a6)
      {
        uint64_t v9 = a2;
        uint64_t v10 = a1;
        a3 = v79;
        if (v12) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
    }
    while (1)
    {
      uint64_t v17 = (mlir::Operation *)v16[2];
      if (mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v17))
      {
        if (v17) {
          uint64_t InterfaceFor = mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v17);
        }
        else {
          uint64_t InterfaceFor = 0;
        }
        uint64_t v92 = v17;
        uint64_t v93 = InterfaceFor;
        if (v17)
        {
          uint64_t v102 = &v104;
          uint64_t v103 = 0x400000000;
          mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v92, (uint64_t)&v102);
          uint64_t v19 = (uint64_t **)v102;
          if (v103)
          {
            uint64_t v20 = 40 * v103 - 40;
            do
            {
              uint64_t v21 = *v19;
              v19 += 5;
              uint64_t v22 = *v21;
              BOOL v24 = v22 == mlir::TypeID::get<mlir::MemoryEffects::Write>();
              BOOL v23 = v24;
              BOOL v24 = v24 || v20 == 0;
              v20 -= 40;
            }
            while (!v24);
            uint64_t v19 = (uint64_t **)v102;
            if (v102 != &v104) {
LABEL_30:
            }
              free(v19);
          }
          else
          {
            BOOL v23 = 0;
            if (v102 != &v104) {
              goto LABEL_30;
            }
          }
          if (v23 && mlir::Operation::isBeforeInBlock(v14, v17)) {
            unint64_t v12 = v17;
          }
        }
      }
      else
      {
        uint64_t v92 = 0;
        uint64_t v93 = 0;
      }
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_12;
      }
    }
  }
LABEL_38:
  unint64_t v12 = *a3;
LABEL_39:
  uint64_t v25 = v10[1];
  uint64_t v26 = (_OWORD *)(v25 + 16);
  long long v82 = *(_OWORD *)(v25 + 16);
  uint64_t v27 = *((void *)v12 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
  uint64_t v29 = *(void *)(v28 + 8);
  *(void *)(v25 + 16) = v27;
  *(void *)(v25 + 24) = v29;
  uint64_t v30 = *((void *)v12 + 3);
  uint64_t v31 = v10;
  uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t, std::string *, uint64_t))(*v10 + 152))(v10, v30, v9, a5, a6);
  uint64_t v33 = v32;
  uint64_t v34 = *(unsigned int *)(v32 + 36);
  if (v34) {
    char v35 = (void *)(v32 - 16);
  }
  else {
    char v35 = 0;
  }
  uint64_t v102 = v35;
  uint64_t v103 = 0;
  uint64_t v104 = a7;
  uint64_t v105 = 0;
  if (!v34)
  {
    uint64_t v50 = "extureUnitInfo";
LABEL_59:
    if ((void)v82)
    {
      *uint64_t v26 = v82;
    }
    else
    {
      *(void *)uint64_t v26 = 0;
      *(void *)(v25 + 24) = 0;
    }
    goto LABEL_62;
  }
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = v35;
  do
  {
    if (v104 == a7 && v37 == a8) {
      break;
    }
    uint64_t NextResultAtOffset = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v38, v36);
    uint64_t v42 = mlir::ValueRange::dereference_iterator(&v104, v105);
    uint64_t v88 = NextResultAtOffset;
    if ((NextResultAtOffset[1] & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v42 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v43 = v42;
      uint64_t v44 = (mlir::OpBuilder *)v31[1];
      uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v88);
      p_p = (std::string *)(*(void *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)mlir::OpBuilder::create<mlir::placement::HostTypeCast,mlir::Type const&,mlir::Value &>(v44, Loc, (uint64_t *)&p_p, (uint64_t *)&v88);
      unint64_t v46 = v88;
      uint64_t v47 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&__p);
      uint64_t v92 = v46;
      p_p = 0;
      char v48 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a9, (unint64_t *)&v92, &p_p);
      uint64_t v49 = (std::string::__raw *)p_p;
      if ((v48 & 1) == 0)
      {
        uint64_t v49 = (std::string::__raw *)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a9, (uint64_t)&v92, (unint64_t *)&v92, p_p);
        v49->__words[0] = (std::string::size_type)v92;
        v49->__words[1] = 0;
      }
      v49->__words[1] = v47;
    }
    uint64_t v38 = v102;
    uint64_t v36 = v103 + 1;
    uint64_t v37 = v105 + 1;
    ++v103;
    ++v105;
  }
  while (v102 != v35 || v36 != v34);
  uint64_t v50 = "20ZinIrTextureUnitInfo" + 8;
  if (v25) {
    goto LABEL_59;
  }
LABEL_62:
  uint64_t v101 = 0;
  uint64_t v102 = &v104;
  uint64_t v103 = *((void *)v50 + 5);
  uint64_t v100 = a7;
  if (a8)
  {
    uint64_t v51 = 0;
    uint64_t v52 = v31;
    while (1)
    {
      uint64_t v92 = (void *)mlir::ValueRange::dereference_iterator(&v100, v51);
      p_p = 0;
      int v53 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a9, (unint64_t *)&v92, &p_p);
      std::string::size_type size = 0;
      if (v53 && p_p != (std::string *)(*(void *)a9 + 16 * *(unsigned int *)(a9 + 16))) {
        std::string::size_type size = p_p->__r_.__value_.__l.__size_;
      }
      std::string::size_type v99 = size;
      uint64_t v55 = mlir::Value::getDefiningOp((mlir::Value *)&v99);
      uint64_t v56 = v55;
      if (*(unsigned char *)(v55 + 47)
        && (uint64_t InherentAttr = mlir::Operation::getInherentAttr(v55, (uint64_t)"name", 4), (_BYTE)v58))
      {
        if (!InherentAttr) {
          goto LABEL_74;
        }
      }
      else
      {
        uint64_t InherentAttr = mlir::DictionaryAttr::get(v56 + 56, "name", 4uLL);
        if (!InherentAttr)
        {
LABEL_74:
          uint64_t UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)v52[1], v58);
          uint64_t v61 = UnitAttr;
          int v62 = v103;
          if (v103 >= HIDWORD(v103))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, v103 + 1, 8);
            *((void *)v102 + v103) = v61;
            int v63 = v103 + 1;
          }
          else
          {
            *((void *)v102 + v103) = UnitAttr;
            int v63 = v62 + 1;
          }
          LODWORD(v103) = v63;
          goto LABEL_91;
        }
      }
      if (v99 && (*(void *)(v99 + 8) & 7) == 6) {
        unsigned int v59 = *(_DWORD *)(v99 + 16) + 6;
      }
      else {
        unsigned int v59 = *(void *)(v99 + 8) & 7;
      }
      uint64_t v98 = InherentAttr;
      unint64_t v64 = (mlir::StringAttr **)v52[1];
      uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v98);
      __int16 v91 = 773;
      uint64_t v88 = AttrData;
      uint64_t v89 = v66;
      int v90 = ":";
      std::to_string(&v87, v59);
      char v67 = v91;
      if ((_BYTE)v91)
      {
        if (v91 == 1)
        {
          uint64_t v92 = &v87;
          char v68 = 1;
          char v67 = 4;
        }
        else
        {
          if (HIBYTE(v91) != 1) {
            char v67 = 2;
          }
          uint64_t v69 = &v88;
          if (HIBYTE(v91) == 1) {
            uint64_t v69 = (void **)v88;
          }
          uint64_t v92 = v69;
          uint64_t v93 = v89;
          BOOL v94 = &v87;
          char v68 = 4;
        }
      }
      else
      {
        char v68 = 1;
      }
      char v95 = v67;
      char v96 = v68;
      llvm::Twine::str((llvm::Twine *)&v92, &__p);
      __int16 v108 = 260;
      p_p = &__p;
      uint64_t StringAttr = mlir::Builder::getStringAttr(v64, (mlir::MLIRContext *)&p_p);
      uint64_t v71 = StringAttr;
      int v72 = v103;
      if (v103 >= HIDWORD(v103))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, v103 + 1, 8);
        *((void *)v102 + v103) = v71;
        int v72 = v103;
      }
      else
      {
        *((void *)v102 + v103) = StringAttr;
      }
      LODWORD(v103) = v72 + 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
      }
      else if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_91;
      }
      operator delete(v87.__r_.__value_.__l.__data_);
LABEL_91:
      uint64_t v51 = ++v101;
      if (v100 == a7 && v51 == a8)
      {
        uint64_t v73 = (uint64_t *)v102;
        uint64_t v74 = v103;
        goto LABEL_99;
      }
    }
  }
  uint64_t v74 = 0;
  uint64_t v73 = &v104;
  uint64_t v52 = v31;
LABEL_99:
  uint64_t ArrayAttr = mlir::Builder::getArrayAttr((mlir::MLIRContext **)v52[1], (uint64_t)v73, v74);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v33 + 24));
  __int16 v108 = 261;
  p_p = (std::string *)"output_names";
  uint64_t v107 = 12;
  uint64_t v77 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&p_p);
  mlir::Operation::setAttr(v33, v77, ArrayAttr);
  if (v102 != &v104) {
    free(v102);
  }
  return v33;
}

uint64_t mlir::RegionOpCreator::materializeHostTypeConversion(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v53 = (unint64_t)a4;
  uint64_t v54 = a5;
  uint64_t v11 = (uint64_t *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v12 = *v11;
  unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v14 = *(unsigned int *)(v12 + 16);
  if (!v14) {
    goto LABEL_10;
  }
  uint64_t v15 = *(void **)(v12 + 8);
  uint64_t v16 = &v15[2 * v14];
  do
  {
    unint64_t v17 = v14 >> 1;
    uint64_t v18 = &v15[2 * (v14 >> 1)];
    unint64_t v20 = *v18;
    uint64_t v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13) {
      uint64_t v15 = v19;
    }
    else {
      unint64_t v14 = v17;
    }
  }
  while (v14);
  if (v15 != v16 && *v15 == v13) {
    uint64_t v21 = v15[1];
  }
  else {
LABEL_10:
  }
    uint64_t v21 = 0;
  v52[0] = v11;
  v52[1] = v21;
  if (a4 == v11)
  {
    uint64_t v27 = a3;
  }
  else
  {
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v53);
    uint64_t NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v23);
    uint64_t v25 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
    uint64_t v27 = a3;
    if (NumElements == mlir::ShapedType::getNumElements(v25, v26))
    {
      uint64_t v28 = (void *)v53;
      if (*(_UNKNOWN **)(*(void *)v53 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        unint64_t v55 = v53;
        v51[0] = (void *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v55);
        v51[1] = v30;
        unint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v51);
        uint64_t v28 = (void *)v53;
      }
      else
      {
        unint64_t canMapOperands = 0;
      }
      if (*(_UNKNOWN **)(*v28 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        v51[0] = v28;
        uint64_t MemorySpace = mlir::MemRefType::getMemorySpace((mlir::MemRefType *)v51);
      }
      else
      {
        uint64_t MemorySpace = 0;
      }
      uint64_t v32 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v53);
      uint64_t v34 = v33;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v52);
      uint64_t v36 = (void *)mlir::MemRefType::get(v32, v34, OperandRange, canMapOperands, MemorySpace);
      uint64_t v37 = v36;
      if (!v36) {
        goto LABEL_29;
      }
      uint64_t v38 = *v36;
      unint64_t v39 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v40 = *(unsigned int *)(v38 + 16);
      if (!v40) {
        goto LABEL_29;
      }
      uint64_t v41 = *(void **)(v38 + 8);
      uint64_t v42 = &v41[2 * v40];
      do
      {
        unint64_t v43 = v40 >> 1;
        uint64_t v44 = &v41[2 * (v40 >> 1)];
        unint64_t v46 = *v44;
        uint64_t v45 = v44 + 2;
        v40 += ~(v40 >> 1);
        if (v46 < v39) {
          uint64_t v41 = v45;
        }
        else {
          unint64_t v40 = v43;
        }
      }
      while (v40);
      if (v41 != v42 && *v41 == v39) {
        uint64_t v47 = v41[1];
      }
      else {
LABEL_29:
      }
        uint64_t v47 = 0;
      uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, unint64_t))(*(void *)a1 + 160))(a1, a2, v37, v47, a3);
    }
  }
  uint64_t v48 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v53);
  if (v48 != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v52)) {
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(a1, a2, v53, v54, v27);
  }
  unint64_t v55 = a3;
  v51[0] = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(a6, &v55, v51);
  uint64_t v50 = v51[0];
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a6, (uint64_t)&v55, &v55, v51[0]);
    uint64_t v50 = (void *)result;
    *(void *)uint64_t result = v55;
    *(void *)(result + 8) = 0;
  }
  v50[1] = v27;
  return result;
}

uint64_t mlir::RegionOpCreator::canonicalizeTranslatedRegion(mlir::RegionOpCreator *this, mlir::Operation *a2)
{
  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)v6);
  unint64_t v3 = *((unsigned int *)a2 + 11);
  if ((v3 & 0x7FFFFF) != 0)
  {
    uint64_t v4 = (mlir::Region **)((((unint64_t)a2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *((unsigned int *)a2 + 10));
    BOOL v14 = 0;
    __int16 v7 = 256;
    int v8 = 0;
    __int16 v9 = 0;
    long long v10 = xmmword_1810FE4B0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    mlir::applyPatternsAndFoldGreedily(v4, (const mlir::FrozenRewritePatternSet *)v6, (long long *)&v7, &v14);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)v6);
  return 1;
}

uint64_t mlir::TypeID::get<mlir::MemoryEffects::Write>()
{
  uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    if (v2)
    {
      long long v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Write]";
      unint64_t v11 = 76;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffects::Write,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      uint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    }
  }
  return v0[433];
}

uint64_t mlir::minimalLegalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a2 + 8 * a3;
    do
    {
      uint64_t v8 = *(unsigned int *)(*(void *)v6 + 36);
      if (v8) {
        uint64_t v9 = *(void *)v6 - 16;
      }
      else {
        uint64_t v9 = 0;
      }
      if (v8)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, i);
          uint64_t v16 = NextResultAtOffset;
          unint64_t v17 = 0;
          char v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(a4, (unint64_t *)&v16, &v17);
          uint64_t v13 = v17;
          if ((v12 & 1) == 0)
          {
            uint64_t v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a4, (uint64_t)&v16, (unint64_t *)&v16, v17);
            *uint64_t v13 = v16;
            v13[1] = 0;
          }
          v13[1] = NextResultAtOffset;
        }
      }
      v6 += 8;
    }
    while (v6 != v7);
  }
  if (!mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(a1)
    || !a1)
  {
    return 0;
  }
  uint64_t InterfaceFor = mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(InterfaceFor + 16))(InterfaceFor, a1);
}

uint64_t mlir::TargetLegalizerInterface::legalizeBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (**(uint64_t (***)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(*(void *)(a1 + 8), *(void *)a1, a2, a3, a4, a5);
}

uint64_t mlir::TargetLegalizerInterface::legalizeRegionBody(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1[1] + 8))(a1[1], *a1, a2, a3, a4, a5, a6);
}

uint64_t mlir::TargetLegalizerInterface::setFunctionType(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(a1[1] + 24))(a1[1], *a1, a2);
}

float mlir::getDeviceInfo@<S0>(int a1@<W0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 20) = 0u;
  *(_OWORD *)(a3 + 4) = 0u;
  *(_DWORD *)(a3 + 48) = 978433816;
  *(_DWORD *)(a3 + 52) = a1;
  *(unsigned char *)a3 = 1;
  *(_DWORD *)(a3 + 36) = a2;
  if (a1 < 5)
  {
    if (a1 == 3)
    {
      *(_DWORD *)(a3 + 4) = 1072399647;
      *(_DWORD *)(a3 + 32) = 1112014848;
      *(void *)(a3 + 40) = 0x4248000041A3D70ALL;
      if ((uint64_t)a2 < 6)
      {
        uint64_t v3 = 0x424800003FEB851FLL;
        goto LABEL_37;
      }
      if (a2 <= 0xA) {
        goto LABEL_19;
      }
      if (a2 <= 0x14)
      {
LABEL_25:
        *(_DWORD *)(a3 + 32) = 1128792064;
        int v4 = 1120403456;
LABEL_28:
        *(_DWORD *)(a3 + 44) = v4;
        *(_DWORD *)(a3 + 4) = 1080788255;
        uint64_t v3 = 0x43480000406B851FLL;
        goto LABEL_37;
      }
      if (a2 <= 0x28)
      {
LABEL_30:
        *(_DWORD *)(a3 + 32) = 1137180672;
        int v5 = 1120403456;
LABEL_33:
        *(_DWORD *)(a3 + 44) = v5;
        *(_DWORD *)(a3 + 4) = 1080788255;
        uint64_t v3 = 0x43C80000406B851FLL;
        goto LABEL_37;
      }
      *(_DWORD *)(a3 + 32) = 1145569280;
      int v6 = 1120403456;
    }
    else
    {
      if (a1 == 4)
      {
        *(_DWORD *)(a3 + 4) = 1072399647;
        *(_DWORD *)(a3 + 32) = 1112014848;
        *(void *)(a3 + 40) = 0x4248000041A3D70ALL;
        uint64_t v3 = 0x424800003FEB851FLL;
        if ((uint64_t)a2 < 7) {
          goto LABEL_37;
        }
        if (a2 > 0xA)
        {
          if (a2 > 0x14)
          {
            if (a2 > 0x28) {
              goto LABEL_37;
            }
            goto LABEL_30;
          }
          goto LABEL_25;
        }
LABEL_19:
        *(_DWORD *)(a3 + 32) = 1120403456;
        *(_DWORD *)(a3 + 44) = 1120403456;
        uint64_t v3 = 0x42C800003FEB851FLL;
        goto LABEL_37;
      }
      *(_DWORD *)(a3 + 4) = 1072399647;
      *(_DWORD *)(a3 + 32) = 1107846758;
      *(void *)(a3 + 40) = 0x4208666641591EB8;
      if ((uint64_t)a2 < 6)
      {
        uint64_t v3 = 0x420866663FEB851FLL;
        goto LABEL_37;
      }
      if (a2 <= 0xA)
      {
        *(_DWORD *)(a3 + 32) = 1116235366;
        *(_DWORD *)(a3 + 44) = 1116235366;
        uint64_t v3 = 0x428866663FEB851FLL;
        goto LABEL_37;
      }
      if (a2 <= 0x14)
      {
        *(_DWORD *)(a3 + 32) = 1128792064;
        int v4 = 1116235366;
        goto LABEL_28;
      }
      if (a2 <= 0x28)
      {
        *(_DWORD *)(a3 + 32) = 1137180672;
        int v5 = 1116235366;
        goto LABEL_33;
      }
      *(_DWORD *)(a3 + 32) = 1145569280;
      int v6 = 1116235366;
    }
    *(_DWORD *)(a3 + 44) = v6;
    *(_DWORD *)(a3 + 4) = 1089176863;
    uint64_t v3 = 0x4448000040EB851FLL;
    goto LABEL_37;
  }
  *(_DWORD *)(a3 + 4) = 1072399647;
  *(_DWORD *)(a3 + 32) = 1115291648;
  *(void *)(a3 + 40) = 0x427A000041A3D70ALL;
  uint64_t v3 = 0x427A00003FEB851FLL;
  if ((uint64_t)a2 >= 7)
  {
    if (a2 > 0xA)
    {
      if (a2 > 0x14)
      {
        if (a2 <= 0x28)
        {
          *(_DWORD *)(a3 + 32) = 1140457472;
          *(_DWORD *)(a3 + 44) = 1123680256;
          *(_DWORD *)(a3 + 4) = 1080788255;
          uint64_t v3 = 0x43FA0000406B851FLL;
        }
      }
      else
      {
        *(_DWORD *)(a3 + 32) = 1132068864;
        *(_DWORD *)(a3 + 44) = 1123680256;
        *(_DWORD *)(a3 + 4) = 1080788255;
        uint64_t v3 = 0x437A0000406B851FLL;
      }
    }
    else
    {
      *(_DWORD *)(a3 + 32) = 1123680256;
      *(_DWORD *)(a3 + 44) = 1123680256;
      uint64_t v3 = 0x42FA00003FEB851FLL;
    }
  }
LABEL_37:
  float v7 = (float)(uint64_t)a2 * 0.33;
  *(float *)(a3 + 8) = *(float *)&v3 + *(float *)&v3;
  *(void *)(a3 + 12) = v3;
  *(float *)(a3 + 20) = v7;
  *(float *)(a3 + 24) = v7;
  float result = v7 * 0.25;
  *(float *)(a3 + 28) = v7 * 0.25;
  return result;
}

mlir::placement::PlacementDialect *mlir::placement::PlacementDialect::PlacementDialect(mlir::placement::PlacementDialect *this, mlir::MLIRContext *a2)
{
  uint64_t v3 = (void *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"placement", 9, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::PlacementDialect,void>::id);
  *uint64_t v3 = &unk_1EC9CDD00;
  mlir::Dialect::addOperations<mlir::placement::ANEIOCast,mlir::placement::HostTypeCast,mlir::placement::MemrefToTensor,mlir::placement::RegionCall,mlir::placement::ReplacedOps,mlir::placement::ReplacedOpsLiveOuts,mlir::placement::StartTimer,mlir::placement::StopTimer,mlir::placement::TensorToMemref>((uint64_t)v3);
  mlir::Dialect::addAttribute<mlir::placement::RegionTypeAttr>((uint64_t)this);
  mlir::Dialect::addType<mlir::placement::TimerHandleType>((uint64_t)this);
  return this;
}

void mlir::placement::PlacementDialect::~PlacementDialect(llvm **this)
{
}

void sub_1806B4014(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::Dialect::addOperations<mlir::placement::ANEIOCast,mlir::placement::HostTypeCast,mlir::placement::MemrefToTensor,mlir::placement::RegionCall,mlir::placement::ReplacedOps,mlir::placement::ReplacedOpsLiveOuts,mlir::placement::StartTimer,mlir::placement::StopTimer,mlir::placement::TensorToMemref>(uint64_t a1)
{
  int v2 = operator new(0x70uLL);
  long long v10 = mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v10, 0, 0);
  uint64_t v3 = (uint64_t)v10;
  long long v10 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  mlir::RegisteredOperationName::insert<mlir::placement::HostTypeCast>(a1);
  int v4 = operator new(0x70uLL);
  long long v10 = mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v10, (uint64_t)&mlir::placement::MemrefToTensor::getAttributeNames(void)::attrNames, 3);
  uint64_t v5 = (uint64_t)v10;
  long long v10 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  int v6 = operator new(0x70uLL);
  long long v10 = mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v10, (uint64_t)&mlir::placement::RegionCall::getAttributeNames(void)::attrNames, 2);
  uint64_t v7 = (uint64_t)v10;
  long long v10 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOps>(a1);
  mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOpsLiveOuts>(a1);
  mlir::RegisteredOperationName::insert<mlir::placement::StartTimer>(a1);
  mlir::RegisteredOperationName::insert<mlir::placement::StopTimer>(a1);
  uint64_t v8 = operator new(0x70uLL);
  long long v10 = mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v10, (uint64_t)&mlir::placement::TensorToMemref::getAttributeNames(void)::attrNames, 3);
  uint64_t result = (uint64_t)v10;
  long long v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::placement::RegionTypeAttr::get(mlir::MLIRContext *a1, unsigned int a2)
{
  unsigned int v5 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  v6[1] = a1;
  return mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, &v5);
}

uint64_t mlir::placement::RegionTypeAttr::parse(mlir::AsmParser *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  mlir::AsmParser::getContext(a1);
  (*(void (**)(mlir::AsmParser *))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 152))(a1))
  {
    uint64_t v2 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 40))(a1);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if (!mlir::AsmParser::parseKeyword(a1, (llvm::StringRef *)&v13))
    {
LABEL_28:
      uint64_t v6 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 40))(a1);
      __int16 v19 = 259;
      (*(void (**)(uint64_t *__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(void *)a1 + 24))(&v15, a1, v6, &v17);
      if (v15) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v15);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v16);
      return 0;
    }
    if (v14 != 3)
    {
LABEL_16:
      __int16 v12 = 257;
      (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, unsigned int *))(*(void *)a1 + 24))(&v17, a1, v2, v11);
      if (v17)
      {
        mlir::Diagnostic::operator<<((uint64_t)v18, "expected ");
        if (v17)
        {
          mlir::Diagnostic::operator<<((uint64_t)v18, "::mlir::placement::RegionType");
          if (v17)
          {
            mlir::Diagnostic::operator<<((uint64_t)v18, " to be one of: ");
            if (v17)
            {
              mlir::Diagnostic::operator<<((uint64_t)v18, "GPU");
              if (v17)
              {
                mlir::Diagnostic::operator<<((uint64_t)v18, ", ");
                if (v17)
                {
                  mlir::Diagnostic::operator<<((uint64_t)v18, "ANE");
                  if (v17)
                  {
                    mlir::Diagnostic::operator<<((uint64_t)v18, ", ");
                    if (v17) {
                      mlir::Diagnostic::operator<<((uint64_t)v18, "CPU");
                    }
                  }
                }
              }
            }
          }
        }
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v17);
      if (v17) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v18);
      goto LABEL_28;
    }
    if (*(_WORD *)v13 == 20551 && *(unsigned char *)(v13 + 2) == 85)
    {
      unsigned int v8 = 0;
    }
    else if (*(_WORD *)v13 == 20033 && *(unsigned char *)(v13 + 2) == 69)
    {
      unsigned int v8 = 1;
    }
    else
    {
      if (*(_WORD *)v13 != 20547 || *(unsigned char *)(v13 + 2) != 85) {
        goto LABEL_16;
      }
      unsigned int v8 = 2;
    }
    if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 168))(a1))
    {
      Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
      v11[0] = v8;
      AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
      unint64_t v17 = (const char *)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
      v18[0] = Context;
      return mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v17, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, v11);
    }
  }
  return 0;
}

llvm::raw_ostream *mlir::placement::RegionTypeAttr::print(mlir::placement::RegionTypeAttr *this, mlir::AsmPrinter *a2)
{
  mlir::Attribute::getContext(this);
  int v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "<", 1uLL);
  }
  else
  {
    *unsigned int v5 = 60;
    ++*((void *)v4 + 4);
  }
  int v6 = *(_DWORD *)(*(void *)this + 8);
  if (!v6)
  {
    BOOL v7 = 0;
    uint64_t v9 = "GPU";
LABEL_14:
    size_t v8 = 3;
    goto LABEL_15;
  }
  if (v6 == 2)
  {
    BOOL v7 = 0;
    uint64_t v9 = "CPU";
    goto LABEL_14;
  }
  BOOL v7 = v6 != 1;
  if (v6 == 1) {
    size_t v8 = 3;
  }
  else {
    size_t v8 = 0;
  }
  if (v6 == 1) {
    uint64_t v9 = "ANE";
  }
  else {
    uint64_t v9 = "";
  }
LABEL_15:
  long long v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v11 = (void *)*((void *)v10 + 4);
  if (v8 <= *((void *)v10 + 3) - (void)v11)
  {
    if (!v7)
    {
      memcpy(v11, v9, v8);
      *((void *)v10 + 4) += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v10, v9, v8);
  }
  uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v13)
  {
    return llvm::raw_ostream::write(result, ">", 1uLL);
  }
  else
  {
    *uint64_t v13 = 62;
    ++*((void *)result + 4);
  }
  return result;
}

uint64_t mlir::placement::PlacementDialect::parseAttribute(uint64_t a1, mlir::AsmParser *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a2 + 40))(a2);
  uint64_t v18 = a2;
  uint64_t v5 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a2 + 40))(a2);
  v22[2] = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = v5;
  v22[0] = 0;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void **))(*(void *)a2 + 608))(a2, &v20))
  {
    *(_WORD *)uint64_t v22 = 256;
    if (!v22[2]) {
      v22[2] = 1;
    }
    goto LABEL_14;
  }
  uint64_t v15 = (const void **)"region_type";
  uint64_t v16 = 11;
  if (v22[2]) {
    goto LABEL_14;
  }
  uint64_t v6 = v21;
  if (v21)
  {
    if (v21 == 11 && *v20 == 0x745F6E6F69676572 && *(void *)((char *)v20 + 3) == 0x657079745F6E6F69)
    {
      uint64_t v8 = mlir::placement::RegionTypeAttr::parse(a2);
      uint64_t v6 = 0;
      uint64_t v9 = 0;
      v22[0] = v8 != 0;
      *(_WORD *)&v22[1] = 257;
      goto LABEL_15;
    }
    goto LABEL_26;
  }
  (*(void (**)(mlir::AsmParser *, const void ***, uint64_t))(*(void *)v18 + 616))(v18, &v15, 1);
  if (v22[2])
  {
LABEL_14:
    uint64_t v6 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    goto LABEL_15;
  }
  uint64_t v6 = v21;
LABEL_26:
  uint64_t v8 = 0;
  uint64_t v9 = (const void **)v20;
  *(_WORD *)uint64_t v22 = 0;
  v22[2] = 1;
LABEL_15:
  if ((unsigned __int16)mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)&v18) <= 0xFFu)
  {
    __int16 v14 = 257;
    (*(void (**)(mlir::AsmParser **__return_ptr, mlir::AsmParser *, uint64_t, char *))(*(void *)a2 + 24))(&v18, a2, v4, v13);
    if (v18)
    {
      if (v18)
      {
        __int16 v17 = 261;
        uint64_t v15 = v9;
        uint64_t v16 = v6;
        mlir::Diagnostic::operator<<((uint64_t)&v19, &v15);
        if (v18)
        {
          if (v18)
          {
            long long v10 = *(const void ***)(a1 + 8);
            uint64_t v11 = *(void *)(a1 + 16);
            __int16 v17 = 261;
            uint64_t v15 = v10;
            uint64_t v16 = v11;
            mlir::Diagnostic::operator<<((uint64_t)&v19, &v15);
            if (v18)
            {
              if (v18) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v18);
              }
            }
          }
        }
      }
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v19);
    return 0;
  }
  return v8;
}

void mlir::placement::PlacementDialect::printAttribute(uint64_t a1, uint64_t a2, mlir::AsmPrinter *a3)
{
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id)
  {
    uint64_t v6 = a2;
    uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a3 + 16))(a3);
    uint64_t v5 = *((void *)v4 + 4);
    if ((unint64_t)(*((void *)v4 + 3) - v5) > 0xA)
    {
      *(_DWORD *)(v5 + 7) = 1701869940;
      *(void *)uint64_t v5 = *(void *)"region_type";
      *((void *)v4 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v4, "region_type", 0xBuLL);
    }
    mlir::placement::RegionTypeAttr::print((mlir::placement::RegionTypeAttr *)&v6, a3);
  }
}

uint64_t mlir::placement::TimerHandleType::get(mlir::placement::TimerHandleType *this, mlir::MLIRContext *a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = this;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(this);
  v5[0] = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
  v5[1] = &v6;
  return mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_, (uint64_t)v5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, (unint64_t *)&v4);
}

uint64_t mlir::placement::TimerHandleType::parse(mlir::placement::TimerHandleType *this, mlir::AsmParser *a2)
{
  v15[23] = *MEMORY[0x1E4F143B8];
  mlir::AsmParser::getContext(this);
  (*(void (**)(mlir::placement::TimerHandleType *))(*(void *)this + 40))(this);
  if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *))(*(void *)this + 152))(this))
  {
    __int16 v11 = 257;
    if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *, const char *, uint64_t, uint64_t *))(*(void *)this + 368))(this, "handle", 6, v10))
    {
      if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *))(*(void *)this + 136))(this))
      {
        v10[0] = 0;
        char v3 = mlir::AsmParser::parseInteger<unsigned long long>((uint64_t)this, v10);
        uint64_t v4 = *(void *)this;
        if (v3)
        {
          uint64_t v5 = v10[0];
          if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *))(v4 + 168))(this))
          {
            Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(this);
            uint64_t v12 = v5;
            uint64_t v13 = Context;
            TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
            v10[0] = (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
            v10[1] = (uint64_t)&v13;
            return mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, (unint64_t *)&v12);
          }
        }
        else
        {
          uint64_t v9 = (*(uint64_t (**)(mlir::placement::TimerHandleType *))(v4 + 40))(this);
          __int16 v11 = 259;
          (*(void (**)(uint64_t *__return_ptr, mlir::placement::TimerHandleType *, uint64_t, uint64_t *))(*(void *)this + 24))(&v14, this, v9, v10);
          if (v14) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
          }
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
        }
      }
    }
  }
  return 0;
}

llvm::raw_ostream *mlir::placement::TimerHandleType::print(mlir::placement::TimerHandleType *this, mlir::AsmPrinter *a2)
{
  mlir::Attribute::getContext(this);
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "<", 1uLL);
  }
  else
  {
    *uint64_t v5 = 60;
    ++*((void *)v4 + 4);
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 5)
  {
    *(_WORD *)(v7 + 4) = 25964;
    *(_DWORD *)uint64_t v7 = 1684955496;
    *((void *)v6 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v6, "handle", 6uLL);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 32;
  }
  long long v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v11 = (unsigned char *)*((void *)v10 + 4);
  if (*((unsigned char **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, "=", 1uLL);
  }
  else
  {
    unsigned char *v11 = 61;
    ++*((void *)v10 + 4);
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    *uint64_t v13 = 32;
  }
  unint64_t v14 = *(void *)(*(void *)this + 8);
  uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  llvm::raw_ostream::operator<<(v15, v14);
  uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v17 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v17)
  {
    return llvm::raw_ostream::write(result, ">", 1uLL);
  }
  else
  {
    unsigned char *v17 = 62;
    ++*((void *)result + 4);
  }
  return result;
}

uint64_t mlir::placement::PlacementDialect::parseType(uint64_t a1, mlir::placement::TimerHandleType *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(mlir::placement::TimerHandleType *))(*(void *)a2 + 40))(a2);
  uint64_t v19 = a2;
  uint64_t v5 = (*(uint64_t (**)(mlir::placement::TimerHandleType *))(*(void *)a2 + 40))(a2);
  unint64_t v23[2] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = v5;
  v23[0] = 0;
  if (!(*(unsigned __int8 (**)(mlir::placement::TimerHandleType *, uint64_t *))(*(void *)a2 + 608))(a2, &v21))
  {
    *(_WORD *)uint64_t v23 = 256;
    if (!v23[2]) {
      unint64_t v23[2] = 1;
    }
    goto LABEL_14;
  }
  uint64_t v16 = (const void **)"timer";
  uint64_t v17 = 5;
  if (v23[2]) {
    goto LABEL_14;
  }
  uint64_t v7 = v22;
  if (v22)
  {
    if (v22 == 5 && *(_DWORD *)v21 == 1701669236 && *(unsigned char *)(v21 + 4) == 114)
    {
      uint64_t v9 = mlir::placement::TimerHandleType::parse(a2, v6);
      uint64_t v7 = 0;
      long long v10 = 0;
      v23[0] = v9 != 0;
      *(_WORD *)&v23[1] = 257;
      goto LABEL_15;
    }
    goto LABEL_26;
  }
  (*(void (**)(mlir::placement::TimerHandleType *, const void ***, uint64_t))(*(void *)v19 + 616))(v19, &v16, 1);
  if (v23[2])
  {
LABEL_14:
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    long long v10 = 0;
    goto LABEL_15;
  }
  uint64_t v7 = v22;
LABEL_26:
  uint64_t v9 = 0;
  long long v10 = (const void **)v21;
  *(_WORD *)uint64_t v23 = 0;
  unint64_t v23[2] = 1;
LABEL_15:
  if ((unsigned __int16)mlir::AsmParser::KeywordSwitch<mlir::OptionalParseResult>::operator mlir::OptionalParseResult((uint64_t)&v19) <= 0xFFu)
  {
    __int16 v15 = 257;
    (*(void (**)(mlir::placement::TimerHandleType **__return_ptr, mlir::placement::TimerHandleType *, uint64_t, char *))(*(void *)a2 + 24))(&v19, a2, v4, v14);
    if (v19)
    {
      if (v19)
      {
        __int16 v18 = 261;
        uint64_t v16 = v10;
        uint64_t v17 = v7;
        mlir::Diagnostic::operator<<((uint64_t)&v20, &v16);
        if (v19)
        {
          if (v19)
          {
            __int16 v11 = *(const void ***)(a1 + 8);
            uint64_t v12 = *(void *)(a1 + 16);
            __int16 v18 = 261;
            uint64_t v16 = v11;
            uint64_t v17 = v12;
            mlir::Diagnostic::operator<<((uint64_t)&v20, &v16);
            if (v19)
            {
              if (v19) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v19);
              }
            }
          }
        }
      }
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v20);
    return 0;
  }
  return v9;
}

void mlir::placement::PlacementDialect::printType(uint64_t a1, uint64_t a2, mlir::AsmPrinter *a3)
{
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id)
  {
    uint64_t v6 = a2;
    uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(void *)a3 + 16))(a3);
    uint64_t v5 = *((void *)v4 + 4);
    if ((unint64_t)(*((void *)v4 + 3) - v5) > 4)
    {
      *(unsigned char *)(v5 + 4) = 114;
      *(_DWORD *)uint64_t v5 = 1701669236;
      *((void *)v4 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v4, "timer", 5uLL);
    }
    mlir::placement::TimerHandleType::print((mlir::placement::TimerHandleType *)&v6, a3);
  }
}

uint64_t mlir::placement::detail::ANEIOCastGenericAdaptorBase::ANEIOCastGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "placement.ane_io_cast", 21, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps0(uint64_t *a1, const void **a2, const void **a3, const void **a4, unsigned int a5)
{
  v47[19] = *MEMORY[0x1E4F143B8];
  unint64_t v39 = a2;
  unint64_t v6 = *a2;
  uint64_t v7 = (void *)*((void *)*a2 + 17);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v10 = *((unsigned int *)v6 + 4);
    if (!v10) {
      goto LABEL_14;
    }
    uint64_t v11 = (void *)v6[1];
    uint64_t v12 = &v11[2 * v10];
    do
    {
      unint64_t v13 = v10 >> 1;
      unint64_t v14 = &v11[2 * (v10 >> 1)];
      unint64_t v16 = *v14;
      __int16 v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9) {
        uint64_t v11 = v15;
      }
      else {
        unint64_t v10 = v13;
      }
    }
    while (v10);
    if (v11 != v12 && *v11 == v9) {
      uint64_t v17 = (const void **)v11[1];
    }
    else {
LABEL_14:
    }
      uint64_t v17 = 0;
    uint64_t v42 = a2;
    __int16 v18 = &v42;
    goto LABEL_36;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    unint64_t v26 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v27 = *((unsigned int *)v6 + 4);
    if (!v27) {
      goto LABEL_34;
    }
    uint64_t v28 = (void *)v6[1];
    uint64_t v29 = &v28[2 * v27];
    do
    {
      unint64_t v30 = v27 >> 1;
      uint64_t v31 = &v28[2 * (v27 >> 1)];
      unint64_t v33 = *v31;
      uint64_t v32 = v31 + 2;
      v27 += ~(v27 >> 1);
      if (v33 < v26) {
        uint64_t v28 = v32;
      }
      else {
        unint64_t v27 = v30;
      }
    }
    while (v27);
    if (v28 != v29 && *v28 == v26) {
      uint64_t v17 = (const void **)v28[1];
    }
    else {
LABEL_34:
    }
      uint64_t v17 = 0;
    v37[0] = a2;
    __int16 v18 = v37;
LABEL_36:
    v18[1] = v17;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v18);
    return 1;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id) {
    return 1;
  }
  __int16 v38 = 261;
  v37[0] = a3;
  v37[1] = a4;
  mlir::Operation::emitOpError(a1, v37, (uint64_t)&v42);
  if (v42)
  {
    mlir::Diagnostic::operator<<((uint64_t)v43, " #");
    if (v42)
    {
      int v40 = 5;
      uint64_t v41 = a5;
      uint64_t v20 = &v40;
      unint64_t v21 = v44;
      if (v45 >= v46)
      {
        unint64_t v35 = v45 + 1;
        if (v44 <= (unint64_t)&v40 && v44 + 24 * v45 > (unint64_t)&v40)
        {
          uint64_t v36 = (char *)&v40 - v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          unint64_t v21 = v44;
          uint64_t v20 = (int *)&v36[v44];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          uint64_t v20 = &v40;
          unint64_t v21 = v44;
        }
      }
      unint64_t v22 = v21 + 24 * v45;
      long long v23 = *(_OWORD *)v20;
      *(void *)(v22 + 16) = *((void *)v20 + 2);
      *(_OWORD *)unint64_t v22 = v23;
      ++v45;
      if (v42) {
        mlir::Diagnostic::operator<<((uint64_t)v43, " must be tensor of any type values or memref of any type values or index, but got ");
      }
    }
  }
  uint64_t v24 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v42, (uint64_t *)&v39);
  uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v24);
  if (v42) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v42);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v43);
  return v25;
}

uint64_t mlir::placement::ANEIOCast::verify(uint64_t **this)
{
  v8[23] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)((*this)[9] + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v7);
  if (!DefiningOp
    || *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id
    || (*(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(*this - 1) & 0xFFFFFFFFFFFFFFF8))
  {
    return 1;
  }
  __int16 v6 = 257;
  mlir::OpState::emitOpError(this, &v5, (uint64_t)&v7);
  if (v7) {
    mlir::Diagnostic::operator<<((uint64_t)v8, "invalid conversion");
  }
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v7);
  if (v7) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return v3;
}

uint64_t mlir::placement::detail::MemrefToTensorGenericAdaptorBase::MemrefToTensorGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "placement.memref_to_tensor", 26, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::placement::detail::MemrefToTensorGenericAdaptorBase::getInterleave(mlir::placement::detail::MemrefToTensorGenericAdaptorBase *this)
{
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue(this);
  uint64_t v3 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end(this);
  uint64_t v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v3, **(void **)(*((void *)this + 1) + 96));
  if ((v5 & 1) != 0 && (uint64_t v6 = *((void *)v4 + 1)) != 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = *(void **)(*(void *)v6 + 136);
    if (v10 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      uint64_t v6 = 0;
    }
    uint64_t v16 = v6;
    if (v10 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      mlir::IntegerAttr::getValue(&v16, (llvm::APInt *)&__p);
      if (v15 >= 0x41) {
        p_p = (uint64_t *)__p;
      }
      else {
        p_p = (uint64_t *)&__p;
      }
      uint64_t v12 = *p_p;
      uint64_t v7 = *p_p & 0xFFFFFF00;
      if (v15 >= 0x41 && __p) {
        operator delete[](__p);
      }
      uint64_t v9 = v12;
      uint64_t v8 = 0x100000000;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  return v8 | v7 | v9;
}

uint64_t mlir::placement::MemrefToTensorAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  v42[23] = *MEMORY[0x1E4F143B8];
  uint64_t v40 = *a1;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v40);
  if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (**(void **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        uint64_t v5 = *((void *)Value + 1);
      }
      else if (*(void *)(*(void *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        uint64_t v6 = *((void *)Value + 1);
      }
      else if (*(void *)(*(void *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        uint64_t v7 = (void *)*((void *)Value + 1);
      }
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
    }
    while (Value != (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40));
    if (v7)
    {
      if (!mlir::DenseIntElementsAttr::classof((uint64_t)v7)) {
        goto LABEL_33;
      }
      uint64_t v8 = *v7;
      unint64_t v9 = mlir::TypeID::get<mlir::ElementsAttr>();
      unint64_t v10 = *(unsigned int *)(v8 + 16);
      if (!v10) {
        goto LABEL_20;
      }
      uint64_t v11 = *(void **)(v8 + 8);
      uint64_t v12 = &v11[2 * v10];
      do
      {
        unint64_t v13 = v10 >> 1;
        unint64_t v14 = &v11[2 * (v10 >> 1)];
        unint64_t v16 = *v14;
        unsigned int v15 = v14 + 2;
        v10 += ~(v10 >> 1);
        if (v16 < v9) {
          uint64_t v11 = v15;
        }
        else {
          unint64_t v10 = v13;
        }
      }
      while (v10);
      if (v11 != v12 && *v11 == v9) {
        uint64_t v17 = v11[1];
      }
      else {
LABEL_20:
      }
        uint64_t v17 = 0;
      v35[0] = v7;
      v35[1] = v17;
      Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v35);
      uint64_t v19 = Type;
      if (!Type) {
        goto LABEL_30;
      }
      uint64_t v20 = *Type;
      unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v22 = *(unsigned int *)(v20 + 16);
      if (!v22) {
        goto LABEL_30;
      }
      long long v23 = *(void **)(v20 + 8);
      uint64_t v24 = &v23[2 * v22];
      do
      {
        unint64_t v25 = v22 >> 1;
        unint64_t v26 = &v23[2 * (v22 >> 1)];
        unint64_t v28 = *v26;
        unint64_t v27 = v26 + 2;
        v22 += ~(v22 >> 1);
        if (v28 < v21) {
          long long v23 = v27;
        }
        else {
          unint64_t v22 = v25;
        }
      }
      while (v22);
      if (v23 != v24 && *v23 == v21) {
        uint64_t v29 = v23[1];
      }
      else {
LABEL_30:
      }
        uint64_t v29 = 0;
      uint64_t v41 = (uint64_t)v19;
      v42[0] = v29;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
      if (v30 != 1
        || (uint64_t v37 = v7,
            v38[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37),
            v38[1] = v31,
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v38),
            !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_33:
        uint64_t v32 = "'placement.memref_to_tensor' op attribute 'shape' failed to satisfy constraint: ui64 elements attribute of rank 1";
        goto LABEL_44;
      }
    }
  }
  if (v6)
  {
    if (*(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      uint64_t v32 = "'placement.memref_to_tensor' op attribute 'resultElementType' failed to satisfy constraint: any type attribute";
      goto LABEL_44;
    }
    uint64_t v41 = v6;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  }
  if (!v5) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v35[0] = v5;
    uint64_t v41 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v35);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v41, 32)) {
      return 1;
    }
  }
  uint64_t v32 = "'placement.memref_to_tensor' op attribute 'interleave' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_44:
  v35[0] = v32;
  __int16 v36 = 259;
  mlir::emitError(a2, (uint64_t)v35, (uint64_t)&v41);
  uint64_t v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v33;
}

uint64_t mlir::placement::MemrefToTensor::getShapeAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  uint64_t v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t v7 = mlir::ArrayAttr::getValue(v6);
  unint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 16));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (mlir::DenseIntElementsAttr::classof(*((void *)v9 + 1))) {
    return v11;
  }
  return 0;
}

uint64_t mlir::placement::MemrefToTensor::getShape(mlir::Operation **this)
{
  return mlir::placement::MemrefToTensor::getShapeAttr(this);
}

uint64_t mlir::placement::MemrefToTensor::getResultElementTypeAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  uint64_t v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t v7 = mlir::ArrayAttr::getValue(v6);
  unint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 8));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
    return *((void *)v9 + 1);
  }
  return 0;
}

uint64_t mlir::placement::MemrefToTensor::getResultElementType(mlir::Operation **this)
{
  uint64_t result = mlir::placement::MemrefToTensor::getResultElementTypeAttr(this);
  uint64_t v2 = result;
  if (result) {
    return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v2);
  }
  return result;
}

uint64_t mlir::placement::MemrefToTensor::getInterleaveAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  uint64_t v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t v7 = mlir::ArrayAttr::getValue(v6);
  unint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8), **(void **)(*((void *)*this + 6) + 96));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return *((void *)v9 + 1);
  }
  return 0;
}

uint64_t mlir::placement::MemrefToTensor::getInterleave(mlir::Operation **this)
{
  uint64_t result = mlir::placement::MemrefToTensor::getInterleaveAttr(this);
  uint64_t v7 = result;
  if (result)
  {
    mlir::IntegerAttr::getValue(&v7, (llvm::APInt *)&__p);
    if (v6 >= 0x41) {
      p_p = (unsigned int *)__p;
    }
    else {
      p_p = (unsigned int *)&__p;
    }
    uint64_t v3 = *p_p;
    if (v6 >= 0x41 && __p != 0) {
      operator delete[](__p);
    }
    return v3 | 0x100000000;
  }
  return result;
}

void mlir::placement::MemrefToTensor::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  if (a5)
  {
    mlir::NamedAttribute::NamedAttribute(&v14, *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 16), a5);
    mlir::NamedAttrList::push_back(a2 + 112, v14, v15);
  }
  if (a6)
  {
    mlir::NamedAttribute::NamedAttribute(&v14, *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8), a6);
    mlir::NamedAttrList::push_back(a2 + 112, v14, v15);
  }
  if (a7)
  {
    mlir::NamedAttribute::NamedAttribute(&v14, **(void **)(*(void *)(a2 + 8) + 96), a7);
    mlir::NamedAttrList::push_back(a2 + 112, v14, v15);
  }
  uint64_t v12 = *(unsigned int *)(a2 + 72);
  if (v12 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v12) = a3;
  ++*(_DWORD *)(a2 + 72);
}

uint64_t mlir::placement::MemrefToTensor::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v72 = a6;
  LOBYTE(v73) = 0;
  char v74 = 0;
  uint64_t v75 = a9;
  uint64_t v76 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v72);
    if (v74) {
      char v74 = 0;
    }
    mlir::OperationName::OperationName(&v73, "placement.memref_to_tensor", 26, Context);
    char v74 = 1;
  }
  uint64_t v77 = a4;
  uint64_t v78 = a5;
  if (a5)
  {
    uint64_t v15 = mlir::UnknownLoc::get(this, a2);
    if (mlir::placement::MemrefToTensorAdaptor::verify(&v72, v15))
    {
      uint64_t v69 = v77;
      uint64_t v70 = 0;
      uint64_t v16 = mlir::ValueRange::dereference_iterator(&v69, 0);
      v68[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
      v68[1] = a2;
      if (v68[0])
      {
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v68);
        ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v68);
        unint64_t v20 = v18;
        uint64_t v69 = v71;
        uint64_t v70 = 0x500000000;
        size_t v21 = 8 * v18;
        if (8 * v18 < 0x29)
        {
          unsigned int v22 = 0;
          if (!v18)
          {
LABEL_17:
            LODWORD(v70) = v22 + (v21 >> 3);
            Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
            unint64_t v28 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
            uint64_t v29 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v28, *(void *)(*(void *)(v73 + 96) + 8));
            if (v30)
            {
              uint64_t v31 = *((void *)v29 + 1);
              if (v31)
              {
                uint64_t v32 = *(void **)(*(void *)v31 + 136);
                if (v32 != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
                  uint64_t v31 = 0;
                }
                v67[0] = v31;
                if (v32 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
                  uint64_t OperandRange = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v67);
                }
              }
            }
            uint64_t v33 = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
            uint64_t v34 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
            unint64_t v35 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v33, v34, *(void *)(*(void *)(v73 + 96) + 16));
            if ((v36 & 1) == 0
              || (uint64_t v37 = *((void *)v35 + 1)) == 0
              || !mlir::DenseIntElementsAttr::classof(*((void *)v35 + 1)))
            {
LABEL_47:
              uint64_t v49 = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
              uint64_t v50 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
              uint64_t v51 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v49, v50, **(void **)(v73 + 96));
              if (v52)
              {
                uint64_t v53 = *((void *)v51 + 1);
                if (v53)
                {
                  if (*(_UNKNOWN **)(*(void *)v53 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                  {
                    uint64_t v54 = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
                    unint64_t v55 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
                    uint64_t v56 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v54, v55, *(void *)(*(void *)(v73 + 96) + 16));
                    if ((v57 & 1) == 0
                      || (uint64_t v58 = *((void *)v56 + 1)) == 0
                      || (mlir::DenseIntElementsAttr::classof(v58) & 1) == 0)
                    {
                      uint64_t v59 = v70;
                      if ((v70 & 0xFFFFFFFE) != 4)
                      {
                        uint64_t v63 = mlir::UnrankedTensorType::get(OperandRange);
                        goto LABEL_58;
                      }
                      uint64_t Interleave = mlir::placement::detail::MemrefToTensorGenericAdaptorBase::getInterleave((mlir::placement::detail::MemrefToTensorGenericAdaptorBase *)&v72);
                      uint64_t v61 = 16;
                      if (v59 == 4) {
                        uint64_t v61 = 8;
                      }
                      int v62 = v69;
                      *(uint64_t *)((char *)v69 + v61) /= Interleave;
                      v62[v59 - 1] *= Interleave;
                    }
                  }
                }
              }
              uint64_t v63 = mlir::RankedTensorType::get((uint64_t)v69, v70, OperandRange, 0);
LABEL_58:
              uint64_t v64 = v63;
              unsigned int v65 = *(_DWORD *)(a11 + 8);
              if (v65 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v65 + 1, 8);
                unsigned int v65 = *(_DWORD *)(a11 + 8);
              }
              *(void *)(*(void *)a11 + 8 * v65) = v64;
              ++*(_DWORD *)(a11 + 8);
              if (v69 != v71) {
                free(v69);
              }
              return 1;
            }
            v67[0] = v37;
            v67[1] = 1;
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v67, 8, 1, 0))
            {
              uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v67);
              LOBYTE(ArgAttrsAttr) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v67);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v67);
              mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v67);
            }
            else
            {
              uint64_t RawStringData = 0;
            }
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v67, 8, 1, 0))
            {
              uint64_t v39 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v67);
              int isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v67);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v67);
              unint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v67);
              unint64_t v20 = NumElements;
              LODWORD(v70) = 0;
              if (NumElements <= HIDWORD(v70))
              {
                unsigned int v42 = 0;
                BOOL v66 = RawStringData == v39 && isSplat == ArgAttrsAttr;
                int v44 = v66;
                if (v66 && !NumElements)
                {
LABEL_46:
                  LODWORD(v70) = v42 + v20;
                  goto LABEL_47;
                }
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, NumElements, 8);
                unsigned int v42 = v70;
                BOOL v43 = RawStringData == v39 && isSplat == ArgAttrsAttr;
                int v44 = v43;
              }
            }
            else
            {
              int v44 = 0;
              unsigned int v42 = 0;
            }
            uint64_t v45 = 0;
            unsigned int v46 = (char *)v69 + 8 * v42;
            do
            {
              if ((_BYTE)ArgAttrsAttr) {
                uint64_t v47 = 0;
              }
              else {
                uint64_t v47 = v45;
              }
              *(void *)&v46[8 * v45] = *(void *)(RawStringData + 8 * v47);
              BOOL v43 = v20 - 1 == v45++;
              if (v43) {
                int v48 = v44;
              }
              else {
                int v48 = 0;
              }
            }
            while (v48 != 1);
            goto LABEL_46;
          }
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, (uint64_t)(8 * v18) >> 3, 8);
          unsigned int v22 = v70;
          if (!v20) {
            goto LABEL_17;
          }
        }
        memcpy((char *)v69 + 8 * v22, ArgAttrsAttr, v21);
        unsigned int v22 = v70;
        goto LABEL_17;
      }
    }
  }
  uint64_t v23 = mlir::Float32Type::get(this, a2);
  uint64_t v24 = mlir::UnrankedTensorType::get(v23);
  uint64_t v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

void mlir::placement::MemrefToTensor::build(mlir::UnknownLoc **a1, uint64_t a2, void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v27[2] = *MEMORY[0x1E4F143B8];
  mlir::OperationState::addOperands(a2, (uint64_t)a3, a4);
  *(void *)(a2 + 192) = 0;
  uint64_t v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  char __src = v27;
  uint64_t v26 = 0x200000000;
  uint64_t v13 = *a1;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::placement::MemrefToTensor::inferReturnTypes(v13, v16, v17, a3, a4, Dictionary, v18, v19, v24[0], v24[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v20 = __src;
  }
  uint64_t v21 = v26;
  uint64_t v22 = *(unsigned int *)(a2 + 72);
  unint64_t v23 = v22 + v26;
  if (v23 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v23, 8);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  if (v21)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v22), v20, 8 * v21);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v22 + v21;
  if (__src != v27) {
    free(__src);
  }
}

BOOL mlir::placement::MemrefToTensor::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    unsigned int v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 16 * v4;
    do
    {
      uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      uint64_t v11 = *this;
      if (**(void **)((*this)[6] + 96) == CallableRegion)
      {
        unsigned int v6 = (const void **)*((void *)Value + 1);
      }
      else
      {
        uint64_t v12 = mlir::CallGraphNode::getCallableRegion(Value);
        uint64_t v11 = *this;
        if (*(void *)(*(void *)((*this)[6] + 96) + 8) == v12)
        {
          uint64_t v7 = *((void *)Value + 1);
        }
        else
        {
          uint64_t v13 = mlir::CallGraphNode::getCallableRegion(Value);
          uint64_t v11 = *this;
          if (*(void *)(*(void *)((*this)[6] + 96) + 16) == v13) {
            uint64_t v8 = (const void **)*((void *)Value + 1);
          }
        }
      }
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v9 -= 16;
    }
    while (v9);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    unsigned int v6 = 0;
    uint64_t v11 = *this;
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps0(v11, v8, (const void **)"shape", 5)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*this, v7, (const void **)"resultElementType", (const void **)0x11)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*this, v6, (const void **)"interleave", (const void **)0xA)|| !mlir::placement::__mlir_ods_local_type_constraint_PlacementOps2(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7,
                           0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v14 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps0(uint64_t *a1, const void **a2, const void **a3, uint64_t a4)
{
  v41[23] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 1;
  }
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)a2)) {
    goto LABEL_25;
  }
  uint64_t v8 = *a2;
  unint64_t v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v10 = *((unsigned int *)v8 + 4);
  if (!v10) {
    goto LABEL_11;
  }
  uint64_t v11 = (void *)v8[1];
  uint64_t v12 = &v11[2 * v10];
  do
  {
    unint64_t v13 = v10 >> 1;
    uint64_t v14 = &v11[2 * (v10 >> 1)];
    unint64_t v16 = *v14;
    uint64_t v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9) {
      uint64_t v11 = v15;
    }
    else {
      unint64_t v10 = v13;
    }
  }
  while (v10);
  if (v11 != v12 && *v11 == v9) {
    uint64_t v17 = v11[1];
  }
  else {
LABEL_11:
  }
    uint64_t v17 = 0;
  uint64_t v37 = a2;
  uint64_t v38 = v17;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v37);
  int v19 = Type;
  if (!Type) {
    goto LABEL_21;
  }
  uint64_t v20 = *Type;
  unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v22 = *(unsigned int *)(v20 + 16);
  if (!v22) {
    goto LABEL_21;
  }
  unint64_t v23 = *(void **)(v20 + 8);
  uint64_t v24 = &v23[2 * v22];
  do
  {
    unint64_t v25 = v22 >> 1;
    uint64_t v26 = &v23[2 * (v22 >> 1)];
    unint64_t v28 = *v26;
    unint64_t v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21) {
      unint64_t v23 = v27;
    }
    else {
      unint64_t v22 = v25;
    }
  }
  while (v22);
  if (v23 != v24 && *v23 == v21) {
    uint64_t v29 = v23[1];
  }
  else {
LABEL_21:
  }
    uint64_t v29 = 0;
  uint64_t v40 = v19;
  v41[0] = v29;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v40);
  if (v30 == 1)
  {
    uint64_t v34 = a2;
    v35[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v34);
    v35[1] = v31;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v35);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
      return 1;
    }
  }
LABEL_25:
  __int16 v39 = 257;
  mlir::Operation::emitOpError(a1, &v37, (uint64_t)&v40);
  if (v40)
  {
    mlir::Diagnostic::operator<<((uint64_t)v41, "attribute '");
    if (v40)
    {
      __int16 v39 = 261;
      uint64_t v37 = a3;
      uint64_t v38 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v41, &v37);
      if (v40) {
        mlir::Diagnostic::operator<<((uint64_t)v41, "' failed to satisfy constraint: ui64 elements attribute of rank 1");
      }
    }
  }
  uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v40);
  if (v40) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v41);
  return v32;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  v11[23] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    uint64_t v10 = a2;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v10);
    return 1;
  }
  __int16 v9 = 257;
  mlir::Operation::emitOpError(a1, v8, (uint64_t)&v10);
  if (v10)
  {
    mlir::Diagnostic::operator<<((uint64_t)v11, "attribute '");
    if (v10)
    {
      __int16 v9 = 261;
      v8[0] = a3;
      v8[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v11, v8);
      if (v10) {
        mlir::Diagnostic::operator<<((uint64_t)v11, "' failed to satisfy constraint: any type attribute");
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v10);
  if (v10) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v10);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v11);
  return v6;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(uint64_t *a1, const void **a2, const void **a3, const void **a4)
{
  v12[23] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 1;
  }
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v9[0] = a2;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32)) {
      return 1;
    }
  }
  __int16 v10 = 257;
  mlir::Operation::emitOpError(a1, v9, (uint64_t)&Value);
  if (Value)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "attribute '");
    if (Value)
    {
      __int16 v10 = 261;
      v9[0] = a3;
      v9[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v12, v9);
      if (Value) {
        mlir::Diagnostic::operator<<((uint64_t)v12, "' failed to satisfy constraint: 32-bit unsigned integer attribute");
      }
    }
  }
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps2(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  v39[19] = *MEMORY[0x1E4F143B8];
  uint64_t v31 = a2;
  uint64_t v9 = *(void *)a2;
  if (*(_UNKNOWN **)(*(void *)a2 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    goto LABEL_13;
  }
  unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v12 = *(unsigned int *)(v9 + 16);
  if (!v12) {
    goto LABEL_10;
  }
  unint64_t v13 = *(void **)(v9 + 8);
  uint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    unint64_t v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    uint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      unint64_t v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_10:
  }
    uint64_t v19 = 0;
  uint64_t v34 = a2;
  v35[0] = v19;
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v34);
  if (mlir::isStrided(a2)) {
    return 1;
  }
LABEL_13:
  __int16 v30 = 261;
  v29[0] = a3;
  v29[1] = a4;
  mlir::Operation::emitOpError(a1, v29, (uint64_t)&v34);
  if (v34)
  {
    mlir::Diagnostic::operator<<((uint64_t)v35, " #");
    if (v34)
    {
      int v32 = 5;
      uint64_t v33 = a5;
      unint64_t v21 = &v32;
      unint64_t v22 = v36;
      if (v37 >= v38)
      {
        unint64_t v27 = v37 + 1;
        if (v36 <= (unint64_t)&v32 && v36 + 24 * v37 > (unint64_t)&v32)
        {
          unint64_t v28 = (char *)&v32 - v36;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v27, 24);
          unint64_t v22 = v36;
          unint64_t v21 = (int *)&v28[v36];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v27, 24);
          unint64_t v21 = &v32;
          unint64_t v22 = v36;
        }
      }
      unint64_t v23 = v22 + 24 * v37;
      long long v24 = *(_OWORD *)v21;
      *(void *)(v23 + 16) = *((void *)v21 + 2);
      *(_OWORD *)unint64_t v23 = v24;
      ++v37;
      if (v34) {
        mlir::Diagnostic::operator<<((uint64_t)v35, " must be strided memref of any type values, but got ");
      }
    }
  }
  uint64_t v25 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v34, &v31);
  uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v25);
  if (v34) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v34);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v35);
  return v20;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  v38[19] = *MEMORY[0x1E4F143B8];
  uint64_t v30 = a2;
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void **)(*(void *)a2 + 136);
  if (v6 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v10 = *(unsigned int *)(v5 + 16);
    if (!v10) {
      goto LABEL_14;
    }
    unint64_t v11 = *(void **)(v5 + 8);
    unint64_t v12 = &v11[2 * v10];
    do
    {
      unint64_t v13 = v10 >> 1;
      uint64_t v14 = &v11[2 * (v10 >> 1)];
      unint64_t v16 = *v14;
      unint64_t v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9) {
        unint64_t v11 = v15;
      }
      else {
        unint64_t v10 = v13;
      }
    }
    while (v10);
    if (v11 != v12 && *v11 == v9) {
      uint64_t v17 = v11[1];
    }
    else {
LABEL_14:
    }
      uint64_t v17 = 0;
    uint64_t v33 = a2;
    v34[0] = v17;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
    return 1;
  }
  else
  {
    __int16 v29 = 261;
    v28[0] = a3;
    v28[1] = a4;
    mlir::Operation::emitOpError(a1, v28, (uint64_t)&v33);
    if (v33)
    {
      mlir::Diagnostic::operator<<((uint64_t)v34, " #");
      if (v33)
      {
        int v31 = 5;
        uint64_t v32 = a5;
        uint64_t v20 = &v31;
        unint64_t v21 = v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= (unint64_t)&v31 && v35 + 24 * v36 > (unint64_t)&v31)
          {
            unint64_t v27 = (char *)&v31 - v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            unint64_t v21 = v35;
            uint64_t v20 = (int *)&v27[v35];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v20 = &v31;
            unint64_t v21 = v35;
          }
        }
        unint64_t v22 = v21 + 24 * v36;
        long long v23 = *(_OWORD *)v20;
        *(void *)(v22 + 16) = *((void *)v20 + 2);
        *(_OWORD *)unint64_t v22 = v23;
        ++v36;
        if (v33) {
          mlir::Diagnostic::operator<<((uint64_t)v34, " must be tensor of any type values, but got ");
        }
      }
    }
    uint64_t v24 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v33, &v30);
    uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v24);
    if (v33) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
  }
  return v18;
}

mlir::Operation *mlir::placement::MemrefToTensor::verify(mlir::Operation **this)
{
  v91[19] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v79 = v2;
  uint64_t v3 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(*(void *)(*((void *)v2 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v78[0] = (uint64_t)v3;
  v78[1] = v4;
  if (!mlir::placement::MemrefToTensor::getShapeAttr(&v79)
    || !v3
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v78))
  {
    goto LABEL_23;
  }
  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v7 -= 8;
      if (!v7) {
        goto LABEL_8;
      }
    }
    goto LABEL_23;
  }
LABEL_8:
  uint64_t v8 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78);
  uint64_t NumElements = mlir::ShapedType::getNumElements(v8, v9);
  std::string __p = (void *)mlir::placement::MemrefToTensor::getShapeAttr(&v79);
  v87[0] = __p != 0;
  unint64_t isValidIntOrFloat = mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&__p, 8, 1, 0);
  if ((isValidIntOrFloat & 1) == 0)
  {
    uint64_t RawStringData = 0;
    if (isValidIntOrFloat < 2) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v15 = 0;
    unint64_t v13 = isValidIntOrFloat & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    do
    {
      if (isSplat) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v15;
      }
      if (isSplat) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = v15 + 1;
      }
      v16 *= *(void *)(RawStringData + 8 * v18);
      v17 *= *(void *)(RawStringData + 8 * v19);
      v15 += 2;
    }
    while (v15 != v13);
    uint64_t v14 = v17 * v16;
    goto LABEL_91;
  }
  uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&__p);
  char isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&__p);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__p);
  unint64_t isValidIntOrFloat = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&__p);
  if (!isValidIntOrFloat)
  {
    uint64_t v14 = 1;
    goto LABEL_92;
  }
  if (isValidIntOrFloat >= 2) {
    goto LABEL_13;
  }
LABEL_11:
  unint64_t v13 = 0;
  uint64_t v14 = 1;
  do
  {
    if (isSplat) {
      unint64_t v52 = 0;
    }
    else {
      unint64_t v52 = v13;
    }
    v14 *= *(void *)(RawStringData + 8 * v52);
    ++v13;
LABEL_91:
    ;
  }
  while (isValidIntOrFloat != v13);
LABEL_92:
  if (NumElements != v14)
  {
    __int16 v85 = 257;
    mlir::Operation::emitOpError((uint64_t *)v2, (const void ***)&InterleaveAttr, (uint64_t)&__p);
    if (__p) {
      mlir::Diagnostic::operator<<((uint64_t)v87, "Input shape ");
    }
    uint64_t v53 = (void *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&__p, v78);
    uint64_t v54 = (uint64_t)v53;
    if (*v53)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v53 + 1), " (");
      if (*(void *)v54)
      {
        uint64_t v55 = v54 + 24;
        unint64_t v56 = *(void *)(v54 + 24);
        LODWORD(v75) = 5;
        uint64_t v76 = NumElements;
        uint64_t v57 = *(unsigned int *)(v54 + 32);
        uint64_t v58 = &v75;
        if (v57 >= *(_DWORD *)(v54 + 36))
        {
          unint64_t v69 = v57 + 1;
          BOOL v70 = v56 + 24 * v57 > (unint64_t)&v75;
          if (v56 <= (unint64_t)&v75 && v70)
          {
            uint64_t v73 = (char *)&v75 - v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v55, (void *)(v54 + 40), v69, 24);
            unint64_t v56 = *(void *)(v54 + 24);
            uint64_t v58 = (const void ***)&v73[v56];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v55, (void *)(v54 + 40), v69, 24);
            unint64_t v56 = *(void *)(v54 + 24);
            uint64_t v58 = &v75;
          }
        }
        uint64_t v59 = v56 + 24 * *(unsigned int *)(v54 + 32);
        long long v60 = *(_OWORD *)v58;
        *(void *)(v59 + 16) = v58[2];
        *(_OWORD *)uint64_t v59 = v60;
        ++*(_DWORD *)(v54 + 32);
        if (*(void *)v54) {
          mlir::Diagnostic::operator<<(v54 + 8, " elements) is not compatible with shape attribute ");
        }
      }
    }
    uint64_t ShapeAttr = mlir::placement::MemrefToTensor::getShapeAttr(&v79);
    BOOL v81 = ShapeAttr != 0;
    uint64_t v61 = (void *)mlir::InFlightDiagnostic::append<mlir::Attribute>(v54, &ShapeAttr);
    uint64_t v62 = (uint64_t)v61;
    if (*v61)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v61 + 1), " (");
      if (*(void *)v62)
      {
        uint64_t v63 = v62 + 24;
        unint64_t v64 = *(void *)(v62 + 24);
        LODWORD(v75) = 2;
        uint64_t v76 = v14;
        uint64_t v65 = *(unsigned int *)(v62 + 32);
        BOOL v66 = &v75;
        if (v65 >= *(_DWORD *)(v62 + 36))
        {
          unint64_t v71 = v65 + 1;
          BOOL v72 = v64 + 24 * v65 > (unint64_t)&v75;
          if (v64 <= (unint64_t)&v75 && v72)
          {
            char v74 = (char *)&v75 - v64;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v63, (void *)(v62 + 40), v71, 24);
            unint64_t v64 = *(void *)(v62 + 24);
            BOOL v66 = (const void ***)&v74[v64];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v63, (void *)(v62 + 40), v71, 24);
            unint64_t v64 = *(void *)(v62 + 24);
            BOOL v66 = &v75;
          }
        }
        uint64_t v67 = v64 + 24 * *(unsigned int *)(v62 + 32);
        long long v68 = *(_OWORD *)v66;
        *(void *)(v67 + 16) = v66[2];
        *(_OWORD *)uint64_t v67 = v68;
        ++*(_DWORD *)(v62 + 32);
        if (*(void *)v62) {
          mlir::Diagnostic::operator<<(v62 + 8, " elements)");
        }
      }
    }
    uint64_t v2 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult(v62);
    if (__p) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v87);
    return v2;
  }
LABEL_23:
  if (!mlir::placement::MemrefToTensor::getInterleaveAttr(&v79)
    || !v78[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v78))
  {
    return (mlir::Operation *)1;
  }
  uint64_t v20 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78);
  if (v21)
  {
    uint64_t v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22) {
        goto LABEL_30;
      }
    }
    return (mlir::Operation *)1;
  }
LABEL_30:
  InterleaveAttr = (void *)mlir::placement::MemrefToTensor::getInterleaveAttr(&v79);
  if (InterleaveAttr)
  {
    mlir::IntegerAttr::getValue(&InterleaveAttr, (llvm::APInt *)&__p);
    if (LODWORD(v87[0]) >= 0x41) {
      p_p = (unsigned int *)__p;
    }
    else {
      p_p = (unsigned int *)&__p;
    }
    uint64_t v24 = *p_p;
    if (LODWORD(v87[0]) >= 0x41 && __p) {
      operator delete[](__p);
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  mlir::getANENextSupportedInterleaveValue(v24);
  if (!v25)
  {
    __int16 v85 = 257;
    mlir::Operation::emitOpError((uint64_t *)v2, (const void ***)&InterleaveAttr, (uint64_t)&__p);
    if (__p) {
      mlir::Diagnostic::operator<<((uint64_t)v87, "interleave factor not supported");
    }
    uint64_t v2 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v87);
    return v2;
  }
  InterleaveAttr = v84;
  uint64_t v83 = 0x400000000;
  unint64_t v26 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78);
  uint64_t v27 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78);
  unsigned int v28 = 0;
  uint64_t v30 = (unsigned char *)(v27 + 8 * v29);
  LODWORD(v83) = 0;
  unint64_t v31 = (v30 - v26) >> 3;
  if (v31 > HIDWORD(v83))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InterleaveAttr, v84, v31, 8);
    unsigned int v28 = v83;
  }
  if (v30 != v26)
  {
    memcpy((char *)InterleaveAttr + 8 * v28, v26, v30 - v26);
    unsigned int v28 = v83;
  }
  uint64_t v32 = v28 + ((unint64_t)(v30 - v26) >> 3);
  LODWORD(v83) = v28 + ((unint64_t)(v30 - v26) >> 3);
  if ((unint64_t)(v32 - 6) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    __int16 v77 = 257;
    mlir::Operation::emitOpError((uint64_t *)v2, &v75, (uint64_t)&__p);
    if (__p) {
      mlir::Diagnostic::operator<<((uint64_t)v87, "Interleave can only be applied on 4D or 5D tensor");
    }
LABEL_70:
    uint64_t v2 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v87);
    int v36 = 0;
    goto LABEL_73;
  }
  uint64_t v75 = (const void **)mlir::placement::MemrefToTensor::getInterleaveAttr(&v79);
  if (v75)
  {
    mlir::IntegerAttr::getValue(&v75, (llvm::APInt *)&__p);
    if (LODWORD(v87[0]) >= 0x41) {
      uint64_t v33 = (unsigned int *)__p;
    }
    else {
      uint64_t v33 = (unsigned int *)&__p;
    }
    uint64_t v34 = *v33;
    if (LODWORD(v87[0]) >= 0x41 && __p) {
      operator delete[](__p);
    }
  }
  else
  {
    uint64_t v34 = 0;
  }
  BOOL v35 = v32 == 4;
  int v36 = 1;
  if (v35) {
    uint64_t v37 = 1;
  }
  else {
    uint64_t v37 = 2;
  }
  if (*((void *)InterleaveAttr + v37) % v34)
  {
    __int16 v77 = 257;
    mlir::Operation::emitOpError((uint64_t *)v2, &v75, (uint64_t)&__p);
    if (__p)
    {
      mlir::Diagnostic::operator<<((uint64_t)v87, "channel ");
      if (__p)
      {
        uint64_t v38 = *((void *)InterleaveAttr + v37);
        LODWORD(ShapeAttr) = 2;
        BOOL v81 = v38;
        p_uint64_t ShapeAttr = &ShapeAttr;
        unint64_t v40 = v88;
        if (v89 >= v90)
        {
          unint64_t v48 = v89 + 1;
          if (v88 <= (unint64_t)&ShapeAttr && v88 + 24 * v89 > (unint64_t)&ShapeAttr)
          {
            uint64_t v50 = (char *)&ShapeAttr - v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v48, 24);
            unint64_t v40 = v88;
            p_uint64_t ShapeAttr = (uint64_t *)&v50[v88];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v48, 24);
            p_uint64_t ShapeAttr = &ShapeAttr;
            unint64_t v40 = v88;
          }
        }
        unint64_t v41 = v40 + 24 * v89;
        long long v42 = *(_OWORD *)p_ShapeAttr;
        *(void *)(v41 + 16) = p_ShapeAttr[2];
        *(_OWORD *)unint64_t v41 = v42;
        ++v89;
        if (__p)
        {
          mlir::Diagnostic::operator<<((uint64_t)v87, " must be a multiple of interleave ");
          if (__p)
          {
            LODWORD(ShapeAttr) = 2;
            BOOL v81 = v34;
            BOOL v43 = &ShapeAttr;
            unint64_t v44 = v88;
            if (v89 >= v90)
            {
              unint64_t v49 = v89 + 1;
              if (v88 <= (unint64_t)&ShapeAttr && v88 + 24 * v89 > (unint64_t)&ShapeAttr)
              {
                uint64_t v51 = (char *)&ShapeAttr - v88;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v49, 24);
                unint64_t v44 = v88;
                BOOL v43 = (uint64_t *)&v51[v88];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v49, 24);
                BOOL v43 = &ShapeAttr;
                unint64_t v44 = v88;
              }
            }
            unint64_t v45 = v44 + 24 * v89;
            long long v46 = *(_OWORD *)v43;
            *(void *)(v45 + 16) = v43[2];
            *(_OWORD *)unint64_t v45 = v46;
            ++v89;
          }
        }
      }
    }
    goto LABEL_70;
  }
LABEL_73:
  if (InterleaveAttr != v84) {
    free(InterleaveAttr);
  }
  if (v36) {
    return (mlir::Operation *)1;
  }
  return v2;
}

uint64_t mlir::placement::RegionCall::getCallee(mlir::Operation **this)
{
  uint64_t MaxValueAttr = mlir::anec::ClampedRelu::getMaxValueAttr(this);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&MaxValueAttr);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
}

uint64_t mlir::placement::RegionCall::getRegionType(mlir::Operation **this)
{
  return *(unsigned int *)(mlir::anec::ClampedRelu::getMinValueAttr(this) + 8);
}

void mlir::placement::RegionCall::build(mlir::MLIRContext **a1, uint64_t a2, mlir::SymbolRefAttr *a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3) {
    uint64_t InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a3);
  }
  else {
    uint64_t InterfaceFor = 0;
  }
  unsigned int v28 = (const char *)a3;
  uint64_t v29 = InterfaceFor;
  uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v28);
  Results = (const void *)mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands);
  uint64_t v15 = v13;
  size_t v16 = 8 * (void)v13;
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  unint64_t v18 = v17 + ((8 * (uint64_t)v13) >> 3);
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v15)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v17), Results, v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + (v16 >> 3);
  uint64_t v19 = mlir::SymbolRefAttr::get(a3, v13);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  __int16 v30 = 261;
  unsigned int v28 = "callee";
  uint64_t v29 = 6;
  uint64_t v21 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v28);
  mlir::NamedAttribute::NamedAttribute(&v31, v21, v19);
  mlir::NamedAttrList::push_back(a2 + 112, v31, v32);
  uint64_t v22 = *a1;
  LODWORD(v31) = a4;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v22);
  unsigned int v28 = (const char *)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  uint64_t v29 = (uint64_t)v22;
  uint64_t v24 = mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v28, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, (unsigned int *)&v31);
  char v25 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  __int16 v30 = 261;
  unsigned int v28 = "region_type";
  uint64_t v29 = 11;
  uint64_t v26 = mlir::StringAttr::get(v25, (mlir::MLIRContext *)&v28);
  mlir::NamedAttribute::NamedAttribute(&v31, v26, v24);
  mlir::NamedAttrList::push_back(a2 + 112, v31, v32);
  mlir::OperationState::addOperands(a2, a5, a6);
}

void mlir::placement::RegionCall::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  mlir::OperationState::addOperands(a2, a7, a8);
  mlir::NamedAttribute::NamedAttribute(&v16, **(void **)(*(void *)(a2 + 8) + 96), a5);
  mlir::NamedAttrList::push_back(a2 + 112, v16, v17);
  mlir::NamedAttribute::NamedAttribute(&v16, *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8), a6);
  mlir::NamedAttrList::push_back(a2 + 112, v16, v17);
  uint64_t v13 = *(unsigned int *)(a2 + 72);
  if (a4 + v13 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v13, 8);
    uint64_t v13 = *(unsigned int *)(a2 + 72);
  }
  if (a4)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(a2 + 64) + 8 * v13;
    do
    {
      *(void *)(v15 + 8 * v14) = mlir::TypeRange::dereference_iterator(a3, v14);
      ++v14;
    }
    while (a4 != v14);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + a4;
}

void mlir::placement::RegionCall::build(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  mlir::OperationState::addOperands(a2, a9, a10);
  uint64_t v17 = **(void **)(*(void *)(a2 + 8) + 96);
  uint64_t v18 = mlir::SymbolRefAttr::get(*a1, a5, a6);
  mlir::NamedAttribute::NamedAttribute(&v27, v17, v18);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v27, (uint64_t)v28);
  uint64_t v19 = *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8);
  uint64_t v20 = *a1;
  unsigned int v26 = a7;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v20);
  uint64_t v27 = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  unsigned int v28 = v20;
  uint64_t v22 = mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v27, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, &v26);
  mlir::NamedAttribute::NamedAttribute(&v27, v19, v22);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v27, (uint64_t)v28);
  uint64_t v23 = *(unsigned int *)(a2 + 72);
  if (a4 + v23 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v23, 8);
    uint64_t v23 = *(unsigned int *)(a2 + 72);
  }
  if (a4)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(a2 + 64) + 8 * v23;
    do
    {
      *(void *)(v25 + 8 * v24) = mlir::TypeRange::dereference_iterator(a3, v24);
      ++v24;
    }
    while (a4 != v24);
    LODWORD(v23) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v23 + a4;
}

uint64_t mlir::placement::RegionCall::verifyInvariantsImpl(uint64_t **this)
{
  v24[23] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  uint64_t Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    uint64_t v6 = 16 * v4;
    while (**(void **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion(Value))
    {
      uint64_t Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v6 -= 16;
      if (!v6) {
        goto LABEL_8;
      }
    }
    if (v6)
    {
      uint64_t v8 = *((void *)Value + 1);
      while (*(void *)(*(void *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
      {
        uint64_t Value = (mlir::CallGraphNode *)((char *)Value + 16);
        v6 -= 16;
        if (!v6) {
          goto LABEL_13;
        }
      }
      uint64_t v11 = *((void *)Value + 1);
      if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(*this, v8, (const void **)"callee", (const void **)6))
      {
        unint64_t v12 = *this;
        if (!v11
          || *(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id)
        {
LABEL_29:
          if ((*((unsigned char *)v12 + 46) & 0x80) != 0 && (uint64_t v14 = *((unsigned int *)v12 + 17), v14))
          {
            uint64_t v15 = 0;
            uint64_t v16 = v12[9] + 24;
            while (mlir::placement::__mlir_ods_local_type_constraint_PlacementOps4(*this, (const void **)(*(void *)(*(void *)v16 + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", (const void **)7, v15))
            {
              ++v15;
              v16 += 32;
              if (v14 == v15)
              {
                unint64_t v12 = *this;
                goto LABEL_35;
              }
            }
          }
          else
          {
LABEL_35:
            uint64_t v17 = *((unsigned int *)v12 + 9);
            if (*((_DWORD *)v12 + 9)) {
              uint64_t v18 = (uint64_t)(v12 - 2);
            }
            else {
              uint64_t v18 = 0;
            }
            if (!v17) {
              return 1;
            }
            uint64_t v19 = 0;
            uint64_t v9 = 1;
            while (1)
            {
              uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, v19);
              if (!mlir::placement::__mlir_ods_local_type_constraint_PlacementOps4(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", (const void **)6, v19))break; {
              if (v17 == ++v19)
              }
                return v9;
            }
          }
          return 0;
        }
        __int16 v22 = 257;
        mlir::Operation::emitOpError(v12, v21, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v24, "attribute '");
          if (AttrDictionary)
          {
            __int16 v22 = 261;
            v21[0] = (const void **)"region_type";
            v21[1] = (const void **)11;
            mlir::Diagnostic::operator<<((uint64_t)v24, v21);
            if (AttrDictionary) {
              mlir::Diagnostic::operator<<((uint64_t)v24, "' failed to satisfy constraint: Available region types");
            }
          }
        }
        char v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
        if (AttrDictionary) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v24);
        if (v13)
        {
          unint64_t v12 = *this;
          goto LABEL_29;
        }
      }
      return 0;
    }
LABEL_13:
    uint64_t v7 = "requires attribute 'region_type'";
  }
  else
  {
LABEL_8:
    uint64_t v7 = "requires attribute 'callee'";
  }
  v21[0] = (const void **)v7;
  __int16 v22 = 259;
  mlir::OpState::emitOpError(this, v21, (uint64_t)&AttrDictionary);
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v24);
  return v9;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  v16[23] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 1;
  }
  uint64_t v7 = *(void **)(*(void *)a2 + 136);
  BOOL v8 = v7 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  uint64_t v9 = v7 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id ? a2 : 0;
  uint64_t v15 = v9;
  if (v8)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v15);
    if (!v10) {
      return 1;
    }
  }
  __int16 v14 = 257;
  mlir::Operation::emitOpError(a1, v13, (uint64_t)&v15);
  if (v15)
  {
    mlir::Diagnostic::operator<<((uint64_t)v16, "attribute '");
    if (v15)
    {
      __int16 v14 = 261;
      v13[0] = a3;
      v13[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v16, v13);
      if (v15) {
        mlir::Diagnostic::operator<<((uint64_t)v16, "' failed to satisfy constraint: flat symbol reference attribute");
      }
    }
  }
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v15);
  if (v15) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v15);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
  return v11;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps4(uint64_t *a1, const void **a2, const void **a3, const void **a4, unsigned int a5)
{
  v47[19] = *MEMORY[0x1E4F143B8];
  __int16 v39 = a2;
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)*((void *)*a2 + 17);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v10 = *((unsigned int *)v6 + 4);
    if (!v10) {
      goto LABEL_14;
    }
    uint64_t v11 = (void *)v6[1];
    unint64_t v12 = &v11[2 * v10];
    do
    {
      unint64_t v13 = v10 >> 1;
      __int16 v14 = &v11[2 * (v10 >> 1)];
      unint64_t v16 = *v14;
      uint64_t v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9) {
        uint64_t v11 = v15;
      }
      else {
        unint64_t v10 = v13;
      }
    }
    while (v10);
    if (v11 != v12 && *v11 == v9) {
      uint64_t v17 = (const void **)v11[1];
    }
    else {
LABEL_14:
    }
      uint64_t v17 = 0;
    long long v42 = a2;
    uint64_t v18 = &v42;
    goto LABEL_36;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    unint64_t v26 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v27 = *((unsigned int *)v6 + 4);
    if (!v27) {
      goto LABEL_34;
    }
    unsigned int v28 = (void *)v6[1];
    uint64_t v29 = &v28[2 * v27];
    do
    {
      unint64_t v30 = v27 >> 1;
      uint64_t v31 = &v28[2 * (v27 >> 1)];
      unint64_t v33 = *v31;
      uint64_t v32 = v31 + 2;
      v27 += ~(v27 >> 1);
      if (v33 < v26) {
        unsigned int v28 = v32;
      }
      else {
        unint64_t v27 = v30;
      }
    }
    while (v27);
    if (v28 != v29 && *v28 == v26) {
      uint64_t v17 = (const void **)v28[1];
    }
    else {
LABEL_34:
    }
      uint64_t v17 = 0;
    v37[0] = a2;
    uint64_t v18 = v37;
LABEL_36:
    v18[1] = v17;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v18);
    return 1;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id) {
    return 1;
  }
  __int16 v38 = 261;
  v37[0] = a3;
  v37[1] = a4;
  mlir::Operation::emitOpError(a1, v37, (uint64_t)&v42);
  if (v42)
  {
    mlir::Diagnostic::operator<<((uint64_t)v43, " #");
    if (v42)
    {
      int v40 = 5;
      uint64_t v41 = a5;
      uint64_t v20 = &v40;
      unint64_t v21 = v44;
      if (v45 >= v46)
      {
        unint64_t v35 = v45 + 1;
        if (v44 <= (unint64_t)&v40 && v44 + 24 * v45 > (unint64_t)&v40)
        {
          int v36 = (char *)&v40 - v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          unint64_t v21 = v44;
          uint64_t v20 = (int *)&v36[v44];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          uint64_t v20 = &v40;
          unint64_t v21 = v44;
        }
      }
      unint64_t v22 = v21 + 24 * v45;
      long long v23 = *(_OWORD *)v20;
      *(void *)(v22 + 16) = *((void *)v20 + 2);
      *(_OWORD *)unint64_t v22 = v23;
      ++v45;
      if (v42) {
        mlir::Diagnostic::operator<<((uint64_t)v43, " must be variadic of tensor of any type values or memref of any type values or index, but got ");
      }
    }
  }
  uint64_t v24 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v42, (uint64_t *)&v39);
  uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v24);
  if (v42) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v42);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v43);
  return v25;
}

uint64_t mlir::placement::ReplacedOps::getReplacedByAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  uint64_t v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  uint64_t v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v6);
  unint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 16));
  if (v10) {
    return *((void *)v9 + 1);
  }
  else {
    return 0;
  }
}

uint64_t mlir::placement::ReplacedOps::getReplacedBy(mlir::Operation **this)
{
  uint64_t ReplacedByAttr = mlir::placement::ReplacedOps::getReplacedByAttr(this);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&ReplacedByAttr);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
}

uint64_t mlir::placement::ReplacedOps::getResAttrsAttr(mlir::Operation **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  uint64_t v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  uint64_t v5 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    uint64_t v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    uint64_t v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v6);
  unint64_t v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(void *)(*(void *)(*((void *)*this + 6) + 96) + 24));
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v9 + 1);
  if (!v11) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
    return *((void *)v9 + 1);
  }
  return 0;
}

void mlir::placement::ReplacedOps::build(uint64_t a1, mlir::Attribute *a2, void *a3, uint64_t a4, mlir::SymbolRefAttr *a5, mlir::Operation **a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  unint64_t v71 = (const char *)a9;
  unint64_t v72 = a10;
  uint64_t v18 = *(mlir::MLIRContext **)a1;
  mlir::TypeRange::TypeRange(v70, a9, a10);
  mlir::TypeRange::TypeRange(v69, a11, a12);
  uint64_t v19 = mlir::FunctionType::get(v18, v70[0], v70[1], v69[0], v69[1]);
  uint64_t v20 = *(void *)(*(void *)(*((void *)a2 + 1) + 96) + 8);
  uint64_t v21 = mlir::TypeAttr::get(v19);
  mlir::NamedAttribute::NamedAttribute(&v56, v20, v21);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v56, v57);
  v55[8] = 261;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)a1, (mlir::MLIRContext *)&v53);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  LOWORD(v60) = 261;
  unint64_t v56 = "sym_name";
  uint64_t v57 = 8;
  uint64_t v24 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v56);
  mlir::NamedAttribute::NamedAttribute(&v66, v24, StringAttr);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v66, v67);
  uint64_t v26 = mlir::SymbolRefAttr::get(a5, v25);
  unint64_t v27 = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  LOWORD(v60) = 261;
  unint64_t v56 = "replaced_by";
  uint64_t v57 = 11;
  uint64_t v28 = mlir::StringAttr::get(v27, (mlir::MLIRContext *)&v56);
  mlir::NamedAttribute::NamedAttribute(&v53, v28, v26);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v53, v54);
  uint64_t v29 = (uint64_t *)mlir::OperationState::addRegion(a2);
  unint64_t v30 = operator new(0x48uLL);
  _OWORD *v30 = 0u;
  v30[1] = 0u;
  *((void *)v30 + 4) = v30 + 2;
  *((void *)v30 + 5) = v30 + 2;
  *((void *)v30 + 7) = 0;
  *((void *)v30 + 8) = 0;
  *((void *)v30 + 6) = 0;
  BOOL v66 = v68;
  uint64_t v67 = 0x400000000;
  uint64_t v32 = (uint64_t)v71;
  unint64_t v31 = v72;
  unint64_t v56 = v71;
  uint64_t v57 = 0;
  if (v72)
  {
    uint64_t v33 = 0;
    do
    {
      uint64_t v53 = (void *)mlir::ValueRange::dereference_iterator(&v56, v33);
      uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v53);
      uint64_t v35 = v67;
      if (v67 >= (unint64_t)HIDWORD(v67))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
        uint64_t v35 = v67;
      }
      *(void *)&v66[8 * v35] = Loc;
      LODWORD(v67) = v67 + 1;
      uint64_t v33 = ++v57;
    }
    while (v56 != (const char *)v32 || v33 != v31);
  }
  mlir::TypeRange::TypeRange(v65, v32, v31);
  mlir::Block::addArguments(v30, v65[0], v65[1], (uint64_t)v66, v67);
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v29, (uint64_t)v30);
  uint64_t v37 = *v29;
  *((void *)v30 + 1) = *v29;
  *((void *)v30 + 2) = v29;
  *(void *)(v37 + 8) = (char *)v30 + 8;
  uint64_t *v29 = (uint64_t)v30 + 8;
  uint64_t v38 = *((void *)v30 + 5);
  __int16 v39 = (void *)*((void *)v30 + 6);
  *(void *)(a1 + 16) = v30;
  *(void *)(a1 + 24) = v38;
  unint64_t v56 = 0;
  uint64_t v57 = 0;
  int v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  int v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  unsigned int v64 = 0;
  uint64_t v40 = (uint64_t)(*((void *)v30 + 7) - (void)v39) >> 3;
  uint64_t v53 = v39;
  uint64_t v54 = v40;
  mlir::IRMapping::map<mlir::ValueRange &,llvm::MutableArrayRef<mlir::BlockArgument>,(void *)0>((uint64_t)&v56, (uint64_t *)&v71, (uint64_t **)&v53);
  if (a7)
  {
    uint64_t v41 = 8 * a7;
    do
    {
      long long v42 = *a6++;
      mlir::OpBuilder::clone((uint64_t **)a1, v42, (mlir::IRMapping *)&v56);
      v41 -= 8;
    }
    while (v41);
  }
  uint64_t v53 = v55;
  uint64_t v54 = 0x600000000;
  if (a12 < 7)
  {
    unsigned int v43 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, a12, 8);
    unsigned int v43 = v54;
  }
  uint64_t v73 = a11;
  uint64_t v74 = 0;
  uint64_t v75 = (uint64_t *)&v56;
  char v76 = 1;
  if (a12)
  {
    uint64_t v44 = 0;
    unsigned int v45 = (uint64_t *)((char *)v53 + 8 * v43);
    do
    {
      uint64_t v47 = mlir::ValueRange::dereference_iterator(&v73, v44);
      unint64_t v48 = v75;
      uint64_t v51 = v47;
      uint64_t v52 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v75, (unint64_t *)&v51, &v52))BOOL v49 = v52 == *v48 + 16 * *((unsigned int *)v48 + 4); {
      else
      }
        BOOL v49 = 1;
      if (!v49) {
        uint64_t v47 = *(void *)(v52 + 8);
      }
      *v45++ = v47;
      uint64_t v44 = ++v74;
    }
    while (v73 != a11 || v44 != a12);
    unsigned int v43 = v54;
  }
  LODWORD(v54) = v43 + a12;
  mlir::OpBuilder::create<mlir::placement::ReplacedOpsLiveOuts,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)a1, *(void *)a2, (uint64_t)&v53);
  if (v53 != v55) {
    free(v53);
  }
  llvm::deallocate_buffer(v62, (void *)(16 * v64));
}

void sub_1806B8E34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,llvm *a27,uint64_t a28,unsigned int a29)
{
}

void sub_1806B8E48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,llvm *a24,uint64_t a25,unsigned int a26)
{
}

void sub_1806B8E5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if ((void)v64)
  {
    *(_OWORD *)uint64_t v63 = v64;
  }
  else
  {
    *(void *)uint64_t v63 = 0;
    *(void *)(v63 + 8) = 0;
  }
  if (v66 != v65) {
    free(v66);
  }
}

uint64_t mlir::IRMapping::map<mlir::ValueRange &,llvm::MutableArrayRef<mlir::BlockArgument>,(void *)0>(uint64_t result, uint64_t *a2, uint64_t **a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v19 = *a2;
  uint64_t v20 = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  uint64_t v21 = *a3;
  if (v4) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = (uint64_t *)result;
    uint64_t v9 = 0;
    char v10 = &v5[(void)v6];
    do
    {
      uint64_t v14 = mlir::ValueRange::dereference_iterator(&v19, v9);
      uint64_t v15 = *v21;
      uint64_t v17 = v14;
      uint64_t v18 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v8, (unint64_t *)&v17, &v18);
      unint64_t v16 = v18;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v8, (uint64_t)&v17, (unint64_t *)&v17, v18);
        unint64_t v16 = (void *)result;
        *(void *)uint64_t result = v17;
        *(void *)(result + 8) = 0;
      }
      v16[1] = v15;
      uint64_t v9 = v20 + 1;
      uint64_t v11 = v21 + 1;
      uint64_t v20 = v9;
      ++v21;
    }
    while ((v9 != v4 || v19 != v3) && v11 != v10);
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::ReplacedOpsLiveOuts,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  v18[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.live_outs", (const unsigned __int8 *)0x13, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"placement.live_outs";
    _OWORD v15[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::OperationState::addOperands((uint64_t)v18, v17[0], v17[1]);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::ReplacedOpsLiveOuts,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

BOOL mlir::placement::ReplacedOps::verifyInvariantsImpl(uint64_t **this)
{
  v44[19] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  uint64_t Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_10:
    char v8 = "requires attribute 'function_type'";
LABEL_16:
    v37[0] = (const void **)v8;
    __int16 v38 = 259;
    mlir::OpState::emitOpError(this, v37, (uint64_t)&AttrDictionary);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
    return v14;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 16 * v4;
  while (*(void *)(*(void *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    if (**(void **)((*this)[6] + 96) == mlir::CallGraphNode::getCallableRegion(Value)) {
      uint64_t v6 = *((void *)Value + 1);
    }
    uint64_t Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v7 -= 16;
    if (!v7) {
      goto LABEL_10;
    }
  }
  if (!v7)
  {
LABEL_15:
    char v8 = "requires attribute 'replaced_by'";
    goto LABEL_16;
  }
  uint64_t v9 = 0;
  char v10 = (const void **)*((void *)Value + 1);
  while (1)
  {
    uint64_t v11 = (mlir::CallGraphNode *)((char *)Value + v9);
    uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v9));
    unint64_t v13 = *this;
    if (*(void *)(*(void *)((*this)[6] + 96) + 16) == CallableRegion) {
      break;
    }
    v9 += 16;
    if (v7 == v9) {
      goto LABEL_15;
    }
  }
  uint64_t v16 = *((void *)v11 + 1);
  uint64_t v17 = 0;
  for (uint64_t i = v7 - v9; i; i -= 16)
  {
    uint64_t v29 = mlir::CallGraphNode::getCallableRegion(v11);
    unint64_t v13 = *this;
    if (*(void *)(*(void *)((*this)[6] + 96) + 24) == v29) {
      uint64_t v17 = *((void *)v11 + 1);
    }
    uint64_t v11 = (mlir::CallGraphNode *)((char *)v11 + 16);
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(v13, v16, (const void **)"replaced_by", (const void **)0xB))return 0; {
  if (v10)
  }
  {
    uint64_t v19 = *this;
    if (*((_UNKNOWN **)*v10 + 17) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id
      || (unint64_t AttrDictionary = (unint64_t)v10,
          *(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&AttrDictionary) + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
      || (v37[0] = v10,
          *(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v37) + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id))
    {
      __int16 v38 = 257;
      mlir::Operation::emitOpError(v19, v37, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v40, "attribute '");
        if (AttrDictionary)
        {
          __int16 v38 = 261;
          v37[0] = (const void **)"function_type";
          v37[1] = (const void **)13;
          mlir::Diagnostic::operator<<((uint64_t)v40, v37);
          if (AttrDictionary) {
            mlir::Diagnostic::operator<<((uint64_t)v40, "' failed to satisfy constraint: type attribute of function type");
          }
        }
      }
      char v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
      if (AttrDictionary) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
      if (!v20) {
        return 0;
      }
    }
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*this, v6, (const void **)"arg_attrs", (const void **)9)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*this, v17, (const void **)"res_attrs", (const void **)9))
  {
    return 0;
  }
  uint64_t v21 = *this;
  unint64_t v22 = (((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
        + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *((unsigned int *)*this + 10);
  uint64_t v23 = *(void *)(v22 + 8);
  if (v23 != v22 && *(void *)(v23 + 8) == v22) {
    return 1;
  }
  v37[0] = (const void **)"region #";
  __int16 v38 = 259;
  mlir::Operation::emitOpError(v21, v37, (uint64_t)&AttrDictionary);
  if (AttrDictionary)
  {
    LODWORD(v35[0]) = 5;
    v35[1] = 0;
    uint64_t v24 = v35;
    unint64_t v25 = v41;
    if (v42 >= v43)
    {
      unint64_t v31 = v42 + 1;
      if (v41 <= (unint64_t)v35 && v41 + 24 * v42 > (unint64_t)v35)
      {
        uint64_t v32 = (char *)v35 - v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        unint64_t v25 = v41;
        uint64_t v24 = (const void ***)&v32[v41];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        uint64_t v24 = v35;
        unint64_t v25 = v41;
      }
    }
    unint64_t v26 = v25 + 24 * v42;
    long long v27 = *(_OWORD *)v24;
    *(void *)(v26 + 16) = v24[2];
    *(_OWORD *)unint64_t v26 = v27;
    ++v42;
    BOOL v28 = AttrDictionary == 0;
  }
  else
  {
    BOOL v28 = 1;
  }
  __int16 v34 = 1283;
  v33[0] = " ('";
  unint64_t v33[2] = "body";
  v33[3] = 4;
  v35[0] = (const void **)v33;
  void v35[2] = (const void **)"') ";
  __int16 v36 = 770;
  if (!v28)
  {
    mlir::Diagnostic::operator<<((uint64_t)v40, v35);
    if (AttrDictionary) {
      mlir::Diagnostic::operator<<((uint64_t)v40, "failed to verify constraint: region with 1 blocks");
    }
  }
  char v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
  return v30 != 0;
}

BOOL mlir::placement::ReplacedOpsLiveOuts::parse(uint64_t a1, uint64_t a2)
{
  v10[16] = *MEMORY[0x1E4F143B8];
  v9[0] = v10;
  v9[1] = (void *)0x400000000;
  v7[0] = &v8;
  v7[1] = (void *)0x100000000;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  BOOL v5 = (*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, v9, 0, 1, 0xFFFFFFFFLL)&& ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1), (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)&& mlir::AsmParser::parseTypeList(a1, (uint64_t)v7)&& mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)v9, (uint64_t)v7, v4, a2 + 16) != 0;
  if (v7[0] != &v8) {
    free(v7[0]);
  }
  if (v9[0] != v10) {
    free(v9[0]);
  }
  return v5;
}

void mlir::placement::ReplacedOpsLiveOuts::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v41[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  BOOL v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *BOOL v5 = 32;
  }
  uint64_t v6 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v7 = *((unsigned int *)v6 + 17);
    uint64_t v8 = *((void *)v6 + 9);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>((uint64_t)a2, v8, 0, v8, v7);
  __int16 v39 = v41;
  uint64_t v40 = 0x200000000;
  uint64_t v9 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v9);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v9 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v12, v39, v40);
  unint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *uint64_t v14 = 32;
  }
  uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if (*((unsigned char **)v15 + 3) == v16)
  {
    llvm::raw_ostream::write(v15, ":", 1uLL);
  }
  else
  {
    *uint64_t v16 = 58;
    ++*((void *)v15 + 4);
  }
  uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    unsigned char *v18 = 32;
  }
  uint64_t v19 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v20 = *((unsigned int *)v19 + 17);
    uint64_t v21 = *((void *)v19 + 9);
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
  }
  v34[0] = v21;
  v34[1] = v20;
  mlir::OperandRange::getTypes(v34, (uint64_t *)&AttrDictionary);
  unint64_t v23 = AttrDictionary;
  uint64_t v22 = v36;
  uint64_t v24 = v37;
  uint64_t v25 = v38;
  if (AttrDictionary != v37 || v36 != v38)
  {
    unint64_t v26 = AttrDictionary + 32 * v36;
    (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(v26 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v23 != v24 || v22 + 1 != v25)
    {
      uint64_t v27 = v25 - v22 - 2;
      BOOL v28 = (uint64_t *)(v26 + 56);
      do
      {
        uint64_t v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        char v30 = (_WORD *)*((void *)v29 + 4);
        if (*((void *)v29 + 3) - (void)v30 > 1uLL)
        {
          _WORD *v30 = 8236;
          *((void *)v29 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v29, ", ", 2uLL);
        }
        uint64_t v31 = *v28;
        v28 += 4;
        (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(v31 + 8) & 0xFFFFFFFFFFFFFFF8);
        BOOL v33 = v27-- != 0;
      }
      while (v23 != v24 || v33);
    }
  }
  if (v39 != v41) {
    free(v39);
  }
}

uint64_t mlir::placement::StartTimer::getReplacedOpsRef(mlir::Operation **this)
{
  uint64_t MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(this);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&MultipliersAttr);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
}

void mlir::placement::StartTimer::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::NamedAttribute::NamedAttribute(v7, **(void **)(*(void *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, v7[0], v7[1]);
  uint64_t v6 = *(unsigned int *)(a2 + 72);
  if (v6 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v6) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::placement::StartTimer::verifyInvariantsImpl(uint64_t **this)
{
  v14[23] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    uint64_t v6 = 16 * v4;
    while (**(void **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6) {
        goto LABEL_8;
      }
    }
    if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(*this, Value[1], (const void **)"replaced_ops_ref", (const void **)0x10))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v8 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    uint64_t v11 = (const void **)"requires attribute 'replaced_ops_ref'";
    __int16 v12 = 259;
    mlir::OpState::emitOpError(this, &v11, (uint64_t)&AttrDictionary);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps6(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a2;
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id) {
    return 1;
  }
  __int16 v16 = 261;
  v15[0] = a3;
  v15[1] = a4;
  mlir::Operation::emitOpError(a1, v15, (uint64_t)&v20);
  if (v20)
  {
    mlir::Diagnostic::operator<<((uint64_t)v21, " #");
    if (v20)
    {
      int v18 = 5;
      uint64_t v19 = a5;
      uint64_t v6 = &v18;
      unint64_t v7 = v22;
      if (v23 >= v24)
      {
        unint64_t v13 = v23 + 1;
        if (v22 <= (unint64_t)&v18 && v22 + 24 * v23 > (unint64_t)&v18)
        {
          uint64_t v14 = (char *)&v18 - v22;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v13, 24);
          unint64_t v7 = v22;
          uint64_t v6 = (int *)&v14[v22];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v13, 24);
          uint64_t v6 = &v18;
          unint64_t v7 = v22;
        }
      }
      unint64_t v8 = v7 + 24 * v23;
      long long v9 = *(_OWORD *)v6;
      *(void *)(v8 + 16) = *((void *)v6 + 2);
      *(_OWORD *)unint64_t v8 = v9;
      ++v23;
      if (v20) {
        mlir::Diagnostic::operator<<((uint64_t)v21, " must be , but got ");
      }
    }
  }
  uint64_t v10 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v20, &v17);
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
  if (v20) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
  return v11;
}

uint64_t mlir::placement::TensorToMemrefAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  v42[23] = *MEMORY[0x1E4F143B8];
  uint64_t v40 = *a1;
  uint64_t Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v40);
  if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      if (**(void **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        uint64_t v5 = *((void *)Value + 1);
      }
      else if (*(void *)(*(void *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        uint64_t v6 = *((void *)Value + 1);
      }
      else if (*(void *)(*(void *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        unint64_t v7 = (void *)*((void *)Value + 1);
      }
      uint64_t Value = (mlir::CallGraphNode *)((char *)Value + 16);
    }
    while (Value != (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40));
    if (v7)
    {
      if (!mlir::DenseIntElementsAttr::classof((uint64_t)v7)) {
        goto LABEL_33;
      }
      uint64_t v8 = *v7;
      unint64_t v9 = mlir::TypeID::get<mlir::ElementsAttr>();
      unint64_t v10 = *(unsigned int *)(v8 + 16);
      if (!v10) {
        goto LABEL_20;
      }
      uint64_t v11 = *(void **)(v8 + 8);
      __int16 v12 = &v11[2 * v10];
      do
      {
        unint64_t v13 = v10 >> 1;
        uint64_t v14 = &v11[2 * (v10 >> 1)];
        unint64_t v16 = *v14;
        uint64_t v15 = v14 + 2;
        v10 += ~(v10 >> 1);
        if (v16 < v9) {
          uint64_t v11 = v15;
        }
        else {
          unint64_t v10 = v13;
        }
      }
      while (v10);
      if (v11 != v12 && *v11 == v9) {
        uint64_t v17 = v11[1];
      }
      else {
LABEL_20:
      }
        uint64_t v17 = 0;
      v35[0] = v7;
      v35[1] = v17;
      Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v35);
      uint64_t v19 = Type;
      if (!Type) {
        goto LABEL_30;
      }
      uint64_t v20 = *Type;
      unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v22 = *(unsigned int *)(v20 + 16);
      if (!v22) {
        goto LABEL_30;
      }
      unsigned int v23 = *(void **)(v20 + 8);
      unsigned int v24 = &v23[2 * v22];
      do
      {
        unint64_t v25 = v22 >> 1;
        unint64_t v26 = &v23[2 * (v22 >> 1)];
        unint64_t v28 = *v26;
        uint64_t v27 = v26 + 2;
        v22 += ~(v22 >> 1);
        if (v28 < v21) {
          unsigned int v23 = v27;
        }
        else {
          unint64_t v22 = v25;
        }
      }
      while (v22);
      if (v23 != v24 && *v23 == v21) {
        uint64_t v29 = v23[1];
      }
      else {
LABEL_30:
      }
        uint64_t v29 = 0;
      uint64_t v41 = (uint64_t)v19;
      v42[0] = v29;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v41);
      if (v30 != 1
        || (uint64_t v37 = v7,
            v38[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37),
            v38[1] = v31,
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v38),
            !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_33:
        uint64_t v32 = "'placement.tensor_to_memref' op attribute 'shape' failed to satisfy constraint: ui64 elements attribute of rank 1";
        goto LABEL_44;
      }
    }
  }
  if (v6)
  {
    if (*(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      uint64_t v32 = "'placement.tensor_to_memref' op attribute 'resultElementType' failed to satisfy constraint: any type attribute";
      goto LABEL_44;
    }
    uint64_t v41 = v6;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  }
  if (!v5) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v35[0] = v5;
    uint64_t v41 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v35);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v41, 32)) {
      return 1;
    }
  }
  uint64_t v32 = "'placement.tensor_to_memref' op attribute 'interleave' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_44:
  v35[0] = v32;
  __int16 v36 = 259;
  mlir::emitError(a2, (uint64_t)v35, (uint64_t)&v41);
  uint64_t v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v33;
}

uint64_t mlir::placement::TensorToMemref::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v67 = a6;
  LOBYTE(v68) = 0;
  char v69 = 0;
  uint64_t v70 = a9;
  uint64_t v71 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v67);
    if (v69) {
      char v69 = 0;
    }
    mlir::OperationName::OperationName(&v68, "placement.tensor_to_memref", 26, Context);
    char v69 = 1;
  }
  unint64_t v72 = a4;
  uint64_t v73 = a5;
  if (a5)
  {
    uint64_t v15 = mlir::UnknownLoc::get(this, a2);
    if (mlir::placement::TensorToMemrefAdaptor::verify(&v67, v15))
    {
      long long v64 = v72;
      uint64_t v65 = 0;
      uint64_t v16 = mlir::ValueRange::dereference_iterator(&v64, 0);
      v63[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
      v63[1] = a2;
      if (v63[0])
      {
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v63);
        ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v63);
        unint64_t v20 = v18;
        long long v64 = v66;
        uint64_t v65 = 0x500000000;
        size_t v21 = 8 * v18;
        if (8 * v18 < 0x29)
        {
          unsigned int v22 = 0;
          if (!v18)
          {
LABEL_17:
            LODWORD(v65) = v22 + (v21 >> 3);
            uint64_t Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
            unint64_t v28 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v67);
            uint64_t v29 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v28, *(void *)(*(void *)(v68 + 96) + 8));
            if (v30)
            {
              uint64_t v31 = *((void *)v29 + 1);
              if (v31)
              {
                uint64_t v32 = *(void **)(*(void *)v31 + 136);
                if (v32 != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
                  uint64_t v31 = 0;
                }
                v62[0] = v31;
                if (v32 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
                  uint64_t OperandRange = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v62);
                }
              }
            }
            uint64_t v33 = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
            __int16 v34 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v67);
            uint64_t v35 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v33, v34, *(void *)(*(void *)(v68 + 96) + 16));
            if ((v36 & 1) == 0
              || (uint64_t v37 = *((void *)v35 + 1)) == 0
              || !mlir::DenseIntElementsAttr::classof(*((void *)v35 + 1)))
            {
LABEL_47:
              BOOL v49 = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
              uint64_t v50 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v67);
              uint64_t v51 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v49, v50, **(void **)(v68 + 96));
              if (v52)
              {
                uint64_t v53 = *((void *)v51 + 1);
                if (v53)
                {
                  if (*(_UNKNOWN **)(*(void *)v53 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                  {
                    uint64_t v54 = v65;
                    if ((v65 & 0xFFFFFFFE) != 4)
                    {
                      uint64_t v58 = mlir::UnrankedTensorType::get(OperandRange);
                      goto LABEL_55;
                    }
                    uint64_t Interleave = mlir::placement::detail::MemrefToTensorGenericAdaptorBase::getInterleave((mlir::placement::detail::MemrefToTensorGenericAdaptorBase *)&v67);
                    uint64_t v56 = 16;
                    if (v54 == 4) {
                      uint64_t v56 = 8;
                    }
                    uint64_t v57 = (uint64_t *)v64;
                    *(void *)((char *)v64 + v56) *= Interleave;
                    v57[v54 - 1] /= Interleave;
                  }
                }
              }
              uint64_t v58 = mlir::MemRefType::get(v64, (mlir::AffineMap *)v65, OperandRange, 0, 0, 0);
LABEL_55:
              uint64_t v59 = v58;
              unsigned int v60 = *(_DWORD *)(a11 + 8);
              if (v60 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v60 + 1, 8);
                unsigned int v60 = *(_DWORD *)(a11 + 8);
              }
              *(void *)(*(void *)a11 + 8 * v60) = v59;
              ++*(_DWORD *)(a11 + 8);
              if (v64 != v66) {
                free(v64);
              }
              return 1;
            }
            v62[0] = v37;
            v62[1] = 1;
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v62, 8, 1, 0))
            {
              uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v62);
              LOBYTE(ArgAttrsAttr) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v62);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v62);
              mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v62);
            }
            else
            {
              uint64_t RawStringData = 0;
            }
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v62, 8, 1, 0))
            {
              uint64_t v39 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v62);
              int isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v62);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v62);
              unint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v62);
              unint64_t v20 = NumElements;
              LODWORD(v65) = 0;
              if (NumElements <= HIDWORD(v65))
              {
                unsigned int v42 = 0;
                BOOL v61 = RawStringData == v39 && isSplat == ArgAttrsAttr;
                int v44 = v61;
                if (v61 && !NumElements)
                {
LABEL_46:
                  LODWORD(v65) = v42 + v20;
                  goto LABEL_47;
                }
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, NumElements, 8);
                unsigned int v42 = v65;
                BOOL v43 = RawStringData == v39 && isSplat == ArgAttrsAttr;
                int v44 = v43;
              }
            }
            else
            {
              int v44 = 0;
              unsigned int v42 = 0;
            }
            uint64_t v45 = 0;
            unsigned int v46 = (char *)v64 + 8 * v42;
            do
            {
              if ((_BYTE)ArgAttrsAttr) {
                uint64_t v47 = 0;
              }
              else {
                uint64_t v47 = v45;
              }
              *(void *)&v46[8 * v45] = *(void *)(RawStringData + 8 * v47);
              BOOL v43 = v20 - 1 == v45++;
              if (v43) {
                int v48 = v44;
              }
              else {
                int v48 = 0;
              }
            }
            while (v48 != 1);
            goto LABEL_46;
          }
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, (uint64_t)(8 * v18) >> 3, 8);
          unsigned int v22 = v65;
          if (!v20) {
            goto LABEL_17;
          }
        }
        memcpy((char *)v64 + 8 * v22, ArgAttrsAttr, v21);
        unsigned int v22 = v65;
        goto LABEL_17;
      }
    }
  }
  uint64_t v23 = mlir::Float32Type::get(this, a2);
  uint64_t v24 = mlir::UnrankedTensorType::get(v23);
  uint64_t v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

void mlir::placement::TensorToMemref::build(mlir::UnknownLoc **a1, uint64_t a2, void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v27[2] = *MEMORY[0x1E4F143B8];
  mlir::OperationState::addOperands(a2, (uint64_t)a3, a4);
  *(void *)(a2 + 192) = 0;
  uint64_t v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  char __src = v27;
  uint64_t v26 = 0x200000000;
  unint64_t v13 = *a1;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::placement::TensorToMemref::inferReturnTypes(v13, v16, v17, a3, a4, Dictionary, v18, v19, v24[0], v24[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v20 = __src;
  }
  uint64_t v21 = v26;
  uint64_t v22 = *(unsigned int *)(a2 + 72);
  unint64_t v23 = v22 + v26;
  if (v23 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v23, 8);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  if (v21)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v22), v20, 8 * v21);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v22 + v21;
  if (__src != v27) {
    free(__src);
  }
}

BOOL mlir::placement::TensorToMemref::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2 = *this;
  if (*((unsigned char *)v2 + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  uint64_t Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 16 * v4;
    do
    {
      uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      uint64_t v11 = *this;
      if (**(void **)((*this)[6] + 96) == CallableRegion)
      {
        uint64_t v6 = (const void **)*((void *)Value + 1);
      }
      else
      {
        uint64_t v12 = mlir::CallGraphNode::getCallableRegion(Value);
        uint64_t v11 = *this;
        if (*(void *)(*(void *)((*this)[6] + 96) + 8) == v12)
        {
          uint64_t v7 = *((void *)Value + 1);
        }
        else
        {
          uint64_t v13 = mlir::CallGraphNode::getCallableRegion(Value);
          uint64_t v11 = *this;
          if (*(void *)(*(void *)((*this)[6] + 96) + 16) == v13) {
            uint64_t v8 = (const void **)*((void *)Value + 1);
          }
        }
      }
      uint64_t Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v9 -= 16;
    }
    while (v9);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    uint64_t v11 = *this;
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps0(v11, v8, (const void **)"shape", 5)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*this, v7, (const void **)"resultElementType", (const void **)0x11)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*this, v6, (const void **)"interleave", (const void **)0xA)|| !mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7,
                           0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v14 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps2(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

mlir::Operation *mlir::placement::TensorToMemref::verify(mlir::Operation **this)
{
  v102[19] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *this;
  unsigned int v90 = v3;
  uint64_t v4 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(*(void *)(*((void *)v3 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v89[0] = (uint64_t)v4;
  v89[1] = v5;
  if (!mlir::placement::MemrefToTensor::getShapeAttr(&v90)
    || !v4
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89))
  {
    goto LABEL_23;
  }
  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v8 -= 8;
      if (!v8) {
        goto LABEL_8;
      }
    }
    goto LABEL_23;
  }
LABEL_8:
  uint64_t v9 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  uint64_t NumElements = mlir::ShapedType::getNumElements(v9, v10);
  std::string __p = (void *)mlir::placement::MemrefToTensor::getShapeAttr(&v90);
  v98[0] = __p != 0;
  unint64_t isValidIntOrFloat = mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&__p, 8, 1, 0);
  if ((isValidIntOrFloat & 1) == 0)
  {
    uint64_t RawStringData = 0;
    if (isValidIntOrFloat < 2) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v15 = 0;
    unint64_t v14 = isValidIntOrFloat & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    do
    {
      if (isSplat) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v15;
      }
      if (isSplat) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = v15 + 1;
      }
      v16 *= *(void *)(RawStringData + 8 * v18);
      v17 *= *(void *)(RawStringData + 8 * v19);
      v15 += 2;
    }
    while (v15 != v14);
    uint64_t v2 = v17 * v16;
    goto LABEL_121;
  }
  uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&__p);
  unsigned __int8 isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&__p);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__p);
  unint64_t isValidIntOrFloat = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&__p);
  if (!isValidIntOrFloat)
  {
    uint64_t v2 = 1;
    goto LABEL_122;
  }
  if (isValidIntOrFloat >= 2) {
    goto LABEL_13;
  }
LABEL_11:
  unint64_t v14 = 0;
  uint64_t v2 = 1;
  do
  {
    if (isSplat) {
      unint64_t v63 = 0;
    }
    else {
      unint64_t v63 = v14;
    }
    v2 *= *(void *)(RawStringData + 8 * v63);
    ++v14;
LABEL_121:
    ;
  }
  while (isValidIntOrFloat != v14);
LABEL_122:
  if (NumElements != v2)
  {
    __int16 v96 = 257;
    mlir::Operation::emitOpError((uint64_t *)v3, (const void ***)&InterleaveAttr, (uint64_t)&__p);
    if (__p) {
      mlir::Diagnostic::operator<<((uint64_t)v98, "Input shape ");
    }
    long long v64 = (void *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&__p, v89);
    uint64_t v65 = (uint64_t)v64;
    if (*v64)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v64 + 1), " (");
      if (*(void *)v65)
      {
        uint64_t v66 = v65 + 24;
        unint64_t v67 = *(void *)(v65 + 24);
        LODWORD(v86) = 5;
        BOOL v87 = NumElements;
        uint64_t v68 = *(unsigned int *)(v65 + 32);
        char v69 = &v86;
        if (v68 >= *(_DWORD *)(v65 + 36))
        {
          unint64_t v80 = v68 + 1;
          BOOL v81 = v67 + 24 * v68 > (unint64_t)&v86;
          if (v67 <= (unint64_t)&v86 && v81)
          {
            int64_t v84 = (char *)&v86 - v67;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 40), v80, 24);
            unint64_t v67 = *(void *)(v65 + 24);
            char v69 = (const void ***)&v84[v67];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 40), v80, 24);
            unint64_t v67 = *(void *)(v65 + 24);
            char v69 = &v86;
          }
        }
        uint64_t v70 = v67 + 24 * *(unsigned int *)(v65 + 32);
        long long v71 = *(_OWORD *)v69;
        *(void *)(v70 + 16) = v69[2];
        *(_OWORD *)uint64_t v70 = v71;
        ++*(_DWORD *)(v65 + 32);
        if (*(void *)v65) {
          mlir::Diagnostic::operator<<(v65 + 8, " elements) is not compatible with shape attribute ");
        }
      }
    }
    uint64_t ShapeAttr = mlir::placement::MemrefToTensor::getShapeAttr(&v90);
    BOOL v92 = ShapeAttr != 0;
    unint64_t v72 = (void *)mlir::InFlightDiagnostic::append<mlir::Attribute>(v65, &ShapeAttr);
    uint64_t v73 = (uint64_t)v72;
    if (*v72)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v72 + 1), " (");
      if (*(void *)v73)
      {
        uint64_t v74 = v73 + 24;
        unint64_t v75 = *(void *)(v73 + 24);
        LODWORD(v86) = 2;
        BOOL v87 = v2;
        uint64_t v76 = *(unsigned int *)(v73 + 32);
        uint64_t v77 = &v86;
        if (v76 >= *(_DWORD *)(v73 + 36))
        {
          unint64_t v82 = v76 + 1;
          BOOL v83 = v75 + 24 * v76 > (unint64_t)&v86;
          if (v75 <= (unint64_t)&v86 && v83)
          {
            __int16 v85 = (char *)&v86 - v75;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v74, (void *)(v73 + 40), v82, 24);
            unint64_t v75 = *(void *)(v73 + 24);
            uint64_t v77 = (const void ***)&v85[v75];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v74, (void *)(v73 + 40), v82, 24);
            unint64_t v75 = *(void *)(v73 + 24);
            uint64_t v77 = &v86;
          }
        }
        uint64_t v78 = v75 + 24 * *(unsigned int *)(v73 + 32);
        long long v79 = *(_OWORD *)v77;
        *(void *)(v78 + 16) = v77[2];
        *(_OWORD *)uint64_t v78 = v79;
        ++*(_DWORD *)(v73 + 32);
        if (*(void *)v73) {
          mlir::Diagnostic::operator<<(v73 + 8, " elements)");
        }
      }
    }
    uint64_t v3 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult(v73);
    if (__p) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v98);
    return v3;
  }
LABEL_23:
  if (!mlir::placement::MemrefToTensor::getInterleaveAttr(&v90)
    || !v89[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89))
  {
    return (mlir::Operation *)1;
  }
  unint64_t v20 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  if (v21)
  {
    uint64_t v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22) {
        goto LABEL_30;
      }
    }
    return (mlir::Operation *)1;
  }
LABEL_30:
  InterleaveAttr = (void *)mlir::placement::MemrefToTensor::getInterleaveAttr(&v90);
  if (InterleaveAttr)
  {
    mlir::IntegerAttr::getValue(&InterleaveAttr, (llvm::APInt *)&__p);
    if (LODWORD(v98[0]) >= 0x41) {
      p_p = (unsigned int *)__p;
    }
    else {
      p_p = (unsigned int *)&__p;
    }
    uint64_t v24 = *p_p;
    if (LODWORD(v98[0]) >= 0x41 && __p) {
      operator delete[](__p);
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  mlir::getANENextSupportedInterleaveValue(v24);
  if (!v25)
  {
    __int16 v96 = 257;
    mlir::Operation::emitOpError((uint64_t *)v3, (const void ***)&InterleaveAttr, (uint64_t)&__p);
    if (__p) {
      mlir::Diagnostic::operator<<((uint64_t)v98, "interleave factor not supported");
    }
    uint64_t v3 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v98);
    return v3;
  }
  InterleaveAttr = v95;
  uint64_t v94 = 0x400000000;
  if (mlir::placement::MemrefToTensor::getShapeAttr(&v90))
  {
    std::string __p = (void *)mlir::placement::MemrefToTensor::getShapeAttr(&v90);
    v98[0] = __p != 0;
    if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&__p, 8, 1, 0))
    {
      uint64_t v26 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&__p);
      unsigned __int8 isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&__p);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__p);
      mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&__p);
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v86 = (const void **)mlir::placement::MemrefToTensor::getShapeAttr(&v90);
    BOOL v87 = v86 != 0;
    if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&v86, 8, 1, 0))
    {
      uint64_t v34 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v86);
      int v35 = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v86);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      unint64_t v36 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v86);
      uint64_t v2 = v36;
      LODWORD(v94) = 0;
      if (v36 <= HIDWORD(v94))
      {
        unsigned int v37 = 0;
        BOOL v58 = v26 == v34 && v35 == isSplat;
        int v39 = v58;
        if (v58 && !v36)
        {
LABEL_70:
          unsigned int v33 = v37 + v2;
          goto LABEL_71;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InterleaveAttr, v95, v36, 8);
        unsigned int v37 = v94;
        BOOL v38 = v26 == v34 && v35 == isSplat;
        int v39 = v38;
      }
    }
    else
    {
      int v39 = 0;
      unsigned int v37 = 0;
    }
    uint64_t v40 = 0;
    uint64_t v41 = (char *)InterleaveAttr + 8 * v37;
    do
    {
      if (isSplat) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = v40;
      }
      *(void *)&v41[8 * v40] = *(void *)(v26 + 8 * v42);
      BOOL v38 = v2 - 1 == v40++;
      if (v38) {
        int v43 = v39;
      }
      else {
        int v43 = 0;
      }
    }
    while (v43 != 1);
    goto LABEL_70;
  }
  uint64_t v27 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  uint64_t v28 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  unsigned int v29 = 0;
  uint64_t v31 = (unsigned char *)(v28 + 8 * v30);
  LODWORD(v94) = 0;
  unint64_t v32 = (v31 - v27) >> 3;
  if (v32 > HIDWORD(v94))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InterleaveAttr, v95, v32, 8);
    unsigned int v29 = v94;
  }
  if (v31 != v27)
  {
    memcpy((char *)InterleaveAttr + 8 * v29, v27, v31 - v27);
    unsigned int v29 = v94;
  }
  unsigned int v33 = v29 + ((unint64_t)(v31 - v27) >> 3);
LABEL_71:
  LODWORD(v94) = v33;
  uint64_t v44 = v33;
  if ((unint64_t)v33 - 6 > 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v86 = (const void **)mlir::placement::MemrefToTensor::getInterleaveAttr(&v90);
    if (v86)
    {
      mlir::IntegerAttr::getValue(&v86, (llvm::APInt *)&__p);
      if (LODWORD(v98[0]) >= 0x41) {
        uint64_t v45 = (unsigned int *)__p;
      }
      else {
        uint64_t v45 = (unsigned int *)&__p;
      }
      uint64_t v46 = *v45;
      if (LODWORD(v98[0]) >= 0x41 && __p) {
        operator delete[](__p);
      }
    }
    else
    {
      uint64_t v46 = 0;
    }
    if (!(*((void *)InterleaveAttr + v44 - 1) % v46))
    {
      int v56 = 1;
      goto LABEL_93;
    }
    __int16 v88 = 257;
    mlir::Operation::emitOpError((uint64_t *)v3, &v86, (uint64_t)&__p);
    if (__p)
    {
      mlir::Diagnostic::operator<<((uint64_t)v98, "width ");
      if (__p)
      {
        uint64_t v47 = *((void *)InterleaveAttr + v44 - 1);
        LODWORD(ShapeAttr) = 2;
        BOOL v92 = v47;
        p_uint64_t ShapeAttr = &ShapeAttr;
        unint64_t v49 = v99;
        if (v100 >= v101)
        {
          unint64_t v59 = v100 + 1;
          if (v99 <= (unint64_t)&ShapeAttr && v99 + 24 * v100 > (unint64_t)&ShapeAttr)
          {
            BOOL v61 = (char *)&ShapeAttr - v99;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v59, 24);
            unint64_t v49 = v99;
            p_uint64_t ShapeAttr = (uint64_t *)&v61[v99];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v59, 24);
            p_uint64_t ShapeAttr = &ShapeAttr;
            unint64_t v49 = v99;
          }
        }
        unint64_t v50 = v49 + 24 * v100;
        long long v51 = *(_OWORD *)p_ShapeAttr;
        *(void *)(v50 + 16) = p_ShapeAttr[2];
        *(_OWORD *)unint64_t v50 = v51;
        ++v100;
        if (__p)
        {
          mlir::Diagnostic::operator<<((uint64_t)v98, " must be a multiple of interleave ");
          if (__p)
          {
            LODWORD(ShapeAttr) = 2;
            BOOL v92 = v46;
            char v52 = &ShapeAttr;
            unint64_t v53 = v99;
            if (v100 >= v101)
            {
              unint64_t v60 = v100 + 1;
              if (v99 <= (unint64_t)&ShapeAttr && v99 + 24 * v100 > (unint64_t)&ShapeAttr)
              {
                uint64_t v62 = (char *)&ShapeAttr - v99;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v60, 24);
                unint64_t v53 = v99;
                char v52 = (uint64_t *)&v62[v99];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v60, 24);
                char v52 = &ShapeAttr;
                unint64_t v53 = v99;
              }
            }
            unint64_t v54 = v53 + 24 * v100;
            long long v55 = *(_OWORD *)v52;
            *(void *)(v54 + 16) = v52[2];
            *(_OWORD *)unint64_t v54 = v55;
            ++v100;
          }
        }
      }
    }
  }
  else
  {
    __int16 v88 = 257;
    mlir::Operation::emitOpError((uint64_t *)v3, &v86, (uint64_t)&__p);
    if (__p) {
      mlir::Diagnostic::operator<<((uint64_t)v98, "Interleave can only be applied on 4D or 5D tensor");
    }
  }
  uint64_t v3 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v98);
  int v56 = 0;
LABEL_93:
  if (InterleaveAttr != v95) {
    free(InterleaveAttr);
  }
  if (v56) {
    return (mlir::Operation *)1;
  }
  return v3;
}

uint64_t mlir::placement::anonymous namespace'::isCompatibleMemrefTensorOpReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 1;
  if (a2 && a4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2 - 1;
    uint64_t v9 = a4 - 1;
    while (1)
    {
      uint64_t v10 = (uint64_t *)mlir::TypeRange::dereference_iterator(a1, v7);
      uint64_t v11 = (uint64_t *)mlir::TypeRange::dereference_iterator(a3, v7);
      v23[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v10);
      v23[1] = v12;
      uint64_t v13 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v11);
      v22[0] = v13;
      v22[1] = v14;
      BOOL v15 = !v23[0] || v13 == 0;
      if (v15) {
        break;
      }
      ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v23);
      uint64_t v18 = v17;
      uint64_t v19 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v22);
      if (v18 != v20 || memcmp(ArgAttrsAttr, v19, 8 * v18)) {
        break;
      }
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v23);
      BOOL v15 = OperandRange == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v22);
      uint64_t result = v15;
      if (v15 && v8 != v7)
      {
        BOOL v15 = v9 == v7++;
        if (!v15) {
          continue;
        }
      }
      return result;
    }
    return 0;
  }
  return result;
}

void mlir::placement::TensorToMemref::getOutputShapeBeforeInterleave(mlir::Operation **this@<X0>, uint64_t a2@<X8>)
{
  if (!mlir::placement::MemrefToTensor::getInterleaveAttr(this))
  {
    if (*((_DWORD *)*this + 9)) {
      uint64_t v7 = (uint64_t)*this - 16;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = (uint64_t *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v8) {
      goto LABEL_25;
    }
    uint64_t v9 = *v8;
    unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v11 = *(unsigned int *)(v9 + 16);
    if (!v11) {
      goto LABEL_25;
    }
    uint64_t v12 = *(void **)(v9 + 8);
    uint64_t v13 = &v12[2 * v11];
    do
    {
      unint64_t v14 = v11 >> 1;
      BOOL v15 = &v12[2 * (v11 >> 1)];
      unint64_t v17 = *v15;
      uint64_t v16 = v15 + 2;
      v11 += ~(v11 >> 1);
      if (v17 < v10) {
        uint64_t v12 = v16;
      }
      else {
        unint64_t v11 = v14;
      }
    }
    while (v11);
    goto LABEL_23;
  }
  v42[0] = mlir::placement::MemrefToTensor::getShapeAttr(this);
  if (!v42[0])
  {
    uint64_t v8 = (uint64_t *)(*(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v8) {
      goto LABEL_25;
    }
    uint64_t v18 = *v8;
    unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v19 = *(unsigned int *)(v18 + 16);
    if (!v19) {
      goto LABEL_25;
    }
    uint64_t v12 = *(void **)(v18 + 8);
    uint64_t v13 = &v12[2 * v19];
    do
    {
      unint64_t v20 = v19 >> 1;
      uint64_t v21 = &v12[2 * (v19 >> 1)];
      unint64_t v23 = *v21;
      uint64_t v22 = v21 + 2;
      v19 += ~(v19 >> 1);
      if (v23 < v10) {
        uint64_t v12 = v22;
      }
      else {
        unint64_t v19 = v20;
      }
    }
    while (v19);
LABEL_23:
    if (v12 != v13 && *v12 == v10)
    {
      uint64_t v24 = v12[1];
LABEL_26:
      v42[0] = v8;
      v42[1] = v24;
      ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v42);
      uint64_t v27 = v25;
      *(void *)a2 = a2 + 16;
      *(void *)(a2 + 8) = 0x500000000;
      if ((unint64_t)(8 * v25) < 0x29)
      {
        unsigned int v28 = 0;
        if (!v25) {
          goto LABEL_29;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), (8 * v25) >> 3, 8);
        unsigned int v28 = *(_DWORD *)(a2 + 8);
        if (!v27)
        {
LABEL_29:
          *(_DWORD *)(a2 + 8) = v28 + v27;
          return;
        }
      }
      memcpy((void *)(*(void *)a2 + 8 * v28), ArgAttrsAttr, 8 * v27);
      unsigned int v28 = *(_DWORD *)(a2 + 8);
      goto LABEL_29;
    }
LABEL_25:
    uint64_t v24 = 0;
    goto LABEL_26;
  }
  if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v42, 8, 1, 0))
  {
    uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v42);
    unsigned __int8 isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v42);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v42);
    mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v42);
  }
  else
  {
    uint64_t RawStringData = 0;
  }
  if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v42, 8, 1, 0))
  {
    uint64_t v29 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v42);
    int v30 = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v42);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v42);
    unint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v42);
    unint64_t v3 = NumElements;
    *(void *)a2 = a2 + 16;
    *(void *)(a2 + 8) = 0x500000000;
    unint64_t v32 = (_DWORD *)(a2 + 8);
    if (NumElements < 6)
    {
      unsigned int v33 = 0;
      BOOL v37 = RawStringData == v29 && v30 == isSplat;
      int v35 = v37;
      if (v37 && !NumElements) {
        return;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), NumElements, 8);
      unsigned int v33 = *(_DWORD *)(a2 + 8);
      BOOL v34 = RawStringData == v29 && v30 == isSplat;
      int v35 = v34;
    }
    uint64_t v36 = *(void *)a2;
  }
  else
  {
    int v35 = 0;
    unsigned int v33 = 0;
    uint64_t v36 = a2 + 16;
    *(void *)a2 = a2 + 16;
    unint64_t v32 = (_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 5;
  }
  uint64_t v38 = 0;
  uint64_t v39 = v36 + 8 * v33;
  do
  {
    if (isSplat) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = v38;
    }
    *(void *)(v39 + 8 * v38) = *(void *)(RawStringData + 8 * v40);
    BOOL v34 = v3 - 1 == v38++;
    if (v34) {
      int v41 = v35;
    }
    else {
      int v41 = 0;
    }
  }
  while (v41 != 1);
  *unint64_t v32 = v33 + v3;
}

void mlir::placement::MemrefToTensor::getInputShapeAfterInterleave(mlir::Operation **this@<X0>, void *a2@<X8>)
{
  if (!mlir::placement::MemrefToTensor::getInterleaveAttr(this))
  {
    unint64_t v19 = (uint64_t *)(*(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v19) {
      goto LABEL_36;
    }
    uint64_t v20 = *v19;
    unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v22 = *(unsigned int *)(v20 + 16);
    if (!v22) {
      goto LABEL_36;
    }
    unint64_t v23 = *(void **)(v20 + 8);
    uint64_t v24 = &v23[2 * v22];
    do
    {
      unint64_t v25 = v22 >> 1;
      uint64_t v26 = &v23[2 * (v22 >> 1)];
      unint64_t v28 = *v26;
      uint64_t v27 = v26 + 2;
      v22 += ~(v22 >> 1);
      if (v28 < v21) {
        unint64_t v23 = v27;
      }
      else {
        unint64_t v22 = v25;
      }
    }
    while (v22);
LABEL_34:
    if (v23 != v24 && *v23 == v21)
    {
      uint64_t v36 = v23[1];
LABEL_37:
      std::string __p = v19;
      uint64_t v47 = v36;
      ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__p);
      uint64_t v39 = v37;
      *a2 = a2 + 2;
      a2[1] = 0x500000000;
      if ((unint64_t)(8 * v37) < 0x29)
      {
        unsigned int v40 = 0;
        if (!v37)
        {
LABEL_42:
          *((_DWORD *)a2 + 2) = v40 + v39;
          return;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, a2 + 2, (8 * v37) >> 3, 8);
        unsigned int v40 = *((_DWORD *)a2 + 2);
        if (!v39) {
          goto LABEL_42;
        }
      }
      memcpy((void *)(*a2 + 8 * v40), ArgAttrsAttr, 8 * v39);
      unsigned int v40 = *((_DWORD *)a2 + 2);
      goto LABEL_42;
    }
LABEL_36:
    uint64_t v36 = 0;
    goto LABEL_37;
  }
  if (!mlir::placement::MemrefToTensor::getShapeAttr(this))
  {
    if (*((_DWORD *)*this + 9)) {
      uint64_t v29 = (uint64_t)*this - 16;
    }
    else {
      uint64_t v29 = 0;
    }
    unint64_t v19 = (uint64_t *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v29, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v19) {
      goto LABEL_36;
    }
    uint64_t v30 = *v19;
    unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v31 = *(unsigned int *)(v30 + 16);
    if (!v31) {
      goto LABEL_36;
    }
    unint64_t v23 = *(void **)(v30 + 8);
    uint64_t v24 = &v23[2 * v31];
    do
    {
      unint64_t v32 = v31 >> 1;
      unsigned int v33 = &v23[2 * (v31 >> 1)];
      unint64_t v35 = *v33;
      BOOL v34 = v33 + 2;
      v31 += ~(v31 >> 1);
      if (v35 < v21) {
        unint64_t v23 = v34;
      }
      else {
        unint64_t v31 = v32;
      }
    }
    while (v31);
    goto LABEL_34;
  }
  uint64_t v4 = (uint64_t *)(*(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    unint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_12:
  }
    uint64_t v14 = 0;
  std::string __p = v4;
  uint64_t v47 = v14;
  uint64_t v16 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__p);
  uint64_t v17 = v15;
  *a2 = a2 + 2;
  a2[1] = 0x500000000;
  if ((unint64_t)(8 * v15) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, a2 + 2, (8 * v15) >> 3, 8);
    unsigned int v18 = *((_DWORD *)a2 + 2);
    if (!v17) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  unsigned int v18 = 0;
  if (v15)
  {
LABEL_44:
    memcpy((void *)(*a2 + 8 * v18), v16, 8 * v17);
    unsigned int v18 = *((_DWORD *)a2 + 2);
  }
LABEL_45:
  uint64_t v41 = v18 + v17;
  *((_DWORD *)a2 + 2) = v41;
  uint64_t InterleaveAttr = mlir::placement::MemrefToTensor::getInterleaveAttr(this);
  if (InterleaveAttr)
  {
    mlir::IntegerAttr::getValue(&InterleaveAttr, (llvm::APInt *)&__p);
    if (v47 >= 0x41) {
      p_p = (unsigned int *)__p;
    }
    else {
      p_p = (unsigned int *)&__p;
    }
    uint64_t v43 = *p_p;
    if (v47 >= 0x41 && __p) {
      operator delete[](__p);
    }
  }
  else
  {
    uint64_t v43 = 0;
  }
  uint64_t v44 = 16;
  if (v41 == 4) {
    uint64_t v44 = 8;
  }
  uint64_t v45 = *a2;
  *(void *)(v45 + v44) = *(void *)(*a2 + v44) / v43;
  *(void *)(v45 + 8 * v41 - 8) *= v43;
}

uint64_t mlir::placement::MemrefToTensor::fold(mlir::Operation **a1)
{
  uint64_t v12 = *(void *)(*((void *)*a1 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!DefiningOp) {
    return 0;
  }
  uint64_t v3 = DefiningOp;
  uint64_t v4 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v5 = v4 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id;
  unint64_t v6 = v4 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id
     ? (mlir::Operation *)DefiningOp
     : 0;
  unint64_t v13 = v6;
  if (!v5) {
    return 0;
  }
  unint64_t v8 = *(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*((_DWORD *)*a1 + 9)) {
    uint64_t v9 = (uint64_t)*a1 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0);
  uint64_t result = 0;
  if (v8 == (*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t InterleaveAttr = mlir::placement::MemrefToTensor::getInterleaveAttr(a1);
    if (InterleaveAttr == mlir::placement::MemrefToTensor::getInterleaveAttr(&v13)
      && !mlir::placement::MemrefToTensor::getResultElementTypeAttr(a1)
      && !mlir::placement::MemrefToTensor::getResultElementTypeAttr(&v13))
    {
      return *(void *)(*(void *)(v3 + 72) + 24) | 4;
    }
    return 0;
  }
  return result;
}

uint64_t mlir::placement::ReplacedOps::parse(mlir::AsmParser *a1, uint64_t a2)
{
  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, void, void *, void, void, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::placement::ReplacedOps::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(void **)(*(void *)(a2 + 8) + 96), *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 24));
}

uint64_t mlir::placement::RegionCall::verifySymbolUses(mlir::placement::RegionCall *this, mlir::SymbolTableCollection *a2)
{
  v74[23] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)this;
  if (*(unsigned char *)(*(void *)this + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr(*(void *)this, (uint64_t)"callee", 6), v6))
  {
    uint64_t v7 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v7 = mlir::DictionaryAttr::get(v4 + 56, "callee", 6uLL);
    if (!v7)
    {
LABEL_10:
      unint64_t v11 = "requires a 'callee' symbol reference attribute";
      goto LABEL_11;
    }
  }
  unint64_t v8 = *(void **)(*(void *)v7 + 136);
  BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  if (v8 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v73 = v10;
  if (!v9) {
    goto LABEL_10;
  }
  mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v73);
  uint64_t v15 = v14 ? 0 : v7;
  uint64_t v69 = v15;
  if (!v15) {
    goto LABEL_10;
  }
  uint64_t v16 = mlir::SymbolTableCollection::lookupNearestSymbolFrom((uint64_t)a2, *(mlir::SymbolTable **)this, v15);
  if (!v16)
  {
    __int16 v68 = 257;
    mlir::OpState::emitOpError((uint64_t **)this, v67, (uint64_t)&v73);
    if (v73) {
      mlir::Diagnostic::operator<<((uint64_t)v74, "'");
    }
    uint64_t Value = (const void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v69);
    uint64_t AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
    if (!v73) {
      goto LABEL_75;
    }
    __int16 v72 = 261;
    uint64_t Value = AttrData;
    uint64_t v71 = v28;
    mlir::Diagnostic::operator<<((uint64_t)v74, &Value);
    if (!v73) {
      goto LABEL_75;
    }
    uint64_t v29 = "' does not reference a valid function";
    goto LABEL_74;
  }
  uint64_t v17 = v16;
  unsigned int v18 = *(void **)(*(void *)(v16 + 48) + 16);
  if (v18 == &mlir::detail::TypeIDResolver<mlir::anec::A12,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A13,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A14,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A15,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A16,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A17,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A11Legacy,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::mpsx::ANEOp,void>::id)
  {
    int v26 = 1;
  }
  else if (v18 == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
  {
    int v26 = 0;
  }
  else
  {
    int v26 = 2 * (v18 == &mlir::detail::TypeIDResolver<mlir::mpsx::CPUOp,void>::id);
  }
  if (*(_DWORD *)(mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)this) + 8) != v26)
  {
    __int16 v68 = 257;
    mlir::OpState::emitOpError((uint64_t **)this, v67, (uint64_t)&v73);
    if (v73) {
      mlir::Diagnostic::operator<<((uint64_t)v74, "failed: callee of type '");
    }
    if (v73)
    {
      uint64_t v38 = (const void **)(&off_1E4FC0078)[v26];
      __int16 v72 = 261;
      uint64_t Value = v38;
      uint64_t v71 = 3;
      mlir::Diagnostic::operator<<((uint64_t)v74, &Value);
      if (v73) {
        mlir::Diagnostic::operator<<((uint64_t)v74, "' does not match the call region type ('");
      }
    }
    uint64_t v39 = *(int *)(mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)this) + 8);
    if (v39 > 2)
    {
      uint64_t v41 = 0;
      unsigned int v40 = "";
    }
    else
    {
      unsigned int v40 = (&off_1E4FC0078)[v39];
      uint64_t v41 = 3;
    }
    if (!v73) {
      goto LABEL_75;
    }
    __int16 v72 = 261;
    uint64_t Value = (const void **)v40;
    uint64_t v71 = v41;
    mlir::Diagnostic::operator<<((uint64_t)v74, &Value);
    if (!v73) {
      goto LABEL_75;
    }
    uint64_t v29 = "')";
LABEL_74:
    mlir::Diagnostic::operator<<((uint64_t)v74, v29);
LABEL_75:
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
    if (v73) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    }
    goto LABEL_13;
  }
  v66[0] = v17;
  v66[1] = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(v17);
  uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v66);
  int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&canMapOperands);
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0)
  {
    if (!Kind) {
      goto LABEL_55;
    }
LABEL_105:
    unint64_t v11 = "incorrect number of operands for callee";
    goto LABEL_11;
  }
  if (Kind != *(_DWORD *)(*(void *)this + 68)) {
    goto LABEL_105;
  }
LABEL_55:
  int v31 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&canMapOperands);
  if (v31)
  {
    unint64_t v32 = 0;
    int v33 = v31;
    uint64_t v34 = 24;
    while (1)
    {
      unint64_t v35 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + v34) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(void *)(mlir::FunctionType::getInputs((mlir::FunctionType *)&canMapOperands) + 8 * (void)v32) != v35) {
        break;
      }
      unint64_t v32 = (const void **)((char *)v32 + 1);
      v34 += 32;
      if (v33 == v32) {
        goto LABEL_59;
      }
    }
    uint64_t Value = (const void **)"operand type mismatch: expected operand type ";
    __int16 v72 = 259;
    mlir::OpState::emitOpError((uint64_t **)this, &Value, (uint64_t)&v73);
    uint64_t v64 = *(void *)(mlir::FunctionType::getInputs((mlir::FunctionType *)&canMapOperands) + 8 * (void)v32);
    uint64_t v42 = (void *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v73, &v64);
    uint64_t v43 = (uint64_t)v42;
    if (*v42) {
      mlir::Diagnostic::operator<<((uint64_t)(v42 + 1), ", but provided ");
    }
    unint64_t v63 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + v34) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v44 = (void *)mlir::InFlightDiagnostic::append<mlir::Type &>(v43, (uint64_t *)&v63);
    uint64_t v45 = (uint64_t)v44;
    if (*v44)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v44 + 1), " for operand number ");
      if (*(void *)v45)
      {
        uint64_t v46 = v45 + 24;
        unint64_t v47 = *(void *)(v45 + 24);
        LODWORD(v67[0]) = 5;
        v67[1] = v32;
        uint64_t v48 = *(unsigned int *)(v45 + 32);
        unint64_t v49 = v67;
        if (v48 >= *(_DWORD *)(v45 + 36))
        {
          unint64_t v60 = v48 + 1;
          BOOL v61 = v47 + 24 * v48 > (unint64_t)v67;
          if (v47 <= (unint64_t)v67 && v61)
          {
            uint64_t v62 = (char *)v67 - v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v46, (void *)(v45 + 40), v60, 24);
            unint64_t v47 = *(void *)(v45 + 24);
            unint64_t v49 = (const void ***)&v62[v47];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v46, (void *)(v45 + 40), v60, 24);
            unint64_t v47 = *(void *)(v45 + 24);
            unint64_t v49 = v67;
          }
        }
        uint64_t v50 = v47 + 24 * *(unsigned int *)(v45 + 32);
        long long v51 = *(_OWORD *)v49;
        *(void *)(v50 + 16) = v49[2];
        *(_OWORD *)uint64_t v50 = v51;
        ++*(_DWORD *)(v45 + 32);
      }
    }
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v45);
    if (v73) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    }
    goto LABEL_13;
  }
LABEL_59:
  if (mlir::FunctionType::getNumResults((mlir::FunctionType *)&canMapOperands) == *(_DWORD *)(*(void *)this + 36))
  {
    uint64_t NumResults = mlir::FunctionType::getNumResults((mlir::FunctionType *)&canMapOperands);
    if (NumResults)
    {
      uint64_t v12 = NumResults;
      unint64_t v37 = *(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(void *)mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) == v37)
      {
        if (v12 == 1) {
          return v12;
        }
        unint64_t v52 = *(void *)(*(void *)this - 24) & 0xFFFFFFFFFFFFFFF8;
        if (*(void *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 8) == v52)
        {
          if (v12 == 2) {
            return 1;
          }
          unint64_t v53 = *(void *)(*(void *)this - 40) & 0xFFFFFFFFFFFFFFF8;
          if (*(void *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 16) == v53)
          {
            if (v12 == 3) {
              return 1;
            }
            unint64_t v54 = *(void *)(*(void *)this - 56) & 0xFFFFFFFFFFFFFFF8;
            if (*(void *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 24) == v54)
            {
              if (v12 == 4) {
                return 1;
              }
              unint64_t v55 = *(void *)(*(void *)this - 72) & 0xFFFFFFFFFFFFFFF8;
              if (*(void *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 32) == v55)
              {
                if (v12 == 5) {
                  return 1;
                }
                unint64_t v56 = *(void *)(*(void *)this - 88) & 0xFFFFFFFFFFFFFFF8;
                if (*(void *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 40) == v56)
                {
                  int v57 = v12 - 6;
                  if (v12 == 6) {
                    return 1;
                  }
                  uint64_t v58 = 0;
                  while (1)
                  {
                    unint64_t v59 = *(void *)(*(void *)this - 24 * (v58 + 1) - 88) & 0xFFFFFFFFFFFFFFF8;
                    if (*(void *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 8 * v58 + 48) != v59) {
                      break;
                    }
                    ++v58;
                    uint64_t v12 = 1;
                    if (v57 == v58) {
                      return v12;
                    }
                  }
                }
              }
            }
          }
        }
      }
      uint64_t Value = (const void **)"result type mismatch";
      __int16 v72 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, &Value, (uint64_t)&v73);
      uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v73);
      return v12;
    }
    return 1;
  }
  unint64_t v11 = "incorrect number of results for callee";
LABEL_11:
  uint64_t Value = (const void **)v11;
  __int16 v72 = 259;
  mlir::OpState::emitOpError((uint64_t **)this, &Value, (uint64_t)&v73);
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
  if (v73) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
  }
LABEL_13:
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v74);
  return v12;
}

float mlir::placement::RegionCall::getExecutionCost(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*(unsigned char *)(*a1 + 47) || (uint64_t InherentAttr = mlir::Operation::getInherentAttr(*a1, (uint64_t)"callee", 6), !v4)) {
    uint64_t InherentAttr = mlir::DictionaryAttr::get(v2 + 56, "callee", 6uLL);
  }
  uint64_t v5 = InherentAttr;
  if (InherentAttr)
  {
    char v6 = *(void **)(*(void *)InherentAttr + 136);
    BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
    if (v6 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
      unint64_t v8 = (float *)InherentAttr;
    }
    else {
      unint64_t v8 = 0;
    }
    v22[0] = v8;
    if (v7)
    {
      mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v22);
      if (v9) {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  ParentOp = (mlir::Block *)*a1;
  do
  {
    ParentOp = (mlir::Block *)*((void *)ParentOp + 2);
    if (!ParentOp) {
      break;
    }
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    if (!ParentOp) {
      break;
    }
  }
  while (*(_UNKNOWN **)(*((void *)ParentOp + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id);
  mlir::SymbolTable::lookupSymbolIn((uint64_t)ParentOp, v5);
  float v25 = 0.0;
  int v11 = *(_DWORD *)(mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)a1) + 8);
  if (v11)
  {
    float result = 0.0;
    if (v11 == 1) {
      return 0.0008;
    }
  }
  else
  {
    int v24 = 1317060348;
    int v23 = 1132462080;
    v22[0] = &v25;
    v22[1] = (float *)&v23;
    void v22[2] = (float *)&v24;
    uint64_t v13 = *a1;
    if ((*(unsigned char *)(*a1 + 46) & 0x80) != 0)
    {
      uint64_t v14 = *(unsigned int *)(v13 + 68);
      if (v14)
      {
        uint64_t v15 = (uint64_t *)(*(void *)(v13 + 72) + 24);
        do
        {
          uint64_t v16 = *v15;
          v15 += 4;
          mlir::placement::RegionCall::getExecutionCost(mlir::DeviceInfo const&)::$_0::operator()(v22, v16);
          --v14;
        }
        while (v14);
        uint64_t v13 = *a1;
      }
    }
    uint64_t v17 = *(unsigned int *)(v13 + 36);
    uint64_t v18 = v13 - 16;
    if (v17) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v17)
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v19, i);
        mlir::placement::RegionCall::getExecutionCost(mlir::DeviceInfo const&)::$_0::operator()(v22, NextResultAtOffset);
      }
    }
    return v25;
  }
  return result;
}

float mlir::placement::RegionCall::getExecutionCost(mlir::DeviceInfo const&)::$_0::operator()(float **a1, uint64_t a2)
{
  char v3 = (uint64_t *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v4 = *v3;
  unint64_t v5 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v6 = *(unsigned int *)(v4 + 16);
  if (!v6) {
    goto LABEL_10;
  }
  BOOL v7 = *(void **)(v4 + 8);
  unint64_t v8 = &v7[2 * v6];
  do
  {
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = &v7[2 * (v6 >> 1)];
    unint64_t v12 = *v10;
    int v11 = v10 + 2;
    v6 += ~(v6 >> 1);
    if (v12 < v5) {
      BOOL v7 = v11;
    }
    else {
      unint64_t v6 = v9;
    }
  }
  while (v6);
  if (v7 != v8 && *v7 == v5) {
    uint64_t v13 = v7[1];
  }
  else {
LABEL_10:
  }
    uint64_t v13 = 0;
  v22[0] = v3;
  v22[1] = v13;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v22))
  {
LABEL_17:
    float v20 = 32768.0;
    goto LABEL_18;
  }
  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v22);
  if (v15)
  {
    uint64_t v16 = 8 * v15;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v16 -= 8;
      if (!v16) {
        goto LABEL_16;
      }
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v22);
  unsigned int v17 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange) >> 3;
  uint64_t v18 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v22);
  float v20 = (float)v17 * (float)mlir::ShapedType::getNumElements(v18, v19);
LABEL_18:
  float result = (float)((float)(v20 / *a1[1]) / *a1[2]) + **a1;
  **a1 = result;
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::HostTypeCast>(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.host_type_cast", 24, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id, (uint64_t)&v9);
  char v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    unint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    char v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9C6680;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOps>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.replaced_ops", 22, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::ReplacedOps,void>::id, (uint64_t)&v9);
  char v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    unint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    char v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9C65B8;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::placement::ReplacedOps::getAttributeNames(void)::attrNames, 4);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOpsLiveOuts>(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.live_outs", 19, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::ReplacedOpsLiveOuts,void>::id, (uint64_t)&v9);
  char v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    unint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    char v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9C68D8;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::StartTimer>(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.start_timer", 21, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::StartTimer,void>::id, (uint64_t)&v9);
  char v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    unint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    char v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9C64F0;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::placement::StartTimer::getAttributeNames(void)::attrNames, 1);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::StopTimer>(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.stop_timer", 20, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::StopTimer,void>::id, (uint64_t)&v9);
  char v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    unint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    char v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9C69A0;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::Model(void *a1, uint64_t a2)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  int v11 = v13;
  uint64_t v12 = 0x300000000;
  uint64_t v4 = malloc(8uLL);
  *uint64_t v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::placement::ANEIOCast>::getEffects;
  unint64_t v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v11, v5, v4);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"placement.ane_io_cast", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id, (uint64_t)&v11);
  unint64_t v6 = v11;
  if (v12)
  {
    uint64_t v7 = 16 * v12;
    unint64_t v8 = (void **)((char *)v11 + 8);
    do
    {
      unint64_t v9 = *v8;
      v8 += 2;
      free(v9);
      v7 -= 16;
    }
    while (v7);
    unint64_t v6 = v11;
  }
  if (v6 != v13) {
    free(v6);
  }
  *a1 = &unk_1EC97ECC0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = (unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2, a3, a4, a5);
  char v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0) {
        unint64_t v8 = v10;
      }
      else {
        unint64_t v8 = (llvm **)v10[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v5);
    }
    if ((v7 & 2) == 0) {
      llvm::deallocate_buffer(v10[0], v10[1]);
    }
  }
  return v6;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
      + 2;
  BOOL v6 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2);
  char v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0) {
        unint64_t v8 = v10;
      }
      else {
        unint64_t v8 = (llvm **)v10[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v2, v3, v4, v5);
    }
    if ((v7 & 2) == 0) {
      llvm::deallocate_buffer(v10[0], v10[1]);
    }
  }
  return v6;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x1E4F143B8];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::placement::ANEIOCast>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::placement::ANEIOCast>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  mlir::placement::detail::ANEIOCastGenericAdaptorBase::ANEIOCastGenericAdaptorBase((uint64_t)v13, this);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v12 = *(void *)(*((void *)this + 9) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id
      && (uint64_t v9 = *(void *)(*(void *)(result + 72) + 24),
          (*(void *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8) == (*((void *)this - 1) & 0xFFFFFFFFFFFFFFF8))
      && (uint64_t v10 = v9 | 4, (v9 | 4uLL) >= 8))
    {
      if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v9 & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>()
{
  unint64_t v0 = 0x1E8EB8000uLL;
  {
    unint64_t v0 = 0x1E8EB8000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v11 = 104;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = 0x1E8EB8000;
    }
  }
  return *(void *)(v0 + 2896);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::ANEIOCast>,mlir::OpTrait::OneResult<mlir::placement::ANEIOCast>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::placement::ANEIOCast>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ANEIOCast>,mlir::OpTrait::OneOperand<mlir::placement::ANEIOCast>,mlir::OpTrait::OpInvariants<mlir::placement::ANEIOCast>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::ANEIOCast>>((uint64_t)a1, a2))return 0; {
  unint64_t v4 = a1;
  }
  return mlir::placement::ANEIOCast::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::ANEIOCast>,mlir::OpTrait::OneResult<mlir::placement::ANEIOCast>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::placement::ANEIOCast>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ANEIOCast>,mlir::OpTrait::OneOperand<mlir::placement::ANEIOCast>,mlir::OpTrait::OpInvariants<mlir::placement::ANEIOCast>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::ANEIOCast>>(uint64_t a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult((mlir::OpTrait::impl *)a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand((mlir::OpTrait::impl *)a1, v5)
    || !mlir::placement::__mlir_ods_local_type_constraint_PlacementOps0((uint64_t *)a1, (const void **)(*(void *)(*(void *)(*(void *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 36)) {
    uint64_t v6 = a1 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps0((uint64_t *)a1, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  int v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x1E4F143B8];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  __guard v9 = mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2;
}

__guard mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>()
{
  {
    if (v2)
    {
      char v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HostTypeConversion<Empty>]";
      unint64_t v11 = 90;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
    }
  }
  return v0[21];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  if (*((_DWORD *)a1 + 9)) {
    uint64_t v6 = (uint64_t)a1 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return 1;
}

uint64_t mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::Model(void *a1, uint64_t a2)
{
  v17[6] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v4 = malloc(8uLL);
  *unint64_t v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::getEffects;
  unint64_t v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  uint64_t v6 = malloc(0x18uLL);
  void *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::refineReturnTypes;
  void v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  unint64_t v8 = malloc(8uLL);
  *unint64_t v8 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::isCompatibleReturnTypes;
  unint64_t v9 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"placement.memref_to_tensor", 26, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id, (uint64_t)&v15);
  char v10 = v15;
  if (v16)
  {
    uint64_t v11 = 16 * v16;
    uint64_t v12 = (void **)((char *)v15 + 8);
    do
    {
      unint64_t v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    char v10 = v15;
  }
  if (v10 != v17) {
    free(v10);
  }
  *a1 = &unk_1EC9C6748;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  int v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x1E4F143B8];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::placement::MemrefToTensor::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::MemrefToTensor>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::MemrefToTensor>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v23[23] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  uint64_t v20 = 0x400000000;
  if (!mlir::placement::MemrefToTensor::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v19))goto LABEL_8; {
  mlir::ValueRange::ValueRange(v18, (uint64_t)v19, v20);
  }
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  {
    uint64_t v13 = 1;
    goto LABEL_9;
  }
  v16[0] = "placement.memref_to_tensor";
  v16[1] = (char *)26;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v22);
    uint64_t v14 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v22, "'", v16, "' op inferred type(s) ", (uint64_t)&v19, " are incompatible with return type(s) of operation ", a11);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v22) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
  }
  else
  {
LABEL_8:
    uint64_t v13 = 0;
  }
LABEL_9:
  if (v19 != v21) {
    free(v19);
  }
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a2;
  mlir::placement::detail::MemrefToTensorGenericAdaptorBase::MemrefToTensorGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::placement::MemrefToTensor::fold(&v13);
  unint64_t v10 = v9;
  if (v9 < 8
    || (mlir::Operation *)((char *)a2 - 16) == (mlir::Operation *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  __guard v10 = mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>()
{
  unint64_t v0 = 0x1E8EB8000uLL;
  {
    unint64_t v0 = 0x1E8EB8000;
    if (v2)
    {
      __guard v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<Empty>]";
      unint64_t v11 = 110;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = 0x1E8EB8000;
    }
  }
  return *(void *)(v0 + 3008);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::placement::MemrefToTensor::verifyInvariantsImpl((uint64_t **)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::placement::MemrefToTensor::verify(&v7) != 0;
}

BOOL mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::Model(void *a1, uint64_t a2)
{
  v17[6] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v4 = malloc(8uLL);
  *unint64_t v4 = mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::verifySymbolUses;
  unint64_t v5 = mlir::TypeID::get<mlir::SymbolUserOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  unint64_t v6 = malloc(0x10uLL);
  void *v6 = mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumOperandAlignment;
  v6[1] = mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumResultAlignment;
  unint64_t v7 = mlir::TypeID::get<mlir::MinimumAlignmentInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  unint64_t v8 = malloc(8uLL);
  *unint64_t v8 = mlir::detail::ExecutionCostOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getExecutionCost;
  unint64_t v9 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"placement.region_call", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id, (uint64_t)&v15);
  __guard v10 = v15;
  if (v16)
  {
    uint64_t v11 = 16 * v16;
    uint64_t v12 = (void **)((char *)v15 + 8);
    do
    {
      uint64_t v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    __guard v10 = v15;
  }
  if (v10 != v17) {
    free(v10);
  }
  *a1 = &unk_1EC9C6428;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  int v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        __guard v10 = v11;
      }
      else {
        __guard v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x1E4F143B8];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::verifySymbolUses(int a1, uint64_t a2, mlir::SymbolTableCollection *a3)
{
  uint64_t v4 = a2;
  return mlir::placement::RegionCall::verifySymbolUses((mlir::placement::RegionCall *)&v4, a3);
}

uint64_t mlir::TypeID::get<mlir::SymbolUserOpInterface>()
{
  unint64_t v0 = 0x1E8EB8000uLL;
  {
    unint64_t v0 = 0x1E8EB8000;
    if (v2)
    {
      __guard v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface]";
      unint64_t v11 = 77;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      unint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = 0x1E8EB8000;
    }
  }
  return *(void *)(v0 + 3880);
}

uint64_t mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumOperandAlignment()
{
  return 0x4000;
}

uint64_t mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumResultAlignment()
{
  return 0x4000;
}

float mlir::detail::ExecutionCostOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::placement::RegionCall::getExecutionCost(&v3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::ExecutionCostOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ExecutionCostOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>>()
{
  unint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    unint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v11 = 87;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    }
  }
  return v0[449];
}

uint64_t mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>>()
{
  unint64_t v0 = &unk_1E8EBA000;
  {
    unint64_t v0 = (void *)&unk_1E8EBA000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface::Trait<Empty>]";
      unint64_t v11 = 91;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = (void *)&unk_1E8EBA000;
    }
  }
  return v0[81];
}

uint64_t mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait>(void)::Empty>>()
{
  {
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MinimumAlignmentInterface::Trait<Empty>]";
      unint64_t v11 = 95;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::MinimumAlignmentInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
    }
  }
  return v0[29];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3))
  {
    return 0;
  }
  uint64_t v5 = a1;
  return mlir::placement::RegionCall::verifyInvariantsImpl((uint64_t **)&v5) != 0;
}

uint64_t mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  int v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::foldHook()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::placement::ReplacedOps::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::printAssembly(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x1E4F143B8];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(void *a1@<X8>)
{
  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  uint64_t v2 = malloc(0x80uLL);
  void *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isDeclaration;
  unint64_t v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  char v4 = malloc(0x48uLL);
  *char v4 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getCallableRegion;
  v4[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgumentTypes;
  v4[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResultTypes;
  unint64_t v4[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgAttrsAttr;
  v4[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResAttrsAttr;
  v4[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setArgAttrsAttr;
  v4[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setResAttrsAttr;
  v4[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeArgAttrsAttr;
  v4[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeResAttrsAttr;
  unint64_t v5 = mlir::TypeID::get<mlir::CallableOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);

  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>>((uint64_t)a1);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setNested(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPrivate(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPublic(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isDeclaration()
{
  return 0;
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
         + 32 * *(unsigned int *)(a2 + 40);
  else {
    return 0;
  }
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgumentTypes(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v3);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResultTypes(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v3);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::anec::A11Legacy::getArgAttrsAttr(&v3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::placement::ReplacedOps::getResAttrsAttr(&v3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **(void **)(*(void *)(a2 + 48) + 96));
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, *(void *)(*(void *)(*(void *)(a2 + 48) + 96) + 24));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>>(uint64_t a1)
{
  unint64_t v2 = malloc(0x38uLL);
  void *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyBody;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyType;
  v2[5] = 0;
  v2[6] = 0;
  unint64_t v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  unint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)a1 + 16 * v4;
  do
  {
    unint64_t v7 = v4 >> 1;
    __int16 v8 = &v5[2 * (v4 >> 1)];
    unint64_t v10 = *v8;
    char v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3) {
      unint64_t v5 = v9;
    }
    else {
      unint64_t v4 = v7;
    }
  }
  while (v4);
  if (v5 != (void *)v6 && *v5 == v3) {
    uint64_t v11 = v5[1];
  }
  else {
LABEL_9:
  }
    uint64_t v11 = 0;
  v2[5] = v11;
  unint64_t v12 = mlir::TypeID::get<mlir::CallableOpInterface>();
  unint64_t v13 = *(unsigned int *)(a1 + 8);
  if (!v13) {
    goto LABEL_18;
  }
  uint64_t v14 = *(void **)a1;
  uint64_t v15 = *(void *)a1 + 16 * v13;
  do
  {
    unint64_t v16 = v13 >> 1;
    uint64_t v17 = &v14[2 * (v13 >> 1)];
    unint64_t v19 = *v17;
    uint64_t v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12) {
      uint64_t v14 = v18;
    }
    else {
      unint64_t v13 = v16;
    }
  }
  while (v13);
  if (v14 != (void *)v15 && *v14 == v12) {
    uint64_t v20 = v14[1];
  }
  else {
LABEL_18:
  }
    uint64_t v20 = 0;
  v2[6] = v20;
  unint64_t v21 = mlir::TypeID::get<mlir::FunctionOpInterface>();

  mlir::detail::InterfaceMap::insert(a1, v21, v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::cloneTypeWith(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a2;
  uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v11);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::clone((mlir::Attribute *)&FunctionTypeAttr, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyBody(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::anec::A11Legacy>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyType()
{
  return 1;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, a3, a4, a5);
  uint64_t v10 = a2;
  uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v10);
  mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  uint64_t InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  uint64_t FunctionTypeAttr = *(void *)(*(void *)(*((void *)a2 + 6) + 96) + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
  mlir::function_interface_impl::printFunctionOp(a3, (uint64_t)a2, InterfaceFor, 0, AttrData, v9, **(void **)(*((void *)a2 + 6) + 96), *(void *)(*(void *)(*((void *)a2 + 6) + 96) + 24));
}

BOOL mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(uint64_t *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyOneRegion((mlir::OpTrait::impl *)a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults((mlir::OpTrait::impl *)a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    && mlir::OpTrait::impl::verifyZeroOperands((mlir::OpTrait::impl *)a1, v5)
    && (uint64_t v8 = a1, mlir::placement::ReplacedOps::verifyInvariantsImpl(&v8))
    && mlir::detail::verifySymbol((mlir::detail *)a1, v6))
  {
    return mlir::function_interface_impl::verifyTrait<mlir::placement::ReplacedOps>(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::function_interface_impl::verifyTrait<mlir::placement::ReplacedOps>(uint64_t *a1)
{
  v58[19] = *MEMORY[0x1E4F143B8];
  long long v51 = a1;
  uint64_t ArgAttrsAttr = mlir::anec::A11Legacy::getArgAttrsAttr((mlir::Operation **)&v51);
  if (ArgAttrsAttr)
  {
    uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr((mlir::Operation **)&v51);
    uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
    mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
    unsigned int v2 = v1;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    uint64_t v3 = v2;
    if (v4 != v2)
    {
      __int16 v49 = 257;
      mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr) {
        mlir::Diagnostic::operator<<((uint64_t)v54, "expects argument attribute array to have the same number of elements as the number of function arguments, got ");
      }
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
      if (!FunctionTypeAttr) {
        goto LABEL_59;
      }
      LODWORD(v52) = 5;
      *((void *)&v52 + 1) = v28;
      uint64_t v29 = (char *)&v52;
      unint64_t v30 = v55;
      if (v56 < v57) {
        goto LABEL_50;
      }
      unint64_t v31 = v56 + 1;
      if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52) {
        goto LABEL_81;
      }
      goto LABEL_82;
    }
    if (v2)
    {
      LODWORD(v5) = 0;
      while (1)
      {
        uint64_t v6 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
        uint64_t v5 = v5;
        if (!v6) {
          break;
        }
        if (*(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
          uint64_t v6 = 0;
        }
        uint64_t v47 = v6;
        if (!v6) {
          goto LABEL_65;
        }
        uint64_t Value = (long long *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
        uint64_t v8 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
        if (Value != (long long *)v8)
        {
          uint64_t v9 = (long long *)v8;
          do
          {
            long long v52 = *Value;
            uint64_t FunctionTypeAttr = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v52);
            uint64_t AttrData = (unsigned char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
            if (!v11 || (unint64_t v12 = AttrData, (v13 = (char *)memchr(AttrData, 46, v11)) == 0) || v13 - v12 == -1)
            {
              uint64_t v39 = "arguments may only have dialect attributes";
              goto LABEL_58;
            }
            uint64_t NameDialect = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
            if (NameDialect)
            {
              if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, void, void, void, void))(*(void *)NameDialect + 80))(NameDialect, v51, 0, v5, v52, *((void *)&v52 + 1)))return 0; {
            }
              }
            ++Value;
          }
          while (Value != v9);
        }
        LODWORD(v5) = v5 + 1;
        if (v5 == v2) {
          goto LABEL_19;
        }
      }
      uint64_t v47 = 0;
LABEL_65:
      __int16 v49 = 257;
      mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (!FunctionTypeAttr) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
  }
LABEL_19:
  uint64_t ArgAttrsAttr = mlir::placement::ReplacedOps::getResAttrsAttr((mlir::Operation **)&v51);
  if (!ArgAttrsAttr) {
    goto LABEL_37;
  }
  uint64_t FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr((mlir::Operation **)&v51);
  uint64_t FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
  unsigned int v16 = v15;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
  uint64_t v3 = v16;
  if (v17 != v16)
  {
    __int16 v49 = 257;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (FunctionTypeAttr) {
      mlir::Diagnostic::operator<<((uint64_t)v54, "expects result attribute array to have the same number of elements as the number of function results, got ");
    }
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    if (!FunctionTypeAttr) {
      goto LABEL_59;
    }
    LODWORD(v52) = 5;
    *((void *)&v52 + 1) = v32;
    uint64_t v29 = (char *)&v52;
    unint64_t v30 = v55;
    if (v56 < v57)
    {
LABEL_50:
      unint64_t v33 = v30 + 24 * v56;
      long long v34 = *(_OWORD *)v29;
      *(void *)(v33 + 16) = *((void *)v29 + 2);
      *(_OWORD *)unint64_t v33 = v34;
      ++v56;
      if (FunctionTypeAttr)
      {
        mlir::Diagnostic::operator<<((uint64_t)v54, ", but expected ");
        if (FunctionTypeAttr)
        {
          LODWORD(v52) = 5;
          *((void *)&v52 + 1) = v3;
          unint64_t v35 = (char *)&v52;
          unint64_t v36 = v55;
          if (v56 >= v57)
          {
            unint64_t v44 = v56 + 1;
            if (v55 <= (unint64_t)&v52 && v55 + 24 * v56 > (unint64_t)&v52)
            {
              uint64_t v46 = (char *)&v52 - v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              unint64_t v36 = v55;
              unint64_t v35 = &v46[v55];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              unint64_t v35 = (char *)&v52;
              unint64_t v36 = v55;
            }
          }
          unint64_t v37 = v36 + 24 * v56;
          long long v38 = *(_OWORD *)v35;
          *(void *)(v37 + 16) = *((void *)v35 + 2);
          *(_OWORD *)unint64_t v37 = v38;
          ++v56;
        }
      }
LABEL_59:
      uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
      }
LABEL_61:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v54);
      return v27;
    }
    unint64_t v31 = v56 + 1;
    if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52)
    {
LABEL_81:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
      uint64_t v29 = (char *)&v52;
      unint64_t v30 = v55;
      goto LABEL_50;
    }
LABEL_82:
    uint64_t v45 = (char *)&v52 - v30;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
    unint64_t v30 = v55;
    uint64_t v29 = &v45[v55];
    goto LABEL_50;
  }
  if (v16)
  {
    LODWORD(v5) = 0;
    while (1)
    {
      uint64_t v18 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
      uint64_t v5 = v5;
      if (!v18) {
        break;
      }
      if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
        uint64_t v18 = 0;
      }
      uint64_t v47 = v18;
      if (!v18) {
        goto LABEL_68;
      }
      unint64_t v19 = (long long *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
      uint64_t v20 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
      if (v19 != (long long *)v20)
      {
        unint64_t v21 = (long long *)v20;
        while (1)
        {
          long long v52 = *v19;
          uint64_t FunctionTypeAttr = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v52);
          uint64_t v22 = (unsigned char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
          if (!v23) {
            break;
          }
          int v24 = v22;
          float v25 = (char *)memchr(v22, 46, v23);
          if (!v25 || v25 - v24 == -1) {
            break;
          }
          uint64_t v26 = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
          if (v26
            && !(*(unsigned __int8 (**)(uint64_t, uint64_t *, void, void, void, void))(*(void *)v26 + 88))(v26, v51, 0, v5, v52, *((void *)&v52 + 1)))
          {
            return 0;
          }
          if (++v19 == v21) {
            goto LABEL_36;
          }
        }
        uint64_t v39 = "results may only have dialect attributes";
        goto LABEL_58;
      }
LABEL_36:
      LODWORD(v5) = v5 + 1;
      if (v5 == v16) {
        goto LABEL_37;
      }
    }
    uint64_t v47 = 0;
LABEL_68:
    __int16 v49 = 257;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (!FunctionTypeAttr) {
      goto LABEL_71;
    }
LABEL_70:
    mlir::Diagnostic::operator<<((uint64_t)v54, v41);
LABEL_71:
    *(void *)&long long v52 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
    uint64_t v42 = (void *)mlir::InFlightDiagnostic::append<mlir::Attribute>((uint64_t)&FunctionTypeAttr, (uint64_t *)&v52);
    uint64_t v43 = (uint64_t)v42;
    if (*v42) {
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v43);
    }
    if (FunctionTypeAttr) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
    }
    goto LABEL_61;
  }
LABEL_37:
  if ((*((_DWORD *)v51 + 11) & 0x7FFFFF) != 1)
  {
    uint64_t v39 = "expects one region";
LABEL_58:
    v48[0] = (const void **)v39;
    __int16 v49 = 259;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    goto LABEL_59;
  }
  return mlir::detail::FunctionOpInterfaceTrait<mlir::anec::A11Legacy>::verifyBody((mlir::Operation **)&v51);
}

BOOL mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  unsigned int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unsigned int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  unsigned int v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unsigned int v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::foldHook()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v4 & 4) != 0)
    {
      if ((v4 & 2) != 0) {
        unsigned int v1 = (llvm *)v3;
      }
      else {
        unsigned int v1 = v3[0];
      }
      (*(void (**)(llvm *))((v4 & 0xFFFFFFFFFFFFFFF8) + 16))(v1);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v3[0], v3[1]);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = (uint64_t **)v7;
      }
      else {
        uint64_t v5 = (uint64_t **)v7[0];
      }
      (*(void (**)(uint64_t **, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))(v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::placement::ReplacedOpsLiveOuts::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2, a3, a4, a5);
  char v8 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0) {
        uint64_t v9 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v10;
      }
      else {
        uint64_t v9 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v10[0];
      }
      (*(void (**)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))(v9, v5, v6, v7);
    }
    if ((v8 & 2) == 0) {
      llvm::deallocate_buffer(v10[0], v10[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x1E4F143B8];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::placement::ReplacedOpsLiveOuts::print(&v7, a3);
}

BOOL mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
}

uint64_t mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x1E4F143B8];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl>(void)::Empty>>()
{
  {
    if (v2)
    {
      char v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleT"
            "ype>::Impl<Empty>]";
      unint64_t v11 = 126;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
    }
  }
  return v0[43];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::placement::StartTimer::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  int v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  int v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    int v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::foldHook()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v1 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v5 & 4) != 0)
    {
      if ((v5 & 2) != 0) {
        int v2 = v4;
      }
      else {
        int v2 = (llvm **)v4[0];
      }
      (*(void (**)(void *, uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 16))(v2, v0);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v4[0], v4[1]);
  }
  return v1;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
      + 2;
  BOOL v6 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2);
  char v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0) {
        unint64_t v8 = v10;
      }
      else {
        unint64_t v8 = (llvm **)v10[0];
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, unsigned __int8))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v2, v3, v4, v5);
    }
    if ((v7 & 2) == 0) {
      llvm::deallocate_buffer(v10[0], v10[1]);
    }
  }
  return v6;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
     + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
    {
      if ((v9 & 2) != 0) {
        char v7 = v8;
      }
      else {
        char v7 = (llvm **)v8[0];
      }
      uint64_t result = (*(uint64_t (**)(llvm **))((v9 & 0xFFFFFFFFFFFFFFF8) + 16))(v7);
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x1E4F143B8];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::StopTimer>,mlir::OpTrait::ZeroResults<mlir::placement::StopTimer>,mlir::OpTrait::ZeroSuccessors<mlir::placement::StopTimer>,mlir::OpTrait::OneOperand<mlir::placement::StopTimer>,mlir::OpTrait::OpInvariants<mlir::placement::StopTimer>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::StopTimer>,mlir::OpTrait::ZeroResults<mlir::placement::StopTimer>,mlir::OpTrait::ZeroSuccessors<mlir::placement::StopTimer>,mlir::OpTrait::OneOperand<mlir::placement::StopTimer>,mlir::OpTrait::OpInvariants<mlir::placement::StopTimer>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::placement::__mlir_ods_local_type_constraint_PlacementOps6((uint64_t *)a1, *(void *)(*(void *)(*((void *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0) != 0;
}

uint64_t mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::Model(void *a1, uint64_t a2)
{
  v17[6] = *MEMORY[0x1E4F143B8];
  unsigned int v15 = v17;
  uint64_t v16 = 0x300000000;
  uint64_t v4 = malloc(8uLL);
  *uint64_t v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::getEffects;
  unint64_t v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  uint64_t v6 = malloc(0x18uLL);
  void *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::refineReturnTypes;
  void v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::isCompatibleReturnTypes;
  unint64_t v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  unint64_t v8 = malloc(8uLL);
  *unint64_t v8 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::isCompatibleReturnTypes;
  unint64_t v9 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"placement.tensor_to_memref", 26, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id, (uint64_t)&v15);
  uint64_t v10 = v15;
  if (v16)
  {
    uint64_t v11 = 16 * v16;
    uint64_t v12 = (void **)((char *)v15 + 8);
    do
    {
      unint64_t v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    uint64_t v10 = v15;
  }
  if (v10 != v17) {
    free(v10);
  }
  *a1 = &unk_1EC9C6810;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  v8[23] = *MEMORY[0x1E4F143B8];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
    }
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::placement::TensorToMemref::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::TensorToMemref>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::TensorToMemref>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v23[23] = *MEMORY[0x1E4F143B8];
  unint64_t v19 = v21;
  uint64_t v20 = 0x400000000;
  if (!mlir::placement::TensorToMemref::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v19))goto LABEL_8; {
  mlir::ValueRange::ValueRange(v18, (uint64_t)v19, v20);
  }
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  {
    uint64_t v13 = 1;
    goto LABEL_9;
  }
  v16[0] = "placement.tensor_to_memref";
  v16[1] = (char *)26;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v22);
    uint64_t v14 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v22, "'", v16, "' op inferred type(s) ", (uint64_t)&v19, " are incompatible with return type(s) of operation ", a11);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v22) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
  }
  else
  {
LABEL_8:
    uint64_t v13 = 0;
  }
LABEL_9:
  if (v19 != v21) {
    free(v19);
  }
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  __guard v10 = mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>();
  uint64_t v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  uint64_t v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::placement::TensorToMemref::verifyInvariantsImpl((uint64_t **)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::placement::TensorToMemref::verify(&v7) != 0;
}

BOOL mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t *mlir::Dialect::addAttribute<mlir::placement::RegionTypeAttr>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  float v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  unsigned int v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::placement::RegionTypeAttr,mlir::Attribute,mlir::placement::detail::RegionTypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement14RegionTypeAttrES2_NSD_6detail21RegionTypeAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  unint64_t v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement14RegionTypeAttrES2_NSC_6detail21RegionTypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  size_t v23 = &v12;
  int v24 = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  uint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    uint64_t v7 = (void **)((char *)v15 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, 0, v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::placement::RegionTypeAttr,mlir::Attribute,mlir::placement::detail::RegionTypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement14RegionTypeAttrES2_NSC_6detail21RegionTypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  unsigned int v7 = v2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  v8[1] = Context;
  return mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, &v7);
}

uint64_t *mlir::Dialect::addType<mlir::placement::TimerHandleType>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  float v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  unsigned int v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::placement::TimerHandleType,mlir::Type,mlir::placement::detail::TimerHandleTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement15TimerHandleTypeES2_NSD_6detail22TimerHandleTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  unint64_t v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement15TimerHandleTypeES2_NSC_6detail22TimerHandleTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  size_t v23 = &v12;
  int v24 = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  uint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    unsigned int v7 = (void **)((char *)v15 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, 0, v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::placement::TimerHandleType,mlir::Type,mlir::placement::detail::TimerHandleTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement15TimerHandleTypeES2_NSC_6detail22TimerHandleTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  unint64_t v2 = *(void *)(a2 + 8);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  unint64_t v7 = v2;
  uint64_t v9 = Context;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
  v8[1] = &v9;
  return mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, &v7);
}

uint64_t mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = a4;
  v17[0] = a2;
  v17[1] = a3;
  unsigned int v16 = *a5;
  unint64_t v6 = 0x1E8EB8000uLL;
  {
    char v13 = a1;
    unint64_t v6 = 0x1E8EB8000uLL;
    int v10 = v9;
    uint64_t v5 = a4;
    a1 = v13;
    if (v10)
    {
      unint64_t v11 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v11 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v11;
      unint64_t v6 = 0x1E8EB8000;
      uint64_t v5 = a4;
      a1 = v13;
    }
  }
  unint64_t v7 = 0x9DDFEA08EB382D69
     * (*(void *)(v6 + 3024) ^ v16 ^ ((0x9DDFEA08EB382D69 * (((8 * v16) | 4) ^ *(void *)(v6 + 3024) ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (((8 * v16) | 4) ^ *(void *)(v6 + 3024) ^ v16)));
  v14[0] = &v16;
  v14[1] = v17;
  unsigned int v15 = &v16;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895 * ((v7 >> 47) ^ v7), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_DWORD **a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::placement::detail::RegionTypeAttrStorage::construct(a2, *(int **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::placement::detail::RegionTypeAttrStorage::construct(uint64_t a1, int *a2)
{
  int v3 = *a2;
  *(void *)(a1 + 80) += 16;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 16 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t result = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = result + 16;
  *(void *)unint64_t result = 0;
  *(_DWORD *)(result + 8) = v3;
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5 = a4;
  v18[0] = a2;
  v18[1] = a3;
  unint64_t v17 = *a5;
  unint64_t v6 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a1;
    unint64_t v6 = 0x1E8EB8000uLL;
    int v11 = v10;
    uint64_t v5 = a4;
    a1 = v14;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      unint64_t v6 = 0x1E8EB8000;
      uint64_t v5 = a4;
      a1 = v14;
    }
  }
  unint64_t v7 = *(void *)(v6 + 3024) ^ HIDWORD(v17);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * v17 + 8) ^ v7);
  v15[0] = &v17;
  v15[1] = v18;
  unsigned int v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 32) >> 15) ^ (-348639895* (v7 ^ (v8 >> 47) ^ v8))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  int v3 = mlir::placement::detail::TimerHandleTypeStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *mlir::placement::detail::TimerHandleTypeStorage::construct(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)(a1 + 80) += 16;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 16 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t result = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    unint64_t result = (void *)((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a1 = result + 2;
  *unint64_t result = 0;
  result[1] = v3;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t mlir::AsmParser::parseInteger<unsigned long long>(uint64_t a1, uint64_t *a2)
{
  v10[23] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v5 = mlir::AsmParser::parseOptionalInteger<unsigned long long>(a1, a2);
  if ((unsigned __int16)v5 <= 0xFFu)
  {
    unint64_t v7 = "expected integer value";
    __int16 v8 = 259;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(&v9, a1, v4, &v7);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v9);
    if (v9) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v9);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v10);
  }
  return v5;
}

uint64_t mlir::AsmParser::parseOptionalInteger<unsigned long long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  unsigned int v19 = 1;
  uint64_t v18 = 0;
  unsigned __int16 v5 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 352))(a1, &v18);
  if (v5 >= 0x100u && v5 != 0)
  {
    llvm::APInt::sextOrTrunc((char *)&v18, 0x40u, (uint64_t)&__p);
    unsigned int v9 = v21[0];
    if (v21[0] < 0x41)
    {
      uint64_t v10 = (uint64_t)__p;
      *a2 = (uint64_t)__p;
      goto LABEL_14;
    }
    unsigned int v11 = v9 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
    unint64_t v12 = __p;
    if (v11 <= 0x40)
    {
      *a2 = *(void *)__p;
    }
    else
    {
      uint64_t v10 = -1;
      *a2 = -1;
      if (!v12)
      {
LABEL_14:
        v21[0] = v19;
        if (v19 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, v10, 0);
          if (v21[0] > 0x40)
          {
            BOOL v14 = llvm::APInt::equalSlowCase((const void **)&__p, (const void **)&v18);
            if (__p) {
              operator delete[](__p);
            }
            if (v14) {
              goto LABEL_21;
            }
            goto LABEL_25;
          }
        }
        else
        {
          if (v19) {
            unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
          }
          else {
            unint64_t v13 = 0;
          }
          std::string __p = (void *)(v13 & v10);
        }
        if (__p == v18)
        {
LABEL_21:
          unsigned __int8 v7 = 1;
LABEL_28:
          int v8 = 1;
          goto LABEL_29;
        }
LABEL_25:
        unsigned int v16 = "integer value too large";
        __int16 v17 = 259;
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(&__p, a1, v4, &v16);
        if (__p) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
        unsigned __int8 v7 = 0;
        goto LABEL_28;
      }
    }
    operator delete[](v12);
    uint64_t v10 = *a2;
    goto LABEL_14;
  }
  unsigned __int8 v7 = v5;
  int v8 = HIBYTE(v5);
LABEL_29:
  if (v19 >= 0x41 && v18) {
    operator delete[](v18);
  }
  return v7 | (v8 << 8);
}

uint64_t mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  unsigned int v11 = (llvm::raw_ostream *)result;
  if (a2 != a4 || a3 != a5)
  {
    uint64_t v12 = a2 + 32 * a3;
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 160))(a1, *(void *)(v12 + 24));
    if (a2 != a4 || a3 + 1 != a5)
    {
      uint64_t v13 = a5 - a3 - 2;
      BOOL v14 = (uint64_t *)(v12 + 56);
      do
      {
        uint64_t v15 = v13;
        unsigned int v16 = (_WORD *)*((void *)v11 + 4);
        if (*((void *)v11 + 3) - (void)v16 > 1uLL)
        {
          *unsigned int v16 = 8236;
          *((void *)v11 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v11, ", ", 2uLL);
        }
        uint64_t v17 = *v14;
        v14 += 4;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 160))(a1, v17);
        uint64_t v13 = v15 - 1;
      }
      while (a2 != a4 || v15);
    }
  }
  return result;
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::placement::ReplacedOps::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

void mlir::detail::PDLByteCodePattern::create(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v33[16] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a1;
  __int16 Benefit = mlir::pdl_interp::RecordMatchOp::getBenefit((mlir::pdl_interp::RecordMatchOp *)&v26);
  mlir::PatternBenefit::PatternBenefit(&v25, Benefit);
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(v26 + 24));
  __dst = v33;
  unint64_t v32 = 0x800000000;
  uint64_t InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v26);
  if (!InputAttributeNames) {
    goto LABEL_9;
  }
  uint64_t Value = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
  uint64_t v10 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
  uint64_t v12 = (char *)(v10 + 8 * v11);
  uint64_t v28 = v30;
  uint64_t v29 = 0x800000000;
  unint64_t v13 = v12 - Value;
  if ((unint64_t)(v12 - Value) < 0x41)
  {
    uint64_t v14 = 0;
    int v16 = 0;
    uint64_t v15 = v30;
    if (v12 == Value)
    {
LABEL_4:
      unint64_t v17 = v16 + (v13 >> 3);
      LODWORD(v29) = v16 + (v13 >> 3);
      if (v15 != v30) {
        goto LABEL_5;
      }
      goto LABEL_19;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, (uint64_t)v13 >> 3, 16);
    uint64_t v14 = v29;
    uint64_t v15 = v28;
    int v16 = v29;
    if (v12 == Value) {
      goto LABEL_4;
    }
  }
  unsigned int v19 = &v15[16 * v14];
  do
  {
    uint64_t v20 = *(void *)Value;
    Value += 8;
    uint64_t v27 = v20;
    *unsigned int v19 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v27);
    v19[1] = v21;
    v19 += 2;
  }
  while (Value != v12);
  uint64_t v15 = v28;
  unint64_t v17 = v29 + (v13 >> 3);
  LODWORD(v29) = v29 + (v13 >> 3);
  if (v28 != v30)
  {
LABEL_5:
    if (__dst != v33)
    {
      free(__dst);
      uint64_t v15 = v28;
      LODWORD(v17) = v29;
    }
    __dst = v15;
    unint64_t v32 = __PAIR64__(HIDWORD(v29), v17);
    uint64_t v28 = v30;
    uint64_t v29 = 0;
    goto LABEL_9;
  }
LABEL_19:
  uint64_t v22 = v32;
  if (v32 >= v17)
  {
    if (v17) {
      memmove(__dst, v30, 16 * v17);
    }
    goto LABEL_28;
  }
  if (HIDWORD(v32) < v17)
  {
    LODWORD(v32) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v33, v17, 16);
    uint64_t v22 = 0;
    uint64_t v23 = v29;
    if (!v29) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v32)
  {
    memmove(__dst, v30, 16 * v32);
    uint64_t v23 = v29;
    if (v22 == v29) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v22 = 0;
  uint64_t v23 = v29;
  if (v29) {
LABEL_27:
  }
    memcpy((char *)__dst + 16 * v22, &v28[16 * v22], 16 * v23 - 16 * v22);
LABEL_28:
  LODWORD(v32) = v17;
  LODWORD(v29) = 0;
  if (v28 != v30) {
    free(v28);
  }
LABEL_9:
  mlir::pdl_interp::RecordMatchOp::getRootKind((uint64_t)&v26, (uint64_t)&v28);
  if (v30[0])
  {
    mlir::Pattern::Pattern(a4, (uint64_t)v28, v29, v25, Context, __dst, v32);
    *(_DWORD *)(a4 + 88) = a3;
    *(void *)(a4 + 96) = a2;
    uint64_t v18 = __dst;
    if (__dst == v33) {
      return;
    }
    goto LABEL_11;
  }
  mlir::Pattern::Pattern(a4, v25, Context, __dst, v32);
  *(_DWORD *)(a4 + 88) = a3;
  *(void *)(a4 + 96) = a2;
  uint64_t v18 = __dst;
  if (__dst != v33) {
LABEL_11:
  }
    free(v18);
}

uint64_t mlir::detail::PDLByteCodeMutableState::updatePatternBenefit(uint64_t result, unsigned int a2, __int16 a3)
{
  *(_WORD *)(*(void *)(result + 168) + 2 * a2) = a3;
  return result;
}

void mlir::detail::PDLByteCodeMutableState::cleanupAfterMatchAndRewrite(mlir::detail::PDLByteCodeMutableState *this)
{
  uint64_t v2 = *((void *)this + 9);
  for (uint64_t i = *((void *)this + 10); i != v2; i -= 16)
  {
    unsigned __int16 v5 = *(void **)(i - 16);
    uint64_t v4 = v5;
    if (v5) {
      operator delete[](v4);
    }
  }
  *((void *)this + 10) = v2;
  uint64_t v6 = *((void *)this + 15);
  for (uint64_t j = *((void *)this + 16); j != v6; j -= 16)
  {
    unsigned int v9 = *(void **)(j - 16);
    int v8 = v9;
    if (v9) {
      operator delete[](v8);
    }
  }
  *((void *)this + 16) = v6;
}

void mlir::detail::PDLByteCode::PDLByteCode(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x600000000;
  if (*(_DWORD *)(a3 + 8)) {
    llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=(a1, a3);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 112;
  *(_OWORD *)(a1 + 96) = xmmword_181101A40;
  *(void *)(a1 + 240) = a1 + 264;
  *(_OWORD *)(a1 + 248) = xmmword_181101A40;
  *(void *)(a1 + 392) = a1 + 408;
  *(void *)(a1 + 400) = 0x2000000000;
  *(_OWORD *)(a1 + 3736) = 0u;
  *(_OWORD *)(a1 + 3752) = 0u;
  *(_OWORD *)(a1 + 3768) = 0u;
  *(_OWORD *)(a1 + 3778) = 0u;
  v38[0] = 0;
  v38[1] = 0;
  int v39 = 0;
  unsigned int v40 = 0;
  uint64_t v41 = 0;
  int v42 = 0;
  v43[0] = 0;
  v43[1] = 0;
  v43[2] = (void *)0x1000000000;
  v44[0] = 0;
  v44[1] = 0;
  unint64_t v44[2] = (void *)0x1000000000;
  v44[3] = 0;
  v44[4] = 0;
  v44[6] = 0;
  v44[7] = 0;
  v44[5] = (void *)0x1000000000;
  int v45 = 0;
  __int16 v46 = 0;
  int v50 = 0;
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 6));
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v51 = a1 + 64;
  uint64_t v52 = a1 + 88;
  uint64_t v53 = a1 + 240;
  uint64_t v54 = a1 + 392;
  uint64_t v55 = a1 + 3784;
  uint64_t v56 = a1 + 3786;
  uint64_t v57 = a1 + 3788;
  uint64_t v58 = a1 + 3790;
  uint64_t v59 = a1 + 3792;
  uint64_t v60 = a4;
  unsigned __int8 v7 = *(uint64_t **)a5;
  uint64_t v8 = *(unsigned int *)(a5 + 8);
  if (v8)
  {
    unsigned int v9 = *(uint64_t **)a5;
    uint64_t v10 = a6;
    if (*v7) {
      BOOL v11 = *v7 == -8;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      do
      {
        uint64_t v13 = v9[1];
        ++v9;
        uint64_t v12 = v13;
        if (v13) {
          BOOL v14 = v12 == -8;
        }
        else {
          BOOL v14 = 1;
        }
      }
      while (v14);
    }
    uint64_t v15 = &v7[v8];
    if (v9 == v15)
    {
LABEL_23:
      uint64_t v21 = *(uint64_t **)v10;
      uint64_t v22 = *(unsigned int *)(v10 + 8);
      if (v22)
      {
        uint64_t v23 = *(uint64_t **)v10;
        if (*v21) {
          BOOL v24 = *v21 == -8;
        }
        else {
          BOOL v24 = 1;
        }
        if (v24)
        {
          do
          {
            uint64_t v26 = v23[1];
            ++v23;
            uint64_t v25 = v26;
            if (v26) {
              BOOL v27 = v25 == -8;
            }
            else {
              BOOL v27 = 1;
            }
          }
          while (v27);
        }
        uint64_t v28 = &v21[v22];
        if (v23 == v28) {
LABEL_43:
        }
      }
      else
      {
        uint64_t v23 = *(uint64_t **)v10;
        uint64_t v28 = &v21[v22];
        if (v21 == v28) {
          goto LABEL_43;
        }
      }
      uint64_t v29 = 0;
      uint64_t v30 = *v23;
      do
      {
        unint64_t v31 = *(const unsigned __int8 **)v30;
        v61[0] = v29;
        llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<unsigned long>((uint64_t)v43, (int8x16_t *)(v30 + 40), v31, v61);
        do
        {
          uint64_t v32 = v23[1];
          ++v23;
          uint64_t v30 = v32;
          if (v32) {
            BOOL v33 = v30 == -8;
          }
          else {
            BOOL v33 = 1;
          }
        }
        while (v33);
        ++v29;
      }
      while (v23 != v28);
      goto LABEL_43;
    }
  }
  else
  {
    unsigned int v9 = *(uint64_t **)a5;
    uint64_t v10 = a6;
    uint64_t v15 = &v7[v8];
    if (v7 == v15) {
      goto LABEL_23;
    }
  }
  uint64_t v16 = 0;
  uint64_t v17 = *v9;
  do
  {
    uint64_t v18 = *(const unsigned __int8 **)v17;
    v61[0] = v16;
    llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<unsigned long>((uint64_t)v44, (int8x16_t *)(v17 + 40), v18, v61);
    do
    {
      uint64_t v19 = v9[1];
      ++v9;
      uint64_t v17 = v19;
      if (v19) {
        BOOL v20 = v17 == -8;
      }
      else {
        BOOL v20 = 1;
      }
    }
    while (v20);
    ++v16;
  }
  while (v9 != v15);
  goto LABEL_23;
}

void sub_1806C4E38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, llvm *a14, uint64_t a15, unsigned int a16)
{
}

uint64_t sub_1806C4E4C()
{
  return v0;
}

void anonymous namespace'::Generator::generate(uint64_t *a1, unsigned int *a2)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (mlir::Attribute *)(a2 + 6);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 6));
  LOWORD(v117) = 261;
  *(void *)&long long v115 = "matcher";
  *((void *)&v115 + 1) = 7;
  uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v115);
  uint64_t v7 = mlir::SymbolTable::lookupSymbolIn(a2, v6);
  if (v7)
  {
    if (*(_UNKNOWN **)(*(void *)(v7 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::FuncOp,void>::id) {
      uint64_t v8 = (unsigned int *)v7;
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  char v95 = v8;
  unsigned int v9 = (mlir::StringAttr *)mlir::Attribute::getContext(v4);
  LOWORD(v117) = 261;
  *(void *)&long long v115 = "rewriters";
  *((void *)&v115 + 1) = 9;
  uint64_t v10 = mlir::StringAttr::get(v9, (mlir::MLIRContext *)&v115);
  uint64_t v11 = mlir::SymbolTable::lookupSymbolIn(a2, v10);
  if (v11)
  {
    if (*(_UNKNOWN **)(*(void *)(v11 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  mlir::Region::getOps<mlir::pdl_interp::FuncOp>((mlir::Region *)(((v12+ 64+ 16 * (((unint64_t)*(unsigned int *)(v12 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v12 + 44) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v12 + 40)), (uint64_t)&v115);
  long long v105 = v115;
  *(_OWORD *)uint64_t v106 = v116;
  long long v107 = v117;
  long long v108 = v118;
  uint64_t v13 = (mlir::GenericProgramPoint *)v116;
  uint64_t v93 = v119;
  uint64_t v94 = a1;
  if ((mlir::GenericProgramPoint *)v116 == v119) {
    goto LABEL_119;
  }
  while (1)
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v13);
    BOOL v14 = (unsigned int *)(*((uint64_t (**)(void))&v108 + 1))();
    v103[0] = (llvm *)v14;
    LOWORD(v101[0]) = 0;
    LOWORD(v98[0]) = 0;
    LOWORD(v125) = 0;
    char v121 = a1;
    uint64_t v122 = v101;
    uint64_t v123 = v98;
    uint64_t v124 = &v125;
    unint64_t v15 = v14[11];
    if ((v15 & 0x7FFFFF) != 0)
    {
      uint64_t v16 = (void *)((((unint64_t)&v14[4 * ((v15 >> 23) & 1) + 17] + ((v15 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * v14[10]);
      if ((void *)*v16 != v16) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if (MEMORY[0])
      {
LABEL_18:
        uint64_t v17 = v16[1];
        if (v17) {
          uint64_t v18 = v17 - 8;
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = *(unint64_t **)(v18 + 48);
        BOOL v20 = *(unint64_t **)(v18 + 56);
        if (v20 == v19) {
          goto LABEL_22;
        }
        while (2)
        {
          unint64_t v29 = *v19;
          unint64_t v112 = *v19;
          uint64_t v30 = (uint64_t)v121;
          __int16 v31 = (*(_WORD *)v122)++;
          int v32 = *(_DWORD *)(v30 + 16);
          if (!v32)
          {
            unsigned int v45 = 0;
            goto LABEL_87;
          }
          uint64_t v33 = *(void *)v30;
          {
            unint64_t v77 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v77 = 0xFF51AFD7ED558CCDLL;
            }
            llvm::hashing::detail::get_execution_seed(void)::seed = v77;
          }
          unint64_t v34 = 0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v29) ^ HIDWORD(v29));
          unint64_t v35 = 0x9DDFEA08EB382D69 * (HIDWORD(v29) ^ (v34 >> 47) ^ v34);
          int v36 = -348639895 * ((v35 >> 47) ^ v35);
          unint64_t v37 = v112;
          unsigned int v38 = v36 & (v32 - 1);
          int v39 = (llvm *)(v33 + 16 * v38);
          uint64_t v40 = *(void *)v39;
          if (v112 != *(void *)v39)
          {
            uint64_t v41 = 0;
            int v42 = 1;
            while (v40 != -4096)
            {
              if (v41) {
                BOOL v43 = 0;
              }
              else {
                BOOL v43 = v40 == -8192;
              }
              if (v43) {
                uint64_t v41 = v39;
              }
              unsigned int v44 = v38 + v42++;
              unsigned int v38 = v44 & (v32 - 1);
              int v39 = (llvm *)(v33 + 16 * v38);
              uint64_t v40 = *(void *)v39;
              if (v112 == *(void *)v39) {
                goto LABEL_50;
              }
            }
            if (v41) {
              uint64_t v73 = v41;
            }
            else {
              uint64_t v73 = v39;
            }
            unsigned int v45 = *(_DWORD *)(v30 + 16);
            int v74 = *(_DWORD *)(v30 + 8);
            if (4 * v74 + 4 >= 3 * v45)
            {
LABEL_87:
              v45 *= 2;
LABEL_88:
              llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow(v30, v45);
              uint64_t v120 = 0;
              llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)v30, &v112, &v120);
              uint64_t v73 = v120;
              ++*(_DWORD *)(v30 + 8);
              if (*(void *)v73 == -4096) {
                goto LABEL_49;
              }
LABEL_48:
              --*(_DWORD *)(v30 + 12);
              goto LABEL_49;
            }
            if (v45 + ~v74 - *(_DWORD *)(v30 + 12) <= v45 >> 3) {
              goto LABEL_88;
            }
            ++*(_DWORD *)(v30 + 8);
            if (*(void *)v73 != -4096) {
              goto LABEL_48;
            }
LABEL_49:
            *(void *)uint64_t v73 = v112;
            *((_WORD *)v73 + 4) = v31;
            unint64_t v37 = v112;
          }
LABEL_50:
          unint64_t v46 = *(void *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (*(_UNKNOWN **)(*(void *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id) {
            unint64_t v46 = 0;
          }
          unint64_t v96 = v46;
          if (!v46) {
            goto LABEL_32;
          }
          uint64_t v47 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v96) + 136);
          if (v47 != &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
          {
            if (v47 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
              goto LABEL_32;
            }
            uint64_t v48 = (uint64_t *)(v30 + 24);
            uint64_t v49 = *(void *)(v30 + 24);
            __int16 v50 = (*(_WORD *)v124)++;
            int v51 = *(_DWORD *)(v30 + 40);
            if (v51)
            {
              unint64_t v52 = v112;
              {
                unint64_t v79 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v79 = 0xFF51AFD7ED558CCDLL;
                }
                llvm::hashing::detail::get_execution_seed(void)::seed = v79;
              }
              unint64_t v53 = 0x9DDFEA08EB382D69
                  * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v52) ^ HIDWORD(v52));
              unint64_t v54 = 0x9DDFEA08EB382D69 * (HIDWORD(v52) ^ (v53 >> 47) ^ v53);
              unsigned int v55 = (-348639895 * ((v54 >> 47) ^ v54)) & (v51 - 1);
              uint64_t v56 = (llvm *)(v49 + 16 * v55);
              uint64_t v57 = *(void *)v56;
              if (v112 != *(void *)v56)
              {
                uint64_t v58 = 0;
                int v59 = 1;
                while (v57 != -4096)
                {
                  if (v58) {
                    BOOL v60 = 0;
                  }
                  else {
                    BOOL v60 = v57 == -8192;
                  }
                  if (v60) {
                    uint64_t v58 = v56;
                  }
                  unsigned int v61 = v55 + v59++;
                  unsigned int v55 = v61 & (v51 - 1);
                  uint64_t v56 = (llvm *)(v49 + 16 * v55);
                  uint64_t v57 = *(void *)v56;
                  if (v112 == *(void *)v56) {
                    goto LABEL_32;
                  }
                }
                goto LABEL_90;
              }
LABEL_32:
              if (++v19 == v20) {
                goto LABEL_22;
              }
              continue;
            }
LABEL_79:
            unsigned int v72 = 0;
            goto LABEL_94;
          }
          break;
        }
        uint64_t v48 = (uint64_t *)(v30 + 24);
        uint64_t v62 = *(void *)(v30 + 24);
        __int16 v50 = (*(_WORD *)v123)++;
        int v63 = *(_DWORD *)(v30 + 40);
        if (!v63) {
          goto LABEL_79;
        }
        unint64_t v64 = v112;
        {
          unint64_t v78 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override) {
            unint64_t v78 = 0xFF51AFD7ED558CCDLL;
          }
          llvm::hashing::detail::get_execution_seed(void)::seed = v78;
        }
        unint64_t v65 = 0x9DDFEA08EB382D69
            * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v64) ^ HIDWORD(v64));
        unint64_t v66 = 0x9DDFEA08EB382D69 * (HIDWORD(v64) ^ (v65 >> 47) ^ v65);
        unsigned int v67 = (-348639895 * ((v66 >> 47) ^ v66)) & (v63 - 1);
        uint64_t v56 = (llvm *)(v62 + 16 * v67);
        uint64_t v68 = *(void *)v56;
        if (v112 == *(void *)v56) {
          goto LABEL_32;
        }
        uint64_t v58 = 0;
        int v69 = 1;
        while (v68 != -4096)
        {
          if (v58) {
            BOOL v70 = 0;
          }
          else {
            BOOL v70 = v68 == -8192;
          }
          if (v70) {
            uint64_t v58 = v56;
          }
          unsigned int v71 = v67 + v69++;
          unsigned int v67 = v71 & (v63 - 1);
          uint64_t v56 = (llvm *)(v62 + 16 * v67);
          uint64_t v68 = *(void *)v56;
          if (v112 == *(void *)v56) {
            goto LABEL_32;
          }
        }
LABEL_90:
        if (v58) {
          unint64_t v75 = v58;
        }
        else {
          unint64_t v75 = v56;
        }
        unsigned int v72 = *(_DWORD *)(v30 + 40);
        int v76 = *(_DWORD *)(v30 + 32);
        if (4 * v76 + 4 < 3 * v72)
        {
          if (v72 + ~v76 - *(_DWORD *)(v30 + 36) <= v72 >> 3) {
            goto LABEL_95;
          }
          ++*(_DWORD *)(v30 + 32);
          if (*(void *)v75 == -4096)
          {
LABEL_31:
            *(void *)unint64_t v75 = v112;
            *((_WORD *)v75 + 4) = v50;
            goto LABEL_32;
          }
        }
        else
        {
LABEL_94:
          v72 *= 2;
LABEL_95:
          llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow((uint64_t)v48, v72);
          uint64_t v120 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v48, &v112, &v120);
          unint64_t v75 = v120;
          ++*(_DWORD *)(v30 + 32);
          if (*(void *)v75 == -4096) {
            goto LABEL_31;
          }
        }
        --*(_DWORD *)(v30 + 36);
        goto LABEL_31;
      }
    }
LABEL_22:
    unint64_t Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)v103);
    uint64_t v120 = (llvm *)&v121;
    uint64_t v22 = *(void *)(Body + 8);
    a1 = v94;
    if (v22 != Body)
    {
      unint64_t v23 = Body;
      do
      {
        uint64_t v24 = v22 - 8;
        if (!v22) {
          uint64_t v24 = 0;
        }
        uint64_t v25 = (mlir::GenericProgramPoint *)(v24 + 32);
        uint64_t v26 = *(mlir::GenericProgramPoint **)(v24 + 40);
        if (v26 != (mlir::GenericProgramPoint *)(v24 + 32))
        {
          do
          {
            BOOL v27 = (mlir::GenericProgramPoint *)*((void *)v26 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v26);
            uint64_t v26 = v27;
          }
          while (v27 != v25);
        }
        uint64_t v22 = *(void *)(v22 + 8);
      }
      while (v22 != v23);
    }
    unint64_t v80 = (_WORD *)v94[27];
    if (LOWORD(v101[0]) <= (unsigned __int16)*v80)
    {
      __int16 v81 = (__int16)v98[0];
      unint64_t v82 = (_WORD *)v94[29];
      if (LOWORD(v98[0]) <= (unsigned __int16)*v82)
      {
LABEL_111:
        __int16 v83 = v125;
        int64_t v84 = (_WORD *)v94[30];
        if ((unsigned __int16)v125 <= (unsigned __int16)*v84) {
          goto LABEL_113;
        }
LABEL_112:
        *int64_t v84 = v83;
        goto LABEL_113;
      }
    }
    else
    {
      _WORD *v80 = v101[0];
      __int16 v81 = (__int16)v98[0];
      unint64_t v82 = (_WORD *)v94[29];
      if (LOWORD(v98[0]) <= (unsigned __int16)*v82) {
        goto LABEL_111;
      }
    }
    *unint64_t v82 = v81;
    __int16 v83 = v125;
    int64_t v84 = (_WORD *)v94[30];
    if ((unsigned __int16)v125 > (unsigned __int16)*v84) {
      goto LABEL_112;
    }
    do
    {
LABEL_113:
      mlir::Region::OpIterator::operator++((uint64_t *)&v105);
      uint64_t v13 = v106[0];
      if (v106[0] == *((mlir::GenericProgramPoint **)&v107 + 1)) {
        goto LABEL_13;
      }
      __int16 v85 = (unsigned int (*)(void))v108;
      mlir::GenericProgramPoint::~GenericProgramPoint(v106[0]);
    }
    while (!v85());
    uint64_t v13 = v106[0];
LABEL_13:
    if (v13 == v93)
    {
LABEL_119:
      v103[0] = 0;
      v103[1] = 0;
      int v104 = 0;
      v101[0] = 0;
      v101[1] = 0;
      int v102 = 0;
      int v100 = 0;
      unsigned int v114 = 0;
      buffer = (uint64_t *)llvm::allocate_buffer(0x20uLL, (std::align_val_t)8uLL);
      long long v113 = xmmword_18110D880;
      uint64_t *buffer = (uint64_t)v103;
      buffer[1] = (uint64_t)&v100;
      buffer[2] = (uint64_t)&v112;
      buffer[3] = (uint64_t)v101;
      unint64_t v112 = (unint64_t)buffer;
      uint64_t v109 = v111;
      uint64_t v110 = 0;
      v111[0] = 0;
      v111[1] = 1;
      uint64_t v87 = v95[10];
      unint64_t v88 = (unint64_t)&v95[4 * (((unint64_t)v95[11] >> 23) & 1)]
          + (((unint64_t)v95[11] >> 21) & 0x7F8);
      long long v105 = 0uLL;
      v106[0] = 0;
      v106[1] = (mlir::GenericProgramPoint *)((char *)&v107 + 8);
      *(void *)&long long v107 = 0x400000000;
      v98[0] = 0;
      v98[1] = 0;
      int v99 = 0;
      uint64_t v89 = *(void *)(((v88 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v87 + 8);
      if (v89) {
        uint64_t v90 = v89 - 8;
      }
      else {
        uint64_t v90 = 0;
      }
      unint64_t v97 = **(void **)(v90 + 48);
      *(void *)&long long v115 = 0;
      char v91 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(a1, &v97, &v115);
      BOOL v92 = (void *)v115;
      if ((v91 & 1) == 0)
      {
        BOOL v92 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a1, (uint64_t)&v97, &v97, (void *)v115);
        *BOOL v92 = v97;
        *((_WORD *)v92 + 4) = 0;
      }
      *((_WORD *)v92 + 4) = 0;
      mlir::Liveness::Liveness((mlir::Liveness *)&v96, (mlir::Operation *)v95);
    }
  }
}

void mlir::detail::PDLByteCode::initializeMutableState(mlir::detail::PDLByteCode *this, mlir::detail::PDLByteCodeMutableState *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *((unsigned __int16 *)this + 1892);
  *(void *)&long long __x = 0;
  unint64_t v5 = (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3;
  if (v4 <= v5)
  {
    if (v4 < v5) {
      *((void *)a2 + 1) = *(void *)a2 + 8 * v4;
    }
  }
  else
  {
    std::vector<void const*>::__append((unint64_t *)a2, v4 - v5, (const double *)&__x);
  }
  uint64_t v6 = *((void *)a2 + 3);
  uint64_t v7 = *((void *)a2 + 4);
  unint64_t v8 = *((unsigned __int16 *)this + 1893);
  unint64_t v9 = (v7 - v6) >> 4;
  if (v8 <= v9)
  {
    if (v8 < v9)
    {
      uint64_t v10 = v6 + 16 * v8;
      while (v7 != v10)
      {
        uint64_t v12 = *(void **)(v7 - 16);
        v7 -= 16;
        uint64_t v11 = v12;
        if (v12) {
          operator delete[](v11);
        }
      }
      *((void *)a2 + 4) = v10;
    }
  }
  else
  {
    std::vector<llvm::OwningArrayRef<mlir::Operation *>>::__append((char **)a2 + 3, v8 - v9);
  }
  unint64_t v13 = *((unsigned __int16 *)this + 1894);
  mlir::ValueRange::ValueRange((unint64_t *)&__x, 0, 0);
  uint64_t v14 = *((void *)a2 + 6);
  unint64_t v15 = (*((void *)a2 + 7) - v14) >> 4;
  if (v13 <= v15)
  {
    if (v13 < v15) {
      *((void *)a2 + 7) = v14 + 16 * v13;
    }
  }
  else
  {
    std::vector<mlir::TypeRange>::__append((char **)a2 + 6, v13 - v15, &__x);
  }
  unint64_t v16 = *((unsigned __int16 *)this + 1895);
  mlir::ValueRange::ValueRange((unint64_t *)&__x, 0, 0);
  uint64_t v17 = *((void *)a2 + 12);
  unint64_t v18 = (*((void *)a2 + 13) - v17) >> 4;
  if (v16 <= v18)
  {
    if (v16 < v18) {
      *((void *)a2 + 13) = v17 + 16 * v16;
    }
  }
  else
  {
    std::vector<mlir::TypeRange>::__append((char **)a2 + 12, v16 - v18, &__x);
  }
  uint64_t v19 = *((void *)a2 + 18);
  uint64_t v20 = *((void *)a2 + 19);
  unint64_t v21 = *((unsigned __int16 *)this + 1896);
  LODWORD(__x) = 0;
  unint64_t v22 = (v20 - v19) >> 2;
  if (v21 <= v22)
  {
    if (v21 < v22) {
      *((void *)a2 + 19) = v19 + 4 * v21;
    }
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)a2 + 6, v21 - v22, (std::vector<unsigned int>::const_reference)&__x);
  }
  unint64_t v23 = *((unsigned int *)this + 100);
  uint64_t v24 = (unsigned char *)*((void *)a2 + 21);
  if (v23 > (uint64_t)(*((void *)a2 + 23) - (void)v24) >> 1)
  {
    uint64_t v25 = (unsigned char *)*((void *)a2 + 22);
    uint64_t v26 = (char *)operator new(2 * v23);
    uint64_t v27 = v25 - v24;
    uint64_t v28 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFELL];
    unint64_t v29 = v28;
    if (v25 == v24) {
      goto LABEL_34;
    }
    if ((unint64_t)(v27 - 2) >= 0x1E)
    {
      unint64_t v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFELL];
      if ((unint64_t)(&v25[-(v27 & 0xFFFFFFFFFFFFFFFELL)] - v26) >= 0x20)
      {
        uint64_t v30 = v27 >> 1;
        unint64_t v31 = ((unint64_t)(v27 - 2) >> 1) + 1;
        unint64_t v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
        uint64_t v33 = &v25[-v32];
        unint64_t v29 = &v28[-v32];
        unint64_t v34 = &v26[2 * v30 - 16];
        unint64_t v35 = (long long *)(v25 - 16);
        unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)unint64_t v34 = v37;
          v34 -= 32;
          v35 -= 2;
          v36 -= 16;
        }
        while (v36);
        uint64_t v25 = v33;
        if (v31 == (v31 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_34:
          *((void *)a2 + 21) = v29;
          *((void *)a2 + 22) = v28;
          *((void *)a2 + 23) = &v26[2 * v23];
          if (v24)
          {
            operator delete(v24);
            LODWORD(v23) = *((_DWORD *)this + 100);
          }
          goto LABEL_36;
        }
      }
    }
    else
    {
      unint64_t v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFELL];
    }
    do
    {
      __int16 v38 = *((_WORD *)v25 - 1);
      v25 -= 2;
      *((_WORD *)v29 - 1) = v38;
      v29 -= 2;
    }
    while (v25 != v24);
    goto LABEL_34;
  }
LABEL_36:
  if (v23)
  {
    uint64_t v39 = *((void *)this + 49);
    uint64_t v40 = v39 + 104 * v23;
    uint64_t v41 = (char *)*((void *)a2 + 22);
    while (1)
    {
      __int16 v43 = *(_WORD *)(v39 + 12);
      unint64_t v44 = *((void *)a2 + 23);
      if ((unint64_t)v41 >= v44) {
        break;
      }
      *(_WORD *)uint64_t v41 = v43;
      uint64_t v42 = (uint64_t)(v41 + 2);
LABEL_39:
      *((void *)a2 + 22) = v42;
      v39 += 104;
      uint64_t v41 = (char *)v42;
      if (v39 == v40) {
        return;
      }
    }
    unsigned int v45 = (char *)*((void *)a2 + 21);
    uint64_t v46 = v41 - v45;
    if (v41 - v45 <= -3) {
      abort();
    }
    uint64_t v47 = v46 >> 1;
    unint64_t v48 = v44 - (void)v45;
    if (v48 <= (v46 >> 1) + 1) {
      unint64_t v49 = v47 + 1;
    }
    else {
      unint64_t v49 = v48;
    }
    if (v48 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v50 = v49;
    }
    if (v50)
    {
      if (v50 < 0) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v51 = operator new(2 * v50);
      unint64_t v52 = &v51[2 * v47];
      _WORD *v52 = v43;
      uint64_t v42 = (uint64_t)(v52 + 1);
      if (v41 == v45) {
        goto LABEL_56;
      }
    }
    else
    {
      int v51 = 0;
      unint64_t v52 = (_WORD *)(2 * v47);
      *(_WORD *)(2 * v47) = v43;
      uint64_t v42 = 2 * v47 + 2;
      if (v41 == v45) {
        goto LABEL_56;
      }
    }
    unint64_t v53 = v41 - 2 - v45;
    if (v53 >= 0x5E)
    {
      if (&v51[(v46 & 0xFFFFFFFFFFFFFFFELL) - 2 - (v53 & 0xFFFFFFFFFFFFFFFELL)] > &v51[(v46 & 0xFFFFFFFFFFFFFFFELL) - 2])
      {
        unint64_t v54 = v41;
      }
      else if (&v41[-(v53 & 0xFFFFFFFFFFFFFFFELL) - 2] > v41 - 2)
      {
        unint64_t v54 = v41;
      }
      else if (v41 - v51 - (v46 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
      {
        uint64_t v56 = (v53 >> 1) + 1;
        unint64_t v57 = 2 * (v56 & 0xFFFFFFFFFFFFFFF0);
        unint64_t v54 = &v41[-v57];
        unint64_t v52 = (_WORD *)((char *)v52 - v57);
        uint64_t v58 = &v51[2 * v47 - 16];
        int v59 = v41 - 16;
        unint64_t v60 = v56 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v61 = *(_OWORD *)v59;
          *(v58 - 1) = *((_OWORD *)v59 - 1);
          *uint64_t v58 = v61;
          v58 -= 2;
          v59 -= 32;
          v60 -= 16;
        }
        while (v60);
        if (v56 == (v56 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_56;
        }
      }
      else
      {
        unint64_t v54 = v41;
      }
    }
    else
    {
      unint64_t v54 = v41;
    }
    do
    {
      __int16 v55 = *((_WORD *)v54 - 1);
      v54 -= 2;
      *--unint64_t v52 = v55;
    }
    while (v54 != v45);
LABEL_56:
    *((void *)a2 + 21) = v52;
    *((void *)a2 + 22) = v42;
    *((void *)a2 + 23) = &v51[2 * v50];
    if (v45) {
      operator delete(v45);
    }
    goto LABEL_39;
  }
}

void mlir::detail::PDLByteCode::match(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v41[30] = *MEMORY[0x1E4F143B8];
  **(void **)a5 = a2;
  uint64_t v6 = *(void **)a5;
  uint64_t v7 = (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3;
  uint64_t v8 = *(void *)(a5 + 24);
  uint64_t v9 = (*(void *)(a5 + 32) - v8) >> 4;
  uint64_t v10 = *(void *)(a5 + 48);
  uint64_t v11 = (*(void *)(a5 + 56) - v10) >> 4;
  uint64_t v12 = a5 + 72;
  uint64_t v13 = *(void *)(a5 + 96);
  uint64_t v14 = (*(void *)(a5 + 104) - v13) >> 4;
  uint64_t v15 = a5 + 120;
  uint64_t v16 = *(void *)(a5 + 144);
  uint64_t v17 = (*(void *)(a5 + 152) - v16) >> 2;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = (*(void *)(a1 + 72) - v18) >> 3;
  uint64_t v20 = *(unsigned __int16 **)(a1 + 88);
  uint64_t v21 = *(void *)(a1 + 96);
  uint64_t v22 = *(void *)(a5 + 168);
  uint64_t v23 = (*(void *)(a5 + 176) - v22) >> 1;
  uint64_t v24 = *(void *)(a1 + 392);
  uint64_t v25 = *(unsigned int *)(a1 + 400);
  uint64_t v26 = *(void *)(a1 + 3736);
  uint64_t v27 = (*(void *)(a1 + 3744) - v26) >> 5;
  uint64_t v28 = *(void *)(a1 + 3760);
  uint64_t v29 = (*(void *)(a1 + 3768) - v28) >> 5;
  __int16 v38 = v20;
  uint64_t v39 = v41;
  uint64_t v40 = 0x600000000;
  v41[6] = v6;
  v41[7] = v7;
  v41[8] = v8;
  v41[9] = v9;
  v41[10] = v10;
  v41[11] = v11;
  v41[12] = v12;
  v41[13] = v13;
  v41[14] = v14;
  v41[15] = v15;
  v41[16] = v16;
  v41[17] = v17;
  v41[18] = v18;
  v41[19] = v19;
  v41[20] = v20;
  v41[21] = v21;
  v41[22] = v22;
  v41[23] = v23;
  void v41[24] = v24;
  v41[25] = v25;
  v41[26] = v26;
  v41[27] = v27;
  v41[28] = v28;
  v41[29] = v29;
  uint64_t v30 = *(void *)a4;
  unint64_t v31 = *(unsigned int *)(a4 + 8);
  if (!v31)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v30, (void *)(v30 + 120 * v31), v31, 0, 0);
    unint64_t v36 = v39;
    if (v39 == v41) {
      return;
    }
    goto LABEL_6;
  }
  unint64_t v32 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  unint64_t v33 = v31;
  while (1)
  {
    unint64_t v34 = operator new(120 * v33, v32);
    if (v34) {
      break;
    }
    BOOL v35 = v33 > 1;
    v33 >>= 1;
    if (!v35) {
      goto LABEL_5;
    }
  }
  long long v37 = v34;
  std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v30, (void *)(v30 + 120 * v31), v31, v34, v33);
  operator delete(v37);
  unint64_t v36 = v39;
  if (v39 != v41) {
LABEL_6:
  }
    free(v36);
}

uint64_t anonymous namespace'::ByteCodeExecutor::execute(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v455 = *MEMORY[0x1E4F143B8];
  unsigned int v434 = a1 + 9;
  uint64_t v6 = a1 + 21;
  uint64_t v427 = (uint64_t)(a1 + 1);
  v426 = a1 + 3;
  unsigned int v431 = (mlir::OpBuilder *)(a2 + 8);
  unsigned int v428 = a1 + 23;
  unint64_t v433 = a1 + 21;
  while (1)
  {
    uint64_t v14 = *a1;
    uint64_t v16 = *a1 + 1;
    int v15 = **a1;
    *a1 = v16;
    uint64_t result = 1;
    switch(v15)
    {
      case 0:
        *a1 = v14 + 2;
        unint64_t v4 = v14[1];
        uint64_t v110 = a1[29];
        __src[0] = &v436;
        __src[1] = (void *)0x1000000000;
        int v111 = *(*a1)++;
        __p[0] = __src[0];
        __p[1] = (void *)LODWORD(__src[1]);
        uint64_t v112 = *(void *)&v110[16 * v4 + 12];
        if (!v112) {
          goto LABEL_533;
        }
        long long v113 = &(*a1)[2
                    * (v111 == ((*(unsigned __int8 (**)(uint64_t, uint64_t, void **))(*(void *)v112 + 48))(v112, a2, __p) != 0))];
        *a1 = v113;
        *a1 = &a1[23][*(unsigned int *)v113];
        unsigned int v114 = __src[0];
        if (__src[0] != &v436) {
          goto LABEL_92;
        }
        continue;
      case 1:
        *a1 = v14 + 2;
        unint64_t v4 = v14[1];
        long long v115 = a1[31];
        __p[0] = v453;
        __p[1] = (void *)0x1000000000;
        unint64_t v116 = *(*a1)++;
        __src[0] = &v436;
        __src[1] = (void *)0x300000000;
        v438 = v440;
        uint64_t v439 = 0x300000000;
        v442 = v444;
        uint64_t v443 = 0x300000000;
        v445 = v447;
        uint64_t v446 = 0x300000000;
        v449 = &v451;
        uint64_t v450 = 0x300000000;
        if (v116 >= 4)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v438, v440, v116, 16);
          if (HIDWORD(v443) < v116) {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v442, v444, v116, 16);
          }
        }
        *(void **)&long long v454 = __p[0];
        *((void *)&v454 + 1) = LODWORD(__p[1]);
        uint64_t v338 = *(void *)&v115[16 * v4 + 12];
        if (!v338) {
LABEL_533:
        }
          std::__throw_bad_function_call[abi:nn180100]();
        char v339 = (*(uint64_t (**)(uint64_t, uint64_t, void **, long long *))(*(void *)v338 + 48))(v338, a2, __src, &v454);
        if (!LODWORD(__src[1])) {
          goto LABEL_327;
        }
        unint64_t v340 = (long long **)__src[0];
        uint64_t v341 = 16 * LODWORD(__src[1]);
        do
        {
          int v348 = *((_DWORD *)v340 + 2);
          if (v348 == 5)
          {
            v342 = a1[16];
            uint64_t v343 = 8 * **a1;
            long long v344 = **v340;
            ++*a1;
            *(_OWORD *)&v342[v343] = v344;
            uint64_t v345 = a1[16];
LABEL_321:
            v346 = &v345[v343];
            goto LABEL_322;
          }
          if (v348 == 3)
          {
            unsigned int v349 = a1[13];
            uint64_t v343 = 8 * **a1;
            long long v350 = **v340;
            ++*a1;
            *(_OWORD *)&v349[v343] = v350;
            uint64_t v345 = a1[13];
            goto LABEL_321;
          }
          v346 = (unsigned __int16 *)*v340;
LABEL_322:
          uint64_t v347 = *(*a1)++;
          *(void *)&a1[9][4 * v347] = v346;
          v340 += 2;
          v341 -= 16;
        }
        while (v341);
LABEL_327:
        if (v446)
        {
          unint64_t v4 = (unint64_t)v445;
          uint64_t v351 = 16 * v446;
          do
          {
            while (1)
            {
              v352 = a1[15];
              v353 = (void *)*((void *)v352 + 1);
              if ((unint64_t)v353 < *((void *)v352 + 2)) {
                break;
              }
              *((void *)v352 + 1) = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)a1[15], v4);
              v4 += 16;
              v351 -= 16;
              if (!v351) {
                goto LABEL_332;
              }
            }
            void *v353 = 0;
            v353[1] = 0;
            *(_OWORD *)v353 = *(_OWORD *)v4;
            *(void *)unint64_t v4 = 0;
            *(void *)(v4 + 8) = 0;
            v4 += 16;
            *((void *)v352 + 1) = v353 + 2;
            v351 -= 16;
          }
          while (v351);
        }
LABEL_332:
        if (v450)
        {
          unint64_t v4 = (unint64_t)v449;
          uint64_t v354 = 16 * v450;
          do
          {
            while (1)
            {
              v355 = a1[18];
              uint64_t v356 = (void *)*((void *)v355 + 1);
              if ((unint64_t)v356 < *((void *)v355 + 2)) {
                break;
              }
              *((void *)v355 + 1) = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)a1[18], v4);
              v4 += 16;
              v354 -= 16;
              if (!v354) {
                goto LABEL_337;
              }
            }
            *uint64_t v356 = 0;
            v356[1] = 0;
            *(_OWORD *)uint64_t v356 = *(_OWORD *)v4;
            *(void *)unint64_t v4 = 0;
            *(void *)(v4 + 8) = 0;
            v4 += 16;
            *((void *)v355 + 1) = v356 + 2;
            v354 -= 16;
          }
          while (v354);
        }
LABEL_337:
        mlir::PDLResultList::~PDLResultList((mlir::PDLResultList *)__src);
        if (__p[0] != v453) {
          free(__p[0]);
        }
        if (v339) {
          continue;
        }
        return 0;
      case 2:
        unsigned int v119 = v14[2];
        long long v118 = v14 + 2;
        unint64_t v117 = v119;
        *a1 = v118;
        unint64_t v120 = *(v118 - 1);
        char v121 = a1[10];
        if ((unint64_t)v121 <= v120) {
          uint64_t v122 = v6;
        }
        else {
          uint64_t v122 = v434;
        }
        if ((unint64_t)v121 <= v120) {
          uint64_t v123 = a1[10];
        }
        else {
          uint64_t v123 = 0;
        }
        uint64_t v124 = *(void *)&(*v122)[4 * (v120 - (void)v123)];
        *a1 = v118 + 1;
        if ((unint64_t)v121 <= v117) {
          unsigned int v125 = v6;
        }
        else {
          unsigned int v125 = v434;
        }
        if ((unint64_t)v121 > v117) {
          char v121 = 0;
        }
        uint64_t v126 = &v118[2 * (v124 != *(void *)&(*v125)[4 * (v117 - (void)v121)]) + 1];
        *a1 = v126;
        uint64_t v55 = *(unsigned int *)v126;
        goto LABEL_490;
      case 3:
        unsigned int v129 = v14[3];
        uint64_t v128 = v14 + 3;
        unint64_t v127 = v129;
        int v130 = *(v128 - 2);
        *a1 = v128;
        unint64_t v131 = *(v128 - 1);
        uint64_t v132 = a1[10];
        if ((unint64_t)v132 <= v131) {
          uint64_t v133 = v6;
        }
        else {
          uint64_t v133 = v434;
        }
        if ((unint64_t)v132 <= v131) {
          uint64_t v134 = a1[10];
        }
        else {
          uint64_t v134 = 0;
        }
        uint64_t v135 = *(uint64_t **)&(*v133)[4 * (v131 - (void)v134)];
        *a1 = v128 + 1;
        if ((unint64_t)v132 <= v127) {
          uint64_t v136 = v6;
        }
        else {
          uint64_t v136 = v434;
        }
        if ((unint64_t)v132 > v127) {
          uint64_t v132 = 0;
        }
        int v137 = *(uint64_t **)&(*v136)[4 * (v127 - (void)v132)];
        if (v130 != 3)
        {
          unint64_t v4 = v135[1];
          if (v4 == v137[1])
          {
            unsigned int v357 = (void *)*v137;
            unsigned int v358 = (void *)*v135;
            __src[0] = (void *)*v135;
            __src[1] = 0;
            __p[0] = v357;
            __p[1] = 0;
            if (v4)
            {
              unsigned int v359 = 0;
              while (1)
              {
                uint64_t v360 = mlir::ValueRange::dereference_iterator(__src, (uint64_t)v359);
                if (v360 != mlir::ValueRange::dereference_iterator(__p, (uint64_t)__p[1])) {
                  goto LABEL_494;
                }
                unsigned int v359 = ++__src[1];
                unsigned int v361 = ++__p[1];
                if (__src[0] == v358 && v359 == (void *)v4) {
                  break;
                }
                if (__p[0] == v357 && v361 == (void *)v4) {
                  goto LABEL_494;
                }
              }
              if (__p[0] != v357) {
                goto LABEL_494;
              }
            }
            else
            {
              unsigned int v361 = 0;
            }
            BOOL v330 = v361 != (void *)v4;
            uint64_t v405 = 2;
            if (!v330) {
              uint64_t v405 = 0;
            }
            goto LABEL_495;
          }
LABEL_494:
          uint64_t v405 = 2;
LABEL_495:
          uint64_t v140 = &(*a1)[v405];
          *a1 = v140;
          goto LABEL_489;
        }
        uint64_t v138 = v135[1];
        if (v138 == v137[1])
        {
          if (std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(*v135, 0, *v135, v138, *v137, 0, *v137, v138))
          {
            uint64_t v139 = 0;
          }
          else
          {
            uint64_t v139 = 2;
          }
          uint64_t v140 = &(*a1)[v139];
          *a1 = v140;
        }
        else
        {
          uint64_t v140 = v128 + 3;
          *a1 = v128 + 3;
        }
LABEL_489:
        uint64_t v55 = *(unsigned int *)v140;
LABEL_490:
        uint64_t v56 = a1[23];
LABEL_491:
        *a1 = &v56[v55];
        continue;
      case 4:
        goto LABEL_403;
      case 5:
        *a1 = v14 + 2;
        uint64_t v141 = *(void *)&a1[9][4 * v14[1]];
        unsigned int v142 = *((_DWORD *)v14 + 1);
        unint64_t v77 = v14 + 5;
        *a1 = v14 + 5;
        int v143 = *(_DWORD *)(v141 + 44);
        if (v14[4])
        {
          if ((v143 & 0x800000) != 0) {
            unsigned int v144 = *(_DWORD *)(v141 + 68);
          }
          else {
            unsigned int v144 = 0;
          }
          BOOL v145 = v144 < v142;
        }
        else
        {
          if ((v143 & 0x800000) != 0) {
            int v364 = *(_DWORD *)(v141 + 68);
          }
          else {
            int v364 = 0;
          }
          BOOL v145 = v364 != v142;
        }
        uint64_t v81 = 2 * v145;
        goto LABEL_376;
      case 6:
        unsigned int v148 = v14[2];
        uint64_t v147 = v14 + 2;
        uint64_t v146 = v148;
        *a1 = v147;
        unint64_t v149 = (unint64_t)a1[10];
        uint64_t v150 = *(void *)&a1[9][4 * *(v147 - 1)];
        *a1 = v147 + 1;
        int v151 = v434;
        if (v149 > v148) {
          unint64_t v149 = 0;
        }
        else {
          int v151 = v6;
        }
        uint64_t v152 = &v147[2 * (*(void *)(v150 + 48) != *(void *)&(*v151)[4 * (v146 - v149)]) + 1];
        *a1 = v152;
        uint64_t v55 = *(unsigned int *)v152;
        goto LABEL_490;
      case 7:
        *a1 = v14 + 2;
        unsigned int v153 = *((_DWORD *)v14 + 1);
        unsigned int v154 = *(_DWORD *)(*(void *)&a1[9][4 * v14[1]] + 36);
        BOOL v330 = v154 == v153;
        BOOL v155 = v154 < v153;
        unsigned int v156 = !v330;
        uint64_t v157 = 2 * v156;
        uint64_t v158 = 2 * v155;
        if (!v14[4]) {
          uint64_t v158 = v157;
        }
        uint64_t v159 = &v14[v158 + 5];
        *a1 = v159;
        uint64_t v55 = *(unsigned int *)v159;
        goto LABEL_490;
      case 8:
        unsigned int v162 = v14[2];
        char v161 = v14 + 2;
        uint64_t v160 = v162;
        *a1 = v161;
        unint64_t v163 = (unint64_t)a1[10];
        uint64_t v164 = *(uint64_t **)&a1[9][4 * *(v161 - 1)];
        *a1 = v161 + 1;
        uint64_t v165 = v434;
        if (v163 > v162)
        {
          unint64_t v166 = 0;
        }
        else
        {
          uint64_t v165 = v6;
          unint64_t v166 = v163;
        }
        __p[0] = *(void **)&(*v165)[4 * (v160 - v166)];
        uint64_t Value = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
        uint64_t v168 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
        uint64_t v170 = (void **)(v168 + 8 * v169);
        uint64_t v171 = v164[1];
        if (v171 != v170 - Value) {
          goto LABEL_479;
        }
        unint64_t v4 = 0;
        if (!v171) {
          goto LABEL_475;
        }
        uint64_t v172 = *v164;
        while (Value != v170)
        {
          unint64_t v173 = mlir::TypeRange::dereference_iterator(v172, v4);
          __src[0] = *Value;
          if (v173 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src))
          {
            uint64_t v403 = 2;
            uint64_t v6 = v433;
            goto LABEL_480;
          }
          ++v4;
          ++Value;
          uint64_t v6 = v433;
          if (v171 == v4) {
            goto LABEL_476;
          }
        }
        uint64_t Value = v170;
LABEL_475:
        if (v4 != v171)
        {
LABEL_479:
          uint64_t v403 = 2;
          goto LABEL_480;
        }
LABEL_476:
        uint64_t v403 = 2;
        if (Value == v170) {
          uint64_t v403 = 0;
        }
LABEL_480:
        BOOL v404 = &(*a1)[v403];
        *a1 = v404;
        uint64_t v55 = *(unsigned int *)v404;
        goto LABEL_490;
      case 9:
        *a1 = v14 + 2;
        ++*(_DWORD *)&a1[19][2 * v14[1]];
        uint64_t v24 = *((unsigned int *)a1 + 4);
        *a1 = *(unsigned __int16 **)&a1[1][4 * v24 - 4];
        *((_DWORD *)a1 + 4) = v24 - 1;
        continue;
      case 10:
        uint64_t v25 = v14[1];
        uint64_t v26 = v14[2];
        *a1 = v14 + 4;
        unint64_t v27 = v14[3];
        uint64_t v28 = a1[10];
        uint64_t v29 = v434;
        if ((unint64_t)v28 > v27) {
          uint64_t v28 = 0;
        }
        else {
          uint64_t v29 = v6;
        }
        *(void *)&long long v454 = *(void *)&(*v29)[4 * (v27 - (void)v28)];
        unint64_t v4 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v454);
        uint64_t v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v454);
        uint64_t v32 = v30 + 8 * v31;
        uint64_t v33 = v32 - v4;
        if (v32 == v4)
        {
          mlir::ValueRange::ValueRange((unint64_t *)__src, 0, 0);
          *(_OWORD *)&a1[13][8 * v26] = *(_OWORD *)__src;
          uint64_t v6 = v433;
        }
        else
        {
          unint64_t v34 = a1[15];
          if (v33 < 0) {
            size_t v35 = -1;
          }
          else {
            size_t v35 = v32 - v4;
          }
          unint64_t v36 = operator new[](v35);
          bzero(v36, v32 - v4);
          __src[0] = v36;
          __src[1] = (void *)(v33 >> 3);
          do
          {
            long long v37 = *(void **)v4;
            v4 += 8;
            __p[0] = v37;
            *v36++ = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
          }
          while (v4 != v32);
          __int16 v38 = (_OWORD *)*((void *)v34 + 1);
          uint64_t v6 = v433;
          if ((unint64_t)v38 >= *((void *)v34 + 2))
          {
            uint64_t v39 = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)v34, (uint64_t)__src);
          }
          else
          {
            *__int16 v38 = *(_OWORD *)__src;
            __src[0] = 0;
            __src[1] = 0;
            uint64_t v39 = v38 + 1;
          }
          *((void *)v34 + 1) = v39;
          mlir::ValueRange::ValueRange((unint64_t *)__p, *((void *)v39 - 2), *((void *)v39 - 1));
          *(_OWORD *)&a1[13][8 * v26] = *(_OWORD *)__p;
          if (__src[0]) {
            operator delete[](__src[0]);
          }
        }
        *(void *)&a1[9][4 * v25] = &a1[13][8 * v26];
        continue;
      case 11:
        uint64_t v174 = v14[1];
        *a1 = v14 + 3;
        unint64_t v175 = v14[2];
        uint64_t v176 = a1[10];
        unint64_t v4 = (unint64_t)v434;
        if ((unint64_t)v176 <= v175) {
          uint64_t v177 = v6;
        }
        else {
          uint64_t v177 = v434;
        }
        if ((unint64_t)v176 > v175) {
          uint64_t v176 = 0;
        }
        mlir::OperationState::OperationState(__src, a4, *(void *)&(*v177)[4 * (v175 - (void)v176)]);
        uint64_t v178 = *a1 + 1;
        int v179 = **a1;
        *a1 = v178;
        if (v179)
        {
          do
          {
            uint64_t v182 = *a1;
            unint64_t v183 = (*a1)[1];
            ++*a1;
            unsigned int v186 = *v182;
            uint64_t v184 = v182 + 2;
            uint64_t v185 = v186;
            unint64_t v187 = (unint64_t)a1[10];
            BOOL v188 = v187 > v186;
            if (v187 <= v186) {
              uint64_t v189 = v6;
            }
            else {
              uint64_t v189 = v434;
            }
            if (v188) {
              BOOL v190 = 0;
            }
            else {
              BOOL v190 = a1[10];
            }
            uint64_t v191 = *(void *)&(*v189)[4 * (v185 - (void)v190)];
            *a1 = v184;
            if (v187 <= v183) {
              uint64_t v192 = v6;
            }
            else {
              uint64_t v192 = v434;
            }
            if (v187 <= v183) {
              unint64_t v193 = v187;
            }
            else {
              unint64_t v193 = 0;
            }
            uint64_t v194 = *(void *)&(*v192)[4 * (v183 - v193)];
            if (v194)
            {
              mlir::NamedAttribute::NamedAttribute(__p, v191, v194);
              mlir::NamedAttrList::push_back((uint64_t)v441, (uint64_t)__p[0], (uint64_t)__p[1]);
            }
            --v179;
          }
          while (v179);
          int v180 = *(*a1)++;
          if (!v180) {
            goto LABEL_288;
          }
        }
        else
        {
          int v181 = *v178;
          int v180 = v181;
          *a1 = v178 + 1;
          if (!v181) {
            goto LABEL_288;
          }
        }
        if (v180 == 0xFFFF)
        {
          unsigned int v313 = *(unsigned __int8 (**)(uint64_t, void *, uint64_t, void *, void *, unint64_t, uint64_t *))mlir::detail::InterfaceMap::lookup<mlir::InferTypeOpInterface>((uint64_t)__src[1] + 32);
          uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)__src);
          unsigned int v315 = __src[0];
          mlir::ValueRange::ValueRange((unint64_t *)__p, v436, v437);
          unsigned int v316 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)__src);
          unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v441, v316);
          uint64_t v318 = v449;
          mlir::ValueRange::ValueRange((unint64_t *)&v454, v447[2], v448);
          v319 = v315;
          uint64_t v320 = v318;
          uint64_t v6 = v433;
          unint64_t v4 = (unint64_t)v434;
          if (!v313(Context, v319, 1, __p[0], __p[1], Dictionary, v320)) {
            goto LABEL_289;
          }
        }
        else
        {
          int v365 = 0;
          do
          {
            while (1)
            {
              unsigned int v366 = *a1;
              int v367 = **a1;
              *a1 += 2;
              unint64_t v368 = v366[1];
              if (v367 != 2) {
                break;
              }
              BOOL v369 = a1[10];
              if ((unint64_t)v369 <= v368) {
                v370 = v6;
              }
              else {
                v370 = (void *)v4;
              }
              if ((unint64_t)v369 > v368) {
                BOOL v369 = 0;
              }
              uint64_t v371 = *(void *)(*v370 + 8 * (v368 - (void)v369));
              uint64_t v372 = v439;
              if (v439 >= (unint64_t)HIDWORD(v439))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v438, v440, v439 + 1, 8);
                uint64_t v372 = v439;
              }
              *(void *)&v438[8 * v372] = v371;
              LODWORD(v439) = v439 + 1;
              if (++v365 == v180) {
                goto LABEL_288;
              }
            }
            v373 = *(uint64_t **)(*(void *)v4 + 8 * v368);
            uint64_t v374 = *v373;
            uint64_t v375 = v373[1];
            int v376 = v439;
            unint64_t v377 = v375 + v439;
            if (v377 > HIDWORD(v439))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v438, v440, v377, 8);
              int v376 = v439;
            }
            if (v375)
            {
              uint64_t v378 = 0;
              unsigned int v379 = &v438[8 * v376];
              do
              {
                *(void *)&v379[8 * v378] = mlir::TypeRange::dereference_iterator(v374, v378);
                ++v378;
              }
              while (v375 != v378);
              int v376 = v439;
              uint64_t v6 = v433;
              unint64_t v4 = (unint64_t)v434;
            }
            LODWORD(v439) = v376 + v375;
            ++v365;
          }
          while (v365 != v180);
        }
LABEL_288:
        *(void *)(*(void *)v4 + 8 * v174) = mlir::OpBuilder::create(v431, (const mlir::OperationState *)__src);
LABEL_289:
        mlir::OperationState::~OperationState((mlir::OperationState *)__src);
        continue;
      case 12:
        uint64_t v195 = v14[1];
        uint64_t v196 = v14[2];
        __src[0] = &v436;
        __src[1] = (void *)0x600000000;
        *a1 = v14 + 4;
        int v197 = v14[3];
        if (!v14[3]) {
          goto LABEL_293;
        }
        unsigned int v198 = 0;
        int v199 = 0;
        unint64_t v4 = (unint64_t)v434;
        do
        {
          while (1)
          {
            int v200 = *a1;
            int v201 = **a1;
            *a1 += 2;
            unint64_t v202 = v200[1];
            if (v201 != 2) {
              break;
            }
            __int16 v203 = a1[10];
            uint64_t v204 = v433;
            if ((unint64_t)v203 > v202)
            {
              uint64_t v204 = (void *)v4;
              __int16 v203 = 0;
            }
            uint64_t v205 = *(void *)(*v204 + 8 * (v202 - (void)v203));
            if (v198 >= HIDWORD(__src[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v436, v198 + 1, 8);
              unsigned int v198 = __src[1];
            }
            *((void *)__src[0] + v198) = v205;
            unsigned int v198 = ++LODWORD(__src[1]);
            if (++v199 == v197) {
              goto LABEL_290;
            }
          }
          uint64_t v206 = *(uint64_t **)(*(void *)v4 + 8 * v202);
          uint64_t v207 = *v206;
          uint64_t v208 = v206[1];
          unint64_t v209 = v208 + v198;
          if (v209 > HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v436, v209, 8);
            unsigned int v198 = __src[1];
          }
          if (v208)
          {
            uint64_t v210 = 0;
            int v211 = (char *)__src[0] + 8 * v198;
            do
            {
              *(void *)&v211[8 * v210] = mlir::TypeRange::dereference_iterator(v207, v210);
              ++v210;
            }
            while (v208 != v210);
            unsigned int v198 = __src[1];
            unint64_t v4 = (unint64_t)v434;
          }
          v198 += v208;
          LODWORD(__src[1]) = v198;
          ++v199;
        }
        while (v199 != v197);
LABEL_290:
        if (v198)
        {
          int64_t v321 = a1[15];
          unint64_t v4 = 8 * v198;
          unint64_t v322 = v198;
          v323 = operator new[](v4);
          bzero(v323, v4);
          __p[0] = v323;
          __p[1] = (void *)v322;
          memmove(v323, __src[0], v4);
          uint64_t v324 = (_OWORD *)*((void *)v321 + 1);
          if ((unint64_t)v324 >= *((void *)v321 + 2))
          {
            uint64_t v325 = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)v321, (uint64_t)__p);
          }
          else
          {
            *uint64_t v324 = *(_OWORD *)__p;
            __p[1] = 0;
            __p[0] = 0;
            uint64_t v325 = v324 + 1;
          }
          *((void *)v321 + 1) = v325;
          mlir::ValueRange::ValueRange((unint64_t *)&v454, *((void *)v325 - 2), *((void *)v325 - 1));
          *(_OWORD *)&a1[13][8 * v196] = v454;
          if (__p[0]) {
            operator delete[](__p[0]);
          }
        }
        else
        {
LABEL_293:
          mlir::ValueRange::ValueRange((unint64_t *)__p, 0, 0);
          *(_OWORD *)&a1[13][8 * v196] = *(_OWORD *)__p;
        }
        *(void *)&a1[9][4 * v195] = &a1[13][8 * v196];
        if (__src[0] != &v436) {
          free(__src[0]);
        }
        uint64_t v6 = v433;
        continue;
      case 13:
        uint64_t v40 = v14[1];
        *a1 = v14 + 3;
        uint64_t v41 = v14[2];
        __src[0] = &v436;
        __src[1] = (void *)0x600000000;
        unint64_t v42 = LODWORD(__src[1]);
        if (LODWORD(__src[1]))
        {
          __int16 v43 = a1[18];
          LOBYTE(v4) = 8 * LOBYTE(__src[1]);
          unint64_t v44 = operator new[](8 * LODWORD(__src[1]));
          bzero(v44, 8 * v42);
          __p[0] = v44;
          __p[1] = (void *)v42;
          memmove(v44, __src[0], 8 * v42);
          unsigned int v45 = (_OWORD *)*((void *)v43 + 1);
          if ((unint64_t)v45 >= *((void *)v43 + 2))
          {
            uint64_t v46 = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)v43, (uint64_t)__p);
          }
          else
          {
            *unsigned int v45 = *(_OWORD *)__p;
            __p[1] = 0;
            __p[0] = 0;
            uint64_t v46 = v45 + 1;
          }
          *((void *)v43 + 1) = v46;
          mlir::ValueRange::ValueRange((unint64_t *)&v454, *((void *)v46 - 2), *((void *)v46 - 1));
          *(_OWORD *)&a1[16][8 * v41] = v454;
          if (__p[0]) {
            operator delete[](__p[0]);
          }
        }
        else
        {
          mlir::ValueRange::ValueRange((unint64_t *)__p, 0, 0);
          *(_OWORD *)&a1[16][8 * v41] = *(_OWORD *)__p;
        }
        *(void *)&a1[9][4 * v40] = &a1[16][8 * v41];
        if (__src[0] != &v436) {
          free(__src[0]);
        }
        uint64_t v6 = v433;
        continue;
      case 14:
        *a1 = v14 + 2;
        (*(void (**)(uint64_t, void))(*(void *)a2 + 40))(a2, *(void *)&a1[9][4 * v14[1]]);
        continue;
      case 15:
        *a1 = v14 + 2;
        unint64_t v212 = v14[1];
        uint64_t v213 = a1[10];
        if ((unint64_t)v213 <= v212) {
          uint64_t v214 = v6;
        }
        else {
          uint64_t v214 = v434;
        }
        if ((unint64_t)v213 > v212) {
          uint64_t v213 = 0;
        }
        uint64_t v215 = *(void **)&(*v214)[4 * (v212 - (void)v213)];
        unint64_t v216 = *((unsigned int *)v14 + 1);
        *a1 = v14 + 5;
        uint64_t v217 = v14[4];
        if (v215)
        {
          if (v215[1] <= v216) {
            uint64_t v218 = 0;
          }
          else {
            uint64_t v218 = *(void *)(*v215 + 8 * v216);
          }
          *(void *)&(*v434)[4 * v217] = v218;
        }
        else
        {
          *(void *)&(*v434)[4 * v217] = 0;
        }
        continue;
      case 16:
        *a1 = v14 + 2;
        int v219 = a1[9];
        uint64_t v220 = *(uint64_t **)&v219[4 * v14[1]];
        unint64_t v221 = *((unsigned int *)v14 + 1);
        *a1 = v14 + 5;
        uint64_t v222 = v14[4];
        if (v220)
        {
          if (v220[1] <= v221) {
            *(void *)&v219[4 * v222] = 0;
          }
          else {
            *(void *)&(*v434)[4 * v222] = mlir::TypeRange::dereference_iterator(*v220, v221);
          }
        }
        else
        {
          *(void *)&v219[4 * v222] = 0;
        }
        continue;
      case 17:
        *a1 = v14 + 2;
        uint64_t v223 = a1[9];
        uint64_t v224 = *(void **)&v223[4 * v14[1]];
        unint64_t v225 = *((unsigned int *)v14 + 1);
        *a1 = v14 + 5;
        uint64_t v226 = v14[4];
        if (!v224) {
          goto LABEL_203;
        }
        if (v224[1] <= v225)
        {
          *(void *)&v223[4 * v226] = 0;
        }
        else
        {
          uint64_t v224 = (void *)mlir::ValueRange::dereference_iterator(v224, v225);
          uint64_t v223 = *v434;
LABEL_203:
          *(void *)&v223[4 * v226] = v224;
        }
        continue;
      case 18:
        return result;
      case 19:
        uint64_t v47 = v14[1];
        uint64_t v48 = v14[2];
        unint64_t v49 = v14 + 5;
        *a1 = v14 + 5;
        uint64_t v50 = v14[4];
        int v51 = a1[19];
        unint64_t v52 = &a1[11][8 * v47];
        unint64_t v53 = *(unsigned int *)&v51[2 * v50];
        if (*((void *)v52 + 1) <= v53)
        {
          *(_DWORD *)&v51[2 * v50] = 0;
          *a1 = v49;
          uint64_t v55 = *(unsigned int *)v49;
          uint64_t v56 = *v428;
        }
        else
        {
          *(void *)&a1[9][4 * v48] = *(void *)(*(void *)v52 + 8 * v53);
          unint64_t v54 = *((unsigned int *)a1 + 4);
          if (v54 >= *((unsigned int *)a1 + 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v427, v426, v54 + 1, 8);
            unint64_t v54 = *((unsigned int *)a1 + 4);
          }
          *(void *)&a1[1][4 * v54] = v14;
          ++*((_DWORD *)a1 + 4);
          uint64_t v55 = 2;
          uint64_t v56 = *a1;
        }
        goto LABEL_491;
      case 20:
        unsigned int v229 = v14[3];
        int v228 = v14 + 3;
        uint64_t v227 = v229;
        unint64_t v4 = *(v228 - 2);
        *a1 = v228;
        unint64_t v230 = (unint64_t)a1[10];
        uint64_t v231 = *(void *)&a1[9][4 * *(v228 - 1)];
        *a1 = v228 + 1;
        char v232 = v434;
        if (v230 > v229)
        {
          unint64_t v233 = 0;
        }
        else
        {
          char v232 = v6;
          unint64_t v233 = v230;
        }
        unsigned int v234 = *(void **)&(*v232)[4 * (v227 - v233)];
        __src[0] = v234;
        if (!*(unsigned char *)(v231 + 47)) {
          goto LABEL_210;
        }
        uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)__src);
        uint64_t InherentAttr = mlir::Operation::getInherentAttr(v231, AttrData, v236);
        if (!v238)
        {
          unsigned int v234 = __src[0];
LABEL_210:
          uint64_t InherentAttr = mlir::DictionaryAttr::get(v231 + 56, (uint64_t)v234);
        }
        *(void *)&(*v434)[4 * v4] = InherentAttr;
        continue;
      case 21:
        uint64_t v57 = v14[1];
        *a1 = v14 + 3;
        unint64_t v58 = v14[2];
        int v59 = a1[10];
        unint64_t v60 = v434;
        if ((unint64_t)v59 > v58) {
          int v59 = 0;
        }
        else {
          unint64_t v60 = v6;
        }
        unint64_t v4 = *(void *)&(*v60)[4 * (v58 - (void)v59)];
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v4 + 8))
        {
          long long v61 = (void *)mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v4 + 8);
          __src[0] = (void *)v4;
          __src[1] = v61;
          if (v4)
          {
            uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)__src);
            goto LABEL_371;
          }
        }
        else
        {
          LOBYTE(v4) = 0;
          __src[0] = 0;
          __src[1] = 0;
        }
        uint64_t canMapOperands = 0;
LABEL_371:
        *(void *)&(*v434)[4 * v57] = canMapOperands;
        continue;
      case 22:
        uint64_t v239 = v14[1];
        if (v14[2] == 4)
        {
          *a1 = v14 + 4;
          __src[0] = *(void **)&a1[9][4 * v14[3]];
          if (__src[0])
          {
            uint64_t DefiningOp = (void *)mlir::Value::getDefiningOp((mlir::Value *)__src);
            unint64_t v4 = (unint64_t)v434;
            goto LABEL_473;
          }
          uint64_t DefiningOp = 0;
LABEL_459:
          unint64_t v4 = (unint64_t)v434;
          goto LABEL_473;
        }
        *a1 = v14 + 4;
        uint64_t DefiningOp = *(void **)&a1[9][4 * v14[3]];
        if (!DefiningOp) {
          goto LABEL_459;
        }
        unint64_t v4 = (unint64_t)v434;
        if (DefiningOp[1])
        {
          __src[0] = (void *)mlir::ValueRange::dereference_iterator(DefiningOp, 0);
          uint64_t DefiningOp = (void *)mlir::Value::getDefiningOp((mlir::Value *)__src);
        }
        else
        {
          uint64_t DefiningOp = 0;
        }
LABEL_473:
        *(void *)(*(void *)v4 + 8 * v239) = DefiningOp;
        continue;
      case 23:
      case 24:
      case 25:
      case 26:
        unsigned int v20 = v14[2];
        uint64_t v19 = v14 + 2;
        uint64_t v18 = v20;
        *a1 = v19;
        uint64_t v21 = a1[9];
        uint64_t v22 = *(void *)&v21[4 * *(v19 - 1)];
        *a1 = v19 + 1;
        if ((*(unsigned char *)(v22 + 46) & 0x80) != 0)
        {
          uint64_t v23 = (v15 - 23);
          if (*(_DWORD *)(v22 + 68) <= v23) {
            *(void *)&v21[4 * v18] = 0;
          }
          else {
            *(void *)&v21[4 * v18] = *(void *)(*(void *)(v22 + 72) + 32 * v23 + 24);
          }
        }
        else
        {
          *(void *)&v21[4 * v18] = 0;
        }
        continue;
      case 27:
        unsigned int v243 = v14[4];
        long long v242 = v14 + 4;
        uint64_t v241 = v243;
        uint64_t v244 = *(unsigned int *)(v242 - 3);
        *a1 = v242;
        unsigned int v245 = a1[9];
        uint64_t v246 = *(void *)&v245[4 * *(v242 - 1)];
        *a1 = v242 + 1;
        if ((*(unsigned char *)(v246 + 46) & 0x80) != 0)
        {
          if (*(_DWORD *)(v246 + 68) <= v244) {
            *(void *)&v245[4 * v241] = 0;
          }
          else {
            *(void *)&v245[4 * v241] = *(void *)(*(void *)(v246 + 72) + 32 * v244 + 24);
          }
        }
        else
        {
          *(void *)&v245[4 * v241] = 0;
        }
        continue;
      case 28:
        unsigned int v249 = v14[4];
        unsigned int v248 = v14 + 4;
        uint64_t v247 = v249;
        unint64_t v250 = *(unsigned int *)(v248 - 3);
        *a1 = v248;
        uint64_t v251 = *(void *)&a1[9][4 * *(v248 - 1)];
        *a1 = v248 + 1;
        if ((*(unsigned char *)(v251 + 46) & 0x80) != 0)
        {
          uint64_t v252 = *(void *)(v251 + 72);
          unint64_t v4 = *(unsigned int *)(v251 + 68);
          uint64_t v253 = a1[16];
          if (v250 == -1) {
            goto LABEL_504;
          }
        }
        else
        {
          uint64_t v252 = 0;
          unint64_t v4 = 0;
          uint64_t v253 = a1[16];
          if (v250 == -1) {
            goto LABEL_504;
          }
        }
        if (!mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedOperandSegments>((void *)(v251 + 48)))
        {
          BOOL v381 = v4 >= v250;
          v4 -= v250;
          if (!v381) {
            goto LABEL_508;
          }
          v252 += 32 * v250;
          goto LABEL_504;
        }
        if (*(unsigned char *)(v251 + 47)
          && (uint64_t v254 = mlir::Operation::getInherentAttr(v251, (uint64_t)"operandSegmentSizes", 19), v255))
        {
          unint64_t v4 = v254;
          if (!v254) {
            goto LABEL_508;
          }
        }
        else
        {
          unint64_t v4 = mlir::DictionaryAttr::get(v251 + 56, "operandSegmentSizes", 0x13uLL);
          if (!v4) {
            goto LABEL_508;
          }
        }
        BOOL v384 = mlir::detail::DenseArrayAttrImpl<int>::classof((void *)v4);
        if (v384) {
          uint64_t v385 = (void *)v4;
        }
        else {
          uint64_t v385 = 0;
        }
        __src[0] = v385;
        if (v384)
        {
          mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
          if (v386 > v250)
          {
            uint64_t v387 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
            unsigned int v388 = (int *)(v387 + 4 * v250);
            if (v250)
            {
              unint64_t v389 = (v250 - 1) & 0x3FFFFFFFFFFFFFFFLL;
              if (v389 < 7)
              {
                unsigned int v390 = 0;
                unsigned int v391 = (int *)v387;
                goto LABEL_501;
              }
              unint64_t v407 = v389 + 1;
              uint64_t v408 = (v389 + 1) & 0x7FFFFFFFFFFFFFF8;
              unsigned int v391 = (int *)(v387 + 4 * v408);
              v409 = (int32x4_t *)(v387 + 16);
              int32x4_t v410 = 0uLL;
              uint64_t v411 = v408;
              int32x4_t v412 = 0uLL;
              do
              {
                int32x4_t v410 = vaddq_s32(v409[-1], v410);
                int32x4_t v412 = vaddq_s32(*v409, v412);
                v409 += 2;
                v411 -= 8;
              }
              while (v411);
              unsigned int v390 = vaddvq_s32(vaddq_s32(v412, v410));
              if (v407 != v408)
              {
                do
                {
LABEL_501:
                  int v413 = *v391++;
                  v390 += v413;
                }
                while (v391 != v388);
              }
              uint64_t v406 = v390;
            }
            else
            {
              uint64_t v406 = 0;
            }
            unint64_t v4 = *v388;
            v252 += 32 * v406;
LABEL_504:
            if (v247 != 0xFFFF)
            {
              mlir::ValueRange::ValueRange((unint64_t *)__src, v252, v4);
              unsigned int v414 = &v253[8 * v247];
              *(_OWORD *)unsigned int v414 = *(_OWORD *)__src;
              goto LABEL_509;
            }
            if (v4 == 1)
            {
              unsigned int v414 = *(unsigned __int16 **)(v252 + 24);
              goto LABEL_509;
            }
          }
        }
LABEL_508:
        unsigned int v414 = 0;
LABEL_509:
        uint64_t v6 = v433;
        uint64_t v415 = *(*a1)++;
        *(void *)&a1[9][4 * v415] = v414;
        continue;
      case 29:
      case 30:
      case 31:
      case 32:
        unsigned int v7 = v15 - 29;
        unsigned int v10 = v14[2];
        uint64_t v9 = v14 + 2;
        uint64_t v8 = v10;
        *a1 = v9;
        uint64_t v11 = a1[9];
        uint64_t v12 = *(void *)&v11[4 * *(v9 - 1)];
        *a1 = v9 + 1;
        uint64_t v13 = v12 - 16 * (v15 - 28);
        if (*(_DWORD *)(v12 + 36) <= v7) {
          uint64_t v13 = 0;
        }
        *(void *)&v11[4 * v8] = v13;
        continue;
      case 33:
        unsigned int v258 = v14[4];
        uint64_t v257 = v14 + 4;
        uint64_t v256 = v258;
        uint64_t v259 = *(unsigned int *)(v257 - 3);
        *a1 = v257;
        uint64_t v260 = a1[9];
        uint64_t v261 = *(void *)&v260[4 * *(v257 - 1)];
        *a1 = v257 + 1;
        if (*(_DWORD *)(v261 + 36) <= v259)
        {
          *(void *)&v260[4 * v256] = 0;
        }
        else if (v259 > 5)
        {
          *(void *)&v260[4 * v256] = v261 - 24 * (v259 - 5) - 96;
        }
        else
        {
          *(void *)&v260[4 * v256] = v261 - 16 * v259 - 16;
        }
        continue;
      case 34:
        unsigned int v264 = v14[4];
        uint64_t v262 = v14 + 4;
        uint64_t v263 = v264;
        unint64_t v4 = *(unsigned int *)(v262 - 3);
        *a1 = v262;
        uint64_t v265 = *(void *)&a1[9][4 * *(v262 - 1)];
        *a1 = v262 + 1;
        unint64_t v266 = *(unsigned int *)(v265 + 36);
        unsigned int v267 = a1[16];
        if (v266) {
          uint64_t NextResultAtOffset = v265 - 16;
        }
        else {
          uint64_t NextResultAtOffset = 0;
        }
        if (v4 == -1)
        {
          uint64_t v6 = v433;
          if (v263 != 0xFFFF) {
            goto LABEL_466;
          }
          goto LABEL_517;
        }
        if (!mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedResultSegments>((void *)(v265 + 48)))
        {
          if (v266 < v4)
          {
            unsigned int v382 = 0;
            uint64_t v6 = v433;
            goto LABEL_520;
          }
          uint64_t v6 = v433;
          if (v4) {
            uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v4);
          }
          v266 -= v4;
          if (v263 != 0xFFFF)
          {
LABEL_466:
            mlir::ValueRange::ValueRange((unint64_t *)__src, NextResultAtOffset, v266);
            unsigned int v382 = &v267[8 * v263];
            *(_OWORD *)unsigned int v382 = *(_OWORD *)__src;
            goto LABEL_520;
          }
          goto LABEL_517;
        }
        if (*(unsigned char *)(v265 + 47)
          && (uint64_t v269 = mlir::Operation::getInherentAttr(v265, (uint64_t)"resultSegmentSizes", 18), v270))
        {
          unsigned int v271 = (void *)v269;
          uint64_t v6 = v433;
          if (!v269) {
            goto LABEL_519;
          }
        }
        else
        {
          unsigned int v271 = (void *)mlir::DictionaryAttr::get(v265 + 56, "resultSegmentSizes", 0x12uLL);
          uint64_t v6 = v433;
          if (!v271) {
            goto LABEL_519;
          }
        }
        BOOL v392 = mlir::detail::DenseArrayAttrImpl<int>::classof(v271);
        if (v392) {
          unsigned int v393 = v271;
        }
        else {
          unsigned int v393 = 0;
        }
        __src[0] = v393;
        if (v392)
        {
          mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
          if (v394 > v4)
          {
            uint64_t v395 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
            unsigned int v396 = (int *)(v395 + 4 * v4);
            if (v4)
            {
              unint64_t v397 = (v4 - 1) & 0x3FFFFFFFFFFFFFFFLL;
              if (v397 < 7)
              {
                unsigned int v398 = 0;
                unsigned int v399 = (int *)v395;
                goto LABEL_513;
              }
              unint64_t v416 = v397 + 1;
              uint64_t v417 = (v397 + 1) & 0x7FFFFFFFFFFFFFF8;
              unsigned int v399 = (int *)(v395 + 4 * v417);
              int64_t v418 = (int32x4_t *)(v395 + 16);
              int32x4_t v419 = 0uLL;
              uint64_t v420 = v417;
              int32x4_t v421 = 0uLL;
              do
              {
                int32x4_t v419 = vaddq_s32(v418[-1], v419);
                int32x4_t v421 = vaddq_s32(*v418, v421);
                v418 += 2;
                v420 -= 8;
              }
              while (v420);
              unsigned int v398 = vaddvq_s32(vaddq_s32(v421, v419));
              if (v416 != v417)
              {
                do
                {
LABEL_513:
                  int v422 = *v399++;
                  v398 += v422;
                }
                while (v399 != v396);
              }
              LODWORD(v4) = *v396;
              if (v398) {
                uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v398);
              }
            }
            else
            {
              LODWORD(v4) = *v396;
            }
            unint64_t v266 = (int)v4;
            if (v263 != 0xFFFF) {
              goto LABEL_466;
            }
LABEL_517:
            if (v266 == 1)
            {
              unsigned int v382 = (unsigned __int16 *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0);
              goto LABEL_520;
            }
          }
        }
LABEL_519:
        unsigned int v382 = 0;
LABEL_520:
        uint64_t v423 = *(*a1)++;
        *(void *)&a1[9][4 * v423] = v382;
        continue;
      case 35:
        uint64_t v63 = v14[1];
        *a1 = v14 + 3;
        unint64_t v4 = (unint64_t)&a1[11][8 * v14[2]];
        *(void *)&a1[9][4 * v63] = v4;
        if (*(void *)v4) {
          operator delete[](*(void **)v4);
        }
        *(void *)unint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        unint64_t v64 = *a1;
        int v65 = **a1;
        *a1 += 2;
        uint64_t v66 = *(void *)&a1[9][4 * v64[1]];
        if (v65 == 4)
        {
          if (!v66) {
            continue;
          }
          unsigned int v67 = *(void **)v66;
          if (!*(void *)v66)
          {
            unsigned int v72 = operator new[](0);
            *(void *)unint64_t v4 = v72;
            *(void *)(v4 + 8) = 0;
            uint64_t v73 = *(void **)v66;
            if (!*(void *)v66) {
              continue;
            }
            do
            {
LABEL_468:
              *v72++ = v73[2];
              uint64_t v73 = (void *)*v73;
            }
            while (v73);
            continue;
          }
          size_t v68 = 0;
          unint64_t v69 = -1;
          do
          {
            unsigned int v67 = (void *)*v67;
            ++v69;
            v68 += 8;
          }
          while (v67);
          if (v69 > 0x1FFFFFFFFFFFFFFELL) {
            size_t v70 = -1;
          }
          else {
            size_t v70 = v68;
          }
          unint64_t v71 = v69 + 1;
          unsigned int v72 = operator new[](v70);
          *(void *)unint64_t v4 = v72;
          *(void *)(v4 + 8) = v71;
          uint64_t v73 = *(void **)v66;
          if (*(void *)v66) {
            goto LABEL_468;
          }
        }
        else
        {
          if (!v66) {
            continue;
          }
          __src[0] = &v436;
          __src[1] = (void *)0x600000000;
          v326 = *(void **)v66;
          __p[0] = *(void **)v66;
          __p[1] = 0;
          v327 = *(void **)(v66 + 8);
          if (v327)
          {
            uint64_t v328 = 0;
            while (1)
            {
              unsigned int v331 = (void *)mlir::ValueRange::dereference_iterator(__p, (uint64_t)v328);
              unsigned int v332 = (void *)*v331;
              if (*v331)
              {
                uint64_t v333 = 0;
                unsigned int v334 = (void *)*v331;
                do
                {
                  ++v333;
                  unsigned int v334 = (void *)*v334;
                }
                while (v334);
                uint64_t v335 = LODWORD(__src[1]);
                unint64_t v336 = v333 + LODWORD(__src[1]);
                if (v336 <= HIDWORD(__src[1])) {
                  goto LABEL_309;
                }
              }
              else
              {
                LODWORD(v333) = 0;
                uint64_t v335 = LODWORD(__src[1]);
                unint64_t v336 = LODWORD(__src[1]);
                if (LODWORD(__src[1]) <= (unint64_t)HIDWORD(__src[1])) {
                  goto LABEL_309;
                }
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v436, v336, 8);
              uint64_t v335 = LODWORD(__src[1]);
LABEL_309:
              if (v332)
              {
                BOOL v337 = (char *)__src[0] + 8 * v335;
                do
                {
                  *v337++ = v332[2];
                  unsigned int v332 = (void *)*v332;
                }
                while (v332);
              }
              unsigned int v329 = v335 + v333;
              LODWORD(__src[1]) = v335 + v333;
              uint64_t v328 = ++__p[1];
              BOOL v330 = __p[0] == v326 && v328 == v327;
              if (v330)
              {
                uint64_t v6 = v433;
                unsigned int v400 = operator new[](8 * v329);
                BOOL v401 = *(void **)v4;
                unsigned int v402 = v329;
                if (*(void *)v4) {
                  goto LABEL_447;
                }
                goto LABEL_448;
              }
            }
          }
          unsigned int v329 = 0;
          unsigned int v400 = operator new[](0);
          BOOL v401 = *(void **)v4;
          unsigned int v402 = 0;
          if (*(void *)v4)
          {
LABEL_447:
            operator delete[](v401);
            unsigned int v402 = __src[1];
          }
LABEL_448:
          *(void *)unint64_t v4 = v400;
          *(void *)(v4 + 8) = v329;
          unint64_t v4 = (unint64_t)__src[0];
          if (v402) {
            memmove(v400, __src[0], 8 * v402);
          }
          if ((uint64_t *)v4 != &v436) {
            free((void *)v4);
          }
        }
        continue;
      case 36:
        uint64_t v74 = v14[1];
        *a1 = v14 + 3;
        unint64_t v75 = a1[9];
        unint64_t v76 = *(void *)&v75[4 * v14[2]];
        if (v76) {
          unint64_t v76 = *(void *)(v76 + 8) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)&v75[4 * v74] = v76;
        continue;
      case 37:
        uint64_t v272 = v14[1];
        unint64_t v4 = v14[2];
        *a1 = v14 + 4;
        unsigned int v273 = a1[9];
        unsigned int v274 = *(__n128 **)&v273[4 * v14[3]];
        if (v274)
        {
          mlir::ValueRange::getTypes(v274, (__n128 *)__src);
          unsigned int v275 = __src[0];
          unsigned int v276 = __src[1];
          uint64_t v277 = v437;
          __p[0] = __src[0];
          __p[1] = __src[1];
          if (__src[1])
          {
            unsigned int v275 = (void *)mlir::ValueRange::offset_base(__p, (uint64_t)__src[1]);
            unsigned int v276 = __p[1];
          }
          mlir::TypeRange::TypeRange((unint64_t *)__p, (uint64_t)v275, v277 - (void)v276);
          *(_OWORD *)&a1[13][8 * v4] = *(_OWORD *)__p;
          *(void *)&a1[9][4 * v272] = &a1[13][8 * v4];
        }
        else
        {
          *(void *)&v273[4 * v272] = 0;
        }
        continue;
      case 38:
        unint64_t v77 = v14 + 2;
        *a1 = v14 + 2;
        unint64_t v78 = v14[1];
        unint64_t v79 = a1[10];
        unint64_t v80 = v434;
        if ((unint64_t)v79 > v78) {
          unint64_t v79 = 0;
        }
        else {
          unint64_t v80 = v6;
        }
        uint64_t v81 = 2 * (*(void *)&(*v80)[4 * (v78 - (void)v79)] == 0);
LABEL_376:
        *a1 = &v77[v81];
        uint64_t v55 = *(unsigned int *)&v77[v81];
        goto LABEL_490;
      case 39:
        LOWORD(v454) = a1[25][v14[1]];
        int v278 = (unsigned __int16)v454;
        *a1 = v14 + 2;
        unint64_t v4 = (unint64_t)&a1[23][*((unsigned int *)v14 + 1)];
        if (v278 != 0xFFFF)
        {
          *a1 = v14 + 5;
          unint64_t v279 = v14[4];
          __src[0] = &v436;
          __src[1] = (void *)0x400000000;
          if (v279 >= 5)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v436, v279, 8);
            unsigned int v280 = __src[1];
            goto LABEL_521;
          }
          unsigned int v280 = 0;
          v383 = (uint64_t **)&v436;
          if (v279)
          {
            do
            {
LABEL_521:
              uint64_t v424 = *(*a1)++;
              uint64_t v425 = *(void *)(*(void *)&a1[9][4 * v424] + 24);
              if (v280 >= HIDWORD(__src[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v436, v280 + 1, 8);
                unsigned int v280 = __src[1];
              }
              *((void *)__src[0] + v280) = v425;
              unsigned int v280 = ++LODWORD(__src[1]);
              LODWORD(v279) = v279 - 1;
            }
            while (v279);
            v383 = (uint64_t **)__src[0];
          }
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)v431, v383, (mlir::MLIRContext *)v280, 0);
        }
        *a1 = (unsigned __int16 *)v4;
        break;
      case 40:
        *a1 = v14 + 2;
        uint64_t v281 = *(void *)&a1[9][4 * v14[1]];
        __src[0] = &v436;
        __src[1] = (void *)0x1000000000;
        mlir::ValueRange::ValueRange((unint64_t *)__p, (uint64_t)__src[0], LODWORD(__src[1]));
        (*(void (**)(uint64_t, uint64_t, void *, void *))(*(void *)a2 + 24))(a2, v281, __p[0], __p[1]);
        unsigned int v114 = __src[0];
        if (__src[0] != &v436) {
LABEL_92:
        }
          free(v114);
        continue;
      case 41:
        *a1 = v14 + 2;
        unint64_t v82 = v14[1];
        __int16 v83 = a1[10];
        if ((unint64_t)v83 <= v82) {
          int64_t v84 = v6;
        }
        else {
          int64_t v84 = v434;
        }
        if ((unint64_t)v83 <= v82) {
          __int16 v85 = a1[10];
        }
        else {
          __int16 v85 = 0;
        }
        unint64_t v4 = *(void *)&(*v84)[4 * (v82 - (void)v85)];
        *a1 = v14 + 3;
        unint64_t v86 = v14[2];
        if ((unint64_t)v83 <= v86) {
          uint64_t v87 = v6;
        }
        else {
          uint64_t v87 = v434;
        }
        if ((unint64_t)v83 > v86) {
          __int16 v83 = 0;
        }
        __src[0] = *(void **)&(*v87)[4 * (v86 - (void)v83)];
        uint64_t v88 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        uint64_t v89 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        uint64_t v91 = v89 + 8 * v90;
        if (v91 == v88) {
          goto LABEL_488;
        }
        uint64_t v92 = -v88;
        while (*(void *)v88 != v4)
        {
          v88 += 8;
          v92 -= 8;
          if (v88 == v91) {
            goto LABEL_488;
          }
        }
        uint64_t v380 = (uint64_t)*a1 + ((-v92 - mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src)) >> 1);
        goto LABEL_462;
      case 42:
        *a1 = v14 + 2;
        unsigned int v308 = a1[10];
        uint64_t v309 = *(void *)&a1[9][4 * v14[1]];
        *a1 = v14 + 3;
        unint64_t v310 = v14[2];
        BOOL v311 = v434;
        if ((unint64_t)v308 > v310) {
          unsigned int v308 = 0;
        }
        else {
          BOOL v311 = v6;
        }
        __src[0] = *(void **)&(*v311)[4 * (v310 - (void)v308)];
        uint64_t isValidIntOrFloat = mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)__src, 4, 1, 0);
        if (isValidIntOrFloat)
        {
          uint64_t RawStringData = (_DWORD *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)__src);
          LOBYTE(v4) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)__src);
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
          uint64_t isValidIntOrFloat = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)__src);
        }
        else
        {
          uint64_t RawStringData = 0;
        }
        if ((*(unsigned char *)(v309 + 46) & 0x80) != 0) {
          int v108 = *(_DWORD *)(v309 + 68);
        }
        else {
          int v108 = 0;
        }
        if (!isValidIntOrFloat) {
          goto LABEL_488;
        }
        if ((_BYTE)v4) {
          goto LABEL_364;
        }
        uint64_t i = 0;
        while (RawStringData[i] != v108)
        {
          if (isValidIntOrFloat == ++i) {
            goto LABEL_488;
          }
        }
LABEL_461:
        uint64_t v380 = (uint64_t)&(*a1)[2 * i];
        goto LABEL_462;
      case 43:
        uint64_t v93 = v14[2];
        *a1 = v14 + 2;
        uint64_t v94 = *(void *)(*(void *)&a1[9][4 * v14[1]] + 48);
        uint64_t v16 = v14 + 3;
        *a1 = v14 + 3;
        if (!v93) {
          goto LABEL_403;
        }
        uint64_t v95 = 0;
        unint64_t v96 = a1[10];
        uint64_t v97 = -10 - 2 * v93;
        uint64_t v98 = v93 - 1;
        while (1)
        {
          *a1 = &v14[v95 + 4];
          unint64_t v99 = v14[v95 + 3];
          int v100 = (unint64_t)v96 <= v99 ? v6 : v434;
          unsigned int v101 = (unint64_t)v96 <= v99 ? v96 : 0;
          if (*(void *)&(*v100)[4 * (v99 - (void)v101)] == v94) {
            break;
          }
          v97 -= 4;
          --v98;
          ++v95;
          if (v98 == -1)
          {
            uint64_t v16 = &v14[v95 + 3];
            goto LABEL_403;
          }
        }
        uint64_t v16 = (unsigned __int16 *)((char *)v14 - v97);
        *a1 = (unsigned __int16 *)((char *)v14 - v97);
LABEL_403:
        uint64_t v55 = *(unsigned int *)v16;
        goto LABEL_490;
      case 44:
        *a1 = v14 + 2;
        int v102 = a1[10];
        uint64_t v103 = *(void *)&a1[9][4 * v14[1]];
        *a1 = v14 + 3;
        unint64_t v104 = v14[2];
        long long v105 = v434;
        if ((unint64_t)v102 > v104) {
          int v102 = 0;
        }
        else {
          long long v105 = v6;
        }
        __src[0] = *(void **)&(*v105)[4 * (v104 - (void)v102)];
        mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)__src, 4, 1, 0);
        uint64_t RawStringData = (_DWORD *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)__src);
        LOBYTE(v4) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)__src);
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)__src);
        if (!NumElements) {
          goto LABEL_488;
        }
        int v108 = *(_DWORD *)(v103 + 36);
        if ((v4 & 1) == 0)
        {
          for (uint64_t i = 0; i != NumElements; ++i)
          {
            if (RawStringData[i] == v108) {
              goto LABEL_461;
            }
          }
          goto LABEL_488;
        }
LABEL_364:
        if (*RawStringData != v108) {
          goto LABEL_488;
        }
        uint64_t i = 0;
        goto LABEL_461;
      case 45:
        *a1 = v14 + 2;
        unint64_t v282 = v14[1];
        v283 = a1[10];
        if ((unint64_t)v283 <= v282) {
          v284 = v6;
        }
        else {
          v284 = v434;
        }
        if ((unint64_t)v283 <= v282) {
          v285 = a1[10];
        }
        else {
          v285 = 0;
        }
        unint64_t v4 = *(void *)&(*v284)[4 * (v282 - (void)v285)];
        *a1 = v14 + 3;
        unint64_t v286 = v14[2];
        if ((unint64_t)v283 <= v286) {
          v287 = v6;
        }
        else {
          v287 = v434;
        }
        if ((unint64_t)v283 > v286) {
          v283 = 0;
        }
        __src[0] = *(void **)&(*v287)[4 * (v286 - (void)v283)];
        unsigned int v288 = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        uint64_t v289 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        unsigned int v291 = (void **)(v289 + 8 * v290);
        if (v291 == v288) {
          goto LABEL_488;
        }
        uint64_t v292 = 0;
        while (1)
        {
          __src[0] = *v288;
          if (v4 == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src)) {
            break;
          }
          ++v288;
          v292 += 8;
          if (v288 == v291)
          {
LABEL_488:
            uint64_t v140 = *a1;
            goto LABEL_489;
          }
        }
        uint64_t v380 = (uint64_t)*a1 + (v292 >> 1);
LABEL_462:
        uint64_t v140 = (unsigned __int16 *)(v380 + 4);
        *a1 = v140;
        goto LABEL_489;
      case 46:
        *a1 = v14 + 2;
        uint64_t v293 = a1[10];
        int64_t v294 = *(uint64_t **)&a1[9][4 * v14[1]];
        *a1 = v14 + 3;
        unint64_t v295 = v14[2];
        v296 = v434;
        if ((unint64_t)v293 > v295) {
          uint64_t v293 = 0;
        }
        else {
          v296 = v6;
        }
        __src[0] = *(void **)&(*v296)[4 * (v295 - (void)v293)];
        uint64_t v297 = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        uint64_t v298 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        if (!v294) {
          goto LABEL_488;
        }
        unsigned int v300 = (void **)(v298 + 8 * v299);
        unsigned int v430 = v297;
        if (v300 == v297) {
          goto LABEL_294;
        }
        while (2)
        {
          __p[0] = *v297;
          unint64_t v4 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
          uint64_t v301 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
          unint64_t v303 = v301 + 8 * v302;
          uint64_t v304 = v294[1];
          if (v304 != (uint64_t)(v303 - v4) >> 3) {
            goto LABEL_269;
          }
          uint64_t v305 = 0;
          if (v304)
          {
            uint64_t v306 = *v294;
            while (v4 != v303)
            {
              unint64_t v307 = mlir::TypeRange::dereference_iterator(v306, v305);
              __src[0] = *(void **)v4;
              if (v307 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src)) {
                goto LABEL_269;
              }
              ++v305;
              v4 += 8;
              if (v304 == v305) {
                goto LABEL_268;
              }
            }
            unint64_t v4 = v303;
          }
          if (v305 != v304) {
            goto LABEL_269;
          }
LABEL_268:
          if (v4 != v303)
          {
LABEL_269:
            if (++v297 == v300)
            {
LABEL_294:
              uint64_t v140 = *a1;
              goto LABEL_295;
            }
            continue;
          }
          break;
        }
        uint64_t v140 = (unsigned __int16 *)((char *)*a1 + (((char *)v297 - (char *)v430) >> 1) + 4);
        *a1 = v140;
LABEL_295:
        uint64_t v6 = v433;
        goto LABEL_489;
      default:
        continue;
    }
  }
}

uint64_t mlir::detail::PDLByteCode::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v47[30] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(*(void *)(a3 + 104) + 96);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 + 8);
    if (v9)
    {
      unsigned int v10 = *(uint64_t **)v8;
      uint64_t v11 = 8 * v9;
      do
      {
        uint64_t v12 = *v10++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, a2);
        v11 -= 8;
      }
      while (v11);
    }
  }
  uint64_t v13 = *(unsigned int *)(a3 + 16);
  if (v13) {
    memmove(*(void **)a4, *(const void **)(a3 + 8), 8 * v13);
  }
  uint64_t v14 = *(void *)(a1 + 240);
  uint64_t v15 = *(void *)(a1 + 248);
  uint64_t v16 = *(void **)a4;
  uint64_t v17 = (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3;
  uint64_t v18 = *(void *)(a4 + 24);
  uint64_t v19 = (*(void *)(a4 + 32) - v18) >> 4;
  uint64_t v20 = *(void *)(a4 + 48);
  uint64_t v21 = (*(void *)(a4 + 56) - v20) >> 4;
  uint64_t v22 = a4 + 72;
  uint64_t v23 = *(void *)(a4 + 96);
  uint64_t v24 = (*(void *)(a4 + 104) - v23) >> 4;
  uint64_t v25 = a4 + 120;
  uint64_t v26 = *(void *)(a4 + 144);
  uint64_t v27 = (*(void *)(a4 + 152) - v26) >> 2;
  uint64_t v28 = *(void *)(a1 + 64);
  uint64_t v29 = (*(void *)(a1 + 72) - v28) >> 3;
  uint64_t v30 = *(void *)(a4 + 168);
  uint64_t v31 = (*(void *)(a4 + 176) - v30) >> 1;
  uint64_t v32 = *(void *)(a1 + 392);
  uint64_t v33 = *(unsigned int *)(a1 + 400);
  uint64_t v34 = *(void *)(a1 + 3736);
  uint64_t v35 = (*(void *)(a1 + 3744) - v34) >> 5;
  uint64_t v36 = *(void *)(a1 + 3760);
  uint64_t v37 = (*(void *)(a1 + 3768) - v36) >> 5;
  unint64_t v44 = (unsigned __int16 *)(v14 + 2 * *(unsigned int *)(*(void *)(a3 + 104) + 88));
  unsigned int v45 = v47;
  uint64_t v46 = 0x600000000;
  v47[6] = v16;
  v47[7] = v17;
  v47[8] = v18;
  v47[9] = v19;
  v47[10] = v20;
  v47[11] = v21;
  v47[12] = v22;
  v47[13] = v23;
  v47[14] = v24;
  v47[15] = v25;
  v47[16] = v26;
  v47[17] = v27;
  v47[18] = v28;
  v47[19] = v29;
  void v47[20] = v14;
  v47[21] = v15;
  v47[22] = v30;
  v47[23] = v31;
  v47[24] = v32;
  v47[25] = v33;
  void v47[26] = v34;
  v47[27] = v35;
  v47[28] = v36;
  v47[29] = v37;
  if (v8)
  {
    uint64_t v39 = *(unsigned int *)(v8 + 8);
    if (v39)
    {
      uint64_t v40 = *(uint64_t **)v8;
      uint64_t v41 = 8 * v39;
      do
      {
        uint64_t v42 = *v40++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 24))(v42, a2);
        v41 -= 8;
      }
      while (v41);
    }
  }
  if (!(_BYTE)v38 && ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2) & 1) == 0) {
    llvm::report_fatal_error((llvm *)"Native PDL Rewrite failed, but the pattern rewriter doesn't support recovery. Failable pattern rewrites should not be used with pattern rewriters that do not support them.", (const char *)1);
  }
  if (v45 != v47) {
    free(v45);
  }
  return v38;
}

uint64_t *llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<unsigned long>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, void *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    uint64_t v12 = buffer + 8;
    if (a3) {
LABEL_4:
    }
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        uint64_t v17 = v9[1];
        ++v9;
        uint64_t v10 = v17;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    uint64_t v12 = buffer + 8;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v12] = 0;
  *(void *)buffer = a3;
  buffer[4] = *a4;
  uint64_t *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9) {
    BOOL v13 = *v9 == -8;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    do
    {
      uint64_t v15 = v9[1];
      ++v9;
      uint64_t v14 = v15;
      if (v15) {
        BOOL v16 = v14 == -8;
      }
      else {
        BOOL v16 = 1;
      }
    }
    while (v16);
  }
  return v9;
}

void anonymous namespace'::Generator::generate(uint64_t a1, Operation *a2, uint64_t *a3)
{
  uint64_t v564 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(void **)(*((void *)a2 + 6) + 16);
  if (a2 && v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyConstraintOp,void>::id)
  {
    uint64_t InputAttributeNames = a2;
    Name = (int8x16_t *)mlir::pdl::ApplyNativeConstraintOp::getName((mlir::pdl::ApplyNativeConstraintOp *)&InputAttributeNames);
    __int16 v8 = *(_WORD *)(*llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<>(a1 + 72, Name, v7) + 8);
    uint64_t v9 = (void *)a3[3];
    uint64_t v10 = v9[1];
    if ((unint64_t)(v10 + 1) > v9[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v9 + 3, v10 + 1, 2);
      uint64_t v10 = v9[1];
    }
    *(_WORD *)(*v9 + 2 * v10) = 0;
    ++v9[1];
    uint64_t v11 = (void *)a3[3];
    uint64_t v12 = v11[1];
    if ((unint64_t)(v12 + 1) > v11[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v11 + 3, v12 + 1, 2);
      uint64_t v12 = v11[1];
    }
    *(_WORD *)(*v11 + 2 * v12) = v8;
    ++v11[1];
    uint64_t Inputs = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&InputAttributeNames);
    uint64_t v15 = v13;
    BOOL v16 = (void *)a3[3];
    uint64_t v17 = v16[1];
    if ((unint64_t)(v17 + 1) > v16[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v16 + 3, v17 + 1, 2);
      *(_WORD *)(*v16 + 2 * v16[1]++) = v15;
      if (v15)
      {
LABEL_9:
        uint64_t v18 = (unint64_t *)(Inputs + 24);
        do
        {
          unint64_t v19 = *v18;
          v18 += 4;
          --v15;
        }
        while (v15);
      }
    }
    else
    {
      *(_WORD *)(*v16 + 2 * v17) = v13;
      ++v16[1];
      if (v13) {
        goto LABEL_9;
      }
    }
    __int16 IsNegated = mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&InputAttributeNames);
    uint64_t v21 = (void *)a3[3];
    uint64_t v22 = v21[1];
    if ((unint64_t)(v22 + 1) > v21[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v21 + 3, v22 + 1, 2);
      uint64_t v22 = v21[1];
    }
    *(_WORD *)(*v21 + 2 * v22) = IsNegated;
    ++v21[1];
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    uint64_t v23 = *((void *)&v554 + 1);
    if (*((void *)&v554 + 1))
    {
      uint64_t v24 = (mlir::Block **)(v554 + 24);
      do
      {
        uint64_t v25 = *v24;
        v24 += 4;
        --v23;
      }
      while (v23);
    }
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyRewriteOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v30 = (int8x16_t *)mlir::pdl_interp::ApplyRewriteOp::getName((mlir::pdl_interp::ApplyRewriteOp *)&Rewriter);
    __int16 v32 = *(_WORD *)(*llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<>(a1 + 48, v30, v31) + 8);
    uint64_t v33 = (void *)a3[3];
    uint64_t v34 = v33[1];
    if ((unint64_t)(v34 + 1) > v33[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v33 + 3, v34 + 1, 2);
      uint64_t v34 = v33[1];
    }
    *(_WORD *)(*v33 + 2 * v34) = 1;
    ++v33[1];
    uint64_t v35 = (void *)a3[3];
    uint64_t v36 = v35[1];
    if ((unint64_t)(v36 + 1) > v35[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v35 + 3, v36 + 1, 2);
      uint64_t v36 = v35[1];
    }
    *(_WORD *)(*v35 + 2 * v36) = v32;
    ++v35[1];
    uint64_t v38 = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&Rewriter);
    uint64_t v39 = v37;
    uint64_t v40 = (void *)a3[3];
    uint64_t v41 = v40[1];
    if ((unint64_t)(v41 + 1) > v40[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v40 + 3, v41 + 1, 2);
      *(_WORD *)(*v40 + 2 * v40[1]++) = v39;
      if (v39)
      {
LABEL_48:
        uint64_t v42 = (unint64_t *)(v38 + 24);
        do
        {
          unint64_t v43 = *v42;
          v42 += 4;
          --v39;
        }
        while (v39);
      }
    }
    else
    {
      *(_WORD *)(*v40 + 2 * v41) = v37;
      ++v40[1];
      if (v37) {
        goto LABEL_48;
      }
    }
    uint64_t Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&Rewriter);
    uint64_t v46 = v44;
    uint64_t v47 = (void *)a3[3];
    uint64_t v48 = v47[1];
    if ((unint64_t)(v48 + 1) > v47[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v47 + 3, v48 + 1, 2);
      *(_WORD *)(*v47 + 2 * v47[1]++) = v46;
      if (!v46) {
        return;
      }
    }
    else
    {
      *(_WORD *)(*v47 + 2 * v48) = v44;
      ++v47[1];
      if (!v44) {
        return;
      }
    }
    uint64_t v49 = 0;
    uint64_t v50 = (uint64_t *)(a1 + 24);
    do
    {
      uint64_t NextResultAtOffset = (Operation *)mlir::detail::OpResultImpl::getNextResultAtOffset(Results, v49);
      unint64_t v52 = NextResultAtOffset;
      if (*(_UNKNOWN **)(*(void *)(*((void *)NextResultAtOffset + 1) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
      {
        uint64_t InputAttributeNames = NextResultAtOffset;
        *(void *)&long long v554 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v50, (unint64_t *)&InputAttributeNames, &v554))
        {
          __int16 v53 = *(_WORD *)(v554 + 8);
        }
        else
        {
          unint64_t v54 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v50, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
          __int16 v53 = 0;
          void *v54 = InputAttributeNames;
          *((_WORD *)v54 + 4) = 0;
        }
        uint64_t v55 = (void *)a3[3];
        uint64_t v56 = v55[1];
        if ((unint64_t)(v56 + 1) > v55[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v55 + 3, v56 + 1, 2);
          uint64_t v56 = v55[1];
        }
        *(_WORD *)(*v55 + 2 * v56) = v53;
        ++v55[1];
      }
      uint64_t v57 = (void *)a3[3];
      unint64_t v58 = (uint64_t *)a3[4];
      uint64_t InputAttributeNames = v52;
      *(void *)&long long v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v58, (unint64_t *)&InputAttributeNames, &v554))
      {
        __int16 v59 = *(_WORD *)(v554 + 8);
      }
      else
      {
        unint64_t v60 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v58, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
        __int16 v59 = 0;
        *unint64_t v60 = InputAttributeNames;
        *((_WORD *)v60 + 4) = 0;
      }
      uint64_t v61 = v57[1];
      if ((unint64_t)(v61 + 1) > v57[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v57, v57 + 3, v61 + 1, 2);
        uint64_t v61 = v57[1];
      }
      *(_WORD *)(*v57 + 2 * v61) = v59;
      ++v57[1];
      ++v49;
    }
    while (v46 != v49);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::AreEqualOp,void>::id)
  {
    Rewriter = a2;
    uint64_t Input = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    if (*(_UNKNOWN **)(*(void *)(*((void *)Input + 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      unint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Rewriter);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
      uint64_t v65 = *((void *)&v554 + 1);
      uint64_t v64 = v554;
      uint64_t v66 = (void *)a3[3];
      uint64_t v67 = v66[1];
      if ((unint64_t)(v67 + 1) > v66[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v66 + 3, v67 + 1, 2);
        uint64_t v67 = v66[1];
      }
      *(_WORD *)(*v66 + 2 * v67) = 2;
      ++v66[1];
      size_t v68 = (void *)a3[3];
      unint64_t v69 = (uint64_t *)a3[4];
      uint64_t InputAttributeNames = Input;
      *(void *)&long long v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v69, (unint64_t *)&InputAttributeNames, &v554))
      {
        __int16 v70 = *(_WORD *)(v554 + 8);
      }
      else
      {
        uint64_t v90 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v69, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
        __int16 v70 = 0;
        void *v90 = InputAttributeNames;
        *((_WORD *)v90 + 4) = 0;
      }
      uint64_t v91 = v68[1];
      if ((unint64_t)(v91 + 1) > v68[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v68, v68 + 3, v91 + 1, 2);
        uint64_t v91 = v68[1];
      }
      *(_WORD *)(*v68 + 2 * v91) = v70;
      ++v68[1];
      goto LABEL_136;
    }
    unint64_t v86 = (void *)a3[3];
    uint64_t v87 = v86[1];
    if ((unint64_t)(v87 + 1) > v86[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v86 + 3, v87 + 1, 2);
      uint64_t v87 = v86[1];
    }
    *(_WORD *)(*v86 + 2 * v87) = 3;
    ++v86[1];
    uint64_t v88 = *(void **)(*(void *)(*((void *)Input + 1) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
    {
      __int16 v89 = 0;
    }
    else if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      __int16 v89 = 1;
    }
    else if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      *(void *)&long long v554 = *((void *)Input + 1) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v554) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
        __int16 v89 = 3;
      }
      else {
        __int16 v89 = 5;
      }
    }
    else if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      __int16 v89 = 2;
    }
    else
    {
      __int16 v89 = 4 * (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    }
    uint64_t v136 = (void *)a3[3];
    uint64_t v137 = v136[1];
    if ((unint64_t)(v137 + 1) > v136[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v136 + 3, v137 + 1, 2);
      uint64_t v137 = v136[1];
    }
    *(_WORD *)(*v136 + 2 * v137) = v89;
    ++v136[1];
    uint64_t v138 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    unint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Rewriter);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    uint64_t v65 = *((void *)&v554 + 1);
    uint64_t v64 = v554;
    uint64_t v139 = (void *)a3[3];
    uint64_t v140 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v138;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v140, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v141 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unsigned int v142 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v140, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v141 = 0;
      *unsigned int v142 = InputAttributeNames;
      *((_WORD *)v142 + 4) = 0;
    }
    uint64_t v143 = v139[1];
    if ((unint64_t)(v143 + 1) > v139[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v139, v139 + 3, v143 + 1, 2);
      uint64_t v143 = v139[1];
    }
    *(_WORD *)(*v139 + 2 * v143) = v141;
LABEL_135:
    ++v139[1];
LABEL_136:
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::BranchOp,void>::id)
  {
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, a2);
    uint64_t v71 = *((void *)&v554 + 1);
    uint64_t v72 = v554;
    uint64_t v73 = (void *)a3[3];
    uint64_t v74 = v73[1];
    if ((unint64_t)(v74 + 1) > v73[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v73 + 3, v74 + 1, 2);
      uint64_t v74 = v73[1];
    }
    *(_WORD *)(*v73 + 2 * v74) = 4;
    ++v73[1];
    if (v71)
    {
      unint64_t v75 = (mlir::Block **)(v72 + 24);
      do
      {
        unint64_t v76 = *v75;
        v75 += 4;
        --v71;
      }
      while (v71);
    }
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckAttributeOp,void>::id)
  {
    Rewriter = a2;
    unint64_t v77 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    uint64_t FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    uint64_t v79 = *((void *)&v554 + 1);
    uint64_t v80 = v554;
    uint64_t v81 = (void *)a3[3];
    uint64_t v82 = v81[1];
    if ((unint64_t)(v82 + 1) > v81[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v81 + 3, v82 + 1, 2);
      uint64_t v82 = v81[1];
    }
    *(_WORD *)(*v81 + 2 * v82) = 2;
    ++v81[1];
    __int16 v83 = (void *)a3[3];
    int64_t v84 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v77;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v84, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v85 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unint64_t v99 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v84, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v85 = 0;
      *unint64_t v99 = InputAttributeNames;
      *((_WORD *)v99 + 4) = 0;
    }
    uint64_t v100 = v83[1];
    if ((unint64_t)(v100 + 1) > v83[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v83, v83 + 3, v100 + 1, 2);
      uint64_t v100 = v83[1];
    }
    *(_WORD *)(*v83 + 2 * v100) = v85;
    ++v83[1];
    unsigned int v101 = (void *)a3[3];
    uint64_t v103 = v101[1];
    if ((unint64_t)(v103 + 1) > v101[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v101, v101 + 3, v103 + 1, 2);
      *(_WORD *)(*v101 + 2 * v101[1]++) = v102;
      if (!v79) {
        return;
      }
    }
    else
    {
      *(_WORD *)(*v101 + 2 * v103) = v102;
      ++v101[1];
      if (!v79) {
        return;
      }
    }
    unint64_t v104 = (mlir::Block **)(v80 + 24);
    do
    {
      long long v105 = *v104;
      v104 += 4;
      --v79;
    }
    while (v79);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperandCountOp,void>::id)
  {
    uint64_t InputAttributeNames = a2;
    unint64_t v92 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
    int Count = mlir::pdl_interp::CheckOperandCountOp::getCount((mlir::pdl_interp::CheckOperandCountOp *)&InputAttributeNames);
    __int16 InferredResultTypes = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    uint64_t v96 = *((void *)&v554 + 1);
    uint64_t v95 = v554;
    uint64_t v97 = a3;
    __int16 v98 = 5;
LABEL_108:
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperationNameOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v106 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    uint64_t v107 = mlir::pdl_interp::ApplyRewriteOp::getName((mlir::pdl_interp::ApplyRewriteOp *)&Rewriter);
    mlir::OperationName::OperationName(&v552, v107, v108, *(void *)(a1 + 152));
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    uint64_t v109 = *((void *)&v554 + 1);
    uint64_t v110 = v554;
    int v111 = v552;
    uint64_t v112 = (void *)a3[3];
    uint64_t v113 = v112[1];
    if ((unint64_t)(v113 + 1) > v112[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v112 + 3, v113 + 1, 2);
      uint64_t v113 = v112[1];
    }
    *(_WORD *)(*v112 + 2 * v113) = 6;
    ++v112[1];
    unsigned int v114 = (void *)a3[3];
    long long v115 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v106;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v115, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v116 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unint64_t v117 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v115, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v116 = 0;
      *unint64_t v117 = InputAttributeNames;
      *((_WORD *)v117 + 4) = 0;
    }
    uint64_t v118 = v114[1];
    if ((unint64_t)(v118 + 1) > v114[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v114, v114 + 3, v118 + 1, 2);
      uint64_t v118 = v114[1];
    }
    *(_WORD *)(*v114 + 2 * v118) = v116;
    ++v114[1];
    if (v109)
    {
      unsigned int v119 = (mlir::Block **)(v110 + 24);
      do
      {
        unint64_t v120 = *v119;
        v119 += 4;
        --v109;
      }
      while (v109);
    }
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckResultCountOp,void>::id)
  {
    uint64_t InputAttributeNames = a2;
    unint64_t v92 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
    int Count = mlir::pdl_interp::CheckOperandCountOp::getCount((mlir::pdl_interp::CheckOperandCountOp *)&InputAttributeNames);
    __int16 InferredResultTypes = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    uint64_t v96 = *((void *)&v554 + 1);
    uint64_t v95 = v554;
    uint64_t v97 = a3;
    __int16 v98 = 7;
    goto LABEL_108;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypeOp,void>::id)
  {
    Rewriter = a2;
    char v121 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    uint64_t Type = mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&Rewriter);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    uint64_t v123 = *((void *)&v554 + 1);
    uint64_t v124 = v554;
    unsigned int v125 = (void *)a3[3];
    uint64_t v126 = v125[1];
    if ((unint64_t)(v126 + 1) > v125[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v125 + 3, v126 + 1, 2);
      uint64_t v126 = v125[1];
    }
    *(_WORD *)(*v125 + 2 * v126) = 2;
    ++v125[1];
    unint64_t v127 = (void *)a3[3];
    uint64_t v128 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v121;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v128, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v129 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unsigned int v144 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v128, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v129 = 0;
      *unsigned int v144 = InputAttributeNames;
      *((_WORD *)v144 + 4) = 0;
    }
    uint64_t v145 = v127[1];
    if ((unint64_t)(v145 + 1) > v127[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v127, v127 + 3, v145 + 1, 2);
      uint64_t v145 = v127[1];
    }
    *(_WORD *)(*v127 + 2 * v145) = v129;
    ++v127[1];
    uint64_t v146 = (void *)a3[3];
    uint64_t v148 = v146[1];
    if ((unint64_t)(v148 + 1) > v146[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v146, v146 + 3, v148 + 1, 2);
      *(_WORD *)(*v146 + 2 * v146[1]++) = v147;
      if (!v123) {
        return;
      }
    }
    else
    {
      *(_WORD *)(*v146 + 2 * v148) = v147;
      ++v146[1];
      if (!v123) {
        return;
      }
    }
    unint64_t v149 = (mlir::Block **)(v124 + 24);
    do
    {
      uint64_t v150 = *v149;
      v149 += 4;
      --v123;
    }
    while (v123);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypesOp,void>::id)
  {
    uint64_t InputAttributeNames = a2;
    unint64_t v130 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
    uint64_t v131 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    uint64_t v133 = *((void *)&v554 + 1);
    uint64_t v132 = v554;
    uint64_t v134 = a3;
    __int16 v135 = 8;
    goto LABEL_125;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ContinueOp,void>::id)
  {
    __int16 v151 = *(_WORD *)(a1 + 144);
    uint64_t v152 = (void *)a3[3];
    uint64_t v153 = v152[1];
    if ((unint64_t)(v153 + 1) > v152[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v152 + 3, v153 + 1, 2);
      uint64_t v153 = v152[1];
    }
    *(_WORD *)(*v152 + 2 * v153) = 9;
    ++v152[1];
    unsigned int v154 = (void *)a3[3];
    uint64_t v155 = v154[1];
    if ((unint64_t)(v155 + 1) > v154[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v154, v154 + 3, v155 + 1, 2);
      uint64_t v155 = v154[1];
    }
    *(_WORD *)(*v154 + 2 * v155) = v151 - 1;
    goto LABEL_151;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateAttributeOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v156 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    Result = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
LABEL_153:
    uint64_t InputAttributeNames = Result;
    *(void *)&long long v554 = 0;
    char v159 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)&InputAttributeNames, &v554);
    uint64_t v160 = (void *)v554;
    if ((v159 & 1) == 0)
    {
      uint64_t v160 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      *uint64_t v160 = InputAttributeNames;
      *((_WORD *)v160 + 4) = 0;
    }
    *((_WORD *)v160 + 4) = v157;
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateOperationOp,void>::id)
  {
    v551 = a2;
    char v161 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v551);
    uint64_t v162 = mlir::pdl_interp::CreateOperationOp::getName((mlir::pdl_interp::CreateOperationOp *)&v551);
    mlir::OperationName::OperationName(&v550, v162, v163, *(void *)(a1 + 152));
    uint64_t v164 = v550;
    uint64_t v165 = (void *)a3[3];
    uint64_t v166 = v165[1];
    if ((unint64_t)(v166 + 1) > v165[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v165 + 3, v166 + 1, 2);
      uint64_t v166 = v165[1];
    }
    *(_WORD *)(*v165 + 2 * v166) = 11;
    ++v165[1];
    uint64_t v167 = (void *)a3[3];
    uint64_t v168 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v161;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v168, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v169 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unint64_t v175 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v168, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v169 = 0;
      void *v175 = InputAttributeNames;
      *((_WORD *)v175 + 4) = 0;
    }
    uint64_t v176 = v167[1];
    if ((unint64_t)(v176 + 1) > v167[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v167, v167 + 3, v176 + 1, 2);
      uint64_t v176 = v167[1];
    }
    *(_WORD *)(*v167 + 2 * v176) = v169;
    ++v167[1];
    uint64_t InputOperands = mlir::pdl_interp::CreateOperationOp::getInputOperands((mlir::pdl_interp::CreateOperationOp *)&v551);
    uint64_t v179 = v177;
    int v180 = (void *)a3[3];
    uint64_t v181 = v180[1];
    if ((unint64_t)(v181 + 1) > v180[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v180 + 3, v181 + 1, 2);
      *(_WORD *)(*v180 + 2 * v180[1]++) = v179;
      if (v179)
      {
LABEL_169:
        uint64_t v182 = (unint64_t *)(InputOperands + 24);
        do
        {
          unint64_t v183 = *v182;
          v182 += 4;
          --v179;
        }
        while (v179);
      }
    }
    else
    {
      *(_WORD *)(*v180 + 2 * v181) = v177;
      ++v180[1];
      if (v177) {
        goto LABEL_169;
      }
    }
    uint64_t Offsets = mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v551);
    __int16 v186 = v185;
    *(void *)&long long v554 = Offsets;
    *((void *)&v554 + 1) = v185;
    unint64_t v187 = (void *)a3[3];
    uint64_t v188 = v187[1];
    if ((unint64_t)(v188 + 1) > v187[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v187 + 3, v188 + 1, 2);
      uint64_t v188 = v187[1];
    }
    *(_WORD *)(*v187 + 2 * v188) = v186;
    ++v187[1];
    uint64_t InputAttributeNames = (Operation *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v551);
    v549 = &v554;
    uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
    uint64_t v190 = *(void *)v549;
    uint64_t v191 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
    unint64_t v193 = (uint64_t *)(v191 + 8 * v192);
    if (v193 != Value)
    {
      uint64_t v195 = *(void *)v549;
      uint64_t v194 = *((void *)v549 + 1);
      uint64_t v196 = (Operation **)(v190 + 24);
      do
      {
        BOOL v198 = v194-- != 0;
        if (v190 == v195 && !v198) {
          break;
        }
        int v199 = *v196;
        int v200 = (void *)a3[3];
        uint64_t v202 = v200[1];
        if ((unint64_t)(v202 + 1) > v200[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v200, v200 + 3, v202 + 1, 2);
          uint64_t v202 = v200[1];
        }
        *(_WORD *)(*v200 + 2 * v202) = v201;
        ++v200[1];
        __int16 v203 = (void *)a3[3];
        uint64_t v204 = (uint64_t *)a3[4];
        v552 = v199;
        Rewriter = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v204, (unint64_t *)&v552, &Rewriter))
        {
          __int16 v205 = *((_WORD *)Rewriter + 4);
        }
        else
        {
          uint64_t v206 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v204, (uint64_t)&v552, (unint64_t *)&v552, Rewriter);
          __int16 v205 = 0;
          *uint64_t v206 = v552;
          *((_WORD *)v206 + 4) = 0;
        }
        uint64_t v207 = v203[1];
        if ((unint64_t)(v207 + 1) > v203[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v203, v203 + 3, v207 + 1, 2);
          uint64_t v207 = v203[1];
        }
        *(_WORD *)(*v203 + 2 * v207) = v205;
        ++v203[1];
        ++Value;
        v196 += 4;
      }
      while (Value != v193);
    }
    if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v551))
    {
      uint64_t Sizes = mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v551);
      uint64_t v211 = v209;
      unint64_t v212 = (void *)a3[3];
      uint64_t v213 = v212[1];
      if ((unint64_t)(v213 + 1) > v212[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v212 + 3, v213 + 1, 2);
        *(_WORD *)(*v212 + 2 * v212[1]++) = v211;
        if (!v211) {
          return;
        }
      }
      else
      {
        *(_WORD *)(*v212 + 2 * v213) = v209;
        ++v212[1];
        if (!v209) {
          return;
        }
      }
      uint64_t v214 = (unint64_t *)(Sizes + 24);
      do
      {
        unint64_t v215 = *v214;
        v214 += 4;
        --v211;
      }
      while (v211);
      return;
    }
    unsigned int v154 = (void *)a3[3];
    uint64_t v208 = v154[1];
    if ((unint64_t)(v208 + 1) > v154[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v154, v154 + 3, v208 + 1, 2);
      uint64_t v208 = v154[1];
    }
    *(_WORD *)(*v154 + 2 * v208) = -1;
LABEL_151:
    ++v154[1];
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateRangeOp,void>::id)
  {
    unint64_t v170 = *((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8;
    Rewriter = a2;
    *(void *)&long long v554 = v170;
    uint64_t v171 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v554) + 136);
    if (v171 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      uint64_t v172 = (void *)a3[3];
      uint64_t v173 = v172[1];
      if ((unint64_t)(v173 + 1) <= v172[2])
      {
        __int16 v174 = 12;
        goto LABEL_204;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v172 + 3, v173 + 1, 2);
      __int16 v174 = 12;
    }
    else
    {
      if (v171 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
        goto LABEL_205;
      }
      uint64_t v172 = (void *)a3[3];
      uint64_t v173 = v172[1];
      if ((unint64_t)(v173 + 1) <= v172[2])
      {
        __int16 v174 = 13;
LABEL_204:
        *(_WORD *)(*v172 + 2 * v173) = v174;
        ++v172[1];
LABEL_205:
        uint64_t v220 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
        uint64_t InputAttributeNames = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
        unint64_t v221 = (uint64_t *)(a1 + 24);
        *(void *)&long long v554 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v221, (unint64_t *)&InputAttributeNames, &v554))
        {
          __int16 v222 = *(_WORD *)(v554 + 8);
        }
        else
        {
          uint64_t v223 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v221, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
          __int16 v222 = 0;
          *uint64_t v223 = InputAttributeNames;
          *((_WORD *)v223 + 4) = 0;
        }
        uint64_t v224 = (void *)a3[3];
        unint64_t v225 = (uint64_t *)a3[4];
        uint64_t InputAttributeNames = v220;
        *(void *)&long long v554 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v225, (unint64_t *)&InputAttributeNames, &v554))
        {
          __int16 v226 = *(_WORD *)(v554 + 8);
        }
        else
        {
          uint64_t v227 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v225, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
          __int16 v226 = 0;
          *uint64_t v227 = InputAttributeNames;
          *((_WORD *)v227 + 4) = 0;
        }
        uint64_t v228 = v224[1];
        if ((unint64_t)(v228 + 1) > v224[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v224, v224 + 3, v228 + 1, 2);
          uint64_t v228 = v224[1];
        }
        *(_WORD *)(*v224 + 2 * v228) = v226;
        ++v224[1];
        unsigned int v229 = (void *)a3[3];
        uint64_t v230 = v229[1];
        if ((unint64_t)(v230 + 1) > v229[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v229 + 3, v230 + 1, 2);
          uint64_t v230 = v229[1];
        }
        *(_WORD *)(*v229 + 2 * v230) = v222;
        ++v229[1];
        if ((*((unsigned char *)Rewriter + 46) & 0x80) != 0)
        {
          uint64_t v231 = *((void *)Rewriter + 9);
          uint64_t v232 = *((unsigned int *)Rewriter + 17);
          unint64_t v233 = (void *)a3[3];
          uint64_t v234 = v233[1];
          unint64_t v235 = v234 + 1;
          if ((unint64_t)(v234 + 1) <= v233[2]) {
            goto LABEL_217;
          }
        }
        else
        {
          uint64_t v231 = 0;
          uint64_t v232 = 0;
          unint64_t v233 = (void *)a3[3];
          uint64_t v234 = v233[1];
          unint64_t v235 = v234 + 1;
          if ((unint64_t)(v234 + 1) <= v233[2])
          {
LABEL_217:
            *(_WORD *)(*v233 + 2 * v234) = v232;
            ++v233[1];
            if (!v232) {
              return;
            }
LABEL_218:
            uint64_t v236 = (unint64_t *)(v231 + 24);
            do
            {
              unint64_t v237 = *v236;
              v236 += 4;
              --v232;
            }
            while (v232);
            return;
          }
        }
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v233, v233 + 3, v235, 2);
        *(_WORD *)(*v233 + 2 * v233[1]++) = v232;
        if (!v232) {
          return;
        }
        goto LABEL_218;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v172 + 3, v173 + 1, 2);
      __int16 v174 = 13;
    }
    uint64_t v173 = v172[1];
    goto LABEL_204;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypeOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v216 = mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&Rewriter);
    Result = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    goto LABEL_153;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypesOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v217 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    uint64_t InputAttributeNames = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    uint64_t v218 = (uint64_t *)(a1 + 24);
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v218, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v219 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v239 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v218, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v219 = 0;
      *uint64_t v239 = InputAttributeNames;
      *((_WORD *)v239 + 4) = 0;
    }
    uint64_t v240 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    uint64_t v241 = (void *)a3[3];
    uint64_t v242 = v241[1];
    if ((unint64_t)(v242 + 1) > v241[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v241 + 3, v242 + 1, 2);
      uint64_t v242 = v241[1];
    }
    *(_WORD *)(*v241 + 2 * v242) = 10;
    ++v241[1];
    unsigned int v243 = (void *)a3[3];
    uint64_t v244 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v217;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v244, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v245 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v246 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v244, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v245 = 0;
      *uint64_t v246 = InputAttributeNames;
      *((_WORD *)v246 + 4) = 0;
    }
    uint64_t v247 = v243[1];
    if ((unint64_t)(v247 + 1) > v243[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v243, v243 + 3, v247 + 1, 2);
      uint64_t v247 = v243[1];
    }
    *(_WORD *)(*v243 + 2 * v247) = v245;
    ++v243[1];
    unsigned int v248 = (void *)a3[3];
    uint64_t v249 = v248[1];
    if ((unint64_t)(v249 + 1) > v248[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v248 + 3, v249 + 1, 2);
      uint64_t v249 = v248[1];
    }
    *(_WORD *)(*v248 + 2 * v249) = v219;
    ++v248[1];
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::EraseOp,void>::id)
  {
    *(void *)&long long v554 = a2;
    unint64_t v238 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v554);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ExtractOp,void>::id)
  {
    Rewriter = a2;
    unint64_t v250 = *(void **)(*(void *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136);
    if (v250 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      __int16 v251 = 15;
    }
    else if (v250 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
    {
      __int16 v251 = 17;
    }
    else
    {
      __int16 v251 = 16 * (v250 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
    }
    unsigned int v274 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    unsigned int Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&Rewriter);
    unsigned int v276 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    uint64_t v277 = (void *)a3[3];
    uint64_t v278 = v277[1];
    if ((unint64_t)(v278 + 1) > v277[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v277 + 3, v278 + 1, 2);
      uint64_t v278 = v277[1];
    }
    *(_WORD *)(*v277 + 2 * v278) = v251;
    ++v277[1];
    unint64_t v279 = (void *)a3[3];
    unsigned int v280 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v274;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v280, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v281 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unint64_t v282 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v280, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v281 = 0;
      *unint64_t v282 = InputAttributeNames;
      *((_WORD *)v282 + 4) = 0;
    }
    uint64_t v283 = v279[1];
    if ((unint64_t)(v283 + 1) > v279[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v279, v279 + 3, v283 + 1, 2);
      uint64_t v283 = v279[1];
    }
    *(_WORD *)(*v279 + 2 * v283) = v281;
    ++v279[1];
    v284 = (void *)a3[3];
    uint64_t v285 = v284[1];
    if (v284[2] < (unint64_t)(v285 + 2))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v284 + 3, v285 + 2, 2);
      uint64_t v285 = v284[1];
    }
    *(_DWORD *)(*v284 + 2 * v285) = Index;
    v284[1] += 2;
    goto LABEL_287;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::FinalizeOp,void>::id)
  {
    unsigned int v154 = (void *)a3[3];
    uint64_t v252 = v154[1];
    if ((unint64_t)(v252 + 1) > v154[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v154, v154 + 3, v252 + 1, 2);
      uint64_t v252 = v154[1];
    }
    *(_WORD *)(*v154 + 2 * v252) = 18;
    goto LABEL_151;
  }
  if (a2 && v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ForEachOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v26 = *(void *)(mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&Rewriter) + 8);
    if (v26) {
      uint64_t v27 = v26 - 8;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v28 = **(Operation ***)(v27 + 48);
    uint64_t InputAttributeNames = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 24), (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v29 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v262 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>(a1 + 24, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v29 = 0;
      *uint64_t v262 = InputAttributeNames;
      *((_WORD *)v262 + 4) = 0;
    }
    uint64_t v263 = (void *)a3[3];
    uint64_t v264 = v263[1];
    if ((unint64_t)(v264 + 1) > v263[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v263 + 3, v264 + 1, 2);
      uint64_t v264 = v263[1];
    }
    *(_WORD *)(*v263 + 2 * v264) = 19;
    ++v263[1];
    uint64_t v265 = (void *)a3[3];
    uint64_t v266 = v265[1];
    if ((unint64_t)(v266 + 1) > v265[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v265 + 3, v266 + 1, 2);
      uint64_t v266 = v265[1];
    }
    *(_WORD *)(*v265 + 2 * v266) = v29;
    ++v265[1];
    unsigned int v267 = (void *)a3[3];
    v268 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v28;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v268, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v269 = *(_WORD *)(v554 + 8);
    }
    else
    {
      char v270 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v268, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v269 = 0;
      *char v270 = InputAttributeNames;
      *((_WORD *)v270 + 4) = 0;
    }
    uint64_t v271 = v267[1];
    if ((unint64_t)(v271 + 1) > v267[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v267, v267 + 3, v271 + 1, 2);
      uint64_t v271 = v267[1];
    }
    *(_WORD *)(*v267 + 2 * v271) = v269;
    ++v267[1];
    uint64_t v272 = *(void **)(*(void *)(*((void *)v28 + 1) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
    {
      __int16 v273 = 0;
    }
    else if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      __int16 v273 = 1;
    }
    else if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      *(void *)&long long v554 = *((void *)v28 + 1) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v554) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
        __int16 v273 = 3;
      }
      else {
        __int16 v273 = 5;
      }
    }
    else if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      __int16 v273 = 2;
    }
    else
    {
      __int16 v273 = 4 * (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    }
    unint64_t v340 = (void *)a3[3];
    uint64_t v341 = v340[1];
    if ((unint64_t)(v341 + 1) > v340[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v340 + 3, v341 + 1, 2);
      uint64_t v341 = v340[1];
    }
    *(_WORD *)(*v340 + 2 * v341) = v273;
    ++v340[1];
    __int16 v342 = *(_WORD *)(a1 + 144);
    Successor = (mlir::Block *)mlir::pdl_interp::ForEachOp::getSuccessor((mlir::pdl_interp::ForEachOp *)&Rewriter);
    long long v344 = (void *)a3[3];
    uint64_t v345 = v344[1];
    if ((unint64_t)(v345 + 1) > v344[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v344 + 3, v345 + 1, 2);
      uint64_t v345 = v344[1];
    }
    *(_WORD *)(*v344 + 2 * v345) = v342;
    ++v344[1];
    unsigned __int16 v346 = *(_WORD *)(a1 + 144) + 1;
    *(_WORD *)(a1 + 144) = v346;
    uint64_t v347 = *(unsigned __int16 **)(a1 + 248);
    if (*v347 < v346) {
      *uint64_t v347 = v346;
    }
    unint64_t Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&Rewriter);
    --*(_WORD *)(a1 + 144);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v290 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    unsigned int v291 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    uint64_t v292 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    uint64_t v293 = (void *)a3[3];
    uint64_t v294 = v293[1];
    if ((unint64_t)(v294 + 1) > v293[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v293 + 3, v294 + 1, 2);
      uint64_t v294 = v293[1];
    }
    *(_WORD *)(*v293 + 2 * v294) = 20;
    ++v293[1];
    unint64_t v295 = (void *)a3[3];
    v296 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v290;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v296, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v297 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v304 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v296, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v297 = 0;
      *uint64_t v304 = InputAttributeNames;
      *((_WORD *)v304 + 4) = 0;
    }
    uint64_t v305 = v295[1];
    if ((unint64_t)(v305 + 1) > v295[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v295, v295 + 3, v305 + 1, 2);
      uint64_t v305 = v295[1];
    }
    *(_WORD *)(*v295 + 2 * v305) = v297;
    ++v295[1];
    uint64_t v306 = (void *)a3[3];
    unint64_t v307 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v291;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v307, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v308 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v309 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v307, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v308 = 0;
      *uint64_t v309 = InputAttributeNames;
      *((_WORD *)v309 + 4) = 0;
    }
    uint64_t v310 = v306[1];
    if ((unint64_t)(v310 + 1) > v306[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v306, v306 + 3, v310 + 1, 2);
      uint64_t v310 = v306[1];
    }
    *(_WORD *)(*v306 + 2 * v310) = v308;
    ++v306[1];
    v287 = (void *)a3[3];
    uint64_t v311 = a3[4];
    uint64_t v312 = *(void *)(v311 + 120);
    __int16 v313 = **(_WORD **)(v311 + 216);
    unsigned int v314 = *(_DWORD *)(v311 + 136);
    if (v314)
    {
      unsigned int v315 = (v314 - 1) & ((v292 >> 4) ^ (v292 >> 9));
      unsigned int v316 = (uint64_t *)(v312 + 16 * v315);
      uint64_t v317 = *v316;
      if (*v316 == v292)
      {
LABEL_388:
        __int16 v288 = *((_WORD *)v316 + 4);
LABEL_389:
        uint64_t v384 = v287[1];
        if ((unint64_t)(v384 + 1) > v287[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v287, v287 + 3, v384 + 1, 2);
          uint64_t v384 = v287[1];
        }
        *(_WORD *)(*v287 + 2 * v384) = v288;
        ++v287[1];
        return;
      }
      uint64_t v318 = 0;
      int v319 = 1;
      while (v317 != -4096)
      {
        if (v318) {
          BOOL v320 = 0;
        }
        else {
          BOOL v320 = v317 == -8192;
        }
        if (v320) {
          uint64_t v318 = v316;
        }
        unsigned int v321 = v315 + v319++;
        unsigned int v315 = v321 & (v314 - 1);
        unsigned int v316 = (uint64_t *)(v312 + 16 * v315);
        uint64_t v317 = *v316;
        if (*v316 == v292) {
          goto LABEL_388;
        }
      }
      if (v318) {
        unsigned int v316 = v318;
      }
    }
    else
    {
      unsigned int v316 = 0;
    }
    uint64_t v324 = *(void *)(*(void *)(v311 + 184) + 8) - **(void **)(v311 + 184);
    int v325 = *(_DWORD *)(v311 + 128);
    if (4 * v325 + 4 >= 3 * v314)
    {
      v314 *= 2;
    }
    else if (v314 + ~v325 - *(_DWORD *)(v311 + 132) > v314 >> 3)
    {
      goto LABEL_329;
    }
    llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(v311 + 120, v314);
    uint64_t v488 = *(void *)(v311 + 120);
    int v489 = *(_DWORD *)(v311 + 136) - 1;
    unsigned int v490 = v489 & ((v292 >> 4) ^ (v292 >> 9));
    unsigned int v316 = (uint64_t *)(v488 + 16 * v490);
    uint64_t v491 = *v316;
    if (*v316 == v292)
    {
      uint64_t v326 = v292;
      goto LABEL_330;
    }
    v544 = 0;
    int v545 = 1;
    while (v491 != -4096)
    {
      if (v544) {
        BOOL v546 = 0;
      }
      else {
        BOOL v546 = v491 == -8192;
      }
      if (v546) {
        v544 = v316;
      }
      unsigned int v547 = v490 + v545++;
      unsigned int v490 = v547 & v489;
      unsigned int v316 = (uint64_t *)(v488 + 16 * v490);
      uint64_t v491 = *v316;
      uint64_t v326 = v292;
      if (*v316 == v292) {
        goto LABEL_330;
      }
    }
    if (v544) {
      unsigned int v316 = v544;
    }
LABEL_329:
    uint64_t v326 = *v316;
LABEL_330:
    ++*(_DWORD *)(v311 + 128);
    if (v326 != -4096) {
      --*(_DWORD *)(v311 + 132);
    }
    *unsigned int v316 = v292;
    *((_WORD *)v316 + 4) = v313 + (v324 >> 3);
    v327 = *(uint64_t ***)(v311 + 184);
    unsigned int v329 = v327[1];
    unint64_t v328 = (unint64_t)v327[2];
    if ((unint64_t)v329 >= v328)
    {
      unsigned int v349 = *v327;
      uint64_t v350 = (char *)v329 - (char *)*v327;
      uint64_t v351 = v350 >> 3;
      unint64_t v352 = (v350 >> 3) + 1;
      if (v352 >> 61) {
        abort();
      }
      uint64_t v353 = v328 - (void)v349;
      if (v353 >> 2 > v352) {
        unint64_t v352 = v353 >> 2;
      }
      if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v354 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v354 = v352;
      }
      if (v354)
      {
        if (v354 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        v355 = operator new(8 * v354);
      }
      else
      {
        v355 = 0;
      }
      v373 = (uint64_t *)&v355[8 * v351];
      uint64_t v374 = (uint64_t *)&v355[8 * v354];
      uint64_t *v373 = v292;
      BOOL v330 = v373 + 1;
      if (v329 != v349)
      {
        unint64_t v375 = (char *)v329 - (char *)v349 - 8;
        if (v375 < 0x58) {
          goto LABEL_603;
        }
        if ((unint64_t)((char *)v329 - v355 - v350) < 0x20) {
          goto LABEL_603;
        }
        uint64_t v376 = (v375 >> 3) + 1;
        uint64_t v377 = 8 * (v376 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v378 = &v329[v377 / 0xFFFFFFFFFFFFFFF8];
        v373 = (uint64_t *)((char *)v373 - v377);
        unsigned int v379 = &v355[8 * v351 - 16];
        uint64_t v380 = v329 - 2;
        uint64_t v381 = v376 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v382 = *(_OWORD *)v380;
          *(v379 - 1) = *((_OWORD *)v380 - 1);
          *unsigned int v379 = v382;
          v379 -= 2;
          v380 -= 4;
          v381 -= 4;
        }
        while (v381);
        unsigned int v329 = v378;
        if (v376 != (v376 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_603:
          do
          {
            uint64_t v383 = *--v329;
            *--v373 = v383;
          }
          while (v329 != v349);
        }
        unsigned int v329 = *v327;
      }
      void *v327 = v373;
      v327[1] = v330;
      v327[2] = v374;
      if (v329) {
        operator delete(v329);
      }
    }
    else
    {
      *unsigned int v329 = v292;
      BOOL v330 = v329 + 1;
    }
    v327[1] = v330;
    goto LABEL_388;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeTypeOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v298 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    unsigned int v276 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    uint64_t v299 = (void *)a3[3];
    uint64_t v300 = v299[1];
    if ((unint64_t)(v300 + 1) > v299[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v299 + 3, v300 + 1, 2);
      uint64_t v300 = v299[1];
    }
    *(_WORD *)(*v299 + 2 * v300) = 21;
    ++v299[1];
    uint64_t v301 = (void *)a3[3];
    uint64_t v302 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v298;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v302, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v303 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unsigned int v331 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v302, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v303 = 0;
      *unsigned int v331 = InputAttributeNames;
      *((_WORD *)v331 + 4) = 0;
    }
    uint64_t v332 = v301[1];
    if ((unint64_t)(v332 + 1) > v301[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v301, v301 + 3, v332 + 1, 2);
      uint64_t v332 = v301[1];
    }
    *(_WORD *)(*v301 + 2 * v332) = v303;
    ++v301[1];
LABEL_287:
    v287 = (void *)a3[3];
    unint64_t v286 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v276;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v286, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v288 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v289 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v286, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v288 = 0;
      *uint64_t v289 = InputAttributeNames;
      *((_WORD *)v289 + 4) = 0;
    }
    goto LABEL_389;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetDefiningOpOp,void>::id)
  {
    *(void *)&long long v554 = a2;
    unint64_t v322 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v554);
    unint64_t v323 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v554);
LABEL_322:
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandOp,void>::id)
  {
    *(void *)&long long v554 = a2;
    unsigned int v333 = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v554);
    unsigned int v334 = v333;
    if (v333 > 3)
    {
      int v364 = (void *)a3[3];
      uint64_t v365 = v364[1];
      if ((unint64_t)(v365 + 1) > v364[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v364 + 3, v365 + 1, 2);
        uint64_t v365 = v364[1];
      }
      *(_WORD *)(*v364 + 2 * v365) = 27;
      ++v364[1];
      unsigned int v366 = (void *)a3[3];
      uint64_t v338 = v366 + 1;
      uint64_t v367 = v366[1];
      if (v366[2] < (unint64_t)(v367 + 2))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v366 + 3, v367 + 2, 2);
        uint64_t v367 = v366[1];
      }
      *(_DWORD *)(*v366 + 2 * v367) = v334;
      uint64_t v339 = 2;
    }
    else
    {
      __int16 v335 = v333 + 23;
      unint64_t v336 = (void *)a3[3];
      uint64_t v338 = v336 + 1;
      uint64_t v337 = v336[1];
      if ((unint64_t)(v337 + 1) > v336[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v336 + 3, v337 + 1, 2);
        uint64_t v337 = v336[1];
      }
      *(_WORD *)(*v336 + 2 * v337) = v335;
      uint64_t v339 = 1;
    }
    goto LABEL_405;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandsOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v356 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    uint64_t v357 = mlir::pdl::ResultsOp::getIndex((mlir::pdl::ResultsOp *)&Rewriter);
    if ((v357 & 0xFF00000000) != 0) {
      int v358 = v357;
    }
    else {
      int v358 = -1;
    }
    unint64_t v359 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    if (*(_UNKNOWN **)(*(void *)(*((void *)v356 + 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      uint64_t v360 = (void *)a3[3];
      uint64_t v361 = v360[1];
      unint64_t v362 = v361 + 1;
      if ((unint64_t)(v361 + 1) > v360[2])
      {
LABEL_397:
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v360, v360 + 3, v362, 2);
        __int16 v363 = -1;
LABEL_442:
        uint64_t v361 = v360[1];
        goto LABEL_456;
      }
LABEL_366:
      __int16 v363 = -1;
      goto LABEL_456;
    }
    uint64_t InputAttributeNames = v356;
    unsigned int v388 = (uint64_t *)(a1 + 24);
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v388, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v363 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unsigned int v398 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v388, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v363 = 0;
      *unsigned int v398 = InputAttributeNames;
      *((_WORD *)v398 + 4) = 0;
    }
    uint64_t v360 = (void *)a3[3];
    uint64_t v361 = v360[1];
    unint64_t v399 = v361 + 1;
    if ((unint64_t)(v361 + 1) <= v360[2]) {
      goto LABEL_456;
    }
LABEL_441:
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v360, v360 + 3, v399, 2);
    goto LABEL_442;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultOp,void>::id)
  {
    *(void *)&long long v554 = a2;
    unsigned int v368 = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v554);
    unsigned int v369 = v368;
    if (v368 > 3)
    {
      unint64_t v389 = (void *)a3[3];
      uint64_t v390 = v389[1];
      if ((unint64_t)(v390 + 1) > v389[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v389 + 3, v390 + 1, 2);
        uint64_t v390 = v389[1];
      }
      *(_WORD *)(*v389 + 2 * v390) = 33;
      ++v389[1];
      unsigned int v391 = (void *)a3[3];
      uint64_t v338 = v391 + 1;
      uint64_t v392 = v391[1];
      if (v391[2] < (unint64_t)(v392 + 2))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v391 + 3, v392 + 2, 2);
        uint64_t v392 = v391[1];
      }
      *(_DWORD *)(*v391 + 2 * v392) = v369;
      uint64_t v339 = 2;
    }
    else
    {
      __int16 v370 = v368 + 29;
      uint64_t v371 = (void *)a3[3];
      uint64_t v338 = v371 + 1;
      uint64_t v372 = v371[1];
      if ((unint64_t)(v372 + 1) > v371[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v371 + 3, v372 + 1, 2);
        uint64_t v372 = v371[1];
      }
      *(_WORD *)(*v371 + 2 * v372) = v370;
      uint64_t v339 = 1;
    }
LABEL_405:
    *v338 += v339;
    unint64_t v393 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v554);
    unint64_t v394 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v554);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v356 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    uint64_t v385 = mlir::pdl::ResultsOp::getIndex((mlir::pdl::ResultsOp *)&Rewriter);
    if ((v385 & 0xFF00000000) != 0) {
      int v386 = v385;
    }
    else {
      int v386 = -1;
    }
    unint64_t v387 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    if (*(_UNKNOWN **)(*(void *)(*((void *)v356 + 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      uint64_t v360 = (void *)a3[3];
      uint64_t v361 = v360[1];
      unint64_t v362 = v361 + 1;
      if ((unint64_t)(v361 + 1) > v360[2]) {
        goto LABEL_397;
      }
      goto LABEL_366;
    }
    uint64_t InputAttributeNames = v356;
    uint64_t v406 = (uint64_t *)(a1 + 24);
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v406, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v363 = *(_WORD *)(v554 + 8);
    }
    else
    {
      int64_t v418 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v406, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v363 = 0;
      *int64_t v418 = InputAttributeNames;
      *((_WORD *)v418 + 4) = 0;
    }
    uint64_t v360 = (void *)a3[3];
    uint64_t v361 = v360[1];
    unint64_t v399 = v361 + 1;
    if ((unint64_t)(v361 + 1) <= v360[2]) {
      goto LABEL_456;
    }
    goto LABEL_441;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetUsersOp,void>::id)
  {
    Rewriter = a2;
    uint64_t v395 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    uint64_t InputAttributeNames = v395;
    unsigned int v396 = (uint64_t *)(a1 + 24);
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v396, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v397 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unint64_t v407 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v396, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v397 = 0;
      *unint64_t v407 = InputAttributeNames;
      *((_WORD *)v407 + 4) = 0;
    }
    uint64_t v408 = (void *)a3[3];
    uint64_t v409 = v408[1];
    if ((unint64_t)(v409 + 1) > v408[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v408 + 3, v409 + 1, 2);
      uint64_t v409 = v408[1];
    }
    *(_WORD *)(*v408 + 2 * v409) = 35;
    ++v408[1];
    int32x4_t v410 = (void *)a3[3];
    uint64_t v411 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v395;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v411, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v412 = *(_WORD *)(v554 + 8);
    }
    else
    {
      int v413 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v411, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v412 = 0;
      *int v413 = InputAttributeNames;
      *((_WORD *)v413 + 4) = 0;
    }
    uint64_t v414 = v410[1];
    if ((unint64_t)(v414 + 1) > v410[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v410, v410 + 3, v414 + 1, 2);
      uint64_t v414 = v410[1];
    }
    *(_WORD *)(*v410 + 2 * v414) = v412;
    ++v410[1];
    uint64_t v415 = (void *)a3[3];
    uint64_t v416 = v415[1];
    if ((unint64_t)(v416 + 1) > v415[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v415 + 3, v416 + 1, 2);
      uint64_t v416 = v415[1];
    }
    *(_WORD *)(*v415 + 2 * v416) = v397;
    ++v415[1];
    unint64_t v323 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    goto LABEL_322;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetValueTypeOp,void>::id)
  {
    Rewriter = a2;
    unsigned int v400 = *(void **)(*(void *)(*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 136);
    BOOL v401 = (Operation *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter);
    unsigned int v402 = v401;
    if (v400 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      uint64_t InputAttributeNames = v401;
      uint64_t v425 = (uint64_t *)(a1 + 24);
      *(void *)&long long v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v425, (unint64_t *)&InputAttributeNames, &v554))
      {
        __int16 v426 = *(_WORD *)(v554 + 8);
      }
      else
      {
        unint64_t v433 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v425, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
        __int16 v426 = 0;
        *unint64_t v433 = InputAttributeNames;
        *((_WORD *)v433 + 4) = 0;
      }
      uint64_t v356 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
      unsigned int v434 = (void *)a3[3];
      uint64_t v435 = v434[1];
      if ((unint64_t)(v435 + 1) > v434[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v434 + 3, v435 + 1, 2);
        uint64_t v435 = v434[1];
      }
      *(_WORD *)(*v434 + 2 * v435) = 37;
      ++v434[1];
      uint64_t v436 = (void *)a3[3];
      uint64_t v437 = (uint64_t *)a3[4];
      uint64_t InputAttributeNames = v402;
      *(void *)&long long v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v437, (unint64_t *)&InputAttributeNames, &v554))
      {
        __int16 v438 = *(_WORD *)(v554 + 8);
      }
      else
      {
        uint64_t v439 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v437, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
        __int16 v438 = 0;
        *uint64_t v439 = InputAttributeNames;
        *((_WORD *)v439 + 4) = 0;
      }
      uint64_t v440 = v436[1];
      if ((unint64_t)(v440 + 1) > v436[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v436, v436 + 3, v440 + 1, 2);
        uint64_t v440 = v436[1];
      }
      *(_WORD *)(*v436 + 2 * v440) = v438;
      ++v436[1];
      uint64_t v360 = (void *)a3[3];
      uint64_t v441 = v360[1];
      if ((unint64_t)(v441 + 1) > v360[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v360 + 3, v441 + 1, 2);
        uint64_t v441 = v360[1];
      }
      *(_WORD *)(*v360 + 2 * v441) = v426;
      goto LABEL_457;
    }
    uint64_t v356 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
    uint64_t v403 = (void *)a3[3];
    uint64_t v404 = v403[1];
    if ((unint64_t)(v404 + 1) > v403[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v403 + 3, v404 + 1, 2);
      uint64_t v404 = v403[1];
    }
    *(_WORD *)(*v403 + 2 * v404) = 36;
    ++v403[1];
    uint64_t v360 = (void *)a3[3];
    uint64_t v405 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v402;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v405, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v363 = *(_WORD *)(v554 + 8);
    }
    else
    {
      uint64_t v427 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v405, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v363 = 0;
      *uint64_t v427 = InputAttributeNames;
      *((_WORD *)v427 + 4) = 0;
    }
    uint64_t v361 = v360[1];
    if ((unint64_t)(v361 + 1) > v360[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v360, v360 + 3, v361 + 1, 2);
      uint64_t v361 = v360[1];
    }
LABEL_456:
    *(_WORD *)(*v360 + 2 * v361) = v363;
LABEL_457:
    ++v360[1];
    v429 = (void *)a3[3];
    unsigned int v428 = (uint64_t *)a3[4];
    uint64_t InputAttributeNames = v356;
    *(void *)&long long v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v428, (unint64_t *)&InputAttributeNames, &v554))
    {
      __int16 v430 = *(_WORD *)(v554 + 8);
    }
    else
    {
      unsigned int v431 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v428, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
      __int16 v430 = 0;
      *unsigned int v431 = InputAttributeNames;
      *((_WORD *)v431 + 4) = 0;
    }
    uint64_t v432 = v429[1];
    if ((unint64_t)(v432 + 1) > v429[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v429, v429 + 3, v432 + 1, 2);
      uint64_t v432 = v429[1];
    }
    *(_WORD *)(*v429 + 2 * v432) = v430;
    ++v429[1];
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::IsNotNullOp,void>::id)
  {
    uint64_t InputAttributeNames = a2;
    unint64_t Filter = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    uint64_t v65 = *((void *)&v554 + 1);
    uint64_t v64 = v554;
    uint64_t v139 = (void *)a3[3];
    uint64_t v417 = v139[1];
    if ((unint64_t)(v417 + 1) > v139[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v139 + 3, v417 + 1, 2);
      uint64_t v417 = v139[1];
    }
    *(_WORD *)(*v139 + 2 * v417) = 38;
    goto LABEL_135;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::RecordMatchOp,void>::id) {
    uint64_t v253 = a2;
  }
  else {
    uint64_t v253 = 0;
  }
  if (v253)
  {
    v552 = v253;
    uint64_t v254 = *(void *)(a1 + 208);
    char v255 = *(uint64_t **)(a1 + 256);
    int v256 = *((_DWORD *)v255 + 4);
    if (v256)
    {
      uint64_t v257 = *v255;
      unsigned int v258 = v256 - 1;
      uint64_t v259 = (v256 - 1) & ((v253 >> 4) ^ (v253 >> 9));
      uint64_t v260 = *(Operation **)(v257 + 16 * v259);
      if (v260 == v253)
      {
LABEL_259:
        uint64_t v261 = *(void *)(v257 + 16 * v259 + 8);
        goto LABEL_533;
      }
      int v502 = 1;
      while (v260 != (Operation *)-4096)
      {
        int v503 = v259 + v502++;
        uint64_t v259 = v503 & v258;
        uint64_t v260 = *(Operation **)(v257 + 16 * v259);
        if (v260 == v253) {
          goto LABEL_259;
        }
      }
    }
    uint64_t v261 = 0;
LABEL_533:
    int v504 = *(_DWORD *)(v254 + 8);
    Rewriter = (Operation *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v552);
    uint64_t InputAttributeNames = (Operation *)mlir::SymbolRefAttr::getLeafReference((mlir::SymbolRefAttr *)&Rewriter);
    uint64_t AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&InputAttributeNames);
    v507 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(a1 + 96, AttrData, v506);
    mlir::detail::PDLByteCodePattern::create((uint64_t)v253, v261, *(_DWORD *)(*v507 + 8), (uint64_t)&v554);
    unsigned int v508 = *(_DWORD *)(v254 + 8);
    if (v508 >= *(_DWORD *)(v254 + 12))
    {
      llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCodePattern,false>::growAndEmplaceBack<mlir::detail::PDLByteCodePattern>(v254, &v554);
      v517 = v560;
      if (v560 != &v563) {
LABEL_554:
      }
        free(v517);
LABEL_555:
      if (__src != v559) {
        free(__src);
      }
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, v552);
      uint64_t MatchedOps = mlir::pdl_interp::RecordMatchOp::getMatchedOps((mlir::pdl_interp::RecordMatchOp *)&v552);
      uint64_t v520 = v519;
      uint64_t v521 = *((void *)&v554 + 1);
      uint64_t v522 = v554;
      v523 = (void *)a3[3];
      uint64_t v524 = v523[1];
      if ((unint64_t)(v524 + 1) > v523[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v523 + 3, v524 + 1, 2);
        uint64_t v524 = v523[1];
      }
      *(_WORD *)(*v523 + 2 * v524) = 39;
      ++v523[1];
      v525 = (void *)a3[3];
      uint64_t v526 = v525[1];
      if ((unint64_t)(v526 + 1) > v525[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v525 + 3, v526 + 1, 2);
        *(_WORD *)(*v525 + 2 * v525[1]++) = v504;
        if (!v521) {
          goto LABEL_563;
        }
      }
      else
      {
        *(_WORD *)(*v525 + 2 * v526) = v504;
        ++v525[1];
        if (!v521) {
          goto LABEL_563;
        }
      }
      v527 = (mlir::Block **)(v522 + 24);
      do
      {
        v528 = *v527;
        v527 += 4;
        --v521;
      }
      while (v521);
LABEL_563:
      v529 = (void *)a3[3];
      uint64_t v530 = v529[1];
      if ((unint64_t)(v530 + 1) > v529[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v529 + 3, v530 + 1, 2);
        *(_WORD *)(*v529 + 2 * v529[1]++) = v520;
        if (v520)
        {
LABEL_565:
          v531 = (Operation **)(MatchedOps + 24);
          do
          {
            v532 = (void *)a3[3];
            v533 = (uint64_t *)a3[4];
            Rewriter = *v531;
            uint64_t InputAttributeNames = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v533, (unint64_t *)&Rewriter, &InputAttributeNames))
            {
              __int16 v534 = *((_WORD *)InputAttributeNames + 4);
            }
            else
            {
              v535 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v533, (uint64_t)&Rewriter, (unint64_t *)&Rewriter, InputAttributeNames);
              __int16 v534 = 0;
              void *v535 = Rewriter;
              *((_WORD *)v535 + 4) = 0;
            }
            uint64_t v536 = v532[1];
            if ((unint64_t)(v536 + 1) > v532[2])
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v532, v532 + 3, v536 + 1, 2);
              uint64_t v536 = v532[1];
            }
            *(_WORD *)(*v532 + 2 * v536) = v534;
            ++v532[1];
            v531 += 4;
            --v520;
          }
          while (v520);
        }
      }
      else
      {
        *(_WORD *)(*v529 + 2 * v530) = v520;
        ++v529[1];
        if (v520) {
          goto LABEL_565;
        }
      }
      uint64_t v538 = mlir::pdl_interp::RecordMatchOp::getInputs((mlir::pdl_interp::RecordMatchOp *)&v552);
      uint64_t v539 = v537;
      v540 = (void *)a3[3];
      uint64_t v541 = v540[1];
      if ((unint64_t)(v541 + 1) > v540[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v540 + 3, v541 + 1, 2);
        *(_WORD *)(*v540 + 2 * v540[1]++) = v539;
        if (!v539) {
          return;
        }
      }
      else
      {
        *(_WORD *)(*v540 + 2 * v541) = v537;
        ++v540[1];
        if (!v537) {
          return;
        }
      }
      v542 = (unint64_t *)(v538 + 24);
      do
      {
        unint64_t v543 = *v542;
        v542 += 4;
        --v539;
      }
      while (v539);
      return;
    }
    uint64_t v509 = *(void *)v254 + 104 * v508;
    long long v510 = v554;
    *(void *)(v509 + 16) = v555;
    *(_OWORD *)uint64_t v509 = v510;
    v511 = (void *)(v509 + 40);
    *(void *)(v509 + 24) = v509 + 40;
    *(void *)(v509 + 32) = 0x200000000;
    unsigned int v512 = v557;
    if (!v557 || (long long *)v509 == &v554)
    {
LABEL_545:
      long long v515 = v559[1];
      *(void *)(v509 + 72) = v509 + 88;
      *(_OWORD *)(v509 + 56) = v515;
      *(void *)(v509 + 80) = 0;
      unsigned int v516 = v561;
      if (v561 && (long long *)v509 != &v554)
      {
        if (v560 == &v563)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v509 + 72, (void *)(v509 + 88), v561, 16);
          if (v561) {
            memcpy(*(void **)(v509 + 72), v560, 16 * v561);
          }
          *(_DWORD *)(v509 + 80) = v516;
        }
        else
        {
          *(void *)(v509 + 72) = v560;
          *(_DWORD *)(v509 + 80) = v516;
          *(_DWORD *)(v509 + 84) = v562;
          v560 = &v563;
          int v562 = 0;
        }
        unsigned int v561 = 0;
      }
      *(_OWORD *)(v509 + 88) = v563;
      ++*(_DWORD *)(v254 + 8);
      v517 = v560;
      if (v560 != &v563) {
        goto LABEL_554;
      }
      goto LABEL_555;
    }
    v513 = __src;
    if (__src != v559)
    {
      *(void *)(v509 + 24) = __src;
      *(_DWORD *)(v509 + 32) = v512;
      *(_DWORD *)(v509 + 36) = v558;
      char __src = v559;
      int v558 = 0;
LABEL_544:
      unsigned int v557 = 0;
      goto LABEL_545;
    }
    if (v557 < 3)
    {
      uint64_t v514 = v557;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v509 + 24, (void *)(v509 + 40), v557, 8);
      uint64_t v514 = v557;
      if (!v557)
      {
LABEL_543:
        *(_DWORD *)(v509 + 32) = v512;
        goto LABEL_544;
      }
      v513 = __src;
      v511 = *(void **)(v509 + 24);
    }
    memcpy(v511, v513, 8 * v514);
    goto LABEL_543;
  }
  if (v5 != &mlir::detail::TypeIDResolver<mlir::pdl_interp::ReplaceOp,void>::id)
  {
    if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchAttributeOp,void>::id)
    {
      Rewriter = a2;
      uint64_t v450 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
      uint64_t v451 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
      uint64_t v452 = *((void *)&v554 + 1);
      uint64_t v453 = v554;
      long long v454 = (void *)a3[3];
      uint64_t v455 = v454[1];
      if ((unint64_t)(v455 + 1) > v454[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v454 + 3, v455 + 1, 2);
        uint64_t v455 = v454[1];
      }
      *(_WORD *)(*v454 + 2 * v455) = 41;
      ++v454[1];
      v456 = (void *)a3[3];
      v457 = (uint64_t *)a3[4];
      uint64_t InputAttributeNames = v450;
      *(void *)&long long v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v457, (unint64_t *)&InputAttributeNames, &v554))
      {
        __int16 v458 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v468 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v457, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
        __int16 v458 = 0;
        void *v468 = InputAttributeNames;
        *((_WORD *)v468 + 4) = 0;
      }
      uint64_t v469 = v456[1];
      if ((unint64_t)(v469 + 1) > v456[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v456, v456 + 3, v469 + 1, 2);
        uint64_t v469 = v456[1];
      }
      *(_WORD *)(*v456 + 2 * v469) = v458;
      ++v456[1];
      if (v452)
      {
        v470 = (mlir::Block **)(v453 + 24);
        do
        {
          v471 = *v470;
          v470 += 4;
          --v452;
        }
        while (v452);
      }
      return;
    }
    if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypeOp,void>::id)
    {
      Rewriter = a2;
      v459 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
      uint64_t v460 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
      uint64_t v461 = *((void *)&v554 + 1);
      uint64_t v462 = v554;
      v463 = (void *)a3[3];
      uint64_t v464 = v463[1];
      if ((unint64_t)(v464 + 1) > v463[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v463 + 3, v464 + 1, 2);
        uint64_t v464 = v463[1];
      }
      *(_WORD *)(*v463 + 2 * v464) = 45;
      ++v463[1];
      v465 = (void *)a3[3];
      v466 = (uint64_t *)a3[4];
      uint64_t InputAttributeNames = v459;
      *(void *)&long long v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v466, (unint64_t *)&InputAttributeNames, &v554))
      {
        __int16 v467 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v472 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v466, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
        __int16 v467 = 0;
        void *v472 = InputAttributeNames;
        *((_WORD *)v472 + 4) = 0;
      }
      uint64_t v473 = v465[1];
      if ((unint64_t)(v473 + 1) > v465[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v465, v465 + 3, v473 + 1, 2);
        uint64_t v473 = v465[1];
      }
      *(_WORD *)(*v465 + 2 * v473) = v467;
      ++v465[1];
      if (v461)
      {
        v474 = (mlir::Block **)(v462 + 24);
        do
        {
          v475 = *v474;
          v474 += 4;
          --v461;
        }
        while (v461);
      }
      return;
    }
    if (v5 != &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypesOp,void>::id)
    {
      if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperandCountOp,void>::id)
      {
        uint64_t InputAttributeNames = a2;
        unint64_t v419 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
        uint64_t v420 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
        mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
        uint64_t v422 = *((void *)&v554 + 1);
        uint64_t v421 = v554;
        uint64_t v423 = a3;
        __int16 v424 = 42;
      }
      else
      {
        if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperationNameOp,void>::id)
        {
          Rewriter = a2;
          *(void *)&long long v554 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
          v476 = (Operation **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v554);
          uint64_t v477 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v554);
          uint64_t v479 = v478;
          v480 = (Operation *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Rewriter);
          mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
          uint64_t v481 = *((void *)&v554 + 1);
          uint64_t v482 = v554;
          v483 = (void *)a3[3];
          uint64_t v484 = v483[1];
          if ((unint64_t)(v484 + 1) > v483[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v483 + 3, v484 + 1, 2);
            uint64_t v484 = v483[1];
          }
          *(_WORD *)(*v483 + 2 * v484) = 43;
          ++v483[1];
          v485 = (void *)a3[3];
          v486 = (uint64_t *)a3[4];
          uint64_t InputAttributeNames = v480;
          *(void *)&long long v554 = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v486, (unint64_t *)&InputAttributeNames, &v554))
          {
            __int16 v487 = *(_WORD *)(v554 + 8);
          }
          else
          {
            v492 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v486, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (void *)v554);
            __int16 v487 = 0;
            void *v492 = InputAttributeNames;
            *((_WORD *)v492 + 4) = 0;
          }
          v493 = (Operation **)(v477 + 8 * v479);
          uint64_t v494 = v485[1];
          if ((unint64_t)(v494 + 1) > v485[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v485, v485 + 3, v494 + 1, 2);
            uint64_t v494 = v485[1];
          }
          *(_WORD *)(*v485 + 2 * v494) = v487;
          ++v485[1];
          v495 = (void *)a3[3];
          uint64_t v496 = v495[1];
          if ((unint64_t)(v496 + 1) > v495[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v495 + 3, v496 + 1, 2);
            uint64_t v496 = v495[1];
          }
          *(_WORD *)(*v495 + 2 * v496) = (unint64_t)((char *)v493 - (char *)v476) >> 3;
          ++v495[1];
          while (v476 != v493)
          {
            v497 = *v476++;
            uint64_t InputAttributeNames = v497;
            uint64_t v498 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&InputAttributeNames);
            mlir::OperationName::OperationName(&v554, v498, v499, *(void *)(a1 + 152));
          }
          if (v481)
          {
            v500 = (mlir::Block **)(v482 + 24);
            do
            {
              v501 = *v500;
              v500 += 4;
              --v481;
            }
            while (v481);
          }
          return;
        }
        if (v5 != &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchResultCountOp,void>::id) {
          return;
        }
        uint64_t InputAttributeNames = a2;
        unint64_t v419 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
        uint64_t v420 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
        mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
        uint64_t v422 = *((void *)&v554 + 1);
        uint64_t v421 = v554;
        uint64_t v423 = a3;
        __int16 v424 = 44;
      }
      return;
    }
    uint64_t InputAttributeNames = a2;
    unint64_t v130 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&InputAttributeNames);
    uint64_t v131 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    uint64_t v133 = *((void *)&v554 + 1);
    uint64_t v132 = v554;
    uint64_t v134 = a3;
    __int16 v135 = 46;
LABEL_125:
    return;
  }
  *(void *)&long long v554 = a2;
  unint64_t v442 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v554);
  uint64_t Indices = mlir::memref::LoadOp::getIndices((mlir::memref::LoadOp *)&v554);
  uint64_t v445 = v443;
  uint64_t v446 = (void *)a3[3];
  uint64_t v447 = v446[1];
  if ((unint64_t)(v447 + 1) > v446[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v446 + 3, v447 + 1, 2);
    *(_WORD *)(*v446 + 2 * v446[1]++) = v445;
    if (!v445) {
      return;
    }
  }
  else
  {
    *(_WORD *)(*v446 + 2 * v447) = v443;
    ++v446[1];
    if (!v443) {
      return;
    }
  }
  unsigned int v448 = (unint64_t *)(Indices + 24);
  do
  {
    unint64_t v449 = *v448;
    v448 += 4;
    --v445;
  }
  while (v445);
}

void anonymous namespace'::Generator::generate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v36[8] = *MEMORY[0x1E4F143B8];
  uint64_t v33 = a2;
  uint64_t v34 = v36;
  uint64_t v35 = 0x800000000;
  llvm::ReversePostOrderTraversal<mlir::Region *,llvm::GraphTraits<mlir::Region *>>::Initialize((uint64_t)&v34, (uint64_t)&v33);
  unint64_t v5 = (char *)v34;
  if (!v35) {
    goto LABEL_44;
  }
  uint64_t v6 = (char *)v34 + 8 * v35;
  do
  {
    uint64_t v8 = *((void *)v6 - 1);
    v6 -= 8;
    uint64_t v7 = v8;
    uint64_t v9 = *(void *)(*(void *)(a1 + 192) + 8);
    unsigned int v10 = *(_DWORD *)(a1 + 176);
    if (!v10) {
      goto LABEL_27;
    }
    uint64_t v11 = *(void *)(a1 + 160);
    unsigned int v12 = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
    uint64_t v13 = (void *)(v11 + 16 * v12);
    uint64_t v14 = *v13;
    if (v7 == *v13) {
      goto LABEL_20;
    }
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == -8192;
      }
      if (v17) {
        uint64_t v15 = v13;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & (v10 - 1);
      uint64_t v13 = (void *)(v11 + 16 * v12);
      uint64_t v14 = *v13;
      if (v7 == *v13) {
        goto LABEL_20;
      }
    }
    uint64_t v23 = v15 ? v15 : v13;
    int v24 = *(_DWORD *)(a1 + 168);
    if (4 * v24 + 4 < 3 * v10)
    {
      if (v10 + ~v24 - *(_DWORD *)(a1 + 172) > v10 >> 3) {
        goto LABEL_17;
      }
    }
    else
    {
LABEL_27:
      v10 *= 2;
    }
    llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1 + 160, v10);
    uint64_t v25 = *(void *)(a1 + 160);
    int v26 = *(_DWORD *)(a1 + 176) - 1;
    unsigned int v27 = v26 & ((v7 >> 4) ^ (v7 >> 9));
    uint64_t v23 = (void *)(v25 + 16 * v27);
    uint64_t v28 = *v23;
    if (v7 == *v23)
    {
LABEL_29:
      ++*(_DWORD *)(a1 + 168);
      if (v7 == -4096) {
        goto LABEL_19;
      }
LABEL_18:
      --*(_DWORD *)(a1 + 172);
      goto LABEL_19;
    }
    __int16 v29 = 0;
    int v30 = 1;
    while (v28 != -4096)
    {
      if (v29) {
        BOOL v31 = 0;
      }
      else {
        BOOL v31 = v28 == -8192;
      }
      if (v31) {
        __int16 v29 = v23;
      }
      unsigned int v32 = v27 + v30++;
      unsigned int v27 = v32 & v26;
      uint64_t v23 = (void *)(v25 + 16 * (v32 & v26));
      uint64_t v28 = *v23;
      if (v7 == *v23) {
        goto LABEL_29;
      }
    }
    if (v29) {
      uint64_t v23 = v29;
    }
LABEL_17:
    uint64_t v19 = *v23;
    ++*(_DWORD *)(a1 + 168);
    if (v19 != -4096) {
      goto LABEL_18;
    }
LABEL_19:
    void *v23 = v7;
    *((_DWORD *)v23 + 2) = v9;
LABEL_20:
    uint64_t v20 = (mlir::GenericProgramPoint *)(v7 + 32);
    for (uint64_t i = *(mlir::GenericProgramPoint **)(v7 + 40); i != v20; uint64_t i = (mlir::GenericProgramPoint *)*((void *)i + 1))
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(i);
    }
  }
  while (v6 != v5);
  unint64_t v5 = (char *)v34;
LABEL_44:
  if (v5 != (char *)v36) {
    free(v5);
  }
}

uint64_t anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_3::operator()(uint64_t a1, unint64_t a2)
{
  unint64_t v13 = a2;
  unint64_t v4 = *(uint64_t **)a1;
  uint64_t v3 = *(_WORD **)(a1 + 8);
  __int16 v5 = (*v3)++;
  uint64_t v14 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v4, &v13, &v14);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v4, (uint64_t)&v13, &v13, v14);
    *(void *)uint64_t result = v13;
    *(_WORD *)(result + 8) = v5;
  }
  unint64_t v7 = *(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v7 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id) {
    unint64_t v7 = 0;
  }
  unint64_t v12 = v7;
  if (v7)
  {
    uint64_t result = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12);
    uint64_t v8 = *(void **)(*(void *)result + 136);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      uint64_t v9 = v4 + 3;
      unsigned int v10 = *(_WORD **)(a1 + 16);
    }
    else
    {
      if (v8 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
        return result;
      }
      uint64_t v9 = v4 + 3;
      unsigned int v10 = *(_WORD **)(a1 + 24);
    }
    __int16 v11 = (*v10)++;
    uint64_t v14 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v9, &v13, &v14);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v9, (uint64_t)&v13, &v13, v14);
      *(void *)uint64_t result = v13;
      *(_WORD *)(result + 8) = v11;
    }
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow(a1, v7);
    uint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  unsigned int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      unsigned int v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      unint64_t v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *unint64_t v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        uint64_t v15 = &result[2 * v11];
        do
        {
          *unsigned int v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    int v16 = (void *)(16 * v3);
    if (v3)
    {
      uint64_t v17 = 16 * v3;
      unsigned int v18 = v4;
      do
      {
        if ((*(void *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v18, &v25);
          uint64_t v19 = v25;
          *uint64_t v25 = *(void *)v18;
          *((_WORD *)v19 + 4) = *((_WORD *)v18 + 4);
          ++*(_DWORD *)(a1 + 8);
        }
        unsigned int v18 = (llvm *)((char *)v18 + 16);
        v17 -= 16;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  if (v20)
  {
    if (((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_23;
    }
    uint64_t v21 = ((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    unsigned int v10 = &result[2 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v22 = result + 2;
    uint64_t v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = -4096;
      void *v22 = -4096;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      int v24 = &result[2 * v20];
      do
      {
        *unsigned int v10 = -4096;
        v10 += 2;
      }
      while (v10 != v24);
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_0>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 36);
  if (v2) {
    uint64_t v3 = a2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v2)
  {
    unint64_t v4 = (uint64_t *)result;
    for (uint64_t i = 0; i != v2; ++i)
    {
      unint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, i);
    }
  }
  return result;
}

uint64_t *llvm::detail::UniqueFunctionBase<void,mlir::Operation *>::CallImpl<anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_1>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  unint64_t v4 = (_DWORD *)result[1];
  int v6 = (*v4)++;
  unsigned int v7 = *(_DWORD *)(v5 + 16);
  unsigned int v8 = a2 >> 4;
  if (!v7) {
    goto LABEL_49;
  }
  unsigned int v9 = (v7 - 1) & (v8 ^ (a2 >> 9));
  unsigned int v10 = (void *)(*(void *)v5 + 16 * v9);
  uint64_t v11 = *v10;
  if (*v10 == a2) {
    goto LABEL_17;
  }
  uint64_t v12 = 0;
  int v13 = 1;
  while (v11 != -4096)
  {
    if (v12) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v11 == -8192;
    }
    if (v14) {
      uint64_t v12 = v10;
    }
    unsigned int v15 = v9 + v13++;
    unsigned int v9 = v15 & (v7 - 1);
    unsigned int v10 = (void *)(*(void *)v5 + 16 * v9);
    uint64_t v11 = *v10;
    if (*v10 == a2) {
      goto LABEL_17;
    }
  }
  uint64_t v36 = (uint64_t)(v12 ? v12 : v10);
  int v37 = *(_DWORD *)(v5 + 8);
  if (4 * v37 + 4 < 3 * v7)
  {
    if (v7 + ~v37 - *(_DWORD *)(v5 + 12) > v7 >> 3) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_49:
    v7 *= 2;
  }
  uint64_t result = llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v5, v7);
  int v38 = *(_DWORD *)(v5 + 16) - 1;
  unsigned int v39 = v38 & (v8 ^ (a2 >> 9));
  uint64_t v36 = *(void *)v5 + 16 * v39;
  uint64_t v40 = *(void *)v36;
  if (*(void *)v36 == a2)
  {
LABEL_51:
    ++*(_DWORD *)(v5 + 8);
    if (a2 == -4096) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v46 = 0;
  int v47 = 1;
  while (v40 != -4096)
  {
    if (v46) {
      BOOL v48 = 0;
    }
    else {
      BOOL v48 = v40 == -8192;
    }
    if (v48) {
      uint64_t v46 = v36;
    }
    unsigned int v49 = v39 + v47++;
    unsigned int v39 = v49 & v38;
    uint64_t v36 = *(void *)v5 + 16 * (v49 & v38);
    uint64_t v40 = *(void *)v36;
    if (*(void *)v36 == a2) {
      goto LABEL_51;
    }
  }
  if (v46) {
    uint64_t v36 = v46;
  }
LABEL_14:
  uint64_t v16 = *(void *)v36;
  ++*(_DWORD *)(v5 + 8);
  if (v16 != -4096) {
LABEL_15:
  }
    --*(_DWORD *)(v5 + 12);
LABEL_16:
  *(void *)uint64_t v36 = a2;
  *(_DWORD *)(v36 + 8) = v6;
LABEL_17:
  unint64_t v17 = *(unsigned int *)(a2 + 44);
  if ((v17 & 0x7FFFFF) != 0)
  {
    unint64_t v18 = ((a2 + 16 * ((v17 >> 23) & 1) + ((v17 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a2 + 40);
    unint64_t v19 = v18 + 24 * (v17 & 0x7FFFFF);
    do
    {
      for (uint64_t i = *(void *)(v18 + 8); i != v18; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v21 = i - 8;
        if (!i) {
          uint64_t v21 = 0;
        }
        uint64_t v22 = (mlir::GenericProgramPoint *)(v21 + 32);
        for (uint64_t j = *(mlir::GenericProgramPoint **)(v21 + 40); j != v22; uint64_t j = (mlir::GenericProgramPoint *)*((void *)j + 1))
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(j);
          uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)(v3[2] + 24) & 0xFFFFFFFFFFFFFFF8))();
        }
      }
      v18 += 24;
    }
    while (v18 != v19);
  }
  uint64_t v24 = v3[3];
  uint64_t v25 = (_DWORD *)v3[1];
  int v26 = (*v25)++;
  unsigned int v27 = *(_DWORD *)(v24 + 16);
  if (!v27) {
    goto LABEL_57;
  }
  unsigned int v28 = (v27 - 1) & (v8 ^ (a2 >> 9));
  __int16 v29 = (void *)(*(void *)v24 + 16 * v28);
  uint64_t v30 = *v29;
  if (*v29 != a2)
  {
    unsigned int v32 = 0;
    int v33 = 1;
    while (v30 != -4096)
    {
      if (v32) {
        BOOL v34 = 0;
      }
      else {
        BOOL v34 = v30 == -8192;
      }
      if (v34) {
        unsigned int v32 = v29;
      }
      unsigned int v35 = v28 + v33++;
      unsigned int v28 = v35 & (v27 - 1);
      __int16 v29 = (void *)(*(void *)v24 + 16 * v28);
      uint64_t v30 = *v29;
      if (*v29 == a2) {
        return result;
      }
    }
    if (v32) {
      uint64_t v41 = (uint64_t)v32;
    }
    else {
      uint64_t v41 = (uint64_t)v29;
    }
    int v42 = *(_DWORD *)(v24 + 8);
    if (4 * v42 + 4 < 3 * v27)
    {
      if (v27 + ~v42 - *(_DWORD *)(v24 + 12) > v27 >> 3) {
        goto LABEL_33;
      }
      goto LABEL_58;
    }
LABEL_57:
    v27 *= 2;
LABEL_58:
    uint64_t result = llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v24, v27);
    int v43 = *(_DWORD *)(v24 + 16) - 1;
    unsigned int v44 = v43 & (v8 ^ (a2 >> 9));
    uint64_t v41 = *(void *)v24 + 16 * v44;
    uint64_t v45 = *(void *)v41;
    if (*(void *)v41 == a2)
    {
LABEL_59:
      ++*(_DWORD *)(v24 + 8);
      if (a2 == -4096) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
    uint64_t v50 = 0;
    int v51 = 1;
    while (v45 != -4096)
    {
      if (v50) {
        BOOL v52 = 0;
      }
      else {
        BOOL v52 = v45 == -8192;
      }
      if (v52) {
        uint64_t v50 = v41;
      }
      unsigned int v53 = v44 + v51++;
      unsigned int v44 = v53 & v43;
      uint64_t v41 = *(void *)v24 + 16 * (v53 & v43);
      uint64_t v45 = *(void *)v41;
      if (*(void *)v41 == a2) {
        goto LABEL_59;
      }
    }
    if (v50) {
      uint64_t v41 = v50;
    }
LABEL_33:
    uint64_t v31 = *(void *)v41;
    ++*(_DWORD *)(v24 + 8);
    if (v31 == -4096)
    {
LABEL_35:
      *(void *)uint64_t v41 = a2;
      *(_DWORD *)(v41 + 8) = v26;
      return result;
    }
LABEL_34:
    --*(_DWORD *)(v24 + 12);
    goto LABEL_35;
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Block *)>::callback_fn<anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_2>(uint64_t a1, uint64_t a2)
{
  Liveness = mlir::Liveness::getLiveness(*(void *)a1, a2);
  int v33 = Liveness;
  long long v5 = *(_OWORD *)(a1 + 24);
  v30[0] = *(_OWORD *)(a1 + 8);
  v30[1] = v5;
  uint64_t v31 = *(void *)(a1 + 40);
  unsigned int v32 = &v33;
  uint64_t v6 = Liveness[2];
  uint64_t v7 = 24;
  if (v6 == Liveness[1]) {
    uint64_t v7 = 28;
  }
  uint64_t v8 = *(unsigned int *)((char *)Liveness + v7);
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    unsigned int v10 = (unint64_t *)Liveness[2];
    while (*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v10;
      v9 -= 8;
      if (!v9) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    unsigned int v10 = (unint64_t *)Liveness[2];
  }
  uint64_t v11 = (unint64_t *)(v6 + 8 * v8);
  if (v10 != v11)
  {
    unint64_t v12 = *v10;
LABEL_11:
    unint64_t v29 = v12;
    ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v29);
    if (ParentRegion == (mlir::Block *)mlir::Block::getParent((mlir::Block *)a2))
    {
      unint64_t v14 = v29;
      mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(a2 + 40));
    }
    while (++v10 != v11)
    {
      unint64_t v12 = *v10;
      if (*v10 < 0xFFFFFFFFFFFFFFFELL)
      {
        if (v10 != v11) {
          goto LABEL_11;
        }
        break;
      }
    }
  }
LABEL_16:
  if (mlir::Block::isEntryBlock((mlir::Block *)a2))
  {
    uint64_t v16 = *(unint64_t **)(a2 + 48);
    uint64_t v17 = *(void *)(a2 + 56) - (void)v16;
    if (v17)
    {
      uint64_t v18 = 8 * (v17 >> 3);
      do
      {
        unint64_t v19 = *v16++;
        mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(a2 + 40));
        v18 -= 8;
      }
      while (v18);
    }
  }
  uint64_t v21 = (mlir::GenericProgramPoint *)(a2 + 32);
  for (uint64_t i = *(mlir::GenericProgramPoint **)(a2 + 40); i != v21; uint64_t i = (mlir::GenericProgramPoint *)*((void *)i + 1))
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(i);
    uint64_t v24 = *(unsigned int *)(v23 + 36);
    if (v24) {
      uint64_t v25 = v23 - 16;
    }
    else {
      uint64_t v25 = 0;
    }
    if (v24)
    {
      int v26 = (mlir::Block **)v23;
      for (uint64_t j = 0; j != v24; ++j)
      {
        unint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, j);
      }
    }
  }
}

void anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_2::operator() const(mlir::Block *)::{lambda(mlir::Value,mlir::Operation *)#1}::operator()(uint64_t a1, unint64_t a2, mlir::Block **a3)
{
  unint64_t v87 = a2;
  if (**(void **)a1 == a2) {
    return;
  }
  unint64_t v4 = a2;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v88 = 0;
  uint64_t v9 = v88;
  if (v8)
  {
    unsigned int v10 = *(void **)(v88 + 8);
    uint64_t v11 = *(void *)(a1 + 24);
    unsigned int v12 = *(_DWORD *)(v11 + 16);
    if (v12) {
      goto LABEL_4;
    }
LABEL_19:
    uint64_t v15 = 0;
    int v24 = *(_DWORD *)(v11 + 8);
    if (4 * v24 + 4 >= 3 * v12)
    {
LABEL_57:
      v12 *= 2;
LABEL_58:
      llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v11, v12);
      int v47 = *(_DWORD *)(v11 + 16) - 1;
      unsigned int v48 = v47 & ((a3 >> 4) ^ (a3 >> 9));
      uint64_t v15 = *(void *)v11 + 16 * v48;
      uint64_t v49 = *(void *)v15;
      if (*(mlir::Block ***)v15 == a3)
      {
LABEL_59:
        ++*(_DWORD *)(v11 + 8);
        if (a3 == (mlir::Block **)-4096) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      uint64_t v79 = 0;
      int v80 = 1;
      while (v49 != -4096)
      {
        if (v79) {
          BOOL v81 = 0;
        }
        else {
          BOOL v81 = v49 == -8192;
        }
        if (v81) {
          uint64_t v79 = v15;
        }
        unsigned int v82 = v48 + v80++;
        unsigned int v48 = v82 & v47;
        uint64_t v15 = *(void *)v11 + 16 * (v82 & v47);
        uint64_t v49 = *(void *)v15;
        if (*(mlir::Block ***)v15 == a3) {
          goto LABEL_59;
        }
      }
      if (v79) {
        uint64_t v15 = v79;
      }
LABEL_21:
      uint64_t v25 = *(void *)v15;
      ++*(_DWORD *)(v11 + 8);
      if (v25 == -4096)
      {
LABEL_23:
        *(void *)uint64_t v15 = a3;
        *(_DWORD *)(v15 + 8) = 0;
        unint64_t v4 = v87;
        goto LABEL_24;
      }
LABEL_22:
      --*(_DWORD *)(v11 + 12);
      goto LABEL_23;
    }
LABEL_20:
    if (v12 + ~v24 - *(_DWORD *)(v11 + 12) > v12 >> 3) {
      goto LABEL_21;
    }
    goto LABEL_58;
  }
  uint64_t v89 = v88;
  int v21 = *(_DWORD *)(v7 + 8);
  uint64_t v22 = *(unsigned int *)(v7 + 16);
  if (4 * v21 + 4 >= (3 * v22))
  {
    int v23 = 2 * v22;
  }
  else
  {
    int v23 = *(_DWORD *)(v7 + 16);
    if ((int)v22 + ~v21 - *(_DWORD *)(v7 + 12) > v22 >> 3)
    {
      *(_DWORD *)(v7 + 8) = v21 + 1;
      if (*(void *)v9 == -4096) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  unint64_t v54 = *(llvm **)v7;
  unint64_t v55 = (v23 - 1) | ((unint64_t)(v23 - 1) >> 1);
  unint64_t v56 = v55 | (v55 >> 2) | ((v55 | (v55 >> 2)) >> 4);
  int v57 = ((v56 | (v56 >> 8)) >> 16) | v56 | (v56 >> 8);
  if ((v57 + 1) > 0x40) {
    unsigned int v58 = v57 + 1;
  }
  else {
    unsigned int v58 = 64;
  }
  *(_DWORD *)(v7 + 16) = v58;
  buffer = llvm::allocate_buffer(40 * v58, (std::align_val_t)8uLL);
  *(void *)uint64_t v7 = buffer;
  if (v54)
  {
    *(void *)(v7 + 8) = 0;
    unsigned int v60 = *(_DWORD *)(v7 + 16);
    if (!v60) {
      goto LABEL_88;
    }
    unint64_t v61 = 40 * v60 - 40;
    if (v61 >= 0x28)
    {
      unint64_t v69 = v61 / 0x28 + 1;
      uint64_t v62 = &buffer[5 * (v69 & 0xFFFFFFFFFFFFFFELL)];
      uint64_t v70 = v69 & 0xFFFFFFFFFFFFFFELL;
      uint64_t v71 = buffer;
      do
      {
        *uint64_t v71 = -4096;
        v71[5] = -4096;
        v71 += 10;
        v70 -= 2;
      }
      while (v70);
      if (v69 == (v69 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_88:
        if (v22)
        {
          uint64_t v73 = 40 * v22;
          uint64_t v74 = v54;
          do
          {
            if ((*(void *)v74 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              uint64_t v90 = 0;
              unint64_t v75 = v90;
              void *v90 = *(void *)v74;
              uint64_t v76 = *((void *)v74 + 1);
              *((void *)v74 + 1) = 0;
              v75[1] = v76;
              uint64_t v77 = *(void *)((char *)v74 + 29);
              *((_OWORD *)v75 + 1) = *((_OWORD *)v74 + 1);
              *(void *)((char *)v75 + 29) = v77;
              ++*(_DWORD *)(v7 + 8);
              unint64_t v78 = (_DWORD *)*((void *)v74 + 1);
              *((void *)v74 + 1) = 0;
              if (v78)
              {
                if (v78[68]) {
                  llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::visitNodes((uint64_t)v78, (void (*)(void *, void, uint64_t))llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::deleteNode, 0);
                }
                operator delete(v78);
              }
            }
            uint64_t v74 = (llvm *)((char *)v74 + 40);
            v73 -= 40;
          }
          while (v73);
        }
        llvm::deallocate_buffer(v54, (void *)(40 * v22));
      }
    }
    else
    {
      uint64_t v62 = buffer;
    }
    uint64_t v72 = &buffer[5 * v60];
    do
    {
      *uint64_t v62 = -4096;
      v62 += 5;
    }
    while (v62 != v72);
    goto LABEL_88;
  }
  *(void *)(v7 + 8) = 0;
  unsigned int v63 = *(_DWORD *)(v7 + 16);
  if (v63)
  {
    unint64_t v64 = 40 * v63 - 40;
    uint64_t v65 = buffer;
    if (v64 < 0x28) {
      goto LABEL_125;
    }
    unint64_t v66 = v64 / 0x28 + 1;
    uint64_t v65 = &buffer[5 * (v66 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v67 = v66 & 0xFFFFFFFFFFFFFFELL;
    size_t v68 = buffer;
    do
    {
      *size_t v68 = -4096;
      v68[5] = -4096;
      v68 += 10;
      v67 -= 2;
    }
    while (v67);
    if (v66 != (v66 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_125:
      do
      {
        *uint64_t v65 = -4096;
        v65 += 5;
      }
      while (v65 != &buffer[5 * v63]);
    }
  }
  uint64_t v9 = v89;
  ++*(_DWORD *)(v7 + 8);
  if (*(void *)v9 != -4096) {
LABEL_17:
  }
    --*(_DWORD *)(v7 + 12);
LABEL_18:
  *(void *)uint64_t v9 = v4;
  unsigned int v10 = operator new(0x120uLL);
  v10[34] = 0;
  v10[35] = v6;
  *(_OWORD *)unsigned int v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 7) = 0u;
  *((_OWORD *)v10 + 8) = 0u;
  *((_OWORD *)v10 + 9) = 0u;
  *((_OWORD *)v10 + 10) = 0u;
  *((_OWORD *)v10 + 11) = 0u;
  *((_OWORD *)v10 + 12) = 0u;
  *((_OWORD *)v10 + 13) = 0u;
  *((_OWORD *)v10 + 14) = 0u;
  *((_OWORD *)v10 + 15) = 0u;
  *((_OWORD *)v10 + 16) = 0u;
  *(void *)(v9 + 8) = v10;
  *(unsigned char *)(v9 + 16) = 0;
  *(unsigned char *)(v9 + 20) = 0;
  *(unsigned char *)(v9 + 24) = 0;
  *(unsigned char *)(v9 + 28) = 0;
  *(unsigned char *)(v9 + 32) = 0;
  *(unsigned char *)(v9 + 36) = 0;
  uint64_t v11 = *(void *)(a1 + 24);
  unsigned int v12 = *(_DWORD *)(v11 + 16);
  if (!v12) {
    goto LABEL_19;
  }
LABEL_4:
  unsigned int v13 = v12 - 1;
  unsigned int v14 = (v12 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v15 = *(void *)v11 + 16 * v14;
  uint64_t v16 = *(void *)v15;
  if (*(mlir::Block ***)v15 != a3)
  {
    uint64_t v17 = 0;
    int v18 = 1;
    while (v16 != -4096)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v16 == -8192;
      }
      if (v19) {
        uint64_t v17 = v15;
      }
      unsigned int v20 = v14 + v18++;
      unsigned int v14 = v20 & v13;
      uint64_t v15 = *(void *)v11 + 16 * (v20 & v13);
      uint64_t v16 = *(void *)v15;
      if (*(mlir::Block ***)v15 == a3) {
        goto LABEL_24;
      }
    }
    if (v17) {
      uint64_t v15 = v17;
    }
    int v24 = *(_DWORD *)(v11 + 8);
    if (4 * v24 + 4 >= 3 * v12) {
      goto LABEL_57;
    }
    goto LABEL_20;
  }
LABEL_24:
  unint64_t v26 = *(unsigned int *)(v15 + 8);
  uint64_t v27 = *(void *)(a1 + 32);
  mlir::LivenessBlockInfo::getEndOperation(**(void **)(a1 + 40), (uint64_t **)v4, a3);
  uint64_t v29 = v28;
  unsigned int v30 = *(_DWORD *)(v27 + 16);
  if (!v30) {
    goto LABEL_64;
  }
  unsigned int v31 = v30 - 1;
  unsigned int v32 = ((v28 >> 4) ^ (v28 >> 9)) & (v30 - 1);
  uint64_t v33 = *(void *)v27 + 16 * v32;
  uint64_t v34 = *(void *)v33;
  if (v28 == *(void *)v33) {
    goto LABEL_40;
  }
  uint64_t v35 = 0;
  int v36 = 1;
  while (v34 != -4096)
  {
    if (v35) {
      BOOL v37 = 0;
    }
    else {
      BOOL v37 = v34 == -8192;
    }
    if (v37) {
      uint64_t v35 = v33;
    }
    unsigned int v38 = v32 + v36++;
    unsigned int v32 = v38 & v31;
    uint64_t v33 = *(void *)v27 + 16 * (v38 & v31);
    uint64_t v34 = *(void *)v33;
    if (v28 == *(void *)v33) {
      goto LABEL_40;
    }
  }
  if (v35) {
    uint64_t v33 = v35;
  }
  int v50 = *(_DWORD *)(v27 + 8);
  if (4 * v50 + 4 < 3 * v30)
  {
    if (v30 + ~v50 - *(_DWORD *)(v27 + 12) > v30 >> 3) {
      goto LABEL_37;
    }
  }
  else
  {
LABEL_64:
    v30 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(v27, v30);
  int v51 = *(_DWORD *)(v27 + 16) - 1;
  unsigned int v52 = v51 & ((v29 >> 4) ^ (v29 >> 9));
  uint64_t v33 = *(void *)v27 + 16 * v52;
  uint64_t v53 = *(void *)v33;
  if (v29 == *(void *)v33)
  {
LABEL_66:
    ++*(_DWORD *)(v27 + 8);
    if (v29 == -4096) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  uint64_t v83 = 0;
  int v84 = 1;
  while (v53 != -4096)
  {
    if (v83) {
      BOOL v85 = 0;
    }
    else {
      BOOL v85 = v53 == -8192;
    }
    if (v85) {
      uint64_t v83 = v33;
    }
    unsigned int v86 = v52 + v84++;
    unsigned int v52 = v86 & v51;
    uint64_t v33 = *(void *)v27 + 16 * (v86 & v51);
    uint64_t v53 = *(void *)v33;
    if (v29 == *(void *)v33) {
      goto LABEL_66;
    }
  }
  if (v83) {
    uint64_t v33 = v83;
  }
LABEL_37:
  uint64_t v39 = *(void *)v33;
  ++*(_DWORD *)(v27 + 8);
  if (v39 != -4096) {
LABEL_38:
  }
    --*(_DWORD *)(v27 + 12);
LABEL_39:
  *(void *)uint64_t v33 = v29;
  *(_DWORD *)(v33 + 8) = 0;
  unint64_t v4 = v87;
LABEL_40:
  llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insert((uint64_t)v10, v26, *(unsigned int *)(v33 + 8), 0);
  unint64_t v40 = *(void *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v40 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id) {
    unint64_t v40 = 0;
  }
  uint64_t v90 = (void *)v40;
  if (v40)
  {
    uint64_t v41 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v90) + 136);
    if (v41 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      int v45 = *(unsigned __int8 *)(v9 + 20);
      int v42 = (unsigned char *)(v9 + 20);
      unsigned int v44 = v42 - 4;
      if (v45)
      {
LABEL_50:
        *unsigned int v44 = 0;
        return;
      }
    }
    else if (v41 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      int v46 = *(unsigned __int8 *)(v9 + 28);
      int v42 = (unsigned char *)(v9 + 28);
      unsigned int v44 = v42 - 4;
      if (v46) {
        goto LABEL_50;
      }
    }
    else
    {
      if (v41 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
        return;
      }
      int v43 = *(unsigned __int8 *)(v9 + 36);
      int v42 = (unsigned char *)(v9 + 36);
      unsigned int v44 = v42 - 4;
      if (v43) {
        goto LABEL_50;
      }
    }
    unsigned char *v42 = 1;
    goto LABEL_50;
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insert(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  v15[8] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 272))
  {
    uint64_t v12 = a1;
    unsigned int v13 = v15;
    uint64_t v14 = 0x400000000;
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeFind(&v12, a2);
LABEL_44:
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insert((uint64_t)&v12, a2, a3, a4);
    if (v13 != v15) {
      free(v13);
    }
    return;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 276);
  if (v7 == 16)
  {
    uint64_t v12 = a1;
    unsigned int v13 = v15;
    HIDWORD(v14) = 4;
    if (*(void *)(a1 + 8) >= a2)
    {
      uint64_t v8 = 16;
    }
    else if (*(void *)(a1 + 24) >= a2)
    {
      uint64_t v8 = 0x100000010;
    }
    else if (*(void *)(a1 + 40) >= a2)
    {
      uint64_t v8 = 0x200000010;
    }
    else if (*(void *)(a1 + 56) >= a2)
    {
      uint64_t v8 = 0x300000010;
    }
    else if (*(void *)(a1 + 72) >= a2)
    {
      uint64_t v8 = 0x400000010;
    }
    else if (*(void *)(a1 + 88) >= a2)
    {
      uint64_t v8 = 0x500000010;
    }
    else if (*(void *)(a1 + 104) >= a2)
    {
      uint64_t v8 = 0x600000010;
    }
    else if (*(void *)(a1 + 120) >= a2)
    {
      uint64_t v8 = 0x700000010;
    }
    else if (*(void *)(a1 + 136) >= a2)
    {
      uint64_t v8 = 0x800000010;
    }
    else if (*(void *)(a1 + 152) >= a2)
    {
      uint64_t v8 = 0x900000010;
    }
    else if (*(void *)(a1 + 168) >= a2)
    {
      uint64_t v8 = 0xA00000010;
    }
    else if (*(void *)(a1 + 184) >= a2)
    {
      uint64_t v8 = 0xB00000010;
    }
    else if (*(void *)(a1 + 200) >= a2)
    {
      uint64_t v8 = 0xC00000010;
    }
    else if (*(void *)(a1 + 216) >= a2)
    {
      uint64_t v8 = 0xD00000010;
    }
    else if (*(void *)(a1 + 232) >= a2)
    {
      uint64_t v8 = 0xE00000010;
    }
    else if (*(void *)(a1 + 248) >= a2)
    {
      uint64_t v8 = 0xF00000010;
    }
    else
    {
      uint64_t v8 = 0x1000000010;
    }
    v15[0] = a1;
    v15[1] = v8;
    LODWORD(v14) = 1;
    goto LABEL_44;
  }
  int v9 = 0;
  if (v7)
  {
    unsigned int v10 = (unint64_t *)(a1 + 8);
    while (1)
    {
      unint64_t v11 = *v10;
      v10 += 2;
      if (v11 >= a2) {
        break;
      }
      if (v7 == ++v9)
      {
        int v9 = *(_DWORD *)(a1 + 276);
        break;
      }
    }
  }
  LODWORD(v12) = v9;
  *(_DWORD *)(a1 + 276) = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(a1, &v12, v7, a2, a3, a4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,anonymous namespace'::ByteCodeLiveRange,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::ByteCodeLiveRange>>,mlir::Value,anonymous namespace'::ByteCodeLiveRange,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,anonymous namespace'::ByteCodeLiveRange>>::LookupBucketFor<mlir::Value>(uint64_t a1, int a2, unint64_t *a3, void *a4)
{
  if (a2)
  {
    unint64_t v4 = *a3;
    unint64_t v5 = 0x1E8EB8000uLL;
    {
      uint64_t v24 = a1;
      int v21 = a3;
      uint64_t v22 = a4;
      int v23 = a2;
      unint64_t v20 = v4;
      unint64_t v5 = 0x1E8EB8000uLL;
      unint64_t v4 = v20;
      a3 = v21;
      a2 = v23;
      a4 = v22;
      int v18 = v17;
      a1 = v24;
      if (v18)
      {
        unint64_t v19 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v19 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v19;
        unint64_t v5 = 0x1E8EB8000;
        unint64_t v4 = v20;
        a3 = v21;
        a2 = v23;
        a1 = v24;
        a4 = v22;
      }
    }
    uint64_t v6 = (*(void *)(v5 + 3024) + 8 * v4) ^ HIDWORD(v4);
    unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v6) >> 47) ^ (0x9DDFEA08EB382D69 * v6));
    int v8 = a2 - 1;
    unsigned int v9 = (-348639895 * ((v7 >> 47) ^ v7)) & (a2 - 1);
    unsigned int v10 = (void *)(a1 + 40 * v9);
    uint64_t v11 = *v10;
    if (*a3 == *v10)
    {
LABEL_4:
      *a4 = v10;
      return 1;
    }
    else
    {
      unsigned int v13 = 0;
      int v14 = 1;
      while (v11 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v11 == -8192;
        }
        if (v15) {
          unsigned int v13 = v10;
        }
        unsigned int v16 = v9 + v14++;
        unsigned int v9 = v16 & v8;
        unsigned int v10 = (void *)(a1 + 40 * (v16 & v8));
        uint64_t v11 = *v10;
        if (*a3 == *v10) {
          goto LABEL_4;
        }
      }
      if (v13) {
        unsigned int v10 = v13;
      }
      *a4 = v10;
      return 0;
    }
  }
  else
  {
    *a4 = 0;
    return 0;
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::visitNodes(uint64_t a1, void (*a2)(void *, void, uint64_t), uint64_t a3)
{
  void v33[4] = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 272);
  if (v3)
  {
    unsigned int v31 = v33;
    uint64_t v32 = 0x400000000;
    uint64_t v28 = v30;
    uint64_t v29 = 0x400000000;
    if (*(_DWORD *)(a1 + 276))
    {
      unsigned int v6 = 0;
      unsigned int v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(a1 + 8 + 8 * v7);
        if (v6 >= HIDWORD(v32))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v6 + 1, 8);
          unsigned int v6 = v32;
        }
        *((void *)v31 + v6) = v8;
        unsigned int v6 = v32 + 1;
        LODWORD(v32) = v32 + 1;
        ++v7;
      }
      while (v7 != *(_DWORD *)(a1 + 276));
      int v3 = *(_DWORD *)(a1 + 272);
    }
    uint64_t v9 = (v3 - 1);
    if (v3 != 1)
    {
      unsigned int v10 = (void *)(a1 + (a3 >> 1));
      if (a3)
      {
        do
        {
          uint64_t v17 = v32;
          if (v32)
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t v19 = 0;
              unsigned int v20 = v29;
              uint64_t v21 = 8 * (*((void *)v31 + v18) & 0x3FLL) + 8;
              do
              {
                uint64_t v22 = *(void *)((*((void *)v31 + v18) & 0xFFFFFFFFFFFFFFC0) + v19);
                if (v20 >= HIDWORD(v29))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v20 + 1, 8);
                  unsigned int v20 = v29;
                }
                v28[v20] = v22;
                unsigned int v20 = v29 + 1;
                LODWORD(v29) = v29 + 1;
                v19 += 8;
              }
              while (v21 != v19);
              (*(void (**)(void *, void, uint64_t))(*v10 + a2))(v10, *((void *)v31 + v18++), v9);
            }
            while (v18 != v17);
          }
          LODWORD(v32) = 0;
          llvm::SmallVectorImpl<llvm::IntervalMapImpl::NodeRef>::swap((uint64_t)&v31, (uint64_t)&v28);
          uint64_t v9 = (v9 - 1);
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v11 = v32;
          if (v32)
          {
            uint64_t v12 = 0;
            do
            {
              uint64_t v13 = 0;
              unsigned int v14 = v29;
              uint64_t v15 = 8 * (*((void *)v31 + v12) & 0x3FLL) + 8;
              do
              {
                uint64_t v16 = *(void *)((*((void *)v31 + v12) & 0xFFFFFFFFFFFFFFC0) + v13);
                if (v14 >= HIDWORD(v29))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v14 + 1, 8);
                  unsigned int v14 = v29;
                }
                v28[v14] = v16;
                unsigned int v14 = v29 + 1;
                LODWORD(v29) = v29 + 1;
                v13 += 8;
              }
              while (v15 != v13);
              a2(v10, *((void *)v31 + v12++), v9);
            }
            while (v12 != v11);
          }
          LODWORD(v32) = 0;
          llvm::SmallVectorImpl<llvm::IntervalMapImpl::NodeRef>::swap((uint64_t)&v31, (uint64_t)&v28);
          uint64_t v9 = (v9 - 1);
        }
        while (v9);
      }
    }
    if (v32)
    {
      int v23 = (void *)(a1 + (a3 >> 1));
      uint64_t v24 = 0;
      if (a3)
      {
        uint64_t v26 = 8 * v32;
        do
        {
          (*(void (**)(void *, void, void))(*v23 + a2))(v23, *(void *)((char *)v31 + v24), 0);
          v24 += 8;
        }
        while (v26 != v24);
      }
      else
      {
        uint64_t v25 = 8 * v32;
        do
        {
          a2(v23, *(void *)((char *)v31 + v24), 0);
          v24 += 8;
        }
        while (v25 != v24);
      }
    }
    if (v28 != (void *)v30) {
      free(v28);
    }
    if (v31 != v33) {
      free(v31);
    }
  }
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::deleteNode(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unint64_t **)(result + 280);
  *(void *)(a2 & 0xFFFFFFFFFFFFFFC0) = *v2;
  unint64_t *v2 = a2 & 0xFFFFFFFFFFFFFFC0;
  return result;
}

void llvm::SmallVectorImpl<llvm::IntervalMapImpl::NodeRef>::swap(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1 != a1 + 16 && *(void *)a2 != a2 + 16)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v4;
    int v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v5;
    int v6 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = v6;
    return;
  }
  unint64_t v7 = *(unsigned int *)(a2 + 8);
  if (*(_DWORD *)(a1 + 12) < v7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v7, 8);
    unint64_t v8 = *(unsigned int *)(a1 + 8);
    if (*(_DWORD *)(a2 + 12) >= v8)
    {
LABEL_7:
      unsigned int v9 = *(_DWORD *)(a2 + 8);
      if (v8 >= v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v8;
      }
      if (!v10) {
        goto LABEL_11;
      }
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v8 = *(unsigned int *)(a1 + 8);
    if (*(_DWORD *)(a2 + 12) >= v8) {
      goto LABEL_7;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v8, 8);
  LODWORD(v8) = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  if (v8 >= v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v8;
  }
  if (!v10)
  {
LABEL_11:
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    int v13 = v8 - v9;
    if (v8 > v9) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_20:
  uint64_t v14 = 0;
  do
  {
    uint64_t v15 = *(void *)a2;
    uint64_t v16 = *(void *)(*(void *)a1 + v14);
    *(void *)(*(void *)a1 + v14) = *(void *)(*(void *)a2 + v14);
    *(void *)(v15 + v14) = v16;
    v14 += 8;
  }
  while (8 * v10 != v14);
  LODWORD(v8) = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  int v13 = v8 - v9;
  if (v8 > v9)
  {
LABEL_12:
    if (v10 != v8)
    {
      memcpy((void *)(*(void *)a2 + 8 * v12), (const void *)(*(void *)a1 + 8 * v10), *(void *)a1 + 8 * v11 - (*(void *)a1 + 8 * v10));
      unsigned int v9 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(a2 + 8) = v13 + v9;
    *(_DWORD *)(a1 + 8) = v10;
    return;
  }
LABEL_23:
  int v17 = v9 - v8;
  if (v9 > v8)
  {
    if (v10 != v9)
    {
      memcpy((void *)(*(void *)a1 + 8 * v11), (const void *)(*(void *)a2 + 8 * v10), *(void *)a2 + 8 * v12 - (*(void *)a2 + 8 * v10));
      LODWORD(v8) = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v17 + v8;
    *(_DWORD *)(a2 + 8) = v10;
  }
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insert(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t v8 = *(void *)a1;
  if (!*(_DWORD *)(*(void *)a1 + 272))
  {
    uint64_t v9 = a1 + 8;
    uint64_t result = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(*(void *)a1, (_DWORD *)(*(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16) - 4), *(unsigned int *)(v8 + 276), a2, a3, a4);
    if (result <= 0x10)
    {
      *(_DWORD *)(v8 + 276) = result;
      *(_DWORD *)(*(void *)v9 + 8) = result;
      return result;
    }
    unint64_t v11 = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::branchRoot(v8, (unsigned int *)*(unsigned int *)(*(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16) - 4));
    llvm::IntervalMapImpl::Path::replaceRoot((unsigned int *)(a1 + 8), v8 + 8, *(_DWORD *)(v8 + 276), v11);
  }

  return llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeInsert((_DWORD *)a1, a2, a3, a4);
}

uint64_t llvm::IntervalMapImpl::LeafNode<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7 = *a2;
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v8 = (v7 - 1);
  if (*(unsigned __int8 *)(a1 + v8 + 256) != a6
    || (v9 = a1 + 16 * v8, v11 = *(void *)(v9 + 8), uint64_t v10 = (void *)(v9 + 8), v11 + 1 != a4))
  {
    if (v7 == 16) {
      return 17;
    }
LABEL_11:
    int v16 = a3 - v7;
    if (a3 == v7)
    {
      int v17 = (void *)(a1 + 16 * a3);
      void *v17 = a4;
      v17[1] = a5;
      *(unsigned char *)(a1 + a3 + 256) = a6;
      return (a3 + 1);
    }
    if (*(unsigned __int8 *)(a1 + v7 + 256) == a6)
    {
      uint64_t v18 = (void *)(a1 + 16 * v7);
      if (a5 + 1 == *v18)
      {
        void *v18 = a4;
        return a3;
      }
    }
    if (a3 == 16) {
      return 17;
    }
    uint64_t v19 = (unsigned __int8 *)(a1 + v7 + 256);
    uint64_t v20 = (~v7 + a3);
    if (v20 >= 7 && (int)v7 + 1 <= a3)
    {
      uint64_t v25 = (a3 - 1);
      if (v20 <= v25)
      {
        uint64_t v26 = (16 * a3) | 8;
        unint64_t v27 = a1 + v26;
        uint64_t v28 = 16 * v20;
        if (a1 + v26 - 16 * v20 <= (unint64_t)(a1 + v26))
        {
          uint64_t v29 = 16 * a3;
          if (a1 + v29 - v28 <= (unint64_t)(a1 + v29))
          {
            uint64_t v30 = (16 * (a3 - 1)) | 8;
            unint64_t v31 = a1 + v30;
            if (a1 + v30 - v28 <= (unint64_t)(a1 + v30))
            {
              uint64_t v32 = 16 * (a3 - 1);
              if (a1 + v32 - v28 <= (unint64_t)(a1 + v32)
                && a1 + (unint64_t)a3 + 256 - v20 <= a1 + (unint64_t)a3 + 256
                && a1 + v25 + 256 - v20 <= (unint64_t)(a1 + v25 + 256))
              {
                unint64_t v33 = a1 + v29 - v28;
                unint64_t v34 = a1 + v26 - v28;
                unint64_t v35 = v29 + a1 + 16;
                unint64_t v36 = a1 + v32 - v28;
                unint64_t v37 = a1 + v30 - v28;
                unint64_t v38 = v32 + a1 + 16;
                unint64_t v39 = a1 + a3 + 256 - v20;
                unint64_t v40 = a3 + a1 + 257;
                unint64_t v41 = a1 + v25 + 256 - v20;
                unint64_t v42 = v25 + a1 + 257;
                BOOL v44 = v33 < v31 && v36 < v27;
                BOOL v46 = v33 < v38 && v37 < v27;
                BOOL v48 = v33 < v40 && v39 < v27;
                BOOL v50 = v33 < v42 && v41 < v27;
                BOOL v52 = v34 < v31 && v36 < v35;
                BOOL v54 = v34 < v38 && v37 < v35;
                BOOL v56 = v34 < v40 && v39 < v35;
                BOOL v58 = v34 < v42 && v41 < v35;
                BOOL v60 = v36 < v40 && v39 < v31;
                BOOL v62 = v37 < v40 && v39 < v38;
                BOOL v64 = v39 < v42 && v41 < v40;
                BOOL v65 = v34 >= v27 || v33 >= v35;
                if (!v65 || v44)
                {
                  uint64_t v19 = (unsigned __int8 *)(a1 + v7 + 256);
                }
                else
                {
                  uint64_t v19 = (unsigned __int8 *)(a1 + v7 + 256);
                  if (!v46 && !v48 && !v50 && !v52 && !v54 && !v56 && !v58 && !v60 && !v62 && !v64)
                  {
                    uint64_t v66 = v20 + 1;
                    if (v20 < 0xF)
                    {
                      uint64_t v67 = 0;
                      goto LABEL_117;
                    }
                    uint64_t v67 = v66 & 0x1FFFFFFF0;
                    uint64_t v78 = v66 & 0x1FFFFFFF0;
                    unsigned int v79 = a3;
                    do
                    {
                      uint64_t v80 = v79 - 1;
                      BOOL v81 = (const double *)(a1 - 240 + 16 * v80);
                      unsigned int v82 = v81;
                      float64x2x2_t v172 = vld2q_f64(v82);
                      v82 += 4;
                      float64x2x2_t v174 = vld2q_f64(v82);
                      uint64_t v83 = v81 + 8;
                      float64x2x2_t v176 = vld2q_f64(v83);
                      int v84 = v81 + 12;
                      float64x2x2_t v178 = vld2q_f64(v84);
                      BOOL v85 = v81 + 16;
                      float64x2x2_t v179 = vld2q_f64(v85);
                      unsigned int v86 = v81 + 20;
                      float64x2x2_t v180 = vld2q_f64(v86);
                      unint64_t v87 = v81 + 24;
                      float64x2x2_t v181 = vld2q_f64(v87);
                      v81 += 28;
                      float64x2x2_t v182 = vld2q_f64(v81);
                      uint64_t v88 = (double *)(a1 - 248 + 16 * v79);
                      uint64_t v89 = v88 + 1;
                      vst2q_f64(v89, v172);
                      uint64_t v90 = v88 + 5;
                      vst2q_f64(v90, v174);
                      uint64_t v91 = v88 + 9;
                      vst2q_f64(v91, v176);
                      unint64_t v92 = v88 + 13;
                      vst2q_f64(v92, v178);
                      uint64_t v93 = v88 + 17;
                      vst2q_f64(v93, v179);
                      uint64_t v94 = v88 + 21;
                      vst2q_f64(v94, v180);
                      uint64_t v95 = v88 + 25;
                      vst2q_f64(v95, v181);
                      v88 += 29;
                      vst2q_f64(v88, v182);
                      *(_OWORD *)(a1 + 241 + v79) = *(_OWORD *)(a1 + 241 + v80);
                      v79 -= 16;
                      v78 -= 16;
                    }
                    while (v78);
                    if (v66 == v67) {
                      goto LABEL_22;
                    }
                    if ((v66 & 8) != 0)
                    {
LABEL_117:
                      v16 -= v66 & 0xFFFFFFF8;
                      unsigned int v68 = a3 - v67;
                      uint64_t v69 = v67 - (v66 & 0x1FFFFFFF8);
                      do
                      {
                        uint64_t v70 = v68 - 1;
                        uint64_t v71 = (const double *)(a1 - 112 + 16 * v70);
                        uint64_t v72 = v71;
                        float64x2x2_t v171 = vld2q_f64(v72);
                        v72 += 4;
                        float64x2x2_t v173 = vld2q_f64(v72);
                        uint64_t v73 = v71 + 8;
                        float64x2x2_t v175 = vld2q_f64(v73);
                        v71 += 12;
                        float64x2x2_t v177 = vld2q_f64(v71);
                        uint64_t v74 = (double *)(a1 - 120 + 16 * v68);
                        unint64_t v75 = v74 + 1;
                        vst2q_f64(v75, v171);
                        uint64_t v76 = v74 + 5;
                        vst2q_f64(v76, v173);
                        uint64_t v77 = v74 + 9;
                        vst2q_f64(v77, v175);
                        v74 += 13;
                        vst2q_f64(v74, v177);
                        *(void *)(a1 + 249 + v68) = *(void *)(a1 + 249 + v70);
                        v68 -= 8;
                        v69 += 8;
                      }
                      while (v69);
                      if (v66 == (v66 & 0x1FFFFFFF8)) {
                        goto LABEL_22;
                      }
                      goto LABEL_20;
                    }
                    v16 -= v67;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_20:
    unsigned int v21 = v7 + v16;
    do
    {
      uint64_t v22 = v21 - 1;
      *(_OWORD *)(a1 + 16 * v21) = *(_OWORD *)(a1 + 16 * v22);
      *(unsigned char *)(a1 + 256 + v21--) = *(unsigned char *)(a1 + 256 + v22);
      --v16;
    }
    while (v16);
LABEL_22:
    int v23 = (void *)(a1 + 16 * v7);
    void *v23 = a4;
    v23[1] = a5;
    *uint64_t v19 = a6;
    return (a3 + 1);
  }
  *a2 = v8;
  if (a3 != v7 && *(unsigned __int8 *)(a1 + v7 + 256) == a6)
  {
    uint64_t v12 = 16 * v7;
    if (a5 + 1 == *(void *)(a1 + 16 * v7))
    {
      *uint64_t v10 = *(void *)(a1 + 16 * v7 + 8);
      uint64_t v13 = (v7 + 1);
      if (v13 == a3) {
        return (a3 - 1);
      }
      unsigned int v14 = ~v7 + a3;
      if (v14 < 8)
      {
        unsigned int v15 = v7;
        goto LABEL_243;
      }
      uint64_t v96 = (a3 - 2 - v7);
      if ((int)a3 - 2 < v7)
      {
        unsigned int v15 = v7;
      }
      else if ((int)a3 - 1 < v13)
      {
        unsigned int v15 = v7;
      }
      else
      {
        unint64_t v97 = a1 + v12;
        unint64_t v98 = a1 + v12 + 8;
        uint64_t v99 = 16 * (a3 - 2 - v7);
        if (v98 + v99 < v98)
        {
          unsigned int v15 = v7;
        }
        else if (v97 + v99 < v97)
        {
          unsigned int v15 = v7;
        }
        else
        {
          uint64_t v100 = 16 * (v7 + 1);
          unint64_t v101 = a1 + v100;
          unint64_t v102 = a1 + v100 + 8;
          if (v102 + v99 < v102)
          {
            unsigned int v15 = v7;
          }
          else if (v101 + v99 < v101)
          {
            unsigned int v15 = v7;
          }
          else
          {
            uint64_t v103 = v12 + v99;
            unint64_t v104 = a1 + (v103 | 8);
            unint64_t v105 = v103 + a1 + 16;
            unint64_t v106 = v7 + a1 + 256;
            unint64_t v107 = v7 + a1 + v96 + 257;
            unint64_t v108 = a1 + ((v99 + v100) | 8);
            unint64_t v109 = v99 + v100 + a1 + 16;
            unint64_t v110 = v13 + a1 + 256;
            unint64_t v111 = v13 + a1 + v96 + 257;
            BOOL v113 = v97 < v107 && v106 < v104;
            BOOL v115 = v97 < v108 && v101 < v104;
            BOOL v117 = v97 < v109 && v102 < v104;
            BOOL v119 = v97 < v111 && v110 < v104;
            BOOL v121 = v98 < v107 && v106 < v105;
            BOOL v123 = v98 < v108 && v101 < v105;
            BOOL v125 = v98 < v109 && v102 < v105;
            BOOL v127 = v98 < v111 && v110 < v105;
            BOOL v129 = v106 < v108 && v101 < v107;
            BOOL v131 = v106 < v109 && v102 < v107;
            BOOL v133 = v106 < v111 && v110 < v107;
            if (v98 < v104 && v97 < v105)
            {
              unsigned int v15 = v7;
              goto LABEL_243;
            }
            if (v113)
            {
              unsigned int v15 = v7;
            }
            else if (v115)
            {
              unsigned int v15 = v7;
            }
            else if (v117)
            {
              unsigned int v15 = v7;
            }
            else if (v119)
            {
              unsigned int v15 = v7;
            }
            else if (v121)
            {
              unsigned int v15 = v7;
            }
            else if (v123)
            {
              unsigned int v15 = v7;
            }
            else if (v125)
            {
              unsigned int v15 = v7;
            }
            else if (v127)
            {
              unsigned int v15 = v7;
            }
            else if (v129)
            {
              unsigned int v15 = v7;
            }
            else if (v131)
            {
              unsigned int v15 = v7;
            }
            else if (v133)
            {
              unsigned int v15 = v7;
            }
            else
            {
              if (v14 < 0x10)
              {
                unsigned int v135 = 0;
                goto LABEL_224;
              }
              unsigned int v135 = v14 & 0xFFFFFFF0;
              unsigned int v136 = v7;
              unsigned int v137 = v14 & 0xFFFFFFF0;
              do
              {
                uint64_t v138 = v136 + 1;
                uint64_t v139 = (long long *)(a1 + 16 * v138);
                long long v141 = *v139;
                long long v140 = v139[1];
                long long v143 = v139[2];
                long long v142 = v139[3];
                uint64_t v144 = v136;
                long long v146 = v139[4];
                long long v145 = v139[5];
                long long v148 = v139[6];
                long long v147 = v139[7];
                long long v150 = v139[8];
                long long v149 = v139[9];
                long long v152 = v139[10];
                long long v151 = v139[11];
                long long v154 = v139[12];
                long long v153 = v139[13];
                long long v156 = v139[14];
                long long v155 = v139[15];
                __int16 v157 = (_OWORD *)(a1 + 16 * v136);
                v157[14] = v156;
                v157[15] = v155;
                v157[12] = v154;
                v157[13] = v153;
                v157[10] = v152;
                v157[11] = v151;
                v157[8] = v150;
                v157[9] = v149;
                v157[6] = v148;
                v157[7] = v147;
                v157[4] = v146;
                v157[5] = v145;
                v157[2] = v143;
                v157[3] = v142;
                *__int16 v157 = v141;
                v157[1] = v140;
                v136 += 16;
                *(_OWORD *)(a1 + 256 + v144) = *(_OWORD *)(a1 + 256 + v138);
                v137 -= 16;
              }
              while (v137);
              if (v14 == v135) {
                return (a3 - 1);
              }
              if ((v14 & 8) != 0)
              {
LABEL_224:
                LODWORD(v13) = v13 + (v14 & 0xFFFFFFF8);
                unsigned int v15 = v7 + (v14 & 0xFFFFFFF8);
                unsigned int v158 = v135 - (v14 & 0xFFFFFFF8);
                unsigned int v159 = v135 + v7;
                do
                {
                  uint64_t v160 = v159 + 1;
                  char v161 = (long long *)(a1 + 16 * v160);
                  long long v163 = *v161;
                  long long v162 = v161[1];
                  long long v165 = v161[2];
                  long long v164 = v161[3];
                  long long v167 = v161[4];
                  long long v166 = v161[5];
                  long long v169 = v161[6];
                  long long v168 = v161[7];
                  unint64_t v170 = (_OWORD *)(a1 + 16 * v159);
                  v170[6] = v169;
                  v170[7] = v168;
                  v170[4] = v167;
                  v170[5] = v166;
                  v170[2] = v165;
                  v170[3] = v164;
                  *unint64_t v170 = v163;
                  v170[1] = v162;
                  *(void *)(a1 + 256 + v159) = *(void *)(a1 + 256 + v160);
                  v159 += 8;
                  v158 += 8;
                }
                while (v158);
                if (v14 == (v14 & 0xFFFFFFF8)) {
                  return (a3 - 1);
                }
                goto LABEL_243;
              }
              unsigned int v15 = v7 + v135;
              LODWORD(v13) = v13 + v135;
            }
          }
        }
      }
      do
      {
LABEL_243:
        *(_OWORD *)(a1 + 16 * v15) = *(_OWORD *)(a1 + 16 * v13);
        *(unsigned char *)(a1 + 256 + v15) = *(unsigned char *)(a1 + 256 + v13);
        LODWORD(v13) = v13 + 1;
        ++v15;
      }
      while (a3 != v13);
      return (a3 - 1);
    }
  }
  *uint64_t v10 = a5;
  return a3;
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeFind(_DWORD *a1, unint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 276);
  if (v5)
  {
    uint64_t v6 = 0;
    while (*(void *)(v4 + 136 + 8 * v6) < a2)
    {
      if (v5 == ++v6)
      {
        uint64_t v6 = *(unsigned int *)(*(void *)a1 + 276);
        int v7 = *(_DWORD *)(v4 + 272);
        uint64_t v8 = (uint64_t)(a1 + 2);
        a1[4] = 0;
        int v9 = a1[5];
        if (v7) {
          goto LABEL_8;
        }
        goto LABEL_11;
      }
    }
    int v12 = *(_DWORD *)(v4 + 272);
    uint64_t v8 = (uint64_t)(a1 + 2);
    a1[4] = 0;
    int v9 = a1[5];
    if (v12) {
      goto LABEL_8;
    }
LABEL_11:
    if (v9)
    {
      uint64_t v11 = 0;
      goto LABEL_13;
    }
LABEL_19:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v8, a1 + 6, 1uLL, 16);
    uint64_t v11 = a1[4];
    goto LABEL_13;
  }
  uint64_t v6 = 0;
  int v10 = *(_DWORD *)(v4 + 272);
  uint64_t v8 = (uint64_t)(a1 + 2);
  a1[4] = 0;
  int v9 = a1[5];
  if (!v10) {
    goto LABEL_11;
  }
LABEL_8:
  v4 += 8;
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v11 = 0;
LABEL_13:
  uint64_t v13 = (void *)(*(void *)v8 + 16 * v11);
  *uint64_t v13 = v4;
  v13[1] = v5 | (v6 << 32);
  int v14 = a1[4];
  a1[4] = v14 + 1;
  if (v14 != -1 && *(_DWORD *)(*(void *)v8 + 12) < *(_DWORD *)(*(void *)v8 + 8))
  {
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::pathFillFind((uint64_t)a1, a2);
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::pathFillFind(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = a1 + 8;
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 8) + 16 * (v5 - 1);
  int v7 = *(_DWORD *)(*(void *)a1 + 272);
  uint64_t v8 = *(void *)(*(void *)v6 + 8 * *(unsigned int *)(v6 + 12));
  int v9 = v7 - v5;
  if (v7 != v5)
  {
    do
    {
      unsigned int v10 = 0;
      unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFC0;
      do
      {
        unsigned int v12 = v10;
        unint64_t v13 = *(void *)((v8 & 0xFFFFFFFFFFFFFFC0) + 8 * v10++ + 0x60);
      }
      while (v13 < a2);
      if (v5 >= *(_DWORD *)(a1 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 24), v5 + 1, 16);
        unsigned int v5 = *(_DWORD *)(a1 + 16);
      }
      int v14 = (unint64_t *)(*(void *)(a1 + 8) + 16 * v5);
      *int v14 = v11;
      v14[1] = (v8 & 0x3F | ((unint64_t)v12 << 32)) + 1;
      unsigned int v5 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 16) = v5;
      uint64_t v8 = *(void *)(v11 + 8 * v12);
      --v9;
    }
    while (v9);
  }
  unsigned int v15 = 0;
  do
  {
    unsigned int v16 = v15;
    unint64_t v17 = *(void *)((v8 & 0xFFFFFFFFFFFFFFC0) + 16 * v15++ + 8);
  }
  while (v17 < a2);
  uint64_t v18 = v16;
  if (v5 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 24), v5 + 1, 16);
    unsigned int v5 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v19 = (unint64_t *)(*(void *)(a1 + 8) + 16 * v5);
  *uint64_t v19 = v8 & 0xFFFFFFFFFFFFFFC0;
  v19[1] = (v8 & 0x3F | (v18 << 32)) + 1;
  ++*(_DWORD *)(a1 + 16);
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeInsert(_DWORD *a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t v8 = (llvm::IntervalMapImpl::Path *)(a1 + 2);
  unsigned int v9 = a1[4];
  if (!v9 || (uint64_t v10 = *(void *)v8, *(_DWORD *)(*(void *)v8 + 12) >= *(_DWORD *)(*(void *)v8 + 8)))
  {
    uint64_t v11 = *(unsigned int *)(*(void *)a1 + 272);
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)(a1 + 2), *(_DWORD *)(*(void *)a1 + 272));
    uint64_t v10 = *((void *)a1 + 1);
    ++*(_DWORD *)(v10 + 16 * v11 + 12);
    unsigned int v9 = a1[4];
  }
  uint64_t v12 = v10 + 16 * v9;
  if (!*(_DWORD *)(v12 - 4) && **(void **)(v12 - 16) > a2)
  {
    uint64_t LeftSibling = llvm::IntervalMapImpl::Path::getLeftSibling(v8, v9 - 1);
    if (LeftSibling)
    {
      if (*(unsigned __int8 *)(LeftSibling + 176) == a4)
      {
        unint64_t v14 = LeftSibling & 0xFFFFFFFFFFFFFFC0;
        uint64_t v15 = LeftSibling & 0x3F;
        unsigned int v16 = (unint64_t *)((LeftSibling & 0xFFFFFFFFFFFFFFC0) + 16 * v15 + 8);
        if (*(void *)((LeftSibling & 0xFFFFFFFFFFFFFFC0) + 16 * v15 + 8) + 1 == a2)
        {
          uint64_t v17 = a1[4];
          uint64_t v18 = *(void *)(*((void *)a1 + 1) + 16 * v17 - 16);
          llvm::IntervalMapImpl::Path::moveLeft(v8, v17 - 1);
          if (*(void *)v18 > a3 && (*(unsigned __int8 *)(v18 + 176) != a4 || a3 + 1 != *(void *)v18))
          {
            unsigned int v20 = a1[4] - 1;
            *unsigned int v16 = a3;
            return llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::setNodeStop((uint64_t)a1, v20, a3);
          }
          a2 = *(void *)(v14 + 16 * v15);
          llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeErase((llvm::IntervalMapImpl::Path *)a1, 0);
        }
      }
    }
    else
    {
      **(void **)a1 = a2;
    }
  }
  uint64_t v22 = (_DWORD *)(*((void *)a1 + 1) + 16 * a1[4]);
  int v23 = *--v22;
  uint64_t v24 = *(v22 - 1);
  BOOL v25 = v23 == v24;
  uint64_t result = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(*(void *)(v22 - 3), v22, v24, a2, a3, a4);
  if (result >= 0xC)
  {
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::overflow<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>((llvm::IntervalMapImpl::Path *)a1, a1[4] - 1);
    uint64_t v26 = (_DWORD *)(*((void *)a1 + 1) + 16 * a1[4]);
    int v27 = *--v26;
    uint64_t v28 = *(v26 - 1);
    BOOL v25 = v27 == v28;
    uint64_t result = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(*(void *)(v26 - 3), v26, v28, a2, a3, a4);
  }
  int v29 = a1[4];
  uint64_t v30 = *((void *)a1 + 1);
  *(_DWORD *)(v30 + 16 * (v29 - 1) + 8) = result;
  if (v29 != 1)
  {
    uint64_t v31 = v30 + 16 * (v29 - 2);
    *(void *)(*(void *)v31 + 8 * *(unsigned int *)(v31 + 12)) = *(void *)(*(void *)v31
                                                                                + 8 * *(unsigned int *)(v31 + 12)) & 0xFFFFFFFFFFFFFFC0 | (result - 1);
  }
  if (v25)
  {
    int v32 = a1[4];
    unsigned int v33 = v32 - 1;
    if (v32 != 1)
    {
      uint64_t v34 = *(void *)v8;
      uint64_t v35 = 16 * v33;
      while (1)
      {
        uint64_t v36 = v35 - 16;
        if (v35 == 16) {
          break;
        }
        uint64_t v37 = v34 + v35;
        uint64_t v38 = *(void *)(v37 - 16);
        uint64_t v40 = v37 - 8;
        LODWORD(v37) = *(_DWORD *)(v37 - 8);
        uint64_t v39 = *(unsigned int *)(v40 + 4);
        *(void *)(v38 + 8 * v39 + 96) = a3;
        LODWORD(v38) = v37 - 1;
        uint64_t v35 = v36;
        if (v39 != v38) {
          return result;
        }
      }
      *(void *)(*(void *)v34 + 8 * *(unsigned int *)(v34 + 12) + 128) = a3;
    }
  }
  return result;
}

unint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::branchRoot(uint64_t a1, unsigned int *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)2, *(_DWORD *)(a1 + 276), 0xBu, 0, &v15, a2, 1);
  uint64_t v4 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(void *)(a1 + 280));
  unint64_t v5 = (unint64_t)v4;
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  unint64_t v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  uint64_t v6 = v15;
  if (v15)
  {
    uint64_t v7 = 0;
    do
    {
      v4[v7] = *(_OWORD *)(a1 + 16 * v7);
      *((unsigned char *)v4 + v7 + 176) = *(unsigned char *)(a1 + v7 + 256);
      ++v7;
    }
    while (v6 != v7);
    unsigned int v8 = v15;
  }
  else
  {
    unsigned int v8 = 0;
  }
  unint64_t v9 = (unint64_t)llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(void *)(a1 + 280));
  *(_OWORD *)unint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  int v10 = v16;
  if (v16)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v8 + v11;
      *(_OWORD *)(v9 + 16 * v11) = *(_OWORD *)(a1 + 16 * v12);
      *(unsigned char *)(v9 + v11++ + 176) = *(unsigned char *)(a1 + v12 + 256);
    }
    while (v10 != v11);
    uint64_t v13 = (v16 - 1);
  }
  else
  {
    uint64_t v13 = 0xFFFFFFFFLL;
  }
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 136) = *(void *)((v5 & 0xFFFFFFFFFFFFFFC0 | (v8 - 1) & 0xFFFFFFC0) + 16 * (v15 - 1) + 8);
  *(void *)(a1 + 8) = v5 & 0xFFFFFFFFFFFFFFC0 | (v8 - 1);
  *(void *)(a1 + 144) = *(void *)((v9 & 0xFFFFFFFFFFFFFFC0 | v13 & 0xFFFFFFFFFFFFFFC0) + 16 * v13 + 8);
  *(void *)(a1 + 16) = v9 & 0xFFFFFFFFFFFFFFC0 | v13;
  *(void *)a1 = *(void *)(v5 & 0xFFFFFFFFFFFFFFC0 | (v8 - 1) & 0xFFFFFFC0);
  *(void *)(a1 + 272) = 0x200000001;
  return v3;
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::setNodeStop(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v4 = 16 * a2;
    while (1)
    {
      uint64_t v5 = v4 - 16;
      if (v4 == 16) {
        break;
      }
      uint64_t v6 = v3 + v4;
      uint64_t v7 = *(void *)(v6 - 16);
      uint64_t v9 = v6 - 8;
      LODWORD(v6) = *(_DWORD *)(v6 - 8);
      uint64_t v8 = *(unsigned int *)(v9 + 4);
      *(void *)(v7 + 8 * v8 + 96) = a3;
      LODWORD(v7) = v6 - 1;
      uint64_t v4 = v5;
      if (v8 != v7) {
        return result;
      }
    }
    *(void *)(*(void *)v3 + 8 * *(unsigned int *)(v3 + 12) + 128) = a3;
  }
  return result;
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeErase(llvm::IntervalMapImpl::Path *this, int a2)
{
  uint64_t v5 = (uint64_t *)((char *)this + 8);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *(void *)this;
  uint64_t v7 = *((unsigned int *)this + 4);
  uint64_t v8 = v4 + 16 * v7;
  uint64_t v9 = *(void **)(v8 - 16);
  int v10 = *(_DWORD *)(v8 - 8);
  if (v10 == 1)
  {
    uint64_t v11 = *(void **)(v6 + 280);
    void *v9 = *v11;
    void *v11 = v9;
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::eraseNode((uint64_t *)this, *(_DWORD *)(v6 + 272));
    if (a2)
    {
      if (*(_DWORD *)(v6 + 272))
      {
        uint64_t v12 = *((unsigned int *)this + 4);
        if (v12)
        {
          uint64_t v13 = *v5;
          if (*(_DWORD *)(*v5 + 12) < *(_DWORD *)(*v5 + 8))
          {
            unint64_t v14 = (int *)(v13 + 12);
            uint64_t v15 = *((unsigned int *)this + 4);
            while (1)
            {
              int v16 = *v14;
              v14 += 4;
              if (v16) {
                break;
              }
              if (!--v15)
              {
                uint64_t v17 = *(void **)(v13 + 16 * v12 - 16);
                goto LABEL_150;
              }
            }
          }
        }
      }
    }
    return;
  }
  uint64_t v18 = *(unsigned int *)(v8 - 4);
  uint64_t v19 = (v18 + 1);
  if (v19 != v10)
  {
    unsigned int v20 = v10 + ~v18;
    if (v20 < 8)
    {
      unsigned int v21 = v18;
      goto LABEL_134;
    }
    uint64_t v22 = (v10 - 2 - v18);
    uint64_t v23 = 2 * v18;
    uint64_t v24 = (char *)&v9[2 * v18];
    unint64_t v25 = (unint64_t)(v24 + 8);
    uint64_t v26 = 16 * v22;
    uint64_t v27 = 2 * (v18 + 1);
    uint64_t v28 = (char *)&v9[v27];
    unint64_t v29 = (unint64_t)&v9[v27 + 1];
    if (v10 - 2 < v18
      || v10 - 1 < v19
      || (unint64_t)&v24[v26 + 8] < v25
      || &v24[v26] < v24
      || v29 + v26 < v29
      || &v9[v27 + (unint64_t)v26 / 8] < (void *)v28)
    {
      unsigned int v21 = v18;
      goto LABEL_134;
    }
    uint64_t v35 = (char *)v9 + ((v23 * 8 + v26) | 8);
    unint64_t v36 = (unint64_t)&v9[v23 + 2 + (unint64_t)v26 / 8];
    unint64_t v37 = (unint64_t)v9 + v18 + 176;
    unint64_t v38 = (unint64_t)v9 + v18 + v22 + 177;
    uint64_t v39 = (char *)v9 + ((v26 + v27 * 8) | 8);
    unint64_t v40 = (unint64_t)&v9[(unint64_t)v26 / 8 + 2 + v27];
    unint64_t v41 = (unint64_t)v9 + v19 + 176;
    unint64_t v42 = (unint64_t)v9 + v19 + v22 + 177;
    BOOL v44 = (unint64_t)v24 < v38 && v37 < (unint64_t)v35;
    BOOL v46 = v24 < v39 && v28 < v35;
    BOOL v48 = (unint64_t)v24 < v40 && v29 < (unint64_t)v35;
    BOOL v50 = (unint64_t)v24 < v42 && v41 < (unint64_t)v35;
    BOOL v52 = v25 < v38 && v37 < v36;
    BOOL v54 = v25 < (unint64_t)v39 && (unint64_t)v28 < v36;
    BOOL v56 = v25 < v40 && v29 < v36;
    BOOL v58 = v25 < v42 && v41 < v36;
    BOOL v60 = v37 < (unint64_t)v39 && (unint64_t)v28 < v38;
    BOOL v62 = v37 < v40 && v29 < v38;
    BOOL v64 = v37 < v42 && v41 < v38;
    if (v25 < (unint64_t)v35 && (unint64_t)v24 < v36)
    {
      unsigned int v21 = v18;
      goto LABEL_134;
    }
    if (v44)
    {
      unsigned int v21 = v18;
    }
    else if (v46)
    {
      unsigned int v21 = v18;
    }
    else if (v48)
    {
      unsigned int v21 = v18;
    }
    else if (v50)
    {
      unsigned int v21 = v18;
    }
    else if (v52)
    {
      unsigned int v21 = v18;
    }
    else if (v54)
    {
      unsigned int v21 = v18;
    }
    else if (v56)
    {
      unsigned int v21 = v18;
    }
    else if (v58)
    {
      unsigned int v21 = v18;
    }
    else if (v60)
    {
      unsigned int v21 = v18;
    }
    else if (v62)
    {
      unsigned int v21 = v18;
    }
    else if (v64)
    {
      unsigned int v21 = v18;
    }
    else
    {
      if (v20 < 0x10)
      {
        unsigned int v66 = 0;
        goto LABEL_120;
      }
      unsigned int v66 = v20 & 0xFFFFFFF0;
      unsigned int v67 = v18;
      unsigned int v68 = v20 & 0xFFFFFFF0;
      do
      {
        uint64_t v69 = v67 + 1;
        uint64_t v70 = (long long *)&v9[2 * v69];
        long long v72 = *v70;
        long long v71 = v70[1];
        long long v74 = v70[2];
        long long v73 = v70[3];
        uint64_t v75 = v67;
        long long v77 = v70[4];
        long long v76 = v70[5];
        long long v79 = v70[6];
        long long v78 = v70[7];
        long long v81 = v70[8];
        long long v80 = v70[9];
        long long v83 = v70[10];
        long long v82 = v70[11];
        long long v85 = v70[12];
        long long v84 = v70[13];
        long long v87 = v70[14];
        long long v86 = v70[15];
        uint64_t v88 = &v9[2 * v67];
        v88[14] = v87;
        v88[15] = v86;
        v88[12] = v85;
        v88[13] = v84;
        v88[10] = v83;
        v88[11] = v82;
        v88[8] = v81;
        v88[9] = v80;
        v88[6] = v79;
        v88[7] = v78;
        v88[4] = v77;
        v88[5] = v76;
        v88[2] = v74;
        v88[3] = v73;
        *uint64_t v88 = v72;
        v88[1] = v71;
        v67 += 16;
        *(_OWORD *)((char *)v9 + v75 + 176) = *(_OWORD *)((char *)v9 + v69 + 176);
        v68 -= 16;
      }
      while (v68);
      if (v20 == v66) {
        goto LABEL_135;
      }
      if ((v20 & 8) != 0)
      {
LABEL_120:
        LODWORD(v19) = v19 + (v20 & 0xFFFFFFF8);
        unsigned int v21 = v18 + (v20 & 0xFFFFFFF8);
        unsigned int v89 = v66 - (v20 & 0xFFFFFFF8);
        unsigned int v90 = v66 + v18;
        do
        {
          uint64_t v91 = v90 + 1;
          unint64_t v92 = (long long *)&v9[2 * v91];
          long long v94 = *v92;
          long long v93 = v92[1];
          long long v96 = v92[2];
          long long v95 = v92[3];
          long long v98 = v92[4];
          long long v97 = v92[5];
          long long v100 = v92[6];
          long long v99 = v92[7];
          unint64_t v101 = &v9[2 * v90];
          v101[6] = v100;
          v101[7] = v99;
          uint64_t v101[4] = v98;
          v101[5] = v97;
          v101[2] = v96;
          v101[3] = v95;
          *unint64_t v101 = v94;
          v101[1] = v93;
          *(void *)((char *)v9 + v90 + 176) = *(void *)((char *)v9 + v91 + 176);
          v90 += 8;
          v89 += 8;
        }
        while (v89);
        if (v20 == (v20 & 0xFFFFFFF8)) {
          goto LABEL_135;
        }
        goto LABEL_134;
      }
      unsigned int v21 = v18 + v66;
      LODWORD(v19) = v19 + v66;
    }
    do
    {
LABEL_134:
      *(_OWORD *)&v9[2 * v21] = *(_OWORD *)&v9[2 * v19];
      *((unsigned char *)v9 + v21 + 176) = *((unsigned char *)v9 + v19 + 176);
      LODWORD(v19) = v19 + 1;
      ++v21;
    }
    while (v10 != v19);
LABEL_135:
    uint64_t v4 = *((void *)this + 1);
    uint64_t v7 = *((unsigned int *)this + 4);
    int v10 = *(_DWORD *)(v4 + 16 * v7 - 8);
  }
  uint64_t v102 = *(unsigned int *)(v6 + 272);
  *(_DWORD *)(v4 + 16 * v102 + 8) = v10 - 1;
  if (v102)
  {
    uint64_t v103 = v4 + 16 * (v102 - 1);
    *(void *)(*(void *)v103 + 8 * *(unsigned int *)(v103 + 12)) = *(void *)(*(void *)v103
                                                                                  + 8 * *(unsigned int *)(v103 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v10 - 2);
    uint64_t v4 = *((void *)this + 1);
    uint64_t v7 = *((unsigned int *)this + 4);
  }
  uint64_t v104 = v4 + 16 * v7;
  if (*(_DWORD *)(v104 - 4) == v10 - 1)
  {
    uint64_t v105 = *(unsigned int *)(v6 + 272);
    if (v105)
    {
      uint64_t v106 = v9[2 * (v10 - 2) + 1];
      uint64_t v107 = 16 * v105;
      while (1)
      {
        uint64_t v108 = v107 - 16;
        if (v107 == 16) {
          break;
        }
        uint64_t v109 = v4 + v107;
        uint64_t v110 = *(void *)(v109 - 16);
        uint64_t v112 = v109 - 8;
        LODWORD(v109) = *(_DWORD *)(v109 - 8);
        uint64_t v111 = *(unsigned int *)(v112 + 4);
        *(void *)(v110 + 8 * v111 + 96) = v106;
        LODWORD(v110) = v109 - 1;
        uint64_t v107 = v108;
        if (v111 != v110) {
          goto LABEL_153;
        }
      }
      *(void *)(*(void *)v4 + 8 * *(unsigned int *)(v4 + 12) + 128) = v106;
    }
LABEL_153:
    llvm::IntervalMapImpl::Path::moveRight(v5, v105);
  }
  else if (a2)
  {
    if (v7)
    {
      BOOL v113 = (int *)(v4 + 12);
      while (1)
      {
        int v114 = *v113;
        v113 += 4;
        if (v114) {
          break;
        }
        if (!--v7) {
          goto LABEL_149;
        }
      }
    }
    else
    {
LABEL_149:
      uint64_t v17 = *(void **)(v104 - 16);
LABEL_150:
      *(void *)uint64_t v6 = *v17;
    }
  }
}

uint64_t llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7 = *a2;
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v8 = (v7 - 1);
  if (*(unsigned __int8 *)(a1 + v8 + 176) != a6
    || (v9 = a1 + 16 * v8, v11 = *(void *)(v9 + 8), int v10 = (void *)(v9 + 8), v11 + 1 != a4))
  {
    if (v7 == 11) {
      return 12;
    }
LABEL_11:
    int v16 = a3 - v7;
    if (a3 == v7)
    {
      uint64_t v17 = (void *)(a1 + 16 * a3);
      void *v17 = a4;
      v17[1] = a5;
      *(unsigned char *)(a1 + a3 + 176) = a6;
      return (a3 + 1);
    }
    uint64_t v18 = (unsigned __int8 *)(a1 + v7 + 176);
    if (*v18 == a6)
    {
      uint64_t v19 = (void *)(a1 + 16 * v7);
      if (a5 + 1 == *v19)
      {
        *uint64_t v19 = a4;
        return a3;
      }
    }
    if (a3 == 11) {
      return 12;
    }
    uint64_t v20 = (~v7 + a3);
    if (v20 >= 7 && (int)v7 + 1 <= a3)
    {
      uint64_t v25 = (a3 - 1);
      if (v20 <= v25)
      {
        uint64_t v26 = (16 * a3) | 8;
        unint64_t v27 = a1 + v26;
        uint64_t v28 = 16 * v20;
        if (a1 + v26 - 16 * v20 <= (unint64_t)(a1 + v26))
        {
          uint64_t v29 = 16 * a3;
          if (a1 + v29 - v28 <= (unint64_t)(a1 + v29))
          {
            uint64_t v30 = (16 * (a3 - 1)) | 8;
            unint64_t v31 = a1 + v30;
            if (a1 + v30 - v28 <= (unint64_t)(a1 + v30))
            {
              uint64_t v32 = 16 * (a3 - 1);
              if (a1 + v32 - v28 <= (unint64_t)(a1 + v32)
                && a1 + (unint64_t)a3 + 176 - v20 <= a1 + (unint64_t)a3 + 176
                && a1 + v25 + 176 - v20 <= (unint64_t)(a1 + v25 + 176))
              {
                unint64_t v33 = a1 + v29 - v28;
                unint64_t v34 = a1 + v26 - v28;
                unint64_t v35 = v29 + a1 + 16;
                unint64_t v36 = a1 + v32 - v28;
                unint64_t v37 = a1 + v30 - v28;
                unint64_t v38 = v32 + a1 + 16;
                unint64_t v39 = a1 + a3 + 176 - v20;
                unint64_t v40 = a3 + a1 + 177;
                unint64_t v41 = a1 + v25 + 176 - v20;
                unint64_t v42 = v25 + a1 + 177;
                BOOL v43 = v33 >= v31 || v36 >= v27;
                BOOL v44 = !v43;
                BOOL v171 = v44;
                BOOL v45 = v33 >= v38 || v37 >= v27;
                BOOL v46 = !v45;
                BOOL v47 = v33 >= v40 || v39 >= v27;
                BOOL v48 = !v47;
                BOOL v49 = v33 >= v42 || v41 >= v27;
                BOOL v50 = !v49;
                BOOL v51 = v34 >= v31 || v36 >= v35;
                BOOL v52 = !v51;
                BOOL v53 = v34 >= v38 || v37 >= v35;
                BOOL v54 = !v53;
                BOOL v55 = v34 >= v40 || v39 >= v35;
                BOOL v56 = !v55;
                BOOL v57 = v34 >= v42 || v41 >= v35;
                BOOL v58 = !v57;
                BOOL v59 = v36 >= v40 || v39 >= v31;
                BOOL v60 = !v59;
                BOOL v61 = v37 >= v40 || v39 >= v38;
                BOOL v62 = !v61;
                BOOL v63 = v39 >= v42 || v41 >= v40;
                BOOL v64 = !v63;
                BOOL v65 = v34 >= v27 || v33 >= v35;
                if (v65 && !v171 && !v46 && !v48 && !v50 && !v52 && !v54 && !v56 && !v58 && !v60 && !v62 && !v64)
                {
                  uint64_t v66 = v20 + 1;
                  if (v20 < 0xF)
                  {
                    uint64_t v67 = 0;
                    goto LABEL_117;
                  }
                  uint64_t v67 = v66 & 0x1FFFFFFF0;
                  uint64_t v78 = v66 & 0x1FFFFFFF0;
                  unsigned int v79 = a3;
                  do
                  {
                    uint64_t v80 = v79 - 1;
                    long long v81 = (const double *)(a1 - 240 + 16 * v80);
                    long long v82 = v81;
                    float64x2x2_t v173 = vld2q_f64(v82);
                    v82 += 4;
                    float64x2x2_t v175 = vld2q_f64(v82);
                    long long v83 = v81 + 8;
                    float64x2x2_t v177 = vld2q_f64(v83);
                    long long v84 = v81 + 12;
                    float64x2x2_t v179 = vld2q_f64(v84);
                    long long v85 = v81 + 16;
                    float64x2x2_t v180 = vld2q_f64(v85);
                    long long v86 = v81 + 20;
                    float64x2x2_t v181 = vld2q_f64(v86);
                    long long v87 = v81 + 24;
                    float64x2x2_t v182 = vld2q_f64(v87);
                    v81 += 28;
                    float64x2x2_t v183 = vld2q_f64(v81);
                    uint64_t v88 = (double *)(a1 - 248 + 16 * v79);
                    unsigned int v89 = v88 + 1;
                    vst2q_f64(v89, v173);
                    unsigned int v90 = v88 + 5;
                    vst2q_f64(v90, v175);
                    uint64_t v91 = v88 + 9;
                    vst2q_f64(v91, v177);
                    unint64_t v92 = v88 + 13;
                    vst2q_f64(v92, v179);
                    long long v93 = v88 + 17;
                    vst2q_f64(v93, v180);
                    long long v94 = v88 + 21;
                    vst2q_f64(v94, v181);
                    long long v95 = v88 + 25;
                    vst2q_f64(v95, v182);
                    v88 += 29;
                    vst2q_f64(v88, v183);
                    *(_OWORD *)(a1 + 161 + v79) = *(_OWORD *)(a1 + 161 + v80);
                    v79 -= 16;
                    v78 -= 16;
                  }
                  while (v78);
                  if (v66 == v67) {
                    goto LABEL_22;
                  }
                  if ((v66 & 8) != 0)
                  {
LABEL_117:
                    v16 -= v66 & 0xFFFFFFF8;
                    unsigned int v68 = a3 - v67;
                    uint64_t v69 = v67 - (v66 & 0x1FFFFFFF8);
                    do
                    {
                      uint64_t v70 = v68 - 1;
                      long long v71 = (const double *)(a1 - 112 + 16 * v70);
                      long long v72 = v71;
                      float64x2x2_t v172 = vld2q_f64(v72);
                      v72 += 4;
                      float64x2x2_t v174 = vld2q_f64(v72);
                      long long v73 = v71 + 8;
                      float64x2x2_t v176 = vld2q_f64(v73);
                      v71 += 12;
                      float64x2x2_t v178 = vld2q_f64(v71);
                      long long v74 = (double *)(a1 - 120 + 16 * v68);
                      uint64_t v75 = v74 + 1;
                      vst2q_f64(v75, v172);
                      long long v76 = v74 + 5;
                      vst2q_f64(v76, v174);
                      long long v77 = v74 + 9;
                      vst2q_f64(v77, v176);
                      v74 += 13;
                      vst2q_f64(v74, v178);
                      *(void *)(a1 + 169 + v68) = *(void *)(a1 + 169 + v70);
                      v68 -= 8;
                      v69 += 8;
                    }
                    while (v69);
                    if (v66 == (v66 & 0x1FFFFFFF8)) {
                      goto LABEL_22;
                    }
                    goto LABEL_20;
                  }
                  v16 -= v67;
                }
              }
            }
          }
        }
      }
    }
LABEL_20:
    unsigned int v21 = v7 + v16;
    do
    {
      uint64_t v22 = v21 - 1;
      *(_OWORD *)(a1 + 16 * v21) = *(_OWORD *)(a1 + 16 * v22);
      *(unsigned char *)(a1 + 176 + v21--) = *(unsigned char *)(a1 + 176 + v22);
      --v16;
    }
    while (v16);
LABEL_22:
    uint64_t v23 = (void *)(a1 + 16 * v7);
    void *v23 = a4;
    v23[1] = a5;
    unsigned __int8 *v18 = a6;
    return (a3 + 1);
  }
  *a2 = v8;
  if (a3 != v7 && *(unsigned __int8 *)(a1 + v7 + 176) == a6)
  {
    uint64_t v12 = 16 * v7;
    if (a5 + 1 == *(void *)(a1 + 16 * v7))
    {
      *int v10 = *(void *)(a1 + 16 * v7 + 8);
      uint64_t v13 = (v7 + 1);
      if (v13 == a3) {
        return (a3 - 1);
      }
      unsigned int v14 = ~v7 + a3;
      if (v14 < 8)
      {
        unsigned int v15 = v7;
        goto LABEL_242;
      }
      uint64_t v96 = (a3 - 2 - v7);
      if ((int)a3 - 2 < v7)
      {
        unsigned int v15 = v7;
      }
      else if ((int)a3 - 1 < v13)
      {
        unsigned int v15 = v7;
      }
      else
      {
        unint64_t v97 = a1 + v12;
        unint64_t v98 = a1 + v12 + 8;
        uint64_t v99 = 16 * (a3 - 2 - v7);
        if (v98 + v99 < v98)
        {
          unsigned int v15 = v7;
        }
        else if (v97 + v99 < v97)
        {
          unsigned int v15 = v7;
        }
        else
        {
          uint64_t v100 = 16 * (v7 + 1);
          unint64_t v101 = a1 + v100;
          unint64_t v102 = a1 + v100 + 8;
          if (v102 + v99 < v102)
          {
            unsigned int v15 = v7;
          }
          else if (v101 + v99 < v101)
          {
            unsigned int v15 = v7;
          }
          else
          {
            uint64_t v103 = v12 + v99;
            unint64_t v104 = a1 + (v103 | 8);
            unint64_t v105 = v103 + a1 + 16;
            unint64_t v106 = v7 + a1 + 176;
            unint64_t v107 = v7 + a1 + v96 + 177;
            unint64_t v108 = a1 + ((v99 + v100) | 8);
            unint64_t v109 = v99 + v100 + a1 + 16;
            unint64_t v110 = v13 + a1 + 176;
            unint64_t v111 = v13 + a1 + v96 + 177;
            BOOL v113 = v97 < v107 && v106 < v104;
            BOOL v115 = v97 < v108 && v101 < v104;
            BOOL v117 = v97 < v109 && v102 < v104;
            BOOL v119 = v97 < v111 && v110 < v104;
            BOOL v121 = v98 < v107 && v106 < v105;
            BOOL v123 = v98 < v108 && v101 < v105;
            BOOL v125 = v98 < v109 && v102 < v105;
            BOOL v127 = v98 < v111 && v110 < v105;
            BOOL v129 = v106 < v108 && v101 < v107;
            BOOL v131 = v106 < v109 && v102 < v107;
            BOOL v133 = v106 < v111 && v110 < v107;
            if (v98 < v104 && v97 < v105)
            {
              unsigned int v15 = v7;
              goto LABEL_242;
            }
            if (v113)
            {
              unsigned int v15 = v7;
            }
            else if (v115)
            {
              unsigned int v15 = v7;
            }
            else if (v117)
            {
              unsigned int v15 = v7;
            }
            else if (v119)
            {
              unsigned int v15 = v7;
            }
            else if (v121)
            {
              unsigned int v15 = v7;
            }
            else if (v123)
            {
              unsigned int v15 = v7;
            }
            else if (v125)
            {
              unsigned int v15 = v7;
            }
            else if (v127)
            {
              unsigned int v15 = v7;
            }
            else if (v129)
            {
              unsigned int v15 = v7;
            }
            else if (v131)
            {
              unsigned int v15 = v7;
            }
            else if (v133)
            {
              unsigned int v15 = v7;
            }
            else
            {
              if (v14 < 0x10)
              {
                unsigned int v135 = 0;
                goto LABEL_224;
              }
              unsigned int v135 = v14 & 0xFFFFFFF0;
              unsigned int v136 = v7;
              unsigned int v137 = v14 & 0xFFFFFFF0;
              do
              {
                uint64_t v138 = v136 + 1;
                uint64_t v139 = (long long *)(a1 + 16 * v138);
                long long v141 = *v139;
                long long v140 = v139[1];
                long long v143 = v139[2];
                long long v142 = v139[3];
                uint64_t v144 = v136;
                long long v146 = v139[4];
                long long v145 = v139[5];
                long long v148 = v139[6];
                long long v147 = v139[7];
                long long v150 = v139[8];
                long long v149 = v139[9];
                long long v152 = v139[10];
                long long v151 = v139[11];
                long long v154 = v139[12];
                long long v153 = v139[13];
                long long v156 = v139[14];
                long long v155 = v139[15];
                __int16 v157 = (_OWORD *)(a1 + 16 * v136);
                v157[14] = v156;
                v157[15] = v155;
                v157[12] = v154;
                v157[13] = v153;
                v157[10] = v152;
                v157[11] = v151;
                v157[8] = v150;
                v157[9] = v149;
                v157[6] = v148;
                v157[7] = v147;
                v157[4] = v146;
                v157[5] = v145;
                v157[2] = v143;
                v157[3] = v142;
                *__int16 v157 = v141;
                v157[1] = v140;
                v136 += 16;
                *(_OWORD *)(a1 + 176 + v144) = *(_OWORD *)(a1 + 176 + v138);
                v137 -= 16;
              }
              while (v137);
              if (v14 == v135) {
                return (a3 - 1);
              }
              if ((v14 & 8) != 0)
              {
LABEL_224:
                LODWORD(v13) = v13 + (v14 & 0xFFFFFFF8);
                unsigned int v15 = v7 + (v14 & 0xFFFFFFF8);
                unsigned int v158 = v135 - (v14 & 0xFFFFFFF8);
                unsigned int v159 = v135 + v7;
                do
                {
                  uint64_t v160 = v159 + 1;
                  char v161 = (long long *)(a1 + 16 * v160);
                  long long v163 = *v161;
                  long long v162 = v161[1];
                  long long v165 = v161[2];
                  long long v164 = v161[3];
                  long long v167 = v161[4];
                  long long v166 = v161[5];
                  long long v169 = v161[6];
                  long long v168 = v161[7];
                  unint64_t v170 = (_OWORD *)(a1 + 16 * v159);
                  v170[6] = v169;
                  v170[7] = v168;
                  v170[4] = v167;
                  v170[5] = v166;
                  v170[2] = v165;
                  v170[3] = v164;
                  *unint64_t v170 = v163;
                  v170[1] = v162;
                  *(void *)(a1 + 176 + v159) = *(void *)(a1 + 176 + v160);
                  v159 += 8;
                  v158 += 8;
                }
                while (v158);
                if (v14 == (v14 & 0xFFFFFFF8)) {
                  return (a3 - 1);
                }
                goto LABEL_242;
              }
              unsigned int v15 = v7 + v135;
              LODWORD(v13) = v13 + v135;
            }
          }
        }
      }
      do
      {
LABEL_242:
        *(_OWORD *)(a1 + 16 * v15) = *(_OWORD *)(a1 + 16 * v13);
        *(unsigned char *)(a1 + 176 + v15) = *(unsigned char *)(a1 + 176 + v13);
        LODWORD(v13) = v13 + 1;
        ++v15;
      }
      while (a3 != v13);
      return (a3 - 1);
    }
  }
  *int v10 = a5;
  return a3;
}

uint64_t *llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::overflow<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(llvm::IntervalMapImpl::Path *this, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::IntervalMapImpl::Path *)((char *)this + 8);
  uint64_t v3 = *((void *)this + 1);
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v5 = a2;
  unint64_t v6 = *(unsigned int *)(v3 + 16 * a2 + 12);
  uint64_t LeftSibling = llvm::IntervalMapImpl::Path::getLeftSibling((llvm::IntervalMapImpl::Path *)((char *)this + 8), a2);
  uint64_t v8 = LeftSibling;
  if (LeftSibling)
  {
    int v9 = (LeftSibling & 0x3F) + 1;
    v69[0] = v9;
    unint64_t v6 = (v9 + v6);
    *(void *)&long long v67 = LeftSibling & 0xFFFFFFFFFFFFFFC0;
    unsigned int v10 = 1;
  }
  else
  {
    int v9 = 0;
    unsigned int v10 = 0;
  }
  uint64_t v11 = *(void *)v4 + 16 * v5;
  int v12 = *(_DWORD *)(v11 + 8);
  v69[v10] = v12;
  int v13 = v12 + v9;
  unint64_t v14 = v10 + 1;
  *(void *)((unint64_t)&v67 | (8 * v10)) = *(void *)v11;
  uint64_t RightSibling = llvm::IntervalMapImpl::Path::getRightSibling(v4, v2);
  if (RightSibling)
  {
    int v16 = (RightSibling & 0x3F) + 1;
    v69[v14] = v16;
    v13 += v16;
    *((void *)&v67 + v14) = RightSibling & 0xFFFFFFFFFFFFFFC0;
    unint64_t v14 = v10 | 2;
  }
  if (v13 + 1 <= (11 * v14))
  {
    unsigned int v17 = 0;
  }
  else
  {
    if (v14 == 1) {
      unsigned int v17 = 1;
    }
    else {
      unsigned int v17 = v14 - 1;
    }
    uint64_t v18 = v17;
    v69[v14] = v69[v18];
    uint64_t v19 = 8 * v17;
    *((void *)&v67 + v14) = *(void *)((char *)&v67 + v19);
    v69[v18] = 0;
    uint64_t v20 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(void *)(*(void *)this + 280));
    *uint64_t v20 = 0u;
    v20[1] = 0u;
    void v20[2] = 0u;
    v20[3] = 0u;
    v20[4] = 0u;
    v20[5] = 0u;
    v20[6] = 0u;
    v20[7] = 0u;
    v20[8] = 0u;
    v20[9] = 0u;
    unint64_t v14 = (v14 + 1);
    v20[10] = 0u;
    v20[11] = 0u;
    *(void *)((char *)&v67 + v19) = v20;
  }
  unint64_t v21 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v14, v13, 0xBu, v69, &v63, (unsigned int *)v6, 1);
  llvm::IntervalMapImpl::adjustSiblingSizes<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>((uint64_t)&v67, v14, (uint64_t)v69, (uint64_t)&v63);
  if (v8) {
    llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
  }
  uint64_t v22 = v63 - 1;
  uint64_t v23 = *(void *)(v67 + 16 * v22 + 8);
  uint64_t v24 = *(void *)v4;
  *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v63;
  if (!v2)
  {
LABEL_18:
    if (v14 != 1) {
      goto LABEL_24;
    }
LABEL_19:
    inserted = 0;
    int v32 = v21;
    if (v21) {
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  *(void *)(*(void *)(v24 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v24 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v24 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v24 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v22;
  uint64_t v25 = *(void *)v4;
  uint64_t v26 = 16 * v5;
  while (1)
  {
    uint64_t v27 = v26 - 16;
    if (v26 == 16) {
      break;
    }
    uint64_t v28 = v25 + v26;
    uint64_t v29 = *(unsigned int *)(v28 - 4);
    *(void *)(*(void *)(v28 - 16) + 8 * v29 + 96) = v23;
    int v30 = *(_DWORD *)(v28 - 8) - 1;
    uint64_t v26 = v27;
    if (v29 != v30) {
      goto LABEL_18;
    }
  }
  *(void *)(*(void *)v25 + 8 * *(unsigned int *)(v25 + 12) + 128) = v23;
  if (v14 == 1) {
    goto LABEL_19;
  }
LABEL_24:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  uint64_t v35 = (v64 - 1);
  uint64_t v36 = *(void *)(*((void *)&v67 + 1) + 16 * v35 + 8);
  if (v17 != 1)
  {
    uint64_t v37 = *(void *)v4;
    *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v64;
    if (v2)
    {
      *(void *)(*(void *)(v37 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v37 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v37 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v37 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v35;
      uint64_t v38 = *(void *)v4;
      uint64_t v39 = 16 * v2;
      while (1)
      {
        uint64_t v40 = v39 - 16;
        if (v39 == 16) {
          break;
        }
        uint64_t v41 = v38 + v39;
        uint64_t v42 = *(unsigned int *)(v41 - 4);
        *(void *)(*(void *)(v41 - 16) + 8 * v42 + 96) = v36;
        int v43 = *(_DWORD *)(v41 - 8) - 1;
        uint64_t v39 = v40;
        if (v42 != v43) {
          goto LABEL_32;
        }
      }
      inserted = 0;
      *(void *)(*(void *)v38 + 8 * *(unsigned int *)(v38 + 12) + 128) = v36;
      if (v14 != 2) {
        goto LABEL_33;
      }
    }
    else
    {
LABEL_32:
      inserted = 0;
      if (v14 != 2) {
        goto LABEL_33;
      }
    }
LABEL_26:
    int v32 = v21 - 1;
    if (v21 == 1) {
      goto LABEL_22;
    }
    do
LABEL_20:
      llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
    while (!__CFADD__(v32++, 1));
    goto LABEL_22;
  }
  inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode((uint64_t)this, v2, *((void *)&v67 + 1) & 0xFFFFFFFFFFFFFFC0 | v35, v36);
  v2 += inserted;
  if (v14 == 2) {
    goto LABEL_26;
  }
LABEL_33:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  uint64_t v44 = (v65 - 1);
  uint64_t v45 = *(void *)(v68 + 16 * v44 + 8);
  if (v17 == 2)
  {
    inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode((uint64_t)this, v2, v68 & 0xFFFFFFFFFFFFFFC0 | v44, v45);
    v2 += inserted;
    if (v14 != 3) {
      goto LABEL_35;
    }
    goto LABEL_42;
  }
  uint64_t v48 = *(void *)v4;
  *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v65;
  if (!v2)
  {
LABEL_41:
    if (v14 != 3) {
      goto LABEL_35;
    }
LABEL_42:
    int v32 = v21 - 2;
    if (v21 != 2) {
      goto LABEL_20;
    }
LABEL_22:
    *(_DWORD *)(*(void *)v4 + 16 * v2 + 12) = HIDWORD(v21);
    return inserted;
  }
  *(void *)(*(void *)(v48 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v48 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v48 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v48 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v44;
  uint64_t v49 = *(void *)v4;
  uint64_t v50 = 16 * v2;
  while (1)
  {
    uint64_t v51 = v50 - 16;
    if (v50 == 16) {
      break;
    }
    uint64_t v52 = v49 + v50;
    uint64_t v53 = *(unsigned int *)(v52 - 4);
    *(void *)(*(void *)(v52 - 16) + 8 * v53 + 96) = v45;
    int v54 = *(_DWORD *)(v52 - 8) - 1;
    uint64_t v50 = v51;
    if (v53 != v54) {
      goto LABEL_41;
    }
  }
  *(void *)(*(void *)v49 + 8 * *(unsigned int *)(v49 + 12) + 128) = v45;
  if (v14 == 3) {
    goto LABEL_42;
  }
LABEL_35:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  uint64_t v46 = (v66 - 1);
  uint64_t v47 = *(void *)(*((void *)&v68 + 1) + 16 * v46 + 8);
  if (v17 == 3)
  {
    inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode((uint64_t)this, v2, *((void *)&v68 + 1) & 0xFFFFFFFFFFFFFFC0 | v46, v47);
    v2 += inserted;
  }
  else
  {
    uint64_t v55 = *(void *)v4;
    *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v66;
    if (v2)
    {
      *(void *)(*(void *)(v55 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v55 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v55 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v55 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v46;
      uint64_t v56 = *(void *)v4;
      uint64_t v57 = 16 * v2;
      while (1)
      {
        uint64_t v58 = v57 - 16;
        if (v57 == 16) {
          break;
        }
        uint64_t v59 = v56 + v57;
        uint64_t v60 = *(unsigned int *)(v59 - 4);
        *(void *)(*(void *)(v59 - 16) + 8 * v60 + 96) = v47;
        int v61 = *(_DWORD *)(v59 - 8) - 1;
        uint64_t v57 = v58;
        if (v60 != v61) {
          goto LABEL_54;
        }
      }
      *(void *)(*(void *)v56 + 8 * *(unsigned int *)(v56 + 12) + 128) = v47;
    }
  }
LABEL_54:
  if (v14 == 4)
  {
    int v32 = v21 - 3;
    if (v21 == 3) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  uint64_t result = llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  __break(1u);
  return result;
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::eraseNode(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a2 - 1;
  if (a2 != 1)
  {
    uint64_t v8 = v5 + 16 * v7;
    int v9 = *(void **)v8;
    int v10 = *(_DWORD *)(v8 + 8);
    if (v10 == 1)
    {
      uint64_t v11 = *(void **)(v4 + 280);
      void *v9 = *v11;
      void *v11 = v9;
      llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::eraseNode(a1, a2 - 1);
      goto LABEL_69;
    }
    uint64_t v18 = *(unsigned int *)(v5 + 16 * v7 + 12);
    unsigned int v19 = v18 + 1;
    if (v18 + 1 == v10)
    {
LABEL_62:
      int v64 = v10 - 1;
      *(_DWORD *)(v5 + 16 * v7 + 8) = v10 - 1;
      uint64_t v65 = (v10 - 2);
      *(void *)(*(void *)(v5 + 16 * (a2 - 2)) + 8 * *(unsigned int *)(v5 + 16 * (a2 - 2) + 12)) = *(void *)(*(void *)(v5 + 16 * (a2 - 2)) + 8 * *(unsigned int *)(v5 + 16 * (a2 - 2) + 12)) & 0xFFFFFFFFFFFFFFC0 | v65;
      uint64_t v66 = *v6;
      if (*(_DWORD *)(*v6 + 16 * v7 + 12) == v64)
      {
        uint64_t v67 = v9[v65 + 12];
        long long v68 = (_DWORD *)(v66 + 16 * v7 - 8);
        uint64_t v69 = a2 - 1;
        while (--v69)
        {
          uint64_t v70 = *((void *)v68 - 1);
          int v72 = *v68;
          uint64_t v71 = v68[1];
          v68 -= 4;
          *(void *)(v70 + 8 * v71 + 96) = v67;
          if (v71 != v72 - 1) {
            goto LABEL_68;
          }
        }
        *(void *)(*(void *)v66 + 8 * *(unsigned int *)(v66 + 12) + 128) = v67;
LABEL_68:
        llvm::IntervalMapImpl::Path::moveRight(v6, a2 - 1);
      }
      goto LABEL_69;
    }
    unsigned int v20 = v10 + ~v18;
    if (v20 >= 0x16)
    {
      if (v10 - 2 >= v18 && v10 - 1 >= v19)
      {
        uint64_t v35 = (char *)&v9[v18];
        uint64_t v36 = v35 + 96;
        uint64_t v37 = (char *)&v9[v19];
        unint64_t v38 = v35 - v37;
        uint64_t v39 = v37 + 96;
        unint64_t v40 = v37 + 96 - v35;
        unint64_t v41 = v36 - v37;
        unint64_t v42 = v36 - v39;
        if (v38 >= 0x10 && v40 >= 0x10 && v41 >= 0x10 && v42 >= 0x10)
        {
          v19 += v20 & 0xFFFFFFFE;
          unsigned int v21 = v18 + (v20 & 0xFFFFFFFE);
          unsigned int v59 = v20 & 0xFFFFFFFE;
          do
          {
            uint64_t v60 = (v18 + 1);
            uint64_t v61 = v18;
            *(_OWORD *)&v9[v61] = *(_OWORD *)&v9[v60];
            *(_OWORD *)&v9[v61 + 12] = *(_OWORD *)&v9[v60 + 12];
            LODWORD(v18) = v18 + 2;
            v59 -= 2;
          }
          while (v59);
          if (v20 == (v20 & 0xFFFFFFFE)) {
            goto LABEL_61;
          }
        }
        else
        {
          unsigned int v21 = v18;
        }
      }
      else
      {
        unsigned int v21 = *(_DWORD *)(v5 + 16 * v7 + 12);
      }
    }
    else
    {
      unsigned int v21 = *(_DWORD *)(v5 + 16 * v7 + 12);
    }
    do
    {
      uint64_t v62 = v19;
      uint64_t v63 = v21;
      v9[v63] = v9[v62];
      v9[v63 + 12] = v9[v62 + 12];
      ++v19;
      ++v21;
    }
    while (v10 != v19);
LABEL_61:
    uint64_t v5 = *v6;
    int v10 = *(_DWORD *)(*v6 + 16 * v7 + 8);
    goto LABEL_62;
  }
  uint64_t v12 = *(unsigned int *)(v5 + 12);
  int v13 = *(_DWORD *)(v4 + 276);
  unsigned int v14 = v12 + 1;
  if (v12 + 1 != v13)
  {
    uint64_t v15 = v4 + 8;
    unsigned int v16 = v13 + ~v12;
    if (v16 >= 0x18)
    {
      if (v13 - 2 >= v12 && v13 - 1 >= v14)
      {
        uint64_t v24 = v4 + 8 * v12;
        uint64_t v25 = v24 + 136;
        v24 += 8;
        uint64_t v26 = v4 + 8 * v14;
        uint64_t v27 = v26 + 8;
        unint64_t v28 = v24 - (v26 + 8);
        v26 += 136;
        unint64_t v29 = v26 - v24;
        unint64_t v30 = v25 - v27;
        unint64_t v31 = v25 - v26;
        if (v28 >= 0x10 && v29 >= 0x10 && v30 >= 0x10 && v31 >= 0x10)
        {
          v14 += v16 & 0xFFFFFFFE;
          unsigned int v17 = v12 + (v16 & 0xFFFFFFFE);
          unsigned int v46 = v16 & 0xFFFFFFFE;
          do
          {
            uint64_t v47 = 8 * (v12 + 1);
            uint64_t v48 = 8 * v12;
            *(_OWORD *)(v15 + v48) = *(_OWORD *)(v15 + v47);
            *(_OWORD *)(v4 + 136 + v48) = *(_OWORD *)(v4 + 136 + v47);
            LODWORD(v12) = v12 + 2;
            v46 -= 2;
          }
          while (v46);
          if (v16 == (v16 & 0xFFFFFFFE)) {
            goto LABEL_46;
          }
        }
        else
        {
          unsigned int v17 = v12;
        }
      }
      else
      {
        unsigned int v17 = v12;
      }
    }
    else
    {
      unsigned int v17 = v12;
    }
    do
    {
      uint64_t v49 = 8 * v14;
      uint64_t v50 = 8 * v17;
      *(void *)(v15 + v50) = *(void *)(v15 + v49);
      *(void *)(v4 + 136 + v50) = *(void *)(v4 + 136 + v49);
      ++v14;
      ++v17;
    }
    while (v13 != v14);
LABEL_46:
    int v13 = *(_DWORD *)(v4 + 276);
    uint64_t v5 = *v6;
  }
  int v51 = v13 - 1;
  *(_DWORD *)(v4 + 276) = v51;
  *(_DWORD *)(v5 + 8) = v51;
  if (v51)
  {
LABEL_69:
    if (*((_DWORD *)a1 + 4))
    {
      uint64_t v73 = *v6;
      if (*(_DWORD *)(*v6 + 12) < *(_DWORD *)(*v6 + 8))
      {
        uint64_t v74 = *(void *)(*(void *)(v73 + 16 * v7)
                        + 8 * *(unsigned int *)(v73 + 16 * v7 + 12));
        uint64_t v75 = 16 * a2;
        uint64_t v76 = v73 + v75;
        *(void *)uint64_t v76 = v74 & 0xFFFFFFFFFFFFFFC0;
        *(_DWORD *)(v76 + 8) = (v74 & 0x3F) + 1;
        *(_DWORD *)(*v6 + v75 + 12) = 0;
      }
    }
    return;
  }
  *(_DWORD *)(v4 + 272) = 0;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  uint64_t v52 = *a1;
  if (*(_DWORD *)(*a1 + 272))
  {
    uint64_t v53 = v52 + 8;
    unsigned int v54 = *(_DWORD *)(v52 + 276);
    *((_DWORD *)a1 + 4) = 0;
    uint64_t v55 = a1 + 2;
    if (*((_DWORD *)a1 + 5))
    {
      uint64_t v56 = 0;
    }
    else
    {
      uint64_t v77 = v52 + 8;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, a1 + 3, 1uLL, 16);
      uint64_t v53 = v77;
      uint64_t v56 = *((unsigned int *)a1 + 4);
    }
    uint64_t v57 = (void *)(*v6 + 16 * v56);
    *uint64_t v57 = v53;
  }
  else
  {
    unsigned int v54 = *(_DWORD *)(v52 + 276);
    *((_DWORD *)a1 + 4) = 0;
    uint64_t v55 = a1 + 2;
    if (*((_DWORD *)a1 + 5))
    {
      uint64_t v58 = 0;
    }
    else
    {
      uint64_t v78 = v52;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, a1 + 3, 1uLL, 16);
      uint64_t v52 = v78;
      uint64_t v58 = *((unsigned int *)a1 + 4);
    }
    uint64_t v57 = (void *)(*v6 + 16 * v58);
    *uint64_t v57 = v52;
  }
  v57[1] = v54;
  ++*v55;
}

uint64_t llvm::IntervalMapImpl::adjustSiblingSizes<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v356 = a2 - 1;
  if (a2 != 1)
  {
    uint64_t v4 = (int)v356;
    uint64_t v358 = a4;
    uint64_t v359 = result;
    unsigned int v360 = a2;
    while (1)
    {
      uint64_t v5 = 4 * v4;
      unsigned int v6 = *(_DWORD *)(a3 + 4 * v4);
      unsigned int v7 = *(_DWORD *)(a4 + 4 * v4);
      if (v6 != v7) {
        break;
      }
LABEL_3:
      if (!--v4)
      {
        if (a2 < 2) {
          return result;
        }
        uint64_t v179 = 0;
        while (1)
        {
          uint64_t v180 = 4 * v179;
          unsigned int v181 = *(_DWORD *)(a3 + 4 * v179);
          unsigned int v182 = *(_DWORD *)(a4 + 4 * v179);
          if (v181 != v182) {
            break;
          }
LABEL_270:
          if (++v179 == v356) {
            return result;
          }
        }
        LODWORD(v183) = v179;
        uint64_t v362 = v179;
        while (2)
        {
          uint64_t v183 = (v183 + 1);
          if (v183 == a2) {
            goto LABEL_270;
          }
          uint64_t v185 = *(char **)(result + 8 * v183);
          uint64_t v186 = *(unsigned int *)(a3 + 4 * v183);
          uint64_t v187 = *(void *)(result + 8 * v179);
          unint64_t v188 = v181 - v182;
          if ((int)v188 >= 1)
          {
            unint64_t v189 = (11 - v186);
            if (v181 >= v188) {
              unsigned int v190 = v181 - v182;
            }
            else {
              unsigned int v190 = v181;
            }
            if (v189 >= v190) {
              int v184 = v190;
            }
            else {
              int v184 = 11 - v186;
            }
            if (!v186) {
              goto LABEL_508;
            }
            if (v186 >= 8)
            {
              uint64_t v200 = (v186 - 1);
              uint64_t v201 = (v200 + v184);
              if (!__CFADD__(v200, v184))
              {
                uint64_t v202 = v185 + 8;
                uint64_t v203 = 16 * (v200 + v184);
                unint64_t v204 = (unint64_t)&v185[v203 + 8];
                uint64_t v205 = 16 * (v186 - 1);
                unint64_t v206 = (unint64_t)&v185[v205 + 8];
                unint64_t v207 = (unint64_t)(v185 + 176);
                if (v204 - v205 > v204
                  || &v185[v203 - v205] > &v185[v203]
                  || (unint64_t)v202 > v206
                  || v185 > &v185[v205]
                  || &v185[v201 + 176 - v200] > &v185[v201 + 176]
                  || v207 > (unint64_t)&v185[v200 + 176])
                {
                  int v191 = *(_DWORD *)(a3 + 4 * v183);
                  uint64_t result = v359;
                  goto LABEL_501;
                }
                uint64_t v213 = &v185[v203 - v205];
                unint64_t v214 = (unint64_t)&v202[v203 - v205];
                unint64_t v215 = (unint64_t)&v185[v203 + 16];
                unint64_t v216 = (unint64_t)&v185[v205 + 16];
                unint64_t v217 = v207 + v201 - v200;
                unint64_t v218 = (unint64_t)&v185[v201 + 177];
                __int16 v219 = &v185[v200 + 177];
                BOOL v221 = (unint64_t)v213 < v206 && (unint64_t)v185 < v204;
                BOOL v223 = (unint64_t)v213 < v216 && (unint64_t)v202 < v204;
                BOOL v225 = (unint64_t)v213 < v218 && v217 < v204;
                BOOL v227 = v213 < v219 && v207 < v204;
                BOOL v229 = v214 < v206 && (unint64_t)v185 < v215;
                BOOL v231 = v214 < v216 && (unint64_t)v202 < v215;
                BOOL v233 = v214 < v218 && v217 < v215;
                BOOL v235 = v214 < (unint64_t)v219 && v207 < v215;
                BOOL v237 = (unint64_t)v185 < v218 && v217 < v206;
                BOOL v239 = (unint64_t)v202 < v218 && v217 < v216;
                BOOL v241 = v217 < (unint64_t)v219 && v207 < v218;
                if (v214 < v204 && (unint64_t)v213 < v215)
                {
                  int v191 = *(_DWORD *)(a3 + 4 * v183);
                  a4 = v358;
                  uint64_t result = v359;
                  a2 = v360;
                  uint64_t v179 = v362;
                  goto LABEL_501;
                }
                a2 = v360;
                uint64_t result = v359;
                if (v221 || v223 || v225 || v227 || v229 || v231 || v233 || v235 || v237 || v239)
                {
                  int v191 = *(_DWORD *)(a3 + 4 * v183);
                  a4 = v358;
                  uint64_t v179 = v362;
                  goto LABEL_501;
                }
                a4 = v358;
                uint64_t v179 = v362;
                if (!v241)
                {
                  if (v186 >= 0x10)
                  {
                    uint64_t v243 = v186 & 0xFFFFFFF0;
                    uint64_t v306 = v243;
                    uint64_t v307 = *(unsigned int *)(a3 + 4 * v183);
                    do
                    {
                      uint64_t v308 = (v307 - 1);
                      uint64_t v309 = (const double *)&v185[16 * v308 - 240];
                      uint64_t v310 = v309;
                      float64x2x2_t v366 = vld2q_f64(v310);
                      v310 += 4;
                      float64x2x2_t v370 = vld2q_f64(v310);
                      uint64_t v311 = v309 + 8;
                      float64x2x2_t v374 = vld2q_f64(v311);
                      uint64_t v312 = v309 + 12;
                      float64x2x2_t v378 = vld2q_f64(v312);
                      __int16 v313 = v309 + 16;
                      float64x2x2_t v380 = vld2q_f64(v313);
                      unsigned int v314 = v309 + 20;
                      float64x2x2_t v382 = vld2q_f64(v314);
                      unsigned int v315 = v309 + 24;
                      float64x2x2_t v384 = vld2q_f64(v315);
                      v309 += 28;
                      uint64_t v316 = (v184 - 1 + v307);
                      float64x2x2_t v386 = vld2q_f64(v309);
                      uint64_t v317 = (double *)&v185[16 * v316 - 248];
                      uint64_t v318 = v317 + 1;
                      vst2q_f64(v318, v366);
                      int v319 = v317 + 5;
                      vst2q_f64(v319, v370);
                      BOOL v320 = v317 + 9;
                      vst2q_f64(v320, v374);
                      unsigned int v321 = v317 + 13;
                      vst2q_f64(v321, v378);
                      unint64_t v322 = v317 + 17;
                      vst2q_f64(v322, v380);
                      unint64_t v323 = v317 + 21;
                      vst2q_f64(v323, v382);
                      uint64_t v324 = v317 + 25;
                      vst2q_f64(v324, v384);
                      v317 += 29;
                      vst2q_f64(v317, v386);
                      *(_OWORD *)&v185[v316 + 161] = *(_OWORD *)&v185[v308 + 161];
                      v307 -= 16;
                      v306 -= 16;
                    }
                    while (v306);
                    if (v243 == v186) {
                      goto LABEL_508;
                    }
                    if ((v186 & 8) != 0) {
                      goto LABEL_399;
                    }
                    int v191 = v186 & 0xF;
                  }
                  else
                  {
                    uint64_t v243 = 0;
LABEL_399:
                    int v191 = v186 & 7;
                    unsigned int v244 = ~v243 + v186 + v184;
                    uint64_t v245 = ~v243 + v186;
                    uint64_t v246 = v243 - (v186 & 0xFFFFFFF8);
                    do
                    {
                      uint64_t v247 = (const double *)&v185[16 * v245 - 112];
                      unsigned int v248 = v247;
                      float64x2x2_t v365 = vld2q_f64(v248);
                      v248 += 4;
                      float64x2x2_t v369 = vld2q_f64(v248);
                      uint64_t v249 = v247 + 8;
                      float64x2x2_t v373 = vld2q_f64(v249);
                      v247 += 12;
                      float64x2x2_t v377 = vld2q_f64(v247);
                      unint64_t v250 = (double *)&v185[16 * v244 - 120];
                      __int16 v251 = v250 + 1;
                      vst2q_f64(v251, v365);
                      uint64_t v252 = v250 + 5;
                      vst2q_f64(v252, v369);
                      uint64_t v253 = v250 + 9;
                      vst2q_f64(v253, v373);
                      v250 += 13;
                      vst2q_f64(v250, v377);
                      *(void *)&v185[v244 + 169] = *(void *)&v185[v245 + 169];
                      v244 -= 8;
                      v245 -= 8;
                      v246 += 8;
                    }
                    while (v246);
                    if ((v186 & 0xFFFFFFF8) == v186)
                    {
LABEL_508:
                      if (v184)
                      {
                        uint64_t v330 = 0;
                        unsigned int v331 = v181 - v184;
                        unint64_t v332 = v181;
                        if (v181 >= v188) {
                          unint64_t v332 = v188;
                        }
                        if (v332 >= v189) {
                          int v333 = v189;
                        }
                        else {
                          int v333 = v332;
                        }
                        do
                        {
                          uint64_t v334 = v331 + v330;
                          *(_OWORD *)&v185[16 * v330] = *(_OWORD *)(v187 + 16 * v334);
                          v185[v330++ + 176] = *(unsigned char *)(v187 + v334 + 176);
                        }
                        while (v333 != v330);
                      }
LABEL_274:
                      *(_DWORD *)(a3 + 4 * v183) += v184;
                      unsigned int v181 = *(_DWORD *)(a3 + v180) - v184;
                      *(_DWORD *)(a3 + v180) = v181;
                      unsigned int v182 = *(_DWORD *)(a4 + v180);
                      if (v181 >= v182) {
                        goto LABEL_270;
                      }
                      continue;
                    }
                  }
LABEL_501:
                  uint64_t v325 = (v191 - 1);
                  int v326 = -v191;
                  unint64_t v327 = v181;
                  if (v181 >= v188) {
                    unint64_t v327 = v188;
                  }
                  if (v327 >= v189) {
                    int v328 = v189;
                  }
                  else {
                    int v328 = v327;
                  }
                  do
                  {
                    uint64_t v329 = (v328 + v325);
                    *(_OWORD *)&v185[16 * v329] = *(_OWORD *)&v185[16 * v325];
                    v185[v329 + 176] = v185[v325-- + 176];
                    BOOL v44 = __CFADD__(v326++, 1);
                  }
                  while (!v44);
                  goto LABEL_508;
                }
              }
            }
            int v191 = *(_DWORD *)(a3 + 4 * v183);
            goto LABEL_501;
          }
          break;
        }
        unsigned int v192 = 11 - v181;
        if (v182 - v181 < v186) {
          unsigned int v193 = v182 - v181;
        }
        else {
          unsigned int v193 = *(_DWORD *)(a3 + 4 * v183);
        }
        if (v192 >= v193) {
          uint64_t v194 = v193;
        }
        else {
          uint64_t v194 = v192;
        }
        if (v194)
        {
          for (uint64_t i = 0; i != v194; ++i)
          {
            uint64_t v196 = v181 + i;
            *(_OWORD *)(v187 + 16 * v196) = *(_OWORD *)&v185[16 * i];
            *(unsigned char *)(v187 + v196 + 176) = v185[i + 176];
          }
        }
        if (v194 != v186)
        {
          uint64_t v197 = (v186 + ~v194);
          if (v197 < 7)
          {
            uint64_t v198 = 0;
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          uint64_t v198 = 0;
          if ((int)v186 - 1 < v194)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          unint64_t v254 = (unint64_t)(v185 + 8);
          uint64_t v255 = 16 * v194;
          unint64_t v256 = (unint64_t)&v185[v255 + 8];
          uint64_t v257 = 16 * (v186 - 1 - v194);
          if (v256 + v257 < v256)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          unint64_t v258 = (unint64_t)&v185[v255];
          if (&v185[v255 + v257] < &v185[v255])
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          uint64_t v259 = v179;
          uint64_t v198 = 0;
          unint64_t v260 = v254 + 16 * v197;
          unint64_t v261 = (unint64_t)&v185[16 * v197 + 16];
          unint64_t v262 = (unint64_t)(v185 + 176);
          uint64_t v263 = &v185[v197 + 177];
          uint64_t v264 = v255 + 16 * v197;
          unint64_t v265 = v254 + v264;
          uint64_t v266 = &v185[v264 + 16];
          unint64_t v267 = (unint64_t)&v185[v194 + 176];
          unint64_t v268 = (unint64_t)&v185[v194 + 177 + v197];
          BOOL v270 = v185 < v263 && v262 < v260;
          BOOL v272 = (unint64_t)v185 < v265 && v258 < v260;
          BOOL v274 = v185 < v266 && v256 < v260;
          BOOL v276 = (unint64_t)v185 < v268 && v267 < v260;
          BOOL v278 = v254 < (unint64_t)v263 && v262 < v261;
          BOOL v280 = v254 < v265 && v258 < v261;
          BOOL v282 = v254 < (unint64_t)v266 && v256 < v261;
          BOOL v284 = v254 < v268 && v267 < v261;
          BOOL v286 = v262 < v265 && v258 < (unint64_t)v263;
          BOOL v288 = v262 < (unint64_t)v266 && v256 < (unint64_t)v263;
          BOOL v290 = v262 < v268 && v267 < (unint64_t)v263;
          if (v254 < v260 && (unint64_t)v185 < v261)
          {
            unsigned int v199 = v194;
            uint64_t result = v359;
            uint64_t v179 = v259;
            a2 = v360;
            goto LABEL_533;
          }
          uint64_t result = v359;
          uint64_t v179 = v259;
          if (v270 || v272 || v274)
          {
            unsigned int v199 = v194;
            a2 = v360;
            goto LABEL_533;
          }
          a2 = v360;
          if (v276)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v278)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v280)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v282)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v284)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v286)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v288)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          if (v290)
          {
            unsigned int v199 = v194;
            goto LABEL_533;
          }
          uint64_t v292 = v197 + 1;
          if (v197 >= 0xF)
          {
            uint64_t v198 = v292 & 0x1FFFFFFF0;
            __int16 v335 = v185 + 176;
            unsigned int v336 = v194;
            uint64_t v337 = v292 & 0x1FFFFFFF0;
            uint64_t v338 = v185;
            do
            {
              uint64_t v339 = (long long *)&v185[16 * v336];
              long long v341 = *v339;
              long long v340 = v339[1];
              long long v343 = v339[2];
              long long v342 = v339[3];
              long long v345 = v339[4];
              long long v344 = v339[5];
              long long v347 = v339[6];
              long long v346 = v339[7];
              long long v349 = v339[8];
              long long v348 = v339[9];
              long long v351 = v339[10];
              long long v350 = v339[11];
              long long v353 = v339[12];
              long long v352 = v339[13];
              long long v354 = v339[15];
              *((_OWORD *)v338 + 14) = v339[14];
              *((_OWORD *)v338 + 15) = v354;
              *((_OWORD *)v338 + 12) = v353;
              *((_OWORD *)v338 + 13) = v352;
              *((_OWORD *)v338 + 10) = v351;
              *((_OWORD *)v338 + 11) = v350;
              *((_OWORD *)v338 + 8) = v349;
              *((_OWORD *)v338 + 9) = v348;
              *((_OWORD *)v338 + 6) = v347;
              *((_OWORD *)v338 + 7) = v346;
              *((_OWORD *)v338 + 4) = v345;
              *((_OWORD *)v338 + 5) = v344;
              *((_OWORD *)v338 + 2) = v343;
              *((_OWORD *)v338 + 3) = v342;
              *(_OWORD *)uint64_t v338 = v341;
              *((_OWORD *)v338 + 1) = v340;
              v338 += 256;
              v355 = &v185[v336];
              v336 += 16;
              *v335++ = *((_OWORD *)v355 + 11);
              v337 -= 16;
            }
            while (v337);
            if (v292 != v198)
            {
              if ((v292 & 8) == 0)
              {
                unsigned int v199 = v194 + v198;
                goto LABEL_533;
              }
              goto LABEL_491;
            }
          }
          else
          {
            uint64_t v198 = 0;
LABEL_491:
            uint64_t v293 = v198;
            uint64_t v198 = v292 & 0x1FFFFFFF8;
            unsigned int v199 = v194 + (v292 & 0xFFFFFFF8);
            uint64_t v294 = &v185[16 * v293];
            unint64_t v295 = &v185[v293 + 176];
            uint64_t v296 = v293 - (v292 & 0x1FFFFFFF8);
            unsigned int v297 = v194 + v293;
            do
            {
              uint64_t v298 = (long long *)&v185[16 * v297];
              long long v300 = *v298;
              long long v299 = v298[1];
              long long v302 = v298[2];
              long long v301 = v298[3];
              long long v304 = v298[4];
              long long v303 = v298[5];
              long long v305 = v298[7];
              *((_OWORD *)v294 + 6) = v298[6];
              *((_OWORD *)v294 + 7) = v305;
              *((_OWORD *)v294 + 4) = v304;
              *((_OWORD *)v294 + 5) = v303;
              *((_OWORD *)v294 + 2) = v302;
              *((_OWORD *)v294 + 3) = v301;
              *(_OWORD *)uint64_t v294 = v300;
              *((_OWORD *)v294 + 1) = v299;
              v294 += 128;
              *(void *)unint64_t v295 = *(void *)&v185[v297 + 176];
              v295 += 8;
              v297 += 8;
              v296 += 8;
            }
            while (v296);
            if (v292 != v198)
            {
              do
              {
LABEL_533:
                *(_OWORD *)&v185[16 * v198] = *(_OWORD *)&v185[16 * v199];
                v185[v198++ + 176] = v185[v199++ + 176];
              }
              while (v186 != v199);
            }
          }
        }
        int v184 = -(int)v194;
        goto LABEL_274;
      }
    }
    uint64_t v8 = v4;
    uint64_t v361 = v4;
    while (1)
    {
      if (!v8) {
        goto LABEL_3;
      }
      --v8;
      int v10 = *(char **)(result + 8 * v4);
      uint64_t v11 = *(void *)(result + 8 * v8);
      unint64_t v12 = *(unsigned int *)(a3 + 4 * v8);
      unint64_t v13 = v7 - v6;
      if ((int)v13 >= 1)
      {
        unint64_t v14 = 11 - v6;
        if (v12 >= v13) {
          unsigned int v9 = v7 - v6;
        }
        else {
          unsigned int v9 = *(_DWORD *)(a3 + 4 * v8);
        }
        if (v14 < v9) {
          unsigned int v9 = 11 - v6;
        }
        if (!v6) {
          goto LABEL_142;
        }
        if (v6 >= 8)
        {
          uint64_t v24 = v6 - 1;
          uint64_t v25 = v24 + v9;
          if (!__CFADD__(v24, v9))
          {
            uint64_t v26 = v10 + 8;
            uint64_t v27 = 16 * (v24 + v9);
            unint64_t v28 = (unint64_t)&v10[v27 + 8];
            uint64_t v29 = 16 * (v6 - 1);
            unint64_t v30 = (unint64_t)&v10[v29 + 8];
            unint64_t v31 = (unint64_t)(v10 + 176);
            if (v28 - v29 > v28
              || &v10[v27 - v29] > &v10[v27]
              || (unint64_t)v26 > v30
              || v10 > &v10[v29]
              || &v10[v25 + 176 - v24] > &v10[v25 + 176]
              || v31 > (unint64_t)&v10[v24 + 176])
            {
              int v15 = v6;
            }
            else
            {
              uint64_t v357 = v6;
              uint64_t v37 = &v10[v27 - v29];
              unint64_t v38 = (unint64_t)&v26[v27 - v29];
              unint64_t v39 = (unint64_t)&v10[v27 + 16];
              unint64_t v40 = (unint64_t)&v10[v29 + 16];
              unint64_t v41 = v31 + v25 - v24;
              unint64_t v42 = (unint64_t)&v10[v25 + 177];
              int v43 = &v10[v24 + 177];
              BOOL v44 = (unint64_t)v37 >= v30 || (unint64_t)v10 >= v28;
              char v45 = !v44;
              BOOL v47 = (unint64_t)v37 < v40 && (unint64_t)v26 < v28;
              BOOL v49 = (unint64_t)v37 < v42 && v41 < v28;
              BOOL v51 = v37 < v43 && v31 < v28;
              BOOL v53 = v38 < v30 && (unint64_t)v10 < v39;
              BOOL v55 = v38 < v40 && (unint64_t)v26 < v39;
              BOOL v57 = v38 < v42 && v41 < v39;
              BOOL v59 = v38 < (unint64_t)v43 && v31 < v39;
              BOOL v61 = (unint64_t)v10 < v42 && v41 < v30;
              BOOL v63 = (unint64_t)v26 < v42 && v41 < v40;
              BOOL v65 = v41 < (unint64_t)v43 && v31 < v42;
              if (v38 < v28 && (unint64_t)v37 < v39)
              {
                int v15 = v6;
                a4 = v358;
                a2 = v360;
                uint64_t result = v359;
                goto LABEL_133;
              }
              uint64_t result = v359;
              if ((v45 & 1) == 0 && !v47 && !v49 && !v51 && !v53 && !v55)
              {
                uint64_t v4 = v361;
                if (v57 || v59)
                {
                  int v15 = v6;
                  a4 = v358;
                }
                else
                {
                  a4 = v358;
                  if (!v61 && !v63)
                  {
                    a2 = v360;
                    if (v65)
                    {
                      int v15 = v6;
                    }
                    else if (v6 >= 0x10)
                    {
                      uint64_t v67 = v6 & 0xFFFFFFF0;
                      uint64_t v129 = v67;
                      uint64_t v130 = v6;
                      do
                      {
                        uint64_t v131 = (v130 - 1);
                        uint64_t v132 = (const double *)&v10[16 * v131 - 240];
                        BOOL v133 = v132;
                        float64x2x2_t v363 = vld2q_f64(v133);
                        v133 += 4;
                        float64x2x2_t v367 = vld2q_f64(v133);
                        uint64_t v134 = v132 + 8;
                        float64x2x2_t v371 = vld2q_f64(v134);
                        unsigned int v135 = v132 + 12;
                        float64x2x2_t v375 = vld2q_f64(v135);
                        unsigned int v136 = v132 + 16;
                        float64x2x2_t v379 = vld2q_f64(v136);
                        unsigned int v137 = v132 + 20;
                        float64x2x2_t v381 = vld2q_f64(v137);
                        uint64_t v138 = v132 + 24;
                        float64x2x2_t v383 = vld2q_f64(v138);
                        v132 += 28;
                        uint64_t v139 = v9 - 1 + v130;
                        float64x2x2_t v385 = vld2q_f64(v132);
                        long long v140 = (double *)&v10[16 * v139 - 248];
                        long long v141 = v140 + 1;
                        vst2q_f64(v141, v363);
                        long long v142 = v140 + 5;
                        vst2q_f64(v142, v367);
                        long long v143 = v140 + 9;
                        vst2q_f64(v143, v371);
                        uint64_t v144 = v140 + 13;
                        vst2q_f64(v144, v375);
                        long long v145 = v140 + 17;
                        vst2q_f64(v145, v379);
                        long long v146 = v140 + 21;
                        vst2q_f64(v146, v381);
                        long long v147 = v140 + 25;
                        vst2q_f64(v147, v383);
                        v140 += 29;
                        vst2q_f64(v140, v385);
                        *(_OWORD *)&v10[v139 + 161] = *(_OWORD *)&v10[v131 + 161];
                        v130 -= 16;
                        v129 -= 16;
                      }
                      while (v129);
                      if (v67 == v6) {
                        goto LABEL_142;
                      }
                      if ((v6 & 8) != 0) {
                        goto LABEL_248;
                      }
                      int v15 = v6 & 0xF;
                    }
                    else
                    {
                      uint64_t v67 = 0;
LABEL_248:
                      int v15 = v6 & 7;
                      unsigned int v148 = ~v67 + v6 + v9;
                      uint64_t v149 = ~v67 + v357;
                      uint64_t v150 = v67 - (v357 & 0xFFFFFFF8);
                      do
                      {
                        long long v151 = (const double *)&v10[16 * v149 - 112];
                        long long v152 = v151;
                        float64x2x2_t v364 = vld2q_f64(v152);
                        v152 += 4;
                        float64x2x2_t v368 = vld2q_f64(v152);
                        long long v153 = v151 + 8;
                        float64x2x2_t v372 = vld2q_f64(v153);
                        v151 += 12;
                        float64x2x2_t v376 = vld2q_f64(v151);
                        long long v154 = (double *)&v10[16 * v148 - 120];
                        long long v155 = v154 + 1;
                        vst2q_f64(v155, v364);
                        long long v156 = v154 + 5;
                        vst2q_f64(v156, v368);
                        __int16 v157 = v154 + 9;
                        vst2q_f64(v157, v372);
                        v154 += 13;
                        vst2q_f64(v154, v376);
                        *(void *)&v10[v148 + 169] = *(void *)&v10[v149 + 169];
                        v148 -= 8;
                        v149 -= 8;
                        v150 += 8;
                      }
                      while (v150);
                      if ((v357 & 0xFFFFFFF8) == v357)
                      {
LABEL_142:
                        if (v9)
                        {
                          uint64_t v73 = 0;
                          int v74 = v12 - v9;
                          if (v12 >= v13) {
                            unint64_t v75 = v13;
                          }
                          else {
                            unint64_t v75 = v12;
                          }
                          if (v75 >= v14) {
                            int v76 = v14;
                          }
                          else {
                            int v76 = v75;
                          }
                          do
                          {
                            uint64_t v77 = (v74 + v73);
                            *(_OWORD *)&v10[16 * v73] = *(_OWORD *)(v11 + 16 * v77);
                            v10[v73++ + 176] = *(unsigned char *)(v11 + v77 + 176);
                          }
                          while (v76 != v73);
                        }
                        goto LABEL_7;
                      }
                    }
LABEL_134:
                    uint64_t v68 = (v15 - 1);
                    int v69 = -v15;
                    if (v12 >= v13) {
                      unint64_t v70 = v13;
                    }
                    else {
                      unint64_t v70 = v12;
                    }
                    if (v70 >= v14) {
                      int v71 = v14;
                    }
                    else {
                      int v71 = v70;
                    }
                    do
                    {
                      uint64_t v72 = (v71 + v68);
                      *(_OWORD *)&v10[16 * v72] = *(_OWORD *)&v10[16 * v68];
                      v10[v72 + 176] = v10[v68-- + 176];
                      BOOL v44 = __CFADD__(v69++, 1);
                    }
                    while (!v44);
                    goto LABEL_142;
                  }
                  int v15 = v6;
                }
                a2 = v360;
                goto LABEL_134;
              }
              int v15 = v6;
            }
            a4 = v358;
            a2 = v360;
LABEL_133:
            uint64_t v4 = v361;
            goto LABEL_134;
          }
        }
        int v15 = v6;
        goto LABEL_134;
      }
      unsigned int v16 = 11 - v12;
      if (v6 - v7 < v6) {
        unsigned int v17 = v6 - v7;
      }
      else {
        unsigned int v17 = v6;
      }
      if (v16 >= v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = v16;
      }
      if (v18)
      {
        for (uint64_t j = 0; j != v18; ++j)
        {
          uint64_t v20 = (v12 + j);
          *(_OWORD *)(v11 + 16 * v20) = *(_OWORD *)&v10[16 * j];
          *(unsigned char *)(v11 + v20 + 176) = v10[j + 176];
        }
      }
      if (v18 != v6) {
        break;
      }
LABEL_6:
      unsigned int v9 = -(int)v18;
LABEL_7:
      *(_DWORD *)(a3 + 4 * v8) -= v9;
      unsigned int v6 = *(_DWORD *)(a3 + v5) + v9;
      *(_DWORD *)(a3 + v5) = v6;
      unsigned int v7 = *(_DWORD *)(a4 + v5);
      if (v6 >= v7) {
        goto LABEL_3;
      }
    }
    uint64_t v21 = v6 + ~v18;
    if (v21 < 7)
    {
      uint64_t v22 = 0;
      unsigned int v23 = v18;
      goto LABEL_258;
    }
    uint64_t v22 = 0;
    if (v6 - 1 < v18)
    {
      unsigned int v23 = v18;
    }
    else
    {
      unint64_t v78 = (unint64_t)(v10 + 8);
      uint64_t v79 = 16 * v18;
      unint64_t v80 = (unint64_t)&v10[v79 + 8];
      uint64_t v81 = 16 * (v6 - 1 - v18);
      if (v80 + v81 < v80)
      {
        unsigned int v23 = v18;
      }
      else
      {
        unint64_t v82 = (unint64_t)&v10[v79];
        if (&v10[v79 + v81] < &v10[v79])
        {
          unsigned int v23 = v18;
        }
        else
        {
          uint64_t v22 = 0;
          unint64_t v83 = v78 + 16 * v21;
          unint64_t v84 = (unint64_t)&v10[16 * v21 + 16];
          unint64_t v85 = (unint64_t)(v10 + 176);
          long long v86 = &v10[v21 + 177];
          uint64_t v87 = v79 + 16 * v21;
          unint64_t v88 = v78 + v87;
          unsigned int v89 = &v10[v87 + 16];
          unint64_t v90 = (unint64_t)&v10[v18 + 176];
          unint64_t v91 = (unint64_t)&v10[v18 + 177 + v21];
          BOOL v93 = v10 < v86 && v85 < v83;
          BOOL v95 = (unint64_t)v10 < v88 && v82 < v83;
          BOOL v97 = v10 < v89 && v80 < v83;
          BOOL v99 = (unint64_t)v10 < v91 && v90 < v83;
          BOOL v101 = v78 < (unint64_t)v86 && v85 < v84;
          BOOL v103 = v78 < v88 && v82 < v84;
          BOOL v105 = v78 < (unint64_t)v89 && v80 < v84;
          BOOL v107 = v78 < v91 && v90 < v84;
          BOOL v109 = v85 < v88 && v82 < (unint64_t)v86;
          BOOL v111 = v85 < (unint64_t)v89 && v80 < (unint64_t)v86;
          BOOL v113 = v85 < v91 && v90 < (unint64_t)v86;
          if (v78 < v83 && (unint64_t)v10 < v84)
          {
            unsigned int v23 = v18;
            uint64_t result = v359;
            uint64_t v4 = v361;
            goto LABEL_258;
          }
          uint64_t result = v359;
          if (v93 || v95 || v97 || v99 || v101 || v103 || v105 || v107 || v109 || v111 || v113)
          {
            unsigned int v23 = v18;
            uint64_t v4 = v361;
          }
          else
          {
            uint64_t v115 = v21 + 1;
            if (v21 < 0xF)
            {
              uint64_t v22 = 0;
              uint64_t v4 = v361;
              goto LABEL_238;
            }
            uint64_t v22 = v115 & 0x1FFFFFFF0;
            unsigned int v158 = v10 + 176;
            unsigned int v159 = v18;
            uint64_t v160 = v115 & 0x1FFFFFFF0;
            char v161 = v10;
            do
            {
              long long v162 = (long long *)&v10[16 * v159];
              long long v164 = *v162;
              long long v163 = v162[1];
              long long v166 = v162[2];
              long long v165 = v162[3];
              long long v168 = v162[4];
              long long v167 = v162[5];
              long long v170 = v162[6];
              long long v169 = v162[7];
              long long v172 = v162[8];
              long long v171 = v162[9];
              long long v174 = v162[10];
              long long v173 = v162[11];
              long long v176 = v162[12];
              long long v175 = v162[13];
              long long v177 = v162[15];
              *((_OWORD *)v161 + 14) = v162[14];
              *((_OWORD *)v161 + 15) = v177;
              *((_OWORD *)v161 + 12) = v176;
              *((_OWORD *)v161 + 13) = v175;
              *((_OWORD *)v161 + 10) = v174;
              *((_OWORD *)v161 + 11) = v173;
              *((_OWORD *)v161 + 8) = v172;
              *((_OWORD *)v161 + 9) = v171;
              *((_OWORD *)v161 + 6) = v170;
              *((_OWORD *)v161 + 7) = v169;
              *((_OWORD *)v161 + 4) = v168;
              *((_OWORD *)v161 + 5) = v167;
              *((_OWORD *)v161 + 2) = v166;
              *((_OWORD *)v161 + 3) = v165;
              *(_OWORD *)char v161 = v164;
              *((_OWORD *)v161 + 1) = v163;
              v161 += 256;
              float64x2x2_t v178 = &v10[v159];
              v159 += 16;
              *v158++ = *((_OWORD *)v178 + 11);
              v160 -= 16;
            }
            while (v160);
            uint64_t v4 = v361;
            if (v115 == v22) {
              goto LABEL_6;
            }
            if ((v115 & 8) != 0)
            {
LABEL_238:
              uint64_t v116 = v22;
              uint64_t v22 = v115 & 0x1FFFFFFF8;
              unsigned int v23 = v18 + (v115 & 0xFFFFFFF8);
              BOOL v117 = &v10[16 * v116];
              uint64_t v118 = &v10[v116 + 176];
              uint64_t v119 = v116 - (v115 & 0x1FFFFFFF8);
              unsigned int v120 = v18 + v116;
              do
              {
                BOOL v121 = (long long *)&v10[16 * v120];
                long long v123 = *v121;
                long long v122 = v121[1];
                long long v125 = v121[2];
                long long v124 = v121[3];
                long long v127 = v121[4];
                long long v126 = v121[5];
                long long v128 = v121[7];
                *((_OWORD *)v117 + 6) = v121[6];
                *((_OWORD *)v117 + 7) = v128;
                *((_OWORD *)v117 + 4) = v127;
                *((_OWORD *)v117 + 5) = v126;
                *((_OWORD *)v117 + 2) = v125;
                *((_OWORD *)v117 + 3) = v124;
                *(_OWORD *)BOOL v117 = v123;
                *((_OWORD *)v117 + 1) = v122;
                v117 += 128;
                *(void *)uint64_t v118 = *(void *)&v10[v120 + 176];
                v118 += 8;
                v120 += 8;
                v119 += 8;
              }
              while (v119);
              if (v115 == v22) {
                goto LABEL_6;
              }
              goto LABEL_258;
            }
            unsigned int v23 = v18 + v22;
          }
        }
      }
    }
    do
    {
LABEL_258:
      *(_OWORD *)&v10[16 * v22] = *(_OWORD *)&v10[16 * v23];
      v10[v22++ + 176] = v10[v23++ + 176];
    }
    while (v6 != v23);
    goto LABEL_6;
  }
  return result;
}

uint64_t *llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = (unsigned int *)(a1 + 8);
  uint64_t v8 = *(void *)a1;
  unsigned int v9 = (uint64_t *)(a2 == 1);
  if (a2 == 1)
  {
    uint64_t v10 = *(unsigned int *)(v8 + 276);
    if (v10 <= 0xF)
    {
      uint64_t v11 = v8 + 8;
      uint64_t v12 = *(unsigned int *)(*(void *)v7 + 12);
      if (v10 != v12)
      {
        int v13 = v10 - v12;
        uint64_t v14 = (v10 + ~v12);
        if (v14 < 0x39 || (int)v12 + 1 > v10) {
          goto LABEL_26;
        }
        uint64_t v15 = 8 * v10 + v8;
        unint64_t v16 = v15 + 8;
        unint64_t v17 = v15 + 8 - 8 * v14;
        unint64_t v18 = v15 + 136;
        unint64_t v19 = v15 + 136 - 8 * v14;
        uint64_t v20 = 8 * (v10 - 1);
        BOOL v21 = v14 > (int)v10 - 1 || v17 > v16;
        BOOL v22 = v21 || v19 > v18;
        BOOL v23 = v22 || v20 + v8 + 8 - 8 * v14 > (unint64_t)(v20 + v8 + 8);
        if (v23 || v20 + v8 + 136 - 8 * v14 > (unint64_t)(v20 + v8 + 136)) {
          goto LABEL_26;
        }
        uint64_t v25 = 8 * v10 + v8;
        uint64_t v26 = v20 + v8;
        uint64_t v27 = v20 + v8 + 8;
        if ((unint64_t)(v27 - (v25 + 8)) < 0x10) {
          goto LABEL_26;
        }
        uint64_t v28 = v26 + 136;
        if ((unint64_t)(v25 + 8 - v28) < 0x10) {
          goto LABEL_26;
        }
        uint64_t v29 = v25 + 136;
        if ((unint64_t)(v27 - v29) < 0x10) {
          goto LABEL_26;
        }
        if ((unint64_t)(v28 - v29) < 0x10) {
          goto LABEL_26;
        }
        uint64_t v30 = v14 + 1;
        v13 -= v30 & 0xFFFFFFFE;
        uint64_t v31 = v30 & 0x1FFFFFFFELL;
        do
        {
          uint64_t v32 = 8 * (v10 - 1);
          uint64_t v33 = 8 * v10;
          *(_OWORD *)(v8 + v33) = *(_OWORD *)(v8 + v32);
          *(_OWORD *)(v8 + 128 + v33) = *(_OWORD *)(v8 + 128 + v32);
          LODWORD(v10) = v10 - 2;
          v31 -= 2;
        }
        while (v31);
        if (v30 != (v30 & 0x1FFFFFFFELL))
        {
LABEL_26:
          unsigned int v34 = v12 + v13;
          do
          {
            uint64_t v35 = 8 * v34--;
            uint64_t v36 = 8 * v34;
            *(void *)(v11 + v35) = *(void *)(v11 + v36);
            *(void *)(v8 + 136 + v35) = *(void *)(v8 + 136 + v36);
            --v13;
          }
          while (v13);
        }
      }
      uint64_t v37 = (void *)(v11 + 8 * v12);
      void *v37 = a3;
      v37[16] = a4;
      LODWORD(v37) = *(_DWORD *)(v8 + 276) + 1;
      *(_DWORD *)(v8 + 276) = v37;
      uint64_t v38 = *(void *)v7;
      *(_DWORD *)(v38 + 8) = v37;
      uint64_t v39 = *(void *)(*(void *)v38 + 8 * *(unsigned int *)(v38 + 12));
      *(void *)(v38 + 16) = v39 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v38 + 24) = (v39 & 0x3F) + 1;
      return 0;
    }
    unint64_t v41 = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::splitRoot(*(void *)a1, (unsigned int *)*(unsigned int *)(*(void *)v7 + 12));
    llvm::IntervalMapImpl::Path::replaceRoot(v7, v8 + 8, *(_DWORD *)(v8 + 276), v41);
    a2 = 2;
  }
  uint64_t v42 = (a2 - 1);
  if (*(_DWORD *)(a1 + 16)
    && (uint64_t v43 = *(void *)v7, *(_DWORD *)(*(void *)v7 + 12) < *(_DWORD *)(*(void *)v7 + 8)))
  {
    unsigned int v44 = *(_DWORD *)(v43 + 16 * v42 + 8);
    if (v44 != 12) {
      goto LABEL_33;
    }
  }
  else
  {
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)v7, a2 - 1);
    uint64_t v43 = *(void *)v7;
    ++*(_DWORD *)(*(void *)v7 + 16 * v42 + 12);
    unsigned int v44 = *(_DWORD *)(v43 + 16 * v42 + 8);
    if (v44 != 12)
    {
LABEL_33:
      char v45 = (uint64_t *)(v43 + 16 * v42);
      uint64_t v46 = *v45;
      uint64_t v47 = *((unsigned int *)v45 + 3);
      if (v44 == v47) {
        goto LABEL_61;
      }
LABEL_37:
      int v50 = v44 - v47;
      uint64_t v51 = v44 + ~v47;
      if (v51 < 0x35 || (int)v47 + 1 > v44) {
        goto LABEL_59;
      }
      uint64_t v52 = 8 * v44;
      uint64_t v53 = 8 * (v44 - 1);
      BOOL v54 = v51 > v44 - 1 || v46 + v52 - 8 * v51 > (unint64_t)(v46 + v52);
      BOOL v55 = v54 || v46 + v52 + 96 - 8 * v51 > (unint64_t)(v46 + v52 + 96);
      BOOL v56 = v55 || v46 + v53 - 8 * v51 > (unint64_t)(v46 + v53);
      if (v56 || v46 + v53 + 96 - 8 * v51 > (unint64_t)(v46 + v53 + 96)) {
        goto LABEL_59;
      }
      uint64_t v58 = v52 + v46;
      uint64_t v59 = v53 + v46;
      if ((unint64_t)(v59 - v58) < 0x10) {
        goto LABEL_59;
      }
      if ((unint64_t)(v58 - (v59 + 96)) < 0x10) {
        goto LABEL_59;
      }
      uint64_t v60 = v58 + 96;
      if ((unint64_t)(v59 - v60) < 0x10) {
        goto LABEL_59;
      }
      if ((unint64_t)(v59 + 96 - v60) < 0x10) {
        goto LABEL_59;
      }
      uint64_t v61 = v51 + 1;
      v50 -= v61 & 0xFFFFFFFE;
      uint64_t v62 = v61 & 0x1FFFFFFFELL;
      do
      {
        uint64_t v63 = 8 * (v44 - 1);
        uint64_t v64 = 8 * v44;
        *(_OWORD *)(v46 - 8 + v64) = *(_OWORD *)(v46 - 8 + v63);
        *(_OWORD *)(v46 + 88 + v64) = *(_OWORD *)(v46 + 88 + v63);
        v44 -= 2;
        v62 -= 2;
      }
      while (v62);
      if (v61 != (v61 & 0x1FFFFFFFELL))
      {
LABEL_59:
        unsigned int v65 = v47 + v50;
        do
        {
          uint64_t v66 = 8 * v65--;
          uint64_t v67 = 8 * v65;
          *(void *)(v46 + v66) = *(void *)(v46 + v67);
          *(void *)(v46 + 96 + v66) = *(void *)(v46 + 96 + v67);
          --v50;
        }
        while (v50);
      }
      goto LABEL_61;
    }
  }
  unsigned int v9 = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::overflow<llvm::IntervalMapImpl::BranchNode<unsigned long long,char,12u,llvm::IntervalMapInfo<unsigned long long>>>((llvm::IntervalMapImpl::Path *)a1, v42);
  uint64_t v42 = (v42 + v9);
  uint64_t v48 = *(void *)(a1 + 8);
  unsigned int v44 = *(_DWORD *)(v48 + 16 * v42 + 8);
  BOOL v49 = (uint64_t *)(v48 + 16 * v42);
  uint64_t v46 = *v49;
  uint64_t v47 = *((unsigned int *)v49 + 3);
  if (v44 != v47) {
    goto LABEL_37;
  }
LABEL_61:
  uint64_t v68 = (void *)(v46 + 8 * v47);
  *uint64_t v68 = a3;
  v68[12] = a4;
  uint64_t v69 = *(void *)v7;
  uint64_t v70 = *(void *)v7 + 16 * v42;
  uint64_t v71 = *(unsigned int *)(v70 + 8);
  *(_DWORD *)(v70 + 8) = v71 + 1;
  if (v42)
  {
    *(void *)(*(void *)(v69 + 16 * (v42 - 1))
              + 8 * *(unsigned int *)(v69 + 16 * (v42 - 1) + 12)) = *(void *)(*(void *)(v69 + 16 * (v42 - 1))
                                                                                                + 8
                                                                                                * *(unsigned int *)(v69 + 16 * (v42 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v71;
    uint64_t v69 = *(void *)v7;
    uint64_t v72 = *(void *)v7 + 16 * v42;
    unsigned int v73 = *(_DWORD *)(v72 + 12);
    if (v73 == *(_DWORD *)(v72 + 8) - 1)
    {
      int v74 = (_DWORD *)(v72 - 8);
      uint64_t v75 = v42;
      while (--v75)
      {
        uint64_t v76 = *((void *)v74 - 1);
        int v78 = *v74;
        uint64_t v77 = v74[1];
        v74 -= 4;
        *(void *)(v76 + 8 * v77 + 96) = a4;
        if (v77 != v78 - 1) {
          goto LABEL_69;
        }
      }
      *(void *)(*(void *)v69 + 8 * *(unsigned int *)(v69 + 12) + 128) = a4;
    }
  }
  else
  {
    unsigned int v73 = *(_DWORD *)(v70 + 12);
  }
LABEL_69:
  uint64_t v79 = *(void *)(*(void *)(v69 + 16 * v42) + 8 * v73);
  uint64_t v80 = v69 + 16 * (v42 + 1);
  *(void *)uint64_t v80 = v79 & 0xFFFFFFFFFFFFFFC0;
  *(_DWORD *)(v80 + 8) = (v79 & 0x3F) + 1;
  return v9;
}

void *llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(uint64_t a1)
{
  uint64_t result = *(void **)a1;
  if (result)
  {
    *(void *)a1 = *result;
  }
  else
  {
    *(void *)(a1 + 88) += 192;
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3) {
      BOOL v4 = ((v3 + 63) & 0xFFFFFFFFFFFFFFC0) - v3 + 192 > *(void *)(a1 + 16) - v3;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      unsigned int v5 = *(_DWORD *)(a1 + 32) >> 7;
      if (v5 >= 0x1E) {
        LOBYTE(v5) = 30;
      }
      uint64_t v6 = 4096 << v5;
      buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
      uint64_t v8 = *(unsigned int *)(a1 + 32);
      if (v8 >= *(_DWORD *)(a1 + 36))
      {
        uint64_t v10 = buffer;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v8 + 1, 8);
        buffer = v10;
        LODWORD(v8) = *(_DWORD *)(a1 + 32);
      }
      *(void *)(*(void *)(a1 + 24) + 8 * v8) = buffer;
      ++*(_DWORD *)(a1 + 32);
      unsigned int v9 = &buffer[v6];
      uint64_t result = (void *)((unint64_t)(buffer + 63) & 0xFFFFFFFFFFFFFFC0);
      *(void *)(a1 + 8) = result + 24;
      *(void *)(a1 + 16) = v9;
    }
    else
    {
      uint64_t result = (void *)((v3 + 63) & 0xFFFFFFFFFFFFFFC0);
      *(void *)(a1 + 8) = result + 24;
    }
  }
  return result;
}

unint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::splitRoot(uint64_t a1, unsigned int *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)2, *(_DWORD *)(a1 + 276), 0xBu, 0, &v35, a2, 1);
  unint64_t v4 = a1 + 8;
  unsigned int v5 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(void *)(a1 + 280));
  unint64_t v6 = (unint64_t)v5;
  *unsigned int v5 = 0u;
  v5[1] = 0u;
  void v5[2] = 0u;
  unint64_t v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  uint64_t v7 = v35;
  if (v35)
  {
    if (v35 >= 6
      && ((unint64_t)v5 < 8 * (unint64_t)v35 + a1 + 136
        ? (BOOL v8 = v4 >= (unint64_t)v5 + 8 * v35 + 96)
        : (BOOL v8 = 1),
          v8))
    {
      uint64_t v9 = v35 & 0xFFFFFFFE;
      uint64_t v10 = (long long *)(a1 + 136);
      uint64_t v11 = v9;
      uint64_t v12 = v5;
      do
      {
        *uint64_t v12 = *(v10 - 8);
        long long v13 = *v10++;
        v12[6] = v13;
        ++v12;
        v11 -= 2;
      }
      while (v11);
      if (v9 == v7) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v14 = v7 - v9;
    uint64_t v15 = 8 * v9;
    unint64_t v16 = (uint64_t *)(8 * v9 + a1 + 136);
    unint64_t v17 = (void *)((char *)v5 + v15);
    do
    {
      void *v17 = *(v16 - 16);
      uint64_t v18 = *v16++;
      v17[12] = v18;
      ++v17;
      --v14;
    }
    while (v14);
LABEL_15:
    unsigned int v19 = v35;
    goto LABEL_17;
  }
  unsigned int v19 = 0;
LABEL_17:
  unint64_t v20 = (unint64_t)llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(void *)(a1 + 280));
  *(_OWORD *)unint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)(v20 + 128) = 0u;
  *(_OWORD *)(v20 + 144) = 0u;
  *(_OWORD *)(v20 + 160) = 0u;
  *(_OWORD *)(v20 + 176) = 0u;
  uint64_t v21 = v36;
  if (!v36)
  {
    uint64_t v29 = 0xFFFFFFFFLL;
    goto LABEL_27;
  }
  if (v36 < 0xC
    || __CFADD__(v19, v36 - 1)
    || (uint64_t v22 = 8 * (v36 - 1), v23 = a1 + 8 * v19, v20 < v23 + v22 + 144) && v23 + 8 < v22 + v20 + 104)
  {
    uint64_t v24 = 0;
    unsigned int v25 = v19;
  }
  else
  {
    uint64_t v24 = v36 & 0xFFFFFFFE;
    unsigned int v25 = v19 + (v36 & 0xFFFFFFFE);
    unsigned int v31 = v19;
    uint64_t v32 = v24;
    uint64_t v33 = (_OWORD *)v20;
    do
    {
      unsigned int v34 = (_OWORD *)(v4 + 8 * v31);
      *uint64_t v33 = *v34;
      v33[6] = v34[8];
      ++v33;
      v31 += 2;
      v32 -= 2;
    }
    while (v32);
    if (v24 == v21) {
      goto LABEL_25;
    }
  }
  int v26 = v21 + v19;
  uint64_t v27 = (void *)(v20 + 8 * v24);
  do
  {
    uint64_t v28 = (void *)(v4 + 8 * v25);
    *uint64_t v27 = *v28;
    v27[12] = v28[16];
    ++v25;
    ++v27;
  }
  while (v26 != v25);
LABEL_25:
  uint64_t v29 = v36 - 1;
LABEL_27:
  *(void *)(a1 + 136) = *(void *)((v6 & 0xFFFFFFFFFFFFFFC0 | (v19 - 1) & 0xFFFFFFC0) + 8 * (v35 - 1) + 0x60);
  *(void *)(a1 + 8) = v6 & 0xFFFFFFFFFFFFFFC0 | (v19 - 1);
  *(void *)(a1 + 144) = *(void *)((v20 & 0xFFFFFFFFFFFFFFC0 | v29 & 0xFFFFFFFFFFFFFFC0) + 8 * v29 + 0x60);
  *(void *)(a1 + 16) = v20 & 0xFFFFFFFFFFFFFFC0 | v29;
  *(_DWORD *)(a1 + 276) = 2;
  ++*(_DWORD *)(a1 + 272);
  return v3;
}

uint64_t *llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::overflow<llvm::IntervalMapImpl::BranchNode<unsigned long long,char,12u,llvm::IntervalMapInfo<unsigned long long>>>(llvm::IntervalMapImpl::Path *this, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (llvm::IntervalMapImpl::Path *)((char *)this + 8);
  uint64_t v3 = *((void *)this + 1);
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v5 = a2;
  unint64_t v6 = *(unsigned int *)(v3 + 16 * a2 + 12);
  uint64_t LeftSibling = llvm::IntervalMapImpl::Path::getLeftSibling((llvm::IntervalMapImpl::Path *)((char *)this + 8), a2);
  uint64_t v8 = LeftSibling;
  if (LeftSibling)
  {
    int v9 = (LeftSibling & 0x3F) + 1;
    v69[0] = v9;
    unint64_t v6 = (v9 + v6);
    *(void *)&long long v67 = LeftSibling & 0xFFFFFFFFFFFFFFC0;
    unsigned int v10 = 1;
  }
  else
  {
    int v9 = 0;
    unsigned int v10 = 0;
  }
  uint64_t v11 = *(void *)v4 + 16 * v5;
  int v12 = *(_DWORD *)(v11 + 8);
  v69[v10] = v12;
  int v13 = v12 + v9;
  unint64_t v14 = v10 + 1;
  *(void *)((unint64_t)&v67 | (8 * v10)) = *(void *)v11;
  uint64_t RightSibling = llvm::IntervalMapImpl::Path::getRightSibling(v4, v2);
  if (RightSibling)
  {
    int v16 = (RightSibling & 0x3F) + 1;
    v69[v14] = v16;
    v13 += v16;
    *((void *)&v67 + v14) = RightSibling & 0xFFFFFFFFFFFFFFC0;
    unint64_t v14 = v10 | 2;
  }
  if (v13 + 1 <= (12 * v14))
  {
    unsigned int v17 = 0;
  }
  else
  {
    if (v14 == 1) {
      unsigned int v17 = 1;
    }
    else {
      unsigned int v17 = v14 - 1;
    }
    uint64_t v18 = v17;
    v69[v14] = v69[v18];
    uint64_t v19 = 8 * v17;
    *((void *)&v67 + v14) = *(void *)((char *)&v67 + v19);
    v69[v18] = 0;
    unint64_t v20 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(void *)(*(void *)this + 280));
    *unint64_t v20 = 0u;
    v20[1] = 0u;
    void v20[2] = 0u;
    v20[3] = 0u;
    v20[4] = 0u;
    v20[5] = 0u;
    v20[6] = 0u;
    v20[7] = 0u;
    v20[8] = 0u;
    v20[9] = 0u;
    unint64_t v14 = (v14 + 1);
    v20[10] = 0u;
    v20[11] = 0u;
    *(void *)((char *)&v67 + v19) = v20;
  }
  unint64_t v21 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v14, v13, 0xCu, v69, &v63, (unsigned int *)v6, 1);
  llvm::IntervalMapImpl::adjustSiblingSizes<llvm::IntervalMapImpl::BranchNode<unsigned long long,char,12u,llvm::IntervalMapInfo<unsigned long long>>>((uint64_t)&v67, v14, (uint64_t)v69, (uint64_t)&v63);
  if (v8) {
    llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
  }
  uint64_t v22 = v63 - 1;
  uint64_t v23 = *(void *)(v67 + 8 * v22 + 96);
  uint64_t v24 = *(void *)v4;
  *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v63;
  if (!v2)
  {
LABEL_18:
    if (v14 != 1) {
      goto LABEL_24;
    }
LABEL_19:
    uint64_t inserted = 0;
    int v32 = v21;
    if (v21) {
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  *(void *)(*(void *)(v24 + 16 * (v2 - 1))
            + 8 * *(unsigned int *)(v24 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v24 + 16 * (v2 - 1))
                                                                                             + 8
                                                                                             * *(unsigned int *)(v24 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v22;
  uint64_t v25 = *(void *)v4;
  uint64_t v26 = 16 * v5;
  while (1)
  {
    uint64_t v27 = v26 - 16;
    if (v26 == 16) {
      break;
    }
    uint64_t v28 = v25 + v26;
    uint64_t v29 = *(unsigned int *)(v28 - 4);
    *(void *)(*(void *)(v28 - 16) + 8 * v29 + 96) = v23;
    int v30 = *(_DWORD *)(v28 - 8) - 1;
    uint64_t v26 = v27;
    if (v29 != v30) {
      goto LABEL_18;
    }
  }
  *(void *)(*(void *)v25 + 8 * *(unsigned int *)(v25 + 12) + 128) = v23;
  if (v14 == 1) {
    goto LABEL_19;
  }
LABEL_24:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  uint64_t v35 = (v64 - 1);
  uint64_t v36 = *(void *)(*((void *)&v67 + 1) + 8 * v35 + 96);
  if (v17 != 1)
  {
    uint64_t v37 = *(void *)v4;
    *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v64;
    if (v2)
    {
      *(void *)(*(void *)(v37 + 16 * (v2 - 1))
                + 8 * *(unsigned int *)(v37 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v37 + 16 * (v2 - 1))
                                                                                                 + 8
                                                                                                 * *(unsigned int *)(v37 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v35;
      uint64_t v38 = *(void *)v4;
      uint64_t v39 = 16 * v2;
      while (1)
      {
        uint64_t v40 = v39 - 16;
        if (v39 == 16) {
          break;
        }
        uint64_t v41 = v38 + v39;
        uint64_t v42 = *(unsigned int *)(v41 - 4);
        *(void *)(*(void *)(v41 - 16) + 8 * v42 + 96) = v36;
        int v43 = *(_DWORD *)(v41 - 8) - 1;
        uint64_t v39 = v40;
        if (v42 != v43) {
          goto LABEL_32;
        }
      }
      uint64_t inserted = 0;
      *(void *)(*(void *)v38 + 8 * *(unsigned int *)(v38 + 12) + 128) = v36;
      if (v14 != 2) {
        goto LABEL_33;
      }
    }
    else
    {
LABEL_32:
      uint64_t inserted = 0;
      if (v14 != 2) {
        goto LABEL_33;
      }
    }
LABEL_26:
    int v32 = v21 - 1;
    if (v21 == 1) {
      goto LABEL_22;
    }
    do
LABEL_20:
      llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
    while (!__CFADD__(v32++, 1));
    goto LABEL_22;
  }
  uint64_t inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode(this, v2, *((void *)&v67 + 1) & 0xFFFFFFFFFFFFFFC0 | v35, v36);
  uint64_t v2 = (v2 + inserted);
  if (v14 == 2) {
    goto LABEL_26;
  }
LABEL_33:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  uint64_t v44 = (v65 - 1);
  uint64_t v45 = *(void *)(v68 + 8 * v44 + 96);
  if (v17 == 2)
  {
    uint64_t inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode(this, v2, v68 & 0xFFFFFFFFFFFFFFC0 | v44, v45);
    uint64_t v2 = (v2 + inserted);
    if (v14 != 3) {
      goto LABEL_35;
    }
    goto LABEL_42;
  }
  uint64_t v48 = *(void *)v4;
  *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v65;
  if (!v2)
  {
LABEL_41:
    if (v14 != 3) {
      goto LABEL_35;
    }
LABEL_42:
    int v32 = v21 - 2;
    if (v21 != 2) {
      goto LABEL_20;
    }
LABEL_22:
    *(_DWORD *)(*(void *)v4 + 16 * v2 + 12) = HIDWORD(v21);
    return (uint64_t *)inserted;
  }
  *(void *)(*(void *)(v48 + 16 * (v2 - 1))
            + 8 * *(unsigned int *)(v48 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v48 + 16 * (v2 - 1))
                                                                                             + 8
                                                                                             * *(unsigned int *)(v48 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v44;
  uint64_t v49 = *(void *)v4;
  uint64_t v50 = 16 * v2;
  while (1)
  {
    uint64_t v51 = v50 - 16;
    if (v50 == 16) {
      break;
    }
    uint64_t v52 = v49 + v50;
    uint64_t v53 = *(unsigned int *)(v52 - 4);
    *(void *)(*(void *)(v52 - 16) + 8 * v53 + 96) = v45;
    int v54 = *(_DWORD *)(v52 - 8) - 1;
    uint64_t v50 = v51;
    if (v53 != v54) {
      goto LABEL_41;
    }
  }
  *(void *)(*(void *)v49 + 8 * *(unsigned int *)(v49 + 12) + 128) = v45;
  if (v14 == 3) {
    goto LABEL_42;
  }
LABEL_35:
  llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  uint64_t v46 = (v66 - 1);
  uint64_t v47 = *(void *)(*((void *)&v68 + 1) + 8 * v46 + 96);
  if (v17 == 3)
  {
    uint64_t inserted = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insertNode(this, v2, *((void *)&v68 + 1) & 0xFFFFFFFFFFFFFFC0 | v46, v47);
    LODWORD(v2) = v2 + inserted;
  }
  else
  {
    uint64_t v55 = *(void *)v4;
    *(_DWORD *)(*(void *)v4 + 16 * v2 + 8) = v66;
    if (v2)
    {
      *(void *)(*(void *)(v55 + 16 * (v2 - 1))
                + 8 * *(unsigned int *)(v55 + 16 * (v2 - 1) + 12)) = *(void *)(*(void *)(v55 + 16 * (v2 - 1))
                                                                                                 + 8
                                                                                                 * *(unsigned int *)(v55 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v46;
      uint64_t v56 = *(void *)v4;
      uint64_t v57 = 16 * v2;
      while (1)
      {
        uint64_t v58 = v57 - 16;
        if (v57 == 16) {
          break;
        }
        uint64_t v59 = v56 + v57;
        uint64_t v60 = *(unsigned int *)(v59 - 4);
        *(void *)(*(void *)(v59 - 16) + 8 * v60 + 96) = v47;
        int v61 = *(_DWORD *)(v59 - 8) - 1;
        uint64_t v57 = v58;
        if (v60 != v61) {
          goto LABEL_54;
        }
      }
      *(void *)(*(void *)v56 + 8 * *(unsigned int *)(v56 + 12) + 128) = v47;
    }
  }
LABEL_54:
  if (v14 == 4)
  {
    int v32 = v21 - 3;
    if (v21 == 3) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  uint64_t result = llvm::IntervalMapImpl::Path::moveRight((uint64_t *)v4, v2);
  __break(1u);
  return result;
}

uint64_t llvm::IntervalMapImpl::adjustSiblingSizes<llvm::IntervalMapImpl::BranchNode<unsigned long long,char,12u,llvm::IntervalMapInfo<unsigned long long>>>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - 1;
  if (a2 != 1)
  {
    uint64_t v5 = (int)v4;
    while (1)
    {
      unsigned int v6 = *(_DWORD *)(a3 + 4 * v5);
      unsigned int v7 = *(_DWORD *)(a4 + 4 * v5);
      if (v6 != v7) {
        break;
      }
LABEL_3:
      if (!--v5)
      {
        if (a2 < 2) {
          return result;
        }
        uint64_t v74 = 0;
        while (1)
        {
          unsigned int v75 = *(_DWORD *)(a3 + 4 * v74);
          unsigned int v76 = *(_DWORD *)(a4 + 4 * v74);
          if (v75 != v76) {
            break;
          }
LABEL_102:
          if (++v74 == v4) {
            return result;
          }
        }
        LODWORD(v77) = v74;
        while (2)
        {
          uint64_t v77 = (v77 + 1);
          if (v77 == a2) {
            goto LABEL_102;
          }
          unint64_t v79 = *(void *)(result + 8 * v77);
          uint64_t v80 = *(unsigned int *)(a3 + 4 * v77);
          uint64_t v81 = *(void *)(result + 8 * v74);
          unsigned int v82 = v75 - v76;
          if ((int)(v75 - v76) >= 1)
          {
            LODWORD(v83) = 12 - v80;
            if (v75 >= v82) {
              unsigned int v78 = v75 - v76;
            }
            else {
              unsigned int v78 = v75;
            }
            if (v83 < v78) {
              unsigned int v78 = 12 - v80;
            }
            if (v80)
            {
              if (v80 < 0x32 || __CFADD__(v80 - 1, v78)) {
                goto LABEL_153;
              }
              uint64_t v84 = 8 * (v80 - 1 + v78);
              uint64_t v85 = 8 * (v80 - 1);
              BOOL v86 = v79 + v84 - v85 > v79 + v84 || v79 + 96 + v84 - v85 > v79 + 96 + v84;
              BOOL v87 = v86 || v79 > v79 + v85;
              BOOL v88 = v87 || v79 + 96 > v79 + 96 + v85;
              if (v88
                || (unint64_t v89 = v85 + v79, (unint64_t)(v85 - v84) < 0x10)
                || (unint64_t v90 = v79 + 96 + v85, v84 + v79 - v90 < 0x10)
                || (unint64_t v91 = v79 + 96 + v84, v89 - v91 < 0x10)
                || v90 - v91 < 0x10)
              {
LABEL_153:
                int v92 = *(_DWORD *)(a3 + 4 * v77);
              }
              else
              {
                int v92 = *(_DWORD *)(a3 + 4 * v77) & 1;
                uint64_t v93 = v80 & 0xFFFFFFFE;
                uint64_t v94 = *(unsigned int *)(a3 + 4 * v77);
                do
                {
                  uint64_t v95 = 8 * (v94 - 1);
                  uint64_t v96 = 8 * (v78 - 1 + v94);
                  *(_OWORD *)(v79 - 8 + v96) = *(_OWORD *)(v79 - 8 + v95);
                  *(_OWORD *)(v79 + 88 + v96) = *(_OWORD *)(v79 + 88 + v95);
                  v94 -= 2;
                  v93 -= 2;
                }
                while (v93);
                if ((v80 & 0xFFFFFFFE) == v80) {
                  goto LABEL_156;
                }
              }
              unint64_t v106 = (void *)(v79 + 8 * (v92 - 1));
              do
              {
                BOOL v107 = (void *)(v79 + 8 * (v78 - 1 + v92));
                void *v107 = *v106;
                v107[12] = v106[12];
                --v106;
                --v92;
              }
              while (v92);
            }
LABEL_156:
            if (v78)
            {
              uint64_t v108 = 0;
              unsigned int v109 = v75 - v78;
              if (v75 < v82) {
                unsigned int v82 = v75;
              }
              if (v82 >= v83) {
                uint64_t v83 = v83;
              }
              else {
                uint64_t v83 = v82;
              }
              if (v83 < 0xA || v75 - 1 < v109)
              {
LABEL_167:
                unsigned int v112 = v75 - v78;
                goto LABEL_168;
              }
              uint64_t v110 = 8 * (v78 - 1);
              uint64_t v111 = 8 * (v75 - v78);
              if (v79 < v81 + v111 + v110 + 104 && v81 + v111 < v79 + v110 + 104)
              {
                uint64_t v108 = 0;
                goto LABEL_167;
              }
              uint64_t v108 = v83 & 0xFFFFFFFE;
              unsigned int v112 = v109 + (v83 & 0xFFFFFFFE);
              uint64_t v129 = v108;
              uint64_t v130 = (_OWORD *)v79;
              do
              {
                uint64_t v131 = (_OWORD *)(v81 + 8 * v109);
                *uint64_t v130 = *v131;
                v130[6] = v131[6];
                ++v130;
                v109 += 2;
                v129 -= 2;
              }
              while (v129);
              if (v108 != v83)
              {
LABEL_168:
                BOOL v113 = (void *)(v79 + 8 * v108);
                do
                {
                  int v114 = (void *)(v81 + 8 * v112);
                  *BOOL v113 = *v114;
                  v113[12] = v114[12];
                  ++v112;
                  ++v113;
                }
                while (v75 != v112);
              }
            }
LABEL_106:
            *(_DWORD *)(a3 + 4 * v77) += v78;
            unsigned int v75 = *(_DWORD *)(a3 + 4 * v74) - v78;
            *(_DWORD *)(a3 + 4 * v74) = v75;
            unsigned int v76 = *(_DWORD *)(a4 + 4 * v74);
            if (v75 >= v76) {
              goto LABEL_102;
            }
            continue;
          }
          break;
        }
        unsigned int v97 = 12 - v75;
        if (v76 - v75 < v80) {
          LODWORD(v98) = v76 - v75;
        }
        else {
          LODWORD(v98) = *(_DWORD *)(a3 + 4 * v77);
        }
        if (v97 >= v98) {
          uint64_t v98 = v98;
        }
        else {
          uint64_t v98 = v97;
        }
        if (v98)
        {
          if (v98 < 0xA
            || __CFADD__(v75, v98 - 1)
            || ((unint64_t v99 = v81 + 8 * v75, v79 < v99 + 8 * v98 + 96) ? (v100 = v99 >= v79 + 8 * v98 + 96) : (v100 = 1),
                !v100))
          {
            uint64_t v101 = 0;
            unsigned int v102 = v75;
            goto LABEL_172;
          }
          uint64_t v101 = v98 & 0xFFFFFFFE;
          unsigned int v102 = v75 + (v98 & 0xFFFFFFFE);
          uint64_t v103 = v101;
          unint64_t v104 = *(_OWORD **)(result + 8 * v77);
          do
          {
            BOOL v105 = (_OWORD *)(v81 + 8 * v75);
            *BOOL v105 = *v104;
            v105[6] = v104[6];
            ++v104;
            v75 += 2;
            v103 -= 2;
          }
          while (v103);
          if (v101 != v98)
          {
LABEL_172:
            uint64_t v115 = v98 - v101;
            uint64_t v116 = (void *)(v79 + 8 * v101);
            do
            {
              BOOL v117 = (void *)(v81 + 8 * v102);
              *BOOL v117 = *v116;
              v117[12] = v116[12];
              ++v102;
              ++v116;
              --v115;
            }
            while (v115);
          }
        }
        if (v98 != v80)
        {
          uint64_t v118 = 0;
          uint64_t v119 = (v80 + ~v98);
          if (v119 < 0x15
            || (int)v80 - 1 < v98
            || (v118 = 0, uint64_t v120 = 8 * v98, (unint64_t)(v120 + 96) < 0x10)
            || (unint64_t)(96 - v120) < 0x10
            || !v98)
          {
            unsigned int v122 = v98;
            goto LABEL_185;
          }
          uint64_t v121 = v119 + 1;
          uint64_t v118 = (v119 + 1) & 0x1FFFFFFFELL;
          unsigned int v122 = v98 + v118;
          unsigned int v123 = v98;
          uint64_t v124 = v118;
          long long v125 = (_OWORD *)v79;
          do
          {
            long long v126 = (_OWORD *)(v79 + 8 * v123);
            *long long v125 = *v126;
            v125[6] = v126[6];
            ++v125;
            v123 += 2;
            v124 -= 2;
          }
          while (v124);
          if (v121 != v118)
          {
LABEL_185:
            long long v127 = (void *)(v79 + 8 * v118);
            do
            {
              long long v128 = (void *)(v79 + 8 * v122);
              *long long v127 = *v128;
              v127[12] = v128[12];
              ++v122;
              ++v127;
            }
            while (v80 != v122);
          }
        }
        unsigned int v78 = -(int)v98;
        goto LABEL_106;
      }
    }
    uint64_t v8 = v5;
    while (1)
    {
      if (!v8) {
        goto LABEL_3;
      }
      --v8;
      unint64_t v10 = *(void *)(result + 8 * v5);
      uint64_t v11 = *(void *)(result + 8 * v8);
      uint64_t v12 = *(unsigned int *)(a3 + 4 * v8);
      unsigned int v13 = v7 - v6;
      if ((int)(v7 - v6) < 1)
      {
        unsigned int v44 = 12 - v12;
        if (v6 - v7 < v6) {
          LODWORD(v45) = v6 - v7;
        }
        else {
          LODWORD(v45) = v6;
        }
        if (v44 >= v45) {
          uint64_t v45 = v45;
        }
        else {
          uint64_t v45 = v44;
        }
        if (v45)
        {
          if (v45 < 0xA
            || __CFADD__(v12, v45 - 1)
            || ((unint64_t v46 = v11 + 8 * v12, v10 < v46 + 8 * v45 + 96) ? (v47 = v46 >= v10 + 8 * v45 + 96) : (v47 = 1), !v47))
          {
            uint64_t v48 = 0;
            unsigned int v49 = *(_DWORD *)(a3 + 4 * v8);
            goto LABEL_75;
          }
          uint64_t v48 = v45 & 0xFFFFFFFE;
          unsigned int v49 = v12 + (v45 & 0xFFFFFFFE);
          uint64_t v50 = v48;
          uint64_t v51 = *(_OWORD **)(result + 8 * v5);
          do
          {
            uint64_t v52 = (_OWORD *)(v11 + 8 * v12);
            _OWORD *v52 = *v51;
            v52[6] = v51[6];
            ++v51;
            LODWORD(v12) = v12 + 2;
            v50 -= 2;
          }
          while (v50);
          if (v48 != v45)
          {
LABEL_75:
            uint64_t v53 = v45 - v48;
            int v54 = (void *)(v10 + 8 * v48);
            do
            {
              uint64_t v55 = (void *)(v11 + 8 * v49);
              *uint64_t v55 = *v54;
              v55[12] = v54[12];
              ++v49;
              ++v54;
              --v53;
            }
            while (v53);
          }
        }
        if (v45 != v6)
        {
          uint64_t v56 = 0;
          uint64_t v57 = v6 + ~v45;
          if (v57 < 0x15
            || v6 - 1 < v45
            || (uint64_t v56 = 0, v58 = 8 * v45, (unint64_t)(v58 + 96) < 0x10)
            || (unint64_t)(96 - v58) < 0x10
            || !v45)
          {
            unsigned int v60 = v45;
            goto LABEL_88;
          }
          uint64_t v59 = v57 + 1;
          uint64_t v56 = (v57 + 1) & 0x1FFFFFFFELL;
          unsigned int v60 = v45 + v56;
          unsigned int v61 = v45;
          uint64_t v62 = v56;
          unsigned int v63 = (_OWORD *)v10;
          do
          {
            int v64 = (_OWORD *)(v10 + 8 * v61);
            *unsigned int v63 = *v64;
            v63[6] = v64[6];
            ++v63;
            v61 += 2;
            v62 -= 2;
          }
          while (v62);
          if (v59 != v56)
          {
LABEL_88:
            int v65 = (void *)(v10 + 8 * v56);
            do
            {
              int v66 = (void *)(v10 + 8 * v60);
              *int v65 = *v66;
              v65[12] = v66[12];
              ++v60;
              ++v65;
            }
            while (v6 != v60);
          }
        }
        unsigned int v9 = -(int)v45;
        goto LABEL_7;
      }
      LODWORD(v14) = 12 - v6;
      if (v12 >= v13) {
        unsigned int v9 = v7 - v6;
      }
      else {
        unsigned int v9 = *(_DWORD *)(a3 + 4 * v8);
      }
      if (v14 < v9) {
        unsigned int v9 = 12 - v6;
      }
      if (v6)
      {
        uint64_t v15 = v6;
        if (v6 < 0x32) {
          goto LABEL_38;
        }
        unsigned int v16 = v6 - 1;
        unsigned int v17 = v6 - 1 + v9;
        if (__CFADD__(v16, v9)) {
          goto LABEL_38;
        }
        uint64_t v18 = 8 * v17;
        uint64_t v19 = 8 * v16;
        BOOL v20 = v10 + v18 - v19 > v10 + v18 || v10 + 96 + v18 - v19 > v10 + 96 + v18;
        BOOL v21 = v20 || v10 > v10 + v19;
        if (v21 || v10 + 96 > v10 + 96 + v19) {
          goto LABEL_38;
        }
        unint64_t v23 = v18 + v10;
        unint64_t v24 = v10 + 96 + v18;
        unint64_t v25 = v19 + v10;
        unint64_t v26 = v19 + v10 - v23;
        unint64_t v27 = v10 + 96 + v19;
        unint64_t v28 = v23 - v27;
        unint64_t v29 = v25 - v24;
        unint64_t v30 = v27 - v24;
        BOOL v31 = v26 >= 0x10 && v28 >= 0x10;
        BOOL v32 = v31 && v29 >= 0x10;
        if (!v32 || v30 < 0x10)
        {
LABEL_38:
          int v34 = v15;
LABEL_39:
          uint64_t v35 = (void *)(v10 + 8 * (v34 - 1));
          do
          {
            uint64_t v36 = (void *)(v10 + 8 * (v9 - 1 + v34));
            void *v36 = *v35;
            v36[12] = v35[12];
            --v35;
            --v34;
          }
          while (v34);
          goto LABEL_41;
        }
        int v34 = v15 & 1;
        uint64_t v70 = v15 & 0xFFFFFFFE;
        uint64_t v71 = v15;
        do
        {
          uint64_t v72 = 8 * (v71 - 1);
          uint64_t v73 = 8 * (v9 - 1 + v71);
          *(_OWORD *)(v10 - 8 + v73) = *(_OWORD *)(v10 - 8 + v72);
          *(_OWORD *)(v10 + 88 + v73) = *(_OWORD *)(v10 + 88 + v72);
          v71 -= 2;
          v70 -= 2;
        }
        while (v70);
        if ((v15 & 0xFFFFFFFE) != v15) {
          goto LABEL_39;
        }
      }
LABEL_41:
      if (v9)
      {
        uint64_t v37 = 0;
        unsigned int v38 = v12 - v9;
        if (v12 < v13) {
          unsigned int v13 = v12;
        }
        if (v13 >= v14) {
          uint64_t v14 = v14;
        }
        else {
          uint64_t v14 = v13;
        }
        if (v14 < 0xA || (int)v12 - 1 < v38)
        {
LABEL_52:
          unsigned int v41 = v12 - v9;
        }
        else
        {
          uint64_t v39 = 8 * (v9 - 1);
          uint64_t v40 = 8 * (v12 - v9);
          if (v10 < v11 + v40 + v39 + 104 && v11 + v40 < v10 + v39 + 104)
          {
            uint64_t v37 = 0;
            goto LABEL_52;
          }
          uint64_t v37 = v14 & 0xFFFFFFFE;
          unsigned int v41 = v38 + (v14 & 0xFFFFFFFE);
          uint64_t v67 = v37;
          long long v68 = (_OWORD *)v10;
          do
          {
            uint64_t v69 = (_OWORD *)(v11 + 8 * v38);
            *long long v68 = *v69;
            v68[6] = v69[6];
            ++v68;
            v38 += 2;
            v67 -= 2;
          }
          while (v67);
          if (v37 == v14) {
            goto LABEL_7;
          }
        }
        uint64_t v42 = (void *)(v10 + 8 * v37);
        do
        {
          int v43 = (void *)(v11 + 8 * v41);
          void *v42 = *v43;
          v42[12] = v43[12];
          ++v41;
          ++v42;
        }
        while (v12 != v41);
      }
LABEL_7:
      *(_DWORD *)(a3 + 4 * v8) -= v9;
      unsigned int v6 = *(_DWORD *)(a3 + 4 * v5) + v9;
      *(_DWORD *)(a3 + 4 * v5) = v6;
      unsigned int v7 = *(_DWORD *)(a4 + 4 * v5);
      if (v6 >= v7) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

void llvm::IntervalMapOverlaps<llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>,llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>>::advance(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v3 + 12) < *(_DWORD *)(v3 + 8))
    {
      uint64_t v4 = *(unsigned int *)(a1 + 104);
      if (v4)
      {
        uint64_t v5 = *(void *)(a1 + 96);
        if (*(_DWORD *)(v5 + 12) < *(_DWORD *)(v5 + 8))
        {
          uint64_t v6 = v3 + 16 * v1;
          uint64_t v7 = *(void *)(v6 - 16);
          uint64_t v8 = *(unsigned int *)(v6 - 4);
          uint64_t v9 = a1 + 88;
          uint64_t v10 = v5 + 16 * v4;
          uint64_t v11 = *(void *)(v10 - 16);
          uint64_t v12 = *(unsigned int *)(v10 - 4);
          unint64_t v13 = *(void *)(v11 + 16 * v12);
          if (*(void *)(v7 + 16 * v8 + 8) >= v13)
          {
            unint64_t v15 = *(void *)(v7 + 16 * v8);
            if (*(void *)(v11 + 16 * v12 + 8) < v15)
            {
              uint64_t v16 = *(void *)v9;
              if (!*(_DWORD *)(*(void *)v9 + 272))
              {
                int v17 = *(_DWORD *)(v16 + 276);
                if (v12 == v17) {
                  goto LABEL_25;
                }
                do
                {
                  if (*(void *)(v16 + 16 * v12 + 8) >= v15) {
                    goto LABEL_25;
                  }
                  LODWORD(v12) = v12 + 1;
                }
                while (v17 != v12);
LABEL_24:
                LODWORD(v12) = v17;
                goto LABEL_25;
              }
              goto LABEL_23;
            }
          }
          else
          {
            uint64_t v14 = *(void *)a1;
            if (*(_DWORD *)(*(void *)a1 + 272))
            {
              llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeAdvanceTo(a1, v13);
            }
            else
            {
              int v18 = *(_DWORD *)(v14 + 276);
              if (v8 != v18)
              {
                while (*(void *)(v14 + 16 * v8 + 8) < v13)
                {
                  LODWORD(v8) = v8 + 1;
                  if (v18 == v8)
                  {
                    LODWORD(v8) = *(_DWORD *)(v14 + 276);
                    break;
                  }
                }
              }
              *(_DWORD *)(v6 - 4) = v8;
            }
            uint64_t v19 = *(unsigned int *)(a1 + 16);
            if (v19)
            {
              uint64_t v20 = *(void *)(a1 + 8);
              if (*(_DWORD *)(v20 + 12) < *(_DWORD *)(v20 + 8))
              {
                uint64_t v21 = *(void *)(a1 + 96) + 16 * *(unsigned int *)(a1 + 104);
                uint64_t v22 = *(void *)(v21 - 16);
                uint64_t v23 = *(unsigned int *)(v21 - 4);
                if (*(void *)(v22 + 16 * v23 + 8) < *(void *)(*(void *)(v20 + 16 * v19 - 16)
                                                                 + 16 * *(unsigned int *)(v20 + 16 * v19 - 4)))
                {
                  unint64_t v24 = *(void *)(v22 + 16 * v23);
                  do
                  {
                    if (!v19) {
                      break;
                    }
                    if (*(_DWORD *)(v20 + 12) < *(_DWORD *)(v20 + 8))
                    {
                      uint64_t v27 = *(void *)a1;
                      if (*(_DWORD *)(*(void *)a1 + 272))
                      {
                        llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeAdvanceTo(a1, v24);
                      }
                      else
                      {
                        uint64_t v28 = v20 + 16 * v19;
                        unsigned int v29 = *(_DWORD *)(v28 - 4);
                        int v30 = *(_DWORD *)(v27 + 276);
                        if (v29 != v30)
                        {
                          while (*(void *)(v27 + 16 * v29 + 8) < v24)
                          {
                            if (v30 == ++v29)
                            {
                              unsigned int v29 = *(_DWORD *)(v27 + 276);
                              break;
                            }
                          }
                        }
                        *(_DWORD *)(v28 - 4) = v29;
                      }
                    }
                    uint64_t v31 = *(unsigned int *)(a1 + 16);
                    if (!v31) {
                      break;
                    }
                    uint64_t v32 = *(void *)(a1 + 8);
                    if (*(_DWORD *)(v32 + 12) >= *(_DWORD *)(v32 + 8)) {
                      break;
                    }
                    uint64_t v33 = *(void *)(a1 + 96);
                    uint64_t v34 = *(unsigned int *)(a1 + 104);
                    uint64_t v10 = v33 + 16 * v34;
                    uint64_t v12 = *(unsigned int *)(v10 - 4);
                    unint64_t v15 = *(void *)(*(void *)(v32 + 16 * v31 - 16) + 16 * *(unsigned int *)(v32 + 16 * v31 - 4));
                    if (*(void *)(*(void *)(v10 - 16) + 16 * v12 + 8) >= v15) {
                      break;
                    }
                    if (v34 && *(_DWORD *)(v33 + 12) < *(_DWORD *)(v33 + 8))
                    {
                      uint64_t v35 = *(void *)v9;
                      if (*(_DWORD *)(*(void *)v9 + 272))
                      {
LABEL_23:
                        llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeAdvanceTo(a1 + 88, v15);
                      }
                      else
                      {
                        int v17 = *(_DWORD *)(v35 + 276);
                        if (v12 != v17)
                        {
                          while (*(void *)(v35 + 16 * v12 + 8) < v15)
                          {
                            LODWORD(v12) = v12 + 1;
                            if (v17 == v12) {
                              goto LABEL_24;
                            }
                          }
                        }
LABEL_25:
                        *(_DWORD *)(v10 - 4) = v12;
                      }
                    }
                    uint64_t v25 = *(unsigned int *)(a1 + 104);
                    if (!v25) {
                      break;
                    }
                    uint64_t v26 = *(void *)(a1 + 96);
                    if (*(_DWORD *)(v26 + 12) >= *(_DWORD *)(v26 + 8)) {
                      break;
                    }
                    uint64_t v20 = *(void *)(a1 + 8);
                    uint64_t v19 = *(unsigned int *)(a1 + 16);
                    unint64_t v24 = *(void *)(*(void *)(v26 + 16 * v25 - 16) + 16 * *(unsigned int *)(v26 + 16 * v25 - 4));
                  }
                  while (*(void *)(*(void *)(v20 + 16 * v19 - 16) + 16 * *(unsigned int *)(v20 + 16 * v19 - 4) + 8) < v24);
                }
              }
            }
          }
        }
      }
    }
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeAdvanceTo(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v5 = v3 + 16 * v4;
  uint64_t v6 = *(void *)(v5 - 16);
  if (*(void *)(v6 + 16 * (*(_DWORD *)(v5 - 8) - 1) + 8) >= a2)
  {
    unsigned int v16 = *(_DWORD *)(v5 - 4);
    do
      unint64_t v17 = *(void *)(v6 + 16 * v16++ + 8);
    while (v17 < a2);
    *(_DWORD *)(v5 - 4) = v16 - 1;
    return;
  }
  *(_DWORD *)(a1 + 16) = v4 - 1;
  unsigned int v7 = v4 - 2;
  if (v4 == 2)
  {
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *(unsigned int *)(v3 + 12);
    uint64_t v20 = *(void *)a1 + 8;
    uint64_t v21 = *(unsigned int *)(*(void *)a1 + 276);
    if (v19 != v21) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v4 != 3)
    {
      if (*(void *)(*(void *)(v3 + 16 * (v4 - 3))
                     + 8 * *(unsigned int *)(v3 + 16 * (v4 - 3) + 12)
                     + 96) >= a2)
      {
LABEL_9:
        uint64_t v10 = (uint64_t *)(v3 + 16 * v7);
        uint64_t v11 = *v10;
        unsigned int v14 = *((_DWORD *)v10 + 3);
        uint64_t v12 = (_DWORD *)v10 + 3;
        unsigned int v13 = v14;
        do
          unint64_t v15 = *(void *)(v11 + 8 * v13++ + 96);
        while (v15 < a2);
        *uint64_t v12 = v13 - 1;
LABEL_12:
LABEL_14:
        llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::pathFillFind(a1, a2);
        return;
      }
      unsigned int v8 = v4 - 4;
      while (1)
      {
        *(_DWORD *)(a1 + 16) = v8 + 2;
        if (!v8) {
          break;
        }
        unint64_t v9 = *(void *)(*(void *)(v3 + 16 * v8) + 8 * *(unsigned int *)(v3 + 16 * v8 + 12) + 96);
        --v8;
        if (v9 >= a2)
        {
          unsigned int v7 = v8 + 2;
          goto LABEL_9;
        }
      }
    }
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *(unsigned int *)(v3 + 12);
    if (*(void *)(*(void *)a1 + 8 * v19 + 136) >= a2)
    {
      unsigned int v28 = *(_DWORD *)(v3 + 28);
      do
        unint64_t v29 = *(void *)(*(void *)(v3 + 16) + 8 * v28++ + 96);
      while (v29 < a2);
      *(_DWORD *)(v3 + 28) = v28 - 1;
      goto LABEL_14;
    }
    uint64_t v20 = v18 + 8;
    uint64_t v21 = *(unsigned int *)(v18 + 276);
    if (v19 != v21)
    {
LABEL_22:
      while (*(void *)(v20 + 8 * v19 + 128) < a2)
      {
        uint64_t v19 = (v19 + 1);
        if (v21 == v19)
        {
          uint64_t v19 = v21;
          break;
        }
      }
    }
  }
  int v22 = *(_DWORD *)(v18 + 272);
  *(_DWORD *)(a1 + 16) = 0;
  int v23 = *(_DWORD *)(a1 + 20);
  if (v22)
  {
    if (v23)
    {
      uint64_t v24 = 0;
    }
    else
    {
      unint64_t v38 = a2;
      uint64_t v40 = a1;
      uint64_t v34 = v21;
      uint64_t v36 = a1 + 8;
      uint64_t v30 = v20;
      uint64_t v32 = v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, (void *)(a1 + 24), 1uLL, 16);
      uint64_t v20 = v30;
      uint64_t v19 = v32;
      uint64_t v21 = v34;
      uint64_t v2 = v36;
      a2 = v38;
      a1 = v40;
      uint64_t v24 = *(unsigned int *)(v40 + 16);
      uint64_t v3 = *(void *)(v40 + 8);
    }
    uint64_t v25 = (uint64_t *)(v3 + 16 * v24);
    *uint64_t v25 = v20;
    v25[1] = v21 | (v19 << 32);
    LODWORD(v25) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v25 + 1;
    if (v25 == -1) {
      return;
    }
    goto LABEL_33;
  }
  if (v23)
  {
    uint64_t v26 = 0;
  }
  else
  {
    unint64_t v39 = a2;
    uint64_t v41 = a1;
    uint64_t v35 = v21;
    uint64_t v37 = a1 + 8;
    uint64_t v31 = v18;
    uint64_t v33 = v19;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, (void *)(a1 + 24), 1uLL, 16);
    uint64_t v18 = v31;
    uint64_t v19 = v33;
    uint64_t v21 = v35;
    uint64_t v2 = v37;
    a2 = v39;
    a1 = v41;
    uint64_t v26 = *(unsigned int *)(v41 + 16);
    uint64_t v3 = *(void *)(v41 + 8);
  }
  uint64_t v27 = (void *)(v3 + 16 * v26);
  *uint64_t v27 = v18;
  v27[1] = v21 | (v19 << 32);
  LODWORD(v27) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v27 + 1;
  if (v27 != -1)
  {
LABEL_33:
    if (*(_DWORD *)(*(void *)v2 + 12) >= *(_DWORD *)(*(void *)v2 + 8)) {
      return;
    }
    goto LABEL_12;
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::goToBegin(uint64_t *a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = *a1;
  if (*(_DWORD *)(*a1 + 272))
  {
    unsigned int v4 = *(_DWORD *)(v3 + 276);
    *((_DWORD *)a1 + 4) = 0;
    if (*((_DWORD *)a1 + 5))
    {
      uint64_t v5 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 1), a1 + 3, 1uLL, 16);
      uint64_t v5 = *((unsigned int *)a1 + 4);
    }
    uint64_t v6 = (void *)(*v2 + 16 * v5);
    void *v6 = v3 + 8;
  }
  else
  {
    unsigned int v4 = *(_DWORD *)(v3 + 276);
    *((_DWORD *)a1 + 4) = 0;
    if (*((_DWORD *)a1 + 5))
    {
      uint64_t v7 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 1), a1 + 3, 1uLL, 16);
      uint64_t v7 = *((unsigned int *)a1 + 4);
    }
    uint64_t v6 = (void *)(*v2 + 16 * v7);
    void *v6 = v3;
  }
  v6[1] = v4;
  unsigned int v8 = *((_DWORD *)a1 + 4);
  unsigned int v9 = v8 + 1;
  *((_DWORD *)a1 + 4) = v8 + 1;
  unsigned int v10 = *(_DWORD *)(*a1 + 272);
  if (v10) {
    BOOL v11 = v8 >= v10;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    do
    {
      uint64_t v12 = a1[1];
      uint64_t v13 = *(void *)(*(void *)(v12 + 16 * v8) + 8 * *(unsigned int *)(v12 + 16 * v8 + 12));
      if (v9 >= *((_DWORD *)a1 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2, a1 + 3, v9 + 1, 16);
        unsigned int v9 = *((_DWORD *)a1 + 4);
        uint64_t v12 = a1[1];
      }
      unsigned int v14 = (unint64_t *)(v12 + 16 * v9);
      *unsigned int v14 = v13 & 0xFFFFFFFFFFFFFFC0;
      v14[1] = (v13 & 0x3F) + 1;
      unsigned int v8 = *((_DWORD *)a1 + 4);
      unsigned int v9 = v8 + 1;
      *((_DWORD *)a1 + 4) = v8 + 1;
    }
    while (v8 < v10);
  }
}

double mlir::Region::getOps<mlir::pdl_interp::FuncOp>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&v12[8] = v18;
  unsigned int v4 = v10;
  *(void *)uint64_t v12 = v10;
  long long v11 = v9;
  *(void *)&void v12[24] = v19;
  for (uint64_t i = mlir::detail::op_filter_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::filter;
        *(void *)v12 != *(void *)&v12[24];
        unsigned int v4 = *(mlir::GenericProgramPoint **)v12)
  {
    uint64_t v5 = (uint64_t (*)(void))i;
    mlir::GenericProgramPoint::~GenericProgramPoint(v4);
    if (v5()) {
      break;
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  long long v14 = v11;
  long long v15 = *(_OWORD *)v12;
  long long v16 = *(_OWORD *)&v12[16];
  unint64_t v17 = i;
  *(void *)unsigned int v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(void *)&void v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  long long v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = mlir::detail::op_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::unwrap;
  *(void *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::filter;
  *(void *)(a2 + 120) = mlir::detail::op_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::unwrap;
  return result;
}

BOOL mlir::detail::op_filter_iterator<mlir::pdl_interp::FuncOp,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl_interp::FuncOp,void>::id;
}

uint64_t *llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    unsigned int v10 = buffer + 8;
    if (a3) {
LABEL_4:
    }
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        uint64_t v15 = v7[1];
        ++v7;
        uint64_t v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    unsigned int v10 = buffer + 8;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v10] = 0;
  *(void *)buffer = a3;
  buffer[4] = 0;
  uint64_t *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  uint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7) {
    BOOL v11 = *v7 == -8;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    do
    {
      uint64_t v13 = v7[1];
      ++v7;
      uint64_t v12 = v13;
      if (v13) {
        BOOL v14 = v12 == -8;
      }
      else {
        BOOL v14 = 1;
      }
    }
    while (v14);
  }
  return v7;
}

void anonymous namespace'::ByteCodeWriter::appendPDLValue(uint64_t a1, unint64_t a2)
{
  unsigned int v4 = *(void **)(*(void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
  {
    __int16 v5 = 0;
    uint64_t v6 = *(void **)(a1 + 24);
    uint64_t v7 = v6[1];
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) <= v6[2]) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
  {
    __int16 v5 = 1;
    uint64_t v6 = *(void **)(a1 + 24);
    uint64_t v7 = v6[1];
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) <= v6[2]) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    uint64_t v15 = (void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v15) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
      __int16 v5 = 3;
    }
    else {
      __int16 v5 = 5;
    }
    uint64_t v6 = *(void **)(a1 + 24);
    uint64_t v7 = v6[1];
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) > v6[2]) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
      __int16 v5 = 2;
    }
    else {
      __int16 v5 = 4 * (v4 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    }
    uint64_t v6 = *(void **)(a1 + 24);
    uint64_t v7 = v6[1];
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) > v6[2])
    {
LABEL_22:
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v6, v6 + 3, v8, 2);
      uint64_t v7 = v6[1];
    }
  }
LABEL_12:
  *(_WORD *)(*v6 + 2 * v7) = v5;
  ++v6[1];
  unsigned int v10 = *(void **)(a1 + 24);
  long long v9 = *(uint64_t **)(a1 + 32);
  unint64_t v14 = a2;
  uint64_t v15 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v9, &v14, &v15))
  {
    __int16 v11 = *((_WORD *)v15 + 4);
  }
  else
  {
    uint64_t v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v9, (uint64_t)&v14, &v14, v15);
    __int16 v11 = 0;
    *uint64_t v12 = v14;
    *((_WORD *)v12 + 4) = 0;
  }
  uint64_t v13 = v10[1];
  if ((unint64_t)(v13 + 1) > v10[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v10, v10 + 3, v13 + 1, 2);
    uint64_t v13 = v10[1];
  }
  *(_WORD *)(*v10 + 2 * v13) = v11;
  ++v10[1];
}

void anonymous namespace'::ByteCodeWriter::append(_anonymous_namespace_::ByteCodeWriter *this, mlir::Block *a2)
{
  unint64_t v17 = a2;
  int v3 = *((_DWORD *)this + 4);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (uint64_t *)(*(void *)this + 40 * v5);
    uint64_t v7 = (mlir::Block *)*v6;
    if ((mlir::Block *)*v6 == a2) {
      goto LABEL_14;
    }
    unint64_t v8 = 0;
    int v9 = 1;
    while (v7 != (mlir::Block *)-4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == (mlir::Block *)-8192;
      }
      if (v10) {
        unint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (uint64_t *)(*(void *)this + 40 * v5);
      uint64_t v7 = (mlir::Block *)*v6;
      if ((mlir::Block *)*v6 == a2) {
        goto LABEL_14;
      }
    }
    if (v8) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v6;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>,mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>::InsertIntoBucket<mlir::Block * const&>((uint64_t)this, v12, (uint64_t *)&v17);
LABEL_14:
  int v13 = *(_DWORD *)(*((void *)this + 3) + 8);
  uint64_t v14 = *((unsigned int *)v6 + 4);
  if (v14 >= *((_DWORD *)v6 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v6 + 1), v6 + 3, v14 + 1, 4);
    LODWORD(v14) = *((_DWORD *)v6 + 4);
  }
  *(_DWORD *)(v6[1] + 4 * v14) = v13;
  ++*((_DWORD *)v6 + 4);
  uint64_t v15 = (void *)*((void *)this + 3);
  uint64_t v16 = v15[1];
  if (v15[2] < (unint64_t)(v16 + 2))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v15, v15 + 3, v16 + 2, 2);
    uint64_t v16 = v15[1];
  }
  *(_DWORD *)(*v15 + 2 * v16) = 0;
  v15[1] += 2;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>,mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>::InsertIntoBucket<mlir::Block * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      uint64_t v7 = *a2;
      goto LABEL_4;
    }
    int v9 = *(_DWORD *)(a1 + 16);
  }
  BOOL v10 = *(uint64_t **)a1;
  unint64_t v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40) {
    unsigned int v14 = v13 + 1;
  }
  else {
    unsigned int v14 = 64;
  }
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(40 * v14, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v10)
  {
    uint64_t v16 = 5 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>,mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  unint64_t v18 = 40 * v17 - 40;
  uint64_t v19 = buffer;
  if (v18 < 0x28) {
    goto LABEL_34;
  }
  unint64_t v20 = v18 / 0x28 + 1;
  uint64_t v19 = &buffer[5 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  uint64_t v21 = v20 & 0xFFFFFFFFFFFFFFELL;
  int v22 = buffer;
  do
  {
    void *v22 = -4096;
    v22[5] = -4096;
    v22 += 10;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *uint64_t v19 = -4096;
      v19 += 5;
    }
    while (v19 != &buffer[5 * v17]);
  }
  uint64_t v7 = *a3;
  int v23 = v17 - 1;
  unsigned int v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = &buffer[5 * v24];
  uint64_t v25 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v26 = 0;
    int v27 = 1;
    while (v25 != -4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == -8192;
      }
      if (v28) {
        uint64_t v26 = a2;
      }
      unsigned int v29 = v24 + v27++;
      unsigned int v24 = v29 & v23;
      a2 = &buffer[5 * v24];
      uint64_t v25 = *a2;
      if (v7 == *a2) {
        goto LABEL_4;
      }
    }
    if (v26) {
      a2 = v26;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x400000000;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>,mlir::Block *,llvm::SmallVector<unsigned int,4u>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SmallVector<unsigned int,4u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)a1;
    unint64_t v8 = 40 * v6 - 40;
    if (v8 < 0x28)
    {
      int v9 = *(void **)a1;
LABEL_7:
      int v13 = &v7[5 * v6];
      do
      {
        void *v9 = -4096;
        v9 += 5;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x28 + 1;
    int v9 = &v7[5 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    unint64_t v12 = *(void **)a1;
    do
    {
      *unint64_t v12 = -4096;
      v12[5] = -4096;
      v12 += 10;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      uint64_t v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v15 = *(_DWORD *)(a1 + 16) - 1;
        unsigned int v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
        uint64_t v17 = (void *)(*(void *)a1 + 40 * v16);
        uint64_t v18 = *v17;
        if (v14 != *v17)
        {
          unint64_t v20 = 0;
          int v21 = 1;
          while (v18 != -4096)
          {
            if (v20) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v18 == -8192;
            }
            if (v22) {
              unint64_t v20 = v17;
            }
            unsigned int v23 = v16 + v21++;
            unsigned int v16 = v23 & v15;
            uint64_t v17 = (void *)(*(void *)a1 + 40 * (v23 & v15));
            uint64_t v18 = *v17;
            if (v14 == *v17) {
              goto LABEL_14;
            }
          }
          if (v20) {
            uint64_t v17 = v20;
          }
        }
LABEL_14:
        void *v17 = v14;
        v17[1] = v17 + 3;
        void v17[2] = 0x400000000;
        if (*((_DWORD *)v4 + 4)) {
          llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(v17 + 1), (uint64_t)(v4 + 1));
        }
        ++*(_DWORD *)(a1 + 8);
        uint64_t v19 = (uint64_t *)v4[1];
        if (v19 != v4 + 3) {
          free(v19);
        }
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
}

void anonymous namespace'::ByteCodeWriter::append<mlir::detail::TypedValue<mlir::pdl::PDLType>,mlir::SuccessorRange>(_anonymous_namespace_::ByteCodeWriter *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)*((void *)a1 + 3);
  unint64_t v8 = (uint64_t *)*((void *)a1 + 4);
  unint64_t v14 = a2;
  int v15 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v8, &v14, &v15))
  {
    __int16 v9 = *((_WORD *)v15 + 4);
  }
  else
  {
    unint64_t v10 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v8, (uint64_t)&v14, &v14, v15);
    __int16 v9 = 0;
    *unint64_t v10 = v14;
    *((_WORD *)v10 + 4) = 0;
  }
  uint64_t v11 = v7[1];
  if ((unint64_t)(v11 + 1) > v7[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v7, v7 + 3, v11 + 1, 2);
    *(_WORD *)(*v7 + 2 * v7[1]++) = v9;
    if (!a4) {
      return;
    }
  }
  else
  {
    *(_WORD *)(*v7 + 2 * v11) = v9;
    ++v7[1];
    if (!a4) {
      return;
    }
  }
  unint64_t v12 = (mlir::Block **)(a3 + 24);
  do
  {
    int v13 = *v12;
    v12 += 4;
    --a4;
  }
  while (a4);
}

uint64_t *anonymous namespace'::Generator::getMemIndex<mlir::Attribute>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v4 = a1 + 120;
  uint64_t v5 = v6;
  __int16 v7 = **(_WORD **)(v4 + 96);
  unsigned int v8 = *(_DWORD *)(v4 + 16);
  if (!v8)
  {
    unint64_t v10 = 0;
    goto LABEL_13;
  }
  unsigned int v9 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t v10 = (uint64_t *)(v5 + 16 * v9);
  uint64_t v11 = *v10;
  if (*v10 != a2)
  {
    unint64_t v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        unint64_t v12 = v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & (v8 - 1);
      unint64_t v10 = (uint64_t *)(v5 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 == a2) {
        return v10 + 1;
      }
    }
    if (v12) {
      unint64_t v10 = v12;
    }
LABEL_13:
    uint64_t v16 = *(void *)(*(void *)(v4 + 64) + 8) - **(void **)(v4 + 64);
    int v17 = *(_DWORD *)(a1 + 128);
    if (4 * v17 + 4 >= 3 * v8)
    {
      v8 *= 2;
    }
    else if (v8 + ~v17 - *(_DWORD *)(a1 + 132) > v8 >> 3)
    {
      goto LABEL_15;
    }
    llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(v4, v8);
    uint64_t v43 = *(void *)(a1 + 120);
    int v44 = *(_DWORD *)(a1 + 136) - 1;
    unsigned int v45 = v44 & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v10 = (uint64_t *)(v43 + 16 * v45);
    uint64_t v46 = *v10;
    if (*v10 == a2)
    {
      uint64_t v18 = a2;
LABEL_16:
      ++*(_DWORD *)(a1 + 128);
      if (v18 != -4096) {
        --*(_DWORD *)(a1 + 132);
      }
      *unint64_t v10 = a2;
      *((_WORD *)v10 + 4) = v7 + (v16 >> 3);
      uint64_t v19 = *(char ***)(a1 + 184);
      int v21 = v19[1];
      unint64_t v20 = (unint64_t)v19[2];
      if ((unint64_t)v21 < v20)
      {
        *(void *)int v21 = a2;
        uint64_t v22 = (uint64_t)(v21 + 8);
LABEL_40:
        v19[1] = (char *)v22;
        return v10 + 1;
      }
      unsigned int v23 = *v19;
      uint64_t v24 = v21 - *v19;
      uint64_t v25 = v24 >> 3;
      unint64_t v26 = (v24 >> 3) + 1;
      if (v26 >> 61) {
        abort();
      }
      uint64_t v27 = v20 - (void)v23;
      if (v27 >> 2 > v26) {
        unint64_t v26 = v27 >> 2;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        if (v28 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unsigned int v29 = operator new(8 * v28);
        uint64_t v30 = &v29[8 * v25];
        uint64_t v31 = &v29[8 * v28];
        *(void *)uint64_t v30 = a2;
        uint64_t v22 = (uint64_t)(v30 + 8);
        uint64_t v32 = (char *)(v21 - v23);
        if (v21 == v23) {
          goto LABEL_38;
        }
      }
      else
      {
        unsigned int v29 = 0;
        uint64_t v30 = (char *)(8 * v25);
        uint64_t v31 = 0;
        *(void *)(8 * v25) = a2;
        uint64_t v22 = 8 * v25 + 8;
        uint64_t v32 = (char *)(v21 - v23);
        if (v21 == v23)
        {
LABEL_38:
          *uint64_t v19 = v30;
          v19[1] = (char *)v22;
          void v19[2] = v31;
          if (v21) {
            operator delete(v21);
          }
          goto LABEL_40;
        }
      }
      unint64_t v33 = (unint64_t)(v32 - 8);
      if (v33 < 0x58) {
        goto LABEL_64;
      }
      if ((unint64_t)(v21 - v29 - v24) < 0x20) {
        goto LABEL_64;
      }
      uint64_t v34 = (v33 >> 3) + 1;
      uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v36 = &v21[-v35];
      v30 -= v35;
      uint64_t v37 = &v29[8 * v25 - 16];
      unint64_t v38 = v21 - 16;
      uint64_t v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v40 = *(_OWORD *)v38;
        *(v37 - 1) = *((_OWORD *)v38 - 1);
        _OWORD *v37 = v40;
        v37 -= 2;
        v38 -= 32;
        v39 -= 4;
      }
      while (v39);
      int v21 = v36;
      if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_64:
        do
        {
          uint64_t v41 = *((void *)v21 - 1);
          v21 -= 8;
          *((void *)v30 - 1) = v41;
          v30 -= 8;
        }
        while (v21 != v23);
      }
      int v21 = *v19;
      goto LABEL_38;
    }
    BOOL v47 = 0;
    int v48 = 1;
    while (v46 != -4096)
    {
      if (v47) {
        BOOL v49 = 0;
      }
      else {
        BOOL v49 = v46 == -8192;
      }
      if (v49) {
        BOOL v47 = v10;
      }
      unsigned int v50 = v45 + v48++;
      unsigned int v45 = v50 & v44;
      unint64_t v10 = (uint64_t *)(v43 + 16 * v45);
      uint64_t v46 = *v10;
      uint64_t v18 = a2;
      if (*v10 == a2) {
        goto LABEL_16;
      }
    }
    if (v47) {
      unint64_t v10 = v47;
    }
LABEL_15:
    uint64_t v18 = *v10;
    goto LABEL_16;
  }
  return v10 + 1;
}

void *llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  unint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_41;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      unint64_t v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      int v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *int v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_41:
        do
        {
          *unint64_t v10 = -4096;
          v10 += 2;
        }
        while (v10 != &result[2 * v11]);
      }
    }
    if (v3)
    {
      int v15 = 0;
      int v16 = v11 - 1;
      int v17 = v4;
      do
      {
        uint64_t v24 = *(void *)v17;
        if ((*(void *)v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v25 = ((v24 >> 4) ^ (v24 >> 9)) & v16;
          uint64_t v23 = *(void *)a1 + 16 * v25;
          uint64_t v26 = *(void *)v23;
          if (v24 != *(void *)v23)
          {
            uint64_t v27 = 0;
            int v28 = 1;
            while (v26 != -4096)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -8192;
              }
              if (v29) {
                uint64_t v27 = v23;
              }
              unsigned int v30 = v25 + v28++;
              unsigned int v25 = v30 & v16;
              uint64_t v23 = *(void *)a1 + 16 * (v30 & v16);
              uint64_t v26 = *(void *)v23;
              if (v24 == *(void *)v23) {
                goto LABEL_23;
              }
            }
            if (v27) {
              uint64_t v23 = v27;
            }
          }
LABEL_23:
          *(void *)uint64_t v23 = v24;
          *(_WORD *)(v23 + 8) = *((_WORD *)v17 + 4);
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        int v17 = (llvm *)((char *)v17 + 16);
      }
      while (v17 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    if (((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_18;
    }
    uint64_t v19 = ((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    unint64_t v10 = &result[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    unint64_t v20 = result + 2;
    uint64_t v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -4096;
      *unint64_t v20 = -4096;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      uint64_t v22 = &result[2 * v18];
      do
      {
        *unint64_t v10 = -4096;
        v10 += 2;
      }
      while (v10 != v22);
    }
  }
  return result;
}

void anonymous namespace'::ByteCodeWriter::append<anonymous namespace'::OpCode,mlir::detail::TypedValue<mlir::pdl::OperationType>,unsigned int,unsigned short,mlir::SuccessorRange>(uint64_t *a1, __int16 a2, unint64_t a3, int a4, __int16 a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)a1[3];
  uint64_t v15 = v14[1];
  if ((unint64_t)(v15 + 1) > v14[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v14 + 3, v15 + 1, 2);
    uint64_t v15 = v14[1];
  }
  *(_WORD *)(*v14 + 2 * v15) = a2;
  ++v14[1];
  int v16 = (void *)a1[3];
  int v17 = (uint64_t *)a1[4];
  unint64_t v27 = a3;
  int v28 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v17, &v27, &v28))
  {
    __int16 v18 = *((_WORD *)v28 + 4);
  }
  else
  {
    uint64_t v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v17, (uint64_t)&v27, &v27, v28);
    __int16 v18 = 0;
    *uint64_t v19 = v27;
    *((_WORD *)v19 + 4) = 0;
  }
  uint64_t v20 = v16[1];
  if ((unint64_t)(v20 + 1) > v16[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v16, v16 + 3, v20 + 1, 2);
    uint64_t v20 = v16[1];
  }
  *(_WORD *)(*v16 + 2 * v20) = v18;
  ++v16[1];
  uint64_t v21 = (void *)a1[3];
  uint64_t v22 = v21[1];
  if (v21[2] < (unint64_t)(v22 + 2))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v21 + 3, v22 + 2, 2);
    uint64_t v22 = v21[1];
  }
  *(_DWORD *)(*v21 + 2 * v22) = a4;
  v21[1] += 2;
  uint64_t v23 = (void *)a1[3];
  uint64_t v24 = v23[1];
  if ((unint64_t)(v24 + 1) > v23[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v23 + 3, v24 + 1, 2);
    *(_WORD *)(*v23 + 2 * v23[1]++) = a5;
    if (!a7) {
      return;
    }
  }
  else
  {
    *(_WORD *)(*v23 + 2 * v24) = a5;
    ++v23[1];
    if (!a7) {
      return;
    }
  }
  unsigned int v25 = (mlir::Block **)(a6 + 24);
  do
  {
    uint64_t v26 = *v25;
    v25 += 4;
    --a7;
  }
  while (a7);
}

void anonymous namespace'::ByteCodeWriter::append<mlir::OperationName>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + 120;
  uint64_t v7 = *(void *)(a2 + 120);
  __int16 v8 = **(_WORD **)(a2 + 216);
  uint64_t v10 = **(void **)(a2 + 184);
  uint64_t v9 = *(void *)(*(void *)(a2 + 184) + 8);
  unsigned int v11 = *(_DWORD *)(a2 + 136);
  if (v11)
  {
    unsigned int v12 = (v11 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    int v13 = (uint64_t *)(v7 + 16 * v12);
    uint64_t v14 = *v13;
    if (*v13 == a3) {
      goto LABEL_41;
    }
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == -8192;
      }
      if (v17) {
        uint64_t v15 = v13;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & (v11 - 1);
      int v13 = (uint64_t *)(v7 + 16 * v12);
      uint64_t v14 = *v13;
      if (*v13 == a3) {
        goto LABEL_41;
      }
    }
    if (v15) {
      int v13 = v15;
    }
  }
  else
  {
    int v13 = 0;
  }
  unsigned int v19 = v9 - v10;
  int v20 = *(_DWORD *)(a2 + 128);
  if (4 * v20 + 4 >= 3 * v11)
  {
    v11 *= 2;
  }
  else if (v11 + ~v20 - *(_DWORD *)(a2 + 132) > v11 >> 3)
  {
LABEL_15:
    uint64_t v21 = *v13;
    goto LABEL_16;
  }
  llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(v6, v11);
  uint64_t v47 = *(void *)(a2 + 120);
  int v48 = *(_DWORD *)(a2 + 136) - 1;
  unsigned int v49 = v48 & ((a3 >> 4) ^ (a3 >> 9));
  int v13 = (uint64_t *)(v47 + 16 * v49);
  uint64_t v50 = *v13;
  if (*v13 != a3)
  {
    uint64_t v51 = 0;
    int v52 = 1;
    while (v50 != -4096)
    {
      if (v51) {
        BOOL v53 = 0;
      }
      else {
        BOOL v53 = v50 == -8192;
      }
      if (v53) {
        uint64_t v51 = v13;
      }
      unsigned int v54 = v49 + v52++;
      unsigned int v49 = v54 & v48;
      int v13 = (uint64_t *)(v47 + 16 * v49);
      uint64_t v50 = *v13;
      uint64_t v21 = a3;
      if (*v13 == a3) {
        goto LABEL_16;
      }
    }
    if (v51) {
      int v13 = v51;
    }
    goto LABEL_15;
  }
  uint64_t v21 = a3;
LABEL_16:
  ++*(_DWORD *)(a2 + 128);
  if (v21 != -4096) {
    --*(_DWORD *)(a2 + 132);
  }
  *int v13 = a3;
  *((_WORD *)v13 + 4) = v8 + (v19 >> 3);
  uint64_t v22 = *(char ***)(a2 + 184);
  uint64_t v24 = v22[1];
  unint64_t v23 = (unint64_t)v22[2];
  if ((unint64_t)v24 >= v23)
  {
    uint64_t v26 = *v22;
    uint64_t v27 = v24 - *v22;
    uint64_t v28 = v27 >> 3;
    unint64_t v29 = (v27 >> 3) + 1;
    if (v29 >> 61) {
      abort();
    }
    uint64_t v30 = v23 - (void)v26;
    if (v30 >> 2 > v29) {
      unint64_t v29 = v30 >> 2;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      if (v31 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v32 = operator new(8 * v31);
      unint64_t v33 = &v32[8 * v28];
      uint64_t v34 = &v32[8 * v31];
      *(void *)unint64_t v33 = a3;
      uint64_t v25 = (uint64_t)(v33 + 8);
      uint64_t v35 = (char *)(v24 - v26);
      if (v24 == v26) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v32 = 0;
      unint64_t v33 = (char *)(8 * v28);
      uint64_t v34 = 0;
      *(void *)(8 * v28) = a3;
      uint64_t v25 = 8 * v28 + 8;
      uint64_t v35 = (char *)(v24 - v26);
      if (v24 == v26)
      {
LABEL_38:
        void *v22 = v33;
        v22[1] = (char *)v25;
        void v22[2] = v34;
        if (v24) {
          operator delete(v24);
        }
        goto LABEL_40;
      }
    }
    unint64_t v36 = (unint64_t)(v35 - 8);
    if (v36 < 0x58) {
      goto LABEL_66;
    }
    if ((unint64_t)(v24 - v32 - v27) < 0x20) {
      goto LABEL_66;
    }
    uint64_t v37 = (v36 >> 3) + 1;
    uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v24[-v38];
    v33 -= v38;
    long long v40 = &v32[8 * v28 - 16];
    uint64_t v41 = v24 - 16;
    uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *long long v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    uint64_t v24 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_66:
      do
      {
        uint64_t v44 = *((void *)v24 - 1);
        v24 -= 8;
        *((void *)v33 - 1) = v44;
        v33 -= 8;
      }
      while (v24 != v26);
    }
    uint64_t v24 = *v22;
    goto LABEL_38;
  }
  *(void *)uint64_t v24 = a3;
  uint64_t v25 = (uint64_t)(v24 + 8);
LABEL_40:
  v22[1] = (char *)v25;
LABEL_41:
  __int16 v45 = *((_WORD *)v13 + 4);
  uint64_t v46 = a1[1];
  if ((unint64_t)(v46 + 1) > a1[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v46 + 1, 2);
    uint64_t v46 = a1[1];
  }
  *(_WORD *)(*a1 + 2 * v46) = v45;
  ++a1[1];
}

void anonymous namespace'::ByteCodeWriter::append<anonymous namespace'::OpCode,mlir::detail::TypedValue<mlir::pdl::RangeType>,mlir::ArrayAttr,mlir::SuccessorRange>(uint64_t *a1, __int16 a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12 = (void *)a1[3];
  uint64_t v13 = v12[1];
  if ((unint64_t)(v13 + 1) > v12[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v12 + 3, v13 + 1, 2);
    uint64_t v13 = v12[1];
  }
  *(_WORD *)(*v12 + 2 * v13) = a2;
  ++v12[1];
  uint64_t v14 = (void *)a1[3];
  uint64_t v15 = (uint64_t *)a1[4];
  unint64_t v21 = a3;
  uint64_t v22 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v15, &v21, &v22))
  {
    __int16 v16 = *((_WORD *)v22 + 4);
  }
  else
  {
    BOOL v17 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v15, (uint64_t)&v21, &v21, v22);
    __int16 v16 = 0;
    void *v17 = v21;
    *((_WORD *)v17 + 4) = 0;
  }
  uint64_t v18 = v14[1];
  if ((unint64_t)(v18 + 1) > v14[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v14, v14 + 3, v18 + 1, 2);
    uint64_t v18 = v14[1];
  }
  *(_WORD *)(*v14 + 2 * v18) = v16;
  ++v14[1];
  if (a6)
  {
    unsigned int v19 = (mlir::Block **)(a5 + 24);
    do
    {
      int v20 = *v19;
      v19 += 4;
      --a6;
    }
    while (a6);
  }
}

void anonymous namespace'::ByteCodeWriter::append<anonymous namespace'::OpCode,mlir::detail::TypedValue<mlir::pdl::OperationType>>(uint64_t a1, __int16 a2, unint64_t a3)
{
  uint64_t v6 = *(void **)(a1 + 24);
  uint64_t v7 = v6[1];
  if ((unint64_t)(v7 + 1) > v6[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(*(void *)(a1 + 24), v6 + 3, v7 + 1, 2);
    uint64_t v7 = v6[1];
  }
  *(_WORD *)(*v6 + 2 * v7) = a2;
  ++v6[1];
  __int16 v8 = *(void **)(a1 + 24);
  uint64_t v9 = *(uint64_t **)(a1 + 32);
  unint64_t v13 = a3;
  uint64_t v14 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v9, &v13, &v14))
  {
    __int16 v10 = *((_WORD *)v14 + 4);
  }
  else
  {
    unsigned int v11 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v9, (uint64_t)&v13, &v13, v14);
    __int16 v10 = 0;
    void *v11 = v13;
    *((_WORD *)v11 + 4) = 0;
  }
  uint64_t v12 = v8[1];
  if ((unint64_t)(v12 + 1) > v8[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v8, v8 + 3, v12 + 1, 2);
    uint64_t v12 = v8[1];
  }
  *(_WORD *)(*v8 + 2 * v12) = v10;
  ++v8[1];
}

void anonymous namespace'::ByteCodeWriter::append<mlir::detail::TypedValue<mlir::pdl::OperationType>,mlir::detail::TypedValue<mlir::pdl::ValueType>>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void **)(a1 + 24);
  uint64_t v6 = *(uint64_t **)(a1 + 32);
  unint64_t v15 = a2;
  __int16 v16 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v6, &v15, &v16))
  {
    __int16 v7 = *((_WORD *)v16 + 4);
  }
  else
  {
    __int16 v8 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v6, (uint64_t)&v15, &v15, v16);
    __int16 v7 = 0;
    *__int16 v8 = v15;
    *((_WORD *)v8 + 4) = 0;
  }
  uint64_t v9 = v5[1];
  if ((unint64_t)(v9 + 1) > v5[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v5, v5 + 3, v9 + 1, 2);
    uint64_t v9 = v5[1];
  }
  *(_WORD *)(*v5 + 2 * v9) = v7;
  ++v5[1];
  unsigned int v11 = *(void **)(a1 + 24);
  __int16 v10 = *(uint64_t **)(a1 + 32);
  unint64_t v15 = a3;
  __int16 v16 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v10, &v15, &v16))
  {
    __int16 v12 = *((_WORD *)v16 + 4);
  }
  else
  {
    unint64_t v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v10, (uint64_t)&v15, &v15, v16);
    __int16 v12 = 0;
    *unint64_t v13 = v15;
    *((_WORD *)v13 + 4) = 0;
  }
  uint64_t v14 = v11[1];
  if ((unint64_t)(v14 + 1) > v11[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v11, v11 + 3, v14 + 1, 2);
    uint64_t v14 = v11[1];
  }
  *(_WORD *)(*v11 + 2 * v14) = v12;
  ++v11[1];
}

void anonymous namespace'::ByteCodeWriter::append<anonymous namespace'::OpCode,unsigned int,mlir::detail::TypedValue<mlir::pdl::OperationType>>(uint64_t a1, __int16 a2, int a3, unint64_t a4)
{
  __int16 v8 = *(void **)(a1 + 24);
  uint64_t v9 = v8[1];
  if ((unint64_t)(v9 + 1) > v8[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(*(void *)(a1 + 24), v8 + 3, v9 + 1, 2);
    uint64_t v9 = v8[1];
  }
  *(_WORD *)(*v8 + 2 * v9) = a2;
  ++v8[1];
  __int16 v10 = *(void **)(a1 + 24);
  uint64_t v11 = v10[1];
  if (v10[2] < (unint64_t)(v11 + 2))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(*(void *)(a1 + 24), v10 + 3, v11 + 2, 2);
    uint64_t v11 = v10[1];
  }
  *(_DWORD *)(*v10 + 2 * v11) = a3;
  v10[1] += 2;
  __int16 v12 = *(void **)(a1 + 24);
  unint64_t v13 = *(uint64_t **)(a1 + 32);
  unint64_t v17 = a4;
  uint64_t v18 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v13, &v17, &v18))
  {
    __int16 v14 = *((_WORD *)v18 + 4);
  }
  else
  {
    unint64_t v15 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v13, (uint64_t)&v17, &v17, v18);
    __int16 v14 = 0;
    *unint64_t v15 = v17;
    *((_WORD *)v15 + 4) = 0;
  }
  uint64_t v16 = v12[1];
  if ((unint64_t)(v16 + 1) > v12[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v12, v12 + 3, v16 + 1, 2);
    uint64_t v16 = v12[1];
  }
  *(_WORD *)(*v12 + 2 * v16) = v14;
  ++v12[1];
}

uint64_t llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCodePattern,false>::growAndEmplaceBack<mlir::detail::PDLByteCodePattern>(uint64_t a1, long long *a2)
{
  unint64_t v14 = 0;
  uint64_t v4 = a1 + 16;
  unint64_t v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 104, &v14);
  uint64_t v6 = &v5[104 * *(unsigned int *)(a1 + 8)];
  long long v7 = *a2;
  *((void *)v6 + 2) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v6 = v7;
  *((void *)v6 + 3) = v6 + 40;
  *((void *)v6 + 4) = 0x200000000;
  if (*((_DWORD *)a2 + 8)) {
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v6 + 24), (uint64_t)a2 + 24);
  }
  long long v8 = *(long long *)((char *)a2 + 56);
  uint64_t v9 = v6 + 88;
  *((void *)v6 + 9) = v6 + 88;
  uint64_t v10 = (uint64_t)(v6 + 72);
  *(_OWORD *)(v10 - 16) = v8;
  *(void *)(v10 + 8) = 0;
  if (*((_DWORD *)a2 + 20)) {
    llvm::SmallVectorImpl<llvm::SMRange>::operator=(v10, (uint64_t)a2 + 72);
  }
  _OWORD *v9 = *(long long *)((char *)a2 + 88);
  llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCodePattern,false>::moveElementsForGrow((uint64_t *)a1, (uint64_t)v5);
  int v11 = v14;
  if (*(void *)a1 != v4) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  unsigned int v12 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 12) = v11;
  return (uint64_t)&v5[104 * v12 - 104];
}

void llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCodePattern,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    uint64_t v7 = *a1 + 104 * v2;
    do
    {
      uint64_t v8 = v6 + v5;
      uint64_t v9 = a2 + v5;
      long long v10 = *(_OWORD *)(v6 + v5);
      *(void *)(v9 + 16) = *(void *)(v6 + v5 + 16);
      *(_OWORD *)uint64_t v9 = v10;
      *(void *)(a2 + v5 + 24) = a2 + v5 + 40;
      *(void *)(v9 + 32) = 0x200000000;
      if (*(_DWORD *)(v6 + v5 + 32)) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a2 + v5 + 24, v8 + 24);
      }
      long long v11 = *(_OWORD *)(v8 + 56);
      unsigned int v12 = (_OWORD *)(v9 + 88);
      *(void *)(v9 + 72) = v9 + 88;
      uint64_t v13 = v9 + 72;
      *(_OWORD *)(v13 - 16) = v11;
      *(void *)(v13 + 8) = 0;
      if (*(_DWORD *)(v8 + 80)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v13, v6 + v5 + 72);
      }
      *unsigned int v12 = *(_OWORD *)(v8 + 88);
      v5 += 104;
    }
    while (v8 + 104 != v7);
    unsigned int v14 = *((_DWORD *)a1 + 2);
    if (v14)
    {
      uint64_t v15 = *a1;
      uint64_t v16 = 104 * v14;
      do
      {
        uint64_t v17 = v15 + v16;
        uint64_t v18 = *(void **)(v15 + v16 - 32);
        if ((void *)(v15 + v16 - 16) != v18) {
          free(v18);
        }
        unsigned int v19 = *(void **)(v17 - 80);
        if ((void *)(v17 - 64) != v19) {
          free(v19);
        }
        v16 -= 104;
      }
      while (v16);
    }
  }
}

void anonymous namespace'::ByteCodeWriter::append<anonymous namespace'::OpCode,mlir::detail::TypedValue<mlir::pdl::OperationType>,mlir::DenseIntElementsAttr,mlir::SuccessorRange>(uint64_t *a1, __int16 a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12 = (void *)a1[3];
  uint64_t v13 = v12[1];
  if ((unint64_t)(v13 + 1) > v12[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1[3], v12 + 3, v13 + 1, 2);
    uint64_t v13 = v12[1];
  }
  *(_WORD *)(*v12 + 2 * v13) = a2;
  ++v12[1];
  unsigned int v14 = (void *)a1[3];
  uint64_t v15 = (uint64_t *)a1[4];
  unint64_t v71 = a3;
  uint64_t v72 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v15, &v71, &v72))
  {
    __int16 v16 = *((_WORD *)v72 + 4);
  }
  else
  {
    uint64_t v17 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v15, (uint64_t)&v71, &v71, v72);
    __int16 v16 = 0;
    void *v17 = v71;
    *((_WORD *)v17 + 4) = 0;
  }
  uint64_t v18 = v14[1];
  if ((unint64_t)(v18 + 1) > v14[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v14, v14 + 3, v18 + 1, 2);
    uint64_t v18 = v14[1];
  }
  *(_WORD *)(*v14 + 2 * v18) = v16;
  ++v14[1];
  unsigned int v19 = (void *)a1[3];
  uint64_t v20 = a1[4];
  uint64_t v21 = *(void *)(v20 + 120);
  __int16 v22 = **(_WORD **)(v20 + 216);
  unsigned int v23 = *(_DWORD *)(v20 + 136);
  if (v23)
  {
    unsigned int v24 = (v23 - 1) & ((a4 >> 4) ^ (a4 >> 9));
    uint64_t v25 = (uint64_t *)(v21 + 16 * v24);
    uint64_t v26 = *v25;
    if (*v25 == a4) {
      goto LABEL_48;
    }
    uint64_t v27 = 0;
    int v28 = 1;
    while (v26 != -4096)
    {
      if (v27) {
        BOOL v29 = 0;
      }
      else {
        BOOL v29 = v26 == -8192;
      }
      if (v29) {
        uint64_t v27 = v25;
      }
      unsigned int v30 = v24 + v28++;
      unsigned int v24 = v30 & (v23 - 1);
      uint64_t v25 = (uint64_t *)(v21 + 16 * v24);
      uint64_t v26 = *v25;
      if (*v25 == a4) {
        goto LABEL_48;
      }
    }
    uint64_t v70 = a5;
    if (v27) {
      uint64_t v25 = v27;
    }
  }
  else
  {
    uint64_t v70 = a5;
    uint64_t v25 = 0;
  }
  unsigned int v31 = *(void *)(*(void *)(v20 + 184) + 8) - **(void **)(v20 + 184);
  int v32 = *(_DWORD *)(v20 + 128);
  if (4 * v32 + 4 >= 3 * v23)
  {
    v23 *= 2;
  }
  else if (v23 + ~v32 - *(_DWORD *)(v20 + 132) > v23 >> 3)
  {
LABEL_22:
    uint64_t v33 = *v25;
    goto LABEL_23;
  }
  llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(v20 + 120, v23);
  uint64_t v61 = *(void *)(v20 + 120);
  int v62 = *(_DWORD *)(v20 + 136) - 1;
  unsigned int v63 = v62 & ((a4 >> 4) ^ (a4 >> 9));
  uint64_t v25 = (uint64_t *)(v61 + 16 * v63);
  uint64_t v64 = *v25;
  if (*v25 != a4)
  {
    int v65 = 0;
    int v66 = 1;
    while (v64 != -4096)
    {
      if (v65) {
        BOOL v67 = 0;
      }
      else {
        BOOL v67 = v64 == -8192;
      }
      if (v67) {
        int v65 = v25;
      }
      unsigned int v68 = v63 + v66++;
      unsigned int v63 = v68 & v62;
      uint64_t v25 = (uint64_t *)(v61 + 16 * v63);
      uint64_t v64 = *v25;
      uint64_t v33 = a4;
      if (*v25 == a4) {
        goto LABEL_23;
      }
    }
    if (v65) {
      uint64_t v25 = v65;
    }
    goto LABEL_22;
  }
  uint64_t v33 = a4;
LABEL_23:
  ++*(_DWORD *)(v20 + 128);
  if (v33 != -4096) {
    --*(_DWORD *)(v20 + 132);
  }
  *uint64_t v25 = a4;
  *((_WORD *)v25 + 4) = v22 + (v31 >> 3);
  uint64_t v34 = *(char ***)(v20 + 184);
  unint64_t v36 = v34[1];
  unint64_t v35 = (unint64_t)v34[2];
  if ((unint64_t)v36 >= v35)
  {
    uint64_t v38 = *v34;
    uint64_t v39 = v36 - *v34;
    uint64_t v40 = v39 >> 3;
    unint64_t v41 = (v39 >> 3) + 1;
    if (v41 >> 61) {
      abort();
    }
    uint64_t v42 = v35 - (void)v38;
    if (v42 >> 2 > v41) {
      unint64_t v41 = v42 >> 2;
    }
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v43 = v41;
    }
    if (v43)
    {
      uint64_t v69 = (char *)(v36 - *v34);
      if (v43 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v44 = operator new(8 * v43);
      uint64_t v39 = (uint64_t)v69;
      __int16 v45 = &v44[8 * v40];
      uint64_t v46 = &v44[8 * v43];
      *(void *)__int16 v45 = a4;
      uint64_t v37 = (uint64_t)(v45 + 8);
      uint64_t v47 = (char *)(v36 - v38);
      if (v36 == v38) {
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v44 = 0;
      __int16 v45 = (char *)(8 * v40);
      uint64_t v46 = 0;
      *(void *)(8 * v40) = a4;
      uint64_t v37 = 8 * v40 + 8;
      uint64_t v47 = (char *)(v36 - v38);
      if (v36 == v38)
      {
LABEL_45:
        *uint64_t v34 = v45;
        v34[1] = (char *)v37;
        uint64_t v34[2] = v46;
        a5 = v70;
        if (v36) {
          operator delete(v36);
        }
        goto LABEL_47;
      }
    }
    unint64_t v48 = (unint64_t)(v47 - 8);
    if (v48 < 0x58) {
      goto LABEL_77;
    }
    if ((unint64_t)(v36 - v44 - v39) < 0x20) {
      goto LABEL_77;
    }
    uint64_t v49 = (v48 >> 3) + 1;
    uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v51 = &v36[-v50];
    v45 -= v50;
    int v52 = &v44[8 * v40 - 16];
    BOOL v53 = v36 - 16;
    uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v55 = *(_OWORD *)v53;
      *(v52 - 1) = *((_OWORD *)v53 - 1);
      _OWORD *v52 = v55;
      v52 -= 2;
      v53 -= 32;
      v54 -= 4;
    }
    while (v54);
    unint64_t v36 = v51;
    if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_77:
      do
      {
        uint64_t v56 = *((void *)v36 - 1);
        v36 -= 8;
        *((void *)v45 - 1) = v56;
        v45 -= 8;
      }
      while (v36 != v38);
    }
    unint64_t v36 = *v34;
    goto LABEL_45;
  }
  *(void *)unint64_t v36 = a4;
  uint64_t v37 = (uint64_t)(v36 + 8);
  a5 = v70;
LABEL_47:
  v34[1] = (char *)v37;
LABEL_48:
  __int16 v57 = *((_WORD *)v25 + 4);
  uint64_t v58 = v19[1];
  if ((unint64_t)(v58 + 1) > v19[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v19, v19 + 3, v58 + 1, 2);
    *(_WORD *)(*v19 + 2 * v19[1]++) = v57;
    if (!a6) {
      return;
    }
  }
  else
  {
    *(_WORD *)(*v19 + 2 * v58) = v57;
    ++v19[1];
    if (!a6) {
      return;
    }
  }
  uint64_t v59 = (mlir::Block **)(a5 + 24);
  do
  {
    unsigned int v60 = *v59;
    v59 += 4;
    --a6;
  }
  while (a6);
}

void llvm::ReversePostOrderTraversal<mlir::Region *,llvm::GraphTraits<mlir::Region *>>::Initialize(uint64_t a1, uint64_t a2)
{
  unsigned char v14[40] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)a2 + 8);
  if (v2) {
    uint64_t v3 = (mlir::Block *)(v2 - 8);
  }
  else {
    uint64_t v3 = 0;
  }
  llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>::po_iterator((uint64_t)&v11, v3);
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  v8[0] = 0;
  memset(v7, 0, sizeof(v7));
  uint64_t v4 = (char *)v7 + 8;
  uint64_t v5 = (char *)v7 + 8;
  uint64_t v6 = 8;
  v8[1] = (char *)v9 + 8;
  DWORD1(v9[0]) = 8;
  std::copy[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>((const void **)&v11, (uint64_t)&v4);
  if (v8[1] != (char *)v9 + 8) {
    free(v8[1]);
  }
  if (v5 != v4) {
    free(v5);
  }
  if (v13 != v14) {
    free(v13);
  }
  if (v12 != v11) {
    free(v12);
  }
}

uint64_t std::copy[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>(const void **a1, uint64_t a2)
{
  v26[41] = *MEMORY[0x1E4F143B8];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v18, &v20, (const llvm::SmallPtrSetImplBase *)a1);
  uint64_t v21 = v23;
  uint64_t v22 = 0x800000000;
  if (&v18 != (void **)a1)
  {
    unsigned int v4 = *((_DWORD *)a1 + 26);
    if (v4)
    {
      if (v4 < 9)
      {
        uint64_t v6 = v23;
        unsigned int v5 = *((_DWORD *)a1 + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, *((unsigned int *)a1 + 26), 40);
        unsigned int v5 = *((_DWORD *)a1 + 26);
        if (!v5)
        {
LABEL_8:
          LODWORD(v22) = v4;
          goto LABEL_9;
        }
        uint64_t v6 = v21;
      }
      memcpy(v6, a1[12], 40 * v5);
      goto LABEL_8;
    }
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v12, &v14, (const llvm::SmallPtrSetImplBase *)a2);
  uint64_t v15 = v17;
  uint64_t v16 = 0x800000000;
  if (&v12 != (void **)a2)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 104);
    if (v7)
    {
      if (v7 < 9)
      {
        uint64_t v9 = v17;
        unsigned int v8 = *(_DWORD *)(a2 + 104);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v17, *(unsigned int *)(a2 + 104), 40);
        unsigned int v8 = *(_DWORD *)(a2 + 104);
        if (!v8)
        {
LABEL_16:
          LODWORD(v16) = v7;
          goto LABEL_17;
        }
        uint64_t v9 = v15;
      }
      memcpy(v9, *(const void **)(a2 + 96), 40 * v8);
      goto LABEL_16;
    }
  }
LABEL_17:
  std::__copy[abi:nn180100]<std::_ClassicAlgPolicy,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>((uint64_t)&v18, (uint64_t)&v12);
  uint64_t v10 = v26[40];
  if (v25 != v26) {
    free(v25);
  }
  if (v24 != (void *)v23[40]) {
    free(v24);
  }
  if (v15 != v17) {
    free(v15);
  }
  if (v13 != v12) {
    free(v13);
  }
  if (v21 != v23) {
    free(v21);
  }
  if (v19 != v18) {
    free(v19);
  }
  return v10;
}

void std::__copy[abi:nn180100]<std::_ClassicAlgPolicy,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>(uint64_t a1, uint64_t a2)
{
  unsigned char v13[40] = *MEMORY[0x1E4F143B8];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v9, &v11, 8, (uint64_t *)a1);
  v12[0] = v13;
  v12[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v12, (uint64_t *)(a1 + 96));
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v4, &v6, 8, (uint64_t *)a2);
  v7[0] = v8;
  v7[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v7, (uint64_t *)(a2 + 96));
  }
  std::__dispatch_copy_or_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>((uint64_t)&v9, (uint64_t)&v4);
  if (v7[0] != v8) {
    free(v7[0]);
  }
  if (v5 != v4) {
    free(v5);
  }
  if (v12[0] != v13) {
    free(v12[0]);
  }
  if (v10 != v9) {
    free(v10);
  }
}

void std::__dispatch_copy_or_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>(uint64_t a1, uint64_t a2)
{
  unsigned char v13[40] = *MEMORY[0x1E4F143B8];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v9, &v11, 8, (uint64_t *)a1);
  v12[0] = v13;
  v12[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v12, (uint64_t *)(a1 + 96));
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v4, &v6, 8, (uint64_t *)a2);
  v7[0] = v8;
  v7[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v7, (uint64_t *)(a2 + 96));
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>,0>();
  if (v7[0] != v8) {
    free(v7[0]);
  }
  if (v5 != v4) {
    free(v5);
  }
  if (v12[0] != v13) {
    free(v12[0]);
  }
  if (v10 != v9) {
    free(v10);
  }
}

void std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>,0>()
{
  uint64_t v0 = (const llvm::SmallPtrSetImplBase *)MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unsigned int v5 = v0;
  uint64_t v7 = v6;
  v64[40] = *MEMORY[0x1E4F143B8];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v49, &v51, v0);
  int v52 = v54;
  uint64_t v53 = 0x800000000;
  if (&v49 != (void **)v5)
  {
    unsigned int v8 = *((_DWORD *)v5 + 26);
    if (v8)
    {
      if (v8 < 9)
      {
        uint64_t v10 = v54;
        unsigned int v9 = *((_DWORD *)v5 + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v54, *((unsigned int *)v5 + 26), 40);
        unsigned int v9 = *((_DWORD *)v5 + 26);
        if (!v9)
        {
LABEL_8:
          LODWORD(v53) = v8;
          goto LABEL_9;
        }
        uint64_t v10 = v52;
      }
      memcpy(v10, *((const void **)v5 + 12), 40 * v9);
      goto LABEL_8;
    }
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v44, &v46, 8, (uint64_t *)v4);
  v47[0] = v48;
  v47[1] = (void *)0x800000000;
  if (*(_DWORD *)(v4 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v47, (uint64_t *)(v4 + 96));
  }
  std::__unwrap_range[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>>((uint64_t)&v49, (uint64_t)&v44, &v55);
  if (v47[0] != v48) {
    free(v47[0]);
  }
  if (v45 != v44) {
    free(v45);
  }
  if (v52 != v54) {
    free(v52);
  }
  if (v50 != v49) {
    free(v50);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v34, &v36, 8, (uint64_t *)&v55);
  v37[0] = v38;
  v37[1] = (void *)0x800000000;
  if (v58) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v37, (uint64_t *)&v57);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v29, &v31, 8, (uint64_t *)&v60);
  v32[0] = v33;
  v32[1] = (void *)0x800000000;
  if (v63) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v32, (uint64_t *)&v62);
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>((llvm::SmallPtrSetImplBase *)&v34, (uint64_t)&v29, v2, (uint64_t)&v39);
  if (v32[0] != v33) {
    free(v32[0]);
  }
  if (v30 != v29) {
    free(v30);
  }
  if (v37[0] != v38) {
    free(v37[0]);
  }
  if (v35 != v34) {
    free(v35);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v19, &v21, 8, (uint64_t *)v5);
  v22[0] = v23;
  v22[1] = (void *)0x800000000;
  if (*((_DWORD *)v5 + 26)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v22, (uint64_t *)v5 + 12);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v14, &v16, 8, (uint64_t *)&v39);
  v17[0] = v18;
  v17[1] = (void *)0x800000000;
  if (v42) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v17, (uint64_t *)&v41);
  }
  std::__rewrap_range[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>>((uint64_t)&v19, (uint64_t)&v14, (uint64_t)&v24);
  uint64_t v11 = v43[40];
  uint64_t v12 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(v7, (void *)(v7 + 32), 8, (uint64_t *)&v24);
  *(void *)(v12 + 96) = v7 + 112;
  uint64_t v13 = v12 + 96;
  *(void *)(v13 + 8) = 0x800000000;
  if (v27) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v13, (uint64_t *)&v26);
  }
  *(void *)(v7 + 432) = v11;
  if (v26 != &v28) {
    free(v26);
  }
  if (v25 != v24) {
    free(v25);
  }
  if (v17[0] != v18) {
    free(v17[0]);
  }
  if (v15 != v14) {
    free(v15);
  }
  if (v22[0] != v23) {
    free(v22[0]);
  }
  if (v20 != v19) {
    free(v20);
  }
  if (v41 != v43) {
    free(v41);
  }
  if (v40 != v39) {
    free(v40);
  }
  if (v62 != v64) {
    free(v62);
  }
  if (v61 != v60) {
    free(v61);
  }
  if (v57 != &v59) {
    free(v57);
  }
  if (v56 != v55) {
    free(v56);
  }
}

void std::__unwrap_range[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v27[40] = *MEMORY[0x1E4F143B8];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v18, &v20, 8, (uint64_t *)a1);
  v21[0] = v22;
  v21[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v21, (uint64_t *)(a1 + 96));
  }
  std::__unwrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>,0>((const void **)&v18, (uint64_t)&v23);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v8, &v10, 8, (uint64_t *)a2);
  v11[0] = v12;
  v11[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v11, (uint64_t *)(a2 + 96));
  }
  std::__unwrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>,0>((const void **)&v8, (uint64_t)&v13);
  uint64_t v6 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)a3, a3 + 4, 8, (uint64_t *)&v23);
  *(void *)(v6 + 96) = a3 + 14;
  uint64_t v7 = v6 + 96;
  *(void *)(v7 + 8) = 0x800000000;
  if (v26) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v7, (uint64_t *)&v25);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(a3 + 54), a3 + 58, 8, (uint64_t *)&v13);
  a3[66] = a3 + 68;
  a3[67] = 0x800000000;
  if (v16) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)(a3 + 66), (uint64_t *)&v15);
  }
  if (v15 != &v17) {
    free(v15);
  }
  if (v14 != v13) {
    free(v14);
  }
  if (v11[0] != v12) {
    free(v11[0]);
  }
  if (v9 != v8) {
    free(v9);
  }
  if (v25 != v27) {
    free(v25);
  }
  if (v24 != v23) {
    free(v24);
  }
  if (v21[0] != v22) {
    free(v21[0]);
  }
  if (v19 != v18) {
    free(v19);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::back_insert_iterator<llvm::SmallVector<mlir::Block *,8u>>>@<X0>(llvm::SmallPtrSetImplBase *this@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v8 = (uint64_t *)((char *)this + 96);
  unsigned int v9 = (void *)(a3 + 16);
  while (1)
  {
    unsigned int v10 = *((_DWORD *)this + 26);
    uint64_t v11 = *((void *)this + 12);
    if (v10 != *(_DWORD *)(a2 + 104)) {
      goto LABEL_12;
    }
    if (!v10) {
      break;
    }
    uint64_t v12 = *(void **)(a2 + 96);
    uint64_t v13 = (void *)*((void *)this + 12);
    while (*v13 == *v12 && v13[1] == v12[1] && v13[2] == v12[2] && v13[3] == v12[3] && v13[4] == v12[4])
    {
      v13 += 5;
      v12 += 5;
      if (v13 == (void *)(v11 + 40 * v10)) {
        goto LABEL_16;
      }
    }
LABEL_12:
    uint64_t v14 = *(void *)(v11 + 40 * v10 - 40);
    unint64_t v15 = *(unsigned int *)(a3 + 8);
    if (v15 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v9, v15 + 1, 8);
      unint64_t v15 = *(unsigned int *)(a3 + 8);
    }
    *(void *)(*(void *)a3 + 8 * v15) = v14;
    ++*(_DWORD *)(a3 + 8);
    int v16 = *((_DWORD *)this + 26) - 1;
    *((_DWORD *)this + 26) = v16;
    if (v16) {
      llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild(this);
    }
  }
LABEL_16:
  uint64_t v17 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a4, (void *)(a4 + 32), 8, (uint64_t *)this);
  *(void *)(v17 + 96) = a4 + 112;
  uint64_t result = v17 + 96;
  *(void *)(result + 8) = 0x800000000;
  if (*((_DWORD *)this + 26)) {
    uint64_t result = llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(result, v8);
  }
  *(void *)(a4 + 432) = a3;
  return result;
}

void std::__rewrap_range[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v15[40] = *MEMORY[0x1E4F143B8];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v11, &v13, 8, (uint64_t *)a1);
  v14[0] = v15;
  v14[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v14, (uint64_t *)(a1 + 96));
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v6, &v8, 8, (uint64_t *)a2);
  v9[0] = v10;
  v9[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v9, (uint64_t *)(a2 + 96));
  }
  std::__rewrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>>((uint64_t)&v11, (uint64_t)&v6, a3);
  if (v9[0] != v10) {
    free(v9[0]);
  }
  if (v7 != v6) {
    free(v7);
  }
  if (v14[0] != v15) {
    free(v14[0]);
  }
  if (v12 != v11) {
    free(v12);
  }
}

void std::__unwrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>,0>(const void **a1@<X0>, uint64_t a2@<X8>)
{
  unsigned char v13[40] = *MEMORY[0x1E4F143B8];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v8, &v10, (const llvm::SmallPtrSetImplBase *)a1);
  uint64_t v11 = v13;
  uint64_t v12 = 0x800000000;
  if (&v8 != (void **)a1)
  {
    unsigned int v4 = *((_DWORD *)a1 + 26);
    if (v4)
    {
      if (v4 < 9)
      {
        uint64_t v6 = v13;
        unsigned int v5 = *((_DWORD *)a1 + 26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v13, *((unsigned int *)a1 + 26), 40);
        unsigned int v5 = *((_DWORD *)a1 + 26);
        if (!v5)
        {
LABEL_8:
          LODWORD(v12) = v4;
          goto LABEL_9;
        }
        uint64_t v6 = v11;
      }
      memcpy(v6, a1[12], 40 * v5);
      goto LABEL_8;
    }
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a2, (void *)(a2 + 32), 8, (uint64_t *)&v8);
  *(void *)(a2 + 96) = a2 + 112;
  uint64_t v7 = a2 + 96;
  *(void *)(v7 + 8) = 0x800000000;
  if (v12) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v7, (uint64_t *)&v11);
  }
  if (v11 != v13) {
    free(v11);
  }
  if (v9 != v8) {
    free(v9);
  }
}

void std::__rewrap_iter[abi:nn180100]<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,std::__unwrap_iter_impl<llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>,false>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v17[40] = *MEMORY[0x1E4F143B8];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v13, &v15, 8, (uint64_t *)a1);
  v16[0] = v17;
  v16[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)v16, (uint64_t *)(a1 + 96));
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v7, &v9, 8, (uint64_t *)a2);
  unsigned int v10 = v12;
  uint64_t v11 = 0x800000000;
  if (*(_DWORD *)(a2 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)&v10, (uint64_t *)(a2 + 96));
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a3, (void *)(a3 + 32), 8, (uint64_t *)&v7);
  *(void *)(a3 + 96) = a3 + 112;
  uint64_t v6 = a3 + 96;
  *(void *)(v6 + 8) = 0x800000000;
  if (v11) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v6, (uint64_t *)&v10);
  }
  if (v10 != v12) {
    free(v10);
  }
  if (v8 != v7) {
    free(v8);
  }
  if (v16[0] != v17) {
    free(v16[0]);
  }
  if (v14 != v13) {
    free(v14);
  }
}

uint64_t llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>::po_iterator(uint64_t a1, mlir::Block *a2)
{
  *(void *)(a1 + 32) = a2;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  unsigned int v4 = (void *)(a1 + 112);
  *(void *)(a1 + 96) = a1 + 112;
  unsigned int v5 = (uint64_t *)(a1 + 96);
  *(void *)(a1 + 104) = 0x800000000;
  *(void *)(a1 + 16) = 0x100000008;
  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v20, a2);
  uint64_t v6 = v20;
  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v20, a2);
  uint64_t v8 = v20;
  uint64_t v7 = v21;
  uint64_t v9 = *(unsigned int *)(a1 + 104);
  if (v9 >= *(_DWORD *)(a1 + 108))
  {
    uint64_t v20 = a2;
    uint64_t v21 = v6;
    uint64_t v22 = 0;
    unsigned int v23 = v8;
    unsigned int v24 = v7;
    unint64_t v12 = v9 + 1;
    BOOL v13 = *v5 + 40 * (unint64_t)v9 > (unint64_t)&v20;
    if (*v5 <= (unint64_t)&v20 && v13)
    {
      unsigned int v19 = (char *)&v20 - *v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v5, v4, v12, 40);
      uint64_t v14 = *v5;
      uint64_t v15 = &v19[*v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v5, v4, v12, 40);
      uint64_t v14 = *v5;
      uint64_t v15 = (char *)&v20;
    }
    uint64_t v16 = v14 + 40 * *(unsigned int *)(a1 + 104);
    long long v17 = *(_OWORD *)v15;
    long long v18 = *((_OWORD *)v15 + 1);
    *(void *)(v16 + 32) = *((void *)v15 + 4);
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
  }
  else
  {
    unsigned int v10 = (mlir::Block **)(*(void *)(a1 + 96) + 40 * v9);
    *unsigned int v10 = a2;
    v10[1] = v6;
    unint64_t v10[2] = 0;
    unint64_t v10[3] = v8;
    uint64_t v10[4] = v7;
  }
  ++*(_DWORD *)(a1 + 104);
  llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild((llvm::SmallPtrSetImplBase *)a1);
  return a1;
}

void anonymous namespace'::ByteCodeExecutor::readList<mlir::PDLValue,mlir::PDLValue>(unsigned __int16 **a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(*a1)++;
  if (v2)
  {
    unsigned int v5 = 0;
    uint64_t v6 = a1 + 9;
    uint64_t v7 = a1 + 21;
    uint64_t v8 = (void *)(a2 + 16);
    do
    {
      uint64_t v9 = (uint64_t)*a1;
      switch(**a1)
      {
        case 1u:
          *a1 = (unsigned __int16 *)(v9 + 4);
          unint64_t v14 = *(unsigned __int16 *)(v9 + 2);
          BOOL v13 = v6;
          uint64_t v10 = 1;
          break;
        case 2u:
          *a1 = (unsigned __int16 *)(v9 + 4);
          unint64_t v15 = *(unsigned __int16 *)(v9 + 2);
          uint64_t v16 = a1[10];
          if ((unint64_t)v16 <= v15) {
            BOOL v13 = v7;
          }
          else {
            BOOL v13 = v6;
          }
          if ((unint64_t)v16 > v15) {
            uint64_t v16 = 0;
          }
          unint64_t v14 = v15 - (void)v16;
          uint64_t v10 = 2;
          break;
        case 3u:
          *a1 = (unsigned __int16 *)(v9 + 4);
          unint64_t v14 = *(unsigned __int16 *)(v9 + 2);
          BOOL v13 = v6;
          uint64_t v10 = 3;
          break;
        case 4u:
          *a1 = (unsigned __int16 *)(v9 + 4);
          unint64_t v14 = *(unsigned __int16 *)(v9 + 2);
          BOOL v13 = v6;
          uint64_t v10 = 4;
          break;
        case 5u:
          *a1 = (unsigned __int16 *)(v9 + 4);
          unint64_t v14 = *(unsigned __int16 *)(v9 + 2);
          BOOL v13 = v6;
          uint64_t v10 = 5;
          break;
        default:
          uint64_t v10 = 0;
          *a1 = (unsigned __int16 *)(v9 + 4);
          unint64_t v11 = *(unsigned __int16 *)(v9 + 2);
          unint64_t v12 = a1[10];
          if ((unint64_t)v12 <= v11) {
            BOOL v13 = v7;
          }
          else {
            BOOL v13 = v6;
          }
          if ((unint64_t)v12 > v11) {
            unint64_t v12 = 0;
          }
          unint64_t v14 = v11 - (void)v12;
          break;
      }
      uint64_t v17 = *(void *)&(*v13)[4 * v14];
      if (v5 >= *(_DWORD *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v8, v5 + 1, 16);
        unsigned int v5 = *(_DWORD *)(a2 + 8);
      }
      long long v18 = (void *)(*(void *)a2 + 16 * v5);
      void *v18 = v17;
      v18[1] = v10;
      unsigned int v5 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v5;
      --v2;
    }
    while (v2);
  }
}

_OWORD *std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>(void **a1, uint64_t a2)
{
  uint64_t v2 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60) {
    abort();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 3 > v3) {
    unint64_t v3 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v8 = (char *)operator new(16 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = &v8[16 * v2];
  uint64_t v10 = &v8[16 * v7];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v11 = v9 + 16;
  unint64_t v12 = (char *)*a1;
  BOOL v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      *((_OWORD *)v9 - 1) = *((_OWORD *)v13 - 1);
      v9 -= 16;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      v13 -= 16;
    }
    while (v13 != v12);
    BOOL v13 = (char *)*a1;
    unint64_t v14 = (char *)a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v14 != v13)
    {
      uint64_t v16 = (void *)*((void *)v14 - 2);
      v14 -= 16;
      unint64_t v15 = v16;
      if (v16) {
        operator delete[](v15);
      }
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void mlir::PDLResultList::~PDLResultList(mlir::PDLResultList *this)
{
  uint64_t v2 = (char *)*((void *)this + 32);
  uint64_t v3 = *((unsigned int *)this + 66);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unsigned int v5 = v2 - 16;
    do
    {
      uint64_t v6 = *(void **)&v5[v4];
      if (v6) {
        operator delete[](v6);
      }
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (char *)*((void *)this + 32);
  }
  if (v2 != (char *)this + 272) {
    free(v2);
  }
  unint64_t v7 = (char *)*((void *)this + 24);
  uint64_t v8 = *((unsigned int *)this + 50);
  if (v8)
  {
    uint64_t v9 = 16 * v8;
    uint64_t v10 = v7 - 16;
    do
    {
      unint64_t v11 = *(void **)&v10[v9];
      if (v11) {
        operator delete[](v11);
      }
      v9 -= 16;
    }
    while (v9);
    unint64_t v7 = (char *)*((void *)this + 24);
  }
  if (v7 != (char *)this + 208) {
    free(v7);
  }
  unint64_t v12 = (char *)*((void *)this + 16);
  if (v12 != (char *)this + 144) {
    free(v12);
  }
  BOOL v13 = (char *)*((void *)this + 8);
  if (v13 != (char *)this + 80) {
    free(v13);
  }
  if (*(mlir::PDLResultList **)this != (mlir::PDLResultList *)((char *)this + 16)) {
    free(*(void **)this);
  }
}

void anonymous namespace'::ByteCodeExecutor::readList(unsigned __int16 **a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v2 = *(*a1)++;
  if (v2)
  {
    int v5 = 0;
    uint64_t v6 = (void *)(a2 + 16);
    do
    {
      while (1)
      {
        uint64_t v7 = (uint64_t)*a1;
        int v8 = **a1;
        *a1 += 2;
        uint64_t v9 = *(uint64_t **)&a1[9][4 * *(unsigned __int16 *)(v7 + 2)];
        if (v8 != 4) {
          break;
        }
        unint64_t v10 = *(unsigned int *)(a2 + 8);
        if (v10 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v6, v10 + 1, 8);
          unint64_t v10 = *(unsigned int *)(a2 + 8);
        }
        *(void *)(*(void *)a2 + 8 * v10) = v9;
        ++*(_DWORD *)(a2 + 8);
        if (++v5 == v2) {
          return;
        }
      }
      uint64_t v12 = *v9;
      uint64_t v11 = v9[1];
      uint64_t v13 = *(unsigned int *)(a2 + 8);
      if (v11 + v13 > (unint64_t)*(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v6, v11 + v13, 8);
        uint64_t v13 = *(unsigned int *)(a2 + 8);
      }
      uint64_t v14 = *(void *)a2;
      uint64_t v18 = v12;
      uint64_t v19 = 0;
      if (v11)
      {
        uint64_t v15 = 0;
        uint64_t v16 = (uint64_t *)(v14 + 8 * v13);
        do
        {
          *v16++ = mlir::ValueRange::dereference_iterator(&v18, v15);
          uint64_t v15 = ++v19;
        }
        while (v18 != v12 || v15 != v11);
        LODWORD(v13) = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(a2 + 8) = v13 + v11;
      ++v5;
    }
    while (v5 != v2);
  }
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedOperandSegments>(void *a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_1E8EBA000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v14 = 96;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_1E8EBA000;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, v1[61]);
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedResultSegments>(void *a1)
{
  {
    uint64_t v12 = a1;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedResultSegments<Empty>]";
      unint64_t v14 = 95;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedResultSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedResultSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, v1[53]);
}

uint64_t llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCode::MatchResult,false>::growAndEmplaceBack<mlir::Location &,mlir::detail::PDLByteCodePattern const&,mlir::PatternBenefit &>(uint64_t a1, void *a2, uint64_t a3, __int16 *a4)
{
  unint64_t v15 = 0;
  uint64_t v8 = a1 + 16;
  uint64_t v9 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 120, &v15);
  unint64_t v10 = &v9[120 * *(unsigned int *)(a1 + 8)];
  __int16 v11 = *a4;
  *(void *)unint64_t v10 = *a2;
  *((void *)v10 + 1) = v10 + 24;
  *((void *)v10 + 13) = a3;
  *((void *)v10 + 11) = v10 + 104;
  *((void *)v10 + 2) = 0x600000000;
  *((void *)v10 + 9) = v10 + 88;
  *((void *)v10 + 10) = 0;
  *((void *)v10 + 12) = 0;
  *((_WORD *)v10 + 56) = v11;
  llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCode::MatchResult,false>::moveElementsForGrow((uint64_t *)a1, (uint64_t)v9);
  int v12 = v15;
  if (*(void *)a1 != v8) {
    free(*(void **)a1);
  }
  *(void *)a1 = v9;
  unsigned int v13 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 12) = v12;
  return (uint64_t)&v9[120 * v13 - 120];
}

void llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCode::MatchResult,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    uint64_t v7 = *a1 + 120 * v2;
    do
    {
      uint64_t v9 = v6 + v5;
      unint64_t v10 = (void *)(a2 + v5);
      *unint64_t v10 = *(void *)(v6 + v5);
      *(void *)(a2 + v5 + 8) = a2 + v5 + 24;
      unint64_t v10[2] = 0x600000000;
      if (*(_DWORD *)(v6 + v5 + 16)) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a2 + v5 + 8, v9 + 8);
      }
      __int16 v11 = v10 + 11;
      v10[9] = v10 + 11;
      v10[10] = 0;
      uint64_t v12 = (uint64_t)(v10 + 9);
      if (*(_DWORD *)(v9 + 80)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v12, v6 + v5 + 72);
      }
      unsigned int v13 = (void *)(a2 + v5 + 104);
      void *v11 = v13;
      *(void *)(a2 + v5 + 96) = 0;
      if (*(_DWORD *)(v9 + 96)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v11, v6 + v5 + 88);
      }
      uint64_t v8 = *(void *)(v9 + 104);
      *(_WORD *)(a2 + v5 + 112) = *(_WORD *)(v9 + 112);
      *unsigned int v13 = v8;
      v5 += 120;
    }
    while (v9 + 120 != v7);
    uint64_t v14 = *((unsigned int *)a1 + 2);
    if (v14)
    {
      uint64_t v15 = *a1;
      uint64_t v16 = 120 * v14;
      do
      {
        uint64_t v17 = *(void **)(v15 + v16 - 32);
        if ((void *)(v15 + v16 - 16) != v17) {
          free(v17);
        }
        uint64_t v18 = *(void **)(v15 + v16 - 48);
        if ((void *)(v15 + v16 - 32) != v18) {
          free(v18);
        }
        uint64_t v19 = *(void **)(v15 + v16 - 112);
        if ((void *)(v15 + v16 - 96) != v19) {
          free(v19);
        }
        v16 -= 120;
      }
      while (v16);
    }
  }
}

uint64_t std::vector<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>>::__push_back_slow_path<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>>(uint64_t *a1, void *a2)
{
  unsigned int v2 = (char *)a1[1];
  uint64_t v3 = (uint64_t)&v2[-*a1] >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 4 > v4) {
    unint64_t v4 = v7 >> 4;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (!v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 32 * v3;
    __int16 v11 = (void *)a2[3];
    if (v11) {
      goto LABEL_10;
    }
LABEL_14:
    *(void *)(v10 + 24) = 0;
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    uint64_t v14 = (char *)*a1;
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  if (v8 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v9 = (char *)operator new(32 * v8);
  uint64_t v10 = (uint64_t)&v9[32 * v3];
  __int16 v11 = (void *)a2[3];
  if (!v11) {
    goto LABEL_14;
  }
LABEL_10:
  if (v11 == a2)
  {
    *(void *)(v10 + 24) = v10;
    (*(void (**)(void *, uint64_t))(*a2 + 24))(a2, v10);
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    uint64_t v14 = (char *)*a1;
    unsigned int v2 = (char *)a1[1];
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
  }
  else
  {
    *(void *)(v10 + 24) = v11;
    a2[3] = 0;
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    uint64_t v14 = (char *)*a1;
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
  }
  do
  {
LABEL_20:
    uint64_t v15 = v10;
    v10 -= 32;
    uint64_t v16 = v2 - 32;
    uint64_t v17 = (char *)*((void *)v2 - 1);
    if (v17)
    {
      if (v16 == v17)
      {
        *(void *)(v15 - 8) = v10;
        (*(void (**)(void, uint64_t))(**((void **)v2 - 1) + 24))(*((void *)v2 - 1), v10);
      }
      else
      {
        *(void *)(v15 - 8) = v17;
        *((void *)v2 - 1) = 0;
      }
    }
    else
    {
      *(void *)(v15 - 8) = 0;
    }
    v2 -= 32;
  }
  while (v16 != v14);
  unsigned int v2 = (char *)*a1;
LABEL_25:
  uint64_t v18 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = (uint64_t)v12;
  if (v18 != v2)
  {
    uint64_t v19 = v18 - 32;
    uint64_t v20 = v18 - 32;
    do
    {
      uint64_t v22 = (char *)*((void *)v20 + 3);
      if (v20 == v22)
      {
        (*(void (**)(char *))(*(void *)v20 + 32))(v20);
      }
      else if (v22)
      {
        (*(void (**)(char *))(*(void *)v22 + 40))(v22);
      }
      v19 -= 32;
      BOOL v21 = v20 == v2;
      v20 -= 32;
    }
    while (!v21);
  }
  if (v2) {
    operator delete(v2);
  }
  return v13;
}

uint64_t std::vector<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>>::__push_back_slow_path<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>>(uint64_t *a1, void *a2)
{
  unsigned int v2 = (char *)a1[1];
  uint64_t v3 = (uint64_t)&v2[-*a1] >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 4 > v4) {
    unint64_t v4 = v7 >> 4;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (!v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 32 * v3;
    __int16 v11 = (void *)a2[3];
    if (v11) {
      goto LABEL_10;
    }
LABEL_14:
    *(void *)(v10 + 24) = 0;
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    uint64_t v14 = (char *)*a1;
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  if (v8 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v9 = (char *)operator new(32 * v8);
  uint64_t v10 = (uint64_t)&v9[32 * v3];
  __int16 v11 = (void *)a2[3];
  if (!v11) {
    goto LABEL_14;
  }
LABEL_10:
  if (v11 == a2)
  {
    *(void *)(v10 + 24) = v10;
    (*(void (**)(void *, uint64_t))(*a2 + 24))(a2, v10);
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    uint64_t v14 = (char *)*a1;
    unsigned int v2 = (char *)a1[1];
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
  }
  else
  {
    *(void *)(v10 + 24) = v11;
    a2[3] = 0;
    uint64_t v12 = &v9[32 * v8];
    uint64_t v13 = v10 + 32;
    uint64_t v14 = (char *)*a1;
    if (v2 == (char *)*a1) {
      goto LABEL_25;
    }
  }
  do
  {
LABEL_20:
    uint64_t v15 = v10;
    v10 -= 32;
    uint64_t v16 = v2 - 32;
    uint64_t v17 = (char *)*((void *)v2 - 1);
    if (v17)
    {
      if (v16 == v17)
      {
        *(void *)(v15 - 8) = v10;
        (*(void (**)(void, uint64_t))(**((void **)v2 - 1) + 24))(*((void *)v2 - 1), v10);
      }
      else
      {
        *(void *)(v15 - 8) = v17;
        *((void *)v2 - 1) = 0;
      }
    }
    else
    {
      *(void *)(v15 - 8) = 0;
    }
    v2 -= 32;
  }
  while (v16 != v14);
  unsigned int v2 = (char *)*a1;
LABEL_25:
  uint64_t v18 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = (uint64_t)v12;
  if (v18 != v2)
  {
    uint64_t v19 = v18 - 32;
    uint64_t v20 = v18 - 32;
    do
    {
      uint64_t v22 = (char *)*((void *)v20 + 3);
      if (v20 == v22)
      {
        (*(void (**)(char *))(*(void *)v20 + 32))(v20);
      }
      else if (v22)
      {
        (*(void (**)(char *))(*(void *)v22 + 40))(v22);
      }
      v19 -= 32;
      BOOL v21 = v20 == v2;
      v20 -= 32;
    }
    while (!v21);
  }
  if (v2) {
    operator delete(v2);
  }
  return v13;
}

void std::vector<void const*>::__append(unint64_t *a1, unint64_t a2, const double *a3)
{
  unint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  unint64_t v8 = (void *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3) {
        goto LABEL_46;
      }
      unint64_t v17 = v16 + 1;
      unint64_t v8 = (void *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      float64x2_t v18 = vld1q_dup_f64(a3);
      uint64_t v19 = (float64x2_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *uint64_t v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
          *v8++ = *(void *)a3;
        while (v8 != (void *)(v7 + 8 * a2));
      }
      unint64_t v8 = (void *)(v7 + 8 * a2);
    }
    a1[1] = (unint64_t)v8;
  }
  else
  {
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + a2;
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v6 - *a1;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= v11) {
      uint64_t v13 = (v9 >> 3) + a2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[8 * v10];
    uint64_t v22 = (char *)(v21 + 8 * a2);
    unint64_t v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    unsigned int v24 = (char *)v21;
    if (v23 < 0x13) {
      goto LABEL_47;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      unsigned int v24 = &v15[8 * v10];
      if (&v15[8 * a2 + v9] > (char *)a3) {
        goto LABEL_47;
      }
    }
    unint64_t v25 = v23 + 1;
    unsigned int v24 = (char *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    float64x2_t v26 = vld1q_dup_f64(a3);
    int v27 = (float64x2_t *)&v15[8 * v10 + 16];
    uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *int v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        *(double *)unsigned int v24 = *a3;
        v24 += 8;
      }
      while (v24 != v22);
    }
    BOOL v29 = (void *)*a1;
    if (v7 != *a1)
    {
      unint64_t v30 = v7 - *a1 - 8;
      if (v30 < 0x58) {
        goto LABEL_48;
      }
      if (v7 - (unint64_t)&v15[v9] < 0x20) {
        goto LABEL_48;
      }
      uint64_t v31 = (v30 >> 3) + 1;
      uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v8 = (void *)(v7 - v32);
      v21 -= v32;
      uint64_t v33 = &v15[8 * v10 - 16];
      uint64_t v34 = (long long *)(v7 - 16);
      uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v36 = *v34;
        *((_OWORD *)v33 - 1) = *(v34 - 1);
        *(_OWORD *)uint64_t v33 = v36;
        v33 -= 32;
        v34 -= 2;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_48:
        do
        {
          uint64_t v37 = *--v8;
          *(void *)(v21 - 8) = v37;
          v21 -= 8;
        }
        while (v8 != v29);
      }
      unint64_t v8 = (void *)*a1;
    }
    *a1 = v21;
    a1[1] = (unint64_t)v22;
    a1[2] = (unint64_t)&v15[8 * v14];
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<llvm::OwningArrayRef<mlir::Operation *>>::__append(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      abort();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    uint64_t v15 = &v11[16 * v10];
    bzero(v13, v14);
    unint64_t v16 = &v13[v14];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v15;
    }
    else
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        *((void *)v5 - 2) = 0;
        *((void *)v5 - 1) = 0;
        v5 -= 16;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
      unint64_t v17 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v15;
      while (v17 != v5)
      {
        uint64_t v19 = (void *)*((void *)v17 - 2);
        v17 -= 16;
        float64x2_t v18 = v19;
        if (v19) {
          operator delete[](v18);
        }
      }
    }
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<mlir::TypeRange>::__append(char **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      uint64_t v13 = 16 * a2;
      size_t v14 = &v7[16 * a2];
      do
      {
        *(_OWORD *)uint64_t v7 = *a3;
        v7 += 16;
        v13 -= 16;
      }
      while (v13);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (v7 - *a1) >> 4;
    if ((v8 + a2) >> 60) {
      abort();
    }
    uint64_t v9 = v6 - *a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= v8 + a2) {
      uint64_t v10 = v8 + a2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v15 = &v12[16 * v8];
    uint64_t v16 = 16 * a2;
    unint64_t v17 = &v15[16 * a2];
    float64x2_t v18 = v15;
    do
    {
      *(_OWORD *)float64x2_t v18 = *a3;
      v18 += 16;
      v16 -= 16;
    }
    while (v16);
    uint64_t v19 = *a1;
    if (v7 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v19);
      uint64_t v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = &v12[16 * v11];
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  uint64_t v8 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      std::vector<unsigned int>::size_type v16 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || end < __x + 1 && &end[__n] > __x) {
        goto LABEL_45;
      }
      std::vector<unsigned int>::size_type v17 = v16 + 1;
      uint64_t v8 = &end[v17 & 0x7FFFFFFFFFFFFFF8];
      float32x4_t v18 = vld1q_dup_f32((const float *)__x);
      uint64_t v19 = (float32x4_t *)(end + 4);
      uint64_t v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *uint64_t v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
          *v8++ = *__x;
        while (v8 != &end[__n]);
      }
      uint64_t v8 = &end[__n];
    }
    this->__end_ = v8;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v10 = (char *)end - (char *)this->__begin_;
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + __n;
    if (v12 >> 62) {
      abort();
    }
    uint64_t v13 = (char *)value - (char *)begin;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v15 = operator new(4 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v21 = (unsigned int *)&v15[4 * v11];
    uint64_t v22 = &v21[__n];
    std::vector<unsigned int>::size_type v23 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
    unsigned int v24 = v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < __x + 1)
    {
      unsigned int v24 = (unsigned int *)&v15[4 * v11];
      if (&v15[4 * __n + v10] > (unsigned char *)__x) {
        goto LABEL_46;
      }
    }
    std::vector<unsigned int>::size_type v25 = v23 + 1;
    unsigned int v24 = &v21[v25 & 0x7FFFFFFFFFFFFFF8];
    float32x4_t v26 = vld1q_dup_f32((const float *)__x);
    int v27 = (float32x4_t *)&v15[4 * v11 + 16];
    uint64_t v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *int v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_46:
      do
        *v24++ = *__x;
      while (v24 != v22);
    }
    if (end != begin)
    {
      unint64_t v29 = (char *)end - (char *)begin - 4;
      if (v29 < 0x2C) {
        goto LABEL_47;
      }
      if ((unint64_t)((char *)end - &v15[v10]) < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 2) + 1;
      uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v8 = &end[v31 / 0xFFFFFFFFFFFFFFFCLL];
      unint64_t v21 = (unsigned int *)((char *)v21 - v31);
      uint64_t v32 = &v15[4 * v11 - 16];
      uint64_t v33 = (long long *)(end - 4);
      uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v35 = *v33;
        *(v32 - 1) = *(v33 - 1);
        *uint64_t v32 = v35;
        v32 -= 2;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_47:
        do
        {
          unsigned int v36 = *--v8;
          *--unint64_t v21 = v36;
        }
        while (v8 != begin);
      }
    }
    this->__begin_ = v21;
    this->__end_ = v22;
    this->__end_cap_.__value_ = (unsigned int *)&v15[4 * v14];
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(uint64_t a1, void *a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (a3 < 2) {
    return;
  }
  uint64_t v6 = a1;
  if (a3 == 2)
  {
    if (*(unsigned __int16 *)(a1 + 112) < *((unsigned __int16 *)a2 - 4))
    {
      uint64_t v7 = (uint64_t)(a2 - 15);
      std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(a1, v7);
    }
    return;
  }
  if ((uint64_t)a3 > 0)
  {
    unint64_t v11 = a3 >> 1;
    unint64_t v12 = (void *)(a1 + 120 * (a3 >> 1));
    unint64_t v13 = a3 >> 1;
    if ((uint64_t)a3 <= a5)
    {
      std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(a1, v12, v13, a4);
      int v42 = &a4[15 * v11];
      std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v6 + 120 * (a3 >> 1), a2, a3 - (a3 >> 1), v42);
      unint64_t v43 = &a4[15 * a3];
      uint64_t v44 = (uint64_t)v42;
      uint64_t v45 = (uint64_t)a4;
      while ((void *)v44 != v43)
      {
        if (*(unsigned __int16 *)(v45 + 112) >= *(unsigned __int16 *)(v44 + 112))
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(v6, v45);
          v45 += 120;
          v6 += 120;
          if ((void *)v45 == v42) {
            goto LABEL_63;
          }
        }
        else
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(v6, v44);
          v44 += 120;
          v6 += 120;
          if ((void *)v45 == v42)
          {
LABEL_63:
            if ((void *)v44 != v43)
            {
              uint64_t v46 = 0;
              do
              {
                mlir::detail::PDLByteCode::MatchResult::operator=(v6 + v46, v44 + v46);
                v46 += 120;
              }
              while ((void *)(v44 + v46) != v43);
            }
            goto LABEL_70;
          }
        }
      }
      if ((void *)v45 != v42)
      {
        uint64_t v47 = 0;
        do
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(v6 + v47, v45 + v47);
          v47 += 120;
        }
        while ((void *)(v45 + v47) != v42);
      }
LABEL_70:
      if (a4)
      {
        unint64_t v48 = a3;
        uint64_t v49 = a4 + 13;
        do
        {
          uint64_t v50 = (void *)*(v49 - 2);
          if (v49 != v50) {
            free(v50);
          }
          uint64_t v51 = (void *)*(v49 - 4);
          if (v49 - 2 != v51) {
            free(v51);
          }
          int v52 = (void *)*(v49 - 12);
          if (v49 - 10 != v52) {
            free(v52);
          }
          v49 += 15;
          --v48;
        }
        while (v48);
      }
    }
    else
    {
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(a1, v12, v13, a4, a5);
      std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v6 + 120 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v6, v6 + 120 * (a3 >> 1), (uint64_t)a2, a3 >> 1, a3 - (a3 >> 1), (uint64_t)a4, a5);
    }
    return;
  }
  if ((void *)a1 == a2) {
    return;
  }
  unint64_t v14 = (void *)(a1 + 120);
  if ((void *)(a1 + 120) == a2) {
    return;
  }
  uint64_t v15 = 0;
  uint64_t v16 = a1;
  while (2)
  {
    std::vector<unsigned int>::size_type v17 = v14;
    if (*(unsigned __int16 *)(v16 + 112) >= *(unsigned __int16 *)(v16 + 232)) {
      goto LABEL_15;
    }
    uint64_t v53 = *v14;
    v54[0] = v55;
    v54[1] = (void *)0x600000000;
    if (*(_DWORD *)(v16 + 136)) {
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v54, v16 + 128);
    }
    v56[0] = v57;
    v56[1] = 0;
    if (*(_DWORD *)(v16 + 200)) {
      llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v56, v16 + 192);
    }
    v57[0] = &v58;
    v57[1] = 0;
    if (*(_DWORD *)(v16 + 216)) {
      llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v57, v16 + 208);
    }
    uint64_t v58 = *(void *)(v16 + 224);
    unsigned __int16 v59 = *(_WORD *)(v16 + 232);
    uint64_t v18 = v15;
    while (1)
    {
      uint64_t v19 = v6 + v18;
      uint64_t v20 = *(const void **)(v6 + v18 + 8);
      *(void *)(v6 + v18 + 120) = *(void *)(v6 + v18);
      unint64_t v21 = (void **)(v6 + v18 + 128);
      uint64_t v22 = v6 + v18 + 24;
      if ((const void *)v22 == v20)
      {
        unsigned int v36 = (_DWORD *)(v19 + 16);
        unint64_t v37 = *(unsigned int *)(v19 + 16);
        uint64_t v38 = *(unsigned int *)(v19 + 136);
        if (v38 >= v37)
        {
          if (v37) {
            memmove(*v21, v20, 8 * v37);
          }
        }
        else
        {
          if (*(_DWORD *)(v6 + v18 + 140) < v37)
          {
            *(_DWORD *)(v19 + 136) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v21, (void *)(v6 + v18 + 144), v37, 8);
            uint64_t v38 = 0;
            uint64_t v39 = *v36;
            if (!*v36) {
              goto LABEL_43;
            }
            goto LABEL_42;
          }
          if (v38)
          {
            memmove(*v21, v20, 8 * v38);
            uint64_t v39 = *v36;
            if (v38 == v39) {
              goto LABEL_43;
            }
            goto LABEL_42;
          }
          uint64_t v38 = 0;
          uint64_t v39 = *v36;
          if (*v36) {
LABEL_42:
          }
            memcpy((void *)(*(void *)(v19 + 128) + 8 * v38), (const void *)(*(void *)(v19 + 8) + 8 * v38), 8 * v39 - 8 * v38);
        }
LABEL_43:
        *(_DWORD *)(v19 + 136) = v37;
        _DWORD *v36 = 0;
        uint64_t v25 = v6 + v18;
        int v26 = *(_DWORD *)(v6 + v18 + 80);
        if (!v26) {
          goto LABEL_44;
        }
        goto LABEL_28;
      }
      std::vector<unsigned int>::size_type v23 = *v21;
      if ((void *)(v19 + 144) != v23)
      {
        free(v23);
        uint64_t v20 = *(const void **)(v19 + 8);
      }
      uint64_t v24 = v6 + v18;
      *(void *)(v19 + 128) = v20;
      *(void *)(v24 + 136) = *(void *)(v6 + v18 + 16);
      *(void *)(v19 + 8) = v22;
      *(_DWORD *)(v24 + 20) = 0;
      *(_DWORD *)(v16 + 16) = 0;
      uint64_t v25 = v6 + v18;
      int v26 = *(_DWORD *)(v6 + v18 + 80);
      if (!v26)
      {
LABEL_44:
        *(_DWORD *)(v25 + 200) = 0;
        uint64_t v30 = v6 + v18;
        int v31 = *(_DWORD *)(v6 + v18 + 96);
        if (!v31) {
          goto LABEL_45;
        }
        goto LABEL_31;
      }
LABEL_28:
      int v27 = *(void **)(v25 + 192);
      if ((void *)(v25 + 208) != v27)
      {
        free(v27);
        int v26 = *(_DWORD *)(v25 + 80);
      }
      uint64_t v28 = (_DWORD *)(v6 + v18);
      *(void *)(v25 + 192) = *(void *)(v25 + 72);
      int v29 = *(_DWORD *)(v6 + v18 + 84);
      v28[50] = v26;
      v28[51] = v29;
      *(void *)(v25 + 72) = v6 + v18 + 88;
      v28[21] = 0;
      *(_DWORD *)(v16 + 80) = 0;
      uint64_t v30 = v6 + v18;
      int v31 = *(_DWORD *)(v6 + v18 + 96);
      if (!v31)
      {
LABEL_45:
        uint64_t v33 = (_DWORD *)(v30 + 216);
        goto LABEL_46;
      }
LABEL_31:
      uint64_t v32 = *(void **)(v30 + 208);
      if ((void *)(v30 + 224) != v32)
      {
        free(v32);
        int v31 = *(_DWORD *)(v30 + 96);
      }
      uint64_t v33 = (_DWORD *)(v16 + 96);
      uint64_t v34 = (_DWORD *)(v6 + v18);
      *(void *)(v30 + 208) = *(void *)(v30 + 88);
      int v35 = *(_DWORD *)(v6 + v18 + 100);
      v34[54] = v31;
      v34[55] = v35;
      *(void *)(v30 + 88) = v6 + v18 + 104;
      v34[25] = 0;
LABEL_46:
      *uint64_t v33 = 0;
      uint64_t v40 = v6 + v18;
      *(void *)(v40 + 224) = *(void *)(v6 + v18 + 104);
      *(_WORD *)(v40 + 232) = *(_WORD *)(v6 + v18 + 112);
      if (!v18) {
        break;
      }
      v16 -= 120;
      v18 -= 120;
      if (*(unsigned __int16 *)(v40 - 8) >= v59)
      {
        uint64_t v41 = v6 + v18 + 120;
        goto LABEL_52;
      }
    }
    uint64_t v41 = v6;
LABEL_52:
    mlir::detail::PDLByteCode::MatchResult::operator=(v41, (uint64_t)&v53);
    if (v57[0] != &v58) {
      free(v57[0]);
    }
    if (v56[0] != v57) {
      free(v56[0]);
    }
    if (v54[0] != v55) {
      free(v54[0]);
    }
LABEL_15:
    unint64_t v14 = v17 + 15;
    v15 += 120;
    uint64_t v16 = (uint64_t)v17;
    if (v17 + 15 != a2) {
      continue;
    }
    break;
  }
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(uint64_t result, void *a2, unint64_t a3, void *a4)
{
  if (a3)
  {
    unint64_t v4 = a4;
    uint64_t v6 = a2;
    uint64_t v7 = result;
    if (a3 == 2)
    {
      unsigned int v11 = *(unsigned __int16 *)(result + 112);
      uint64_t v12 = (uint64_t)(a4 + 1);
      unint64_t v13 = a4 + 3;
      if (v11 < *((unsigned __int16 *)a2 - 4))
      {
        *a4 = *(a2 - 15);
        a4[1] = v13;
        a4[2] = 0x600000000;
        if (*((_DWORD *)a2 - 26)) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v12, (uint64_t)(a2 - 14));
        }
        v4[9] = v4 + 11;
        v4[10] = 0;
        if (*((_DWORD *)v6 - 10)) {
          llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 9), (uint64_t)(v6 - 6));
        }
        v4[11] = v4 + 13;
        v4[12] = 0;
        if (*((_DWORD *)v6 - 6)) {
          llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), (uint64_t)(v6 - 4));
        }
        uint64_t v14 = *(v6 - 2);
        *((_WORD *)v4 + 56) = *((_WORD *)v6 - 4);
        v4[13] = v14;
        uint64_t v15 = *(void *)v7;
        v4[16] = v4 + 18;
        v4[15] = v15;
        v4[17] = 0x600000000;
        if (*(_DWORD *)(v7 + 16)) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v4 + 16), v7 + 8);
        }
        uint64_t v8 = (uint64_t)(v4 + 26);
        v4[24] = v4 + 26;
        v4[25] = 0;
        uint64_t result = (uint64_t)(v4 + 24);
        if (*(_DWORD *)(v7 + 80)) {
          uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 72);
        }
        uint64_t v9 = v4 + 28;
        v4[26] = v4 + 28;
        v4[27] = 0;
        if (!*(_DWORD *)(v7 + 96)) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(v8, v7 + 88);
LABEL_10:
        uint64_t v10 = *(void *)(v7 + 104);
        *((_WORD *)v9 + 4) = *(_WORD *)(v7 + 112);
        void *v9 = v10;
        return result;
      }
      *a4 = *(void *)v7;
      a4[1] = v13;
      a4[2] = 0x600000000;
      if (*(_DWORD *)(v7 + 16)) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v12, v7 + 8);
      }
      v4[9] = v4 + 11;
      v4[10] = 0;
      if (*(_DWORD *)(v7 + 80)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 9), v7 + 72);
      }
      v4[11] = v4 + 13;
      v4[12] = 0;
      if (*(_DWORD *)(v7 + 96)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), v7 + 88);
      }
      uint64_t v47 = *(void *)(v7 + 104);
      *((_WORD *)v4 + 56) = *(_WORD *)(v7 + 112);
      v4[13] = v47;
      uint64_t v48 = *(v6 - 15);
      v4[16] = v4 + 18;
      v4[15] = v48;
      v4[17] = 0x600000000;
      if (*((_DWORD *)v6 - 26)) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v4 + 16), (uint64_t)(v6 - 14));
      }
      v4[24] = v4 + 26;
      v4[25] = 0;
      uint64_t result = (uint64_t)(v4 + 24);
      if (*((_DWORD *)v6 - 10)) {
        uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, (uint64_t)(v6 - 6));
      }
      v4[26] = v4 + 28;
      v4[27] = 0;
      if (*((_DWORD *)v6 - 6)) {
        uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 26), (uint64_t)(v6 - 4));
      }
      uint64_t v49 = *(v6 - 2);
      *((_WORD *)v4 + 116) = *((_WORD *)v6 - 4);
      v4[28] = v49;
    }
    else
    {
      if (a3 == 1)
      {
        *a4 = *(void *)result;
        a4[1] = a4 + 3;
        a4[2] = 0x600000000;
        if (*(_DWORD *)(result + 16)) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a4 + 1), result + 8);
        }
        uint64_t v8 = (uint64_t)(v4 + 11);
        v4[9] = v4 + 11;
        v4[10] = 0;
        uint64_t result = (uint64_t)(v4 + 9);
        if (*(_DWORD *)(v7 + 80)) {
          uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 72);
        }
        uint64_t v9 = v4 + 13;
        v4[11] = v4 + 13;
        v4[12] = 0;
        if (!*(_DWORD *)(v7 + 96)) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
      if ((uint64_t)a3 > 8)
      {
        unint64_t v50 = a3 >> 1;
        uint64_t v51 = 120 * (a3 >> 1);
        uint64_t v52 = result + v51;
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(result, result + v51, a3 >> 1, a4, a3 >> 1);
        uint64_t result = std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v7 + v51, v6, a3 - v50, &v4[(unint64_t)v51 / 8], a3 - v50);
        uint64_t v53 = v7 + v51;
        while ((void *)v53 != v6)
        {
          uint64_t v55 = (uint64_t)(v4 + 1);
          uint64_t v56 = v4 + 3;
          if (*(unsigned __int16 *)(v7 + 112) >= *(unsigned __int16 *)(v53 + 112))
          {
            *unint64_t v4 = *(void *)v7;
            v4[1] = v56;
            v4[2] = 0x600000000;
            if (*(_DWORD *)(v7 + 16)) {
              llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v55, v7 + 8);
            }
            v4[9] = v4 + 11;
            v4[10] = 0;
            uint64_t result = (uint64_t)(v4 + 9);
            if (*(_DWORD *)(v7 + 80)) {
              uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 72);
            }
            v4[11] = v4 + 13;
            v4[12] = 0;
            if (*(_DWORD *)(v7 + 96)) {
              uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), v7 + 88);
            }
            uint64_t v54 = *(void *)(v7 + 104);
            *((_WORD *)v4 + 56) = *(_WORD *)(v7 + 112);
            v4[13] = v54;
            v7 += 120;
            v4 += 15;
            if (v7 == v52)
            {
LABEL_122:
              if ((void *)v53 != v6)
              {
                uint64_t v65 = 0;
                do
                {
                  uint64_t v67 = v53 + v65 * 8;
                  unsigned int v68 = &v4[v65];
                  *unsigned int v68 = *(void *)(v53 + v65 * 8);
                  v4[v65 + 1] = &v4[v65 + 3];
                  void v68[2] = 0x600000000;
                  if (*(_DWORD *)(v53 + v65 * 8 + 16)) {
                    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v4[v65 + 1], v67 + 8);
                  }
                  v68[9] = v68 + 11;
                  uint64_t result = (uint64_t)(v68 + 9);
                  v68[10] = 0;
                  if (*(_DWORD *)(v67 + 80)) {
                    uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v53 + v65 * 8 + 72);
                  }
                  uint64_t v69 = &v4[v65 + 13];
                  v68[11] = v69;
                  v4[v65 + 12] = 0;
                  if (*(_DWORD *)(v67 + 96)) {
                    uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v68 + 11), v53 + v65 * 8 + 88);
                  }
                  uint64_t v66 = *(void *)(v67 + 104);
                  LOWORD(v4[v65 + 14]) = *(_WORD *)(v67 + 112);
                  *uint64_t v69 = v66;
                  v65 += 15;
                }
                while ((void *)(v67 + 120) != v6);
              }
              return result;
            }
          }
          else
          {
            *unint64_t v4 = *(void *)v53;
            v4[1] = v56;
            v4[2] = 0x600000000;
            if (*(_DWORD *)(v53 + 16)) {
              llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v55, v53 + 8);
            }
            v4[9] = v4 + 11;
            v4[10] = 0;
            uint64_t result = (uint64_t)(v4 + 9);
            if (*(_DWORD *)(v53 + 80)) {
              uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v53 + 72);
            }
            v4[11] = v4 + 13;
            v4[12] = 0;
            if (*(_DWORD *)(v53 + 96)) {
              uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), v53 + 88);
            }
            uint64_t v57 = *(void *)(v53 + 104);
            *((_WORD *)v4 + 56) = *(_WORD *)(v53 + 112);
            v4[13] = v57;
            v53 += 120;
            v4 += 15;
            if (v7 == v52) {
              goto LABEL_122;
            }
          }
        }
        if (v7 != v52)
        {
          uint64_t v58 = 0;
          do
          {
            uint64_t v60 = v7 + v58 * 8;
            uint64_t v61 = &v4[v58];
            *uint64_t v61 = *(void *)(v7 + v58 * 8);
            v4[v58 + 1] = &v4[v58 + 3];
            uint64_t result = (uint64_t)&v4[v58 + 1];
            void v61[2] = 0x600000000;
            if (*(_DWORD *)(v7 + v58 * 8 + 16)) {
              uint64_t result = llvm::SmallVectorImpl<llvm::SMLoc>::operator=(result, v60 + 8);
            }
            int v62 = v61 + 11;
            v61[9] = v61 + 11;
            v61[10] = 0;
            uint64_t v63 = (uint64_t)(v61 + 9);
            if (*(_DWORD *)(v60 + 80)) {
              uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(v63, v7 + v58 * 8 + 72);
            }
            uint64_t v64 = &v4[v58 + 13];
            *int v62 = v64;
            v4[v58 + 12] = 0;
            if (*(_DWORD *)(v60 + 96)) {
              uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v62, v7 + v58 * 8 + 88);
            }
            uint64_t v59 = *(void *)(v60 + 104);
            LOWORD(v4[v58 + 14]) = *(_WORD *)(v60 + 112);
            *uint64_t v64 = v59;
            v58 += 15;
          }
          while (v60 + 120 != v52);
        }
      }
      else if ((void *)result != a2)
      {
        *a4 = *(void *)result;
        a4[1] = a4 + 3;
        a4[2] = 0x600000000;
        if (*(_DWORD *)(result + 16)) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a4 + 1), result + 8);
        }
        v4[9] = v4 + 11;
        v4[10] = 0;
        uint64_t result = (uint64_t)(v4 + 9);
        if (*(_DWORD *)(v7 + 80)) {
          uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 72);
        }
        v4[11] = v4 + 13;
        v4[12] = 0;
        if (*(_DWORD *)(v7 + 96)) {
          uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v4 + 11), v7 + 88);
        }
        uint64_t v16 = *(void *)(v7 + 104);
        *((_WORD *)v4 + 56) = *(_WORD *)(v7 + 112);
        v4[13] = v16;
        std::vector<unsigned int>::size_type v17 = (void *)(v7 + 120);
        if ((void *)(v7 + 120) != v6)
        {
          uint64_t v18 = 0;
          uint64_t v19 = v4;
          uint64_t v70 = v6;
          while (1)
          {
            while (1)
            {
              unint64_t v21 = v17;
              uint64_t v22 = (uint64_t)(v19 + 16);
              std::vector<unsigned int>::size_type v23 = v19 + 18;
              if (*((unsigned __int16 *)v19 + 56) < *(unsigned __int16 *)(v7 + 232)) {
                break;
              }
              uint64_t v46 = v21;
              v19[15] = *v21;
              v19[16] = v23;
              v19[17] = 0x600000000;
              if (*(_DWORD *)(v7 + 136)) {
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v22, v7 + 128);
              }
              v19[24] = v19 + 26;
              v19[25] = 0;
              uint64_t result = (uint64_t)(v19 + 24);
              if (*(_DWORD *)(v7 + 200)) {
                uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=(result, v7 + 192);
              }
              v19[26] = v19 + 28;
              v19[27] = 0;
              if (*(_DWORD *)(v7 + 216)) {
                uint64_t result = llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v19 + 26), v7 + 208);
              }
              uint64_t v20 = *(void *)(v7 + 224);
              *((_WORD *)v19 + 116) = *(_WORD *)(v7 + 232);
              v19[28] = v20;
              uint64_t v7 = (uint64_t)v46;
              v19 += 15;
              std::vector<unsigned int>::size_type v17 = v46 + 15;
              v18 += 120;
              if (v46 + 15 == v6) {
                return result;
              }
            }
            uint64_t v72 = (uint64_t)v21;
            v19[15] = *v19;
            v19[16] = v23;
            v19[17] = 0x600000000;
            if (*((_DWORD *)v19 + 4)) {
              llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v22, (uint64_t)(v19 + 1));
            }
            v19[24] = v19 + 26;
            v19[25] = 0;
            if (*((_DWORD *)v19 + 20)) {
              llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v19 + 24), (uint64_t)(v19 + 9));
            }
            v19[26] = v19 + 28;
            v19[27] = 0;
            if (*((_DWORD *)v19 + 24)) {
              llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)(v19 + 26), (uint64_t)(v19 + 11));
            }
            v19[28] = v19[13];
            *((_WORD *)v19 + 116) = *((_WORD *)v19 + 56);
            uint64_t v24 = v4;
            if (v19 != v4) {
              break;
            }
LABEL_79:
            uint64_t v7 = v72;
            uint64_t result = mlir::detail::PDLByteCode::MatchResult::operator=((uint64_t)v24, v72);
            v19 += 15;
            std::vector<unsigned int>::size_type v17 = (void *)(v72 + 120);
            v18 += 120;
            if ((void *)(v72 + 120) == v6) {
              return result;
            }
          }
          uint64_t v71 = v18;
          uint64_t v25 = v19;
          uint64_t v73 = v7;
          while (1)
          {
            uint64_t v24 = (void *)((char *)v4 + v18);
            if (*(unsigned __int16 *)((char *)v4 + v18 - 8) >= *(unsigned __int16 *)(v7 + 232))
            {
LABEL_78:
              uint64_t v6 = v70;
              uint64_t v18 = v71;
              goto LABEL_79;
            }
            uint64_t v28 = (void *)*(v24 - 14);
            void *v24 = *(v24 - 15);
            int v29 = (void **)(v24 + 1);
            if (v24 - 12 == v28) {
              break;
            }
            uint64_t v30 = (char *)v4 + v18;
            if ((char *)v4 + v18 + 24 != *v29)
            {
              free(*v29);
              uint64_t v28 = (void *)*(v24 - 14);
            }
            void *v29 = v28;
            *((void *)v30 + 2) = *((void *)v30 - 13);
            *(v24 - 14) = v24 - 12;
            *((_DWORD *)v30 - 25) = 0;
            *((_DWORD *)v25 - 26) = 0;
            int v31 = (char *)v4 + v18;
            int v32 = *(_DWORD *)((char *)v4 + v18 - 40);
            if (!v32)
            {
LABEL_65:
              *((_DWORD *)v31 + 20) = 0;
              unsigned int v36 = (char *)v4 + v18;
              int v37 = *(_DWORD *)((char *)v4 + v18 - 24);
              if (v37) {
                goto LABEL_66;
              }
              goto LABEL_44;
            }
LABEL_51:
            uint64_t v33 = (char *)*((void *)v31 + 9);
            if (v31 + 88 != v33)
            {
              free(v33);
              int v32 = *((_DWORD *)v31 - 10);
            }
            uint64_t v34 = (char *)v4 + v18;
            *((void *)v31 + 9) = *((void *)v31 - 6);
            int v35 = *(_DWORD *)((char *)v4 + v18 - 36);
            *((_DWORD *)v34 + 20) = v32;
            *((_DWORD *)v34 + 21) = v35;
            *((void *)v31 - 6) = (char *)v4 + v18 - 32;
            *((_DWORD *)v34 - 9) = 0;
            *((_DWORD *)v25 - 10) = 0;
            unsigned int v36 = (char *)v4 + v18;
            int v37 = *(_DWORD *)((char *)v4 + v18 - 24);
            if (v37)
            {
LABEL_66:
              unint64_t v43 = (char *)*((void *)v36 + 11);
              if (v36 + 104 != v43)
              {
                free(v43);
                int v37 = *((_DWORD *)v36 - 6);
              }
              int v26 = v25 - 3;
              uint64_t v44 = (char *)v4 + v18;
              *((void *)v36 + 11) = *((void *)v36 - 4);
              int v45 = *(_DWORD *)((char *)v4 + v18 - 20);
              *((_DWORD *)v44 + 24) = v37;
              *((_DWORD *)v44 + 25) = v45;
              *((void *)v36 - 4) = (char *)v4 + v18 - 16;
              *((_DWORD *)v44 - 5) = 0;
              goto LABEL_45;
            }
LABEL_44:
            int v26 = v36 + 96;
LABEL_45:
            v25 -= 15;
            *int v26 = 0;
            int v27 = (char *)v4 + v18;
            *((void *)v27 + 13) = *(void *)((char *)v4 + v18 - 16);
            *((_WORD *)v27 + 56) = *((_WORD *)v24 - 4);
            v18 -= 120;
            if (!v18)
            {
              uint64_t v24 = v4;
              goto LABEL_78;
            }
          }
          uint64_t v38 = (char *)v4 + v18;
          uint64_t v39 = (_DWORD *)((char *)v4 + v18 - 104);
          unint64_t v40 = *v39;
          uint64_t v41 = *(unsigned int *)((char *)v4 + v18 + 16);
          if (v41 >= v40)
          {
            if (v40) {
              memmove(*v29, v28, 8 * v40);
            }
          }
          else
          {
            if (*((_DWORD *)v38 + 5) < v40)
            {
              *((_DWORD *)v38 + 4) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v24 + 1), (char *)v4 + v18 + 24, v40, 8);
              uint64_t v41 = 0;
              uint64_t v42 = *v39;
              if (!*v39) {
                goto LABEL_64;
              }
              goto LABEL_63;
            }
            if (v41)
            {
              memmove(*v29, v28, 8 * v41);
              uint64_t v42 = *v39;
              if (v41 == v42) {
                goto LABEL_64;
              }
              goto LABEL_63;
            }
            uint64_t v41 = 0;
            uint64_t v42 = *v39;
            if (*v39) {
LABEL_63:
            }
              memcpy((char *)*v29 + 8 * v41, (const void *)(*(v24 - 14) + 8 * v41), 8 * v42 - 8 * v41);
          }
LABEL_64:
          *((_DWORD *)v38 + 4) = v40;
          uint64_t v7 = v73;
          *uint64_t v39 = 0;
          int v31 = (char *)v4 + v18;
          int v32 = *(_DWORD *)((char *)v4 + v18 - 40);
          if (!v32) {
            goto LABEL_65;
          }
          goto LABEL_51;
        }
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a5) {
    return;
  }
  uint64_t v7 = a5;
  while (v7 > a7 && a4 > a7)
  {
    if (!a4) {
      return;
    }
    uint64_t v11 = 0;
    uint64_t v12 = -a4;
    while (1)
    {
      uint64_t v13 = a1 + v11;
      if (*(unsigned __int16 *)(a1 + v11 + 112) < *(unsigned __int16 *)(a2 + 112)) {
        break;
      }
      v11 += 120;
      if (__CFADD__(v12++, 1)) {
        return;
      }
    }
    uint64_t v15 = -v12;
    uint64_t v80 = a3;
    if (-v12 >= v7)
    {
      if (v12 == -1)
      {
        std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(a1 + v11, a2);
        return;
      }
      if (v12 > 0) {
        uint64_t v15 = 1 - v12;
      }
      uint64_t v26 = v15 >> 1;
      uint64_t v21 = a1 + 120 * (v15 >> 1) + v11;
      if (a3 == a2)
      {
        uint64_t v18 = a3;
      }
      else
      {
        unint64_t v27 = 0xEEEEEEEEEEEEEEEFLL * ((a3 - a2) >> 3);
        uint64_t v18 = a2;
        do
        {
          unint64_t v28 = v27 >> 1;
          unint64_t v29 = v18 + 120 * (v27 >> 1);
          unsigned int v30 = *(unsigned __int16 *)(v29 + 112);
          uint64_t v31 = v29 + 120;
          v27 += ~(v27 >> 1);
          if (v30 > *(unsigned __int16 *)(v21 + 112)) {
            uint64_t v18 = v31;
          }
          else {
            unint64_t v27 = v28;
          }
        }
        while (v27);
      }
      uint64_t v17 = 0xEEEEEEEEEEEEEEEFLL * ((v18 - a2) >> 3);
      uint64_t v32 = v18;
      if (v21 != a2)
      {
LABEL_37:
        uint64_t v32 = v21;
        if (a2 != v18)
        {
          uint64_t v77 = v26;
          uint64_t v78 = v17;
          uint64_t v79 = a7;
          std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(v21, a2);
          uint64_t v32 = v21 + 120;
          for (uint64_t i = a2 + 120; i != v18; i += 120)
          {
            if (v32 == a2) {
              a2 = i;
            }
            std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(v32, i);
            v32 += 120;
          }
          if (v32 != a2)
          {
            uint64_t v34 = v32;
            uint64_t v35 = a2;
            while (1)
            {
              std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(v34, a2);
              a2 += 120;
              BOOL v36 = v34 + 120 == v35;
              if (a2 == v18)
              {
                if (v34 + 120 == v35) {
                  goto LABEL_56;
                }
                a2 = v35 + 120;
                v34 += 240;
                while (1)
                {
                  std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(v34 - 120, v35);
                  BOOL v36 = v34 == v35;
                  if (a2 != v18) {
                    break;
                  }
                  BOOL v37 = v34 == v35;
                  v34 += 120;
                  if (v37) {
                    goto LABEL_56;
                  }
                }
              }
              else
              {
                v34 += 120;
              }
              if (v36) {
                uint64_t v35 = a2;
              }
            }
          }
          uint64_t v32 = a2;
LABEL_56:
          uint64_t v17 = v78;
          a7 = v79;
          uint64_t v26 = v77;
        }
      }
    }
    else
    {
      if (v7 >= 0) {
        uint64_t v16 = v7;
      }
      else {
        uint64_t v16 = v7 + 1;
      }
      uint64_t v17 = v16 >> 1;
      uint64_t v18 = a2 + 120 * (v16 >> 1);
      if (v13 == a2)
      {
        uint64_t v19 = a1 + v11;
        uint64_t v21 = a2;
      }
      else
      {
        uint64_t v19 = a1 + v11;
        unint64_t v20 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - a1 - v11) >> 3);
        uint64_t v21 = v13;
        do
        {
          unint64_t v22 = v20 >> 1;
          unint64_t v23 = v21 + 120 * (v20 >> 1);
          unsigned int v24 = *(unsigned __int16 *)(v23 + 112);
          uint64_t v25 = v23 + 120;
          v20 += ~(v20 >> 1);
          if (v24 < *(unsigned __int16 *)(v18 + 112)) {
            unint64_t v20 = v22;
          }
          else {
            uint64_t v21 = v25;
          }
        }
        while (v20);
      }
      uint64_t v26 = 0xEEEEEEEEEEEEEEEFLL * ((v21 - v19) >> 3);
      uint64_t v32 = v18;
      if (v21 != a2) {
        goto LABEL_37;
      }
    }
    a4 = -(v26 + v12);
    uint64_t v38 = v7 - v17;
    if (v26 + v17 >= v7 - (v26 + v17) - v12)
    {
      uint64_t v40 = v26;
      uint64_t v41 = -(v26 + v12);
      uint64_t v42 = v17;
      uint64_t v43 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v32, v18, v80, v41, v38, a6);
      a7 = v43;
      uint64_t v44 = v21;
      a4 = v40;
      a3 = v32;
      uint64_t v7 = v42;
      a1 = v13;
      a2 = v44;
      if (!v7) {
        return;
      }
    }
    else
    {
      uint64_t v39 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v13, v21, v32, v26, v17, a6);
      a7 = v39;
      a3 = v80;
      uint64_t v7 = v38;
      a1 = v32;
      a2 = v18;
      if (!v38) {
        return;
      }
    }
  }
  if (a4 <= v7)
  {
    if (a1 == a2) {
      return;
    }
    uint64_t v55 = a3;
    uint64_t v56 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = a6;
    do
    {
      uint64_t v58 = a1 + v56;
      uint64_t v59 = (void *)(a6 + v56);
      *uint64_t v59 = *(void *)(a1 + v56);
      *(void *)(a6 + v56 + 8) = a6 + v56 + 24;
      v59[2] = 0x600000000;
      if (*(_DWORD *)(a1 + v56 + 16)) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a6 + v56 + 8, v58 + 8);
      }
      uint64_t v60 = v59 + 11;
      v59[9] = v59 + 11;
      v59[10] = 0;
      uint64_t v61 = (uint64_t)(v59 + 9);
      if (*(_DWORD *)(v58 + 80)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v61, a1 + v56 + 72);
      }
      int v62 = (void *)(a6 + v56 + 104);
      *uint64_t v60 = v62;
      *(void *)(a6 + v56 + 96) = 0;
      if (*(_DWORD *)(v58 + 96)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v60, a1 + v56 + 88);
      }
      uint64_t v57 = *(void *)(v58 + 104);
      *(_WORD *)(a6 + v56 + 112) = *(_WORD *)(v58 + 112);
      *int v62 = v57;
      ++v47;
      v56 += 120;
    }
    while (v58 + 120 != a2);
    if (v56)
    {
      uint64_t v68 = a6 + v56;
      uint64_t v69 = a6;
      while (a2 != v55)
      {
        if (*(unsigned __int16 *)(v69 + 112) >= *(unsigned __int16 *)(a2 + 112))
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(a1, v69);
          v69 += 120;
          a1 += 120;
          if (v68 == v69) {
            goto LABEL_107;
          }
        }
        else
        {
          mlir::detail::PDLByteCode::MatchResult::operator=(a1, a2);
          a2 += 120;
          a1 += 120;
          if (v68 == v69) {
            goto LABEL_107;
          }
        }
      }
      uint64_t v72 = 0;
      do
      {
        mlir::detail::PDLByteCode::MatchResult::operator=(a1 + v72, v69 + v72);
        v72 += 120;
      }
      while (v68 - 120 != v69 + v72 - 120);
    }
  }
  else
  {
    if (a2 == a3) {
      return;
    }
    uint64_t v45 = a3;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = a6;
    do
    {
      unint64_t v50 = (void *)(a6 + v46);
      uint64_t v51 = a2 + v46;
      void *v50 = *(void *)(a2 + v46);
      *(void *)(a6 + v46 + 8) = a6 + v46 + 24;
      v50[2] = 0x600000000;
      if (*(_DWORD *)(a2 + v46 + 16)) {
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a6 + v46 + 8, v51 + 8);
      }
      uint64_t v52 = v50 + 11;
      v50[9] = v50 + 11;
      v50[10] = 0;
      uint64_t v53 = (uint64_t)(v50 + 9);
      if (*(_DWORD *)(v51 + 80)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=(v53, a2 + v46 + 72);
      }
      uint64_t v54 = (void *)(a6 + v46 + 104);
      void *v52 = v54;
      *(void *)(a6 + v46 + 96) = 0;
      if (*(_DWORD *)(v51 + 96)) {
        llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v52, a2 + v46 + 88);
      }
      uint64_t v49 = *(void *)(v51 + 104);
      *(_WORD *)(a6 + v46 + 112) = *(_WORD *)(v51 + 112);
      void *v54 = v49;
      ++v47;
      v46 += 120;
    }
    while (v51 + 120 != v45);
    if (v46)
    {
      uint64_t v63 = a6 + v46;
      uint64_t v64 = v45 - 120;
      while (a2 != a1)
      {
        unsigned int v65 = *(unsigned __int16 *)(a2 - 8);
        unsigned int v66 = *(unsigned __int16 *)(v63 - 8);
        if (v65 >= v66) {
          uint64_t v67 = v63 - 120;
        }
        else {
          uint64_t v67 = a2 - 120;
        }
        if (v65 >= v66) {
          v63 -= 120;
        }
        else {
          a2 -= 120;
        }
        mlir::detail::PDLByteCode::MatchResult::operator=(v64, v67);
        v64 -= 120;
        if (v63 == a6) {
          goto LABEL_107;
        }
      }
      uint64_t v70 = 0;
      do
      {
        uint64_t v71 = v64 + v70;
        v70 -= 120;
        mlir::detail::PDLByteCode::MatchResult::operator=(v71, v63 + v70);
      }
      while (v63 + v70 != a6);
    }
  }
LABEL_107:
  if (v48 && v47)
  {
    uint64_t v73 = (void *)(a6 + 104);
    do
    {
      uint64_t v74 = (void *)*(v73 - 2);
      if (v73 != v74) {
        free(v74);
      }
      unsigned int v75 = (char *)*(v73 - 4);
      if (v73 - 2 != (void *)v75) {
        free(v75);
      }
      unsigned int v76 = (char *)*(v73 - 12);
      if (v73 - 10 != (void *)v76) {
        free(v76);
      }
      v73 += 15;
      --v47;
    }
    while (v47);
  }
}

void std::swap[abi:nn180100]<mlir::detail::PDLByteCode::MatchResult>(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a1;
  v5[0] = v6;
  v5[1] = (void *)0x600000000;
  if (*(_DWORD *)(a1 + 16)) {
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v5, a1 + 8);
  }
  v7[0] = v8;
  v7[1] = 0;
  if (*(_DWORD *)(a1 + 80)) {
    llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v7, a1 + 72);
  }
  v8[0] = &v9;
  v8[1] = 0;
  if (*(_DWORD *)(a1 + 96)) {
    llvm::SmallVectorImpl<llvm::SMRange>::operator=((uint64_t)v8, a1 + 88);
  }
  uint64_t v9 = *(void *)(a1 + 104);
  __int16 v10 = *(_WORD *)(a1 + 112);
  mlir::detail::PDLByteCode::MatchResult::operator=(a1, a2);
  mlir::detail::PDLByteCode::MatchResult::operator=(a2, (uint64_t)&v4);
  if (v8[0] != &v9) {
    free(v8[0]);
  }
  if (v7[0] != v8) {
    free(v7[0]);
  }
  if (v5[0] != v6) {
    free(v5[0]);
  }
}

uint64_t mlir::detail::PDLByteCode::MatchResult::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  llvm::SmallVectorImpl<llvm::SMLoc>::operator=(a1 + 8, a2 + 8);
  if (a1 != a2)
  {
    uint64_t v5 = (int *)(a2 + 80);
    int v4 = *(_DWORD *)(a2 + 80);
    if (v4)
    {
      uint64_t v6 = *(void **)(a1 + 72);
      if (v6 != (void *)(a1 + 88))
      {
        free(v6);
        int v4 = *v5;
      }
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      int v7 = *(_DWORD *)(a2 + 84);
      *(_DWORD *)(a1 + 80) = v4;
      *(_DWORD *)(a1 + 84) = v7;
      *(void *)(a2 + 72) = a2 + 88;
      *(_DWORD *)(a2 + 84) = 0;
      *uint64_t v5 = 0;
      uint64_t v9 = (int *)(a2 + 96);
      int v8 = *(_DWORD *)(a2 + 96);
      if (v8) {
        goto LABEL_6;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 80) = 0;
      uint64_t v9 = (int *)(a2 + 96);
      int v8 = *(_DWORD *)(a2 + 96);
      if (v8)
      {
LABEL_6:
        __int16 v10 = *(void **)(a1 + 88);
        if (v10 != (void *)(a1 + 104))
        {
          free(v10);
          int v8 = *v9;
        }
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        int v11 = *(_DWORD *)(a2 + 100);
        *(_DWORD *)(a1 + 96) = v8;
        *(_DWORD *)(a1 + 100) = v11;
        *(void *)(a2 + 88) = a2 + 104;
        *(_DWORD *)(a2 + 100) = 0;
        goto LABEL_11;
      }
    }
    uint64_t v9 = (int *)(a1 + 96);
LABEL_11:
    int *v9 = 0;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  return a1;
}

mlir::FrozenRewritePatternSet *mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::FrozenRewritePatternSet *this)
{
  unsigned int v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unsigned int v2 = &unk_1EC9CFF70;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((void *)this + 1) = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  *(void *)this = v2 + 24;
  return this;
}

void mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5, uint64_t a6)
{
  v126[14] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (char *)operator new(0x68uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_1EC9CFF70;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(void *)(a1 + 8) = v12;
  *(_OWORD *)(v12 + 24) = 0u;
  *(void *)a1 = v12 + 24;
  unsigned int v122 = 0;
  uint64_t v123 = 0;
  int v124 = 0;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  unsigned int v121 = 0;
  if (a4)
  {
    uint64_t v13 = 24 * a4;
    do
    {
      LODWORD(v14) = *((char *)a3 + 23);
      uint64_t v15 = *a3;
      BOOL v16 = (v14 & 0x80000000) != 0;
      if ((v14 & 0x80000000) == 0) {
        uint64_t v15 = a3;
      }
      v125[0] = v15;
      unint64_t v14 = v14;
      if (v16) {
        unint64_t v14 = (unint64_t)a3[1];
      }
      v125[1] = (void *)v14;
      std::string __p = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v122, (uint64_t)v125, &__p) & 1) == 0)
      {
        uint64_t v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)&v122, (uint64_t)v125, (uint64_t)v125, __p);
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v125;
      }
      a3 += 3;
      v13 -= 24;
    }
    while (v13);
  }
  if (a6)
  {
    uint64_t v18 = 24 * a6;
    do
    {
      LODWORD(v19) = *((char *)a5 + 23);
      unint64_t v20 = *a5;
      BOOL v21 = (v19 & 0x80000000) != 0;
      if ((v19 & 0x80000000) == 0) {
        unint64_t v20 = a5;
      }
      v125[0] = v20;
      unint64_t v19 = v19;
      if (v21) {
        unint64_t v19 = (unint64_t)a5[1];
      }
      v125[1] = (void *)v19;
      std::string __p = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v119, (uint64_t)v125, &__p) & 1) == 0)
      {
        unint64_t v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)&v119, (uint64_t)v125, (uint64_t)v125, __p);
        *(_OWORD *)unint64_t v22 = *(_OWORD *)v125;
      }
      a5 += 3;
      v18 -= 24;
    }
    while (v18);
  }
  std::string __p = 0;
  BOOL v117 = 0;
  uint64_t v118 = 0;
  v115[0] = &__p;
  v115[1] = (void **)a1;
  unint64_t v23 = *(uint64_t **)(a2 + 8);
  unsigned int v24 = *(uint64_t **)(a2 + 16);
  uint64_t v107 = a2;
  if (v23 == v24)
  {
LABEL_108:
    uint64_t v85 = v107;
    uint64_t v86 = *(void *)(v107 + 32);
    uint64_t v114 = v86;
    if (v86)
    {
      v112[0] = *(llvm **)(v107 + 104);
      BOOL v87 = *(llvm **)(v107 + 112);
      *(void *)(v107 + 104) = 0;
      *(void *)(v107 + 112) = 0;
      int v113 = *(_DWORD *)(v107 + 120);
      *(_DWORD *)(v107 + 120) = 0;
      uint64_t v88 = v86 + 64;
      uint64_t v90 = *(unsigned int *)(v86 + 40);
      unint64_t v89 = *(unsigned int *)(v86 + 44);
      v112[1] = v87;
      v91.n128_f64[0] = mlir::Region::getOps<mlir::pdl::PatternOp>((mlir::Region *)(((v86 + 64 + 16 * ((v89 >> 23) & 1) + ((v89 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * v90), (uint64_t)v125);
      if (v126[0] != v126[8])
      {
        uint64_t v92 = *(void *)(((v88
                          + 16 * (((unint64_t)*(unsigned int *)(v86 + 44) >> 23) & 1)
                          + (((unint64_t)*(unsigned int *)(v86 + 44) >> 21) & 0x7F8)
                          + 7) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * *(unsigned int *)(v86 + 40)
                        + 8);
        if (v92) {
          uint64_t v93 = v92 - 8;
        }
        else {
          uint64_t v93 = 0;
        }
        uint64_t v94 = (mlir::GenericProgramPoint *)(v93 + 32);
        uint64_t v95 = *(mlir::GenericProgramPoint **)(v93 + 40);
        if (v95 != (mlir::GenericProgramPoint *)(v93 + 32))
        {
          do
          {
            uint64_t v96 = (mlir::GenericProgramPoint *)*((void *)v95 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v95);
            mlir::detail::walk<mlir::ForwardIterator>(v97, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<convertPDLToPDLInterp(mlir::ModuleOp,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet *,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet *>> &)::$_0>, (uint64_t)&v111, 1);
            uint64_t v95 = v96;
          }
          while (v96 != v94);
        }
        mlir::PassManager::PassManager(v125, *(void *)(v86 + 48), 1, v91);
        mlir::PassManager::enableVerifier((uint64_t)v125, 0);
        mlir::createPDLToPDLInterpPass((uint64_t)v112, &v109);
        uint64_t v98 = v109;
        unsigned int v109 = 0;
        uint64_t v110 = v98;
        mlir::OpPassManager::addPass((unsigned char **)v125, (uint64_t *)&v110);
        unint64_t v99 = v110;
        uint64_t v110 = 0;
        if (v99) {
          (*(void (**)(void *))(*(void *)v99 + 8))(v99);
        }
        BOOL v100 = v109;
        unsigned int v109 = 0;
        if (v100) {
          (*(void (**)(void *))(*(void *)v100 + 8))(v100);
        }
        if (!mlir::PassManager::run((mlir::PassManager *)v125, (mlir::Operation *)v86))
        {
          mlir::PassManager::~PassManager((mlir::PassManager *)v125);
          llvm::report_fatal_error((llvm *)"failed to lower PDL pattern module to the PDL Interpreter", (const char *)1);
        }
        uint64_t v101 = *(void *)(((v88
                           + 16 * (((unint64_t)*(unsigned int *)(v86 + 44) >> 23) & 1)
                           + (((unint64_t)*(unsigned int *)(v86 + 44) >> 21) & 0x7F8)
                           + 7) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *(unsigned int *)(v86 + 40)
                         + 8);
        if (v101) {
          uint64_t v102 = v101 - 8;
        }
        else {
          uint64_t v102 = 0;
        }
        uint64_t v103 = (mlir::GenericProgramPoint *)(v102 + 32);
        unint64_t v104 = *(mlir::GenericProgramPoint **)(v102 + 40);
        if (v104 != (mlir::GenericProgramPoint *)(v102 + 32))
        {
          do
          {
            BOOL v105 = (mlir::GenericProgramPoint *)*((void *)v104 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v104);
            mlir::detail::walk<mlir::ForwardIterator>(v106, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<convertPDLToPDLInterp(mlir::ModuleOp,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet *,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet *>> &)::$_0>, (uint64_t)&v111, 1);
            unint64_t v104 = v105;
          }
          while (v105 != v103);
        }
        mlir::PassManager::~PassManager((mlir::PassManager *)v125);
        uint64_t v85 = v107;
      }
      v125[0] = v126;
      v125[1] = (void *)0x600000000;
      if (*(_DWORD *)(v85 + 48)) {
        llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=((uint64_t)v125, v85 + 40);
      }
      llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>::StringMap((llvm::StringMapImpl *)&v110, (uint64_t *)(v85 + 128));
      llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>::StringMap((llvm::StringMapImpl *)&v109, (uint64_t *)(v85 + 152));
      std::make_unique[abi:nn180100]<mlir::detail::PDLByteCode,mlir::ModuleOp &,llvm::SmallVector<std::unique_ptr<mlir::PDLPatternConfigSet>,6u>,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet*,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet*>> &,llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>,llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>>(&v114, (uint64_t)v125, (uint64_t)v112, (uint64_t)&v110, (uint64_t)&v109);
    }
    if (__p)
    {
      BOOL v117 = __p;
      operator delete(__p);
    }
    llvm::deallocate_buffer(v119, (void *)(16 * v121));
  }
  uint64_t v108 = *(uint64_t **)(a2 + 16);
  while (1)
  {
    if (v120)
    {
      *(_OWORD *)long long v125 = *(_OWORD *)(*v23 + 64);
      v112[0] = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v119, (uint64_t)v125, v112) & 1) == 0)
      {
        uint64_t v26 = *(unsigned int *)(*v23 + 88);
        if (!v26) {
          goto LABEL_22;
        }
        unint64_t v27 = *(long long **)(*v23 + 80);
        uint64_t v28 = 16 * v26 - 16;
        do
        {
          long long v29 = *v27++;
          *(_OWORD *)long long v125 = v29;
          v112[0] = 0;
          int v30 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v119, (uint64_t)v125, v112);
          if (v30) {
            break;
          }
          uint64_t v31 = v28;
          v28 -= 16;
        }
        while (v31);
        if (!v30) {
          goto LABEL_22;
        }
      }
    }
    uint64_t v32 = *v23;
    if (v123)
    {
      *(_OWORD *)long long v125 = *(_OWORD *)(v32 + 64);
      v112[0] = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v122, (uint64_t)v125, v112))goto LABEL_22; {
      uint64_t v32 = *v23;
      }
      uint64_t v33 = *(unsigned int *)(*v23 + 88);
      if (v33)
      {
        uint64_t v34 = *(_OWORD **)(v32 + 80);
        uint64_t v35 = 16 * v33;
        do
        {
          *(_OWORD *)long long v125 = *v34;
          v112[0] = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v122, (uint64_t)v125, v112))goto LABEL_22; {
          ++v34;
          }
          v35 -= 16;
        }
        while (v35);
        uint64_t v32 = *v23;
      }
    }
    int v36 = *(_DWORD *)(v32 + 16);
    if (v36 == 1) {
      break;
    }
    if (v36 == 2)
    {
      v125[0] = *(void **)(v32 + 8);
      v125[1] = (void *)1;
      v112[0] = (llvm *)v125;
      uint64_t v47 = v23;
      uint64_t v48 = (unsigned int (*)(uint64_t, void))llvm::function_ref<BOOL ()(mlir::RegisteredOperationName)>::callback_fn<mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_3>;
    }
    else
    {
      if (*(_DWORD *)(*v23 + 16) != 3)
      {
        uint64_t v63 = *(void **)a1;
        uint64_t v64 = *(uint64_t **)(*(void *)a1 + 56);
        if ((unint64_t)v64 >= *(void *)(*(void *)a1 + 64))
        {
          unsigned int v66 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(v63 + 6, v23);
        }
        else
        {
          uint64_t v65 = *v23;
          uint64_t *v23 = 0;
          *uint64_t v64 = v65;
          unsigned int v66 = v64 + 1;
        }
        v63[7] = v66;
        goto LABEL_22;
      }
      v125[0] = *(void **)(*v23 + 8);
      v125[1] = (void *)1;
      v112[0] = (llvm *)v125;
      uint64_t v47 = v23;
      uint64_t v48 = (unsigned int (*)(uint64_t, void))llvm::function_ref<BOOL ()(mlir::RegisteredOperationName)>::callback_fn<mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_4>;
    }
    mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_0::operator()(v115, v47, v48, (uint64_t)v112);
LABEL_22:
    if (++v23 == v24) {
      goto LABEL_108;
    }
  }
  uint64_t v37 = *(void *)(v32 + 8);
  uint64_t v38 = *(_DWORD **)a1;
  unsigned int v39 = *(_DWORD *)(*(void *)a1 + 16);
  if (!v39) {
    goto LABEL_91;
  }
  uint64_t v40 = ((v37 >> 4) ^ (v37 >> 9)) & (v39 - 1);
  uint64_t v41 = (void *)(*(void *)v38 + 32 * v40);
  uint64_t v42 = *v41;
  if (v37 == *v41) {
    goto LABEL_59;
  }
  uint64_t v43 = 0;
  int v44 = 1;
  while (v42 != -4096)
  {
    if (v43) {
      BOOL v45 = 0;
    }
    else {
      BOOL v45 = v42 == -8192;
    }
    if (v45) {
      uint64_t v43 = v41;
    }
    int v46 = v40 + v44++;
    uint64_t v40 = v46 & (v39 - 1);
    uint64_t v41 = (void *)(*(void *)v38 + 32 * v40);
    uint64_t v42 = *v41;
    if (v37 == *v41) {
      goto LABEL_59;
    }
  }
  if (v43) {
    uint64_t v41 = v43;
  }
  int v76 = v38[2];
  if (4 * v76 + 4 < 3 * v39)
  {
    if (v39 + ~v76 - v38[3] > v39 >> 3)
    {
      uint64_t v49 = *v41;
      ++v38[2];
      if (v49 == -4096)
      {
LABEL_58:
        void *v41 = v37;
        v41[1] = 0;
        v41[2] = 0;
        v41[3] = 0;
        uint64_t v32 = *v23;
LABEL_59:
        uint64_t v51 = (uint64_t *)v41[2];
        unint64_t v50 = v41[3];
        if ((unint64_t)v51 < v50)
        {
          uint64_t *v51 = v32;
          v41[2] = v51 + 1;
          uint64_t v52 = *(void **)a1;
          uint64_t v53 = *(uint64_t **)(*(void *)a1 + 32);
          if ((unint64_t)v53 >= *(void *)(*(void *)a1 + 40)) {
            goto LABEL_85;
          }
LABEL_21:
          uint64_t v25 = *v23;
          uint64_t *v23 = 0;
          uint64_t *v53 = v25;
          v52[4] = v53 + 1;
          goto LABEL_22;
        }
        uint64_t v54 = a1;
        uint64_t v55 = (char *)v41[1];
        uint64_t v56 = ((char *)v51 - v55) >> 3;
        unint64_t v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 61) {
          abort();
        }
        uint64_t v58 = v50 - (void)v55;
        if (v58 >> 2 > v57) {
          unint64_t v57 = v58 >> 2;
        }
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v57;
        }
        if (v59)
        {
          if (v59 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v60 = (char *)operator new(8 * v59);
          uint64_t v61 = (uint64_t *)&v60[8 * v56];
          *uint64_t v61 = v32;
          uint64_t v62 = (uint64_t)(v61 + 1);
          if (v51 == (uint64_t *)v55)
          {
LABEL_82:
            v41[1] = v61;
            v41[2] = v62;
            v41[3] = &v60[8 * v59];
            a1 = v54;
            if (v51) {
              operator delete(v51);
            }
            unsigned int v24 = v108;
            v41[2] = v62;
            uint64_t v52 = *(void **)a1;
            uint64_t v53 = *(uint64_t **)(*(void *)a1 + 32);
            if ((unint64_t)v53 >= *(void *)(*(void *)a1 + 40))
            {
LABEL_85:
              v52[4] = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(v52 + 3, v23);
              goto LABEL_22;
            }
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v60 = 0;
          uint64_t v61 = (uint64_t *)(8 * v56);
          *(void *)(8 * v56) = v32;
          uint64_t v62 = 8 * v56 + 8;
          if (v51 == (uint64_t *)v55) {
            goto LABEL_82;
          }
        }
        unint64_t v67 = (char *)(v51 - 1) - v55;
        if (v67 < 0x58) {
          goto LABEL_137;
        }
        if ((unint64_t)(v55 - v60) < 0x20) {
          goto LABEL_137;
        }
        uint64_t v68 = (v67 >> 3) + 1;
        uint64_t v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v70 = &v51[v69 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v61 = (uint64_t *)((char *)v61 - v69);
        uint64_t v71 = &v60[8 * v56 - 16];
        uint64_t v72 = v51 - 2;
        uint64_t v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v74 = *(_OWORD *)v72;
          *((_OWORD *)v71 - 1) = *((_OWORD *)v72 - 1);
          *(_OWORD *)uint64_t v71 = v74;
          v71 -= 32;
          v72 -= 4;
          v73 -= 4;
        }
        while (v73);
        uint64_t v51 = v70;
        if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_137:
          do
          {
            uint64_t v75 = *--v51;
            *--uint64_t v61 = v75;
          }
          while (v51 != (uint64_t *)v55);
        }
        uint64_t v51 = (uint64_t *)v41[1];
        goto LABEL_82;
      }
LABEL_57:
      --v38[3];
      goto LABEL_58;
    }
  }
  else
  {
LABEL_91:
    v39 *= 2;
  }
  llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow(*(void *)a1, v39);
  int v77 = v38[4] - 1;
  uint64_t v78 = v77 & ((v37 >> 4) ^ (v37 >> 9));
  uint64_t v41 = (void *)(*(void *)v38 + 32 * v78);
  uint64_t v79 = *v41;
  if (v37 == *v41)
  {
LABEL_93:
    ++v38[2];
    if (v37 == -4096) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v80 = 0;
    int v81 = 1;
    while (v79 != -4096)
    {
      if (v80) {
        BOOL v82 = 0;
      }
      else {
        BOOL v82 = v79 == -8192;
      }
      if (v82) {
        uint64_t v80 = v41;
      }
      int v83 = v78 + v81++;
      uint64_t v78 = v83 & v77;
      uint64_t v41 = (void *)(*(void *)v38 + 32 * v78);
      uint64_t v79 = *v41;
      if (v37 == *v41) {
        goto LABEL_93;
      }
    }
    if (v80) {
      uint64_t v41 = v80;
    }
    uint64_t v84 = *v41;
    ++v38[2];
    if (v84 == -4096) {
      goto LABEL_58;
    }
  }
  goto LABEL_57;
}

void *mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_0::operator()(void ***a1, uint64_t *a2, unsigned int (*a3)(uint64_t, void), uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = (uint64_t *)a1[1];
  int v8 = **a1;
  int v7 = (*a1)[1];
  uint64_t v63 = v6;
  if (v8 != v7)
  {
    uint64_t v9 = a3;
LABEL_8:
    uint64_t v65 = v7;
    while (1)
    {
      uint64_t v20 = *v8;
      if (!v9(v4, *v8)) {
        goto LABEL_11;
      }
      uint64_t v21 = *v6;
      unsigned int v22 = *(_DWORD *)(*v6 + 16);
      if (!v22) {
        goto LABEL_55;
      }
      uint64_t v23 = (v22 - 1) & ((v20 >> 4) ^ (v20 >> 9));
      unsigned int v24 = (void *)(*(void *)v21 + 32 * v23);
      uint64_t v25 = *v24;
      if (*v24 == v20) {
        goto LABEL_30;
      }
      uint64_t v26 = 0;
      int v27 = 1;
      while (v25 != -4096)
      {
        if (v26) {
          BOOL v28 = 0;
        }
        else {
          BOOL v28 = v25 == -8192;
        }
        if (v28) {
          uint64_t v26 = v24;
        }
        int v29 = v23 + v27++;
        uint64_t v23 = v29 & (v22 - 1);
        unsigned int v24 = (void *)(*(void *)v21 + 32 * v23);
        uint64_t v25 = *v24;
        if (*v24 == v20) {
          goto LABEL_30;
        }
      }
      if (v26) {
        unsigned int v24 = v26;
      }
      int v50 = *(_DWORD *)(v21 + 8);
      if (4 * v50 + 4 < 3 * v22)
      {
        if (v22 + ~v50 - *(_DWORD *)(v21 + 12) > v22 >> 3) {
          goto LABEL_26;
        }
      }
      else
      {
LABEL_55:
        v22 *= 2;
      }
      llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow(*v6, v22);
      int v51 = *(_DWORD *)(v21 + 16) - 1;
      uint64_t v52 = v51 & ((v20 >> 4) ^ (v20 >> 9));
      unsigned int v24 = (void *)(*(void *)v21 + 32 * v52);
      uint64_t v53 = *v24;
      if (*v24 == v20)
      {
        uint64_t v30 = v20;
        goto LABEL_27;
      }
      uint64_t v54 = 0;
      int v55 = 1;
      while (v53 != -4096)
      {
        if (v54) {
          BOOL v56 = 0;
        }
        else {
          BOOL v56 = v53 == -8192;
        }
        if (v56) {
          uint64_t v54 = v24;
        }
        int v57 = v52 + v55++;
        uint64_t v52 = v57 & v51;
        unsigned int v24 = (void *)(*(void *)v21 + 32 * v52);
        uint64_t v53 = *v24;
        uint64_t v30 = v20;
        uint64_t v4 = a4;
        uint64_t v6 = v63;
        uint64_t v9 = a3;
        if (*v24 == v20) {
          goto LABEL_27;
        }
      }
      if (v54) {
        unsigned int v24 = v54;
      }
      uint64_t v4 = a4;
      uint64_t v6 = v63;
      uint64_t v9 = a3;
LABEL_26:
      uint64_t v30 = *v24;
LABEL_27:
      ++*(_DWORD *)(v21 + 8);
      if (v30 != -4096) {
        --*(_DWORD *)(v21 + 12);
      }
      void *v24 = v20;
      v24[1] = 0;
      unint64_t v24[2] = 0;
      v24[3] = 0;
LABEL_30:
      uint64_t v31 = *a2;
      uint64_t v33 = (uint64_t *)v24[2];
      unint64_t v32 = v24[3];
      if ((unint64_t)v33 < v32)
      {
        *uint64_t v33 = v31;
        uint64_t v19 = (uint64_t)(v33 + 1);
        goto LABEL_10;
      }
      uint64_t v34 = (char *)v24[1];
      uint64_t v35 = ((char *)v33 - v34) >> 3;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61) {
        goto LABEL_76;
      }
      uint64_t v37 = v32 - (void)v34;
      if (v37 >> 2 > v36) {
        unint64_t v36 = v37 >> 2;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        if (v38 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unsigned int v39 = (char *)operator new(8 * v38);
        uint64_t v40 = (uint64_t *)&v39[8 * v35];
        *uint64_t v40 = v31;
        uint64_t v19 = (uint64_t)(v40 + 1);
        if (v33 == (uint64_t *)v34)
        {
LABEL_43:
          uint64_t v4 = a4;
          uint64_t v6 = v63;
          v24[1] = v40;
          unint64_t v24[2] = v19;
          v24[3] = &v39[8 * v38];
          uint64_t v9 = a3;
          if (!v33) {
            goto LABEL_10;
          }
LABEL_51:
          operator delete(v33);
          goto LABEL_10;
        }
      }
      else
      {
        unsigned int v39 = 0;
        uint64_t v40 = (uint64_t *)(8 * v35);
        *(void *)(8 * v35) = v31;
        uint64_t v19 = 8 * v35 + 8;
        if (v33 == (uint64_t *)v34) {
          goto LABEL_43;
        }
      }
      unint64_t v41 = (char *)(v33 - 1) - v34;
      if (v41 < 0x58)
      {
        uint64_t v6 = v63;
        do
        {
LABEL_49:
          uint64_t v49 = *--v33;
          *--uint64_t v40 = v49;
        }
        while (v33 != (uint64_t *)v34);
        goto LABEL_50;
      }
      uint64_t v6 = v63;
      if ((unint64_t)(v34 - v39) < 0x20) {
        goto LABEL_49;
      }
      uint64_t v42 = (v41 >> 3) + 1;
      uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      int v44 = &v33[v43 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v40 = (uint64_t *)((char *)v40 - v43);
      BOOL v45 = &v39[8 * v35 - 16];
      int v46 = v33 - 2;
      uint64_t v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v48 = *(_OWORD *)v46;
        *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
        *(_OWORD *)BOOL v45 = v48;
        v45 -= 32;
        v46 -= 4;
        v47 -= 4;
      }
      while (v47);
      uint64_t v33 = v44;
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_49;
      }
LABEL_50:
      uint64_t v33 = (uint64_t *)v24[1];
      v24[1] = v40;
      unint64_t v24[2] = v19;
      v24[3] = &v39[8 * v38];
      uint64_t v4 = a4;
      uint64_t v9 = a3;
      if (v33) {
        goto LABEL_51;
      }
LABEL_10:
      unint64_t v24[2] = v19;
      int v7 = v65;
LABEL_11:
      if (++v8 == v7) {
        goto LABEL_70;
      }
    }
  }
  uint64_t RegisteredOperations = mlir::MLIRContext::getRegisteredOperations((mlir::MLIRContext *)(*(void *)(*a2 + 24) & 0xFFFFFFFFFFFFFFF8));
  if (v12)
  {
    uint64_t v13 = v12;
    if (v12 < 0) {
LABEL_76:
    }
      abort();
    unint64_t v14 = (const void *)RegisteredOperations;
    uint64_t v15 = (char *)operator new(8 * v12);
    BOOL v16 = &v15[8 * v13];
    memcpy(v15, v14, 8 * v13);
    uint64_t v4 = a4;
    uint64_t v6 = v63;
    uint64_t v17 = *a1;
    uint64_t v18 = **a1;
    if (v18) {
      goto LABEL_6;
    }
  }
  else
  {
    BOOL v16 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = *a1;
    uint64_t v18 = **a1;
    if (v18)
    {
LABEL_6:
      v17[1] = v18;
      operator delete(v18);
    }
  }
  void *v17 = v15;
  v17[1] = v16;
  void v17[2] = v16;
  int v8 = **a1;
  int v7 = (*a1)[1];
  uint64_t v9 = a3;
  if (v8 != v7) {
    goto LABEL_8;
  }
LABEL_70:
  uint64_t v58 = *v6;
  unint64_t v59 = *(uint64_t **)(*v6 + 32);
  if ((unint64_t)v59 >= *(void *)(*v6 + 40))
  {
    uint64_t result = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>((void *)(v58 + 24), a2);
  }
  else
  {
    uint64_t v60 = *a2;
    *a2 = 0;
    *unint64_t v59 = v60;
    uint64_t result = v59 + 1;
  }
  *(void *)(v58 + 32) = result;
  return result;
}

void std::make_unique[abi:nn180100]<mlir::detail::PDLByteCode,mlir::ModuleOp &,llvm::SmallVector<std::unique_ptr<mlir::PDLPatternConfigSet>,6u>,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet*,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet*>> &,llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>,llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v17[6] = *MEMORY[0x1E4F143B8];
  __int16 v10 = operator new(0xED8uLL);
  uint64_t v11 = *a1;
  v16[0] = v17;
  v16[1] = (void *)0x600000000;
  if (*(_DWORD *)(a2 + 8)) {
    llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=((uint64_t)v16, a2);
  }
  unint64_t v14 = *(void **)a4;
  long long v15 = *(_OWORD *)(a4 + 8);
  *(_DWORD *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v12 = *(void **)a5;
  long long v13 = *(_OWORD *)(a5 + 8);
  *(_DWORD *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  mlir::detail::PDLByteCode::PDLByteCode(v10, v11, v16, a3, &v14, &v12);
}

void mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet(mlir::FrozenRewritePatternSet *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    unint64_t v14 = 0;
    uint64_t result = 0;
    goto LABEL_70;
  }
  uint64_t v6 = *a1;
  Hashuint64_t Value = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(void **)a2, *(void *)(a2 + 8));
  unsigned int v8 = v4 - 1;
  uint64_t v9 = *(void **)a2;
  size_t v10 = *(void *)(a2 + 8);
  if (!v10)
  {
    if (v9 == (void *)-2)
    {
      uint64_t v11 = 0;
      int v19 = 1;
      int v20 = HashValue & v8;
      unint64_t v14 = (void *)(v6 + 16 * (HashValue & v8));
      uint64_t v21 = (const void *)*v14;
      if (*v14 == -1) {
        goto LABEL_21;
      }
LABEL_19:
      if (v21 != (const void *)-2 && v14[1])
      {
LABEL_21:
        while (v21 != (const void *)-1)
        {
          if (v11) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v21 == (const void *)-2;
          }
          if (v22) {
            uint64_t v11 = v14;
          }
          int v23 = v19 + v20;
          ++v19;
          int v20 = v23 & v8;
          unint64_t v14 = (void *)(v6 + 16 * (v23 & v8));
          uint64_t v21 = (const void *)*v14;
          if (*v14 != -1) {
            goto LABEL_19;
          }
        }
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v11 = 0;
      int v31 = 1;
      int v32 = HashValue & v8;
      unint64_t v14 = (void *)(v6 + 16 * (HashValue & v8));
      uint64_t v33 = *v14;
      if (*v14 == -2) {
        goto LABEL_47;
      }
LABEL_43:
      if (v33 == -1)
      {
        if (v9 != (void *)-1)
        {
LABEL_47:
          while (v33 != -1)
          {
            if (v11) {
              BOOL v34 = 0;
            }
            else {
              BOOL v34 = v33 == -2;
            }
            if (v34) {
              uint64_t v11 = v14;
            }
            int v35 = v31 + v32;
            ++v31;
            int v32 = v35 & v8;
            unint64_t v14 = (void *)(v6 + 16 * (v35 & v8));
            uint64_t v33 = *v14;
            if (*v14 != -2) {
              goto LABEL_43;
            }
          }
          goto LABEL_66;
        }
      }
      else if (v14[1])
      {
        goto LABEL_47;
      }
    }
    goto LABEL_69;
  }
  if (v9 != (void *)-2)
  {
    if (v9 != (void *)-1)
    {
      __s1 = v9;
      uint64_t v11 = 0;
      int v36 = 1;
      int v37 = HashValue & v8;
      unint64_t v14 = (void *)(v6 + 16 * (HashValue & v8));
      unint64_t v38 = (const void *)*v14;
      if (*v14 <= 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_63;
      }
      while (v38 != (const void *)-1)
      {
        if (v11) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v38 == (const void *)-2;
        }
        if (v39) {
          uint64_t v11 = v14;
        }
        int v40 = v36 + v37;
        ++v36;
        int v37 = v40 & v8;
        unint64_t v14 = (void *)(v6 + 16 * (v40 & v8));
        unint64_t v38 = (const void *)*v14;
        if (*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_63:
          if (v10 == v14[1] && !memcmp(__s1, v38, v10)) {
            goto LABEL_69;
          }
        }
      }
      goto LABEL_66;
    }
    uint64_t v11 = 0;
    int v24 = 1;
    int v25 = HashValue & v8;
    unint64_t v14 = (void *)(v6 + 16 * (HashValue & v8));
    uint64_t v26 = (const void *)*v14;
    if (*v14 == -2) {
      goto LABEL_34;
    }
LABEL_31:
    if (v26 != (const void *)-1)
    {
      if (v10 != v14[1] || (int v27 = v24, v28 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v26, v10), v24 = v27, v28))
      {
LABEL_34:
        while (v26 != (const void *)-1)
        {
          if (v11) {
            BOOL v29 = 0;
          }
          else {
            BOOL v29 = v26 == (const void *)-2;
          }
          if (v29) {
            uint64_t v11 = v14;
          }
          int v30 = v24 + v25;
          ++v24;
          int v25 = v30 & v8;
          unint64_t v14 = (void *)(v6 + 16 * (v30 & v8));
          uint64_t v26 = (const void *)*v14;
          if (*v14 != -2) {
            goto LABEL_31;
          }
        }
        goto LABEL_66;
      }
    }
LABEL_69:
    uint64_t result = 1;
    goto LABEL_70;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  int v13 = HashValue & v8;
  unint64_t v14 = (void *)(v6 + 16 * (HashValue & v8));
  long long v15 = (const void *)*v14;
  if (*v14 == -1) {
    goto LABEL_8;
  }
LABEL_5:
  if (v15 == (const void *)-2 || v10 == v14[1] && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v15, v10)) {
    goto LABEL_69;
  }
LABEL_8:
  while (v15 != (const void *)-1)
  {
    if (v11) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v15 == (const void *)-2;
    }
    if (v16) {
      uint64_t v11 = v14;
    }
    int v17 = v12 + v13;
    ++v12;
    int v13 = v17 & v8;
    unint64_t v14 = (void *)(v6 + 16 * (v17 & v8));
    long long v15 = (const void *)*v14;
    if (*v14 != -1) {
      goto LABEL_5;
    }
  }
LABEL_66:
  uint64_t result = 0;
  if (v11) {
    unint64_t v14 = v11;
  }
LABEL_70:
  *a3 = v14;
  return result;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<convertPDLToPDLInterp(mlir::ModuleOp,llvm::DenseMap<mlir::Operation *,mlir::PDLPatternConfigSet *,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::PDLPatternConfigSet *>> &)::$_0>(uint64_t a1, mlir::Operation *a2)
{
  if (mlir::isOpTriviallyDead((void ***)a2, a2))
  {
    mlir::Operation::erase(a2);
  }
}

llvm::StringMapImpl *llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>::StringMap(llvm::StringMapImpl *this, uint64_t *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0x2800000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this, *((_DWORD *)a2 + 2));
    uint64_t v4 = *(void *)this;
    uint64_t v5 = *((unsigned int *)this + 2);
    uint64_t v6 = *a2;
    *(void *)((char *)this + 12) = *(uint64_t *)((char *)a2 + 12);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v19 = v4 + 8 * v5 + 8;
      uint64_t v8 = v6 + 8 * v5 + 8;
      do
      {
        while (1)
        {
          uint64_t v9 = *(size_t **)(*a2 + 8 * v7);
          if (v9 && v9 + 1 != 0) {
            break;
          }
          *(void *)(*(void *)this + 8 * v7++) = v9;
          if (v5 == v7) {
            return this;
          }
        }
        int v12 = v9 + 1;
        size_t v11 = *v9;
        buffer = llvm::allocate_buffer(*v9 + 41, (std::align_val_t)8uLL);
        unint64_t v14 = buffer;
        long long v15 = (char *)(buffer + 5);
        if (v11) {
          memcpy(buffer + 5, v9 + 5, v11);
        }
        v15[v11] = 0;
        *unint64_t v14 = v11;
        BOOL v16 = v14 + 1;
        size_t v17 = v9[4];
        if (v17)
        {
          if ((size_t *)v17 == v12)
          {
            uint64_t v14[4] = (size_t)v16;
            (*(void (**)(size_t *))(*v12 + 24))(v9 + 1);
          }
          else
          {
            uint64_t v14[4] = (*(uint64_t (**)(size_t, void *))(*(void *)v17 + 16))(v17, v16);
          }
        }
        else
        {
          uint64_t v14[4] = 0;
        }
        *(void *)(*(void *)this + 8 * v7) = v14;
        *(_DWORD *)(v19 + 4 * v7) = *(_DWORD *)(v8 + 4 * v7);
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

llvm::StringMapImpl *llvm::StringMap<std::function<mlir::LogicalResult ()(mlir::PatternRewriter &,mlir::PDLResultList &,llvm::ArrayRef<mlir::PDLValue>)>,llvm::MallocAllocator>::StringMap(llvm::StringMapImpl *this, uint64_t *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0x2800000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this, *((_DWORD *)a2 + 2));
    uint64_t v4 = *(void *)this;
    uint64_t v5 = *((unsigned int *)this + 2);
    uint64_t v6 = *a2;
    *(void *)((char *)this + 12) = *(uint64_t *)((char *)a2 + 12);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v19 = v4 + 8 * v5 + 8;
      uint64_t v8 = v6 + 8 * v5 + 8;
      do
      {
        while (1)
        {
          uint64_t v9 = *(size_t **)(*a2 + 8 * v7);
          if (v9 && v9 + 1 != 0) {
            break;
          }
          *(void *)(*(void *)this + 8 * v7++) = v9;
          if (v5 == v7) {
            return this;
          }
        }
        int v12 = v9 + 1;
        size_t v11 = *v9;
        buffer = llvm::allocate_buffer(*v9 + 41, (std::align_val_t)8uLL);
        unint64_t v14 = buffer;
        long long v15 = (char *)(buffer + 5);
        if (v11) {
          memcpy(buffer + 5, v9 + 5, v11);
        }
        v15[v11] = 0;
        *unint64_t v14 = v11;
        BOOL v16 = v14 + 1;
        size_t v17 = v9[4];
        if (v17)
        {
          if ((size_t *)v17 == v12)
          {
            uint64_t v14[4] = (size_t)v16;
            (*(void (**)(size_t *))(*v12 + 24))(v9 + 1);
          }
          else
          {
            uint64_t v14[4] = (*(uint64_t (**)(size_t, void *))(*(void *)v17 + 16))(v17, v16);
          }
        }
        else
        {
          uint64_t v14[4] = 0;
        }
        *(void *)(*(void *)this + 8 * v7) = v14;
        *(_DWORD *)(v19 + 4 * v7) = *(_DWORD *)(v8 + 4 * v7);
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

void std::__shared_ptr_emplace<mlir::FrozenRewritePatternSet::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9CFF70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::FrozenRewritePatternSet::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9CFF70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<mlir::FrozenRewritePatternSet::Impl>::__on_zero_shared(uint64_t a1)
{
}

void mlir::FrozenRewritePatternSet::Impl::~Impl(mlir::FrozenRewritePatternSet::Impl *this)
{
  unsigned int v2 = (mlir::detail::PDLByteCode *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2)
  {
    mlir::detail::PDLByteCode::~PDLByteCode(v2);
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 6);
  if (v4)
  {
    uint64_t v5 = (void *)*((void *)this + 7);
    uint64_t v6 = (void *)*((void *)this + 6);
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = *--v5;
        uint64_t v7 = v8;
        *uint64_t v5 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      while (v5 != v4);
      uint64_t v6 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v4;
    operator delete(v6);
  }
  uint64_t v9 = (void *)*((void *)this + 3);
  if (v9)
  {
    size_t v10 = (void *)*((void *)this + 4);
    size_t v11 = (void *)*((void *)this + 3);
    if (v10 != v9)
    {
      do
      {
        uint64_t v13 = *--v10;
        uint64_t v12 = v13;
        *size_t v10 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
      }
      while (v10 != v9);
      size_t v11 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v9;
    operator delete(v11);
  }
  uint64_t v14 = *((unsigned int *)this + 4);
  long long v15 = *(llvm **)this;
  if (v14)
  {
    BOOL v16 = (void *)((char *)v15 + 16);
    uint64_t v17 = 32 * v14;
    do
    {
      if ((*(v16 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v18 = (void *)*(v16 - 1);
        if (v18)
        {
          *BOOL v16 = v18;
          operator delete(v18);
        }
      }
      v16 += 4;
      v17 -= 32;
    }
    while (v17);
    long long v15 = *(llvm **)this;
    uint64_t v19 = (void *)(32 * *((unsigned int *)this + 4));
  }
  else
  {
    uint64_t v19 = 0;
  }
  llvm::deallocate_buffer(v15, v19);
}

uint64_t sub_1806DE950()
{
  return v0;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(a1, v7);
    uint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  size_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      unint64_t v12 = (v11 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v12 < 3) {
        goto LABEL_10;
      }
      unint64_t v13 = v12 + 1;
      size_t v10 = &result[v13 & 0x1FFFFFFFFFFFFFFCLL];
      uint64_t v14 = result + 2;
      uint64_t v15 = v13 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        *(v14 - 2) = xmmword_1810FFA60;
        *(v14 - 1) = xmmword_1810FFA60;
        *uint64_t v14 = xmmword_1810FFA60;
        v14[1] = xmmword_1810FFA60;
        v14 += 4;
        v15 -= 4;
      }
      while (v15);
      if (v13 != (v13 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        BOOL v16 = &result[v11];
        do
          *v10++ = xmmword_1810FFA60;
        while (v10 != v16);
      }
    }
    uint64_t v17 = (void *)(16 * v3);
    if (v3)
    {
      uint64_t v18 = 16 * v3;
      uint64_t v19 = v4;
      do
      {
        if (*(void *)v19 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v26 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v19, &v26);
          *uint64_t v26 = *(_OWORD *)v19;
          ++*(_DWORD *)(a1 + 8);
        }
        uint64_t v19 = (llvm *)((char *)v19 + 16);
        v18 -= 16;
      }
      while (v18);
    }
    llvm::deallocate_buffer(v4, v17);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  if (v20)
  {
    unint64_t v21 = (v20 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v21 < 3) {
      goto LABEL_23;
    }
    unint64_t v22 = v21 + 1;
    size_t v10 = &result[v22 & 0x1FFFFFFFFFFFFFFCLL];
    int v23 = result + 2;
    uint64_t v24 = v22 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v23 - 2) = xmmword_1810FFA60;
      *(v23 - 1) = xmmword_1810FFA60;
      _OWORD *v23 = xmmword_1810FFA60;
      v23[1] = xmmword_1810FFA60;
      v23 += 4;
      v24 -= 4;
    }
    while (v24);
    if (v22 != (v22 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      int v25 = &result[v20];
      do
        *v10++ = xmmword_1810FFA60;
      while (v10 != v25);
    }
  }
  return result;
}

void *llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  size_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      size_t v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      unint64_t v13 = result + 4;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *unint64_t v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        uint64_t v15 = &result[4 * v11];
        do
        {
          *size_t v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      BOOL v16 = v4;
      do
      {
        uint64_t v23 = *(void *)v16;
        if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v24 = *(_DWORD *)(a1 + 16) - 1;
          uint64_t v25 = v24 & ((v23 >> 4) ^ (v23 >> 9));
          unint64_t v22 = (void *)(*(void *)a1 + 32 * v25);
          uint64_t v26 = *v22;
          if (v23 != *v22)
          {
            int v27 = 0;
            int v28 = 1;
            while (v26 != -4096)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -8192;
              }
              if (v29) {
                int v27 = v22;
              }
              int v30 = v25 + v28++;
              uint64_t v25 = v30 & v24;
              unint64_t v22 = (void *)(*(void *)a1 + 32 * v25);
              uint64_t v26 = *v22;
              if (v23 == *v22) {
                goto LABEL_24;
              }
            }
            if (v27) {
              unint64_t v22 = v27;
            }
          }
LABEL_24:
          void *v22 = v23;
          v22[1] = 0;
          void v22[2] = 0;
          unsigned char v22[3] = 0;
          *(_OWORD *)(v22 + 1) = *(_OWORD *)((char *)v16 + 8);
          unsigned char v22[3] = *((void *)v16 + 3);
          *((void *)v16 + 1) = 0;
          *((void *)v16 + 2) = 0;
          *((void *)v16 + 3) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        BOOL v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    size_t v10 = &result[4 * (v18 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v19 = result + 4;
    uint64_t v20 = v18 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 4) = -4096;
      *uint64_t v19 = -4096;
      v19 += 8;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_19:
      unint64_t v21 = &result[4 * v17];
      do
      {
        *size_t v10 = -4096;
        v10 += 4;
      }
      while (v10 != v21);
    }
  }
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::RegisteredOperationName)>::callback_fn<mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_3>(unint64_t **a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 40);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = **a1;
  uint64_t v4 = *(void **)(a2 + 32);
  unint64_t v5 = &v4[2 * v2];
  do
  {
    unint64_t v6 = v2 >> 1;
    int v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unsigned int v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  return v4 != v5 && *v4 == v3 && v4[1] != 0;
}

uint64_t llvm::function_ref<BOOL ()(mlir::RegisteredOperationName)>::callback_fn<mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(mlir::RewritePatternSet &&,llvm::ArrayRef<std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>>,std::basic_string<char,llvm::ArrayRef::char_traits<char>,llvm::ArrayRef::allocator<char>>)::$_4>(void **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 32))(a2, **a1);
}

void mlir::detail::PDLByteCode::~PDLByteCode(mlir::detail::PDLByteCode *this)
{
  unint64_t v2 = (void *)*((void *)this + 470);
  if (v2)
  {
    unint64_t v3 = (void *)*((void *)this + 471);
    uint64_t v4 = (void *)*((void *)this + 470);
    if (v3 != v2)
    {
      unint64_t v5 = v3 - 4;
      unint64_t v6 = v3 - 4;
      do
      {
        unsigned int v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      uint64_t v4 = (void *)*((void *)this + 470);
    }
    *((void *)this + 471) = v2;
    operator delete(v4);
  }
  unint64_t v9 = (void *)*((void *)this + 467);
  if (v9)
  {
    size_t v10 = (void *)*((void *)this + 468);
    uint64_t v11 = (void *)*((void *)this + 467);
    if (v10 != v9)
    {
      uint64_t v12 = v10 - 4;
      unint64_t v13 = v10 - 4;
      do
      {
        uint64_t v14 = (void *)v13[3];
        if (v13 == v14)
        {
          (*(void (**)(void *))(*v13 + 32))(v13);
        }
        else if (v14)
        {
          (*(void (**)(void *))(*v14 + 40))(v14);
        }
        v12 -= 4;
        BOOL v7 = v13 == v9;
        v13 -= 4;
      }
      while (!v7);
      uint64_t v11 = (void *)*((void *)this + 467);
    }
    *((void *)this + 468) = v9;
    operator delete(v11);
  }
  uint64_t v15 = (char *)*((void *)this + 49);
  unsigned int v16 = *((_DWORD *)this + 100);
  if (v16)
  {
    uint64_t v17 = 104 * v16;
    do
    {
      uint64_t v18 = &v15[v17];
      uint64_t v19 = *(char **)&v15[v17 - 32];
      if (&v15[v17 - 16] != v19) {
        free(v19);
      }
      uint64_t v20 = (char *)*((void *)v18 - 10);
      if (v18 - 64 != v20) {
        free(v20);
      }
      v17 -= 104;
    }
    while (v17);
    uint64_t v15 = (char *)*((void *)this + 49);
  }
  if (v15 != (char *)this + 408) {
    free(v15);
  }
  unint64_t v21 = (char *)*((void *)this + 30);
  if (v21 != (char *)this + 264) {
    free(v21);
  }
  unint64_t v22 = (char *)*((void *)this + 11);
  if (v22 != (char *)this + 112) {
    free(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 8);
  if (v23)
  {
    *((void *)this + 9) = v23;
    operator delete(v23);
  }
  int v24 = *(char **)this;
  uint64_t v25 = *((unsigned int *)this + 2);
  if (v25)
  {
    uint64_t v26 = &v24[8 * v25];
    do
    {
      int v28 = (unsigned int *)*((void *)v26 - 1);
      v26 -= 8;
      int v27 = v28;
      *(void *)uint64_t v26 = 0;
      if (v28)
      {
        BOOL v29 = *(unsigned int **)v27;
        uint64_t v30 = v27[2];
        if (v30)
        {
          uint64_t v31 = 8 * v30;
          int v32 = (char *)(v29 - 2);
          do
          {
            uint64_t v33 = *(void *)&v32[v31];
            *(void *)&v32[v31] = 0;
            if (v33) {
              (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
            }
            v31 -= 8;
          }
          while (v31);
          BOOL v29 = *(unsigned int **)v27;
        }
        if (v29 != v27 + 4) {
          free(v29);
        }
        operator delete(v27);
      }
    }
    while (v26 != v24);
    int v24 = *(char **)this;
  }
  if (v24 != (char *)this + 16) {
    free(v24);
  }
}

mlir::PatternApplicator *mlir::PatternApplicator::PatternApplicator(mlir::PatternApplicator *this, const mlir::FrozenRewritePatternSet *a2)
{
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = a2;
  *((void *)this + 4) = (char *)this + 48;
  *((void *)this + 5) = 0x100000000;
  *((void *)this + 7) = 0;
  unint64_t v3 = *(mlir::detail::PDLByteCode **)(*(void *)a2 + 72);
  if (v3)
  {
    uint64_t v4 = (mlir::detail::PDLByteCodeMutableState *)operator new(0xC0uLL);
    *(_OWORD *)uint64_t v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 9) = 0u;
    *((_OWORD *)v4 + 10) = 0u;
    *((_OWORD *)v4 + 11) = 0u;
    *((void *)this + 7) = v4;
    mlir::detail::PDLByteCode::initializeMutableState(v3, v4);
  }
  return this;
}

void mlir::PatternApplicator::~PatternApplicator(mlir::PatternApplicator *this)
{
  unint64_t v2 = (mlir::detail::PDLByteCodeMutableState *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2)
  {
    mlir::detail::PDLByteCodeMutableState::~PDLByteCodeMutableState(v2);
    operator delete(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  uint64_t v5 = *((unsigned int *)this + 6);
  unint64_t v6 = (llvm *)*((void *)this + 1);
  if (v5)
  {
    BOOL v7 = (char *)v6 + 24;
    uint64_t v8 = 40 * v5;
    do
    {
      if ((*((void *)v7 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unint64_t v9 = (char *)*((void *)v7 - 2);
        if (v7 != v9) {
          free(v9);
        }
      }
      v7 += 40;
      v8 -= 40;
    }
    while (v8);
    unint64_t v6 = (llvm *)*((void *)this + 1);
    uint64_t v10 = 40 * *((unsigned int *)this + 6);
  }
  else
  {
    uint64_t v10 = 0;
  }
  llvm::deallocate_buffer(v6, (void *)v10);
}

uint64_t sub_1806DF2C8()
{
  return v0;
}

void mlir::PatternApplicator::applyCostModel(uint64_t **a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  v72[0] = a2;
  v72[1] = a3;
  uint64_t v4 = *(void *)(**a1 + 72);
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(v4 + 400);
    if (v5)
    {
      unsigned int v8 = 0;
      uint64_t v9 = *(void *)(v4 + 392);
      uint64_t v10 = 104 * v5;
      do
      {
        uint64_t v11 = (uint64_t)a1[7];
        __int16 v12 = a2(a3, v9);
        mlir::detail::PDLByteCodeMutableState::updatePatternBenefit(v11, v8++, v12);
        v9 += 104;
        v10 -= 104;
      }
      while (v10);
    }
  }
  int v13 = *((_DWORD *)a1 + 4);
  if (!v13 && !*((_DWORD *)a1 + 5))
  {
LABEL_10:
    uint64_t v15 = **a1;
    if (!*(_DWORD *)(v15 + 8)) {
      goto LABEL_85;
    }
    goto LABEL_21;
  }
  uint64_t v14 = *((unsigned int *)a1 + 6);
  if (v14 > 4 * v13 && v14 >= 0x41)
  {
    llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::shrink_and_clear((uint64_t)(a1 + 1));
    goto LABEL_10;
  }
  if (v14)
  {
    uint64_t v16 = (uint64_t)(a1[1] + 3);
    for (uint64_t i = 40 * v14; i; i -= 40)
    {
      uint64_t v18 = *(void *)(v16 - 24);
      if (v18 != -8192)
      {
        if (v18 == -4096) {
          goto LABEL_15;
        }
        uint64_t v19 = *(void **)(v16 - 16);
        if ((void *)v16 != v19) {
          free(v19);
        }
      }
      *(void *)(v16 - 24) = -4096;
LABEL_15:
      v16 += 40;
    }
  }
  a1[2] = 0;
  uint64_t v15 = **a1;
  if (!*(_DWORD *)(v15 + 8)) {
    goto LABEL_85;
  }
LABEL_21:
  uint64_t v20 = *(unsigned int *)(v15 + 16);
  if (v20)
  {
    uint64_t v21 = 32 * v20;
    unint64_t v22 = *(uint64_t **)v15;
    while ((*v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v22 += 4;
      v21 -= 32;
      if (!v21) {
        goto LABEL_85;
      }
    }
  }
  else
  {
    unint64_t v22 = *(uint64_t **)v15;
  }
  uint64_t v23 = *(void *)v15 + 32 * v20;
  if (v22 == (uint64_t *)v23) {
    goto LABEL_85;
  }
LABEL_28:
  int v24 = (uint64_t *)v22[1];
  uint64_t v25 = v22[2];
  while (v24 != (uint64_t *)v25)
  {
    uint64_t v30 = *v24;
    if (*(__int16 *)(*v24 + 20) == -1) {
      goto LABEL_33;
    }
    uint64_t v31 = a1[1];
    uint64_t v32 = *((unsigned int *)a1 + 6);
    if (!v32) {
      goto LABEL_54;
    }
    unsigned int v26 = ((*v22 >> 4) ^ (*v22 >> 9)) & (v32 - 1);
    int v27 = &v31[5 * v26];
    uint64_t v28 = *v27;
    if (*v22 != *v27)
    {
      BOOL v34 = 0;
      int v35 = 1;
      while (v28 != -4096)
      {
        if (v34) {
          BOOL v36 = 0;
        }
        else {
          BOOL v36 = v28 == -8192;
        }
        if (v36) {
          BOOL v34 = v27;
        }
        unsigned int v37 = v26 + v35++;
        unsigned int v26 = v37 & (v32 - 1);
        int v27 = &v31[5 * v26];
        uint64_t v28 = *v27;
        if (*v22 == *v27) {
          goto LABEL_30;
        }
      }
      if (v34) {
        int v27 = v34;
      }
      int v38 = *((_DWORD *)a1 + 4);
      if (4 * v38 + 4 >= (3 * v32))
      {
LABEL_54:
        int v39 = 2 * v32;
        goto LABEL_56;
      }
      if ((int)v32 + ~v38 - *((_DWORD *)a1 + 5) <= v32 >> 3)
      {
        int v39 = *((_DWORD *)a1 + 6);
LABEL_56:
        unint64_t v40 = (v39 - 1) | ((unint64_t)(v39 - 1) >> 1);
        unint64_t v41 = v40 | (v40 >> 2) | ((v40 | (v40 >> 2)) >> 4);
        int v42 = ((v41 | (v41 >> 8)) >> 16) | v41 | (v41 >> 8);
        if ((v42 + 1) > 0x40) {
          unsigned int v43 = v42 + 1;
        }
        else {
          unsigned int v43 = 64;
        }
        *((_DWORD *)a1 + 6) = v43;
        buffer = (uint64_t *)llvm::allocate_buffer(40 * v43, (std::align_val_t)8uLL);
        a1[1] = buffer;
        if (v31)
        {
          uint64_t v45 = 5 * v32;
          llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>,mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::moveFromOldBuckets((uint64_t)(a1 + 1), v31, &v31[v45]);
          llvm::deallocate_buffer((llvm *)v31, (void *)(v45 * 8));
        }
        a1[2] = 0;
        uint64_t v46 = *((unsigned int *)a1 + 6);
        unint64_t v47 = 40 * v46 - 40;
        long long v48 = buffer;
        if (v47 < 0x28) {
          goto LABEL_109;
        }
        unint64_t v49 = v47 / 0x28 + 1;
        long long v48 = &buffer[5 * (v49 & 0xFFFFFFFFFFFFFFELL)];
        uint64_t v50 = v49 & 0xFFFFFFFFFFFFFFELL;
        int v51 = buffer;
        do
        {
          uint64_t *v51 = -4096;
          v51[5] = -4096;
          v51 += 10;
          v50 -= 2;
        }
        while (v50);
        if (v49 != (v49 & 0xFFFFFFFFFFFFFFELL))
        {
LABEL_109:
          do
          {
            uint64_t *v48 = -4096;
            v48 += 5;
          }
          while (v48 != &buffer[5 * v46]);
        }
        uint64_t v52 = *v22;
        int v53 = v46 - 1;
        unsigned int v54 = ((*v22 >> 4) ^ (*v22 >> 9)) & v53;
        int v27 = &buffer[5 * v54];
        uint64_t v55 = *v27;
        if (*v22 != *v27)
        {
          BOOL v56 = 0;
          int v57 = 1;
          while (v55 != -4096)
          {
            if (v56) {
              BOOL v58 = 0;
            }
            else {
              BOOL v58 = v55 == -8192;
            }
            if (v58) {
              BOOL v56 = v27;
            }
            unsigned int v59 = v54 + v57++;
            unsigned int v54 = v59 & v53;
            int v27 = &buffer[5 * v54];
            uint64_t v55 = *v27;
            if (v52 == *v27) {
              goto LABEL_67;
            }
          }
          if (v56) {
            int v27 = v56;
          }
          goto LABEL_39;
        }
LABEL_67:
        ++*((_DWORD *)a1 + 4);
        if (v52 != -4096) {
LABEL_40:
        }
          --*((_DWORD *)a1 + 5);
      }
      else
      {
LABEL_39:
        uint64_t v33 = *v27;
        ++*((_DWORD *)a1 + 4);
        if (v33 != -4096) {
          goto LABEL_40;
        }
      }
      *int v27 = *v22;
      v27[1] = (uint64_t)(v27 + 3);
      uint64_t v27[2] = 0x200000000;
    }
LABEL_30:
    unint64_t v29 = *((unsigned int *)v27 + 4);
    if (v29 >= *((unsigned int *)v27 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v27 + 1), v27 + 3, v29 + 1, 8);
      unint64_t v29 = *((unsigned int *)v27 + 4);
    }
    *(void *)(v27[1] + 8 * v29) = v30;
    ++*((_DWORD *)v27 + 4);
LABEL_33:
    ++v24;
  }
  while (1)
  {
    v22 += 4;
    if (v22 == (uint64_t *)v23) {
      break;
    }
    if ((*v22 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (v22 != (uint64_t *)v23) {
        goto LABEL_28;
      }
      break;
    }
  }
  uint64_t v15 = **a1;
LABEL_85:
  uint64_t v60 = (uint64_t)(a1 + 4);
  *((_DWORD *)a1 + 10) = 0;
  uint64_t v61 = *(uint64_t **)(v15 + 48);
  uint64_t v62 = *(uint64_t **)(v15 + 56);
  if (v61 != v62)
  {
    unsigned int v63 = 0;
    do
    {
      uint64_t v64 = *v61;
      if (*(__int16 *)(*v61 + 20) != -1)
      {
        if (v63 >= *((_DWORD *)a1 + 11))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 4), a1 + 6, v63 + 1, 8);
          unsigned int v63 = *((_DWORD *)a1 + 10);
        }
        a1[4][v63] = v64;
        unsigned int v63 = *((_DWORD *)a1 + 10) + 1;
        *((_DWORD *)a1 + 10) = v63;
      }
      ++v61;
    }
    while (v61 != v62);
  }
  uint64_t v73 = 1;
  long long v74 = (llvm *)-4096;
  uint64_t v76 = -4096;
  uint64_t v77 = -4096;
  uint64_t v78 = -4096;
  uint64_t v71 = &v73;
  v70[0] = v72;
  v70[1] = &v73;
  unint64_t v70[2] = &v71;
  if (*((_DWORD *)a1 + 4))
  {
    uint64_t v65 = a1[1];
    uint64_t v66 = *((unsigned int *)a1 + 6);
    if (v66)
    {
      uint64_t v67 = 40 * v66;
      uint64_t v68 = a1[1];
      while ((*v68 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v68 += 5;
        v67 -= 40;
        if (!v67) {
          goto LABEL_97;
        }
      }
    }
    else
    {
      uint64_t v68 = a1[1];
    }
    uint64_t v69 = &v65[5 * v66];
LABEL_102:
    if (v68 != v69)
    {
      mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_1::operator()((uint64_t)v70, (uint64_t)(v68 + 1));
      while (1)
      {
        v68 += 5;
        if (v68 == v69) {
          break;
        }
        if ((*v68 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_102;
        }
      }
    }
  }
LABEL_97:
  mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_1::operator()((uint64_t)v70, v60);
  if ((v73 & 1) == 0) {
    llvm::deallocate_buffer(v74, (void *)(16 * v75));
  }
}

void mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_1::operator()(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) == 1)
  {
    if ((**(unsigned __int16 (***)(void, uint64_t))a1)(*(void *)(*(void *)a1 + 8), **(void **)a2 + 8) == 0xFFFF)*(_DWORD *)(a2 + 8) = 0; {
    return;
    }
  }
  uint64_t v4 = *(int **)(a1 + 8);
  int v5 = *v4;
  if (*v4 > 1 || v4[1])
  {
    if (v5)
    {
      uint64_t v30 = v4 + 2;
      uint64_t v31 = v4 + 18;
      unint64_t v32 = 48;
    }
    else
    {
      unsigned int v6 = (2 * v5) & 0xFFFFFFFC;
      uint64_t v7 = v4[4];
      if (v6 < v7 && v7 >= 0x41)
      {
        llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::shrink_and_clear((char *)v4);
        goto LABEL_10;
      }
      if (!v7)
      {
LABEL_49:
        *uint64_t v4 = v7;
        v4[1] = 0;
        unsigned int v8 = *(char **)a2;
        uint64_t v9 = *(unsigned int *)(a2 + 8);
        if (v9) {
          goto LABEL_11;
        }
LABEL_50:
        unint64_t v25 = 0;
        unsigned int v54 = **(int ***)(a1 + 16);
        int v24 = v8;
LABEL_51:
        std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(v24, v8, &v54, v25, 0, 0);
        unsigned int v37 = *(_DWORD *)(a2 + 8);
        if (v37) {
          goto LABEL_52;
        }
        return;
      }
      uint64_t v30 = (int *)*((void *)v4 + 1);
      uint64_t v31 = &v30[4 * v7];
      unint64_t v32 = (char *)v31 - (char *)v30 - 16;
      if (v32 < 0x10)
      {
        uint64_t v33 = (int *)*((void *)v4 + 1);
        do
        {
LABEL_47:
          *(void *)uint64_t v33 = -4096;
          v33 += 4;
        }
        while (v33 != v31);
LABEL_48:
        LODWORD(v7) = *v4 & 1;
        goto LABEL_49;
      }
    }
    uint64_t v34 = (v32 >> 4) + 1;
    uint64_t v33 = &v30[4 * (v34 & 0x1FFFFFFFFFFFFFFELL)];
    int v35 = v30 + 4;
    uint64_t v36 = v34 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v35 - 2) = -4096;
      *int v35 = -4096;
      v35 += 4;
      v36 -= 2;
    }
    while (v36);
    if (v34 == (v34 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
LABEL_10:
  unsigned int v8 = *(char **)a2;
  uint64_t v9 = *(unsigned int *)(a2 + 8);
  if (!v9) {
    goto LABEL_50;
  }
LABEL_11:
  uint64_t v10 = &v8[8 * v9];
  do
  {
    if (*(void *)v8) {
      uint64_t v16 = (int *)(*(void *)v8 + 8);
    }
    else {
      uint64_t v16 = 0;
    }
    unsigned int v54 = v16;
    uint64_t v17 = *(void *)(a1 + 8);
    __int16 v53 = (**(uint64_t (***)(void))a1)(*(void *)(*(void *)a1 + 8));
    uint64_t v18 = v17 + 8;
    if (*(unsigned char *)v17)
    {
      int v11 = 4;
    }
    else
    {
      int v11 = *(_DWORD *)(v17 + 16);
      if (!v11)
      {
        uint64_t v19 = 0;
        goto LABEL_22;
      }
      uint64_t v18 = *(void *)(v17 + 8);
    }
    int v12 = v11 - 1;
    unsigned int v13 = ((v54 >> 4) ^ (v54 >> 9)) & v12;
    uint64_t v14 = (int **)(v18 + 16 * v13);
    uint64_t v15 = *v14;
    if (v54 == *v14) {
      goto LABEL_14;
    }
    uint64_t v20 = 0;
    int v21 = 1;
    while (v15 != (int *)-4096)
    {
      if (v20) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v15 == (int *)-8192;
      }
      if (v22) {
        uint64_t v20 = v14;
      }
      unsigned int v23 = v13 + v21++;
      unsigned int v13 = v23 & v12;
      uint64_t v14 = (int **)(v18 + 16 * v13);
      uint64_t v15 = *v14;
      if (v54 == *v14) {
        goto LABEL_14;
      }
    }
    if (v20) {
      uint64_t v19 = (uint64_t)v20;
    }
    else {
      uint64_t v19 = (uint64_t)v14;
    }
LABEL_22:
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&,mlir::PatternBenefit>(v17, v19, &v54, &v53);
LABEL_14:
    v8 += 8;
  }
  while (v8 != v10);
  int v24 = *(char **)a2;
  unint64_t v25 = *(unsigned int *)(a2 + 8);
  unsigned int v8 = (char *)(*(void *)a2 + 8 * v25);
  unsigned int v54 = **(int ***)(a1 + 16);
  if (v25 < 0x81) {
    goto LABEL_51;
  }
  unsigned int v26 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  unint64_t v27 = v25;
  while (1)
  {
    uint64_t v28 = (uint64_t *)operator new(8 * v27, v26);
    if (v28) {
      break;
    }
    BOOL v29 = v27 > 1;
    v27 >>= 1;
    if (!v29) {
      goto LABEL_51;
    }
  }
  uint64_t v52 = v28;
  std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(v24, v8, &v54, v25, v28, v27);
  operator delete(v52);
  unsigned int v37 = *(_DWORD *)(a2 + 8);
  if (v37)
  {
    while (1)
    {
LABEL_52:
      uint64_t v38 = *(void *)(a1 + 8);
      uint64_t v39 = *(void *)(*(void *)a2 + 8 * v37 - 8);
      unint64_t v40 = (int *)(v39 + 8);
      if (!v39) {
        unint64_t v40 = 0;
      }
      unsigned int v54 = v40;
      uint64_t v41 = v38 + 8;
      if (*(unsigned char *)v38)
      {
        int v42 = 4;
      }
      else
      {
        int v42 = *(_DWORD *)(v38 + 16);
        if (!v42)
        {
          uint64_t v47 = 0;
          goto LABEL_63;
        }
        uint64_t v41 = *(void *)(v38 + 8);
      }
      int v43 = v42 - 1;
      unsigned int v44 = (v42 - 1) & ((v40 >> 4) ^ (v40 >> 9));
      uint64_t v45 = v41 + 16 * v44;
      uint64_t v46 = *(void *)v45;
      if (v40 == *(int **)v45) {
        goto LABEL_59;
      }
      uint64_t v48 = 0;
      int v49 = 1;
      while (v46 != -4096)
      {
        if (v48) {
          BOOL v50 = 0;
        }
        else {
          BOOL v50 = v46 == -8192;
        }
        if (v50) {
          uint64_t v48 = v45;
        }
        unsigned int v51 = v44 + v49++;
        unsigned int v44 = v51 & v43;
        uint64_t v45 = v41 + 16 * (v51 & v43);
        uint64_t v46 = *(void *)v45;
        if (v40 == *(int **)v45) {
          goto LABEL_59;
        }
      }
      if (v48) {
        uint64_t v47 = v48;
      }
      else {
        uint64_t v47 = v45;
      }
LABEL_63:
      uint64_t v45 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>(v38, v47, &v54);
LABEL_59:
      if (*(__int16 *)(v45 + 8) == -1)
      {
        unsigned int v37 = *(_DWORD *)(a2 + 8) - 1;
        *(_DWORD *)(a2 + 8) = v37;
        if (v37) {
          continue;
        }
      }
      return;
    }
  }
}

uint64_t **mlir::PatternApplicator::walkAllPatterns(uint64_t **result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  int v5 = result;
  uint64_t v6 = **result;
  if (*(_DWORD *)(v6 + 8))
  {
    uint64_t v7 = *(unsigned int *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = 32 * v7;
      uint64_t v9 = *(void **)v6;
      while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 4;
        v8 -= 32;
        if (!v8) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      uint64_t v9 = *(void **)v6;
    }
    uint64_t v10 = *(void *)v6 + 32 * v7;
    if (v9 != (void *)v10)
    {
LABEL_9:
      int v11 = (uint64_t *)v9[1];
      for (i = (uint64_t *)v9[2]; v11 != i; uint64_t result = (uint64_t **)a2(a3, v13 + 8))
        uint64_t v13 = *v11++;
      while (1)
      {
        v9 += 4;
        if (v9 == (void *)v10) {
          break;
        }
        if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v9 != (void *)v10) {
            goto LABEL_9;
          }
          break;
        }
      }
      uint64_t v6 = **v5;
    }
  }
LABEL_15:
  uint64_t v14 = *(uint64_t **)(v6 + 48);
  uint64_t v15 = *(uint64_t **)(v6 + 56);
  if (v14 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      uint64_t result = (uint64_t **)a2(a3, v16 + 8);
    }
    while (v14 != v15);
    uint64_t v6 = **v5;
  }
  uint64_t v17 = *(void *)(v6 + 72);
  if (v17)
  {
    unsigned int v18 = *(_DWORD *)(v17 + 400);
    if (v18)
    {
      uint64_t v19 = *(void *)(v17 + 392);
      uint64_t v20 = 104 * v18;
      do
      {
        uint64_t result = (uint64_t **)a2(a3, v19);
        v19 += 104;
        v20 -= 104;
      }
      while (v20);
    }
  }
  return result;
}

uint64_t mlir::PatternApplicator::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v58[60] = *MEMORY[0x1E4F143B8];
  v53[0] = a6;
  v53[1] = a7;
  v52[0] = a9;
  v52[1] = a10;
  uint64_t v51 = a2;
  BOOL v56 = v58;
  uint64_t v57 = 0x400000000;
  uint64_t v14 = *(void *)(**(void **)a1 + 72);
  uint64_t v50 = v14;
  if (v14)
  {
    mlir::detail::PDLByteCode::match(v14, a2, a3, (uint64_t)&v56, *(void *)(a1 + 56));
    a2 = v51;
  }
  uint64_t v15 = *(void *)(a1 + 8);
  unsigned int v16 = *(_DWORD *)(a1 + 24);
  if (!v16)
  {
LABEL_9:
    uint64_t v19 = (uint64_t *)(v15 + 40 * v16);
    goto LABEL_10;
  }
  uint64_t v17 = *(void *)(a2 + 48);
  unsigned int v18 = ((v17 >> 4) ^ (v17 >> 9)) & (v16 - 1);
  uint64_t v19 = (uint64_t *)(v15 + 40 * v18);
  uint64_t v20 = *v19;
  if (v17 != *v19)
  {
    int v21 = 1;
    while (v20 != -4096)
    {
      unsigned int v22 = v18 + v21++;
      unsigned int v18 = v22 & (v16 - 1);
      uint64_t v19 = (uint64_t *)(v15 + 40 * v18);
      uint64_t v20 = *v19;
      if (v17 == *v19) {
        goto LABEL_10;
      }
    }
    goto LABEL_9;
  }
LABEL_10:
  if (v19 == (uint64_t *)(v15 + 40 * v16))
  {
    unsigned int v24 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = v19[1];
    unsigned int v24 = *((_DWORD *)v19 + 4);
  }
  uint64_t v49 = 0;
  unint64_t v25 = *(unsigned int *)(a1 + 40);
  unsigned int v48 = 0;
  unint64_t v26 = v57;
  unsigned __int8 v54 = 0;
  do
  {
    while (1)
    {
      do
      {
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        if (HIDWORD(v49) >= v24)
        {
          uint64_t v29 = v49;
          if (v49 >= v25)
          {
            unsigned int v33 = v48;
            if (v48 >= v26) {
              goto LABEL_45;
            }
            uint64_t v34 = (char *)v56;
            goto LABEL_37;
          }
          uint64_t v30 = *(void *)(a1 + 32);
LABEL_25:
          uint64_t v31 = *(void *)(v30 + 8 * v29);
          goto LABEL_26;
        }
        uint64_t v27 = *(void *)(v23 + 8 * HIDWORD(v49));
        if (v27) {
          uint64_t v28 = v27 + 8;
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v47 = v28;
        uint64_t v29 = v49;
        if (v49 >= v25)
        {
          unint64_t v32 = (unsigned int *)&v49 + 1;
          unsigned int v33 = v48;
          if (v48 >= v26) {
            goto LABEL_38;
          }
LABEL_32:
          uint64_t v34 = (char *)v56;
          if (v28 && *(unsigned __int16 *)(v28 + 12) >= *((unsigned __int16 *)v56 + 60 * v33 + 56)) {
            goto LABEL_39;
          }
LABEL_37:
          uint64_t v46 = &v34[120 * v33];
          uint64_t v28 = *((void *)v46 + 13);
          uint64_t v47 = v28;
          unint64_t v32 = &v48;
          goto LABEL_38;
        }
        uint64_t v30 = *(void *)(a1 + 32);
        if (!v27) {
          goto LABEL_25;
        }
        uint64_t v31 = *(void *)(v30 + 8 * v49);
        if (*(unsigned __int16 *)(v28 + 12) >= *(unsigned __int16 *)(v31 + 20))
        {
          unint64_t v32 = (unsigned int *)&v49 + 1;
          uint64_t v28 = v27 + 8;
          unsigned int v33 = v48;
          if (v48 < v26) {
            goto LABEL_32;
          }
          goto LABEL_38;
        }
LABEL_26:
        if (v31) {
          uint64_t v28 = v31 + 8;
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v47 = v28;
        unint64_t v32 = (unsigned int *)&v49;
        unsigned int v33 = v48;
        if (v48 < v26) {
          goto LABEL_32;
        }
LABEL_38:
        if (!v28) {
          goto LABEL_45;
        }
LABEL_39:
        ++*v32;
      }
      while (a4 && !a4(a5));
      char v45 = 0;
      uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v51 + 24));
      v44[0] = a3;
      v44[1] = (uint64_t)&v51;
      unint64_t v44[2] = (uint64_t)&v46;
      v44[3] = (uint64_t)&v54;
      v44[4] = (uint64_t)&v50;
      v44[5] = a1;
      v44[6] = (uint64_t)&v47;
      v44[7] = (uint64_t)v52;
      v44[8] = (uint64_t)&v45;
      v44[9] = (uint64_t)v53;
      unint64_t v55 = v51 & 0xFFFFFFFFFFFFFFF9;
      uint64_t v36 = v47;
      if (mlir::MLIRContext::hasActionHandler(Context)) {
        break;
      }
      llvm::function_ref<void ()(void)>::callback_fn<mlir::PatternApplicator::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &,llvm::function_ref<BOOL ()(mlir::Pattern const&)>,llvm::function_ref<void ()(mlir::Pattern const&)>,llvm::function_ref<mlir::LogicalResult ()(mlir::Pattern const&)>)::$_0>(v44);
      if (v45) {
        goto LABEL_45;
      }
    }
    mlir::MLIRContext::executeActionInternal<mlir::ApplyPatternAction,mlir::Pattern const&>((uint64_t *)Context, (uint64_t)llvm::function_ref<void ()(void)>::callback_fn<mlir::PatternApplicator::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &,llvm::function_ref<BOOL ()(mlir::Pattern const&)>,llvm::function_ref<void ()(mlir::Pattern const&)>,llvm::function_ref<mlir::LogicalResult ()(mlir::Pattern const&)>)::$_0>, (uint64_t)v44, (uint64_t)&v55, 1, v36);
  }
  while (!v45);
LABEL_45:
  unsigned int v37 = *(mlir::detail::PDLByteCodeMutableState **)(a1 + 56);
  if (v37) {
    mlir::detail::PDLByteCodeMutableState::cleanupAfterMatchAndRewrite(v37);
  }
  uint64_t v38 = (char *)v56;
  if (v57)
  {
    uint64_t v39 = 120 * v57;
    do
    {
      unint64_t v40 = *(char **)&v38[v39 - 32];
      if (&v38[v39 - 16] != v40) {
        free(v40);
      }
      uint64_t v41 = *(char **)&v38[v39 - 48];
      if (&v38[v39 - 32] != v41) {
        free(v41);
      }
      int v42 = *(char **)&v38[v39 - 112];
      if (&v38[v39 - 96] != v42) {
        free(v42);
      }
      v39 -= 120;
    }
    while (v39);
    uint64_t v38 = (char *)v56;
  }
  if (v38 != (char *)v58) {
    free(v38);
  }
  return v54;
}

char *llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::shrink_and_clear(char *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  unsigned int v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3) {
    unsigned int v4 = 1 << (33 - v3);
  }
  else {
    unsigned int v4 = 64;
  }
  if (v2 >= 2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 5)
  {
    *(_DWORD *)result &= 1u;
    *((_DWORD *)result + 1) = 0;
    uint64_t v6 = result + 8;
    uint64_t v7 = result + 72;
    unint64_t v8 = 48;
    goto LABEL_15;
  }
  if (v2)
  {
    if (v5 <= 4)
    {
      *(void *)uint64_t result = 1;
    }
    else
    {
      *(_DWORD *)result &= ~1u;
      uint64_t result = (char *)llvm::allocate_buffer(16 * v5, (std::align_val_t)8uLL);
      *((void *)v1 + 1) = result;
      *((void *)v1 + 2) = v5;
      int v14 = *(_DWORD *)v1;
      *(void *)uint64_t v1 = *(_DWORD *)v1 & 1;
      if ((v14 & 1) == 0)
      {
        uint64_t v15 = &result[16 * v5];
        unint64_t v16 = 16 * v5 - 16;
        if (v16 < 0x10)
        {
          unsigned int v18 = result;
          goto LABEL_31;
        }
LABEL_24:
        uint64_t v17 = (v16 >> 4) + 1;
        unsigned int v18 = &result[16 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
        uint64_t v19 = result + 16;
        uint64_t v20 = v17 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          *(v19 - 2) = -4096;
          *uint64_t v19 = -4096;
          v19 += 4;
          v20 -= 2;
        }
        while (v20);
        if (v17 == (v17 & 0x1FFFFFFFFFFFFFFELL)) {
          return result;
        }
        do
        {
LABEL_31:
          *(void *)unsigned int v18 = -4096;
          v18 += 16;
        }
        while (v18 != v15);
        return result;
      }
    }
    uint64_t result = v1 + 8;
    uint64_t v15 = v1 + 72;
    unint64_t v16 = 48;
    goto LABEL_24;
  }
  uint64_t v10 = *((unsigned int *)result + 4);
  if (v5 != v10) {
    llvm::deallocate_buffer(*((llvm **)result + 1), (void *)(16 * v10));
  }
  *(void *)uint64_t result = 0;
  if (!v5) {
    return result;
  }
  uint64_t v6 = (char *)*((void *)result + 1);
  uint64_t v7 = &v6[16 * v5];
  unint64_t v8 = 16 * v5 - 16;
  if (v8 < 0x10)
  {
    uint64_t v9 = (char *)*((void *)result + 1);
    do
    {
LABEL_18:
      *(void *)uint64_t v9 = -4096;
      v9 += 16;
    }
    while (v9 != v7);
    return result;
  }
LABEL_15:
  uint64_t v11 = (v8 >> 4) + 1;
  uint64_t v9 = &v6[16 * (v11 & 0x1FFFFFFFFFFFFFFELL)];
  int v12 = v6 + 16;
  uint64_t v13 = v11 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v12 - 2) = -4096;
    *int v12 = -4096;
    v12 += 4;
    v13 -= 2;
  }
  while (v13);
  if (v11 != (v11 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_18;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&,mlir::PatternBenefit>(uint64_t a1, uint64_t a2, void *a3, _WORD *a4)
{
  int v8 = *(_DWORD *)a1;
  int v9 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    int v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::grow(a1, v10);
  uint64_t v13 = a1 + 8;
  int v8 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v14 = 4;
  }
  else
  {
    int v14 = *(_DWORD *)(a1 + 16);
    if (!v14)
    {
      int v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v13 = *(void *)(a1 + 8);
  }
  int v11 = *(_DWORD *)a1 & 1;
  int v15 = v14 - 1;
  unsigned int v16 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v14 - 1);
  a2 = v13 + 16 * v16;
  uint64_t v17 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    while (v17 != -4096)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == -8192;
      }
      if (v20) {
        uint64_t v18 = a2;
      }
      unsigned int v21 = v16 + v19++;
      unsigned int v16 = v21 & v15;
      a2 = v13 + 16 * (v21 & v15);
      uint64_t v17 = *(void *)a2;
      if (*a3 == *(void *)a2) {
        goto LABEL_7;
      }
    }
    if (v18) {
      a2 = v18;
    }
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*(void *)a2 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *(void *)a2 = *a3;
  *(_WORD *)(a2 + 8) = *a4;
  return a2;
}

int *llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::grow(uint64_t a1, unsigned int a2)
{
  v18[6] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v14 = a2;
      *(void *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    int v15 = (char *)(16 * v7);
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::moveFromOldBuckets((int *)a1, v6, (uint64_t *)&v15[(void)v6]);
    llvm::deallocate_buffer((llvm *)v6, v15);
  }
  int v8 = &v16;
  if ((*(void *)(a1 + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if ((v9 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 8);
    __int16 v17 = *(_WORD *)(a1 + 16);
    int v8 = v18;
    uint64_t v9 = *(void *)(a1 + 24);
    if ((v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      uint64_t v10 = *(void *)(a1 + 40);
      if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
  }
  *int v8 = v9;
  *((_WORD *)v8 + 4) = *(_WORD *)(a1 + 32);
  v8 += 2;
  uint64_t v10 = *(void *)(a1 + 40);
  if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    uint64_t v11 = *(void *)(a1 + 56);
    if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_12;
    }
LABEL_22:
    *int v8 = v11;
    *((_WORD *)v8 + 4) = *(_WORD *)(a1 + 64);
    v8 += 2;
    if (a2 < 5) {
      return llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::moveFromOldBuckets((int *)a1, &v16, v8);
    }
    goto LABEL_13;
  }
LABEL_21:
  *int v8 = v10;
  *((_WORD *)v8 + 4) = *(_WORD *)(a1 + 48);
  v8 += 2;
  uint64_t v11 = *(void *)(a1 + 56);
  if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000) {
    goto LABEL_22;
  }
LABEL_12:
  if (a2 >= 5)
  {
LABEL_13:
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::moveFromOldBuckets((int *)a1, &v16, v8);
}

int *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::moveFromOldBuckets(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 18;
    int v5 = result + 2;
    unint64_t v7 = 48;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_11;
    }
    int v5 = (int *)*((void *)result + 1);
    uint64_t v6 = &v5[4 * v4];
    unint64_t v7 = (char *)v6 - (char *)v5 - 16;
    if (v7 < 0x10)
    {
      uint64_t v9 = (int *)*((void *)result + 1);
      do
      {
LABEL_10:
        *(void *)uint64_t v9 = -4096;
        v9 += 4;
      }
      while (v9 != v6);
      goto LABEL_11;
    }
  }
  uint64_t v8 = (v7 >> 4) + 1;
  uint64_t v9 = &v5[4 * (v8 & 0x1FFFFFFFFFFFFFFELL)];
  uint64_t v10 = v5 + 4;
  uint64_t v11 = v8 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v10 - 2) = -4096;
    *uint64_t v10 = -4096;
    v10 += 4;
    v11 -= 2;
  }
  while (v11);
  if (v8 != (v8 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_10;
  }
LABEL_11:
  while (a2 != a3)
  {
    uint64_t v18 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v13 = 4;
        uint64_t v12 = result + 2;
      }
      else
      {
        uint64_t v12 = (int *)*((void *)result + 1);
        int v13 = result[4];
      }
      int v14 = v13 - 1;
      unsigned int v15 = (v13 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      uint64_t v16 = (uint64_t *)&v12[4 * v15];
      uint64_t v17 = *v16;
      if (v18 != *v16)
      {
        int v19 = 0;
        int v20 = 1;
        while (v17 != -4096)
        {
          if (v19) {
            BOOL v21 = 0;
          }
          else {
            BOOL v21 = v17 == -8192;
          }
          if (v21) {
            int v19 = v16;
          }
          unsigned int v22 = v15 + v20++;
          unsigned int v15 = v22 & v14;
          uint64_t v16 = (uint64_t *)&v12[4 * (v22 & v14)];
          uint64_t v17 = *v16;
          if (v18 == *v16) {
            goto LABEL_15;
          }
        }
        if (v19) {
          uint64_t v16 = v19;
        }
      }
LABEL_15:
      *uint64_t v16 = v18;
      *((_WORD *)v16 + 4) = *((_WORD *)a2 + 4);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(char *a1, char *a2, int **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 < 2) {
    return;
  }
  uint64_t v8 = a1;
  if (a4 == 2)
  {
    uint64_t v9 = *((void *)a2 - 1);
    if (v9) {
      uint64_t v10 = v9 + 8;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(void *)a1) {
      uint64_t v11 = *(void *)a1 + 8;
    }
    else {
      uint64_t v11 = 0;
    }
    if (mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v10, v11))
    {
      uint64_t v12 = *(void *)v8;
      *(void *)uint64_t v8 = *((void *)a2 - 1);
      *((void *)a2 - 1) = v12;
    }
    return;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2) {
      return;
    }
    int v14 = a1 + 8;
    if (a1 + 8 == a2) {
      return;
    }
    unsigned int v15 = a1;
LABEL_19:
    uint64_t v17 = v14;
    uint64_t v19 = *(void *)v15;
    uint64_t v18 = *((void *)v15 + 1);
    if (v18) {
      uint64_t v20 = v18 + 8;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v19) {
      uint64_t v21 = v19 + 8;
    }
    else {
      uint64_t v21 = 0;
    }
    if (!mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v20, v21))goto LABEL_18; {
    uint64_t v22 = *(void *)v17;
    }
    if (*(void *)v17) {
      uint64_t v23 = *(void *)v17 + 8;
    }
    else {
      uint64_t v23 = 0;
    }
    unsigned int v24 = (v23 >> 4) ^ (v23 >> 9);
    uint64_t v16 = v17;
    while (1)
    {
      *(void *)uint64_t v16 = *(void *)v15;
      if (v15 == v8)
      {
        uint64_t v16 = v8;
LABEL_17:
        *(void *)uint64_t v16 = v22;
LABEL_18:
        int v14 = v17 + 8;
        unsigned int v15 = v17;
        if (v17 + 8 != a2) {
          goto LABEL_19;
        }
        return;
      }
      uint64_t v16 = v15;
      uint64_t v31 = *((void *)v15 - 1);
      v15 -= 8;
      uint64_t v32 = v31 + 8;
      if (v31) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v90 = v33;
      uint64_t v91 = v23;
      uint64_t v34 = *a3;
      uint64_t v36 = (uint64_t)(*a3 + 2);
      int v35 = **a3;
      if (v35)
      {
        int v37 = 4;
      }
      else
      {
        int v37 = v34[4];
        if (!v37)
        {
          uint64_t v42 = 0;
          goto LABEL_46;
        }
        uint64_t v36 = *((void *)v34 + 1);
      }
      int v38 = v37 - 1;
      unsigned int v39 = v38 & v24;
      uint64_t v40 = v36 + 16 * (v38 & v24);
      uint64_t v41 = *(void *)v40;
      if (*(void *)v40 == v23) {
        goto LABEL_42;
      }
      uint64_t v48 = 0;
      int v49 = 1;
      while (v41 != -4096)
      {
        if (v48) {
          BOOL v50 = 0;
        }
        else {
          BOOL v50 = v41 == -8192;
        }
        if (v50) {
          uint64_t v48 = v40;
        }
        unsigned int v51 = v39 + v49++;
        unsigned int v39 = v51 & v38;
        uint64_t v40 = v36 + 16 * v39;
        uint64_t v41 = *(void *)v40;
        if (*(void *)v40 == v23) {
          goto LABEL_42;
        }
      }
      if (v48) {
        uint64_t v42 = v48;
      }
      else {
        uint64_t v42 = v40;
      }
LABEL_46:
      uint64_t v40 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v34, v42, &v91);
      uint64_t v34 = *a3;
      int v35 = **a3;
LABEL_42:
      if (v35)
      {
        unint64_t v25 = v34 + 2;
        int v26 = 4;
      }
      else
      {
        int v26 = v34[4];
        if (!v26)
        {
          uint64_t v43 = 0;
LABEL_48:
          uint64_t v29 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v34, v43, &v90);
          goto LABEL_32;
        }
        unint64_t v25 = (int *)*((void *)v34 + 1);
      }
      int v27 = v26 - 1;
      unsigned int v28 = ((v90 >> 4) ^ (v90 >> 9)) & (v26 - 1);
      uint64_t v29 = (uint64_t)&v25[4 * v28];
      uint64_t v30 = *(void *)v29;
      if (v90 != *(void *)v29)
      {
        uint64_t v44 = 0;
        int v45 = 1;
        while (v30 != -4096)
        {
          if (v44) {
            BOOL v46 = 0;
          }
          else {
            BOOL v46 = v30 == -8192;
          }
          if (v46) {
            uint64_t v44 = v29;
          }
          unsigned int v47 = v28 + v45++;
          unsigned int v28 = v47 & v27;
          uint64_t v29 = (uint64_t)&v25[4 * (v47 & v27)];
          uint64_t v30 = *(void *)v29;
          if (v90 == *(void *)v29) {
            goto LABEL_32;
          }
        }
        if (v44) {
          uint64_t v43 = v44;
        }
        else {
          uint64_t v43 = v29;
        }
        goto LABEL_48;
      }
LABEL_32:
      if (*(unsigned __int16 *)(v29 + 8) >= *(unsigned __int16 *)(v40 + 8)) {
        goto LABEL_17;
      }
    }
  }
  unint64_t v54 = a4 >> 1;
  unint64_t v55 = &a1[8 * (a4 >> 1)];
  unint64_t v56 = a4 >> 1;
  if ((uint64_t)a4 <= a6)
  {
    std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(a1, v55, a3, v56, a5);
    uint64_t v57 = &a5[v54];
    std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v57);
    BOOL v58 = v8;
    unsigned int v59 = v57;
    uint64_t v60 = a5;
    uint64_t v61 = &a5[a4];
    do
    {
      if (v59 == v61)
      {
        if (v60 == v57) {
          return;
        }
        unint64_t v80 = (char *)&a5[v54] - (char *)v60 - 8;
        if (v80 >= 0x38 && (unint64_t)(v58 - (char *)v60) >= 0x20)
        {
          uint64_t v84 = 0;
          uint64_t v85 = (v80 >> 3) + 1;
          uint64_t v86 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          int v81 = &v8[v86 * 8];
          BOOL v82 = &v60[v86];
          uint64_t v87 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v88 = &v8[v84 * 8];
            long long v89 = *(_OWORD *)&v60[v84 + 2];
            *(_OWORD *)uint64_t v88 = *(_OWORD *)&v60[v84];
            *((_OWORD *)v88 + 1) = v89;
            v84 += 4;
            v87 -= 4;
          }
          while (v87);
          if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
            return;
          }
        }
        else
        {
          int v81 = v8;
          BOOL v82 = v60;
        }
        do
        {
          uint64_t v83 = *v82++;
          *(void *)int v81 = v83;
          v81 += 8;
        }
        while (v82 != v57);
        return;
      }
      uint64_t v62 = v59;
      uint64_t v63 = *v59;
      if (v63) {
        uint64_t v64 = v63 + 8;
      }
      else {
        uint64_t v64 = 0;
      }
      if (*v60) {
        uint64_t v65 = *v60 + 8;
      }
      else {
        uint64_t v65 = 0;
      }
      BOOL v66 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v64, v65);
      if (v66) {
        uint64_t v67 = v62;
      }
      else {
        uint64_t v67 = v60;
      }
      v60 += !v66;
      unsigned int v59 = &v62[v66];
      *(void *)uint64_t v8 = *v67;
      v8 += 8;
      v58 += 8;
    }
    while (v60 != v57);
    if (v59 != v61)
    {
      uint64_t v68 = -8;
      if (!v66) {
        uint64_t v68 = 0;
      }
      unint64_t v69 = (char *)&a5[a4] - (char *)v62 + v68 - 8;
      if (v69 < 0x68) {
        goto LABEL_112;
      }
      uint64_t v70 = 1;
      if (!v66) {
        uint64_t v70 = 0;
      }
      if ((unint64_t)(v58 - (char *)&v62[v70]) < 0x20) {
        goto LABEL_112;
      }
      uint64_t v71 = 0;
      uint64_t v72 = (v69 >> 3) + 1;
      uint64_t v73 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      long long v74 = &v8[v73 * 8];
      unsigned int v75 = &v59[v73];
      uint64_t v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v77 = &v8[v71 * 8];
        long long v78 = *(_OWORD *)&v59[v71 + 2];
        *(_OWORD *)uint64_t v77 = *(_OWORD *)&v59[v71];
        *((_OWORD *)v77 + 1) = v78;
        v71 += 4;
        v76 -= 4;
      }
      while (v76);
      uint64_t v8 = v74;
      unsigned int v59 = v75;
      if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_112:
        do
        {
          uint64_t v79 = *v59++;
          *(void *)uint64_t v8 = v79;
          v8 += 8;
        }
        while (v59 != v61);
      }
    }
  }
  else
  {
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(a1, v55, a3, v56, a5, a6);
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(&v8[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5, a6);
    std::__inplace_merge<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>((uint64_t)v8, &v8[8 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
  }
}

BOOL mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(int **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a3;
  uint64_t v30 = a2;
  uint64_t v4 = *a1;
  uint64_t v6 = v4 + 2;
  int v5 = *v4;
  if (*v4)
  {
    int v7 = 4;
  }
  else
  {
    int v7 = v4[4];
    if (!v7)
    {
      uint64_t v19 = 0;
      goto LABEL_13;
    }
    uint64_t v6 = (_DWORD *)*((void *)v4 + 1);
  }
  int v8 = v7 - 1;
  unsigned int v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = (uint64_t)&v6[4 * v9];
  uint64_t v11 = *(void *)v10;
  if (*(void *)v10 == a2) {
    goto LABEL_6;
  }
  uint64_t v21 = 0;
  int v22 = 1;
  while (v11 != -4096)
  {
    if (v21) {
      BOOL v23 = 0;
    }
    else {
      BOOL v23 = v11 == -8192;
    }
    if (v23) {
      uint64_t v21 = v10;
    }
    unsigned int v24 = v9 + v22++;
    unsigned int v9 = v24 & v8;
    uint64_t v10 = (uint64_t)&v6[4 * v9];
    uint64_t v11 = *(void *)v10;
    if (*(void *)v10 == a2) {
      goto LABEL_6;
    }
  }
  if (v21) {
    uint64_t v19 = v21;
  }
  else {
    uint64_t v19 = v10;
  }
LABEL_13:
  uint64_t v10 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v4, v19, &v30);
  uint64_t v4 = *a1;
  int v5 = **a1;
LABEL_6:
  if (v5)
  {
    int v13 = v4 + 2;
    int v12 = 4;
  }
  else
  {
    int v12 = v4[4];
    if (!v12)
    {
      uint64_t v20 = 0;
LABEL_15:
      uint64_t v16 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v4, v20, &v29);
      return *(unsigned __int16 *)(v16 + 8) < *(unsigned __int16 *)(v10 + 8);
    }
    int v13 = (_DWORD *)*((void *)v4 + 1);
  }
  int v14 = v12 - 1;
  unsigned int v15 = ((v29 >> 4) ^ (v29 >> 9)) & (v12 - 1);
  uint64_t v16 = (uint64_t)&v13[4 * v15];
  uint64_t v17 = *(void *)v16;
  if (v29 != *(void *)v16)
  {
    uint64_t v25 = 0;
    int v26 = 1;
    while (v17 != -4096)
    {
      if (v25) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = v17 == -8192;
      }
      if (v27) {
        uint64_t v25 = v16;
      }
      unsigned int v28 = v15 + v26++;
      unsigned int v15 = v28 & v14;
      uint64_t v16 = (uint64_t)&v13[4 * (v28 & v14)];
      uint64_t v17 = *(void *)v16;
      if (v29 == *(void *)v16) {
        return *(unsigned __int16 *)(v16 + 8) < *(unsigned __int16 *)(v10 + 8);
      }
    }
    if (v25) {
      uint64_t v20 = v25;
    }
    else {
      uint64_t v20 = v16;
    }
    goto LABEL_15;
  }
  return *(unsigned __int16 *)(v16 + 8) < *(unsigned __int16 *)(v10 + 8);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(char *a1, char *a2, int **a3, unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    int v5 = a5;
    int v7 = a1;
    if (a4 == 1)
    {
LABEL_15:
      *int v5 = *(void *)v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v11 = a2 - 8;
      uint64_t v10 = *((void *)a2 - 1);
      if (v10) {
        uint64_t v12 = v10 + 8;
      }
      else {
        uint64_t v12 = 0;
      }
      if (*(void *)a1) {
        uint64_t v13 = *(void *)a1 + 8;
      }
      else {
        uint64_t v13 = 0;
      }
      BOOL v14 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v12, v13);
      if (v14) {
        uint64_t v16 = v11;
      }
      else {
        uint64_t v16 = v7;
      }
      *v5++ = *(void *)v16;
      if (!v14) {
        int v7 = v11;
      }
      goto LABEL_15;
    }
    if ((uint64_t)a4 <= 8)
    {
      if (a1 == a2) {
        return result;
      }
      uint64_t v17 = a1 + 8;
      *a5 = *(void *)a1;
      if (a1 + 8 == a2) {
        return result;
      }
      uint64_t v18 = a5;
      while (1)
      {
        uint64_t v21 = v18;
        uint64_t v23 = *v18++;
        uint64_t v22 = v23;
        uint64_t v24 = *(void *)v17 ? *(void *)v17 + 8 : 0;
        uint64_t v25 = v22 ? v22 + 8 : 0;
        BOOL v26 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v24, v25);
        uint64_t v19 = v18;
        if (v26)
        {
          v21[1] = *v21;
          uint64_t v19 = v5;
          if (v21 != v5) {
            break;
          }
        }
LABEL_22:
        uint64_t v20 = *(void *)v17;
        v17 += 8;
        *uint64_t v19 = v20;
        if (v17 == a2) {
          return result;
        }
      }
      BOOL v27 = v21;
      while (1)
      {
        uint64_t v28 = *(void *)v17 + 8;
        if (!*(void *)v17) {
          uint64_t v28 = 0;
        }
        uint64_t v29 = *--v27;
        uint64_t v30 = v29 + 8;
        if (v29) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = 0;
        }
        uint64_t v90 = v31;
        uint64_t v91 = v28;
        uint64_t v32 = *a3;
        uint64_t v34 = (uint64_t)(*a3 + 2);
        int v33 = **a3;
        if (v33)
        {
          int v35 = 4;
        }
        else
        {
          int v35 = v32[4];
          if (!v35)
          {
            uint64_t v46 = 0;
            goto LABEL_51;
          }
          uint64_t v34 = *((void *)v32 + 1);
        }
        int v36 = v35 - 1;
        unsigned int v37 = v36 & ((v28 >> 4) ^ (v28 >> 9));
        uint64_t v38 = v34 + 16 * v37;
        uint64_t v39 = *(void *)v38;
        if (*(void *)v38 == v28) {
          goto LABEL_42;
        }
        uint64_t v48 = 0;
        int v49 = 1;
        while (v39 != -4096)
        {
          if (v48) {
            BOOL v50 = 0;
          }
          else {
            BOOL v50 = v39 == -8192;
          }
          if (v50) {
            uint64_t v48 = v38;
          }
          unsigned int v51 = v37 + v49++;
          unsigned int v37 = v51 & v36;
          uint64_t v38 = v34 + 16 * v37;
          uint64_t v39 = *(void *)v38;
          if (*(void *)v38 == v28) {
            goto LABEL_42;
          }
        }
        if (v48) {
          uint64_t v46 = v48;
        }
        else {
          uint64_t v46 = v38;
        }
LABEL_51:
        uint64_t v38 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v32, v46, &v91);
        uint64_t v32 = *a3;
        int v33 = **a3;
LABEL_42:
        if (v33)
        {
          uint64_t v41 = v32 + 2;
          int v40 = 4;
        }
        else
        {
          int v40 = v32[4];
          if (!v40)
          {
            uint64_t v47 = 0;
LABEL_53:
            uint64_t v44 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>((uint64_t)v32, v47, &v90);
            goto LABEL_47;
          }
          uint64_t v41 = (int *)*((void *)v32 + 1);
        }
        int v42 = v40 - 1;
        unsigned int v43 = ((v90 >> 4) ^ (v90 >> 9)) & (v40 - 1);
        uint64_t v44 = (uint64_t)&v41[4 * v43];
        uint64_t v45 = *(void *)v44;
        if (v90 != *(void *)v44)
        {
          uint64_t v52 = 0;
          int v53 = 1;
          while (v45 != -4096)
          {
            if (v52) {
              BOOL v54 = 0;
            }
            else {
              BOOL v54 = v45 == -8192;
            }
            if (v54) {
              uint64_t v52 = v44;
            }
            unsigned int v55 = v43 + v53++;
            unsigned int v43 = v55 & v42;
            uint64_t v44 = (uint64_t)&v41[4 * (v55 & v42)];
            uint64_t v45 = *(void *)v44;
            if (v90 == *(void *)v44) {
              goto LABEL_47;
            }
          }
          if (v52) {
            uint64_t v47 = v52;
          }
          else {
            uint64_t v47 = v44;
          }
          goto LABEL_53;
        }
LABEL_47:
        if (*(unsigned __int16 *)(v44 + 8) >= *(unsigned __int16 *)(v38 + 8))
        {
          uint64_t v19 = v21;
          goto LABEL_22;
        }
        *uint64_t v21 = *(v21 - 1);
        uint64_t v21 = v27;
        if (v27 == v5)
        {
          uint64_t v19 = v5;
          goto LABEL_22;
        }
      }
    }
    unint64_t v56 = a4 >> 1;
    uint64_t v57 = 8 * (a4 >> 1);
    BOOL v58 = &a1[v57];
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(a1, &a1[v57], a3, a4 >> 1, a5, a4 >> 1);
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(&v7[v57], a2, a3, a4 - v56, &v5[(unint64_t)v57 / 8], a4 - v56);
    unsigned int v59 = (char *)v5;
    uint64_t v60 = v7;
    uint64_t v61 = v58;
    do
    {
      if (v61 == a2)
      {
        if (v60 == v58) {
          return result;
        }
        unint64_t v80 = &v7[8 * v56] - v60 - 8;
        if (v80 >= 0x38 && (unint64_t)(v59 - v60) >= 0x20)
        {
          uint64_t v84 = 0;
          uint64_t v85 = (v80 >> 3) + 1;
          uint64_t v86 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          int v81 = &v5[v86];
          BOOL v82 = &v60[v86 * 8];
          uint64_t v87 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v88 = &v5[v84];
            __n128 result = *(__n128 *)&v60[v84 * 8];
            long long v89 = *(_OWORD *)&v60[v84 * 8 + 16];
            *(__n128 *)uint64_t v88 = result;
            *((_OWORD *)v88 + 1) = v89;
            v84 += 4;
            v87 -= 4;
          }
          while (v87);
          if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
        }
        else
        {
          int v81 = v5;
          BOOL v82 = v60;
        }
        do
        {
          uint64_t v83 = *(void *)v82;
          v82 += 8;
          *v81++ = v83;
        }
        while (v82 != v58);
        return result;
      }
      uint64_t v62 = v61;
      uint64_t v63 = *(void *)v61;
      if (v63) {
        uint64_t v64 = v63 + 8;
      }
      else {
        uint64_t v64 = 0;
      }
      if (*(void *)v60) {
        uint64_t v65 = *(void *)v60 + 8;
      }
      else {
        uint64_t v65 = 0;
      }
      BOOL v66 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a3, v64, v65);
      if (v66) {
        uint64_t v67 = v62;
      }
      else {
        uint64_t v67 = v60;
      }
      uint64_t v61 = &v62[8 * v66];
      v60 += 8 * !v66;
      *v5++ = *(void *)v67;
      v59 += 8;
    }
    while (v60 != v58);
    if (v61 != a2)
    {
      uint64_t v68 = -8;
      if (!v66) {
        uint64_t v68 = 0;
      }
      unint64_t v69 = a2 - v62 + v68 - 8;
      if (v69 < 0x68) {
        goto LABEL_113;
      }
      uint64_t v70 = 8;
      if (!v66) {
        uint64_t v70 = 0;
      }
      if ((unint64_t)(v59 - v62 - v70) < 0x20) {
        goto LABEL_113;
      }
      uint64_t v71 = 0;
      uint64_t v72 = (v69 >> 3) + 1;
      uint64_t v73 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      long long v74 = &v5[v73];
      unsigned int v75 = &v61[v73 * 8];
      uint64_t v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v77 = &v5[v71];
        __n128 result = *(__n128 *)&v61[v71 * 8];
        long long v78 = *(_OWORD *)&v61[v71 * 8 + 16];
        *(__n128 *)uint64_t v77 = result;
        *((_OWORD *)v77 + 1) = v78;
        v71 += 4;
        v76 -= 4;
      }
      while (v76);
      int v5 = v74;
      uint64_t v61 = v75;
      if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_113:
        do
        {
          uint64_t v79 = *(void *)v61;
          v61 += 8;
          *v5++ = v79;
        }
        while (v61 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(uint64_t result, char *a2, char *a3, int **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v10 = a6;
  unsigned int v15 = (char *)result;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    while (1)
    {
      uint64_t v18 = *(void *)a2 ? *(void *)a2 + 8 : 0;
      uint64_t v19 = *(void *)&v15[8 * v17];
      uint64_t v20 = v19 ? v19 + 8 : 0;
      __n128 result = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a4, v18, v20);
      if (result) {
        break;
      }
      ++v17;
      v16 -= 8;
      if (a5 == v17) {
        return result;
      }
    }
    __n128 result = (uint64_t)&v15[-v16];
    BOOL v133 = a3;
    uint64_t v134 = v10;
    if (a5 - v17 >= v10)
    {
      if (a5 - 1 == v17)
      {
        uint64_t v111 = *(void *)&v15[8 * v17];
        *(void *)&v15[8 * v17] = *(void *)a2;
        *(void *)a2 = v111;
        return result;
      }
      uint64_t v124 = a8;
      uint64_t v33 = (a5 - v17) / 2;
      uint64_t v34 = &v15[8 * v33];
      unsigned int v135 = *a4;
      if (a3 == a2)
      {
        uint64_t v23 = a3;
      }
      else
      {
        long long v127 = &v15[-v16];
        uint64_t v130 = a7;
        unint64_t v35 = (a3 - a2) >> 3;
        uint64_t v23 = a2;
        do
        {
          int v36 = &v23[8 * (v35 >> 1)];
          uint64_t v38 = *(void *)v36;
          unsigned int v37 = v36 + 8;
          uint64_t v39 = *(void *)&v34[8 * v17];
          uint64_t v40 = v38 + 8;
          if (v38) {
            uint64_t v41 = v40;
          }
          else {
            uint64_t v41 = 0;
          }
          if (v39) {
            uint64_t v42 = v39 + 8;
          }
          else {
            uint64_t v42 = 0;
          }
          BOOL v43 = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(&v135, v41, v42);
          if (v43) {
            v35 += ~(v35 >> 1);
          }
          else {
            v35 >>= 1;
          }
          if (v43) {
            uint64_t v23 = v37;
          }
        }
        while (v35);
        __n128 result = (uint64_t)v127;
        a7 = v130;
        uint64_t v33 = (a5 - v17) / 2;
      }
      BOOL v26 = &v34[-v16];
      uint64_t v22 = (v23 - a2) >> 3;
      a8 = v124;
      a3 = v23;
      if (v26 != a2)
      {
LABEL_53:
        a3 = v26;
        if (a2 != v23)
        {
          if (v26 + 8 == a2)
          {
            uint64_t v131 = a7;
            uint64_t v125 = a8;
            uint64_t v51 = *(void *)v26;
            int64_t v52 = v23 - a2;
            uint64_t v53 = result;
            BOOL v54 = a2;
            size_t v55 = v23 - a2;
            uint64_t v56 = v33;
            uint64_t v57 = v22;
            memmove(v26, v54, v55);
            uint64_t v22 = v57;
            uint64_t v33 = v56;
            __n128 result = v53;
            a3 = &v26[v52];
            *(void *)&v26[v52] = v51;
            a8 = v125;
            a7 = v131;
          }
          else if (a2 + 8 == v23)
          {
            uint64_t v58 = *((void *)v23 - 1);
            a3 = v26 + 8;
            if (v23 - 8 != v26)
            {
              uint64_t v128 = result;
              uint64_t v132 = *((void *)v23 - 1);
              uint64_t v59 = v33;
              uint64_t v60 = v22;
              memmove(v26 + 8, v26, v23 - 8 - v26);
              __n128 result = v128;
              uint64_t v58 = v132;
              uint64_t v22 = v60;
              uint64_t v33 = v59;
            }
            *(void *)BOOL v26 = v58;
          }
          else
          {
            uint64_t v44 = (a2 - v26) >> 3;
            uint64_t v45 = (v23 - a2) >> 3;
            if (v44 == v45)
            {
              uint64_t v46 = 0;
              do
              {
                uint64_t v47 = *(void *)&v26[v46];
                *(void *)&v26[v46] = *(void *)&a2[v46];
                uint64_t v48 = (uint64_t)&v26[v46 + 8];
                *(void *)&a2[v46] = v47;
                uint64_t v49 = (uint64_t)&a2[v46 + 8];
                v46 += 8;
              }
              while ((char *)v48 != a2 && v49 != (void)v23);
              a3 = a2;
            }
            else
            {
              uint64_t v61 = (v23 - a2) >> 3;
              uint64_t v62 = (a2 - v26) >> 3;
              do
              {
                uint64_t v63 = v62;
                uint64_t v62 = v61;
                uint64_t v61 = v63 % v61;
              }
              while (v61);
              if (v62)
              {
                uint64_t v64 = &v26[8 * v62];
                do
                {
                  uint64_t v66 = *((void *)v64 - 1);
                  v64 -= 8;
                  uint64_t v65 = v66;
                  uint64_t v67 = &v64[8 * v44];
                  uint64_t v68 = v64;
                  do
                  {
                    unint64_t v69 = v68;
                    uint64_t v68 = v67;
                    *(void *)unint64_t v69 = *(void *)v67;
                    uint64_t v70 = (v23 - v67) >> 3;
                    BOOL v71 = __OFSUB__(v44, v70);
                    uint64_t v73 = v44 - v70;
                    char v72 = (v73 < 0) ^ v71;
                    uint64_t v67 = &v26[8 * v73];
                    if (v72) {
                      uint64_t v67 = &v68[8 * v44];
                    }
                  }
                  while (v67 != v64);
                  *(void *)uint64_t v68 = v65;
                }
                while (v64 != v26);
              }
              a3 = &v26[8 * v45];
            }
          }
        }
      }
    }
    else
    {
      if (v10 >= 0) {
        uint64_t v21 = v10;
      }
      else {
        uint64_t v21 = v10 + 1;
      }
      uint64_t v22 = v21 >> 1;
      uint64_t v23 = &a2[8 * (v21 >> 1)];
      if ((char *)result == a2)
      {
        BOOL v26 = a2;
        uint64_t v33 = (uint64_t)&a2[-result] >> 3;
        a3 = &a2[8 * (v21 >> 1)];
      }
      else
      {
        uint64_t v123 = v21 >> 1;
        long long v126 = &v15[-v16];
        uint64_t v129 = a7;
        uint64_t v24 = a8;
        unint64_t v25 = (uint64_t)(a2 - v15 + v16) >> 3;
        BOOL v26 = (char *)result;
        do
        {
          BOOL v27 = &v26[8 * (v25 >> 1)];
          uint64_t v30 = *(void *)v27;
          uint64_t v29 = v27 + 8;
          uint64_t v28 = v30;
          if (*(void *)v23) {
            uint64_t v31 = *(void *)v23 + 8;
          }
          else {
            uint64_t v31 = 0;
          }
          if (v28) {
            uint64_t v32 = v28 + 8;
          }
          else {
            uint64_t v32 = 0;
          }
          if (mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a4, v31, v32))
          {
            v25 >>= 1;
          }
          else
          {
            BOOL v26 = v29;
            v25 += ~(v25 >> 1);
          }
        }
        while (v25);
        a8 = v24;
        __n128 result = (uint64_t)v126;
        a7 = v129;
        uint64_t v22 = v123;
        uint64_t v33 = (v26 - v126) >> 3;
        a3 = v23;
        if (v26 != a2) {
          goto LABEL_53;
        }
      }
    }
    uint64_t v74 = a5 - v33 - v17;
    uint64_t v75 = v134 - v22;
    if (v33 + v22 >= v134 + a5 - (v33 + v22) - v17)
    {
      uint64_t v77 = (char *)result;
      a5 = v33;
      uint64_t v78 = v74;
      uint64_t v79 = v22;
      __n128 result = std::__inplace_merge<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(a3, v23, v133, a4, v78, v134 - v22, a7, a8);
      unint64_t v80 = v26;
      uint64_t v81 = v79;
      unsigned int v15 = v77;
      a2 = v80;
      uint64_t v10 = v81;
      if (!v81) {
        return result;
      }
    }
    else
    {
      __n128 result = std::__inplace_merge<std::_ClassicAlgPolicy,mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0 &,mlir::RewritePattern const**>(result, v26, a3, a4, v33, v22, a7, a8);
      uint64_t v76 = a3;
      a3 = v133;
      a5 = v74;
      unsigned int v15 = v76;
      a2 = v23;
      uint64_t v10 = v75;
      if (!v75) {
        return result;
      }
    }
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      unint64_t v98 = a2 - v15 - 8;
      unint64_t v99 = a7;
      BOOL v100 = v15;
      if (v98 < 0x18) {
        goto LABEL_143;
      }
      unint64_t v99 = a7;
      BOOL v100 = v15;
      if ((unint64_t)(a7 - v15) < 0x20) {
        goto LABEL_143;
      }
      uint64_t v101 = (v98 >> 3) + 1;
      uint64_t v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v99 = &a7[v102];
      BOOL v100 = &v15[v102];
      uint64_t v103 = (long long *)(v15 + 16);
      unint64_t v104 = a7 + 16;
      uint64_t v105 = v101 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v106 = *v103;
        *(v104 - 1) = *(v103 - 1);
        *unint64_t v104 = v106;
        v103 += 2;
        v104 += 2;
        v105 -= 4;
      }
      while (v105);
      if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_143:
        do
        {
          uint64_t v107 = *(void *)v100;
          v100 += 8;
          *(void *)unint64_t v99 = v107;
          v99 += 8;
        }
        while (v100 != a2);
      }
      if (v99 != a7)
      {
        while (a2 != a3)
        {
          if (*(void *)a2) {
            uint64_t v108 = *(void *)a2 + 8;
          }
          else {
            uint64_t v108 = 0;
          }
          if (*(void *)a7) {
            uint64_t v109 = *(void *)a7 + 8;
          }
          else {
            uint64_t v109 = 0;
          }
          __n128 result = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a4, v108, v109);
          if (result) {
            uint64_t v110 = a2;
          }
          else {
            uint64_t v110 = a7;
          }
          a7 += 8 * (result ^ 1);
          a2 += 8 * result;
          *(void *)unsigned int v15 = *(void *)v110;
          v15 += 8;
          if (a7 == v99) {
            return result;
          }
        }
        return (uint64_t)memmove(v15, a7, v99 - a7);
      }
    }
  }
  else if (a2 != a3)
  {
    unint64_t v82 = a3 - a2 - 8;
    uint64_t v83 = a7;
    uint64_t v84 = a2;
    if (v82 < 0x18) {
      goto LABEL_144;
    }
    uint64_t v83 = a7;
    uint64_t v84 = a2;
    if ((unint64_t)(a7 - a2) < 0x20) {
      goto LABEL_144;
    }
    uint64_t v85 = (v82 >> 3) + 1;
    uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v83 = &a7[v86];
    uint64_t v84 = &a2[v86];
    uint64_t v87 = (long long *)(a2 + 16);
    uint64_t v88 = a7 + 16;
    uint64_t v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v90 = *v87;
      *(v88 - 1) = *(v87 - 1);
      *uint64_t v88 = v90;
      v87 += 2;
      v88 += 2;
      v89 -= 4;
    }
    while (v89);
    if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_144:
      do
      {
        uint64_t v91 = *(void *)v84;
        v84 += 8;
        *(void *)uint64_t v83 = v91;
        v83 += 8;
      }
      while (v84 != a3);
    }
    if (v83 != a7)
    {
      uint64_t v92 = a3;
      while (a2 != v15)
      {
        uint64_t v93 = *((void *)a2 - 1);
        uint64_t v94 = *((void *)v83 - 1);
        if (v94) {
          uint64_t v95 = v94 + 8;
        }
        else {
          uint64_t v95 = 0;
        }
        if (v93) {
          uint64_t v96 = v93 + 8;
        }
        else {
          uint64_t v96 = 0;
        }
        __n128 result = mlir::PatternApplicator::applyCostModel(llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>)::$_0::operator()(a4, v95, v96);
        if (result) {
          unsigned int v97 = a2;
        }
        else {
          unsigned int v97 = v83;
        }
        if (result) {
          a2 -= 8;
        }
        else {
          v83 -= 8;
        }
        *((void *)a3 - 1) = *((void *)v97 - 1);
        a3 -= 8;
        v92 -= 8;
        if (v83 == a7) {
          return result;
        }
      }
      unint64_t v112 = v83 - a7 - 8;
      if (v112 < 0x58 || (unint64_t)(v83 - v92) < 0x20)
      {
        int v113 = v83;
        uint64_t v114 = a3;
        goto LABEL_132;
      }
      uint64_t v117 = 0;
      uint64_t v118 = (v112 >> 3) + 1;
      uint64_t v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
      int v113 = &v83[-v119];
      uint64_t v114 = &a3[-v119];
      uint64_t v120 = v118 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v121 = *(_OWORD *)&v83[v117 - 16];
        unsigned int v122 = &a3[v117];
        *((_OWORD *)v122 - 2) = *(_OWORD *)&v83[v117 - 32];
        *((_OWORD *)v122 - 1) = v121;
        v117 -= 32;
        v120 -= 4;
      }
      while (v120);
      if (v118 != (v118 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_132:
        uint64_t v115 = v114 - 8;
        do
        {
          uint64_t v116 = *((void *)v113 - 1);
          v113 -= 8;
          *(void *)uint64_t v115 = v116;
          v115 -= 8;
        }
        while (v113 != a7);
      }
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>,mlir::Pattern const*,mlir::PatternBenefit,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::InsertIntoBucket<mlir::Pattern const* const&>(uint64_t a1, uint64_t a2, void *a3)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    int v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::Pattern const*,mlir::PatternBenefit,4u,llvm::DenseMapInfo<mlir::Pattern const*,void>,llvm::detail::DenseMapPair<mlir::Pattern const*,mlir::PatternBenefit>>::grow(a1, v8);
  uint64_t v11 = a1 + 8;
  int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v12 = 4;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
    {
      int v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v11 = *(void *)(a1 + 8);
  }
  int v9 = *(_DWORD *)a1 & 1;
  int v13 = v12 - 1;
  unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v12 - 1);
  a2 = v11 + 16 * v14;
  uint64_t v15 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -8192;
      }
      if (v18) {
        uint64_t v16 = a2;
      }
      unsigned int v19 = v14 + v17++;
      unsigned int v14 = v19 & v13;
      a2 = v11 + 16 * (v19 & v13);
      uint64_t v15 = *(void *)a2;
      if (*a3 == *(void *)a2) {
        goto LABEL_7;
      }
    }
    if (v16) {
      a2 = v16;
    }
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*(void *)a2 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *(void *)a2 = *a3;
  *(_WORD *)(a2 + 8) = -1;
  return a2;
}

void mlir::detail::PDLByteCodeMutableState::~PDLByteCodeMutableState(mlir::detail::PDLByteCodeMutableState *this)
{
  unsigned int v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 15);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 16);
    int v6 = (void *)*((void *)this + 15);
    if (v5 != v4)
    {
      do
      {
        unsigned int v8 = *(void **)(v5 - 16);
        v5 -= 16;
        int v7 = v8;
        if (v8) {
          operator delete[](v7);
        }
      }
      while (v5 != v4);
      int v6 = (void *)*((void *)this + 15);
    }
    *((void *)this + 16) = v4;
    operator delete(v6);
  }
  int v9 = (void *)*((void *)this + 12);
  if (v9)
  {
    *((void *)this + 13) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *((void *)this + 9);
  if (v10)
  {
    uint64_t v11 = *((void *)this + 10);
    int v12 = (void *)*((void *)this + 9);
    if (v11 != v10)
    {
      do
      {
        unsigned int v14 = *(void **)(v11 - 16);
        v11 -= 16;
        int v13 = v14;
        if (v14) {
          operator delete[](v13);
        }
      }
      while (v11 != v10);
      int v12 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v10;
    operator delete(v12);
  }
  uint64_t v15 = (void *)*((void *)this + 6);
  if (v15)
  {
    *((void *)this + 7) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *((void *)this + 3);
  if (v16)
  {
    uint64_t v17 = *((void *)this + 4);
    BOOL v18 = (void *)*((void *)this + 3);
    if (v17 != v16)
    {
      do
      {
        uint64_t v20 = *(void **)(v17 - 16);
        v17 -= 16;
        unsigned int v19 = v20;
        if (v20) {
          operator delete[](v19);
        }
      }
      while (v17 != v16);
      BOOL v18 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v16;
    operator delete(v18);
  }
  uint64_t v21 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v21;
    operator delete(v21);
  }
}

void llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::shrink_and_clear(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *(void *)a1 + 24;
    uint64_t v5 = 40 * v2;
    do
    {
      if ((*(void *)(v4 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v6 = *(void **)(v4 - 16);
        if ((void *)v4 != v6) {
          free(v6);
        }
      }
      v4 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  int v7 = 1 << (33 - __clz(v3 - 1));
  if (v7 <= 64) {
    int v7 = 64;
  }
  if (v3) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 != *(_DWORD *)(a1 + 16)) {
    llvm::deallocate_buffer(*(llvm **)a1, (void *)(40 * v2));
  }
  *(void *)(a1 + 8) = 0;
  if (v8)
  {
    int v9 = *(llvm **)a1;
    unint64_t v10 = 40 * v8 - 40;
    if (v10 < 0x28)
    {
      uint64_t v11 = *(llvm **)a1;
LABEL_20:
      uint64_t v15 = (llvm *)((char *)v9 + 40 * v8);
      do
      {
        *(void *)uint64_t v11 = -4096;
        uint64_t v11 = (llvm *)((char *)v11 + 40);
      }
      while (v11 != v15);
      return;
    }
    unint64_t v12 = v10 / 0x28 + 1;
    uint64_t v11 = (llvm *)((char *)v9 + 40 * (v12 & 0xFFFFFFFFFFFFFFELL));
    uint64_t v13 = v12 & 0xFFFFFFFFFFFFFFELL;
    unsigned int v14 = *(llvm **)a1;
    do
    {
      *(void *)unsigned int v14 = -4096;
      *((void *)v14 + 5) = -4096;
      unsigned int v14 = (llvm *)((char *)v14 + 80);
      v13 -= 2;
    }
    while (v13);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_20;
    }
  }
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>,mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    unint64_t v8 = 40 * v6 - 40;
    if (v8 < 0x28)
    {
      int v9 = *(void **)a1;
LABEL_7:
      uint64_t v13 = &v7[5 * v6];
      do
      {
        void *v9 = -4096;
        v9 += 5;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x28 + 1;
    int v9 = &v7[5 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    unint64_t v12 = *(void **)a1;
    do
    {
      *unint64_t v12 = -4096;
      v12[5] = -4096;
      v12 += 10;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      uint64_t v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v15 = *(_DWORD *)(a1 + 16) - 1;
        unsigned int v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
        uint64_t v17 = (void *)(*(void *)a1 + 40 * v16);
        uint64_t v18 = *v17;
        if (v14 != *v17)
        {
          uint64_t v20 = 0;
          int v21 = 1;
          while (v18 != -4096)
          {
            if (v20) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v18 == -8192;
            }
            if (v22) {
              uint64_t v20 = v17;
            }
            unsigned int v23 = v16 + v21++;
            unsigned int v16 = v23 & v15;
            uint64_t v17 = (void *)(*(void *)a1 + 40 * (v23 & v15));
            uint64_t v18 = *v17;
            if (v14 == *v17) {
              goto LABEL_14;
            }
          }
          if (v20) {
            uint64_t v17 = v20;
          }
        }
LABEL_14:
        void *v17 = v14;
        v17[1] = v17 + 3;
        void v17[2] = 0x200000000;
        if (*((_DWORD *)v4 + 4)) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v17 + 1), (uint64_t)(v4 + 1));
        }
        ++*(_DWORD *)(a1 + 8);
        unsigned int v19 = (uint64_t *)v4[1];
        if (v19 != v4 + 3) {
          free(v19);
        }
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
}

uint64_t mlir::MLIRContext::executeActionInternal<mlir::ApplyPatternAction,mlir::Pattern const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  {
    uint64_t v21 = a3;
    BOOL v22 = a1;
    uint64_t v19 = a6;
    uint64_t v20 = a2;
    uint64_t v17 = a4;
    uint64_t v18 = a5;
    a4 = v17;
    a5 = v18;
    a6 = v19;
    a2 = v20;
    int v9 = v8;
    a3 = v21;
    a1 = v22;
    if (v9)
    {
      unsigned int v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ApplyPatternAction]";
      unint64_t v24 = 74;
      unint64_t v10 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v10) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = v24;
      }
      unint64_t v12 = &v23[v11];
      unint64_t v13 = v24 - v11;
      if (v24 - v11 >= 0x12) {
        uint64_t v14 = 18;
      }
      else {
        uint64_t v14 = v24 - v11;
      }
      unint64_t v15 = v13 - v14;
      if (v15 >= v15 - 1) {
        uint64_t v16 = v15 - 1;
      }
      else {
        uint64_t v16 = v15;
      }
      mlir::detail::TypeIDResolver<mlir::ApplyPatternAction,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      a4 = v17;
      a5 = v18;
      a6 = v19;
      a2 = v20;
      a3 = v21;
      a1 = v22;
    }
  }
  unint64_t v24 = v6[55];
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  unsigned int v23 = (const char *)&unk_1EC9AABB8;
  return mlir::MLIRContext::executeActionInternal(a1, a2, a3, (uint64_t)&v23);
}

const char *mlir::tracing::ActionImpl<mlir::ApplyPatternAction>::getTag()
{
  return "apply-pattern";
}

llvm::raw_ostream *mlir::ApplyPatternAction::print(mlir::ApplyPatternAction *this, llvm::raw_ostream *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v4)
  {
    unsigned int v6 = (void *)*((void *)v2 + 4);
    if (*((void *)v2 + 3) - (void)v6 <= 0xCuLL)
    {
LABEL_3:
      uint64_t v2 = llvm::raw_ostream::write(v2, "apply-pattern", 0xDuLL);
      uint64_t v7 = *((void *)v2 + 4);
      if ((unint64_t)(*((void *)v2 + 3) - v7) > 9) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    *uint64_t v4 = 96;
    uint64_t v5 = *((void *)a2 + 3);
    unsigned int v6 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v6;
    if ((unint64_t)(v5 - (void)v6) <= 0xC) {
      goto LABEL_3;
    }
  }
  qmemcpy(v6, "apply-pattern", 13);
  uint64_t v12 = *((void *)v2 + 3);
  uint64_t v7 = *((void *)v2 + 4) + 13;
  *((void *)v2 + 4) = v7;
  if ((unint64_t)(v12 - v7) > 9)
  {
LABEL_4:
    *(_WORD *)(v7 + 8) = 8250;
    *(void *)uint64_t v7 = *(void *)" pattern: ";
    __n128 result = (llvm::raw_ostream *)(*((void *)v2 + 4) + 10);
    *((void *)v2 + 4) = result;
    uint64_t v9 = *((void *)this + 4);
    unint64_t v10 = *(const void **)(v9 + 56);
    size_t v11 = *(void *)(v9 + 64);
    if (v11 <= *((void *)v2 + 3) - (void)result) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v2 = llvm::raw_ostream::write(v2, " pattern: ", 0xAuLL);
  __n128 result = (llvm::raw_ostream *)*((void *)v2 + 4);
  uint64_t v13 = *((void *)this + 4);
  unint64_t v10 = *(const void **)(v13 + 56);
  size_t v11 = *(void *)(v13 + 64);
  if (v11 <= *((void *)v2 + 3) - (void)result)
  {
LABEL_5:
    if (v11)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v11);
      *((void *)v2 + 4) += v11;
    }
    return result;
  }
LABEL_11:

  return llvm::raw_ostream::write(v2, (const char *)v10, v11);
}

uint64_t llvm::function_ref<void ()(void)>::callback_fn<mlir::PatternApplicator::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &,llvm::function_ref<BOOL ()(mlir::Pattern const&)>,llvm::function_ref<void ()(mlir::Pattern const&)>,llvm::function_ref<mlir::LogicalResult ()(mlir::Pattern const&)>)::$_0>(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v4 = *a1;
  int v3 = (mlir::GenericProgramPoint **)a1[1];
  uint64_t v5 = *((void *)*v3 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(*v3);
  *(void *)(v4 + 24) = v5;
  *(void *)(v4 + 32) = v6;
  uint64_t v7 = *(void *)a1[2];
  if (v7)
  {
    uint64_t result = mlir::detail::PDLByteCode::rewrite(*(void *)a1[4], *a1, v7, *(void *)(v2 + 56));
    *(unsigned char *)a1[3] = result;
    if (!(_BYTE)result) {
      goto LABEL_13;
    }
LABEL_8:
    uint64_t v11 = a1[7];
    if (*(void *)v11)
    {
      uint64_t result = (*(uint64_t (**)(void, void))v11)(*(void *)(v11 + 8), *(void *)a1[6]);
      uint64_t v12 = (unsigned char *)a1[3];
      if (!(_BYTE)result)
      {
        *uint64_t v12 = 0;
        goto LABEL_13;
      }
      if (!*v12) {
        goto LABEL_13;
      }
    }
    *(unsigned char *)a1[8] = 1;
    return result;
  }
  uint64_t v9 = *(void *)a1[6];
  if (v9) {
    uint64_t v10 = v9 - 8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v10 + 32))(v10, *(void *)a1[1], *a1);
  *(unsigned char *)a1[3] = result;
  if ((_BYTE)result) {
    goto LABEL_8;
  }
LABEL_13:
  uint64_t v13 = a1[9];
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))v13;
  if (*(void *)v13)
  {
    uint64_t v15 = *(void *)a1[6];
    uint64_t v16 = *(void *)(v13 + 8);
    return v14(v16, v15);
  }
  return result;
}

const char *mlir::scf::SCFDialect::initialize(mlir::scf::SCFDialect *this)
{
  mlir::Dialect::addOperations<mlir::scf::ConditionOp,mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::ForallOp,mlir::scf::IfOp,mlir::scf::InParallelOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::ReduceOp,mlir::scf::ReduceReturnOp,mlir::scf::WhileOp,mlir::scf::YieldOp>((uint64_t)this);
  uint64_t v2 = (char *)operator new(0x18uLL);
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = v2;
    unint64_t v3 = 0x1E8EB8000;
    int v7 = v6;
    uint64_t v2 = v15;
    if (v7)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectInlinerInterface]";
      unint64_t v17 = 79;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      uint64_t v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::DialectInlinerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v15;
    }
  }
  uint64_t v4 = *(void *)(v3 + 3896);
  *((void *)v2 + 1) = this;
  *((void *)v2 + 2) = v4;
  *(void *)uint64_t v2 = &unk_1EC99A258;
  uint64_t v16 = v2;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v16);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result) {
    return (const char *)(*(uint64_t (**)(const char *))(*(void *)result + 8))(result);
  }
  return result;
}

mlir::scf::SCFDialect *mlir::scf::SCFDialect::SCFDialect(mlir::scf::SCFDialect *this, mlir::MLIRContext *a2)
{
  unint64_t v3 = (void *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"scf", 3, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::SCFDialect,void>::id);
  *unint64_t v3 = &unk_1EC9CAB70;
  uint64_t v4 = (uint64_t *)v3[4];
  if (!mlir::MLIRContext::isDialectLoading(v4, (uint64_t)"arith", 5))
  {
    int v6 = v4;
    mlir::MLIRContext::getOrLoadDialect(v4, (uint64_t)"arith", 5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ArithDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::arith::ArithDialect * mlir::MLIRContext::getOrLoadDialect<mlir::arith::ArithDialect>(void)::{lambda(void)#1}>, (uint64_t)&v6);
  }
  mlir::scf::SCFDialect::initialize(this);
  return this;
}

void mlir::scf::SCFDialect::~SCFDialect(llvm **this)
{
}

void sub_1806E2800(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::Dialect::addOperations<mlir::scf::ConditionOp,mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::ForallOp,mlir::scf::IfOp,mlir::scf::InParallelOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::ReduceOp,mlir::scf::ReduceReturnOp,mlir::scf::WhileOp,mlir::scf::YieldOp>(uint64_t a1)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v14 = mlir::RegisteredOperationName::Model<mlir::scf::ConditionOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v14, 0, 0);
  uint64_t v3 = (uint64_t)v14;
  uint64_t v14 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  mlir::RegisteredOperationName::insert<mlir::scf::ExecuteRegionOp>(a1);
  uint64_t v4 = operator new(0x70uLL);
  uint64_t v14 = mlir::RegisteredOperationName::Model<mlir::scf::ForOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v14, 0, 0);
  uint64_t v5 = (uint64_t)v14;
  uint64_t v14 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  int v6 = operator new(0x70uLL);
  uint64_t v14 = mlir::RegisteredOperationName::Model<mlir::scf::ForallOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v14, (uint64_t)&mlir::scf::ForallOp::getAttributeNames(void)::attrNames, 5);
  uint64_t v7 = (uint64_t)v14;
  uint64_t v14 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  mlir::RegisteredOperationName::insert<mlir::scf::IfOp>(a1);
  unint64_t v8 = operator new(0x70uLL);
  uint64_t v14 = mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v14, 0, 0);
  uint64_t v9 = (uint64_t)v14;
  uint64_t v14 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  mlir::RegisteredOperationName::insert<mlir::scf::IndexSwitchOp>(a1);
  uint64_t v10 = operator new(0x70uLL);
  uint64_t v14 = mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::Model(v10, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v14, (uint64_t)&mlir::scf::ParallelOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v11 = (uint64_t)v14;
  uint64_t v14 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  mlir::RegisteredOperationName::insert<mlir::scf::ReduceOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::scf::ReduceReturnOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::scf::WhileOp>(a1);
  uint64_t v12 = operator new(0x70uLL);
  uint64_t v14 = mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::Model(v12, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v14, 0, 0);
  uint64_t result = (uint64_t)v14;
  uint64_t v14 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

BOOL mlir::scf::ExecuteRegionOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 536))(a1, (uint64_t)a2 + 64)
    && (uint64_t v4 = mlir::OperationState::addRegion(a2),
        (*(unsigned __int8 (**)(uint64_t, uint64_t, void, void, void))(*(void *)a1 + 744))(a1, v4, 0, 0, 0)))
  {
    return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, (uint64_t)a2 + 112) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::scf::ExecuteRegionOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4 = *((unsigned int *)*this + 9);
  uint64_t v5 = (uint64_t)*this - 16;
  if (!v4) {
    uint64_t v5 = 0;
  }
  v18[0] = v5;
  v18[1] = v4;
  mlir::OperandRange::getTypes(v18, v17);
  if (v17[0] != v17[2] || v17[1] != v17[3]) {
    mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>((uint64_t)a2, v17);
  }
  uint64_t v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v8 = (unsigned char *)*((void *)v7 + 4);
  if ((unint64_t)v8 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 32);
    uint64_t v9 = *this;
    unint64_t v10 = *((unsigned int *)*this + 11);
    if ((v10 & 0x7FFFFF) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    *((void *)v7 + 4) = v8 + 1;
    *unint64_t v8 = 32;
    uint64_t v9 = *this;
    unint64_t v10 = *((unsigned int *)*this + 11);
    if ((v10 & 0x7FFFFF) != 0)
    {
LABEL_10:
      unint64_t v11 = (((unint64_t)v9 + 16 * ((v10 >> 23) & 1) + ((v10 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v9 + 10);
      goto LABEL_13;
    }
  }
  unint64_t v11 = 0;
LABEL_13:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, uint64_t, void))(*(void *)a2 + 224))(a2, v11, 0, 1, 0);
  uint64_t v12 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v17[0] = mlir::Operation::getAttrDictionary(v12);
    unint64_t v13 = (mlir::ArrayAttr *)v17;
  }
  else
  {
    unint64_t v13 = (mlir::Operation *)((char *)v12 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v13);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v15, 0, 0);
}

uint64_t mlir::scf::ExecuteRegionOp::verify(uint64_t **this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
                  + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                  + 7) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *((unsigned int *)*this + 10));
  if ((void *)*v1 == v1)
  {
    v20[0] = (const void **)"region needs to have at least one block";
    __int16 v21 = 259;
    mlir::OpState::emitOpError(this, v20, (uint64_t)v22);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      unint64_t v13 = (void **)__p;
      if (__p)
      {
        uint64_t v14 = v28;
        uint64_t v15 = __p;
        if (v28 != __p)
        {
          do
            uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          uint64_t v15 = __p;
        }
        uint64_t v28 = v13;
        operator delete(v15);
      }
      unint64_t v8 = v25;
      if (!v25) {
        goto LABEL_37;
      }
      uint64_t v16 = v26;
      unint64_t v10 = v25;
      if (v26 == v25) {
        goto LABEL_36;
      }
      do
      {
        uint64_t v18 = (void *)*--v16;
        unint64_t v17 = v18;
        *uint64_t v16 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v16 != v8);
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v2 = v1[1];
    if (v2) {
      uint64_t v3 = v2 - 8;
    }
    else {
      uint64_t v3 = 0;
    }
    if (((*(void *)(v3 + 56) - *(void *)(v3 + 48)) & 0x7FFFFFFF8) == 0) {
      return 1;
    }
    v20[0] = (const void **)"region cannot have any arguments";
    __int16 v21 = 259;
    mlir::OpState::emitOpError(this, v20, (uint64_t)v22);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      uint64_t v5 = (void **)__p;
      if (__p)
      {
        int v6 = v28;
        uint64_t v7 = __p;
        if (v28 != __p)
        {
          do
            int v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v28 = v5;
        operator delete(v7);
      }
      unint64_t v8 = v25;
      if (!v25) {
        goto LABEL_37;
      }
      uint64_t v9 = v26;
      unint64_t v10 = v25;
      if (v26 == v25)
      {
LABEL_36:
        uint64_t v26 = v8;
        operator delete(v10);
LABEL_37:
        if (v23 != &v24) {
          free(v23);
        }
        return v4;
      }
      do
      {
        uint64_t v12 = (void *)*--v9;
        unint64_t v11 = v12;
        void *v9 = 0;
        if (v12) {
          operator delete[](v11);
        }
      }
      while (v9 != v8);
LABEL_35:
      unint64_t v10 = v25;
      goto LABEL_36;
    }
  }
  return v4;
}

void mlir::scf::ConditionOp::getSuccessorRegions(mlir::Operation **a1, void **a2, uint64_t a3, uint64_t a4)
{
  v46[2] = *MEMORY[0x1E4F143B8];
  mlir::scf::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase((uint64_t)v42, *a1);
  BOOL v43 = a2;
  uint64_t v44 = a3;
  unint64_t v8 = (mlir::Block *)*((void *)*a1 + 2);
  if (v8)
  {
    ParentOp = (unsigned int *)mlir::Block::getParentOp(v8);
    unint64_t v10 = *v43;
    if (*v43) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v41 = 0;
    unint64_t v12 = ParentOp[11];
    if ((v12 & 0x7FFFFF) != 0)
    {
LABEL_9:
      unint64_t v13 = (((unint64_t)&ParentOp[4 * ((v12 >> 23) & 1) + 17] + ((v12 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * ParentOp[10];
      uint64_t v14 = v13 + 24;
      if (*(void *)(v13 + 24) != v13 + 24) {
        goto LABEL_10;
      }
      goto LABEL_28;
    }
LABEL_27:
    unint64_t v13 = 0;
    uint64_t v14 = 24;
    if (MEMORY[0x18] != 24)
    {
LABEL_10:
      uint64_t v15 = *(void *)(v13 + 32);
      if (v15) {
        uint64_t v16 = v15 - 8;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void *)(v16 + 48);
      unint64_t v18 = (*(void *)(v16 + 56) - v17) >> 3;
      unsigned int v19 = *(_DWORD *)(a4 + 8);
      if (v19 < *(_DWORD *)(a4 + 12)) {
        goto LABEL_14;
      }
      goto LABEL_29;
    }
LABEL_28:
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    unsigned int v19 = *(_DWORD *)(a4 + 8);
    if (v19 < *(_DWORD *)(a4 + 12))
    {
LABEL_14:
      uint64_t v20 = (uint64_t *)(*(void *)a4 + 24 * v19);
      *uint64_t v20 = v14;
      mlir::ValueRange::ValueRange((unint64_t *)v20 + 1, v17, v18);
LABEL_15:
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_16;
    }
LABEL_29:
    uint64_t v45 = v14;
    uint64_t v25 = (char *)&v45;
    mlir::ValueRange::ValueRange(v46, v17, v18);
    uint64_t v26 = *(unsigned int *)(a4 + 8);
    unint64_t v27 = *(void *)a4;
    if (v26 >= *(_DWORD *)(a4 + 12))
    {
      unint64_t v35 = v26 + 1;
      BOOL v36 = v27 + 24 * v26 > (unint64_t)&v45;
      if (v27 <= (unint64_t)&v45 && v36)
      {
        uint64_t v39 = (char *)&v46[-1] - v27;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v35, 24);
        unint64_t v27 = *(void *)a4;
        uint64_t v25 = &v39[*(void *)a4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v35, 24);
        unint64_t v27 = *(void *)a4;
        uint64_t v25 = (char *)&v45;
      }
    }
    uint64_t v28 = v27 + 24 * *(unsigned int *)(a4 + 8);
    long long v29 = *(_OWORD *)v25;
    *(void *)(v28 + 16) = *((void *)v25 + 2);
    *(_OWORD *)uint64_t v28 = v29;
    goto LABEL_15;
  }
  ParentOp = 0;
  unint64_t v10 = *a2;
  if (!v10) {
    goto LABEL_26;
  }
LABEL_3:
  if (mlir::BoolAttr::classof(v10)) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = 0;
  }
  uint64_t v41 = v11;
  if (!v11 || mlir::BoolAttr::getValue((mlir::BoolAttr *)&v41))
  {
    unint64_t v12 = ParentOp[11];
    if ((v12 & 0x7FFFFF) != 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_16:
  if (!v41 || !mlir::BoolAttr::getValue((mlir::BoolAttr *)&v41))
  {
    unint64_t v21 = ParentOp[9];
    if (v21) {
      uint64_t v22 = (uint64_t)(ParentOp - 4);
    }
    else {
      uint64_t v22 = 0;
    }
    unsigned int v23 = *(_DWORD *)(a4 + 8);
    if (v23 >= *(_DWORD *)(a4 + 12))
    {
      uint64_t v45 = 0;
      uint64_t v30 = (char *)&v45;
      mlir::ValueRange::ValueRange(v46, v22, v21);
      uint64_t v31 = *(unsigned int *)(a4 + 8);
      unint64_t v32 = *(void *)a4;
      if (v31 >= *(_DWORD *)(a4 + 12))
      {
        unint64_t v37 = v31 + 1;
        BOOL v38 = v32 + 24 * v31 > (unint64_t)&v45;
        if (v32 <= (unint64_t)&v45 && v38)
        {
          uint64_t v40 = (char *)&v46[-1] - v32;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v37, 24);
          unint64_t v32 = *(void *)a4;
          uint64_t v30 = &v40[*(void *)a4];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v37, 24);
          unint64_t v32 = *(void *)a4;
          uint64_t v30 = (char *)&v45;
        }
      }
      uint64_t v33 = v32 + 24 * *(unsigned int *)(a4 + 8);
      long long v34 = *(_OWORD *)v30;
      *(void *)(v33 + 16) = *((void *)v30 + 2);
      *(_OWORD *)uint64_t v33 = v34;
    }
    else
    {
      uint64_t v24 = (void *)(*(void *)a4 + 24 * v23);
      void *v24 = 0;
      mlir::ValueRange::ValueRange(v24 + 1, v22, v21);
    }
    ++*(_DWORD *)(a4 + 8);
  }
}

unint64_t mlir::scf::WhileOp::getAfter(mlir::scf::WhileOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if ((v1 & 0x7FFFFF) != 0) {
    return ((*(void *)this + 16 * ((v1 >> 23) & 1) + ((v1 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
         + 32 * *(unsigned int *)(*(void *)this + 40)
         + 24;
  else {
    return 24;
  }
}

void *mlir::scf::ForOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t), uint64_t a10)
{
  v41[2] = *MEMORY[0x1E4F143B8];
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  mlir::ValueRange::ValueRange(v41, (uint64_t)&v38, 3uLL);
  mlir::OperationState::addOperands(a2, v41[0], v41[1]);
  mlir::OperationState::addOperands(a2, a6, a7);
  uint64_t v38 = a6;
  uint64_t v39 = 0;
  if (a7)
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v17 = *(void *)(mlir::ValueRange::dereference_iterator(&v38, v15) + 8);
      unint64_t v18 = *(unsigned int *)(a2 + 72);
      if (v18 >= *(unsigned int *)(a2 + 76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18 + 1, 8);
        unint64_t v18 = *(unsigned int *)(a2 + 72);
      }
      *(void *)(*(void *)(a2 + 64) + 8 * v18) = v17 & 0xFFFFFFFFFFFFFFF8;
      ++*(_DWORD *)(a2 + 72);
      uint64_t v15 = ++v39;
    }
    while (v38 != a6 || v15 != a7);
  }
  unint64_t v19 = *(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = (uint64_t *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  unint64_t v21 = operator new(0x48uLL);
  *unint64_t v21 = 0u;
  v21[1] = 0u;
  *((void *)v21 + 4) = v21 + 2;
  *((void *)v21 + 5) = v21 + 2;
  *((void *)v21 + 7) = 0;
  *((void *)v21 + 8) = 0;
  *((void *)v21 + 6) = 0;
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v20, (uint64_t)v21);
  uint64_t v22 = *v20;
  *((void *)v21 + 2) = v20;
  *((void *)v21 + 1) = v22;
  unint64_t v21 = (_OWORD *)((char *)v21 + 8);
  *(void *)(v22 + 8) = v21;
  *uint64_t v20 = (uint64_t)v21;
  uint64_t v23 = v20[1];
  if (v23) {
    uint64_t v24 = (void *)(v23 - 8);
  }
  else {
    uint64_t v24 = 0;
  }
  mlir::Block::addArgument(v24, v19, *(void *)a2);
  uint64_t v38 = a6;
  uint64_t v39 = 0;
  if (!a7)
  {
    if (!a9) {
      return (void *)mlir::impl::ensureRegionTerminator(v20, a1, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::buildTerminator);
    }
    goto LABEL_22;
  }
  uint64_t v25 = 0;
  do
  {
    uint64_t v36 = mlir::ValueRange::dereference_iterator(&v38, v25);
    unint64_t v26 = *(void *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v36);
    uint64_t result = mlir::Block::addArgument(v24, v26, Loc);
    uint64_t v25 = ++v39;
  }
  while (v38 != a6 || v25 != a7);
  if (a9)
  {
LABEL_22:
    uint64_t v30 = (_OWORD *)(a1 + 16);
    long long v35 = *(_OWORD *)(a1 + 16);
    uint64_t v31 = v24[5];
    *(void *)(a1 + 16) = v24;
    *(void *)(a1 + 24) = v31;
    uint64_t v32 = *(void *)a2;
    uint64_t v33 = (uint64_t *)v24[6];
    uint64_t v34 = *v33;
    mlir::ValueRange::ValueRange(v37, (uint64_t)(v33 + 1), ((uint64_t)(v24[7] - (void)v33) >> 3) - 1);
    uint64_t result = (void *)a9(a10, a1, v32, v34, v37[0], v37[1]);
    if ((void)v35)
    {
      _OWORD *v30 = v35;
    }
    else
    {
      *(void *)uint64_t v30 = 0;
      *(void *)(a1 + 24) = 0;
    }
  }
  return result;
}

uint64_t mlir::scf::ForOp::verify(uint64_t **this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v23 = 0;
  v21[0] = *(const void ***)((*this)[9] + 88);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v21);
  if (!DefiningOp) {
    goto LABEL_13;
  }
  uint64_t v3 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_13;
  }
  v24[0] = &v25;
  v24[1] = (void *)0x100000000;
  mlir::Operation::fold(v3, 0, 0, (uint64_t)v24);
  BOOL v4 = (*(void *)v24[0] & 0xFFFFFFFFFFFFFFF8) == 0
    || *(void *)(*(void *)(*(void *)v24[0] & 0xFFFFFFFFFFFFFFF8) + 136) != (void)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (!v4) {
    unint64_t v23 = *(void *)v24[0] & 0xFFFFFFFFFFFFFFF8;
  }
  if (v24[0] != &v25) {
    free(v24[0]);
  }
  if (!v4 && mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v23) <= 0)
  {
    v21[0] = (const void **)"constant step operand must be positive";
    __int16 v22 = 259;
    mlir::OpState::emitOpError(this, v21, (uint64_t)v24);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (v32)
    {
      uint64_t v14 = (void **)__p;
      if (__p)
      {
        uint64_t v15 = v31;
        uint64_t v16 = __p;
        if (v31 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          uint64_t v16 = __p;
        }
        uint64_t v31 = v14;
        operator delete(v16);
      }
      uint64_t v9 = v28;
      if (!v28) {
        goto LABEL_45;
      }
      uint64_t v17 = v29;
      unint64_t v11 = v28;
      if (v29 == v28) {
        goto LABEL_44;
      }
      do
      {
        unint64_t v19 = (void *)*--v17;
        unint64_t v18 = v19;
        void *v17 = 0;
        if (v19) {
          operator delete[](v18);
        }
      }
      while (v17 != v9);
      goto LABEL_43;
    }
  }
  else
  {
LABEL_13:
    if ((*((unsigned char *)*this + 46) & 0x80) != 0 && *((unsigned int *)*this + 17) - 3 == *((_DWORD *)*this + 9)) {
      return 1;
    }
    v21[0] = (const void **)"mismatch in number of loop-carried values and defined values";
    __int16 v22 = 259;
    mlir::OpState::emitOpError(this, v21, (uint64_t)v24);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (v32)
    {
      int v6 = (void **)__p;
      if (__p)
      {
        uint64_t v7 = v31;
        unint64_t v8 = __p;
        if (v31 != __p)
        {
          do
            uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          unint64_t v8 = __p;
        }
        uint64_t v31 = v6;
        operator delete(v8);
      }
      uint64_t v9 = v28;
      if (!v28) {
        goto LABEL_45;
      }
      unint64_t v10 = v29;
      unint64_t v11 = v28;
      if (v29 == v28)
      {
LABEL_44:
        long long v29 = v9;
        operator delete(v11);
LABEL_45:
        if (v26 != &v27) {
          free(v26);
        }
        return v5;
      }
      do
      {
        unint64_t v13 = (void *)*--v10;
        unint64_t v12 = v13;
        *unint64_t v10 = 0;
        if (v13) {
          operator delete[](v12);
        }
      }
      while (v10 != v9);
LABEL_43:
      unint64_t v11 = v28;
      goto LABEL_44;
    }
  }
  return v5;
}

uint64_t mlir::scf::ForOp::verifyRegions(uint64_t **this)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = *(void *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v3) {
    uint64_t v4 = v3 - 8;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 48);
  uint64_t v6 = v2[9];
  if ((*(void *)(*(void *)v5 + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v6 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v16 = *(void *)(v4 + 56) - v5;
    uint64_t v17 = ((unint64_t)v16 >> 3) - 1;
    if (v17 == *((_DWORD *)v2 + 9))
    {
      uint64_t v18 = *((unsigned int *)v2 + 17);
      uint64_t v19 = (uint64_t)(v2 - 2);
      if (((unint64_t)v16 >> 3) == 1) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = v19;
      }
      uint64_t v7 = 1;
      if (v18 != 3 && v16 != 8)
      {
        uint64_t v21 = 0;
        uint64_t v22 = v5 + 8;
        uint64_t v23 = 8 * (v16 >> 3) - 16;
        uint64_t v24 = (uint64_t *)(v6 + 120);
        uint64_t v25 = v18 - 4;
        while (1)
        {
          if (v17 == v21) {
            return 1;
          }
          uint64_t v26 = *v24;
          uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
          unint64_t v28 = *(void *)(v26 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (v28 != (*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8)) {
            break;
          }
          if ((*(void *)(*(void *)(v22 + 8 * v21) + 8) & 0xFFFFFFFFFFFFFFF8) != v28)
          {
            __int16 v94 = 257;
            mlir::OpState::emitOpError(this, v93, (uint64_t)v98);
            if (v98[0])
            {
              int v95 = 3;
              uint64_t v96 = "types mismatch between ";
              uint64_t v97 = 23;
              uint64_t v56 = &v95;
              uint64_t v57 = (char *)v99;
              if (v100 >= v101)
              {
                unint64_t v78 = v100 + 1;
                if (v99 <= &v95 && (char *)v99 + 24 * v100 > (char *)&v95)
                {
                  int64_t v88 = (char *)&v95 - (unsigned char *)v99;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v78, 24);
                  uint64_t v57 = (char *)v99;
                  uint64_t v56 = (int *)((char *)v99 + v88);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v78, 24);
                  uint64_t v56 = &v95;
                  uint64_t v57 = (char *)v99;
                }
              }
              uint64_t v58 = &v57[24 * v100];
              long long v59 = *(_OWORD *)v56;
              *((void *)v58 + 2) = *((void *)v56 + 2);
              *(_OWORD *)uint64_t v58 = v59;
              uint64_t v60 = ++v100;
              if (v98[0])
              {
                int v95 = 5;
                uint64_t v96 = (const char *)v21;
                uint64_t v61 = &v95;
                uint64_t v62 = (char *)v99;
                if (v60 >= v101)
                {
                  unint64_t v81 = v60 + 1;
                  BOOL v82 = (char *)v99 + 24 * v60 > (char *)&v95;
                  if (v99 <= &v95 && v82)
                  {
                    int64_t v90 = (char *)&v95 - (unsigned char *)v99;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v81, 24);
                    uint64_t v62 = (char *)v99;
                    uint64_t v61 = (int *)((char *)v99 + v90);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v81, 24);
                    uint64_t v61 = &v95;
                    uint64_t v62 = (char *)v99;
                  }
                }
                uint64_t v63 = &v62[24 * v100];
                long long v64 = *(_OWORD *)v61;
                *((void *)v63 + 2) = *((void *)v61 + 2);
                *(_OWORD *)uint64_t v63 = v64;
                uint64_t v65 = ++v100;
                if (v98[0])
                {
                  int v95 = 3;
                  uint64_t v96 = "th iter region arg and defined value";
                  uint64_t v97 = 36;
                  uint64_t v66 = &v95;
                  uint64_t v67 = (char *)v99;
                  if (v65 >= v101)
                  {
                    unint64_t v85 = v65 + 1;
                    BOOL v86 = (char *)v99 + 24 * v65 > (char *)&v95;
                    if (v99 <= &v95 && v86)
                    {
                      int64_t v92 = (char *)&v95 - (unsigned char *)v99;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v85, 24);
                      uint64_t v67 = (char *)v99;
                      uint64_t v66 = (int *)((char *)v99 + v92);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v85, 24);
                      uint64_t v66 = &v95;
                      uint64_t v67 = (char *)v99;
                    }
                  }
                  uint64_t v68 = &v67[24 * v100];
                  long long v69 = *(_OWORD *)v66;
                  *((void *)v68 + 2) = *((void *)v66 + 2);
                  *(_OWORD *)uint64_t v68 = v69;
                  ++v100;
                }
              }
            }
            uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v98);
            if (v98[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v98);
            }
            if (!v107) {
              return v7;
            }
            uint64_t v70 = (void **)__p;
            if (__p)
            {
              BOOL v71 = v106;
              char v72 = __p;
              if (v106 != __p)
              {
                do
                  BOOL v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
                while (v71 != v70);
                char v72 = __p;
              }
              long long v106 = v70;
              operator delete(v72);
            }
            unint64_t v11 = v103;
            if (!v103) {
              goto LABEL_91;
            }
            uint64_t v73 = v104;
            unint64_t v13 = v103;
            if (v104 == v103) {
              goto LABEL_90;
            }
            do
            {
              uint64_t v75 = (void *)*--v73;
              uint64_t v74 = v75;
              *uint64_t v73 = 0;
              if (v75) {
                operator delete[](v74);
              }
            }
            while (v73 != v11);
            goto LABEL_89;
          }
          uint64_t v7 = 1;
          if (v25 != v21)
          {
            ++v21;
            uint64_t v29 = v23;
            v23 -= 8;
            v24 += 4;
            if (v29) {
              continue;
            }
          }
          return v7;
        }
        __int16 v94 = 257;
        mlir::OpState::emitOpError(this, v93, (uint64_t)v98);
        if (v98[0])
        {
          int v95 = 3;
          uint64_t v96 = "types mismatch between ";
          uint64_t v97 = 23;
          uint64_t v36 = &v95;
          unint64_t v37 = (char *)v99;
          if (v100 >= v101)
          {
            unint64_t v77 = v100 + 1;
            if (v99 <= &v95 && (char *)v99 + 24 * v100 > (char *)&v95)
            {
              int64_t v87 = (char *)&v95 - (unsigned char *)v99;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v77, 24);
              unint64_t v37 = (char *)v99;
              uint64_t v36 = (int *)((char *)v99 + v87);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v77, 24);
              uint64_t v36 = &v95;
              unint64_t v37 = (char *)v99;
            }
          }
          uint64_t v38 = &v37[24 * v100];
          long long v39 = *(_OWORD *)v36;
          *((void *)v38 + 2) = *((void *)v36 + 2);
          *(_OWORD *)uint64_t v38 = v39;
          uint64_t v40 = ++v100;
          if (v98[0])
          {
            int v95 = 5;
            uint64_t v96 = (const char *)v21;
            uint64_t v41 = &v95;
            uint64_t v42 = (char *)v99;
            if (v40 >= v101)
            {
              unint64_t v79 = v40 + 1;
              BOOL v80 = (char *)v99 + 24 * v40 > (char *)&v95;
              if (v99 <= &v95 && v80)
              {
                int64_t v89 = (char *)&v95 - (unsigned char *)v99;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v79, 24);
                uint64_t v42 = (char *)v99;
                uint64_t v41 = (int *)((char *)v99 + v89);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v79, 24);
                uint64_t v41 = &v95;
                uint64_t v42 = (char *)v99;
              }
            }
            BOOL v43 = &v42[24 * v100];
            long long v44 = *(_OWORD *)v41;
            *((void *)v43 + 2) = *((void *)v41 + 2);
            *(_OWORD *)BOOL v43 = v44;
            uint64_t v45 = ++v100;
            if (v98[0])
            {
              int v95 = 3;
              uint64_t v96 = "th iter operand and defined value";
              uint64_t v97 = 33;
              uint64_t v46 = &v95;
              uint64_t v47 = (char *)v99;
              if (v45 >= v101)
              {
                unint64_t v83 = v45 + 1;
                BOOL v84 = (char *)v99 + 24 * v45 > (char *)&v95;
                if (v99 <= &v95 && v84)
                {
                  int64_t v91 = (char *)&v95 - (unsigned char *)v99;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v83, 24);
                  uint64_t v47 = (char *)v99;
                  uint64_t v46 = (int *)((char *)v99 + v91);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v83, 24);
                  uint64_t v46 = &v95;
                  uint64_t v47 = (char *)v99;
                }
              }
              uint64_t v48 = &v47[24 * v100];
              long long v49 = *(_OWORD *)v46;
              *((void *)v48 + 2) = *((void *)v46 + 2);
              *(_OWORD *)uint64_t v48 = v49;
              ++v100;
            }
          }
        }
        uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v98);
        if (v98[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v98);
        }
        if (!v107) {
          return v7;
        }
        BOOL v50 = (void **)__p;
        if (__p)
        {
          uint64_t v51 = v106;
          int64_t v52 = __p;
          if (v106 != __p)
          {
            do
              uint64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
            while (v51 != v50);
            int64_t v52 = __p;
          }
          long long v106 = v50;
          operator delete(v52);
        }
        unint64_t v11 = v103;
        if (!v103) {
          goto LABEL_91;
        }
        uint64_t v53 = v104;
        unint64_t v13 = v103;
        if (v104 == v103) {
          goto LABEL_90;
        }
        do
        {
          size_t v55 = (void *)*--v53;
          BOOL v54 = v55;
          void *v53 = 0;
          if (v55) {
            operator delete[](v54);
          }
        }
        while (v53 != v11);
        goto LABEL_89;
      }
    }
    else
    {
      v93[0] = (const void **)"mismatch in number of basic block args and defined values";
      __int16 v94 = 259;
      mlir::OpState::emitOpError(this, v93, (uint64_t)v98);
      uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v98);
      if (v98[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v98);
      }
      if (v107)
      {
        uint64_t v30 = (void **)__p;
        if (__p)
        {
          uint64_t v31 = v106;
          char v32 = __p;
          if (v106 != __p)
          {
            do
              uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
            while (v31 != v30);
            char v32 = __p;
          }
          long long v106 = v30;
          operator delete(v32);
        }
        unint64_t v11 = v103;
        if (!v103) {
          goto LABEL_91;
        }
        uint64_t v33 = v104;
        unint64_t v13 = v103;
        if (v104 == v103) {
          goto LABEL_90;
        }
        do
        {
          long long v35 = (void *)*--v33;
          uint64_t v34 = v35;
          *uint64_t v33 = 0;
          if (v35) {
            operator delete[](v34);
          }
        }
        while (v33 != v11);
        goto LABEL_89;
      }
    }
  }
  else
  {
    v93[0] = (const void **)"expected induction variable to be same type as bounds and step";
    __int16 v94 = 259;
    mlir::OpState::emitOpError(this, v93, (uint64_t)v98);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v98);
    if (v98[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v98);
    }
    if (v107)
    {
      unint64_t v8 = (void **)__p;
      if (__p)
      {
        uint64_t v9 = v106;
        unint64_t v10 = __p;
        if (v106 != __p)
        {
          do
            uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          unint64_t v10 = __p;
        }
        long long v106 = v8;
        operator delete(v10);
      }
      unint64_t v11 = v103;
      if (!v103) {
        goto LABEL_91;
      }
      unint64_t v12 = v104;
      unint64_t v13 = v103;
      if (v104 == v103)
      {
LABEL_90:
        unint64_t v104 = v11;
        operator delete(v13);
LABEL_91:
        if (v99 != v102) {
          free(v99);
        }
        return v7;
      }
      do
      {
        uint64_t v15 = (void *)*--v12;
        uint64_t v14 = v15;
        *unint64_t v12 = 0;
        if (v15) {
          operator delete[](v14);
        }
      }
      while (v12 != v11);
LABEL_89:
      unint64_t v13 = v103;
      goto LABEL_90;
    }
  }
  return v7;
}

uint64_t mlir::scf::ForOp::promoteIfSingleIteration(mlir::scf::ForOp *this, mlir::RewriterBase *a2)
{
  uint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = mlir::constantTripCount(*(void *)(*(void *)(*(void *)this + 72) + 24) | 4, *(void *)(*(void *)(*(void *)this + 72) + 56) | 4, *(void *)(*(void *)(*(void *)this + 72) + 88) | 4);
  if (v5) {
    BOOL v6 = v4 == 1;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return 0;
  }
  uint64_t v8 = *(void *)(((*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)this + 40)
                 + 8);
  if (v8) {
    uint64_t v9 = (mlir::GenericProgramPoint **)(v8 - 8);
  }
  else {
    uint64_t v9 = 0;
  }
  mlir::Block::getTerminator(v9);
  uint64_t v11 = v10;
  unint64_t v12 = *(unsigned int *)(*(void *)this + 36);
  if (v12) {
    uint64_t v13 = *(void *)this - 16;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::ValueRange::ValueRange(v27, v13, v12);
  Yieldeduint64_t Values = mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getYieldedValues((uint64_t)this);
  mlir::RewriterBase::replaceAllUsesWith((uint64_t)a2, v27[0], v27[1], YieldedValues, v15);
  uint64_t v23 = &v25;
  uint64_t v16 = *(void *)this;
  uint64_t v17 = *(void *)(*(void *)this + 72);
  uint64_t v25 = *(void *)(v17 + 24);
  uint64_t v24 = 0x600000001;
  llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void>((uint64_t)&v23, (uint64_t)&v26, v17 + 96, 0, v17 + 96, *(unsigned int *)(v16 + 68) - 3);
  uint64_t v18 = *(void *)this;
  uint64_t v19 = *(void *)(((*(void *)this
                    + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(*(void *)this + 40)
                  + 8);
  if (v19) {
    uint64_t v20 = v19 - 8;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(void *)(v18 + 16);
  mlir::ValueRange::ValueRange(v22, (uint64_t)v23, v24);
  (*(void (**)(mlir::RewriterBase *, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a2 + 56))(a2, v20, v21, v18, v22[0], v22[1]);
  (*(void (**)(mlir::RewriterBase *, uint64_t))(*(void *)a2 + 40))(a2, v11);
  (*(void (**)(mlir::RewriterBase *, void))(*(void *)a2 + 40))(a2, *(void *)this);
  if (v23 != &v25) {
    free(v23);
  }
  return 1;
}

unint64_t mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getYieldedValues(uint64_t a1)
{
  _OWORD v15[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(((*(void *)a1
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)a1 + 40)
                 + 8);
  if (v1) {
    uint64_t v2 = (mlir::GenericProgramPoint **)(v1 - 8);
  }
  else {
    uint64_t v2 = 0;
  }
  mlir::Block::getTerminator(v2);
  if ((*(unsigned char *)(v3 + 46) & 0x80) != 0) {
    int v4 = *(_DWORD *)(v3 + 68);
  }
  else {
    int v4 = 0;
  }
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v13, v3, 0, v4, 0, 0);
  unint64_t v5 = mlir::MutableOperandRange::operator mlir::OperandRange(v13);
  unint64_t v7 = v6;
  if (v14 != v15) {
    free(v14);
  }
  if (v7)
  {
    uint64_t v8 = *(void *)(v5 + 16);
    unsigned int OperandNumber = mlir::OpOperand::getOperandNumber(v5);
    if ((*(unsigned char *)(v8 + 46) & 0x80) != 0) {
      uint64_t v10 = *(void *)(v8 + 72);
    }
    else {
      uint64_t v10 = 0;
    }
    mlir::ValueRange::ValueRange(&v12, v10 + 32 * OperandNumber, v7);
  }
  else
  {
    mlir::ValueRange::ValueRange(&v12, 0, 0);
  }
  return v12;
}

uint64_t mlir::scf::ForOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v52[2] = *MEMORY[0x1E4F143B8];
  int v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *unint64_t v5 = 32;
    ++*((void *)v4 + 4);
  }
  uint64_t v6 = *(void *)((((unint64_t)*this
                   + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v6) {
    uint64_t v7 = v6 - 8;
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, **(void **)(v7 + 48));
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = *((void *)v8 + 4);
  if ((unint64_t)(*((void *)v8 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 32;
    *(_WORD *)uint64_t v9 = 15648;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (_DWORD *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 3uLL)
  {
    _DWORD *v11 = 544175136;
    *((void *)v10 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v10, " to ", 4uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  unint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = *((void *)v12 + 4);
  if ((unint64_t)(*((void *)v12 + 3) - v13) > 5)
  {
    *(_WORD *)(v13 + 4) = 8304;
    *(_DWORD *)uint64_t v13 = 1702130464;
    *((void *)v12 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v12, " step ", 6uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 88));
  uint64_t v14 = *this;
  unint64_t v15 = *((unsigned int *)*this + 11);
  uint64_t v16 = *(void *)((((unint64_t)*this + 16 * ((v15 >> 23) & 1) + ((v15 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*this + 10)
                  + 8);
  if (v16) {
    uint64_t v17 = v16 - 8;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void *)(v17 + 48);
  uint64_t v19 = ((*(void *)(v17 + 56) - v18) >> 3) - 1;
  uint64_t v20 = (void *)(v18 + 8);
  if ((v15 & 0x800000) != 0)
  {
    uint64_t v21 = *((unsigned int *)v14 + 17);
    uint64_t v22 = *((void *)v14 + 9);
    unint64_t v23 = v21 - 3;
  }
  else
  {
    uint64_t v22 = 0;
    unint64_t v23 = -3;
  }
  mlir::ValueRange::ValueRange(v52, v22 + 96, v23);
  printInitializationList(a2, v20, v19, v52[0], v52[1], " iter_args", 0xAuLL);
  if ((*((unsigned char *)*this + 46) & 0x80) == 0 || *((_DWORD *)*this + 17) != 3)
  {
    uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v25 = *((void *)v24 + 4);
    if ((unint64_t)(*((void *)v24 + 3) - v25) > 4)
    {
      *(unsigned char *)(v25 + 4) = 40;
      *(_DWORD *)uint64_t v25 = 540945696;
      *((void *)v24 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v24, " -> (", 5uLL);
    }
    uint64_t v26 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v27 = *((unsigned int *)v26 + 17);
      uint64_t v28 = *((void *)v26 + 9);
      uint64_t v29 = v27 - 3;
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = -3;
    }
    v49[0] = v28 + 96;
    v49[1] = v29;
    mlir::OperandRange::getTypes(v49, v50);
    v51[0] = ", ";
    v51[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v50[0], v50[1], v50[2], v50[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)v51);
    uint64_t v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v31 = (unsigned char *)*((void *)v30 + 4);
    if ((unint64_t)v31 >= *((void *)v30 + 3))
    {
      llvm::raw_ostream::write(v30, 41);
    }
    else
    {
      *((void *)v30 + 4) = v31 + 1;
      *uint64_t v31 = 41;
    }
  }
  char v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v33 = (unsigned char *)*((void *)v32 + 4);
  if ((unint64_t)v33 >= *((void *)v32 + 3))
  {
    llvm::raw_ostream::write(v32, 32);
  }
  else
  {
    *((void *)v32 + 4) = v33 + 1;
    *uint64_t v33 = 32;
  }
  uint64_t v34 = *(void *)((((unint64_t)*this
                    + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*this + 10)
                  + 8);
  if (v34) {
    uint64_t v35 = v34 - 8;
  }
  else {
    uint64_t v35 = 0;
  }
  v50[0] = *(void *)(**(void **)(v35 + 48) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::Type::isIndex((mlir::Type *)v50))
  {
LABEL_43:
    uint64_t v40 = *this;
    unint64_t v41 = *((unsigned int *)*this + 11);
    if ((v41 & 0x7FFFFF) != 0) {
      goto LABEL_44;
    }
LABEL_51:
    unint64_t v42 = 0;
    if ((v41 & 0x800000) != 0) {
      goto LABEL_45;
    }
    goto LABEL_52;
  }
  uint64_t v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v37 = *((void *)v36 + 4);
  if ((unint64_t)(*((void *)v36 + 3) - v37) > 2)
  {
    *(unsigned char *)(v37 + 2) = 32;
    *(_WORD *)uint64_t v37 = 14880;
    *((void *)v36 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v36, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 32))(a2, v50[0]);
  uint64_t v38 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v39 = (unsigned char *)*((void *)v38 + 4);
  if ((unint64_t)v39 < *((void *)v38 + 3))
  {
    *((void *)v38 + 4) = v39 + 1;
    *long long v39 = 32;
    goto LABEL_43;
  }
  llvm::raw_ostream::write(v38, 32);
  uint64_t v40 = *this;
  unint64_t v41 = *((unsigned int *)*this + 11);
  if ((v41 & 0x7FFFFF) == 0) {
    goto LABEL_51;
  }
LABEL_44:
  unint64_t v42 = (((unint64_t)v40 + 16 * ((v41 >> 23) & 1) + ((v41 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *((unsigned int *)v40 + 10);
  if ((v41 & 0x800000) != 0)
  {
LABEL_45:
    BOOL v43 = *((_DWORD *)v40 + 17) != 3;
    goto LABEL_46;
  }
LABEL_52:
  BOOL v43 = 1;
LABEL_46:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v42, 0, v43, 0);
  long long v44 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v50[0] = mlir::Operation::getAttrDictionary(v44);
    uint64_t v45 = (mlir::ArrayAttr *)v50;
  }
  else
  {
    uint64_t v45 = (mlir::Operation *)((char *)v44 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v45);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v47, 0, 0);
}

llvm::raw_ostream *printInitializationList(llvm::raw_ostream *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, size_t a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    uint64_t v13 = result;
    uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)result + 16))(result);
    unint64_t v15 = (void *)*((void *)v14 + 4);
    if (a7 <= *((void *)v14 + 3) - (void)v15)
    {
      if (a7)
      {
        memcpy(v15, a6, a7);
        *((void *)v14 + 4) += a7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v14, (const char *)a6, a7);
    }
    uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)v13 + 16))(v13);
    uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
    if ((unint64_t)v17 >= *((void *)v16 + 3))
    {
      llvm::raw_ostream::write(v16, 40);
      uint64_t v30 = a2;
      uint64_t v32 = a4;
      uint64_t v33 = 0;
      if (!a3) {
        goto LABEL_26;
      }
    }
    else
    {
      *((void *)v16 + 4) = v17 + 1;
      unsigned char *v17 = 40;
      uint64_t v30 = a2;
      uint64_t v32 = a4;
      uint64_t v33 = 0;
      if (!a3)
      {
LABEL_26:
        uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)v13 + 16))(v13);
        uint64_t v29 = (unsigned char *)*((void *)result + 4);
        if (*((unsigned char **)result + 3) == v29) {
          return llvm::raw_ostream::write(result, ")", 1uLL);
        }
        unsigned char *v29 = 41;
        ++*((void *)result + 4);
        return result;
      }
    }
    uint64_t v18 = &a2[a3];
    uint64_t v19 = mlir::ValueRange::dereference_iterator(&v32, 0);
    (*(void (**)(llvm::raw_ostream *, void))(*(void *)v13 + 160))(v13, *a2);
    uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)v13 + 16))(v13);
    uint64_t v21 = *((void *)v20 + 4);
    if ((unint64_t)(*((void *)v20 + 3) - v21) > 2)
    {
      *(unsigned char *)(v21 + 2) = 32;
      *(_WORD *)uint64_t v21 = 15648;
      *((void *)v20 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v20, " = ", 3uLL);
    }
    (*(void (**)(llvm::raw_ostream *, uint64_t))(*(void *)v13 + 160))(v13, v19);
    uint64_t v22 = v33 + 1;
    uint64_t v31 = v30 + 1;
    ++v33;
    for (; v31 != v18; ++v33)
    {
      if (v32 == a4 && v22 == a5) {
        break;
      }
      uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)v13 + 16))(v13);
      uint64_t v25 = (_WORD *)*((void *)v24 + 4);
      if (*((void *)v24 + 3) - (void)v25 > 1uLL)
      {
        *uint64_t v25 = 8236;
        *((void *)v24 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v24, ", ", 2uLL);
      }
      uint64_t v26 = mlir::ValueRange::dereference_iterator(&v32, v33);
      (*(void (**)(llvm::raw_ostream *, void))(*(void *)v13 + 160))(v13, *v31);
      uint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)v13 + 16))(v13);
      uint64_t v28 = *((void *)v27 + 4);
      if ((unint64_t)(*((void *)v27 + 3) - v28) > 2)
      {
        *(unsigned char *)(v28 + 2) = 32;
        *(_WORD *)uint64_t v28 = 15648;
        *((void *)v27 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v27, " = ", 3uLL);
      }
      (*(void (**)(llvm::raw_ostream *, uint64_t))(*(void *)v13 + 160))(v13, v26);
      uint64_t v22 = v33 + 1;
      ++v31;
    }
    goto LABEL_26;
  }
  return result;
}

uint64_t mlir::scf::ForOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v30 = 0;
  memset(v27, 0, 24);
  char v29 = 0;
  uint64_t v27[4] = 0;
  v27[5] = 0;
  char v28 = 0;
  memset(v26, 0, 24);
  memset(v25, 0, 24);
  memset(v24, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v27, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 136))(a1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v26, 1)) {
    return 0;
  }
  __int16 v38 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "to", 2, &v35))return 0; {
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v25, 1))
  }
    return 0;
  __int16 v38 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "step", 4, &v35)|| !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v24, 1))
  {
    return 0;
  }
  uint64_t v35 = v37;
  uint64_t v36 = 0x400000000;
  uint64_t v32 = v34;
  uint64_t v33 = 0x400000000;
  __n128 v5 = llvm::SmallVectorTemplateBase<mlir::OpAsmParser::Argument,true>::push_back((uint64_t)&v35, (unint64_t)v27);
  char v6 = (*(uint64_t (**)(uint64_t, const char *, uint64_t, __n128))(*(void *)a1 + 376))(a1, "iter_args", 9, v5);
  if (v6
    && (!mlir::OpAsmParser::parseAssignmentList(a1)
     || !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 528))(a1, a2 + 64)))
  {
    goto LABEL_34;
  }
  if (*(unsigned int *)(a2 + 72) + 1 == v36)
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1))
    {
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v30)) {
        goto LABEL_34;
      }
      Indexuint64_t Type = v30;
    }
    else
    {
      Indexuint64_t Type = mlir::Builder::getIndexType(v4, v7);
      uint64_t v30 = IndexType;
    }
    *((void *)v35 + 4) = IndexType;
    if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 696))(a1, v26)
      && (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v25, v30, a2 + 16)&& (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v24, v30, a2 + 16))
    {
      if (v6)
      {
        if (v36 != 1)
        {
          if (v33)
          {
            uint64_t v12 = *(unsigned int *)(a2 + 72);
            if (v12)
            {
              uint64_t v13 = 0;
              uint64_t v14 = (char *)v32;
              unint64_t v15 = *(void **)(a2 + 64);
              unint64_t v20 = ((unint64_t)v36 << 6) - 128;
              uint64_t v21 = (char *)v35 + 96;
              uint64_t v19 = (v12 << 6) - 64;
              unint64_t v16 = ((unint64_t)v33 << 6) - 64;
              while (1)
              {
                *(void *)&v21[v13] = *v15;
                if (!(*(unsigned __int8 (**)(uint64_t, char *))(*(void *)a1 + 696))(a1, v14)) {
                  goto LABEL_34;
                }
                if (v20 != v13 && v16 != v13)
                {
                  v14 += 32;
                  ++v15;
                  BOOL v17 = v19 == v13;
                  v13 += 64;
                  if (!v17) {
                    continue;
                  }
                }
                break;
              }
            }
          }
        }
      }
      uint64_t v18 = (void *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
      if ((*(unsigned __int8 (**)(uint64_t, void *, void *, void, void))(*(void *)a1 + 744))(a1, v18, v35, v36, 0))
      {
        mlir::impl::ensureRegionTerminator(v18, v4, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::buildTerminator);
        uint64_t v9 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112) != 0;
        goto LABEL_35;
      }
    }
LABEL_34:
    uint64_t v9 = 0;
    goto LABEL_35;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v22 = "mismatch in number of loop-carried values and defined values";
  __int16 v23 = 259;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v31, a1, v11, &v22);
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v31);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v31);
LABEL_35:
  if (v32 != v34) {
    free(v32);
  }
  if (v35 != v37) {
    free(v35);
  }
  return v9;
}

__n128 llvm::SmallVectorTemplateBase<mlir::OpAsmParser::Argument,true>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v10 = v4 + 1;
    unint64_t v11 = v5 + (v4 << 6);
    if (v5 <= a2 && v11 > a2)
    {
      unint64_t v13 = a2 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 64);
      unint64_t v5 = *(void *)a1;
      unint64_t v2 = *(void *)a1 + v13;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 64);
      unint64_t v5 = *(void *)a1;
    }
  }
  unint64_t v6 = v5 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6);
  __n128 result = *(__n128 *)v2;
  long long v8 = *(_OWORD *)(v2 + 16);
  long long v9 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v6 + 48) = v9;
  *(__n128 *)unint64_t v6 = result;
  *(_OWORD *)(v6 + 16) = v8;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t mlir::OpAsmParser::parseAssignmentList(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 792))(a1);
  if ((unsigned __int16)v2 <= 0xFFu)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    unint64_t v13 = "expected '('";
    __int16 v14 = 259;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v15, a1, v3, &v13);
    uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
    if (v15[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v15);
    }
    if (v22)
    {
      uint64_t v4 = (void **)__p;
      if (__p)
      {
        unint64_t v5 = v21;
        unint64_t v6 = __p;
        if (v21 != __p)
        {
          do
            unint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          unint64_t v6 = __p;
        }
        uint64_t v21 = v4;
        operator delete(v6);
      }
      uint64_t v7 = v18;
      if (v18)
      {
        long long v8 = v19;
        long long v9 = v18;
        if (v19 != v18)
        {
          do
          {
            unint64_t v11 = (void *)*--v8;
            unint64_t v10 = v11;
            *long long v8 = 0;
            if (v11) {
              operator delete[](v10);
            }
          }
          while (v8 != v7);
          long long v9 = v18;
        }
        uint64_t v19 = v7;
        operator delete(v9);
      }
      if (v16 != &v17) {
        free(v16);
      }
    }
  }
  return v2;
}

uint64_t mlir::scf::ForOp::getInitsMutable(mlir::scf::ForOp *this)
{
  v7[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    int v2 = *(_DWORD *)(v1 + 68) - 3;
  }
  else {
    int v2 = -3;
  }
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v5, v1, 3, v2, 0, 0);
  uint64_t v3 = mlir::MutableOperandRange::operator mlir::OperandRange(v5);
  if (v6 != v7) {
    free(v6);
  }
  return v3;
}

void mlir::scf::ForOp::replaceWithAdditionalYields(mlir::GenericProgramPoint **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = (void *)(a2 + 24);
  long long v103 = *(_OWORD *)(a2 + 24);
  uint64_t v12 = *a1;
  uint64_t v13 = *((void *)v12 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
  void *v11 = v13;
  v11[1] = v14;
  unint64_t v15 = *a1;
  if ((*((unsigned char *)*a1 + 46) & 0x80) == 0)
  {
    uint64_t v109 = v111;
    uint64_t v110 = 0x600000000;
    unint64_t v17 = -3;
    uint64_t v18 = 96;
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v111, v17, 8);
    uint64_t v19 = v110;
    unint64_t v20 = v109;
    uint64_t v21 = (char *)v109 + 8 * v110;
    if (v17 < 0xD) {
      goto LABEL_17;
    }
LABEL_7:
    if ((unint64_t)v21 >= v18 + 32 * v17 || v18 + 24 >= (unint64_t)&v20[8 * v17 + 8 * v19])
    {
      uint64_t v23 = v17 & 3;
      if ((v17 & 3) == 0) {
        uint64_t v23 = 4;
      }
      unint64_t v24 = v17 - v23;
      v21 += 8 * v24;
      uint64_t v25 = (const double *)(v18 + 88);
      uint64_t v26 = (unsigned long long *)&v20[8 * v19 + 16];
      unint64_t v27 = v24;
      do
      {
        char v28 = v25 - 8;
        unsigned long long v29 = (unsigned __int128)vld4q_f64(v28);
        unsigned long long v30 = (unsigned __int128)vld4q_f64(v25);
        *(v26 - 1) = v29;
        *uint64_t v26 = v30;
        v25 += 16;
        v26 += 2;
        v27 -= 4;
      }
      while (v27);
LABEL_18:
      uint64_t v31 = (uint64_t *)(v18 + 32 * v24 + 24);
      do
      {
        uint64_t v32 = *v31;
        v31 += 4;
        *(void *)uint64_t v21 = v32;
        v21 += 8;
        ++v24;
      }
      while (v17 != v24);
      LODWORD(v110) = v110 + v17;
      uint64_t v33 = v110;
      unint64_t v34 = a4 + v110;
      if (v34 > HIDWORD(v110)) {
        goto LABEL_21;
      }
      goto LABEL_22;
    }
LABEL_17:
    unint64_t v24 = 0;
    goto LABEL_18;
  }
  uint64_t v16 = *((unsigned int *)v15 + 17);
  unint64_t v17 = v16 - 3;
  uint64_t v18 = *((void *)v15 + 9) + 96;
  uint64_t v109 = v111;
  uint64_t v110 = 0x600000000;
  if ((unint64_t)(v16 - 3) >= 7) {
    goto LABEL_3;
  }
  uint64_t v19 = 0;
  if (v16 != 3)
  {
    unint64_t v20 = v111;
    uint64_t v21 = v111;
    if (v17 < 0xD) {
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  uint64_t v33 = 0;
  LODWORD(v110) = 0;
  unint64_t v34 = a4;
  if (a4 > 6)
  {
LABEL_21:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v111, v34, 8);
    uint64_t v33 = v110;
  }
LABEL_22:
  unint64_t v112 = a3;
  uint64_t v113 = 0;
  if (a4)
  {
    uint64_t v35 = 0;
    uint64_t v36 = (uint64_t *)((char *)v109 + 8 * v33);
    do
    {
      *v36++ = mlir::ValueRange::dereference_iterator(&v112, v35);
      uint64_t v35 = ++v113;
    }
    while (v112 != a3 || v35 != a4);
    LODWORD(v33) = v110;
  }
  LODWORD(v110) = v33 + a4;
  uint64_t v38 = *((void *)*a1 + 3);
  uint64_t v39 = (void *)*((void *)*a1 + 9);
  uint64_t v40 = v39[3];
  uint64_t v41 = v39[7];
  uint64_t v42 = v39[11];
  uint64_t v106 = v38;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v106);
  uint64_t v44 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.for", (const unsigned __int8 *)7, Context);
  if (!v45)
  {
    __int16 v121 = 1283;
    uint64_t v119 = (__int16 *)"scf.for";
    uint64_t v120 = 7;
                       "been added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-"
                       "dependent-whats-up-with-dialects-management";
    __int16 v116 = 259;
    llvm::operator+((uint64_t *)&v117, v115, (uint64_t)&v112);
    llvm::report_fatal_error((llvm::Twine *)&v112, 1);
  }
  uint64_t v105 = v11;
  uint64_t v46 = (mlir::OpBuilder *)(v11 - 2);
  mlir::OperationState::OperationState(&v112, v38, v44);
  mlir::ValueRange::ValueRange((unint64_t *)&v117, (uint64_t)v109, v110);
  mlir::scf::ForOp::build((uint64_t)v46, (uint64_t)&v112, v40, v41, v42, (uint64_t)v117, v118, v47, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))llvm::function_ref<void ()(mlir::OpBuilder &,mlir::Location,mlir::Value,mlir::ValueRange)>::callback_fn<mlir::scf::ForOp::replaceWithAdditionalYields(mlir::RewriterBase &,mlir::ValueRange,BOOL,std::function<llvm::SmallVector<mlir::Value,6u> ()(mlir::OpBuilder &,mlir::Location,llvm::ArrayRef<mlir::BlockArgument>)> const&)::$_0>, (uint64_t)v115);
  uint64_t v48 = mlir::OpBuilder::create(v46, (const mlir::OperationState *)&v112);
  long long v49 = *(void **)(*((void *)v48 + 6) + 16);
  mlir::OperationState::~OperationState((mlir::OperationState *)&v112);
  uint64_t v51 = *((unsigned int *)*a1 + 10);
  unint64_t v50 = *((unsigned int *)*a1 + 11);
  uint64_t v52 = (uint64_t)*a1 + 16 * ((v50 >> 23) & 1);
  unint64_t v99 = v48;
  if (v49 == &mlir::detail::TypeIDResolver<mlir::scf::ForOp,void>::id) {
    uint64_t v53 = v48;
  }
  else {
    uint64_t v53 = 0;
  }
  uint64_t v106 = (uint64_t)v53;
  uint64_t v54 = *(void *)(((v52 + ((v50 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v51 + 8);
  if (v54) {
    size_t v55 = (mlir::GenericProgramPoint **)(v54 - 8);
  }
  else {
    size_t v55 = 0;
  }
  mlir::Block::getTerminator(v55);
  uint64_t v57 = (uint64_t)v56;
  uint64_t v58 = *(void *)((((unint64_t)v53
                    + 16 * (((unint64_t)*((unsigned int *)v53 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v53 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v53 + 10)
                  + 8);
  if (v58) {
    uint64_t v59 = v58 - 8;
  }
  else {
    uint64_t v59 = 0;
  }
  uint64_t v60 = *(void *)(v59 + 48);
  unint64_t v61 = (*(void *)(v59 + 56) - v60) >> 3;
  if (v61 <= a4) {
    uint64_t v62 = v60;
  }
  else {
    uint64_t v62 = v60 + 8 * (v61 - a4);
  }
  if (v61 >= a4) {
    uint64_t v63 = a4;
  }
  else {
    uint64_t v63 = v61;
  }
  long long v100 = *(_OWORD *)(a2 + 24);
  uint64_t v64 = *((void *)v56 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v56);
  *(void *)(a2 + 24) = v64;
  *(void *)(a2 + 32) = v65;
  v115[0] = *((void *)*a1 + 3);
  uint64_t v117 = (const char *)v62;
  uint64_t v118 = v63;
  uint64_t v66 = *(void *)(a6 + 24);
  if (!v66)
  {
    uint64_t v98 = std::__throw_bad_function_call[abi:nn180100]();
    mlir::scf::ForOp::getSuccessorRegions(v98);
    return;
  }
  uint64_t v67 = a1;
  (*(void (**)(void **__return_ptr))(*(void *)v66 + 48))(&v112);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v57);
  if ((*(unsigned char *)(v57 + 46) & 0x80) != 0) {
    int v68 = *(_DWORD *)(v57 + 68);
  }
  else {
    int v68 = 0;
  }
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)&v117, v57, 0, v68, 0, 0);
  mlir::ValueRange::ValueRange((unint64_t *)v115, (uint64_t)v112, v113);
  mlir::MutableOperandRange::append((uint64_t)&v117, v115[0], v115[1]);
  if (v119 != &v121) {
    free(v119);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v57);
  if (v112 != &v114) {
    free(v112);
  }
  if ((void)v100)
  {
    *(_OWORD *)uint64_t v105 = v100;
  }
  else
  {
    *uint64_t v105 = 0;
    v105[1] = 0;
  }
  uint64_t v69 = *(void *)((((unint64_t)*a1
                    + 16 * (((unint64_t)*((unsigned int *)*a1 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)*a1 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*a1 + 10)
                  + 8);
  if (v69) {
    uint64_t v70 = v69 - 8;
  }
  else {
    uint64_t v70 = 0;
  }
  uint64_t v71 = *(void *)((((unint64_t)v53
                    + 16 * (((unint64_t)*((unsigned int *)v53 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v53 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v53 + 10)
                  + 8);
  if (v71) {
    uint64_t v72 = v71 - 8;
  }
  else {
    uint64_t v72 = 0;
  }
  uint64_t v73 = *(void *)(v72 + 48);
  uint64_t v74 = *(void *)(v70 + 48);
  if ((*(void *)(v72 + 56) - v73) >> 3 >= (unint64_t)((unint64_t)(*(void *)(v70 + 56)
                                                                                               - v74) >> 3))
    unint64_t v75 = ((unint64_t)(*(void *)(v70 + 56) - v74) >> 3);
  else {
    unint64_t v75 = (*(void *)(v72 + 56) - v73) >> 3;
  }
  mlir::ValueRange::ValueRange(v108, v73, v75);
  mlir::RewriterBase::mergeBlocks(a2, v70, v72, v108[0], v108[1]);
  if (a5)
  {
    unint64_t v112 = a3;
    uint64_t v113 = 0;
    uint64_t v114 = (uint64_t **)v62;
    uint64_t v76 = v105;
    uint64_t v77 = (uint64_t)v99;
    if (a4 && v63)
    {
      uint64_t v78 = 0;
      do
      {
        unint64_t v79 = (uint64_t **)mlir::ValueRange::dereference_iterator(&v112, v78);
        BOOL v80 = *v114;
        uint64_t v117 = (const char *)&v106;
        mlir::RewriterBase::replaceUsesWithIf(a2, v79, v80, (uint64_t (*)(uint64_t, uint64_t *))llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<mlir::scf::ForOp::replaceWithAdditionalYields(mlir::RewriterBase &,mlir::ValueRange,BOOL,std::function<llvm::SmallVector<mlir::Value,6u> ()(mlir::OpBuilder &,mlir::Location,llvm::ArrayRef<mlir::BlockArgument>)> const&)::$_2>, (uint64_t)&v117);
        uint64_t v78 = v113 + 1;
        unint64_t v81 = v114 + 1;
        uint64_t v113 = v78;
        ++v114;
      }
      while ((v78 != a4 || v112 != a3) && v81 != (uint64_t **)(v62 + 8 * v63));
      uint64_t v77 = v106;
    }
  }
  else
  {
    uint64_t v76 = v105;
    uint64_t v77 = (uint64_t)v99;
  }
  BOOL v84 = *v67;
  unsigned int v85 = *(_DWORD *)(v77 + 36);
  uint64_t v86 = v77 - 16;
  if (v85) {
    uint64_t v87 = v86;
  }
  else {
    uint64_t v87 = 0;
  }
  unsigned int v88 = *((_DWORD *)v84 + 9);
  if (v85 >= v88) {
    unint64_t v89 = v88;
  }
  else {
    unint64_t v89 = v85;
  }
  mlir::ValueRange::ValueRange(v107, v87, v89);
  (*(void (**)(uint64_t, mlir::GenericProgramPoint *, unint64_t, unint64_t))(*(void *)a2 + 24))(a2, v84, v107[0], v107[1]);
  uint64_t v90 = v106;
  if (v106)
  {
    uint64_t v91 = *(void *)(v106 + 48);
    int64_t v92 = *(void **)(v91 + 16);
    BOOL v93 = v92 == &mlir::detail::TypeIDResolver<void,void>::id;
    if (v92 == &mlir::detail::TypeIDResolver<void,void>::id) {
      uint64_t v94 = 0;
    }
    else {
      uint64_t v94 = *(void *)(v106 + 48);
    }
    if (v93)
    {
      unint64_t v112 = *(void **)(v91 + 8);
      uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v112);
      if (Values)
      {
        uint64_t v97 = v91;
        goto LABEL_95;
      }
    }
    else
    {
      unint64_t v95 = v94 | v91 & 0xFFFFFFFFFFFFFF00;
      uint64_t Values = mlir::detail::InterfaceMap::lookup<mlir::LoopLikeOpInterface>(v95 + 32);
      if (!Values)
      {
        uint64_t Values = *(void *)(v95 + 24);
        uint64_t v97 = *(void *)(v90 + 48);
LABEL_95:
        uint64_t Values = mlir::Dialect::getRegisteredInterfaceForOp<mlir::LoopLikeOpInterface>(Values, v97);
      }
    }
  }
  else
  {
    uint64_t Values = 0;
  }
  *(void *)a7 = v90;
  *(void *)(a7 + 8) = Values;
  *(unsigned char *)(a7 + 16) = 1;
  if (v109 != v111) {
    free(v109);
  }
  if ((void)v103)
  {
    *(_OWORD *)uint64_t v76 = v103;
  }
  else
  {
    *uint64_t v76 = 0;
    v76[1] = 0;
  }
}

__n128 mlir::scf::ForOp::getSuccessorRegions(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  unint64_t v6 = *(unsigned int *)(*a1 + 44);
  if ((v6 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (v6 >> 23) & 1;
    uint64_t v8 = (v6 >> 21) & 0x7F8;
    uint64_t v9 = *(unsigned int *)(v5 + 40);
    unint64_t v10 = ((v5 + 16 * v7 + v8 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v9;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v9 = *(unsigned int *)(v5 + 40);
    uint64_t v7 = (v6 >> 23) & 1;
    uint64_t v8 = (v6 >> 21) & 0x7F8;
  }
  uint64_t v11 = *(void *)(((v5 + 16 * v7 + v8 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v9 + 8);
  if (v11) {
    uint64_t v12 = v11 - 8;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void *)(v12 + 48);
  unint64_t v14 = ((*(void *)(v12 + 56) - v13) >> 3) - 1;
  unint64_t v33 = v10;
  unint64_t v15 = (__n128 *)&v33;
  mlir::ValueRange::ValueRange(v34, v13 + 8, v14);
  uint64_t v16 = *(unsigned int *)(a3 + 8);
  unint64_t v17 = *(void *)a3;
  if (v16 < *(_DWORD *)(a3 + 12)) {
    goto LABEL_8;
  }
  unint64_t v27 = v16 + 1;
  BOOL v28 = v17 + 24 * v16 > (unint64_t)&v33;
  if (v17 > (unint64_t)&v33 || !v28)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v27, 24);
    unint64_t v17 = *(void *)a3;
LABEL_8:
    uint64_t v18 = (char *)&v33;
    goto LABEL_9;
  }
  uint64_t v31 = (char *)&v34[-1] - v17;
  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v27, 24);
  unint64_t v17 = *(void *)a3;
  uint64_t v18 = &v31[*(void *)a3];
LABEL_9:
  uint64_t v19 = v17 + 24 * *(unsigned int *)(a3 + 8);
  long long v20 = *(_OWORD *)v18;
  *(void *)(v19 + 16) = *((void *)v18 + 2);
  *(_OWORD *)uint64_t v19 = v20;
  ++*(_DWORD *)(a3 + 8);
  unint64_t v21 = *(unsigned int *)(*a1 + 36);
  if (v21) {
    uint64_t v22 = *a1 - 16;
  }
  else {
    uint64_t v22 = 0;
  }
  unint64_t v33 = 0;
  mlir::ValueRange::ValueRange(v34, v22, v21);
  uint64_t v23 = *(unsigned int *)(a3 + 8);
  unint64_t v24 = *(void *)a3;
  if (v23 >= *(_DWORD *)(a3 + 12))
  {
    unint64_t v29 = v23 + 1;
    BOOL v30 = v24 + 24 * v23 > (unint64_t)&v33;
    if (v24 <= (unint64_t)&v33 && v30)
    {
      uint64_t v32 = (char *)&v34[-1] - v24;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v29, 24);
      unint64_t v24 = *(void *)a3;
      unint64_t v15 = (__n128 *)&v32[*(void *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v29, 24);
      unint64_t v24 = *(void *)a3;
      unint64_t v15 = (__n128 *)&v33;
    }
  }
  uint64_t v25 = (__n128 *)(v24 + 24 * *(unsigned int *)(a3 + 8));
  __n128 result = *v15;
  v25[1].n128_u64[0] = v15[1].n128_u64[0];
  *uint64_t v25 = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t mlir::scf::ForallOp::promoteIfSingleIteration(mlir::scf::ForallOp *this, mlir::RewriterBase *a2)
{
  v41[6] = *MEMORY[0x1E4F143B8];
  mlir::scf::ForallOp::getMixedLowerBound(this, (uint64_t)&__src);
  mlir::scf::ForallOp::getMixedUpperBound(this, (uint64_t)&v27);
  mlir::scf::ForallOp::getMixedStep(this, (uint64_t)&v24);
  __dst = v35;
  uint64_t v34 = 0x600000000;
  int v4 = v31;
  if (v31)
  {
    if (__src == v32)
    {
      unsigned int v5 = v31;
      if (v31 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v35, v31, 8), (unsigned int v5 = v31) != 0))
      {
        memcpy(__dst, __src, 8 * v5);
      }
      LODWORD(v34) = v4;
    }
    else
    {
      __dst = __src;
      uint64_t v34 = v31;
      char __src = v32;
      HIDWORD(v31) = 0;
    }
    LODWORD(v31) = 0;
  }
  uint64_t v36 = v38;
  uint64_t v37 = 0x600000000;
  int v6 = v28;
  if (v28)
  {
    if (v27 != v29)
    {
      uint64_t v36 = v27;
      uint64_t v37 = v28;
      unint64_t v27 = v29;
      HIDWORD(v28) = 0;
LABEL_18:
      LODWORD(v28) = 0;
      goto LABEL_19;
    }
    if (v28 < 7)
    {
      uint64_t v7 = v28;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v28, 8);
      uint64_t v7 = v28;
      if (!v28) {
        goto LABEL_17;
      }
    }
    memcpy(v36, v27, 8 * v7);
LABEL_17:
    LODWORD(v37) = v6;
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v39 = v41;
  uint64_t v40 = 0x600000000;
  int v8 = v25;
  uint64_t v9 = v24;
  if (!v25) {
    goto LABEL_29;
  }
  if (v24 == v26)
  {
    if (v25 < 7)
    {
      uint64_t v10 = v25;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v25, 8);
      uint64_t v10 = v25;
      uint64_t v9 = v24;
      if (!v25) {
        goto LABEL_27;
      }
    }
    memcpy(v39, v9, 8 * v10);
    uint64_t v9 = v24;
LABEL_27:
    LODWORD(v40) = v8;
    goto LABEL_28;
  }
  uint64_t v39 = v24;
  uint64_t v40 = v25;
  unint64_t v24 = v26;
  HIDWORD(v25) = 0;
  uint64_t v9 = v26;
LABEL_28:
  LODWORD(v25) = 0;
LABEL_29:
  if (v9 != v26) {
    free(v9);
  }
  if (v27 != v29) {
    free(v27);
  }
  if (__src != v32) {
    free(__src);
  }
  char v11 = 0;
  uint64_t v12 = (uint64_t *)v39;
  if (v34 && v37 && v40)
  {
    uint64_t v13 = a2;
    unint64_t v14 = (uint64_t *)__dst;
    unint64_t v15 = (uint64_t *)v36;
    uint64_t v16 = 8 * v40 - 8;
    uint64_t v17 = 8 * v37 - 8;
    uint64_t v18 = 8 * v34 - 8;
    do
    {
      uint64_t v19 = mlir::constantTripCount(*v14, *v15, *v12);
      if (v20) {
        BOOL v21 = v19 == 1;
      }
      else {
        BOOL v21 = 0;
      }
      char v11 = !v21;
      if (!v21) {
        break;
      }
      if (!v18) {
        break;
      }
      if (!v17) {
        break;
      }
      ++v14;
      ++v15;
      ++v12;
      uint64_t v22 = v16;
      v16 -= 8;
      v17 -= 8;
      v18 -= 8;
    }
    while (v22);
    uint64_t v12 = (uint64_t *)v39;
    a2 = v13;
  }
  if (v12 != v41) {
    free(v12);
  }
  if (v36 != v38) {
    free(v36);
  }
  if (__dst != v35) {
    free(__dst);
  }
  if (v11) {
    return 0;
  }
  mlir::scf::promote((uint64_t)a2, *(void *)this);
  return 1;
}

void mlir::scf::ForallOp::getMixedLowerBound(mlir::scf::ForallOp *this@<X0>, uint64_t a2@<X8>)
{
  void v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  unint64_t v5 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v13 = Context;
  uint64_t v14 = v6;
  uint64_t v7 = (void **)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v14);
  unint64_t v9 = v8;
  unint64_t v10 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v11 = *(void *)this + 16 * ((v10 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v11 = 0;
  }
  if ((v10 & 0x800000) != 0) {
    uint64_t v12 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::ValueRange::ValueRange(v15, v12, *(unsigned int *)(v11 + 32));
  mlir::getMixedValues(v7, v9, v15[0], v15[1], (mlir::Builder *)&v13, a2);
}

void mlir::scf::ForallOp::getMixedUpperBound(mlir::scf::ForallOp *this@<X0>, uint64_t a2@<X8>)
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  unint64_t v5 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v15 = Context;
  uint64_t v16 = v6;
  uint64_t v7 = (void **)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v16);
  unint64_t v9 = v8;
  unint64_t v10 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v11 = *(void *)this + 16 * ((v10 >> 23) & 1) + 64;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(unsigned int *)(v11 + 32);
  int v13 = *(_DWORD *)(v11 + 36);
  if ((v10 & 0x800000) != 0) {
    uint64_t v14 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::ValueRange::ValueRange(v17, v14 + 32 * v12, (v13 + v12) - v12);
  mlir::getMixedValues(v7, v9, v17[0], v17[1], (mlir::Builder *)&v15, a2);
}

void mlir::scf::ForallOp::getMixedStep(mlir::scf::ForallOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18[2] = *MEMORY[0x1E4F143B8];
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  unint64_t v5 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v16 = Context;
  uint64_t v17 = v6;
  uint64_t v7 = (void **)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v17);
  unint64_t v9 = v8;
  unint64_t v10 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v11 = (_DWORD *)(*(void *)this + 16 * ((v10 >> 23) & 1) + 64);
  }
  else {
    uint64_t v11 = 0;
  }
  int v12 = v11[8];
  int v13 = v11[9];
  int v14 = v11[10];
  if ((v10 & 0x800000) != 0) {
    uint64_t v15 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::ValueRange::ValueRange(v18, v15 + 32 * (v13 + v12), (v14 + v13 + v12) - (unint64_t)(v13 + v12));
  mlir::getMixedValues(v7, v9, v18[0], v18[1], (mlir::Builder *)&v16, a2);
}

void mlir::scf::promote(uint64_t a1, uint64_t a2)
{
  v89[6] = *MEMORY[0x1E4F143B8];
  unint64_t v79 = (mlir::GenericProgramPoint *)a2;
  uint64_t v4 = a1 + 24;
  long long v68 = *(_OWORD *)(a1 + 24);
  unint64_t v5 = (mlir::IndexType **)(a1 + 8);
  uint64_t v6 = *(void *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v6) {
    uint64_t v7 = (mlir::GenericProgramPoint **)(v6 - 8);
  }
  else {
    uint64_t v7 = 0;
  }
  mlir::Block::getTerminator(v7);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(a2 + 24);
  mlir::scf::ForallOp::getMixedLowerBound((mlir::scf::ForallOp *)&v79, (uint64_t)&v87);
  mlir::getValueOrCreateConstantIndexOp(v5, v10, v87, v88, (uint64_t)&v83);
  if (v87 != v89) {
    free(v87);
  }
  unint64_t v11 = *((unsigned int *)v79 + 11);
  if (HIBYTE(*((_DWORD *)v79 + 11))) {
    int v12 = (_DWORD *)((char *)v79 + 16 * ((v11 >> 23) & 1) + 64);
  }
  else {
    int v12 = 0;
  }
  int v13 = v12[8];
  int v14 = v12[9];
  int v16 = v12[10];
  int v15 = v12[11];
  if ((v11 & 0x800000) == 0)
  {
    uint64_t v66 = (v14 + v13 + v16);
    uint64_t v18 = 32 * v66;
    unint64_t v19 = (v15 + v66) - v66;
    uint64_t v20 = 32 * v66;
    unsigned int v21 = v84;
    unint64_t v22 = v19 + v84;
    if (v22 <= v85) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v17 = (v14 + v13 + v16);
  uint64_t v18 = *((void *)v79 + 9) + 32 * v17;
  unint64_t v19 = (v15 + v17) - v17;
  uint64_t v20 = v18;
  unsigned int v21 = v84;
  unint64_t v22 = v19 + v84;
  if (v22 > v85)
  {
LABEL_11:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v22, 8);
    unsigned int v21 = v84;
  }
LABEL_12:
  if (v19 || v18 != v20)
  {
    uint64_t v23 = &v83[8 * v21];
    if (v18 != v20)
    {
      for (uint64_t i = (uint64_t *)(v18 + 24); ; i += 4)
      {
        uint64_t v25 = *i;
        *(void *)uint64_t v23 = v25;
        v23 += 8;
      }
    }
    if (v19 > 0xC
      && ((uint64_t v26 = v21, v27 = &v83[8 * v19 + 8 * v21], (unint64_t)v23 < v18 + 32 * v19)
        ? (BOOL v28 = v18 + 24 >= (unint64_t)v27)
        : (BOOL v28 = 1),
          v28))
    {
      uint64_t v29 = v19 & 3;
      if ((v19 & 3) == 0) {
        uint64_t v29 = 4;
      }
      unint64_t v30 = v19 - v29;
      v23 += 8 * v30;
      uint64_t v31 = (const double *)(v18 + 88);
      uint64_t v32 = (unsigned long long *)&v83[8 * v26 + 16];
      unint64_t v33 = v30;
      do
      {
        uint64_t v34 = v31 - 8;
        unsigned long long v35 = (unsigned __int128)vld4q_f64(v34);
        unsigned long long v36 = (unsigned __int128)vld4q_f64(v31);
        *(v32 - 1) = v35;
        *uint64_t v32 = v36;
        v31 += 16;
        v32 += 2;
        v33 -= 4;
      }
      while (v33);
    }
    else
    {
      unint64_t v30 = 0;
    }
    unint64_t v37 = v19 - v30;
    uint64_t v38 = (uint64_t *)(v18 + 32 * v30 + 24);
    do
    {
      uint64_t v39 = *v38;
      v38 += 4;
      *(void *)uint64_t v23 = v39;
      v23 += 8;
      --v37;
    }
    while (v37);
    unsigned int v21 = v84;
  }
  unint64_t v40 = v21 + v19;
  unsigned int v84 = v21 + v19;
  uint64_t v41 = v79;
  uint64_t v42 = *(void *)((((unint64_t)v79
                    + 16 * (((unint64_t)*((unsigned int *)v79 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v79 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v79 + 10)
                  + 8);
  if (v42) {
    uint64_t v43 = v42 - 8;
  }
  else {
    uint64_t v43 = 0;
  }
  uint64_t v44 = *((void *)v79 + 2);
  mlir::ValueRange::ValueRange(v82, (uint64_t)v83, v40);
  (*(void (**)(uint64_t, uint64_t, uint64_t, mlir::GenericProgramPoint *, unint64_t, unint64_t))(*(void *)a1 + 56))(a1, v43, v44, v41, v82[0], v82[1]);
  uint64_t v45 = *((void *)v79 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v79);
  uint64_t v47 = *(void *)(v46 + 8);
  *(void *)(a1 + 24) = v45;
  *(void *)(a1 + 32) = v47;
  uint64_t v87 = v89;
  uint64_t v88 = 0x600000000;
  unint64_t v48 = *((unsigned int *)v79 + 9);
  if (v48 >= 7) {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v48, 8);
  }
  uint64_t v67 = v9;
  uint64_t v49 = *(void *)(((v9
                    + 16 * (((unint64_t)*(unsigned int *)(v9 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(v9 + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v9 + 40)
                  + 8);
  if (v49) {
    uint64_t v50 = v49 - 8;
  }
  else {
    uint64_t v50 = 0;
  }
  uint64_t v51 = (mlir::GenericProgramPoint *)(v50 + 32);
  uint64_t v52 = *(mlir::GenericProgramPoint **)(v50 + 40);
  if (v52 != (mlir::GenericProgramPoint *)(v50 + 32))
  {
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v52);
      uint64_t v78 = v53;
      uint64_t Dest = mlir::tensor::ParallelInsertSliceOp::getDest((mlir::tensor::ParallelInsertSliceOp *)&v78);
      uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v78);
      uint64_t v55 = *((void *)v79 + 3);
      unint64_t v75 = *(void *)(Dest + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v76 = Input;
      v74[0] = mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v78);
      v74[1] = v56;
      v73[0] = mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v78);
      v73[1] = v57;
      v72[0] = mlir::tensor::InsertSliceOp::getStrides((mlir::tensor::InsertSliceOp *)&v78);
      v72[1] = v58;
      v71[0] = mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v78);
      v71[1] = v59;
      v70[0] = mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v78);
      v70[1] = v60;
      v69[0] = mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v78);
      v69[1] = v61;
      uint64_t v62 = mlir::OpBuilder::create<mlir::tensor::InsertSliceOp,mlir::Type,mlir::Value &,mlir::Value &,mlir::OperandRange,mlir::OperandRange,mlir::OperandRange,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>>(v5, v55, (uint64_t *)&v75, &v76, &Dest, (uint64_t)v74, (uint64_t)v73, (uint64_t)v72, v71, v70, v69);
      uint64_t v63 = v88;
      if (v88 >= (unint64_t)HIDWORD(v88))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v88 + 1, 8);
        uint64_t v63 = v88;
      }
      v87[v63] = (char *)v62 - 16;
      LODWORD(v88) = v88 + 1;
      uint64_t v52 = (mlir::GenericProgramPoint *)*((void *)v52 + 1);
    }
    while (v52 != v51);
  }
  unint64_t v64 = *((unsigned int *)v79 + 9);
  if (v64) {
    uint64_t v65 = (char *)v79 - 16;
  }
  else {
    uint64_t v65 = 0;
  }
  mlir::ValueRange::ValueRange(v81, (uint64_t)v65, v64);
  mlir::ValueRange::ValueRange(v80, (uint64_t)v87, v88);
  mlir::RewriterBase::replaceAllUsesWith(a1, v81[0], v81[1], v80[0], v80[1]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v67);
  (*(void (**)(uint64_t, mlir::GenericProgramPoint *))(*(void *)a1 + 40))(a1, v79);
  if (v87 != v89) {
    free(v87);
  }
  if (v83 != v86) {
    free(v83);
  }
  if ((void)v68)
  {
    *(_OWORD *)uint64_t v4 = v68;
  }
  else
  {
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::InsertSliceOp,mlir::Type,mlir::Value &,mlir::Value &,mlir::OperandRange,mlir::OperandRange,mlir::OperandRange,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  v37[38] = *MEMORY[0x1E4F143B8];
  uint64_t v29 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v29);
  uint64_t v20 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.insert_slice", (const unsigned __int8 *)0x13, Context);
  if (!v21)
  {
    __int16 v33 = 1283;
    unint64_t v32[2] = (uint64_t)"tensor.insert_slice";
    v32[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v31 = 259;
    llvm::operator+(v32, (uint64_t *)&v30, (uint64_t)v37);
    llvm::report_fatal_error((llvm::Twine *)v37, 1);
  }
  mlir::OperationState::OperationState(v37, a2, v20);
  uint64_t v28 = *a3;
  uint64_t v22 = *a4;
  uint64_t v23 = *a5;
  mlir::ValueRange::ValueRange(v36, *(void *)a6, *(void *)(a6 + 8));
  mlir::ValueRange::ValueRange(v35, *(void *)a7, *(void *)(a7 + 8));
  mlir::ValueRange::ValueRange(v34, *(void *)a8, *(void *)(a8 + 8));
  mlir::tensor::InsertSliceOp::build(a1, (uint64_t)v37, v28, v22, v23, v36[0], v36[1], v24, v35[0], v35[1], v34[0], v34[1], *a9, a9[1], *a10, a10[1], *a11, a11[1]);
  uint64_t v25 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v37);
  if (*(_UNKNOWN **)(*((void *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::InsertSliceOp,void>::id) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v37);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  v18[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.yield", (const unsigned __int8 *)9, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    void v15[2] = (uint64_t)"scf.yield";
    unint64_t v15[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::OperationState::addOperands((uint64_t)v18, v17[0], v17[1]);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

void mlir::scf::ForOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"scf.for", 7, (__int16)v140, a2, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC999428;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  long long v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ForOpIterArgsFolder]";
  unint64_t v141 = 92;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v141;
  }
  unint64_t v11 = &v140[v10];
  unint64_t v12 = v141 - v10;
  if (v141 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v141 - v10;
  }
  __int16 v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  __int16 v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_154;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_155;
    }
    char v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    char v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_158;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      unint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)unint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_158:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      unsigned long long v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)unsigned long long v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  uint64_t v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"scf.for", 7, (__int16)v140, a2, 0, 0);
  *(void *)uint64_t v38 = &unk_1EC99A760;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    uint64_t v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  long long v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyTrivialLoops]";
  unint64_t v141 = 93;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = v141;
  }
  uint64_t v45 = &v140[v44];
  unint64_t v46 = v141 - v44;
  if (v141 - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = v141 - v44;
  }
  unint64_t v48 = &v45[v47];
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  uint64_t v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)uint64_t v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  uint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
    goto LABEL_154;
  }
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (v54)
  {
    if (v54 >> 61) {
      goto LABEL_155;
    }
    uint64_t v55 = (char *)operator new(8 * v54);
    uint64_t v56 = &v55[8 * v51];
    uint64_t v57 = &v55[8 * v54];
    *(void *)uint64_t v56 = v38;
    uint64_t v42 = (uint64_t)(v56 + 8);
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v56 = (char *)(8 * v51);
    uint64_t v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      unint64_t v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_159;
      }
      uint64_t v60 = (v59 >> 3) + 1;
      uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v62 = &v41[-v61];
      v56 -= v61;
      uint64_t v63 = &v55[8 * v51 - 16];
      unint64_t v64 = v41 - 16;
      uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v67 = *((_OWORD *)v64 - 1);
        long long v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)unint64_t v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)uint64_t v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      uint64_t v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_159:
        do
        {
          uint64_t v68 = *((void *)v41 - 1);
          v41 -= 8;
          *(void *)uint64_t v41 = 0;
          *((void *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      uint64_t v41 = (char *)a1[1];
      uint64_t v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        uint64_t v71 = *((void *)v69 - 1);
        v69 -= 8;
        uint64_t v70 = v71;
        *(void *)uint64_t v69 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
  uint64_t v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"scf.for", 7, (__int16)v140, a2, 0, 0);
  *(void *)uint64_t v72 = &unk_1EC99C000;
  if (*((void *)v72 + 9))
  {
    unint64_t v73 = v72[22];
    if (v73 <= v72[23]) {
      goto LABEL_79;
    }
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    unint64_t v75 = (char *)a1[2];
    unint64_t v74 = a1[3];
    if ((unint64_t)v75 < v74) {
      goto LABEL_80;
    }
    goto LABEL_91;
  }
  long long v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::LastTensorLoadCanonicalization]";
  unint64_t v141 = 103;
  unint64_t v77 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v77) {
    unint64_t v78 = v77;
  }
  else {
    unint64_t v78 = v141;
  }
  unint64_t v79 = &v140[v78];
  unint64_t v80 = v141 - v78;
  if (v141 - v78 >= 0x12) {
    uint64_t v81 = 18;
  }
  else {
    uint64_t v81 = v141 - v78;
  }
  BOOL v82 = &v79[v81];
  unint64_t v83 = v80 - v81;
  if (v83 >= v83 - 1) {
    --v83;
  }
  *((void *)v72 + 8) = v82;
  *((void *)v72 + 9) = v83;
  unint64_t v73 = v72[22];
  if (v73 > v72[23]) {
    goto LABEL_90;
  }
LABEL_79:
  v72[22] = v73;
  unint64_t v75 = (char *)a1[2];
  unint64_t v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(void *)unint64_t v75 = v72;
    uint64_t v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  unsigned int v84 = (char *)a1[1];
  uint64_t v85 = (v75 - v84) >> 3;
  unint64_t v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61) {
    goto LABEL_154;
  }
  uint64_t v87 = v74 - (void)v84;
  if (v87 >> 2 > v86) {
    unint64_t v86 = v87 >> 2;
  }
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v88 = v86;
  }
  if (v88)
  {
    if (v88 >> 61) {
      goto LABEL_155;
    }
    unint64_t v89 = (char *)operator new(8 * v88);
    uint64_t v90 = &v89[8 * v85];
    uint64_t v91 = &v89[8 * v88];
    *(void *)uint64_t v90 = v72;
    uint64_t v76 = (uint64_t)(v90 + 8);
    int64_t v92 = (char *)(v75 - v84);
    if (v75 != v84) {
      goto LABEL_100;
    }
  }
  else
  {
    unint64_t v89 = 0;
    uint64_t v90 = (char *)(8 * v85);
    uint64_t v91 = 0;
    *(void *)(8 * v85) = v72;
    uint64_t v76 = 8 * v85 + 8;
    int64_t v92 = (char *)(v75 - v84);
    if (v75 != v84)
    {
LABEL_100:
      unint64_t v93 = (unint64_t)(v92 - 8);
      if (v93 < 0x78
        || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
      {
        goto LABEL_160;
      }
      uint64_t v94 = (v93 >> 3) + 1;
      uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v96 = &v75[-v95];
      v90 -= v95;
      uint64_t v97 = &v89[8 * v85 - 16];
      uint64_t v98 = v75 - 16;
      uint64_t v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v101 = *((_OWORD *)v98 - 1);
        long long v100 = *(_OWORD *)v98;
        *((_OWORD *)v98 - 1) = 0uLL;
        *(_OWORD *)uint64_t v98 = 0uLL;
        *((_OWORD *)v97 - 1) = v101;
        *(_OWORD *)uint64_t v97 = v100;
        v97 -= 32;
        v98 -= 32;
        v99 -= 4;
      }
      while (v99);
      unint64_t v75 = v96;
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_160:
        do
        {
          uint64_t v102 = *((void *)v75 - 1);
          v75 -= 8;
          *(void *)unint64_t v75 = 0;
          *((void *)v90 - 1) = v102;
          v90 -= 8;
        }
        while (v75 != v84);
      }
      unint64_t v75 = (char *)a1[1];
      long long v103 = (char *)a1[2];
      a1[1] = v90;
      a1[2] = v76;
      a1[3] = v91;
      while (v103 != v75)
      {
        uint64_t v105 = *((void *)v103 - 1);
        v103 -= 8;
        uint64_t v104 = v105;
        *(void *)long long v103 = 0;
        if (v105) {
          (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
        }
      }
      goto LABEL_113;
    }
  }
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75) {
    operator delete(v75);
  }
LABEL_115:
  a1[2] = v76;
  uint64_t v106 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v106 + 2), (uint64_t)"scf.for", 7, (__int16)v140, a2, 0, 0);
  *(void *)uint64_t v106 = &unk_1EC99A9B0;
  if (*((void *)v106 + 9))
  {
    unint64_t v107 = v106[22];
    if (v107 <= v106[23]) {
      goto LABEL_117;
    }
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 20), v106 + 24, v107, 16);
    v106[22] = v106[22];
    uint64_t v109 = (char *)a1[2];
    unint64_t v108 = a1[3];
    if ((unint64_t)v109 < v108) {
      goto LABEL_118;
    }
    goto LABEL_129;
  }
  long long v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ForOpTensorCastFolder]";
  unint64_t v141 = 94;
  unint64_t v111 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v111) {
    unint64_t v112 = v111;
  }
  else {
    unint64_t v112 = v141;
  }
  uint64_t v113 = &v140[v112];
  unint64_t v114 = v141 - v112;
  if (v141 - v112 >= 0x12) {
    uint64_t v115 = 18;
  }
  else {
    uint64_t v115 = v141 - v112;
  }
  __int16 v116 = &v113[v115];
  unint64_t v117 = v114 - v115;
  if (v117 >= v117 - 1) {
    --v117;
  }
  *((void *)v106 + 8) = v116;
  *((void *)v106 + 9) = v117;
  unint64_t v107 = v106[22];
  if (v107 > v106[23]) {
    goto LABEL_128;
  }
LABEL_117:
  v106[22] = v107;
  uint64_t v109 = (char *)a1[2];
  unint64_t v108 = a1[3];
  if ((unint64_t)v109 < v108)
  {
LABEL_118:
    *(void *)uint64_t v109 = v106;
    uint64_t v110 = (uint64_t)(v109 + 8);
    goto LABEL_153;
  }
LABEL_129:
  uint64_t v118 = (char *)a1[1];
  uint64_t v119 = (v109 - v118) >> 3;
  unint64_t v120 = v119 + 1;
  if ((unint64_t)(v119 + 1) >> 61) {
LABEL_154:
  }
    abort();
  uint64_t v121 = v108 - (void)v118;
  if (v121 >> 2 > v120) {
    unint64_t v120 = v121 >> 2;
  }
  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v122 = v120;
  }
  if (!v122)
  {
    uint64_t v123 = 0;
    uint64_t v124 = (char *)(8 * v119);
    uint64_t v125 = 0;
    *(void *)(8 * v119) = v106;
    uint64_t v110 = 8 * v119 + 8;
    long long v126 = (char *)(v109 - v118);
    if (v109 != v118) {
      goto LABEL_138;
    }
    goto LABEL_150;
  }
  if (v122 >> 61) {
LABEL_155:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v123 = (char *)operator new(8 * v122);
  uint64_t v124 = &v123[8 * v119];
  uint64_t v125 = &v123[8 * v122];
  *(void *)uint64_t v124 = v106;
  uint64_t v110 = (uint64_t)(v124 + 8);
  long long v126 = (char *)(v109 - v118);
  if (v109 != v118)
  {
LABEL_138:
    unint64_t v127 = (unint64_t)(v126 - 8);
    if (v127 < 0x78
      || &v109[-(v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v124
      && &v123[v109 - v118 - (v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v109)
    {
      goto LABEL_161;
    }
    uint64_t v128 = (v127 >> 3) + 1;
    uint64_t v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v130 = &v109[-v129];
    v124 -= v129;
    uint64_t v131 = &v123[8 * v119 - 16];
    uint64_t v132 = v109 - 16;
    uint64_t v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v135 = *((_OWORD *)v132 - 1);
      long long v134 = *(_OWORD *)v132;
      *((_OWORD *)v132 - 1) = 0uLL;
      *(_OWORD *)uint64_t v132 = 0uLL;
      *((_OWORD *)v131 - 1) = v135;
      *(_OWORD *)uint64_t v131 = v134;
      v131 -= 32;
      v132 -= 32;
      v133 -= 4;
    }
    while (v133);
    uint64_t v109 = v130;
    if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_161:
      do
      {
        uint64_t v136 = *((void *)v109 - 1);
        v109 -= 8;
        *(void *)uint64_t v109 = 0;
        *((void *)v124 - 1) = v136;
        v124 -= 8;
      }
      while (v109 != v118);
    }
    uint64_t v109 = (char *)a1[1];
    unsigned int v137 = (char *)a1[2];
    a1[1] = v124;
    a1[2] = v110;
    a1[3] = v125;
    while (v137 != v109)
    {
      uint64_t v139 = *((void *)v137 - 1);
      v137 -= 8;
      uint64_t v138 = v139;
      *(void *)unsigned int v137 = 0;
      if (v139) {
        (*(void (**)(uint64_t))(*(void *)v138 + 8))(v138);
      }
    }
    goto LABEL_151;
  }
LABEL_150:
  a1[1] = v124;
  a1[2] = v110;
  a1[3] = v125;
LABEL_151:
  if (v109) {
    operator delete(v109);
  }
LABEL_153:
  a1[2] = v110;
}

void mlir::scf::ForOp::getConstantStep(mlir::scf::ForOp *this@<X0>, uint64_t a2@<X8>)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(*(void *)this + 72) + 88);
  unint64_t v7 = 0;
  uint64_t v8 = v3;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v8);
  if (!DefiningOp) {
    goto LABEL_11;
  }
  uint64_t v5 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_11;
  }
  unint64_t v9 = v11;
  uint64_t v10 = 0x100000000;
  mlir::Operation::fold(v5, 0, 0, (uint64_t)&v9);
  BOOL v6 = (*(void *)v9 & 0xFFFFFFFFFFFFFFF8) == 0
    || *(void *)(*(void *)(*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 136) != (void)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (!v6) {
    unint64_t v7 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v9 != v11) {
    free(v9);
  }
  if (!v6)
  {
    mlir::IntegerAttr::getValue(&v7, (llvm::APInt *)&v9);
    *(_DWORD *)(a2 + 8) = v10;
    *(void *)a2 = v9;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
LABEL_11:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

BOOL mlir::scf::ForallOp::verify(uint64_t **this)
{
  uint64_t v185 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v2 = 0;
  }
  unint64_t v174 = *(void *)(v2 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v174);
  uint64_t v4 = *this;
  uint64_t v5 = *((unsigned int *)*this + 9);
  unint64_t v6 = *((unsigned int *)*this + 11);
  uint64_t v7 = (v6 >> 23) & 1;
  if (BYTE3(v6)) {
    uint64_t v8 = &(*this)[2 * v7 + 8];
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (*((_DWORD *)v8 + 9) + *((_DWORD *)v8 + 8) + *((_DWORD *)v8 + 10));
  if ((*((_DWORD *)v8 + 11) + v9) - v9 == v5)
  {
    unsigned int v10 = v3;
    uint64_t v11 = *(void *)((((unint64_t)&(*this)[2 * v7 + 8] + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *((unsigned int *)v4 + 10)
                    + 8);
    if (v11) {
      uint64_t v12 = v11 - 8;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (const char *)v3;
    if (v3 + v5 == ((*(void *)(v12 + 56) - *(void *)(v12 + 48)) >> 3))
    {
      if (!v3)
      {
LABEL_16:
        unint64_t v15 = &v4[2 * v7 + 8];
        if (BYTE3(v6)) {
          __int16 v16 = v15;
        }
        else {
          __int16 v16 = 0;
        }
        int v17 = *((_DWORD *)v16 + 11);
        if (v17)
        {
          unint64_t v18 = 0;
          uint64_t v19 = (*((_DWORD *)v16 + 9) + *((_DWORD *)v16 + 8) + *((_DWORD *)v16 + 10));
          unint64_t v20 = (v17 + v19) - v19;
          uint64_t v21 = v4[9] + 32 * v19;
          unsigned int v22 = 1;
          while ((*(void *)(*(void *)(*(void *)(v12 + 48) + 8 * (v10 + v22 - 1)) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v21 + 32 * v18 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
          {
            unint64_t v18 = v22++;
            if (v20 <= v18) {
              goto LABEL_23;
            }
          }
          v166[0] = (const void **)"type mismatch between ";
          __int16 v167 = 259;
          mlir::OpState::emitOpError(this, v166, (uint64_t)&v174);
          if (v174)
          {
            int v168 = 5;
            long long v169 = (const char *)v18;
            unint64_t v112 = &v168;
            uint64_t v113 = (char *)v176;
            if (v177 >= v178)
            {
              unint64_t v149 = v177 + 1;
              if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
              {
                int64_t v162 = (char *)&v168 - (unsigned char *)v176;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v149, 24);
                uint64_t v113 = (char *)v176;
                unint64_t v112 = (int *)((char *)v176 + v162);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v149, 24);
                unint64_t v112 = &v168;
                uint64_t v113 = (char *)v176;
              }
            }
            unint64_t v114 = &v113[24 * v177];
            long long v115 = *(_OWORD *)v112;
            *((void *)v114 + 2) = *((void *)v112 + 2);
            *(_OWORD *)unint64_t v114 = v115;
            uint64_t v116 = ++v177;
            if (v174)
            {
              int v168 = 3;
              long long v169 = "-th output and corresponding block argument";
              uint64_t v170 = 43;
              unint64_t v117 = &v168;
              uint64_t v118 = (char *)v176;
              if (v116 >= v178)
              {
                unint64_t v152 = v116 + 1;
                BOOL v153 = (char *)v176 + 24 * v116 > (char *)&v168;
                if (v176 <= &v168 && v153)
                {
                  int64_t v164 = (char *)&v168 - (unsigned char *)v176;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v152, 24);
                  uint64_t v118 = (char *)v176;
                  unint64_t v117 = (int *)((char *)v176 + v164);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v152, 24);
                  unint64_t v117 = &v168;
                  uint64_t v118 = (char *)v176;
                }
              }
              uint64_t v119 = &v118[24 * v177];
              long long v120 = *(_OWORD *)v117;
              *((void *)v119 + 2) = *((void *)v117 + 2);
              *(_OWORD *)uint64_t v119 = v120;
              ++v177;
            }
          }
          uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
          if (v174) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
          }
          if (!v184) {
            return v51;
          }
          uint64_t v121 = (void **)__p;
          if (__p)
          {
            unint64_t v122 = v183;
            uint64_t v123 = __p;
            if (v183 != __p)
            {
              do
                unint64_t v122 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v122 - 1);
              while (v122 != v121);
              uint64_t v123 = __p;
            }
            uint64_t v183 = v121;
            operator delete(v123);
          }
          unint64_t v77 = v180;
          if (!v180) {
            goto LABEL_151;
          }
          uint64_t v124 = v181;
          unint64_t v79 = v180;
          if (v181 == v180) {
            goto LABEL_150;
          }
          do
          {
            long long v126 = (void *)*--v124;
            uint64_t v125 = v126;
            *uint64_t v124 = 0;
            if (v126) {
              operator delete[](v125);
            }
          }
          while (v124 != v77);
        }
        else
        {
LABEL_23:
          if (!*v15) {
            goto LABEL_30;
          }
          unint64_t v174 = *v15;
          v175[0] = 1;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v174);
          if (!v23) {
            goto LABEL_30;
          }
          unint64_t v174 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
          v175[0] = v174 != 0;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v174);
          if (v24 != v13)
          {
            __int16 v167 = 257;
            mlir::OpState::emitOpError(this, v166, (uint64_t)&v174);
            uint64_t v127 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v174, "mapping attribute size must match op rank");
            uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v127);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v174);
            return v51;
          }
          unint64_t v174 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
          v175[0] = v174 != 0;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v174);
          if (!v26)
          {
LABEL_30:
            uint64_t v29 = *this;
            if (HIBYTE(*((_DWORD *)*this + 11))) {
              unint64_t v30 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
            }
            else {
              unint64_t v30 = 0;
            }
            unint64_t v174 = *(void *)(v30 + 8);
            uint64_t v31 = (int64x2_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v174);
            long long v33 = v32;
            unint64_t v34 = *((unsigned int *)*this + 11);
            uint64_t v35 = (uint64_t)&(*this)[2 * ((v34 >> 23) & 1) + 8];
            if (!HIBYTE(*((_DWORD *)*this + 11))) {
              uint64_t v35 = 0;
            }
            if ((v34 & 0x800000) != 0) {
              uint64_t v36 = (*this)[9];
            }
            else {
              uint64_t v36 = 0;
            }
            mlir::ValueRange::ValueRange(v173, v36, *(unsigned int *)(v35 + 32));
            if (!mlir::verifyListOfOperandsOrIntegers(v29, (const void **)"lower bound", (const char *)0xB, v10, v31, v33, v173[0], v173[1]))return 0; {
            unint64_t v37 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
            }
            if (!HIBYTE(*((_DWORD *)*this + 11))) {
              unint64_t v37 = 0;
            }
            unint64_t v174 = *(void *)(v37 + 24);
            uint64_t v38 = (int64x2_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v174);
            unint64_t v40 = v39;
            unint64_t v41 = *((unsigned int *)*this + 11);
            uint64_t v42 = HIBYTE(*((_DWORD *)*this + 11)) ? (uint64_t)&(*this)[2 * ((v41 >> 23) & 1) + 8] : 0;
            uint64_t v43 = *(unsigned int *)(v42 + 32);
            int v44 = *(_DWORD *)(v42 + 36);
            uint64_t v45 = (v41 & 0x800000) != 0 ? (*this)[9] : 0;
            mlir::ValueRange::ValueRange(v172, v45 + 32 * v43, (v44 + v43) - v43);
            if (!mlir::verifyListOfOperandsOrIntegers(v29, (const void **)"upper bound", (const char *)0xB, v10, v38, v40, v172[0], v172[1]))return 0; {
            StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)this);
            }
            unint64_t v48 = v47;
            uint64_t DynamicStep = mlir::scf::ForallOp::getDynamicStep((mlir::scf::ForallOp *)this);
            mlir::ValueRange::ValueRange(v171, DynamicStep, v50);
            return mlir::verifyListOfOperandsOrIntegers(v29, (const void **)"step", (const char *)4, v10, StaticStrides, v48, v171[0], v171[1]) != 0;
          }
          uint64_t v27 = (void **)Value;
          uint64_t v28 = 8 * v26;
          while (mlir::detail::InterfaceMap::lookup<mlir::DeviceMappingAttrInterface>(**v27 + 8))
          {
            ++v27;
            v28 -= 8;
            if (!v28) {
              goto LABEL_30;
            }
          }
          __int16 v167 = 257;
          mlir::OpState::emitOpError(this, v166, (uint64_t)&v174);
          if (v174)
          {
            mlir::Diagnostic::operator<<((uint64_t)v175, **(void **)((*this)[6] + 96));
            if (v174)
            {
              int v168 = 3;
              long long v169 = " is not device mapping attribute";
              uint64_t v170 = 32;
              uint64_t v128 = &v168;
              uint64_t v129 = (char *)v176;
              if (v177 >= v178)
              {
                unint64_t v154 = v177 + 1;
                if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
                {
                  int64_t v165 = (char *)&v168 - (unsigned char *)v176;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v154, 24);
                  uint64_t v129 = (char *)v176;
                  uint64_t v128 = (int *)((char *)v176 + v165);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v154, 24);
                  uint64_t v128 = &v168;
                  uint64_t v129 = (char *)v176;
                }
              }
              uint64_t v130 = &v129[24 * v177];
              long long v131 = *(_OWORD *)v128;
              *((void *)v130 + 2) = *((void *)v128 + 2);
              *(_OWORD *)uint64_t v130 = v131;
              ++v177;
            }
          }
          uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
          if (v174) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
          }
          if (!v184) {
            return v51;
          }
          uint64_t v132 = (void **)__p;
          if (__p)
          {
            uint64_t v133 = v183;
            long long v134 = __p;
            if (v183 != __p)
            {
              do
                uint64_t v133 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v133 - 1);
              while (v133 != v132);
              long long v134 = __p;
            }
            uint64_t v183 = v132;
            operator delete(v134);
          }
          unint64_t v77 = v180;
          if (!v180) {
            goto LABEL_151;
          }
          long long v135 = v181;
          unint64_t v79 = v180;
          if (v181 == v180)
          {
LABEL_150:
            unsigned int v181 = v77;
            operator delete(v79);
LABEL_151:
            if (v176 != v179) {
              free(v176);
            }
            return v51;
          }
          do
          {
            unsigned int v137 = (void *)*--v135;
            uint64_t v136 = v137;
            void *v135 = 0;
            if (v137) {
              operator delete[](v136);
            }
          }
          while (v135 != v77);
        }
LABEL_149:
        unint64_t v79 = v180;
        goto LABEL_150;
      }
      __int16 v14 = 0;
      while (1)
      {
        unint64_t v174 = *(void *)(*(void *)(*(void *)(v12 + 48) + 8 * (void)v14) + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!mlir::Type::isIndex((mlir::Type *)&v174)) {
          break;
        }
        if (v13 == ++v14)
        {
          uint64_t v4 = *this;
          unint64_t v6 = *((unsigned int *)*this + 11);
          uint64_t v7 = (v6 >> 23) & 1;
          goto LABEL_16;
        }
      }
      v166[0] = (const void **)"expects ";
      __int16 v167 = 259;
      mlir::OpState::emitOpError(this, v166, (uint64_t)&v174);
      if (v174)
      {
        int v168 = 2;
        long long v169 = v14;
        uint64_t v97 = &v168;
        uint64_t v98 = (char *)v176;
        if (v177 >= v178)
        {
          unint64_t v148 = v177 + 1;
          if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
          {
            int64_t v161 = (char *)&v168 - (unsigned char *)v176;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v148, 24);
            uint64_t v98 = (char *)v176;
            uint64_t v97 = (int *)((char *)v176 + v161);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v148, 24);
            uint64_t v97 = &v168;
            uint64_t v98 = (char *)v176;
          }
        }
        uint64_t v99 = &v98[24 * v177];
        long long v100 = *(_OWORD *)v97;
        *((void *)v99 + 2) = *((void *)v97 + 2);
        *(_OWORD *)uint64_t v99 = v100;
        uint64_t v101 = ++v177;
        if (v174)
        {
          int v168 = 3;
          long long v169 = "-th block argument to be an index";
          uint64_t v170 = 33;
          uint64_t v102 = &v168;
          long long v103 = (char *)v176;
          if (v101 >= v178)
          {
            unint64_t v150 = v101 + 1;
            BOOL v151 = (char *)v176 + 24 * v101 > (char *)&v168;
            if (v176 <= &v168 && v151)
            {
              int64_t v163 = (char *)&v168 - (unsigned char *)v176;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v150, 24);
              long long v103 = (char *)v176;
              uint64_t v102 = (int *)((char *)v176 + v163);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v150, 24);
              uint64_t v102 = &v168;
              long long v103 = (char *)v176;
            }
          }
          uint64_t v104 = &v103[24 * v177];
          long long v105 = *(_OWORD *)v102;
          *((void *)v104 + 2) = *((void *)v102 + 2);
          *(_OWORD *)uint64_t v104 = v105;
          ++v177;
        }
      }
      uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
      if (v174) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
      }
      if (v184)
      {
        uint64_t v106 = (void **)__p;
        if (__p)
        {
          unint64_t v107 = v183;
          unint64_t v108 = __p;
          if (v183 != __p)
          {
            do
              unint64_t v107 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v107 - 1);
            while (v107 != v106);
            unint64_t v108 = __p;
          }
          uint64_t v183 = v106;
          operator delete(v108);
        }
        unint64_t v77 = v180;
        if (!v180) {
          goto LABEL_151;
        }
        uint64_t v109 = v181;
        unint64_t v79 = v180;
        if (v181 == v180) {
          goto LABEL_150;
        }
        do
        {
          unint64_t v111 = (void *)*--v109;
          uint64_t v110 = v111;
          *uint64_t v109 = 0;
          if (v111) {
            operator delete[](v110);
          }
        }
        while (v109 != v77);
        goto LABEL_149;
      }
    }
    else
    {
      v166[0] = (const void **)"region expects ";
      __int16 v167 = 259;
      mlir::OpState::emitOpError(this, v166, (uint64_t)&v174);
      if (v174)
      {
        int v168 = 5;
        long long v169 = v13;
        BOOL v82 = &v168;
        unint64_t v83 = (char *)v176;
        if (v177 >= v178)
        {
          unint64_t v142 = v177 + 1;
          if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
          {
            int64_t v157 = (char *)&v168 - (unsigned char *)v176;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v142, 24);
            unint64_t v83 = (char *)v176;
            BOOL v82 = (int *)((char *)v176 + v157);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v142, 24);
            BOOL v82 = &v168;
            unint64_t v83 = (char *)v176;
          }
        }
        unsigned int v84 = &v83[24 * v177];
        long long v85 = *(_OWORD *)v82;
        *((void *)v84 + 2) = *((void *)v82 + 2);
        *(_OWORD *)unsigned int v84 = v85;
        uint64_t v86 = ++v177;
        if (v174)
        {
          int v168 = 3;
          long long v169 = " arguments";
          uint64_t v170 = 10;
          uint64_t v87 = &v168;
          unint64_t v88 = (char *)v176;
          if (v86 >= v178)
          {
            unint64_t v144 = v86 + 1;
            BOOL v145 = (char *)v176 + 24 * v86 > (char *)&v168;
            if (v176 <= &v168 && v145)
            {
              int64_t v159 = (char *)&v168 - (unsigned char *)v176;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v144, 24);
              unint64_t v88 = (char *)v176;
              uint64_t v87 = (int *)((char *)v176 + v159);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v144, 24);
              uint64_t v87 = &v168;
              unint64_t v88 = (char *)v176;
            }
          }
          unint64_t v89 = &v88[24 * v177];
          long long v90 = *(_OWORD *)v87;
          *((void *)v89 + 2) = *((void *)v87 + 2);
          *(_OWORD *)unint64_t v89 = v90;
          ++v177;
        }
      }
      uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
      if (v174) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
      }
      if (v184)
      {
        uint64_t v91 = (void **)__p;
        if (__p)
        {
          int64_t v92 = v183;
          unint64_t v93 = __p;
          if (v183 != __p)
          {
            do
              int64_t v92 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v92 - 1);
            while (v92 != v91);
            unint64_t v93 = __p;
          }
          uint64_t v183 = v91;
          operator delete(v93);
        }
        unint64_t v77 = v180;
        if (!v180) {
          goto LABEL_151;
        }
        uint64_t v94 = v181;
        unint64_t v79 = v180;
        if (v181 == v180) {
          goto LABEL_150;
        }
        do
        {
          uint64_t v96 = (void *)*--v94;
          uint64_t v95 = v96;
          *uint64_t v94 = 0;
          if (v96) {
            operator delete[](v95);
          }
        }
        while (v94 != v77);
        goto LABEL_149;
      }
    }
  }
  else
  {
    v166[0] = (const void **)"produces ";
    __int16 v167 = 259;
    mlir::OpState::emitOpError(this, v166, (uint64_t)&v174);
    if (v174)
    {
      unint64_t v52 = (const char *)*((unsigned int *)*this + 9);
      int v168 = 5;
      long long v169 = v52;
      uint64_t v53 = &v168;
      unint64_t v54 = (char *)v176;
      if (v177 >= v178)
      {
        unint64_t v139 = v177 + 1;
        if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
        {
          int64_t v155 = (char *)&v168 - (unsigned char *)v176;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v139, 24);
          unint64_t v54 = (char *)v176;
          uint64_t v53 = (int *)((char *)v176 + v155);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v139, 24);
          uint64_t v53 = &v168;
          unint64_t v54 = (char *)v176;
        }
      }
      uint64_t v55 = &v54[24 * v177];
      long long v56 = *(_OWORD *)v53;
      *((void *)v55 + 2) = *((void *)v53 + 2);
      *(_OWORD *)uint64_t v55 = v56;
      uint64_t v57 = ++v177;
      if (v174)
      {
        int v168 = 3;
        long long v169 = " results, but has only ";
        uint64_t v170 = 23;
        uint64_t v58 = &v168;
        unint64_t v59 = (char *)v176;
        if (v57 >= v178)
        {
          unint64_t v140 = v57 + 1;
          BOOL v141 = (char *)v176 + 24 * v57 > (char *)&v168;
          if (v176 <= &v168 && v141)
          {
            int64_t v156 = (char *)&v168 - (unsigned char *)v176;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v140, 24);
            unint64_t v59 = (char *)v176;
            uint64_t v58 = (int *)((char *)v176 + v156);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v140, 24);
            uint64_t v58 = &v168;
            unint64_t v59 = (char *)v176;
          }
        }
        uint64_t v60 = &v59[24 * v177];
        long long v61 = *(_OWORD *)v58;
        *((void *)v60 + 2) = *((void *)v58 + 2);
        *(_OWORD *)uint64_t v60 = v61;
        ++v177;
        if (v174)
        {
          uint64_t v62 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
          if (!HIBYTE(*((_DWORD *)*this + 11))) {
            uint64_t v62 = 0;
          }
          int v63 = *((_DWORD *)v62 + 11);
          uint64_t v64 = (*((_DWORD *)v62 + 9) + *((_DWORD *)v62 + 8) + *((_DWORD *)v62 + 10));
          int v168 = 5;
          long long v169 = (const char *)((v63 + v64) - v64);
          uint64_t v65 = &v168;
          long long v66 = (char *)v176;
          if (v177 >= v178)
          {
            unint64_t v143 = v177 + 1;
            if (v176 <= &v168 && (char *)v176 + 24 * v177 > (char *)&v168)
            {
              int64_t v158 = (char *)&v168 - (unsigned char *)v176;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v143, 24);
              long long v66 = (char *)v176;
              uint64_t v65 = (int *)((char *)v176 + v158);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v143, 24);
              uint64_t v65 = &v168;
              long long v66 = (char *)v176;
            }
          }
          long long v67 = &v66[24 * v177];
          long long v68 = *(_OWORD *)v65;
          *((void *)v67 + 2) = *((void *)v65 + 2);
          *(_OWORD *)long long v67 = v68;
          uint64_t v69 = ++v177;
          if (v174)
          {
            int v168 = 3;
            long long v169 = " outputs";
            uint64_t v170 = 8;
            uint64_t v70 = &v168;
            uint64_t v71 = (char *)v176;
            if (v69 >= v178)
            {
              unint64_t v146 = v69 + 1;
              BOOL v147 = (char *)v176 + 24 * v69 > (char *)&v168;
              if (v176 <= &v168 && v147)
              {
                int64_t v160 = (char *)&v168 - (unsigned char *)v176;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v146, 24);
                uint64_t v71 = (char *)v176;
                uint64_t v70 = (int *)((char *)v176 + v160);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, v179, v146, 24);
                uint64_t v70 = &v168;
                uint64_t v71 = (char *)v176;
              }
            }
            uint64_t v72 = &v71[24 * v177];
            long long v73 = *(_OWORD *)v70;
            *((void *)v72 + 2) = *((void *)v70 + 2);
            *(_OWORD *)uint64_t v72 = v73;
            ++v177;
          }
        }
      }
    }
    uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
    if (v174) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
    }
    if (v184)
    {
      unint64_t v74 = (void **)__p;
      if (__p)
      {
        unint64_t v75 = v183;
        uint64_t v76 = __p;
        if (v183 != __p)
        {
          do
            unint64_t v75 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v75 - 1);
          while (v75 != v74);
          uint64_t v76 = __p;
        }
        uint64_t v183 = v74;
        operator delete(v76);
      }
      unint64_t v77 = v180;
      if (!v180) {
        goto LABEL_151;
      }
      unint64_t v78 = v181;
      unint64_t v79 = v180;
      if (v181 == v180) {
        goto LABEL_150;
      }
      do
      {
        uint64_t v81 = (void *)*--v78;
        unint64_t v80 = v81;
        *unint64_t v78 = 0;
        if (v81) {
          operator delete[](v80);
        }
      }
      while (v78 != v77);
      goto LABEL_149;
    }
  }
  return v51;
}

uint64_t mlir::scf::ForallOp::getDynamicStep(mlir::scf::ForallOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (*(_DWORD *)(v2 + 36) + *(_DWORD *)(v2 + 32));
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

uint64_t mlir::scf::ForallOp::print(mlir::scf::ForallOp *this, mlir::OpAsmPrinter *a2)
{
  v116[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned char **)this;
  uint64_t v5 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v6 = (_WORD *)*((void *)v5 + 4);
  if (*((void *)v5 + 3) - (void)v6 > 1uLL)
  {
    _WORD *v6 = 10272;
    *((void *)v5 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v5, " (", 2uLL);
  }
  unint64_t v7 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v8 = *(void *)this + 16 * ((v7 >> 23) & 1) + 64;
  uint64_t v9 = *(void *)(((v8 + ((v7 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)this + 40)
                 + 8);
  if (v9) {
    uint64_t v10 = v9 - 8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(v10 + 48);
  unint64_t v12 = (*(void *)(v10 + 56) - v11) >> 3;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v8 = 0;
  }
  unint64_t AttrDictionary = *(const char **)(v8 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
  if (v12 >= v13) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = v12;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&AttrDictionary, v11, v14);
  unint64_t v15 = AttrDictionary;
  uint64_t v16 = v105;
  int v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t AttrDictionary = ", ";
  uint64_t v105 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v15, 0, (uint64_t)v15, v16, (uint64_t)a2, v17, (uint64_t)&AttrDictionary);
  LODWORD(v15) = mlir::scf::ForallOp::isNormalized(this);
  unint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = *((void *)v18 + 4);
  unint64_t v20 = *((void *)v18 + 3) - v19;
  if (v15)
  {
    if (v20 > 4)
    {
      *(unsigned char *)(v19 + 4) = 32;
      *(_DWORD *)uint64_t v19 = 1852383273;
      *((void *)v18 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v18, ") in ", 5uLL);
    }
    unint64_t v21 = *(unsigned int *)(*(void *)this + 44);
    uint64_t v22 = *(void *)this + 16 * ((v21 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(unsigned int *)(v22 + 32);
    if ((v21 & 0x800000) != 0) {
      uint64_t v24 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = v24 + 32 * v23;
    uint64_t v26 = (*(_DWORD *)(v22 + 36) + v23) - v23;
    unint64_t AttrDictionary = *(const char **)(v22 + 24);
    uint64_t v27 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
    uint64_t v29 = v28;
    mlir::ValueRange::ValueRange(v116, 0, 0);
    uint64_t v30 = v116[0];
    uint64_t v31 = v116[1];
  }
  else
  {
    if (v20 > 3)
    {
      *(_DWORD *)uint64_t v19 = 540876841;
      *((void *)v18 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v18, ") = ", 4uLL);
    }
    unint64_t v32 = *(unsigned int *)(*(void *)this + 44);
    uint64_t v33 = *(void *)this + 16 * ((v32 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v33 = 0;
    }
    uint64_t v34 = *(unsigned int *)(v33 + 32);
    if ((v32 & 0x800000) != 0) {
      uint64_t v35 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v35 = 0;
    }
    unint64_t AttrDictionary = *(const char **)(v33 + 8);
    uint64_t v36 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
    uint64_t v38 = v37;
    mlir::ValueRange::ValueRange(v115, 0, 0);
    mlir::printDynamicIndexList((uint64_t)a2, (uint64_t)v4, v35, v34, v36, v38, v115[0], v115[1], 0, 0, 1);
    unint64_t v39 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v40 = (_DWORD *)*((void *)v39 + 4);
    if (*((void *)v39 + 3) - (void)v40 > 3uLL)
    {
      *unint64_t v40 = 544175136;
      *((void *)v39 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v39, " to ", 4uLL);
    }
    unint64_t v41 = *(unsigned int *)(*(void *)this + 44);
    uint64_t v42 = *(void *)this + 16 * ((v41 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v42 = 0;
    }
    uint64_t v43 = *(unsigned int *)(v42 + 32);
    if ((v41 & 0x800000) != 0) {
      uint64_t v44 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v44 = 0;
    }
    uint64_t v45 = v44 + 32 * v43;
    uint64_t v46 = (*(_DWORD *)(v42 + 36) + v43) - v43;
    unint64_t AttrDictionary = *(const char **)(v42 + 24);
    uint64_t v47 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
    uint64_t v49 = v48;
    mlir::ValueRange::ValueRange(v114, 0, 0);
    mlir::printDynamicIndexList((uint64_t)a2, (uint64_t)v4, v45, v46, v47, v49, v114[0], v114[1], 0, 0, 1);
    unint64_t v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v51 = *((void *)v50 + 4);
    if ((unint64_t)(*((void *)v50 + 3) - v51) > 5)
    {
      *(_WORD *)(v51 + 4) = 8304;
      *(_DWORD *)uint64_t v51 = 1702130464;
      *((void *)v50 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v50, " step ", 6uLL);
    }
    unint64_t v52 = *(unsigned int *)(*(void *)this + 44);
    uint64_t v53 = *(void *)this + 16 * ((v52 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v53 = 0;
    }
    if ((v52 & 0x800000) != 0) {
      uint64_t v54 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v55 = (*(_DWORD *)(v53 + 36) + *(_DWORD *)(v53 + 32));
    uint64_t v25 = v54 + 32 * v55;
    uint64_t v26 = (*(_DWORD *)(v53 + 40) + v55) - v55;
    unint64_t AttrDictionary = *(const char **)(v53 + 16);
    uint64_t v27 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
    uint64_t v29 = v56;
    mlir::ValueRange::ValueRange(v113, 0, 0);
    uint64_t v30 = v113[0];
    uint64_t v31 = v113[1];
  }
  mlir::printDynamicIndexList((uint64_t)a2, (uint64_t)v4, v25, v26, v27, v29, v30, v31, 0, 0, 1);
  unint64_t v57 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v58 = *(void *)this + 16 * ((v57 >> 23) & 1) + 64;
  uint64_t v59 = *(void *)(((v58 + ((v57 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(*(void *)this + 40)
                  + 8);
  if (v59) {
    uint64_t v60 = v59 - 8;
  }
  else {
    uint64_t v60 = 0;
  }
  uint64_t v61 = *(void *)(v60 + 48);
  uint64_t v62 = (*(void *)(v60 + 56) - v61) >> 3;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v58 = 0;
  }
  unint64_t AttrDictionary = *(const char **)(v58 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
  uint64_t v64 = v62 - v63;
  uint64_t v65 = (void *)(v61 + 8 * v63);
  unint64_t v66 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    long long v67 = (_DWORD *)(*(void *)this + 16 * ((v66 >> 23) & 1) + 64);
  }
  else {
    long long v67 = 0;
  }
  int v68 = v67[8];
  int v69 = v67[9];
  int v71 = v67[10];
  int v70 = v67[11];
  if ((v66 & 0x800000) != 0) {
    uint64_t v72 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v72 = 0;
  }
  mlir::ValueRange::ValueRange(v112, v72 + 32 * (v69 + v68 + v71), (v70 + v69 + v68 + v71) - (unint64_t)(v69 + v68 + v71));
  printInitializationList(a2, v65, v64, v112[0], v112[1], " shared_outs", 0xCuLL);
  long long v73 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v74 = (unsigned char *)*((void *)v73 + 4);
  if (*((unsigned char **)v73 + 3) == v74)
  {
    llvm::raw_ostream::write(v73, " ", 1uLL);
  }
  else
  {
    unsigned char *v74 = 32;
    ++*((void *)v73 + 4);
  }
  unint64_t v75 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v76 = *(void *)this + 16 * ((v75 >> 23) & 1) + 64;
  uint64_t v77 = *(void *)(((v76 + ((v75 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(*(void *)this + 40)
                  + 8);
  if (v77) {
    uint64_t v78 = v77 - 8;
  }
  else {
    uint64_t v78 = 0;
  }
  uint64_t v79 = *(void *)(v78 + 56) - *(void *)(v78 + 48);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v76 = 0;
  }
  unint64_t AttrDictionary = *(const char **)(v76 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&AttrDictionary);
  if (v80 != v79 >> 3)
  {
    uint64_t v81 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    BOOL v82 = (_DWORD *)*((void *)v81 + 4);
    if (*((void *)v81 + 3) - (void)v82 > 3uLL)
    {
      *BOOL v82 = 673201709;
      *((void *)v81 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v81, "-> (", 4uLL);
    }
    uint64_t v83 = *(unsigned int *)(*(void *)this + 36);
    unsigned int v84 = (const char *)(*(void *)this - 16);
    if (!v83) {
      unsigned int v84 = 0;
    }
    uint64_t v102 = v84;
    uint64_t v103 = v83;
    mlir::OperandRange::getTypes((uint64_t *)&v102, (uint64_t *)&AttrDictionary);
    uint64_t v102 = ", ";
    uint64_t v103 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)AttrDictionary, v105, AttrData, v107, (uint64_t)a2, (uint64_t)a2, (uint64_t)&v102);
    long long v85 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v86 = (_WORD *)*((void *)v85 + 4);
    if (*((void *)v85 + 3) - (void)v86 > 1uLL)
    {
      *uint64_t v86 = 8233;
      *((void *)v85 + 4) += 2;
      uint64_t v87 = *(void *)this;
      unint64_t v88 = *(unsigned int *)(*(void *)this + 44);
      if ((v88 & 0x7FFFFF) != 0) {
        goto LABEL_70;
      }
      goto LABEL_72;
    }
    llvm::raw_ostream::write(v85, ") ", 2uLL);
  }
  uint64_t v87 = *(void *)this;
  unint64_t v88 = *(unsigned int *)(*(void *)this + 44);
  if ((v88 & 0x7FFFFF) != 0)
  {
LABEL_70:
    unint64_t v89 = ((v87 + 16 * ((v88 >> 23) & 1) + ((v88 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(v87 + 40);
    goto LABEL_73;
  }
LABEL_72:
  unint64_t v89 = 0;
LABEL_73:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v89, 0, *(_DWORD *)(v87 + 36) != 0, 0);
  if (v4[47])
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  uint64_t v93 = v92;
  uint64_t v102 = *(const char **)(*(void *)(*(void *)(*(void *)this + 48) + 96)
                        + 8 * *(void *)(*(void *)(*(void *)this + 48) + 104)
                        - 8);
  unint64_t AttrDictionary = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v102);
  uint64_t v105 = v94;
  uint64_t v101 = *(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v101);
  uint64_t v107 = v95;
  uint64_t v100 = *(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 24);
  uint64_t v108 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v100);
  uint64_t v109 = v96;
  uint64_t v99 = *(void *)(*(void *)(*(void *)(*(void *)this + 48) + 96) + 16);
  uint64_t v110 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v99);
  uint64_t v111 = v97;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, const char **, uint64_t))(*(void *)a2 + 192))(a2, Value, v93, &AttrDictionary, 4);
}

uint64_t mlir::scf::ForallOp::isNormalized(mlir::scf::ForallOp *this)
{
  v21[6] = *MEMORY[0x1E4F143B8];
  mlir::scf::ForallOp::getMixedLowerBound(this, (uint64_t)&v19);
  if (!v20)
  {
LABEL_9:
    mlir::scf::ForallOp::getMixedStep(this, (uint64_t)&v16);
    unint64_t v7 = (uint64_t *)v16;
    if (v17)
    {
      uint64_t v8 = 8 * v17 - 8;
      do
      {
        uint64_t v9 = *v7++;
        ConstantIntuint64_t Value = mlir::getConstantIntValue(v9);
        if (v11) {
          BOOL v12 = ConstantIntValue == 1;
        }
        else {
          BOOL v12 = 0;
        }
        uint64_t v14 = v12;
        BOOL v13 = v14 != 1 || v8 == 0;
        v8 -= 8;
      }
      while (!v13);
      unint64_t v7 = (uint64_t *)v16;
      if (v16 == v18) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v14 = 1;
      if (v16 == v18) {
        goto LABEL_26;
      }
    }
    free(v7);
    goto LABEL_26;
  }
  uint64_t v2 = (uint64_t *)v19;
  uint64_t v3 = 8 * v20;
  while (1)
  {
    unint64_t v4 = mlir::getConstantIntValue(*v2);
    if (!v5 || v4 != 0) {
      break;
    }
    ++v2;
    v3 -= 8;
    if (!v3) {
      goto LABEL_9;
    }
  }
  uint64_t v14 = 0;
LABEL_26:
  if (v19 != v21) {
    free(v19);
  }
  return v14;
}

uint64_t mlir::scf::ForallOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  v83[32] = *MEMORY[0x1E4F143B8];
  v57[0] = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
  memset(&v57[1], 0, 24);
  Indexuint64_t Type = mlir::Builder::getIndexType(v57, v4);
  uint64_t v81 = v83;
  uint64_t v82 = 0x400000000;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void **, uint64_t, void, void))(*(void *)a1 + 736))(a1, &v81, 1, 0, 0))
  {
    uint64_t v10 = 0;
    goto LABEL_37;
  }
  uint64_t v55 = 0;
  DenseI64uint64_t ArrayAttr = 0;
  uint64_t v54 = 0;
  uint64_t v78 = v80;
  uint64_t v79 = 0x100000000;
  unint64_t v75 = v77;
  uint64_t v76 = 0x100000000;
  uint64_t v72 = v74;
  uint64_t v73 = 0x100000000;
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(void *)a1 + 376))(a1, "in", 2))
  {
    __b = 0;
    if (mlir::parseDynamicIndexList((uint64_t)a1, (uint64_t)&v75, &v55, (uint64_t *)&__b, 0))
    {
      if (v76)
      {
        unint64_t v6 = (char *)v75;
        uint64_t v7 = 32 * v76;
        while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v6, IndexType, a2 + 16))
        {
          v6 += 32;
          v7 -= 32;
          if (!v7) {
            goto LABEL_8;
          }
        }
        goto LABEL_30;
      }
LABEL_8:
      unint64_t v8 = v82;
      __b = v70;
      HIDWORD(v69) = 6;
      if (v82 < 7)
      {
        if (v82) {
          bzero(v70, 8 * v82);
        }
        uint64_t v9 = v70;
      }
      else
      {
        LODWORD(v69) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v82, 8);
        uint64_t v9 = __b;
        bzero(__b, 8 * v8);
      }
      LODWORD(v69) = v8;
      DenseI64uint64_t ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(v57, (uint64_t)v9, v8);
      if (__b != v70) {
        free(__b);
      }
      __b = v70;
      HIDWORD(v69) = 6;
      if (v8 < 7)
      {
        if (v8) {
          memset_pattern16(v70, &unk_1810FE350, 8 * v8);
        }
        unint64_t v18 = v70;
      }
      else
      {
        LODWORD(v69) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v8, 8);
        unint64_t v18 = __b;
        memset_pattern16(__b, &unk_1810FE350, 8 * v8);
      }
      LODWORD(v69) = v8;
      uint64_t v54 = mlir::Builder::getDenseI64ArrayAttr(v57, (uint64_t)v18, v8);
      if (__b != v70) {
        free(__b);
      }
LABEL_52:
      __b = v70;
      uint64_t v69 = 0x400000000;
      uint64_t v65 = v67;
      uint64_t v66 = 0x400000000;
      uint64_t v19 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 40))(a1);
      if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(void *)a1 + 376))(a1, "shared_outs", 11))
      {
        if (v66 == *(_DWORD *)(a2 + 72))
        {
          if (mlir::OpAsmParser::parseAssignmentList((uint64_t)a1)
            && (*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(void *)a1 + 536))(a1, a2 + 64)
            && mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>((uint64_t)a1, (uint64_t *)&v65, a2 + 64, v19, a2 + 16))
          {
            goto LABEL_57;
          }
          uint64_t v10 = 0;
        }
        else
        {
          uint64_t v61 = "mismatch between out operands and types";
          __int16 v64 = 259;
          (*(void (**)(void **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(void *)a1 + 24))(&v58, a1, v19, &v61);
          uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v58);
        }
LABEL_90:
        if (v65 != v67) {
          free(v65);
        }
        if (__b != v70) {
          free(__b);
        }
        goto LABEL_31;
      }
LABEL_57:
      uint64_t v58 = v60;
      uint64_t v59 = 0x400000000;
      unint64_t v21 = (mlir::Region *)operator new(0x18uLL);
      *(void *)unint64_t v21 = v21;
      *((void *)v21 + 1) = v21;
      *((void *)v21 + 2) = 0;
      uint64_t v53 = v21;
      unsigned int v22 = v82;
      if (v82)
      {
        uint64_t v23 = (char *)v81;
        unint64_t v24 = (unint64_t)v82 << 6;
        uint64_t v25 = (char *)v81;
        do
        {
          *((void *)v25 + 4) = mlir::Builder::getIndexType(v57, v20);
          uint64_t v26 = (char *)v58;
          uint64_t v27 = (long long *)v25;
          if (v59 >= HIDWORD(v59))
          {
            unint64_t v32 = v59 + 1;
            if (v58 <= v25 && (char *)v58 + 64 * (unint64_t)v59 > v25)
            {
              int64_t v34 = v23 - (unsigned char *)v58;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v32, 64);
              uint64_t v26 = (char *)v58;
              uint64_t v27 = (long long *)((char *)v58 + v34);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v32, 64);
              uint64_t v26 = (char *)v58;
              uint64_t v27 = (long long *)v25;
            }
          }
          uint64_t v28 = &v26[64 * (unint64_t)v59];
          long long v29 = *v27;
          long long v30 = v27[1];
          long long v31 = v27[3];
          *((_OWORD *)v28 + 2) = v27[2];
          *((_OWORD *)v28 + 3) = v31;
          *(_OWORD *)uint64_t v28 = v29;
          *((_OWORD *)v28 + 1) = v30;
          unsigned int v22 = v59 + 1;
          LODWORD(v59) = v59 + 1;
          v25 += 64;
          v23 += 64;
          v24 -= 64;
        }
        while (v24);
      }
      if (v69)
      {
        uint64_t v35 = 0;
        uint64_t v36 = (char *)__b;
        unint64_t v37 = (unint64_t)v69 << 6;
        uint64_t v38 = (char *)__b;
        do
        {
          *((void *)v38 + 4) = *(void *)(*(void *)(a2 + 64) + v35);
          unint64_t v39 = (char *)v58;
          unint64_t v40 = (long long *)v38;
          if (v22 >= HIDWORD(v59))
          {
            unint64_t v45 = v22 + 1;
            uint64_t v46 = (char *)v58 + 64 * (unint64_t)v22;
            if (v58 <= v38 && v46 > v38)
            {
              int64_t v52 = v36 - (unsigned char *)v58;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v45, 64);
              unint64_t v39 = (char *)v58;
              unint64_t v40 = (long long *)((char *)v58 + v52);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v45, 64);
              unint64_t v39 = (char *)v58;
              unint64_t v40 = (long long *)v38;
            }
          }
          unint64_t v41 = &v39[64 * (unint64_t)v59];
          long long v42 = *v40;
          long long v43 = v40[1];
          long long v44 = v40[3];
          *((_OWORD *)v41 + 2) = v40[2];
          *((_OWORD *)v41 + 3) = v44;
          *(_OWORD *)unint64_t v41 = v42;
          *((_OWORD *)v41 + 1) = v43;
          unsigned int v22 = v59 + 1;
          LODWORD(v59) = v59 + 1;
          v38 += 64;
          v36 += 64;
          v35 += 8;
          v37 -= 64;
        }
        while (v37);
      }
      if ((*(unsigned __int8 (**)(mlir::AsmParser *, mlir::Region *, void *, void, void))(*(void *)a1 + 744))(a1, v21, v58, v22, 0))
      {
        mlir::scf::ForallOp::ensureTerminator(v21, v57, *(void *)a2);
        mlir::OperationState::addRegion(a2, (unint64_t)&v53);
        if ((*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
        {
          mlir::OperationState::addAttribute((mlir::Attribute *)a2, (uint64_t)"staticLowerBound", 16, DenseI64ArrayAttr);
          mlir::OperationState::addAttribute((mlir::Attribute *)a2, (uint64_t)"staticUpperBound", 16, v55);
          mlir::OperationState::addAttribute((mlir::Attribute *)a2, (uint64_t)"staticStep", 10, v54);
          uint64_t v48 = (mlir::MLIRContext **)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
          uint64_t v61 = (const char *)__PAIR64__(v76, v79);
          int v62 = v73;
          int v63 = v66;
          DenseI32uint64_t ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(v48, (uint64_t)&v61, 4);
          mlir::OperationState::addAttribute((mlir::Attribute *)a2, (uint64_t)"operandSegmentSizes", 19, DenseI32ArrayAttr);
          uint64_t v10 = 1;
        }
        else
        {
          uint64_t v10 = 0;
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      unint64_t v50 = v53;
      uint64_t v53 = 0;
      if (v50)
      {
        mlir::Region::~Region(v50);
        operator delete(v51);
      }
      if (v58 != v60) {
        free(v58);
      }
      goto LABEL_90;
    }
  }
  else if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 136))(a1))
  {
    __b = 0;
    if (mlir::parseDynamicIndexList((uint64_t)a1, (uint64_t)&v78, &DenseI64ArrayAttr, (uint64_t *)&__b, 0))
    {
      if (v79)
      {
        char v11 = (char *)v78;
        uint64_t v12 = 32 * v79;
        while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v11, IndexType, a2 + 16))
        {
          v11 += 32;
          v12 -= 32;
          if (!v12) {
            goto LABEL_17;
          }
        }
        goto LABEL_30;
      }
LABEL_17:
      __int16 v71 = 257;
      if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "to", 2, &__b))
      {
        __b = 0;
        if (mlir::parseDynamicIndexList((uint64_t)a1, (uint64_t)&v75, &v55, (uint64_t *)&__b, 0))
        {
          if (v76)
          {
            BOOL v13 = (char *)v75;
            uint64_t v14 = 32 * v76;
            while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v13, IndexType, a2 + 16))
            {
              v13 += 32;
              v14 -= 32;
              if (!v14) {
                goto LABEL_23;
              }
            }
            goto LABEL_30;
          }
LABEL_23:
          __int16 v71 = 257;
          if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "step", 4, &__b))
          {
            __b = 0;
            if (mlir::parseDynamicIndexList((uint64_t)a1, (uint64_t)&v72, &v54, (uint64_t *)&__b, 0))
            {
              if (v73)
              {
                unint64_t v15 = (char *)v72;
                uint64_t v16 = 32 * v73;
                while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v15, IndexType, a2 + 16))
                {
                  v15 += 32;
                  v16 -= 32;
                  if (!v16) {
                    goto LABEL_52;
                  }
                }
                goto LABEL_30;
              }
              goto LABEL_52;
            }
          }
        }
      }
    }
  }
LABEL_30:
  uint64_t v10 = 0;
LABEL_31:
  if (v72 != v74) {
    free(v72);
  }
  if (v75 != v77) {
    free(v75);
  }
  if (v78 != v80) {
    free(v78);
  }
LABEL_37:
  if (v81 != v83) {
    free(v81);
  }
  return v10;
}

void mlir::scf::ForallOp::ensureTerminator(void *a1, void *a2, uint64_t a3)
{
  unint64_t v10[2] = *MEMORY[0x1E4F143B8];
  mlir::impl::ensureRegionTerminator(a1, (uint64_t)a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl<mlir::scf::ForallOp>::buildTerminator);
  uint64_t v5 = a1[1];
  if (v5) {
    unint64_t v6 = (mlir::GenericProgramPoint **)(v5 - 8);
  }
  else {
    unint64_t v6 = 0;
  }
  mlir::Block::getTerminator(v6);
  if (*(_UNKNOWN **)(*(void *)(v7 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::InParallelOp,void>::id) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (void *)(((v8
                  + 16 * (((unint64_t)*(unsigned int *)(v8 + 44) >> 23) & 1)
                  + (((unint64_t)*(unsigned int *)(v8 + 44) >> 21) & 0x7F8)
                  + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(v8 + 40));
  if ((void *)*v9 == v9)
  {
    mlir::ValueRange::ValueRange(v10, 0, 0);
    mlir::OpBuilder::createBlock(a2, (uint64_t)v9, 0, v10[0], v10[1], 0, 0);
  }
}

void mlir::scf::ForallOp::build(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, char a12, void (*a13)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t), uint64_t a14)
{
  v101[6] = *MEMORY[0x1E4F143B8];
  uint64_t v99 = v101;
  uint64_t v100 = 0x600000000;
  uint64_t v96 = v98;
  uint64_t v97 = 0x600000000;
  uint64_t v93 = v95;
  uint64_t v94 = 0x600000000;
  long long v90 = v92;
  uint64_t v91 = 0x600000000;
  uint64_t v87 = v89;
  uint64_t v88 = 0x600000000;
  unsigned int v84 = v86;
  uint64_t v85 = 0x600000000;
  mlir::dispatchIndexOpFoldResults(a3, a4, (uint64_t)&v90, (uint64_t)&v99);
  mlir::dispatchIndexOpFoldResults(a5, a6, (uint64_t)&v87, (uint64_t)&v96);
  mlir::dispatchIndexOpFoldResults(a7, a8, (uint64_t)&v84, (uint64_t)&v93);
  mlir::ValueRange::ValueRange(v83, (uint64_t)v90, v91);
  mlir::OperationState::addOperands(a2, v83[0], v83[1]);
  mlir::ValueRange::ValueRange(v82, (uint64_t)v87, v88);
  mlir::OperationState::addOperands(a2, v82[0], v82[1]);
  mlir::ValueRange::ValueRange(v81, (uint64_t)v84, v85);
  mlir::OperationState::addOperands(a2, v81[0], v81[1]);
  mlir::OperationState::addOperands(a2, a9, a10);
  mlir::TypeRange::TypeRange((unint64_t *)&v70, a9, a10);
  unsigned int v22 = v70;
  uint64_t v21 = v71;
  uint64_t v23 = *(unsigned int *)(a2 + 72);
  if (v71 + v23 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v71 + v23, 8);
    LODWORD(v23) = *(_DWORD *)(a2 + 72);
  }
  if (v21)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(a2 + 64) + 8 * v23;
    do
    {
      *(void *)(v25 + 8 * v24) = mlir::TypeRange::dereference_iterator((uint64_t)v22, v24);
      ++v24;
    }
    while (v21 != v24);
    LODWORD(v23) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v23 + v21;
  uint64_t v26 = *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8);
  DenseI64uint64_t ArrayAttr = mlir::Builder::getDenseI64ArrayAttr((mlir::MLIRContext **)a1, (uint64_t)v99, v100);
  mlir::NamedAttribute::NamedAttribute(&v70, v26, DenseI64ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v70, v71);
  uint64_t v28 = *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 24);
  uint64_t v29 = mlir::Builder::getDenseI64ArrayAttr((mlir::MLIRContext **)a1, (uint64_t)v96, v97);
  mlir::NamedAttribute::NamedAttribute(&v70, v28, v29);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v70, v71);
  uint64_t v30 = *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 16);
  uint64_t v31 = mlir::Builder::getDenseI64ArrayAttr((mlir::MLIRContext **)a1, (uint64_t)v93, v94);
  mlir::NamedAttribute::NamedAttribute(&v70, v30, v31);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v70, v71);
  v80[0] = v91;
  v80[1] = v88;
  unint64_t v80[2] = v85;
  v80[3] = a10;
  DenseI32uint64_t ArrayAttr = mlir::Builder::getDenseI32ArrayAttr((mlir::MLIRContext **)a1, (uint64_t)v80, 4);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  LOWORD(v74) = 261;
  int v70 = "operandSegmentSizes";
  uint64_t v71 = 19;
  uint64_t v34 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v70);
  mlir::NamedAttribute::NamedAttribute(&v67, v34, DenseI32ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v67, v68);
  if (a12)
  {
    mlir::NamedAttribute::NamedAttribute(&v70, **(void **)(*(void *)(a2 + 8) + 96), a11);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v70, v71);
  }
  uint64_t v35 = (void *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  uint64_t v36 = (_OWORD *)(a1 + 16);
  long long v64 = *(_OWORD *)(a1 + 16);
  mlir::ValueRange::ValueRange(v79, 0, 0);
  mlir::OpBuilder::createBlock((void *)a1, (uint64_t)v35, 0, v79[0], v79[1], 0, 0);
  uint64_t v38 = v35[1];
  if (v38) {
    unint64_t v39 = (void *)(v38 - 8);
  }
  else {
    unint64_t v39 = 0;
  }
  Indexuint64_t Type = mlir::Builder::getIndexType((mlir::IndexType **)a1, v37);
  unint64_t v41 = IndexType;
  int v70 = &v72;
  HIDWORD(v71) = 6;
  if (a4 < 7)
  {
    if (a4)
    {
      uint64_t v72 = IndexType;
      if (a4 != 1)
      {
        unint64_t v73 = IndexType;
        if (a4 != 2)
        {
          unint64_t v74 = IndexType;
          if (a4 != 3)
          {
            unint64_t v75 = IndexType;
            if (a4 != 4)
            {
              unint64_t v76 = IndexType;
              if (a4 != 5) {
                unint64_t v77 = IndexType;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    LODWORD(v71) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, &v72, a4, 8);
    long long v42 = (unint64_t *)((char *)v70 + 8 * (a4 & 0xFFFFFFFFFFFFFFFCLL));
    unint64_t v43 = a4 & 3;
    int64x2_t v44 = vdupq_n_s64(v41);
    unint64_t v45 = (int64x2_t *)((char *)v70 + 16);
    unint64_t v46 = a4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v45[-1] = v44;
      *unint64_t v45 = v44;
      v45 += 2;
      v46 -= 4;
    }
    while (v46);
    if (a4 != (a4 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
        *v42++ = v41;
        --v43;
      }
      while (v43);
    }
  }
  LODWORD(v71) = a4;
  mlir::ValueRange::ValueRange(v78, (uint64_t)v70, a4);
  uint64_t v47 = v100;
  long long v67 = v69;
  uint64_t v68 = 0x600000000;
  unint64_t v48 = *(void *)a2;
  if (v100 < 7)
  {
    if (v100)
    {
      v69[0] = *(void *)a2;
      if (v100 != 1)
      {
        v69[1] = v48;
        if (v100 != 2)
        {
          uint64_t v69[2] = v48;
          if (v100 != 3)
          {
            v69[3] = v48;
            if (v100 != 4)
            {
              _DWORD v69[4] = v48;
              if (v100 != 5) {
                v69[5] = v48;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v69, v100, 8);
    uint64_t v49 = (unint64_t *)((char *)v67 + 8 * (v47 & 0xFFFFFFFC));
    uint64_t v50 = v47 & 3;
    int64x2_t v51 = vdupq_n_s64(v48);
    int64_t v52 = (int64x2_t *)((char *)v67 + 16);
    uint64_t v53 = v47 & 0xFFFFFFFC;
    do
    {
      v52[-1] = v51;
      int64x2_t *v52 = v51;
      v52 += 2;
      v53 -= 4;
    }
    while (v53);
    if ((v47 & 0xFFFFFFFC) != v47)
    {
      do
      {
        *v49++ = v48;
        --v50;
      }
      while (v50);
    }
  }
  LODWORD(v68) = v47;
  mlir::Block::addArguments(v39, v78[0], v78[1], (uint64_t)v67, v47);
  if (v67 != v69) {
    free(v67);
  }
  if (v70 != &v72) {
    free(v70);
  }
  mlir::TypeRange::TypeRange(v66, a9, a10);
  int v70 = &v72;
  uint64_t v71 = 0x600000000;
  unint64_t v54 = *(void *)a2;
  if (a10 < 7)
  {
    if (a10)
    {
      uint64_t v72 = *(void *)a2;
      if (a10 != 1)
      {
        unint64_t v73 = v54;
        if (a10 != 2)
        {
          unint64_t v74 = v54;
          if (a10 != 3)
          {
            unint64_t v75 = v54;
            if (a10 != 4)
            {
              unint64_t v76 = v54;
              if (a10 != 5) {
                unint64_t v77 = v54;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, &v72, a10, 8);
    uint64_t v55 = (unint64_t *)((char *)v70 + 8 * (a10 & 0xFFFFFFFFFFFFFFFCLL));
    unint64_t v56 = a10 & 3;
    int64x2_t v57 = vdupq_n_s64(v54);
    uint64_t v58 = (int64x2_t *)((char *)v70 + 16);
    unint64_t v59 = a10 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v58[-1] = v57;
      *uint64_t v58 = v57;
      v58 += 2;
      v59 -= 4;
    }
    while (v59);
    if (a10 != (a10 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
        *v55++ = v54;
        --v56;
      }
      while (v56);
    }
  }
  LODWORD(v71) = a10;
  mlir::Block::addArguments(v39, v66[0], v66[1], (uint64_t)v70, a10);
  if (v70 != &v72) {
    free(v70);
  }
  uint64_t v60 = v39[5];
  *(void *)(a1 + 16) = v39;
  *(void *)(a1 + 24) = v60;
  uint64_t v61 = *(void *)a2;
  if (a13)
  {
    mlir::ValueRange::ValueRange(v65, v39[6], (uint64_t)(v39[7] - v39[6]) >> 3);
    a13(a14, a1, v61, v65[0], v65[1]);
    long long v62 = v64;
    if ((void)v64) {
      goto LABEL_59;
    }
  }
  else
  {
    mlir::scf::ForallOp::ensureTerminator(v35, (void *)a1, v61);
    long long v62 = v64;
    if ((void)v64)
    {
LABEL_59:
      _OWORD *v36 = v62;
      int v63 = v84;
      if (v84 == v86) {
        goto LABEL_61;
      }
      goto LABEL_60;
    }
  }
  *(void *)uint64_t v36 = 0;
  *(void *)(a1 + 24) = 0;
  int v63 = v84;
  if (v84 != v86) {
LABEL_60:
  }
    free(v63);
LABEL_61:
  if (v87 != v89) {
    free(v87);
  }
  if (v90 != v92) {
    free(v90);
  }
  if (v93 != v95) {
    free(v93);
  }
  if (v96 != v98) {
    free(v96);
  }
  if (v99 != v101) {
    free(v99);
  }
}

uint64_t mlir::scf::ForallOp::getSingleInductionVar(mlir::scf::ForallOp *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = 0;
  }
  v13[0] = *(void *)(v2 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v13);
  uint64_t result = 0;
  if (v4 == 1)
  {
    unint64_t v5 = *(unsigned int *)(*(void *)this + 44);
    uint64_t v6 = *(void *)this + 16 * ((v5 >> 23) & 1) + 64;
    uint64_t v7 = *(void *)(((v6 + ((v5 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *(unsigned int *)(*(void *)this + 40)
                   + 8);
    if (v7) {
      uint64_t v8 = v7 - 8;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void *)(v8 + 48);
    unint64_t v10 = (*(void *)(v8 + 56) - v9) >> 3;
    if (!BYTE3(v5)) {
      uint64_t v6 = 0;
    }
    v13[0] = *(void *)(v6 + 8);
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v13);
    if (v10 >= v11) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = v10;
    }
    mlir::ValueRange::ValueRange(v13, v9, v12);
    return mlir::ValueRange::dereference_iterator(v13, 0);
  }
  return result;
}

void mlir::scf::ForallOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.dim", 10, (__int16)v140, a2, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC997BA8;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  unint64_t v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::DimOfForallOp]";
  unint64_t v141 = 86;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v141;
  }
  unint64_t v11 = &v140[v10];
  unint64_t v12 = v141 - v10;
  if (v141 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v141 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_154;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_155;
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    unsigned int v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)unsigned int v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unsigned int v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_158;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      uint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_158:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      uint64_t v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)uint64_t v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  uint64_t v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"scf.forall", 10, (__int16)v140, a2, 0, 0);
  *(void *)uint64_t v38 = &unk_1EC99C290;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    unint64_t v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  unint64_t v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldTensorCastOfOutputIntoForallOp]";
  unint64_t v141 = 107;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = v141;
  }
  unint64_t v45 = &v140[v44];
  unint64_t v46 = v141 - v44;
  if (v141 - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = v141 - v44;
  }
  unint64_t v48 = &v45[v47];
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  unint64_t v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)unint64_t v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  uint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
    goto LABEL_154;
  }
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (v54)
  {
    if (v54 >> 61) {
      goto LABEL_155;
    }
    uint64_t v55 = (char *)operator new(8 * v54);
    unint64_t v56 = &v55[8 * v51];
    int64x2_t v57 = &v55[8 * v54];
    *(void *)unint64_t v56 = v38;
    uint64_t v42 = (uint64_t)(v56 + 8);
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v55 = 0;
    unint64_t v56 = (char *)(8 * v51);
    int64x2_t v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      unint64_t v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_159;
      }
      uint64_t v60 = (v59 >> 3) + 1;
      uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      long long v62 = &v41[-v61];
      v56 -= v61;
      int v63 = &v55[8 * v51 - 16];
      long long v64 = v41 - 16;
      uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v67 = *((_OWORD *)v64 - 1);
        long long v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)long long v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)int v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      unint64_t v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_159:
        do
        {
          uint64_t v68 = *((void *)v41 - 1);
          v41 -= 8;
          *(void *)unint64_t v41 = 0;
          *((void *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      unint64_t v41 = (char *)a1[1];
      uint64_t v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        uint64_t v71 = *((void *)v69 - 1);
        v69 -= 8;
        uint64_t v70 = v71;
        *(void *)uint64_t v69 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
  uint64_t v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"scf.forall", 10, (__int16)v140, a2, 0, 0);
  *(void *)uint64_t v72 = &unk_1EC99BF18;
  if (*((void *)v72 + 9))
  {
    unint64_t v73 = v72[22];
    if (v73 <= v72[23]) {
      goto LABEL_79;
    }
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    unint64_t v75 = (char *)a1[2];
    unint64_t v74 = a1[3];
    if ((unint64_t)v75 < v74) {
      goto LABEL_80;
    }
    goto LABEL_91;
  }
  unint64_t v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ForallOpControlOperandsFolder]";
  unint64_t v141 = 102;
  unint64_t v77 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v77) {
    unint64_t v78 = v77;
  }
  else {
    unint64_t v78 = v141;
  }
  uint64_t v79 = &v140[v78];
  unint64_t v80 = v141 - v78;
  if (v141 - v78 >= 0x12) {
    uint64_t v81 = 18;
  }
  else {
    uint64_t v81 = v141 - v78;
  }
  uint64_t v82 = &v79[v81];
  unint64_t v83 = v80 - v81;
  if (v83 >= v83 - 1) {
    --v83;
  }
  *((void *)v72 + 8) = v82;
  *((void *)v72 + 9) = v83;
  unint64_t v73 = v72[22];
  if (v73 > v72[23]) {
    goto LABEL_90;
  }
LABEL_79:
  v72[22] = v73;
  unint64_t v75 = (char *)a1[2];
  unint64_t v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(void *)unint64_t v75 = v72;
    uint64_t v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  unsigned int v84 = (char *)a1[1];
  uint64_t v85 = (v75 - v84) >> 3;
  unint64_t v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61) {
    goto LABEL_154;
  }
  uint64_t v87 = v74 - (void)v84;
  if (v87 >> 2 > v86) {
    unint64_t v86 = v87 >> 2;
  }
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v88 = v86;
  }
  if (v88)
  {
    if (v88 >> 61) {
      goto LABEL_155;
    }
    unint64_t v89 = (char *)operator new(8 * v88);
    long long v90 = &v89[8 * v85];
    uint64_t v91 = &v89[8 * v88];
    *(void *)long long v90 = v72;
    uint64_t v76 = (uint64_t)(v90 + 8);
    uint64_t v92 = (char *)(v75 - v84);
    if (v75 != v84) {
      goto LABEL_100;
    }
  }
  else
  {
    unint64_t v89 = 0;
    long long v90 = (char *)(8 * v85);
    uint64_t v91 = 0;
    *(void *)(8 * v85) = v72;
    uint64_t v76 = 8 * v85 + 8;
    uint64_t v92 = (char *)(v75 - v84);
    if (v75 != v84)
    {
LABEL_100:
      unint64_t v93 = (unint64_t)(v92 - 8);
      if (v93 < 0x78
        || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
      {
        goto LABEL_160;
      }
      uint64_t v94 = (v93 >> 3) + 1;
      uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v96 = &v75[-v95];
      v90 -= v95;
      uint64_t v97 = &v89[8 * v85 - 16];
      uint64_t v98 = v75 - 16;
      uint64_t v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v101 = *((_OWORD *)v98 - 1);
        long long v100 = *(_OWORD *)v98;
        *((_OWORD *)v98 - 1) = 0uLL;
        *(_OWORD *)uint64_t v98 = 0uLL;
        *((_OWORD *)v97 - 1) = v101;
        *(_OWORD *)uint64_t v97 = v100;
        v97 -= 32;
        v98 -= 32;
        v99 -= 4;
      }
      while (v99);
      unint64_t v75 = v96;
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_160:
        do
        {
          uint64_t v102 = *((void *)v75 - 1);
          v75 -= 8;
          *(void *)unint64_t v75 = 0;
          *((void *)v90 - 1) = v102;
          v90 -= 8;
        }
        while (v75 != v84);
      }
      unint64_t v75 = (char *)a1[1];
      uint64_t v103 = (char *)a1[2];
      a1[1] = v90;
      a1[2] = v76;
      a1[3] = v91;
      while (v103 != v75)
      {
        uint64_t v105 = *((void *)v103 - 1);
        v103 -= 8;
        uint64_t v104 = v105;
        *(void *)uint64_t v103 = 0;
        if (v105) {
          (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
        }
      }
      goto LABEL_113;
    }
  }
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75) {
    operator delete(v75);
  }
LABEL_115:
  a1[2] = v76;
  uint64_t v106 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v140, 1);
  mlir::Pattern::Pattern((uint64_t)(v106 + 2), (uint64_t)"scf.forall", 10, (__int16)v140, a2, 0, 0);
  *(void *)uint64_t v106 = &unk_1EC99C4F0;
  if (*((void *)v106 + 9))
  {
    unint64_t v107 = v106[22];
    if (v107 <= v106[23]) {
      goto LABEL_117;
    }
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 20), v106 + 24, v107, 16);
    v106[22] = v106[22];
    uint64_t v109 = (char *)a1[2];
    unint64_t v108 = a1[3];
    if ((unint64_t)v109 < v108) {
      goto LABEL_118;
    }
    goto LABEL_129;
  }
  unint64_t v140 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ForallOpSingleOrZeroIterationDimsFolder]";
  unint64_t v141 = 112;
  unint64_t v111 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
  if (v141 >= v111) {
    unint64_t v112 = v111;
  }
  else {
    unint64_t v112 = v141;
  }
  uint64_t v113 = &v140[v112];
  unint64_t v114 = v141 - v112;
  if (v141 - v112 >= 0x12) {
    uint64_t v115 = 18;
  }
  else {
    uint64_t v115 = v141 - v112;
  }
  uint64_t v116 = &v113[v115];
  unint64_t v117 = v114 - v115;
  if (v117 >= v117 - 1) {
    --v117;
  }
  *((void *)v106 + 8) = v116;
  *((void *)v106 + 9) = v117;
  unint64_t v107 = v106[22];
  if (v107 > v106[23]) {
    goto LABEL_128;
  }
LABEL_117:
  v106[22] = v107;
  uint64_t v109 = (char *)a1[2];
  unint64_t v108 = a1[3];
  if ((unint64_t)v109 < v108)
  {
LABEL_118:
    *(void *)uint64_t v109 = v106;
    uint64_t v110 = (uint64_t)(v109 + 8);
    goto LABEL_153;
  }
LABEL_129:
  uint64_t v118 = (char *)a1[1];
  uint64_t v119 = (v109 - v118) >> 3;
  unint64_t v120 = v119 + 1;
  if ((unint64_t)(v119 + 1) >> 61) {
LABEL_154:
  }
    abort();
  uint64_t v121 = v108 - (void)v118;
  if (v121 >> 2 > v120) {
    unint64_t v120 = v121 >> 2;
  }
  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v122 = v120;
  }
  if (!v122)
  {
    uint64_t v123 = 0;
    uint64_t v124 = (char *)(8 * v119);
    uint64_t v125 = 0;
    *(void *)(8 * v119) = v106;
    uint64_t v110 = 8 * v119 + 8;
    long long v126 = (char *)(v109 - v118);
    if (v109 != v118) {
      goto LABEL_138;
    }
    goto LABEL_150;
  }
  if (v122 >> 61) {
LABEL_155:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v123 = (char *)operator new(8 * v122);
  uint64_t v124 = &v123[8 * v119];
  uint64_t v125 = &v123[8 * v122];
  *(void *)uint64_t v124 = v106;
  uint64_t v110 = (uint64_t)(v124 + 8);
  long long v126 = (char *)(v109 - v118);
  if (v109 != v118)
  {
LABEL_138:
    unint64_t v127 = (unint64_t)(v126 - 8);
    if (v127 < 0x78
      || &v109[-(v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v124
      && &v123[v109 - v118 - (v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v109)
    {
      goto LABEL_161;
    }
    uint64_t v128 = (v127 >> 3) + 1;
    uint64_t v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v130 = &v109[-v129];
    v124 -= v129;
    long long v131 = &v123[8 * v119 - 16];
    uint64_t v132 = v109 - 16;
    uint64_t v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v135 = *((_OWORD *)v132 - 1);
      long long v134 = *(_OWORD *)v132;
      *((_OWORD *)v132 - 1) = 0uLL;
      *(_OWORD *)uint64_t v132 = 0uLL;
      *((_OWORD *)v131 - 1) = v135;
      *(_OWORD *)long long v131 = v134;
      v131 -= 32;
      v132 -= 32;
      v133 -= 4;
    }
    while (v133);
    uint64_t v109 = v130;
    if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_161:
      do
      {
        uint64_t v136 = *((void *)v109 - 1);
        v109 -= 8;
        *(void *)uint64_t v109 = 0;
        *((void *)v124 - 1) = v136;
        v124 -= 8;
      }
      while (v109 != v118);
    }
    uint64_t v109 = (char *)a1[1];
    unsigned int v137 = (char *)a1[2];
    a1[1] = v124;
    a1[2] = v110;
    a1[3] = v125;
    while (v137 != v109)
    {
      uint64_t v139 = *((void *)v137 - 1);
      v137 -= 8;
      uint64_t v138 = v139;
      *(void *)unsigned int v137 = 0;
      if (v139) {
        (*(void (**)(uint64_t))(*(void *)v138 + 8))(v138);
      }
    }
    goto LABEL_151;
  }
LABEL_150:
  a1[1] = v124;
  a1[2] = v110;
  a1[3] = v125;
LABEL_151:
  if (v109) {
    operator delete(v109);
  }
LABEL_153:
  a1[2] = v110;
}

__n128 mlir::scf::ForallOp::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v23[2] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(unsigned int *)(*(void *)a1 + 44);
  if ((v4 & 0x7FFFFF) != 0) {
    unint64_t v5 = ((*(void *)a1 + 16 * ((v4 >> 23) & 1) + ((v4 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
       + 32 * *(unsigned int *)(*(void *)a1 + 40);
  else {
    unint64_t v5 = 0;
  }
  unint64_t v22 = v5;
  unint64_t v6 = (__n128 *)&v22;
  mlir::ValueRange::ValueRange(v23, 0, 0);
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  unint64_t v8 = *(void *)a3;
  if (v7 < *(_DWORD *)(a3 + 12)) {
    goto LABEL_5;
  }
  unint64_t v16 = v7 + 1;
  BOOL v17 = v8 + 24 * v7 > (unint64_t)&v22;
  if (v8 > (unint64_t)&v22 || !v17)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16, 24);
    unint64_t v8 = *(void *)a3;
LABEL_5:
    unint64_t v9 = (char *)&v22;
    goto LABEL_6;
  }
  unint64_t v20 = (char *)&v23[-1] - v8;
  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16, 24);
  unint64_t v8 = *(void *)a3;
  unint64_t v9 = &v20[*(void *)a3];
LABEL_6:
  uint64_t v10 = v8 + 24 * *(unsigned int *)(a3 + 8);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  ++*(_DWORD *)(a3 + 8);
  unint64_t v22 = 0;
  mlir::ValueRange::ValueRange(v23, 0, 0);
  uint64_t v12 = *(unsigned int *)(a3 + 8);
  unint64_t v13 = *(void *)a3;
  if (v12 >= *(_DWORD *)(a3 + 12))
  {
    unint64_t v18 = v12 + 1;
    BOOL v19 = v13 + 24 * v12 > (unint64_t)&v22;
    if (v13 <= (unint64_t)&v22 && v19)
    {
      uint64_t v21 = (char *)&v23[-1] - v13;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v18, 24);
      unint64_t v13 = *(void *)a3;
      unint64_t v6 = (__n128 *)&v21[*(void *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v18, 24);
      unint64_t v13 = *(void *)a3;
      unint64_t v6 = (__n128 *)&v22;
    }
  }
  uint64_t v14 = (__n128 *)(v13 + 24 * *(unsigned int *)(a3 + 8));
  __n128 result = *v6;
  v14[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v14 = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t mlir::scf::InParallelOp::verify(uint64_t **this)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (mlir::Block *)(*this)[2];
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp
      && *(void *)(*(void *)(ParentOp + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::scf::ForallOp,void>::id)
    {
      uint64_t v14 = *(void *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                                                   + 8]
                        + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                        + 7) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *((unsigned int *)*this + 10)
                      + 8);
      if (v14) {
        uint64_t v15 = v14 - 8;
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v16 = (mlir::GenericProgramPoint *)(v15 + 32);
      BOOL v17 = *(mlir::GenericProgramPoint **)(v15 + 40);
      if (v17 == (mlir::GenericProgramPoint *)(v15 + 32)) {
        return 1;
      }
      uint64_t v18 = ParentOp;
      uint64_t v19 = ParentOp + 64;
      while (1)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v17);
        if (*(_UNKNOWN **)(v20[6] + 16) != &mlir::detail::TypeIDResolver<mlir::tensor::ParallelInsertSliceOp,void>::id) {
          break;
        }
        uint64_t v21 = v20;
        uint64_t v58 = v20;
        uint64_t Dest = mlir::tensor::ParallelInsertSliceOp::getDest((mlir::tensor::ParallelInsertSliceOp *)&v58);
        unint64_t v23 = *(unsigned int *)(v18 + 44);
        uint64_t v24 = *(void *)(((v19 + 16 * ((v23 >> 23) & 1) + ((v23 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * *(unsigned int *)(v18 + 40)
                        + 8);
        if (v24) {
          uint64_t v25 = v24 - 8;
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = *(void *)(v25 + 48);
        uint64_t v27 = *(void *)(v25 + 56) - v26;
        uint64_t v28 = v27 >> 3;
        if (HIBYTE(*(_DWORD *)(v18 + 44))) {
          uint64_t v29 = v19 + 16 * ((v23 >> 23) & 1);
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v58 = *(uint64_t **)(v29 + 8);
        mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v58);
        uint64_t v31 = (void *)(v26 + 8 * v30);
        if (v28 != v30)
        {
          uint64_t v32 = 8 * v28 - 8 * v30;
          uint64_t v31 = (void *)(v26 + 8 * v30);
          while (*v31 != Dest)
          {
            ++v31;
            v32 -= 8;
            if (!v32)
            {
              uint64_t v31 = (void *)(v26 + (v27 & 0xFFFFFFFFFFFFFFF8));
              break;
            }
          }
        }
        if (v28 - v30 == ((uint64_t)v31 - v26 + -8 * v30) >> 3)
        {
          unint64_t v54 = (const void **)"may only insert into an output block argument";
          __int16 v57 = 259;
          mlir::Operation::emitOpError(v21, &v54, (uint64_t)&v58);
          uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
          if (v58) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
          }
          if (!v68) {
            return v5;
          }
          unint64_t v43 = (void **)__p;
          if (__p)
          {
            unint64_t v44 = v67;
            unint64_t v45 = __p;
            if (v67 != __p)
            {
              do
                unint64_t v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
              while (v44 != v43);
              unint64_t v45 = __p;
            }
            long long v67 = v43;
            operator delete(v45);
          }
          unint64_t v9 = v64;
          if (!v64) {
            goto LABEL_74;
          }
          unint64_t v46 = v65;
          long long v11 = v64;
          if (v65 == v64) {
            goto LABEL_73;
          }
          do
          {
            unint64_t v48 = (void *)*--v46;
            uint64_t v47 = v48;
            *unint64_t v46 = 0;
            if (v48) {
              operator delete[](v47);
            }
          }
          while (v46 != v9);
          goto LABEL_72;
        }
        BOOL v17 = (mlir::GenericProgramPoint *)*((void *)v17 + 1);
        if (v17 == v16) {
          return 1;
        }
      }
      unint64_t v52 = (const void **)"expected only ";
      __int16 v53 = 259;
      mlir::OpState::emitOpError(this, &v52, (uint64_t)&v58);
      if (v58)
      {
        __int16 v57 = 262;
        unint64_t v54 = (const void **)"tensor.parallel_insert_slice";
        uint64_t v55 = 28;
        mlir::Diagnostic::operator<<((uint64_t)&v59, &v54);
        if (v58)
        {
          LODWORD(v54) = 3;
          uint64_t v55 = (uint64_t)" ops";
          uint64_t v56 = 4;
          long long v33 = &v54;
          uint64_t v34 = (char *)v60;
          if (v61 >= v62)
          {
            unint64_t v50 = v61 + 1;
            if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
            {
              int64_t v51 = (char *)&v54 - (unsigned char *)v60;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
              uint64_t v34 = (char *)v60;
              long long v33 = (const void ***)((char *)v60 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
              long long v33 = &v54;
              uint64_t v34 = (char *)v60;
            }
          }
          uint64_t v35 = &v34[24 * v61];
          long long v36 = *(_OWORD *)v33;
          *((void *)v35 + 2) = v33[2];
          *(_OWORD *)uint64_t v35 = v36;
          ++v61;
        }
      }
      uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
      if (v58) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
      }
      if (!v68) {
        return v5;
      }
      uint64_t v37 = (void **)__p;
      if (__p)
      {
        uint64_t v38 = v67;
        unint64_t v39 = __p;
        if (v67 != __p)
        {
          do
            uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
          while (v38 != v37);
          unint64_t v39 = __p;
        }
        long long v67 = v37;
        operator delete(v39);
      }
      unint64_t v9 = v64;
      if (!v64) {
        goto LABEL_74;
      }
      unint64_t v40 = v65;
      long long v11 = v64;
      if (v65 == v64) {
        goto LABEL_73;
      }
      do
      {
        uint64_t v42 = (void *)*--v40;
        unint64_t v41 = v42;
        *unint64_t v40 = 0;
        if (v42) {
          operator delete[](v41);
        }
      }
      while (v40 != v9);
      goto LABEL_72;
    }
  }
  unint64_t v54 = (const void **)"expected forall op parent";
  __int16 v57 = 259;
  mlir::OpState::emitOpError(this, &v54, (uint64_t)&v58);
  uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v58);
  if (v58) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
  }
  if (v68)
  {
    unint64_t v6 = (void **)__p;
    if (__p)
    {
      uint64_t v7 = v67;
      unint64_t v8 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        unint64_t v8 = __p;
      }
      long long v67 = v6;
      operator delete(v8);
    }
    unint64_t v9 = v64;
    if (!v64) {
      goto LABEL_74;
    }
    uint64_t v10 = v65;
    long long v11 = v64;
    if (v65 == v64)
    {
LABEL_73:
      uint64_t v65 = v9;
      operator delete(v11);
LABEL_74:
      if (v60 != v63) {
        free(v60);
      }
      return v5;
    }
    do
    {
      unint64_t v13 = (void *)*--v10;
      uint64_t v12 = v13;
      *uint64_t v10 = 0;
      if (v13) {
        operator delete[](v12);
      }
    }
    while (v10 != v9);
LABEL_72:
    long long v11 = v64;
    goto LABEL_73;
  }
  return v5;
}

uint64_t mlir::scf::InParallelOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  unint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
    unint64_t v6 = *this;
    unint64_t v7 = *((unsigned int *)*this + 11);
    if ((v7 & 0x7FFFFF) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    *uint64_t v5 = 32;
    ++*((void *)v4 + 4);
    unint64_t v6 = *this;
    unint64_t v7 = *((unsigned int *)*this + 11);
    if ((v7 & 0x7FFFFF) != 0)
    {
LABEL_3:
      unint64_t v8 = (((unint64_t)v6 + 16 * ((v7 >> 23) & 1) + ((v7 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *((unsigned int *)v6 + 10);
      goto LABEL_6;
    }
  }
  unint64_t v8 = 0;
LABEL_6:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, void, void))(*(void *)a2 + 224))(a2, v8, 0, 0, 0);
  unint64_t v9 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v9);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v9 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v12, 0, 0);
}

BOOL mlir::scf::InParallelOp::parse(uint64_t a1, uint64_t a2)
{
  v15[64] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  unint64_t v13 = v15;
  uint64_t v14 = 0x800000000;
  uint64_t v5 = (mlir::Region *)operator new(0x18uLL);
  *(void *)uint64_t v5 = v5;
  *((void *)v5 + 1) = v5;
  *((void *)v5 + 2) = 0;
  long long v11 = v5;
  if (!(*(unsigned __int8 (**)(uint64_t, mlir::Region *, void *, void, void))(*(void *)a1 + 744))(a1, v5, v15, 0, 0))
  {
    BOOL v6 = 0;
    long long v11 = 0;
    goto LABEL_9;
  }
  if (*(mlir::Region **)v5 == v5)
  {
    v10[0] = *v4;
    memset(&v10[1], 0, 24);
    mlir::ValueRange::ValueRange(v12, 0, 0);
    mlir::OpBuilder::createBlock(v10, (uint64_t)v5, 0, v12[0], v12[1], 0, 0);
  }
  mlir::OperationState::addRegion(a2, (unint64_t)&v11);
  BOOL v6 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112) != 0;
  uint64_t v5 = v11;
  long long v11 = 0;
  if (v5)
  {
LABEL_9:
    mlir::Region::~Region(v5);
    operator delete(v9);
    unint64_t v7 = v13;
    if (v13 == v15) {
      return v6;
    }
    goto LABEL_6;
  }
  unint64_t v7 = v13;
  if (v13 != v15) {
LABEL_6:
  }
    free(v7);
  return v6;
}

uint64_t mlir::scf::IfOp::thenBlock(mlir::scf::IfOp *this)
{
  uint64_t v1 = *(void *)(((*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)this + 40));
  if (v1) {
    return v1 - 8;
  }
  else {
    return 0;
  }
}

uint64_t mlir::scf::IfOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a4 + 32)) {
    return 0;
  }
  BOOL v6 = (void *)mlir::RegionRange::dereference_iterator((void *)(a4 + 24), 0);
  if ((void *)*v6 == v6) {
    return 0;
  }
  uint64_t v7 = v6[1];
  uint64_t v8 = v7 ? v7 - 8 : 0;
  unint64_t v9 = *(mlir::GenericProgramPoint **)(v8 + 32);
  if (v9 == (mlir::GenericProgramPoint *)(v8 + 32)) {
    return 0;
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v9);
  if (!v10
    || *(void *)(*(void *)(v10 + 48) + 16) != (void)&mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id)
  {
    return 0;
  }
  if ((*(unsigned char *)(v10 + 46) & 0x80) != 0)
  {
    uint64_t v13 = *(void *)(v10 + 72);
    unint64_t v14 = *(unsigned int *)(v10 + 68);
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
  }
  uint64_t v19 = v13;
  unint64_t v20 = v14;
  mlir::OperandRange::getTypes(&v19, &v15);
  mlir::ValueRange::ValueRange((unint64_t *)&v19, v15 + 32 * v16, v17 - v16);
  mlir::TypeRange::TypeRange(v18, v19, v20);
  llvm::SmallVectorImpl<mlir::Type>::insert<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,void>(a5, *(void *)a5 + 8 * *(unsigned int *)(a5 + 8), v18[0], 0, v18[0], v18[1]);
  return 1;
}

unint64_t *llvm::SmallVectorImpl<mlir::Type>::insert<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a4;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = (a2 - *(void *)a1) >> 3;
  uint64_t v14 = *(unsigned int *)(a1 + 8);
  unint64_t v13 = *(unsigned int *)(a1 + 12);
  unsigned int v15 = *(_DWORD *)(a1 + 8);
  unint64_t v16 = a6 - a4;
  unint64_t v17 = a6 - a4 + v14;
  if (*(void *)a1 + 8 * v14 != a2)
  {
    if (v17 > v13)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
      uint64_t v11 = *(void *)a1;
      uint64_t v14 = *(unsigned int *)(a1 + 8);
      unsigned int v15 = *(_DWORD *)(a1 + 8);
    }
    uint64_t v18 = (unint64_t *)(v11 + 8 * v12);
    uint64_t v19 = v12;
    unint64_t v20 = (unint64_t *)(v11 + 8 * v14);
    unint64_t v21 = v20 - v18;
    if (v21 < v16)
    {
      unsigned int v22 = v15 + v16;
      *(_DWORD *)(a1 + 8) = v22;
      if (v19 != v14)
      {
        memcpy((void *)(v11 + 8 * v22 - 8 * v21), v18, (char *)v20 - (char *)v18);
        unint64_t v23 = v18;
        do
        {
          *v23++ = mlir::TypeRange::dereference_iterator(a3, v8++);
          --v21;
        }
        while (v21);
      }
      if (a3 != a5 || v8 != a6)
      {
        if (a3 != a5)
        {
          while (1)
            *v20++ = mlir::TypeRange::dereference_iterator(a3, v8++);
        }
        do
          *v20++ = mlir::TypeRange::dereference_iterator(a3, v8++);
        while (a6 != v8);
      }
      return v18;
    }
    uint64_t v26 = 8 * v16;
    unint64_t v27 = v14 + ((uint64_t)(8 * v16) >> 3);
    uint64_t v28 = v14;
    if (v27 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v27, 8);
      uint64_t v28 = *(unsigned int *)(a1 + 8);
      unsigned int v15 = *(_DWORD *)(a1 + 8);
    }
    uint64_t v29 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    if (a6 == v8) {
      goto LABEL_33;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v28);
    uint64_t v31 = 8 * a6;
    unint64_t v32 = 8 * a6 - 8 * v8 - 8;
    if (v32 >= 0x98)
    {
      uint64_t v34 = 8 * v28 + *(void *)a1;
      long long v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v31 - (v11 + 8 * (v8 + v14)) + v34) >= 0x20)
      {
        uint64_t v35 = (v32 >> 3) + 1;
        uint64_t v36 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        uint64_t v30 = (void *)((char *)v30 + v36 * 8);
        long long v33 = &v29[v36];
        uint64_t v37 = (long long *)(8 * v8 + 8 * v14 - v31 + v11 + 16);
        uint64_t v38 = (_OWORD *)(v34 + 16);
        uint64_t v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *uint64_t v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_33;
        }
      }
    }
    else
    {
      long long v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v41 = *v33++;
      *v30++ = v41;
    }
    while (v33 != v20);
LABEL_33:
    *(_DWORD *)(a1 + 8) = v15 + v16;
    if (v29 != v18) {
      memmove(&v18[(unint64_t)v26 / 8], v18, (char *)&v20[v26 / 0xFFFFFFFFFFFFFFF8] - (char *)v18);
    }
    if (a3 != a5 || a6 != v8)
    {
      if (a3 != a5)
      {
        while (1)
          *v18++ = mlir::TypeRange::dereference_iterator(a3, v8++);
      }
      uint64_t v42 = v18;
      do
        *v42++ = mlir::TypeRange::dereference_iterator(a3, v8++);
      while (a6 != v8);
    }
    return v18;
  }
  if (v17 > v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
    unsigned int v15 = *(_DWORD *)(a1 + 8);
    uint64_t v11 = *(void *)a1;
  }
  BOOL v24 = a3 != a5;
  if (a6 != v8 || a3 != a5)
  {
    uint64_t v25 = (unint64_t *)(v11 + 8 * v15);
    if (v24)
    {
      while (1)
        *v25++ = mlir::TypeRange::dereference_iterator(a3, v8++);
    }
    do
      *v25++ = mlir::TypeRange::dereference_iterator(a3, v8++);
    while (a6 != v8);
    unsigned int v15 = *(_DWORD *)(a1 + 8);
    uint64_t v11 = *(void *)a1;
  }
  *(_DWORD *)(a1 + 8) = v15 + v16;
  return (unint64_t *)(v11 + 8 * v12);
}

_OWORD *mlir::scf::IfOp::build(void *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::scf::IfOp::build(a1, a2, a3, a4, a5, 0, 0);
}

_OWORD *mlir::scf::IfOp::build(void *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  void v26[2] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a5;
  unint64_t v13 = a2 + 16;
  uint64_t v14 = a2[18];
  if (a4 + v14 > (unint64_t)a2[19])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, a2 + 20, a4 + v14, 8);
    LODWORD(v14) = a2[18];
  }
  if (a4)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *v13 + 8 * v14;
    do
    {
      *(void *)(v16 + 8 * v15) = mlir::TypeRange::dereference_iterator(a3, v15);
      ++v15;
    }
    while (a4 != v15);
    LODWORD(v14) = a2[18];
  }
  a2[18] = v14 + a4;
  mlir::OperationState::addOperands((uint64_t)a2, (uint64_t)&v24, 1);
  unint64_t v17 = a1 + 2;
  long long v23 = *((_OWORD *)a1 + 1);
  uint64_t v18 = mlir::OperationState::addRegion((mlir::OperationState *)a2);
  if (!a6)
  {
    __n128 result = (_OWORD *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
    if (!a7) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v22 = (uint64_t)result;
    mlir::ValueRange::ValueRange(v25, 0, 0);
    __n128 result = mlir::OpBuilder::createBlock(a1, v22, 0, v25[0], v25[1], 0, 0);
    long long v20 = v23;
    if ((void)v23) {
      goto LABEL_10;
    }
LABEL_14:
    void *v17 = 0;
    a1[3] = 0;
    return result;
  }
  uint64_t v21 = v18;
  mlir::ValueRange::ValueRange(v26, 0, 0);
  mlir::OpBuilder::createBlock(a1, v21, 0, v26[0], v26[1], 0, 0);
  __n128 result = (_OWORD *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  if (a7) {
    goto LABEL_13;
  }
LABEL_9:
  long long v20 = v23;
  if (!(void)v23) {
    goto LABEL_14;
  }
LABEL_10:
  *(_OWORD *)unint64_t v17 = v20;
  return result;
}

uint64_t mlir::scf::IfOp::build(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void v23[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a5;
  uint64_t v11 = a2 + 16;
  uint64_t v12 = a2[18];
  if (a4 + v12 > (unint64_t)a2[19])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, a2 + 20, a4 + v12, 8);
    LODWORD(v12) = a2[18];
  }
  if (a4)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *v11 + 8 * v12;
    do
    {
      *(void *)(v14 + 8 * v13) = mlir::TypeRange::dereference_iterator(a3, v13);
      ++v13;
    }
    while (a4 != v13);
    LODWORD(v12) = a2[18];
  }
  a2[18] = v12 + a4;
  mlir::OperationState::addOperands((uint64_t)a2, (uint64_t)&v21, 1);
  uint64_t v15 = (_OWORD *)(a1 + 16);
  long long v20 = *(_OWORD *)(a1 + 16);
  uint64_t v16 = (void *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  mlir::ValueRange::ValueRange(v23, 0, 0);
  mlir::OpBuilder::createBlock((void *)a1, (uint64_t)v16, 0, v23[0], v23[1], 0, 0);
  if (a4)
  {
    uint64_t result = mlir::OperationState::addRegion((mlir::OperationState *)a2);
    if (!a6) {
      goto LABEL_12;
    }
  }
  else
  {
    mlir::impl::ensureRegionTerminator(v16, a1, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>::buildTerminator);
    uint64_t result = mlir::OperationState::addRegion((mlir::OperationState *)a2);
    if (!a6) {
      goto LABEL_12;
    }
  }
  uint64_t v18 = (void *)result;
  mlir::ValueRange::ValueRange(v22, 0, 0);
  uint64_t result = (uint64_t)mlir::OpBuilder::createBlock((void *)a1, (uint64_t)v18, 0, v22[0], v22[1], 0, 0);
  if (!a4)
  {
    uint64_t result = mlir::impl::ensureRegionTerminator(v18, a1, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>::buildTerminator);
    long long v19 = v20;
    if ((void)v20) {
      goto LABEL_13;
    }
    goto LABEL_15;
  }
LABEL_12:
  long long v19 = v20;
  if ((void)v20)
  {
LABEL_13:
    *uint64_t v15 = v19;
    return result;
  }
LABEL_15:
  *(void *)uint64_t v15 = 0;
  *(void *)(a1 + 24) = 0;
  return result;
}

uint64_t mlir::scf::IfOp::verify(uint64_t **this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *this;
  if (!*((_DWORD *)*this + 9)) {
    return 1;
  }
  unint64_t v2 = *((unsigned int *)v1 + 11);
  if ((v2 & 0x7FFFFF) != 0)
  {
    unint64_t v3 = (((unint64_t)&v1[2 * ((v2 >> 23) & 1) + 8] + ((v2 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)v1 + 10);
    if (*(void *)(v3 + 24) != v3 + 24) {
      return 1;
    }
  }
  else if (MEMORY[0x18] != 24)
  {
    return 1;
  }
  uint64_t v14 = (const void **)"must have an else block if defining values";
  __int16 v15 = 259;
  mlir::OpState::emitOpError(this, &v14, (uint64_t)v16);
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
  if (v16[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
  }
  if (v23)
  {
    BOOL v6 = (void **)__p;
    if (__p)
    {
      uint64_t v7 = v22;
      uint64_t v8 = __p;
      if (v22 != __p)
      {
        do
          uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        uint64_t v8 = __p;
      }
      uint64_t v22 = v6;
      operator delete(v8);
    }
    unint64_t v9 = v19;
    if (v19)
    {
      uint64_t v10 = v20;
      uint64_t v11 = v19;
      if (v20 != v19)
      {
        do
        {
          uint64_t v13 = (void *)*--v10;
          uint64_t v12 = v13;
          *uint64_t v10 = 0;
          if (v13) {
            operator delete[](v12);
          }
        }
        while (v10 != v9);
        uint64_t v11 = v19;
      }
      long long v20 = v9;
      operator delete(v11);
    }
    if (v17 != &v18) {
      free(v17);
    }
  }
  return v4;
}

BOOL mlir::scf::IfOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  llvm::SmallVectorImpl<std::unique_ptr<mlir::Region>>::reserve((uint64_t)a2 + 224, 2uLL);
  uint64_t v4 = (void *)mlir::OperationState::addRegion(a2);
  uint64_t v5 = (void *)mlir::OperationState::addRegion(a2);
  BOOL v6 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  memset(v11, 0, 24);
  Integeruint64_t Type = mlir::Builder::getIntegerType(v6, 1u);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v11, 1)
    && (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v11, IntegerType, (uint64_t)a2 + 16)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 536))(a1, (uint64_t)a2 + 64)&& (*(unsigned __int8 (**)(uint64_t, void *, void, void, void))(*(void *)a1 + 744))(a1, v4, 0, 0, 0))
  {
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    mlir::impl::ensureRegionTerminator(v4, v8, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>::buildTerminator);
    if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "else", 4)) {
      return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, (uint64_t)a2 + 112) != 0;
    }
    if ((*(unsigned __int8 (**)(uint64_t, void *, void, void, void))(*(void *)a1 + 744))(a1, v5, 0, 0, 0))
    {
      unint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      mlir::impl::ensureRegionTerminator(v5, v9, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>::buildTerminator);
      return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, (uint64_t)a2 + 112) != 0;
    }
  }
  return 0;
}

uint64_t mlir::scf::IfOp::print(unsigned int **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *uint64_t v5 = 32;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  unsigned int v6 = (*this)[9];
  if (v6)
  {
    uint64_t v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v8 = *((void *)v7 + 4);
    if ((unint64_t)(*((void *)v7 + 3) - v8) > 4)
    {
      *(unsigned char *)(v8 + 4) = 40;
      *(_DWORD *)uint64_t v8 = 540945696;
      *((void *)v7 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v7, " -> (", 5uLL);
    }
    uint64_t v9 = (*this)[9];
    uint64_t v10 = (const char *)(*this - 4);
    if (!v9) {
      uint64_t v10 = 0;
    }
    uint64_t v30 = v10;
    uint64_t v31 = v9;
    mlir::OperandRange::getTypes((uint64_t *)&v30, v29);
    uint64_t v30 = ", ";
    uint64_t v31 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v29[0], v29[1], v29[2], v29[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)&v30);
    uint64_t v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v12 = (unsigned char *)*((void *)v11 + 4);
    if (*((unsigned char **)v11 + 3) == v12)
    {
      llvm::raw_ostream::write(v11, ")", 1uLL);
    }
    else
    {
      *uint64_t v12 = 41;
      ++*((void *)v11 + 4);
    }
  }
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
    __int16 v15 = *this;
    unint64_t v16 = (*this)[11];
    if ((v16 & 0x7FFFFF) != 0) {
      goto LABEL_15;
    }
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *uint64_t v14 = 32;
    __int16 v15 = *this;
    unint64_t v16 = (*this)[11];
    if ((v16 & 0x7FFFFF) != 0)
    {
LABEL_15:
      unint64_t v17 = (((unint64_t)&v15[4 * ((v16 >> 23) & 1) + 17] + ((v16 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v15[10];
      goto LABEL_18;
    }
  }
  unint64_t v17 = 0;
LABEL_18:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v17, 0, v6 != 0, 0);
  uint64_t v18 = *this;
  unint64_t v19 = (*this)[11];
  if ((v19 & 0x7FFFFF) != 0)
  {
    unint64_t v20 = (((unint64_t)&v18[4 * ((v19 >> 23) & 1) + 17] + ((v19 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
        + 32 * v18[10];
    uint64_t v22 = *(void *)(v20 + 24);
    uint64_t v21 = v20 + 24;
    if (v22 == v21) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v25 = *((void *)v24 + 4);
    if ((unint64_t)(*((void *)v24 + 3) - v25) > 5)
    {
      *(_WORD *)(v25 + 4) = 8293;
      *(_DWORD *)uint64_t v25 = 1936483616;
      *((void *)v24 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v24, " else ", 6uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v21, 0, v6 != 0, 0);
    uint64_t v18 = *this;
    if (!HIBYTE((*this)[11])) {
      goto LABEL_21;
    }
LABEL_27:
    v29[0] = mlir::Operation::getAttrDictionary((mlir::Operation *)v18);
    char v23 = (mlir::ArrayAttr *)v29;
    goto LABEL_28;
  }
  uint64_t v21 = 24;
  if (MEMORY[0x18] != 24) {
    goto LABEL_23;
  }
LABEL_20:
  if (BYTE3(v19)) {
    goto LABEL_27;
  }
LABEL_21:
  char v23 = (mlir::ArrayAttr *)(v18 + 14);
LABEL_28:
  uint64_t Value = mlir::ArrayAttr::getValue(v23);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v27, 0, 0);
}

__n128 mlir::scf::IfOp::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v30[2] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    unint64_t v10 = *(unsigned int *)(*(void *)a1 + 44);
    if ((v10 & 0x7FFFFF) != 0) {
      unint64_t v11 = ((*(void *)a1 + 16 * ((v10 >> 23) & 1) + ((v10 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
    }
          + 32 * *(unsigned int *)(*(void *)a1 + 40);
    else {
      unint64_t v11 = 0;
    }
    unint64_t v29 = v11;
    uint64_t v12 = (char *)&v29;
    mlir::ValueRange::ValueRange(v30, 0, 0);
    uint64_t v13 = *(unsigned int *)(a3 + 8);
    unint64_t v14 = *(void *)a3;
    if (v13 >= *(_DWORD *)(a3 + 12))
    {
      unint64_t v25 = v13 + 1;
      BOOL v26 = v14 + 24 * v13 > (unint64_t)&v29;
      if (v14 <= (unint64_t)&v29 && v26)
      {
        uint64_t v28 = (char *)&v30[-1] - v14;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v25, 24);
        unint64_t v14 = *(void *)a3;
        uint64_t v12 = &v28[*(void *)a3];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v25, 24);
        unint64_t v14 = *(void *)a3;
        uint64_t v12 = (char *)&v29;
      }
    }
    uint64_t v15 = v14 + 24 * *(unsigned int *)(a3 + 8);
    long long v16 = *(_OWORD *)v12;
    *(void *)(v15 + 16) = *((void *)v12 + 2);
    *(_OWORD *)uint64_t v15 = v16;
    ++*(_DWORD *)(a3 + 8);
    unint64_t v17 = *(unsigned int *)(*(void *)a1 + 44);
    if ((v17 & 0x7FFFFF) != 0)
    {
      unint64_t v18 = ((*(void *)a1 + 16 * ((v17 >> 23) & 1) + ((v17 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(*(void *)a1 + 40);
      uint64_t v20 = *(void *)(v18 + 24);
      uint64_t v19 = v18 + 24;
      if (v20 != v19)
      {
LABEL_13:
        unint64_t v29 = v19;
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v19 = 24;
      if (MEMORY[0x18] != 24) {
        goto LABEL_13;
      }
    }
    unint64_t v29 = 0;
LABEL_16:
    uint64_t v7 = (__n128 *)&v29;
    mlir::ValueRange::ValueRange(v30, 0, 0);
    uint64_t v8 = *(unsigned int *)(a3 + 8);
    unint64_t v9 = *(void *)a3;
    if (v8 < *(_DWORD *)(a3 + 12)) {
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  unint64_t v5 = *(unsigned int *)(*(void *)a1 + 36);
  if (v5) {
    uint64_t v6 = *(void *)a1 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v29 = 0;
  uint64_t v7 = (__n128 *)&v29;
  mlir::ValueRange::ValueRange(v30, v6, v5);
  uint64_t v8 = *(unsigned int *)(a3 + 8);
  unint64_t v9 = *(void *)a3;
  if (v8 >= *(_DWORD *)(a3 + 12))
  {
LABEL_18:
    unint64_t v23 = v8 + 1;
    BOOL v24 = v9 + 24 * v8 > (unint64_t)&v29;
    if (v9 <= (unint64_t)&v29 && v24)
    {
      uint64_t v27 = (char *)&v30[-1] - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v23, 24);
      unint64_t v9 = *(void *)a3;
      uint64_t v7 = (__n128 *)&v27[*(void *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v23, 24);
      unint64_t v9 = *(void *)a3;
      uint64_t v7 = (__n128 *)&v29;
    }
  }
LABEL_17:
  uint64_t v21 = (__n128 *)(v9 + 24 * *(unsigned int *)(a3 + 8));
  __n128 result = *v7;
  v21[1].n128_u64[0] = v7[1].n128_u64[0];
  *uint64_t v21 = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

void mlir::scf::IfOp::getEntrySuccessorRegions(unsigned int **a1, void **a2, uint64_t a3, uint64_t a4)
{
  v47[2] = *MEMORY[0x1E4F143B8];
  mlir::scf::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase((uint64_t)v43, *a1);
  unint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v8 = *a2;
  if (!*a2)
  {
    uint64_t v42 = 0;
    unint64_t v10 = *a1;
    unint64_t v11 = (*a1)[11];
    if ((v11 & 0x7FFFFF) != 0)
    {
LABEL_8:
      unint64_t v12 = (((unint64_t)&v10[4 * ((v11 >> 23) & 1) + 17] + ((v11 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v10[10];
      unsigned int v13 = *(_DWORD *)(a4 + 8);
      if (v13 < *(_DWORD *)(a4 + 12))
      {
LABEL_9:
        unint64_t v14 = (unint64_t *)(*(void *)a4 + 24 * v13);
        *unint64_t v14 = v12;
        mlir::ValueRange::ValueRange(v14 + 1, 0, 0);
LABEL_10:
        ++*(_DWORD *)(a4 + 8);
        goto LABEL_11;
      }
LABEL_19:
      unint64_t v46 = v12;
      uint64_t v21 = (char *)&v46;
      mlir::ValueRange::ValueRange(v47, 0, 0);
      uint64_t v22 = *(unsigned int *)(a4 + 8);
      unint64_t v23 = *(void *)a4;
      if (v22 >= *(_DWORD *)(a4 + 12))
      {
        unint64_t v36 = v22 + 1;
        BOOL v37 = v23 + 24 * v22 > (unint64_t)&v46;
        if (v23 <= (unint64_t)&v46 && v37)
        {
          long long v40 = (char *)&v47[-1] - v23;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v36, 24);
          unint64_t v23 = *(void *)a4;
          uint64_t v21 = &v40[*(void *)a4];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v36, 24);
          unint64_t v23 = *(void *)a4;
          uint64_t v21 = (char *)&v46;
        }
      }
      uint64_t v24 = v23 + 24 * *(unsigned int *)(a4 + 8);
      long long v25 = *(_OWORD *)v21;
      *(void *)(v24 + 16) = *((void *)v21 + 2);
      *(_OWORD *)uint64_t v24 = v25;
      goto LABEL_10;
    }
LABEL_18:
    unint64_t v12 = 0;
    unsigned int v13 = *(_DWORD *)(a4 + 8);
    if (v13 < *(_DWORD *)(a4 + 12)) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
  if (mlir::BoolAttr::classof(*a2)) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 0;
  }
  uint64_t v42 = v9;
  if (!v9 || mlir::BoolAttr::getValue((mlir::BoolAttr *)&v42))
  {
    unint64_t v10 = *a1;
    unint64_t v11 = (*a1)[11];
    if ((v11 & 0x7FFFFF) != 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_11:
  if (!v42 || !mlir::BoolAttr::getValue((mlir::BoolAttr *)&v42))
  {
    uint64_t v15 = *a1;
    unint64_t v16 = (*a1)[11];
    if ((v16 & 0x7FFFFF) != 0)
    {
      unint64_t v17 = (((unint64_t)&v15[4 * ((v16 >> 23) & 1) + 17] + ((v16 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * v15[10];
      if (*(void *)(v17 + 24) != v17 + 24)
      {
        uint64_t v18 = v17 + 24;
        unsigned int v19 = *(_DWORD *)(a4 + 8);
        if (v19 < *(_DWORD *)(a4 + 12))
        {
LABEL_16:
          uint64_t v20 = (uint64_t *)(*(void *)a4 + 24 * v19);
          *uint64_t v20 = v18;
          mlir::ValueRange::ValueRange((unint64_t *)v20 + 1, 0, 0);
LABEL_30:
          ++*(_DWORD *)(a4 + 8);
          return;
        }
LABEL_23:
        unint64_t v46 = v18;
        BOOL v26 = (char *)&v46;
        mlir::ValueRange::ValueRange(v47, 0, 0);
        uint64_t v27 = *(unsigned int *)(a4 + 8);
        unint64_t v28 = *(void *)a4;
        if (v27 >= *(_DWORD *)(a4 + 12))
        {
LABEL_37:
          unint64_t v38 = v27 + 1;
          BOOL v39 = v28 + 24 * v27 > (unint64_t)&v46;
          if (v28 <= (unint64_t)&v46 && v39)
          {
            uint64_t v41 = (char *)&v47[-1] - v28;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v38, 24);
            unint64_t v28 = *(void *)a4;
            BOOL v26 = &v41[*(void *)a4];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v38, 24);
            unint64_t v28 = *(void *)a4;
            BOOL v26 = (char *)&v46;
          }
        }
LABEL_33:
        uint64_t v34 = v28 + 24 * *(unsigned int *)(a4 + 8);
        long long v35 = *(_OWORD *)v26;
        *(void *)(v34 + 16) = *((void *)v26 + 2);
        *(_OWORD *)uint64_t v34 = v35;
        goto LABEL_30;
      }
    }
    else if (MEMORY[0x18] != 24)
    {
      uint64_t v18 = 24;
      unsigned int v19 = *(_DWORD *)(a4 + 8);
      if (v19 < *(_DWORD *)(a4 + 12)) {
        goto LABEL_16;
      }
      goto LABEL_23;
    }
    unint64_t v29 = v15[9];
    uint64_t v30 = v15 - 4;
    if (v29) {
      uint64_t v31 = (uint64_t)v30;
    }
    else {
      uint64_t v31 = 0;
    }
    unsigned int v32 = *(_DWORD *)(a4 + 8);
    if (v32 < *(_DWORD *)(a4 + 12))
    {
      long long v33 = (void *)(*(void *)a4 + 24 * v32);
      *long long v33 = 0;
      mlir::ValueRange::ValueRange(v33 + 1, v31, v29);
      goto LABEL_30;
    }
    unint64_t v46 = 0;
    BOOL v26 = (char *)&v46;
    mlir::ValueRange::ValueRange(v47, v31, v29);
    uint64_t v27 = *(unsigned int *)(a4 + 8);
    unint64_t v28 = *(void *)a4;
    if (v27 >= *(_DWORD *)(a4 + 12)) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
}

uint64_t mlir::scf::IfOp::fold(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *(unsigned int *)(*a1 + 44);
  if ((v3 & 0x7FFFFF) != 0)
  {
    unint64_t v4 = ((v2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(v2 + 40);
    if (*(void *)(v4 + 24) != v4 + 24) {
      goto LABEL_3;
    }
    return 0;
  }
  if (MEMORY[0x18] == 24) {
    return 0;
  }
LABEL_3:
  uint64_t Filter = *(void *)(*(void *)(v2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
  if (result)
  {
    uint64_t v6 = *(void **)(*(void *)(result + 48) + 16);
    BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id;
    if (v6 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
      uint64_t v8 = result;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v34 = v8;
    if (v7)
    {
      long long v33 = mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke;
      uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v34);
      uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
      if (result)
      {
        uint64_t result = mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(void **))&v33, (mlir::Operation *)result);
        if (result)
        {
          unint64_t v9 = *(uint64_t **)(*a1 + 72);
          uint64_t Input = (uint64_t *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v34);
          unint64_t v11 = (uint64_t *)v9[1];
          if (v11)
          {
            uint64_t *v11 = *v9;
            if (*v9) {
              *(void *)(*v9 + 8) = v9[1];
            }
          }
          v9[3] = (uint64_t)Input;
          v9[1] = (uint64_t)Input;
          uint64_t v12 = *Input;
          uint64_t *v9 = *Input;
          if (v12) {
            *(void *)(v12 + 8) = v9;
          }
          *uint64_t Input = (uint64_t)v9;
          unint64_t v13 = *(unsigned int *)(*a1 + 44);
          if ((v13 & 0x7FFFFF) != 0)
          {
            unint64_t v14 = (void *)(((*a1 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                           + 32 * *(unsigned int *)(*a1 + 40));
            uint64_t v15 = (uint64_t *)v14[1];
          }
          else
          {
            unint64_t v14 = 0;
            uint64_t v15 = (uint64_t *)MEMORY[8];
          }
          if (v15) {
            unint64_t v16 = v15 - 1;
          }
          else {
            unint64_t v16 = 0;
          }
          unint64_t v17 = v14 + 3;
          if ((void *)v14[3] != v14 + 3 && v15 != v17)
          {
            uint64_t v18 = (uint64_t *)v14[4];
            llvm::ilist_traits<mlir::Block>::transferNodesFromList((uint64_t)v14, (uint64_t)(v14 + 3), (uint64_t)v18, (uint64_t)(v14 + 3));
            if (v18 != v17)
            {
              uint64_t v19 = *v17;
              uint64_t v20 = *v18;
              *(void *)(v20 + 8) = v17;
              uint64_t *v17 = v20;
              uint64_t v21 = *v15;
              *(void *)(v19 + 8) = v15;
              uint64_t *v18 = v21;
              *(void *)(v21 + 8) = v18;
              *uint64_t v15 = v19;
            }
          }
          unint64_t v22 = *(unsigned int *)(*a1 + 44);
          if ((v22 & 0x7FFFFF) != 0)
          {
            uint64_t v23 = ((*a1 + 16 * ((v22 >> 23) & 1) + ((v22 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(*a1 + 40);
            uint64_t v24 = v23 + 24;
            uint64_t v25 = v23 + 32;
          }
          else
          {
            uint64_t v23 = 0;
            uint64_t v24 = 24;
            uint64_t v25 = 32;
          }
          BOOL v26 = *(uint64_t **)v25;
          if (v15) {
            uint64_t v27 = v16 + 1;
          }
          else {
            uint64_t v27 = 0;
          }
          unint64_t v28 = (uint64_t *)v27[1];
          if (v27 != v26 && v28 != v26)
          {
            llvm::ilist_traits<mlir::Block>::transferNodesFromList(v24, v23, (uint64_t)v27, v27[1]);
            if (v28 != v27)
            {
              uint64_t v30 = *v28;
              uint64_t v31 = *v27;
              *(void *)(v31 + 8) = v28;
              *unint64_t v28 = v31;
              uint64_t v32 = *v26;
              *(void *)(v30 + 8) = v26;
              *uint64_t v27 = v32;
              *(void *)(v32 + 8) = v27;
              *BOOL v26 = v30;
            }
          }
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void mlir::scf::IfOp::getRegionInvocationBounds(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t)*a2;
  if (!*a2 || (!(BOOL v6 = mlir::BoolAttr::classof(*a2)) ? (v7 = 0) : (v7 = v5), v22 = v7, !v6))
  {
    if (*(_DWORD *)(a4 + 12) > 1u)
    {
      unint64_t v15 = *(unsigned int *)(a4 + 8);
      uint64_t v16 = 2;
      if (v15 < 2) {
        uint64_t v16 = *(unsigned int *)(a4 + 8);
      }
      if (v16)
      {
        uint64_t v17 = *(void *)a4;
        *(void *)uint64_t v17 = 0x100000000;
        *(_DWORD *)(v17 + 8) = 1;
        if (v16 != 1)
        {
          *(void *)(v17 + 12) = 0x100000000;
          *(_DWORD *)(v17 + 20) = 1;
        }
        unint64_t v15 = *(unsigned int *)(a4 + 8);
      }
      if (v15 > 1) {
        goto LABEL_22;
      }
      uint64_t v14 = *(void *)a4 + 12 * v15;
      *(void *)uint64_t v14 = 0x100000000;
      *(_DWORD *)(v14 + 8) = 1;
      if (v15 == 1) {
        goto LABEL_22;
      }
    }
    else
    {
      *(_DWORD *)(a4 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), 2uLL, 12);
      uint64_t v14 = *(void *)a4;
      *(void *)uint64_t v14 = 0x100000000;
      *(_DWORD *)(v14 + 8) = 1;
    }
    *(void *)(v14 + 12) = 0x100000000;
    *(_DWORD *)(v14 + 20) = 1;
LABEL_22:
    *(_DWORD *)(a4 + 8) = 2;
    return;
  }
  BOOL Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v22);
  uint64_t v9 = *(unsigned int *)(a4 + 8);
  if (v9 >= *(_DWORD *)(a4 + 12))
  {
    LODWORD(v23[0]) = 0;
    *(void *)((char *)v23 + 4) = Value | 0x100000000;
    uint64_t v18 = v23[0];
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v9 + 1, 12);
    uint64_t v19 = *(void *)a4 + 12 * *(unsigned int *)(a4 + 8);
    *(void *)uint64_t v19 = v18;
    *(_DWORD *)(v19 + 8) = 1;
  }
  else
  {
    uint64_t v10 = *(void *)a4 + 12 * v9;
    *(_DWORD *)uint64_t v10 = 0;
    *(void *)(v10 + 4) = Value | 0x100000000;
  }
  ++*(_DWORD *)(a4 + 8);
  BOOL v11 = !mlir::BoolAttr::getValue((mlir::BoolAttr *)&v22);
  uint64_t v12 = *(unsigned int *)(a4 + 8);
  if (v12 >= *(_DWORD *)(a4 + 12))
  {
    LODWORD(v23[0]) = 0;
    *(void *)((char *)v23 + 4) = v11 | 0x100000000;
    uint64_t v20 = v23[0];
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v12 + 1, 12);
    uint64_t v21 = *(void *)a4 + 12 * *(unsigned int *)(a4 + 8);
    *(void *)uint64_t v21 = v20;
    *(_DWORD *)(v21 + 8) = 1;
  }
  else
  {
    uint64_t v13 = *(void *)a4 + 12 * v12;
    *(_DWORD *)uint64_t v13 = 0;
    *(void *)(v13 + 4) = v11 | 0x100000000;
  }
  ++*(_DWORD *)(a4 + 8);
}

void mlir::scf::IfOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(void *)unint64_t v4 = &unk_1EC997480;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  BOOL v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::CombineIfs]";
  unint64_t v277 = 83;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v277;
  }
  BOOL v11 = &v276[v10];
  unint64_t v12 = v277 - v10;
  if (v277 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v277 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_306;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_307;
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    uint64_t v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_310;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v28 = &v7[-v27];
      v22 -= v27;
      unint64_t v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)unint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_310:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      long long v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)long long v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  unint64_t v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(void *)unint64_t v38 = &unk_1EC997FD8;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    uint64_t v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  BOOL v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::CombineNestedIfs]";
  unint64_t v277 = 89;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = v277;
  }
  uint64_t v45 = &v276[v44];
  unint64_t v46 = v277 - v44;
  if (v277 - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = v277 - v44;
  }
  unint64_t v48 = &v45[v47];
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  uint64_t v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)uint64_t v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  unint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
    goto LABEL_306;
  }
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (v54)
  {
    if (v54 >> 61) {
      goto LABEL_307;
    }
    uint64_t v55 = (char *)operator new(8 * v54);
    uint64_t v56 = &v55[8 * v51];
    __int16 v57 = &v55[8 * v54];
    *(void *)uint64_t v56 = v38;
    uint64_t v42 = (uint64_t)(v56 + 8);
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v56 = (char *)(8 * v51);
    __int16 v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      unint64_t v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_311;
      }
      uint64_t v60 = (v59 >> 3) + 1;
      uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v62 = &v41[-v61];
      v56 -= v61;
      int v63 = &v55[8 * v51 - 16];
      long long v64 = v41 - 16;
      uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v67 = *((_OWORD *)v64 - 1);
        long long v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)long long v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)int v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      uint64_t v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_311:
        do
        {
          uint64_t v68 = *((void *)v41 - 1);
          v41 -= 8;
          *(void *)uint64_t v41 = 0;
          *((void *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      uint64_t v41 = (char *)a1[1];
      uint64_t v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        uint64_t v71 = *((void *)v69 - 1);
        v69 -= 8;
        uint64_t v70 = v71;
        *(void *)uint64_t v69 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
  uint64_t v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(void *)uint64_t v72 = &unk_1EC99A3D0;
  if (*((void *)v72 + 9))
  {
    unint64_t v73 = v72[22];
    if (v73 <= v72[23]) {
      goto LABEL_79;
    }
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    unint64_t v75 = (char *)a1[2];
    unint64_t v74 = a1[3];
    if ((unint64_t)v75 < v74) {
      goto LABEL_80;
    }
    goto LABEL_91;
  }
  BOOL v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ConditionPropagation]";
  unint64_t v277 = 93;
  unint64_t v77 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v77) {
    unint64_t v78 = v77;
  }
  else {
    unint64_t v78 = v277;
  }
  uint64_t v79 = &v276[v78];
  unint64_t v80 = v277 - v78;
  if (v277 - v78 >= 0x12) {
    uint64_t v81 = 18;
  }
  else {
    uint64_t v81 = v277 - v78;
  }
  uint64_t v82 = &v79[v81];
  unint64_t v83 = v80 - v81;
  if (v83 >= v83 - 1) {
    --v83;
  }
  *((void *)v72 + 8) = v82;
  *((void *)v72 + 9) = v83;
  unint64_t v73 = v72[22];
  if (v73 > v72[23]) {
    goto LABEL_90;
  }
LABEL_79:
  v72[22] = v73;
  unint64_t v75 = (char *)a1[2];
  unint64_t v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(void *)unint64_t v75 = v72;
    uint64_t v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  unsigned int v84 = (char *)a1[1];
  uint64_t v85 = (v75 - v84) >> 3;
  unint64_t v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61) {
    goto LABEL_306;
  }
  uint64_t v87 = v74 - (void)v84;
  if (v87 >> 2 > v86) {
    unint64_t v86 = v87 >> 2;
  }
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v88 = v86;
  }
  if (v88)
  {
    if (v88 >> 61) {
      goto LABEL_307;
    }
    unint64_t v89 = (char *)operator new(8 * v88);
    long long v90 = &v89[8 * v85];
    uint64_t v91 = &v89[8 * v88];
    *(void *)long long v90 = v72;
    uint64_t v76 = (uint64_t)(v90 + 8);
    uint64_t v92 = (char *)(v75 - v84);
    if (v75 != v84) {
      goto LABEL_100;
    }
  }
  else
  {
    unint64_t v89 = 0;
    long long v90 = (char *)(8 * v85);
    uint64_t v91 = 0;
    *(void *)(8 * v85) = v72;
    uint64_t v76 = 8 * v85 + 8;
    uint64_t v92 = (char *)(v75 - v84);
    if (v75 != v84)
    {
LABEL_100:
      unint64_t v93 = (unint64_t)(v92 - 8);
      if (v93 < 0x78
        || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
      {
        goto LABEL_312;
      }
      uint64_t v94 = (v93 >> 3) + 1;
      uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v96 = &v75[-v95];
      v90 -= v95;
      uint64_t v97 = &v89[8 * v85 - 16];
      uint64_t v98 = v75 - 16;
      uint64_t v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v101 = *((_OWORD *)v98 - 1);
        long long v100 = *(_OWORD *)v98;
        *((_OWORD *)v98 - 1) = 0uLL;
        *(_OWORD *)uint64_t v98 = 0uLL;
        *((_OWORD *)v97 - 1) = v101;
        *(_OWORD *)uint64_t v97 = v100;
        v97 -= 32;
        v98 -= 32;
        v99 -= 4;
      }
      while (v99);
      unint64_t v75 = v96;
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_312:
        do
        {
          uint64_t v102 = *((void *)v75 - 1);
          v75 -= 8;
          *(void *)unint64_t v75 = 0;
          *((void *)v90 - 1) = v102;
          v90 -= 8;
        }
        while (v75 != v84);
      }
      unint64_t v75 = (char *)a1[1];
      uint64_t v103 = (char *)a1[2];
      a1[1] = v90;
      a1[2] = v76;
      a1[3] = v91;
      while (v103 != v75)
      {
        uint64_t v105 = *((void *)v103 - 1);
        v103 -= 8;
        uint64_t v104 = v105;
        *(void *)uint64_t v103 = 0;
        if (v105) {
          (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
        }
      }
      goto LABEL_113;
    }
  }
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75) {
    operator delete(v75);
  }
LABEL_115:
  a1[2] = v76;
  uint64_t v106 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v106 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(void *)uint64_t v106 = &unk_1EC99B3E0;
  if (*((void *)v106 + 9))
  {
    unint64_t v107 = v106[22];
    if (v107 <= v106[23]) {
      goto LABEL_117;
    }
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 20), v106 + 24, v107, 16);
    v106[22] = v106[22];
    uint64_t v109 = (char *)a1[2];
    unint64_t v108 = a1[3];
    if ((unint64_t)v109 < v108) {
      goto LABEL_118;
    }
    goto LABEL_129;
  }
  BOOL v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ConvertTrivialIfToSelect]";
  unint64_t v277 = 97;
  unint64_t v111 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v111) {
    unint64_t v112 = v111;
  }
  else {
    unint64_t v112 = v277;
  }
  uint64_t v113 = &v276[v112];
  unint64_t v114 = v277 - v112;
  if (v277 - v112 >= 0x12) {
    uint64_t v115 = 18;
  }
  else {
    uint64_t v115 = v277 - v112;
  }
  uint64_t v116 = &v113[v115];
  unint64_t v117 = v114 - v115;
  if (v117 >= v117 - 1) {
    --v117;
  }
  *((void *)v106 + 8) = v116;
  *((void *)v106 + 9) = v117;
  unint64_t v107 = v106[22];
  if (v107 > v106[23]) {
    goto LABEL_128;
  }
LABEL_117:
  v106[22] = v107;
  uint64_t v109 = (char *)a1[2];
  unint64_t v108 = a1[3];
  if ((unint64_t)v109 < v108)
  {
LABEL_118:
    *(void *)uint64_t v109 = v106;
    uint64_t v110 = (uint64_t)(v109 + 8);
    goto LABEL_153;
  }
LABEL_129:
  uint64_t v118 = (char *)a1[1];
  uint64_t v119 = (v109 - v118) >> 3;
  unint64_t v120 = v119 + 1;
  if ((unint64_t)(v119 + 1) >> 61) {
    goto LABEL_306;
  }
  uint64_t v121 = v108 - (void)v118;
  if (v121 >> 2 > v120) {
    unint64_t v120 = v121 >> 2;
  }
  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v122 = v120;
  }
  if (v122)
  {
    if (v122 >> 61) {
      goto LABEL_307;
    }
    uint64_t v123 = (char *)operator new(8 * v122);
    uint64_t v124 = &v123[8 * v119];
    uint64_t v125 = &v123[8 * v122];
    *(void *)uint64_t v124 = v106;
    uint64_t v110 = (uint64_t)(v124 + 8);
    long long v126 = (char *)(v109 - v118);
    if (v109 != v118) {
      goto LABEL_138;
    }
  }
  else
  {
    uint64_t v123 = 0;
    uint64_t v124 = (char *)(8 * v119);
    uint64_t v125 = 0;
    *(void *)(8 * v119) = v106;
    uint64_t v110 = 8 * v119 + 8;
    long long v126 = (char *)(v109 - v118);
    if (v109 != v118)
    {
LABEL_138:
      unint64_t v127 = (unint64_t)(v126 - 8);
      if (v127 < 0x78
        || &v109[-(v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v124
        && &v123[v109 - v118 - (v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v109)
      {
        goto LABEL_313;
      }
      uint64_t v128 = (v127 >> 3) + 1;
      uint64_t v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v130 = &v109[-v129];
      v124 -= v129;
      long long v131 = &v123[8 * v119 - 16];
      uint64_t v132 = v109 - 16;
      uint64_t v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v135 = *((_OWORD *)v132 - 1);
        long long v134 = *(_OWORD *)v132;
        *((_OWORD *)v132 - 1) = 0uLL;
        *(_OWORD *)uint64_t v132 = 0uLL;
        *((_OWORD *)v131 - 1) = v135;
        *(_OWORD *)long long v131 = v134;
        v131 -= 32;
        v132 -= 32;
        v133 -= 4;
      }
      while (v133);
      uint64_t v109 = v130;
      if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_313:
        do
        {
          uint64_t v136 = *((void *)v109 - 1);
          v109 -= 8;
          *(void *)uint64_t v109 = 0;
          *((void *)v124 - 1) = v136;
          v124 -= 8;
        }
        while (v109 != v118);
      }
      uint64_t v109 = (char *)a1[1];
      unsigned int v137 = (char *)a1[2];
      a1[1] = v124;
      a1[2] = v110;
      a1[3] = v125;
      while (v137 != v109)
      {
        uint64_t v139 = *((void *)v137 - 1);
        v137 -= 8;
        uint64_t v138 = v139;
        *(void *)unsigned int v137 = 0;
        if (v139) {
          (*(void (**)(uint64_t))(*(void *)v138 + 8))(v138);
        }
      }
      goto LABEL_151;
    }
  }
  a1[1] = v124;
  a1[2] = v110;
  a1[3] = v125;
LABEL_151:
  if (v109) {
    operator delete(v109);
  }
LABEL_153:
  a1[2] = v110;
  unint64_t v140 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v140 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(void *)unint64_t v140 = &unk_1EC99AA08;
  if (*((void *)v140 + 9))
  {
    unint64_t v141 = v140[22];
    if (v141 <= v140[23]) {
      goto LABEL_155;
    }
LABEL_166:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v140 + 20), v140 + 24, v141, 16);
    v140[22] = v140[22];
    unint64_t v143 = (char *)a1[2];
    unint64_t v142 = a1[3];
    if ((unint64_t)v143 < v142) {
      goto LABEL_156;
    }
    goto LABEL_167;
  }
  BOOL v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RemoveEmptyElseBranch]";
  unint64_t v277 = 94;
  unint64_t v145 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v145) {
    unint64_t v146 = v145;
  }
  else {
    unint64_t v146 = v277;
  }
  BOOL v147 = &v276[v146];
  unint64_t v148 = v277 - v146;
  if (v277 - v146 >= 0x12) {
    uint64_t v149 = 18;
  }
  else {
    uint64_t v149 = v277 - v146;
  }
  unint64_t v150 = &v147[v149];
  unint64_t v151 = v148 - v149;
  if (v151 >= v151 - 1) {
    --v151;
  }
  *((void *)v140 + 8) = v150;
  *((void *)v140 + 9) = v151;
  unint64_t v141 = v140[22];
  if (v141 > v140[23]) {
    goto LABEL_166;
  }
LABEL_155:
  v140[22] = v141;
  unint64_t v143 = (char *)a1[2];
  unint64_t v142 = a1[3];
  if ((unint64_t)v143 < v142)
  {
LABEL_156:
    *(void *)unint64_t v143 = v140;
    uint64_t v144 = (uint64_t)(v143 + 8);
    goto LABEL_191;
  }
LABEL_167:
  unint64_t v152 = (char *)a1[1];
  uint64_t v153 = (v143 - v152) >> 3;
  unint64_t v154 = v153 + 1;
  if ((unint64_t)(v153 + 1) >> 61) {
    goto LABEL_306;
  }
  uint64_t v155 = v142 - (void)v152;
  if (v155 >> 2 > v154) {
    unint64_t v154 = v155 >> 2;
  }
  if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v156 = v154;
  }
  if (v156)
  {
    if (v156 >> 61) {
      goto LABEL_307;
    }
    int64_t v157 = (char *)operator new(8 * v156);
    int64_t v158 = &v157[8 * v153];
    int64_t v159 = &v157[8 * v156];
    *(void *)int64_t v158 = v140;
    uint64_t v144 = (uint64_t)(v158 + 8);
    int64_t v160 = (char *)(v143 - v152);
    if (v143 != v152) {
      goto LABEL_176;
    }
  }
  else
  {
    int64_t v157 = 0;
    int64_t v158 = (char *)(8 * v153);
    int64_t v159 = 0;
    *(void *)(8 * v153) = v140;
    uint64_t v144 = 8 * v153 + 8;
    int64_t v160 = (char *)(v143 - v152);
    if (v143 != v152)
    {
LABEL_176:
      unint64_t v161 = (unint64_t)(v160 - 8);
      if (v161 < 0x78
        || &v143[-(v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v158
        && &v157[v143 - v152 - (v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v143)
      {
        goto LABEL_314;
      }
      uint64_t v162 = (v161 >> 3) + 1;
      uint64_t v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
      int64_t v164 = &v143[-v163];
      v158 -= v163;
      int64_t v165 = &v157[8 * v153 - 16];
      long long v166 = v143 - 16;
      uint64_t v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v169 = *((_OWORD *)v166 - 1);
        long long v168 = *(_OWORD *)v166;
        *((_OWORD *)v166 - 1) = 0uLL;
        *(_OWORD *)long long v166 = 0uLL;
        *((_OWORD *)v165 - 1) = v169;
        *(_OWORD *)int64_t v165 = v168;
        v165 -= 32;
        v166 -= 32;
        v167 -= 4;
      }
      while (v167);
      unint64_t v143 = v164;
      if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_314:
        do
        {
          uint64_t v170 = *((void *)v143 - 1);
          v143 -= 8;
          *(void *)unint64_t v143 = 0;
          *((void *)v158 - 1) = v170;
          v158 -= 8;
        }
        while (v143 != v152);
      }
      unint64_t v143 = (char *)a1[1];
      long long v171 = (char *)a1[2];
      a1[1] = v158;
      a1[2] = v144;
      a1[3] = v159;
      while (v171 != v143)
      {
        uint64_t v173 = *((void *)v171 - 1);
        v171 -= 8;
        uint64_t v172 = v173;
        *(void *)long long v171 = 0;
        if (v173) {
          (*(void (**)(uint64_t))(*(void *)v172 + 8))(v172);
        }
      }
      goto LABEL_189;
    }
  }
  a1[1] = v158;
  a1[2] = v144;
  a1[3] = v159;
LABEL_189:
  if (v143) {
    operator delete(v143);
  }
LABEL_191:
  a1[2] = v144;
  unint64_t v174 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v174 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(void *)unint64_t v174 = &unk_1EC99AA60;
  if (*((void *)v174 + 9))
  {
    unint64_t v175 = v174[22];
    if (v175 <= v174[23]) {
      goto LABEL_193;
    }
LABEL_204:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v174 + 20), v174 + 24, v175, 16);
    v174[22] = v174[22];
    unsigned int v177 = (char *)a1[2];
    unint64_t v176 = a1[3];
    if ((unint64_t)v177 < v176) {
      goto LABEL_194;
    }
    goto LABEL_205;
  }
  BOOL v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RemoveStaticCondition]";
  unint64_t v277 = 94;
  unint64_t v179 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v179) {
    unint64_t v180 = v179;
  }
  else {
    unint64_t v180 = v277;
  }
  unsigned int v181 = &v276[v180];
  unint64_t v182 = v277 - v180;
  if (v277 - v180 >= 0x12) {
    uint64_t v183 = 18;
  }
  else {
    uint64_t v183 = v277 - v180;
  }
  char v184 = &v181[v183];
  unint64_t v185 = v182 - v183;
  if (v185 >= v185 - 1) {
    --v185;
  }
  *((void *)v174 + 8) = v184;
  *((void *)v174 + 9) = v185;
  unint64_t v175 = v174[22];
  if (v175 > v174[23]) {
    goto LABEL_204;
  }
LABEL_193:
  v174[22] = v175;
  unsigned int v177 = (char *)a1[2];
  unint64_t v176 = a1[3];
  if ((unint64_t)v177 < v176)
  {
LABEL_194:
    *(void *)unsigned int v177 = v174;
    uint64_t v178 = (uint64_t)(v177 + 8);
    goto LABEL_229;
  }
LABEL_205:
  uint64_t v186 = (char *)a1[1];
  uint64_t v187 = (v177 - v186) >> 3;
  unint64_t v188 = v187 + 1;
  if ((unint64_t)(v187 + 1) >> 61) {
    goto LABEL_306;
  }
  uint64_t v189 = v176 - (void)v186;
  if (v189 >> 2 > v188) {
    unint64_t v188 = v189 >> 2;
  }
  if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v190 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v190 = v188;
  }
  if (v190)
  {
    if (v190 >> 61) {
      goto LABEL_307;
    }
    int v191 = (char *)operator new(8 * v190);
    unsigned int v192 = &v191[8 * v187];
    unsigned int v193 = &v191[8 * v190];
    *(void *)unsigned int v192 = v174;
    uint64_t v178 = (uint64_t)(v192 + 8);
    uint64_t v194 = (char *)(v177 - v186);
    if (v177 != v186) {
      goto LABEL_214;
    }
  }
  else
  {
    int v191 = 0;
    unsigned int v192 = (char *)(8 * v187);
    unsigned int v193 = 0;
    *(void *)(8 * v187) = v174;
    uint64_t v178 = 8 * v187 + 8;
    uint64_t v194 = (char *)(v177 - v186);
    if (v177 != v186)
    {
LABEL_214:
      unint64_t v195 = (unint64_t)(v194 - 8);
      if (v195 < 0x78
        || &v177[-(v195 & 0xFFFFFFFFFFFFFFF8) - 8] < v192
        && &v191[v177 - v186 - (v195 & 0xFFFFFFFFFFFFFFF8) - 8] < v177)
      {
        goto LABEL_315;
      }
      uint64_t v196 = (v195 >> 3) + 1;
      uint64_t v197 = 8 * (v196 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v198 = &v177[-v197];
      v192 -= v197;
      unsigned int v199 = &v191[8 * v187 - 16];
      uint64_t v200 = v177 - 16;
      uint64_t v201 = v196 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v203 = *((_OWORD *)v200 - 1);
        long long v202 = *(_OWORD *)v200;
        *((_OWORD *)v200 - 1) = 0uLL;
        *(_OWORD *)uint64_t v200 = 0uLL;
        *((_OWORD *)v199 - 1) = v203;
        *(_OWORD *)unsigned int v199 = v202;
        v199 -= 32;
        v200 -= 32;
        v201 -= 4;
      }
      while (v201);
      unsigned int v177 = v198;
      if (v196 != (v196 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_315:
        do
        {
          uint64_t v204 = *((void *)v177 - 1);
          v177 -= 8;
          *(void *)unsigned int v177 = 0;
          *((void *)v192 - 1) = v204;
          v192 -= 8;
        }
        while (v177 != v186);
      }
      unsigned int v177 = (char *)a1[1];
      uint64_t v205 = (char *)a1[2];
      a1[1] = v192;
      a1[2] = v178;
      a1[3] = v193;
      while (v205 != v177)
      {
        uint64_t v207 = *((void *)v205 - 1);
        v205 -= 8;
        uint64_t v206 = v207;
        *(void *)uint64_t v205 = 0;
        if (v207) {
          (*(void (**)(uint64_t))(*(void *)v206 + 8))(v206);
        }
      }
      goto LABEL_227;
    }
  }
  a1[1] = v192;
  a1[2] = v178;
  a1[3] = v193;
LABEL_227:
  if (v177) {
    operator delete(v177);
  }
LABEL_229:
  a1[2] = v178;
  uint64_t v208 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v208 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(void *)uint64_t v208 = &unk_1EC99A200;
  if (*((void *)v208 + 9))
  {
    unint64_t v209 = v208[22];
    if (v209 <= v208[23]) {
      goto LABEL_231;
    }
LABEL_242:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v208 + 20), v208 + 24, v209, 16);
    v208[22] = v208[22];
    uint64_t v211 = (char *)a1[2];
    unint64_t v210 = a1[3];
    if ((unint64_t)v211 < v210) {
      goto LABEL_232;
    }
    goto LABEL_243;
  }
  BOOL v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RemoveUnusedResults]";
  unint64_t v277 = 92;
  unint64_t v213 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v213) {
    unint64_t v214 = v213;
  }
  else {
    unint64_t v214 = v277;
  }
  unint64_t v215 = &v276[v214];
  unint64_t v216 = v277 - v214;
  if (v277 - v214 >= 0x12) {
    uint64_t v217 = 18;
  }
  else {
    uint64_t v217 = v277 - v214;
  }
  unint64_t v218 = &v215[v217];
  unint64_t v219 = v216 - v217;
  if (v219 >= v219 - 1) {
    --v219;
  }
  *((void *)v208 + 8) = v218;
  *((void *)v208 + 9) = v219;
  unint64_t v209 = v208[22];
  if (v209 > v208[23]) {
    goto LABEL_242;
  }
LABEL_231:
  v208[22] = v209;
  uint64_t v211 = (char *)a1[2];
  unint64_t v210 = a1[3];
  if ((unint64_t)v211 < v210)
  {
LABEL_232:
    *(void *)uint64_t v211 = v208;
    uint64_t v212 = (uint64_t)(v211 + 8);
    goto LABEL_267;
  }
LABEL_243:
  uint64_t v220 = (char *)a1[1];
  uint64_t v221 = (v211 - v220) >> 3;
  unint64_t v222 = v221 + 1;
  if ((unint64_t)(v221 + 1) >> 61) {
    goto LABEL_306;
  }
  uint64_t v223 = v210 - (void)v220;
  if (v223 >> 2 > v222) {
    unint64_t v222 = v223 >> 2;
  }
  if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v224 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v224 = v222;
  }
  if (v224)
  {
    if (v224 >> 61) {
      goto LABEL_307;
    }
    BOOL v225 = (char *)operator new(8 * v224);
    __int16 v226 = &v225[8 * v221];
    BOOL v227 = &v225[8 * v224];
    *(void *)__int16 v226 = v208;
    uint64_t v212 = (uint64_t)(v226 + 8);
    uint64_t v228 = (char *)(v211 - v220);
    if (v211 != v220) {
      goto LABEL_252;
    }
  }
  else
  {
    BOOL v225 = 0;
    __int16 v226 = (char *)(8 * v221);
    BOOL v227 = 0;
    *(void *)(8 * v221) = v208;
    uint64_t v212 = 8 * v221 + 8;
    uint64_t v228 = (char *)(v211 - v220);
    if (v211 != v220)
    {
LABEL_252:
      unint64_t v229 = (unint64_t)(v228 - 8);
      if (v229 < 0x78
        || &v211[-(v229 & 0xFFFFFFFFFFFFFFF8) - 8] < v226
        && &v225[v211 - v220 - (v229 & 0xFFFFFFFFFFFFFFF8) - 8] < v211)
      {
        goto LABEL_316;
      }
      uint64_t v230 = (v229 >> 3) + 1;
      uint64_t v231 = 8 * (v230 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v232 = &v211[-v231];
      v226 -= v231;
      BOOL v233 = &v225[8 * v221 - 16];
      uint64_t v234 = v211 - 16;
      uint64_t v235 = v230 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v237 = *((_OWORD *)v234 - 1);
        long long v236 = *(_OWORD *)v234;
        *((_OWORD *)v234 - 1) = 0uLL;
        *(_OWORD *)uint64_t v234 = 0uLL;
        *((_OWORD *)v233 - 1) = v237;
        *(_OWORD *)BOOL v233 = v236;
        v233 -= 32;
        v234 -= 32;
        v235 -= 4;
      }
      while (v235);
      uint64_t v211 = v232;
      if (v230 != (v230 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_316:
        do
        {
          uint64_t v238 = *((void *)v211 - 1);
          v211 -= 8;
          *(void *)uint64_t v211 = 0;
          *((void *)v226 - 1) = v238;
          v226 -= 8;
        }
        while (v211 != v220);
      }
      uint64_t v211 = (char *)a1[1];
      BOOL v239 = (char *)a1[2];
      a1[1] = v226;
      a1[2] = v212;
      a1[3] = v227;
      while (v239 != v211)
      {
        uint64_t v241 = *((void *)v239 - 1);
        v239 -= 8;
        uint64_t v240 = v241;
        *(void *)BOOL v239 = 0;
        if (v241) {
          (*(void (**)(uint64_t))(*(void *)v240 + 8))(v240);
        }
      }
      goto LABEL_265;
    }
  }
  a1[1] = v226;
  a1[2] = v212;
  a1[3] = v227;
LABEL_265:
  if (v211) {
    operator delete(v211);
  }
LABEL_267:
  a1[2] = v212;
  uint64_t v242 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v276, 1);
  mlir::Pattern::Pattern((uint64_t)(v242 + 2), (uint64_t)"scf.if", 6, (__int16)v276, a2, 0, 0);
  *(void *)uint64_t v242 = &unk_1EC99C2E8;
  if (*((void *)v242 + 9))
  {
    unint64_t v243 = v242[22];
    if (v243 <= v242[23]) {
      goto LABEL_269;
    }
LABEL_280:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v242 + 20), v242 + 24, v243, 16);
    v242[22] = v242[22];
    uint64_t v245 = (char *)a1[2];
    unint64_t v244 = a1[3];
    if ((unint64_t)v245 < v244) {
      goto LABEL_270;
    }
    goto LABEL_281;
  }
  BOOL v276 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ReplaceIfYieldWithConditionOrValue]";
  unint64_t v277 = 107;
  unint64_t v247 = llvm::StringRef::find((uint64_t *)&v276, "DesiredTypeName = ", 0x12uLL, 0);
  if (v277 >= v247) {
    unint64_t v248 = v247;
  }
  else {
    unint64_t v248 = v277;
  }
  uint64_t v249 = &v276[v248];
  unint64_t v250 = v277 - v248;
  if (v277 - v248 >= 0x12) {
    uint64_t v251 = 18;
  }
  else {
    uint64_t v251 = v277 - v248;
  }
  uint64_t v252 = &v249[v251];
  unint64_t v253 = v250 - v251;
  if (v253 >= v253 - 1) {
    --v253;
  }
  *((void *)v242 + 8) = v252;
  *((void *)v242 + 9) = v253;
  unint64_t v243 = v242[22];
  if (v243 > v242[23]) {
    goto LABEL_280;
  }
LABEL_269:
  v242[22] = v243;
  uint64_t v245 = (char *)a1[2];
  unint64_t v244 = a1[3];
  if ((unint64_t)v245 < v244)
  {
LABEL_270:
    *(void *)uint64_t v245 = v242;
    uint64_t v246 = (uint64_t)(v245 + 8);
    goto LABEL_305;
  }
LABEL_281:
  unint64_t v254 = (char *)a1[1];
  uint64_t v255 = (v245 - v254) >> 3;
  unint64_t v256 = v255 + 1;
  if ((unint64_t)(v255 + 1) >> 61) {
LABEL_306:
  }
    abort();
  uint64_t v257 = v244 - (void)v254;
  if (v257 >> 2 > v256) {
    unint64_t v256 = v257 >> 2;
  }
  if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v258 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v258 = v256;
  }
  if (!v258)
  {
    uint64_t v259 = 0;
    unint64_t v260 = (char *)(8 * v255);
    unint64_t v261 = 0;
    *(void *)(8 * v255) = v242;
    uint64_t v246 = 8 * v255 + 8;
    unint64_t v262 = (char *)(v245 - v254);
    if (v245 != v254) {
      goto LABEL_290;
    }
    goto LABEL_302;
  }
  if (v258 >> 61) {
LABEL_307:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v259 = (char *)operator new(8 * v258);
  unint64_t v260 = &v259[8 * v255];
  unint64_t v261 = &v259[8 * v258];
  *(void *)unint64_t v260 = v242;
  uint64_t v246 = (uint64_t)(v260 + 8);
  unint64_t v262 = (char *)(v245 - v254);
  if (v245 != v254)
  {
LABEL_290:
    unint64_t v263 = (unint64_t)(v262 - 8);
    if (v263 < 0x78
      || &v245[-(v263 & 0xFFFFFFFFFFFFFFF8) - 8] < v260
      && &v259[v245 - v254 - (v263 & 0xFFFFFFFFFFFFFFF8) - 8] < v245)
    {
      goto LABEL_317;
    }
    uint64_t v264 = (v263 >> 3) + 1;
    uint64_t v265 = 8 * (v264 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v266 = &v245[-v265];
    v260 -= v265;
    unint64_t v267 = &v259[8 * v255 - 16];
    unint64_t v268 = v245 - 16;
    uint64_t v269 = v264 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v271 = *((_OWORD *)v268 - 1);
      long long v270 = *(_OWORD *)v268;
      *((_OWORD *)v268 - 1) = 0uLL;
      *(_OWORD *)unint64_t v268 = 0uLL;
      *((_OWORD *)v267 - 1) = v271;
      *(_OWORD *)unint64_t v267 = v270;
      v267 -= 32;
      v268 -= 32;
      v269 -= 4;
    }
    while (v269);
    uint64_t v245 = v266;
    if (v264 != (v264 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_317:
      do
      {
        uint64_t v272 = *((void *)v245 - 1);
        v245 -= 8;
        *(void *)uint64_t v245 = 0;
        *((void *)v260 - 1) = v272;
        v260 -= 8;
      }
      while (v245 != v254);
    }
    uint64_t v245 = (char *)a1[1];
    __int16 v273 = (char *)a1[2];
    a1[1] = v260;
    a1[2] = v246;
    a1[3] = v261;
    while (v273 != v245)
    {
      uint64_t v275 = *((void *)v273 - 1);
      v273 -= 8;
      uint64_t v274 = v275;
      *(void *)__int16 v273 = 0;
      if (v275) {
        (*(void (**)(uint64_t))(*(void *)v274 + 8))(v274);
      }
    }
    goto LABEL_303;
  }
LABEL_302:
  a1[1] = v260;
  a1[2] = v246;
  a1[3] = v261;
LABEL_303:
  if (v245) {
    operator delete(v245);
  }
LABEL_305:
  a1[2] = v246;
}

uint64_t mlir::scf::IfOp::elseBlock(mlir::scf::IfOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if ((v1 & 0x7FFFFF) != 0)
  {
    unint64_t v2 = ((*(void *)this + 16 * ((v1 >> 23) & 1) + ((v1 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(*(void *)this + 40);
    uint64_t v5 = *(void *)(v2 + 24);
    unint64_t v3 = v2 + 24;
    uint64_t v4 = v5;
    uint64_t v6 = v5 - 8;
    if (v5) {
      BOOL v7 = v4 == v3;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      return 0;
    }
    else {
      return v6;
    }
  }
  else
  {
    if (MEMORY[0x18]) {
      BOOL v9 = MEMORY[0x18] == 24;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9) {
      return 0;
    }
    else {
      return MEMORY[0x18] - 8;
    }
  }
}

void mlir::scf::ParallelOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, void (*a10)(uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t), uint64_t a11)
{
  int v15 = a4;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  __n128 v72 = a9;
  mlir::OperationState::addOperands(a2, a3, a4);
  mlir::OperationState::addOperands(a2, a5, a6);
  mlir::OperationState::addOperands(a2, a7, a8);
  mlir::OperationState::addOperands(a2, a9.n128_i64[0], a9.n128_i64[1]);
  v71[0] = v15;
  v71[1] = a6;
  uint64_t v71[2] = a8;
  v71[3] = a9.n128_u32[2];
  DenseI32uint64_t ArrayAttr = mlir::Builder::getDenseI32ArrayAttr((mlir::MLIRContext **)a1, (uint64_t)v71, 4);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  LOWORD(v65) = 261;
  v62.n128_u64[0] = (unint64_t)"operandSegmentSizes";
  v62.n128_u64[1] = 19;
  uint64_t v20 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v62);
  mlir::NamedAttribute::NamedAttribute(&v59, v20, DenseI32ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v59, v60);
  mlir::ValueRange::getTypes(&v72, &v62);
  uint64_t v22 = v62.n128_i64[1];
  uint64_t v23 = (void *)v62.n128_u64[0];
  uint64_t v24 = v63;
  uint64_t v25 = v64;
  int v26 = v64 - v62.n128_u32[2];
  uint64_t v27 = *(unsigned int *)(a2 + 72);
  unint64_t v28 = v64 - v62.n128_u64[1] + v27;
  if (v28 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v28, 8);
    uint64_t v27 = *(unsigned int *)(a2 + 72);
  }
  uint64_t v29 = *(void *)(a2 + 64);
  unint64_t v59 = v23;
  uint64_t v60 = v22;
  if (v25 != v22 || v23 != v24)
  {
    uint64_t v30 = (unint64_t *)(v29 + 8 * v27);
    do
    {
      *v30++ = *(void *)(mlir::ValueRange::dereference_iterator(&v59, v22) + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v22 = ++v60;
    }
    while (v59 != v24 || v22 != v25);
    LODWORD(v27) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v27 + v26;
  long long v32 = (_OWORD *)(a1 + 16);
  long long v55 = *(_OWORD *)(a1 + 16);
  unint64_t v33 = a8;
  Indexuint64_t Type = mlir::Builder::getIndexType((mlir::IndexType **)a1, v21);
  unint64_t v35 = IndexType;
  v62.n128_u64[0] = (unint64_t)&v63;
  v62.n128_u32[3] = 8;
  if (a8 < 9uLL)
  {
    if (!a8)
    {
      v62.n128_u32[2] = a8;
      unint64_t v59 = v61;
      HIDWORD(v60) = 8;
      LODWORD(a8) = 0;
      goto LABEL_44;
    }
    int v63 = (void *)IndexType;
    if (a8 != 1)
    {
      uint64_t v64 = IndexType;
      if (a8 != 2)
      {
        uint64_t v65 = IndexType;
        if (a8 != 3)
        {
          uint64_t v66 = IndexType;
          if (a8 != 4)
          {
            uint64_t v67 = IndexType;
            if (a8 != 5)
            {
              uint64_t v68 = IndexType;
              if (a8 != 6)
              {
                uint64_t v69 = IndexType;
                if (a8 != 7)
                {
                  uint64_t v41 = (unint64_t *)&v70;
                  goto LABEL_19;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v62.n128_u32[2] = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, &v63, a8, 8);
    uint64_t v36 = a8 & 3;
    uint64_t v37 = a8 - v36;
    unint64_t v38 = (unint64_t *)(v62.n128_u64[0] + 8 * v37);
    int64x2_t v39 = vdupq_n_s64(v35);
    unint64_t v40 = (int64x2_t *)(v62.n128_u64[0] + 16);
    do
    {
      v40[-1] = v39;
      *unint64_t v40 = v39;
      v40 += 2;
      v37 -= 4;
    }
    while (v37);
    if ((a8 & 3) != 0)
    {
      *unint64_t v38 = v35;
      if (v36 != 1)
      {
        v38[1] = v35;
        if (v36 != 2)
        {
          uint64_t v41 = v38 + 2;
LABEL_19:
          unint64_t *v41 = v35;
        }
      }
    }
  }
  v62.n128_u32[2] = a8;
  unint64_t v59 = v61;
  uint64_t v60 = 0x800000000;
  unint64_t v42 = *(void *)a2;
  if (a8 < 9uLL)
  {
    v61[0] = *(void *)a2;
    if (a8 != 1)
    {
      v61[1] = v42;
      if (a8 != 2)
      {
        void v61[2] = v42;
        if (a8 != 3)
        {
          v61[3] = v42;
          if (a8 != 4)
          {
            v61[4] = v42;
            if (a8 != 5)
            {
              v61[5] = v42;
              if (a8 != 6)
              {
                v61[6] = v42;
                if (a8 != 7) {
                  v61[7] = v42;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, a8, 8);
    uint64_t v43 = a8 & 3;
    uint64_t v44 = a8 - v43;
    uint64_t v45 = (unint64_t *)((char *)v59 + 8 * v44);
    int64x2_t v46 = vdupq_n_s64(v42);
    uint64_t v47 = (int64x2_t *)((char *)v59 + 16);
    do
    {
      v47[-1] = v46;
      int64x2_t *v47 = v46;
      v47 += 2;
      v44 -= 4;
    }
    while (v44);
    if ((a8 & 3) != 0)
    {
      *uint64_t v45 = v42;
      if (v43 != 1)
      {
        v45[1] = v42;
        if (v43 != 2) {
          unint64_t v45[2] = v42;
        }
      }
    }
  }
LABEL_44:
  LODWORD(v60) = a8;
  unint64_t v48 = (void *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  mlir::ValueRange::ValueRange(v58, v62.n128_i64[0], v62.n128_u32[2]);
  Block = mlir::OpBuilder::createBlock((void *)a1, (uint64_t)v48, 0, v58[0], v58[1], (uint64_t)v59, v60);
  if (a10)
  {
    unint64_t v50 = Block;
    uint64_t v51 = Block[5];
    *(void *)(a1 + 16) = Block;
    *(void *)(a1 + 24) = v51;
    unint64_t v52 = *(void *)a2;
    uint64_t v53 = Block[6];
    if ((Block[7] - v53) >> 3 >= v33) {
      unint64_t v54 = v33;
    }
    else {
      unint64_t v54 = (Block[7] - v53) >> 3;
    }
    mlir::ValueRange::ValueRange(v57, v53, v54);
    mlir::ValueRange::ValueRange(v56, v50[6] + 8 * v33, ((uint64_t)(v50[7] - v50[6]) >> 3) - v33);
    a10(a11, a1, v52, v57[0], v57[1], v56[0], v56[1]);
  }
  mlir::impl::ensureRegionTerminator(v48, a1, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ParallelOp>::buildTerminator);
  if (v59 != v61) {
    free(v59);
  }
  if ((void **)v62.n128_u64[0] != &v63) {
    free((void *)v62.n128_u64[0]);
  }
  if ((void)v55)
  {
    *long long v32 = v55;
  }
  else
  {
    *(void *)long long v32 = 0;
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t mlir::scf::ParallelOp::verify(uint64_t **this)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *((unsigned int *)*this + 11);
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = &(*this)[2 * ((v2 >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  int v4 = *((_DWORD *)v3 + 2);
  if ((v2 & 0x800000) != 0)
  {
    uint64_t v5 = (*this)[9];
    if (v4) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (v4)
    {
LABEL_6:
      uint64_t v6 = (*((_DWORD *)v3 + 1) + *(_DWORD *)v3);
      uint64_t v7 = (v4 + v6) - v6;
      uint64_t v8 = (void *)(v5 + 32 * v6 + 24);
      uint64_t v9 = v7;
      do
      {
        ConstantIntBOOL Value = mlir::getConstantIntValue(*v8 | 4);
        if (v11) {
          BOOL v12 = ConstantIntValue <= 0;
        }
        else {
          BOOL v12 = 0;
        }
        if (v12)
        {
          unint64_t v112 = (const void **)"constant step operand must be positive";
          __int16 v115 = 259;
          mlir::OpState::emitOpError(this, &v112, (uint64_t)&v116);
          uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
          if ((void)v116) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
          }
          if (!v123) {
            return v22;
          }
          uint64_t v23 = (void **)__p;
          if (__p)
          {
            uint64_t v24 = v122;
            uint64_t v25 = __p;
            if (v122 != __p)
            {
              do
                uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
              while (v24 != v23);
              uint64_t v25 = __p;
            }
            unint64_t v122 = v23;
            operator delete(v25);
          }
          int v26 = v119;
          if (!v119) {
            goto LABEL_117;
          }
          uint64_t v27 = v120;
          unint64_t v28 = v119;
          if (v120 == v119) {
            goto LABEL_116;
          }
          do
          {
            uint64_t v30 = (void *)*--v27;
            uint64_t v29 = v30;
            *uint64_t v27 = 0;
            if (v30) {
              operator delete[](v29);
            }
          }
          while (v27 != v26);
          goto LABEL_115;
        }
        v8 += 4;
        --v9;
      }
      while (v9);
      uint64_t v13 = *(void *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                                                   + 8]
                        + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                        + 7) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *((unsigned int *)*this + 10)
                      + 8);
      if (v13) {
        uint64_t v14 = v13 - 8;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v16 = *(void *)(v14 + 48);
      uint64_t v15 = *(void *)(v14 + 56);
      if (v7 == ((unint64_t)(v15 - v16) >> 3))
      {
        if (v15 != v16)
        {
          uint64_t v17 = 8 * ((v15 - v16) >> 3);
          while (1)
          {
            *(void *)&long long v116 = *(void *)(*(void *)v16 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!mlir::Type::isIndex((mlir::Type *)&v116)) {
              break;
            }
            v16 += 8;
            v17 -= 8;
            if (!v17) {
              goto LABEL_20;
            }
          }
          unint64_t v112 = (const void **)"expects arguments for the induction variable to be of index type";
          __int16 v115 = 259;
          mlir::OpState::emitOpError(this, &v112, (uint64_t)&v116);
          uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
          if ((void)v116) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
          }
          if (v123)
          {
            uint64_t v56 = (void **)__p;
            if (__p)
            {
              __int16 v57 = v122;
              uint64_t v58 = __p;
              if (v122 != __p)
              {
                do
                  __int16 v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
                while (v57 != v56);
                uint64_t v58 = __p;
              }
              unint64_t v122 = v56;
              operator delete(v58);
            }
            unint64_t v59 = v119;
            if (v119)
            {
              uint64_t v60 = v120;
              uint64_t v61 = v119;
              if (v120 != v119)
              {
                do
                {
                  int v63 = (void *)*--v60;
                  __n128 v62 = v63;
                  *uint64_t v60 = 0;
                  if (v63) {
                    operator delete[](v62);
                  }
                }
                while (v60 != v59);
                uint64_t v61 = v119;
              }
              unint64_t v120 = v59;
              operator delete(v61);
            }
            unint64_t v78 = (const void **)*((void *)&v117 + 1);
            if (*((_OWORD **)&v117 + 1) != (_OWORD *)((char *)v118 + 8)) {
              goto LABEL_118;
            }
          }
          return v22;
        }
LABEL_20:
        uint64_t v18 = verifyAndGetTerminator<mlir::scf::YieldOp>(*this, (void *)((((unint64_t)&(*this)[2* (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ 8]+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10)), (const void **)"expects body to terminate with 'scf.yield'", (const char *)0x2A);
        uint64_t v110 = (uint64_t *)v18;
        if (!v18) {
          return 0;
        }
        if ((*(unsigned char *)(v18 + 46) & 0x80) != 0 && *(_DWORD *)(v18 + 68))
        {
          __int16 v109 = 257;
          mlir::OpState::emitOpError(&v110, (const void ***)&v107, (uint64_t)&v116);
          uint64_t v19 = (void *)mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v116, "not allowed to have operands inside '");
          uint64_t v20 = (uint64_t)v19;
          if (*v19)
          {
            __int16 v115 = 262;
            unint64_t v112 = (const void **)"scf.parallel";
            uint64_t v113 = 12;
            mlir::Diagnostic::operator<<((uint64_t)(v19 + 1), &v112);
          }
          uint64_t v21 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v20, "'");
          uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v21);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v116);
          return v22;
        }
        mlir::Block::getOps<mlir::scf::ReduceOp>(v14, (mlir::GenericProgramPoint **)&v116);
        unint64_t v112 = (const void **)v114;
        uint64_t v113 = 0x400000000;
        long long v107 = v116;
        long long v108 = v117;
        v111[0] = v118[0];
        v111[1] = v118[1];
        llvm::SmallVectorImpl<mlir::scf::ReduceOp>::append<mlir::detail::op_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>,void>((uint64_t)&v112, (uint64_t)&v107, (mlir::GenericProgramPoint **)v111);
        uint64_t v64 = *this;
        uint64_t v65 = *((unsigned int *)*this + 9);
        *(void *)&v111[0] = v65;
        uint64_t v66 = v113;
        uint64_t v106 = v113;
        mlir::scf::ParallelOp::getInitVals((mlir::scf::ParallelOp *)this);
        uint64_t v105 = v67;
        if (v65 != v66)
        {
          __int16 v109 = 257;
          mlir::OpState::emitOpError(this, (const void ***)&v107, (uint64_t)&v116);
          uint64_t v74 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v116, "expects number of results: ");
          uint64_t v75 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v74, (uint64_t *)v111);
          uint64_t v76 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v75, " to be the same as number of reductions: ");
          uint64_t v77 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v76, &v106);
          goto LABEL_97;
        }
        if (v67 == v65)
        {
          if (v65) {
            uint64_t v68 = (uint64_t)(v64 - 2);
          }
          else {
            uint64_t v68 = 0;
          }
          if (v65)
          {
            uint64_t v69 = 0;
            uint64_t v70 = v112;
            uint64_t v71 = 8 * v66 - 8;
            uint64_t v72 = v65 - 1;
            uint64_t v22 = 1;
            while (1)
            {
              unint64_t v104 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v68, v69) + 8) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v103 = (uint64_t *)v70[v69];
              unint64_t v102 = *(void *)(*(void *)(v103[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
              if (v104 != v102) {
                break;
              }
              if (v72 != v69)
              {
                ++v69;
                uint64_t v73 = v71;
                v71 -= 8;
                if (v73) {
                  continue;
                }
              }
              goto LABEL_98;
            }
            __int16 v109 = 257;
            mlir::OpState::emitOpError(&v103, (const void ***)&v107, (uint64_t)&v116);
            uint64_t v82 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v116, "expects type of reduce: ");
            uint64_t v83 = mlir::InFlightDiagnostic::append<mlir::Type &>(v82, (uint64_t *)&v102);
            uint64_t v84 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v83, " to be the same as result type: ");
            uint64_t v77 = mlir::InFlightDiagnostic::append<mlir::Type &>(v84, (uint64_t *)&v104);
LABEL_97:
            uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v77);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v116);
          }
          else
          {
            uint64_t v22 = 1;
          }
LABEL_98:
          unint64_t v78 = v112;
          if (v112 != (const void **)v114) {
            goto LABEL_118;
          }
          return v22;
        }
        __int16 v109 = 257;
        mlir::OpState::emitOpError(this, (const void ***)&v107, (uint64_t)&v116);
        uint64_t v79 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v116, "expects number of results: ");
        uint64_t v80 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v79, (uint64_t *)v111);
        uint64_t v81 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v80, " to be the same as number of initial values: ");
        uint64_t v77 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v81, &v105);
        goto LABEL_97;
      }
      __int16 v115 = 257;
      mlir::OpState::emitOpError(this, &v112, (uint64_t)&v116);
      if ((void)v116)
      {
        LODWORD(v107) = 3;
        *((void *)&v107 + 1) = "expects the same number of induction variables: ";
        *(void *)&long long v108 = 48;
        uint64_t v31 = (char *)&v107;
        uint64_t v32 = *((void *)&v117 + 1);
        if (LODWORD(v118[0]) >= DWORD1(v118[0]))
        {
          unint64_t v92 = LODWORD(v118[0]) + 1;
          if (*((void *)&v117 + 1) <= (unint64_t)&v107
            && *((void *)&v117 + 1) + 24 * (unint64_t)LODWORD(v118[0]) > (unint64_t)&v107)
          {
            uint64_t v98 = (char *)&v107 - *((void *)&v117 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v92, 24);
            uint64_t v32 = *((void *)&v117 + 1);
            uint64_t v31 = &v98[*((void *)&v117 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v92, 24);
            uint64_t v31 = (char *)&v107;
            uint64_t v32 = *((void *)&v117 + 1);
          }
        }
        uint64_t v33 = v32 + 24 * LODWORD(v118[0]);
        long long v34 = *(_OWORD *)v31;
        *(void *)(v33 + 16) = *((void *)v31 + 2);
        *(_OWORD *)uint64_t v33 = v34;
        ++LODWORD(v118[0]);
        if ((void)v116)
        {
          unint64_t v35 = *(void *)(v14 + 56) - *(void *)(v14 + 48);
          LODWORD(v107) = 5;
          *((void *)&v107 + 1) = (v35 >> 3);
          uint64_t v36 = (char *)&v107;
          uint64_t v37 = *((void *)&v117 + 1);
          if (LODWORD(v118[0]) >= DWORD1(v118[0]))
          {
            unint64_t v93 = LODWORD(v118[0]) + 1;
            if (*((void *)&v117 + 1) <= (unint64_t)&v107
              && *((void *)&v117 + 1) + 24 * (unint64_t)LODWORD(v118[0]) > (unint64_t)&v107)
            {
              uint64_t v99 = (char *)&v107 - *((void *)&v117 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v93, 24);
              uint64_t v37 = *((void *)&v117 + 1);
              uint64_t v36 = &v99[*((void *)&v117 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v93, 24);
              uint64_t v36 = (char *)&v107;
              uint64_t v37 = *((void *)&v117 + 1);
            }
          }
          uint64_t v38 = v37 + 24 * LODWORD(v118[0]);
          long long v39 = *(_OWORD *)v36;
          *(void *)(v38 + 16) = *((void *)v36 + 2);
          *(_OWORD *)uint64_t v38 = v39;
          uint64_t v40 = ++LODWORD(v118[0]);
          if ((void)v116)
          {
            LODWORD(v107) = 3;
            *((void *)&v107 + 1) = " as bound and step values: ";
            *(void *)&long long v108 = 27;
            uint64_t v41 = (char *)&v107;
            uint64_t v42 = *((void *)&v117 + 1);
            if (v40 >= DWORD1(v118[0]))
            {
              unint64_t v94 = v40 + 1;
              BOOL v95 = *((void *)&v117 + 1) + 24 * (unint64_t)v40 > (unint64_t)&v107;
              if (*((void *)&v117 + 1) <= (unint64_t)&v107 && v95)
              {
                long long v100 = (char *)&v107 - *((void *)&v117 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v94, 24);
                uint64_t v42 = *((void *)&v117 + 1);
                uint64_t v41 = &v100[*((void *)&v117 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v94, 24);
                uint64_t v41 = (char *)&v107;
                uint64_t v42 = *((void *)&v117 + 1);
              }
            }
            uint64_t v43 = v42 + 24 * LODWORD(v118[0]);
            long long v44 = *(_OWORD *)v41;
            *(void *)(v43 + 16) = *((void *)v41 + 2);
            *(_OWORD *)uint64_t v43 = v44;
            uint64_t v45 = ++LODWORD(v118[0]);
            if ((void)v116)
            {
              LODWORD(v107) = 5;
              *((void *)&v107 + 1) = v7;
              int64x2_t v46 = (char *)&v107;
              uint64_t v47 = *((void *)&v117 + 1);
              if (v45 >= DWORD1(v118[0]))
              {
                unint64_t v96 = v45 + 1;
                BOOL v97 = *((void *)&v117 + 1) + 24 * (unint64_t)v45 > (unint64_t)&v107;
                if (*((void *)&v117 + 1) <= (unint64_t)&v107 && v97)
                {
                  long long v101 = (char *)&v107 - *((void *)&v117 + 1);
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v96, 24);
                  uint64_t v47 = *((void *)&v117 + 1);
                  int64x2_t v46 = &v101[*((void *)&v117 + 1)];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117 + 8, (char *)v118 + 8, v96, 24);
                  int64x2_t v46 = (char *)&v107;
                  uint64_t v47 = *((void *)&v117 + 1);
                }
              }
              uint64_t v48 = v47 + 24 * LODWORD(v118[0]);
              long long v49 = *(_OWORD *)v46;
              *(void *)(v48 + 16) = *((void *)v46 + 2);
              *(_OWORD *)uint64_t v48 = v49;
              ++LODWORD(v118[0]);
            }
          }
        }
      }
      uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
      if ((void)v116) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
      }
      if (!v123) {
        return v22;
      }
      unint64_t v50 = (void **)__p;
      if (__p)
      {
        uint64_t v51 = v122;
        unint64_t v52 = __p;
        if (v122 != __p)
        {
          do
            uint64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          unint64_t v52 = __p;
        }
        unint64_t v122 = v50;
        operator delete(v52);
      }
      int v26 = v119;
      if (!v119) {
        goto LABEL_117;
      }
      uint64_t v53 = v120;
      unint64_t v28 = v119;
      if (v120 == v119) {
        goto LABEL_116;
      }
      do
      {
        long long v55 = (void *)*--v53;
        unint64_t v54 = v55;
        void *v53 = 0;
        if (v55) {
          operator delete[](v54);
        }
      }
      while (v53 != v26);
      goto LABEL_115;
    }
  }
  unint64_t v112 = (const void **)"needs at least one tuple element for lowerBound, upperBound and step";
  __int16 v115 = 259;
  mlir::OpState::emitOpError(this, &v112, (uint64_t)&v116);
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
  if ((void)v116) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
  }
  if (!v123) {
    return v22;
  }
  uint64_t v85 = (void **)__p;
  if (__p)
  {
    unint64_t v86 = v122;
    uint64_t v87 = __p;
    if (v122 != __p)
    {
      do
        unint64_t v86 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v86 - 1);
      while (v86 != v85);
      uint64_t v87 = __p;
    }
    unint64_t v122 = v85;
    operator delete(v87);
  }
  int v26 = v119;
  if (!v119) {
    goto LABEL_117;
  }
  unint64_t v88 = v120;
  unint64_t v28 = v119;
  if (v120 != v119)
  {
    do
    {
      long long v90 = (void *)*--v88;
      unint64_t v89 = v90;
      *unint64_t v88 = 0;
      if (v90) {
        operator delete[](v89);
      }
    }
    while (v88 != v26);
LABEL_115:
    unint64_t v28 = v119;
  }
LABEL_116:
  unint64_t v120 = v26;
  operator delete(v28);
LABEL_117:
  unint64_t v78 = (const void **)*((void *)&v117 + 1);
  if (*((_OWORD **)&v117 + 1) != (_OWORD *)((char *)v118 + 8)) {
LABEL_118:
  }
    free(v78);
  return v22;
}

uint64_t verifyAndGetTerminator<mlir::scf::YieldOp>(uint64_t *a1, void *a2, const void **a3, const char *a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if ((void *)*a2 == a2
    || ((v7 = a2[1]) != 0 ? (uint64_t v8 = v7 - 8) : (uint64_t v8 = 0),
        uint64_t v9 = *(mlir::GenericProgramPoint **)(v8 + 32),
        v9 == (mlir::GenericProgramPoint *)(v8 + 32)))
  {
    uint64_t v11 = 0;
  }
  else
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v9);
    uint64_t v11 = v10;
    if (v10
      && *(_UNKNOWN **)(*(void *)(v10 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id)
    {
      return v11;
    }
  }
  __int16 v34 = 261;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  mlir::Operation::emitOpError(a1, &v31, (uint64_t)&v35);
  if (v11)
  {
    uint64_t v12 = mlir::Diagnostic::attachNote(&v36, *(void *)(v11 + 24), 1);
    uint64_t v13 = v12 + 16;
    unint64_t v14 = *(void *)(v12 + 16);
    LODWORD(v31) = 3;
    uint64_t v32 = "terminator here";
    uint64_t v33 = 15;
    uint64_t v15 = *(unsigned int *)(v12 + 24);
    uint64_t v16 = &v31;
    if (v15 >= *(_DWORD *)(v12 + 28))
    {
      unint64_t v28 = v15 + 1;
      BOOL v29 = v14 + 24 * v15 > (unint64_t)&v31;
      if (v14 <= (unint64_t)&v31 && v29)
      {
        uint64_t v30 = (char *)&v31 - v14;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(v12 + 32), v28, 24);
        unint64_t v14 = *(void *)(v12 + 16);
        uint64_t v16 = (const void ***)&v30[v14];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(v12 + 32), v28, 24);
        unint64_t v14 = *(void *)(v12 + 16);
        uint64_t v16 = &v31;
      }
    }
    uint64_t v17 = v14 + 24 * *(unsigned int *)(v12 + 24);
    long long v18 = *(_OWORD *)v16;
    *(void *)(v17 + 16) = v16[2];
    *(_OWORD *)uint64_t v17 = v18;
    ++*(_DWORD *)(v12 + 24);
  }
  if (v35) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  }
  if (v43)
  {
    uint64_t v19 = (void **)__p;
    if (__p)
    {
      uint64_t v20 = v42;
      uint64_t v21 = __p;
      if (v42 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      uint64_t v42 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v39;
    if (v39)
    {
      uint64_t v23 = v40;
      uint64_t v24 = v39;
      if (v40 != v39)
      {
        do
        {
          int v26 = (void *)*--v23;
          uint64_t v25 = v26;
          void *v23 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v23 != v22);
        uint64_t v24 = v39;
      }
      uint64_t v40 = v22;
      operator delete(v24);
    }
    if (v37 != &v38) {
      free(v37);
    }
  }
  return 0;
}

void mlir::Block::getOps<mlir::scf::ReduceOp>(uint64_t a1@<X0>, mlir::GenericProgramPoint **a2@<X8>)
{
  unint64_t v3 = (mlir::GenericProgramPoint *)(a1 + 32);
  int v4 = (mlir::GenericProgramPoint *)(a1 + 32);
  if (*(void *)(a1 + 40) != a1 + 32)
  {
    int v4 = *(mlir::GenericProgramPoint **)(a1 + 40);
    while (1)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v4);
      if (*(_UNKNOWN **)(*(void *)(v5 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ReduceOp,void>::id) {
        break;
      }
      int v4 = (mlir::GenericProgramPoint *)*((void *)v4 + 1);
      if (v4 == v3)
      {
        int v4 = v3;
        break;
      }
    }
  }
  *a2 = v4;
  a2[1] = v3;
  a2[2] = (mlir::GenericProgramPoint *)mlir::detail::op_filter_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::filter;
  a2[3] = (mlir::GenericProgramPoint *)mlir::detail::op_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::unwrap;
  a2[4] = v3;
  a2[5] = v3;
  a2[6] = (mlir::GenericProgramPoint *)mlir::detail::op_filter_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::filter;
  a2[7] = (mlir::GenericProgramPoint *)mlir::detail::op_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::unwrap;
}

uint64_t mlir::scf::ParallelOp::getInitVals(mlir::scf::ParallelOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t v3 = (v2[2] + v2[1] + *v2);
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

uint64_t mlir::InFlightDiagnostic::operator<<<unsigned long &>(uint64_t a1, uint64_t *a2)
{
  if (*(void *)a1)
  {
    uint64_t v3 = a1 + 24;
    unint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *a2;
    int v14 = 5;
    uint64_t v15 = v5;
    uint64_t v6 = *(unsigned int *)(a1 + 32);
    uint64_t v7 = &v14;
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      unint64_t v11 = v6 + 1;
      BOOL v12 = v4 + 24 * v6 > (unint64_t)&v14;
      if (v4 <= (unint64_t)&v14 && v12)
      {
        uint64_t v13 = (char *)&v14 - v4;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        unint64_t v4 = *(void *)(a1 + 24);
        uint64_t v7 = (int *)&v13[v4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        unint64_t v4 = *(void *)(a1 + 24);
        uint64_t v7 = &v14;
      }
    }
    uint64_t v8 = v4 + 24 * *(unsigned int *)(a1 + 32);
    long long v9 = *(_OWORD *)v7;
    *(void *)(v8 + 16) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

uint64_t mlir::scf::ParallelOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  v49[32] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v47 = v49;
  uint64_t v48 = 0x400000000;
  if (!(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, void, void))(*(void *)a1 + 736))(a1, &v47, 1, 0, 0))
  {
    uint64_t v28 = 0;
    BOOL v29 = v47;
    if (v47 == v49) {
      return v28;
    }
    goto LABEL_31;
  }
  uint64_t v44 = v46;
  uint64_t v45 = 0x400000000;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 136))(a1)
    || !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, void))(*(void *)a1 + 688))(a1, &v44, 1, 1, v48))
  {
    goto LABEL_27;
  }
  Indexuint64_t Type = mlir::Builder::getIndexType(v4, v5);
  if (v45)
  {
    uint64_t v7 = IndexType;
    uint64_t v8 = (char *)v44;
    uint64_t v9 = 32 * v45;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, v7, (uint64_t)a2 + 16))
    {
      v8 += 32;
      v9 -= 32;
      if (!v9) {
        goto LABEL_8;
      }
    }
LABEL_27:
    uint64_t v28 = 0;
    goto LABEL_28;
  }
LABEL_8:
  uint64_t v41 = v43;
  uint64_t v42 = 0x400000000;
  v40[8] = 257;
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "to", 2, &v38)&& (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, void))(*(void *)a1 + 688))(a1, &v41, 1, 1, v48))
  {
    uint64_t v11 = mlir::Builder::getIndexType(v4, v10);
    if (!v42)
    {
LABEL_14:
      uint64_t v38 = v40;
      uint64_t v39 = 0x400000000;
      v37[8] = 257;
      if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "step", 4, &v35)&& (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, void))(*(void *)a1 + 688))(a1, &v38, 1, 1, v48))
      {
        uint64_t v16 = mlir::Builder::getIndexType(v4, v15);
        if (v39)
        {
          uint64_t v17 = v16;
          long long v18 = (char *)v38;
          uint64_t v19 = 32 * v39;
          while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v18, v17, (uint64_t)a2 + 16))
          {
            v18 += 32;
            v19 -= 32;
            if (!v19) {
              goto LABEL_20;
            }
          }
          uint64_t v28 = 0;
        }
        else
        {
LABEL_20:
          uint64_t v35 = v37;
          uint64_t v36 = 0x400000000;
          if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "init", 4)&& !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v35, 1, 1, 0xFFFFFFFFLL))
          {
            goto LABEL_45;
          }
          uint64_t v20 = (uint64_t)a2 + 64;
          if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 536))(a1, (uint64_t)a2 + 64)) {
            goto LABEL_45;
          }
          uint64_t v21 = mlir::OperationState::addRegion(a2);
          uint64_t v23 = (void *)v21;
          uint64_t v24 = v47;
          if (v48)
          {
            uint64_t v33 = (void *)v21;
            unint64_t v25 = (unint64_t)v48 << 6;
            int v26 = (uint64_t *)((char *)v47 + 32);
            do
            {
              *int v26 = mlir::Builder::getIndexType(v4, v22);
              v26 += 8;
              v25 -= 64;
            }
            while (v25);
            uint64_t v24 = v47;
            uint64_t v27 = v48;
            uint64_t v23 = v33;
            uint64_t v20 = (uint64_t)a2 + 64;
          }
          else
          {
            uint64_t v27 = 0;
          }
          if ((*(unsigned __int8 (**)(uint64_t, void *, void *, uint64_t, void))(*(void *)a1 + 744))(a1, v23, v24, v27, 0)&& (v34[0] = v45, v34[1] = v42, v34[2] = v39, v34[3] = v36, DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(v4, (uint64_t)v34, 4), mlir::OperationState::addAttribute(a2, (uint64_t)"operandSegmentSizes", 19, DenseI32ArrayAttr), (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, (uint64_t)a2 + 112))&& (uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1), mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v35, v20, v32, (uint64_t)a2 + 16)))
          {
            mlir::impl::ensureRegionTerminator(v23, v4, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::buildTerminator);
            uint64_t v28 = 1;
          }
          else
          {
LABEL_45:
            uint64_t v28 = 0;
          }
          if (v35 != v37) {
            free(v35);
          }
        }
      }
      else
      {
        uint64_t v28 = 0;
      }
      if (v38 != v40) {
        free(v38);
      }
      goto LABEL_36;
    }
    uint64_t v12 = v11;
    uint64_t v13 = (char *)v41;
    uint64_t v14 = 32 * v42;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v13, v12, (uint64_t)a2 + 16))
    {
      v13 += 32;
      v14 -= 32;
      if (!v14) {
        goto LABEL_14;
      }
    }
  }
  uint64_t v28 = 0;
LABEL_36:
  if (v41 != v43) {
    free(v41);
  }
LABEL_28:
  if (v44 != v46) {
    free(v44);
  }
  BOOL v29 = v47;
  if (v47 != v49) {
LABEL_31:
  }
    free(v29);
  return v28;
}

uint64_t mlir::scf::ParallelOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  unint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (_WORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 1uLL)
  {
    *uint64_t v5 = 10272;
    *((void *)v4 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v4, " (", 2uLL);
  }
  uint64_t v6 = *(void *)((((unint64_t)*this
                   + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v6) {
    uint64_t v7 = v6 - 8;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void **)(v7 + 48);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = v9 - (void)v8;
  if (v11)
  {
    uint64_t v12 = (llvm::raw_ostream *)v10;
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *v8);
    if (v11 != 8)
    {
      uint64_t v46 = v11 >> 3;
      uint64_t v47 = v8 + 1;
      uint64_t v48 = 8 * v46 - 8;
      do
      {
        unint64_t v50 = (_WORD *)*((void *)v12 + 4);
        if (*((void *)v12 + 3) - (void)v50 > 1uLL)
        {
          _WORD *v50 = 8236;
          *((void *)v12 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v12, ", ", 2uLL);
        }
        uint64_t v49 = *v47++;
        (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 160))(a2, v49);
        v48 -= 8;
      }
      while (v48);
    }
  }
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v14 = *((void *)v13 + 4);
  if ((unint64_t)(*((void *)v13 + 3) - v14) > 4)
  {
    *(unsigned char *)(v14 + 4) = 40;
    *(_DWORD *)uint64_t v14 = 540876841;
    *((void *)v13 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v13, ") = (", 5uLL);
  }
  unint64_t v15 = *((unsigned int *)*this + 11);
  uint64_t v16 = *((unsigned int *)*this + 4 * ((v15 >> 23) & 1) + 16);
  if ((v15 & 0x800000) != 0) {
    uint64_t v17 = *((void *)*this + 9);
  }
  else {
    uint64_t v17 = 0;
  }
  long long v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t AttrDictionary = ", ";
  uint64_t v77 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v17, 0, v17, v16, (uint64_t)a2, v18, (uint64_t)&AttrDictionary);
  uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v20 = *((void *)v19 + 4);
  if ((unint64_t)(*((void *)v19 + 3) - v20) > 5)
  {
    *(_WORD *)(v20 + 4) = 10272;
    *(_DWORD *)uint64_t v20 = 1869881385;
    *((void *)v19 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v19, ") to (", 6uLL);
  }
  unint64_t v21 = *((unsigned int *)*this + 11);
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v22 = (unsigned int *)((char *)*this + 16 * ((v21 >> 23) & 1) + 64);
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *v22;
  unsigned int v24 = v22[1];
  if ((v21 & 0x800000) != 0) {
    uint64_t v25 = *((void *)*this + 9);
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = v25 + 32 * v23;
  uint64_t v27 = v24 + v23 - v23;
  uint64_t v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t AttrDictionary = ", ";
  uint64_t v77 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v26, 0, v26, v27, (uint64_t)a2, v28, (uint64_t)&AttrDictionary);
  BOOL v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v30 = (void *)*((void *)v29 + 4);
  if (*((void *)v29 + 3) - (void)v30 > 7uLL)
  {
    void *v30 = 0x2820706574732029;
    *((void *)v29 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v29, ") step (", 8uLL);
  }
  unint64_t v31 = *((unsigned int *)*this + 11);
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v32 = (int *)((char *)*this + 16 * ((v31 >> 23) & 1) + 64);
  }
  else {
    uint64_t v32 = 0;
  }
  int v33 = *v32;
  int v34 = v32[1];
  int v35 = v32[2];
  if ((v31 & 0x800000) != 0) {
    uint64_t v36 = *((void *)*this + 9);
  }
  else {
    uint64_t v36 = 0;
  }
  uint64_t v37 = (v34 + v33);
  uint64_t v38 = v36 + 32 * v37;
  uint64_t v39 = (v35 + v37) - v37;
  uint64_t v40 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t AttrDictionary = ", ";
  uint64_t v77 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v38, 0, v38, v39, (uint64_t)a2, v40, (uint64_t)&AttrDictionary);
  uint64_t v41 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v42 = (unsigned char *)*((void *)v41 + 4);
  if (*((unsigned char **)v41 + 3) == v42)
  {
    llvm::raw_ostream::write(v41, ")", 1uLL);
  }
  else
  {
    unsigned char *v42 = 41;
    ++*((void *)v41 + 4);
  }
  unint64_t v43 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v43 = 0;
  }
  if (*(_DWORD *)(v43 + 12))
  {
    uint64_t v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v45 = (_DWORD *)*((void *)v44 + 4);
    if (*((void *)v44 + 3) - (void)v45 > 6uLL)
    {
      *(_DWORD *)((char *)v45 + 3) = 673215593;
      *uint64_t v45 = 1768843552;
      *((void *)v44 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v44, " init (", 7uLL);
    }
    unint64_t v51 = *((unsigned int *)*this + 11);
    if (HIBYTE(*((_DWORD *)*this + 11))) {
      unint64_t v52 = (int *)((char *)*this + 16 * ((v51 >> 23) & 1) + 64);
    }
    else {
      unint64_t v52 = 0;
    }
    int v53 = *v52;
    int v54 = v52[1];
    int v56 = v52[2];
    int v55 = v52[3];
    if ((v51 & 0x800000) != 0) {
      uint64_t v57 = *((void *)*this + 9);
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t v58 = (v54 + v53 + v56);
    uint64_t v59 = v57 + 32 * v58;
    uint64_t v60 = (v55 + v58) - v58;
    uint64_t v61 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t AttrDictionary = ", ";
    uint64_t v77 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v59, 0, v59, v60, (uint64_t)a2, v61, (uint64_t)&AttrDictionary);
    __n128 v62 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int v63 = (unsigned char *)*((void *)v62 + 4);
    if (*((unsigned char **)v62 + 3) == v63)
    {
      llvm::raw_ostream::write(v62, ")", 1uLL);
    }
    else
    {
      *int v63 = 41;
      ++*((void *)v62 + 4);
    }
  }
  uint64_t v64 = *((unsigned int *)*this + 9);
  uint64_t v65 = (uint64_t)*this - 16;
  if (!v64) {
    uint64_t v65 = 0;
  }
  v80[0] = v65;
  v80[1] = v64;
  mlir::OperandRange::getTypes(v80, (uint64_t *)&AttrDictionary);
  if (AttrDictionary != v78 || v77 != v79) {
    mlir::AsmPrinter::printArrowTypeList<mlir::ValueTypeRange<mlir::ResultRange> &>((uint64_t)a2, (uint64_t *)&AttrDictionary);
  }
  uint64_t v66 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v67 = (unsigned char *)*((void *)v66 + 4);
  if ((unint64_t)v67 >= *((void *)v66 + 3))
  {
    llvm::raw_ostream::write(v66, 32);
    uint64_t v68 = *this;
    unint64_t v69 = *((unsigned int *)*this + 11);
    if ((v69 & 0x7FFFFF) != 0) {
      goto LABEL_59;
    }
  }
  else
  {
    *((void *)v66 + 4) = v67 + 1;
    *uint64_t v67 = 32;
    uint64_t v68 = *this;
    unint64_t v69 = *((unsigned int *)*this + 11);
    if ((v69 & 0x7FFFFF) != 0)
    {
LABEL_59:
      unint64_t v70 = (((unint64_t)v68 + 16 * ((v69 >> 23) & 1) + ((v69 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v68 + 10);
      goto LABEL_62;
    }
  }
  unint64_t v70 = 0;
LABEL_62:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, uint64_t, void))(*(void *)a2 + 224))(a2, v70, 0, 1, 0);
  uint64_t v71 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v71);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v71 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  unint64_t AttrDictionary = "operandSegmentSizes";
  uint64_t v77 = 19;
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, const char **, uint64_t))(*(void *)a2 + 192))(a2, Value, v74, &AttrDictionary, 1);
}

void mlir::scf::ParallelOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"scf.parallel", 12, (__int16)v72, a2, 0, 0);
  *(void *)unint64_t v4 = &unk_1EC99C5B8;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ParallelOpSingleOrZeroIterationDimsFolder]";
  unint64_t v73 = 114;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v73;
  }
  uint64_t v11 = &v72[v10];
  unint64_t v12 = v73 - v10;
  if (v73 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v73 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_78;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_79;
    }
    unint64_t v21 = (char *)operator new(8 * v20);
    uint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)uint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v21 = 0;
    uint64_t v22 = (char *)(8 * v17);
    uint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v7[-v27];
      v22 -= v27;
      BOOL v29 = &v21[8 * v17 - 16];
      uint64_t v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)uint64_t v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)BOOL v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      int v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)int v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  uint64_t v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"scf.parallel", 12, (__int16)v72, a2, 0, 0);
  *(void *)uint64_t v38 = &unk_1EC99B5A8;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    uint64_t v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  uint64_t v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::MergeNestedParallelLoops]";
  unint64_t v73 = 97;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = v73;
  }
  uint64_t v45 = &v72[v44];
  unint64_t v46 = v73 - v44;
  if (v73 - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = v73 - v44;
  }
  uint64_t v48 = &v45[v47];
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  uint64_t v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)uint64_t v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  unint64_t v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
LABEL_78:
  }
    abort();
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (!v54)
  {
    int v55 = 0;
    int v56 = (char *)(8 * v51);
    uint64_t v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    uint64_t v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
    goto LABEL_74;
  }
  if (v54 >> 61) {
LABEL_79:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  int v55 = (char *)operator new(8 * v54);
  int v56 = &v55[8 * v51];
  uint64_t v57 = &v55[8 * v54];
  *(void *)int v56 = v38;
  uint64_t v42 = (uint64_t)(v56 + 8);
  uint64_t v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    unint64_t v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    uint64_t v60 = (v59 >> 3) + 1;
    uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    __n128 v62 = &v41[-v61];
    v56 -= v61;
    int v63 = &v55[8 * v51 - 16];
    uint64_t v64 = v41 - 16;
    uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v67 = *((_OWORD *)v64 - 1);
      long long v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)uint64_t v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)int v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    uint64_t v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        uint64_t v68 = *((void *)v41 - 1);
        v41 -= 8;
        *(void *)uint64_t v41 = 0;
        *((void *)v56 - 1) = v68;
        v56 -= 8;
      }
      while (v41 != v50);
    }
    uint64_t v41 = (char *)a1[1];
    unint64_t v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      uint64_t v71 = *((void *)v69 - 1);
      v69 -= 8;
      uint64_t v70 = v71;
      *(void *)unint64_t v69 = 0;
      if (v71) {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
}

uint64_t mlir::scf::ReduceOp::verifyRegions(uint64_t **this)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *this;
  uint64_t v3 = *(void *)((((unint64_t)*this + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8) + 87) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v3) {
    uint64_t v4 = v3 - 8;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(void *)(v4 + 32) == v4 + 32)
  {
    v44[0] = (const void **)"the block inside reduce should not be empty";
    __int16 v45 = 259;
    mlir::OpState::emitOpError(this, v44, (uint64_t)v49);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    }
    if (v58)
    {
      long long v33 = (void **)__p;
      if (__p)
      {
        uint64_t v34 = v57;
        int v35 = __p;
        if (v57 != __p)
        {
          do
            uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          int v35 = __p;
        }
        uint64_t v57 = v33;
        operator delete(v35);
      }
      uint64_t v14 = v54;
      if (!v54) {
        goto LABEL_60;
      }
      uint64_t v36 = v55;
      uint64_t v16 = v54;
      if (v55 == v54) {
        goto LABEL_59;
      }
      do
      {
        uint64_t v38 = (void *)*--v36;
        uint64_t v37 = v38;
        void *v36 = 0;
        if (v38) {
          operator delete[](v37);
        }
      }
      while (v36 != v14);
      goto LABEL_58;
    }
    return v10;
  }
  unint64_t v5 = *(void *)(*(void *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v4 + 48);
  uint64_t v7 = *(void *)(v4 + 56);
  if (((v7 - v6) & 0x7FFFFFFF8) != 0x10) {
    goto LABEL_25;
  }
  if (v7 != v6)
  {
    uint64_t v8 = 8 * ((v7 - v6) >> 3);
    while (v5 == (*(void *)(*(void *)v6 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v6 += 8;
      v8 -= 8;
      if (!v8) {
        goto LABEL_10;
      }
    }
LABEL_25:
    __int16 v45 = 257;
    mlir::OpState::emitOpError(this, v44, (uint64_t)v49);
    if (v49[0])
    {
      int v46 = 3;
      uint64_t v47 = "expects two arguments to reduce block of type ";
      uint64_t v48 = 46;
      uint64_t v19 = &v46;
      unint64_t v20 = (char *)v50;
      if (v51 >= v52)
      {
        unint64_t v40 = v51 + 1;
        if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
        {
          int64_t v42 = (char *)&v46 - (unsigned char *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v40, 24);
          unint64_t v20 = (char *)v50;
          uint64_t v19 = (int *)((char *)v50 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v40, 24);
          uint64_t v19 = &v46;
          unint64_t v20 = (char *)v50;
        }
      }
      unint64_t v21 = &v20[24 * v51];
      long long v22 = *(_OWORD *)v19;
      *((void *)v21 + 2) = *((void *)v19 + 2);
      *(_OWORD *)unint64_t v21 = v22;
      ++v51;
      if (v49[0])
      {
        uint64_t v23 = &v46;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v46, v5);
        unsigned int v24 = (char *)v50;
        if (v51 >= v52)
        {
          unint64_t v41 = v51 + 1;
          if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
          {
            int64_t v43 = (char *)&v46 - (unsigned char *)v50;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v41, 24);
            unsigned int v24 = (char *)v50;
            uint64_t v23 = (int *)((char *)v50 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v41, 24);
            uint64_t v23 = &v46;
            unsigned int v24 = (char *)v50;
          }
        }
        unint64_t v25 = &v24[24 * v51];
        long long v26 = *(_OWORD *)v23;
        *((void *)v25 + 2) = *((void *)v23 + 2);
        *(_OWORD *)unint64_t v25 = v26;
        ++v51;
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    }
    if (v58)
    {
      uint64_t v27 = (void **)__p;
      if (__p)
      {
        uint64_t v28 = v57;
        BOOL v29 = __p;
        if (v57 != __p)
        {
          do
            uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          BOOL v29 = __p;
        }
        uint64_t v57 = v27;
        operator delete(v29);
      }
      uint64_t v14 = v54;
      if (!v54) {
        goto LABEL_60;
      }
      uint64_t v30 = v55;
      uint64_t v16 = v54;
      if (v55 == v54) {
        goto LABEL_59;
      }
      do
      {
        long long v32 = (void *)*--v30;
        uint64_t v31 = v32;
        void *v30 = 0;
        if (v32) {
          operator delete[](v31);
        }
      }
      while (v30 != v14);
      goto LABEL_58;
    }
    return v10;
  }
LABEL_10:
  mlir::Block::getTerminator((mlir::GenericProgramPoint **)v4);
  if (*(_UNKNOWN **)(*(void *)(v9 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ReduceReturnOp,void>::id) {
    return 1;
  }
  v44[0] = (const void **)"the block inside reduce should be terminated with a 'scf.reduce.return' op";
  __int16 v45 = 259;
  mlir::OpState::emitOpError(this, v44, (uint64_t)v49);
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
  if (v49[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
  }
  if (v58)
  {
    uint64_t v11 = (void **)__p;
    if (__p)
    {
      unint64_t v12 = v57;
      uint64_t v13 = __p;
      if (v57 != __p)
      {
        do
          unint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        uint64_t v13 = __p;
      }
      uint64_t v57 = v11;
      operator delete(v13);
    }
    uint64_t v14 = v54;
    if (!v54) {
      goto LABEL_60;
    }
    unint64_t v15 = v55;
    uint64_t v16 = v54;
    if (v55 == v54)
    {
LABEL_59:
      int v55 = v14;
      operator delete(v16);
LABEL_60:
      if (v50 != v53) {
        free(v50);
      }
      return v10;
    }
    do
    {
      unint64_t v18 = (void *)*--v15;
      uint64_t v17 = v18;
      *unint64_t v15 = 0;
      if (v18) {
        operator delete[](v17);
      }
    }
    while (v15 != v14);
LABEL_58:
    uint64_t v16 = v54;
    goto LABEL_59;
  }
  return v10;
}

BOOL mlir::scf::ReduceOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  memset(v7, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v7, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1)) {
    return 0;
  }
  uint64_t v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 544))(a1, &v6)
    || !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v7, v6, (uint64_t)a2 + 16))
  {
    return 0;
  }
  uint64_t v4 = mlir::OperationState::addRegion(a2);
  return (*(unsigned __int8 (**)(uint64_t, uint64_t, void, void, void))(*(void *)a1 + 744))(a1, v4, 0, 0, 0) != 0;
}

uint64_t mlir::scf::ReduceOp::print(mlir::scf::ReduceOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "(", 1uLL);
  }
  else
  {
    *unint64_t v5 = 40;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (_WORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 1uLL)
  {
    _WORD *v7 = 8233;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, ") ", 2uLL);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = *((void *)v8 + 4);
  if ((unint64_t)(*((void *)v8 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 32;
    *(_WORD *)uint64_t v9 = 14880;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
    uint64_t v12 = *(void *)this;
    unint64_t v13 = *(unsigned int *)(*(void *)this + 44);
    if ((v13 & 0x7FFFFF) != 0) {
      goto LABEL_12;
    }
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    unsigned char *v11 = 32;
    uint64_t v12 = *(void *)this;
    unint64_t v13 = *(unsigned int *)(*(void *)this + 44);
    if ((v13 & 0x7FFFFF) != 0)
    {
LABEL_12:
      unint64_t v14 = ((v12 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(v12 + 40);
      goto LABEL_15;
    }
  }
  unint64_t v14 = 0;
LABEL_15:
  unint64_t v15 = *(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 224);

  return v15(a2, v14, 1, 1, 0);
}

uint64_t mlir::scf::ReduceReturnOp::verify(uint64_t **this)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void *)(*(void *)(*(void *)(mlir::Block::getParentOp((mlir::Block *)(*this)[2]) + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v2 == (*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  __int16 v34 = 257;
  mlir::OpState::emitOpError(this, &v33, (uint64_t)v38);
  if (v38[0])
  {
    int v35 = 3;
    uint64_t v36 = "needs to have type ";
    uint64_t v37 = 19;
    uint64_t v3 = &v35;
    uint64_t v4 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v35 && (char *)v39 + 24 * v40 > (char *)&v35)
      {
        int64_t v30 = (char *)&v35 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = (char *)v39;
        uint64_t v3 = (int *)((char *)v39 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v3 = &v35;
        uint64_t v4 = (char *)v39;
      }
    }
    unint64_t v5 = &v4[24 * v40];
    long long v6 = *(_OWORD *)v3;
    *((void *)v5 + 2) = *((void *)v3 + 2);
    *(_OWORD *)unint64_t v5 = v6;
    ++v40;
    if (v38[0])
    {
      uint64_t v7 = &v35;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v35, v2);
      uint64_t v8 = (char *)v39;
      if (v40 >= v41)
      {
        unint64_t v27 = v40 + 1;
        if (v39 <= &v35 && (char *)v39 + 24 * v40 > (char *)&v35)
        {
          int64_t v31 = (char *)&v35 - (unsigned char *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
          uint64_t v8 = (char *)v39;
          uint64_t v7 = (int *)((char *)v39 + v31);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v27, 24);
          uint64_t v7 = &v35;
          uint64_t v8 = (char *)v39;
        }
      }
      uint64_t v9 = &v8[24 * v40];
      long long v10 = *(_OWORD *)v7;
      *((void *)v9 + 2) = *((void *)v7 + 2);
      *(_OWORD *)uint64_t v9 = v10;
      uint64_t v11 = ++v40;
      if (v38[0])
      {
        int v35 = 3;
        uint64_t v36 = " (the type of the enclosing ReduceOp)";
        uint64_t v37 = 37;
        uint64_t v12 = &v35;
        unint64_t v13 = (char *)v39;
        if (v11 >= v41)
        {
          unint64_t v28 = v11 + 1;
          BOOL v29 = (char *)v39 + 24 * v11 > (char *)&v35;
          if (v39 <= &v35 && v29)
          {
            int64_t v32 = (char *)&v35 - (unsigned char *)v39;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
            unint64_t v13 = (char *)v39;
            uint64_t v12 = (int *)((char *)v39 + v32);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
            uint64_t v12 = &v35;
            unint64_t v13 = (char *)v39;
          }
        }
        unint64_t v14 = &v13[24 * v40];
        long long v15 = *(_OWORD *)v12;
        *((void *)v14 + 2) = *((void *)v12 + 2);
        *(_OWORD *)unint64_t v14 = v15;
        ++v40;
      }
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v38);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    uint64_t v17 = (void **)__p;
    if (__p)
    {
      unint64_t v18 = v46;
      uint64_t v19 = __p;
      if (v46 != __p)
      {
        do
          unint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        uint64_t v19 = __p;
      }
      int v46 = v17;
      operator delete(v19);
    }
    unint64_t v20 = v43;
    if (v43)
    {
      unint64_t v21 = v44;
      long long v22 = v43;
      if (v44 != v43)
      {
        do
        {
          unsigned int v24 = (void *)*--v21;
          uint64_t v23 = v24;
          *unint64_t v21 = 0;
          if (v24) {
            operator delete[](v23);
          }
        }
        while (v21 != v20);
        long long v22 = v43;
      }
      unint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

void mlir::scf::WhileOp::build(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(uint64_t, uint64_t, unint64_t, unint64_t, unint64_t), uint64_t a8, void (*a9)(uint64_t, uint64_t, unint64_t, unint64_t, unint64_t), uint64_t a10)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  v54.n128_u64[0] = a5;
  v54.n128_u64[1] = a6;
  mlir::OperationState::addOperands(a2, a5, a6);
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  if (a4 + v17 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v17, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (a4)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(a2 + 64) + 8 * v17;
    do
    {
      *(void *)(v19 + 8 * v18) = mlir::TypeRange::dereference_iterator(a3, v18);
      ++v18;
    }
    while (a4 != v18);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + a4;
  unint64_t v20 = (_OWORD *)(a1 + 16);
  long long v21 = *(_OWORD *)(a1 + 16);
  unsigned int v51 = v53;
  uint64_t v52 = 0x400000000;
  long long v42 = v21;
  if (a6 < 5)
  {
    __n128 v45 = (__n128)(unint64_t)a5;
    if (!a6) {
      goto LABEL_18;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v53, a6, 8);
    __n128 v45 = (__n128)(unint64_t)a5;
  }
  uint64_t v22 = 0;
  do
  {
    uint64_t v43 = mlir::ValueRange::dereference_iterator(&v45, v22);
    uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v43);
    uint64_t v24 = v52;
    if (v52 >= (unint64_t)HIDWORD(v52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v53, v52 + 1, 8);
      uint64_t v24 = v52;
    }
    *((void *)v51 + v24) = Loc;
    LODWORD(v52) = v52 + 1;
    uint64_t v22 = ++v45.n128_u64[1];
  }
  while (v45.n128_u64[0] != a5 || v22 != a6);
LABEL_18:
  uint64_t v26 = mlir::OperationState::addRegion((mlir::OperationState *)a2);
  mlir::ValueRange::getTypes(&v54, &v48);
  unint64_t v28 = v48.n128_u64[1];
  unint64_t v27 = v48.n128_u64[0];
  uint64_t v29 = v49;
  __n128 v45 = v48;
  if (v48.n128_u64[1])
  {
    unint64_t v27 = mlir::ValueRange::offset_base(&v45, v48.n128_i64[1]);
    unint64_t v28 = v45.n128_u64[1];
  }
  mlir::TypeRange::TypeRange(v50, v27, v29 - v28);
  Block = mlir::OpBuilder::createBlock((void *)a1, v26, 0, v50[0], v50[1], (uint64_t)v51, v52);
  if (a7)
  {
    unint64_t v31 = *(void *)a2;
    mlir::ValueRange::ValueRange(v47, *((void *)Block + 6), (uint64_t)(*((void *)Block + 7) - *((void *)Block + 6)) >> 3);
    a7(a8, a1, v31, v47[0], v47[1]);
  }
  v45.n128_u64[0] = (unint64_t)v46;
  v45.n128_u64[1] = 0x400000000;
  unint64_t v32 = *(void *)a2;
  if (a4 < 5)
  {
    if (a4)
    {
      v46[0] = *(void *)a2;
      if (a4 != 1)
      {
        v46[1] = v32;
        if (a4 != 2)
        {
          v46[2] = v32;
          if (a4 != 3) {
            unint64_t v46[3] = v32;
          }
        }
      }
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v46, a4, 8);
    long long v33 = (unint64_t *)(v45.n128_u64[0] + 8 * (a4 & 0xFFFFFFFFFFFFFFFCLL));
    unint64_t v34 = a4 & 3;
    int64x2_t v35 = vdupq_n_s64(v32);
    uint64_t v36 = (int64x2_t *)(v45.n128_u64[0] + 16);
    unint64_t v37 = a4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v36[-1] = v35;
      int64x2_t *v36 = v35;
      v36 += 2;
      v37 -= 4;
    }
    while (v37);
    if (a4 != (a4 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
        *v33++ = v32;
        --v34;
      }
      while (v34);
    }
  }
  v45.n128_u32[2] = a4;
  uint64_t v38 = mlir::OperationState::addRegion((mlir::OperationState *)a2);
  unint64_t v39 = mlir::OpBuilder::createBlock((void *)a1, v38, 0, a3, a4, v45.n128_i64[0], v45.n128_u32[2]);
  if (a9)
  {
    unint64_t v40 = *(void *)a2;
    mlir::ValueRange::ValueRange(v44, *((void *)v39 + 6), (uint64_t)(*((void *)v39 + 7) - *((void *)v39 + 6)) >> 3);
    a9(a10, a1, v40, v44[0], v44[1]);
  }
  if ((void *)v45.n128_u64[0] != v46) {
    free((void *)v45.n128_u64[0]);
  }
  if (v51 != v53) {
    free(v51);
  }
  if ((void)v42)
  {
    *unint64_t v20 = v42;
  }
  else
  {
    *(void *)unint64_t v20 = 0;
    *(void *)(a1 + 24) = 0;
  }
}

void mlir::scf::WhileOp::getSuccessorRegions(uint64_t *a1, void *a2, uint64_t a3)
{
  v43[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  unint64_t v5 = *(unsigned int *)(*a1 + 44);
  if (!a2)
  {
    uint64_t v7 = (void *)(((v4 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v4 + 40));
    if ((void *)*v7 == v7) {
      goto LABEL_28;
    }
    goto LABEL_17;
  }
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (void *)(((v4 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v4 + 40));
    if (v7 + 3 == a2)
    {
      if ((void *)*v7 == v7)
      {
LABEL_28:
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        unsigned int v24 = *(_DWORD *)(a3 + 8);
        if (v24 >= *(_DWORD *)(a3 + 12))
        {
LABEL_29:
          long long v42 = v7;
          goto LABEL_30;
        }
LABEL_21:
        unint64_t v25 = (void *)(*(void *)a3 + 24 * v24);
        *unint64_t v25 = v7;
        long long v21 = v25 + 1;
        goto LABEL_22;
      }
LABEL_17:
      uint64_t v22 = v7[1];
      if (v22) {
        uint64_t v23 = v22 - 8;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v18 = *(void *)(v23 + 48);
      unint64_t v19 = (*(void *)(v23 + 56) - v18) >> 3;
      unsigned int v24 = *(_DWORD *)(a3 + 8);
      if (v24 >= *(_DWORD *)(a3 + 12)) {
        goto LABEL_29;
      }
      goto LABEL_21;
    }
  }
  unint64_t v8 = *(unsigned int *)(v4 + 36);
  if (v8) {
    uint64_t v9 = v4 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned int v10 = *(_DWORD *)(a3 + 8);
  if (v10 >= *(_DWORD *)(a3 + 12))
  {
    long long v42 = 0;
    unint64_t v31 = (char *)&v42;
    mlir::ValueRange::ValueRange(v43, v9, v8);
    uint64_t v32 = *(unsigned int *)(a3 + 8);
    unint64_t v33 = *(void *)a3;
    if (v32 >= *(_DWORD *)(a3 + 12))
    {
      unint64_t v38 = v32 + 1;
      BOOL v39 = v33 + 24 * v32 > (unint64_t)&v42;
      if (v33 <= (unint64_t)&v42 && v39)
      {
        unsigned int v41 = (char *)&v43[-1] - v33;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v38, 24);
        unint64_t v33 = *(void *)a3;
        unint64_t v31 = &v41[*(void *)a3];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v38, 24);
        unint64_t v33 = *(void *)a3;
        unint64_t v31 = (char *)&v42;
      }
    }
    uint64_t v34 = v33 + 24 * *(unsigned int *)(a3 + 8);
    long long v35 = *(_OWORD *)v31;
    *(void *)(v34 + 16) = *((void *)v31 + 2);
    *(_OWORD *)uint64_t v34 = v35;
  }
  else
  {
    uint64_t v11 = (void *)(*(void *)a3 + 24 * v10);
    void *v11 = 0;
    mlir::ValueRange::ValueRange(v11 + 1, v9, v8);
  }
  unsigned int v12 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v12;
  unint64_t v13 = *(unsigned int *)(*a1 + 44);
  if ((v13 & 0x7FFFFF) != 0)
  {
    unint64_t v14 = ((*a1 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(*a1 + 40);
    uint64_t v15 = v14 + 24;
    if (*(void *)(v14 + 24) != v14 + 24) {
      goto LABEL_11;
    }
LABEL_25:
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    if (v12 < *(_DWORD *)(a3 + 12))
    {
LABEL_15:
      unint64_t v20 = (uint64_t *)(*(void *)a3 + 24 * v12);
      *unint64_t v20 = v15;
      long long v21 = (unint64_t *)(v20 + 1);
LABEL_22:
      mlir::ValueRange::ValueRange(v21, v18, v19);
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  unint64_t v14 = 0;
  uint64_t v15 = 24;
  if (MEMORY[0x18] == 24) {
    goto LABEL_25;
  }
LABEL_11:
  uint64_t v16 = *(void *)(v14 + 32);
  if (v16) {
    uint64_t v17 = v16 - 8;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void *)(v17 + 48);
  unint64_t v19 = (*(void *)(v17 + 56) - v18) >> 3;
  if (v12 < *(_DWORD *)(a3 + 12)) {
    goto LABEL_15;
  }
LABEL_26:
  long long v42 = (void *)v15;
LABEL_30:
  uint64_t v26 = (char *)&v42;
  mlir::ValueRange::ValueRange(v43, v18, v19);
  uint64_t v27 = *(unsigned int *)(a3 + 8);
  unint64_t v28 = *(void *)a3;
  if (v27 >= *(_DWORD *)(a3 + 12))
  {
    unint64_t v36 = v27 + 1;
    BOOL v37 = v28 + 24 * v27 > (unint64_t)&v42;
    if (v28 <= (unint64_t)&v42 && v37)
    {
      unint64_t v40 = (char *)&v43[-1] - v28;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v36, 24);
      unint64_t v28 = *(void *)a3;
      uint64_t v26 = &v40[*(void *)a3];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v36, 24);
      unint64_t v28 = *(void *)a3;
      uint64_t v26 = (char *)&v42;
    }
  }
  uint64_t v29 = v28 + 24 * *(unsigned int *)(a3 + 8);
  long long v30 = *(_OWORD *)v26;
  *(void *)(v29 + 16) = *((void *)v26 + 2);
  *(_OWORD *)uint64_t v29 = v30;
LABEL_23:
  ++*(_DWORD *)(a3 + 8);
}

uint64_t mlir::scf::WhileOp::parse(uint64_t a1, mlir::OperationState *this)
{
  v98[32] = *MEMORY[0x1E4F143B8];
  unint64_t v96 = v98;
  uint64_t v97 = 0x400000000;
  unint64_t v93 = v95;
  uint64_t v94 = 0x400000000;
  uint64_t v4 = mlir::OperationState::addRegion(this);
  uint64_t v5 = mlir::OperationState::addRegion(this);
  unsigned __int16 v6 = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)a1 + 792))(a1, &v96, &v93);
  BOOL v7 = v6 >= 0x100u && v6 == 0;
  if (v7
    || (uint64_t v79 = 0,
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        !mlir::AsmParser::parseColonType<mlir::FunctionType>(a1, &v79)))
  {
LABEL_53:
    uint64_t v51 = 0;
    goto LABEL_54;
  }
  uint64_t Results = (const void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v79);
  uint64_t v11 = v10;
  size_t v12 = 8 * v10;
  uint64_t v13 = *((unsigned int *)this + 18);
  unint64_t v14 = v13 + ((8 * v10) >> 3);
  if (v14 > *((unsigned int *)this + 19))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 64, (char *)this + 80, v14, 8);
    LODWORD(v13) = *((_DWORD *)this + 18);
  }
  if (v11)
  {
    memcpy((void *)(*((void *)this + 8) + 8 * v13), Results, v12);
    LODWORD(v13) = *((_DWORD *)this + 18);
  }
  *((_DWORD *)this + 18) = v13 + (v12 >> 3);
  int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v79);
  if (v94 == Kind)
  {
    v83[0] = mlir::FunctionType::getInputs((mlir::FunctionType *)&v79);
    v83[1] = v16;
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,3u> &,llvm::ArrayRef<mlir::Type>>(a1, (uint64_t *)&v93, v83, v17, (uint64_t)this + 16))
    {
      if (v97)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 8 * v97;
        do
        {
          uint64_t Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v79);
          *((void *)v96 + v18 + 4) = *(void *)(Inputs + v18);
          v18 += 8;
        }
        while (v19 != v18);
        uint64_t v21 = v97;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t, void *, uint64_t, void))(*(void *)a1 + 744))(a1, v4, v96, v21, 0))
      {
        LOWORD(v85) = 257;
        if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "do", 2, v83))
        {
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t, void, void, void))(*(void *)a1 + 744))(a1, v5, 0, 0, 0))
          {
            uint64_t v51 = (*(unsigned __int8 (**)(uint64_t, char *))(*(void *)a1 + 464))(a1, (char *)this + 112) != 0;
            goto LABEL_54;
          }
        }
      }
    }
    goto LABEL_53;
  }
  __int16 v78 = 257;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, char *))(*(void *)a1 + 24))(v83, a1, v8, v77);
  if (v83[0])
  {
    int v80 = 3;
    uint64_t v81 = "expected as many input types as operands ";
    uint64_t v82 = 41;
    uint64_t v22 = &v80;
    uint64_t v23 = (char *)v84;
    if (v85 >= v86)
    {
      unint64_t v61 = v85 + 1;
      if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
      {
        int64_t v71 = (char *)&v80 - (unsigned char *)v84;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
        uint64_t v23 = (char *)v84;
        uint64_t v22 = (int *)((char *)v84 + v71);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
        uint64_t v22 = &v80;
        uint64_t v23 = (char *)v84;
      }
    }
    unsigned int v24 = &v23[24 * v85];
    long long v25 = *(_OWORD *)v22;
    *((void *)v24 + 2) = *((void *)v22 + 2);
    *(_OWORD *)unsigned int v24 = v25;
    uint64_t v26 = ++v85;
    if (v83[0])
    {
      int v80 = 3;
      uint64_t v81 = "(expected ";
      uint64_t v82 = 10;
      uint64_t v27 = &v80;
      unint64_t v28 = (char *)v84;
      if (v26 >= v86)
      {
        unint64_t v63 = v26 + 1;
        BOOL v64 = (char *)v84 + 24 * v26 > (char *)&v80;
        if (v84 <= &v80 && v64)
        {
          int64_t v73 = (char *)&v80 - (unsigned char *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v63, 24);
          unint64_t v28 = (char *)v84;
          uint64_t v27 = (int *)((char *)v84 + v73);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v63, 24);
          uint64_t v27 = &v80;
          unint64_t v28 = (char *)v84;
        }
      }
      uint64_t v29 = &v28[24 * v85];
      long long v30 = *(_OWORD *)v27;
      *((void *)v29 + 2) = *((void *)v27 + 2);
      *(_OWORD *)uint64_t v29 = v30;
      uint64_t v31 = ++v85;
      if (v83[0])
      {
        int v80 = 5;
        uint64_t v81 = (const char *)v94;
        uint64_t v32 = &v80;
        unint64_t v33 = (char *)v84;
        if (v31 >= v86)
        {
          unint64_t v67 = v31 + 1;
          BOOL v68 = (char *)v84 + 24 * v31 > (char *)&v80;
          if (v84 <= &v80 && v68)
          {
            int64_t v75 = (char *)&v80 - (unsigned char *)v84;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v67, 24);
            unint64_t v33 = (char *)v84;
            uint64_t v32 = (int *)((char *)v84 + v75);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v67, 24);
            uint64_t v32 = &v80;
            unint64_t v33 = (char *)v84;
          }
        }
        uint64_t v34 = &v33[24 * v85];
        long long v35 = *(_OWORD *)v32;
        *((void *)v34 + 2) = *((void *)v32 + 2);
        *(_OWORD *)uint64_t v34 = v35;
        uint64_t v36 = ++v85;
        if (v83[0])
        {
          int v80 = 3;
          uint64_t v81 = " got ";
          uint64_t v82 = 5;
          BOOL v37 = &v80;
          unint64_t v38 = (char *)v84;
          if (v36 >= v86)
          {
            unint64_t v69 = v36 + 1;
            BOOL v70 = (char *)v84 + 24 * v36 > (char *)&v80;
            if (v84 <= &v80 && v70)
            {
              int64_t v76 = (char *)&v80 - (unsigned char *)v84;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v69, 24);
              unint64_t v38 = (char *)v84;
              BOOL v37 = (int *)((char *)v84 + v76);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v69, 24);
              BOOL v37 = &v80;
              unint64_t v38 = (char *)v84;
            }
          }
          BOOL v39 = &v38[24 * v85];
          long long v40 = *(_OWORD *)v37;
          *((void *)v39 + 2) = *((void *)v37 + 2);
          *(_OWORD *)BOOL v39 = v40;
          ++v85;
        }
      }
    }
  }
  unsigned int v41 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v79);
  if (v83[0])
  {
    int v80 = 5;
    uint64_t v81 = (const char *)v41;
    long long v42 = &v80;
    uint64_t v43 = (char *)v84;
    if (v85 >= v86)
    {
      unint64_t v62 = v85 + 1;
      if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
      {
        int64_t v72 = (char *)&v80 - (unsigned char *)v84;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
        uint64_t v43 = (char *)v84;
        long long v42 = (int *)((char *)v84 + v72);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
        long long v42 = &v80;
        uint64_t v43 = (char *)v84;
      }
    }
    unint64_t v44 = &v43[24 * v85];
    long long v45 = *(_OWORD *)v42;
    *((void *)v44 + 2) = *((void *)v42 + 2);
    *(_OWORD *)unint64_t v44 = v45;
    uint64_t v46 = ++v85;
    if (v83[0])
    {
      int v80 = 3;
      uint64_t v81 = ")";
      uint64_t v82 = 1;
      char v47 = &v80;
      __n128 v48 = (char *)v84;
      if (v46 >= v86)
      {
        unint64_t v65 = v46 + 1;
        BOOL v66 = (char *)v84 + 24 * v46 > (char *)&v80;
        if (v84 <= &v80 && v66)
        {
          int64_t v74 = (char *)&v80 - (unsigned char *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v65, 24);
          __n128 v48 = (char *)v84;
          char v47 = (int *)((char *)v84 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v65, 24);
          char v47 = &v80;
          __n128 v48 = (char *)v84;
        }
      }
      uint64_t v49 = &v48[24 * v85];
      long long v50 = *(_OWORD *)v47;
      *((void *)v49 + 2) = *((void *)v47 + 2);
      *(_OWORD *)uint64_t v49 = v50;
      ++v85;
    }
  }
  uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v83);
  if (v83[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v83);
  }
  if (v92)
  {
    uint64_t v52 = (void **)__p;
    if (__p)
    {
      uint64_t v53 = v91;
      __n128 v54 = __p;
      if (v91 != __p)
      {
        do
          uint64_t v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
        while (v53 != v52);
        __n128 v54 = __p;
      }
      uint64_t v91 = v52;
      operator delete(v54);
    }
    uint64_t v55 = v88;
    if (v88)
    {
      int v56 = v89;
      uint64_t v57 = v88;
      if (v89 != v88)
      {
        do
        {
          uint64_t v59 = (void *)*--v56;
          char v58 = v59;
          *int v56 = 0;
          if (v59) {
            operator delete[](v58);
          }
        }
        while (v56 != v55);
        uint64_t v57 = v88;
      }
      unint64_t v89 = v55;
      operator delete(v57);
    }
    if (v84 != v87) {
      free(v84);
    }
  }
LABEL_54:
  if (v93 != v95) {
    free(v93);
  }
  if (v96 != v98) {
    free(v96);
  }
  return v51;
}

uint64_t mlir::AsmParser::parseColonType<mlir::FunctionType>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 544))(a1, &v18)) {
    return 0;
  }
  uint64_t v5 = v18;
  if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id) {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  uint64_t v16 = "invalid kind of type specified";
  __int16 v17 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v19, a1, v4, &v16);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  }
  if (v26)
  {
    uint64_t v8 = (void **)__p;
    if (__p)
    {
      uint64_t v9 = v25;
      uint64_t v10 = __p;
      if (v25 != __p)
      {
        do
          uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        uint64_t v10 = __p;
      }
      long long v25 = v8;
      operator delete(v10);
    }
    uint64_t v11 = v22;
    if (v22)
    {
      size_t v12 = v23;
      uint64_t v13 = v22;
      if (v23 != v22)
      {
        do
        {
          uint64_t v15 = (void *)*--v12;
          unint64_t v14 = v15;
          *size_t v12 = 0;
          if (v15) {
            operator delete[](v14);
          }
        }
        while (v12 != v11);
        uint64_t v13 = v22;
      }
      uint64_t v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v6;
}

uint64_t mlir::scf::WhileOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v38[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *this;
  unint64_t v5 = *((unsigned int *)*this + 11);
  uint64_t v6 = *(void *)((((unint64_t)*this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v6) {
    uint64_t v7 = v6 - 8;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void **)(v7 + 48);
  uint64_t v9 = (uint64_t)(*(void *)(v7 + 56) - (void)v8) >> 3;
  if ((v5 & 0x800000) != 0)
  {
    unint64_t v10 = *((unsigned int *)v4 + 17);
    uint64_t v11 = *((void *)v4 + 9);
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v10 = 0;
  }
  mlir::ValueRange::ValueRange(v38, v11, v10);
  printInitializationList(a2, v8, v9, v38[0], v38[1], " ", 1uLL);
  size_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = *((void *)v12 + 4);
  if ((unint64_t)(*((void *)v12 + 3) - v13) > 2)
  {
    *(unsigned char *)(v13 + 2) = 32;
    *(_WORD *)uint64_t v13 = 14880;
    *((void *)v12 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v12, " : ", 3uLL);
  }
  unint64_t v14 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v15 = *((unsigned int *)v14 + 17);
    uint64_t v16 = *((void *)v14 + 9);
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  v36[0] = v16;
  v36[1] = v15;
  mlir::OperandRange::getTypes(v36, v37);
  uint64_t v17 = *((unsigned int *)*this + 9);
  uint64_t v18 = (uint64_t)*this - 16;
  if (!v17) {
    uint64_t v18 = 0;
  }
  v34[0] = v18;
  v34[1] = v17;
  mlir::OperandRange::getTypes(v34, v35);
  mlir::AsmPrinter::printFunctionalType<mlir::ValueTypeRange<mlir::OperandRange>,mlir::ValueTypeRange<mlir::ResultRange>>((uint64_t)a2, v37, v35);
  uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v20 = (unsigned char *)*((void *)v19 + 4);
  if ((unint64_t)v20 >= *((void *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 32);
    uint64_t v21 = *this;
    unint64_t v22 = *((unsigned int *)*this + 11);
    if ((v22 & 0x7FFFFF) != 0) {
      goto LABEL_15;
    }
  }
  else
  {
    *((void *)v19 + 4) = v20 + 1;
    *unint64_t v20 = 32;
    uint64_t v21 = *this;
    unint64_t v22 = *((unsigned int *)*this + 11);
    if ((v22 & 0x7FFFFF) != 0)
    {
LABEL_15:
      unint64_t v23 = (((unint64_t)v21 + 16 * ((v22 >> 23) & 1) + ((v22 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v21 + 10);
      goto LABEL_18;
    }
  }
  unint64_t v23 = 0;
LABEL_18:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, uint64_t, void))(*(void *)a2 + 224))(a2, v23, 0, 1, 0);
  unsigned int v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v25 = (_DWORD *)*((void *)v24 + 4);
  if (*((void *)v24 + 3) - (void)v25 > 3uLL)
  {
    *long long v25 = 544171040;
    *((void *)v24 + 4) += 4;
    char v26 = *this;
    unint64_t v27 = *((unsigned int *)*this + 11);
    if ((v27 & 0x7FFFFF) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    llvm::raw_ostream::write(v24, " do ", 4uLL);
    char v26 = *this;
    unint64_t v27 = *((unsigned int *)*this + 11);
    if ((v27 & 0x7FFFFF) != 0)
    {
LABEL_20:
      unint64_t v28 = (((unint64_t)v26 + 16 * ((v27 >> 23) & 1) + ((v27 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v26 + 10);
      goto LABEL_23;
    }
  }
  unint64_t v28 = 0;
LABEL_23:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 224))(a2, v28 + 24, 1, 1, 0);
  uint64_t v29 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v37[0] = mlir::Operation::getAttrDictionary(v29);
    long long v30 = (mlir::ArrayAttr *)v37;
  }
  else
  {
    long long v30 = (mlir::Operation *)((char *)v29 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v30);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 200))(a2, Value, v32, 0, 0);
}

BOOL mlir::scf::WhileOp::verify(mlir::scf::WhileOp *this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(unsigned int *)(*(void *)this + 44);
  if ((v3 & 0x7FFFFF) != 0)
  {
    uint64_t v4 = (void *)(((v2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v2 + 40));
    if ((void *)*v4 == v4) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (!MEMORY[0])
    {
LABEL_13:
      uint64_t v9 = 0;
      goto LABEL_14;
    }
  }
  uint64_t v5 = v4[1];
  if (v5) {
    uint64_t v6 = v5 - 8;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(mlir::GenericProgramPoint **)(v6 + 32);
  if (v7 == (mlir::GenericProgramPoint *)(v6 + 32)) {
    goto LABEL_13;
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v7);
  uint64_t v9 = v8;
  if (v8
    && *(_UNKNOWN **)(*(void *)(v8 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ConditionOp,void>::id)
  {
    uint64_t v10 = *(void *)this;
    unint64_t v11 = *(unsigned int *)(*(void *)this + 44);
    if ((v11 & 0x7FFFFF) != 0) {
      unint64_t v12 = ((v10 + 16 * ((v11 >> 23) & 1) + ((v11 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
    }
          + 32 * *(unsigned int *)(v10 + 40);
    else {
      unint64_t v12 = 0;
    }
    return verifyAndGetTerminator<mlir::scf::YieldOp>((uint64_t *)v10, (void *)(v12 + 24), (const void **)"expects the 'after' region to terminate with 'scf.yield'", (const char *)0x38) != 0;
  }
LABEL_14:
  __int16 v35 = 261;
  uint64_t v32 = (const void **)"expects the 'before' region to terminate with 'scf.condition'";
  uint64_t v33 = 61;
  mlir::Operation::emitOpError((uint64_t *)v2, &v32, (uint64_t)&v36);
  if (v9)
  {
    uint64_t v13 = mlir::Diagnostic::attachNote(&v37, *(void *)(v9 + 24), 1);
    uint64_t v14 = v13 + 16;
    unint64_t v15 = *(void *)(v13 + 16);
    LODWORD(v32) = 3;
    uint64_t v33 = (uint64_t)"terminator here";
    uint64_t v34 = 15;
    uint64_t v16 = *(unsigned int *)(v13 + 24);
    uint64_t v17 = &v32;
    if (v16 >= *(_DWORD *)(v13 + 28))
    {
      unint64_t v29 = v16 + 1;
      BOOL v30 = v15 + 24 * v16 > (unint64_t)&v32;
      if (v15 <= (unint64_t)&v32 && v30)
      {
        uint64_t v31 = (char *)&v32 - v15;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v13 + 32), v29, 24);
        unint64_t v15 = *(void *)(v13 + 16);
        uint64_t v17 = (const void ***)&v31[v15];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v13 + 32), v29, 24);
        unint64_t v15 = *(void *)(v13 + 16);
        uint64_t v17 = &v32;
      }
    }
    uint64_t v18 = v15 + 24 * *(unsigned int *)(v13 + 24);
    long long v19 = *(_OWORD *)v17;
    *(void *)(v18 + 16) = v17[2];
    *(_OWORD *)uint64_t v18 = v19;
    ++*(_DWORD *)(v13 + 24);
  }
  if (v36) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  }
  if (v44)
  {
    unint64_t v20 = (void **)__p;
    if (__p)
    {
      uint64_t v21 = v43;
      unint64_t v22 = __p;
      if (v43 != __p)
      {
        do
          uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        unint64_t v22 = __p;
      }
      uint64_t v43 = v20;
      operator delete(v22);
    }
    unint64_t v23 = v40;
    if (v40)
    {
      unsigned int v24 = v41;
      long long v25 = v40;
      if (v41 != v40)
      {
        do
        {
          unint64_t v27 = (void *)*--v24;
          char v26 = v27;
          void *v24 = 0;
          if (v27) {
            operator delete[](v26);
          }
        }
        while (v24 != v23);
        long long v25 = v40;
      }
      unsigned int v41 = v23;
      operator delete(v25);
    }
    if (v38 != &v39) {
      free(v38);
    }
  }
  return 0;
}

void mlir::scf::WhileOp::getCanonicalizationPatterns(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(void *)uint64_t v4 = &unk_1EC99C498;
  if (*((void *)v4 + 9))
  {
    unint64_t v5 = v4[22];
    if (v5 <= v4[23]) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    uint64_t v7 = (char *)a1[2];
    unint64_t v6 = a1[3];
    if ((unint64_t)v7 < v6) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RemoveLoopInvariantArgsFromBeforeBlock]";
  unint64_t v243 = 111;
  unint64_t v9 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v243;
  }
  unint64_t v11 = &v242[v10];
  unint64_t v12 = v243 - v10;
  if (v243 - v10 >= 0x12) {
    uint64_t v13 = 18;
  }
  else {
    uint64_t v13 = v243 - v10;
  }
  uint64_t v14 = &v11[v13];
  unint64_t v15 = v12 - v13;
  if (v15 >= v15 - 1) {
    --v15;
  }
  *((void *)v4 + 8) = v14;
  *((void *)v4 + 9) = v15;
  unint64_t v5 = v4[22];
  if (v5 > v4[23]) {
    goto LABEL_14;
  }
LABEL_3:
  v4[22] = v5;
  uint64_t v7 = (char *)a1[2];
  unint64_t v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  uint64_t v16 = (char *)a1[1];
  uint64_t v17 = (v7 - v16) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v19 = v6 - (void)v16;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      goto LABEL_269;
    }
    uint64_t v21 = (char *)operator new(8 * v20);
    unint64_t v22 = &v21[8 * v17];
    unint64_t v23 = &v21[8 * v20];
    *(void *)unint64_t v22 = v4;
    uint64_t v8 = (uint64_t)(v22 + 8);
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v22 = (char *)(8 * v17);
    unint64_t v23 = 0;
    *(void *)(8 * v17) = v4;
    uint64_t v8 = 8 * v17 + 8;
    unsigned int v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      unint64_t v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_272;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v28 = &v7[-v27];
      v22 -= v27;
      unint64_t v29 = &v21[8 * v17 - 16];
      BOOL v30 = v7 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *((_OWORD *)v30 - 1);
        long long v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)BOOL v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)unint64_t v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_272:
        do
        {
          uint64_t v34 = *((void *)v7 - 1);
          v7 -= 8;
          *(void *)uint64_t v7 = 0;
          *((void *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      uint64_t v7 = (char *)a1[1];
      __int16 v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        uint64_t v36 = v37;
        *(void *)__int16 v35 = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7) {
    operator delete(v7);
  }
LABEL_39:
  a1[2] = v8;
  unint64_t v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(void *)unint64_t v38 = &unk_1EC99C1E0;
  if (*((void *)v38 + 9))
  {
    unint64_t v39 = v38[22];
    if (v39 <= v38[23]) {
      goto LABEL_41;
    }
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    unsigned int v41 = (char *)a1[2];
    unint64_t v40 = a1[3];
    if ((unint64_t)v41 < v40) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
  uint64_t v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::RemoveLoopInvariantValueYielded]";
  unint64_t v243 = 104;
  unint64_t v43 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v43) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = v243;
  }
  uint64_t v45 = &v242[v44];
  unint64_t v46 = v243 - v44;
  if (v243 - v44 >= 0x12) {
    uint64_t v47 = 18;
  }
  else {
    uint64_t v47 = v243 - v44;
  }
  __n128 v48 = &v45[v47];
  unint64_t v49 = v46 - v47;
  if (v49 >= v49 - 1) {
    --v49;
  }
  *((void *)v38 + 8) = v48;
  *((void *)v38 + 9) = v49;
  unint64_t v39 = v38[22];
  if (v39 > v38[23]) {
    goto LABEL_52;
  }
LABEL_41:
  v38[22] = v39;
  unsigned int v41 = (char *)a1[2];
  unint64_t v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(void *)unsigned int v41 = v38;
    uint64_t v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  long long v50 = (char *)a1[1];
  uint64_t v51 = (v41 - v50) >> 3;
  unint64_t v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v53 = v40 - (void)v50;
  if (v53 >> 2 > v52) {
    unint64_t v52 = v53 >> 2;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v52;
  }
  if (v54)
  {
    if (v54 >> 61) {
      goto LABEL_269;
    }
    uint64_t v55 = (char *)operator new(8 * v54);
    int v56 = &v55[8 * v51];
    uint64_t v57 = &v55[8 * v54];
    *(void *)int v56 = v38;
    uint64_t v42 = (uint64_t)(v56 + 8);
    char v58 = (char *)(v41 - v50);
    if (v41 != v50) {
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v55 = 0;
    int v56 = (char *)(8 * v51);
    uint64_t v57 = 0;
    *(void *)(8 * v51) = v38;
    uint64_t v42 = 8 * v51 + 8;
    char v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      unint64_t v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_273;
      }
      uint64_t v60 = (v59 >> 3) + 1;
      uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v62 = &v41[-v61];
      v56 -= v61;
      unint64_t v63 = &v55[8 * v51 - 16];
      BOOL v64 = v41 - 16;
      uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v67 = *((_OWORD *)v64 - 1);
        long long v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)BOOL v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)unint64_t v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      unsigned int v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_273:
        do
        {
          uint64_t v68 = *((void *)v41 - 1);
          v41 -= 8;
          *(void *)unsigned int v41 = 0;
          *((void *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      unsigned int v41 = (char *)a1[1];
      unint64_t v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        uint64_t v71 = *((void *)v69 - 1);
        v69 -= 8;
        uint64_t v70 = v71;
        *(void *)unint64_t v69 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41) {
    operator delete(v41);
  }
LABEL_77:
  a1[2] = v42;
  int64_t v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(void *)int64_t v72 = &unk_1EC99A2F0;
  if (*((void *)v72 + 9))
  {
    unint64_t v73 = v72[22];
    if (v73 <= v72[23]) {
      goto LABEL_79;
    }
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    int64_t v75 = (char *)a1[2];
    unint64_t v74 = a1[3];
    if ((unint64_t)v75 < v74) {
      goto LABEL_80;
    }
    goto LABEL_91;
  }
  uint64_t v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::WhileConditionTruth]";
  unint64_t v243 = 92;
  unint64_t v77 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v77) {
    unint64_t v78 = v77;
  }
  else {
    unint64_t v78 = v243;
  }
  uint64_t v79 = &v242[v78];
  unint64_t v80 = v243 - v78;
  if (v243 - v78 >= 0x12) {
    uint64_t v81 = 18;
  }
  else {
    uint64_t v81 = v243 - v78;
  }
  uint64_t v82 = &v79[v81];
  unint64_t v83 = v80 - v81;
  if (v83 >= v83 - 1) {
    --v83;
  }
  *((void *)v72 + 8) = v82;
  *((void *)v72 + 9) = v83;
  unint64_t v73 = v72[22];
  if (v73 > v72[23]) {
    goto LABEL_90;
  }
LABEL_79:
  v72[22] = v73;
  int64_t v75 = (char *)a1[2];
  unint64_t v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(void *)int64_t v75 = v72;
    uint64_t v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  uint64_t v84 = (char *)a1[1];
  uint64_t v85 = (v75 - v84) >> 3;
  unint64_t v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v87 = v74 - (void)v84;
  if (v87 >> 2 > v86) {
    unint64_t v86 = v87 >> 2;
  }
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v88 = v86;
  }
  if (v88)
  {
    if (v88 >> 61) {
      goto LABEL_269;
    }
    unint64_t v89 = (char *)operator new(8 * v88);
    long long v90 = &v89[8 * v85];
    uint64_t v91 = &v89[8 * v88];
    *(void *)long long v90 = v72;
    uint64_t v76 = (uint64_t)(v90 + 8);
    char v92 = (char *)(v75 - v84);
    if (v75 != v84) {
      goto LABEL_100;
    }
  }
  else
  {
    unint64_t v89 = 0;
    long long v90 = (char *)(8 * v85);
    uint64_t v91 = 0;
    *(void *)(8 * v85) = v72;
    uint64_t v76 = 8 * v85 + 8;
    char v92 = (char *)(v75 - v84);
    if (v75 != v84)
    {
LABEL_100:
      unint64_t v93 = (unint64_t)(v92 - 8);
      if (v93 < 0x78
        || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
      {
        goto LABEL_274;
      }
      uint64_t v94 = (v93 >> 3) + 1;
      uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v96 = &v75[-v95];
      v90 -= v95;
      uint64_t v97 = &v89[8 * v85 - 16];
      uint64_t v98 = v75 - 16;
      uint64_t v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v101 = *((_OWORD *)v98 - 1);
        long long v100 = *(_OWORD *)v98;
        *((_OWORD *)v98 - 1) = 0uLL;
        *(_OWORD *)uint64_t v98 = 0uLL;
        *((_OWORD *)v97 - 1) = v101;
        *(_OWORD *)uint64_t v97 = v100;
        v97 -= 32;
        v98 -= 32;
        v99 -= 4;
      }
      while (v99);
      int64_t v75 = v96;
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_274:
        do
        {
          uint64_t v102 = *((void *)v75 - 1);
          v75 -= 8;
          *(void *)int64_t v75 = 0;
          *((void *)v90 - 1) = v102;
          v90 -= 8;
        }
        while (v75 != v84);
      }
      int64_t v75 = (char *)a1[1];
      uint64_t v103 = (char *)a1[2];
      a1[1] = v90;
      a1[2] = v76;
      a1[3] = v91;
      while (v103 != v75)
      {
        uint64_t v105 = *((void *)v103 - 1);
        v103 -= 8;
        uint64_t v104 = v105;
        *(void *)uint64_t v103 = 0;
        if (v105) {
          (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
        }
      }
      goto LABEL_113;
    }
  }
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75) {
    operator delete(v75);
  }
LABEL_115:
  a1[2] = v76;
  uint64_t v106 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v106 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(void *)uint64_t v106 = &unk_1EC997970;
  if (*((void *)v106 + 9))
  {
    unint64_t v107 = v106[22];
    if (v107 <= v106[23]) {
      goto LABEL_117;
    }
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 20), v106 + 24, v107, 16);
    v106[22] = v106[22];
    __int16 v109 = (char *)a1[2];
    unint64_t v108 = a1[3];
    if ((unint64_t)v109 < v108) {
      goto LABEL_118;
    }
    goto LABEL_129;
  }
  uint64_t v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::WhileCmpCond]";
  unint64_t v243 = 85;
  unint64_t v111 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v111) {
    unint64_t v112 = v111;
  }
  else {
    unint64_t v112 = v243;
  }
  uint64_t v113 = &v242[v112];
  unint64_t v114 = v243 - v112;
  if (v243 - v112 >= 0x12) {
    uint64_t v115 = 18;
  }
  else {
    uint64_t v115 = v243 - v112;
  }
  long long v116 = &v113[v115];
  unint64_t v117 = v114 - v115;
  if (v117 >= v117 - 1) {
    --v117;
  }
  *((void *)v106 + 8) = v116;
  *((void *)v106 + 9) = v117;
  unint64_t v107 = v106[22];
  if (v107 > v106[23]) {
    goto LABEL_128;
  }
LABEL_117:
  v106[22] = v107;
  __int16 v109 = (char *)a1[2];
  unint64_t v108 = a1[3];
  if ((unint64_t)v109 < v108)
  {
LABEL_118:
    *(void *)__int16 v109 = v106;
    uint64_t v110 = (uint64_t)(v109 + 8);
    goto LABEL_153;
  }
LABEL_129:
  uint64_t v118 = (char *)a1[1];
  uint64_t v119 = (v109 - v118) >> 3;
  unint64_t v120 = v119 + 1;
  if ((unint64_t)(v119 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v121 = v108 - (void)v118;
  if (v121 >> 2 > v120) {
    unint64_t v120 = v121 >> 2;
  }
  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v122 = v120;
  }
  if (v122)
  {
    if (v122 >> 61) {
      goto LABEL_269;
    }
    char v123 = (char *)operator new(8 * v122);
    uint64_t v124 = &v123[8 * v119];
    uint64_t v125 = &v123[8 * v122];
    *(void *)uint64_t v124 = v106;
    uint64_t v110 = (uint64_t)(v124 + 8);
    long long v126 = (char *)(v109 - v118);
    if (v109 != v118) {
      goto LABEL_138;
    }
  }
  else
  {
    char v123 = 0;
    uint64_t v124 = (char *)(8 * v119);
    uint64_t v125 = 0;
    *(void *)(8 * v119) = v106;
    uint64_t v110 = 8 * v119 + 8;
    long long v126 = (char *)(v109 - v118);
    if (v109 != v118)
    {
LABEL_138:
      unint64_t v127 = (unint64_t)(v126 - 8);
      if (v127 < 0x78
        || &v109[-(v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v124
        && &v123[v109 - v118 - (v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v109)
      {
        goto LABEL_275;
      }
      uint64_t v128 = (v127 >> 3) + 1;
      uint64_t v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v130 = &v109[-v129];
      v124 -= v129;
      long long v131 = &v123[8 * v119 - 16];
      uint64_t v132 = v109 - 16;
      uint64_t v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v135 = *((_OWORD *)v132 - 1);
        long long v134 = *(_OWORD *)v132;
        *((_OWORD *)v132 - 1) = 0uLL;
        *(_OWORD *)uint64_t v132 = 0uLL;
        *((_OWORD *)v131 - 1) = v135;
        *(_OWORD *)long long v131 = v134;
        v131 -= 32;
        v132 -= 32;
        v133 -= 4;
      }
      while (v133);
      __int16 v109 = v130;
      if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_275:
        do
        {
          uint64_t v136 = *((void *)v109 - 1);
          v109 -= 8;
          *(void *)__int16 v109 = 0;
          *((void *)v124 - 1) = v136;
          v124 -= 8;
        }
        while (v109 != v118);
      }
      __int16 v109 = (char *)a1[1];
      unsigned int v137 = (char *)a1[2];
      a1[1] = v124;
      a1[2] = v110;
      a1[3] = v125;
      while (v137 != v109)
      {
        uint64_t v139 = *((void *)v137 - 1);
        v137 -= 8;
        uint64_t v138 = v139;
        *(void *)unsigned int v137 = 0;
        if (v139) {
          (*(void (**)(uint64_t))(*(void *)v138 + 8))(v138);
        }
      }
      goto LABEL_151;
    }
  }
  a1[1] = v124;
  a1[2] = v110;
  a1[3] = v125;
LABEL_151:
  if (v109) {
    operator delete(v109);
  }
LABEL_153:
  a1[2] = v110;
  unint64_t v140 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v140 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(void *)unint64_t v140 = &unk_1EC998E00;
  if (*((void *)v140 + 9))
  {
    unint64_t v141 = v140[22];
    if (v141 <= v140[23]) {
      goto LABEL_155;
    }
LABEL_166:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v140 + 20), v140 + 24, v141, 16);
    v140[22] = v140[22];
    unint64_t v143 = (char *)a1[2];
    unint64_t v142 = a1[3];
    if ((unint64_t)v143 < v142) {
      goto LABEL_156;
    }
    goto LABEL_167;
  }
  uint64_t v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::WhileUnusedResult]";
  unint64_t v243 = 90;
  unint64_t v145 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v145) {
    unint64_t v146 = v145;
  }
  else {
    unint64_t v146 = v243;
  }
  BOOL v147 = &v242[v146];
  unint64_t v148 = v243 - v146;
  if (v243 - v146 >= 0x12) {
    uint64_t v149 = 18;
  }
  else {
    uint64_t v149 = v243 - v146;
  }
  unint64_t v150 = &v147[v149];
  unint64_t v151 = v148 - v149;
  if (v151 >= v151 - 1) {
    --v151;
  }
  *((void *)v140 + 8) = v150;
  *((void *)v140 + 9) = v151;
  unint64_t v141 = v140[22];
  if (v141 > v140[23]) {
    goto LABEL_166;
  }
LABEL_155:
  v140[22] = v141;
  unint64_t v143 = (char *)a1[2];
  unint64_t v142 = a1[3];
  if ((unint64_t)v143 < v142)
  {
LABEL_156:
    *(void *)unint64_t v143 = v140;
    uint64_t v144 = (uint64_t)(v143 + 8);
    goto LABEL_191;
  }
LABEL_167:
  unint64_t v152 = (char *)a1[1];
  uint64_t v153 = (v143 - v152) >> 3;
  unint64_t v154 = v153 + 1;
  if ((unint64_t)(v153 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v155 = v142 - (void)v152;
  if (v155 >> 2 > v154) {
    unint64_t v154 = v155 >> 2;
  }
  if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v156 = v154;
  }
  if (v156)
  {
    if (v156 >> 61) {
      goto LABEL_269;
    }
    int64_t v157 = (char *)operator new(8 * v156);
    int64_t v158 = &v157[8 * v153];
    int64_t v159 = &v157[8 * v156];
    *(void *)int64_t v158 = v140;
    uint64_t v144 = (uint64_t)(v158 + 8);
    int64_t v160 = (char *)(v143 - v152);
    if (v143 != v152) {
      goto LABEL_176;
    }
  }
  else
  {
    int64_t v157 = 0;
    int64_t v158 = (char *)(8 * v153);
    int64_t v159 = 0;
    *(void *)(8 * v153) = v140;
    uint64_t v144 = 8 * v153 + 8;
    int64_t v160 = (char *)(v143 - v152);
    if (v143 != v152)
    {
LABEL_176:
      unint64_t v161 = (unint64_t)(v160 - 8);
      if (v161 < 0x78
        || &v143[-(v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v158
        && &v157[v143 - v152 - (v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v143)
      {
        goto LABEL_276;
      }
      uint64_t v162 = (v161 >> 3) + 1;
      uint64_t v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
      int64_t v164 = &v143[-v163];
      v158 -= v163;
      int64_t v165 = &v157[8 * v153 - 16];
      long long v166 = v143 - 16;
      uint64_t v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v169 = *((_OWORD *)v166 - 1);
        long long v168 = *(_OWORD *)v166;
        *((_OWORD *)v166 - 1) = 0uLL;
        *(_OWORD *)long long v166 = 0uLL;
        *((_OWORD *)v165 - 1) = v169;
        *(_OWORD *)int64_t v165 = v168;
        v165 -= 32;
        v166 -= 32;
        v167 -= 4;
      }
      while (v167);
      unint64_t v143 = v164;
      if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_276:
        do
        {
          uint64_t v170 = *((void *)v143 - 1);
          v143 -= 8;
          *(void *)unint64_t v143 = 0;
          *((void *)v158 - 1) = v170;
          v158 -= 8;
        }
        while (v143 != v152);
      }
      unint64_t v143 = (char *)a1[1];
      long long v171 = (char *)a1[2];
      a1[1] = v158;
      a1[2] = v144;
      a1[3] = v159;
      while (v171 != v143)
      {
        uint64_t v173 = *((void *)v171 - 1);
        v171 -= 8;
        uint64_t v172 = v173;
        *(void *)long long v171 = 0;
        if (v173) {
          (*(void (**)(uint64_t))(*(void *)v172 + 8))(v172);
        }
      }
      goto LABEL_189;
    }
  }
  a1[1] = v158;
  a1[2] = v144;
  a1[3] = v159;
LABEL_189:
  if (v143) {
    operator delete(v143);
  }
LABEL_191:
  a1[2] = v144;
  unint64_t v174 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v174 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(void *)unint64_t v174 = &unk_1EC99BEC0;
  if (*((void *)v174 + 9))
  {
    unint64_t v175 = v174[22];
    if (v175 <= v174[23]) {
      goto LABEL_193;
    }
LABEL_204:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v174 + 20), v174 + 24, v175, 16);
    v174[22] = v174[22];
    unsigned int v177 = (char *)a1[2];
    unint64_t v176 = a1[3];
    if ((unint64_t)v177 < v176) {
      goto LABEL_194;
    }
    goto LABEL_205;
  }
  uint64_t v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::WhileRemoveDuplicatedResults]";
  unint64_t v243 = 101;
  unint64_t v179 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v179) {
    unint64_t v180 = v179;
  }
  else {
    unint64_t v180 = v243;
  }
  unsigned int v181 = &v242[v180];
  unint64_t v182 = v243 - v180;
  if (v243 - v180 >= 0x12) {
    uint64_t v183 = 18;
  }
  else {
    uint64_t v183 = v243 - v180;
  }
  char v184 = &v181[v183];
  unint64_t v185 = v182 - v183;
  if (v185 >= v185 - 1) {
    --v185;
  }
  *((void *)v174 + 8) = v184;
  *((void *)v174 + 9) = v185;
  unint64_t v175 = v174[22];
  if (v175 > v174[23]) {
    goto LABEL_204;
  }
LABEL_193:
  v174[22] = v175;
  unsigned int v177 = (char *)a1[2];
  unint64_t v176 = a1[3];
  if ((unint64_t)v177 < v176)
  {
LABEL_194:
    *(void *)unsigned int v177 = v174;
    uint64_t v178 = (uint64_t)(v177 + 8);
    goto LABEL_229;
  }
LABEL_205:
  uint64_t v186 = (char *)a1[1];
  uint64_t v187 = (v177 - v186) >> 3;
  unint64_t v188 = v187 + 1;
  if ((unint64_t)(v187 + 1) >> 61) {
    goto LABEL_268;
  }
  uint64_t v189 = v176 - (void)v186;
  if (v189 >> 2 > v188) {
    unint64_t v188 = v189 >> 2;
  }
  if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v190 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v190 = v188;
  }
  if (v190)
  {
    if (v190 >> 61) {
      goto LABEL_269;
    }
    int v191 = (char *)operator new(8 * v190);
    unsigned int v192 = &v191[8 * v187];
    unsigned int v193 = &v191[8 * v190];
    *(void *)unsigned int v192 = v174;
    uint64_t v178 = (uint64_t)(v192 + 8);
    uint64_t v194 = (char *)(v177 - v186);
    if (v177 != v186) {
      goto LABEL_214;
    }
  }
  else
  {
    int v191 = 0;
    unsigned int v192 = (char *)(8 * v187);
    unsigned int v193 = 0;
    *(void *)(8 * v187) = v174;
    uint64_t v178 = 8 * v187 + 8;
    uint64_t v194 = (char *)(v177 - v186);
    if (v177 != v186)
    {
LABEL_214:
      unint64_t v195 = (unint64_t)(v194 - 8);
      if (v195 < 0x78
        || &v177[-(v195 & 0xFFFFFFFFFFFFFFF8) - 8] < v192
        && &v191[v177 - v186 - (v195 & 0xFFFFFFFFFFFFFFF8) - 8] < v177)
      {
        goto LABEL_277;
      }
      uint64_t v196 = (v195 >> 3) + 1;
      uint64_t v197 = 8 * (v196 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v198 = &v177[-v197];
      v192 -= v197;
      unsigned int v199 = &v191[8 * v187 - 16];
      uint64_t v200 = v177 - 16;
      uint64_t v201 = v196 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v203 = *((_OWORD *)v200 - 1);
        long long v202 = *(_OWORD *)v200;
        *((_OWORD *)v200 - 1) = 0uLL;
        *(_OWORD *)uint64_t v200 = 0uLL;
        *((_OWORD *)v199 - 1) = v203;
        *(_OWORD *)unsigned int v199 = v202;
        v199 -= 32;
        v200 -= 32;
        v201 -= 4;
      }
      while (v201);
      unsigned int v177 = v198;
      if (v196 != (v196 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_277:
        do
        {
          uint64_t v204 = *((void *)v177 - 1);
          v177 -= 8;
          *(void *)unsigned int v177 = 0;
          *((void *)v192 - 1) = v204;
          v192 -= 8;
        }
        while (v177 != v186);
      }
      unsigned int v177 = (char *)a1[1];
      uint64_t v205 = (char *)a1[2];
      a1[1] = v192;
      a1[2] = v178;
      a1[3] = v193;
      while (v205 != v177)
      {
        uint64_t v207 = *((void *)v205 - 1);
        v205 -= 8;
        uint64_t v206 = v207;
        *(void *)uint64_t v205 = 0;
        if (v207) {
          (*(void (**)(uint64_t))(*(void *)v206 + 8))(v206);
        }
      }
      goto LABEL_227;
    }
  }
  a1[1] = v192;
  a1[2] = v178;
  a1[3] = v193;
LABEL_227:
  if (v177) {
    operator delete(v177);
  }
LABEL_229:
  a1[2] = v178;
  uint64_t v208 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v242, 1);
  mlir::Pattern::Pattern((uint64_t)(v208 + 2), (uint64_t)"scf.while", 9, (__int16)v242, a2, 0, 0);
  *(void *)uint64_t v208 = &unk_1EC99ABB8;
  if (*((void *)v208 + 9))
  {
    unint64_t v209 = v208[22];
    if (v209 <= v208[23]) {
      goto LABEL_231;
    }
LABEL_242:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v208 + 20), v208 + 24, v209, 16);
    v208[22] = v208[22];
    uint64_t v211 = (char *)a1[2];
    unint64_t v210 = a1[3];
    if ((unint64_t)v211 < v210) {
      goto LABEL_232;
    }
    goto LABEL_243;
  }
  uint64_t v242 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::WhileRemoveUnusedArgs]";
  unint64_t v243 = 94;
  unint64_t v213 = llvm::StringRef::find((uint64_t *)&v242, "DesiredTypeName = ", 0x12uLL, 0);
  if (v243 >= v213) {
    unint64_t v214 = v213;
  }
  else {
    unint64_t v214 = v243;
  }
  unint64_t v215 = &v242[v214];
  unint64_t v216 = v243 - v214;
  if (v243 - v214 >= 0x12) {
    uint64_t v217 = 18;
  }
  else {
    uint64_t v217 = v243 - v214;
  }
  unint64_t v218 = &v215[v217];
  unint64_t v219 = v216 - v217;
  if (v219 >= v219 - 1) {
    --v219;
  }
  *((void *)v208 + 8) = v218;
  *((void *)v208 + 9) = v219;
  unint64_t v209 = v208[22];
  if (v209 > v208[23]) {
    goto LABEL_242;
  }
LABEL_231:
  v208[22] = v209;
  uint64_t v211 = (char *)a1[2];
  unint64_t v210 = a1[3];
  if ((unint64_t)v211 < v210)
  {
LABEL_232:
    *(void *)uint64_t v211 = v208;
    uint64_t v212 = (uint64_t)(v211 + 8);
    goto LABEL_267;
  }
LABEL_243:
  uint64_t v220 = (char *)a1[1];
  uint64_t v221 = (v211 - v220) >> 3;
  unint64_t v222 = v221 + 1;
  if ((unint64_t)(v221 + 1) >> 61) {
LABEL_268:
  }
    abort();
  uint64_t v223 = v210 - (void)v220;
  if (v223 >> 2 > v222) {
    unint64_t v222 = v223 >> 2;
  }
  if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v224 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v224 = v222;
  }
  if (!v224)
  {
    BOOL v225 = 0;
    __int16 v226 = (char *)(8 * v221);
    BOOL v227 = 0;
    *(void *)(8 * v221) = v208;
    uint64_t v212 = 8 * v221 + 8;
    uint64_t v228 = (char *)(v211 - v220);
    if (v211 != v220) {
      goto LABEL_252;
    }
    goto LABEL_264;
  }
  if (v224 >> 61) {
LABEL_269:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  BOOL v225 = (char *)operator new(8 * v224);
  __int16 v226 = &v225[8 * v221];
  BOOL v227 = &v225[8 * v224];
  *(void *)__int16 v226 = v208;
  uint64_t v212 = (uint64_t)(v226 + 8);
  uint64_t v228 = (char *)(v211 - v220);
  if (v211 != v220)
  {
LABEL_252:
    unint64_t v229 = (unint64_t)(v228 - 8);
    if (v229 < 0x78
      || &v211[-(v229 & 0xFFFFFFFFFFFFFFF8) - 8] < v226
      && &v225[v211 - v220 - (v229 & 0xFFFFFFFFFFFFFFF8) - 8] < v211)
    {
      goto LABEL_278;
    }
    uint64_t v230 = (v229 >> 3) + 1;
    uint64_t v231 = 8 * (v230 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v232 = &v211[-v231];
    v226 -= v231;
    BOOL v233 = &v225[8 * v221 - 16];
    uint64_t v234 = v211 - 16;
    uint64_t v235 = v230 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v237 = *((_OWORD *)v234 - 1);
      long long v236 = *(_OWORD *)v234;
      *((_OWORD *)v234 - 1) = 0uLL;
      *(_OWORD *)uint64_t v234 = 0uLL;
      *((_OWORD *)v233 - 1) = v237;
      *(_OWORD *)BOOL v233 = v236;
      v233 -= 32;
      v234 -= 32;
      v235 -= 4;
    }
    while (v235);
    uint64_t v211 = v232;
    if (v230 != (v230 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_278:
      do
      {
        uint64_t v238 = *((void *)v211 - 1);
        v211 -= 8;
        *(void *)uint64_t v211 = 0;
        *((void *)v226 - 1) = v238;
        v226 -= 8;
      }
      while (v211 != v220);
    }
    uint64_t v211 = (char *)a1[1];
    BOOL v239 = (char *)a1[2];
    a1[1] = v226;
    a1[2] = v212;
    a1[3] = v227;
    while (v239 != v211)
    {
      uint64_t v241 = *((void *)v239 - 1);
      v239 -= 8;
      uint64_t v240 = v241;
      *(void *)BOOL v239 = 0;
      if (v241) {
        (*(void (**)(uint64_t))(*(void *)v240 + 8))(v240);
      }
    }
    goto LABEL_265;
  }
LABEL_264:
  a1[1] = v226;
  a1[2] = v212;
  a1[3] = v227;
LABEL_265:
  if (v211) {
    operator delete(v211);
  }
LABEL_267:
  a1[2] = v212;
}

uint64_t mlir::scf::IndexSwitchOp::verify(uint64_t **this)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  v78[0] = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v78);
  uint64_t v2 = *this;
  unint64_t v3 = *((unsigned int *)*this + 11);
  if (v4 == (v3 & 0x7FFFFF) - 1)
  {
    v71[0] = 0;
    v71[1] = 0;
    unsigned int v72 = 0;
    v78[0] = (const void **)v2[2 * ((v3 >> 23) & 1) + 8];
    uint64_t v5 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v78);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)v5;
      uint64_t v8 = 8 * v6;
      while (1)
      {
        uint64_t v70 = 0;
        uint64_t v70 = (const char *)*v7;
        llvm::DenseMapBase<llvm::DenseMap<long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>,long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v71, (uint64_t *)&v70, (uint64_t)v78);
        if (!(_BYTE)v79) {
          break;
        }
        ++v7;
        v8 -= 8;
        if (!v8) {
          goto LABEL_6;
        }
      }
      v73[0] = (const void **)"has duplicate case value: ";
      __int16 v74 = 259;
      mlir::OpState::emitOpError(this, v73, (uint64_t)v78);
      if (v78[0])
      {
        LODWORD(v75) = 2;
        uint64_t v76 = v70;
        unint64_t v43 = &v75;
        unint64_t v44 = (char *)v80;
        if (v81 >= v82)
        {
          unint64_t v64 = v81 + 1;
          if (v80 <= &v75 && (char *)v80 + 24 * v81 > (char *)&v75)
          {
            int64_t v69 = (char *)&v75 - (unsigned char *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            unint64_t v44 = (char *)v80;
            unint64_t v43 = (uint64_t *)((char *)v80 + v69);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            unint64_t v43 = &v75;
            unint64_t v44 = (char *)v80;
          }
        }
        uint64_t v45 = &v44[24 * v81];
        long long v46 = *(_OWORD *)v43;
        *((void *)v45 + 2) = v43[2];
        *(_OWORD *)uint64_t v45 = v46;
        ++v81;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v78);
      if (v78[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
      }
      if (v88)
      {
        uint64_t v47 = (void **)__p;
        if (__p)
        {
          __n128 v48 = v87;
          unint64_t v49 = __p;
          if (v87 != __p)
          {
            do
              __n128 v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
            while (v48 != v47);
            unint64_t v49 = __p;
          }
          uint64_t v87 = v47;
          operator delete(v49);
        }
        long long v50 = v84;
        if (v84)
        {
          uint64_t v51 = v85;
          unint64_t v52 = v84;
          if (v85 != v84)
          {
            do
            {
              unint64_t v54 = (void *)*--v51;
              uint64_t v53 = v54;
              void *v51 = 0;
              if (v54) {
                operator delete[](v53);
              }
            }
            while (v51 != v50);
            unint64_t v52 = v84;
          }
          uint64_t v85 = v50;
          operator delete(v52);
        }
        if (v80 != v83) {
          free(v80);
        }
      }
    }
    else
    {
LABEL_6:
      uint64_t v9 = (((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
           + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *((unsigned int *)*this + 10);
      v78[0] = (const void **)"default region";
      LOWORD(v81) = 259;
      if (mlir::scf::IndexSwitchOp::verify(void)::$_0::operator()(this, v9, v78))
      {
        unint64_t v10 = *((unsigned int *)*this + 11);
        unsigned int v11 = v10 & 0x7FFFFF;
        if ((v10 & 0x7FFFFF) != 0)
        {
          if (v11 == 1) {
            goto LABEL_65;
          }
          unint64_t v12 = (((unint64_t)&(*this)[2 * ((v10 >> 23) & 1) + 8] + ((v10 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *((unsigned int *)*this + 10);
          unint64_t v13 = v12 + 24 * v11;
        }
        else
        {
          unint64_t v13 = 0;
          unint64_t v12 = 0;
        }
        uint64_t v55 = 0;
        uint64_t v56 = v12 + 24;
        do
        {
          v73[0] = v55;
          v78[0] = (const void **)"case region #";
          uint64_t v79 = v73;
          LOWORD(v81) = 2819;
          if (!mlir::scf::IndexSwitchOp::verify(void)::$_0::operator()(this, v56, v78)) {
            break;
          }
          uint64_t v55 = (const void **)((char *)v55 + 1);
          v56 += 24;
        }
        while (v56 != v13);
      }
    }
LABEL_65:
    llvm::deallocate_buffer(v71[0], (void *)(8 * v72));
  }
  v73[0] = (const void **)"has ";
  __int16 v74 = 259;
  mlir::OpState::emitOpError(this, v73, (uint64_t)v78);
  if (v78[0])
  {
    uint64_t v14 = (*((_DWORD *)*this + 11) & 0x7FFFFF) - 1;
    LODWORD(v75) = 5;
    uint64_t v76 = (const char *)v14;
    unint64_t v15 = &v75;
    uint64_t v16 = (char *)v80;
    if (v81 >= v82)
    {
      unint64_t v58 = v81 + 1;
      if (v80 <= &v75 && (char *)v80 + 24 * v81 > (char *)&v75)
      {
        int64_t v65 = (char *)&v75 - (unsigned char *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v58, 24);
        uint64_t v16 = (char *)v80;
        unint64_t v15 = (uint64_t *)((char *)v80 + v65);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v58, 24);
        unint64_t v15 = &v75;
        uint64_t v16 = (char *)v80;
      }
    }
    uint64_t v17 = &v16[24 * v81];
    long long v18 = *(_OWORD *)v15;
    *((void *)v17 + 2) = v15[2];
    *(_OWORD *)uint64_t v17 = v18;
    uint64_t v19 = ++v81;
    if (v78[0])
    {
      LODWORD(v75) = 3;
      uint64_t v76 = " case regions but ";
      uint64_t v77 = 18;
      unint64_t v20 = &v75;
      uint64_t v21 = (char *)v80;
      if (v19 >= v82)
      {
        unint64_t v60 = v19 + 1;
        BOOL v61 = (char *)v80 + 24 * v19 > (char *)&v75;
        if (v80 <= &v75 && v61)
        {
          int64_t v67 = (char *)&v75 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
          uint64_t v21 = (char *)v80;
          unint64_t v20 = (uint64_t *)((char *)v80 + v67);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
          unint64_t v20 = &v75;
          uint64_t v21 = (char *)v80;
        }
      }
      unint64_t v22 = &v21[24 * v81];
      long long v23 = *(_OWORD *)v20;
      *((void *)v22 + 2) = v20[2];
      *(_OWORD *)unint64_t v22 = v23;
      ++v81;
    }
  }
  uint64_t v75 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v75);
  if (v78[0])
  {
    LODWORD(v75) = 5;
    uint64_t v76 = v24;
    unint64_t v25 = &v75;
    uint64_t v26 = (char *)v80;
    if (v81 >= v82)
    {
      unint64_t v59 = v81 + 1;
      if (v80 <= &v75 && (char *)v80 + 24 * v81 > (char *)&v75)
      {
        int64_t v66 = (char *)&v75 - (unsigned char *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v59, 24);
        uint64_t v26 = (char *)v80;
        unint64_t v25 = (uint64_t *)((char *)v80 + v66);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v59, 24);
        unint64_t v25 = &v75;
        uint64_t v26 = (char *)v80;
      }
    }
    uint64_t v27 = &v26[24 * v81];
    long long v28 = *(_OWORD *)v25;
    *((void *)v27 + 2) = v25[2];
    *(_OWORD *)uint64_t v27 = v28;
    uint64_t v29 = ++v81;
    if (v78[0])
    {
      LODWORD(v75) = 3;
      uint64_t v76 = " case values";
      uint64_t v77 = 12;
      BOOL v30 = &v75;
      uint64_t v31 = (char *)v80;
      if (v29 >= v82)
      {
        unint64_t v62 = v29 + 1;
        BOOL v63 = (char *)v80 + 24 * v29 > (char *)&v75;
        if (v80 <= &v75 && v63)
        {
          int64_t v68 = (char *)&v75 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
          uint64_t v31 = (char *)v80;
          BOOL v30 = (uint64_t *)((char *)v80 + v68);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
          BOOL v30 = &v75;
          uint64_t v31 = (char *)v80;
        }
      }
      long long v32 = &v31[24 * v81];
      long long v33 = *(_OWORD *)v30;
      *((void *)v32 + 2) = v30[2];
      *(_OWORD *)long long v32 = v33;
      ++v81;
    }
  }
  uint64_t v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v78);
  if (v78[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
  }
  if (v88)
  {
    __int16 v35 = (void **)__p;
    if (__p)
    {
      uint64_t v36 = v87;
      uint64_t v37 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
        while (v36 != v35);
        uint64_t v37 = __p;
      }
      uint64_t v87 = v35;
      operator delete(v37);
    }
    unint64_t v38 = v84;
    if (v84)
    {
      unint64_t v39 = v85;
      unint64_t v40 = v84;
      if (v85 != v84)
      {
        do
        {
          uint64_t v42 = (void *)*--v39;
          unsigned int v41 = v42;
          *unint64_t v39 = 0;
          if (v42) {
            operator delete[](v41);
          }
        }
        while (v39 != v38);
        unint64_t v40 = v84;
      }
      uint64_t v85 = v38;
      operator delete(v40);
    }
    if (v80 != v83) {
      free(v80);
    }
  }
  return v34;
}

uint64_t mlir::scf::IndexSwitchOp::verify(void)::$_0::operator()(uint64_t **a1, uint64_t a2, const void ***a3)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6) {
    uint64_t v7 = v6 - 8;
  }
  else {
    uint64_t v7 = 0;
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v7 + 32));
  if (v8) {
    BOOL v9 = *(void *)(*(void *)(v8 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9)
  {
    unint64_t v151 = (const void **)"expected region to end with scf.yield, but got ";
    __int16 v155 = 259;
    mlir::OpState::emitOpError(a1, &v151, (uint64_t)&v159);
    uint64_t v10 = *(void *)(a2 + 8);
    if (v10) {
      uint64_t v11 = v10 - 8;
    }
    else {
      uint64_t v11 = 0;
    }
    mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v11 + 32));
    if (v159) {
      mlir::Diagnostic::operator<<((uint64_t)v160, *(void *)(v12 + 48));
    }
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v159);
    if (v159) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v159);
    }
    if (!v169) {
      return v13;
    }
    uint64_t v14 = (void **)__p;
    if (__p)
    {
      unint64_t v15 = v168;
      uint64_t v16 = __p;
      if (v168 != __p)
      {
        do
          unint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        uint64_t v16 = __p;
      }
      long long v168 = v14;
      operator delete(v16);
    }
    uint64_t v17 = v165;
    if (!v165) {
      goto LABEL_108;
    }
    long long v18 = v166;
    uint64_t v19 = v165;
    if (v166 == v165) {
      goto LABEL_107;
    }
    do
    {
      uint64_t v21 = (void *)*--v18;
      unint64_t v20 = v21;
      void *v18 = 0;
      if (v21) {
        operator delete[](v20);
      }
    }
    while (v18 != v17);
    goto LABEL_106;
  }
  uint64_t v22 = v8;
  if ((*(unsigned char *)(v8 + 46) & 0x80) != 0)
  {
    unsigned int v23 = *(_DWORD *)(v8 + 68);
    unsigned int v24 = *a1;
    if (v23 == *((_DWORD *)*a1 + 9)) {
      goto LABEL_29;
    }
  }
  else
  {
    unsigned int v23 = 0;
    unsigned int v24 = *a1;
    if (!*((_DWORD *)*a1 + 9))
    {
LABEL_29:
      unint64_t v25 = (const void **)(v24 - 2);
      if (!v23) {
        unint64_t v25 = 0;
      }
      unint64_t v150 = (const char *)v23;
      unint64_t v151 = v25;
      uint64_t v152 = v23;
      mlir::OperandRange::getTypes((uint64_t *)&v151, &v159);
      if ((*(unsigned char *)(v22 + 46) & 0x80) != 0)
      {
        uint64_t v26 = (const char *)*(unsigned int *)(v22 + 68);
        uint64_t v156 = *(void *)(v22 + 72);
        int64_t v157 = v26;
        mlir::OperandRange::getTypes(&v156, (uint64_t *)&v151);
        if (v23) {
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v156 = 0;
        int64_t v157 = 0;
        mlir::OperandRange::getTypes(&v156, (uint64_t *)&v151);
        if (v23)
        {
LABEL_33:
          BOOL v147 = a1;
          unint64_t v148 = a3;
          uint64_t v149 = v22;
          uint64_t v27 = 0;
          uint64_t v29 = v159;
          uint64_t v28 = v160[0];
          uint64_t v30 = v160[1];
          uint64_t v31 = v151;
          long long v32 = v153;
          long long v33 = (const char *)(v154 - v152);
          uint64_t v34 = &v151[4 * v152 + 3];
          uint64_t v35 = v160[0] - (void)v161;
          do
          {
            BOOL v36 = v31 == v32 && v33 == v27;
            BOOL v37 = !v36;
            BOOL v38 = !&v27[v35] && v29 == v30;
            if (v38 || !v37) {
              break;
            }
            unint64_t v40 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v29, (uint64_t)&v27[v28]) + 8) & 0xFFFFFFFFFFFFFFF8;
            if (v40 != (*((void *)*v34 + 1) & 0xFFFFFFFFFFFFFFF8))
            {
              unint64_t v41 = *((void *)*v34 + 1) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v151 = (const void **)"expected result #";
              __int16 v155 = 259;
              mlir::OpState::emitOpError(v147, &v151, (uint64_t)&v159);
              unint64_t v43 = v148;
              uint64_t v42 = v149;
              if (v159)
              {
                LODWORD(v156) = 5;
                int64_t v157 = v27;
                unint64_t v44 = &v156;
                uint64_t v45 = (char *)v161;
                if (v162 >= v163)
                {
                  unint64_t v132 = v162 + 1;
                  if (v161 <= &v156 && (char *)v161 + 24 * v162 > (char *)&v156)
                  {
                    int64_t v144 = (char *)&v156 - (unsigned char *)v161;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v132, 24);
                    uint64_t v45 = (char *)v161;
                    unint64_t v44 = (uint64_t *)((char *)v161 + v144);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v132, 24);
                    unint64_t v44 = &v156;
                    uint64_t v45 = (char *)v161;
                  }
                  unint64_t v43 = v148;
                  uint64_t v42 = v149;
                }
                long long v46 = &v45[24 * v162];
                long long v47 = *(_OWORD *)v44;
                *((void *)v46 + 2) = v44[2];
                *(_OWORD *)long long v46 = v47;
                uint64_t v48 = ++v162;
                if (v159)
                {
                  LODWORD(v156) = 3;
                  int64_t v157 = " of each region to be ";
                  uint64_t v158 = 22;
                  unint64_t v49 = &v156;
                  long long v50 = (char *)v161;
                  if (v48 >= v163)
                  {
                    unint64_t v133 = v48 + 1;
                    BOOL v134 = (char *)v161 + 24 * v48 > (char *)&v156;
                    if (v161 <= &v156 && v134)
                    {
                      int64_t v145 = (char *)&v156 - (unsigned char *)v161;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v133, 24);
                      long long v50 = (char *)v161;
                      unint64_t v49 = (uint64_t *)((char *)v161 + v145);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v133, 24);
                      unint64_t v49 = &v156;
                      long long v50 = (char *)v161;
                    }
                    unint64_t v43 = v148;
                    uint64_t v42 = v149;
                  }
                  uint64_t v51 = &v50[24 * v162];
                  long long v52 = *(_OWORD *)v49;
                  *((void *)v51 + 2) = v49[2];
                  *(_OWORD *)uint64_t v51 = v52;
                  ++v162;
                  if (v159)
                  {
                    uint64_t v53 = &v156;
                    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v156, v40);
                    unint64_t v54 = (char *)v161;
                    if (v162 >= v163)
                    {
                      unint64_t v135 = v162 + 1;
                      if (v161 <= &v156 && (char *)v161 + 24 * v162 > (char *)&v156)
                      {
                        int64_t v146 = (char *)&v156 - (unsigned char *)v161;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v135, 24);
                        unint64_t v54 = (char *)v161;
                        uint64_t v53 = (uint64_t *)((char *)v161 + v146);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v135, 24);
                        uint64_t v53 = &v156;
                        unint64_t v54 = (char *)v161;
                      }
                      unint64_t v43 = v148;
                      uint64_t v42 = v149;
                    }
                    uint64_t v55 = &v54[24 * v162];
                    long long v56 = *(_OWORD *)v53;
                    *((void *)v55 + 2) = v53[2];
                    *(_OWORD *)uint64_t v55 = v56;
                    ++v162;
                  }
                }
              }
              uint64_t v57 = mlir::Diagnostic::attachNote(v160, *(void *)(v42 + 24), 1);
              uint64_t v58 = mlir::Diagnostic::operator<<(v57, v43);
              uint64_t v59 = v58;
              uint64_t v61 = v58 + 16;
              unint64_t v60 = *(void *)(v58 + 16);
              LODWORD(v156) = 3;
              int64_t v157 = " returns ";
              uint64_t v158 = 9;
              uint64_t v62 = *(unsigned int *)(v58 + 24);
              BOOL v63 = &v156;
              if (v62 >= *(_DWORD *)(v58 + 28))
              {
                unint64_t v125 = v62 + 1;
                BOOL v126 = v60 + 24 * v62 > (unint64_t)&v156;
                if (v60 <= (unint64_t)&v156 && v126)
                {
                  unint64_t v140 = (char *)&v156 - v60;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v58 + 16, (void *)(v58 + 32), v125, 24);
                  unint64_t v60 = *(void *)(v59 + 16);
                  BOOL v63 = (uint64_t *)&v140[v60];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v58 + 16, (void *)(v58 + 32), v125, 24);
                  unint64_t v60 = *(void *)(v59 + 16);
                  BOOL v63 = &v156;
                }
              }
              uint64_t v64 = v60 + 24 * *(unsigned int *)(v59 + 24);
              long long v65 = *(_OWORD *)v63;
              *(void *)(v64 + 16) = v63[2];
              *(_OWORD *)uint64_t v64 = v65;
              ++*(_DWORD *)(v59 + 24);
              int64_t v66 = &v156;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v156, v41);
              uint64_t v67 = *(unsigned int *)(v59 + 24);
              unint64_t v68 = *(void *)(v59 + 16);
              if (v67 >= *(_DWORD *)(v59 + 28))
              {
                unint64_t v127 = v67 + 1;
                BOOL v128 = v68 + 24 * v67 > (unint64_t)&v156;
                if (v68 <= (unint64_t)&v156 && v128)
                {
                  unint64_t v141 = (char *)&v156 - v68;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v61, (void *)(v59 + 32), v127, 24);
                  unint64_t v68 = *(void *)(v59 + 16);
                  int64_t v66 = (uint64_t *)&v141[v68];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v61, (void *)(v59 + 32), v127, 24);
                  unint64_t v68 = *(void *)(v59 + 16);
                  int64_t v66 = &v156;
                }
              }
              uint64_t v69 = v68 + 24 * *(unsigned int *)(v59 + 24);
              long long v70 = *(_OWORD *)v66;
              *(void *)(v69 + 16) = v66[2];
              *(_OWORD *)uint64_t v69 = v70;
              unsigned int v71 = *(_DWORD *)(v59 + 28);
              uint64_t v72 = (*(_DWORD *)(v59 + 24) + 1);
              *(_DWORD *)(v59 + 24) = v72;
              LODWORD(v156) = 3;
              int64_t v157 = " here";
              uint64_t v158 = 5;
              unint64_t v73 = *(void *)(v59 + 16);
              __int16 v74 = &v156;
              if (v72 >= v71)
              {
                unint64_t v129 = v72 + 1;
                BOOL v130 = v73 + 24 * v72 > (unint64_t)&v156;
                if (v73 <= (unint64_t)&v156 && v130)
                {
                  unint64_t v142 = (char *)&v156 - v73;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v61, (void *)(v59 + 32), v129, 24);
                  unint64_t v73 = *(void *)(v59 + 16);
                  __int16 v74 = (uint64_t *)&v142[v73];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v61, (void *)(v59 + 32), v129, 24);
                  unint64_t v73 = *(void *)(v59 + 16);
                  __int16 v74 = &v156;
                }
              }
              uint64_t v75 = v73 + 24 * *(unsigned int *)(v59 + 24);
              long long v76 = *(_OWORD *)v74;
              *(void *)(v75 + 16) = v74[2];
              *(_OWORD *)uint64_t v75 = v76;
              ++*(_DWORD *)(v59 + 24);
              uint64_t v13 = mlir::Diagnostic::operator mlir::LogicalResult();
              if (v159) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v159);
              }
              if (v169)
              {
                uint64_t v77 = (void **)__p;
                if (__p)
                {
                  unint64_t v78 = v168;
                  uint64_t v79 = __p;
                  if (v168 != __p)
                  {
                    do
                      unint64_t v78 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v78 - 1);
                    while (v78 != v77);
                    uint64_t v79 = __p;
                  }
                  long long v168 = v77;
                  operator delete(v79);
                }
                unint64_t v80 = v165;
                if (v165)
                {
                  unsigned int v81 = v166;
                  unsigned int v82 = v165;
                  if (v166 != v165)
                  {
                    do
                    {
                      uint64_t v84 = (void *)*--v81;
                      unint64_t v83 = v84;
                      void *v81 = 0;
                      if (v84) {
                        operator delete[](v83);
                      }
                    }
                    while (v81 != v80);
                    unsigned int v82 = v165;
                  }
                  long long v166 = v80;
                  operator delete(v82);
                }
                uint64_t v85 = v161;
                if (v161 != v164) {
                  goto LABEL_109;
                }
              }
              return v13;
            }
            ++v27;
            v34 += 4;
          }
          while (v150 != v27);
        }
      }
      return 1;
    }
  }
  unint64_t v151 = (const void **)"expected each region to return ";
  __int16 v155 = 259;
  mlir::OpState::emitOpError(a1, &v151, (uint64_t)&v159);
  if (v159)
  {
    unint64_t v86 = (const char *)*((unsigned int *)*a1 + 9);
    LODWORD(v156) = 5;
    int64_t v157 = v86;
    uint64_t v87 = &v156;
    char v88 = (char *)v161;
    if (v162 >= v163)
    {
      unint64_t v121 = v162 + 1;
      if (v161 <= &v156 && (char *)v161 + 24 * v162 > (char *)&v156)
      {
        int64_t v137 = (char *)&v156 - (unsigned char *)v161;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v121, 24);
        char v88 = (char *)v161;
        uint64_t v87 = (uint64_t *)((char *)v161 + v137);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v121, 24);
        uint64_t v87 = &v156;
        char v88 = (char *)v161;
      }
    }
    uint64_t v89 = &v88[24 * v162];
    long long v90 = *(_OWORD *)v87;
    *((void *)v89 + 2) = v87[2];
    *(_OWORD *)uint64_t v89 = v90;
    uint64_t v91 = ++v162;
    if (v159)
    {
      LODWORD(v156) = 3;
      int64_t v157 = " values, but ";
      uint64_t v158 = 13;
      char v92 = &v156;
      unint64_t v93 = (char *)v161;
      if (v91 >= v163)
      {
        unint64_t v123 = v91 + 1;
        BOOL v124 = (char *)v161 + 24 * v91 > (char *)&v156;
        if (v161 <= &v156 && v124)
        {
          int64_t v139 = (char *)&v156 - (unsigned char *)v161;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v123, 24);
          unint64_t v93 = (char *)v161;
          char v92 = (uint64_t *)((char *)v161 + v139);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v123, 24);
          char v92 = &v156;
          unint64_t v93 = (char *)v161;
        }
      }
      uint64_t v94 = &v93[24 * v162];
      long long v95 = *(_OWORD *)v92;
      *((void *)v94 + 2) = v92[2];
      *(_OWORD *)uint64_t v94 = v95;
      ++v162;
      if (v159)
      {
        mlir::Diagnostic::operator<<((uint64_t)v160, a3);
        if (v159)
        {
          LODWORD(v156) = 3;
          int64_t v157 = " returns ";
          uint64_t v158 = 9;
          unint64_t v96 = &v156;
          uint64_t v97 = (char *)v161;
          if (v162 >= v163)
          {
            unint64_t v131 = v162 + 1;
            if (v161 <= &v156 && (char *)v161 + 24 * v162 > (char *)&v156)
            {
              int64_t v143 = (char *)&v156 - (unsigned char *)v161;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v131, 24);
              uint64_t v97 = (char *)v161;
              unint64_t v96 = (uint64_t *)((char *)v161 + v143);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v131, 24);
              unint64_t v96 = &v156;
              uint64_t v97 = (char *)v161;
            }
          }
          uint64_t v98 = &v97[24 * v162];
          long long v99 = *(_OWORD *)v96;
          *((void *)v98 + 2) = v96[2];
          *(_OWORD *)uint64_t v98 = v99;
          ++v162;
        }
      }
    }
  }
  if ((*(unsigned char *)(v22 + 46) & 0x80) != 0)
  {
    long long v100 = (const char *)*(unsigned int *)(v22 + 68);
    if (!v159) {
      goto LABEL_91;
    }
  }
  else
  {
    long long v100 = 0;
    if (!v159) {
      goto LABEL_91;
    }
  }
  LODWORD(v156) = 5;
  int64_t v157 = v100;
  long long v101 = &v156;
  uint64_t v102 = (char *)v161;
  if (v162 >= v163)
  {
    unint64_t v122 = v162 + 1;
    if (v161 <= &v156 && (char *)v161 + 24 * v162 > (char *)&v156)
    {
      int64_t v138 = (char *)&v156 - (unsigned char *)v161;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v122, 24);
      uint64_t v102 = (char *)v161;
      long long v101 = (uint64_t *)((char *)v161 + v138);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, v164, v122, 24);
      long long v101 = &v156;
      uint64_t v102 = (char *)v161;
    }
  }
  uint64_t v103 = &v102[24 * v162];
  long long v104 = *(_OWORD *)v101;
  *((void *)v103 + 2) = v101[2];
  *(_OWORD *)uint64_t v103 = v104;
  ++v162;
LABEL_91:
  uint64_t v105 = mlir::Diagnostic::attachNote(v160, *(void *)(v22 + 24), 1);
  uint64_t v106 = v105 + 16;
  unint64_t v107 = *(void *)(v105 + 16);
  LODWORD(v156) = 3;
  int64_t v157 = "see yield operation here";
  uint64_t v158 = 24;
  uint64_t v108 = *(unsigned int *)(v105 + 24);
  __int16 v109 = &v156;
  if (v108 >= *(_DWORD *)(v105 + 28))
  {
    unint64_t v119 = v108 + 1;
    BOOL v120 = v107 + 24 * v108 > (unint64_t)&v156;
    if (v107 <= (unint64_t)&v156 && v120)
    {
      uint64_t v136 = (char *)&v156 - v107;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v106, (void *)(v105 + 32), v119, 24);
      unint64_t v107 = *(void *)(v105 + 16);
      __int16 v109 = (uint64_t *)&v136[v107];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v106, (void *)(v105 + 32), v119, 24);
      unint64_t v107 = *(void *)(v105 + 16);
      __int16 v109 = &v156;
    }
  }
  uint64_t v110 = v107 + 24 * *(unsigned int *)(v105 + 24);
  long long v111 = *(_OWORD *)v109;
  *(void *)(v110 + 16) = v109[2];
  *(_OWORD *)uint64_t v110 = v111;
  ++*(_DWORD *)(v105 + 24);
  uint64_t v13 = mlir::Diagnostic::operator mlir::LogicalResult();
  if (v159) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v159);
  }
  if (!v169) {
    return v13;
  }
  unint64_t v112 = (void **)__p;
  if (__p)
  {
    uint64_t v113 = v168;
    unint64_t v114 = __p;
    if (v168 != __p)
    {
      do
        uint64_t v113 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v113 - 1);
      while (v113 != v112);
      unint64_t v114 = __p;
    }
    long long v168 = v112;
    operator delete(v114);
  }
  uint64_t v17 = v165;
  if (v165)
  {
    uint64_t v115 = v166;
    uint64_t v19 = v165;
    if (v166 == v165) {
      goto LABEL_107;
    }
    do
    {
      unint64_t v117 = (void *)*--v115;
      long long v116 = v117;
      *uint64_t v115 = 0;
      if (v117) {
        operator delete[](v116);
      }
    }
    while (v115 != v17);
LABEL_106:
    uint64_t v19 = v165;
LABEL_107:
    long long v166 = v17;
    operator delete(v19);
  }
LABEL_108:
  uint64_t v85 = v161;
  if (v161 != v164) {
LABEL_109:
  }
    free(v85);
  return v13;
}

double mlir::scf::IndexSwitchOp::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v21[2] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unint64_t v4 = *(unsigned int *)(*(void *)a1 + 36);
    if (v4) {
      uint64_t v5 = *(void *)a1 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
    unsigned int v6 = *(_DWORD *)(a3 + 8);
    if (v6 >= *(_DWORD *)(a3 + 12))
    {
      uint64_t v20 = 0;
      uint64_t v12 = &v20;
      mlir::ValueRange::ValueRange(v21, v5, v4);
      uint64_t v13 = *(unsigned int *)(a3 + 8);
      unint64_t v14 = *(void *)a3;
      if (v13 >= *(_DWORD *)(a3 + 12))
      {
        unint64_t v16 = v13 + 1;
        BOOL v17 = v14 + 24 * v13 > (unint64_t)&v20;
        if (v14 <= (unint64_t)&v20 && v17)
        {
          long long v18 = (char *)&v21[-1] - v14;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16, 24);
          unint64_t v14 = *(void *)a3;
          uint64_t v12 = (uint64_t *)&v18[*(void *)a3];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v16, 24);
          unint64_t v14 = *(void *)a3;
          uint64_t v12 = &v20;
        }
      }
      uint64_t v15 = v14 + 24 * *(unsigned int *)(a3 + 8);
      long long v8 = *(_OWORD *)v12;
      *(void *)(v15 + 16) = v12[2];
      *(_OWORD *)uint64_t v15 = v8;
    }
    else
    {
      uint64_t v7 = (void *)(*(void *)a3 + 24 * v6);
      void *v7 = 0;
      mlir::ValueRange::ValueRange(v7 + 1, v5, v4);
    }
    ++*(_DWORD *)(a3 + 8);
  }
  else
  {
    unint64_t v9 = *(unsigned int *)(*(void *)a1 + 44);
    unint64_t v10 = v9 & 0x7FFFFF;
    if ((v9 & 0x7FFFFF) != 0)
    {
      uint64_t v11 = ((*(void *)a1 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(*(void *)a1 + 40);
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v10 = 0;
    }
    mlir::ValueRange::ValueRange((unint64_t *)&v20, v11, v10);
    *(double *)&long long v8 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,std::back_insert_iterator<llvm::SmallVectorImpl<mlir::RegionSuccessor>>>(v20, 0, v20, v21[0], a3, (uint64_t)&v20);
  }
  return *(double *)&v8;
}

void mlir::scf::IndexSwitchOp::getEntrySuccessorRegions(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(*a1 + 56);
  unint64_t v9 = *(unsigned int *)(*a1 + 44);
  unint64_t v10 = (uint64_t *)(*a1 + 16 * ((v9 >> 23) & 1) + 64);
  unint64_t v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    uint64_t v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(*a1 + 40);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v52, v12, v11);
  uint64_t v45 = v8;
  v46[0] = 0;
  char v47 = 0;
  uint64_t v48 = *v10;
  long long v49 = v52;
  if (v8)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v45);
    if (v47) {
      char v47 = 0;
    }
    mlir::OperationName::OperationName(v46, "scf.index_switch", 16, Context);
    char v47 = 1;
  }
  long long v50 = a2;
  uint64_t v51 = a3;
  uint64_t v14 = *a2;
  if (*a2)
  {
    if (*(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      uint64_t v14 = 0;
    }
    uint64_t v44 = v14;
    if (v14)
    {
      *(void *)&long long v52 = *(void *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
      unint64_t v16 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v52);
      uint64_t v17 = *a1;
      unint64_t v18 = *(unsigned int *)(*a1 + 44);
      uint64_t v19 = v18 & 0x7FFFFF;
      if ((v18 & 0x7FFFFF) != 0)
      {
        unint64_t v20 = ((v17 + 16 * ((v18 >> 23) & 1) + ((v18 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(v17 + 40);
        uint64_t v21 = v19 - 1;
        if (!v15) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = -1;
        if (!v15) {
          goto LABEL_26;
        }
      }
      if (v21)
      {
        unint64_t v25 = v20 + 24;
        uint64_t v26 = 24 * ((int)v21 + 1) - 48;
        uint64_t v27 = 8 * v15 - 8;
        while (1)
        {
          uint64_t v28 = *v16;
          if (v28 == mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v44)) {
            break;
          }
          if (v27)
          {
            ++v16;
            v25 += 24;
            uint64_t v29 = v26;
            v26 -= 24;
            v27 -= 8;
            if (v29) {
              continue;
            }
          }
          uint64_t v17 = *a1;
          LODWORD(v18) = *(_DWORD *)(*a1 + 44);
          LODWORD(v19) = v18 & 0x7FFFFF;
          goto LABEL_26;
        }
        unsigned int v34 = *(_DWORD *)(a4 + 8);
        if (v34 < *(_DWORD *)(a4 + 12))
        {
          uint64_t v35 = (unint64_t *)(*(void *)a4 + 24 * v34);
          *uint64_t v35 = v25;
          long long v33 = v35 + 1;
          goto LABEL_33;
        }
        *(void *)&long long v52 = v25;
        goto LABEL_36;
      }
LABEL_26:
      if (v19)
      {
        unint64_t v30 = ((v17 + 16 * ((v18 >> 23) & 1) + ((v18 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(v17 + 40);
        unsigned int v31 = *(_DWORD *)(a4 + 8);
        if (v31 < *(_DWORD *)(a4 + 12))
        {
LABEL_28:
          long long v32 = (unint64_t *)(*(void *)a4 + 24 * v31);
          *long long v32 = v30;
          long long v33 = v32 + 1;
LABEL_33:
          mlir::ValueRange::ValueRange(v33, 0, 0);
LABEL_34:
          ++*(_DWORD *)(a4 + 8);
          return;
        }
      }
      else
      {
        unint64_t v30 = 0;
        unsigned int v31 = *(_DWORD *)(a4 + 8);
        if (v31 < *(_DWORD *)(a4 + 12)) {
          goto LABEL_28;
        }
      }
      *(void *)&long long v52 = v30;
LABEL_36:
      BOOL v36 = (char *)&v52;
      mlir::ValueRange::ValueRange((unint64_t *)&v52 + 1, 0, 0);
      uint64_t v37 = *(unsigned int *)(a4 + 8);
      unint64_t v38 = *(void *)a4;
      if (v37 >= *(_DWORD *)(a4 + 12))
      {
        unint64_t v41 = v37 + 1;
        BOOL v42 = v38 + 24 * v37 > (unint64_t)&v52;
        if (v38 <= (unint64_t)&v52 && v42)
        {
          unint64_t v43 = (char *)&v52 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v41, 24);
          unint64_t v38 = *(void *)a4;
          BOOL v36 = &v43[*(void *)a4];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v41, 24);
          unint64_t v38 = *(void *)a4;
          BOOL v36 = (char *)&v52;
        }
      }
      uint64_t v39 = v38 + 24 * *(unsigned int *)(a4 + 8);
      long long v40 = *(_OWORD *)v36;
      *(void *)(v39 + 16) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v39 = v40;
      goto LABEL_34;
    }
  }
  unint64_t v22 = *(unsigned int *)(*a1 + 44);
  unint64_t v23 = v22 & 0x7FFFFF;
  if ((v22 & 0x7FFFFF) != 0)
  {
    uint64_t v24 = ((*a1 + 16 * ((v22 >> 23) & 1) + ((v22 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(*a1 + 40);
  }
  else
  {
    uint64_t v24 = 0;
    unint64_t v23 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v52, v24, v23);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,std::back_insert_iterator<llvm::SmallVectorImpl<mlir::RegionSuccessor>>>(v52, 0, v52, *((uint64_t *)&v52 + 1), a4, (uint64_t)&v52);
}

void mlir::scf::IndexSwitchOp::getRegionInvocationBounds(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  if (!*a2) {
    goto LABEL_13;
  }
  if (*(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v6 = 0;
  }
  uint64_t v26 = v6;
  if (!v6)
  {
LABEL_13:
    uint64_t v18 = *(_DWORD *)(*(void *)a1 + 44) & 0x7FFFFF;
    uint64_t v19 = *(unsigned int *)(a4 + 8);
    if (v19 + v18 > (unint64_t)*(unsigned int *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v19 + v18, 12);
      LODWORD(v19) = *(_DWORD *)(a4 + 8);
      if (v18)
      {
LABEL_15:
        uint64_t v20 = *(void *)a4 + 12 * v19;
        uint64_t v21 = v18;
        do
        {
          *(void *)uint64_t v20 = 0x100000000;
          *(_DWORD *)(v20 + 8) = 1;
          v20 += 12;
          --v21;
        }
        while (v21);
        LODWORD(v19) = *(_DWORD *)(a4 + 8);
      }
    }
    else if (v18)
    {
      goto LABEL_15;
    }
    *(_DWORD *)(a4 + 8) = v19 + v18;
    return;
  }
  unint64_t v7 = *(unsigned int *)(*(void *)a1 + 44);
  *(void *)uint64_t v27 = *(void *)(*(void *)a1 + 16 * ((v7 >> 23) & 1) + 64);
  uint64_t v8 = (void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v27);
  uint64_t v10 = v9;
  uint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v26);
  if (v10)
  {
    uint64_t v12 = 8 * v10;
    uint64_t v13 = &v8[v10];
    while (*v8 != Int)
    {
      ++v8;
      v12 -= 8;
      if (!v12)
      {
        uint64_t v8 = v13;
        break;
      }
    }
  }
  *(void *)uint64_t v27 = *(void *)(*(void *)a1
                             + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1)
                             + 64);
  uint64_t v14 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v27);
  if (v8 == (void *)(v14 + 8 * v15))
  {
    LODWORD(v16) = (v7 & 0x7FFFFF) - 1;
    int v17 = *(_DWORD *)(*(void *)a1 + 44) & 0x7FFFFF;
    if (!v17) {
      return;
    }
  }
  else
  {
    *(void *)uint64_t v27 = *(void *)(*(void *)a1
                               + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1)
                               + 64);
    unint64_t v16 = ((unint64_t)v8
         - mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v27)) >> 3;
    int v17 = *(_DWORD *)(*(void *)a1 + 44) & 0x7FFFFF;
    if (!v17) {
      return;
    }
  }
  unsigned int v22 = *(_DWORD *)(a4 + 8);
  do
  {
    while (v22 < *(_DWORD *)(a4 + 12))
    {
      uint64_t v23 = *(void *)a4 + 12 * v22;
      *(_DWORD *)uint64_t v23 = 0;
      *(void *)(v23 + 4) = (v16 == 0) | 0x100000000;
      unsigned int v22 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v22;
      LODWORD(v16) = v16 - 1;
      if (!--v17) {
        return;
      }
    }
    *(_DWORD *)uint64_t v27 = 0;
    *(void *)&uint64_t v27[4] = (v16 == 0) | 0x100000000;
    uint64_t v24 = *(void *)v27;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v22 + 1, 12);
    uint64_t v25 = *(void *)a4 + 12 * *(unsigned int *)(a4 + 8);
    *(void *)uint64_t v25 = v24;
    *(_DWORD *)(v25 + 8) = 1;
    unsigned int v22 = *(_DWORD *)(a4 + 8) + 1;
    *(_DWORD *)(a4 + 8) = v22;
    LODWORD(v16) = v16 - 1;
    --v17;
  }
  while (v17);
}

uint64_t mlir::scf::IndexSwitchOp::fold(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  ConstantIntuint64_t Value = mlir::getConstantIntValue(*(void *)((*a1)[9] + 24) | 4);
  if (!v6) {
    return 0;
  }
  unint64_t v7 = ConstantIntValue;
  uint64_t v55 = (*a1)[2 * (((unint64_t)*((unsigned int *)*a1 + 11) >> 23) & 1) + 8];
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v55);
  unint64_t v8 = 0;
  unint64_t v10 = v9;
  if (v9)
  {
    while (1)
    {
      uint64_t v55 = (*a1)[2 * (((unint64_t)*((unsigned int *)*a1 + 11) >> 23) & 1) + 8];
      if (v7 == *(void *)(mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v55)
                           + 8 * v8))
        break;
      if (v10 == ++v8)
      {
        unint64_t v8 = v10;
        break;
      }
    }
  }
  uint64_t v55 = (*a1)[2 * (((unint64_t)*((unsigned int *)*a1 + 11) >> 23) & 1) + 8];
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v55);
  unint64_t v11 = *a1;
  unint64_t v12 = *((unsigned int *)*a1 + 11);
  if (v8 >= v13)
  {
    uint64_t v15 = (((unint64_t)&v11[2 * ((v12 >> 23) & 1) + 8] + ((v12 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)v11 + 10);
  }
  else
  {
    if ((v12 & 0x7FFFFF) != 0) {
      unint64_t v14 = (((unint64_t)&v11[2 * ((v12 >> 23) & 1) + 8] + ((v12 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
    }
          + 32 * *((unsigned int *)v11 + 10);
    else {
      unint64_t v14 = 0;
    }
    uint64_t v15 = v14 + 24 * v8 + 24;
  }
  uint64_t v16 = *(void *)(v15 + 8);
  if (v16) {
    uint64_t v17 = v16 - 8;
  }
  else {
    uint64_t v17 = 0;
  }
  mlir::Block::getTerminator((mlir::GenericProgramPoint **)v17);
  if ((*(unsigned char *)(v18 + 46) & 0x80) != 0)
  {
    uint64_t v19 = *(void *)(v18 + 72);
    mlir::Block::getTerminator((mlir::GenericProgramPoint **)v17);
    if ((*(unsigned char *)(v20 + 46) & 0x80) != 0) {
      goto LABEL_17;
    }
LABEL_30:
    unint64_t v22 = 0;
    unsigned int v24 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    uint64_t v23 = (_DWORD *)(a3 + 8);
    BOOL v25 = v19 != 0;
    goto LABEL_21;
  }
  uint64_t v19 = 0;
  mlir::Block::getTerminator((mlir::GenericProgramPoint **)v17);
  if ((*(unsigned char *)(v20 + 46) & 0x80) == 0) {
    goto LABEL_30;
  }
LABEL_17:
  uint64_t v21 = *(void *)(v20 + 72);
  unint64_t v22 = *(unsigned int *)(v20 + 68);
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t v23 = (_DWORD *)(a3 + 8);
  if (v22 <= *(_DWORD *)(a3 + 12))
  {
    unsigned int v24 = 0;
    BOOL v25 = v19 != v21;
    if (v22) {
      goto LABEL_31;
    }
    goto LABEL_21;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v22, 8);
  unsigned int v24 = *(_DWORD *)(a3 + 8);
  BOOL v25 = v19 != v21;
  if (!v22)
  {
LABEL_21:
    if (v25) {
      goto LABEL_31;
    }
    _DWORD *v23 = v24 + v22;
    uint64_t v26 = *a1;
    uint64_t v27 = (*a1)[2];
    if (v27) {
      goto LABEL_23;
    }
    return 0;
  }
LABEL_31:
  uint64_t v36 = *(void *)a3;
  uint64_t v37 = (uint64_t *)(*(void *)a3 + 8 * v24);
  if (v25)
  {
    for (uint64_t i = (uint64_t *)(v19 + 24); ; i += 4)
    {
      uint64_t v39 = *i;
      *v37++ = v39 | 4;
    }
  }
  if (v22 > 0xA
    && ((uint64_t v40 = v24, v41 = v36 + 8 * (v22 + v24), (unint64_t)v37 < v19 + 32 * v22)
      ? (BOOL v42 = v19 + 24 >= v41)
      : (BOOL v42 = 1),
        v42))
  {
    uint64_t v43 = v22 & 3;
    if ((v22 & 3) == 0) {
      uint64_t v43 = 4;
    }
    unint64_t v44 = v22 - v43;
    v37 += v44;
    uint64_t v45 = (const double *)(v19 + 88);
    long long v46 = (int8x16_t *)(v36 + 8 * v40 + 16);
    unint64_t v47 = v44;
    do
    {
      uint64_t v48 = v45 - 8;
      unsigned long long v49 = (unsigned __int128)vld4q_f64(v48);
      unsigned long long v50 = (unsigned __int128)vld4q_f64(v45);
      int8x16_t v51 = (int8x16_t)vdupq_n_s64(4uLL);
      v46[-1] = vorrq_s8((int8x16_t)v49, v51);
      *long long v46 = vorrq_s8((int8x16_t)v50, v51);
      v45 += 16;
      v46 += 2;
      v47 -= 4;
    }
    while (v47);
  }
  else
  {
    unint64_t v44 = 0;
  }
  unint64_t v52 = v22 - v44;
  uint64_t v53 = (uint64_t *)(v19 + 32 * v44 + 24);
  do
  {
    uint64_t v54 = *v53;
    v53 += 4;
    *v37++ = v54 | 4;
    --v52;
  }
  while (v52);
  *v23 += v22;
  uint64_t v26 = *a1;
  uint64_t v27 = (*a1)[2];
  if (!v27) {
    return 0;
  }
LABEL_23:
  uint64_t v29 = *(uint64_t **)(v17 + 32);
  uint64_t v28 = *(uint64_t **)(v17 + 40);
  uint64_t v30 = v17 + 32;
  if (v28 != v29 && v26 != v29)
  {
    llvm::ilist_traits<mlir::Operation>::transferNodesFromList(v27 + 32, v30, (uint64_t)v28, (uint64_t)v29);
    uint64_t v32 = *v29;
    uint64_t v33 = *v28;
    *(void *)(v33 + 8) = v29;
    uint64_t *v29 = v33;
    uint64_t v34 = *v26;
    *(void *)(v32 + 8) = v26;
    *uint64_t v28 = v34;
    *(void *)(v34 + 8) = v28;
    *uint64_t v26 = v32;
  }
  return 1;
}

uint64_t mlir::scf::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "scf.condition", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength(mlir::scf::detail::ConditionOpGenericAdaptorBase *this, unsigned int a2, int a3)
{
  if (a2)
  {
    if (a2 >= 8)
    {
      int32x4_t v5 = (int32x4_t)xmmword_1810FFF10;
      unsigned int v4 = a2 & 0xFFFFFFF8;
      int32x4_t v6 = 0uLL;
      v7.i64[0] = 0x300000003;
      v7.i64[1] = 0x300000003;
      v8.i64[0] = 0x800000008;
      v8.i64[1] = 0x800000008;
      unsigned int v9 = a2 & 0xFFFFFFF8;
      int32x4_t v10 = 0uLL;
      do
      {
        int32x4_t v6 = vsubq_s32(v6, vtstq_s32(v5, v5));
        int32x4_t v10 = vsubq_s32(v10, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v5, v7)));
        int32x4_t v5 = vaddq_s32(v5, v8);
        v9 -= 8;
      }
      while (v9);
      int v3 = vaddvq_s32(vaddq_s32(v10, v6));
      if (v4 == a2) {
        goto LABEL_11;
      }
    }
    else
    {
      int v3 = 0;
      unsigned int v4 = 0;
    }
    do
    {
      if (v4) {
        ++v3;
      }
      ++v4;
    }
    while (a2 != v4);
  }
  else
  {
    int v3 = 0;
  }
LABEL_11:
  LODWORD(v11) = a3 - 1;
  uint64_t v12 = a2 + v3 * (a3 - 2);
  if (a2) {
    uint64_t v11 = v11;
  }
  else {
    uint64_t v11 = 1;
  }
  return v12 | (v11 << 32);
}

void mlir::scf::ConditionOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  mlir::OperationState::addOperands(a2, a6, a7);
  uint64_t v12 = *(unsigned int *)(a2 + 72);
  if (a4 + v12 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v12, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  if (a4)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(a2 + 64) + 8 * v12;
    do
    {
      *(void *)(v14 + 8 * v13) = mlir::TypeRange::dereference_iterator(a3, v13);
      ++v13;
    }
    while (a4 != v13);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v12 + a4;
}

BOOL mlir::scf::ConditionOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v15[4] = *MEMORY[0x1E4F143B8];
  memset(v15, 0, 24);
  uint64_t v12 = v14;
  uint64_t v13 = 0x400000000;
  v10[0] = &v11;
  v10[1] = (void *)0x100000000;
  BOOL v8 = (*(unsigned __int8 (**)(void))(*(void *)a1 + 264))()
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v15, 1))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v12, 0, 1, 0xFFFFFFFFLL))&& (!v13|| (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)&& mlir::AsmParser::parseTypeList(a1, (uint64_t)v10))&& (int32x4_t v5 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1), IntegerType = mlir::Builder::getIntegerType(v5, 1u), v7 = a2 + 16, (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v15, IntegerType, v7))&& mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v12,
                          (uint64_t)v10,
                          v4,
                          v7) != 0;
  if (v10[0] != &v11) {
    free(v10[0]);
  }
  if (v12 != v14) {
    free(v12);
  }
  return v8;
}

void mlir::scf::ConditionOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v38[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int32x4_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "(", 1uLL);
  }
  else
  {
    *int32x4_t v5 = 40;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  int32x4_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ")", 1uLL);
  }
  else
  {
    unsigned char *v7 = 41;
    ++*((void *)v6 + 4);
  }
  uint64_t v36 = v38;
  uint64_t v37 = 0x200000000;
  BOOL v8 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v8);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v8 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v11, v36, v37);
  if ((*((unsigned char *)*this + 46) & 0x80) == 0 || *((_DWORD *)*this + 17) != 1)
  {
    uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if ((unint64_t)v13 >= *((void *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((void *)v12 + 4) = v13 + 1;
      *uint64_t v13 = 32;
    }
    uint64_t v14 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v15 = *((unsigned int *)v14 + 17);
      uint64_t v16 = *((void *)v14 + 9);
      uint64_t v17 = v15 - 1;
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = -1;
    }
    uint64_t v18 = v16 + 32;
    uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t AttrDictionary = ", ";
    uint64_t v32 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v18, 0, v18, v17, (uint64_t)a2, v19, (uint64_t)&AttrDictionary);
    uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
    if ((unint64_t)v21 >= *((void *)v20 + 3))
    {
      llvm::raw_ostream::write(v20, 32);
    }
    else
    {
      *((void *)v20 + 4) = v21 + 1;
      *uint64_t v21 = 32;
    }
    unint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v23 = (unsigned char *)*((void *)v22 + 4);
    if (*((unsigned char **)v22 + 3) == v23)
    {
      llvm::raw_ostream::write(v22, ":", 1uLL);
    }
    else
    {
      unsigned char *v23 = 58;
      ++*((void *)v22 + 4);
    }
    unsigned int v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    BOOL v25 = (unsigned char *)*((void *)v24 + 4);
    if ((unint64_t)v25 >= *((void *)v24 + 3))
    {
      llvm::raw_ostream::write(v24, 32);
    }
    else
    {
      *((void *)v24 + 4) = v25 + 1;
      *BOOL v25 = 32;
    }
    uint64_t v26 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v27 = *((unsigned int *)v26 + 17);
      uint64_t v28 = *((void *)v26 + 9);
      uint64_t v29 = v27 - 1;
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = -1;
    }
    v30[0] = v28 + 32;
    v30[1] = v29;
    mlir::OperandRange::getTypes(v30, (uint64_t *)&AttrDictionary);
    v35[0] = ", ";
    v35[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)AttrDictionary, v32, v33, v34, (uint64_t)a2, (uint64_t)a2, (uint64_t)v35);
  }
  if (v36 != v38) {
    free(v36);
  }
}

uint64_t mlir::scf::detail::ForOpGenericAdaptorBase::ForOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "scf.for", 7, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(mlir::scf::detail::ForOpGenericAdaptorBase *this, unsigned int a2, int a3)
{
  if (a2)
  {
    if (a2 >= 8)
    {
      int32x4_t v5 = (int32x4_t)xmmword_1810FFF10;
      unsigned int v4 = a2 & 0xFFFFFFF8;
      int32x4_t v6 = 0uLL;
      v7.i64[0] = 0x300000003;
      v7.i64[1] = 0x300000003;
      v8.i64[0] = -1;
      v8.i64[1] = -1;
      v9.i64[0] = 0x800000008;
      v9.i64[1] = 0x800000008;
      unsigned int v10 = a2 & 0xFFFFFFF8;
      int32x4_t v11 = 0uLL;
      do
      {
        int32x4_t v6 = vsubq_s32(v6, vceqq_s32(v5, v7));
        int32x4_t v11 = vsubq_s32(v11, vceqq_s32(v5, v8));
        int32x4_t v5 = vaddq_s32(v5, v9);
        v10 -= 8;
      }
      while (v10);
      int v3 = vaddvq_s32(vaddq_s32(v11, v6));
      if (v4 == a2) {
        goto LABEL_11;
      }
    }
    else
    {
      int v3 = 0;
      unsigned int v4 = 0;
    }
    do
    {
      if (v4 == 3) {
        ++v3;
      }
      ++v4;
    }
    while (a2 != v4);
  }
  else
  {
    int v3 = 0;
  }
LABEL_11:
  LODWORD(v12) = a3 - 3;
  uint64_t v13 = a2 + v3 * (a3 - 4);
  if (a2 == 3) {
    uint64_t v12 = v12;
  }
  else {
    uint64_t v12 = 1;
  }
  return v13 | (v12 << 32);
}

BOOL mlir::scf::ForOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)|| !mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*this, *(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 2u))
  {
    return 0;
  }
  uint64_t v2 = *this;
  uint64_t v3 = *((unsigned int *)*this + 9);
  if (*((_DWORD *)*this + 9)) {
    uint64_t v4 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i);
    uint64_t v2 = *this;
  }
  int32x4_t v6 = (void *)v2[9];
  unint64_t v7 = *(void *)(v6[3] + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v7 == (*(void *)(v6[7] + 8) & 0xFFFFFFFFFFFFFFF8)
    && v7 == (*(void *)(v6[11] + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v2, (((unint64_t)&v2[2 * (((unint64_t)*((unsigned int *)v2 + 11) >> 23) & 1) + 8]+ ((*((_DWORD *)v2 + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v2 + 10), (uint64_t)"region", 6, 0) != 0;
  }
  uint64_t v18 = (const void **)"failed to verify that all of {lowerBound, upperBound, step} have same type";
  __int16 v19 = 259;
  mlir::OpState::emitOpError(this, &v18, (uint64_t)v20);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v20);
  if (v20[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v20);
  }
  if (v27)
  {
    int32x4_t v9 = (void **)__p;
    if (__p)
    {
      unsigned int v10 = v26;
      int32x4_t v11 = __p;
      if (v26 != __p)
      {
        do
          unsigned int v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        int32x4_t v11 = __p;
      }
      uint64_t v26 = v9;
      operator delete(v11);
    }
    uint64_t v12 = v23;
    if (v23)
    {
      uint64_t v13 = v24;
      uint64_t v14 = v23;
      if (v24 != v23)
      {
        do
        {
          uint64_t v16 = (void *)*--v13;
          uint64_t v15 = v16;
          *uint64_t v13 = 0;
          if (v16) {
            operator delete[](v15);
          }
        }
        while (v13 != v12);
        uint64_t v14 = v23;
      }
      unsigned int v24 = v12;
      operator delete(v14);
    }
    if (v21 != &v22) {
      free(v21);
    }
  }
  return v8;
}

uint64_t mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v49 = a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v49)) {
    return 1;
  }
  __int16 v48 = 261;
  v47[0] = a3;
  v47[1] = a4;
  mlir::Operation::emitOpError(a1, v47, (uint64_t)v53);
  if (v53[0])
  {
    int v50 = 3;
    int8x16_t v51 = " #";
    uint64_t v52 = 2;
    unsigned int v10 = &v50;
    int32x4_t v11 = (char *)v54;
    if (v55 >= v56)
    {
      unint64_t v37 = v55 + 1;
      if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
      {
        int64_t v43 = (char *)&v50 - (unsigned char *)v54;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
        int32x4_t v11 = (char *)v54;
        unsigned int v10 = (int *)((char *)v54 + v43);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
        unsigned int v10 = &v50;
        int32x4_t v11 = (char *)v54;
      }
    }
    uint64_t v12 = &v11[24 * v55];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    uint64_t v14 = ++v55;
    if (v53[0])
    {
      int v50 = 5;
      int8x16_t v51 = (const char *)a5;
      uint64_t v15 = &v50;
      uint64_t v16 = (char *)v54;
      if (v14 >= v56)
      {
        unint64_t v38 = v14 + 1;
        BOOL v39 = (char *)v54 + 24 * v14 > (char *)&v50;
        if (v54 <= &v50 && v39)
        {
          int64_t v44 = (char *)&v50 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          uint64_t v16 = (char *)v54;
          uint64_t v15 = (int *)((char *)v54 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          uint64_t v15 = &v50;
          uint64_t v16 = (char *)v54;
        }
      }
      uint64_t v17 = &v16[24 * v55];
      long long v18 = *(_OWORD *)v15;
      *((void *)v17 + 2) = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v17 = v18;
      uint64_t v19 = ++v55;
      if (v53[0])
      {
        int v50 = 3;
        int8x16_t v51 = " must be signless integer or index, but got ";
        uint64_t v52 = 44;
        uint64_t v20 = &v50;
        uint64_t v21 = (char *)v54;
        if (v19 >= v56)
        {
          unint64_t v40 = v19 + 1;
          BOOL v41 = (char *)v54 + 24 * v19 > (char *)&v50;
          if (v54 <= &v50 && v41)
          {
            int64_t v45 = (char *)&v50 - (unsigned char *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
            uint64_t v21 = (char *)v54;
            uint64_t v20 = (int *)((char *)v54 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
            uint64_t v20 = &v50;
            uint64_t v21 = (char *)v54;
          }
        }
        uint64_t v22 = &v21[24 * v55];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = *((void *)v20 + 2);
        *(_OWORD *)uint64_t v22 = v23;
        ++v55;
        if (v53[0])
        {
          unsigned int v24 = &v50;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, v49);
          BOOL v25 = (char *)v54;
          if (v55 >= v56)
          {
            unint64_t v42 = v55 + 1;
            if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
            {
              int64_t v46 = (char *)&v50 - (unsigned char *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
              BOOL v25 = (char *)v54;
              unsigned int v24 = (int *)((char *)v54 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
              unsigned int v24 = &v50;
              BOOL v25 = (char *)v54;
            }
          }
          uint64_t v26 = &v25[24 * v55];
          long long v27 = *(_OWORD *)v24;
          *((void *)v26 + 2) = *((void *)v24 + 2);
          *(_OWORD *)uint64_t v26 = v27;
          ++v55;
        }
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  }
  if (v62)
  {
    uint64_t v28 = (void **)__p;
    if (__p)
    {
      uint64_t v29 = v61;
      uint64_t v30 = __p;
      if (v61 != __p)
      {
        do
          uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        uint64_t v30 = __p;
      }
      uint64_t v61 = v28;
      operator delete(v30);
    }
    unsigned int v31 = v58;
    if (v58)
    {
      uint64_t v32 = v59;
      uint64_t v33 = v58;
      if (v59 != v58)
      {
        do
        {
          uint64_t v35 = (void *)*--v32;
          uint64_t v34 = v35;
          *uint64_t v32 = 0;
          if (v35) {
            operator delete[](v34);
          }
        }
        while (v32 != v31);
        uint64_t v33 = v58;
      }
      uint64_t v59 = v31;
      operator delete(v33);
    }
    if (v54 != v57) {
      free(v54);
    }
  }
  return v9;
}

uint64_t mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a2 + 8);
  if (v8 != a2 && *(void *)(v8 + 8) == a2) {
    return 1;
  }
  uint64_t v35 = (const void **)"region #";
  __int16 v36 = 259;
  mlir::Operation::emitOpError(a1, &v35, (uint64_t)&v40);
  if (v40)
  {
    LODWORD(v33[0]) = 5;
    v33[1] = (const void **)a5;
    uint64_t v9 = v33;
    unsigned int v10 = (char *)v42;
    if (v43 >= v44)
    {
      unint64_t v27 = v43 + 1;
      if (v42 <= v33 && (char *)v42 + 24 * v43 > (char *)v33)
      {
        int64_t v29 = (char *)v33 - (unsigned char *)v42;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v27, 24);
        unsigned int v10 = (char *)v42;
        uint64_t v9 = (const void ***)((char *)v42 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v27, 24);
        uint64_t v9 = v33;
        unsigned int v10 = (char *)v42;
      }
    }
    int32x4_t v11 = &v10[24 * v43];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)int32x4_t v11 = v12;
    ++v43;
  }
  if (a4)
  {
    __int16 v32 = 1283;
    v31[0] = " ('";
    uint64_t v31[2] = a3;
    v31[3] = a4;
    v33[0] = (const void **)v31;
    unint64_t v33[2] = (const void **)"') ";
    __int16 v34 = 770;
    if (!v40) {
      goto LABEL_13;
    }
LABEL_10:
    mlir::Diagnostic::operator<<((uint64_t)&v41, v33);
    if (v40)
    {
      int v37 = 3;
      unint64_t v38 = "failed to verify constraint: region with 1 blocks";
      uint64_t v39 = 49;
      long long v13 = &v37;
      uint64_t v14 = (char *)v42;
      if (v43 >= v44)
      {
        unint64_t v28 = v43 + 1;
        if (v42 <= &v37 && (char *)v42 + 24 * v43 > (char *)&v37)
        {
          int64_t v30 = (char *)&v37 - (unsigned char *)v42;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v28, 24);
          uint64_t v14 = (char *)v42;
          long long v13 = (int *)((char *)v42 + v30);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v28, 24);
          long long v13 = &v37;
          uint64_t v14 = (char *)v42;
        }
      }
      uint64_t v15 = &v14[24 * v43];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = *((void *)v13 + 2);
      *(_OWORD *)uint64_t v15 = v16;
      ++v43;
    }
    goto LABEL_13;
  }
  v33[0] = (const void **)" ";
  __int16 v34 = 259;
  if (v40) {
    goto LABEL_10;
  }
LABEL_13:
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v40);
  if (v40) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
  }
  if (v50)
  {
    long long v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v49;
      uint64_t v20 = __p;
      if (v49 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v49 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v46;
    if (v46)
    {
      uint64_t v22 = v47;
      long long v23 = v46;
      if (v47 != v46)
      {
        do
        {
          BOOL v25 = (void *)*--v22;
          unsigned int v24 = v25;
          void *v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        long long v23 = v46;
      }
      unint64_t v47 = v21;
      operator delete(v23);
    }
    if (v42 != v45) {
      free(v42);
    }
  }
  return v17;
}

BOOL mlir::scf::ForallOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v111 = v6;
  if (!v6)
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      uint64_t v113 = "expected DictionaryAttr to set properties";
      uint64_t v114 = 41;
      uint64_t v26 = (uint64_t *)&v112;
      unint64_t v27 = (char *)v116;
      if (v117 >= v118)
      {
        unint64_t v93 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          int64_t v102 = (char *)&v112 - (unsigned char *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v93, 24);
          unint64_t v27 = (char *)v116;
          uint64_t v26 = (uint64_t *)((char *)v116 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v93, 24);
          uint64_t v26 = (uint64_t *)&v112;
          unint64_t v27 = (char *)v116;
        }
      }
      unint64_t v28 = &v27[24 * v117];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)unint64_t v28 = v29;
      ++v117;
      if (v115[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
      }
    }
    if (!v124) {
      return 0;
    }
    int64_t v30 = (void **)__p;
    if (__p)
    {
      unsigned int v31 = v123;
      __int16 v32 = __p;
      if (v123 != __p)
      {
        do
          unsigned int v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        __int16 v32 = __p;
      }
      unint64_t v123 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v120;
    if (!v120) {
      goto LABEL_122;
    }
    uint64_t v33 = v121;
    long long v23 = v120;
    if (v121 == v120)
    {
LABEL_121:
      unint64_t v121 = v21;
      operator delete(v23);
LABEL_122:
      if (v116 != v119) {
        free(v116);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      __int16 v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_120:
    long long v23 = v120;
    goto LABEL_121;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v111, "mapping", 7uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    {
      a3(v115, a4);
      if (v115[0])
      {
        LODWORD(v112) = 3;
        uint64_t v114 = 52;
        unsigned int v10 = (uint64_t *)&v112;
        int32x4_t v11 = (char *)v116;
        if (v117 >= v118)
        {
          unint64_t v94 = v117 + 1;
          if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
          {
            int64_t v103 = (char *)&v112 - (unsigned char *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v94, 24);
            int32x4_t v11 = (char *)v116;
            unsigned int v10 = (uint64_t *)((char *)v116 + v103);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v94, 24);
            unsigned int v10 = (uint64_t *)&v112;
            int32x4_t v11 = (char *)v116;
          }
        }
        long long v12 = &v11[24 * v117];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)long long v12 = v13;
        ++v117;
        if (v115[0])
        {
          uint64_t v14 = (uint64_t *)&v112;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v112, v9);
          uint64_t v15 = (char *)v116;
          if (v117 >= v118)
          {
            unint64_t v95 = v117 + 1;
            if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
            {
              int64_t v104 = (char *)&v112 - (unsigned char *)v116;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v95, 24);
              uint64_t v15 = (char *)v116;
              uint64_t v14 = (uint64_t *)((char *)v116 + v104);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v95, 24);
              uint64_t v14 = (uint64_t *)&v112;
              uint64_t v15 = (char *)v116;
            }
          }
          long long v16 = &v15[24 * v117];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)long long v16 = v17;
          ++v117;
          if (v115[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
          }
        }
      }
      if (!v124) {
        return 0;
      }
      long long v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v123;
        uint64_t v20 = __p;
        if (v123 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        unint64_t v123 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v120;
      if (!v120) {
        goto LABEL_122;
      }
      uint64_t v22 = v121;
      long long v23 = v120;
      if (v121 == v120) {
        goto LABEL_121;
      }
      do
      {
        BOOL v25 = (void *)*--v22;
        unsigned int v24 = v25;
        void *v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_120;
    }
    *a1 = v8;
  }
  __int16 v36 = (void *)mlir::DictionaryAttr::get((uint64_t)&v111, "staticLowerBound", 0x10uLL);
  if (!v36)
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      uint64_t v113 = "expected key entry for staticLowerBound in DictionaryAttr to set Properties.";
      uint64_t v114 = 76;
      unsigned int v44 = (uint64_t *)&v112;
      int64_t v45 = (char *)v116;
      if (v117 >= v118)
      {
        unint64_t v96 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          int64_t v105 = (char *)&v112 - (unsigned char *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v96, 24);
          int64_t v45 = (char *)v116;
          unsigned int v44 = (uint64_t *)((char *)v116 + v105);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v96, 24);
          unsigned int v44 = (uint64_t *)&v112;
          int64_t v45 = (char *)v116;
        }
      }
      int64_t v46 = &v45[24 * v117];
      long long v47 = *(_OWORD *)v44;
      *((void *)v46 + 2) = v44[2];
      *(_OWORD *)int64_t v46 = v47;
      ++v117;
      if (v115[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
      }
    }
    if (!v124) {
      return 0;
    }
    __int16 v48 = (void **)__p;
    if (__p)
    {
      uint64_t v49 = v123;
      char v50 = __p;
      if (v123 != __p)
      {
        do
          uint64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
        while (v49 != v48);
        char v50 = __p;
      }
      unint64_t v123 = v48;
      operator delete(v50);
    }
    uint64_t v21 = v120;
    if (!v120) {
      goto LABEL_122;
    }
    uint64_t v51 = v121;
    long long v23 = v120;
    if (v121 == v120) {
      goto LABEL_121;
    }
    do
    {
      uint64_t v53 = (void *)*--v51;
      uint64_t v52 = v53;
      void *v51 = 0;
      if (v53) {
        operator delete[](v52);
      }
    }
    while (v51 != v21);
    goto LABEL_120;
  }
  uint64_t v37 = (uint64_t)v36;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v36))
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      uint64_t v114 = 61;
      uint64_t v54 = (uint64_t *)&v112;
      unsigned int v55 = (char *)v116;
      if (v117 >= v118)
      {
        unint64_t v97 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          int64_t v106 = (char *)&v112 - (unsigned char *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v97, 24);
          unsigned int v55 = (char *)v116;
          uint64_t v54 = (uint64_t *)((char *)v116 + v106);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v97, 24);
          uint64_t v54 = (uint64_t *)&v112;
          unsigned int v55 = (char *)v116;
        }
      }
      unsigned int v56 = &v55[24 * v117];
      long long v57 = *(_OWORD *)v54;
      *((void *)v56 + 2) = v54[2];
      *(_OWORD *)unsigned int v56 = v57;
      ++v117;
      if (v115[0])
      {
        uint64_t v58 = (uint64_t *)&v112;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v112, v37);
        uint64_t v59 = (char *)v116;
        if (v117 >= v118)
        {
          unint64_t v98 = v117 + 1;
          if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
          {
            int64_t v107 = (char *)&v112 - (unsigned char *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v98, 24);
            uint64_t v59 = (char *)v116;
            uint64_t v58 = (uint64_t *)((char *)v116 + v107);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v98, 24);
            uint64_t v58 = (uint64_t *)&v112;
            uint64_t v59 = (char *)v116;
          }
        }
        unint64_t v60 = &v59[24 * v117];
        long long v61 = *(_OWORD *)v58;
        *((void *)v60 + 2) = v58[2];
        *(_OWORD *)unint64_t v60 = v61;
        ++v117;
        if (v115[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
        }
      }
    }
    if (!v124) {
      return 0;
    }
    char v62 = (void **)__p;
    if (__p)
    {
      uint64_t v63 = v123;
      uint64_t v64 = __p;
      if (v123 != __p)
      {
        do
          uint64_t v63 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v63 - 1);
        while (v63 != v62);
        uint64_t v64 = __p;
      }
      unint64_t v123 = v62;
      operator delete(v64);
    }
    uint64_t v21 = v120;
    if (!v120) {
      goto LABEL_122;
    }
    long long v65 = v121;
    long long v23 = v120;
    if (v121 == v120) {
      goto LABEL_121;
    }
    do
    {
      uint64_t v67 = (void *)*--v65;
      int64_t v66 = v67;
      *long long v65 = 0;
      if (v67) {
        operator delete[](v66);
      }
    }
    while (v65 != v21);
    goto LABEL_120;
  }
  a1[1] = v37;
  unint64_t v38 = (void *)mlir::DictionaryAttr::get((uint64_t)&v111, "staticStep", 0xAuLL);
  if (!v38)
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      uint64_t v113 = "expected key entry for staticStep in DictionaryAttr to set Properties.";
      uint64_t v114 = 70;
      unint64_t v68 = (uint64_t *)&v112;
      uint64_t v69 = (char *)v116;
      if (v117 >= v118)
      {
        unint64_t v99 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          int64_t v108 = (char *)&v112 - (unsigned char *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v99, 24);
          uint64_t v69 = (char *)v116;
          unint64_t v68 = (uint64_t *)((char *)v116 + v108);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v99, 24);
          unint64_t v68 = (uint64_t *)&v112;
          uint64_t v69 = (char *)v116;
        }
      }
      long long v70 = &v69[24 * v117];
      long long v71 = *(_OWORD *)v68;
      *((void *)v70 + 2) = v68[2];
      *(_OWORD *)long long v70 = v71;
      ++v117;
      if (v115[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
      }
    }
    if (!v124) {
      return 0;
    }
    uint64_t v72 = (void **)__p;
    if (__p)
    {
      unint64_t v73 = v123;
      __int16 v74 = __p;
      if (v123 != __p)
      {
        do
          unint64_t v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
        while (v73 != v72);
        __int16 v74 = __p;
      }
      unint64_t v123 = v72;
      operator delete(v74);
    }
    uint64_t v21 = v120;
    if (!v120) {
      goto LABEL_122;
    }
    uint64_t v75 = v121;
    long long v23 = v120;
    if (v121 == v120) {
      goto LABEL_121;
    }
    do
    {
      uint64_t v77 = (void *)*--v75;
      long long v76 = v77;
      void *v75 = 0;
      if (v77) {
        operator delete[](v76);
      }
    }
    while (v75 != v21);
    goto LABEL_120;
  }
  uint64_t v39 = (uint64_t)v38;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v38))
  {
    a3(v115, a4);
    if (v115[0])
    {
      LODWORD(v112) = 3;
      uint64_t v114 = 55;
      unint64_t v78 = (uint64_t *)&v112;
      uint64_t v79 = (char *)v116;
      if (v117 >= v118)
      {
        unint64_t v100 = v117 + 1;
        if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
        {
          int64_t v109 = (char *)&v112 - (unsigned char *)v116;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v100, 24);
          uint64_t v79 = (char *)v116;
          unint64_t v78 = (uint64_t *)((char *)v116 + v109);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v100, 24);
          unint64_t v78 = (uint64_t *)&v112;
          uint64_t v79 = (char *)v116;
        }
      }
      unint64_t v80 = &v79[24 * v117];
      long long v81 = *(_OWORD *)v78;
      *((void *)v80 + 2) = v78[2];
      *(_OWORD *)unint64_t v80 = v81;
      ++v117;
      if (v115[0])
      {
        unsigned int v82 = (uint64_t *)&v112;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v112, v39);
        unint64_t v83 = (char *)v116;
        if (v117 >= v118)
        {
          unint64_t v101 = v117 + 1;
          if (v116 <= &v112 && (char *)v116 + 24 * v117 > (char *)&v112)
          {
            int64_t v110 = (char *)&v112 - (unsigned char *)v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v101, 24);
            unint64_t v83 = (char *)v116;
            unsigned int v82 = (uint64_t *)((char *)v116 + v110);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v119, v101, 24);
            unsigned int v82 = (uint64_t *)&v112;
            unint64_t v83 = (char *)v116;
          }
        }
        uint64_t v84 = &v83[24 * v117];
        long long v85 = *(_OWORD *)v82;
        *((void *)v84 + 2) = v82[2];
        *(_OWORD *)uint64_t v84 = v85;
        ++v117;
        if (v115[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v115);
        }
      }
    }
    if (!v124) {
      return 0;
    }
    unint64_t v86 = (void **)__p;
    if (__p)
    {
      uint64_t v87 = v123;
      char v88 = __p;
      if (v123 != __p)
      {
        do
          uint64_t v87 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v87 - 1);
        while (v87 != v86);
        char v88 = __p;
      }
      unint64_t v123 = v86;
      operator delete(v88);
    }
    uint64_t v21 = v120;
    if (!v120) {
      goto LABEL_122;
    }
    uint64_t v89 = v121;
    long long v23 = v120;
    if (v121 == v120) {
      goto LABEL_121;
    }
    do
    {
      uint64_t v91 = (void *)*--v89;
      long long v90 = v91;
      void *v89 = 0;
      if (v91) {
        operator delete[](v90);
      }
    }
    while (v89 != v21);
    goto LABEL_120;
  }
  a1[2] = v39;
  uint64_t v40 = (void *)mlir::DictionaryAttr::get((uint64_t)&v111, "staticUpperBound", 0x10uLL);
  unint64_t v112 = v40;
  if (!v40)
  {
    a3(v115, a4);
    mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v115, "expected key entry for staticUpperBound in DictionaryAttr to set Properties.");
LABEL_128:
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v115);
    return 0;
  }
  uint64_t v41 = v40;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v40))
  {
    a3(v115, a4);
    mlir::InFlightDiagnostic::append<mlir::Attribute>(v92, (uint64_t *)&v112);
    goto LABEL_128;
  }
  a1[3] = (uint64_t)v41;
  unint64_t v42 = (void *)mlir::DictionaryAttr::get((uint64_t)&v111, "operandSegmentSizes", 0x13uLL);
  if (!v42)
  {
    unint64_t v42 = (void *)mlir::DictionaryAttr::get((uint64_t)&v111, "operand_segment_sizes", 0x15uLL);
    if (!v42)
    {
      a3(v115, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v115, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
      goto LABEL_128;
    }
  }
  return mlir::convertFromAttribute(a1 + 4, (const char *)4, v42, a3, a4) != 0;
}

uint64_t mlir::scf::ForallOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v41[6] = *MEMORY[0x1E4F143B8];
  unint64_t v38 = a1;
  uint64_t v39 = v41;
  uint64_t v40 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v38, (uint64_t)"mapping", 7, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v7 = v40;
    }
    uint64_t v8 = (uint64_t *)((char *)v39 + 16 * v7);
    *uint64_t v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v9 = a2[1];
  if (v9)
  {
    uint64_t v10 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"staticLowerBound", 16, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v13 = v40;
    }
    uint64_t v14 = (uint64_t *)((char *)v39 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"staticStep", 10, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v19 = v40;
    }
    uint64_t v20 = (uint64_t *)((char *)v39 + 16 * v19);
    *uint64_t v20 = v16;
    v20[1] = v18;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"staticUpperBound", 16, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v25 = v40;
    }
    uint64_t v26 = (uint64_t *)((char *)v39 + 16 * v25);
    *uint64_t v26 = v22;
    v26[1] = v24;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v27 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);
  uint64_t v28 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"operandSegmentSizes", 19, v27);
  uint64_t v30 = v29;
  unsigned int v31 = v40;
  if (v40 >= HIDWORD(v40))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
    unsigned int v31 = v40;
  }
  __int16 v32 = (uint64_t *)((char *)v39 + 16 * v31);
  *__int16 v32 = v28;
  v32[1] = v30;
  BOOL v33 = __CFADD__(v40, 1);
  uint64_t v34 = (v40 + 1);
  LODWORD(v40) = v40 + 1;
  if (v33)
  {
    uint64_t DictionaryAttr = 0;
    __int16 v36 = v39;
    if (v39 == v41) {
      return DictionaryAttr;
    }
    goto LABEL_24;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v38, (uint64_t *)v39, v34);
  __int16 v36 = v39;
  if (v39 != v41) {
LABEL_24:
  }
    free(v36);
  return DictionaryAttr;
}

unint64_t mlir::scf::ForallOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = 0x1E8EB8000uLL;
  {
    unint64_t v33 = v1;
    uint64_t v37 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v19 = v18;
    unint64_t v1 = v33;
    a1 = v37;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      unint64_t v1 = v33;
      a1 = v37;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v3 = HIDWORD(v1);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v1) ^ HIDWORD(v1));
  unint64_t v46 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v5 = a1[1];
  {
    unint64_t v34 = v5;
    unint64_t v38 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v22 = v21;
    unint64_t v5 = v34;
    a1 = v38;
    if (v22)
    {
      unint64_t v23 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v23 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v23;
      unint64_t v5 = v34;
      a1 = v38;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v5) ^ HIDWORD(v5));
  unint64_t v45 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v8 = a1[2];
  {
    unint64_t v35 = v8;
    uint64_t v39 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v25 = v24;
    unint64_t v8 = v35;
    a1 = v39;
    if (v25)
    {
      unint64_t v26 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v26 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v26;
      unint64_t v8 = v35;
      a1 = v39;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v9 = HIDWORD(v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v8) ^ HIDWORD(v8));
  unint64_t v44 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  unint64_t v11 = a1[3];
  {
    unint64_t v36 = v11;
    uint64_t v40 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v28 = v27;
    unint64_t v11 = v36;
    a1 = v40;
    if (v28)
    {
      unint64_t v29 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v29 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v29;
      unint64_t v11 = v36;
      a1 = v40;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v12 = HIDWORD(v11);
  unint64_t v13 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v11) ^ HIDWORD(v11));
  unint64_t v43 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) >> 47));
  {
    uint64_t v41 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v31 = v30;
    a1 = v41;
    if (v31)
    {
      unint64_t v32 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v32 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v32;
      unint64_t v2 = 0x1E8EB8000;
      a1 = v41;
    }
  }
  unint64_t v14 = a1[5];
  uint64_t v15 = __ROR8__(v14 + 16, 16);
  unint64_t v16 = 0x9DDFEA08EB382D69 * (a1[4] ^ *(void *)(v2 + 3024) ^ v15);
  unint64_t v42 = (0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v15 ^ (v16 >> 47) ^ v16)) ^ ((0x9DDFEA08EB382D69 * (v15 ^ (v16 >> 47) ^ v16)) >> 47))) ^ v14;
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v46, (uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42);
}

uint64_t mlir::scf::ForallOp::getInherentAttr(mlir::MLIRContext *a1, void *a2, _DWORD *__s1, size_t __n)
{
  uint64_t result = 0;
  switch(__n)
  {
    case 7uLL:
      if (*__s1 != 1886413165 || *(_DWORD *)((char *)__s1 + 3) != 1735289200) {
        goto LABEL_14;
      }
      return *a2;
    case 8uLL:
    case 9uLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_14;
    case 0xAuLL:
      if (memcmp(__s1, "staticStep", __n)) {
        goto LABEL_14;
      }
      return a2[2];
    case 0x10uLL:
      if (!memcmp(__s1, "staticLowerBound", __n))
      {
        uint64_t result = a2[1];
      }
      else if (!memcmp(__s1, "staticUpperBound", __n))
      {
        uint64_t result = a2[3];
      }
      else
      {
LABEL_14:
        uint64_t result = 0;
      }
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n)) {
        goto LABEL_14;
      }
      goto LABEL_16;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n)) {
        goto LABEL_14;
      }
LABEL_16:
      uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::scf::ForallOp::setInherentAttr(uint64_t result, _DWORD *__s1, size_t __n, void *a4)
{
  unint64_t v7 = (void *)result;
  switch(__n)
  {
    case 7uLL:
      if (*__s1 == 1886413165 && *(_DWORD *)((char *)__s1 + 3) == 1735289200)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
            unint64_t v13 = a4;
          }
          else {
            unint64_t v13 = 0;
          }
          *(void *)uint64_t result = v13;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xAuLL:
      uint64_t result = memcmp(__s1, "staticStep", __n);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if (result) {
            unint64_t v9 = a4;
          }
          else {
            unint64_t v9 = 0;
          }
          uint64_t v7[2] = v9;
        }
        else
        {
          uint64_t v7[2] = 0;
        }
      }
      break;
    case 0x10uLL:
      uint64_t result = memcmp(__s1, "staticLowerBound", __n);
      if (result)
      {
        uint64_t result = memcmp(__s1, "staticUpperBound", __n);
        if (!result)
        {
          if (a4)
          {
            uint64_t result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
            if (result) {
              unint64_t v10 = a4;
            }
            else {
              unint64_t v10 = 0;
            }
            v7[3] = v10;
          }
          else
          {
            v7[3] = 0;
          }
        }
      }
      else if (a4)
      {
        uint64_t result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
        if (result) {
          unint64_t v14 = a4;
        }
        else {
          unint64_t v14 = 0;
        }
        v7[1] = v14;
      }
      else
      {
        v7[1] = 0;
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "operandSegmentSizes", __n);
      if (!result) {
        goto LABEL_23;
      }
      break;
    case 0x15uLL:
      uint64_t result = memcmp(__s1, "operand_segment_sizes", __n);
      if (!result)
      {
LABEL_23:
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          unint64_t v11 = result ? a4 : 0;
          uint64_t v15 = v11;
          if (result)
          {
            uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v15);
            if (result == 4)
            {
              uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v15);
              if (v12) {
                uint64_t result = (uint64_t)memmove(v7 + 4, (const void *)result, 4 * v12);
              }
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::scf::ForallOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"mapping", 7, *a2);
  }
  uint64_t v6 = a2[1];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"staticLowerBound", 16, v6);
  }
  uint64_t v7 = a2[2];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"staticStep", 10, v7);
  }
  uint64_t v8 = a2[3];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"staticUpperBound", 16, v8);
  }
  uint64_t v9 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v9);
}

BOOL mlir::scf::ForallOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::scf::__mlir_ods_local_attr_constraint_SCFOps1(v8, (const void **)"mapping", (const char *)7, a3, a4))
  {
    uint64_t v9 = (void *)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v9, (const void **)"staticLowerBound", (const char *)0x10, a3, a4))
    {
      unint64_t v10 = (void *)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v10, (const void **)"staticStep", (const char *)0xA, a3, a4))
      {
        unint64_t v11 = (void *)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v11, (const void **)"staticUpperBound", (const char *)0x10, a3, a4))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t mlir::scf::__mlir_ods_local_attr_constraint_SCFOps1(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    uint64_t v39 = a1;
    uint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    uint64_t v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    unint64_t v29 = (void *)(v27 + 8 * v28);
    if (v29 != Value)
    {
      while (*Value && mlir::detail::InterfaceMap::lookup<mlir::DeviceMappingAttrInterface>(*(void *)*Value + 8))
      {
        if (++Value == v29) {
          return 1;
        }
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v39, a5);
  if (v39)
  {
    LODWORD(v35) = 3;
    unint64_t v36 = "attribute '";
    uint64_t v37 = 11;
    uint64_t v9 = &v35;
    unint64_t v10 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v31 = v42 + 1;
      if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
      {
        int64_t v33 = (char *)&v35 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        unint64_t v10 = (char *)v41;
        uint64_t v9 = (const void ***)((char *)v41 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        uint64_t v9 = &v35;
        unint64_t v10 = (char *)v41;
      }
    }
    unint64_t v11 = &v10[24 * v42];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)unint64_t v11 = v12;
    ++v42;
    if (v39)
    {
      __int16 v38 = 261;
      unint64_t v35 = a2;
      unint64_t v36 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v40, &v35);
      if (v39)
      {
        LODWORD(v35) = 3;
        unint64_t v36 = "' failed to satisfy constraint: Device Mapping array attribute";
        uint64_t v37 = 62;
        unint64_t v13 = &v35;
        unint64_t v14 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v32 = v42 + 1;
          if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
          {
            int64_t v34 = (char *)&v35 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            unint64_t v14 = (char *)v41;
            unint64_t v13 = (const void ***)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            unint64_t v13 = &v35;
            unint64_t v14 = (char *)v41;
          }
        }
        uint64_t v15 = &v14[24 * v42];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)uint64_t v15 = v16;
        ++v42;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  if (v39) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  }
  if (v49)
  {
    int v18 = (void **)__p;
    if (__p)
    {
      int v19 = v48;
      unint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        unint64_t v20 = __p;
      }
      __int16 v48 = v18;
      operator delete(v20);
    }
    int v21 = v45;
    if (v45)
    {
      int v22 = v46;
      unint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          int v25 = (void *)*--v22;
          int v24 = v25;
          void *v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        unint64_t v23 = v45;
      }
      unint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v17;
}

BOOL mlir::scf::ForallOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3)) {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 5)
    {
      uint64_t v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        unint64_t v4 = (void **)__p;
        if (__p)
        {
          unint64_t v5 = v24;
          uint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              unint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            uint64_t v6 = __p;
          }
          int v24 = v4;
          operator delete(v6);
        }
        uint64_t v7 = v21;
        if (v21)
        {
          uint64_t v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              unint64_t v11 = (void *)*--v8;
              unint64_t v10 = v11;
              *uint64_t v8 = 0;
              if (v11) {
                operator delete[](v10);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          int v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    long long v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 4, v12, 4 * v13);
    }
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 1)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 2)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 3)&& ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6|| mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 8, (const char *)4));
}