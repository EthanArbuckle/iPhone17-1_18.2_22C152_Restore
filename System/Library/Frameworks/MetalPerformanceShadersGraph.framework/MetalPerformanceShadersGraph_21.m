BOOL mlir::mps::LSTMGradientOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v7[4];
  __int16 v8;
  uint64_t v9;
  void v10[25];

  v10[24] = *MEMORY[0x1E4F143B8];
  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::RNNActivationAttr>(a1, v3)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::RNNActivationAttr>(a1, v3 + 1)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::LSTMGateLayoutAttr>(a1, v3 + 2)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::RNNActivationAttr>(a1, v3 + 3)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::RNNActivationAttr>(a1, v3 + 4))
  {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    v9 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v9)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v9) >= 11)
    {
      v7[0] = (uint64_t)"size mismatch for operand/result_segment_size";
      v8 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 16))(v10, a1, v7);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v10);
      return 0;
    }
    v4 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v9);
    if (v5) {
      memmove(v3 + 6, v4, 4 * v5);
    }
  }
  if (mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::RNNActivationAttr>(a1, v3 + 5))
  {
    v7[0] = a1;
    v7[1] = (uint64_t)(v3 + 6);
    return mlir::mps::LSTMGradientOp::readProperties(mlir::DialectBytecodeReader &,mlir::OperationState &)::$_0::operator()(v7) != 0;
  }
  return 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    v3 = operator new(0x58uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    v3[3] = 0u;
    v3[4] = 0u;
    *((void *)v3 + 10) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 113;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[85];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::LSTMGateLayoutAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::LSTMGateLayoutAttr]";
  unint64_t v41 = 79;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          v15 = (char *)v46;
        }
      }
      v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v47;
      if (v44)
      {
        v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v19 = (char *)v46;
            v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v18 = &v40;
            v19 = (char *)v46;
          }
        }
        v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    v23 = (void **)__p;
    if (__p)
    {
      v24 = v53;
      v25 = __p;
      if (v53 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v53 = v23;
      operator delete(v25);
    }
    v26 = v50;
    if (v50)
    {
      v27 = v51;
      v28 = v50;
      if (v51 != v50)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        v28 = v50;
      }
      v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::mps::LSTMGradientOp::readProperties(mlir::DialectBytecodeReader &,mlir::OperationState &)::$_0::operator()(uint64_t *a1)
{
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)*a1 + 40))(*a1) < 6) {
    return 1;
  }
  uint64_t v2 = *a1;
  v3 = (_DWORD *)a1[1];

  return mlir::DialectBytecodeReader::readSparseArray<int>(v2, v3, (const char *)0xA);
}

uint64_t mlir::mps::LSTMGradientOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)v4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 8));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 16));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 24));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 32));
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) <= 5)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
    uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 48, 10);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 40));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 48), 10);
  }
  return result;
}

void mlir::mps::LSTMGradientOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, BOOL a18)
{
  BOOL v20 = a18;
  v72[2] = *MEMORY[0x1E4F143B8];
  uint64_t v65 = a4;
  uint64_t v66 = a3;
  uint64_t v63 = a6;
  uint64_t v64 = a5;
  uint64_t v61 = a14;
  uint64_t v62 = a13;
  uint64_t v59 = a16;
  uint64_t v60 = a15;
  BOOL v57 = a18;
  uint64_t v58 = a17;
  mlir::OperationState::addOperands(a2, (uint64_t)&v66, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v65, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v64, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v63, 1);
  if (a13) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v62, 1);
  }
  if (a14) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v61, 1);
  }
  if (a15) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v60, 1);
  }
  if (a16) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v59, 1);
  }
  if (a17) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v58, 1);
  }
  if (a18)
  {
    mlir::OperationState::addOperands(a2, (uint64_t)&v57, 1);
    BOOL v20 = v57;
  }
  BOOL v21 = v62 != 0;
  BOOL v22 = v61 != 0;
  BOOL v23 = v60 != 0;
  BOOL v24 = v59 != 0;
  BOOL v25 = v58 != 0;
  uint64_t v26 = mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties>((void *)a2);
  *(void *)&long long v27 = 0x100000001;
  *((void *)&v27 + 1) = 0x100000001;
  *(_OWORD *)(v26 + 48) = v27;
  *(_DWORD *)(v26 + 64) = v21;
  *(_DWORD *)(v26 + 68) = v22;
  *(_DWORD *)(v26 + 72) = v23;
  *(_DWORD *)(v26 + 76) = v24;
  *(_DWORD *)(v26 + 80) = v25;
  *(_DWORD *)(v26 + 84) = v20;
  v28 = *a1;
  unsigned int v67 = a7;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v28);
  v70 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v71 = (uint64_t)v28;
  uint64_t v30 = mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v70, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v67);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 24) = v30;
  v31 = *a1;
  unsigned int v67 = a8;
  unint64_t v32 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v31);
  v70 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v71 = (uint64_t)v31;
  uint64_t v33 = mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v32, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v70, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v67);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = v33;
  unint64_t v34 = *a1;
  unsigned int v67 = a9;
  int64_t v35 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v34);
  v70 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v71 = (uint64_t)v34;
  uint64_t v36 = mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v35, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v70, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v67);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 40) = v36;
  int64_t v37 = *a1;
  unsigned int v67 = a10;
  v38 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v37);
  v70 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v71 = (uint64_t)v37;
  uint64_t v39 = mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v38, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v70, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v67);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 32) = v39;
  v40 = *a1;
  unsigned int v67 = a11;
  unint64_t v41 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v40);
  v70 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v71 = (uint64_t)v40;
  uint64_t v42 = mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v41, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v70, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v67);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties>((void *)a2) = v42;
  __int16 v43 = *a1;
  unsigned int v67 = a12;
  uint64_t v44 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v43);
  v70 = &mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id;
  uint64_t v71 = (uint64_t)v43;
  uint64_t v45 = mlir::StorageUniquer::get<mlir::mps::detail::LSTMGateLayoutAttrStorage,mlir::mps::LSTMGateLayout>(v44, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail25LSTMGateLayoutAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_18LSTMGateLayoutAttrEJNS2_14LSTMGateLayoutEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v70, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id, &v67);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = v45;
  v70 = v72;
  uint64_t v71 = 0x200000000;
  uint64_t v46 = *(void *)a2;
  mlir::ValueRange::ValueRange(v69, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  v49 = *(long long **)(a2 + 256);
  v50 = mlir::ValueRange::ValueRange(v68, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::LSTMGradientOp::inferReturnTypes((uint64_t)v50, v46, 1, v69[0], v69[1], Dictionary, v49, v51, v68[0], v68[1], (uint64_t)&v70))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  v52 = v70;
  }
  uint64_t v53 = v71;
  uint64_t v54 = *(unsigned int *)(a2 + 72);
  if (v54 + (unint64_t)v71 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v54 + v71, 8);
    LODWORD(v54) = *(_DWORD *)(a2 + 72);
  }
  if (v53)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v54), v52, 8 * v53);
    LODWORD(v54) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v54 + v53;
  if (v70 != v72) {
    free(v70);
  }
}

mlir::MLIRContext *mlir::mps::LSTMGradientOp::populateDefaultProperties(uint64_t a1, mlir::MLIRContext **a2)
{
  uint64_t v12 = *(void **)(a1 + 8);
  uint64_t result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  unint64_t v4 = result;
  if (a2[3])
  {
    if (a2[1]) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int v11 = 3;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(result);
    uint64_t v12 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
    unint64_t v13 = v4;
    uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v12, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v11);
    a2[3] = result;
    if (a2[1])
    {
LABEL_3:
      if (a2[5]) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  unsigned int v11 = 3;
  uint64_t v6 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v4);
  uint64_t v12 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  unint64_t v13 = v4;
  uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v6, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v12, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v11);
  a2[1] = result;
  if (a2[5])
  {
LABEL_4:
    if (a2[4]) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  unsigned int v11 = 2;
  unint64_t v7 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v4);
  uint64_t v12 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  unint64_t v13 = v4;
  uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v7, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v12, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v11);
  a2[5] = result;
  if (a2[4])
  {
LABEL_5:
    if (*a2) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  unsigned int v11 = 3;
  v8 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v4);
  uint64_t v12 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  unint64_t v13 = v4;
  uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v8, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v12, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v11);
  a2[4] = result;
  if (*a2)
  {
LABEL_6:
    if (a2[2]) {
      return result;
    }
LABEL_13:
    unsigned int v11 = 0;
    unint64_t v10 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v4);
    uint64_t v12 = &mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id;
    unint64_t v13 = v4;
    uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::LSTMGateLayoutAttrStorage,mlir::mps::LSTMGateLayout>(v10, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail25LSTMGateLayoutAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_18LSTMGateLayoutAttrEJNS2_14LSTMGateLayoutEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v12, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id, &v11);
    a2[2] = result;
    return result;
  }
LABEL_12:
  unsigned int v11 = 2;
  long long v9 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v4);
  uint64_t v12 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  unint64_t v13 = v4;
  uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v9, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v12, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v11);
  *a2 = result;
  if (!a2[2]) {
    goto LABEL_13;
  }
  return result;
}

uint64_t mlir::mps::LSTMGradientOp::verifyInvariantsImpl(uint64_t **this)
{
  v122[24] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    v3 = 0;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v7 = v3[2];
  uint64_t v6 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  v122[0] = v2;
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v6, (const void **)"igate_activation", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v122))return 0; {
  v122[0] = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v5, (const void **)"fgate_activation", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v122))return 0; {
  v122[0] = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v9, (const void **)"zgate_activation", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v122))return 0; {
  v122[0] = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v8, (const void **)"ogate_activation", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v122))return 0; {
  v122[0] = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v4, (const void **)"cell_activation", (const char *)0xF, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v122))return 0; {
  v122[0] = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps30(v7, (const void **)"gate_layout", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps30(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v122))return 0; {
  unsigned int v121 = 0;
  }
  unint64_t v10 = *((unsigned int *)*this + 11);
  uint64_t v11 = (uint64_t)&(*this)[2 * ((v10 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(unsigned int *)(v11 + 48);
  if ((v10 & 0x800000) != 0)
  {
    uint64_t v13 = (*this)[9];
    if (v12) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v13 = 0;
    if (v12)
    {
LABEL_14:
      uint64_t v14 = v13 + 24;
      do
      {
        v15 = *this;
        unint64_t v16 = *(void *)(*(void *)v14 + 8) & 0xFFFFFFFFFFFFFFF8;
        unsigned int v17 = v121++;
        if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v15, v16, (const void **)"operand", (const void **)7, v17))return 0; {
        v14 += 32;
        }
      }
      while (--v12);
    }
  }
  uint64_t ODSOperands = mlir::mps::GRUGradientOp::getODSOperands((mlir::mps::GRUGradientOp *)this, 1u);
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = ODSOperands + 24;
    do
    {
      BOOL v22 = *this;
      unint64_t v23 = *(void *)(*(void *)v21 + 8) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v24 = v121++;
      if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v22, v23, (const void **)"operand", (const void **)7, v24))return 0; {
      v21 += 32;
      }
    }
    while (--v20);
  }
  uint64_t v25 = mlir::mps::GRUGradientOp::getODSOperands((mlir::mps::GRUGradientOp *)this, 2u);
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = v25 + 24;
    do
    {
      v29 = *this;
      unint64_t v30 = *(void *)(*(void *)v28 + 8) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v31 = v121++;
      if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v29, v30, (const void **)"operand", (const void **)7, v31))return 0; {
      v28 += 32;
      }
    }
    while (--v27);
  }
  uint64_t v32 = mlir::mps::GRUGradientOp::getODSOperands((mlir::mps::GRUGradientOp *)this, 3u);
  if (v33)
  {
    uint64_t v34 = v33;
    uint64_t v35 = v32 + 24;
    do
    {
      uint64_t v36 = *this;
      unint64_t v37 = *(void *)(*(void *)v35 + 8) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v38 = v121++;
      if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v36, v37, (const void **)"operand", (const void **)7, v38))return 0; {
      v35 += 32;
      }
    }
    while (--v34);
  }
  uint64_t v39 = mlir::mps::GRUGradientOp::getODSOperands((mlir::mps::GRUGradientOp *)this, 4u);
  uint64_t v41 = v40;
  if (v40 >= 2) {
    goto LABEL_45;
  }
  if (v40)
  {
    uint64_t v42 = *(void *)(v39 + 24);
    __int16 v43 = *this;
    unint64_t v44 = *(void *)(v42 + 8) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v45 = v121++;
    if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v43, v44, (const void **)"operand", (const void **)7, v45))return 0; {
  }
    }
  uint64_t v46 = mlir::mps::GRUGradientOp::getODSOperands((mlir::mps::GRUGradientOp *)this, 5u);
  uint64_t v41 = v47;
  if (v47 < 2)
  {
    if (v47)
    {
      uint64_t v48 = *(void *)(v46 + 24);
      v49 = *this;
      unint64_t v50 = *(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v51 = v121++;
      if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v49, v50, (const void **)"operand", (const void **)7, v51))return 0; {
    }
      }
    uint64_t v52 = mlir::mps::GRUGradientOp::getODSOperands((mlir::mps::GRUGradientOp *)this, 6u);
    uint64_t v41 = v53;
    if (v53 < 2)
    {
      if (v53)
      {
        uint64_t v54 = *(void *)(v52 + 24);
        uint64_t v55 = *this;
        unint64_t v56 = *(void *)(v54 + 8) & 0xFFFFFFFFFFFFFFF8;
        unsigned int v57 = v121++;
        if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v55, v56, (const void **)"operand", (const void **)7, v57))return 0; {
      }
        }
      uint64_t v58 = mlir::mps::GRUGradientOp::getODSOperands((mlir::mps::GRUGradientOp *)this, 7u);
      uint64_t v41 = v59;
      if (v59 < 2)
      {
        if (v59)
        {
          uint64_t v60 = *(void *)(v58 + 24);
          uint64_t v61 = *this;
          unint64_t v62 = *(void *)(v60 + 8) & 0xFFFFFFFFFFFFFFF8;
          unsigned int v63 = v121++;
          if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v61, v62, (const void **)"operand", (const void **)7, v63))return 0; {
        }
          }
        uint64_t v64 = mlir::mps::GRUGradientOp::getODSOperands((mlir::mps::GRUGradientOp *)this, 8u);
        uint64_t v41 = v65;
        if (v65 < 2)
        {
          if (!v65
            || (uint64_t v66 = *(void *)(v64 + 24),
                unsigned int v67 = *this,
                v68 = (const void **)(*(void *)(v66 + 8) & 0xFFFFFFFFFFFFFFF8),
                unsigned int v69 = v121,
                ++v121,
                mlir::mps::__mlir_ods_local_type_constraint_MPSOps31(v67, v68, (const void **)"operand", 7, v69)))
          {
            uint64_t v70 = mlir::mps::GRUGradientOp::getODSOperands((mlir::mps::GRUGradientOp *)this, 9u);
            uint64_t v41 = v71;
            if (v71 >= 2) {
              goto LABEL_45;
            }
            if (!v71
              || (uint64_t v76 = *(void *)(v70 + 24),
                  v77 = *this,
                  unint64_t v78 = *(void *)(v76 + 8) & 0xFFFFFFFFFFFFFFF8,
                  unsigned int v79 = v121,
                  ++v121,
                  mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v77, v78, (const void **)"operand", (const void **)7, v79)))
            {
              unsigned int v121 = 0;
              uint64_t ODSResults = mlir::mps::LSTMGradientOp::getODSResults((mlir::mps::LSTMGradientOp *)this, 0);
              if (v81)
              {
                uint64_t v82 = ODSResults;
                uint64_t v83 = v81;
                uint64_t v84 = 0;
                while (1)
                {
                  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v82, v84);
                  v86 = *this;
                  unint64_t v87 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
                  unsigned int v121 = v84 + 1;
                  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v86, v87, (const void **)"result", (const void **)6, v84))break; {
                  if (v83 == ++v84)
                  }
                    goto LABEL_57;
                }
              }
              else
              {
                LODWORD(v84) = 0;
LABEL_57:
                uint64_t v88 = mlir::mps::LSTMGradientOp::getODSResults((mlir::mps::LSTMGradientOp *)this, 1u);
                if (v89)
                {
                  uint64_t v90 = v88;
                  uint64_t v91 = v89;
                  uint64_t v92 = 0;
                  while (1)
                  {
                    uint64_t v93 = mlir::detail::OpResultImpl::getNextResultAtOffset(v90, v92);
                    v94 = *this;
                    unint64_t v95 = *(void *)(v93 + 8) & 0xFFFFFFFFFFFFFFF8;
                    unsigned int v121 = v84 + v92 + 1;
                    if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v94, v95, (const void **)"result", (const void **)6, (int)v84 + (int)v92))break; {
                    if (v91 == ++v92)
                    }
                    {
                      LODWORD(v84) = v84 + v92;
                      goto LABEL_62;
                    }
                  }
                }
                else
                {
LABEL_62:
                  uint64_t v96 = mlir::mps::LSTMGradientOp::getODSResults((mlir::mps::LSTMGradientOp *)this, 2u);
                  if (v97)
                  {
                    uint64_t v98 = v96;
                    uint64_t v99 = v97;
                    uint64_t v100 = 0;
                    while (1)
                    {
                      uint64_t v101 = mlir::detail::OpResultImpl::getNextResultAtOffset(v98, v100);
                      v102 = *this;
                      unint64_t v103 = *(void *)(v101 + 8) & 0xFFFFFFFFFFFFFFF8;
                      unsigned int v121 = v84 + v100 + 1;
                      if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v102, v103, (const void **)"result", (const void **)6, (int)v84 + (int)v100))break; {
                      if (v99 == ++v100)
                      }
                      {
                        LODWORD(v84) = v84 + v100;
                        goto LABEL_67;
                      }
                    }
                  }
                  else
                  {
LABEL_67:
                    uint64_t v104 = mlir::mps::LSTMGradientOp::getODSResults((mlir::mps::LSTMGradientOp *)this, 3u);
                    if (v105)
                    {
                      uint64_t v106 = v104;
                      uint64_t v107 = v105;
                      uint64_t v108 = 0;
                      while (1)
                      {
                        uint64_t v109 = mlir::detail::OpResultImpl::getNextResultAtOffset(v106, v108);
                        v110 = *this;
                        unint64_t v111 = *(void *)(v109 + 8) & 0xFFFFFFFFFFFFFFF8;
                        unsigned int v121 = v84 + v108 + 1;
                        if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v110, v111, (const void **)"result", (const void **)6, (int)v84 + (int)v108))break; {
                        if (v107 == ++v108)
                        }
                        {
                          LODWORD(v84) = v84 + v108;
                          goto LABEL_72;
                        }
                      }
                    }
                    else
                    {
LABEL_72:
                      uint64_t v112 = mlir::mps::LSTMGradientOp::getODSResults((mlir::mps::LSTMGradientOp *)this, 4u);
                      uint64_t v114 = v113;
                      if (v113 >= 2)
                      {
                        v119[0] = (const void **)"result group starting at #";
                        __int16 v120 = 259;
                        mlir::OpState::emitOpError(this, v119, (uint64_t)v122);
                        uint64_t v115 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)v122, &v121);
                        uint64_t v73 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v115, " requires 0 or 1 element, but found ");
                        uint64_t v118 = v114;
                        goto LABEL_46;
                      }
                      if (!v113) {
                        return 1;
                      }
                      uint64_t v116 = mlir::detail::OpResultImpl::getNextResultAtOffset(v112, 0);
                      if (mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(v116 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, v84))return 1; {
                    }
                      }
                  }
                }
              }
            }
          }
          return 0;
        }
      }
    }
  }
LABEL_45:
  v119[0] = (const void **)"operand group starting at #";
  __int16 v120 = 259;
  mlir::OpState::emitOpError(this, v119, (uint64_t)v122);
  uint64_t v72 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)v122, &v121);
  uint64_t v73 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v72, " requires 0 or 1 element, but found ");
  uint64_t v118 = v41;
LABEL_46:
  uint64_t v74 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v73, &v118);
  uint64_t v75 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v74);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v122);
  return v75;
}

uint64_t mlir::mps::__mlir_ods_local_type_constraint_MPSOps31(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    goto LABEL_17;
  }
  v62[0] = a2;
  v62[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v10 + 8);
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v62)) {
    goto LABEL_17;
  }
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
  uint64_t v54 = a2;
  uint64_t v55 = v11;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v54);
  if (v12)
  {
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
    unint64_t v59 = a2;
    uint64_t v60 = v13;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
    if (v14 != 1) {
      goto LABEL_17;
    }
  }
  uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
  v57[0] = a2;
  v57[1] = v15;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v57);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange)
    || mlir::Type::isF32((mlir::Type *)&OperandRange)
    || mlir::Type::isBF16((mlir::Type *)&OperandRange)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    return 1;
  }
LABEL_17:
  __int16 v56 = 261;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  mlir::Operation::emitOpError(a1, &v54, (uint64_t)v62);
  if (v62[0])
  {
    LODWORD(v59) = 3;
    uint64_t v60 = (uint64_t)" #";
    uint64_t v61 = 2;
    unsigned int v17 = &v59;
    v18 = (char *)v63;
    if (v64 >= v65)
    {
      unint64_t v44 = v64 + 1;
      if (v63 <= &v59 && (char *)v63 + 24 * v64 > (char *)&v59)
      {
        int64_t v50 = (char *)&v59 - (unsigned char *)v63;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v44, 24);
        v18 = (char *)v63;
        unsigned int v17 = (const void ***)((char *)v63 + v50);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v44, 24);
        unsigned int v17 = &v59;
        v18 = (char *)v63;
      }
    }
    uint64_t v19 = &v18[24 * v64];
    long long v20 = *(_OWORD *)v17;
    *((void *)v19 + 2) = v17[2];
    *(_OWORD *)uint64_t v19 = v20;
    uint64_t v21 = ++v64;
    if (v62[0])
    {
      LODWORD(v59) = 5;
      uint64_t v60 = a5;
      BOOL v22 = &v59;
      unint64_t v23 = (char *)v63;
      if (v21 >= v65)
      {
        unint64_t v45 = v21 + 1;
        BOOL v46 = (char *)v63 + 24 * v21 > (char *)&v59;
        if (v63 <= &v59 && v46)
        {
          int64_t v51 = (char *)&v59 - (unsigned char *)v63;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v45, 24);
          unint64_t v23 = (char *)v63;
          BOOL v22 = (const void ***)((char *)v63 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v45, 24);
          BOOL v22 = &v59;
          unint64_t v23 = (char *)v63;
        }
      }
      unsigned int v24 = &v23[24 * v64];
      long long v25 = *(_OWORD *)v22;
      *((void *)v24 + 2) = v22[2];
      *(_OWORD *)unsigned int v24 = v25;
      uint64_t v26 = ++v64;
      if (v62[0])
      {
        LODWORD(v59) = 3;
        uint64_t v60 = (uint64_t)" must be 0D/1D tensor of floating point or int values, but got ";
        uint64_t v61 = 63;
        uint64_t v27 = &v59;
        uint64_t v28 = (char *)v63;
        if (v26 >= v65)
        {
          unint64_t v47 = v26 + 1;
          BOOL v48 = (char *)v63 + 24 * v26 > (char *)&v59;
          if (v63 <= &v59 && v48)
          {
            int64_t v52 = (char *)&v59 - (unsigned char *)v63;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v47, 24);
            uint64_t v28 = (char *)v63;
            uint64_t v27 = (const void ***)((char *)v63 + v52);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v47, 24);
            uint64_t v27 = &v59;
            uint64_t v28 = (char *)v63;
          }
        }
        v29 = &v28[24 * v64];
        long long v30 = *(_OWORD *)v27;
        *((void *)v29 + 2) = v27[2];
        *(_OWORD *)v29 = v30;
        ++v64;
        if (v62[0])
        {
          unsigned int v31 = &v59;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v59, (uint64_t)a2);
          uint64_t v32 = (char *)v63;
          if (v64 >= v65)
          {
            unint64_t v49 = v64 + 1;
            if (v63 <= &v59 && (char *)v63 + 24 * v64 > (char *)&v59)
            {
              int64_t v53 = (char *)&v59 - (unsigned char *)v63;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v49, 24);
              uint64_t v32 = (char *)v63;
              unsigned int v31 = (const void ***)((char *)v63 + v53);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v49, 24);
              unsigned int v31 = &v59;
              uint64_t v32 = (char *)v63;
            }
          }
          uint64_t v33 = &v32[24 * v64];
          long long v34 = *(_OWORD *)v31;
          *((void *)v33 + 2) = v31[2];
          *(_OWORD *)uint64_t v33 = v34;
          ++v64;
        }
      }
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v62);
  if (v62[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v62);
  }
  if (v71)
  {
    uint64_t v35 = (void **)__p;
    if (__p)
    {
      uint64_t v36 = v70;
      unint64_t v37 = __p;
      if (v70 != __p)
      {
        do
          uint64_t v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
        while (v36 != v35);
        unint64_t v37 = __p;
      }
      uint64_t v70 = v35;
      operator delete(v37);
    }
    unsigned int v38 = v67;
    if (v67)
    {
      uint64_t v39 = v68;
      unint64_t v40 = v67;
      if (v68 != v67)
      {
        do
        {
          uint64_t v42 = (void *)*--v39;
          uint64_t v41 = v42;
          *uint64_t v39 = 0;
          if (v42) {
            operator delete[](v41);
          }
        }
        while (v39 != v38);
        unint64_t v40 = v67;
      }
      v68 = v38;
      operator delete(v40);
    }
    if (v63 != v66) {
      free(v63);
    }
  }
  return v16;
}

uint64_t mlir::mps::LSTMGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.lstm_gradient", 17, v2, v3, 0, 0);
  void *v4 = &unk_1EC980440;
  v4[12] = mlir::mps::LSTMGradientOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::LSTMOp::getAsmResultNames(uint64_t *a1, void (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  if (*(_DWORD *)(*a1 + 36)) {
    uint64_t v5 = *a1 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  a2(a3, NextResultAtOffset, "result", 6);
  if (*(_DWORD *)(*a1 + 36)) {
    uint64_t v7 = *a1 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 1);
  uint64_t v9 = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
  a2(a3, v9, "output_cell", 11);
  uint64_t v10 = *a1;
  int v11 = *(_DWORD *)(*a1 + 36);
  uint64_t v12 = v10 - 16;
  if (v11) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t result = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 2);
  if (v11 != 2)
  {
    uint64_t v15 = mlir::detail::OpResultImpl::getNextResultAtOffset(result, 0);
    return ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))a2)(a3, v15, "training_state", 14);
  }
  return result;
}

uint64_t mlir::mps::LSTMOp::getODSResults(mlir::mps::LSTMOp *this, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 8)
    {
      int32x4_t v4 = (int32x4_t)xmmword_1810FFF10;
      unsigned int v3 = a2 & 0xFFFFFFF8;
      int32x4_t v5 = 0uLL;
      v6.i64[0] = 0x100000001;
      v6.i64[1] = 0x100000001;
      v7.i64[0] = 0x300000003;
      v7.i64[1] = 0x300000003;
      v8.i64[0] = 0x800000008;
      v8.i64[1] = 0x800000008;
      unsigned int v9 = a2 & 0xFFFFFFF8;
      int32x4_t v10 = 0uLL;
      do
      {
        int32x4_t v5 = vsubq_s32(v5, (int32x4_t)vcgtq_u32((uint32x4_t)v4, v6));
        int32x4_t v10 = vsubq_s32(v10, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)(*(_OWORD *)&v4 & __PAIR128__(0xFFFFFFFEFFFFFFFELL, 0xFFFFFFFEFFFFFFFELL)), v7)));
        int32x4_t v4 = vaddq_s32(v4, v8);
        v9 -= 8;
      }
      while (v9);
      int v2 = vaddvq_s32(vaddq_s32(v10, v5));
      if (v3 == a2) {
        goto LABEL_11;
      }
    }
    else
    {
      int v2 = 0;
      unsigned int v3 = 0;
    }
    do
    {
      if (v3 > 1) {
        ++v2;
      }
      ++v3;
    }
    while (a2 != v3);
  }
  else
  {
    int v2 = 0;
  }
LABEL_11:
  int v11 = *(_DWORD *)(*(void *)this + 36);
  if (v11) {
    uint64_t result = *(void *)this - 16;
  }
  else {
    uint64_t result = 0;
  }
  if (a2 + (v11 - 3) * v2) {
    return mlir::detail::OpResultImpl::getNextResultAtOffset(result, a2 + (v11 - 3) * v2);
  }
  return result;
}

uint64_t mlir::mps::LSTMOp::getCellClip(mlir::mps::LSTMOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  int v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    int v2 = 0;
  }
  int v3 = v2[20];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[19] + v2[18] + v2[17] + v2[16] + v2[15] + v2[14]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[19] + v2[18] + v2[17] + v2[16] + v2[15] + v2[14]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::LSTMOp::getTrainingState(mlir::mps::LSTMOp *this)
{
  int v1 = *(_DWORD *)(*(void *)this + 36);
  if (v1) {
    uint64_t v2 = *(void *)this - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 2);
  uint64_t v4 = 0;
  if (v1 != 2) {
    return mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0);
  }
  return v4;
}

BOOL mlir::mps::LSTMOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v71 = v6;
  if (!v6)
  {
    a3(v75, a4);
    if (v75[0])
    {
      LODWORD(v72) = 3;
      uint64_t v73 = "expected DictionaryAttr to set properties";
      uint64_t v74 = 41;
      uint64_t v26 = &v72;
      uint64_t v27 = (char *)v76;
      if (v77 >= v78)
      {
        unint64_t v61 = v77 + 1;
        if (v76 <= &v72 && (char *)v76 + 24 * v77 > (char *)&v72)
        {
          int64_t v66 = (char *)&v72 - (unsigned char *)v76;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v61, 24);
          uint64_t v27 = (char *)v76;
          uint64_t v26 = (uint64_t *)((char *)v76 + v66);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v61, 24);
          uint64_t v26 = &v72;
          uint64_t v27 = (char *)v76;
        }
      }
      uint64_t v28 = &v27[24 * v77];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)uint64_t v28 = v29;
      ++v77;
      if (v75[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v75);
      }
    }
    if (!v84) {
      return 0;
    }
    long long v30 = (void **)__p;
    if (__p)
    {
      unsigned int v31 = v83;
      uint64_t v32 = __p;
      if (v83 != __p)
      {
        do
          unsigned int v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      uint64_t v83 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v80;
    if (!v80) {
      goto LABEL_64;
    }
    uint64_t v33 = v81;
    unint64_t v23 = v80;
    if (v81 == v80)
    {
LABEL_63:
      uint64_t v81 = v21;
      operator delete(v23);
LABEL_64:
      if (v76 != v79) {
        free(v76);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      long long v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_62:
    unint64_t v23 = v80;
    goto LABEL_63;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v71, "cell_activation", 0xFuLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id)
    {
      a3(v75, a4);
      if (v75[0])
      {
        LODWORD(v72) = 3;
        uint64_t v74 = 60;
        int32x4_t v10 = &v72;
        int v11 = (char *)v76;
        if (v77 >= v78)
        {
          unint64_t v62 = v77 + 1;
          if (v76 <= &v72 && (char *)v76 + 24 * v77 > (char *)&v72)
          {
            int64_t v67 = (char *)&v72 - (unsigned char *)v76;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v62, 24);
            int v11 = (char *)v76;
            int32x4_t v10 = (uint64_t *)((char *)v76 + v67);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v62, 24);
            int32x4_t v10 = &v72;
            int v11 = (char *)v76;
          }
        }
        uint64_t v12 = &v11[24 * v77];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)uint64_t v12 = v13;
        ++v77;
        if (v75[0])
        {
          uint64_t v14 = &v72;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v72, v9);
          uint64_t v15 = (char *)v76;
          if (v77 >= v78)
          {
            unint64_t v63 = v77 + 1;
            if (v76 <= &v72 && (char *)v76 + 24 * v77 > (char *)&v72)
            {
              int64_t v68 = (char *)&v72 - (unsigned char *)v76;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v63, 24);
              uint64_t v15 = (char *)v76;
              uint64_t v14 = (uint64_t *)((char *)v76 + v68);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v63, 24);
              uint64_t v14 = &v72;
              uint64_t v15 = (char *)v76;
            }
          }
          uint64_t v16 = &v15[24 * v77];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)uint64_t v16 = v17;
          ++v77;
          if (v75[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v75);
          }
        }
      }
      if (!v84) {
        return 0;
      }
      v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v83;
        long long v20 = __p;
        if (v83 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          long long v20 = __p;
        }
        uint64_t v83 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v80;
      if (!v80) {
        goto LABEL_64;
      }
      BOOL v22 = v81;
      unint64_t v23 = v80;
      if (v81 == v80) {
        goto LABEL_63;
      }
      do
      {
        long long v25 = (void *)*--v22;
        unsigned int v24 = v25;
        *BOOL v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_62;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v71, "fgate_activation", 0x10uLL);
  if (v36)
  {
    uint64_t v37 = v36;
    if (*(_UNKNOWN **)(*(void *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id)
    {
      a3(v75, a4);
      if (v75[0])
      {
        LODWORD(v72) = 3;
        uint64_t v74 = 61;
        unsigned int v38 = &v72;
        uint64_t v39 = (char *)v76;
        if (v77 >= v78)
        {
          unint64_t v64 = v77 + 1;
          if (v76 <= &v72 && (char *)v76 + 24 * v77 > (char *)&v72)
          {
            int64_t v69 = (char *)&v72 - (unsigned char *)v76;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v64, 24);
            uint64_t v39 = (char *)v76;
            unsigned int v38 = (uint64_t *)((char *)v76 + v69);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v64, 24);
            unsigned int v38 = &v72;
            uint64_t v39 = (char *)v76;
          }
        }
        unint64_t v40 = &v39[24 * v77];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = v38[2];
        *(_OWORD *)unint64_t v40 = v41;
        ++v77;
        if (v75[0])
        {
          uint64_t v42 = &v72;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v72, v37);
          __int16 v43 = (char *)v76;
          if (v77 >= v78)
          {
            unint64_t v65 = v77 + 1;
            if (v76 <= &v72 && (char *)v76 + 24 * v77 > (char *)&v72)
            {
              int64_t v70 = (char *)&v72 - (unsigned char *)v76;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v65, 24);
              __int16 v43 = (char *)v76;
              uint64_t v42 = (uint64_t *)((char *)v76 + v70);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v65, 24);
              uint64_t v42 = &v72;
              __int16 v43 = (char *)v76;
            }
          }
          unint64_t v44 = &v43[24 * v77];
          long long v45 = *(_OWORD *)v42;
          *((void *)v44 + 2) = v42[2];
          *(_OWORD *)unint64_t v44 = v45;
          ++v77;
          if (v75[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v75);
          }
        }
      }
      if (!v84) {
        return 0;
      }
      BOOL v46 = (void **)__p;
      if (__p)
      {
        unint64_t v47 = v83;
        BOOL v48 = __p;
        if (v83 != __p)
        {
          do
            unint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          BOOL v48 = __p;
        }
        uint64_t v83 = v46;
        operator delete(v48);
      }
      uint64_t v21 = v80;
      if (!v80) {
        goto LABEL_64;
      }
      unint64_t v49 = v81;
      unint64_t v23 = v80;
      if (v81 == v80) {
        goto LABEL_63;
      }
      do
      {
        int64_t v51 = (void *)*--v49;
        int64_t v50 = v51;
        void *v49 = 0;
        if (v51) {
          operator delete[](v50);
        }
      }
      while (v49 != v21);
      goto LABEL_62;
    }
    a1[1] = v36;
  }
  uint64_t v52 = mlir::DictionaryAttr::get((uint64_t)&v71, "gate_layout", 0xBuLL);
  uint64_t v72 = v52;
  if (v52)
  {
    if (*(_UNKNOWN **)(*(void *)v52 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id)
    {
      a3(v75, a4);
LABEL_87:
      mlir::InFlightDiagnostic::append<mlir::Attribute>(v53, &v72);
LABEL_88:
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v75);
      return 0;
    }
    a1[2] = v52;
  }
  uint64_t v54 = mlir::DictionaryAttr::get((uint64_t)&v71, "igate_activation", 0x10uLL);
  uint64_t v72 = v54;
  if (v54)
  {
    if (*(_UNKNOWN **)(*(void *)v54 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id)
    {
      a3(v75, a4);
LABEL_86:
      uint64_t v53 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v75, v55);
      goto LABEL_87;
    }
    a1[3] = v54;
  }
  uint64_t v56 = mlir::DictionaryAttr::get((uint64_t)&v71, "ogate_activation", 0x10uLL);
  uint64_t v72 = v56;
  if (v56)
  {
    if (*(_UNKNOWN **)(*(void *)v56 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id)
    {
      a3(v75, a4);
      goto LABEL_86;
    }
    a1[4] = v56;
  }
  uint64_t v57 = mlir::DictionaryAttr::get((uint64_t)&v71, "training", 8uLL);
  uint64_t v72 = v57;
  if (v57)
  {
    if (*(_UNKNOWN **)(*(void *)v57 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v75, a4);
      goto LABEL_87;
    }
    a1[5] = v57;
  }
  uint64_t v58 = mlir::DictionaryAttr::get((uint64_t)&v71, "zgate_activation", 0x10uLL);
  uint64_t v72 = v58;
  if (v58)
  {
    if (*(_UNKNOWN **)(*(void *)v58 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id)
    {
      a3(v75, a4);
      goto LABEL_86;
    }
    a1[6] = v58;
  }
  uint64_t v60 = (void *)mlir::DictionaryAttr::get((uint64_t)&v71, "operandSegmentSizes", 0x13uLL);
  if (!v60)
  {
    uint64_t v60 = (void *)mlir::DictionaryAttr::get((uint64_t)&v71, "operand_segment_sizes", 0x15uLL);
    if (!v60)
    {
      a3(v75, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v75, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
      goto LABEL_88;
    }
  }
  return mlir::convertFromAttribute(a1 + 7, (const char *)7, v60, a3, a4) != 0;
}

uint64_t mlir::mps::LSTMOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v59[6] = *MEMORY[0x1E4F143B8];
  uint64_t v56 = a1;
  uint64_t v57 = v59;
  uint64_t v58 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v56, (uint64_t)"cell_activation", 15, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v58;
    if (v58 >= HIDWORD(v58))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v58 + 1, 16);
      unsigned int v7 = v58;
    }
    uint64_t v8 = (uint64_t *)((char *)v57 + 16 * v7);
    uint64_t *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v58) = v58 + 1;
  }
  uint64_t v9 = a2[1];
  if (v9)
  {
    uint64_t v10 = mlir::Builder::getNamedAttr(&v56, (uint64_t)"fgate_activation", 16, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v58;
    if (v58 >= HIDWORD(v58))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v58 + 1, 16);
      unsigned int v13 = v58;
    }
    uint64_t v14 = (uint64_t *)((char *)v57 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    LODWORD(v58) = v58 + 1;
  }
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v56, (uint64_t)"gate_layout", 11, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v58;
    if (v58 >= HIDWORD(v58))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v58 + 1, 16);
      unsigned int v19 = v58;
    }
    long long v20 = (uint64_t *)((char *)v57 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    LODWORD(v58) = v58 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v56, (uint64_t)"igate_activation", 16, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v58;
    if (v58 >= HIDWORD(v58))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v58 + 1, 16);
      unsigned int v25 = v58;
    }
    uint64_t v26 = (uint64_t *)((char *)v57 + 16 * v25);
    uint64_t *v26 = v22;
    v26[1] = v24;
    LODWORD(v58) = v58 + 1;
  }
  uint64_t v27 = a2[4];
  if (v27)
  {
    uint64_t v28 = mlir::Builder::getNamedAttr(&v56, (uint64_t)"ogate_activation", 16, v27);
    uint64_t v30 = v29;
    unsigned int v31 = v58;
    if (v58 >= HIDWORD(v58))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v58 + 1, 16);
      unsigned int v31 = v58;
    }
    uint64_t v32 = (uint64_t *)((char *)v57 + 16 * v31);
    *uint64_t v32 = v28;
    v32[1] = v30;
    LODWORD(v58) = v58 + 1;
  }
  uint64_t v33 = a2[5];
  if (v33)
  {
    uint64_t v34 = mlir::Builder::getNamedAttr(&v56, (uint64_t)"training", 8, v33);
    uint64_t v36 = v35;
    unsigned int v37 = v58;
    if (v58 >= HIDWORD(v58))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v58 + 1, 16);
      unsigned int v37 = v58;
    }
    unsigned int v38 = (uint64_t *)((char *)v57 + 16 * v37);
    *unsigned int v38 = v34;
    v38[1] = v36;
    LODWORD(v58) = v58 + 1;
  }
  uint64_t v39 = a2[6];
  if (v39)
  {
    uint64_t v40 = mlir::Builder::getNamedAttr(&v56, (uint64_t)"zgate_activation", 16, v39);
    uint64_t v42 = v41;
    unsigned int v43 = v58;
    if (v58 >= HIDWORD(v58))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v58 + 1, 16);
      unsigned int v43 = v58;
    }
    unint64_t v44 = (uint64_t *)((char *)v57 + 16 * v43);
    *unint64_t v44 = v40;
    v44[1] = v42;
    LODWORD(v58) = v58 + 1;
  }
  uint64_t v45 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 7), 7);
  uint64_t v46 = mlir::Builder::getNamedAttr(&v56, (uint64_t)"operandSegmentSizes", 19, v45);
  uint64_t v48 = v47;
  unsigned int v49 = v58;
  if (v58 >= HIDWORD(v58))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v58 + 1, 16);
    unsigned int v49 = v58;
  }
  int64_t v50 = (uint64_t *)((char *)v57 + 16 * v49);
  uint64_t *v50 = v46;
  v50[1] = v48;
  BOOL v51 = __CFADD__(v58, 1);
  uint64_t v52 = (v58 + 1);
  LODWORD(v58) = v58 + 1;
  if (v51)
  {
    uint64_t DictionaryAttr = 0;
    uint64_t v54 = v57;
    if (v57 == v59) {
      return DictionaryAttr;
    }
    goto LABEL_36;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v56, (uint64_t *)v57, v52);
  uint64_t v54 = v57;
  if (v57 != v59) {
LABEL_36:
  }
    free(v54);
  return DictionaryAttr;
}

unint64_t mlir::mps::LSTMOp::computePropertiesHash(unint64_t *a1)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *a1;
  unint64_t v2 = 0x1E8EB8000uLL;
  {
    v86 = a1;
    unint64_t v94 = v1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v33 = v32;
    a1 = v86;
    unint64_t v1 = v94;
    if (v33)
    {
      unint64_t v34 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v34 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v34;
      a1 = v86;
      unint64_t v1 = v94;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  uint64_t v3 = *(void *)(v2 + 3024);
  unint64_t v4 = a1[1];
  {
    unint64_t v87 = a1;
    unint64_t v95 = v1;
    uint64_t v70 = v3;
    unint64_t v78 = v4;
    uint64_t v3 = v70;
    unint64_t v4 = v78;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v36 = v35;
    a1 = v87;
    unint64_t v1 = v95;
    if (v36)
    {
      unint64_t v37 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v37 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v37;
      uint64_t v3 = v70;
      unint64_t v4 = v78;
      a1 = v87;
      unint64_t v1 = v95;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  uint64_t v5 = *(void *)(v2 + 3024);
  unint64_t v6 = a1[2];
  {
    uint64_t v88 = a1;
    unint64_t v96 = v1;
    uint64_t v71 = v3;
    unint64_t v79 = v4;
    unint64_t v58 = v6;
    uint64_t v63 = v5;
    unint64_t v6 = v58;
    uint64_t v5 = v63;
    uint64_t v3 = v71;
    unint64_t v4 = v79;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v39 = v38;
    a1 = v88;
    unint64_t v1 = v96;
    if (v39)
    {
      unint64_t v40 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v40 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v40;
      unint64_t v6 = v58;
      uint64_t v5 = v63;
      uint64_t v3 = v71;
      unint64_t v4 = v79;
      a1 = v88;
      unint64_t v1 = v96;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v7 = HIDWORD(v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v6) ^ HIDWORD(v6));
  unint64_t v108 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  unint64_t v9 = a1[3];
  {
    uint64_t v89 = a1;
    unint64_t v97 = v1;
    uint64_t v72 = v3;
    unint64_t v80 = v4;
    unint64_t v59 = v9;
    uint64_t v64 = v5;
    unint64_t v9 = v59;
    uint64_t v5 = v64;
    uint64_t v3 = v72;
    unint64_t v4 = v80;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v42 = v41;
    a1 = v89;
    unint64_t v1 = v97;
    if (v42)
    {
      unint64_t v43 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v43 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v43;
      unint64_t v9 = v59;
      uint64_t v5 = v64;
      uint64_t v3 = v72;
      unint64_t v4 = v80;
      a1 = v89;
      unint64_t v1 = v97;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v10 = HIDWORD(v9);
  unint64_t v11 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v9) ^ HIDWORD(v9));
  unint64_t v107 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47));
  unint64_t v12 = a1[4];
  {
    uint64_t v90 = a1;
    unint64_t v98 = v1;
    uint64_t v73 = v3;
    unint64_t v81 = v4;
    unint64_t v60 = v12;
    uint64_t v65 = v5;
    unint64_t v12 = v60;
    uint64_t v5 = v65;
    uint64_t v3 = v73;
    unint64_t v4 = v81;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v45 = v44;
    a1 = v90;
    unint64_t v1 = v98;
    if (v45)
    {
      unint64_t v46 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v46 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v46;
      unint64_t v12 = v60;
      uint64_t v5 = v65;
      uint64_t v3 = v73;
      unint64_t v4 = v81;
      a1 = v90;
      unint64_t v1 = v98;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v13 = HIDWORD(v12);
  unint64_t v14 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v12) ^ HIDWORD(v12));
  unint64_t v106 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) ^ ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) >> 47));
  unint64_t v15 = a1[5];
  {
    uint64_t v91 = a1;
    unint64_t v99 = v1;
    uint64_t v74 = v3;
    unint64_t v82 = v4;
    unint64_t v61 = v15;
    uint64_t v66 = v5;
    unint64_t v15 = v61;
    uint64_t v5 = v66;
    uint64_t v3 = v74;
    unint64_t v4 = v82;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v48 = v47;
    a1 = v91;
    unint64_t v1 = v99;
    if (v48)
    {
      unint64_t v49 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v49 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v49;
      unint64_t v15 = v61;
      uint64_t v5 = v66;
      uint64_t v3 = v74;
      unint64_t v4 = v82;
      a1 = v91;
      unint64_t v1 = v99;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v16 = HIDWORD(v15);
  unint64_t v17 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v15) ^ HIDWORD(v15));
  unint64_t v105 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v16 ^ (v17 >> 47) ^ v17)) ^ ((0x9DDFEA08EB382D69 * (v16 ^ (v17 >> 47) ^ v17)) >> 47));
  unint64_t v18 = a1[6];
  {
    uint64_t v92 = a1;
    unint64_t v100 = v1;
    uint64_t v75 = v3;
    unint64_t v83 = v4;
    unint64_t v62 = v18;
    uint64_t v67 = v5;
    unint64_t v18 = v62;
    uint64_t v5 = v67;
    uint64_t v3 = v75;
    unint64_t v4 = v83;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v51 = v50;
    a1 = v92;
    unint64_t v1 = v100;
    if (v51)
    {
      unint64_t v52 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v52 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v52;
      unint64_t v18 = v62;
      uint64_t v5 = v67;
      uint64_t v3 = v75;
      unint64_t v4 = v83;
      a1 = v92;
      unint64_t v1 = v100;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v19 = HIDWORD(v18);
  unint64_t v20 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v18) ^ HIDWORD(v18));
  unint64_t v104 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v19 ^ (v20 >> 47) ^ v20)) ^ ((0x9DDFEA08EB382D69 * (v19 ^ (v20 >> 47) ^ v20)) >> 47));
  {
    uint64_t v93 = a1;
    unint64_t v101 = v1;
    uint64_t v76 = v3;
    unint64_t v84 = v4;
    uint64_t v68 = v5;
    uint64_t v5 = v68;
    uint64_t v3 = v76;
    unint64_t v1 = v101;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v54 = v53;
    unint64_t v4 = v84;
    a1 = v93;
    if (v54)
    {
      unint64_t v55 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v55 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v55;
      uint64_t v5 = v68;
      uint64_t v3 = v76;
      unint64_t v4 = v84;
      a1 = v93;
      unint64_t v1 = v101;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  uint64_t v21 = *(void *)(v2 + 3024);
  unint64_t v22 = a1[8];
  unint64_t v23 = 0xB492B66FBE98F273 * a1[7];
  unint64_t v24 = 0x9AE16A3B2F90404FLL * *(unint64_t *)((char *)a1 + 76);
  uint64_t v25 = __ROR8__(v23 - v22, 43)
      - 0x3C5A37A36834CED9 * *(unint64_t *)((char *)a1 + 68)
      + __ROR8__(v24 ^ v21, 30);
  uint64_t v26 = v21 + __ROR8__(v22 ^ 0xC949D7C7509E6557, 20) + v23 - v24 + 28;
  unint64_t v103 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69
         * (v26 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v26)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v26)))) ^ ((0x9DDFEA08EB382D69 * (v26 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v26)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v26)))) >> 47));
  uint64_t v112 = 0;
  memset(v111, 0, sizeof(v111));
  memset(v110, 0, sizeof(v110));
  long long v109 = 0u;
  {
    unint64_t v102 = v1;
    uint64_t v77 = v3;
    unint64_t v85 = v4;
    uint64_t v69 = v5;
    uint64_t v5 = v69;
    uint64_t v3 = v77;
    unint64_t v4 = v85;
    unint64_t v1 = v102;
    unint64_t v2 = 0x1E8EB8000uLL;
    if (v56)
    {
      unint64_t v57 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v57 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v57;
      uint64_t v5 = v69;
      uint64_t v3 = v77;
      unint64_t v4 = v85;
      unint64_t v1 = v102;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v27 = 0x9DDFEA08EB382D69 * ((v5 + 8 * v4) ^ HIDWORD(v4));
  unint64_t v28 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v27 >> 47) ^ v27);
  unint64_t v29 = HIDWORD(v1);
  unint64_t v30 = 0x9DDFEA08EB382D69 * ((v3 + 8 * v1) ^ HIDWORD(v1));
  uint64_t v113 = *(void *)(v2 + 3024);
  *(void *)&long long v109 = 0x9DDFEA08EB382D69
                   * ((0x9DDFEA08EB382D69 * (v29 ^ (v30 >> 47) ^ v30)) ^ ((0x9DDFEA08EB382D69
                                                                           * (v29 ^ (v30 >> 47) ^ v30)) >> 47));
  *((void *)&v109 + 1) = 0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)&v109, 0, v110, (char *)v111, (uint64_t *)&v108, (uint64_t *)&v107, (uint64_t *)&v106, (uint64_t *)&v105, (uint64_t *)&v104, (uint64_t *)&v103);
}

uint64_t mlir::mps::LSTMOp::getInherentAttr(mlir::MLIRContext *a1, void *a2, char *__s1, size_t __n)
{
  uint64_t result = 0;
  switch(__n)
  {
    case 8uLL:
      if (memcmp(__s1, "training", __n)) {
        goto LABEL_21;
      }
      return a2[5];
    case 9uLL:
    case 0xAuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_21;
    case 0xBuLL:
      if (memcmp(__s1, "gate_layout", __n)) {
        goto LABEL_21;
      }
      return a2[2];
    case 0xFuLL:
      if (*(void *)__s1 != 0x7463615F6C6C6563 || *(void *)(__s1 + 7) != 0x6E6F697461766974) {
        goto LABEL_21;
      }
      return *a2;
    case 0x10uLL:
      if (!memcmp(__s1, "fgate_activation", __n))
      {
        uint64_t result = a2[1];
      }
      else if (!memcmp(__s1, "igate_activation", __n))
      {
        uint64_t result = a2[3];
      }
      else if (*(void *)__s1 == 0x63615F657461676FLL && *((void *)__s1 + 1) == 0x6E6F697461766974)
      {
        uint64_t result = a2[4];
      }
      else if (!memcmp(__s1, "zgate_activation", __n))
      {
        uint64_t result = a2[6];
      }
      else
      {
LABEL_21:
        uint64_t result = 0;
      }
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n)) {
        goto LABEL_21;
      }
      goto LABEL_23;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n)) {
        goto LABEL_21;
      }
LABEL_23:
      uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 7), 7);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::mps::LSTMOp::setInherentAttr(uint64_t result, char *__s1, size_t __n, void *a4)
{
  unint64_t v7 = (void *)result;
  switch(__n)
  {
    case 8uLL:
      uint64_t result = memcmp(__s1, "training", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            unint64_t v15 = a4;
          }
          else {
            unint64_t v15 = 0;
          }
          v7[5] = v15;
        }
        else
        {
          v7[5] = 0;
        }
      }
      break;
    case 0xBuLL:
      uint64_t result = memcmp(__s1, "gate_layout", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id) {
            unint64_t v8 = a4;
          }
          else {
            unint64_t v8 = 0;
          }
          v7[2] = v8;
        }
        else
        {
          v7[2] = 0;
        }
      }
      break;
    case 0xFuLL:
      if (*(void *)__s1 == 0x7463615F6C6C6563 && *(void *)(__s1 + 7) == 0x6E6F697461766974)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id) {
            unint64_t v10 = a4;
          }
          else {
            unint64_t v10 = 0;
          }
          *(void *)uint64_t result = v10;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0x10uLL:
      uint64_t result = memcmp(__s1, "fgate_activation", __n);
      if (result)
      {
        uint64_t result = memcmp(__s1, "igate_activation", __n);
        if (result)
        {
          if (*(void *)__s1 == 0x63615F657461676FLL && *((void *)__s1 + 1) == 0x6E6F697461766974)
          {
            if (a4)
            {
              if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id) {
                unint64_t v18 = a4;
              }
              else {
                unint64_t v18 = 0;
              }
              v7[4] = v18;
            }
            else
            {
              v7[4] = 0;
            }
          }
          else
          {
            uint64_t result = memcmp(__s1, "zgate_activation", __n);
            if (!result)
            {
              if (a4)
              {
                if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id) {
                  unint64_t v12 = a4;
                }
                else {
                  unint64_t v12 = 0;
                }
                v7[6] = v12;
              }
              else
              {
                v7[6] = 0;
              }
            }
          }
        }
        else if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id) {
            unint64_t v17 = a4;
          }
          else {
            unint64_t v17 = 0;
          }
          v7[3] = v17;
        }
        else
        {
          v7[3] = 0;
        }
      }
      else if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id) {
          unint64_t v16 = a4;
        }
        else {
          unint64_t v16 = 0;
        }
        v7[1] = v16;
      }
      else
      {
        v7[1] = 0;
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "operandSegmentSizes", __n);
      if (!result) {
        goto LABEL_35;
      }
      break;
    case 0x15uLL:
      uint64_t result = memcmp(__s1, "operand_segment_sizes", __n);
      if (!result)
      {
LABEL_35:
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          unint64_t v13 = result ? a4 : 0;
          unint64_t v19 = v13;
          if (result)
          {
            uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v19);
            if (result == 7)
            {
              uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v19);
              if (v14) {
                uint64_t result = (uint64_t)memmove(v7 + 7, (const void *)result, 4 * v14);
              }
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::mps::LSTMOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"cell_activation", 15, *a2);
  }
  uint64_t v6 = a2[1];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"fgate_activation", 16, v6);
  }
  uint64_t v7 = a2[2];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"gate_layout", 11, v7);
  }
  uint64_t v8 = a2[3];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"igate_activation", 16, v8);
  }
  uint64_t v9 = a2[4];
  if (v9) {
    mlir::NamedAttrList::append(a3, (uint64_t)"ogate_activation", 16, v9);
  }
  uint64_t v10 = a2[5];
  if (v10) {
    mlir::NamedAttrList::append(a3, (uint64_t)"training", 8, v10);
  }
  uint64_t v11 = a2[6];
  if (v11) {
    mlir::NamedAttrList::append(a3, (uint64_t)"zgate_activation", 16, v11);
  }
  uint64_t v12 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 7), 7);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v12);
}

BOOL mlir::mps::LSTMOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v8, (const void **)"cell_activation", (const char *)0xF, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v9, (const void **)"fgate_activation", (const char *)0x10, a3, a4))
    {
      uint64_t v10 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps30(v10, (const void **)"gate_layout", (const char *)0xB, a3, a4))
      {
        uint64_t v11 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v11, (const void **)"igate_activation", (const char *)0x10, a3, a4))
        {
          uint64_t v12 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 32));
          if (!v12
            || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v12, (const void **)"ogate_activation", (const char *)0x10, a3, a4))
          {
            uint64_t v13 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 40));
            if (!v13
              || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v13, (const void **)"training", (const char *)8, a3, a4))
            {
              uint64_t v14 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 48));
              if (!v14
                || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v14, (const void **)"zgate_activation", (const char *)0x10, a3, a4))
              {
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL mlir::mps::LSTMOp::readProperties(uint64_t a1, void *a2)
{
  v10[24] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::RNNActivationAttr>(a1, v3)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::RNNActivationAttr>(a1, v3 + 1)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::LSTMGateLayoutAttr>(a1, v3 + 2)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::RNNActivationAttr>(a1, v3 + 3)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::RNNActivationAttr>(a1, v3 + 4))
  {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v9 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v9)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v9) >= 8)
    {
      v7[0] = (uint64_t)"size mismatch for operand/result_segment_size";
      __int16 v8 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 16))(v10, a1, v7);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v10);
      return 0;
    }
    unint64_t v4 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v9);
    if (v5) {
      memmove(v3 + 7, v4, 4 * v5);
    }
  }
  if (mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 5)
    && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::RNNActivationAttr>(a1, v3 + 6))
  {
    v7[0] = a1;
    v7[1] = (uint64_t)(v3 + 7);
    return mlir::mps::GRUGradientOp::readProperties(mlir::DialectBytecodeReader &,mlir::OperationState &)::$_0::operator()(v7) != 0;
  }
  return 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x58uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    v3[3] = 0u;
    v3[4] = 0u;
    *((_DWORD *)v3 + 20) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 105;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[87];
    return a1[32];
  }
  return result;
}

uint64_t mlir::mps::LSTMOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)v4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 8));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 16));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 24));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 32));
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) <= 5)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
    uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 56, 7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 40));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 48));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 56), 7);
  }
  return result;
}

void mlir::mps::LSTMOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, BOOL a16)
{
  BOOL v20 = a16;
  unint64_t v69[2] = *MEMORY[0x1E4F143B8];
  uint64_t v62 = a4;
  uint64_t v63 = a3;
  uint64_t v60 = a13;
  uint64_t v61 = a12;
  uint64_t v58 = a15;
  uint64_t v59 = a14;
  BOOL v57 = a16;
  mlir::OperationState::addOperands(a2, (uint64_t)&v63, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v62, 1);
  if (a12) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v61, 1);
  }
  if (a13) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v60, 1);
  }
  if (a14) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v59, 1);
  }
  if (a15) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v58, 1);
  }
  if (a16)
  {
    mlir::OperationState::addOperands(a2, (uint64_t)&v57, 1);
    BOOL v20 = v57;
  }
  BOOL v21 = v61 != 0;
  BOOL v22 = v60 != 0;
  BOOL v23 = v59 != 0;
  BOOL v24 = v58 != 0;
  uint64_t v25 = mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties>((void *)a2);
  *(void *)(v25 + 56) = 0x100000001;
  *(_DWORD *)(v25 + 64) = v21;
  *(_DWORD *)(v25 + 68) = v22;
  *(_DWORD *)(v25 + 72) = v23;
  *(_DWORD *)(v25 + 76) = v24;
  *(_DWORD *)(v25 + 80) = v20;
  uint64_t v26 = *a1;
  unsigned int v64 = a5;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v26);
  uint64_t v67 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v68 = (uint64_t)v26;
  uint64_t v28 = mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v67, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v64);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties>((void *)a2)
            + 24) = v28;
  unint64_t v29 = *a1;
  unsigned int v64 = a6;
  unint64_t v30 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v29);
  uint64_t v67 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v68 = (uint64_t)v29;
  uint64_t v31 = mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v30, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v67, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v64);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = v31;
  int v32 = *a1;
  unsigned int v64 = a7;
  int v33 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v32);
  uint64_t v67 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v68 = (uint64_t)v32;
  uint64_t v34 = mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v33, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v67, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v64);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties>((void *)a2)
            + 48) = v34;
  int v35 = *a1;
  unsigned int v64 = a8;
  int v36 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v35);
  uint64_t v67 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v68 = (uint64_t)v35;
  uint64_t v37 = mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v36, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v67, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v64);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties>((void *)a2)
            + 32) = v37;
  int v38 = *a1;
  unsigned int v64 = a9;
  int v39 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v38);
  uint64_t v67 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v68 = (uint64_t)v38;
  uint64_t v40 = mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v39, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v67, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v64);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties>((void *)a2) = v40;
  int v41 = *a1;
  unsigned int v64 = a10;
  int v42 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v41);
  uint64_t v67 = &mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id;
  uint64_t v68 = (uint64_t)v41;
  uint64_t v43 = mlir::StorageUniquer::get<mlir::mps::detail::LSTMGateLayoutAttrStorage,mlir::mps::LSTMGateLayout>(v42, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail25LSTMGateLayoutAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_18LSTMGateLayoutAttrEJNS2_14LSTMGateLayoutEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v67, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id, &v64);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = v43;
  if (a11)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v44);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LSTMOpGenericAdaptorBase::Properties>((void *)a2)
              + 40) = UnitAttr;
  }
  uint64_t v67 = v69;
  uint64_t v68 = 0x200000000;
  unint64_t v46 = *a1;
  int v47 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v66, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  int v50 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v65, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::LSTMOp::inferReturnTypes(v46, v47, 1, v66[0], v66[1], Dictionary, v50, v51, v65[0], v65[1], (uint64_t)&v67))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v52 = v67;
  }
  uint64_t v53 = v68;
  uint64_t v54 = *(unsigned int *)(a2 + 72);
  if (v54 + (unint64_t)v68 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v54 + v68, 8);
    LODWORD(v54) = *(_DWORD *)(a2 + 72);
  }
  if (v53)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v54), v52, 8 * v53);
    LODWORD(v54) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v54 + v53;
  if (v67 != v69) {
    free(v67);
  }
}

mlir::MLIRContext *mlir::mps::LSTMOp::populateDefaultProperties(uint64_t a1, mlir::MLIRContext **a2)
{
  uint64_t v12 = *(void **)(a1 + 8);
  uint64_t result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  unint64_t v4 = result;
  if (a2[3])
  {
    if (a2[1]) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int v11 = 3;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(result);
    uint64_t v12 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
    uint64_t v13 = v4;
    uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v12, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v11);
    a2[3] = result;
    if (a2[1])
    {
LABEL_3:
      if (a2[6]) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  unsigned int v11 = 3;
  uint64_t v6 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v4);
  uint64_t v12 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v13 = v4;
  uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v6, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v12, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v11);
  a2[1] = result;
  if (a2[6])
  {
LABEL_4:
    if (a2[4]) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  unsigned int v11 = 2;
  unint64_t v7 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v4);
  uint64_t v12 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v13 = v4;
  uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v7, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v12, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v11);
  a2[6] = result;
  if (a2[4])
  {
LABEL_5:
    if (*a2) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  unsigned int v11 = 3;
  __int16 v8 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v4);
  uint64_t v12 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v13 = v4;
  uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v8, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v12, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v11);
  a2[4] = result;
  if (*a2)
  {
LABEL_6:
    if (a2[2]) {
      return result;
    }
LABEL_13:
    unsigned int v11 = 0;
    uint64_t v10 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v4);
    uint64_t v12 = &mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id;
    uint64_t v13 = v4;
    uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::LSTMGateLayoutAttrStorage,mlir::mps::LSTMGateLayout>(v10, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail25LSTMGateLayoutAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_18LSTMGateLayoutAttrEJNS2_14LSTMGateLayoutEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v12, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id, &v11);
    a2[2] = result;
    return result;
  }
LABEL_12:
  unsigned int v11 = 2;
  unint64_t v9 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v4);
  uint64_t v12 = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v13 = v4;
  uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(v9, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v12, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v11);
  *a2 = result;
  if (!a2[2]) {
    goto LABEL_13;
  }
  return result;
}

uint64_t mlir::mps::LSTMOp::verifyInvariantsImpl(uint64_t **this)
{
  v87[24] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v7 = v3[2];
  uint64_t v6 = v3[3];
  uint64_t v9 = v3[4];
  uint64_t v8 = v3[5];
  uint64_t v10 = v3[6];
  v87[0] = v2;
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v6, (const void **)"igate_activation", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v87))return 0; {
  v87[0] = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v5, (const void **)"fgate_activation", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v87))return 0; {
  v87[0] = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v10, (const void **)"zgate_activation", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v87))return 0; {
  v87[0] = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v9, (const void **)"ogate_activation", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v87))return 0; {
  v87[0] = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v4, (const void **)"cell_activation", (const char *)0xF, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v87))return 0; {
  v87[0] = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps30(v7, (const void **)"gate_layout", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps30(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v87))return 0; {
  v87[0] = *this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v8, (const void **)"training", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v87))return 0; {
  unsigned int v86 = 0;
  }
  unint64_t v11 = *((unsigned int *)*this + 11);
  uint64_t v12 = (uint64_t)&(*this)[2 * ((v11 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(unsigned int *)(v12 + 56);
  if ((v11 & 0x800000) != 0)
  {
    uint64_t v14 = (*this)[9];
    if (v13) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v14 = 0;
    if (v13)
    {
LABEL_15:
      uint64_t v15 = v14 + 24;
      do
      {
        unint64_t v16 = *this;
        unint64_t v17 = *(void *)(*(void *)v15 + 8) & 0xFFFFFFFFFFFFFFF8;
        unsigned int v18 = v86++;
        if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v16, v17, (const void **)"operand", (const void **)7, v18))return 0; {
        v15 += 32;
        }
      }
      while (--v13);
    }
  }
  uint64_t ODSOperands = mlir::mps::GRUOp::getODSOperands((mlir::mps::GRUOp *)this, 1u);
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = ODSOperands + 24;
    do
    {
      BOOL v23 = *this;
      unint64_t v24 = *(void *)(*(void *)v22 + 8) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v25 = v86++;
      if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v23, v24, (const void **)"operand", (const void **)7, v25))return 0; {
      v22 += 32;
      }
    }
    while (--v21);
  }
  uint64_t v26 = mlir::mps::GRUOp::getODSOperands((mlir::mps::GRUOp *)this, 2u);
  uint64_t v28 = v27;
  if (v27 >= 2) {
    goto LABEL_35;
  }
  if (v27)
  {
    uint64_t v29 = *(void *)(v26 + 24);
    unint64_t v30 = *this;
    unint64_t v31 = *(void *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v32 = v86++;
    if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v30, v31, (const void **)"operand", (const void **)7, v32))return 0; {
  }
    }
  uint64_t v33 = mlir::mps::GRUOp::getODSOperands((mlir::mps::GRUOp *)this, 3u);
  uint64_t v28 = v34;
  if (v34 < 2)
  {
    if (v34)
    {
      uint64_t v35 = *(void *)(v33 + 24);
      int v36 = *this;
      unint64_t v37 = *(void *)(v35 + 8) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v38 = v86++;
      if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v36, v37, (const void **)"operand", (const void **)7, v38))return 0; {
    }
      }
    uint64_t v39 = mlir::mps::GRUOp::getODSOperands((mlir::mps::GRUOp *)this, 4u);
    uint64_t v28 = v40;
    if (v40 < 2)
    {
      if (v40)
      {
        uint64_t v41 = *(void *)(v39 + 24);
        int v42 = *this;
        unint64_t v43 = *(void *)(v41 + 8) & 0xFFFFFFFFFFFFFFF8;
        unsigned int v44 = v86++;
        if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v42, v43, (const void **)"operand", (const void **)7, v44))return 0; {
      }
        }
      uint64_t v45 = mlir::mps::GRUOp::getODSOperands((mlir::mps::GRUOp *)this, 5u);
      uint64_t v28 = v46;
      if (v46 < 2)
      {
        if (!v46
          || (uint64_t v47 = *(void *)(v45 + 24),
              int v48 = *this,
              unint64_t v49 = *(void *)(v47 + 8) & 0xFFFFFFFFFFFFFFF8,
              unsigned int v50 = v86,
              ++v86,
              mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v48, v49, (const void **)"operand", (const void **)7, v50)))
        {
          uint64_t v51 = mlir::mps::GRUOp::getODSOperands((mlir::mps::GRUOp *)this, 6u);
          uint64_t v28 = v52;
          if (v52 >= 2) {
            goto LABEL_35;
          }
          if (!v52
            || (uint64_t v57 = *(void *)(v51 + 24),
                uint64_t v58 = *this,
                uint64_t v59 = (const void **)(*(void *)(v57 + 8) & 0xFFFFFFFFFFFFFFF8),
                unsigned int v60 = v86,
                ++v86,
                mlir::mps::__mlir_ods_local_type_constraint_MPSOps31(v58, v59, (const void **)"operand", 7, v60)))
          {
            unsigned int v86 = 0;
            uint64_t ODSResults = mlir::mps::LSTMOp::getODSResults((mlir::mps::LSTMOp *)this, 0);
            if (v62)
            {
              uint64_t v63 = ODSResults;
              uint64_t v64 = v62;
              uint64_t v65 = 0;
              while (1)
              {
                uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v63, v65);
                uint64_t v67 = *this;
                unint64_t v68 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
                unsigned int v86 = v65 + 1;
                if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v67, v68, (const void **)"result", (const void **)6, v65))break; {
                if (v64 == ++v65)
                }
                  goto LABEL_45;
              }
            }
            else
            {
              LODWORD(v65) = 0;
LABEL_45:
              uint64_t v69 = mlir::mps::LSTMOp::getODSResults((mlir::mps::LSTMOp *)this, 1u);
              if (v70)
              {
                uint64_t v71 = v69;
                uint64_t v72 = v70;
                uint64_t v73 = 0;
                while (1)
                {
                  uint64_t v74 = mlir::detail::OpResultImpl::getNextResultAtOffset(v71, v73);
                  uint64_t v75 = *this;
                  unint64_t v76 = *(void *)(v74 + 8) & 0xFFFFFFFFFFFFFFF8;
                  unsigned int v86 = v65 + v73 + 1;
                  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v75, v76, (const void **)"result", (const void **)6, (int)v65 + (int)v73))break; {
                  if (v72 == ++v73)
                  }
                  {
                    LODWORD(v65) = v65 + v73;
                    goto LABEL_50;
                  }
                }
              }
              else
              {
LABEL_50:
                uint64_t v77 = mlir::mps::LSTMOp::getODSResults((mlir::mps::LSTMOp *)this, 2u);
                uint64_t v79 = v78;
                if (v78 >= 2)
                {
                  v84[0] = (const void **)"result group starting at #";
                  __int16 v85 = 259;
                  mlir::OpState::emitOpError(this, v84, (uint64_t)v87);
                  uint64_t v80 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)v87, &v86);
                  uint64_t v54 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v80, " requires 0 or 1 element, but found ");
                  uint64_t v83 = v79;
                  goto LABEL_36;
                }
                if (!v78) {
                  return 1;
                }
                uint64_t v81 = mlir::detail::OpResultImpl::getNextResultAtOffset(v77, 0);
                if (mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(v81 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, v65))return 1; {
              }
                }
            }
          }
        }
        return 0;
      }
    }
  }
LABEL_35:
  v84[0] = (const void **)"operand group starting at #";
  __int16 v85 = 259;
  mlir::OpState::emitOpError(this, v84, (uint64_t)v87);
  uint64_t v53 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)v87, &v86);
  uint64_t v54 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v53, " requires 0 or 1 element, but found ");
  uint64_t v83 = v28;
LABEL_36:
  uint64_t v55 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v54, &v83);
  uint64_t v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v55);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v87);
  return v56;
}

uint64_t mlir::mps::LSTMOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.lstm", 8, v2, v3, 0, 0);
  void *v4 = &unk_1EC982960;
  v4[12] = mlir::mps::LSTMOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::LeakyReluOpGenericAdaptorBase::LeakyReluOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.leaky_relu", 14, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::LeakyReluOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.leaky_relu", 14, v2, v3, 0, 0);
  void *v4 = &unk_1EC97FB50;
  v4[12] = mlir::mps::LeakyReluOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::LessThanOpGenericAdaptorBase::LessThanOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.less", 8, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::LessThanOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.less", 8, v2, v3, 0, 0);
  void *v4 = &unk_1EC97F788;
  v4[12] = mlir::mps::LessThanOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::LessThanOrEqualToOpGenericAdaptorBase::LessThanOrEqualToOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.less_equal", 14, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::LessThanOrEqualToOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.less_equal", 14, v2, v3, 0, 0);
  void *v4 = &unk_1EC981678;
  v4[12] = mlir::mps::LessThanOrEqualToOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::LocalConvolutionDataGradientOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v103 = v6;
  if (!v6)
  {
    a3(v107, a4);
    if (v107[0])
    {
      int v104 = 3;
      unint64_t v105 = "expected DictionaryAttr to set properties";
      uint64_t v106 = 41;
      uint64_t v26 = &v104;
      unint64_t v27 = (char *)v108;
      if (v109 >= v110)
      {
        unint64_t v86 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          int64_t v94 = (char *)&v104 - (unsigned char *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v86, 24);
          unint64_t v27 = (char *)v108;
          uint64_t v26 = (int *)((char *)v108 + v94);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v86, 24);
          uint64_t v26 = &v104;
          unint64_t v27 = (char *)v108;
        }
      }
      uint64_t v28 = &v27[24 * v109];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v109;
      if (v107[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
      }
    }
    if (!v116) {
      return 0;
    }
    unint64_t v30 = (void **)__p;
    if (__p)
    {
      unint64_t v31 = v115;
      unsigned int v32 = __p;
      if (v115 != __p)
      {
        do
          unint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unsigned int v32 = __p;
      }
      uint64_t v115 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v112;
    if (!v112) {
      goto LABEL_114;
    }
    uint64_t v33 = v113;
    BOOL v23 = v112;
    if (v113 == v112)
    {
LABEL_113:
      uint64_t v113 = v21;
      operator delete(v23);
LABEL_114:
      if (v108 != v111) {
        free(v108);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      unint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_112:
    BOOL v23 = v112;
    goto LABEL_113;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v103, "data_layout", 0xBuLL);
  if (!v8)
  {
    a3(v107, a4);
    if (v107[0])
    {
      int v104 = 3;
      unint64_t v105 = "expected key entry for data_layout in DictionaryAttr to set Properties.";
      uint64_t v106 = 71;
      int v36 = &v104;
      unint64_t v37 = (char *)v108;
      if (v109 >= v110)
      {
        unint64_t v88 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          int64_t v96 = (char *)&v104 - (unsigned char *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v88, 24);
          unint64_t v37 = (char *)v108;
          int v36 = (int *)((char *)v108 + v96);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v88, 24);
          int v36 = &v104;
          unint64_t v37 = (char *)v108;
        }
      }
      unsigned int v38 = &v37[24 * v109];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)unsigned int v38 = v39;
      ++v109;
      if (v107[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
      }
    }
    if (!v116) {
      return 0;
    }
    unint64_t v40 = (void **)__p;
    if (__p)
    {
      uint64_t v41 = v115;
      int v42 = __p;
      if (v115 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        int v42 = __p;
      }
      uint64_t v115 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v112;
    if (!v112) {
      goto LABEL_114;
    }
    unint64_t v43 = v113;
    BOOL v23 = v112;
    if (v113 == v112) {
      goto LABEL_113;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      unsigned int v44 = v45;
      *unint64_t v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_112;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id)
  {
    a3(v107, a4);
    if (v107[0])
    {
      int v104 = 3;
      uint64_t v106 = 56;
      uint64_t v10 = &v104;
      uint64_t v11 = (char *)v108;
      if (v109 >= v110)
      {
        unint64_t v87 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          int64_t v95 = (char *)&v104 - (unsigned char *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v87, 24);
          uint64_t v11 = (char *)v108;
          uint64_t v10 = (int *)((char *)v108 + v95);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v87, 24);
          uint64_t v10 = &v104;
          uint64_t v11 = (char *)v108;
        }
      }
      uint64_t v12 = &v11[24 * v109];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v109;
      if (v107[0])
      {
        uint64_t v14 = &v104;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v104, v9);
        uint64_t v15 = (char *)v108;
        if (v109 >= v110)
        {
          unint64_t v89 = v109 + 1;
          if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
          {
            int64_t v97 = (char *)&v104 - (unsigned char *)v108;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v89, 24);
            uint64_t v15 = (char *)v108;
            uint64_t v14 = (int *)((char *)v108 + v97);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v89, 24);
            uint64_t v14 = &v104;
            uint64_t v15 = (char *)v108;
          }
        }
        unint64_t v16 = &v15[24 * v109];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)unint64_t v16 = v17;
        ++v109;
        if (v107[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
        }
      }
    }
    if (!v116) {
      return 0;
    }
    unsigned int v18 = (void **)__p;
    if (__p)
    {
      unint64_t v19 = v115;
      uint64_t v20 = __p;
      if (v115 != __p)
      {
        do
          unint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v115 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v112;
    if (!v112) {
      goto LABEL_114;
    }
    uint64_t v22 = v113;
    BOOL v23 = v112;
    if (v113 == v112) {
      goto LABEL_113;
    }
    do
    {
      unsigned int v25 = (void *)*--v22;
      unint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
    goto LABEL_112;
  }
  *a1 = v8;
  uint64_t v46 = mlir::DictionaryAttr::get((uint64_t)&v103, "dilation_rates", 0xEuLL);
  if (!v46)
  {
    a3(v107, a4);
    if (v107[0])
    {
      int v104 = 3;
      unint64_t v105 = "expected key entry for dilation_rates in DictionaryAttr to set Properties.";
      uint64_t v106 = 74;
      uint64_t v51 = &v104;
      unint64_t v52 = (char *)v108;
      if (v109 >= v110)
      {
        unint64_t v90 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          int64_t v98 = (char *)&v104 - (unsigned char *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v90, 24);
          unint64_t v52 = (char *)v108;
          uint64_t v51 = (int *)((char *)v108 + v98);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v90, 24);
          uint64_t v51 = &v104;
          unint64_t v52 = (char *)v108;
        }
      }
      uint64_t v53 = &v52[24 * v109];
      long long v54 = *(_OWORD *)v51;
      *((void *)v53 + 2) = *((void *)v51 + 2);
      *(_OWORD *)uint64_t v53 = v54;
      ++v109;
      if (v107[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
      }
    }
    if (!v116) {
      return 0;
    }
    uint64_t v55 = (void **)__p;
    if (__p)
    {
      uint64_t v56 = v115;
      uint64_t v57 = __p;
      if (v115 != __p)
      {
        do
          uint64_t v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
        while (v56 != v55);
        uint64_t v57 = __p;
      }
      uint64_t v115 = v55;
      operator delete(v57);
    }
    uint64_t v21 = v112;
    if (!v112) {
      goto LABEL_114;
    }
    uint64_t v58 = v113;
    BOOL v23 = v112;
    if (v113 == v112) {
      goto LABEL_113;
    }
    do
    {
      unsigned int v60 = (void *)*--v58;
      uint64_t v59 = v60;
      *uint64_t v58 = 0;
      if (v60) {
        operator delete[](v59);
      }
    }
    while (v58 != v21);
    goto LABEL_112;
  }
  uint64_t v47 = v46;
  if ((mlir::DenseIntElementsAttr::classof(v46) & 1) == 0)
  {
    a3(v107, a4);
    if (v107[0])
    {
      int v104 = 3;
      uint64_t v106 = 59;
      uint64_t v61 = &v104;
      uint64_t v62 = (char *)v108;
      if (v109 >= v110)
      {
        unint64_t v91 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          int64_t v99 = (char *)&v104 - (unsigned char *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v91, 24);
          uint64_t v62 = (char *)v108;
          uint64_t v61 = (int *)((char *)v108 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v91, 24);
          uint64_t v61 = &v104;
          uint64_t v62 = (char *)v108;
        }
      }
      uint64_t v63 = &v62[24 * v109];
      long long v64 = *(_OWORD *)v61;
      *((void *)v63 + 2) = *((void *)v61 + 2);
      *(_OWORD *)uint64_t v63 = v64;
      ++v109;
      if (v107[0])
      {
        uint64_t v65 = &v104;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v104, v47);
        uint64_t v66 = (char *)v108;
        if (v109 >= v110)
        {
          unint64_t v92 = v109 + 1;
          if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
          {
            int64_t v100 = (char *)&v104 - (unsigned char *)v108;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v92, 24);
            uint64_t v66 = (char *)v108;
            uint64_t v65 = (int *)((char *)v108 + v100);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v92, 24);
            uint64_t v65 = &v104;
            uint64_t v66 = (char *)v108;
          }
        }
        uint64_t v67 = &v66[24 * v109];
        long long v68 = *(_OWORD *)v65;
        *((void *)v67 + 2) = *((void *)v65 + 2);
        *(_OWORD *)uint64_t v67 = v68;
        ++v109;
        if (v107[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
        }
      }
    }
    if (!v116) {
      return 0;
    }
    uint64_t v69 = (void **)__p;
    if (__p)
    {
      uint64_t v70 = v115;
      uint64_t v71 = __p;
      if (v115 != __p)
      {
        do
          uint64_t v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
        while (v70 != v69);
        uint64_t v71 = __p;
      }
      uint64_t v115 = v69;
      operator delete(v71);
    }
    uint64_t v21 = v112;
    if (!v112) {
      goto LABEL_114;
    }
    uint64_t v72 = v113;
    BOOL v23 = v112;
    if (v113 == v112) {
      goto LABEL_113;
    }
    do
    {
      uint64_t v74 = (void *)*--v72;
      uint64_t v73 = v74;
      *uint64_t v72 = 0;
      if (v74) {
        operator delete[](v73);
      }
    }
    while (v72 != v21);
    goto LABEL_112;
  }
  a1[1] = v47;
  uint64_t v48 = mlir::DictionaryAttr::get((uint64_t)&v103, "kernel_sizes", 0xCuLL);
  uint64_t v102 = v48;
  if (!v48)
  {
    a3(v107, a4);
    if (v107[0])
    {
      int v104 = 3;
      unint64_t v105 = "expected key entry for kernel_sizes in DictionaryAttr to set Properties.";
      uint64_t v106 = 72;
      uint64_t v75 = &v104;
      unint64_t v76 = (char *)v108;
      if (v109 >= v110)
      {
        unint64_t v93 = v109 + 1;
        if (v108 <= &v104 && (char *)v108 + 24 * v109 > (char *)&v104)
        {
          int64_t v101 = (char *)&v104 - (unsigned char *)v108;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v93, 24);
          unint64_t v76 = (char *)v108;
          uint64_t v75 = (int *)((char *)v108 + v101);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v111, v93, 24);
          uint64_t v75 = &v104;
          unint64_t v76 = (char *)v108;
        }
      }
      uint64_t v77 = &v76[24 * v109];
      long long v78 = *(_OWORD *)v75;
      *((void *)v77 + 2) = *((void *)v75 + 2);
      *(_OWORD *)uint64_t v77 = v78;
      ++v109;
      if (v107[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v107);
      }
    }
    if (!v116) {
      return 0;
    }
    uint64_t v79 = (void **)__p;
    if (__p)
    {
      uint64_t v80 = v115;
      uint64_t v81 = __p;
      if (v115 != __p)
      {
        do
          uint64_t v80 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v80 - 1);
        while (v80 != v79);
        uint64_t v81 = __p;
      }
      uint64_t v115 = v79;
      operator delete(v81);
    }
    uint64_t v21 = v112;
    if (!v112) {
      goto LABEL_114;
    }
    unint64_t v82 = v113;
    BOOL v23 = v112;
    if (v113 == v112) {
      goto LABEL_113;
    }
    do
    {
      unint64_t v84 = (void *)*--v82;
      uint64_t v83 = v84;
      *unint64_t v82 = 0;
      if (v84) {
        operator delete[](v83);
      }
    }
    while (v82 != v21);
    goto LABEL_112;
  }
  uint64_t v49 = v48;
  if (mlir::DenseIntElementsAttr::classof(v48))
  {
    a1[2] = v49;
    return 1;
  }
  a3(v107, a4);
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v85, &v102);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v107);
  return 0;
}

uint64_t mlir::mps::LocalConvolutionDataGradientOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v27[6] = *MEMORY[0x1E4F143B8];
  unint64_t v24 = a1;
  unsigned int v25 = v27;
  uint64_t v26 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v24, (uint64_t)"data_layout", 11, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v26;
  if (v26 >= HIDWORD(v26))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
    unsigned int v6 = v26;
  }
  uint64_t v7 = (uint64_t *)((char *)v25 + 16 * v6);
  *uint64_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v26 + 1;
  LODWORD(v26) = v26 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"dilation_rates", 14, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      unsigned int v13 = v26;
    }
    uint64_t v14 = (uint64_t *)((char *)v25 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"kernel_sizes", 12, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      unsigned int v19 = v26;
    }
    uint64_t v20 = (uint64_t *)((char *)v25 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
  uint64_t v21 = v25;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v25 == v27) {
      return DictionaryAttr;
    }
    goto LABEL_16;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v24, (uint64_t *)v25, v8);
  uint64_t v21 = v25;
  if (v25 != v27) {
LABEL_16:
  }
    free(v21);
  return DictionaryAttr;
}

uint64_t mlir::mps::LocalConvolutionDataGradientOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 14)
  {
    uint64_t result = memcmp(__s1, "dilation_rates", 0xEuLL);
    if (!result)
    {
      if (a4)
      {
        uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
        if (result) {
          uint64_t v7 = a4;
        }
        else {
          uint64_t v7 = 0;
        }
        *(void *)(v5 + 8) = v7;
      }
      else
      {
        *(void *)(v5 + 8) = 0;
      }
    }
  }
  else if (a3 == 12)
  {
    uint64_t result = memcmp(__s1, "kernel_sizes", 0xCuLL);
    if (!result)
    {
      if (a4)
      {
        uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
        if (result) {
          uint64_t v8 = a4;
        }
        else {
          uint64_t v8 = 0;
        }
        *(void *)(v5 + 16) = v8;
      }
      else
      {
        *(void *)(v5 + 16) = 0;
      }
    }
  }
  else if (a3 == 11 && *(void *)__s1 == 0x79616C5F61746164 && *(void *)(__s1 + 3) == 0x74756F79616C5F61)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      *(void *)uint64_t result = v9;
    }
    else
    {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

BOOL mlir::mps::LocalConvolutionDataGradientOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps11(v8, (const void **)"data_layout", (const char *)0xB, a3, a4))
  {
    uint64_t v9 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps31(v9, (const void **)"dilation_rates", (const char *)0xE, (void (*)(void **__return_ptr, uint64_t))a3, a4))
    {
      uint64_t v10 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps31(v10, (const void **)"kernel_sizes", (const char *)0xC, (void (*)(void **__return_ptr, uint64_t))a3, a4))
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::__mlir_ods_local_attr_constraint_MPSOps31(const void **a1, const void **a2, const char *a3, void (*a4)(void **__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)a1)) {
    goto LABEL_9;
  }
  uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>((uint64_t)*a1 + 8);
  uint64_t v41 = a1;
  int v42 = (const char *)v10;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v41);
  uint64_t v12 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  uint64_t v45 = v12;
  uint64_t v46 = Type;
  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45);
  uint64_t v56 = 2;
  if (v14 == 1 && *ArgAttrsAttr == v56)
  {
    unsigned int v38 = a1;
    v39[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38);
    v39[1] = v15;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v39);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
      return 1;
    }
  }
LABEL_9:
  a4(&v45, a5);
  if (v45)
  {
    LODWORD(v41) = 3;
    int v42 = "attribute '";
    uint64_t v43 = 11;
    uint64_t v17 = &v41;
    uint64_t v18 = (char *)v47;
    if (v48 >= v49)
    {
      unint64_t v34 = v48 + 1;
      if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
      {
        int64_t v36 = (char *)&v41 - (unsigned char *)v47;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
        uint64_t v18 = (char *)v47;
        uint64_t v17 = (const void ***)((char *)v47 + v36);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
        uint64_t v17 = &v41;
        uint64_t v18 = (char *)v47;
      }
    }
    unsigned int v19 = &v18[24 * v48];
    long long v20 = *(_OWORD *)v17;
    *((void *)v19 + 2) = v17[2];
    *(_OWORD *)unsigned int v19 = v20;
    ++v48;
    if (v45)
    {
      __int16 v44 = 261;
      uint64_t v41 = a2;
      int v42 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v46, &v41);
      if (v45)
      {
        LODWORD(v41) = 3;
        int v42 = "' failed to satisfy constraint: ui64 elements attribute of shape {2}";
        uint64_t v43 = 68;
        uint64_t v21 = &v41;
        uint64_t v22 = (char *)v47;
        if (v48 >= v49)
        {
          unint64_t v35 = v48 + 1;
          if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
          {
            int64_t v37 = (char *)&v41 - (unsigned char *)v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
            uint64_t v22 = (char *)v47;
            uint64_t v21 = (const void ***)((char *)v47 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
            uint64_t v21 = &v41;
            uint64_t v22 = (char *)v47;
          }
        }
        BOOL v23 = &v22[24 * v48];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = v21[2];
        *(_OWORD *)BOOL v23 = v24;
        ++v48;
      }
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
  if (v45) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
  }
  if (v55)
  {
    unsigned int v25 = (void **)__p;
    if (__p)
    {
      uint64_t v26 = v54;
      unint64_t v27 = __p;
      if (v54 != __p)
      {
        do
          uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        unint64_t v27 = __p;
      }
      long long v54 = v25;
      operator delete(v27);
    }
    uint64_t v28 = v51;
    if (v51)
    {
      long long v29 = v52;
      unint64_t v30 = v51;
      if (v52 != v51)
      {
        do
        {
          unsigned int v32 = (void *)*--v29;
          unint64_t v31 = v32;
          void *v29 = 0;
          if (v32) {
            operator delete[](v31);
          }
        }
        while (v29 != v28);
        unint64_t v30 = v51;
      }
      unint64_t v52 = v28;
      operator delete(v30);
    }
    if (v47 != v50) {
      free(v47);
    }
  }
  return v16;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionDataGradientOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x18uLL);
    v3[1] = 0;
    v3[2] = 0;
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::LocalConvolutionDataGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionDataGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::LocalConvolutionDataGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionDataGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::LocalConvolutionDataGradientOpGenericA"
              "daptorBase::Properties]";
        unint64_t v14 = 129;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::LocalConvolutionDataGradientOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[89];
    return a1[32];
  }
  return result;
}

void mlir::mps::LocalConvolutionDataGradientOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  v28[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  uint64_t v12 = *a1;
  unsigned int v23 = a5;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v12);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id;
  uint64_t v27 = (uint64_t)v12;
  uint64_t v14 = mlir::StorageUniquer::get<mlir::mps::detail::TensorDataLayoutAttrStorage,mlir::mps::TensorDataLayout>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail27TensorDataLayoutAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_20TensorDataLayoutAttrEJNS2_16TensorDataLayoutEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id, &v23);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionDataGradientOpGenericAdaptorBase::Properties>((void *)a2) = v14;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionDataGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = a6;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionDataGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = a7;
  __src = v28;
  uint64_t v27 = 0x200000000;
  uint64_t v15 = *a1;
  mlir::ValueRange::ValueRange((unint64_t *)v25, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v24, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  uint64_t v17 = __src;
  uint64_t v18 = v27;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v27;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v28) {
    free(__src);
  }
}

BOOL mlir::mps::LocalConvolutionDataGradientOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  if (*v3)
  {
    int v5 = (const void **)v3[1];
    if (v5)
    {
      unint64_t v6 = (const void **)v3[2];
      if (v6)
      {
        v33[0] = v2;
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps11(v4, (const void **)"data_layout", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps11(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v33))return 0; {
        v33[0] = *this;
        }
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps31(v6, (const void **)"kernel_sizes", (const char *)0xC, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps31(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v33))return 0; {
        v33[0] = *this;
        }
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps31(v5, (const void **)"dilation_rates", (const char *)0xE, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps31(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v33)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
        {
          return 0;
        }
        if (*((_DWORD *)*this + 9)) {
          uint64_t v7 = (uint64_t)(*this - 2);
        }
        else {
          uint64_t v7 = 0;
        }
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
        return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
      }
      v31[0] = (const void **)"requires attribute 'kernel_sizes'";
      __int16 v32 = 259;
      mlir::OpState::emitOpError(this, v31, (uint64_t)v33);
      uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v33);
      if (v33[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v33);
      }
      if (v40)
      {
        unint64_t v24 = (void **)__p;
        if (__p)
        {
          unsigned int v25 = v39;
          uint64_t v26 = __p;
          if (v39 != __p)
          {
            do
              unsigned int v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
            while (v25 != v24);
            uint64_t v26 = __p;
          }
          long long v39 = v24;
          operator delete(v26);
        }
        unsigned int v13 = v36;
        if (!v36) {
          goto LABEL_61;
        }
        uint64_t v27 = v37;
        uint64_t v15 = v36;
        if (v37 == v36)
        {
LABEL_60:
          int64_t v37 = v13;
          operator delete(v15);
LABEL_61:
          if (v34 != &v35) {
            free(v34);
          }
          return v9;
        }
        do
        {
          long long v29 = (void *)*--v27;
          uint64_t v28 = v29;
          void *v27 = 0;
          if (v29) {
            operator delete[](v28);
          }
        }
        while (v27 != v13);
LABEL_59:
        uint64_t v15 = v36;
        goto LABEL_60;
      }
    }
    else
    {
      v31[0] = (const void **)"requires attribute 'dilation_rates'";
      __int16 v32 = 259;
      mlir::OpState::emitOpError(this, v31, (uint64_t)v33);
      uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v33);
      if (v33[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v33);
      }
      if (v40)
      {
        uint64_t v18 = (void **)__p;
        if (__p)
        {
          uint64_t v19 = v39;
          unint64_t v20 = __p;
          if (v39 != __p)
          {
            do
              uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
            while (v19 != v18);
            unint64_t v20 = __p;
          }
          long long v39 = v18;
          operator delete(v20);
        }
        unsigned int v13 = v36;
        if (!v36) {
          goto LABEL_61;
        }
        uint64_t v21 = v37;
        uint64_t v15 = v36;
        if (v37 == v36) {
          goto LABEL_60;
        }
        do
        {
          unsigned int v23 = (void *)*--v21;
          uint64_t v22 = v23;
          *uint64_t v21 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v21 != v13);
        goto LABEL_59;
      }
    }
  }
  else
  {
    v31[0] = (const void **)"requires attribute 'data_layout'";
    __int16 v32 = 259;
    mlir::OpState::emitOpError(this, v31, (uint64_t)v33);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v33);
    if (v33[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v33);
    }
    if (v40)
    {
      uint64_t v10 = (void **)__p;
      if (__p)
      {
        unint64_t v11 = v39;
        uint64_t v12 = __p;
        if (v39 != __p)
        {
          do
            unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          uint64_t v12 = __p;
        }
        long long v39 = v10;
        operator delete(v12);
      }
      unsigned int v13 = v36;
      if (!v36) {
        goto LABEL_61;
      }
      uint64_t v14 = v37;
      uint64_t v15 = v36;
      if (v37 == v36) {
        goto LABEL_60;
      }
      do
      {
        uint64_t v17 = (void *)*--v14;
        uint64_t v16 = v17;
        *uint64_t v14 = 0;
        if (v17) {
          operator delete[](v16);
        }
      }
      while (v14 != v13);
      goto LABEL_59;
    }
  }
  return v9;
}

uint64_t mlir::mps::LocalConvolutionDataGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.local_convolution_data_gradient", 35, v2, v3, 0, 0);
  void *v4 = &unk_1EC9820C8;
  v4[12] = mlir::mps::LocalConvolutionDataGradientOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x18uLL);
    v3[1] = 0;
    v3[2] = 0;
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::LocalConvolutionOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::LocalConvolutionOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::LocalConvolutionOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 117;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::LocalConvolutionOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[91];
    return a1[32];
  }
  return result;
}

void mlir::mps::LocalConvolutionOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  v28[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  uint64_t v12 = *a1;
  unsigned int v23 = a5;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v12);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id;
  uint64_t v27 = (uint64_t)v12;
  uint64_t v14 = mlir::StorageUniquer::get<mlir::mps::detail::TensorDataLayoutAttrStorage,mlir::mps::TensorDataLayout>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail27TensorDataLayoutAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_20TensorDataLayoutAttrEJNS2_16TensorDataLayoutEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id, &v23);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionOpGenericAdaptorBase::Properties>((void *)a2) = v14;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = a6;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = a7;
  __src = v28;
  uint64_t v27 = 0x200000000;
  uint64_t v15 = *a1;
  mlir::ValueRange::ValueRange((unint64_t *)v25, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v24, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  uint64_t v17 = __src;
  uint64_t v18 = v27;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v27;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v28) {
    free(__src);
  }
}

uint64_t mlir::mps::LocalConvolutionOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.local_convolution", 21, v2, v3, 0, 0);
  void *v4 = &unk_1EC981468;
  v4[12] = mlir::mps::LocalConvolutionOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionWeightGradientOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x18uLL);
    v3[1] = 0;
    v3[2] = 0;
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::LocalConvolutionWeightGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionWeightGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::LocalConvolutionWeightGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionWeightGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::LocalConvolutionWeightGradientOpGeneri"
              "cAdaptorBase::Properties]";
        unint64_t v14 = 131;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::LocalConvolutionWeightGradientOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[93];
    return a1[32];
  }
  return result;
}

void mlir::mps::LocalConvolutionWeightGradientOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  uint64_t v25 = a4;
  uint64_t v26 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v26, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v25, 1);
  uint64_t v12 = *a1;
  unsigned int v27 = a5;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v12);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id;
  uint64_t v31 = (uint64_t)v12;
  uint64_t v14 = mlir::StorageUniquer::get<mlir::mps::detail::TensorDataLayoutAttrStorage,mlir::mps::TensorDataLayout>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail27TensorDataLayoutAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_20TensorDataLayoutAttrEJNS2_16TensorDataLayoutEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id, &v27);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionWeightGradientOpGenericAdaptorBase::Properties>((void *)a2) = v14;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionWeightGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = a6;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::LocalConvolutionWeightGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = a7;
  __src = v32;
  uint64_t v31 = 0x200000000;
  uint64_t v15 = *a1;
  uint64_t v16 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v29, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v19 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v28, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::LocalConvolutionWeightGradientOp::inferReturnTypes(v15, v16, 1, v29[0], v29[1], Dictionary, v19, v20, v28[0], v28[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v21 = __src;
  }
  uint64_t v22 = v31;
  uint64_t v23 = *(unsigned int *)(a2 + 72);
  unint64_t v24 = v23 + v31;
  if (v24 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v24, 8);
    LODWORD(v23) = *(_DWORD *)(a2 + 72);
  }
  if (v22)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v23), v21, 8 * v22);
    LODWORD(v23) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v23 + v22;
  if (__src != v32) {
    free(__src);
  }
}

uint64_t mlir::mps::LocalConvolutionWeightGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.local_convolution_weight_gradient", 37, v2, v3, 0, 0);
  void *v4 = &unk_1EC9821D0;
  v4[12] = mlir::mps::LocalConvolutionWeightGradientOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::LogarithmBase10OpGenericAdaptorBase::LogarithmBase10OpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.logarithm_base_10", 21, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::LogarithmBase10Op::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.logarithm_base_10", 21, v2, v3, 0, 0);
  void *v4 = &unk_1EC9810F8;
  v4[12] = mlir::mps::LogarithmBase10Op::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::LogarithmBase2OpGenericAdaptorBase::LogarithmBase2OpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.logarithm_base_2", 20, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::LogarithmBase2Op::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.logarithm_base_2", 20, v2, v3, 0, 0);
  void *v4 = &unk_1EC980D30;
  v4[12] = mlir::mps::LogarithmBase2Op::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::LogarithmOpGenericAdaptorBase::LogarithmOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.logarithm", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::LogarithmOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.logarithm", 13, v2, v3, 0, 0);
  void *v4 = &unk_1EC97FBA8;
  v4[12] = mlir::mps::LogarithmOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::MatMulOpGenericAdaptorBase::MatMulOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v5 = (_OWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v11, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 40) = v8;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.matmul", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::MatMulOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v63 = v6;
  if (!v6)
  {
    a3(v67, a4);
    if (v67[0])
    {
      int v64 = 3;
      uint64_t v65 = "expected DictionaryAttr to set properties";
      uint64_t v66 = 41;
      unsigned int v13 = &v64;
      uint64_t v14 = (char *)v68;
      if (v69 >= v70)
      {
        unint64_t v53 = v69 + 1;
        if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
        {
          int64_t v58 = (char *)&v64 - (unsigned char *)v68;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v53, 24);
          uint64_t v14 = (char *)v68;
          unsigned int v13 = (int *)((char *)v68 + v58);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v53, 24);
          unsigned int v13 = &v64;
          uint64_t v14 = (char *)v68;
        }
      }
      uint64_t v15 = &v14[24 * v69];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = *((void *)v13 + 2);
      *(_OWORD *)uint64_t v15 = v16;
      ++v69;
      if (v67[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
      }
    }
    if (!v76) {
      return 0;
    }
    uint64_t v17 = (void **)__p;
    if (__p)
    {
      uint64_t v18 = v75;
      uint64_t v19 = __p;
      if (v75 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        uint64_t v19 = __p;
      }
      uint64_t v75 = v17;
      operator delete(v19);
    }
    int v20 = v72;
    if (!v72) {
      goto LABEL_66;
    }
    uint64_t v21 = v73;
    uint64_t v22 = v72;
    if (v73 == v72) {
      goto LABEL_65;
    }
    do
    {
      unint64_t v24 = (void *)*--v21;
      uint64_t v23 = v24;
      *uint64_t v21 = 0;
      if (v24) {
        operator delete[](v23);
      }
    }
    while (v21 != v20);
    goto LABEL_64;
  }
  long long v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v63, "transpose_lhs", 0xDuLL);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    if (!mlir::BoolAttr::classof(v8))
    {
      a3(v67, a4);
      if (v67[0])
      {
        int v64 = 3;
        uint64_t v66 = 58;
        uint64_t v25 = &v64;
        uint64_t v26 = (char *)v68;
        if (v69 >= v70)
        {
          unint64_t v54 = v69 + 1;
          if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
          {
            int64_t v59 = (char *)&v64 - (unsigned char *)v68;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
            uint64_t v26 = (char *)v68;
            uint64_t v25 = (int *)((char *)v68 + v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
            uint64_t v25 = &v64;
            uint64_t v26 = (char *)v68;
          }
        }
        unsigned int v27 = &v26[24 * v69];
        long long v28 = *(_OWORD *)v25;
        *((void *)v27 + 2) = *((void *)v25 + 2);
        *(_OWORD *)unsigned int v27 = v28;
        ++v69;
        if (v67[0])
        {
          long long v29 = &v64;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v64, v9);
          unint64_t v30 = (char *)v68;
          if (v69 >= v70)
          {
            unint64_t v56 = v69 + 1;
            if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
            {
              int64_t v61 = (char *)&v64 - (unsigned char *)v68;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v56, 24);
              unint64_t v30 = (char *)v68;
              long long v29 = (int *)((char *)v68 + v61);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v56, 24);
              long long v29 = &v64;
              unint64_t v30 = (char *)v68;
            }
          }
          uint64_t v31 = &v30[24 * v69];
          long long v32 = *(_OWORD *)v29;
          *((void *)v31 + 2) = *((void *)v29 + 2);
          *(_OWORD *)uint64_t v31 = v32;
          ++v69;
          if (v67[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
          }
        }
      }
      if (!v76) {
        return 0;
      }
      uint64_t v33 = (void **)__p;
      if (__p)
      {
        unint64_t v34 = v75;
        uint64_t v35 = __p;
        if (v75 != __p)
        {
          do
            unint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          uint64_t v35 = __p;
        }
        uint64_t v75 = v33;
        operator delete(v35);
      }
      int v20 = v72;
      if (!v72) {
        goto LABEL_66;
      }
      int64_t v36 = v73;
      uint64_t v22 = v72;
      if (v73 == v72) {
        goto LABEL_65;
      }
      do
      {
        unsigned int v38 = (void *)*--v36;
        int64_t v37 = v38;
        *int64_t v36 = 0;
        if (v38) {
          operator delete[](v37);
        }
      }
      while (v36 != v20);
      goto LABEL_64;
    }
    *a1 = v9;
  }
  uint64_t v10 = (void *)mlir::DictionaryAttr::get((uint64_t)&v63, "transpose_rhs", 0xDuLL);
  if (!v10) {
    return 1;
  }
  uint64_t v11 = (uint64_t)v10;
  if (mlir::BoolAttr::classof(v10))
  {
    a1[1] = v11;
    return 1;
  }
  a3(v67, a4);
  if (v67[0])
  {
    int v64 = 3;
    uint64_t v66 = 58;
    long long v39 = &v64;
    char v40 = (char *)v68;
    if (v69 >= v70)
    {
      unint64_t v55 = v69 + 1;
      if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
      {
        int64_t v60 = (char *)&v64 - (unsigned char *)v68;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v55, 24);
        char v40 = (char *)v68;
        long long v39 = (int *)((char *)v68 + v60);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v55, 24);
        long long v39 = &v64;
        char v40 = (char *)v68;
      }
    }
    uint64_t v41 = &v40[24 * v69];
    long long v42 = *(_OWORD *)v39;
    *((void *)v41 + 2) = *((void *)v39 + 2);
    *(_OWORD *)uint64_t v41 = v42;
    ++v69;
    if (v67[0])
    {
      uint64_t v43 = &v64;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v64, v11);
      __int16 v44 = (char *)v68;
      if (v69 >= v70)
      {
        unint64_t v57 = v69 + 1;
        if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
        {
          int64_t v62 = (char *)&v64 - (unsigned char *)v68;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
          __int16 v44 = (char *)v68;
          uint64_t v43 = (int *)((char *)v68 + v62);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
          uint64_t v43 = &v64;
          __int16 v44 = (char *)v68;
        }
      }
      uint64_t v45 = &v44[24 * v69];
      long long v46 = *(_OWORD *)v43;
      *((void *)v45 + 2) = *((void *)v43 + 2);
      *(_OWORD *)uint64_t v45 = v46;
      ++v69;
      if (v67[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
      }
    }
  }
  if (v76)
  {
    uint64_t v47 = (void **)__p;
    if (__p)
    {
      unsigned int v48 = v75;
      unsigned int v49 = __p;
      if (v75 != __p)
      {
        do
          unsigned int v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
        while (v48 != v47);
        unsigned int v49 = __p;
      }
      uint64_t v75 = v47;
      operator delete(v49);
    }
    int v20 = v72;
    if (!v72) {
      goto LABEL_66;
    }
    unsigned int v50 = v73;
    uint64_t v22 = v72;
    if (v73 == v72)
    {
LABEL_65:
      uint64_t v73 = v20;
      operator delete(v22);
LABEL_66:
      if (v68 != v71) {
        free(v68);
      }
      return 0;
    }
    do
    {
      unint64_t v52 = (void *)*--v50;
      uint64_t v51 = v52;
      void *v50 = 0;
      if (v52) {
        operator delete[](v51);
      }
    }
    while (v50 != v20);
LABEL_64:
    uint64_t v22 = v72;
    goto LABEL_65;
  }
  return 0;
}

uint64_t mlir::mps::MatMulOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v21[6] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a1;
  uint64_t v19 = v21;
  uint64_t v20 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"transpose_lhs", 13, *a2);
    uint64_t v5 = v4;
    unsigned int v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      unsigned int v6 = v20;
    }
    uint64_t v7 = (uint64_t *)((char *)v19 + 16 * v6);
    *uint64_t v7 = NamedAttr;
    v7[1] = v5;
    unsigned int v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    uint64_t v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      uint64_t v10 = (uint64_t *)v19;
      if (v8) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t DictionaryAttr = 0;
      if (v10 == v21) {
        return DictionaryAttr;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"transpose_rhs", 13, v9);
  uint64_t v15 = v14;
  unsigned int v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    unsigned int v16 = v20;
  }
  uint64_t v17 = (uint64_t *)((char *)v19 + 16 * v16);
  *uint64_t v17 = v13;
  v17[1] = v15;
  unsigned int v8 = v20 + 1;
  LODWORD(v20) = v8;
  uint64_t v10 = (uint64_t *)v19;
  if (!v8) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  uint64_t v10 = (uint64_t *)v19;
  if (v19 != v21) {
LABEL_7:
  }
    free(v10);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::MatMulOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x10uLL);
    void *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::MatMulOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::MatMulOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::MatMulOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::MatMulOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = 0x1E8EB8000uLL;
    {
      unint64_t v4 = 0x1E8EB8000;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::MatMulOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 107;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        unsigned int v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::MatMulOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = 0x1E8EB8000;
      }
    }
    a1[33] = *(void *)(v4 + 1976);
    return a1[32];
  }
  return result;
}

void mlir::mps::MatMulOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a4;
  uint64_t v21 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  if (a5) {
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::MatMulOpGenericAdaptorBase::Properties>((void *)a2) = a5;
  }
  if (a6) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::MatMulOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 8) = a6;
  __src = v26;
  uint64_t v25 = 0x200000000;
  uint64_t v10 = *a1;
  unint64_t v11 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v14 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v22, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::MatMulOp::inferReturnTypes(v10, v11, 1, v23[0], v23[1], Dictionary, v14, v15, v22[0], v22[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unsigned int v16 = __src;
  }
  uint64_t v17 = v25;
  uint64_t v18 = *(unsigned int *)(a2 + 72);
  unint64_t v19 = v18 + v25;
  if (v19 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v19, 8);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  if (v17)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v18), v16, 8 * v17);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v18 + v17;
  if (__src != v26) {
    free(__src);
  }
}

void mlir::mps::MatMulOp::build(mlir::BoolAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, mlir::MLIRContext *a5, mlir::MLIRContext *a6)
{
  unint64_t v28[2] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a4;
  uint64_t v23 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v23, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  uint64_t BoolAttr = mlir::Builder::getBoolAttr(a1, a5);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::MatMulOpGenericAdaptorBase::Properties>((void *)a2) = BoolAttr;
  uint64_t v11 = mlir::Builder::getBoolAttr(a1, a6);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::MatMulOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = v11;
  __src = v28;
  uint64_t v27 = 0x200000000;
  uint64_t v12 = *a1;
  uint64_t v13 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v25, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unsigned int v16 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::MatMulOp::inferReturnTypes(v12, v13, 1, v25[0], v25[1], Dictionary, v16, v17, v24[0], v24[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v18 = __src;
  }
  uint64_t v19 = v27;
  uint64_t v20 = *(unsigned int *)(a2 + 72);
  unint64_t v21 = v20 + v27;
  if (v21 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v21, 8);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  if (v19)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v20), v18, 8 * v19);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v20 + v19;
  if (__src != v28) {
    free(__src);
  }
}

BOOL mlir::mps::MatMulOp::verifyInvariantsImpl(uint64_t **this)
{
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *(void **)v3;
  int v5 = *(void **)(v3 + 8);
  unint64_t v9 = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v4, (const void **)"transpose_lhs", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps17(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v9))return 0; {
  unint64_t v9 = *this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v5, (const void **)"transpose_rhs", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps17(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v9)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps26(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps26(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v6 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps26(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::mps::MatMulOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.matmul", 10, v2, v3, 0, 0);
  void *v4 = &unk_1EC983568;
  v4[12] = mlir::mps::MatMulOp::canonicalize;
  unint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::MaterializeSparseTensorOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unint64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      uint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          uint64_t v27 = (char *)v60;
        }
      }
      long long v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)long long v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    unint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v67;
      long long v32 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        long long v32 = __p;
      }
      uint64_t v67 = v30;
      operator delete(v32);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      unint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "storage_type", 0xCuLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unint64_t v57 = "expected key entry for storage_type in DictionaryAttr to set Properties.";
      uint64_t v58 = 72;
      int64_t v36 = &v56;
      int64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          int64_t v37 = (char *)v60;
          int64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          int64_t v36 = &v56;
          int64_t v37 = (char *)v60;
        }
      }
      unsigned int v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)unsigned int v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    char v40 = (void **)__p;
    if (__p)
    {
      uint64_t v41 = v67;
      long long v42 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        long long v42 = __p;
      }
      uint64_t v67 = v40;
      operator delete(v42);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      __int16 v44 = v45;
      *uint64_t v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 57;
    uint64_t v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        uint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      unint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      int v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          int v15 = (char *)v60;
          unint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unint64_t v14 = &v56;
          int v15 = (char *)v60;
        }
      }
      unsigned int v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)unsigned int v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v67 = v18;
      operator delete(v20);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      uint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = (void *)*--v22;
      unint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::mps::MaterializeSparseTensorOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"storage_type", 12, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  unint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  unint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::mps::__mlir_ods_local_attr_constraint_MPSOps32(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1
    || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id)
  {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    unint64_t v30 = "attribute '";
    uint64_t v31 = 11;
    unint64_t v7 = &v29;
    BOOL v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        BOOL v8 = (char *)v35;
        unint64_t v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        unint64_t v7 = &v29;
        BOOL v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      long long v29 = a2;
      unint64_t v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        unint64_t v30 = "' failed to satisfy constraint: valid SparseTensorStorage";
        uint64_t v31 = 57;
        uint64_t v11 = &v29;
        uint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v12 = (char *)v35;
            uint64_t v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            uint64_t v12 = (char *)v35;
          }
        }
        long long v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)long long v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    unsigned int v16 = (void **)__p;
    if (__p)
    {
      long long v17 = v42;
      uint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          long long v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      long long v42 = v16;
      operator delete(v18);
    }
    uint64_t v19 = v39;
    if (v39)
    {
      uint64_t v20 = v40;
      unint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = (void *)*--v20;
          uint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        unint64_t v21 = v39;
      }
      char v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::MaterializeSparseTensorOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::MaterializeSparseTensorOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::MaterializeSparseTensorOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::MaterializeSparseTensorOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::MaterializeSparseTensorOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::MaterializeSparseTensorOpGenericAdapto"
              "rBase::Properties]";
        unint64_t v14 = 124;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::MaterializeSparseTensorOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[95];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::mps::SparseTensorStorageAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    BOOL v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)BOOL v8 = v9;
    ++v47;
  }
  char v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::SparseTensorStorageAttr]";
  unint64_t v41 = 84;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    char v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      unsigned int v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)unsigned int v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        uint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            uint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      unint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          unint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      int64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          unint64_t v30 = (void *)*--v27;
          long long v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      int64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

void mlir::mps::MaterializeSparseTensorOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v17 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::OperationState::addOperands(a2, a5, a6);
  unint64_t v13 = *a1;
  unsigned int v18 = a7;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v13);
  v19[0] = &mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id;
  v19[1] = v13;
  uint64_t v15 = mlir::StorageUniquer::get<mlir::mps::detail::SparseTensorStorageAttrStorage,mlir::mps::SparseTensorStorage>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail30SparseTensorStorageAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_23SparseTensorStorageAttrEJNS2_19SparseTensorStorageEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v19, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id, &v18);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::MaterializeSparseTensorOpGenericAdaptorBase::Properties>((void *)a2) = v15;
  uint64_t v16 = *(unsigned int *)(a2 + 72);
  if (v16 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v16) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::mps::MaterializeSparseTensorOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v184 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v173 = (const void **)v2;
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps32(v3, (const void **)"storage_type", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps32(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v173))return 0; {
    uint64_t v4 = *this;
    }
    int v5 = (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v6 = *v5;
    unint64_t v7 = &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
    BOOL v8 = (void *)*((void *)*v5 + 17);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v6 + 8);
      v173 = v5;
      uint64_t v174 = v21;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v173);
      if (mlir::Type::isF32((mlir::Type *)&OperandRange))
      {
LABEL_57:
        unint64_t v49 = *this;
        if ((*((unsigned char *)*this + 46) & 0x80) == 0)
        {
          uint64_t v51 = -1;
          uint64_t v52 = 32;
          goto LABEL_60;
        }
        uint64_t v50 = *((unsigned int *)v49 + 17);
        uint64_t v51 = v50 - 1;
        if (v50 != 1)
        {
          uint64_t v52 = v49[9] + 32;
LABEL_60:
          uint64_t v53 = 0;
          unsigned int v54 = 1;
          do
          {
            uint64_t v55 = *this;
            int v56 = (const void **)(*(void *)(*(void *)(v52 + 32 * v53 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v57 = *v56;
            uint64_t v58 = (void *)*((void *)*v56 + 17);
            if (v58 == v7)
            {
              uint64_t v63 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v57 + 8);
              v173 = v56;
              uint64_t v174 = v63;
              uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v173);
              if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
                || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
              {
                goto LABEL_62;
              }
              unint64_t v57 = *v56;
              if (*((_UNKNOWN **)*v56 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
              {
LABEL_65:
                uint64_t v59 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v57 + 8);
                v164 = v56;
                uint64_t v165 = v59;
                if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v164))
                {
                  uint64_t v60 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v56 + 8);
                  v170 = v56;
                  v171 = (const char *)v60;
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v170);
                  if (v61 == 1)
                  {
                    uint64_t v62 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v56 + 8);
                    v167 = v56;
                    uint64_t v168 = v62;
                    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v167);
                    if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
                      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
                    {
                      goto LABEL_62;
                    }
                  }
                }
              }
            }
            else if (v58 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
            {
              goto LABEL_65;
            }
            __int16 v166 = 261;
            v164 = (const void **)"operand";
            uint64_t v165 = 7;
            mlir::Operation::emitOpError(v55, &v164, (uint64_t)&v173);
            if (v173)
            {
              LODWORD(v170) = 3;
              v171 = " #";
              uint64_t v172 = 2;
              int v64 = (char *)v175;
              if (v176 >= v177)
              {
                unint64_t v92 = v176 + 1;
                if (v175 <= &v170 && (char *)v175 + 24 * v176 > (char *)&v170)
                {
                  int64_t v98 = (char *)&v170 - (unsigned char *)v175;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v92, 24);
                  int v64 = (char *)v175;
                  uint64_t v65 = (const void ***)((char *)v175 + v98);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v92, 24);
                  uint64_t v65 = &v170;
                  int v64 = (char *)v175;
                }
              }
              else
              {
                uint64_t v65 = &v170;
              }
              uint64_t v66 = &v64[24 * v176];
              long long v67 = *(_OWORD *)v65;
              *((void *)v66 + 2) = v65[2];
              *(_OWORD *)uint64_t v66 = v67;
              uint64_t v68 = ++v176;
              if (v173)
              {
                LODWORD(v170) = 5;
                v171 = (const char *)v54;
                uint64_t v69 = (char *)v175;
                if (v68 >= v177)
                {
                  unint64_t v93 = v68 + 1;
                  BOOL v94 = (char *)v175 + 24 * v68 > (char *)&v170;
                  if (v175 <= &v170 && v94)
                  {
                    int64_t v99 = (char *)&v170 - (unsigned char *)v175;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v93, 24);
                    uint64_t v69 = (char *)v175;
                    unsigned int v70 = (const void ***)((char *)v175 + v99);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v93, 24);
                    unsigned int v70 = &v170;
                    uint64_t v69 = (char *)v175;
                  }
                }
                else
                {
                  unsigned int v70 = &v170;
                }
                uint64_t v71 = &v69[24 * v176];
                long long v72 = *(_OWORD *)v70;
                *((void *)v71 + 2) = v70[2];
                *(_OWORD *)uint64_t v71 = v72;
                uint64_t v73 = ++v176;
                if (v173)
                {
                  LODWORD(v170) = 3;
                  v171 = " must be variadic of unranked tensor of 32/64-bit signed integer values or 1D tensor of 32/64-b"
                         "it signed integer values, but got ";
                  uint64_t v172 = 129;
                  uint64_t v74 = (char *)v175;
                  if (v73 >= v177)
                  {
                    unint64_t v95 = v73 + 1;
                    BOOL v96 = (char *)v175 + 24 * v73 > (char *)&v170;
                    if (v175 <= &v170 && v96)
                    {
                      int64_t v100 = (char *)&v170 - (unsigned char *)v175;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v95, 24);
                      uint64_t v74 = (char *)v175;
                      uint64_t v75 = (const void ***)((char *)v175 + v100);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v95, 24);
                      uint64_t v75 = &v170;
                      uint64_t v74 = (char *)v175;
                    }
                  }
                  else
                  {
                    uint64_t v75 = &v170;
                  }
                  char v76 = &v74[24 * v176];
                  long long v77 = *(_OWORD *)v75;
                  *((void *)v76 + 2) = v75[2];
                  *(_OWORD *)char v76 = v77;
                  ++v176;
                  if (v173)
                  {
                    long long v78 = &v170;
                    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v170, (uint64_t)v56);
                    uint64_t v79 = (char *)v175;
                    if (v176 >= v177)
                    {
                      unint64_t v97 = v176 + 1;
                      if (v175 <= &v170 && (char *)v175 + 24 * v176 > (char *)&v170)
                      {
                        int64_t v101 = (char *)&v170 - (unsigned char *)v175;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v97, 24);
                        uint64_t v79 = (char *)v175;
                        long long v78 = (const void ***)((char *)v175 + v101);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v97, 24);
                        long long v78 = &v170;
                        uint64_t v79 = (char *)v175;
                      }
                    }
                    uint64_t v80 = &v79[24 * v176];
                    long long v81 = *(_OWORD *)v78;
                    *((void *)v80 + 2) = v78[2];
                    *(_OWORD *)uint64_t v80 = v81;
                    ++v176;
                  }
                }
              }
            }
            char v82 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v173);
            if (v173) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v173);
            }
            if (v183)
            {
              uint64_t v83 = (void **)__p;
              if (__p)
              {
                unint64_t v84 = v182;
                uint64_t v85 = __p;
                if (v182 != __p)
                {
                  do
                    unint64_t v84 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v84 - 1);
                  while (v84 != v83);
                  uint64_t v85 = __p;
                }
                v182 = v83;
                operator delete(v85);
              }
              unint64_t v86 = v179;
              if (v179)
              {
                unint64_t v87 = v7;
                unint64_t v88 = v180;
                unint64_t v89 = v179;
                if (v180 != v179)
                {
                  do
                  {
                    unint64_t v91 = (void *)*--v88;
                    unint64_t v90 = v91;
                    *unint64_t v88 = 0;
                    if (v91) {
                      operator delete[](v90);
                    }
                  }
                  while (v88 != v86);
                  unint64_t v89 = v179;
                }
                v180 = v86;
                operator delete(v89);
                unint64_t v7 = v87;
              }
              if (v175 != v178) {
                free(v175);
              }
            }
            if (!v82) {
              return 0;
            }
LABEL_62:
            ++v54;
            ++v53;
          }
          while (v53 != v51);
        }
        if (*((_DWORD *)*this + 9)) {
          uint64_t v102 = (uint64_t)(*this - 2);
        }
        else {
          uint64_t v102 = 0;
        }
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v102, 0);
        int v104 = *this;
        unint64_t v105 = (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v106 = (void *)*((void *)*v105 + 17);
        if (v106 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id || v106 == v7)
        {
          uint64_t v108 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v105 + 8);
          v173 = v105;
          uint64_t v174 = v108;
          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v173);
          if (mlir::Type::isF32((mlir::Type *)&OperandRange))
          {
            uint64_t v109 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v105 + 8);
            v164 = v105;
            uint64_t v165 = v109;
            if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v164))
            {
              ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v164);
              if (v111)
              {
                uint64_t v112 = 8 * v111;
                while (*ArgAttrsAttr != 0x8000000000000000)
                {
                  ++ArgAttrsAttr;
                  v112 -= 8;
                  if (!v112) {
                    goto LABEL_133;
                  }
                }
              }
              else
              {
LABEL_133:
                uint64_t v113 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v105 + 8);
                v170 = v105;
                v171 = (const char *)v113;
                if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v170))
                {
                  uint64_t v114 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v105 + 8);
                  v167 = v105;
                  uint64_t v168 = v114;
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v167);
                  if (v115 == 2) {
                    return 1;
                  }
                }
              }
            }
          }
        }
        __int16 v166 = 261;
        v164 = (const void **)"result";
        uint64_t v165 = 6;
        mlir::Operation::emitOpError(v104, &v164, (uint64_t)&v173);
        if (v173)
        {
          LODWORD(v170) = 3;
          v171 = " #";
          uint64_t v172 = 2;
          char v116 = &v170;
          uint64_t v117 = (char *)v175;
          if (v176 >= v177)
          {
            unint64_t v145 = v176 + 1;
            if (v175 <= &v170 && (char *)v175 + 24 * v176 > (char *)&v170)
            {
              int64_t v157 = (char *)&v170 - (unsigned char *)v175;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v145, 24);
              uint64_t v117 = (char *)v175;
              char v116 = (const void ***)((char *)v175 + v157);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v145, 24);
              char v116 = &v170;
              uint64_t v117 = (char *)v175;
            }
          }
          uint64_t v118 = &v117[24 * v176];
          long long v119 = *(_OWORD *)v116;
          *((void *)v118 + 2) = v116[2];
          *(_OWORD *)uint64_t v118 = v119;
          uint64_t v120 = ++v176;
          if (v173)
          {
            LODWORD(v170) = 5;
            v171 = 0;
            unsigned int v121 = &v170;
            v122 = (char *)v175;
            if (v120 >= v177)
            {
              unint64_t v148 = v120 + 1;
              BOOL v149 = (char *)v175 + 24 * v120 > (char *)&v170;
              if (v175 <= &v170 && v149)
              {
                int64_t v159 = (char *)&v170 - (unsigned char *)v175;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v148, 24);
                v122 = (char *)v175;
                unsigned int v121 = (const void ***)((char *)v175 + v159);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v148, 24);
                unsigned int v121 = &v170;
                v122 = (char *)v175;
              }
            }
            v123 = &v122[24 * v176];
            long long v124 = *(_OWORD *)v121;
            *((void *)v123 + 2) = v121[2];
            *(_OWORD *)v123 = v124;
            uint64_t v125 = ++v176;
            if (v173)
            {
              LODWORD(v170) = 3;
              v171 = " must be static-shape defined tensor with rank equal to any of:2, but got ";
              uint64_t v172 = 74;
              v126 = &v170;
              v127 = (char *)v175;
              if (v125 >= v177)
              {
                unint64_t v152 = v125 + 1;
                BOOL v153 = (char *)v175 + 24 * v125 > (char *)&v170;
                if (v175 <= &v170 && v153)
                {
                  int64_t v161 = (char *)&v170 - (unsigned char *)v175;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v152, 24);
                  v127 = (char *)v175;
                  v126 = (const void ***)((char *)v175 + v161);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v152, 24);
                  v126 = &v170;
                  v127 = (char *)v175;
                }
              }
              v128 = &v127[24 * v176];
              long long v129 = *(_OWORD *)v126;
              *((void *)v128 + 2) = v126[2];
              *(_OWORD *)v128 = v129;
              ++v176;
              if (v173)
              {
                v130 = &v170;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v170, (uint64_t)v105);
                v131 = (char *)v175;
                if (v176 >= v177)
                {
                  unint64_t v155 = v176 + 1;
                  if (v175 <= &v170 && (char *)v175 + 24 * v176 > (char *)&v170)
                  {
                    int64_t v163 = (char *)&v170 - (unsigned char *)v175;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v155, 24);
                    v131 = (char *)v175;
                    v130 = (const void ***)((char *)v175 + v163);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v155, 24);
                    v130 = &v170;
                    v131 = (char *)v175;
                  }
                }
                v132 = &v131[24 * v176];
                long long v133 = *(_OWORD *)v130;
                *((void *)v132 + 2) = v130[2];
                *(_OWORD *)v132 = v133;
                ++v176;
              }
            }
          }
        }
        char v134 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v173);
        if (v173) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v173);
        }
        if (v183)
        {
          v135 = (void **)__p;
          if (__p)
          {
            v136 = v182;
            v137 = __p;
            if (v182 != __p)
            {
              do
                v136 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v136 - 1);
              while (v136 != v135);
              v137 = __p;
            }
            v182 = v135;
            operator delete(v137);
          }
          v138 = v179;
          if (v179)
          {
            v139 = v180;
            v140 = v179;
            if (v180 != v179)
            {
              do
              {
                v142 = (void *)*--v139;
                v141 = v142;
                void *v139 = 0;
                if (v142) {
                  operator delete[](v141);
                }
              }
              while (v139 != v138);
              v140 = v179;
            }
            v180 = v138;
            operator delete(v140);
          }
          if (v175 != v178) {
            free(v175);
          }
        }
        return v134 != 0;
      }
      unint64_t v6 = *v5;
      if (*((_UNKNOWN **)*v5 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
      {
LABEL_25:
        __int16 v166 = 261;
        v164 = (const void **)"operand";
        uint64_t v165 = 7;
        mlir::Operation::emitOpError(v4, &v164, (uint64_t)&v173);
        if (v173)
        {
          LODWORD(v170) = 3;
          v171 = " #";
          uint64_t v172 = 2;
          uint64_t v22 = &v170;
          uint64_t v23 = (char *)v175;
          if (v176 >= v177)
          {
            unint64_t v144 = v176 + 1;
            if (v175 <= &v170 && (char *)v175 + 24 * v176 > (char *)&v170)
            {
              int64_t v156 = (char *)&v170 - (unsigned char *)v175;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v144, 24);
              uint64_t v23 = (char *)v175;
              uint64_t v22 = (const void ***)((char *)v175 + v156);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v144, 24);
              uint64_t v22 = &v170;
              uint64_t v23 = (char *)v175;
            }
          }
          unint64_t v24 = &v23[24 * v176];
          long long v25 = *(_OWORD *)v22;
          *((void *)v24 + 2) = v22[2];
          *(_OWORD *)unint64_t v24 = v25;
          uint64_t v26 = ++v176;
          if (v173)
          {
            LODWORD(v170) = 5;
            v171 = 0;
            int64_t v27 = &v170;
            int64_t v28 = (char *)v175;
            if (v26 >= v177)
            {
              unint64_t v146 = v26 + 1;
              BOOL v147 = (char *)v175 + 24 * v26 > (char *)&v170;
              if (v175 <= &v170 && v147)
              {
                int64_t v158 = (char *)&v170 - (unsigned char *)v175;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v146, 24);
                int64_t v28 = (char *)v175;
                int64_t v27 = (const void ***)((char *)v175 + v158);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v146, 24);
                int64_t v27 = &v170;
                int64_t v28 = (char *)v175;
              }
            }
            long long v29 = &v28[24 * v176];
            long long v30 = *(_OWORD *)v27;
            *((void *)v29 + 2) = v27[2];
            *(_OWORD *)long long v29 = v30;
            uint64_t v31 = ++v176;
            if (v173)
            {
              LODWORD(v170) = 3;
              v171 = " must be unranked tensor of 32-bit float values or 1D tensor of 32-bit float values, but got ";
              uint64_t v172 = 93;
              unint64_t v32 = &v170;
              unint64_t v33 = (char *)v175;
              if (v31 >= v177)
              {
                unint64_t v150 = v31 + 1;
                BOOL v151 = (char *)v175 + 24 * v31 > (char *)&v170;
                if (v175 <= &v170 && v151)
                {
                  int64_t v160 = (char *)&v170 - (unsigned char *)v175;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v150, 24);
                  unint64_t v33 = (char *)v175;
                  unint64_t v32 = (const void ***)((char *)v175 + v160);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v150, 24);
                  unint64_t v32 = &v170;
                  unint64_t v33 = (char *)v175;
                }
              }
              unint64_t v34 = &v33[24 * v176];
              long long v35 = *(_OWORD *)v32;
              *((void *)v34 + 2) = v32[2];
              *(_OWORD *)unint64_t v34 = v35;
              ++v176;
              if (v173)
              {
                int64_t v36 = &v170;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v170, (uint64_t)v5);
                int64_t v37 = (char *)v175;
                if (v176 >= v177)
                {
                  unint64_t v154 = v176 + 1;
                  if (v175 <= &v170 && (char *)v175 + 24 * v176 > (char *)&v170)
                  {
                    int64_t v162 = (char *)&v170 - (unsigned char *)v175;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v154, 24);
                    int64_t v37 = (char *)v175;
                    int64_t v36 = (const void ***)((char *)v175 + v162);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v175, v178, v154, 24);
                    int64_t v36 = &v170;
                    int64_t v37 = (char *)v175;
                  }
                }
                unsigned int v38 = &v37[24 * v176];
                long long v39 = *(_OWORD *)v36;
                *((void *)v38 + 2) = v36[2];
                *(_OWORD *)unsigned int v38 = v39;
                ++v176;
              }
            }
          }
        }
        char v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v173);
        if (v173) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v173);
        }
        if (v183)
        {
          unint64_t v41 = (void **)__p;
          if (__p)
          {
            uint64_t v42 = v182;
            __int16 v43 = __p;
            if (v182 != __p)
            {
              do
                uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
              while (v42 != v41);
              __int16 v43 = __p;
            }
            v182 = v41;
            operator delete(v43);
          }
          uint64_t v44 = v179;
          if (v179)
          {
            uint64_t v45 = v180;
            long long v46 = v179;
            if (v180 != v179)
            {
              do
              {
                unsigned int v48 = (void *)*--v45;
                unsigned int v47 = v48;
                *uint64_t v45 = 0;
                if (v48) {
                  operator delete[](v47);
                }
              }
              while (v45 != v44);
              long long v46 = v179;
            }
            v180 = v44;
            operator delete(v46);
          }
          if (v175 != v178) {
            free(v175);
          }
        }
        if (!v40) {
          return 0;
        }
        goto LABEL_57;
      }
    }
    else if (v8 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      goto LABEL_25;
    }
    v164 = v5;
    uint64_t v165 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v6 + 8);
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v164))
    {
      uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v5 + 8);
      v170 = v5;
      v171 = (const char *)v9;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v170);
      if (v10 == 1)
      {
        uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v5 + 8);
        v167 = v5;
        uint64_t v168 = v11;
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v167);
        if (mlir::Type::isF32((mlir::Type *)&OperandRange)) {
          goto LABEL_57;
        }
      }
    }
    goto LABEL_25;
  }
  v164 = (const void **)"requires attribute 'storage_type'";
  __int16 v166 = 259;
  mlir::OpState::emitOpError(this, &v164, (uint64_t)&v173);
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v173);
  if (v173) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v173);
  }
  if (v183)
  {
    unint64_t v13 = (void **)__p;
    if (__p)
    {
      unint64_t v14 = v182;
      uint64_t v15 = __p;
      if (v182 != __p)
      {
        do
          unint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        uint64_t v15 = __p;
      }
      v182 = v13;
      operator delete(v15);
    }
    uint64_t v16 = v179;
    if (v179)
    {
      uint64_t v17 = v180;
      unsigned int v18 = v179;
      if (v180 != v179)
      {
        do
        {
          uint64_t v20 = (void *)*--v17;
          uint64_t v19 = v20;
          *uint64_t v17 = 0;
          if (v20) {
            operator delete[](v19);
          }
        }
        while (v17 != v16);
        unsigned int v18 = v179;
      }
      v180 = v16;
      operator delete(v18);
    }
    if (v175 != v178) {
      free(v175);
    }
  }
  return v12;
}

uint64_t mlir::mps::MaterializeSparseTensorOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.materialize_sparse_tensor", 29, v2, v3, 0, 0);
  void *v4 = &unk_1EC981F68;
  v4[12] = mlir::mps::MaterializeSparseTensorOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::MatrixDecompositionLUOpGenericAdaptorBase::MatrixDecompositionLUOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.matrix_decomposition_lu", 27, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::MatrixDecompositionLUOp::build(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v22[2] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  __src = v22;
  uint64_t v21 = 0x200000000;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)a2;
  mlir::ValueRange::ValueRange((unint64_t *)v19, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v18, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::MatrixDecompositionLUOp::inferReturnTypes(v5, v6, 1, v19[0], (uint64_t)v19[1], v8, v9, v10, v15, v16, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v11 = __src;
  }
  uint64_t v12 = v21;
  uint64_t v13 = *(unsigned int *)(a2 + 72);
  unint64_t v14 = v13 + v21;
  if (v14 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  if (v12)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v13), v11, 8 * v12);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + v12;
  if (__src != v22) {
    free(__src);
  }
}

BOOL mlir::mps::MatrixDecompositionLUOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps35(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))return 0; {
  uint64_t v2 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps35(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0))return 0; {
  uint64_t v4 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  }
  uint64_t v5 = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 1);
  uint64_t v6 = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps36(*this, (const void **)(*(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 1u))return 0; {
  if (*((_DWORD *)*this + 9))
  }
    uint64_t v7 = (uint64_t)(*this - 2);
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 2);
  uint64_t v9 = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps24(*this, *(void *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 2u) != 0;
}

uint64_t mlir::mps::__mlir_ods_local_type_constraint_MPSOps35(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a2;
  uint64_t v11 = (void *)*((void *)*a2 + 17);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v62[0] = a2;
    v62[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v10 + 8);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v62);
    if (mlir::Type::isF16((mlir::Type *)&OperandRange)
      || mlir::Type::isF32((mlir::Type *)&OperandRange)
      || mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      return 1;
    }
    uint64_t v10 = *a2;
    __int16 v43 = (void *)*((void *)*a2 + 17);
    if (v43 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      && v43 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      goto LABEL_11;
    }
  }
  else if (v11 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id {
         && v11 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  }
  {
    goto LABEL_11;
  }
  uint64_t v55 = a2;
  uint64_t v56 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v10 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v55);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange)
    || mlir::Type::isF32((mlir::Type *)&OperandRange)
    || mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
    uint64_t v59 = a2;
    uint64_t v60 = v13;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
    if (v14 >= 2) {
      return 1;
    }
  }
LABEL_11:
  __int16 v57 = 261;
  uint64_t v55 = a3;
  uint64_t v56 = a4;
  mlir::Operation::emitOpError(a1, &v55, (uint64_t)v62);
  if (v62[0])
  {
    LODWORD(v59) = 3;
    uint64_t v60 = (uint64_t)" #";
    uint64_t v61 = 2;
    uint64_t v15 = &v59;
    uint64_t v16 = (char *)v63;
    if (v64 >= v65)
    {
      unint64_t v45 = v64 + 1;
      if (v63 <= &v59 && (char *)v63 + 24 * v64 > (char *)&v59)
      {
        int64_t v51 = (char *)&v59 - (unsigned char *)v63;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v45, 24);
        uint64_t v16 = (char *)v63;
        uint64_t v15 = (const void ***)((char *)v63 + v51);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v45, 24);
        uint64_t v15 = &v59;
        uint64_t v16 = (char *)v63;
      }
    }
    uint64_t v17 = &v16[24 * v64];
    long long v18 = *(_OWORD *)v15;
    *((void *)v17 + 2) = v15[2];
    *(_OWORD *)uint64_t v17 = v18;
    uint64_t v19 = ++v64;
    if (v62[0])
    {
      LODWORD(v59) = 5;
      uint64_t v60 = a5;
      uint64_t v20 = &v59;
      uint64_t v21 = (char *)v63;
      if (v19 >= v65)
      {
        unint64_t v46 = v19 + 1;
        BOOL v47 = (char *)v63 + 24 * v19 > (char *)&v59;
        if (v63 <= &v59 && v47)
        {
          int64_t v52 = (char *)&v59 - (unsigned char *)v63;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v46, 24);
          uint64_t v21 = (char *)v63;
          uint64_t v20 = (const void ***)((char *)v63 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v46, 24);
          uint64_t v20 = &v59;
          uint64_t v21 = (char *)v63;
        }
      }
      uint64_t v22 = &v21[24 * v64];
      long long v23 = *(_OWORD *)v20;
      *((void *)v22 + 2) = v20[2];
      *(_OWORD *)uint64_t v22 = v23;
      uint64_t v24 = ++v64;
      if (v62[0])
      {
        LODWORD(v59) = 3;
        uint64_t v60 = (uint64_t)" must be unranked tensor of floating point values or ranked tensor type with rank equal to or gre"
                       "ater than 2, but got ";
        uint64_t v61 = 118;
        long long v25 = &v59;
        uint64_t v26 = (char *)v63;
        if (v24 >= v65)
        {
          unint64_t v48 = v24 + 1;
          BOOL v49 = (char *)v63 + 24 * v24 > (char *)&v59;
          if (v63 <= &v59 && v49)
          {
            int64_t v53 = (char *)&v59 - (unsigned char *)v63;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v48, 24);
            uint64_t v26 = (char *)v63;
            long long v25 = (const void ***)((char *)v63 + v53);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v48, 24);
            long long v25 = &v59;
            uint64_t v26 = (char *)v63;
          }
        }
        int64_t v27 = &v26[24 * v64];
        long long v28 = *(_OWORD *)v25;
        *((void *)v27 + 2) = v25[2];
        *(_OWORD *)int64_t v27 = v28;
        ++v64;
        if (v62[0])
        {
          long long v29 = &v59;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v59, (uint64_t)a2);
          long long v30 = (char *)v63;
          if (v64 >= v65)
          {
            unint64_t v50 = v64 + 1;
            if (v63 <= &v59 && (char *)v63 + 24 * v64 > (char *)&v59)
            {
              int64_t v54 = (char *)&v59 - (unsigned char *)v63;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v50, 24);
              long long v30 = (char *)v63;
              long long v29 = (const void ***)((char *)v63 + v54);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v50, 24);
              long long v29 = &v59;
              long long v30 = (char *)v63;
            }
          }
          uint64_t v31 = &v30[24 * v64];
          long long v32 = *(_OWORD *)v29;
          *((void *)v31 + 2) = v29[2];
          *(_OWORD *)uint64_t v31 = v32;
          ++v64;
        }
      }
    }
  }
  uint64_t v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v62);
  if (v62[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v62);
  }
  if (v71)
  {
    unint64_t v34 = (void **)__p;
    if (__p)
    {
      long long v35 = v70;
      int64_t v36 = __p;
      if (v70 != __p)
      {
        do
          long long v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        int64_t v36 = __p;
      }
      unsigned int v70 = v34;
      operator delete(v36);
    }
    int64_t v37 = v67;
    if (v67)
    {
      unsigned int v38 = v68;
      long long v39 = v67;
      if (v68 != v67)
      {
        do
        {
          unint64_t v41 = (void *)*--v38;
          char v40 = v41;
          *unsigned int v38 = 0;
          if (v41) {
            operator delete[](v40);
          }
        }
        while (v38 != v37);
        long long v39 = v67;
      }
      uint64_t v68 = v37;
      operator delete(v39);
    }
    if (v63 != v66) {
      free(v63);
    }
  }
  return v33;
}

uint64_t mlir::mps::__mlir_ods_local_type_constraint_MPSOps36(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a2;
  uint64_t v11 = (void *)*((void *)*a2 + 17);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v62[0] = a2;
    v62[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v10 + 8);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v62);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)) {
      return 1;
    }
    uint64_t v10 = *a2;
    uint64_t v16 = (void *)*((void *)*a2 + 17);
    if (v16 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      goto LABEL_16;
    }
  }
  else if (v11 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id {
         && v11 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  }
  {
    goto LABEL_16;
  }
  uint64_t v55 = a2;
  uint64_t v56 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v10 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v55);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
    uint64_t v59 = a2;
    uint64_t v60 = v13;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
    if (v14 >= 2) {
      return 1;
    }
  }
LABEL_16:
  __int16 v57 = 261;
  uint64_t v55 = a3;
  uint64_t v56 = a4;
  mlir::Operation::emitOpError(a1, &v55, (uint64_t)v62);
  if (v62[0])
  {
    LODWORD(v59) = 3;
    uint64_t v60 = (uint64_t)" #";
    uint64_t v61 = 2;
    long long v18 = &v59;
    uint64_t v19 = (char *)v63;
    if (v64 >= v65)
    {
      unint64_t v45 = v64 + 1;
      if (v63 <= &v59 && (char *)v63 + 24 * v64 > (char *)&v59)
      {
        int64_t v51 = (char *)&v59 - (unsigned char *)v63;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v45, 24);
        uint64_t v19 = (char *)v63;
        long long v18 = (const void ***)((char *)v63 + v51);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v45, 24);
        long long v18 = &v59;
        uint64_t v19 = (char *)v63;
      }
    }
    uint64_t v20 = &v19[24 * v64];
    long long v21 = *(_OWORD *)v18;
    *((void *)v20 + 2) = v18[2];
    *(_OWORD *)uint64_t v20 = v21;
    uint64_t v22 = ++v64;
    if (v62[0])
    {
      LODWORD(v59) = 5;
      uint64_t v60 = a5;
      long long v23 = &v59;
      uint64_t v24 = (char *)v63;
      if (v22 >= v65)
      {
        unint64_t v46 = v22 + 1;
        BOOL v47 = (char *)v63 + 24 * v22 > (char *)&v59;
        if (v63 <= &v59 && v47)
        {
          int64_t v52 = (char *)&v59 - (unsigned char *)v63;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v46, 24);
          uint64_t v24 = (char *)v63;
          long long v23 = (const void ***)((char *)v63 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v46, 24);
          long long v23 = &v59;
          uint64_t v24 = (char *)v63;
        }
      }
      long long v25 = &v24[24 * v64];
      long long v26 = *(_OWORD *)v23;
      *((void *)v25 + 2) = v23[2];
      *(_OWORD *)long long v25 = v26;
      uint64_t v27 = ++v64;
      if (v62[0])
      {
        LODWORD(v59) = 3;
        uint64_t v60 = (uint64_t)" must be unranked tensor of 32-bit unsigned integer values or ranked tensor type with rank equal "
                       "to or greater than 2, but got ";
        uint64_t v61 = 127;
        long long v28 = &v59;
        long long v29 = (char *)v63;
        if (v27 >= v65)
        {
          unint64_t v48 = v27 + 1;
          BOOL v49 = (char *)v63 + 24 * v27 > (char *)&v59;
          if (v63 <= &v59 && v49)
          {
            int64_t v53 = (char *)&v59 - (unsigned char *)v63;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v48, 24);
            long long v29 = (char *)v63;
            long long v28 = (const void ***)((char *)v63 + v53);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v48, 24);
            long long v28 = &v59;
            long long v29 = (char *)v63;
          }
        }
        long long v30 = &v29[24 * v64];
        long long v31 = *(_OWORD *)v28;
        *((void *)v30 + 2) = v28[2];
        *(_OWORD *)long long v30 = v31;
        ++v64;
        if (v62[0])
        {
          long long v32 = &v59;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v59, (uint64_t)a2);
          uint64_t v33 = (char *)v63;
          if (v64 >= v65)
          {
            unint64_t v50 = v64 + 1;
            if (v63 <= &v59 && (char *)v63 + 24 * v64 > (char *)&v59)
            {
              int64_t v54 = (char *)&v59 - (unsigned char *)v63;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v50, 24);
              uint64_t v33 = (char *)v63;
              long long v32 = (const void ***)((char *)v63 + v54);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v66, v50, 24);
              long long v32 = &v59;
              uint64_t v33 = (char *)v63;
            }
          }
          unint64_t v34 = &v33[24 * v64];
          long long v35 = *(_OWORD *)v32;
          *((void *)v34 + 2) = v32[2];
          *(_OWORD *)unint64_t v34 = v35;
          ++v64;
        }
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v62);
  if (v62[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v62);
  }
  if (v71)
  {
    int64_t v36 = (void **)__p;
    if (__p)
    {
      int64_t v37 = v70;
      unsigned int v38 = __p;
      if (v70 != __p)
      {
        do
          int64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
        while (v37 != v36);
        unsigned int v38 = __p;
      }
      unsigned int v70 = v36;
      operator delete(v38);
    }
    long long v39 = v67;
    if (v67)
    {
      char v40 = v68;
      unint64_t v41 = v67;
      if (v68 != v67)
      {
        do
        {
          __int16 v43 = (void *)*--v40;
          uint64_t v42 = v43;
          void *v40 = 0;
          if (v43) {
            operator delete[](v42);
          }
        }
        while (v40 != v39);
        unint64_t v41 = v67;
      }
      uint64_t v68 = v39;
      operator delete(v41);
    }
    if (v63 != v66) {
      free(v63);
    }
  }
  return v15;
}

uint64_t mlir::mps::MatrixDecompositionLUOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.matrix_decomposition_lu", 27, v2, v3, 0, 0);
  void *v4 = &unk_1EC981DB0;
  v4[12] = mlir::mps::MatrixDecompositionLUOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::MatrixInverseOpGenericAdaptorBase::MatrixInverseOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.matrix_inverse", 18, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::MatrixInverseOp::build(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v21[2] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v16, 1);
  __src = v21;
  uint64_t v20 = 0x200000000;
  uint64_t v4 = *(void *)a2;
  mlir::ValueRange::ValueRange(v18, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v6 = mlir::ValueRange::ValueRange(&v17, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::MatrixInverseOp::inferReturnTypes((uint64_t)v6, v4, 1, v18[0], v18[1], v7, v8, v9, v14, v15, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v10 = __src;
  }
  uint64_t v11 = v20;
  uint64_t v12 = *(unsigned int *)(a2 + 72);
  unint64_t v13 = v12 + v20;
  if (v13 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v13, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  if (v11)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v12), v10, 8 * v11);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v12 + v11;
  if (__src != v21) {
    free(__src);
  }
}

uint64_t mlir::mps::MatrixInverseOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.matrix_inverse", 18, v2, v3, 0, 0);
  void *v4 = &unk_1EC9809C0;
  v4[12] = mlir::mps::MatrixInverseOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::MatrixSolverLUOpGenericAdaptorBase::MatrixSolverLUOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.matrix_solver_lu", 20, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::MatrixSolverLUOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v25[2] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  uint64_t v18 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  __src = v25;
  uint64_t v24 = 0x200000000;
  uint64_t v6 = *(void *)a2;
  mlir::ValueRange::ValueRange(v22, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  __int16 v8 = mlir::ValueRange::ValueRange(&v21, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::MatrixSolverLUOp::inferReturnTypes((uint64_t)v8, v6, 1, v22[0], v22[1], v9, v10, v11, v16, v17, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v12 = __src;
  }
  uint64_t v13 = v24;
  uint64_t v14 = *(unsigned int *)(a2 + 72);
  unint64_t v15 = v14 + v24;
  if (v15 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  if (v13)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v14), v12, 8 * v13);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v14 + v13;
  if (__src != v25) {
    free(__src);
  }
}

BOOL mlir::mps::MatrixSolverLUOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps35(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps36(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps35(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 2u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v2 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps35(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::mps::MatrixSolverLUOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.matrix_solver_lu", 20, v2, v3, 0, 0);
  void *v4 = &unk_1EC980D88;
  v4[12] = mlir::mps::MatrixSolverLUOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::MaximumOpGenericAdaptorBase::MaximumOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.maximum", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::MaximumOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.maximum", 11, v2, v3, 0, 0);
  void *v4 = &unk_1EC983930;
  v4[12] = mlir::mps::MaximumOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::MinimumOpGenericAdaptorBase::MinimumOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.minimum", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::MinimumOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.minimum", 11, v2, v3, 0, 0);
  void *v4 = &unk_1EC983988;
  v4[12] = mlir::mps::MinimumOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ModuloOpGenericAdaptorBase::ModuloOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.modulo", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::ModuloOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.modulo", 10, v2, v3, 0, 0);
  void *v4 = &unk_1EC9835C0;
  v4[12] = mlir::mps::ModuloOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::MultiplyOpGenericAdaptorBase::MultiplyOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.multiply", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::MultiplyOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.multiply", 12, v2, v3, 0, 0);
  void *v4 = &unk_1EC97F7E0;
  v4[12] = mlir::mps::MultiplyOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::NReluOpGenericAdaptorBase::NReluOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.n_relu", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::mps::NReluOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 2u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v2 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mps::NReluOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.n_relu", 10, v2, v3, 0, 0);
  void *v4 = &unk_1EC983098;
  v4[12] = mlir::mps::NReluOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::NandOpGenericAdaptorBase::NandOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.nand", 8, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::NandOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.nand", 8, v2, v3, 0, 0);
  void *v4 = &unk_1EC9829B8;
  v4[12] = mlir::mps::NandOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::NegativeOpGenericAdaptorBase::NegativeOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.negative", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::NegativeOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.negative", 12, v2, v3, 0, 0);
  void *v4 = &unk_1EC97F838;
  v4[12] = mlir::mps::NegativeOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::NonMaximumSuppressionOp::getODSOperands(mlir::mps::NonMaximumSuppressionOp *this, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 8)
    {
      int32x4_t v4 = (int32x4_t)xmmword_1810FFF10;
      unsigned int v3 = a2 & 0xFFFFFFF8;
      int32x4_t v5 = 0uLL;
      v6.i64[0] = 0x200000002;
      v6.i64[1] = 0x200000002;
      v7.i64[0] = 0x100000001;
      v7.i64[1] = 0x100000001;
      v8.i64[0] = 0x800000008;
      v8.i64[1] = 0x800000008;
      unsigned int v9 = a2 & 0xFFFFFFF8;
      int32x4_t v10 = 0uLL;
      do
      {
        int32x4_t v5 = vsubq_s32(v5, vceqq_s32(v4, v6));
        int32x4_t v10 = vsubq_s32(v10, vceqq_s32(v4, v7));
        int32x4_t v4 = vaddq_s32(v4, v8);
        v9 -= 8;
      }
      while (v9);
      int v2 = vaddvq_s32(vaddq_s32(v10, v5));
      if (v3 == a2) {
        goto LABEL_11;
      }
    }
    else
    {
      int v2 = 0;
      unsigned int v3 = 0;
    }
    do
    {
      if (v3 == 2) {
        ++v2;
      }
      ++v3;
    }
    while (a2 != v3);
  }
  else
  {
    int v2 = 0;
  }
LABEL_11:
  uint64_t v11 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
  {
    int v12 = *(_DWORD *)(v11 + 68);
    uint64_t v13 = *(void *)(v11 + 72);
  }
  else
  {
    int v12 = 0;
    uint64_t v13 = 0;
  }
  return v13 + 32 * (a2 + (v12 - 5) * v2);
}

uint64_t mlir::mps::NonMaximumSuppressionOp::getIouThreshold(mlir::mps::NonMaximumSuppressionOp *this)
{
  return *(void *)(*(void *)(*(void *)this + 72)
                   + 32 * (*(_DWORD *)(*(void *)this + 68) - 2)
                   + 24);
}

uint64_t mlir::mps::NonMaximumSuppressionOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v65 = v6;
  if (!v6)
  {
    a3(v69, a4);
    if (v69[0])
    {
      LODWORD(v66) = 3;
      long long v67 = "expected DictionaryAttr to set properties";
      uint64_t v68 = 41;
      long long v26 = &v66;
      uint64_t v27 = (char *)v70;
      if (v71 >= v72)
      {
        unint64_t v55 = v71 + 1;
        if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
        {
          int64_t v60 = (char *)&v66 - (unsigned char *)v70;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v55, 24);
          uint64_t v27 = (char *)v70;
          long long v26 = (uint64_t *)((char *)v70 + v60);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v55, 24);
          long long v26 = &v66;
          uint64_t v27 = (char *)v70;
        }
      }
      long long v28 = &v27[24 * v71];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)long long v28 = v29;
      ++v71;
      if (v69[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v69);
      }
    }
    if (!v78) {
      return 0;
    }
    long long v30 = (void **)__p;
    if (__p)
    {
      long long v31 = v77;
      long long v32 = __p;
      if (v77 != __p)
      {
        do
          long long v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        long long v32 = __p;
      }
      long long v77 = v30;
      operator delete(v32);
    }
    unint64_t v21 = v74;
    if (!v74) {
      goto LABEL_64;
    }
    uint64_t v33 = v75;
    long long v23 = v74;
    if (v75 == v74)
    {
LABEL_63:
      uint64_t v75 = v21;
      operator delete(v23);
LABEL_64:
      if (v70 != v73) {
        free(v70);
      }
      return 0;
    }
    do
    {
      long long v35 = (void *)*--v33;
      unint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_62:
    long long v23 = v74;
    goto LABEL_63;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v65, "coordinate_mode", 0xFuLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::CropResizeCoordinateModeAttr,void>::id)
    {
      a3(v69, a4);
      if (v69[0])
      {
        LODWORD(v66) = 3;
        uint64_t v68 = 60;
        int32x4_t v10 = &v66;
        uint64_t v11 = (char *)v70;
        if (v71 >= v72)
        {
          unint64_t v56 = v71 + 1;
          if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
          {
            int64_t v61 = (char *)&v66 - (unsigned char *)v70;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v56, 24);
            uint64_t v11 = (char *)v70;
            int32x4_t v10 = (uint64_t *)((char *)v70 + v61);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v56, 24);
            int32x4_t v10 = &v66;
            uint64_t v11 = (char *)v70;
          }
        }
        int v12 = &v11[24 * v71];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)int v12 = v13;
        ++v71;
        if (v69[0])
        {
          uint64_t v14 = &v66;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v66, v9);
          unint64_t v15 = (char *)v70;
          if (v71 >= v72)
          {
            unint64_t v57 = v71 + 1;
            if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
            {
              int64_t v62 = (char *)&v66 - (unsigned char *)v70;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v57, 24);
              unint64_t v15 = (char *)v70;
              uint64_t v14 = (uint64_t *)((char *)v70 + v62);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v57, 24);
              uint64_t v14 = &v66;
              unint64_t v15 = (char *)v70;
            }
          }
          uint64_t v16 = &v15[24 * v71];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)uint64_t v16 = v17;
          ++v71;
          if (v69[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v69);
          }
        }
      }
      if (!v78) {
        return 0;
      }
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v77;
        uint64_t v20 = __p;
        if (v77 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        long long v77 = v18;
        operator delete(v20);
      }
      unint64_t v21 = v74;
      if (!v74) {
        goto LABEL_64;
      }
      uint64_t v22 = v75;
      long long v23 = v74;
      if (v75 == v74) {
        goto LABEL_63;
      }
      do
      {
        long long v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_62;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v65, "max_boxes", 9uLL);
  if (v36)
  {
    uint64_t v37 = v36;
    if (*(_UNKNOWN **)(*(void *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      a3(v69, a4);
      if (v69[0])
      {
        LODWORD(v66) = 3;
        uint64_t v68 = 54;
        unsigned int v38 = &v66;
        long long v39 = (char *)v70;
        if (v71 >= v72)
        {
          unint64_t v58 = v71 + 1;
          if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
          {
            int64_t v63 = (char *)&v66 - (unsigned char *)v70;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v58, 24);
            long long v39 = (char *)v70;
            unsigned int v38 = (uint64_t *)((char *)v70 + v63);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v58, 24);
            unsigned int v38 = &v66;
            long long v39 = (char *)v70;
          }
        }
        char v40 = &v39[24 * v71];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = v38[2];
        *(_OWORD *)char v40 = v41;
        ++v71;
        if (v69[0])
        {
          uint64_t v42 = &v66;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v66, v37);
          __int16 v43 = (char *)v70;
          if (v71 >= v72)
          {
            unint64_t v59 = v71 + 1;
            if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
            {
              int64_t v64 = (char *)&v66 - (unsigned char *)v70;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v59, 24);
              __int16 v43 = (char *)v70;
              uint64_t v42 = (uint64_t *)((char *)v70 + v64);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v59, 24);
              uint64_t v42 = &v66;
              __int16 v43 = (char *)v70;
            }
          }
          uint64_t v44 = &v43[24 * v71];
          long long v45 = *(_OWORD *)v42;
          *((void *)v44 + 2) = v42[2];
          *(_OWORD *)uint64_t v44 = v45;
          ++v71;
          if (v69[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v69);
          }
        }
      }
      if (!v78) {
        return 0;
      }
      unint64_t v46 = (void **)__p;
      if (__p)
      {
        BOOL v47 = v77;
        unint64_t v48 = __p;
        if (v77 != __p)
        {
          do
            BOOL v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          unint64_t v48 = __p;
        }
        long long v77 = v46;
        operator delete(v48);
      }
      unint64_t v21 = v74;
      if (!v74) {
        goto LABEL_64;
      }
      BOOL v49 = v75;
      long long v23 = v74;
      if (v75 == v74) {
        goto LABEL_63;
      }
      do
      {
        int64_t v51 = (void *)*--v49;
        unint64_t v50 = v51;
        void *v49 = 0;
        if (v51) {
          operator delete[](v50);
        }
      }
      while (v49 != v21);
      goto LABEL_62;
    }
    a1[1] = v36;
  }
  uint64_t v52 = mlir::DictionaryAttr::get((uint64_t)&v65, "per_class_suppression", 0x15uLL);
  uint64_t v66 = v52;
  if (!v52) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)v52 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    a1[2] = v52;
    return 1;
  }
  a3(v69, a4);
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v53, &v66);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v69);
  return 0;
}

uint64_t mlir::mps::NonMaximumSuppressionOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v27[6] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a1;
  long long v25 = v27;
  uint64_t v26 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v24, (uint64_t)"coordinate_mode", 15, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v26;
  if (v26 >= HIDWORD(v26))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
    unsigned int v6 = v26;
  }
  int32x4_t v7 = (uint64_t *)((char *)v25 + 16 * v6);
  *int32x4_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v26 + 1;
  LODWORD(v26) = v26 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"max_boxes", 9, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      unsigned int v13 = v26;
    }
    uint64_t v14 = (uint64_t *)((char *)v25 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"per_class_suppression", 21, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      unsigned int v19 = v26;
    }
    uint64_t v20 = (uint64_t *)((char *)v25 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
  unint64_t v21 = v25;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v25 == v27) {
      return DictionaryAttr;
    }
    goto LABEL_16;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v24, (uint64_t *)v25, v8);
  unint64_t v21 = v25;
  if (v25 != v27) {
LABEL_16:
  }
    free(v21);
  return DictionaryAttr;
}

uint64_t mlir::mps::NonMaximumSuppressionOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 9)
  {
    uint64_t result = memcmp(__s1, "max_boxes", 9uLL);
    if (!result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
          uint64_t v7 = a4;
        }
        else {
          uint64_t v7 = 0;
        }
        *(void *)(v5 + 8) = v7;
      }
      else
      {
        *(void *)(v5 + 8) = 0;
      }
    }
  }
  else if (a3 == 21)
  {
    uint64_t result = memcmp(__s1, "per_class_suppression", 0x15uLL);
    if (!result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
          uint64_t v8 = a4;
        }
        else {
          uint64_t v8 = 0;
        }
        *(void *)(v5 + 16) = v8;
      }
      else
      {
        *(void *)(v5 + 16) = 0;
      }
    }
  }
  else if (a3 == 15 && *(void *)__s1 == 0x616E6964726F6F63 && *(void *)(__s1 + 7) == 0x65646F6D5F657461)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::CropResizeCoordinateModeAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      *(void *)uint64_t result = v9;
    }
    else
    {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

BOOL mlir::mps::NonMaximumSuppressionOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps23(v8, (const void **)"coordinate_mode", (const char *)0xF, a3, a4))
  {
    uint64_t v9 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v9, (const void **)"max_boxes", (const char *)9, a3, a4))
    {
      uint64_t v10 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v10, (const void **)"per_class_suppression", (const char *)0x15, a3, a4))
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::NonMaximumSuppressionOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    unsigned int v3 = operator new(0x18uLL);
    v3[1] = 0;
    v3[2] = 0;
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::NonMaximumSuppressionOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::NonMaximumSuppressionOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::NonMaximumSuppressionOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::NonMaximumSuppressionOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::NonMaximumSuppressionOpGenericAdaptorB"
              "ase::Properties]";
        unint64_t v14 = 122;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::NonMaximumSuppressionOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[97];
    return a1[32];
  }
  return result;
}

uint64_t mlir::mps::NonMaximumSuppressionOp::getMaxBoxes(mlir::mps::NonMaximumSuppressionOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v8 = *(void *)(v1 + 8);
  if (!v8) {
    return 0;
  }
  mlir::IntegerAttr::getValue(&v8, (llvm::APInt *)&__p);
  if (v7 >= 0x41) {
    p_p = (unsigned int *)__p;
  }
  else {
    p_p = (unsigned int *)&__p;
  }
  uint64_t v3 = *p_p;
  if (v7 >= 0x41 && __p != 0) {
    operator delete[](__p);
  }
  return v3 | 0x100000000;
}

void mlir::mps::NonMaximumSuppressionOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned int a9, uint64_t a10)
{
  void v39[2] = *MEMORY[0x1E4F143B8];
  uint64_t v32 = a4;
  uint64_t v33 = a3;
  uint64_t v30 = a6;
  uint64_t v31 = a5;
  uint64_t v29 = a7;
  mlir::OperationState::addOperands(a2, (uint64_t)&v33, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v32, 1);
  if (a5) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v31, 1);
  }
  mlir::OperationState::addOperands(a2, (uint64_t)&v30, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v29, 1);
  if (a8)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v14);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::NonMaximumSuppressionOpGenericAdaptorBase::Properties>((void *)a2)
              + 16) = UnitAttr;
  }
  uint64_t v16 = *a1;
  unsigned int v34 = a9;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v16);
  uint64_t v37 = &mlir::detail::TypeIDResolver<mlir::mps::CropResizeCoordinateModeAttr,void>::id;
  uint64_t v38 = (uint64_t)v16;
  uint64_t v18 = mlir::StorageUniquer::get<mlir::mps::detail::CropResizeCoordinateModeAttrStorage,mlir::mps::CropResizeCoordinateMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail35CropResizeCoordinateModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_28CropResizeCoordinateModeAttrEJNS2_24CropResizeCoordinateModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v37, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::CropResizeCoordinateModeAttr,void>::id, &v34);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::NonMaximumSuppressionOpGenericAdaptorBase::Properties>((void *)a2) = v18;
  if (a10) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::NonMaximumSuppressionOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 8) = a10;
  uint64_t v37 = v39;
  uint64_t v38 = 0x200000000;
  unsigned int v19 = *a1;
  mlir::ValueRange::ValueRange((unint64_t *)v36, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v22 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v35, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::NonMaximumSuppressionOp::inferReturnTypes(v19, v23, v24, v36[0], (unint64_t)v36[1], Dictionary, v22, v25, v35[0], v35[1], (uint64_t)&v37))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v26 = v37;
  }
  uint64_t v27 = v38;
  uint64_t v28 = *(unsigned int *)(a2 + 72);
  if (v28 + (unint64_t)v38 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v28 + v38, 8);
    LODWORD(v28) = *(_DWORD *)(a2 + 72);
  }
  if (v27)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v28), v26, 8 * v27);
    LODWORD(v28) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v28 + v27;
  if (v37 != v39) {
    free(v37);
  }
}

BOOL mlir::mps::NonMaximumSuppressionOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  int v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *v3;
  uint64_t v4 = (const void **)v3[1];
  uint64_t v6 = v3[2];
  v140 = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v6, (const void **)"per_class_suppression", (const char *)0x15, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v140))return 0; {
  v140 = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps23(v5, (const void **)"coordinate_mode", (const char *)0xF, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps23(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v140))return 0; {
  v140 = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v4, (const void **)"max_boxes", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v140))return 0; {
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps9(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))return 0;
  }
  unsigned int v7 = *this;
  uint64_t v8 = (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v134) = 2;
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps9(v7, v8, (const void **)"operand", 7, 1u)) {
    return 0;
  }
  unint64_t v9 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) == 0)
  {
    uint64_t v11 = 4294967292;
    goto LABEL_11;
  }
  uint64_t v10 = (*((_DWORD *)v9 + 17) - 2);
  uint64_t v11 = v10 - 2;
  if ((unint64_t)(v10 - 2) <= 1)
  {
    if (v10 != 2)
    {
      uint64_t v16 = v9[9] + 88;
      uint64_t v17 = 2;
      while (mlir::mps::__mlir_ods_local_type_constraint_MPSOps24(*this, *(void *)(*(void *)v16 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v17))
      {
        ++v17;
        v16 += 32;
        if (v10 == v17) {
          goto LABEL_18;
        }
      }
      return 0;
    }
    LODWORD(v17) = 2;
LABEL_18:
    uint64_t ODSOperands = mlir::mps::NonMaximumSuppressionOp::getODSOperands((mlir::mps::NonMaximumSuppressionOp *)this, 3u);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = ODSOperands + 24;
      while (mlir::mps::__mlir_ods_local_type_constraint_MPSOps37(*this, (const void **)(*(void *)(*(void *)v21 + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, v17))
      {
        LODWORD(v17) = v17 + 1;
        v21 += 32;
        if (!--v20) {
          goto LABEL_22;
        }
      }
      return 0;
    }
LABEL_22:
    uint64_t v22 = mlir::mps::NonMaximumSuppressionOp::getODSOperands((mlir::mps::NonMaximumSuppressionOp *)this, 4u);
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = v22 + 24;
      while (mlir::mps::__mlir_ods_local_type_constraint_MPSOps37(*this, (const void **)(*(void *)(*(void *)v25 + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, v17))
      {
        LODWORD(v17) = v17 + 1;
        v25 += 32;
        if (!--v24) {
          goto LABEL_26;
        }
      }
      return 0;
    }
LABEL_26:
    if (*((_DWORD *)*this + 9)) {
      uint64_t v26 = (uint64_t)(*this - 2);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v26, 0);
    uint64_t v28 = *this;
    uint64_t v29 = (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v30 = *v29;
    uint64_t v31 = (void *)*((void *)*v29 + 17);
    if (v31 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      uint64_t v35 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v30 + 8);
      v140 = v29;
      uint64_t v141 = v35;
      v133[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v140);
      if (mlir::Type::isSignedInteger((mlir::Type *)v133, 32) || mlir::Type::isSignedInteger((mlir::Type *)v133, 64)) {
        goto LABEL_67;
      }
      uint64_t v30 = *v29;
      if (*((_UNKNOWN **)*v29 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
      {
LABEL_31:
        v128 = v29;
        uint64_t v129 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v30 + 8);
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v128))
        {
          uint64_t v32 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v29 + 8);
          uint64_t v137 = (uint64_t)v29;
          uint64_t v138 = v32;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v137);
          if (v33 == 3)
          {
            uint64_t v34 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v29 + 8);
            char v134 = v29;
            uint64_t v135 = v34;
            v133[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v134);
            if (mlir::Type::isSignedInteger((mlir::Type *)v133, 32)
              || mlir::Type::isSignedInteger((mlir::Type *)v133, 64))
            {
              goto LABEL_67;
            }
          }
        }
      }
    }
    else if (v31 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      goto LABEL_31;
    }
    __int16 v130 = 261;
    v128 = (const void **)"result";
    uint64_t v129 = 6;
    mlir::Operation::emitOpError(v28, &v128, (uint64_t)&v140);
    if (v140)
    {
      LODWORD(v137) = 3;
      uint64_t v138 = (uint64_t)" #";
      uint64_t v139 = 2;
      uint64_t v36 = &v137;
      uint64_t v37 = (char *)v142;
      if (v143 >= v144)
      {
        unint64_t v108 = v143 + 1;
        if (v142 <= &v137 && (char *)v142 + 24 * v143 > (char *)&v137)
        {
          int64_t v120 = (char *)&v137 - (unsigned char *)v142;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v108, 24);
          uint64_t v37 = (char *)v142;
          uint64_t v36 = (uint64_t *)((char *)v142 + v120);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v108, 24);
          uint64_t v36 = &v137;
          uint64_t v37 = (char *)v142;
        }
      }
      uint64_t v38 = &v37[24 * v143];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = v36[2];
      *(_OWORD *)uint64_t v38 = v39;
      uint64_t v40 = ++v143;
      if (v140)
      {
        LODWORD(v137) = 5;
        uint64_t v138 = 0;
        long long v41 = &v137;
        uint64_t v42 = (char *)v142;
        if (v40 >= v144)
        {
          unint64_t v110 = v40 + 1;
          BOOL v111 = (char *)v142 + 24 * v40 > (char *)&v137;
          if (v142 <= &v137 && v111)
          {
            int64_t v122 = (char *)&v137 - (unsigned char *)v142;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v110, 24);
            uint64_t v42 = (char *)v142;
            long long v41 = (uint64_t *)((char *)v142 + v122);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v110, 24);
            long long v41 = &v137;
            uint64_t v42 = (char *)v142;
          }
        }
        __int16 v43 = &v42[24 * v143];
        long long v44 = *(_OWORD *)v41;
        *((void *)v43 + 2) = v41[2];
        *(_OWORD *)__int16 v43 = v44;
        uint64_t v45 = ++v143;
        if (v140)
        {
          LODWORD(v137) = 3;
          uint64_t v138 = (uint64_t)" must be unranked tensor of mps index type values or 3D tensor of mps index type values, but got ";
          uint64_t v139 = 97;
          unint64_t v46 = &v137;
          BOOL v47 = (char *)v142;
          if (v45 >= v144)
          {
            unint64_t v114 = v45 + 1;
            BOOL v115 = (char *)v142 + 24 * v45 > (char *)&v137;
            if (v142 <= &v137 && v115)
            {
              int64_t v124 = (char *)&v137 - (unsigned char *)v142;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v114, 24);
              BOOL v47 = (char *)v142;
              unint64_t v46 = (uint64_t *)((char *)v142 + v124);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v114, 24);
              unint64_t v46 = &v137;
              BOOL v47 = (char *)v142;
            }
          }
          unint64_t v48 = &v47[24 * v143];
          long long v49 = *(_OWORD *)v46;
          *((void *)v48 + 2) = v46[2];
          *(_OWORD *)unint64_t v48 = v49;
          ++v143;
          if (v140)
          {
            unint64_t v50 = &v137;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v137, (uint64_t)v29);
            int64_t v51 = (char *)v142;
            if (v143 >= v144)
            {
              unint64_t v118 = v143 + 1;
              if (v142 <= &v137 && (char *)v142 + 24 * v143 > (char *)&v137)
              {
                int64_t v126 = (char *)&v137 - (unsigned char *)v142;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v118, 24);
                int64_t v51 = (char *)v142;
                unint64_t v50 = (uint64_t *)((char *)v142 + v126);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v118, 24);
                unint64_t v50 = &v137;
                int64_t v51 = (char *)v142;
              }
            }
            uint64_t v52 = &v51[24 * v143];
            long long v53 = *(_OWORD *)v50;
            *((void *)v52 + 2) = v50[2];
            *(_OWORD *)uint64_t v52 = v53;
            ++v143;
          }
        }
      }
    }
    char v54 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v140);
    if (v140) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v140);
    }
    if (v150)
    {
      unint64_t v55 = (void **)__p;
      if (__p)
      {
        unint64_t v56 = v149;
        unint64_t v57 = __p;
        if (v149 != __p)
        {
          do
            unint64_t v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
          while (v56 != v55);
          unint64_t v57 = __p;
        }
        BOOL v149 = v55;
        operator delete(v57);
      }
      unint64_t v58 = v146;
      if (v146)
      {
        unint64_t v59 = v147;
        int64_t v60 = v146;
        if (v147 != v146)
        {
          do
          {
            int64_t v62 = (void *)*--v59;
            int64_t v61 = v62;
            *unint64_t v59 = 0;
            if (v62) {
              operator delete[](v61);
            }
          }
          while (v59 != v58);
          int64_t v60 = v146;
        }
        BOOL v147 = v58;
        operator delete(v60);
      }
      if (v142 != v145) {
        free(v142);
      }
    }
    if (!v54) {
      return 0;
    }
LABEL_67:
    if (*((_DWORD *)*this + 9)) {
      uint64_t v63 = (uint64_t)(*this - 2);
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t v64 = mlir::detail::OpResultImpl::getNextResultAtOffset(v63, 1);
    uint64_t v65 = mlir::detail::OpResultImpl::getNextResultAtOffset(v64, 0);
    uint64_t v66 = *this;
    long long v67 = (const void **)(*(void *)(v65 + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v68 = (_UNKNOWN **)*v67;
    if (*((_UNKNOWN **)*v67 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v69 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v68 + 1));
      v140 = v67;
      uint64_t v141 = v69;
      int ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v140);
      uint64_t v68 = (_UNKNOWN **)*v67;
      if (ArgOperands)
      {
        uint64_t v71 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v68 + 1));
        v128 = v67;
        uint64_t v129 = v71;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v128);
        uint64_t v68 = (_UNKNOWN **)*v67;
        if (!v72)
        {
          uint64_t v73 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v68 + 1));
          uint64_t v137 = (uint64_t)v67;
          uint64_t v138 = v73;
          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v137);
          if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)) {
            return 1;
          }
          uint64_t v68 = (_UNKNOWN **)*v67;
        }
      }
    }
    if (v68[17] != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      goto LABEL_80;
    }
    uint64_t v74 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v68 + 1));
    char v134 = v67;
    uint64_t v135 = v74;
    int v75 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v134);
    uint64_t v68 = (_UNKNOWN **)*v67;
    if (!v75) {
      goto LABEL_80;
    }
    uint64_t v76 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v68 + 1));
    v133[0] = v67;
    v133[1] = v76;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v133);
    uint64_t v68 = (_UNKNOWN **)*v67;
    if (v77 != 1) {
      goto LABEL_80;
    }
    uint64_t v78 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v68 + 1));
    v132[0] = v67;
    v132[1] = v78;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v132);
    if (!mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      uint64_t v68 = (_UNKNOWN **)*v67;
LABEL_80:
      if (v68[17] == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        uint64_t v79 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v68 + 1));
        v131[0] = v67;
        v131[1] = v79;
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v131);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)) {
          return 1;
        }
      }
      __int16 v130 = 261;
      v128 = (const void **)"result";
      uint64_t v129 = 6;
      mlir::Operation::emitOpError(v66, &v128, (uint64_t)&v140);
      if (v140)
      {
        LODWORD(v137) = 3;
        uint64_t v138 = (uint64_t)" #";
        uint64_t v139 = 2;
        uint64_t v80 = &v137;
        long long v81 = (char *)v142;
        if (v143 >= v144)
        {
          unint64_t v109 = v143 + 1;
          if (v142 <= &v137 && (char *)v142 + 24 * v143 > (char *)&v137)
          {
            int64_t v121 = (char *)&v137 - (unsigned char *)v142;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v109, 24);
            long long v81 = (char *)v142;
            uint64_t v80 = (uint64_t *)((char *)v142 + v121);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v109, 24);
            uint64_t v80 = &v137;
            long long v81 = (char *)v142;
          }
        }
        char v82 = &v81[24 * v143];
        long long v83 = *(_OWORD *)v80;
        *((void *)v82 + 2) = v80[2];
        *(_OWORD *)char v82 = v83;
        uint64_t v84 = ++v143;
        if (v140)
        {
          LODWORD(v137) = 5;
          uint64_t v138 = 1;
          uint64_t v85 = &v137;
          unint64_t v86 = (char *)v142;
          if (v84 >= v144)
          {
            unint64_t v112 = v84 + 1;
            BOOL v113 = (char *)v142 + 24 * v84 > (char *)&v137;
            if (v142 <= &v137 && v113)
            {
              int64_t v123 = (char *)&v137 - (unsigned char *)v142;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v112, 24);
              unint64_t v86 = (char *)v142;
              uint64_t v85 = (uint64_t *)((char *)v142 + v123);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v112, 24);
              uint64_t v85 = &v137;
              unint64_t v86 = (char *)v142;
            }
          }
          unint64_t v87 = &v86[24 * v143];
          long long v88 = *(_OWORD *)v85;
          *((void *)v87 + 2) = v85[2];
          *(_OWORD *)unint64_t v87 = v88;
          uint64_t v89 = ++v143;
          if (v140)
          {
            LODWORD(v137) = 3;
            uint64_t v138 = (uint64_t)" must be 0D tensor of 32-bit unsigned integer values or 1D tensor of 32-bit unsigned integer"
                            " values or unranked tensor of 32-bit unsigned integer values, but got ";
            uint64_t v139 = 162;
            unint64_t v90 = &v137;
            unint64_t v91 = (char *)v142;
            if (v89 >= v144)
            {
              unint64_t v116 = v89 + 1;
              BOOL v117 = (char *)v142 + 24 * v89 > (char *)&v137;
              if (v142 <= &v137 && v117)
              {
                int64_t v125 = (char *)&v137 - (unsigned char *)v142;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v116, 24);
                unint64_t v91 = (char *)v142;
                unint64_t v90 = (uint64_t *)((char *)v142 + v125);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v116, 24);
                unint64_t v90 = &v137;
                unint64_t v91 = (char *)v142;
              }
            }
            unint64_t v92 = &v91[24 * v143];
            long long v93 = *(_OWORD *)v90;
            *((void *)v92 + 2) = v90[2];
            *(_OWORD *)unint64_t v92 = v93;
            ++v143;
            if (v140)
            {
              BOOL v94 = &v137;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v137, (uint64_t)v67);
              unint64_t v95 = (char *)v142;
              if (v143 >= v144)
              {
                unint64_t v119 = v143 + 1;
                if (v142 <= &v137 && (char *)v142 + 24 * v143 > (char *)&v137)
                {
                  int64_t v127 = (char *)&v137 - (unsigned char *)v142;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v119, 24);
                  unint64_t v95 = (char *)v142;
                  BOOL v94 = (uint64_t *)((char *)v142 + v127);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v119, 24);
                  BOOL v94 = &v137;
                  unint64_t v95 = (char *)v142;
                }
              }
              BOOL v96 = &v95[24 * v143];
              long long v97 = *(_OWORD *)v94;
              *((void *)v96 + 2) = v94[2];
              *(_OWORD *)BOOL v96 = v97;
              ++v143;
            }
          }
        }
      }
      char v98 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v140);
      if (v140) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v140);
      }
      if (v150)
      {
        int64_t v99 = (void **)__p;
        if (__p)
        {
          int64_t v100 = v149;
          int64_t v101 = __p;
          if (v149 != __p)
          {
            do
              int64_t v100 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v100 - 1);
            while (v100 != v99);
            int64_t v101 = __p;
          }
          BOOL v149 = v99;
          operator delete(v101);
        }
        uint64_t v102 = v146;
        if (v146)
        {
          uint64_t v103 = v147;
          int v104 = v146;
          if (v147 != v146)
          {
            do
            {
              uint64_t v106 = (void *)*--v103;
              unint64_t v105 = v106;
              *uint64_t v103 = 0;
              if (v106) {
                operator delete[](v105);
              }
            }
            while (v103 != v102);
            int v104 = v146;
          }
          BOOL v147 = v102;
          operator delete(v104);
        }
        if (v142 != v145) {
          free(v142);
        }
      }
      return v98 != 0;
    }
    return 1;
  }
LABEL_11:
  v128 = (const void **)"operand group starting at #";
  __int16 v130 = 259;
  mlir::OpState::emitOpError(this, &v128, (uint64_t)&v140);
  uint64_t v12 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)&v140, (unsigned int *)&v134);
  uint64_t v13 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v12, " requires 0 or 1 element, but found ");
  uint64_t v137 = v11;
  uint64_t v14 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v13, &v137);
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v14);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v140);
  return v15;
}

uint64_t mlir::mps::__mlir_ods_local_type_constraint_MPSOps37(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    goto LABEL_4;
  }
  v71[0] = a2;
  v71[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
  int ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v71);
  uint64_t v10 = *a2;
  if (!ArgOperands) {
    goto LABEL_4;
  }
  int64_t v61 = a2;
  uint64_t v62 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61);
  uint64_t v10 = *a2;
  if (!v12)
  {
    uint64_t v47 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
    uint64_t v68 = a2;
    uint64_t v69 = v47;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v68);
    if (mlir::Type::isF16((mlir::Type *)&OperandRange)
      || mlir::Type::isF32((mlir::Type *)&OperandRange)
      || mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      return 1;
    }
    uint64_t v10 = *a2;
    long long v49 = (void *)*((void *)*a2 + 17);
    if (v49 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      && v49 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_4:
    uint64_t v13 = (void *)v10[17];
    if (v13 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      && v13 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      goto LABEL_14;
    }
  }
  uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
  v66[0] = a2;
  v66[1] = v15;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v66);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange)
    || mlir::Type::isF32((mlir::Type *)&OperandRange)
    || mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
    uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
    v65[0] = a2;
    v65[1] = v16;
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
    uint64_t v81 = 1;
    if (v18 == 1 && *ArgAttrsAttr == v81) {
      return 1;
    }
  }
LABEL_14:
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    uint64_t v46 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
    v64[0] = a2;
    v64[1] = v46;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v64);
    if (mlir::Type::isF16((mlir::Type *)&OperandRange)
      || mlir::Type::isF32((mlir::Type *)&OperandRange)
      || mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      return 1;
    }
  }
  __int16 v63 = 261;
  int64_t v61 = a3;
  uint64_t v62 = a4;
  mlir::Operation::emitOpError(a1, &v61, (uint64_t)v71);
  if (v71[0])
  {
    LODWORD(v68) = 3;
    uint64_t v69 = (uint64_t)" #";
    uint64_t v70 = 2;
    uint64_t v19 = &v68;
    uint64_t v20 = (char *)v72;
    if (v73 >= v74)
    {
      unint64_t v51 = v73 + 1;
      if (v72 <= &v68 && (char *)v72 + 24 * v73 > (char *)&v68)
      {
        int64_t v57 = (char *)&v68 - (unsigned char *)v72;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v51, 24);
        uint64_t v20 = (char *)v72;
        uint64_t v19 = (const void ***)((char *)v72 + v57);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v51, 24);
        uint64_t v19 = &v68;
        uint64_t v20 = (char *)v72;
      }
    }
    uint64_t v21 = &v20[24 * v73];
    long long v22 = *(_OWORD *)v19;
    *((void *)v21 + 2) = v19[2];
    *(_OWORD *)uint64_t v21 = v22;
    uint64_t v23 = ++v73;
    if (v71[0])
    {
      LODWORD(v68) = 5;
      uint64_t v69 = a5;
      uint64_t v24 = &v68;
      uint64_t v25 = (char *)v72;
      if (v23 >= v74)
      {
        unint64_t v52 = v23 + 1;
        BOOL v53 = (char *)v72 + 24 * v23 > (char *)&v68;
        if (v72 <= &v68 && v53)
        {
          int64_t v58 = (char *)&v68 - (unsigned char *)v72;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v52, 24);
          uint64_t v25 = (char *)v72;
          uint64_t v24 = (const void ***)((char *)v72 + v58);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v52, 24);
          uint64_t v24 = &v68;
          uint64_t v25 = (char *)v72;
        }
      }
      uint64_t v26 = &v25[24 * v73];
      long long v27 = *(_OWORD *)v24;
      *((void *)v26 + 2) = v24[2];
      *(_OWORD *)uint64_t v26 = v27;
      uint64_t v28 = ++v73;
      if (v71[0])
      {
        LODWORD(v68) = 3;
        uint64_t v69 = (uint64_t)" must be 0D tensor of floating point values or static-shape defined tensor with shape equal to [1"
                       "] or unranked tensor of floating point values, but got ";
        uint64_t v70 = 152;
        uint64_t v29 = &v68;
        uint64_t v30 = (char *)v72;
        if (v28 >= v74)
        {
          unint64_t v54 = v28 + 1;
          BOOL v55 = (char *)v72 + 24 * v28 > (char *)&v68;
          if (v72 <= &v68 && v55)
          {
            int64_t v59 = (char *)&v68 - (unsigned char *)v72;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v54, 24);
            uint64_t v30 = (char *)v72;
            uint64_t v29 = (const void ***)((char *)v72 + v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v54, 24);
            uint64_t v29 = &v68;
            uint64_t v30 = (char *)v72;
          }
        }
        uint64_t v31 = &v30[24 * v73];
        long long v32 = *(_OWORD *)v29;
        *((void *)v31 + 2) = v29[2];
        *(_OWORD *)uint64_t v31 = v32;
        ++v73;
        if (v71[0])
        {
          uint64_t v33 = &v68;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v68, (uint64_t)a2);
          uint64_t v34 = (char *)v72;
          if (v73 >= v74)
          {
            unint64_t v56 = v73 + 1;
            if (v72 <= &v68 && (char *)v72 + 24 * v73 > (char *)&v68)
            {
              int64_t v60 = (char *)&v68 - (unsigned char *)v72;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v56, 24);
              uint64_t v34 = (char *)v72;
              uint64_t v33 = (const void ***)((char *)v72 + v60);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v56, 24);
              uint64_t v33 = &v68;
              uint64_t v34 = (char *)v72;
            }
          }
          uint64_t v35 = &v34[24 * v73];
          long long v36 = *(_OWORD *)v33;
          *((void *)v35 + 2) = v33[2];
          *(_OWORD *)uint64_t v35 = v36;
          ++v73;
        }
      }
    }
  }
  uint64_t v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v71);
  if (v71[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v71);
  }
  if (v80)
  {
    uint64_t v38 = (void **)__p;
    if (__p)
    {
      long long v39 = v79;
      uint64_t v40 = __p;
      if (v79 != __p)
      {
        do
          long long v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        uint64_t v40 = __p;
      }
      uint64_t v79 = v38;
      operator delete(v40);
    }
    long long v41 = v76;
    if (v76)
    {
      uint64_t v42 = v77;
      __int16 v43 = v76;
      if (v77 != v76)
      {
        do
        {
          uint64_t v45 = (void *)*--v42;
          long long v44 = v45;
          *uint64_t v42 = 0;
          if (v45) {
            operator delete[](v44);
          }
        }
        while (v42 != v41);
        __int16 v43 = v76;
      }
      uint64_t v77 = v41;
      operator delete(v43);
    }
    if (v72 != v75) {
      free(v72);
    }
  }
  return v37;
}

uint64_t mlir::mps::NonMaximumSuppressionOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.non_maximum_suppression", 27, v2, v3, 0, 0);
  void *v4 = &unk_1EC981E08;
  v4[12] = mlir::mps::NonMaximumSuppressionOp::canonicalize;
  unint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unsigned int v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::NonZeroOpGenericAdaptorBase::NonZeroOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.non_zero", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::NonZeroOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3)
{
  v21[2] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v16, 1);
  __src = v21;
  uint64_t v20 = 0x200000000;
  unint64_t v5 = *a1;
  mlir::ValueRange::ValueRange((unint64_t *)v18, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v17, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::NonZeroOp::inferReturnTypes(v5, v8, v9, v18[0], (uint64_t)v18[1], Dictionary, v10, v11, v17[0], v17[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v12 = __src;
  }
  uint64_t v13 = v20;
  uint64_t v14 = *(unsigned int *)(a2 + 72);
  unint64_t v15 = v14 + v20;
  if (v15 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  if (v13)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v14), v12, 8 * v13);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v14 + v13;
  if (__src != v21) {
    free(__src);
  }
}

uint64_t mlir::mps::NonZeroOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.non_zero", 12, v2, v3, 0, 0);
  void *v4 = &unk_1EC9839E0;
  v4[12] = mlir::mps::NonZeroOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::NorOpGenericAdaptorBase::NorOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.nor", 7, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::NorOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.nor", 7, v2, v3, 0, 0);
  void *v4 = &unk_1EC982490;
  v4[12] = mlir::mps::NorOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::NormalizationOpGenericAdaptorBase::NormalizationOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.normalization", 17, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::NormalizationOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      long long v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          long long v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          long long v27 = (char *)v60;
        }
      }
      uint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v67;
      long long v32 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        long long v32 = __p;
      }
      long long v67 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "epsilon", 7uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected key entry for epsilon in DictionaryAttr to set Properties.";
      uint64_t v58 = 67;
      long long v36 = &v56;
      uint64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v37 = (char *)v60;
          long long v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          long long v36 = &v56;
          uint64_t v37 = (char *)v60;
        }
      }
      uint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v40 = (void **)__p;
    if (__p)
    {
      long long v41 = v67;
      uint64_t v42 = __p;
      if (v67 != __p)
      {
        do
          long long v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      long long v67 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    __int16 v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      long long v44 = v45;
      *__int16 v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 52;
    uint64_t v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        uint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      uint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      unint64_t v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unint64_t v15 = (char *)v60;
          uint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v14 = &v56;
          unint64_t v15 = (char *)v60;
        }
      }
      uint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      long long v67 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    long long v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      uint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *long long v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::NormalizationOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::NormalizationOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::NormalizationOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::NormalizationOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::NormalizationOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = 0x1E8EB8000uLL;
    {
      unint64_t v4 = 0x1E8EB8000;
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::NormalizationOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 114;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::NormalizationOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = 0x1E8EB8000;
      }
    }
    a1[33] = *(void *)(v4 + 2000);
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::FloatAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  uint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::FloatAttr]";
  unint64_t v41 = 65;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    uint64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      unint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          unint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        uint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            uint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      uint64_t v24 = v53;
      uint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        uint64_t v25 = __p;
      }
      int64_t v53 = v23;
      operator delete(v25);
    }
    uint64_t v26 = v50;
    if (v50)
    {
      long long v27 = v51;
      uint64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = (void *)*--v27;
          long long v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        uint64_t v28 = v50;
      }
      int64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

void mlir::mps::NormalizationOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a4;
  uint64_t v25 = a3;
  uint64_t v22 = a6;
  uint64_t v23 = a5;
  uint64_t v21 = a7;
  mlir::OperationState::addOperands(a2, (uint64_t)&v25, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v23, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::NormalizationOpGenericAdaptorBase::Properties>((void *)a2) = a8;
  uint64_t v28 = v30;
  uint64_t v29 = 0x200000000;
  uint64_t v10 = *(void *)a2;
  mlir::ValueRange::ValueRange(v27, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v12 = mlir::ValueRange::ValueRange(&v26, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::NormalizationOp::inferReturnTypes((uint64_t)v12, v10, 1, v27[0], v27[1], v13, v14, v15, v19, v20, (uint64_t)&v28))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v16 = v28;
  }
  uint64_t v17 = v29;
  uint64_t v18 = *(unsigned int *)(a2 + 72);
  if (v18 + (unint64_t)v29 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18 + v29, 8);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  if (v17)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v18), v16, 8 * v17);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v18 + v17;
  if (v28 != v30) {
    free(v28);
  }
}

void mlir::mps::NormalizationOp::build(mlir::Float32Type **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a4;
  uint64_t v29 = a3;
  uint64_t v26 = a6;
  uint64_t v27 = a5;
  uint64_t v25 = a7;
  mlir::OperationState::addOperands(a2, (uint64_t)&v29, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v28, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v27, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v26, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v25, 1);
  uint64_t F32Type = mlir::Builder::getF32Type(a1, v11);
  uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)a1, F32Type, a8);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::NormalizationOpGenericAdaptorBase::Properties>((void *)a2) = FloatAttr;
  unint64_t v32 = v34;
  uint64_t v33 = 0x200000000;
  uint64_t v14 = *(void *)a2;
  mlir::ValueRange::ValueRange(v31, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v16 = mlir::ValueRange::ValueRange(&v30, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::NormalizationOp::inferReturnTypes((uint64_t)v16, v14, 1, v31[0], v31[1], v17, v18, v19, v23, v24, (uint64_t)&v32))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v20 = v32;
  }
  uint64_t v21 = v33;
  uint64_t v22 = *(unsigned int *)(a2 + 72);
  if (v22 + (unint64_t)v33 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22 + v33, 8);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  if (v21)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v22), v20, 8 * v21);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v22 + v21;
  if (v32 != v34) {
    free(v32);
  }
}

BOOL mlir::mps::NormalizationOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  uint64_t v3 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v18[0] = v2;
    if (mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v3, (const void **)"epsilon", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this,
                            *(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8,
                            (const void **)"operand",
                            (const void **)7,
                            2u)
      && mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 3u)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 152) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 4u))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v4 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = (const void **)"requires attribute 'epsilon'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError(this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      uint64_t v8 = (void **)__p;
      if (__p)
      {
        long long v9 = v24;
        uint64_t v10 = __p;
        if (v24 != __p)
        {
          do
            long long v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          uint64_t v10 = __p;
        }
        uint64_t v24 = v8;
        operator delete(v10);
      }
      unint64_t v11 = v21;
      if (v21)
      {
        uint64_t v12 = v22;
        uint64_t v13 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v15 = (void *)*--v12;
            uint64_t v14 = v15;
            *uint64_t v12 = 0;
            if (v15) {
              operator delete[](v14);
            }
          }
          while (v12 != v11);
          uint64_t v13 = v21;
        }
        uint64_t v22 = v11;
        operator delete(v13);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

uint64_t mlir::mps::NormalizationOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.normalization", 17, v2, v3, 0, 0);
  void *v4 = &unk_1EC980A18;
  v4[12] = mlir::mps::NormalizationOp::canonicalize;
  long long v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    long long v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::NotEqualToOpGenericAdaptorBase::NotEqualToOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.not_equal", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::NotEqualToOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.not_equal", 13, v2, v3, 0, 0);
  void *v4 = &unk_1EC97FEC0;
  v4[12] = mlir::mps::NotEqualToOp::canonicalize;
  long long v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    long long v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::NotOpGenericAdaptorBase::NotOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.not", 7, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::NotOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.not", 7, v2, v3, 0, 0);
  void *v4 = &unk_1EC9824E8;
  v4[12] = mlir::mps::NotOp::canonicalize;
  long long v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    long long v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::OneHotOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::OneHotOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::OneHotOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::OneHotOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::OneHotOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::OneHotOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 107;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::OneHotOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[99];
    return a1[32];
  }
  return result;
}

void mlir::mps::OneHotOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v28[2] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a4;
  uint64_t v23 = a3;
  uint64_t v21 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v23, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  uint64_t v9 = mlir::TypeAttr::get(a6);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::OneHotOpGenericAdaptorBase::Properties>((void *)a2) = v9;
  __src = v28;
  uint64_t v27 = 0x200000000;
  uint64_t v10 = *a1;
  mlir::ValueRange::ValueRange((unint64_t *)v25, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v13 = *(unint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::OneHotOp::inferReturnTypes(v10, v14, v15, v25[0], (uint64_t)v25[1], Dictionary, v13, v16, v24[0], v24[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  __int16 v17 = __src;
  }
  uint64_t v18 = v27;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v27;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v28) {
    free(__src);
  }
}

BOOL mlir::mps::OneHotOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v79[0] = v2;
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v3, (const void **)"resultElementType", (const char *)0x11, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v79)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      return 0;
    }
    uint64_t v4 = *this;
    int v5 = (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v6 = *v5;
    if (*((_UNKNOWN **)*v5 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      goto LABEL_7;
    }
    uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v6 + 1));
    v79[0] = v5;
    v79[1] = v7;
    int ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v79);
    unint64_t v6 = *v5;
    if (!ArgOperands) {
      goto LABEL_7;
    }
    uint64_t v69 = v5;
    uint64_t v70 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v6 + 1));
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v69);
    unint64_t v6 = *v5;
    if (!v9)
    {
      uint64_t v56 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v6 + 1));
      uint64_t v76 = v5;
      uint64_t v77 = v56;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v76);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
        || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      {
        goto LABEL_66;
      }
      unint64_t v6 = *v5;
      int64_t v57 = (void *)*((void *)*v5 + 17);
      if (v57 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        && v57 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        goto LABEL_16;
      }
    }
    else
    {
LABEL_7:
      uint64_t v10 = (void *)v6[17];
      if (v10 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        && v10 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        goto LABEL_16;
      }
    }
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v6 + 1));
    v74[0] = v5;
    v74[1] = v12;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v74);
    if (!mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
      && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
      || (uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v5 + 8),
          v73[0] = v5,
          v73[1] = v13,
          ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73),
          uint64_t v89 = 1,
          v15 != 1)
      || *ArgAttrsAttr != v89)
    {
LABEL_16:
      if (*((_UNKNOWN **)*v5 + 17) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        uint64_t v52 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v5 + 8);
        v72[0] = v5;
        v72[1] = v52;
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v72);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
        {
          goto LABEL_66;
        }
      }
      __int16 v71 = 261;
      uint64_t v69 = (const void **)"operand";
      uint64_t v70 = 7;
      mlir::Operation::emitOpError(v4, &v69, (uint64_t)v79);
      if (v79[0])
      {
        LODWORD(v76) = 3;
        uint64_t v77 = (uint64_t)" #";
        uint64_t v78 = 2;
        int v16 = &v76;
        __int16 v17 = (char *)v80;
        if (v81 >= v82)
        {
          unint64_t v59 = v81 + 1;
          if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
          {
            int64_t v65 = (char *)&v76 - (unsigned char *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v59, 24);
            __int16 v17 = (char *)v80;
            int v16 = (const void ***)((char *)v80 + v65);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v59, 24);
            int v16 = &v76;
            __int16 v17 = (char *)v80;
          }
        }
        uint64_t v18 = &v17[24 * v81];
        long long v19 = *(_OWORD *)v16;
        *((void *)v18 + 2) = v16[2];
        *(_OWORD *)uint64_t v18 = v19;
        uint64_t v20 = ++v81;
        if (v79[0])
        {
          LODWORD(v76) = 5;
          uint64_t v77 = 1;
          uint64_t v21 = &v76;
          uint64_t v22 = (char *)v80;
          if (v20 >= v82)
          {
            unint64_t v60 = v20 + 1;
            BOOL v61 = (char *)v80 + 24 * v20 > (char *)&v76;
            if (v80 <= &v76 && v61)
            {
              int64_t v66 = (char *)&v76 - (unsigned char *)v80;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
              uint64_t v22 = (char *)v80;
              uint64_t v21 = (const void ***)((char *)v80 + v66);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
              uint64_t v21 = &v76;
              uint64_t v22 = (char *)v80;
            }
          }
          uint64_t v23 = &v22[24 * v81];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = v21[2];
          *(_OWORD *)uint64_t v23 = v24;
          uint64_t v25 = ++v81;
          if (v79[0])
          {
            LODWORD(v76) = 3;
            uint64_t v77 = (uint64_t)" must be 0D tensor of 32-bit unsigned integer or 64-bit unsigned integer values or static-sha"
                           "pe defined tensor with shape equal to [1] or unranked tensor of 32-bit unsigned integer or 64"
                           "-bit unsigned integer values, but got ";
            uint64_t v78 = 224;
            uint64_t v26 = &v76;
            uint64_t v27 = (char *)v80;
            if (v25 >= v82)
            {
              unint64_t v62 = v25 + 1;
              BOOL v63 = (char *)v80 + 24 * v25 > (char *)&v76;
              if (v80 <= &v76 && v63)
              {
                int64_t v67 = (char *)&v76 - (unsigned char *)v80;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
                uint64_t v27 = (char *)v80;
                uint64_t v26 = (const void ***)((char *)v80 + v67);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
                uint64_t v26 = &v76;
                uint64_t v27 = (char *)v80;
              }
            }
            uint64_t v28 = &v27[24 * v81];
            long long v29 = *(_OWORD *)v26;
            *((void *)v28 + 2) = v26[2];
            *(_OWORD *)uint64_t v28 = v29;
            ++v81;
            if (v79[0])
            {
              unint64_t v30 = &v76;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, (uint64_t)v5);
              uint64_t v31 = (char *)v80;
              if (v81 >= v82)
              {
                unint64_t v64 = v81 + 1;
                if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
                {
                  int64_t v68 = (char *)&v76 - (unsigned char *)v80;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
                  uint64_t v31 = (char *)v80;
                  unint64_t v30 = (const void ***)((char *)v80 + v68);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
                  unint64_t v30 = &v76;
                  uint64_t v31 = (char *)v80;
                }
              }
              unint64_t v32 = &v31[24 * v81];
              long long v33 = *(_OWORD *)v30;
              *((void *)v32 + 2) = v30[2];
              *(_OWORD *)unint64_t v32 = v33;
              ++v81;
            }
          }
        }
      }
      char v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v79);
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
      if (v88)
      {
        int64_t v35 = (void **)__p;
        if (__p)
        {
          int64_t v36 = v87;
          int64_t v37 = __p;
          if (v87 != __p)
          {
            do
              int64_t v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
            while (v36 != v35);
            int64_t v37 = __p;
          }
          unint64_t v87 = v35;
          operator delete(v37);
        }
        uint64_t v38 = v84;
        if (v84)
        {
          uint64_t v39 = v85;
          uint64_t v40 = v84;
          if (v85 != v84)
          {
            do
            {
              uint64_t v42 = (void *)*--v39;
              unint64_t v41 = v42;
              *uint64_t v39 = 0;
              if (v42) {
                operator delete[](v41);
              }
            }
            while (v39 != v38);
            uint64_t v40 = v84;
          }
          uint64_t v85 = v38;
          operator delete(v40);
        }
        if (v80 != v83) {
          free(v80);
        }
      }
      if (v34) {
        goto LABEL_66;
      }
      return 0;
    }
LABEL_66:
    if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps2(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 2u))return 0; {
    if (*((_DWORD *)*this + 9))
    }
      uint64_t v53 = (uint64_t)(*this - 2);
    else {
      uint64_t v53 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v53, 0);
    return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
  }
  uint64_t v69 = (const void **)"requires attribute 'resultElementType'";
  __int16 v71 = 259;
  mlir::OpState::emitOpError(this, &v69, (uint64_t)v79);
  uint64_t v43 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v79);
  if (v79[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
  }
  if (v88)
  {
    uint64_t v44 = (void **)__p;
    if (__p)
    {
      uint64_t v45 = v87;
      uint64_t v46 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        uint64_t v46 = __p;
      }
      unint64_t v87 = v44;
      operator delete(v46);
    }
    unsigned int v47 = v84;
    if (v84)
    {
      unsigned int v48 = v85;
      unint64_t v49 = v84;
      if (v85 != v84)
      {
        do
        {
          int64_t v51 = (void *)*--v48;
          unint64_t v50 = v51;
          *unsigned int v48 = 0;
          if (v51) {
            operator delete[](v50);
          }
        }
        while (v48 != v47);
        unint64_t v49 = v84;
      }
      uint64_t v85 = v47;
      operator delete(v49);
    }
    if (v80 != v83) {
      free(v80);
    }
  }
  return v43;
}

uint64_t mlir::mps::OneHotOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.one_hot", 11, v2, v3, 0, 0);
  void *v4 = &unk_1EC983618;
  v4[12] = mlir::mps::OneHotOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::OrOpGenericAdaptorBase::OrOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.or", 6, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::OrOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.or", 6, v2, v3, 0, 0);
  void *v4 = &unk_1EC982228;
  v4[12] = mlir::mps::OrOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::PReluOpGenericAdaptorBase::PReluOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.prelu", 9, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::PReluOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.prelu", 9, v2, v3, 0, 0);
  void *v4 = &unk_1EC9830F0;
  v4[12] = mlir::mps::PReluOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::PadGradientOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      uint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          uint64_t v27 = (char *)v60;
        }
      }
      uint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    unint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v67;
      unint64_t v32 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      int64_t v67 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    long long v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      int64_t v35 = (void *)*--v33;
      char v34 = v35;
      *long long v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "paddingMode", 0xBuLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected key entry for paddingMode in DictionaryAttr to set Properties.";
      uint64_t v58 = 71;
      int64_t v36 = &v56;
      int64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          int64_t v37 = (char *)v60;
          int64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          int64_t v36 = &v56;
          int64_t v37 = (char *)v60;
        }
      }
      uint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v40 = (void **)__p;
    if (__p)
    {
      unint64_t v41 = v67;
      uint64_t v42 = __p;
      if (v67 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      int64_t v67 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      uint64_t v44 = v45;
      *uint64_t v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 56;
    uint64_t v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        uint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      unint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      uint64_t v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v15 = (char *)v60;
          unint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unint64_t v14 = &v56;
          uint64_t v15 = (char *)v60;
        }
      }
      int v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)int v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      long long v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          long long v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      int64_t v67 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      int64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = (void *)*--v22;
      long long v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::mps::PadGradientOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"paddingMode", 11, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::mps::__mlir_ods_local_attr_constraint_MPSOps33(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1
    || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id)
  {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    unint64_t v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    BOOL v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        BOOL v8 = (char *)v35;
        uint64_t v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        BOOL v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      long long v29 = a2;
      unint64_t v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        unint64_t v30 = "' failed to satisfy constraint: valid PaddingMode";
        uint64_t v31 = 49;
        uint64_t v11 = &v29;
        uint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v12 = (char *)v35;
            uint64_t v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            uint64_t v12 = (char *)v35;
          }
        }
        long long v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)long long v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    int v16 = (void **)__p;
    if (__p)
    {
      long long v17 = v42;
      uint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          long long v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      uint64_t v42 = v16;
      operator delete(v18);
    }
    long long v19 = v39;
    if (v39)
    {
      uint64_t v20 = v40;
      uint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = (void *)*--v20;
          uint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v39;
      }
      uint64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::PadGradientOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PadGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PadGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PadGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PadGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::PadGradientOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 112;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::PadGradientOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[101];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::mps::PaddingModeAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    BOOL v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)BOOL v8 = v9;
    ++v47;
  }
  uint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::PaddingModeAttr]";
  unint64_t v41 = 76;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    uint64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      int v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)int v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        long long v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            long long v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            long long v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      long long v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          long long v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      int64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          unint64_t v30 = (void *)*--v27;
          long long v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      int64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

void mlir::mps::PadGradientOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  uint64_t v25 = a4;
  uint64_t v26 = a3;
  uint64_t v24 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v26, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v25, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  long long v9 = *a1;
  unsigned int v27 = a6;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v9);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id;
  uint64_t v31 = (uint64_t)v9;
  uint64_t v11 = mlir::StorageUniquer::get<mlir::mps::detail::PaddingModeAttrStorage,mlir::mps::PaddingMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail22PaddingModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_15PaddingModeAttrEJNS2_11PaddingModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id, &v27);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PadGradientOpGenericAdaptorBase::Properties>((void *)a2) = v11;
  __src = v32;
  uint64_t v31 = 0x200000000;
  uint64_t v12 = *(void *)a2;
  mlir::ValueRange::ValueRange(v29, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v14 = mlir::ValueRange::ValueRange(&v28, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::PadGradientOp::inferReturnTypes((uint64_t)v14, v12, 1, v29[0], v29[1], v15, v16, v17, v22, v23, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v18 = __src;
  }
  uint64_t v19 = v31;
  uint64_t v20 = *(unsigned int *)(a2 + 72);
  unint64_t v21 = v20 + v31;
  if (v21 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v21, 8);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  if (v19)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v20), v18, 8 * v19);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v20 + v19;
  if (__src != v32) {
    free(__src);
  }
}

BOOL mlir::mps::PadGradientOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v18[0] = v2;
    if (mlir::mps::__mlir_ods_local_attr_constraint_MPSOps33(v3, (const void **)"paddingMode", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps33(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps24(*this,
                            *(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8,
                            (const void **)"operand",
                            (const void **)7,
                            2u))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v4 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = (const void **)"requires attribute 'paddingMode'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError(this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      unint64_t v7 = (void **)__p;
      if (__p)
      {
        BOOL v8 = v24;
        long long v9 = __p;
        if (v24 != __p)
        {
          do
            BOOL v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          long long v9 = __p;
        }
        uint64_t v24 = v7;
        operator delete(v9);
      }
      unint64_t v10 = v21;
      if (v21)
      {
        uint64_t v11 = v22;
        uint64_t v12 = v21;
        if (v22 != v21)
        {
          do
          {
            unint64_t v14 = (void *)*--v11;
            unint64_t v13 = v14;
            *uint64_t v11 = 0;
            if (v14) {
              operator delete[](v13);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v21;
        }
        uint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

uint64_t mlir::mps::PadGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.pad_gradient", 16, v2, v3, 0, 0);
  void *v4 = &unk_1EC980230;
  v4[12] = mlir::mps::PadGradientOp::canonicalize;
  long long v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    long long v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::PadOpGenericAdaptorBase::PadOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  int v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.pad", 7, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::PadOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::PadOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 104;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::PadOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[103];
    return a1[32];
  }
  return result;
}

void mlir::mps::PadOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a4;
  uint64_t v21 = a3;
  uint64_t v19 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PadOpGenericAdaptorBase::Properties>((void *)a2) = a6;
  __src = v26;
  uint64_t v25 = 0x200000000;
  unint64_t v9 = *a1;
  uint64_t v10 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v13 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v22, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::PadOp::inferReturnTypes(v9, v10, 1, v23[0], v23[1], Dictionary, v13, v14, v22[0], v22[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v15 = __src;
  }
  uint64_t v16 = v25;
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  unint64_t v18 = v17 + v25;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v16)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v26) {
    free(__src);
  }
}

void mlir::mps::PadOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = a4;
  uint64_t v24 = a3;
  uint64_t v22 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v23, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  unint64_t v9 = *a1;
  unsigned int v25 = a6;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v9);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id;
  uint64_t v29 = (uint64_t)v9;
  uint64_t v11 = mlir::StorageUniquer::get<mlir::mps::detail::PaddingModeAttrStorage,mlir::mps::PaddingMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail22PaddingModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_15PaddingModeAttrEJNS2_11PaddingModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id, &v25);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PadOpGenericAdaptorBase::Properties>((void *)a2) = v11;
  __src = v30;
  uint64_t v29 = 0x200000000;
  uint64_t v12 = *a1;
  unint64_t v13 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v27, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v16 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v26, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::PadOp::inferReturnTypes(v12, v13, 1, v27[0], v27[1], Dictionary, v16, v17, v26[0], v26[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v18 = __src;
  }
  uint64_t v19 = v29;
  uint64_t v20 = *(unsigned int *)(a2 + 72);
  unint64_t v21 = v20 + v29;
  if (v21 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v21, 8);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  if (v19)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v20), v18, 8 * v19);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v20 + v19;
  if (__src != v30) {
    free(__src);
  }
}

BOOL mlir::mps::PadOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v18[0] = v2;
    if (mlir::mps::__mlir_ods_local_attr_constraint_MPSOps33(v3, (const void **)"paddingMode", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps33(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps24(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this,
                            (const void **)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8),
                            (const void **)"operand",
                            7,
                            2u))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v4 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = (const void **)"requires attribute 'paddingMode'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError(this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      unint64_t v7 = (void **)__p;
      if (__p)
      {
        __int16 v8 = v24;
        unint64_t v9 = __p;
        if (v24 != __p)
        {
          do
            __int16 v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          unint64_t v9 = __p;
        }
        uint64_t v24 = v7;
        operator delete(v9);
      }
      uint64_t v10 = v21;
      if (v21)
      {
        uint64_t v11 = v22;
        uint64_t v12 = v21;
        if (v22 != v21)
        {
          do
          {
            int v14 = (void *)*--v11;
            unint64_t v13 = v14;
            *uint64_t v11 = 0;
            if (v14) {
              operator delete[](v13);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v21;
        }
        uint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

uint64_t mlir::mps::PadOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.pad", 7, v2, v3, 0, 0);
  void *v4 = &unk_1EC982540;
  v4[12] = mlir::mps::PadOp::canonicalize;
  unint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::PermuteOpGenericAdaptorBase::PermuteOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.permute", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::PermuteOp::build(mlir::Builder *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = (int)a5;
  uint64_t IntegerType = mlir::Builder::getIntegerType(a1, 0x20u, 1);
  uint64_t v11 = (void *)mlir::RankedTensorType::get((uint64_t)&v16, 1, IntegerType, 0);
  uint64_t v12 = v11;
  uint64_t v13 = *a2;
  if (v11) {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v16 = mlir::DenseElementsAttr::getFromRawBuffer(v12, v14, a4, 4 * a5, 4, 1, 1);
  uint64_t v15 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(a1, v13, (uint64_t **)&v16);
  mlir::mps::PermuteOp::build((uint64_t)a1, (uint64_t)a2, a3, (uint64_t)v15 - 16);
}

void mlir::mps::PermuteOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v23[2] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a4;
  uint64_t v18 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  __src = v23;
  uint64_t v22 = 0x200000000;
  uint64_t v5 = *(void *)a2;
  mlir::ValueRange::ValueRange(v20, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v7 = mlir::ValueRange::ValueRange(&v19, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::PermuteOp::inferReturnTypes((uint64_t)v7, v5, 1, v20[0], v20[1], v8, v9, v10, v15, v16, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v11 = __src;
  }
  uint64_t v12 = v22;
  uint64_t v13 = *(unsigned int *)(a2 + 72);
  unint64_t v14 = v13 + v22;
  if (v14 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  if (v12)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v13), v11, 8 * v12);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + v12;
  if (__src != v23) {
    free(__src);
  }
}

uint64_t mlir::mps::PermuteOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.permute", 11, v2, v3, 0, 0);
  void *v4 = &unk_1EC983A38;
  v4[12] = mlir::mps::PermuteOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::PlaceholderOpGenericAdaptorBase::PlaceholderOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.placeholder", 15, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::PlaceholderOp::build(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 72);
  if (v5 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v5) = a3;
  ++*(_DWORD *)(a2 + 72);
}

uint64_t mlir::mps::PlaceholderOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.placeholder", 15, v2, v3, 0, 0);
  void *v4 = &unk_1EC980288;
  v4[12] = mlir::mps::PlaceholderOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::PoolAvgGradientOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v73 = v6;
  if (!v6)
  {
    a3(v77, a4);
    if (v77[0])
    {
      LODWORD(v74) = 3;
      int v75 = "expected DictionaryAttr to set properties";
      uint64_t v76 = 41;
      uint64_t v26 = &v74;
      unsigned int v27 = (char *)v78;
      if (v79 >= v80)
      {
        unint64_t v63 = v79 + 1;
        if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
        {
          int64_t v68 = (char *)&v74 - (unsigned char *)v78;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v63, 24);
          unsigned int v27 = (char *)v78;
          uint64_t v26 = (uint64_t *)((char *)v78 + v68);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v63, 24);
          uint64_t v26 = &v74;
          unsigned int v27 = (char *)v78;
        }
      }
      unint64_t v28 = &v27[24 * v79];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)unint64_t v28 = v29;
      ++v79;
      if (v77[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v77);
      }
    }
    if (!v86) {
      return 0;
    }
    unint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v85;
      unint64_t v32 = __p;
      if (v85 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      uint64_t v85 = v30;
      operator delete(v32);
    }
    unint64_t v21 = v82;
    if (!v82) {
      goto LABEL_71;
    }
    unint64_t v33 = v83;
    uint64_t v23 = v82;
    if (v83 == v82)
    {
LABEL_70:
      long long v83 = v21;
      operator delete(v23);
LABEL_71:
      if (v78 != v81) {
        free(v78);
      }
      return 0;
    }
    do
    {
      int64_t v35 = (void *)*--v33;
      unint64_t v34 = v35;
      *unint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_69;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v73, "ceil_mode", 9uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v77, a4);
      if (v77[0])
      {
        LODWORD(v74) = 3;
        uint64_t v76 = 54;
        uint64_t v10 = &v74;
        uint64_t v11 = (char *)v78;
        if (v79 >= v80)
        {
          unint64_t v64 = v79 + 1;
          if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
          {
            int64_t v69 = (char *)&v74 - (unsigned char *)v78;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
            uint64_t v11 = (char *)v78;
            uint64_t v10 = (uint64_t *)((char *)v78 + v69);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
            uint64_t v10 = &v74;
            uint64_t v11 = (char *)v78;
          }
        }
        uint64_t v12 = &v11[24 * v79];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)uint64_t v12 = v13;
        ++v79;
        if (v77[0])
        {
          unint64_t v14 = &v74;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v74, v9);
          uint64_t v15 = (char *)v78;
          if (v79 >= v80)
          {
            unint64_t v65 = v79 + 1;
            if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
            {
              int64_t v70 = (char *)&v74 - (unsigned char *)v78;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v65, 24);
              uint64_t v15 = (char *)v78;
              unint64_t v14 = (uint64_t *)((char *)v78 + v70);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v65, 24);
              unint64_t v14 = &v74;
              uint64_t v15 = (char *)v78;
            }
          }
          uint64_t v16 = &v15[24 * v79];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)uint64_t v16 = v17;
          ++v79;
          if (v77[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v77);
          }
        }
      }
      if (!v86) {
        return 0;
      }
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        unint64_t v19 = v85;
        uint64_t v20 = __p;
        if (v85 != __p)
        {
          do
            unint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        uint64_t v85 = v18;
        operator delete(v20);
      }
      unint64_t v21 = v82;
      if (!v82) {
        goto LABEL_71;
      }
      uint64_t v22 = v83;
      uint64_t v23 = v82;
      if (v83 == v82) {
        goto LABEL_70;
      }
      do
      {
        char v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_69;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v73, "dilation_rates", 0xEuLL);
  if (v36)
  {
    uint64_t v37 = v36;
    if (mlir::DenseIntElementsAttr::classof(v36))
    {
      a1[1] = v37;
      goto LABEL_45;
    }
    a3(v77, a4);
    if (v77[0])
    {
      LODWORD(v74) = 3;
      uint64_t v76 = 59;
      uint64_t v42 = &v74;
      __int16 v43 = (char *)v78;
      if (v79 >= v80)
      {
        unint64_t v66 = v79 + 1;
        if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
        {
          int64_t v71 = (char *)&v74 - (unsigned char *)v78;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v66, 24);
          __int16 v43 = (char *)v78;
          uint64_t v42 = (uint64_t *)((char *)v78 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v66, 24);
          uint64_t v42 = &v74;
          __int16 v43 = (char *)v78;
        }
      }
      uint64_t v44 = &v43[24 * v79];
      long long v45 = *(_OWORD *)v42;
      *((void *)v44 + 2) = v42[2];
      *(_OWORD *)uint64_t v44 = v45;
      ++v79;
      if (v77[0])
      {
        uint64_t v46 = &v74;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v74, v37);
        unsigned int v47 = (char *)v78;
        if (v79 >= v80)
        {
          unint64_t v67 = v79 + 1;
          if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
          {
            int64_t v72 = (char *)&v74 - (unsigned char *)v78;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v67, 24);
            unsigned int v47 = (char *)v78;
            uint64_t v46 = (uint64_t *)((char *)v78 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v67, 24);
            uint64_t v46 = &v74;
            unsigned int v47 = (char *)v78;
          }
        }
        unsigned int v48 = &v47[24 * v79];
        long long v49 = *(_OWORD *)v46;
        *((void *)v48 + 2) = v46[2];
        *(_OWORD *)unsigned int v48 = v49;
        ++v79;
        if (v77[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v77);
        }
      }
    }
    if (!v86) {
      return 0;
    }
    unint64_t v50 = (void **)__p;
    if (__p)
    {
      int64_t v51 = v85;
      int64_t v52 = __p;
      if (v85 != __p)
      {
        do
          int64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
        while (v51 != v50);
        int64_t v52 = __p;
      }
      uint64_t v85 = v50;
      operator delete(v52);
    }
    unint64_t v21 = v82;
    if (!v82) {
      goto LABEL_71;
    }
    int64_t v53 = v83;
    uint64_t v23 = v82;
    if (v83 == v82) {
      goto LABEL_70;
    }
    do
    {
      uint64_t v55 = (void *)*--v53;
      char v54 = v55;
      *int64_t v53 = 0;
      if (v55) {
        operator delete[](v54);
      }
    }
    while (v53 != v21);
LABEL_69:
    uint64_t v23 = v82;
    goto LABEL_70;
  }
LABEL_45:
  uint64_t v38 = mlir::DictionaryAttr::get((uint64_t)&v73, "explicit_padding", 0x10uLL);
  uint64_t v74 = v38;
  if (v38)
  {
    uint64_t v39 = v38;
    if (!mlir::DenseIntElementsAttr::classof(v38))
    {
      a3(v77, a4);
      goto LABEL_74;
    }
    a1[2] = v39;
  }
  uint64_t v40 = mlir::DictionaryAttr::get((uint64_t)&v73, "include_zero_pad", 0x10uLL);
  uint64_t v74 = v40;
  if (v40)
  {
    if (*(_UNKNOWN **)(*(void *)v40 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v77, a4);
LABEL_74:
      uint64_t v56 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v77, v41);
LABEL_89:
      mlir::InFlightDiagnostic::append<mlir::Attribute>(v56, &v74);
      goto LABEL_90;
    }
    a1[3] = v40;
  }
  uint64_t v57 = mlir::DictionaryAttr::get((uint64_t)&v73, "padding_style", 0xDuLL);
  uint64_t v74 = v57;
  if (v57)
  {
    if (*(_UNKNOWN **)(*(void *)v57 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id)
    {
      a3(v77, a4);
      goto LABEL_89;
    }
    a1[4] = v57;
  }
  uint64_t v58 = mlir::DictionaryAttr::get((uint64_t)&v73, "strides", 7uLL);
  uint64_t v74 = v58;
  if (v58)
  {
    uint64_t v59 = v58;
    if (!mlir::DenseIntElementsAttr::classof(v58))
    {
      a3(v77, a4);
      goto LABEL_89;
    }
    a1[5] = v59;
  }
  uint64_t v60 = mlir::DictionaryAttr::get((uint64_t)&v73, "window_sizes", 0xCuLL);
  uint64_t v74 = v60;
  if (v60)
  {
    uint64_t v61 = v60;
    if (mlir::DenseIntElementsAttr::classof(v60))
    {
      a1[6] = v61;
      return 1;
    }
    a3(v77, a4);
    goto LABEL_89;
  }
  a3(v77, a4);
  mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v77, "expected key entry for window_sizes in DictionaryAttr to set Properties.");
LABEL_90:
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v77);
  return 0;
}

uint64_t mlir::mps::PoolAvgGradientOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v51[6] = *MEMORY[0x1E4F143B8];
  unsigned int v48 = a1;
  long long v49 = v51;
  uint64_t v50 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v48, (uint64_t)"ceil_mode", 9, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v50;
  if (v50 >= HIDWORD(v50))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
    unsigned int v6 = v50;
  }
  uint64_t v7 = (uint64_t *)((char *)v49 + 16 * v6);
  *uint64_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v50 + 1;
  LODWORD(v50) = v50 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v48, (uint64_t)"dilation_rates", 14, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
      unsigned int v13 = v50;
    }
    unint64_t v14 = (uint64_t *)((char *)v49 + 16 * v13);
    *unint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v50 + 1;
    LODWORD(v50) = v50 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v48, (uint64_t)"explicit_padding", 16, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
      unsigned int v19 = v50;
    }
    uint64_t v20 = (uint64_t *)((char *)v49 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v50 + 1;
    LODWORD(v50) = v50 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v48, (uint64_t)"include_zero_pad", 16, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
      unsigned int v25 = v50;
    }
    uint64_t v26 = (uint64_t *)((char *)v49 + 16 * v25);
    uint64_t *v26 = v22;
    v26[1] = v24;
    unsigned int v8 = v50 + 1;
    LODWORD(v50) = v50 + 1;
  }
  uint64_t v27 = a2[4];
  if (v27)
  {
    uint64_t v28 = mlir::Builder::getNamedAttr(&v48, (uint64_t)"padding_style", 13, v27);
    uint64_t v30 = v29;
    unsigned int v31 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
      unsigned int v31 = v50;
    }
    unint64_t v32 = (uint64_t *)((char *)v49 + 16 * v31);
    *unint64_t v32 = v28;
    v32[1] = v30;
    unsigned int v8 = v50 + 1;
    LODWORD(v50) = v50 + 1;
  }
  uint64_t v33 = a2[5];
  if (v33)
  {
    uint64_t v34 = mlir::Builder::getNamedAttr(&v48, (uint64_t)"strides", 7, v33);
    uint64_t v36 = v35;
    unsigned int v37 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
      unsigned int v37 = v50;
    }
    uint64_t v38 = (uint64_t *)((char *)v49 + 16 * v37);
    *uint64_t v38 = v34;
    v38[1] = v36;
    unsigned int v8 = v50 + 1;
    LODWORD(v50) = v50 + 1;
  }
  uint64_t v39 = a2[6];
  if (v39)
  {
    uint64_t v40 = mlir::Builder::getNamedAttr(&v48, (uint64_t)"window_sizes", 12, v39);
    uint64_t v42 = v41;
    unsigned int v43 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
      unsigned int v43 = v50;
    }
    uint64_t v44 = (uint64_t *)((char *)v49 + 16 * v43);
    *uint64_t v44 = v40;
    v44[1] = v42;
    unsigned int v8 = v50 + 1;
    LODWORD(v50) = v50 + 1;
  }
  long long v45 = v49;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v49 == v51) {
      return DictionaryAttr;
    }
    goto LABEL_32;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v48, (uint64_t *)v49, v8);
  long long v45 = v49;
  if (v49 != v51) {
LABEL_32:
  }
    free(v45);
  return DictionaryAttr;
}

uint64_t mlir::mps::PoolAvgGradientOp::getInherentAttr(int a1, void *a2, void *__s1, size_t __n)
{
  switch(__n)
  {
    case 7uLL:
      if (memcmp(__s1, "strides", __n)) {
        return 0;
      }
      return a2[5];
    case 8uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xFuLL:
      return 0;
    case 9uLL:
      if (*__s1 != 0x646F6D5F6C696563 || *((unsigned char *)__s1 + 8) != 101) {
        return 0;
      }
      return *a2;
    case 0xCuLL:
      if (memcmp(__s1, "window_sizes", __n)) {
        return 0;
      }
      return a2[6];
    case 0xDuLL:
      if (memcmp(__s1, "padding_style", __n)) {
        return 0;
      }
      return a2[4];
    case 0xEuLL:
      if (memcmp(__s1, "dilation_rates", __n)) {
        return 0;
      }
      return a2[1];
    case 0x10uLL:
      if (!memcmp(__s1, "explicit_padding", __n)) {
        return a2[2];
      }
      if (*__s1 != 0x5F6564756C636E69 || __s1[1] != 0x6461705F6F72657ALL) {
        return 0;
      }
      return a2[3];
    default:
      return 0;
  }
}

uint64_t mlir::mps::PoolAvgGradientOp::setInherentAttr(uint64_t result, void *__s1, size_t a3, uint64_t a4)
{
  unsigned int v6 = (void *)result;
  switch(a3)
  {
    case 7uLL:
      uint64_t result = memcmp(__s1, "strides", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v14 = a4;
          }
          else {
            uint64_t v14 = 0;
          }
          v6[5] = v14;
        }
        else
        {
          v6[5] = 0;
        }
      }
      break;
    case 9uLL:
      if (*__s1 == 0x646F6D5F6C696563 && *((unsigned char *)__s1 + 8) == 101)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          *(void *)uint64_t result = v8;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xCuLL:
      uint64_t result = memcmp(__s1, "window_sizes", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v9 = a4;
          }
          else {
            uint64_t v9 = 0;
          }
          v6[6] = v9;
        }
        else
        {
          v6[6] = 0;
        }
      }
      break;
    case 0xDuLL:
      uint64_t result = memcmp(__s1, "padding_style", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          v6[4] = v10;
        }
        else
        {
          v6[4] = 0;
        }
      }
      break;
    case 0xEuLL:
      uint64_t result = memcmp(__s1, "dilation_rates", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v11 = a4;
          }
          else {
            uint64_t v11 = 0;
          }
          v6[1] = v11;
        }
        else
        {
          v6[1] = 0;
        }
      }
      break;
    case 0x10uLL:
      uint64_t result = memcmp(__s1, "explicit_padding", a3);
      if (result)
      {
        if (*__s1 == 0x5F6564756C636E69 && __s1[1] == 0x6461705F6F72657ALL)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
              uint64_t v13 = a4;
            }
            else {
              uint64_t v13 = 0;
            }
            v6[3] = v13;
          }
          else
          {
            v6[3] = 0;
          }
        }
      }
      else if (a4)
      {
        uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
        if (result) {
          uint64_t v15 = a4;
        }
        else {
          uint64_t v15 = 0;
        }
        v6[2] = v15;
      }
      else
      {
        v6[2] = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::mps::PoolAvgGradientOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"ceil_mode", 9, *a2);
  }
  uint64_t v5 = a2[1];
  if (v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"dilation_rates", 14, v5);
  }
  uint64_t v6 = a2[2];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"explicit_padding", 16, v6);
  }
  uint64_t v7 = a2[3];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"include_zero_pad", 16, v7);
  }
  uint64_t v8 = a2[4];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"padding_style", 13, v8);
  }
  uint64_t v9 = a2[5];
  if (v9) {
    mlir::NamedAttrList::append(a3, (uint64_t)"strides", 7, v9);
  }
  uint64_t v10 = a2[6];
  if (v10)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"window_sizes", 12, v10);
  }
}

BOOL mlir::mps::PoolAvgGradientOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v8, (const void **)"ceil_mode", (const char *)9, a3, a4))
  {
    uint64_t v9 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v9, (const void **)"dilation_rates", (const char *)0xE, (void (*)(void **__return_ptr, uint64_t))a3, a4))
    {
      uint64_t v10 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(v10, (const void **)"explicit_padding", (const char *)0x10, (void (*)(void **__return_ptr, uint64_t))a3, a4))
      {
        uint64_t v11 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v11, (const void **)"include_zero_pad", (const char *)0x10, a3, a4))
        {
          uint64_t v12 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 32));
          if (!v12
            || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(v12, (const void **)"padding_style", (const char *)0xD, a3, a4))
          {
            uint64_t v13 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 40));
            if (!v13
              || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v13, (const void **)"strides", (const char *)7, (void (*)(void **__return_ptr, uint64_t))a3, a4))
            {
              uint64_t v14 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 48));
              if (!v14
                || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v14, (const void **)"window_sizes", (const char *)0xC, (void (*)(void **__return_ptr, uint64_t))a3, a4))
              {
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(const void **a1, const void **a2, const char *a3, void (*a4)(void **__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)a1)) {
    goto LABEL_9;
  }
  uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>((uint64_t)*a1 + 8);
  uint64_t v41 = a1;
  uint64_t v42 = (const char *)v10;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v41);
  uint64_t v12 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  long long v45 = v12;
  uint64_t v46 = Type;
  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45);
  uint64_t v56 = 8;
  if (v14 == 1 && *ArgAttrsAttr == v56)
  {
    uint64_t v38 = a1;
    v39[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38);
    v39[1] = v15;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v39);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
      return 1;
    }
  }
LABEL_9:
  a4(&v45, a5);
  if (v45)
  {
    LODWORD(v41) = 3;
    uint64_t v42 = "attribute '";
    uint64_t v43 = 11;
    uint64_t v17 = &v41;
    uint64_t v18 = (char *)v47;
    if (v48 >= v49)
    {
      unint64_t v34 = v48 + 1;
      if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
      {
        int64_t v36 = (char *)&v41 - (unsigned char *)v47;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
        uint64_t v18 = (char *)v47;
        uint64_t v17 = (const void ***)((char *)v47 + v36);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
        uint64_t v17 = &v41;
        uint64_t v18 = (char *)v47;
      }
    }
    unsigned int v19 = &v18[24 * v48];
    long long v20 = *(_OWORD *)v17;
    *((void *)v19 + 2) = v17[2];
    *(_OWORD *)unsigned int v19 = v20;
    ++v48;
    if (v45)
    {
      __int16 v44 = 261;
      uint64_t v41 = a2;
      uint64_t v42 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v46, &v41);
      if (v45)
      {
        LODWORD(v41) = 3;
        uint64_t v42 = "' failed to satisfy constraint: ui64 elements attribute of shape {8}";
        uint64_t v43 = 68;
        uint64_t v21 = &v41;
        uint64_t v22 = (char *)v47;
        if (v48 >= v49)
        {
          unint64_t v35 = v48 + 1;
          if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
          {
            int64_t v37 = (char *)&v41 - (unsigned char *)v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
            uint64_t v22 = (char *)v47;
            uint64_t v21 = (const void ***)((char *)v47 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
            uint64_t v21 = &v41;
            uint64_t v22 = (char *)v47;
          }
        }
        uint64_t v23 = &v22[24 * v48];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = v21[2];
        *(_OWORD *)uint64_t v23 = v24;
        ++v48;
      }
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
  if (v45) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
  }
  if (v55)
  {
    unsigned int v25 = (void **)__p;
    if (__p)
    {
      uint64_t v26 = v54;
      uint64_t v27 = __p;
      if (v54 != __p)
      {
        do
          uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        uint64_t v27 = __p;
      }
      char v54 = v25;
      operator delete(v27);
    }
    uint64_t v28 = v51;
    if (v51)
    {
      uint64_t v29 = v52;
      uint64_t v30 = v51;
      if (v52 != v51)
      {
        do
        {
          unint64_t v32 = (void *)*--v29;
          unsigned int v31 = v32;
          void *v29 = 0;
          if (v32) {
            operator delete[](v31);
          }
        }
        while (v29 != v28);
        uint64_t v30 = v51;
      }
      int64_t v52 = v28;
      operator delete(v30);
    }
    if (v47 != v50) {
      free(v47);
    }
  }
  return v16;
}

BOOL mlir::mps::PoolAvgGradientOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::PaddingStyleAttr>(a1, v3 + 4)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 5)
      && mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 6) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x38uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    *((void *)v3 + 6) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 116;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[105];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::PaddingStyleAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  uint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::PaddingStyleAttr]";
  unint64_t v41 = 77;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    uint64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unsigned int v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unsigned int v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            unsigned int v19 = (char *)v46;
          }
        }
        long long v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)long long v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      long long v24 = v53;
      unsigned int v25 = __p;
      if (v53 != __p)
      {
        do
          long long v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unsigned int v25 = __p;
      }
      int64_t v53 = v23;
      operator delete(v25);
    }
    uint64_t v26 = v50;
    if (v50)
    {
      uint64_t v27 = v51;
      uint64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = (void *)*--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        uint64_t v28 = v50;
      }
      int64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::mps::PoolAvgGradientOp::getWindowSizes(mlir::mps::PoolAvgGradientOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(void *)(v1 + 48);
}

void mlir::mps::PoolAvgGradientOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, char a10, char a11)
{
  v37[2] = *MEMORY[0x1E4F143B8];
  uint64_t v30 = a4;
  uint64_t v31 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v31, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v30, 1);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 48) = a5;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 40) = a6;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = a7;
  long long v17 = *a1;
  unsigned int v32 = a8;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v17);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id;
  uint64_t v36 = (uint64_t)v17;
  uint64_t v19 = mlir::StorageUniquer::get<mlir::mps::detail::PaddingStyleAttrStorage,mlir::mps::PaddingStyle>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23PaddingStyleAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16PaddingStyleAttrEJNS2_12PaddingStyleEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id, &v32);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 32) = v19;
  if (a9) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 16) = a9;
  if (a10)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v20);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  if (a11)
  {
    uint64_t v22 = mlir::Builder::getUnitAttr(a1, v20);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties>((void *)a2)
              + 24) = v22;
  }
  __src = v37;
  uint64_t v36 = 0x200000000;
  mlir::ValueRange::ValueRange(v34, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  long long v24 = mlir::ValueRange::ValueRange(&v33, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::inferPool4DGradientOpReturnTypes((uint64_t)v24, v25, v34[0], v34[1], (uint64_t)&__src)) {
    llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  }
  uint64_t v26 = __src;
  uint64_t v27 = v36;
  uint64_t v28 = *(unsigned int *)(a2 + 72);
  unint64_t v29 = v28 + v36;
  if (v29 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v29, 8);
    LODWORD(v28) = *(_DWORD *)(a2 + 72);
  }
  if (v27)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v28), v26, 8 * v27);
    LODWORD(v28) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v28 + v27;
  if (__src != v37) {
    free(__src);
  }
}

mlir::MLIRContext *mlir::mps::PoolAvgGradientOp::populateDefaultProperties(uint64_t a1, void *a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v15 = *(void *)(a1 + 8);
  uint64_t result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  unint64_t v14 = result;
  if (a2[5])
  {
    if (a2[1]) {
      goto LABEL_3;
    }
  }
  else
  {
    v17[0] = 4;
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)&v14, 0x40u, 0);
    int v5 = (void *)mlir::RankedTensorType::get((uint64_t)v17, 1, IntegerType, 0);
    unint64_t v6 = v5;
    if (v5) {
      uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    long long v15 = xmmword_181119FA8;
    long long v16 = unk_181119FB8;
    uint64_t result = (mlir::MLIRContext *)mlir::DenseElementsAttr::getFromRawBuffer(v6, v7, &v15, 32, 8, 1, 0);
    a2[5] = result;
    if (a2[1])
    {
LABEL_3:
      if (a2[4]) {
        return result;
      }
LABEL_13:
      uint64_t v12 = v14;
      LODWORD(v17[0]) = 2;
      AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v14);
      *(void *)&long long v15 = &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id;
      *((void *)&v15 + 1) = v12;
      uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::PaddingStyleAttrStorage,mlir::mps::PaddingStyle>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23PaddingStyleAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16PaddingStyleAttrEJNS2_12PaddingStyleEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v15, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id, (unsigned int *)v17);
      a2[4] = result;
      return result;
    }
  }
  v17[0] = 4;
  uint64_t v8 = mlir::Builder::getIntegerType((mlir::Builder *)&v14, 0x40u, 0);
  long long v9 = (void *)mlir::RankedTensorType::get((uint64_t)v17, 1, v8, 0);
  unint64_t v10 = v9;
  if (v9) {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  long long v15 = xmmword_181119FA8;
  long long v16 = unk_181119FB8;
  uint64_t result = (mlir::MLIRContext *)mlir::DenseElementsAttr::getFromRawBuffer(v10, v11, &v15, 32, 8, 1, 0);
  a2[1] = result;
  if (!a2[4]) {
    goto LABEL_13;
  }
  return result;
}

BOOL mlir::mps::PoolAvgGradientOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (const void **)v3[6];
  if (v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = (const void **)v3[1];
    uint64_t v8 = (const void **)v3[2];
    uint64_t v7 = v3[3];
    uint64_t v9 = v3[4];
    unint64_t v10 = (const void **)v3[5];
    v25[0] = v2;
    if (mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v4, (const void **)"window_sizes", (const char *)0xC, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25)&& (v25[0] = *this, mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v10, (const void **)"strides", (const char *)7, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))&& (v25[0] = *this, mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v6, (const void **)"dilation_rates", (const char *)0xE, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))
      && (v25[0] = *this,
          mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(v9, (const void **)"padding_style", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))&& (v25[0] = *this, mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(v8, (const void **)"explicit_padding", (const char *)0x10, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))&& (v25[0] = *this, mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v5, (const void **)"ceil_mode", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))
      && (v25[0] = *this,
          mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v7, (const void **)"include_zero_pad", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v11 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v23 = (const void **)"requires attribute 'window_sizes'";
    __int16 v24 = 259;
    mlir::OpState::emitOpError(this, &v23, (uint64_t)v25);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
    if (v25[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
    }
    if (v32)
    {
      long long v15 = (void **)__p;
      if (__p)
      {
        long long v16 = v31;
        long long v17 = __p;
        if (v31 != __p)
        {
          do
            long long v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          long long v17 = __p;
        }
        uint64_t v31 = v15;
        operator delete(v17);
      }
      uint64_t v18 = v28;
      if (v28)
      {
        uint64_t v19 = v29;
        long long v20 = v28;
        if (v29 != v28)
        {
          do
          {
            uint64_t v22 = (void *)*--v19;
            long long v21 = v22;
            void *v19 = 0;
            if (v22) {
              operator delete[](v21);
            }
          }
          while (v19 != v18);
          long long v20 = v28;
        }
        unint64_t v29 = v18;
        operator delete(v20);
      }
      if (v26 != &v27) {
        free(v26);
      }
    }
  }
  return v13;
}

uint64_t mlir::mps::PoolAvgGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.pooling_average_gradient", 28, v2, v3, 0, 0);
  void *v4 = &unk_1EC981150;
  v4[12] = mlir::mps::PoolAvgGradientOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::PoolAvgOpGenericAdaptorBase::PoolAvgOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * ((v4 >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v13, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *(_OWORD *)v5;
  long long v9 = *(_OWORD *)(v5 + 16);
  long long v10 = *(_OWORD *)(v5 + 32);
  *(void *)(a1 + 72) = *(void *)(v5 + 48);
  *(_OWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v13;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.pooling_average", 19, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::PoolAvgOp::getInherentAttr(int a1, void *a2, void *__s1, size_t __n)
{
  switch(__n)
  {
    case 7uLL:
      if (memcmp(__s1, "strides", __n)) {
        return 0;
      }
      return a2[5];
    case 8uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xFuLL:
      return 0;
    case 9uLL:
      if (*__s1 != 0x646F6D5F6C696563 || *((unsigned char *)__s1 + 8) != 101) {
        return 0;
      }
      return *a2;
    case 0xCuLL:
      if (memcmp(__s1, "window_sizes", __n)) {
        return 0;
      }
      return a2[6];
    case 0xDuLL:
      if (memcmp(__s1, "padding_style", __n)) {
        return 0;
      }
      return a2[4];
    case 0xEuLL:
      if (memcmp(__s1, "dilation_rates", __n)) {
        return 0;
      }
      return a2[1];
    case 0x10uLL:
      if (!memcmp(__s1, "explicit_padding", __n)) {
        return a2[2];
      }
      if (*__s1 != 0x5F6564756C636E69 || __s1[1] != 0x6461705F6F72657ALL) {
        return 0;
      }
      return a2[3];
    default:
      return 0;
  }
}

uint64_t mlir::mps::PoolAvgOp::setInherentAttr(uint64_t result, void *__s1, size_t a3, uint64_t a4)
{
  unint64_t v6 = (void *)result;
  switch(a3)
  {
    case 7uLL:
      uint64_t result = memcmp(__s1, "strides", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v14 = a4;
          }
          else {
            uint64_t v14 = 0;
          }
          v6[5] = v14;
        }
        else
        {
          v6[5] = 0;
        }
      }
      break;
    case 9uLL:
      if (*__s1 == 0x646F6D5F6C696563 && *((unsigned char *)__s1 + 8) == 101)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          *(void *)uint64_t result = v8;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xCuLL:
      uint64_t result = memcmp(__s1, "window_sizes", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v9 = a4;
          }
          else {
            uint64_t v9 = 0;
          }
          v6[6] = v9;
        }
        else
        {
          v6[6] = 0;
        }
      }
      break;
    case 0xDuLL:
      uint64_t result = memcmp(__s1, "padding_style", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          v6[4] = v10;
        }
        else
        {
          v6[4] = 0;
        }
      }
      break;
    case 0xEuLL:
      uint64_t result = memcmp(__s1, "dilation_rates", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v11 = a4;
          }
          else {
            uint64_t v11 = 0;
          }
          v6[1] = v11;
        }
        else
        {
          v6[1] = 0;
        }
      }
      break;
    case 0x10uLL:
      uint64_t result = memcmp(__s1, "explicit_padding", a3);
      if (result)
      {
        if (*__s1 == 0x5F6564756C636E69 && __s1[1] == 0x6461705F6F72657ALL)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
              uint64_t v13 = a4;
            }
            else {
              uint64_t v13 = 0;
            }
            v6[3] = v13;
          }
          else
          {
            v6[3] = 0;
          }
        }
      }
      else if (a4)
      {
        uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
        if (result) {
          uint64_t v15 = a4;
        }
        else {
          uint64_t v15 = 0;
        }
        v6[2] = v15;
      }
      else
      {
        v6[2] = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::mps::PoolAvgOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::PaddingStyleAttr>(a1, v3 + 4)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 5)
      && mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 6) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x38uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    *((void *)v3 + 6) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 108;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[107];
    return a1[32];
  }
  return result;
}

void mlir::mps::PoolAvgOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v27, 1);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2)
            + 48) = a4;
  if (a5) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 40) = a5;
  if (a6) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 8) = a6;
  if (a7) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 32) = a7;
  if (a8) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 16) = a8;
  if (a9) {
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2) = a9;
  }
  if (a10) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 24) = a10;
  __src = v32;
  uint64_t v31 = 0x200000000;
  long long v17 = *a1;
  uint64_t v18 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v29, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  long long v21 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange((unint64_t *)&v28, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::PoolAvgOp::inferReturnTypes(v17, v18, 1, v29[0], v29[1], Dictionary, v21, v22, v28, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v23 = __src;
  }
  uint64_t v24 = v31;
  uint64_t v25 = *(unsigned int *)(a2 + 72);
  unint64_t v26 = v25 + v31;
  if (v26 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v26, 8);
    LODWORD(v25) = *(_DWORD *)(a2 + 72);
  }
  if (v24)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v25), v23, 8 * v24);
    LODWORD(v25) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v25 + v24;
  if (__src != v32) {
    free(__src);
  }
}

void mlir::mps::PoolAvgOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, char a9, char a10)
{
  void v39[2] = *MEMORY[0x1E4F143B8];
  uint64_t v33 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v33, 1);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2)
            + 48) = a4;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2)
            + 40) = a5;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = a6;
  long long v17 = *a1;
  unsigned int v34 = a7;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v17);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id;
  uint64_t v38 = (uint64_t)v17;
  uint64_t v19 = mlir::StorageUniquer::get<mlir::mps::detail::PaddingStyleAttrStorage,mlir::mps::PaddingStyle>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23PaddingStyleAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16PaddingStyleAttrEJNS2_12PaddingStyleEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id, &v34);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2)
            + 32) = v19;
  if (a8) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 16) = a8;
  if (a9)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v20);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  if (a10)
  {
    uint64_t v22 = mlir::Builder::getUnitAttr(a1, v20);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>((void *)a2)
              + 24) = v22;
  }
  __src = v39;
  uint64_t v38 = 0x200000000;
  uint64_t v23 = *a1;
  uint64_t v24 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v36, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v27 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange((unint64_t *)&v35, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::PoolAvgOp::inferReturnTypes(v23, v24, 1, v36[0], v36[1], Dictionary, v27, v28, v35, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v29 = __src;
  }
  uint64_t v30 = v38;
  uint64_t v31 = *(unsigned int *)(a2 + 72);
  unint64_t v32 = v31 + v38;
  if (v32 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v32, 8);
    LODWORD(v31) = *(_DWORD *)(a2 + 72);
  }
  if (v30)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v31), v29, 8 * v30);
    LODWORD(v31) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v31 + v30;
  if (__src != v39) {
    free(__src);
  }
}

BOOL mlir::mps::PoolAvgOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  unint64_t v4 = (const void **)v3[6];
  if (v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = (const void **)v3[1];
    uint64_t v8 = (const void **)v3[2];
    uint64_t v7 = v3[3];
    uint64_t v9 = v3[4];
    uint64_t v10 = (const void **)v3[5];
    v25[0] = v2;
    if (mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v4, (const void **)"window_sizes", (const char *)0xC, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25)&& (v25[0] = *this, mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v10, (const void **)"strides", (const char *)7, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))&& (v25[0] = *this, mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v6, (const void **)"dilation_rates", (const char *)0xE, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))
      && (v25[0] = *this,
          mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(v9, (const void **)"padding_style", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))&& (v25[0] = *this, mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(v8, (const void **)"explicit_padding", (const char *)0x10, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))&& (v25[0] = *this, mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v5, (const void **)"ceil_mode", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))
      && (v25[0] = *this,
          mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v7, (const void **)"include_zero_pad", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v11 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v23 = (const void **)"requires attribute 'window_sizes'";
    __int16 v24 = 259;
    mlir::OpState::emitOpError(this, &v23, (uint64_t)v25);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
    if (v25[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
    }
    if (v32)
    {
      uint64_t v15 = (void **)__p;
      if (__p)
      {
        long long v16 = v31;
        long long v17 = __p;
        if (v31 != __p)
        {
          do
            long long v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          long long v17 = __p;
        }
        uint64_t v31 = v15;
        operator delete(v17);
      }
      uint64_t v18 = v28;
      if (v28)
      {
        uint64_t v19 = v29;
        long long v20 = v28;
        if (v29 != v28)
        {
          do
          {
            uint64_t v22 = (void *)*--v19;
            long long v21 = v22;
            void *v19 = 0;
            if (v22) {
              operator delete[](v21);
            }
          }
          while (v19 != v18);
          long long v20 = v28;
        }
        unint64_t v29 = v18;
        operator delete(v20);
      }
      if (v26 != &v27) {
        free(v26);
      }
    }
  }
  return v13;
}

uint64_t mlir::mps::PoolAvgOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.pooling_average", 19, v2, v3, 0, 0);
  void *v4 = &unk_1EC983A90;
  v4[12] = mlir::mps::PoolAvgOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::PoolL2NormGradientOp::getInherentAttr(int a1, void *a2, void *__s1, size_t __n)
{
  switch(__n)
  {
    case 7uLL:
      if (memcmp(__s1, "strides", __n)) {
        return 0;
      }
      return a2[5];
    case 8uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xFuLL:
      return 0;
    case 9uLL:
      if (*__s1 != 0x646F6D5F6C696563 || *((unsigned char *)__s1 + 8) != 101) {
        return 0;
      }
      return *a2;
    case 0xCuLL:
      if (memcmp(__s1, "window_sizes", __n)) {
        return 0;
      }
      return a2[6];
    case 0xDuLL:
      if (memcmp(__s1, "padding_style", __n)) {
        return 0;
      }
      return a2[4];
    case 0xEuLL:
      if (memcmp(__s1, "dilation_rates", __n)) {
        return 0;
      }
      return a2[1];
    case 0x10uLL:
      if (!memcmp(__s1, "explicit_padding", __n)) {
        return a2[2];
      }
      if (*__s1 != 0x5F6564756C636E69 || __s1[1] != 0x6461705F6F72657ALL) {
        return 0;
      }
      return a2[3];
    default:
      return 0;
  }
}

uint64_t mlir::mps::PoolL2NormGradientOp::setInherentAttr(uint64_t result, void *__s1, size_t a3, uint64_t a4)
{
  unint64_t v6 = (void *)result;
  switch(a3)
  {
    case 7uLL:
      uint64_t result = memcmp(__s1, "strides", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v14 = a4;
          }
          else {
            uint64_t v14 = 0;
          }
          v6[5] = v14;
        }
        else
        {
          v6[5] = 0;
        }
      }
      break;
    case 9uLL:
      if (*__s1 == 0x646F6D5F6C696563 && *((unsigned char *)__s1 + 8) == 101)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          *(void *)uint64_t result = v8;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xCuLL:
      uint64_t result = memcmp(__s1, "window_sizes", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v9 = a4;
          }
          else {
            uint64_t v9 = 0;
          }
          v6[6] = v9;
        }
        else
        {
          v6[6] = 0;
        }
      }
      break;
    case 0xDuLL:
      uint64_t result = memcmp(__s1, "padding_style", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          v6[4] = v10;
        }
        else
        {
          v6[4] = 0;
        }
      }
      break;
    case 0xEuLL:
      uint64_t result = memcmp(__s1, "dilation_rates", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v11 = a4;
          }
          else {
            uint64_t v11 = 0;
          }
          v6[1] = v11;
        }
        else
        {
          v6[1] = 0;
        }
      }
      break;
    case 0x10uLL:
      uint64_t result = memcmp(__s1, "explicit_padding", a3);
      if (result)
      {
        if (*__s1 == 0x5F6564756C636E69 && __s1[1] == 0x6461705F6F72657ALL)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
              uint64_t v13 = a4;
            }
            else {
              uint64_t v13 = 0;
            }
            v6[3] = v13;
          }
          else
          {
            v6[3] = 0;
          }
        }
      }
      else if (a4)
      {
        uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
        if (result) {
          uint64_t v15 = a4;
        }
        else {
          uint64_t v15 = 0;
        }
        v6[2] = v15;
      }
      else
      {
        v6[2] = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::mps::PoolL2NormGradientOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::PaddingStyleAttr>(a1, v3 + 4)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 5)
      && mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 6) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x38uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    *((void *)v3 + 6) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 119;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[109];
    return a1[32];
  }
  return result;
}

void mlir::mps::PoolL2NormGradientOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, char a10, char a11)
{
  v37[2] = *MEMORY[0x1E4F143B8];
  uint64_t v30 = a4;
  uint64_t v31 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v31, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v30, 1);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 48) = a5;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 40) = a6;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = a7;
  long long v17 = *a1;
  unsigned int v32 = a8;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v17);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id;
  uint64_t v36 = (uint64_t)v17;
  uint64_t v19 = mlir::StorageUniquer::get<mlir::mps::detail::PaddingStyleAttrStorage,mlir::mps::PaddingStyle>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23PaddingStyleAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16PaddingStyleAttrEJNS2_12PaddingStyleEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id, &v32);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 32) = v19;
  if (a9) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 16) = a9;
  if (a10)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v20);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  if (a11)
  {
    uint64_t v22 = mlir::Builder::getUnitAttr(a1, v20);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties>((void *)a2)
              + 24) = v22;
  }
  __src = v37;
  uint64_t v36 = 0x200000000;
  mlir::ValueRange::ValueRange(v34, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  __int16 v24 = mlir::ValueRange::ValueRange(&v33, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::inferPool4DGradientOpReturnTypes((uint64_t)v24, v25, v34[0], v34[1], (uint64_t)&__src)) {
    llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  }
  unint64_t v26 = __src;
  uint64_t v27 = v36;
  uint64_t v28 = *(unsigned int *)(a2 + 72);
  unint64_t v29 = v28 + v36;
  if (v29 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v29, 8);
    LODWORD(v28) = *(_DWORD *)(a2 + 72);
  }
  if (v27)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v28), v26, 8 * v27);
    LODWORD(v28) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v28 + v27;
  if (__src != v37) {
    free(__src);
  }
}

uint64_t mlir::mps::PoolL2NormGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.pooling_l2_norm_gradient", 28, v2, v3, 0, 0);
  void *v4 = &unk_1EC981888;
  v4[12] = mlir::mps::PoolL2NormGradientOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::PoolL2NormOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * ((v4 >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v13, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *(_OWORD *)v5;
  long long v9 = *(_OWORD *)(v5 + 16);
  long long v10 = *(_OWORD *)(v5 + 32);
  *(void *)(a1 + 72) = *(void *)(v5 + 48);
  *(_OWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v13;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.pooling_l2_norm", 19, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::PoolL2NormOp::getInherentAttr(int a1, void *a2, void *__s1, size_t __n)
{
  switch(__n)
  {
    case 7uLL:
      if (memcmp(__s1, "strides", __n)) {
        return 0;
      }
      return a2[5];
    case 8uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xFuLL:
      return 0;
    case 9uLL:
      if (*__s1 != 0x646F6D5F6C696563 || *((unsigned char *)__s1 + 8) != 101) {
        return 0;
      }
      return *a2;
    case 0xCuLL:
      if (memcmp(__s1, "window_sizes", __n)) {
        return 0;
      }
      return a2[6];
    case 0xDuLL:
      if (memcmp(__s1, "padding_style", __n)) {
        return 0;
      }
      return a2[4];
    case 0xEuLL:
      if (memcmp(__s1, "dilation_rates", __n)) {
        return 0;
      }
      return a2[1];
    case 0x10uLL:
      if (!memcmp(__s1, "explicit_padding", __n)) {
        return a2[2];
      }
      if (*__s1 != 0x5F6564756C636E69 || __s1[1] != 0x6461705F6F72657ALL) {
        return 0;
      }
      return a2[3];
    default:
      return 0;
  }
}

uint64_t mlir::mps::PoolL2NormOp::setInherentAttr(uint64_t result, void *__s1, size_t a3, uint64_t a4)
{
  unint64_t v6 = (void *)result;
  switch(a3)
  {
    case 7uLL:
      uint64_t result = memcmp(__s1, "strides", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v14 = a4;
          }
          else {
            uint64_t v14 = 0;
          }
          v6[5] = v14;
        }
        else
        {
          v6[5] = 0;
        }
      }
      break;
    case 9uLL:
      if (*__s1 == 0x646F6D5F6C696563 && *((unsigned char *)__s1 + 8) == 101)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          *(void *)uint64_t result = v8;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xCuLL:
      uint64_t result = memcmp(__s1, "window_sizes", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v9 = a4;
          }
          else {
            uint64_t v9 = 0;
          }
          v6[6] = v9;
        }
        else
        {
          v6[6] = 0;
        }
      }
      break;
    case 0xDuLL:
      uint64_t result = memcmp(__s1, "padding_style", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          v6[4] = v10;
        }
        else
        {
          v6[4] = 0;
        }
      }
      break;
    case 0xEuLL:
      uint64_t result = memcmp(__s1, "dilation_rates", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v11 = a4;
          }
          else {
            uint64_t v11 = 0;
          }
          v6[1] = v11;
        }
        else
        {
          v6[1] = 0;
        }
      }
      break;
    case 0x10uLL:
      uint64_t result = memcmp(__s1, "explicit_padding", a3);
      if (result)
      {
        if (*__s1 == 0x5F6564756C636E69 && __s1[1] == 0x6461705F6F72657ALL)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
              uint64_t v13 = a4;
            }
            else {
              uint64_t v13 = 0;
            }
            v6[3] = v13;
          }
          else
          {
            v6[3] = 0;
          }
        }
      }
      else if (a4)
      {
        uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
        if (result) {
          uint64_t v15 = a4;
        }
        else {
          uint64_t v15 = 0;
        }
        v6[2] = v15;
      }
      else
      {
        v6[2] = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::mps::PoolL2NormOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::PaddingStyleAttr>(a1, v3 + 4)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 5)
      && mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 6) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x38uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    *((void *)v3 + 6) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 111;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[111];
    return a1[32];
  }
  return result;
}

void mlir::mps::PoolL2NormOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v27, 1);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2)
            + 48) = a4;
  if (a5) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 40) = a5;
  if (a6) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 8) = a6;
  if (a7) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 32) = a7;
  if (a8) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 16) = a8;
  if (a9) {
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2) = a9;
  }
  if (a10) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 24) = a10;
  __src = v32;
  uint64_t v31 = 0x200000000;
  long long v17 = *a1;
  uint64_t v18 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v29, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  long long v21 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange((unint64_t *)&v28, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::PoolL2NormOp::inferReturnTypes(v17, v18, 1, v29[0], v29[1], Dictionary, v21, v22, v28, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v23 = __src;
  }
  uint64_t v24 = v31;
  uint64_t v25 = *(unsigned int *)(a2 + 72);
  unint64_t v26 = v25 + v31;
  if (v26 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v26, 8);
    LODWORD(v25) = *(_DWORD *)(a2 + 72);
  }
  if (v24)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v25), v23, 8 * v24);
    LODWORD(v25) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v25 + v24;
  if (__src != v32) {
    free(__src);
  }
}

void mlir::mps::PoolL2NormOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, char a9, char a10)
{
  void v39[2] = *MEMORY[0x1E4F143B8];
  uint64_t v33 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v33, 1);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2)
            + 48) = a4;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2)
            + 40) = a5;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = a6;
  long long v17 = *a1;
  unsigned int v34 = a7;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v17);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id;
  uint64_t v38 = (uint64_t)v17;
  uint64_t v19 = mlir::StorageUniquer::get<mlir::mps::detail::PaddingStyleAttrStorage,mlir::mps::PaddingStyle>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23PaddingStyleAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16PaddingStyleAttrEJNS2_12PaddingStyleEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id, &v34);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2)
            + 32) = v19;
  if (a8) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 16) = a8;
  if (a9)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v20);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  if (a10)
  {
    uint64_t v22 = mlir::Builder::getUnitAttr(a1, v20);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>((void *)a2)
              + 24) = v22;
  }
  __src = v39;
  uint64_t v38 = 0x200000000;
  uint64_t v23 = *a1;
  uint64_t v24 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v36, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v27 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange((unint64_t *)&v35, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::PoolL2NormOp::inferReturnTypes(v23, v24, 1, v36[0], v36[1], Dictionary, v27, v28, v35, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v29 = __src;
  }
  uint64_t v30 = v38;
  uint64_t v31 = *(unsigned int *)(a2 + 72);
  unint64_t v32 = v31 + v38;
  if (v32 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v32, 8);
    LODWORD(v31) = *(_DWORD *)(a2 + 72);
  }
  if (v30)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v31), v29, 8 * v30);
    LODWORD(v31) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v31 + v30;
  if (__src != v39) {
    free(__src);
  }
}

uint64_t mlir::mps::PoolL2NormOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.pooling_l2_norm", 19, v2, v3, 0, 0);
  void *v4 = &unk_1EC97FF18;
  v4[12] = mlir::mps::PoolL2NormOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::PoolMaxGradientOp::getODSOperands(mlir::mps::PoolMaxGradientOp *this, unsigned int a2)
{
  unint64_t v2 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v3 = *(void *)this + 16 * ((v2 >> 23) & 1) + 64;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!a2)
  {
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (a2 >= 8)
  {
    uint64_t v4 = a2 & 0xFFFFFFF8;
    unint64_t v7 = (int32x4_t *)(v3 + 88);
    int32x4_t v8 = 0uLL;
    uint64_t v9 = v4;
    int32x4_t v10 = 0uLL;
    do
    {
      int32x4_t v8 = vaddq_s32(v7[-1], v8);
      int32x4_t v10 = vaddq_s32(*v7, v10);
      v7 += 2;
      v9 -= 8;
    }
    while (v9);
    unsigned int v5 = vaddvq_s32(vaddq_s32(v10, v8));
    if (v4 == a2) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
  }
  uint64_t v11 = a2 - v4;
  uint64_t v12 = (int *)(v3 + 4 * v4 + 72);
  do
  {
    int v13 = *v12++;
    v5 += v13;
    --v11;
  }
  while (v11);
LABEL_13:
  uint64_t v6 = v5;
LABEL_14:
  if ((v2 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v6;
  }
  else {
    return 32 * v6;
  }
}

BOOL mlir::mps::PoolMaxGradientOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v76 = v6;
  if (!v6)
  {
    a3(v80, a4);
    if (v80[0])
    {
      LODWORD(v77) = 3;
      uint64_t v78 = "expected DictionaryAttr to set properties";
      uint64_t v79 = 41;
      unint64_t v26 = &v77;
      uint64_t v27 = (char *)v81;
      if (v82 >= v83)
      {
        unint64_t v66 = v82 + 1;
        if (v81 <= &v77 && (char *)v81 + 24 * v82 > (char *)&v77)
        {
          int64_t v71 = (char *)&v77 - (unsigned char *)v81;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v84, v66, 24);
          uint64_t v27 = (char *)v81;
          unint64_t v26 = (uint64_t *)((char *)v81 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v84, v66, 24);
          unint64_t v26 = &v77;
          uint64_t v27 = (char *)v81;
        }
      }
      int v28 = &v27[24 * v82];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)int v28 = v29;
      ++v82;
      if (v80[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v80);
      }
    }
    if (!v89) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v88;
      unint64_t v32 = __p;
      if (v88 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      char v88 = v30;
      operator delete(v32);
    }
    long long v21 = v85;
    if (!v85) {
      goto LABEL_71;
    }
    uint64_t v33 = v86;
    uint64_t v23 = v85;
    if (v86 == v85)
    {
LABEL_70:
      char v86 = v21;
      operator delete(v23);
LABEL_71:
      if (v81 != v84) {
        free(v81);
      }
      return 0;
    }
    do
    {
      long long v35 = (void *)*--v33;
      unsigned int v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_69;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v76, "ceil_mode", 9uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v80, a4);
      if (v80[0])
      {
        LODWORD(v77) = 3;
        uint64_t v79 = 54;
        int32x4_t v10 = &v77;
        uint64_t v11 = (char *)v81;
        if (v82 >= v83)
        {
          unint64_t v67 = v82 + 1;
          if (v81 <= &v77 && (char *)v81 + 24 * v82 > (char *)&v77)
          {
            int64_t v72 = (char *)&v77 - (unsigned char *)v81;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v84, v67, 24);
            uint64_t v11 = (char *)v81;
            int32x4_t v10 = (uint64_t *)((char *)v81 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v84, v67, 24);
            int32x4_t v10 = &v77;
            uint64_t v11 = (char *)v81;
          }
        }
        uint64_t v12 = &v11[24 * v82];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)uint64_t v12 = v13;
        ++v82;
        if (v80[0])
        {
          unint64_t v14 = &v77;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v77, v9);
          uint64_t v15 = (char *)v81;
          if (v82 >= v83)
          {
            unint64_t v68 = v82 + 1;
            if (v81 <= &v77 && (char *)v81 + 24 * v82 > (char *)&v77)
            {
              int64_t v73 = (char *)&v77 - (unsigned char *)v81;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v84, v68, 24);
              uint64_t v15 = (char *)v81;
              unint64_t v14 = (uint64_t *)((char *)v81 + v73);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v84, v68, 24);
              unint64_t v14 = &v77;
              uint64_t v15 = (char *)v81;
            }
          }
          long long v16 = &v15[24 * v82];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)long long v16 = v17;
          ++v82;
          if (v80[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v80);
          }
        }
      }
      if (!v89) {
        return 0;
      }
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v88;
        long long v20 = __p;
        if (v88 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          long long v20 = __p;
        }
        char v88 = v18;
        operator delete(v20);
      }
      long long v21 = v85;
      if (!v85) {
        goto LABEL_71;
      }
      uint64_t v22 = v86;
      uint64_t v23 = v85;
      if (v86 == v85) {
        goto LABEL_70;
      }
      do
      {
        uint64_t v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_69;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v76, "dilation_rates", 0xEuLL);
  if (v36)
  {
    uint64_t v37 = v36;
    if (mlir::DenseIntElementsAttr::classof(v36))
    {
      a1[1] = v37;
      goto LABEL_45;
    }
    a3(v80, a4);
    if (v80[0])
    {
      LODWORD(v77) = 3;
      uint64_t v79 = 59;
      uint64_t v42 = &v77;
      __int16 v43 = (char *)v81;
      if (v82 >= v83)
      {
        unint64_t v69 = v82 + 1;
        if (v81 <= &v77 && (char *)v81 + 24 * v82 > (char *)&v77)
        {
          int64_t v74 = (char *)&v77 - (unsigned char *)v81;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v84, v69, 24);
          __int16 v43 = (char *)v81;
          uint64_t v42 = (uint64_t *)((char *)v81 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v84, v69, 24);
          uint64_t v42 = &v77;
          __int16 v43 = (char *)v81;
        }
      }
      uint64_t v44 = &v43[24 * v82];
      long long v45 = *(_OWORD *)v42;
      *((void *)v44 + 2) = v42[2];
      *(_OWORD *)uint64_t v44 = v45;
      ++v82;
      if (v80[0])
      {
        uint64_t v46 = &v77;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v77, v37);
        unsigned int v47 = (char *)v81;
        if (v82 >= v83)
        {
          unint64_t v70 = v82 + 1;
          if (v81 <= &v77 && (char *)v81 + 24 * v82 > (char *)&v77)
          {
            int64_t v75 = (char *)&v77 - (unsigned char *)v81;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v84, v70, 24);
            unsigned int v47 = (char *)v81;
            uint64_t v46 = (uint64_t *)((char *)v81 + v75);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v84, v70, 24);
            uint64_t v46 = &v77;
            unsigned int v47 = (char *)v81;
          }
        }
        unsigned int v48 = &v47[24 * v82];
        long long v49 = *(_OWORD *)v46;
        *((void *)v48 + 2) = v46[2];
        *(_OWORD *)unsigned int v48 = v49;
        ++v82;
        if (v80[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v80);
        }
      }
    }
    if (!v89) {
      return 0;
    }
    uint64_t v50 = (void **)__p;
    if (__p)
    {
      int64_t v51 = v88;
      int64_t v52 = __p;
      if (v88 != __p)
      {
        do
          int64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
        while (v51 != v50);
        int64_t v52 = __p;
      }
      char v88 = v50;
      operator delete(v52);
    }
    long long v21 = v85;
    if (!v85) {
      goto LABEL_71;
    }
    int64_t v53 = v86;
    uint64_t v23 = v85;
    if (v86 == v85) {
      goto LABEL_70;
    }
    do
    {
      uint64_t v55 = (void *)*--v53;
      char v54 = v55;
      *int64_t v53 = 0;
      if (v55) {
        operator delete[](v54);
      }
    }
    while (v53 != v21);
LABEL_69:
    uint64_t v23 = v85;
    goto LABEL_70;
  }
LABEL_45:
  uint64_t v38 = mlir::DictionaryAttr::get((uint64_t)&v76, "explicit_padding", 0x10uLL);
  uint64_t v77 = v38;
  if (v38)
  {
    uint64_t v39 = v38;
    if (!mlir::DenseIntElementsAttr::classof(v38))
    {
      a3(v80, a4);
      goto LABEL_74;
    }
    a1[2] = v39;
  }
  uint64_t v40 = mlir::DictionaryAttr::get((uint64_t)&v76, "include_zero_pad", 0x10uLL);
  uint64_t v77 = v40;
  if (v40)
  {
    if (*(_UNKNOWN **)(*(void *)v40 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v80, a4);
LABEL_74:
      uint64_t v56 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v80, v41);
LABEL_98:
      mlir::InFlightDiagnostic::append<mlir::Attribute>(v56, &v77);
LABEL_99:
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v80);
      return 0;
    }
    a1[3] = v40;
  }
  uint64_t v57 = mlir::DictionaryAttr::get((uint64_t)&v76, "indices_mode", 0xCuLL);
  uint64_t v77 = v57;
  if (v57)
  {
    if (*(_UNKNOWN **)(*(void *)v57 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id)
    {
      a3(v80, a4);
      goto LABEL_74;
    }
    a1[4] = v57;
  }
  uint64_t v58 = mlir::DictionaryAttr::get((uint64_t)&v76, "indices_result_type", 0x13uLL);
  uint64_t v77 = v58;
  if (v58)
  {
    if (*(_UNKNOWN **)(*(void *)v58 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      a3(v80, a4);
      goto LABEL_98;
    }
    a1[5] = v58;
  }
  uint64_t v59 = mlir::DictionaryAttr::get((uint64_t)&v76, "padding_style", 0xDuLL);
  uint64_t v77 = v59;
  if (v59)
  {
    if (*(_UNKNOWN **)(*(void *)v59 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id)
    {
      a3(v80, a4);
      goto LABEL_98;
    }
    a1[6] = v59;
  }
  uint64_t v60 = mlir::DictionaryAttr::get((uint64_t)&v76, "strides", 7uLL);
  uint64_t v77 = v60;
  if (v60)
  {
    uint64_t v61 = v60;
    if (!mlir::DenseIntElementsAttr::classof(v60))
    {
      a3(v80, a4);
      goto LABEL_98;
    }
    a1[7] = v61;
  }
  uint64_t v62 = mlir::DictionaryAttr::get((uint64_t)&v76, "window_sizes", 0xCuLL);
  uint64_t v77 = v62;
  if (!v62)
  {
    a3(v80, a4);
    mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v80, "expected key entry for window_sizes in DictionaryAttr to set Properties.");
    goto LABEL_99;
  }
  uint64_t v63 = v62;
  if ((mlir::DenseIntElementsAttr::classof(v62) & 1) == 0)
  {
    a3(v80, a4);
    goto LABEL_74;
  }
  a1[8] = v63;
  unint64_t v64 = (void *)mlir::DictionaryAttr::get((uint64_t)&v76, "operandSegmentSizes", 0x13uLL);
  if (!v64)
  {
    unint64_t v64 = (void *)mlir::DictionaryAttr::get((uint64_t)&v76, "operand_segment_sizes", 0x15uLL);
    if (!v64)
    {
      a3(v80, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v80, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
      goto LABEL_99;
    }
  }
  return mlir::convertFromAttribute(a1 + 9, (const char *)4, v64, a3, a4) != 0;
}

uint64_t mlir::mps::PoolMaxGradientOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v71[6] = *MEMORY[0x1E4F143B8];
  unint64_t v68 = a1;
  unint64_t v69 = v71;
  uint64_t v70 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v68, (uint64_t)"ceil_mode", 9, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v70;
    if (v70 >= HIDWORD(v70))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 16);
      unsigned int v7 = v70;
    }
    uint64_t v8 = (uint64_t *)((char *)v69 + 16 * v7);
    uint64_t *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v70) = v70 + 1;
  }
  uint64_t v9 = a2[1];
  if (v9)
  {
    uint64_t v10 = mlir::Builder::getNamedAttr(&v68, (uint64_t)"dilation_rates", 14, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v70;
    if (v70 >= HIDWORD(v70))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 16);
      unsigned int v13 = v70;
    }
    unint64_t v14 = (uint64_t *)((char *)v69 + 16 * v13);
    *unint64_t v14 = v10;
    v14[1] = v12;
    LODWORD(v70) = v70 + 1;
  }
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v68, (uint64_t)"explicit_padding", 16, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v70;
    if (v70 >= HIDWORD(v70))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 16);
      unsigned int v19 = v70;
    }
    long long v20 = (uint64_t *)((char *)v69 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    LODWORD(v70) = v70 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v68, (uint64_t)"include_zero_pad", 16, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v70;
    if (v70 >= HIDWORD(v70))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 16);
      unsigned int v25 = v70;
    }
    unint64_t v26 = (uint64_t *)((char *)v69 + 16 * v25);
    uint64_t *v26 = v22;
    v26[1] = v24;
    LODWORD(v70) = v70 + 1;
  }
  uint64_t v27 = a2[4];
  if (v27)
  {
    uint64_t v28 = mlir::Builder::getNamedAttr(&v68, (uint64_t)"indices_mode", 12, v27);
    uint64_t v30 = v29;
    unsigned int v31 = v70;
    if (v70 >= HIDWORD(v70))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 16);
      unsigned int v31 = v70;
    }
    unint64_t v32 = (uint64_t *)((char *)v69 + 16 * v31);
    *unint64_t v32 = v28;
    v32[1] = v30;
    LODWORD(v70) = v70 + 1;
  }
  uint64_t v33 = a2[5];
  if (v33)
  {
    uint64_t v34 = mlir::Builder::getNamedAttr(&v68, (uint64_t)"indices_result_type", 19, v33);
    uint64_t v36 = v35;
    unsigned int v37 = v70;
    if (v70 >= HIDWORD(v70))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 16);
      unsigned int v37 = v70;
    }
    uint64_t v38 = (uint64_t *)((char *)v69 + 16 * v37);
    *uint64_t v38 = v34;
    v38[1] = v36;
    LODWORD(v70) = v70 + 1;
  }
  uint64_t v39 = a2[6];
  if (v39)
  {
    uint64_t v40 = mlir::Builder::getNamedAttr(&v68, (uint64_t)"padding_style", 13, v39);
    uint64_t v42 = v41;
    unsigned int v43 = v70;
    if (v70 >= HIDWORD(v70))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 16);
      unsigned int v43 = v70;
    }
    uint64_t v44 = (uint64_t *)((char *)v69 + 16 * v43);
    *uint64_t v44 = v40;
    v44[1] = v42;
    LODWORD(v70) = v70 + 1;
  }
  uint64_t v45 = a2[7];
  if (v45)
  {
    uint64_t v46 = mlir::Builder::getNamedAttr(&v68, (uint64_t)"strides", 7, v45);
    uint64_t v48 = v47;
    unsigned int v49 = v70;
    if (v70 >= HIDWORD(v70))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 16);
      unsigned int v49 = v70;
    }
    uint64_t v50 = (uint64_t *)((char *)v69 + 16 * v49);
    uint64_t *v50 = v46;
    v50[1] = v48;
    LODWORD(v70) = v70 + 1;
  }
  uint64_t v51 = a2[8];
  if (v51)
  {
    uint64_t v52 = mlir::Builder::getNamedAttr(&v68, (uint64_t)"window_sizes", 12, v51);
    uint64_t v54 = v53;
    unsigned int v55 = v70;
    if (v70 >= HIDWORD(v70))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 16);
      unsigned int v55 = v70;
    }
    uint64_t v56 = (uint64_t *)((char *)v69 + 16 * v55);
    *uint64_t v56 = v52;
    v56[1] = v54;
    LODWORD(v70) = v70 + 1;
  }
  uint64_t v57 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 9), 4);
  uint64_t v58 = mlir::Builder::getNamedAttr(&v68, (uint64_t)"operandSegmentSizes", 19, v57);
  uint64_t v60 = v59;
  unsigned int v61 = v70;
  if (v70 >= HIDWORD(v70))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 16);
    unsigned int v61 = v70;
  }
  uint64_t v62 = (uint64_t *)((char *)v69 + 16 * v61);
  *uint64_t v62 = v58;
  v62[1] = v60;
  BOOL v63 = __CFADD__(v70, 1);
  uint64_t v64 = (v70 + 1);
  LODWORD(v70) = v70 + 1;
  if (v63)
  {
    uint64_t DictionaryAttr = 0;
    unint64_t v66 = v69;
    if (v69 == v71) {
      return DictionaryAttr;
    }
    goto LABEL_44;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v68, (uint64_t *)v69, v64);
  unint64_t v66 = v69;
  if (v69 != v71) {
LABEL_44:
  }
    free(v66);
  return DictionaryAttr;
}

unint64_t mlir::mps::PoolMaxGradientOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = 0x1E8EB8000uLL;
  {
    unint64_t v64 = v1;
    int64_t v73 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v35 = v34;
    unint64_t v1 = v64;
    a1 = v73;
    if (v35)
    {
      unint64_t v36 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v36 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v36;
      unint64_t v1 = v64;
      a1 = v73;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v3 = HIDWORD(v1);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v1) ^ HIDWORD(v1));
  unint64_t v92 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v5 = a1[1];
  {
    unint64_t v65 = v5;
    int64_t v74 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v38 = v37;
    unint64_t v5 = v65;
    a1 = v74;
    if (v38)
    {
      unint64_t v39 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v39 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v39;
      unint64_t v5 = v65;
      a1 = v74;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v5) ^ HIDWORD(v5));
  unint64_t v91 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v8 = a1[2];
  {
    unint64_t v66 = v8;
    int64_t v75 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v41 = v40;
    unint64_t v8 = v66;
    a1 = v75;
    if (v41)
    {
      unint64_t v42 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v42 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v42;
      unint64_t v8 = v66;
      a1 = v75;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v9 = HIDWORD(v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v8) ^ HIDWORD(v8));
  unint64_t v90 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  unint64_t v11 = a1[3];
  {
    unint64_t v67 = v11;
    uint64_t v76 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v44 = v43;
    unint64_t v11 = v67;
    a1 = v76;
    if (v44)
    {
      unint64_t v45 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v45 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v45;
      unint64_t v11 = v67;
      a1 = v76;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v12 = HIDWORD(v11);
  unint64_t v13 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v11) ^ HIDWORD(v11));
  unint64_t v89 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) >> 47));
  unint64_t v14 = a1[4];
  {
    unint64_t v68 = v14;
    uint64_t v77 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v47 = v46;
    unint64_t v14 = v68;
    a1 = v77;
    if (v47)
    {
      unint64_t v48 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v48 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v48;
      unint64_t v14 = v68;
      a1 = v77;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v15 = HIDWORD(v14);
  unint64_t v16 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v14) ^ HIDWORD(v14));
  unint64_t v88 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v15 ^ (v16 >> 47) ^ v16)) ^ ((0x9DDFEA08EB382D69 * (v15 ^ (v16 >> 47) ^ v16)) >> 47));
  unint64_t v17 = a1[5];
  {
    unint64_t v69 = v17;
    uint64_t v78 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v50 = v49;
    unint64_t v17 = v69;
    a1 = v78;
    if (v50)
    {
      unint64_t v51 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v51 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v51;
      unint64_t v17 = v69;
      a1 = v78;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v18 = HIDWORD(v17);
  unint64_t v19 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v17) ^ HIDWORD(v17));
  unint64_t v87 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v18 ^ (v19 >> 47) ^ v19)) ^ ((0x9DDFEA08EB382D69 * (v18 ^ (v19 >> 47) ^ v19)) >> 47));
  unint64_t v20 = a1[6];
  {
    unint64_t v70 = v20;
    uint64_t v79 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v53 = v52;
    unint64_t v20 = v70;
    a1 = v79;
    if (v53)
    {
      unint64_t v54 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v54 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v54;
      unint64_t v20 = v70;
      a1 = v79;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v21 = HIDWORD(v20);
  unint64_t v22 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v20) ^ HIDWORD(v20));
  unint64_t v86 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  unint64_t v23 = a1[7];
  {
    unint64_t v71 = v23;
    unsigned int v80 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v56 = v55;
    unint64_t v23 = v71;
    a1 = v80;
    if (v56)
    {
      unint64_t v57 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v57 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v57;
      unint64_t v23 = v71;
      a1 = v80;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v24 = HIDWORD(v23);
  unint64_t v25 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v23) ^ HIDWORD(v23));
  unint64_t v85 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v24 ^ (v25 >> 47) ^ v25)) ^ ((0x9DDFEA08EB382D69 * (v24 ^ (v25 >> 47) ^ v25)) >> 47));
  unint64_t v26 = a1[8];
  {
    unint64_t v72 = v26;
    unsigned int v81 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v59 = v58;
    unint64_t v26 = v72;
    a1 = v81;
    if (v59)
    {
      unint64_t v60 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v60 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v60;
      unint64_t v26 = v72;
      a1 = v81;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v27 = HIDWORD(v26);
  unint64_t v28 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v26) ^ HIDWORD(v26));
  unint64_t v84 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v27 ^ (v28 >> 47) ^ v28)) ^ ((0x9DDFEA08EB382D69 * (v27 ^ (v28 >> 47) ^ v28)) >> 47));
  {
    unsigned int v82 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v62 = v61;
    a1 = v82;
    if (v62)
    {
      unint64_t v63 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v63 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v63;
      unint64_t v2 = 0x1E8EB8000;
      a1 = v82;
    }
  }
  unint64_t v29 = a1[10];
  unint64_t v30 = a1[9] ^ *(void *)(v2 + 3024);
  uint64_t v31 = __ROR8__(v29 + 16, 16);
  unint64_t v32 = 0x9DDFEA08EB382D69
      * (v31 ^ ((0x9DDFEA08EB382D69 * (v30 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v30 ^ v31)));
  unint64_t v83 = (0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47))) ^ v29;
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, (uint64_t *)&v86, (uint64_t *)&v85, (uint64_t *)&v84, (uint64_t *)&v83);
}

unint64_t llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v30 = 0;
  memset(v29, 0, sizeof(v29));
  memset(v28, 0, sizeof(v28));
  {
    unint64_t v23 = a2;
    unint64_t v24 = a1;
    a2 = v23;
    a1 = v24;
    if (v21)
    {
      unint64_t v22 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v22 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v22;
      a2 = v23;
      a1 = v24;
    }
  }
  uint64_t v16 = *a1;
  uint64_t v31 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v28[0] = v16;
  unint64_t v25 = 0;
  unint64_t v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v28, (uint64_t *)&v25, (void *)v28 + 1, (unint64_t)v29, *a2);
  unint64_t v26 = v25;
  unint64_t v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v28, (uint64_t *)&v26, v17, (unint64_t)v29, *a3);
  unint64_t v27 = v26;
  unint64_t v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v28, (uint64_t *)&v27, v18, (unint64_t)v29, *a4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v28, v27, v19, (char *)v29, a5, a6, a7, a8, a9, a10);
}

uint64_t mlir::mps::PoolMaxGradientOp::getInherentAttr(mlir::MLIRContext *a1, void *a2, void *__s1, size_t __n)
{
  uint64_t result = 0;
  switch(__n)
  {
    case 7uLL:
      if (memcmp(__s1, "strides", __n)) {
        return 0;
      }
      return a2[7];
    case 8uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      return 0;
    case 9uLL:
      if (*__s1 != 0x646F6D5F6C696563 || *((unsigned char *)__s1 + 8) != 101) {
        return 0;
      }
      return *a2;
    case 0xCuLL:
      if (!memcmp(__s1, "indices_mode", __n)) {
        return a2[4];
      }
      if (memcmp(__s1, "window_sizes", __n)) {
        return 0;
      }
      return a2[8];
    case 0xDuLL:
      if (memcmp(__s1, "padding_style", __n)) {
        return 0;
      }
      return a2[6];
    case 0xEuLL:
      if (memcmp(__s1, "dilation_rates", __n)) {
        return 0;
      }
      return a2[1];
    case 0x10uLL:
      if (!memcmp(__s1, "explicit_padding", __n)) {
        return a2[2];
      }
      if (*__s1 == 0x5F6564756C636E69 && __s1[1] == 0x6461705F6F72657ALL) {
        return a2[3];
      }
      return 0;
    case 0x13uLL:
      if (!memcmp(__s1, "indices_result_type", __n)) {
        return a2[5];
      }
      if (!memcmp(__s1, "operandSegmentSizes", __n)) {
        return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 9), 4);
      }
      return 0;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n)) {
        return 0;
      }
      return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 9), 4);
    default:
      return result;
  }
}

uint64_t mlir::mps::PoolMaxGradientOp::setInherentAttr(uint64_t result, void *__s1, size_t __n, void *a4)
{
  unint64_t v7 = (void *)result;
  switch(__n)
  {
    case 7uLL:
      uint64_t result = memcmp(__s1, "strides", __n);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof((uint64_t)a4);
          if (result) {
            unint64_t v17 = a4;
          }
          else {
            unint64_t v17 = 0;
          }
          v7[7] = v17;
        }
        else
        {
          v7[7] = 0;
        }
      }
      break;
    case 9uLL:
      if (*__s1 == 0x646F6D5F6C696563 && *((unsigned char *)__s1 + 8) == 101)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            unint64_t v9 = a4;
          }
          else {
            unint64_t v9 = 0;
          }
          *(void *)uint64_t result = v9;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xCuLL:
      uint64_t result = memcmp(__s1, "indices_mode", __n);
      if (result)
      {
        uint64_t result = memcmp(__s1, "window_sizes", __n);
        if (!result)
        {
          if (a4)
          {
            uint64_t result = mlir::DenseIntElementsAttr::classof((uint64_t)a4);
            if (result) {
              unint64_t v10 = a4;
            }
            else {
              unint64_t v10 = 0;
            }
            v7[8] = v10;
          }
          else
          {
            v7[8] = 0;
          }
        }
      }
      else if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id) {
          unint64_t v18 = a4;
        }
        else {
          unint64_t v18 = 0;
        }
        uint64_t v7[4] = v18;
      }
      else
      {
        uint64_t v7[4] = 0;
      }
      break;
    case 0xDuLL:
      uint64_t result = memcmp(__s1, "padding_style", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id) {
            unint64_t v11 = a4;
          }
          else {
            unint64_t v11 = 0;
          }
          v7[6] = v11;
        }
        else
        {
          v7[6] = 0;
        }
      }
      break;
    case 0xEuLL:
      uint64_t result = memcmp(__s1, "dilation_rates", __n);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof((uint64_t)a4);
          if (result) {
            unint64_t v12 = a4;
          }
          else {
            unint64_t v12 = 0;
          }
          v7[1] = v12;
        }
        else
        {
          v7[1] = 0;
        }
      }
      break;
    case 0x10uLL:
      uint64_t result = memcmp(__s1, "explicit_padding", __n);
      if (result)
      {
        if (*__s1 == 0x5F6564756C636E69 && __s1[1] == 0x6461705F6F72657ALL)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
              unint64_t v14 = a4;
            }
            else {
              unint64_t v14 = 0;
            }
            v7[3] = v14;
          }
          else
          {
            v7[3] = 0;
          }
        }
      }
      else if (a4)
      {
        uint64_t result = mlir::DenseIntElementsAttr::classof((uint64_t)a4);
        if (result) {
          unint64_t v19 = a4;
        }
        else {
          unint64_t v19 = 0;
        }
        v7[2] = v19;
      }
      else
      {
        v7[2] = 0;
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "indices_result_type", __n);
      if (result)
      {
        uint64_t result = memcmp(__s1, "operandSegmentSizes", __n);
        if (!result) {
          goto LABEL_48;
        }
      }
      else if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
          unint64_t v20 = a4;
        }
        else {
          unint64_t v20 = 0;
        }
        v7[5] = v20;
      }
      else
      {
        v7[5] = 0;
      }
      break;
    case 0x15uLL:
      uint64_t result = memcmp(__s1, "operand_segment_sizes", __n);
      if (!result)
      {
LABEL_48:
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          unint64_t v15 = result ? a4 : 0;
          int v21 = v15;
          if (result)
          {
            uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v21);
            if (result == 4)
            {
              uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v21);
              if (v16) {
                uint64_t result = (uint64_t)memmove(v7 + 9, (const void *)result, 4 * v16);
              }
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::mps::PoolMaxGradientOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"ceil_mode", 9, *a2);
  }
  uint64_t v6 = a2[1];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"dilation_rates", 14, v6);
  }
  uint64_t v7 = a2[2];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"explicit_padding", 16, v7);
  }
  uint64_t v8 = a2[3];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"include_zero_pad", 16, v8);
  }
  uint64_t v9 = a2[4];
  if (v9) {
    mlir::NamedAttrList::append(a3, (uint64_t)"indices_mode", 12, v9);
  }
  uint64_t v10 = a2[5];
  if (v10) {
    mlir::NamedAttrList::append(a3, (uint64_t)"indices_result_type", 19, v10);
  }
  uint64_t v11 = a2[6];
  if (v11) {
    mlir::NamedAttrList::append(a3, (uint64_t)"padding_style", 13, v11);
  }
  uint64_t v12 = a2[7];
  if (v12) {
    mlir::NamedAttrList::append(a3, (uint64_t)"strides", 7, v12);
  }
  uint64_t v13 = a2[8];
  if (v13) {
    mlir::NamedAttrList::append(a3, (uint64_t)"window_sizes", 12, v13);
  }
  uint64_t v14 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 9), 4);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v14);
}

BOOL mlir::mps::PoolMaxGradientOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  if (v8
    && !mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v8, (const void **)"ceil_mode", (const char *)9, a3, a4))
  {
    return 0;
  }
  uint64_t v9 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
  if (v9)
  {
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v9, (const void **)"dilation_rates", (const char *)0xE, (void (*)(void **__return_ptr, uint64_t))a3, a4))return 0; {
  }
    }
  uint64_t v10 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
  if (v10)
  {
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(v10, (const void **)"explicit_padding", (const char *)0x10, (void (*)(void **__return_ptr, uint64_t))a3, a4))return 0; {
  }
    }
  uint64_t v11 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
  if (v11)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v11, (const void **)"include_zero_pad", (const char *)0x10, a3, a4))return 0; {
  }
    }
  uint64_t v12 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 32));
  if (v12)
  {
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps35(v12, (const void **)"indices_mode", (const char *)0xC, a3, a4))return 0; {
  }
    }
  uint64_t v13 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 40));
  if (v13)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v13, (const void **)"indices_result_type", (const char *)0x13, a3, a4))return 0; {
  }
    }
  uint64_t v14 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 48));
  if (v14)
  {
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(v14, (const void **)"padding_style", (const char *)0xD, a3, a4))return 0; {
  }
    }
  unint64_t v15 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 56));
  if (v15)
  {
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v15, (const void **)"strides", (const char *)7, (void (*)(void **__return_ptr, uint64_t))a3, a4))return 0; {
  }
    }
  uint64_t v16 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 64));
  return !v16
      || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v16, (const void **)"window_sizes", (const char *)0xC, (void (*)(void **__return_ptr, uint64_t))a3, a4);
}

uint64_t mlir::mps::__mlir_ods_local_attr_constraint_MPSOps35(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1
    || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id)
  {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    uint64_t v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    uint64_t v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v8 = (char *)v35;
        uint64_t v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        uint64_t v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      unint64_t v29 = a2;
      uint64_t v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        uint64_t v30 = "' failed to satisfy constraint: max pool return indices mode";
        uint64_t v31 = 60;
        uint64_t v11 = &v29;
        uint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v12 = (char *)v35;
            uint64_t v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            uint64_t v12 = (char *)v35;
          }
        }
        uint64_t v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)uint64_t v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      unint64_t v17 = v42;
      unint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          unint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        unint64_t v18 = __p;
      }
      unint64_t v42 = v16;
      operator delete(v18);
    }
    unint64_t v19 = v39;
    if (v39)
    {
      unint64_t v20 = v40;
      int v21 = v39;
      if (v40 != v39)
      {
        do
        {
          unint64_t v23 = (void *)*--v20;
          unint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        int v21 = v39;
      }
      int v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

BOOL mlir::mps::PoolMaxGradientOp::readProperties(uint64_t a1, void *a2)
{
  v10[24] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 1)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 2)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 3)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::PoolIndicesModeAttr>(a1, v3 + 4)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::TypeAttr>(a1, v3 + 5))
  {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v9 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v9)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v9) >= 5)
    {
      v7[0] = (uint64_t)"size mismatch for operand/result_segment_size";
      __int16 v8 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 16))(v10, a1, v7);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v10);
      return 0;
    }
    unint64_t v4 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v9);
    if (v5) {
      memmove(v3 + 9, v4, 4 * v5);
    }
  }
  if (mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::PaddingStyleAttr>(a1, v3 + 6)
    && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 7)
    && mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 8))
  {
    v7[0] = a1;
    v7[1] = (uint64_t)(v3 + 9);
    return mlir::mps::PoolMaxGradientOp::readProperties(mlir::DialectBytecodeReader &,mlir::OperationState &)::$_0::operator()(v7) != 0;
  }
  return 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    unint64_t v3 = operator new(0x58uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    v3[3] = 0u;
    v3[4] = 0u;
    *((void *)v3 + 10) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 116;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[113];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::PoolIndicesModeAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    __int16 v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)__int16 v8 = v9;
    ++v47;
  }
  int v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::PoolIndicesModeAttr]";
  unint64_t v41 = 80;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    int v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        unint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v19 = (char *)v46;
            unint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v18 = &v40;
            unint64_t v19 = (char *)v46;
          }
        }
        unint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)unint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    unint64_t v23 = (void **)__p;
    if (__p)
    {
      unint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          unint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      int v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = (void *)*--v27;
          unint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      unint64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::mps::PoolMaxGradientOp::readProperties(mlir::DialectBytecodeReader &,mlir::OperationState &)::$_0::operator()(uint64_t *a1)
{
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)*a1 + 40))(*a1) < 6) {
    return 1;
  }
  uint64_t v2 = *a1;
  unint64_t v3 = (_DWORD *)a1[1];

  return mlir::DialectBytecodeReader::readSparseArray<int>(v2, v3, (const char *)4);
}

uint64_t mlir::mps::PoolMaxGradientOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)v4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 8));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 16));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 24));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 32));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 40));
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) <= 5)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
    uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 72, 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 48));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 56));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(v4 + 64));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 72), 4);
  }
  return result;
}

uint64_t mlir::mps::PoolMaxGradientOp::getWindowSizes(mlir::mps::PoolMaxGradientOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(void *)(v1 + 64);
}

uint64_t mlir::mps::PoolMaxGradientOp::getStrides(mlir::mps::PoolMaxGradientOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(void *)(v1 + 56);
}

uint64_t mlir::mps::PoolMaxGradientOp::getIndicesResultType(mlir::mps::PoolMaxGradientOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 40);
  if (v3) {
    return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
  }
  else {
    return 0;
  }
}

void mlir::mps::PoolMaxGradientOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11, char a12, char a13, unsigned int a14, uint64_t a15)
{
  v51[2] = *MEMORY[0x1E4F143B8];
  uint64_t v44 = a4;
  uint64_t v45 = a3;
  uint64_t v42 = a6;
  uint64_t v43 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v45, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v44, 1);
  }
  if (a5) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v43, 1);
  }
  if (a6)
  {
    mlir::OperationState::addOperands(a2, (uint64_t)&v42, 1);
    BOOL v21 = v42 != 0;
  }
  else
  {
    BOOL v21 = 0;
  }
  BOOL v22 = v44 != 0;
  BOOL v23 = v43 != 0;
  unint64_t v24 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>((void *)a2);
  v24[18] = 1;
  v24[19] = v22;
  v24[20] = v23;
  v24[21] = v21;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 64) = a7;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 56) = a8;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = a9;
  unint64_t v25 = *a1;
  unsigned int v46 = a10;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v25);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id;
  uint64_t v50 = (uint64_t)v25;
  uint64_t v27 = mlir::StorageUniquer::get<mlir::mps::detail::PaddingStyleAttrStorage,mlir::mps::PaddingStyle>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23PaddingStyleAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16PaddingStyleAttrEJNS2_12PaddingStyleEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id, &v46);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 48) = v27;
  if (a11) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 16) = a11;
  if (a12)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v28);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  if (a13)
  {
    uint64_t v30 = mlir::Builder::getUnitAttr(a1, v28);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>((void *)a2)
              + 24) = v30;
  }
  uint64_t v31 = *a1;
  unsigned int v46 = a14;
  unint64_t v32 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v31);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id;
  uint64_t v50 = (uint64_t)v31;
  uint64_t v33 = mlir::StorageUniquer::get<mlir::mps::detail::PoolIndicesModeAttrStorage,mlir::mps::PoolIndicesMode>(v32, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26PoolIndicesModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19PoolIndicesModeAttrEJNS2_15PoolIndicesModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id, &v46);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 32) = v33;
  if (a15) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 40) = a15;
  __src = v51;
  uint64_t v50 = 0x200000000;
  mlir::ValueRange::ValueRange(v48, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  int64_t v35 = mlir::ValueRange::ValueRange(&v47, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::inferPool4DGradientOpReturnTypes((uint64_t)v35, v36, v48[0], v48[1], (uint64_t)&__src)) {
    llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  }
  int64_t v37 = __src;
  uint64_t v38 = v50;
  uint64_t v39 = *(unsigned int *)(a2 + 72);
  unint64_t v40 = v39 + v50;
  if (v40 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v40, 8);
    LODWORD(v39) = *(_DWORD *)(a2 + 72);
  }
  if (v38)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v39), v37, 8 * v38);
    LODWORD(v39) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v39 + v38;
  if (__src != v51) {
    free(__src);
  }
}

mlir::MLIRContext *mlir::mps::PoolMaxGradientOp::populateDefaultProperties(uint64_t a1, void *a2)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v17 = *(void *)(a1 + 8);
  uint64_t result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v16 = result;
  if (a2[7])
  {
    if (a2[1]) {
      goto LABEL_3;
    }
  }
  else
  {
    v19[0] = 4;
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)&v16, 0x40u, 0);
    int v5 = (void *)mlir::RankedTensorType::get((uint64_t)v19, 1, IntegerType, 0);
    uint64_t v6 = v5;
    if (v5) {
      uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    long long v17 = xmmword_181119FA8;
    long long v18 = unk_181119FB8;
    uint64_t result = (mlir::MLIRContext *)mlir::DenseElementsAttr::getFromRawBuffer(v6, v7, &v17, 32, 8, 1, 0);
    a2[7] = result;
    if (a2[1])
    {
LABEL_3:
      if (a2[6]) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  v19[0] = 4;
  uint64_t v8 = mlir::Builder::getIntegerType((mlir::Builder *)&v16, 0x40u, 0);
  long long v9 = (void *)mlir::RankedTensorType::get((uint64_t)v19, 1, v8, 0);
  unint64_t v10 = v9;
  if (v9) {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  long long v17 = xmmword_181119FA8;
  long long v18 = unk_181119FB8;
  uint64_t result = (mlir::MLIRContext *)mlir::DenseElementsAttr::getFromRawBuffer(v10, v11, &v17, 32, 8, 1, 0);
  a2[1] = result;
  if (a2[6])
  {
LABEL_4:
    if (a2[4]) {
      return result;
    }
LABEL_15:
    unint64_t v14 = v16;
    LODWORD(v19[0]) = 0;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v16);
    *(void *)&long long v17 = &mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id;
    *((void *)&v17 + 1) = v14;
    uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::PoolIndicesModeAttrStorage,mlir::mps::PoolIndicesMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26PoolIndicesModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19PoolIndicesModeAttrEJNS2_15PoolIndicesModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v17, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id, (unsigned int *)v19);
    a2[4] = result;
    return result;
  }
LABEL_14:
  uint64_t v12 = v16;
  LODWORD(v19[0]) = 2;
  unint64_t v13 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v16);
  *(void *)&long long v17 = &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id;
  *((void *)&v17 + 1) = v12;
  uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::PaddingStyleAttrStorage,mlir::mps::PaddingStyle>(v13, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23PaddingStyleAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16PaddingStyleAttrEJNS2_12PaddingStyleEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v17, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id, (unsigned int *)v19);
  a2[6] = result;
  if (!a2[4]) {
    goto LABEL_15;
  }
  return result;
}

BOOL mlir::mps::PoolMaxGradientOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  unint64_t v4 = (const void **)v3[8];
  if (v4)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = (const void **)v3[1];
    uint64_t v8 = (const void **)v3[2];
    uint64_t v7 = v3[3];
    uint64_t v10 = v3[4];
    uint64_t v9 = v3[5];
    uint64_t v11 = v3[6];
    uint64_t v12 = (const void **)v3[7];
    v59[0] = v2;
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v4, (const void **)"window_sizes", (const char *)0xC, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v59))return 0; {
    v59[0] = *this;
    }
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v12, (const void **)"strides", (const char *)7, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v59))return 0; {
    v59[0] = *this;
    }
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v6, (const void **)"dilation_rates", (const char *)0xE, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v59))return 0; {
    v59[0] = *this;
    }
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(v11, (const void **)"padding_style", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v59))return 0; {
    v59[0] = *this;
    }
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(v8, (const void **)"explicit_padding", (const char *)0x10, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v59))return 0; {
    v59[0] = *this;
    }
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v5, (const void **)"ceil_mode", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v59))return 0; {
    v59[0] = *this;
    }
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v7, (const void **)"include_zero_pad", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v59))return 0; {
    v59[0] = *this;
    }
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps35(v10, (const void **)"indices_mode", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps35(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v59))return 0; {
    v59[0] = *this;
    }
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v9, (const void **)"indices_result_type", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v59))return 0; {
    unsigned int v56 = 0;
    }
    unint64_t v13 = *((unsigned int *)*this + 11);
    uint64_t v14 = (uint64_t)&(*this)[2 * ((v13 >> 23) & 1) + 8];
    if (!HIBYTE(*((_DWORD *)*this + 11))) {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(unsigned int *)(v14 + 72);
    if ((v13 & 0x800000) != 0)
    {
      uint64_t v16 = (*this)[9];
      if (v15) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if (v15)
      {
LABEL_18:
        uint64_t v17 = v16 + 24;
        do
        {
          long long v18 = *this;
          unint64_t v19 = *(void *)(*(void *)v17 + 8) & 0xFFFFFFFFFFFFFFF8;
          unsigned int v20 = v56++;
          if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v18, v19, (const void **)"operand", (const void **)7, v20))return 0; {
          v17 += 32;
          }
        }
        while (--v15);
      }
    }
    uint64_t ODSOperands = mlir::mps::PoolMaxGradientOp::getODSOperands((mlir::mps::PoolMaxGradientOp *)this, 1u);
    uint64_t v23 = v22;
    if (v22 >= 2) {
      goto LABEL_28;
    }
    if (v22)
    {
      uint64_t v24 = *(void *)(ODSOperands + 24);
      unint64_t v25 = *this;
      unint64_t v26 = *(void *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v27 = v56++;
      if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v25, v26, (const void **)"operand", (const void **)7, v27))return 0; {
    }
      }
    uint64_t v28 = mlir::mps::PoolMaxGradientOp::getODSOperands((mlir::mps::PoolMaxGradientOp *)this, 2u);
    uint64_t v23 = v29;
    if (v29 >= 2)
    {
LABEL_28:
      v57[0] = (const void **)"operand group starting at #";
      __int16 v58 = 259;
      mlir::OpState::emitOpError(this, v57, (uint64_t)v59);
      uint64_t v36 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)v59, &v56);
      uint64_t v37 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v36, " requires 0 or 1 element, but found ");
      uint64_t v55 = v23;
      uint64_t v38 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v37, &v55);
      uint64_t v39 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v38);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v59);
      return v39;
    }
    if (v29)
    {
      uint64_t v30 = *(void *)(v28 + 24);
      uint64_t v31 = *this;
      unint64_t v32 = *(void *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v33 = v56++;
      if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v31, v32, (const void **)"operand", (const void **)7, v33))return 0; {
    }
      }
    uint64_t v34 = mlir::mps::PoolMaxGradientOp::getODSOperands((mlir::mps::PoolMaxGradientOp *)this, 3u);
    uint64_t v23 = v35;
    if (v35 >= 2) {
      goto LABEL_28;
    }
    if (v35)
    {
      uint64_t v48 = *(void *)(v34 + 24);
      int v49 = *this;
      unint64_t v50 = *(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v51 = v56++;
      if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v49, v50, (const void **)"operand", (const void **)7, v51))return 0; {
    }
      }
    if (*((_DWORD *)*this + 9)) {
      uint64_t v52 = (uint64_t)(*this - 2);
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v52, 0);
    return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
  }
  else
  {
    v57[0] = (const void **)"requires attribute 'window_sizes'";
    __int16 v58 = 259;
    mlir::OpState::emitOpError(this, v57, (uint64_t)v59);
    uint64_t v39 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v59);
    if (v59[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (v66)
    {
      unint64_t v40 = (void **)__p;
      if (__p)
      {
        unint64_t v41 = v65;
        uint64_t v42 = __p;
        if (v65 != __p)
        {
          do
            unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
          while (v41 != v40);
          uint64_t v42 = __p;
        }
        unint64_t v65 = v40;
        operator delete(v42);
      }
      uint64_t v43 = v62;
      if (v62)
      {
        uint64_t v44 = v63;
        uint64_t v45 = v62;
        if (v63 != v62)
        {
          do
          {
            unint64_t v47 = (void *)*--v44;
            unsigned int v46 = v47;
            *uint64_t v44 = 0;
            if (v47) {
              operator delete[](v46);
            }
          }
          while (v44 != v43);
          uint64_t v45 = v62;
        }
        unint64_t v63 = v43;
        operator delete(v45);
      }
      if (v60 != &v61) {
        free(v60);
      }
    }
  }
  return v39;
}

uint64_t mlir::mps::PoolMaxGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.pooling_max_gradient", 24, v2, v3, 0, 0);
  void *v4 = &unk_1EC9811A8;
  v4[12] = mlir::mps::PoolMaxGradientOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::PoolMaxOpGenericAdaptorBase::PoolMaxOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * ((v4 >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v13, v7, v6);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  long long v8 = *(_OWORD *)(v5 + 16);
  long long v9 = *(_OWORD *)(v5 + 32);
  long long v10 = *(_OWORD *)(v5 + 48);
  *(void *)(a1 + 88) = *(void *)(v5 + 64);
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)v13;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.pooling_max", 15, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::PoolMaxOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v75 = v6;
  if (!v6)
  {
    a3(v79, a4);
    if (v79[0])
    {
      LODWORD(v76) = 3;
      uint64_t v77 = "expected DictionaryAttr to set properties";
      uint64_t v78 = 41;
      unint64_t v26 = &v76;
      unsigned int v27 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v65 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v70 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
          unsigned int v27 = (char *)v80;
          unint64_t v26 = (uint64_t *)((char *)v80 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
          unint64_t v26 = &v76;
          unsigned int v27 = (char *)v80;
        }
      }
      uint64_t v28 = &v27[24 * v81];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)uint64_t v28 = v29;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v87;
      unint64_t v32 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      unint64_t v87 = v30;
      operator delete(v32);
    }
    BOOL v21 = v84;
    if (!v84) {
      goto LABEL_71;
    }
    unsigned int v33 = v85;
    uint64_t v23 = v84;
    if (v85 == v84)
    {
LABEL_70:
      unint64_t v85 = v21;
      operator delete(v23);
LABEL_71:
      if (v80 != v83) {
        free(v80);
      }
      return 0;
    }
    do
    {
      unint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *unsigned int v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_69;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v75, "ceil_mode", 9uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v79, a4);
      if (v79[0])
      {
        LODWORD(v76) = 3;
        uint64_t v78 = 54;
        long long v10 = &v76;
        uint64_t v11 = (char *)v80;
        if (v81 >= v82)
        {
          unint64_t v66 = v81 + 1;
          if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
          {
            int64_t v71 = (char *)&v76 - (unsigned char *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
            uint64_t v11 = (char *)v80;
            long long v10 = (uint64_t *)((char *)v80 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
            long long v10 = &v76;
            uint64_t v11 = (char *)v80;
          }
        }
        uint64_t v12 = &v11[24 * v81];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)uint64_t v12 = v13;
        ++v81;
        if (v79[0])
        {
          uint64_t v14 = &v76;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v9);
          uint64_t v15 = (char *)v80;
          if (v81 >= v82)
          {
            unint64_t v67 = v81 + 1;
            if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
            {
              int64_t v72 = (char *)&v76 - (unsigned char *)v80;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
              uint64_t v15 = (char *)v80;
              uint64_t v14 = (uint64_t *)((char *)v80 + v72);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
              uint64_t v14 = &v76;
              uint64_t v15 = (char *)v80;
            }
          }
          uint64_t v16 = &v15[24 * v81];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)uint64_t v16 = v17;
          ++v81;
          if (v79[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
          }
        }
      }
      if (!v88) {
        return 0;
      }
      long long v18 = (void **)__p;
      if (__p)
      {
        unint64_t v19 = v87;
        unsigned int v20 = __p;
        if (v87 != __p)
        {
          do
            unint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          unsigned int v20 = __p;
        }
        unint64_t v87 = v18;
        operator delete(v20);
      }
      BOOL v21 = v84;
      if (!v84) {
        goto LABEL_71;
      }
      unint64_t v22 = v85;
      uint64_t v23 = v84;
      if (v85 == v84) {
        goto LABEL_70;
      }
      do
      {
        unint64_t v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *unint64_t v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_69;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v75, "dilation_rates", 0xEuLL);
  if (v36)
  {
    uint64_t v37 = v36;
    if (mlir::DenseIntElementsAttr::classof(v36))
    {
      a1[1] = v37;
      goto LABEL_45;
    }
    a3(v79, a4);
    if (v79[0])
    {
      LODWORD(v76) = 3;
      uint64_t v78 = 59;
      uint64_t v42 = &v76;
      uint64_t v43 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v68 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v73 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          uint64_t v43 = (char *)v80;
          uint64_t v42 = (uint64_t *)((char *)v80 + v73);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          uint64_t v42 = &v76;
          uint64_t v43 = (char *)v80;
        }
      }
      uint64_t v44 = &v43[24 * v81];
      long long v45 = *(_OWORD *)v42;
      *((void *)v44 + 2) = v42[2];
      *(_OWORD *)uint64_t v44 = v45;
      ++v81;
      if (v79[0])
      {
        unsigned int v46 = &v76;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v37);
        unint64_t v47 = (char *)v80;
        if (v81 >= v82)
        {
          unint64_t v69 = v81 + 1;
          if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
          {
            int64_t v74 = (char *)&v76 - (unsigned char *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v69, 24);
            unint64_t v47 = (char *)v80;
            unsigned int v46 = (uint64_t *)((char *)v80 + v74);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v69, 24);
            unsigned int v46 = &v76;
            unint64_t v47 = (char *)v80;
          }
        }
        uint64_t v48 = &v47[24 * v81];
        long long v49 = *(_OWORD *)v46;
        *((void *)v48 + 2) = v46[2];
        *(_OWORD *)uint64_t v48 = v49;
        ++v81;
        if (v79[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
        }
      }
    }
    if (!v88) {
      return 0;
    }
    unint64_t v50 = (void **)__p;
    if (__p)
    {
      unsigned int v51 = v87;
      uint64_t v52 = __p;
      if (v87 != __p)
      {
        do
          unsigned int v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
        while (v51 != v50);
        uint64_t v52 = __p;
      }
      unint64_t v87 = v50;
      operator delete(v52);
    }
    BOOL v21 = v84;
    if (!v84) {
      goto LABEL_71;
    }
    int v53 = v85;
    uint64_t v23 = v84;
    if (v85 == v84) {
      goto LABEL_70;
    }
    do
    {
      uint64_t v55 = (void *)*--v53;
      char v54 = v55;
      *int v53 = 0;
      if (v55) {
        operator delete[](v54);
      }
    }
    while (v53 != v21);
LABEL_69:
    uint64_t v23 = v84;
    goto LABEL_70;
  }
LABEL_45:
  uint64_t v38 = mlir::DictionaryAttr::get((uint64_t)&v75, "explicit_padding", 0x10uLL);
  uint64_t v76 = v38;
  if (v38)
  {
    uint64_t v39 = v38;
    if (!mlir::DenseIntElementsAttr::classof(v38))
    {
      a3(v79, a4);
      goto LABEL_74;
    }
    a1[2] = v39;
  }
  uint64_t v40 = mlir::DictionaryAttr::get((uint64_t)&v75, "include_zero_pad", 0x10uLL);
  uint64_t v76 = v40;
  if (v40)
  {
    if (*(_UNKNOWN **)(*(void *)v40 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v79, a4);
      goto LABEL_74;
    }
    a1[3] = v40;
  }
  uint64_t v57 = mlir::DictionaryAttr::get((uint64_t)&v75, "indices_mode", 0xCuLL);
  uint64_t v76 = v57;
  if (v57)
  {
    if (*(_UNKNOWN **)(*(void *)v57 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id)
    {
      a3(v79, a4);
      goto LABEL_74;
    }
    a1[4] = v57;
  }
  uint64_t v58 = mlir::DictionaryAttr::get((uint64_t)&v75, "indices_result_type", 0x13uLL);
  uint64_t v76 = v58;
  if (v58)
  {
    if (*(_UNKNOWN **)(*(void *)v58 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      a3(v79, a4);
      goto LABEL_95;
    }
    a1[5] = v58;
  }
  uint64_t v59 = mlir::DictionaryAttr::get((uint64_t)&v75, "padding_style", 0xDuLL);
  uint64_t v76 = v59;
  if (v59)
  {
    if (*(_UNKNOWN **)(*(void *)v59 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id)
    {
      a3(v79, a4);
      goto LABEL_95;
    }
    a1[6] = v59;
  }
  uint64_t v60 = mlir::DictionaryAttr::get((uint64_t)&v75, "strides", 7uLL);
  uint64_t v76 = v60;
  if (v60)
  {
    uint64_t v61 = v60;
    if (!mlir::DenseIntElementsAttr::classof(v60))
    {
      a3(v79, a4);
      goto LABEL_95;
    }
    a1[7] = v61;
  }
  uint64_t v62 = mlir::DictionaryAttr::get((uint64_t)&v75, "window_sizes", 0xCuLL);
  uint64_t v76 = v62;
  if (!v62)
  {
    a3(v79, a4);
    mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v79, "expected key entry for window_sizes in DictionaryAttr to set Properties.");
    goto LABEL_96;
  }
  uint64_t v63 = v62;
  if (mlir::DenseIntElementsAttr::classof(v62))
  {
    a1[8] = v63;
    return 1;
  }
  a3(v79, a4);
LABEL_74:
  uint64_t v56 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v79, v41);
LABEL_95:
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v56, &v76);
LABEL_96:
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v79);
  return 0;
}

uint64_t mlir::mps::PoolMaxOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v63[6] = *MEMORY[0x1E4F143B8];
  uint64_t v60 = a1;
  uint64_t v61 = v63;
  uint64_t v62 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v60, (uint64_t)"ceil_mode", 9, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v62;
  if (v62 >= HIDWORD(v62))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 16);
    unsigned int v6 = v62;
  }
  uint64_t v7 = (uint64_t *)((char *)v61 + 16 * v6);
  *uint64_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v62 + 1;
  LODWORD(v62) = v62 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v60, (uint64_t)"dilation_rates", 14, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v62;
    if (v62 >= HIDWORD(v62))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 16);
      unsigned int v13 = v62;
    }
    uint64_t v14 = (uint64_t *)((char *)v61 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v62 + 1;
    LODWORD(v62) = v62 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v60, (uint64_t)"explicit_padding", 16, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v62;
    if (v62 >= HIDWORD(v62))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 16);
      unsigned int v19 = v62;
    }
    unsigned int v20 = (uint64_t *)((char *)v61 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v62 + 1;
    LODWORD(v62) = v62 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v60, (uint64_t)"include_zero_pad", 16, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v62;
    if (v62 >= HIDWORD(v62))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 16);
      unsigned int v25 = v62;
    }
    unint64_t v26 = (uint64_t *)((char *)v61 + 16 * v25);
    uint64_t *v26 = v22;
    v26[1] = v24;
    unsigned int v8 = v62 + 1;
    LODWORD(v62) = v62 + 1;
  }
  uint64_t v27 = a2[4];
  if (v27)
  {
    uint64_t v28 = mlir::Builder::getNamedAttr(&v60, (uint64_t)"indices_mode", 12, v27);
    uint64_t v30 = v29;
    unsigned int v31 = v62;
    if (v62 >= HIDWORD(v62))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 16);
      unsigned int v31 = v62;
    }
    unint64_t v32 = (uint64_t *)((char *)v61 + 16 * v31);
    *unint64_t v32 = v28;
    v32[1] = v30;
    unsigned int v8 = v62 + 1;
    LODWORD(v62) = v62 + 1;
  }
  uint64_t v33 = a2[5];
  if (v33)
  {
    uint64_t v34 = mlir::Builder::getNamedAttr(&v60, (uint64_t)"indices_result_type", 19, v33);
    uint64_t v36 = v35;
    unsigned int v37 = v62;
    if (v62 >= HIDWORD(v62))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 16);
      unsigned int v37 = v62;
    }
    uint64_t v38 = (uint64_t *)((char *)v61 + 16 * v37);
    *uint64_t v38 = v34;
    v38[1] = v36;
    unsigned int v8 = v62 + 1;
    LODWORD(v62) = v62 + 1;
  }
  uint64_t v39 = a2[6];
  if (v39)
  {
    uint64_t v40 = mlir::Builder::getNamedAttr(&v60, (uint64_t)"padding_style", 13, v39);
    uint64_t v42 = v41;
    unsigned int v43 = v62;
    if (v62 >= HIDWORD(v62))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 16);
      unsigned int v43 = v62;
    }
    uint64_t v44 = (uint64_t *)((char *)v61 + 16 * v43);
    *uint64_t v44 = v40;
    v44[1] = v42;
    unsigned int v8 = v62 + 1;
    LODWORD(v62) = v62 + 1;
  }
  uint64_t v45 = a2[7];
  if (v45)
  {
    uint64_t v46 = mlir::Builder::getNamedAttr(&v60, (uint64_t)"strides", 7, v45);
    uint64_t v48 = v47;
    unsigned int v49 = v62;
    if (v62 >= HIDWORD(v62))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 16);
      unsigned int v49 = v62;
    }
    unint64_t v50 = (uint64_t *)((char *)v61 + 16 * v49);
    uint64_t *v50 = v46;
    v50[1] = v48;
    unsigned int v8 = v62 + 1;
    LODWORD(v62) = v62 + 1;
  }
  uint64_t v51 = a2[8];
  if (v51)
  {
    uint64_t v52 = mlir::Builder::getNamedAttr(&v60, (uint64_t)"window_sizes", 12, v51);
    uint64_t v54 = v53;
    unsigned int v55 = v62;
    if (v62 >= HIDWORD(v62))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 16);
      unsigned int v55 = v62;
    }
    uint64_t v56 = (uint64_t *)((char *)v61 + 16 * v55);
    *uint64_t v56 = v52;
    v56[1] = v54;
    unsigned int v8 = v62 + 1;
    LODWORD(v62) = v62 + 1;
  }
  uint64_t v57 = v61;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v61 == v63) {
      return DictionaryAttr;
    }
    goto LABEL_40;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v60, (uint64_t *)v61, v8);
  uint64_t v57 = v61;
  if (v61 != v63) {
LABEL_40:
  }
    free(v57);
  return DictionaryAttr;
}

unint64_t mlir::mps::PoolMaxOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = 0x1E8EB8000uLL;
  {
    unint64_t v56 = v1;
    unint64_t v64 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v31 = v30;
    unint64_t v1 = v56;
    a1 = v64;
    if (v31)
    {
      unint64_t v32 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v32 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v32;
      unint64_t v1 = v56;
      a1 = v64;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v3 = HIDWORD(v1);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v1) ^ HIDWORD(v1));
  unint64_t v81 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v5 = a1[1];
  {
    unint64_t v57 = v5;
    unint64_t v65 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v34 = v33;
    unint64_t v5 = v57;
    a1 = v65;
    if (v34)
    {
      unint64_t v35 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v35 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v35;
      unint64_t v5 = v57;
      a1 = v65;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v5) ^ HIDWORD(v5));
  unint64_t v80 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v8 = a1[2];
  {
    unint64_t v58 = v8;
    unint64_t v66 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v37 = v36;
    unint64_t v8 = v58;
    a1 = v66;
    if (v37)
    {
      unint64_t v38 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v38 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v38;
      unint64_t v8 = v58;
      a1 = v66;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v9 = HIDWORD(v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v8) ^ HIDWORD(v8));
  unint64_t v79 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  unint64_t v11 = a1[3];
  {
    unint64_t v59 = v11;
    unint64_t v67 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v40 = v39;
    unint64_t v11 = v59;
    a1 = v67;
    if (v40)
    {
      unint64_t v41 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v41 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v41;
      unint64_t v11 = v59;
      a1 = v67;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v12 = HIDWORD(v11);
  unint64_t v13 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v11) ^ HIDWORD(v11));
  unint64_t v78 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) >> 47));
  unint64_t v14 = a1[4];
  {
    unint64_t v60 = v14;
    unint64_t v68 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v43 = v42;
    unint64_t v14 = v60;
    a1 = v68;
    if (v43)
    {
      unint64_t v44 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v44 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v44;
      unint64_t v14 = v60;
      a1 = v68;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v15 = HIDWORD(v14);
  unint64_t v16 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v14) ^ HIDWORD(v14));
  unint64_t v77 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v15 ^ (v16 >> 47) ^ v16)) ^ ((0x9DDFEA08EB382D69 * (v15 ^ (v16 >> 47) ^ v16)) >> 47));
  unint64_t v17 = a1[5];
  {
    unint64_t v61 = v17;
    unint64_t v69 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v46 = v45;
    unint64_t v17 = v61;
    a1 = v69;
    if (v46)
    {
      unint64_t v47 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v47 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v47;
      unint64_t v17 = v61;
      a1 = v69;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v18 = HIDWORD(v17);
  unint64_t v19 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v17) ^ HIDWORD(v17));
  unint64_t v76 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v18 ^ (v19 >> 47) ^ v19)) ^ ((0x9DDFEA08EB382D69 * (v18 ^ (v19 >> 47) ^ v19)) >> 47));
  unint64_t v20 = a1[6];
  {
    unint64_t v62 = v20;
    int64_t v70 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v49 = v48;
    unint64_t v20 = v62;
    a1 = v70;
    if (v49)
    {
      unint64_t v50 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v50 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v50;
      unint64_t v20 = v62;
      a1 = v70;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v21 = HIDWORD(v20);
  unint64_t v22 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v20) ^ HIDWORD(v20));
  unint64_t v75 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  unint64_t v23 = a1[7];
  {
    unint64_t v63 = v23;
    int64_t v71 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v52 = v51;
    unint64_t v23 = v63;
    a1 = v71;
    if (v52)
    {
      unint64_t v53 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v53 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v53;
      unint64_t v23 = v63;
      a1 = v71;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v24 = HIDWORD(v23);
  unint64_t v25 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v23) ^ HIDWORD(v23));
  unint64_t v74 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v24 ^ (v25 >> 47) ^ v25)) ^ ((0x9DDFEA08EB382D69 * (v24 ^ (v25 >> 47) ^ v25)) >> 47));
  unint64_t v26 = a1[8];
  {
    unint64_t v72 = v26;
    unint64_t v26 = v72;
    unint64_t v2 = 0x1E8EB8000uLL;
    if (v54)
    {
      unint64_t v55 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v55 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v55;
      unint64_t v26 = v72;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v27 = HIDWORD(v26);
  unint64_t v28 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v26) ^ HIDWORD(v26));
  unint64_t v73 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v27 ^ (v28 >> 47) ^ v28)) ^ ((0x9DDFEA08EB382D69 * (v27 ^ (v28 >> 47) ^ v28)) >> 47));
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v81, (uint64_t *)&v80, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, (uint64_t *)&v73);
}

unint64_t llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v27 = 0;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  {
    unint64_t v21 = a2;
    unint64_t v22 = a1;
    a2 = v21;
    a1 = v22;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      a2 = v21;
      a1 = v22;
    }
  }
  uint64_t v15 = *a1;
  uint64_t v28 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v25[0] = v15;
  unint64_t v23 = 0;
  unint64_t v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v25, (uint64_t *)&v23, (void *)v25 + 1, (unint64_t)v26, *a2);
  unint64_t v24 = v23;
  unint64_t v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v25, (uint64_t *)&v24, v16, (unint64_t)v26, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v25, v24, v17, (char *)v26, a4, a5, a6, a7, a8, a9);
}

uint64_t mlir::mps::PoolMaxOp::getInherentAttr(int a1, void *a2, void *__s1, size_t __n)
{
  switch(__n)
  {
    case 7uLL:
      if (memcmp(__s1, "strides", __n)) {
        return 0;
      }
      return a2[7];
    case 8uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
      return 0;
    case 9uLL:
      if (*__s1 != 0x646F6D5F6C696563 || *((unsigned char *)__s1 + 8) != 101) {
        return 0;
      }
      return *a2;
    case 0xCuLL:
      if (!memcmp(__s1, "indices_mode", __n)) {
        return a2[4];
      }
      if (memcmp(__s1, "window_sizes", __n)) {
        return 0;
      }
      return a2[8];
    case 0xDuLL:
      if (memcmp(__s1, "padding_style", __n)) {
        return 0;
      }
      return a2[6];
    case 0xEuLL:
      if (memcmp(__s1, "dilation_rates", __n)) {
        return 0;
      }
      return a2[1];
    case 0x10uLL:
      if (!memcmp(__s1, "explicit_padding", __n)) {
        return a2[2];
      }
      if (*__s1 != 0x5F6564756C636E69 || __s1[1] != 0x6461705F6F72657ALL) {
        return 0;
      }
      return a2[3];
    case 0x13uLL:
      if (memcmp(__s1, "indices_result_type", __n)) {
        return 0;
      }
      return a2[5];
    default:
      return 0;
  }
}

uint64_t mlir::mps::PoolMaxOp::setInherentAttr(uint64_t result, void *__s1, size_t __n, uint64_t a4)
{
  unint64_t v7 = (void *)result;
  switch(__n)
  {
    case 7uLL:
      uint64_t result = memcmp(__s1, "strides", __n);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v16 = a4;
          }
          else {
            uint64_t v16 = 0;
          }
          v7[7] = v16;
        }
        else
        {
          v7[7] = 0;
        }
      }
      break;
    case 9uLL:
      if (*__s1 == 0x646F6D5F6C696563 && *((unsigned char *)__s1 + 8) == 101)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v9 = a4;
          }
          else {
            uint64_t v9 = 0;
          }
          *(void *)uint64_t result = v9;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xCuLL:
      uint64_t result = memcmp(__s1, "indices_mode", __n);
      if (result)
      {
        uint64_t result = memcmp(__s1, "window_sizes", __n);
        if (!result)
        {
          if (a4)
          {
            uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
            if (result) {
              uint64_t v10 = a4;
            }
            else {
              uint64_t v10 = 0;
            }
            v7[8] = v10;
          }
          else
          {
            v7[8] = 0;
          }
        }
      }
      else if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id) {
          uint64_t v17 = a4;
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v7[4] = v17;
      }
      else
      {
        uint64_t v7[4] = 0;
      }
      break;
    case 0xDuLL:
      uint64_t result = memcmp(__s1, "padding_style", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id) {
            uint64_t v11 = a4;
          }
          else {
            uint64_t v11 = 0;
          }
          v7[6] = v11;
        }
        else
        {
          v7[6] = 0;
        }
      }
      break;
    case 0xEuLL:
      uint64_t result = memcmp(__s1, "dilation_rates", __n);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v12 = a4;
          }
          else {
            uint64_t v12 = 0;
          }
          v7[1] = v12;
        }
        else
        {
          v7[1] = 0;
        }
      }
      break;
    case 0x10uLL:
      uint64_t result = memcmp(__s1, "explicit_padding", __n);
      if (result)
      {
        if (*__s1 == 0x5F6564756C636E69 && __s1[1] == 0x6461705F6F72657ALL)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
              uint64_t v14 = a4;
            }
            else {
              uint64_t v14 = 0;
            }
            v7[3] = v14;
          }
          else
          {
            v7[3] = 0;
          }
        }
      }
      else if (a4)
      {
        uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
        if (result) {
          uint64_t v18 = a4;
        }
        else {
          uint64_t v18 = 0;
        }
        v7[2] = v18;
      }
      else
      {
        v7[2] = 0;
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "indices_result_type", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
            uint64_t v15 = a4;
          }
          else {
            uint64_t v15 = 0;
          }
          v7[5] = v15;
        }
        else
        {
          v7[5] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::mps::PoolMaxOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"ceil_mode", 9, *a2);
  }
  uint64_t v5 = a2[1];
  if (v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"dilation_rates", 14, v5);
  }
  uint64_t v6 = a2[2];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"explicit_padding", 16, v6);
  }
  uint64_t v7 = a2[3];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"include_zero_pad", 16, v7);
  }
  uint64_t v8 = a2[4];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"indices_mode", 12, v8);
  }
  uint64_t v9 = a2[5];
  if (v9) {
    mlir::NamedAttrList::append(a3, (uint64_t)"indices_result_type", 19, v9);
  }
  uint64_t v10 = a2[6];
  if (v10) {
    mlir::NamedAttrList::append(a3, (uint64_t)"padding_style", 13, v10);
  }
  uint64_t v11 = a2[7];
  if (v11) {
    mlir::NamedAttrList::append(a3, (uint64_t)"strides", 7, v11);
  }
  uint64_t v12 = a2[8];
  if (v12)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"window_sizes", 12, v12);
  }
}

BOOL mlir::mps::PoolMaxOp::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::PoolIndicesModeAttr>(a1, v3 + 4)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::TypeAttr>(a1, v3 + 5)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::PaddingStyleAttr>(a1, v3 + 6)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 7)
      && mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 8) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    unint64_t v3 = operator new(0x48uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    v3[3] = 0u;
    *((void *)v3 + 8) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = 0x1E8EB8000uLL;
    {
      unint64_t v4 = 0x1E8EB8000;
      if (v5)
      {
        unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 108;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = 0x1E8EB8000;
      }
    }
    a1[33] = *(void *)(v4 + 1992);
    return a1[32];
  }
  return result;
}

void mlir::mps::PoolMaxOp::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, char a9, char a10)
{
  uint64_t v18 = mlir::IntegerType::get(*a1, 0x20u, 1u);
  uint64_t v19 = mlir::TypeAttr::get(v18);
  mlir::mps::PoolMaxOp::build((mlir::UnitAttr **)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0, v19);
}

void mlir::mps::PoolMaxOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, char a9, char a10, unsigned int a11, uint64_t a12)
{
  v45[2] = *MEMORY[0x1E4F143B8];
  uint64_t v39 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v39, 1);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>((void *)a2)
            + 64) = a4;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>((void *)a2)
            + 56) = a5;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = a6;
  uint64_t v19 = *a1;
  unsigned int v40 = a7;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v19);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id;
  uint64_t v44 = (uint64_t)v19;
  uint64_t v21 = mlir::StorageUniquer::get<mlir::mps::detail::PaddingStyleAttrStorage,mlir::mps::PaddingStyle>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23PaddingStyleAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16PaddingStyleAttrEJNS2_12PaddingStyleEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id, &v40);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>((void *)a2)
            + 48) = v21;
  if (a8) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 16) = a8;
  if (a9)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v22);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  if (a10)
  {
    uint64_t v24 = mlir::Builder::getUnitAttr(a1, v22);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>((void *)a2)
              + 24) = v24;
  }
  unint64_t v25 = *a1;
  unsigned int v40 = a11;
  unint64_t v26 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v25);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id;
  uint64_t v44 = (uint64_t)v25;
  uint64_t v27 = mlir::StorageUniquer::get<mlir::mps::detail::PoolIndicesModeAttrStorage,mlir::mps::PoolIndicesMode>(v26, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26PoolIndicesModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19PoolIndicesModeAttrEJNS2_15PoolIndicesModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id, &v40);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>((void *)a2)
            + 32) = v27;
  if (a12) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 40) = a12;
  __src = v45;
  uint64_t v44 = 0x200000000;
  uint64_t v28 = *a1;
  mlir::ValueRange::ValueRange(v42, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  int v31 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange((unint64_t *)&v41, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::PoolMaxOp::inferReturnTypes(v28, v32, v33, v42[0], v42[1], Dictionary, v31, v34, v41, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v35 = __src;
  }
  uint64_t v36 = v44;
  uint64_t v37 = *(unsigned int *)(a2 + 72);
  unint64_t v38 = v37 + v44;
  if (v38 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v38, 8);
    LODWORD(v37) = *(_DWORD *)(a2 + 72);
  }
  if (v36)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v37), v35, 8 * v36);
    LODWORD(v37) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v37 + v36;
  if (__src != v45) {
    free(__src);
  }
}

BOOL mlir::mps::PoolMaxOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = (const void **)v3[8];
  if (v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = (const void **)v3[1];
    uint64_t v8 = (const void **)v3[2];
    uint64_t v7 = v3[3];
    uint64_t v10 = v3[4];
    uint64_t v9 = v3[5];
    uint64_t v11 = v3[6];
    uint64_t v12 = (const void **)v3[7];
    v30[0] = v2;
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v4, (const void **)"window_sizes", (const char *)0xC, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
    v30[0] = *this;
    }
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v12, (const void **)"strides", (const char *)7, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
    v30[0] = *this;
    }
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v6, (const void **)"dilation_rates", (const char *)0xE, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
    v30[0] = *this;
    }
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(v11, (const void **)"padding_style", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
    v30[0] = *this;
    }
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(v8, (const void **)"explicit_padding", (const char *)0x10, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
    v30[0] = *this;
    }
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v5, (const void **)"ceil_mode", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
    v30[0] = *this;
    }
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v7, (const void **)"include_zero_pad", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
    v30[0] = *this;
    }
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps35(v10, (const void **)"indices_mode", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps35(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
    v30[0] = *this;
    }
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v9, (const void **)"indices_result_type", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      return 0;
    }
    uint64_t v13 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0);
    if (mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v15 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 1);
      uint64_t v17 = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps24(*this, *(void *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 1u) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v28 = (const void **)"requires attribute 'window_sizes'";
    __int16 v29 = 259;
    mlir::OpState::emitOpError(this, &v28, (uint64_t)v30);
    uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
    if (v30[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    }
    if (v37)
    {
      unint64_t v20 = (void **)__p;
      if (__p)
      {
        uint64_t v21 = v36;
        unint64_t v22 = __p;
        if (v36 != __p)
        {
          do
            uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          unint64_t v22 = __p;
        }
        uint64_t v36 = v20;
        operator delete(v22);
      }
      unint64_t v23 = v33;
      if (v33)
      {
        uint64_t v24 = v34;
        unint64_t v25 = v33;
        if (v34 != v33)
        {
          do
          {
            uint64_t v27 = (void *)*--v24;
            unint64_t v26 = v27;
            *uint64_t v24 = 0;
            if (v27) {
              operator delete[](v26);
            }
          }
          while (v24 != v23);
          unint64_t v25 = v33;
        }
        int v34 = v23;
        operator delete(v25);
      }
      if (v31 != &v32) {
        free(v31);
      }
    }
  }
  return v18;
}

uint64_t mlir::mps::PoolMaxOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.pooling_max", 15, v2, v3, 0, 0);
  void *v4 = &unk_1EC983AE8;
  v4[12] = mlir::mps::PoolMaxOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::PowerOpGenericAdaptorBase::PowerOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.power", 9, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::PowerOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.power", 9, v2, v3, 0, 0);
  void *v4 = &unk_1EC983148;
  v4[12] = mlir::mps::PowerOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::PruningGradientOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v65 = v6;
  if (!v6)
  {
    a3(v69, a4);
    if (v69[0])
    {
      LODWORD(v66) = 3;
      unint64_t v67 = "expected DictionaryAttr to set properties";
      uint64_t v68 = 41;
      unint64_t v26 = &v66;
      uint64_t v27 = (char *)v70;
      if (v71 >= v72)
      {
        unint64_t v55 = v71 + 1;
        if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
        {
          int64_t v60 = (char *)&v66 - (unsigned char *)v70;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v55, 24);
          uint64_t v27 = (char *)v70;
          unint64_t v26 = (uint64_t *)((char *)v70 + v60);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v55, 24);
          unint64_t v26 = &v66;
          uint64_t v27 = (char *)v70;
        }
      }
      uint64_t v28 = &v27[24 * v71];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)uint64_t v28 = v29;
      ++v71;
      if (v69[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v69);
      }
    }
    if (!v78) {
      return 0;
    }
    int v30 = (void **)__p;
    if (__p)
    {
      int v31 = v77;
      uint64_t v32 = __p;
      if (v77 != __p)
      {
        do
          int v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      unint64_t v77 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v74;
    if (!v74) {
      goto LABEL_64;
    }
    int v33 = v75;
    unint64_t v23 = v74;
    if (v75 == v74)
    {
LABEL_63:
      unint64_t v75 = v21;
      operator delete(v23);
LABEL_64:
      if (v70 != v73) {
        free(v70);
      }
      return 0;
    }
    do
    {
      unint64_t v35 = (void *)*--v33;
      int v34 = v35;
      *int v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_62:
    unint64_t v23 = v74;
    goto LABEL_63;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v65, "pruning_metric", 0xEuLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::PruningMetricAttr,void>::id)
    {
      a3(v69, a4);
      if (v69[0])
      {
        LODWORD(v66) = 3;
        uint64_t v68 = 59;
        uint64_t v10 = &v66;
        uint64_t v11 = (char *)v70;
        if (v71 >= v72)
        {
          unint64_t v56 = v71 + 1;
          if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
          {
            int64_t v61 = (char *)&v66 - (unsigned char *)v70;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v56, 24);
            uint64_t v11 = (char *)v70;
            uint64_t v10 = (uint64_t *)((char *)v70 + v61);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v56, 24);
            uint64_t v10 = &v66;
            uint64_t v11 = (char *)v70;
          }
        }
        uint64_t v12 = &v11[24 * v71];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)uint64_t v12 = v13;
        ++v71;
        if (v69[0])
        {
          unint64_t v14 = &v66;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v66, v9);
          uint64_t v15 = (char *)v70;
          if (v71 >= v72)
          {
            unint64_t v57 = v71 + 1;
            if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
            {
              int64_t v62 = (char *)&v66 - (unsigned char *)v70;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v57, 24);
              uint64_t v15 = (char *)v70;
              unint64_t v14 = (uint64_t *)((char *)v70 + v62);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v57, 24);
              unint64_t v14 = &v66;
              uint64_t v15 = (char *)v70;
            }
          }
          uint64_t v16 = &v15[24 * v71];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)uint64_t v16 = v17;
          ++v71;
          if (v69[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v69);
          }
        }
      }
      if (!v78) {
        return 0;
      }
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v77;
        unint64_t v20 = __p;
        if (v77 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          unint64_t v20 = __p;
        }
        unint64_t v77 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v74;
      if (!v74) {
        goto LABEL_64;
      }
      unint64_t v22 = v75;
      unint64_t v23 = v74;
      if (v75 == v74) {
        goto LABEL_63;
      }
      do
      {
        unint64_t v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *unint64_t v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_62;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v65, "pruning_structure", 0x11uLL);
  if (v36)
  {
    uint64_t v37 = v36;
    if (*(_UNKNOWN **)(*(void *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::PruningStructureAttr,void>::id)
    {
      a3(v69, a4);
      if (v69[0])
      {
        LODWORD(v66) = 3;
        uint64_t v68 = 62;
        uint64_t v38 = &v66;
        uint64_t v39 = (char *)v70;
        if (v71 >= v72)
        {
          unint64_t v58 = v71 + 1;
          if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
          {
            int64_t v63 = (char *)&v66 - (unsigned char *)v70;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v58, 24);
            uint64_t v39 = (char *)v70;
            uint64_t v38 = (uint64_t *)((char *)v70 + v63);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v58, 24);
            uint64_t v38 = &v66;
            uint64_t v39 = (char *)v70;
          }
        }
        unsigned int v40 = &v39[24 * v71];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = v38[2];
        *(_OWORD *)unsigned int v40 = v41;
        ++v71;
        if (v69[0])
        {
          int v42 = &v66;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v66, v37);
          int v43 = (char *)v70;
          if (v71 >= v72)
          {
            unint64_t v59 = v71 + 1;
            if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
            {
              int64_t v64 = (char *)&v66 - (unsigned char *)v70;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v59, 24);
              int v43 = (char *)v70;
              int v42 = (uint64_t *)((char *)v70 + v64);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v59, 24);
              int v42 = &v66;
              int v43 = (char *)v70;
            }
          }
          uint64_t v44 = &v43[24 * v71];
          long long v45 = *(_OWORD *)v42;
          *((void *)v44 + 2) = v42[2];
          *(_OWORD *)uint64_t v44 = v45;
          ++v71;
          if (v69[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v69);
          }
        }
      }
      if (!v78) {
        return 0;
      }
      int v46 = (void **)__p;
      if (__p)
      {
        unint64_t v47 = v77;
        int v48 = __p;
        if (v77 != __p)
        {
          do
            unint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          int v48 = __p;
        }
        unint64_t v77 = v46;
        operator delete(v48);
      }
      uint64_t v21 = v74;
      if (!v74) {
        goto LABEL_64;
      }
      int v49 = v75;
      unint64_t v23 = v74;
      if (v75 == v74) {
        goto LABEL_63;
      }
      do
      {
        int v51 = (void *)*--v49;
        unint64_t v50 = v51;
        void *v49 = 0;
        if (v51) {
          operator delete[](v50);
        }
      }
      while (v49 != v21);
      goto LABEL_62;
    }
    a1[1] = v36;
  }
  uint64_t v52 = mlir::DictionaryAttr::get((uint64_t)&v65, "sparsity", 8uLL);
  uint64_t v66 = v52;
  if (!v52) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)v52 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    a1[2] = v52;
    return 1;
  }
  a3(v69, a4);
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v53, &v66);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v69);
  return 0;
}

uint64_t mlir::mps::PruningGradientOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v27[6] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a1;
  unint64_t v25 = v27;
  uint64_t v26 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v24, (uint64_t)"pruning_metric", 14, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v26;
  if (v26 >= HIDWORD(v26))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
    unsigned int v6 = v26;
  }
  uint64_t v7 = (uint64_t *)((char *)v25 + 16 * v6);
  *uint64_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v26 + 1;
  LODWORD(v26) = v26 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"pruning_structure", 17, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      unsigned int v13 = v26;
    }
    unint64_t v14 = (uint64_t *)((char *)v25 + 16 * v13);
    *unint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"sparsity", 8, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      unsigned int v19 = v26;
    }
    unint64_t v20 = (uint64_t *)((char *)v25 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
  uint64_t v21 = v25;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v25 == v27) {
      return DictionaryAttr;
    }
    goto LABEL_16;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v24, (uint64_t *)v25, v8);
  uint64_t v21 = v25;
  if (v25 != v27) {
LABEL_16:
  }
    free(v21);
  return DictionaryAttr;
}

uint64_t mlir::mps::PruningGradientOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 8)
  {
    uint64_t result = memcmp(__s1, "sparsity", 8uLL);
    if (!result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
          uint64_t v7 = a4;
        }
        else {
          uint64_t v7 = 0;
        }
        *(void *)(v5 + 16) = v7;
      }
      else
      {
        *(void *)(v5 + 16) = 0;
      }
    }
  }
  else if (a3 == 17)
  {
    uint64_t result = memcmp(__s1, "pruning_structure", 0x11uLL);
    if (!result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PruningStructureAttr,void>::id) {
          uint64_t v8 = a4;
        }
        else {
          uint64_t v8 = 0;
        }
        *(void *)(v5 + 8) = v8;
      }
      else
      {
        *(void *)(v5 + 8) = 0;
      }
    }
  }
  else if (a3 == 14 && *(void *)__s1 == 0x5F676E696E757270 && *(void *)(__s1 + 6) == 0x63697274656D5F67)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PruningMetricAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      *(void *)uint64_t result = v9;
    }
    else
    {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

BOOL mlir::mps::PruningGradientOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps36(v8, (const void **)"pruning_metric", (const char *)0xE, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps37(v9, (const void **)"pruning_structure", (const char *)0x11, a3, a4))
    {
      uint64_t v10 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v10, (const void **)"sparsity", (const char *)8, a3, a4))
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t mlir::mps::__mlir_ods_local_attr_constraint_MPSOps36(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1
    || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PruningMetricAttr,void>::id)
  {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    int v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    uint64_t v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v8 = (char *)v35;
        uint64_t v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        uint64_t v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      long long v29 = a2;
      int v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        int v30 = "' failed to satisfy constraint: pruning metrics";
        uint64_t v31 = 47;
        uint64_t v11 = &v29;
        uint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v12 = (char *)v35;
            uint64_t v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            uint64_t v12 = (char *)v35;
          }
        }
        unsigned int v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)unsigned int v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      uint64_t v17 = v42;
      uint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      int v42 = v16;
      operator delete(v18);
    }
    unsigned int v19 = v39;
    if (v39)
    {
      unint64_t v20 = v40;
      uint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          unint64_t v23 = (void *)*--v20;
          unint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v39;
      }
      unsigned int v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

uint64_t mlir::mps::__mlir_ods_local_attr_constraint_MPSOps37(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1
    || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PruningStructureAttr,void>::id)
  {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    int v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    uint64_t v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v8 = (char *)v35;
        uint64_t v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        uint64_t v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      long long v29 = a2;
      int v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        int v30 = "' failed to satisfy constraint: pruning structure";
        uint64_t v31 = 49;
        uint64_t v11 = &v29;
        uint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v12 = (char *)v35;
            uint64_t v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            uint64_t v12 = (char *)v35;
          }
        }
        unsigned int v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)unsigned int v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      uint64_t v17 = v42;
      uint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      int v42 = v16;
      operator delete(v18);
    }
    unsigned int v19 = v39;
    if (v39)
    {
      unint64_t v20 = v40;
      uint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          unint64_t v23 = (void *)*--v20;
          unint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v39;
      }
      unsigned int v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x18uLL);
    v3[1] = 0;
    v3[2] = 0;
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 116;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[115];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::PruningMetricAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::PruningMetricAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PruningMetricAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  unsigned int v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::PruningMetricAttr]";
  unint64_t v41 = 78;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    unsigned int v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unsigned int v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unsigned int v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            unsigned int v19 = (char *)v46;
          }
        }
        unint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)unint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    unint64_t v23 = (void **)__p;
    if (__p)
    {
      uint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      uint64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          int v30 = (void *)*--v27;
          long long v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      int v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::PruningStructureAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::PruningStructureAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PruningStructureAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  unsigned int v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::PruningStructureAttr]";
  unint64_t v41 = 81;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    unsigned int v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unsigned int v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unsigned int v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            unsigned int v19 = (char *)v46;
          }
        }
        unint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)unint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    unint64_t v23 = (void **)__p;
    if (__p)
    {
      uint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      uint64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          int v30 = (void *)*--v27;
          long long v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      int v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

void mlir::mps::PruningGradientOp::build(mlir::Float32Type **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a4;
  uint64_t v29 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v29, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v28, 1);
  uint64_t v12 = *a1;
  v35[0] = a5;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v12);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PruningMetricAttr,void>::id;
  uint64_t v33 = (uint64_t)v12;
  uint64_t v14 = mlir::StorageUniquer::get<mlir::mps::detail::PruningMetricAttrStorage,mlir::mps::PruningMetric>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24PruningMetricAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17PruningMetricAttrEJNS2_13PruningMetricEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PruningMetricAttr,void>::id, v35);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties>((void *)a2) = v14;
  uint64_t v15 = *a1;
  v35[0] = a6;
  uint64_t v16 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v15);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PruningStructureAttr,void>::id;
  uint64_t v33 = (uint64_t)v15;
  uint64_t v17 = mlir::StorageUniquer::get<mlir::mps::detail::PruningStructureAttrStorage,mlir::mps::PruningStructure>(v16, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail27PruningStructureAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_20PruningStructureAttrEJNS2_16PruningStructureEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PruningStructureAttr,void>::id, v35);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = v17;
  uint64_t F32Type = mlir::Builder::getF32Type(a1, v18);
  uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)a1, F32Type, a7);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = FloatAttr;
  __src = v34;
  uint64_t v33 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v31, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v30, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  *(_OWORD *)int64_t v35 = v31;
  if (v33 != 1)
  {
    if (!v33)
    {
      if (HIDWORD(v33))
      {
        unsigned int v22 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v22, 8 - 8 * v22);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v34, 1uLL, 8);
      unsigned int v22 = v33;
      if (v33 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    LODWORD(v33) = 1;
  }
  uint64_t v23 = mlir::ValueRange::dereference_iterator(v35, 0);
  *(void *)__src = *(void *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = __src;
  uint64_t v25 = v33;
  uint64_t v26 = *(unsigned int *)(a2 + 72);
  unint64_t v27 = v26 + v33;
  if (v27 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v27, 8);
    LODWORD(v26) = *(_DWORD *)(a2 + 72);
  }
  if (v25)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v26), v24, 8 * v25);
    LODWORD(v26) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v26 + v25;
  if (__src != v34) {
    free(__src);
  }
}

mlir::Float32Type *mlir::mps::PruningGradientOp::populateDefaultProperties(uint64_t a1, mlir::Float32Type **a2)
{
  unint64_t v11 = *(void **)(a1 + 8);
  uint64_t result = (mlir::Float32Type *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  int v5 = result;
  long long v9 = result;
  if (*a2)
  {
    if (a2[1]) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int v10 = 0;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(result);
    unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::mps::PruningMetricAttr,void>::id;
    uint64_t v12 = v5;
    uint64_t result = (mlir::Float32Type *)mlir::StorageUniquer::get<mlir::mps::detail::PruningMetricAttrStorage,mlir::mps::PruningMetric>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24PruningMetricAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17PruningMetricAttrEJNS2_13PruningMetricEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PruningMetricAttr,void>::id, &v10);
    *a2 = result;
    if (a2[1])
    {
LABEL_3:
      if (a2[2]) {
        return result;
      }
LABEL_7:
      uint64_t F32Type = mlir::Builder::getF32Type(&v9, v4);
      uint64_t result = mlir::Builder::getFloatAttr(0.5, (uint64_t)&v9, F32Type);
      a2[2] = result;
      return result;
    }
  }
  unsigned int v10 = 1;
  unint64_t v7 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v5);
  unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::mps::PruningStructureAttr,void>::id;
  uint64_t v12 = v5;
  uint64_t result = (mlir::Float32Type *)mlir::StorageUniquer::get<mlir::mps::detail::PruningStructureAttrStorage,mlir::mps::PruningStructure>(v7, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail27PruningStructureAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_20PruningStructureAttrEJNS2_16PruningStructureEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PruningStructureAttr,void>::id, &v10);
  a2[1] = result;
  if (!a2[2]) {
    goto LABEL_7;
  }
  return result;
}

BOOL mlir::mps::PruningGradientOp::verifyInvariantsImpl(uint64_t **this)
{
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  unint64_t v6 = (const void **)v3[2];
  unsigned int v10 = v2;
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps36(v4, (const void **)"pruning_metric", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps36(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v10))return 0; {
  unsigned int v10 = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps37(v5, (const void **)"pruning_structure", (const char *)0x11, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps37(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v10))return 0; {
  unsigned int v10 = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v6, (const void **)"sparsity", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v10)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v7 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mps::PruningGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.prune_gradient", 18, v2, v3, 0, 0);
  void *v4 = &unk_1EC981200;
  v4[12] = mlir::mps::PruningGradientOp::canonicalize;
  long long v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    long long v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x18uLL);
    v3[1] = 0;
    v3[2] = 0;
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PruningOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PruningOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::PruningOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 108;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::PruningOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[117];
    return a1[32];
  }
  return result;
}

void mlir::mps::PruningOp::build(mlir::Float32Type **a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v27 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v27, 1);
  unint64_t v11 = *a1;
  v33[0] = a4;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v11);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PruningMetricAttr,void>::id;
  uint64_t v31 = (uint64_t)v11;
  uint64_t v13 = mlir::StorageUniquer::get<mlir::mps::detail::PruningMetricAttrStorage,mlir::mps::PruningMetric>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24PruningMetricAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17PruningMetricAttrEJNS2_13PruningMetricEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PruningMetricAttr,void>::id, v33);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningOpGenericAdaptorBase::Properties>((void *)a2) = v13;
  unint64_t v14 = *a1;
  v33[0] = a5;
  uint64_t v15 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v14);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PruningStructureAttr,void>::id;
  uint64_t v31 = (uint64_t)v14;
  uint64_t v16 = mlir::StorageUniquer::get<mlir::mps::detail::PruningStructureAttrStorage,mlir::mps::PruningStructure>(v15, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail27PruningStructureAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_20PruningStructureAttrEJNS2_16PruningStructureEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PruningStructureAttr,void>::id, v33);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = v16;
  uint64_t F32Type = mlir::Builder::getF32Type(a1, v17);
  uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)a1, F32Type, a6);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = FloatAttr;
  __src = v32;
  uint64_t v31 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v29, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v28, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  *(_OWORD *)uint64_t v33 = v29;
  if (v31 != 1)
  {
    if (!v31)
    {
      if (HIDWORD(v31))
      {
        unsigned int v21 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v21, 8 - 8 * v21);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v32, 1uLL, 8);
      unsigned int v21 = v31;
      if (v31 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    LODWORD(v31) = 1;
  }
  uint64_t v22 = mlir::ValueRange::dereference_iterator(v33, 0);
  *(void *)__src = *(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = __src;
  uint64_t v24 = v31;
  uint64_t v25 = *(unsigned int *)(a2 + 72);
  unint64_t v26 = v25 + v31;
  if (v26 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v26, 8);
    LODWORD(v25) = *(_DWORD *)(a2 + 72);
  }
  if (v24)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v25), v23, 8 * v24);
    LODWORD(v25) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v25 + v24;
  if (__src != v32) {
    free(__src);
  }
}

BOOL mlir::mps::PruningOp::verifyInvariantsImpl(uint64_t **this)
{
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  unint64_t v6 = (const void **)v3[2];
  uint64_t v10 = v2;
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps36(v4, (const void **)"pruning_metric", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps36(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v10))return 0; {
  uint64_t v10 = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps37(v5, (const void **)"pruning_structure", (const char *)0x11, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps37(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v10))return 0; {
  uint64_t v10 = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v6, (const void **)"sparsity", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v10)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v7 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mps::PruningOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.prune", 9, v2, v3, 0, 0);
  void *v4 = &unk_1EC983B40;
  v4[12] = mlir::mps::PruningOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::QuantizeOpGenericAdaptorBase::QuantizeOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (_OWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v11, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 40) = v8;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.quantize", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::QuantizeOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x10uLL);
    void *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::QuantizeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::QuantizeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::QuantizeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::QuantizeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::QuantizeOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 109;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        long long v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::QuantizeOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[119];
    return a1[32];
  }
  return result;
}

void mlir::mps::QuantizeOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v29[2] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = a4;
  uint64_t v24 = a3;
  uint64_t v22 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v23, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::QuantizeOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = a6;
  if (a7) {
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::QuantizeOpGenericAdaptorBase::Properties>((void *)a2) = a7;
  }
  __src = v29;
  uint64_t v28 = 0x200000000;
  unint64_t v11 = *a1;
  mlir::ValueRange::ValueRange(v26, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v14 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v25, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::QuantizeOp::inferReturnTypes(v11, v15, v16, v26[0], v26[1], Dictionary, v14, v17, v25[0], v25[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v18 = __src;
  }
  uint64_t v19 = v28;
  uint64_t v20 = *(unsigned int *)(a2 + 72);
  unint64_t v21 = v20 + v28;
  if (v21 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v21, 8);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  if (v19)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v20), v18, 8 * v19);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v20 + v19;
  if (__src != v29) {
    free(__src);
  }
}

BOOL mlir::mps::QuantizeOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4)
  {
    int v5 = *(const void ***)v3;
    BOOL v117 = v2;
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v4, (const void **)"dtype", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v117))return 0; {
    BOOL v117 = *this;
    }
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps26(v5, (const void **)"axis", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps26(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v117)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      return 0;
    }
    unint64_t v6 = *this;
    unint64_t v7 = (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (*((_UNKNOWN **)*v7 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      goto LABEL_60;
    }
    uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v7 + 8);
    BOOL v117 = v7;
    uint64_t v118 = v8;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v117)) {
      goto LABEL_60;
    }
    uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v7 + 8);
    unint64_t v108 = v7;
    uint64_t v109 = v9;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v108);
    if (v10)
    {
      uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v7 + 8);
      unint64_t v114 = v7;
      uint64_t v115 = v11;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v114);
      if (v12 != 1) {
        goto LABEL_60;
      }
    }
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v7 + 8);
    BOOL v111 = v7;
    uint64_t v112 = v13;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v111);
    if (!mlir::Type::isF16((mlir::Type *)&OperandRange)
      && !mlir::Type::isF32((mlir::Type *)&OperandRange)
      && !mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
LABEL_60:
      __int16 v110 = 261;
      unint64_t v108 = (const void **)"operand";
      uint64_t v109 = 7;
      mlir::Operation::emitOpError(v6, &v108, (uint64_t)&v117);
      if (v117)
      {
        LODWORD(v114) = 3;
        uint64_t v115 = (uint64_t)" #";
        uint64_t v116 = 2;
        unint64_t v14 = &v114;
        uint64_t v15 = (char *)v119;
        if (v120 >= v121)
        {
          unint64_t v88 = v120 + 1;
          if (v119 <= &v114 && (char *)v119 + 24 * v120 > (char *)&v114)
          {
            int64_t v100 = (char *)&v114 - (unsigned char *)v119;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v88, 24);
            uint64_t v15 = (char *)v119;
            unint64_t v14 = (const void ***)((char *)v119 + v100);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v88, 24);
            unint64_t v14 = &v114;
            uint64_t v15 = (char *)v119;
          }
        }
        int v16 = &v15[24 * v120];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = v14[2];
        *(_OWORD *)int v16 = v17;
        uint64_t v18 = ++v120;
        if (v117)
        {
          LODWORD(v114) = 5;
          uint64_t v115 = 1;
          uint64_t v19 = &v114;
          uint64_t v20 = (char *)v119;
          if (v18 >= v121)
          {
            unint64_t v90 = v18 + 1;
            BOOL v91 = (char *)v119 + 24 * v18 > (char *)&v114;
            if (v119 <= &v114 && v91)
            {
              int64_t v102 = (char *)&v114 - (unsigned char *)v119;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v90, 24);
              uint64_t v20 = (char *)v119;
              uint64_t v19 = (const void ***)((char *)v119 + v102);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v90, 24);
              uint64_t v19 = &v114;
              uint64_t v20 = (char *)v119;
            }
          }
          unint64_t v21 = &v20[24 * v120];
          long long v22 = *(_OWORD *)v19;
          *((void *)v21 + 2) = v19[2];
          *(_OWORD *)unint64_t v21 = v22;
          uint64_t v23 = ++v120;
          if (v117)
          {
            LODWORD(v114) = 3;
            uint64_t v115 = (uint64_t)" must be 0D/1D tensor of floating point values, but got ";
            uint64_t v116 = 56;
            uint64_t v24 = &v114;
            uint64_t v25 = (char *)v119;
            if (v23 >= v121)
            {
              unint64_t v94 = v23 + 1;
              BOOL v95 = (char *)v119 + 24 * v23 > (char *)&v114;
              if (v119 <= &v114 && v95)
              {
                int64_t v104 = (char *)&v114 - (unsigned char *)v119;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v94, 24);
                uint64_t v25 = (char *)v119;
                uint64_t v24 = (const void ***)((char *)v119 + v104);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v94, 24);
                uint64_t v24 = &v114;
                uint64_t v25 = (char *)v119;
              }
            }
            unint64_t v26 = &v25[24 * v120];
            long long v27 = *(_OWORD *)v24;
            *((void *)v26 + 2) = v24[2];
            *(_OWORD *)unint64_t v26 = v27;
            ++v120;
            if (v117)
            {
              uint64_t v28 = &v114;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v114, (uint64_t)v7);
              long long v29 = (char *)v119;
              if (v120 >= v121)
              {
                unint64_t v98 = v120 + 1;
                if (v119 <= &v114 && (char *)v119 + 24 * v120 > (char *)&v114)
                {
                  int64_t v106 = (char *)&v114 - (unsigned char *)v119;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v98, 24);
                  long long v29 = (char *)v119;
                  uint64_t v28 = (const void ***)((char *)v119 + v106);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v98, 24);
                  uint64_t v28 = &v114;
                  long long v29 = (char *)v119;
                }
              }
              unint64_t v30 = &v29[24 * v120];
              long long v31 = *(_OWORD *)v28;
              *((void *)v30 + 2) = v28[2];
              *(_OWORD *)unint64_t v30 = v31;
              ++v120;
            }
          }
        }
      }
      char v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v117);
      if (v117) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v117);
      }
      if (v127)
      {
        uint64_t v33 = (void **)__p;
        if (__p)
        {
          uint64_t v34 = v126;
          int64_t v35 = __p;
          if (v126 != __p)
          {
            do
              uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
            while (v34 != v33);
            int64_t v35 = __p;
          }
          int64_t v126 = v33;
          operator delete(v35);
        }
        uint64_t v36 = v123;
        if (v123)
        {
          int64_t v37 = v124;
          uint64_t v38 = v123;
          if (v124 != v123)
          {
            do
            {
              unsigned int v40 = (void *)*--v37;
              uint64_t v39 = v40;
              *int64_t v37 = 0;
              if (v40) {
                operator delete[](v39);
              }
            }
            while (v37 != v36);
            uint64_t v38 = v123;
          }
          int64_t v124 = v36;
          operator delete(v38);
        }
        if (v119 != v122) {
          free(v119);
        }
      }
      if (!v32) {
        return 0;
      }
    }
    unint64_t v50 = *this;
    int v51 = (const void **)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (*((_UNKNOWN **)*v51 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v52 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v51 + 8);
      BOOL v117 = v51;
      uint64_t v118 = v52;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v117))
      {
        uint64_t v53 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v51 + 8);
        unint64_t v108 = v51;
        uint64_t v109 = v53;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v108);
        if (!v54
          || (uint64_t v55 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v51 + 8),
              unint64_t v114 = v51,
              uint64_t v115 = v55,
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v114),
              v56 == 1))
        {
          uint64_t v57 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v51 + 8);
          BOOL v111 = v51;
          uint64_t v112 = v57;
          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v111);
          if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 2)
            || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 4)
            || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
            || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
            || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
            || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 1)
            || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 2)
            || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 4)
            || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
            || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
            || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
            || *(_UNKNOWN **)(*(void *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
          {
            goto LABEL_145;
          }
        }
      }
    }
    __int16 v110 = 261;
    unint64_t v108 = (const void **)"operand";
    uint64_t v109 = 7;
    mlir::Operation::emitOpError(v50, &v108, (uint64_t)&v117);
    if (v117)
    {
      LODWORD(v114) = 3;
      uint64_t v115 = (uint64_t)" #";
      uint64_t v116 = 2;
      unint64_t v58 = &v114;
      unint64_t v59 = (char *)v119;
      if (v120 >= v121)
      {
        unint64_t v89 = v120 + 1;
        if (v119 <= &v114 && (char *)v119 + 24 * v120 > (char *)&v114)
        {
          int64_t v101 = (char *)&v114 - (unsigned char *)v119;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v89, 24);
          unint64_t v59 = (char *)v119;
          unint64_t v58 = (const void ***)((char *)v119 + v101);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v89, 24);
          unint64_t v58 = &v114;
          unint64_t v59 = (char *)v119;
        }
      }
      int64_t v60 = &v59[24 * v120];
      long long v61 = *(_OWORD *)v58;
      *((void *)v60 + 2) = v58[2];
      *(_OWORD *)int64_t v60 = v61;
      uint64_t v62 = ++v120;
      if (v117)
      {
        LODWORD(v114) = 5;
        uint64_t v115 = 2;
        int64_t v63 = &v114;
        int64_t v64 = (char *)v119;
        if (v62 >= v121)
        {
          unint64_t v92 = v62 + 1;
          BOOL v93 = (char *)v119 + 24 * v62 > (char *)&v114;
          if (v119 <= &v114 && v93)
          {
            int64_t v103 = (char *)&v114 - (unsigned char *)v119;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v92, 24);
            int64_t v64 = (char *)v119;
            int64_t v63 = (const void ***)((char *)v119 + v103);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v92, 24);
            int64_t v63 = &v114;
            int64_t v64 = (char *)v119;
          }
        }
        uint64_t v65 = &v64[24 * v120];
        long long v66 = *(_OWORD *)v63;
        *((void *)v65 + 2) = v63[2];
        *(_OWORD *)uint64_t v65 = v66;
        uint64_t v67 = ++v120;
        if (v117)
        {
          LODWORD(v114) = 3;
          uint64_t v115 = (uint64_t)" must be 0D/1D tensor of quantized values, but got ";
          uint64_t v116 = 51;
          uint64_t v68 = &v114;
          unint64_t v69 = (char *)v119;
          if (v67 >= v121)
          {
            unint64_t v96 = v67 + 1;
            BOOL v97 = (char *)v119 + 24 * v67 > (char *)&v114;
            if (v119 <= &v114 && v97)
            {
              int64_t v105 = (char *)&v114 - (unsigned char *)v119;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v96, 24);
              unint64_t v69 = (char *)v119;
              uint64_t v68 = (const void ***)((char *)v119 + v105);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v96, 24);
              uint64_t v68 = &v114;
              unint64_t v69 = (char *)v119;
            }
          }
          int64_t v70 = &v69[24 * v120];
          long long v71 = *(_OWORD *)v68;
          *((void *)v70 + 2) = v68[2];
          *(_OWORD *)int64_t v70 = v71;
          ++v120;
          if (v117)
          {
            unsigned int v72 = &v114;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v114, (uint64_t)v51);
            unint64_t v73 = (char *)v119;
            if (v120 >= v121)
            {
              unint64_t v99 = v120 + 1;
              if (v119 <= &v114 && (char *)v119 + 24 * v120 > (char *)&v114)
              {
                int64_t v107 = (char *)&v114 - (unsigned char *)v119;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v99, 24);
                unint64_t v73 = (char *)v119;
                unsigned int v72 = (const void ***)((char *)v119 + v107);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v122, v99, 24);
                unsigned int v72 = &v114;
                unint64_t v73 = (char *)v119;
              }
            }
            unint64_t v74 = &v73[24 * v120];
            long long v75 = *(_OWORD *)v72;
            *((void *)v74 + 2) = v72[2];
            *(_OWORD *)unint64_t v74 = v75;
            ++v120;
          }
        }
      }
    }
    char v76 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v117);
    if (v117) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v117);
    }
    if (v127)
    {
      unint64_t v77 = (void **)__p;
      if (__p)
      {
        char v78 = v126;
        uint64_t v79 = __p;
        if (v126 != __p)
        {
          do
            char v78 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v78 - 1);
          while (v78 != v77);
          uint64_t v79 = __p;
        }
        int64_t v126 = v77;
        operator delete(v79);
      }
      unint64_t v80 = v123;
      if (v123)
      {
        unint64_t v81 = v124;
        unsigned int v82 = v123;
        if (v124 != v123)
        {
          do
          {
            unint64_t v84 = (void *)*--v81;
            unint64_t v83 = v84;
            *unint64_t v81 = 0;
            if (v84) {
              operator delete[](v83);
            }
          }
          while (v81 != v80);
          unsigned int v82 = v123;
        }
        int64_t v124 = v80;
        operator delete(v82);
      }
      if (v119 != v122) {
        free(v119);
      }
    }
    if (v76)
    {
LABEL_145:
      if (*((_DWORD *)*this + 9)) {
        uint64_t v85 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v85 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v85, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unint64_t v108 = (const void **)"requires attribute 'dtype'";
    __int16 v110 = 259;
    mlir::OpState::emitOpError(this, &v108, (uint64_t)&v117);
    uint64_t v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v117);
    if (v117) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v117);
    }
    if (v127)
    {
      uint64_t v42 = (void **)__p;
      if (__p)
      {
        __int16 v43 = v126;
        uint64_t v44 = __p;
        if (v126 != __p)
        {
          do
            __int16 v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          uint64_t v44 = __p;
        }
        int64_t v126 = v42;
        operator delete(v44);
      }
      uint64_t v45 = v123;
      if (v123)
      {
        int v46 = v124;
        unsigned int v47 = v123;
        if (v124 != v123)
        {
          do
          {
            int v49 = (void *)*--v46;
            unsigned int v48 = v49;
            void *v46 = 0;
            if (v49) {
              operator delete[](v48);
            }
          }
          while (v46 != v45);
          unsigned int v47 = v123;
        }
        int64_t v124 = v45;
        operator delete(v47);
      }
      if (v119 != v122) {
        free(v119);
      }
    }
  }
  return v41;
}

uint64_t mlir::mps::QuantizeOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.quantize", 12, v2, v3, 0, 0);
  void *v4 = &unk_1EC9D0708;
  v4[12] = mlir::mps::QuantizeOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::RandomNormalOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v78 = v6;
  if (!v6)
  {
    a3(v82, a4);
    if (v82[0])
    {
      LODWORD(v79) = 3;
      unint64_t v80 = "expected DictionaryAttr to set properties";
      uint64_t v81 = 41;
      unint64_t v26 = &v79;
      long long v27 = (char *)v83;
      if (v84 >= v85)
      {
        unint64_t v66 = v84 + 1;
        if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
        {
          int64_t v72 = (char *)&v79 - (unsigned char *)v83;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v66, 24);
          long long v27 = (char *)v83;
          unint64_t v26 = (uint64_t *)((char *)v83 + v72);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v66, 24);
          unint64_t v26 = &v79;
          long long v27 = (char *)v83;
        }
      }
      uint64_t v28 = &v27[24 * v84];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)uint64_t v28 = v29;
      ++v84;
      if (v82[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v82);
      }
    }
    if (!v91) {
      return 0;
    }
    unint64_t v30 = (void **)__p;
    if (__p)
    {
      long long v31 = v90;
      char v32 = __p;
      if (v90 != __p)
      {
        do
          long long v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        char v32 = __p;
      }
      unint64_t v90 = v30;
      operator delete(v32);
    }
    unint64_t v21 = v87;
    if (!v87) {
      goto LABEL_80;
    }
    uint64_t v33 = v88;
    uint64_t v23 = v87;
    if (v88 == v87)
    {
LABEL_79:
      unint64_t v88 = v21;
      operator delete(v23);
LABEL_80:
      if (v83 != v86) {
        free(v83);
      }
      return 0;
    }
    do
    {
      int64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_78:
    uint64_t v23 = v87;
    goto LABEL_79;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v78, "mean", 4uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    {
      a3(v82, a4);
      if (v82[0])
      {
        LODWORD(v79) = 3;
        uint64_t v81 = 49;
        uint64_t v10 = &v79;
        uint64_t v11 = (char *)v83;
        if (v84 >= v85)
        {
          unint64_t v67 = v84 + 1;
          if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
          {
            int64_t v73 = (char *)&v79 - (unsigned char *)v83;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v67, 24);
            uint64_t v11 = (char *)v83;
            uint64_t v10 = (uint64_t *)((char *)v83 + v73);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v67, 24);
            uint64_t v10 = &v79;
            uint64_t v11 = (char *)v83;
          }
        }
        uint64_t v12 = &v11[24 * v84];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)uint64_t v12 = v13;
        ++v84;
        if (v82[0])
        {
          unint64_t v14 = &v79;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v79, v9);
          uint64_t v15 = (char *)v83;
          if (v84 >= v85)
          {
            unint64_t v68 = v84 + 1;
            if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
            {
              int64_t v74 = (char *)&v79 - (unsigned char *)v83;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v68, 24);
              uint64_t v15 = (char *)v83;
              unint64_t v14 = (uint64_t *)((char *)v83 + v74);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v68, 24);
              unint64_t v14 = &v79;
              uint64_t v15 = (char *)v83;
            }
          }
          int v16 = &v15[24 * v84];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)int v16 = v17;
          ++v84;
          if (v82[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v82);
          }
        }
      }
      if (!v91) {
        return 0;
      }
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v90;
        uint64_t v20 = __p;
        if (v90 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        unint64_t v90 = v18;
        operator delete(v20);
      }
      unint64_t v21 = v87;
      if (!v87) {
        goto LABEL_80;
      }
      long long v22 = v88;
      uint64_t v23 = v87;
      if (v88 == v87) {
        goto LABEL_79;
      }
      do
      {
        uint64_t v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *long long v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_78;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v78, "result_element_type", 0x13uLL);
  if (!v36)
  {
    a3(v82, a4);
    if (v82[0])
    {
      LODWORD(v79) = 3;
      unint64_t v80 = "expected key entry for result_element_type in DictionaryAttr to set Properties.";
      uint64_t v81 = 79;
      uint64_t v52 = &v79;
      uint64_t v53 = (char *)v83;
      if (v84 >= v85)
      {
        unint64_t v70 = v84 + 1;
        if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
        {
          int64_t v76 = (char *)&v79 - (unsigned char *)v83;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v70, 24);
          uint64_t v53 = (char *)v83;
          uint64_t v52 = (uint64_t *)((char *)v83 + v76);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v70, 24);
          uint64_t v52 = &v79;
          uint64_t v53 = (char *)v83;
        }
      }
      uint64_t v54 = &v53[24 * v84];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = v52[2];
      *(_OWORD *)uint64_t v54 = v55;
      ++v84;
      if (v82[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v82);
      }
    }
    if (!v91) {
      return 0;
    }
    uint64_t v56 = (void **)__p;
    if (__p)
    {
      uint64_t v57 = v90;
      unint64_t v58 = __p;
      if (v90 != __p)
      {
        do
          uint64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        unint64_t v58 = __p;
      }
      unint64_t v90 = v56;
      operator delete(v58);
    }
    unint64_t v21 = v87;
    if (!v87) {
      goto LABEL_80;
    }
    unint64_t v59 = v88;
    uint64_t v23 = v87;
    if (v88 == v87) {
      goto LABEL_79;
    }
    do
    {
      long long v61 = (void *)*--v59;
      int64_t v60 = v61;
      *unint64_t v59 = 0;
      if (v61) {
        operator delete[](v60);
      }
    }
    while (v59 != v21);
    goto LABEL_78;
  }
  uint64_t v37 = v36;
  if (*(_UNKNOWN **)(*(void *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    a3(v82, a4);
    if (v82[0])
    {
      LODWORD(v79) = 3;
      uint64_t v81 = 64;
      uint64_t v38 = &v79;
      uint64_t v39 = (char *)v83;
      if (v84 >= v85)
      {
        unint64_t v69 = v84 + 1;
        if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
        {
          int64_t v75 = (char *)&v79 - (unsigned char *)v83;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v69, 24);
          uint64_t v39 = (char *)v83;
          uint64_t v38 = (uint64_t *)((char *)v83 + v75);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v69, 24);
          uint64_t v38 = &v79;
          uint64_t v39 = (char *)v83;
        }
      }
      unsigned int v40 = &v39[24 * v84];
      long long v41 = *(_OWORD *)v38;
      *((void *)v40 + 2) = v38[2];
      *(_OWORD *)unsigned int v40 = v41;
      ++v84;
      if (v82[0])
      {
        uint64_t v42 = &v79;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v79, v37);
        __int16 v43 = (char *)v83;
        if (v84 >= v85)
        {
          unint64_t v71 = v84 + 1;
          if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
          {
            int64_t v77 = (char *)&v79 - (unsigned char *)v83;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v71, 24);
            __int16 v43 = (char *)v83;
            uint64_t v42 = (uint64_t *)((char *)v83 + v77);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v71, 24);
            uint64_t v42 = &v79;
            __int16 v43 = (char *)v83;
          }
        }
        uint64_t v44 = &v43[24 * v84];
        long long v45 = *(_OWORD *)v42;
        *((void *)v44 + 2) = v42[2];
        *(_OWORD *)uint64_t v44 = v45;
        ++v84;
        if (v82[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v82);
        }
      }
    }
    if (!v91) {
      return 0;
    }
    int v46 = (void **)__p;
    if (__p)
    {
      unsigned int v47 = v90;
      unsigned int v48 = __p;
      if (v90 != __p)
      {
        do
          unsigned int v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        unsigned int v48 = __p;
      }
      unint64_t v90 = v46;
      operator delete(v48);
    }
    unint64_t v21 = v87;
    if (!v87) {
      goto LABEL_80;
    }
    int v49 = v88;
    uint64_t v23 = v87;
    if (v88 == v87) {
      goto LABEL_79;
    }
    do
    {
      int v51 = (void *)*--v49;
      unint64_t v50 = v51;
      void *v49 = 0;
      if (v51) {
        operator delete[](v50);
      }
    }
    while (v49 != v21);
    goto LABEL_78;
  }
  a1[1] = v36;
  uint64_t v63 = mlir::DictionaryAttr::get((uint64_t)&v78, "sampling_method", 0xFuLL);
  uint64_t v79 = v63;
  if (!v63)
  {
LABEL_88:
    uint64_t v65 = mlir::DictionaryAttr::get((uint64_t)&v78, "std_dev", 7uLL);
    uint64_t v79 = v65;
    if (v65)
    {
      if (*(_UNKNOWN **)(*(void *)v65 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
      {
        a3(v82, a4);
        goto LABEL_91;
      }
      a1[3] = v65;
    }
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)v63 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id)
  {
    a1[2] = v63;
    goto LABEL_88;
  }
  a3(v82, a4);
LABEL_91:
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v64, &v79);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v82);
  return 0;
}

uint64_t mlir::mps::RandomNormalOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  unsigned int v33[6] = *MEMORY[0x1E4F143B8];
  unint64_t v30 = a1;
  long long v31 = v33;
  uint64_t v32 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v30, (uint64_t)"mean", 4, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v32;
  if (v32 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
    unsigned int v6 = v32;
  }
  unint64_t v7 = (uint64_t *)((char *)v31 + 16 * v6);
  *unint64_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v32 + 1;
  LODWORD(v32) = v32 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"result_element_type", 19, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v13 = v32;
    }
    unint64_t v14 = (uint64_t *)((char *)v31 + 16 * v13);
    *unint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"sampling_method", 15, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v19 = v32;
    }
    uint64_t v20 = (uint64_t *)((char *)v31 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"std_dev", 7, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v25 = v32;
    }
    unint64_t v26 = (uint64_t *)((char *)v31 + 16 * v25);
    uint64_t *v26 = v22;
    v26[1] = v24;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  long long v27 = v31;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v31 == v33) {
      return DictionaryAttr;
    }
    goto LABEL_20;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v30, (uint64_t *)v31, v8);
  long long v27 = v31;
  if (v31 != v33) {
LABEL_20:
  }
    free(v27);
  return DictionaryAttr;
}

uint64_t mlir::mps::RandomNormalOp::getInherentAttr(int a1, void *a2, _DWORD *__s1, size_t __n)
{
  switch(__n)
  {
    case 4uLL:
      if (*__s1 != 1851876717) {
        return 0;
      }
      return *a2;
    case 5uLL:
    case 6uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
      return 0;
    case 7uLL:
      if (memcmp(__s1, "std_dev", __n)) {
        return 0;
      }
      return a2[3];
    case 0xFuLL:
      if (memcmp(__s1, "sampling_method", __n)) {
        return 0;
      }
      return a2[2];
    case 0x13uLL:
      if (memcmp(__s1, "result_element_type", __n)) {
        return 0;
      }
      return a2[1];
    default:
      return 0;
  }
}

uint64_t mlir::mps::RandomNormalOp::setInherentAttr(uint64_t result, _DWORD *__s1, size_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  switch(a3)
  {
    case 4uLL:
      if (*__s1 == 1851876717)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
            uint64_t v9 = a4;
          }
          else {
            uint64_t v9 = 0;
          }
          *(void *)uint64_t result = v9;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 7uLL:
      uint64_t result = memcmp(__s1, "std_dev", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
            uint64_t v6 = a4;
          }
          else {
            uint64_t v6 = 0;
          }
          v5[3] = v6;
        }
        else
        {
          v5[3] = 0;
        }
      }
      break;
    case 0xFuLL:
      uint64_t result = memcmp(__s1, "sampling_method", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id) {
            uint64_t v7 = a4;
          }
          else {
            uint64_t v7 = 0;
          }
          v5[2] = v7;
        }
        else
        {
          v5[2] = 0;
        }
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "result_element_type", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          v5[1] = v8;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::mps::RandomNormalOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = (const void **)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v8, (const void **)"mean", (const char *)4, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v9, (const void **)"result_element_type", (const char *)0x13, a3, a4))
    {
      uint64_t v10 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps38(v10, (const void **)"sampling_method", (const char *)0xF, a3, a4))
      {
        uint64_t v11 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v11, (const void **)"std_dev", (const char *)7, a3, a4))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t mlir::mps::__mlir_ods_local_attr_constraint_MPSOps38(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1
    || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id)
  {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    unint64_t v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    uint64_t v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v8 = (char *)v35;
        uint64_t v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        uint64_t v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      long long v29 = a2;
      unint64_t v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        unint64_t v30 = "' failed to satisfy constraint: valid NormalSamplingMethod";
        uint64_t v31 = 58;
        uint64_t v11 = &v29;
        uint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v12 = (char *)v35;
            uint64_t v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            uint64_t v12 = (char *)v35;
          }
        }
        unsigned int v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)unsigned int v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      uint64_t v17 = v42;
      uint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      uint64_t v42 = v16;
      operator delete(v18);
    }
    unsigned int v19 = v39;
    if (v39)
    {
      uint64_t v20 = v40;
      uint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = (void *)*--v20;
          uint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v39;
      }
      unsigned int v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x20uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 113;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[121];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::NormalSamplingMethodAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  unsigned int v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::NormalSamplingMethodAttr]";
  unint64_t v41 = 85;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    unsigned int v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unsigned int v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unsigned int v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            unsigned int v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      uint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      uint64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          unint64_t v30 = (void *)*--v27;
          long long v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      int v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

llvm::detail::DoubleAPFloat *mlir::mps::RandomNormalOp::getStdDev@<X0>(mlir::mps::RandomNormalOp *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = 0;
  }
  uint64_t v4 = *(void *)(v2 + 24);
  return mlir::FloatAttr::getValue((mlir::FloatAttr *)&v4, a2);
}

void mlir::mps::RandomNormalOp::build(mlir::Float32Type **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  unint64_t v42[2] = *MEMORY[0x1E4F143B8];
  uint64_t v35 = a4;
  uint64_t v36 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v36, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v35, 1);
  uint64_t v14 = mlir::TypeAttr::get(a5);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = v14;
  uint64_t F32Type = mlir::Builder::getF32Type(a1, v15);
  uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)a1, F32Type, a6);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties>((void *)a2) = FloatAttr;
  uint64_t v19 = mlir::Builder::getF32Type(a1, v18);
  uint64_t v20 = mlir::Builder::getFloatAttr((uint64_t)a1, v19, a7);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties>((void *)a2)
            + 24) = v20;
  long long v21 = *a1;
  unsigned int v37 = a8;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v21);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id;
  uint64_t v41 = (uint64_t)v21;
  uint64_t v23 = mlir::StorageUniquer::get<mlir::mps::detail::NormalSamplingMethodAttrStorage,mlir::mps::NormalSamplingMethod>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail31NormalSamplingMethodAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_24NormalSamplingMethodAttrEJNS2_20NormalSamplingMethodEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id, &v37);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = v23;
  __src = v42;
  uint64_t v41 = 0x200000000;
  mlir::ValueRange::ValueRange(v39, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v26 = *(long long **)(a2 + 256);
  int64_t v27 = mlir::ValueRange::ValueRange(v38, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::RandomNormalOp::inferReturnTypes((uint64_t)v27, v28, v29, v39[0], v39[1], Dictionary, v26, v30, v38[0], v38[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v31 = __src;
  }
  uint64_t v32 = v41;
  uint64_t v33 = *(unsigned int *)(a2 + 72);
  unint64_t v34 = v33 + v41;
  if (v34 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v34, 8);
    LODWORD(v33) = *(_DWORD *)(a2 + 72);
  }
  if (v32)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v33), v31, 8 * v32);
    LODWORD(v33) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v33 + v32;
  if (__src != v42) {
    free(__src);
  }
}

mlir::MLIRContext *mlir::mps::RandomNormalOp::populateDefaultProperties(uint64_t a1, mlir::MLIRContext **a2)
{
  v11[0] = *(void *)(a1 + 8);
  uint64_t result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v11);
  long long v9 = result;
  if (*a2)
  {
    if (a2[3]) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t F32Type = mlir::Builder::getF32Type(&v9, v4);
    uint64_t result = mlir::Builder::getFloatAttr(0.0, (uint64_t)&v9, F32Type);
    *a2 = result;
    if (a2[3])
    {
LABEL_3:
      if (a2[2]) {
        return result;
      }
LABEL_7:
      unint64_t v7 = v9;
      unsigned int v10 = 0;
      AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v9);
      v11[0] = &mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id;
      v11[1] = v7;
      uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::NormalSamplingMethodAttrStorage,mlir::mps::NormalSamplingMethod>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail31NormalSamplingMethodAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_24NormalSamplingMethodAttrEJNS2_20NormalSamplingMethodEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id, &v10);
      a2[2] = result;
      return result;
    }
  }
  uint64_t v6 = mlir::Builder::getF32Type(&v9, v4);
  uint64_t result = mlir::Builder::getFloatAttr(1.0, (uint64_t)&v9, v6);
  a2[3] = result;
  if (!a2[2]) {
    goto LABEL_7;
  }
  return result;
}

BOOL mlir::mps::RandomNormalOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4)
  {
    int v5 = *(const void ***)v3;
    uint64_t v6 = *(void *)(v3 + 16);
    unint64_t v7 = *(const void ***)(v3 + 24);
    v22[0] = v2;
    if (mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v4, (const void **)"result_element_type", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22)&& (v22[0] = *this, mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v5, (const void **)"mean", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22))&& (v22[0] = *this, mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v7, (const void **)"std_dev", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22))
      && (v22[0] = *this,
          mlir::mps::__mlir_ods_local_attr_constraint_MPSOps38(v6, (const void **)"sampling_method", (const char *)0xF, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps38(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22))&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v8 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v20 = (const void **)"requires attribute 'result_element_type'";
    __int16 v21 = 259;
    mlir::OpState::emitOpError(this, &v20, (uint64_t)v22);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      uint64_t v12 = (void **)__p;
      if (__p)
      {
        unint64_t v13 = v28;
        uint64_t v14 = __p;
        if (v28 != __p)
        {
          do
            unint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          uint64_t v14 = __p;
        }
        uint64_t v28 = v12;
        operator delete(v14);
      }
      uint64_t v15 = v25;
      if (v25)
      {
        uint64_t v16 = v26;
        long long v17 = v25;
        if (v26 != v25)
        {
          do
          {
            uint64_t v19 = (void *)*--v16;
            uint64_t v18 = v19;
            void *v16 = 0;
            if (v19) {
              operator delete[](v18);
            }
          }
          while (v16 != v15);
          long long v17 = v25;
        }
        unint64_t v26 = v15;
        operator delete(v17);
      }
      if (v23 != &v24) {
        free(v23);
      }
    }
  }
  return v10;
}

uint64_t mlir::mps::RandomNormalOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.random_normal", 17, v2, v3, 0, 0);
  void *v4 = &unk_1EC980498;
  v4[12] = mlir::mps::RandomNormalOp::canonicalize;
  long long v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    long long v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::RandomTruncatedNormalOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v83 = v6;
  if (!v6)
  {
    a3(v87, a4);
    if (v87[0])
    {
      LODWORD(v84) = 3;
      unsigned int v85 = "expected DictionaryAttr to set properties";
      uint64_t v86 = 41;
      unint64_t v26 = &v84;
      int64_t v27 = (char *)v88;
      if (v89 >= v90)
      {
        unint64_t v70 = v89 + 1;
        if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
        {
          int64_t v76 = (char *)&v84 - (unsigned char *)v88;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v70, 24);
          int64_t v27 = (char *)v88;
          unint64_t v26 = (uint64_t *)((char *)v88 + v76);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v70, 24);
          unint64_t v26 = &v84;
          int64_t v27 = (char *)v88;
        }
      }
      uint64_t v28 = &v27[24 * v89];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)uint64_t v28 = v29;
      ++v89;
      if (v87[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v87);
      }
    }
    if (!v96) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v95;
      uint64_t v32 = __p;
      if (v95 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      BOOL v95 = v30;
      operator delete(v32);
    }
    __int16 v21 = v92;
    if (!v92) {
      goto LABEL_90;
    }
    uint64_t v33 = v93;
    uint64_t v23 = v92;
    if (v93 == v92)
    {
LABEL_89:
      BOOL v93 = v21;
      operator delete(v23);
LABEL_90:
      if (v88 != v91) {
        free(v88);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      unint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_88;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v83, "maximum", 7uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    {
      a3(v87, a4);
      if (v87[0])
      {
        LODWORD(v84) = 3;
        uint64_t v86 = 52;
        uint64_t v10 = &v84;
        unint64_t v11 = (char *)v88;
        if (v89 >= v90)
        {
          unint64_t v71 = v89 + 1;
          if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
          {
            int64_t v77 = (char *)&v84 - (unsigned char *)v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v71, 24);
            unint64_t v11 = (char *)v88;
            uint64_t v10 = (uint64_t *)((char *)v88 + v77);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v71, 24);
            uint64_t v10 = &v84;
            unint64_t v11 = (char *)v88;
          }
        }
        uint64_t v12 = &v11[24 * v89];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)uint64_t v12 = v13;
        ++v89;
        if (v87[0])
        {
          uint64_t v14 = &v84;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v84, v9);
          uint64_t v15 = (char *)v88;
          if (v89 >= v90)
          {
            unint64_t v72 = v89 + 1;
            if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
            {
              int64_t v78 = (char *)&v84 - (unsigned char *)v88;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v72, 24);
              uint64_t v15 = (char *)v88;
              uint64_t v14 = (uint64_t *)((char *)v88 + v78);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v72, 24);
              uint64_t v14 = &v84;
              uint64_t v15 = (char *)v88;
            }
          }
          uint64_t v16 = &v15[24 * v89];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)uint64_t v16 = v17;
          ++v89;
          if (v87[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v87);
          }
        }
      }
      if (!v96) {
        return 0;
      }
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v95;
        uint64_t v20 = __p;
        if (v95 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        BOOL v95 = v18;
        operator delete(v20);
      }
      __int16 v21 = v92;
      if (!v92) {
        goto LABEL_90;
      }
      uint64_t v22 = v93;
      uint64_t v23 = v92;
      if (v93 == v92) {
        goto LABEL_89;
      }
      do
      {
        unint64_t v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_88;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v83, "mean", 4uLL);
  if (v36)
  {
    uint64_t v37 = v36;
    if (*(_UNKNOWN **)(*(void *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    {
      a3(v87, a4);
      if (v87[0])
      {
        LODWORD(v84) = 3;
        uint64_t v86 = 49;
        uint64_t v38 = &v84;
        uint64_t v39 = (char *)v88;
        if (v89 >= v90)
        {
          unint64_t v73 = v89 + 1;
          if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
          {
            int64_t v79 = (char *)&v84 - (unsigned char *)v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v73, 24);
            uint64_t v39 = (char *)v88;
            uint64_t v38 = (uint64_t *)((char *)v88 + v79);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v73, 24);
            uint64_t v38 = &v84;
            uint64_t v39 = (char *)v88;
          }
        }
        unsigned int v40 = &v39[24 * v89];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = v38[2];
        *(_OWORD *)unsigned int v40 = v41;
        ++v89;
        if (v87[0])
        {
          uint64_t v42 = &v84;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v84, v37);
          __int16 v43 = (char *)v88;
          if (v89 >= v90)
          {
            unint64_t v74 = v89 + 1;
            if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
            {
              int64_t v80 = (char *)&v84 - (unsigned char *)v88;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v74, 24);
              __int16 v43 = (char *)v88;
              uint64_t v42 = (uint64_t *)((char *)v88 + v80);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v74, 24);
              uint64_t v42 = &v84;
              __int16 v43 = (char *)v88;
            }
          }
          uint64_t v44 = &v43[24 * v89];
          long long v45 = *(_OWORD *)v42;
          *((void *)v44 + 2) = v42[2];
          *(_OWORD *)uint64_t v44 = v45;
          ++v89;
          if (v87[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v87);
          }
        }
      }
      if (!v96) {
        return 0;
      }
      int v46 = (void **)__p;
      if (__p)
      {
        unsigned int v47 = v95;
        unsigned int v48 = __p;
        if (v95 != __p)
        {
          do
            unsigned int v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          unsigned int v48 = __p;
        }
        BOOL v95 = v46;
        operator delete(v48);
      }
      __int16 v21 = v92;
      if (!v92) {
        goto LABEL_90;
      }
      int v49 = v93;
      uint64_t v23 = v92;
      if (v93 == v92) {
        goto LABEL_89;
      }
      do
      {
        int v51 = (void *)*--v49;
        unint64_t v50 = v51;
        void *v49 = 0;
        if (v51) {
          operator delete[](v50);
        }
      }
      while (v49 != v21);
      goto LABEL_88;
    }
    a1[1] = v36;
  }
  uint64_t v52 = mlir::DictionaryAttr::get((uint64_t)&v83, "minimum", 7uLL);
  uint64_t v84 = v52;
  if (!v52)
  {
LABEL_69:
    uint64_t v55 = mlir::DictionaryAttr::get((uint64_t)&v83, "result_element_type", 0x13uLL);
    uint64_t v82 = v55;
    if (v55)
    {
      if (*(_UNKNOWN **)(*(void *)v55 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
      {
        a3(v87, a4);
        mlir::InFlightDiagnostic::append<mlir::Attribute>(v56, &v82);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v87);
        return 0;
      }
      a1[3] = v55;
      uint64_t v68 = mlir::DictionaryAttr::get((uint64_t)&v83, "sampling_method", 0xFuLL);
      uint64_t v84 = v68;
      if (v68)
      {
        if (*(_UNKNOWN **)(*(void *)v68 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id)
        {
          a3(v87, a4);
          goto LABEL_67;
        }
        a1[4] = v68;
      }
      uint64_t v69 = mlir::DictionaryAttr::get((uint64_t)&v83, "std_dev", 7uLL);
      uint64_t v84 = v69;
      if (v69)
      {
        if (*(_UNKNOWN **)(*(void *)v69 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
        {
          a3(v87, a4);
          goto LABEL_66;
        }
        a1[5] = v69;
      }
      return 1;
    }
    a3(v87, a4);
    if (v87[0])
    {
      LODWORD(v84) = 3;
      unsigned int v85 = "expected key entry for result_element_type in DictionaryAttr to set Properties.";
      uint64_t v86 = 79;
      uint64_t v57 = &v84;
      unint64_t v58 = (char *)v88;
      if (v89 >= v90)
      {
        unint64_t v75 = v89 + 1;
        if (v88 <= &v84 && (char *)v88 + 24 * v89 > (char *)&v84)
        {
          int64_t v81 = (char *)&v84 - (unsigned char *)v88;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v75, 24);
          unint64_t v58 = (char *)v88;
          uint64_t v57 = (uint64_t *)((char *)v88 + v81);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v75, 24);
          uint64_t v57 = &v84;
          unint64_t v58 = (char *)v88;
        }
      }
      unint64_t v59 = &v58[24 * v89];
      long long v60 = *(_OWORD *)v57;
      *((void *)v59 + 2) = v57[2];
      *(_OWORD *)unint64_t v59 = v60;
      ++v89;
      if (v87[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v87);
      }
    }
    if (!v96) {
      return 0;
    }
    long long v61 = (void **)__p;
    if (__p)
    {
      uint64_t v62 = v95;
      uint64_t v63 = __p;
      if (v95 != __p)
      {
        do
          uint64_t v62 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v62 - 1);
        while (v62 != v61);
        uint64_t v63 = __p;
      }
      BOOL v95 = v61;
      operator delete(v63);
    }
    __int16 v21 = v92;
    if (!v92) {
      goto LABEL_90;
    }
    uint64_t v64 = v93;
    uint64_t v23 = v92;
    if (v93 == v92) {
      goto LABEL_89;
    }
    do
    {
      unint64_t v66 = (void *)*--v64;
      uint64_t v65 = v66;
      *uint64_t v64 = 0;
      if (v66) {
        operator delete[](v65);
      }
    }
    while (v64 != v21);
LABEL_88:
    uint64_t v23 = v92;
    goto LABEL_89;
  }
  if (*(_UNKNOWN **)(*(void *)v52 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    a1[2] = v52;
    goto LABEL_69;
  }
  a3(v87, a4);
LABEL_66:
  uint64_t v54 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v87, v53);
LABEL_67:
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v54, &v84);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v87);
  return 0;
}

uint64_t mlir::mps::RandomTruncatedNormalOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v45[6] = *MEMORY[0x1E4F143B8];
  uint64_t v42 = a1;
  __int16 v43 = v45;
  uint64_t v44 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v42, (uint64_t)"maximum", 7, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v44;
  if (v44 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
    unsigned int v6 = v44;
  }
  unint64_t v7 = (uint64_t *)((char *)v43 + 16 * v6);
  *unint64_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v44 + 1;
  LODWORD(v44) = v44 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"mean", 4, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v13 = v44;
    }
    uint64_t v14 = (uint64_t *)((char *)v43 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"minimum", 7, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v19 = v44;
    }
    uint64_t v20 = (uint64_t *)((char *)v43 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"result_element_type", 19, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v25 = v44;
    }
    unint64_t v26 = (uint64_t *)((char *)v43 + 16 * v25);
    uint64_t *v26 = v22;
    v26[1] = v24;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  uint64_t v27 = a2[4];
  if (v27)
  {
    uint64_t v28 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"sampling_method", 15, v27);
    uint64_t v30 = v29;
    unsigned int v31 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v31 = v44;
    }
    uint64_t v32 = (uint64_t *)((char *)v43 + 16 * v31);
    *uint64_t v32 = v28;
    v32[1] = v30;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  uint64_t v33 = a2[5];
  if (v33)
  {
    uint64_t v34 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"std_dev", 7, v33);
    uint64_t v36 = v35;
    unsigned int v37 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v37 = v44;
    }
    uint64_t v38 = (uint64_t *)((char *)v43 + 16 * v37);
    *uint64_t v38 = v34;
    v38[1] = v36;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  uint64_t v39 = v43;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v43 == v45) {
      return DictionaryAttr;
    }
    goto LABEL_28;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v42, (uint64_t *)v43, v8);
  uint64_t v39 = v43;
  if (v43 != v45) {
LABEL_28:
  }
    free(v39);
  return DictionaryAttr;
}

uint64_t mlir::mps::RandomTruncatedNormalOp::getInherentAttr(int a1, void *a2, char *__s1, size_t __n)
{
  switch(__n)
  {
    case 4uLL:
      if (memcmp(__s1, "mean", __n)) {
        return 0;
      }
      return a2[1];
    case 5uLL:
    case 6uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
      return 0;
    case 7uLL:
      if (*(_DWORD *)__s1 == 1769496941 && *(_DWORD *)(__s1 + 3) == 1836412265) {
        return *a2;
      }
      if (!memcmp(__s1, "minimum", __n)) {
        return a2[2];
      }
      if (memcmp(__s1, "std_dev", __n)) {
        return 0;
      }
      return a2[5];
    case 0xFuLL:
      if (memcmp(__s1, "sampling_method", __n)) {
        return 0;
      }
      return a2[4];
    case 0x13uLL:
      if (memcmp(__s1, "result_element_type", __n)) {
        return 0;
      }
      return a2[3];
    default:
      return 0;
  }
}

uint64_t mlir::mps::RandomTruncatedNormalOp::setInherentAttr(uint64_t result, char *__s1, size_t __n, uint64_t a4)
{
  unint64_t v7 = (void *)result;
  switch(__n)
  {
    case 4uLL:
      uint64_t result = memcmp(__s1, "mean", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
            uint64_t v12 = a4;
          }
          else {
            uint64_t v12 = 0;
          }
          v7[1] = v12;
        }
        else
        {
          v7[1] = 0;
        }
      }
      break;
    case 7uLL:
      if (*(_DWORD *)__s1 == 1769496941 && *(_DWORD *)(__s1 + 3) == 1836412265)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
            uint64_t v13 = a4;
          }
          else {
            uint64_t v13 = 0;
          }
          *(void *)uint64_t result = v13;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      else
      {
        uint64_t result = memcmp(__s1, "minimum", __n);
        if (result)
        {
          uint64_t result = memcmp(__s1, "std_dev", __n);
          if (!result)
          {
            if (a4)
            {
              if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
                uint64_t v9 = a4;
              }
              else {
                uint64_t v9 = 0;
              }
              v7[5] = v9;
            }
            else
            {
              v7[5] = 0;
            }
          }
        }
        else if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
            uint64_t v14 = a4;
          }
          else {
            uint64_t v14 = 0;
          }
          v7[2] = v14;
        }
        else
        {
          v7[2] = 0;
        }
      }
      break;
    case 0xFuLL:
      uint64_t result = memcmp(__s1, "sampling_method", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          uint64_t v7[4] = v10;
        }
        else
        {
          uint64_t v7[4] = 0;
        }
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "result_element_type", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
            uint64_t v11 = a4;
          }
          else {
            uint64_t v11 = 0;
          }
          v7[3] = v11;
        }
        else
        {
          v7[3] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::mps::RandomTruncatedNormalOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"maximum", 7, *a2);
  }
  uint64_t v5 = a2[1];
  if (v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"mean", 4, v5);
  }
  uint64_t v6 = a2[2];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"minimum", 7, v6);
  }
  uint64_t v7 = a2[3];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"result_element_type", 19, v7);
  }
  uint64_t v8 = a2[4];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"sampling_method", 15, v8);
  }
  uint64_t v9 = a2[5];
  if (v9)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"std_dev", 7, v9);
  }
}

BOOL mlir::mps::RandomTruncatedNormalOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = (const void **)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v8, (const void **)"maximum", (const char *)7, a3, a4))
  {
    uint64_t v9 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v9, (const void **)"mean", (const char *)4, a3, a4))
    {
      uint64_t v10 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v10, (const void **)"minimum", (const char *)7, a3, a4))
      {
        uint64_t v11 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v11, (const void **)"result_element_type", (const char *)0x13, a3, a4))
        {
          uint64_t v12 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 32));
          if (!v12
            || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps38(v12, (const void **)"sampling_method", (const char *)0xF, a3, a4))
          {
            uint64_t v13 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 40));
            if (!v13
              || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v13, (const void **)"std_dev", (const char *)7, a3, a4))
            {
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL mlir::mps::RandomTruncatedNormalOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::FloatAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::FloatAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::FloatAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readAttribute<mlir::TypeAttr>(a1, v3 + 3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::NormalSamplingMethodAttr>(a1, v3 + 4)&& mlir::DialectBytecodeReader::readOptionalAttribute<mlir::FloatAttr>(a1, v3 + 5) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x30uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorB"
              "ase::Properties]";
        unint64_t v14 = 122;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[123];
    return a1[32];
  }
  return result;
}

uint64_t mlir::mps::RandomTruncatedNormalOp::getResultElementType(mlir::mps::RandomTruncatedNormalOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 24);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

llvm::detail::DoubleAPFloat *mlir::mps::RandomTruncatedNormalOp::getMean@<X0>(mlir::mps::RandomTruncatedNormalOp *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = 0;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  return mlir::FloatAttr::getValue((mlir::FloatAttr *)&v4, a2);
}

llvm::detail::DoubleAPFloat *mlir::mps::RandomTruncatedNormalOp::getStdDev@<X0>(mlir::mps::RandomTruncatedNormalOp *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = 0;
  }
  uint64_t v4 = *(void *)(v2 + 40);
  return mlir::FloatAttr::getValue((mlir::FloatAttr *)&v4, a2);
}

void mlir::mps::RandomTruncatedNormalOp::build(mlir::Float32Type **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10)
{
  v50[2] = *MEMORY[0x1E4F143B8];
  uint64_t v43 = a4;
  uint64_t v44 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v44, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v43, 1);
  uint64_t v16 = mlir::TypeAttr::get(a5);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties>((void *)a2)
            + 24) = v16;
  uint64_t F32Type = mlir::Builder::getF32Type(a1, v17);
  uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)a1, F32Type, a6);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = FloatAttr;
  uint64_t v21 = mlir::Builder::getF32Type(a1, v20);
  uint64_t v22 = mlir::Builder::getFloatAttr((uint64_t)a1, v21, a7);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties>((void *)a2)
            + 40) = v22;
  uint64_t v24 = mlir::Builder::getF32Type(a1, v23);
  uint64_t v25 = mlir::Builder::getFloatAttr((uint64_t)a1, v24, a8);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = v25;
  uint64_t v27 = mlir::Builder::getF32Type(a1, v26);
  uint64_t v28 = mlir::Builder::getFloatAttr((uint64_t)a1, v27, a9);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties>((void *)a2) = v28;
  uint64_t v29 = *a1;
  unsigned int v45 = a10;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v29);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id;
  uint64_t v49 = (uint64_t)v29;
  uint64_t v31 = mlir::StorageUniquer::get<mlir::mps::detail::NormalSamplingMethodAttrStorage,mlir::mps::NormalSamplingMethod>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail31NormalSamplingMethodAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_24NormalSamplingMethodAttrEJNS2_20NormalSamplingMethodEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id, &v45);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties>((void *)a2)
            + 32) = v31;
  __src = v50;
  uint64_t v49 = 0x200000000;
  mlir::ValueRange::ValueRange(v47, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v34 = *(long long **)(a2 + 256);
  uint64_t v35 = mlir::ValueRange::ValueRange(v46, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::RandomTruncatedNormalOp::inferReturnTypes((uint64_t)v35, v36, v37, v47[0], v47[1], Dictionary, v34, v38, v46[0], v46[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v39 = __src;
  }
  uint64_t v40 = v49;
  uint64_t v41 = *(unsigned int *)(a2 + 72);
  unint64_t v42 = v41 + v49;
  if (v42 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v42, 8);
    LODWORD(v41) = *(_DWORD *)(a2 + 72);
  }
  if (v40)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v41), v39, 8 * v40);
    LODWORD(v41) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v41 + v40;
  if (__src != v50) {
    free(__src);
  }
}

mlir::MLIRContext *mlir::mps::RandomTruncatedNormalOp::populateDefaultProperties(uint64_t a1, mlir::MLIRContext **a2)
{
  v13[0] = *(void *)(a1 + 8);
  uint64_t result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v13);
  unint64_t v11 = result;
  if (a2[1])
  {
    if (a2[5]) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t F32Type = mlir::Builder::getF32Type(&v11, v4);
    uint64_t result = mlir::Builder::getFloatAttr(0.0, (uint64_t)&v11, F32Type);
    a2[1] = result;
    if (a2[5])
    {
LABEL_3:
      if (a2[2]) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  uint64_t v6 = mlir::Builder::getF32Type(&v11, v4);
  uint64_t result = mlir::Builder::getFloatAttr(1.0, (uint64_t)&v11, v6);
  a2[5] = result;
  if (a2[2])
  {
LABEL_4:
    if (*a2) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v7 = mlir::Builder::getF32Type(&v11, v4);
  uint64_t result = mlir::Builder::getFloatAttr(-2.0, (uint64_t)&v11, v7);
  a2[2] = result;
  if (*a2)
  {
LABEL_5:
    if (a2[4]) {
      return result;
    }
LABEL_11:
    unint64_t v9 = v11;
    unsigned int v12 = 0;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v11);
    v13[0] = &mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id;
    v13[1] = v9;
    uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::NormalSamplingMethodAttrStorage,mlir::mps::NormalSamplingMethod>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail31NormalSamplingMethodAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_24NormalSamplingMethodAttrEJNS2_20NormalSamplingMethodEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v13, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id, &v12);
    a2[4] = result;
    return result;
  }
LABEL_10:
  uint64_t v8 = mlir::Builder::getF32Type(&v11, v4);
  uint64_t result = mlir::Builder::getFloatAttr(2.0, (uint64_t)&v11, v8);
  *a2 = result;
  if (!a2[4]) {
    goto LABEL_11;
  }
  return result;
}

BOOL mlir::mps::RandomTruncatedNormalOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4)
  {
    int v5 = *(const void ***)v3;
    uint64_t v6 = *(const void ***)(v3 + 8);
    uint64_t v7 = *(const void ***)(v3 + 16);
    uint64_t v8 = *(void *)(v3 + 32);
    unint64_t v9 = *(const void ***)(v3 + 40);
    v24[0] = v2;
    if (mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v4, (const void **)"result_element_type", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v24)&& (v24[0] = *this, mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v6, (const void **)"mean", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v24))&& (v24[0] = *this, mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v9, (const void **)"std_dev", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v24))
      && (v24[0] = *this,
          mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v7, (const void **)"minimum", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v24))&& (v24[0] = *this, mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v5, (const void **)"maximum", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v24))&& (v24[0] = *this, mlir::mps::__mlir_ods_local_attr_constraint_MPSOps38(v8, (const void **)"sampling_method", (const char *)0xF, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps38(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v24))
      && mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v10 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v22 = (const void **)"requires attribute 'result_element_type'";
    __int16 v23 = 259;
    mlir::OpState::emitOpError(this, &v22, (uint64_t)v24);
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (v31)
    {
      unint64_t v14 = (void **)__p;
      if (__p)
      {
        uint64_t v15 = v30;
        uint64_t v16 = __p;
        if (v30 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          uint64_t v16 = __p;
        }
        uint64_t v30 = v14;
        operator delete(v16);
      }
      uint64_t v17 = v27;
      if (v27)
      {
        uint64_t v18 = v28;
        unsigned int v19 = v27;
        if (v28 != v27)
        {
          do
          {
            uint64_t v21 = (void *)*--v18;
            uint64_t v20 = v21;
            void *v18 = 0;
            if (v21) {
              operator delete[](v20);
            }
          }
          while (v18 != v17);
          unsigned int v19 = v27;
        }
        uint64_t v28 = v17;
        operator delete(v19);
      }
      if (v25 != &v26) {
        free(v25);
      }
    }
  }
  return v12;
}

uint64_t mlir::mps::RandomTruncatedNormalOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.random_truncated_normal", 27, v2, v3, 0, 0);
  void *v4 = &unk_1EC981E60;
  v4[12] = mlir::mps::RandomTruncatedNormalOp::canonicalize;
  unint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::RandomUniformOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      uint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          uint64_t v27 = (char *)v60;
        }
      }
      uint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      char v31 = v67;
      uint64_t v32 = __p;
      if (v67 != __p)
      {
        do
          char v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      unint64_t v67 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v33 = v65;
    __int16 v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "result_element_type", 0x13uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected key entry for result_element_type in DictionaryAttr to set Properties.";
      uint64_t v58 = 79;
      uint64_t v36 = &v56;
      uint64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v37 = (char *)v60;
          uint64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v36 = &v56;
          uint64_t v37 = (char *)v60;
        }
      }
      uint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v40 = (void **)__p;
    if (__p)
    {
      uint64_t v41 = v67;
      unint64_t v42 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        unint64_t v42 = __p;
      }
      unint64_t v67 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v43 = v65;
    __int16 v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      unsigned int v45 = (void *)*--v43;
      uint64_t v44 = v45;
      *uint64_t v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 64;
    uint64_t v10 = &v56;
    unint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        unint64_t v11 = (char *)v60;
        uint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v10 = &v56;
        unint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      unint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      uint64_t v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v15 = (char *)v60;
          unint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unint64_t v14 = &v56;
          uint64_t v15 = (char *)v60;
        }
      }
      uint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      unsigned int v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          unsigned int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v67 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v22 = v65;
    __int16 v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      uint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_57:
    __int16 v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::mps::RandomUniformOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"result_element_type", 19, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 114;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[125];
    return a1[32];
  }
  return result;
}

void mlir::mps::RandomUniformOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v29[2] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = a4;
  uint64_t v24 = a3;
  uint64_t v21 = a6;
  uint64_t v22 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v23, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  uint64_t v9 = mlir::TypeAttr::get(a7);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties>((void *)a2) = v9;
  __src = v29;
  uint64_t v28 = 0x200000000;
  mlir::ValueRange::ValueRange(v26, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v12 = *(unint64_t **)(a2 + 256);
  long long v13 = mlir::ValueRange::ValueRange(v25, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::RandomUniformOp::inferReturnTypes((uint64_t)v13, v14, v15, v26[0], v26[1], Dictionary, v12, v16, v25[0], v25[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v17 = __src;
  }
  uint64_t v18 = v28;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v28;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v29) {
    free(__src);
  }
}

BOOL mlir::mps::RandomUniformOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v18[0] = v2;
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v3, (const void **)"result_element_type", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
    {
      return 0;
    }
    if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps43(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 2u))return 0; {
    if (mlir::mps::__mlir_ods_local_type_constraint_MPSOps43(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 3u))
    }
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v4 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = (const void **)"requires attribute 'result_element_type'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError(this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      unint64_t v7 = (void **)__p;
      if (__p)
      {
        BOOL v8 = v24;
        uint64_t v9 = __p;
        if (v24 != __p)
        {
          do
            BOOL v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          uint64_t v9 = __p;
        }
        uint64_t v24 = v7;
        operator delete(v9);
      }
      uint64_t v10 = v21;
      if (v21)
      {
        unint64_t v11 = v22;
        uint64_t v12 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v14 = (void *)*--v11;
            long long v13 = v14;
            *unint64_t v11 = 0;
            if (v14) {
              operator delete[](v13);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v21;
        }
        uint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

uint64_t mlir::mps::__mlir_ods_local_type_constraint_MPSOps43(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    goto LABEL_4;
  }
  v71[0] = a2;
  v71[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
  int ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v71);
  uint64_t v10 = *a2;
  if (!ArgOperands) {
    goto LABEL_4;
  }
  unsigned int v61 = a2;
  uint64_t v62 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61);
  uint64_t v10 = *a2;
  if (!v12)
  {
    uint64_t v47 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
    char v68 = a2;
    uint64_t v69 = v47;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v68);
    if (mlir::Type::isF16((mlir::Type *)&OperandRange)
      || mlir::Type::isF32((mlir::Type *)&OperandRange)
      || mlir::Type::isBF16((mlir::Type *)&OperandRange)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
    {
      return 1;
    }
    uint64_t v10 = *a2;
    unint64_t v49 = (void *)*((void *)*a2 + 17);
    if (v49 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      && v49 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      goto LABEL_16;
    }
  }
  else
  {
LABEL_4:
    long long v13 = (void *)v10[17];
    if (v13 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      && v13 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      goto LABEL_16;
    }
  }
  uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
  v66[0] = a2;
  v66[1] = v15;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v66);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange)
    || mlir::Type::isF32((mlir::Type *)&OperandRange)
    || mlir::Type::isBF16((mlir::Type *)&OperandRange)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
  {
    uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
    v65[0] = a2;
    v65[1] = v16;
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
    uint64_t v81 = 1;
    if (v18 == 1 && *ArgAttrsAttr == v81) {
      return 1;
    }
  }
LABEL_16:
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    uint64_t v46 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
    v64[0] = a2;
    v64[1] = v46;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v64);
    if (mlir::Type::isF16((mlir::Type *)&OperandRange)
      || mlir::Type::isF32((mlir::Type *)&OperandRange)
      || mlir::Type::isBF16((mlir::Type *)&OperandRange)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
    {
      return 1;
    }
  }
  __int16 v63 = 261;
  unsigned int v61 = a3;
  uint64_t v62 = a4;
  mlir::Operation::emitOpError(a1, &v61, (uint64_t)v71);
  if (v71[0])
  {
    LODWORD(v68) = 3;
    uint64_t v69 = (uint64_t)" #";
    uint64_t v70 = 2;
    uint64_t v19 = &v68;
    uint64_t v20 = (char *)v72;
    if (v73 >= v74)
    {
      unint64_t v51 = v73 + 1;
      if (v72 <= &v68 && (char *)v72 + 24 * v73 > (char *)&v68)
      {
        int64_t v57 = (char *)&v68 - (unsigned char *)v72;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v51, 24);
        uint64_t v20 = (char *)v72;
        uint64_t v19 = (const void ***)((char *)v72 + v57);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v51, 24);
        uint64_t v19 = &v68;
        uint64_t v20 = (char *)v72;
      }
    }
    uint64_t v21 = &v20[24 * v73];
    long long v22 = *(_OWORD *)v19;
    *((void *)v21 + 2) = v19[2];
    *(_OWORD *)uint64_t v21 = v22;
    uint64_t v23 = ++v73;
    if (v71[0])
    {
      LODWORD(v68) = 5;
      uint64_t v69 = a5;
      uint64_t v24 = &v68;
      char v25 = (char *)v72;
      if (v23 >= v74)
      {
        unint64_t v52 = v23 + 1;
        BOOL v53 = (char *)v72 + 24 * v23 > (char *)&v68;
        if (v72 <= &v68 && v53)
        {
          int64_t v58 = (char *)&v68 - (unsigned char *)v72;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v52, 24);
          char v25 = (char *)v72;
          uint64_t v24 = (const void ***)((char *)v72 + v58);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v52, 24);
          uint64_t v24 = &v68;
          char v25 = (char *)v72;
        }
      }
      uint64_t v26 = &v25[24 * v73];
      long long v27 = *(_OWORD *)v24;
      *((void *)v26 + 2) = v24[2];
      *(_OWORD *)uint64_t v26 = v27;
      uint64_t v28 = ++v73;
      if (v71[0])
      {
        LODWORD(v68) = 3;
        uint64_t v69 = (uint64_t)" must be 0D tensor of floating point or 32/64-bit signed integer values or static-shape defined t"
                       "ensor with shape equal to [1] or unranked tensor of floating point or 32/64-bit signed integer values, but got ";
        uint64_t v70 = 208;
        long long v29 = &v68;
        uint64_t v30 = (char *)v72;
        if (v28 >= v74)
        {
          unint64_t v54 = v28 + 1;
          BOOL v55 = (char *)v72 + 24 * v28 > (char *)&v68;
          if (v72 <= &v68 && v55)
          {
            int64_t v59 = (char *)&v68 - (unsigned char *)v72;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v54, 24);
            uint64_t v30 = (char *)v72;
            long long v29 = (const void ***)((char *)v72 + v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v54, 24);
            long long v29 = &v68;
            uint64_t v30 = (char *)v72;
          }
        }
        char v31 = &v30[24 * v73];
        long long v32 = *(_OWORD *)v29;
        *((void *)v31 + 2) = v29[2];
        *(_OWORD *)char v31 = v32;
        ++v73;
        if (v71[0])
        {
          uint64_t v33 = &v68;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v68, (uint64_t)a2);
          uint64_t v34 = (char *)v72;
          if (v73 >= v74)
          {
            unint64_t v56 = v73 + 1;
            if (v72 <= &v68 && (char *)v72 + 24 * v73 > (char *)&v68)
            {
              int64_t v60 = (char *)&v68 - (unsigned char *)v72;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v56, 24);
              uint64_t v34 = (char *)v72;
              uint64_t v33 = (const void ***)((char *)v72 + v60);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v75, v56, 24);
              uint64_t v33 = &v68;
              uint64_t v34 = (char *)v72;
            }
          }
          uint64_t v35 = &v34[24 * v73];
          long long v36 = *(_OWORD *)v33;
          *((void *)v35 + 2) = v33[2];
          *(_OWORD *)uint64_t v35 = v36;
          ++v73;
        }
      }
    }
  }
  uint64_t v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v71);
  if (v71[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v71);
  }
  if (v80)
  {
    uint64_t v38 = (void **)__p;
    if (__p)
    {
      long long v39 = v79;
      uint64_t v40 = __p;
      if (v79 != __p)
      {
        do
          long long v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        uint64_t v40 = __p;
      }
      int64_t v79 = v38;
      operator delete(v40);
    }
    uint64_t v41 = v76;
    if (v76)
    {
      unint64_t v42 = v77;
      uint64_t v43 = v76;
      if (v77 != v76)
      {
        do
        {
          unsigned int v45 = (void *)*--v42;
          uint64_t v44 = v45;
          *unint64_t v42 = 0;
          if (v45) {
            operator delete[](v44);
          }
        }
        while (v42 != v41);
        uint64_t v43 = v76;
      }
      int64_t v77 = v41;
      operator delete(v43);
    }
    if (v72 != v75) {
      free(v72);
    }
  }
  return v37;
}

uint64_t mlir::mps::RandomUniformOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.random_uniform", 18, v2, v3, 0, 0);
  void *v4 = &unk_1EC980A70;
  v4[12] = mlir::mps::RandomUniformOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::RankOpGenericAdaptorBase::RankOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.rank", 8, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::RankOp::build(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v21[2] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v16, 1);
  __src = v21;
  uint64_t v20 = 0x200000000;
  uint64_t v4 = *(void *)a2;
  mlir::ValueRange::ValueRange(v18, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v6 = mlir::ValueRange::ValueRange(&v17, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::RankOp::inferReturnTypes((uint64_t)v6, v4, 1, v18[0], v18[1], v7, v8, v9, v14, v15, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v10 = __src;
  }
  uint64_t v11 = v20;
  uint64_t v12 = *(unsigned int *)(a2 + 72);
  unint64_t v13 = v12 + v20;
  if (v13 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v13, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  if (v11)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v12), v10, 8 * v11);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v12 + v11;
  if (__src != v21) {
    free(__src);
  }
}

uint64_t mlir::mps::RankOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.rank", 8, v2, v3, 0, 0);
  void *v4 = &unk_1EC982A10;
  v4[12] = mlir::mps::RankOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::ReadDataFromFileOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v107 = v6;
  if (!v6)
  {
    a3(v111, a4);
    if (v111[0])
    {
      int v108 = 3;
      uint64_t v109 = "expected DictionaryAttr to set properties";
      uint64_t v110 = 41;
      uint64_t v26 = &v108;
      long long v27 = (char *)v112;
      if (v113 >= v114)
      {
        unint64_t v89 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          int64_t v98 = (char *)&v108 - (unsigned char *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v89, 24);
          long long v27 = (char *)v112;
          uint64_t v26 = (int *)((char *)v112 + v98);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v89, 24);
          uint64_t v26 = &v108;
          long long v27 = (char *)v112;
        }
      }
      uint64_t v28 = &v27[24 * v113];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v113;
      if (v111[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
      }
    }
    if (!v120) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      char v31 = v119;
      long long v32 = __p;
      if (v119 != __p)
      {
        do
          char v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        long long v32 = __p;
      }
      unint64_t v119 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v116;
    if (!v116) {
      goto LABEL_116;
    }
    uint64_t v33 = v117;
    uint64_t v23 = v116;
    if (v117 == v116) {
      goto LABEL_115;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_114;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v107, "file_path", 9uLL);
  if (!v8)
  {
    a3(v111, a4);
    if (v111[0])
    {
      int v108 = 3;
      uint64_t v109 = "expected key entry for file_path in DictionaryAttr to set Properties.";
      uint64_t v110 = 69;
      long long v36 = &v108;
      uint64_t v37 = (char *)v112;
      if (v113 >= v114)
      {
        unint64_t v91 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          int64_t v100 = (char *)&v108 - (unsigned char *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
          uint64_t v37 = (char *)v112;
          long long v36 = (int *)((char *)v112 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
          long long v36 = &v108;
          uint64_t v37 = (char *)v112;
        }
      }
      uint64_t v38 = &v37[24 * v113];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v113;
      if (v111[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
      }
    }
    if (!v120) {
      return 0;
    }
    uint64_t v40 = (void **)__p;
    if (__p)
    {
      uint64_t v41 = v119;
      unint64_t v42 = __p;
      if (v119 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        unint64_t v42 = __p;
      }
      unint64_t v119 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v116;
    if (!v116) {
      goto LABEL_116;
    }
    uint64_t v43 = v117;
    uint64_t v23 = v116;
    if (v117 == v116) {
      goto LABEL_115;
    }
    do
    {
      unsigned int v45 = (void *)*--v43;
      uint64_t v44 = v45;
      *uint64_t v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_114;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a3(v111, a4);
    if (v111[0])
    {
      int v108 = 3;
      uint64_t v110 = 54;
      uint64_t v10 = &v108;
      uint64_t v11 = (char *)v112;
      if (v113 >= v114)
      {
        unint64_t v90 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          int64_t v99 = (char *)&v108 - (unsigned char *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v90, 24);
          uint64_t v11 = (char *)v112;
          uint64_t v10 = (int *)((char *)v112 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v90, 24);
          uint64_t v10 = &v108;
          uint64_t v11 = (char *)v112;
        }
      }
      uint64_t v12 = &v11[24 * v113];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v113;
      if (v111[0])
      {
        uint64_t v14 = &v108;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v9);
        uint64_t v15 = (char *)v112;
        if (v113 >= v114)
        {
          unint64_t v92 = v113 + 1;
          if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
          {
            int64_t v101 = (char *)&v108 - (unsigned char *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v92, 24);
            uint64_t v15 = (char *)v112;
            uint64_t v14 = (int *)((char *)v112 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v92, 24);
            uint64_t v14 = &v108;
            uint64_t v15 = (char *)v112;
          }
        }
        uint64_t v16 = &v15[24 * v113];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v113;
        if (v111[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
        }
      }
    }
    if (!v120) {
      return 0;
    }
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v119;
      uint64_t v20 = __p;
      if (v119 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v119 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v116;
    if (!v116) {
      goto LABEL_116;
    }
    long long v22 = v117;
    uint64_t v23 = v116;
    if (v117 == v116) {
      goto LABEL_115;
    }
    do
    {
      char v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *long long v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
    goto LABEL_114;
  }
  *a1 = v8;
  uint64_t v46 = mlir::DictionaryAttr::get((uint64_t)&v107, "file_symbol", 0xBuLL);
  if (v46)
  {
    uint64_t v47 = v46;
    if (*(_UNKNOWN **)(*(void *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    {
      a3(v111, a4);
      if (v111[0])
      {
        int v108 = 3;
        uint64_t v110 = 56;
        unint64_t v48 = &v108;
        unint64_t v49 = (char *)v112;
        if (v113 >= v114)
        {
          unint64_t v93 = v113 + 1;
          if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
          {
            int64_t v102 = (char *)&v108 - (unsigned char *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
            unint64_t v49 = (char *)v112;
            unint64_t v48 = (int *)((char *)v112 + v102);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
            unint64_t v48 = &v108;
            unint64_t v49 = (char *)v112;
          }
        }
        unint64_t v50 = &v49[24 * v113];
        long long v51 = *(_OWORD *)v48;
        *((void *)v50 + 2) = *((void *)v48 + 2);
        *(_OWORD *)unint64_t v50 = v51;
        ++v113;
        if (v111[0])
        {
          unint64_t v52 = &v108;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v47);
          BOOL v53 = (char *)v112;
          if (v113 >= v114)
          {
            unint64_t v94 = v113 + 1;
            if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
            {
              int64_t v103 = (char *)&v108 - (unsigned char *)v112;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v94, 24);
              BOOL v53 = (char *)v112;
              unint64_t v52 = (int *)((char *)v112 + v103);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v94, 24);
              unint64_t v52 = &v108;
              BOOL v53 = (char *)v112;
            }
          }
          unint64_t v54 = &v53[24 * v113];
          long long v55 = *(_OWORD *)v52;
          *((void *)v54 + 2) = *((void *)v52 + 2);
          *(_OWORD *)unint64_t v54 = v55;
          ++v113;
          if (v111[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
          }
        }
      }
      if (!v120) {
        return 0;
      }
      unint64_t v56 = (void **)__p;
      if (__p)
      {
        int64_t v57 = v119;
        int64_t v58 = __p;
        if (v119 != __p)
        {
          do
            int64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
          while (v57 != v56);
          int64_t v58 = __p;
        }
        unint64_t v119 = v56;
        operator delete(v58);
      }
      uint64_t v21 = v116;
      if (!v116) {
        goto LABEL_116;
      }
      int64_t v59 = v117;
      uint64_t v23 = v116;
      if (v117 == v116) {
        goto LABEL_115;
      }
      do
      {
        unsigned int v61 = (void *)*--v59;
        int64_t v60 = v61;
        *int64_t v59 = 0;
        if (v61) {
          operator delete[](v60);
        }
      }
      while (v59 != v21);
      goto LABEL_114;
    }
    a1[1] = v46;
  }
  uint64_t v62 = mlir::DictionaryAttr::get((uint64_t)&v107, "offset", 6uLL);
  if (!v62)
  {
    a3(v111, a4);
    if (v111[0])
    {
      int v108 = 3;
      uint64_t v109 = "expected key entry for offset in DictionaryAttr to set Properties.";
      uint64_t v110 = 66;
      int64_t v78 = &v108;
      int64_t v79 = (char *)v112;
      if (v113 >= v114)
      {
        unint64_t v96 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          int64_t v105 = (char *)&v108 - (unsigned char *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v96, 24);
          int64_t v79 = (char *)v112;
          int64_t v78 = (int *)((char *)v112 + v105);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v96, 24);
          int64_t v78 = &v108;
          int64_t v79 = (char *)v112;
        }
      }
      char v80 = &v79[24 * v113];
      long long v81 = *(_OWORD *)v78;
      *((void *)v80 + 2) = *((void *)v78 + 2);
      *(_OWORD *)char v80 = v81;
      ++v113;
      if (v111[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
      }
    }
    if (!v120) {
      return 0;
    }
    uint64_t v82 = (void **)__p;
    if (__p)
    {
      uint64_t v83 = v119;
      uint64_t v84 = __p;
      if (v119 != __p)
      {
        do
          uint64_t v83 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v83 - 1);
        while (v83 != v82);
        uint64_t v84 = __p;
      }
      unint64_t v119 = v82;
      operator delete(v84);
    }
    uint64_t v21 = v116;
    if (!v116) {
      goto LABEL_116;
    }
    unsigned int v85 = v117;
    uint64_t v23 = v116;
    if (v117 == v116) {
      goto LABEL_115;
    }
    do
    {
      unint64_t v87 = (void *)*--v85;
      uint64_t v86 = v87;
      *unsigned int v85 = 0;
      if (v87) {
        operator delete[](v86);
      }
    }
    while (v85 != v21);
    goto LABEL_114;
  }
  uint64_t v63 = v62;
  if (*(_UNKNOWN **)(*(void *)v62 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a1[2] = v62;
    return 1;
  }
  a3(v111, a4);
  if (v111[0])
  {
    int v108 = 3;
    uint64_t v110 = 51;
    uint64_t v64 = &v108;
    uint64_t v65 = (char *)v112;
    if (v113 >= v114)
    {
      unint64_t v95 = v113 + 1;
      if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
      {
        int64_t v104 = (char *)&v108 - (unsigned char *)v112;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v95, 24);
        uint64_t v65 = (char *)v112;
        uint64_t v64 = (int *)((char *)v112 + v104);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v95, 24);
        uint64_t v64 = &v108;
        uint64_t v65 = (char *)v112;
      }
    }
    unint64_t v66 = &v65[24 * v113];
    long long v67 = *(_OWORD *)v64;
    *((void *)v66 + 2) = *((void *)v64 + 2);
    *(_OWORD *)unint64_t v66 = v67;
    ++v113;
    if (v111[0])
    {
      char v68 = &v108;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v63);
      uint64_t v69 = (char *)v112;
      if (v113 >= v114)
      {
        unint64_t v97 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          int64_t v106 = (char *)&v108 - (unsigned char *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v97, 24);
          uint64_t v69 = (char *)v112;
          char v68 = (int *)((char *)v112 + v106);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v97, 24);
          char v68 = &v108;
          uint64_t v69 = (char *)v112;
        }
      }
      uint64_t v70 = &v69[24 * v113];
      long long v71 = *(_OWORD *)v68;
      *((void *)v70 + 2) = *((void *)v68 + 2);
      *(_OWORD *)uint64_t v70 = v71;
      ++v113;
      if (v111[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
      }
    }
  }
  if (v120)
  {
    unint64_t v72 = (void **)__p;
    if (__p)
    {
      unsigned int v73 = v119;
      unsigned int v74 = __p;
      if (v119 != __p)
      {
        do
          unsigned int v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
        while (v73 != v72);
        unsigned int v74 = __p;
      }
      unint64_t v119 = v72;
      operator delete(v74);
    }
    uint64_t v21 = v116;
    if (!v116) {
      goto LABEL_116;
    }
    unint64_t v75 = v117;
    uint64_t v23 = v116;
    if (v117 == v116)
    {
LABEL_115:
      BOOL v117 = v21;
      operator delete(v23);
LABEL_116:
      if (v112 != v115) {
        free(v112);
      }
      return 0;
    }
    do
    {
      int64_t v77 = (void *)*--v75;
      int64_t v76 = v77;
      *unint64_t v75 = 0;
      if (v77) {
        operator delete[](v76);
      }
    }
    while (v75 != v21);
LABEL_114:
    uint64_t v23 = v116;
    goto LABEL_115;
  }
  return 0;
}

uint64_t mlir::mps::ReadDataFromFileOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v27[6] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a1;
  char v25 = v27;
  uint64_t v26 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v24, (uint64_t)"file_path", 9, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v26;
  if (v26 >= HIDWORD(v26))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
    unsigned int v6 = v26;
  }
  uint64_t v7 = (uint64_t *)((char *)v25 + 16 * v6);
  *uint64_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v26 + 1;
  LODWORD(v26) = v26 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"file_symbol", 11, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      unsigned int v13 = v26;
    }
    uint64_t v14 = (uint64_t *)((char *)v25 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"offset", 6, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      unsigned int v19 = v26;
    }
    uint64_t v20 = (uint64_t *)((char *)v25 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
  uint64_t v21 = v25;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v25 == v27) {
      return DictionaryAttr;
    }
    goto LABEL_16;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v24, (uint64_t *)v25, v8);
  uint64_t v21 = v25;
  if (v25 != v27) {
LABEL_16:
  }
    free(v21);
  return DictionaryAttr;
}

uint64_t mlir::mps::ReadDataFromFileOp::setInherentAttr(uint64_t result, void *__s1, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 6)
  {
    uint64_t result = memcmp(__s1, "offset", 6uLL);
    if (!result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
          uint64_t v7 = a4;
        }
        else {
          uint64_t v7 = 0;
        }
        *(void *)(v5 + 16) = v7;
      }
      else
      {
        *(void *)(v5 + 16) = 0;
      }
    }
  }
  else if (a3 == 11)
  {
    uint64_t result = memcmp(__s1, "file_symbol", 0xBuLL);
    if (!result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
          uint64_t v8 = a4;
        }
        else {
          uint64_t v8 = 0;
        }
        *(void *)(v5 + 8) = v8;
      }
      else
      {
        *(void *)(v5 + 8) = 0;
      }
    }
  }
  else if (a3 == 9 && *__s1 == 0x7461705F656C6966 && *((unsigned char *)__s1 + 8) == 104)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      *(void *)uint64_t result = v9;
    }
    else
    {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

BOOL mlir::mps::ReadDataFromFileOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v8, (const void **)"file_path", (const char *)9, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v9, (const void **)"file_symbol", (const char *)0xB, a3, a4))
    {
      uint64_t v10 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps8(v10, (const void **)"offset", (const char *)6, a3, a4))
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x18uLL);
    v3[1] = 0;
    v3[2] = 0;
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 117;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[127];
    return a1[32];
  }
  return result;
}

void *mlir::mps::ReadDataFromFileOp::getOffset(mlir::mps::ReadDataFromFileOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v6 = *(void *)(v1 + 16);
  mlir::IntegerAttr::getValue(&v6, (llvm::APInt *)&__p);
  if (v5 <= 0x40) {
    return __p;
  }
  uint64_t v3 = *(void *)__p;
  operator delete[](__p);
  return (void *)v3;
}

void mlir::mps::ReadDataFromFileOp::build(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v14 = *a1;
  __int16 v17 = 261;
  v16[0] = a7;
  v16[1] = a8;
  uint64_t v15 = mlir::StringAttr::get(v14, (mlir::MLIRContext *)v16);
  mlir::mps::ReadDataFromFileOp::build(a1, a2, a3, a4, a5, a6, v15);
}

void mlir::mps::ReadDataFromFileOp::build(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int16 v17 = 261;
  v16[0] = a4;
  v16[1] = a5;
  uint64_t StringAttr = mlir::Builder::getStringAttr(a1, (mlir::MLIRContext *)v16);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties>((void *)a2) = StringAttr;
  uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)a1, 0x40u, 0);
  uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a6);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = IntegerAttr;
  if (a7) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 8) = a7;
  uint64_t v15 = *(unsigned int *)(a2 + 72);
  if (v15 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v15) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::mps::ReadDataFromFileOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  if (*v3)
  {
    unsigned int v5 = (const void **)v3[2];
    if (v5)
    {
      uint64_t v6 = v3[1];
      v27[0] = v2;
      if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v4, (const void **)"file_path", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v27))return 0; {
      v27[0] = *this;
      }
      if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps8(v5, (const void **)"offset", (const char *)6, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps8(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v27))return 0; {
      v27[0] = *this;
      }
      if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v6, (const void **)"file_symbol", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v27))return 0; {
      if (*((_DWORD *)*this + 9))
      }
        uint64_t v7 = (uint64_t)(*this - 2);
      else {
        uint64_t v7 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps12(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    v25[0] = (const void **)"requires attribute 'offset'";
    __int16 v26 = 259;
    mlir::OpState::emitOpError(this, v25, (uint64_t)v27);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    }
    if (v34)
    {
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        unsigned int v19 = v33;
        uint64_t v20 = __p;
        if (v33 != __p)
        {
          do
            unsigned int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        uint64_t v33 = v18;
        operator delete(v20);
      }
      unsigned int v13 = v30;
      if (!v30) {
        goto LABEL_44;
      }
      uint64_t v21 = v31;
      uint64_t v15 = v30;
      if (v31 == v30)
      {
LABEL_43:
        char v31 = v13;
        operator delete(v15);
LABEL_44:
        if (v28 != &v29) {
          free(v28);
        }
        return v9;
      }
      do
      {
        uint64_t v23 = (void *)*--v21;
        long long v22 = v23;
        *uint64_t v21 = 0;
        if (v23) {
          operator delete[](v22);
        }
      }
      while (v21 != v13);
LABEL_42:
      uint64_t v15 = v30;
      goto LABEL_43;
    }
  }
  else
  {
    v25[0] = (const void **)"requires attribute 'file_path'";
    __int16 v26 = 259;
    mlir::OpState::emitOpError(this, v25, (uint64_t)v27);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    }
    if (v34)
    {
      uint64_t v10 = (void **)__p;
      if (__p)
      {
        unint64_t v11 = v33;
        uint64_t v12 = __p;
        if (v33 != __p)
        {
          do
            unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          uint64_t v12 = __p;
        }
        uint64_t v33 = v10;
        operator delete(v12);
      }
      unsigned int v13 = v30;
      if (!v30) {
        goto LABEL_44;
      }
      unint64_t v14 = v31;
      uint64_t v15 = v30;
      if (v31 == v30) {
        goto LABEL_43;
      }
      do
      {
        __int16 v17 = (void *)*--v14;
        uint64_t v16 = v17;
        *unint64_t v14 = 0;
        if (v17) {
          operator delete[](v16);
        }
      }
      while (v14 != v13);
      goto LABEL_42;
    }
  }
  return v9;
}

uint64_t mlir::mps::ReadDataFromFileOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.read_data_from_file", 23, v2, v3, 0, 0);
  void *v4 = &unk_1EC9D1BF8;
  v4[12] = mlir::mps::ReadDataFromFileOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReadVariableOpGenericAdaptorBase::ReadVariableOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.read_variable", 17, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::ReadVariableOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.read_variable", 17, v2, v3, 0, 0);
  void *v4 = &unk_1EC9804F0;
  v4[12] = mlir::mps::ReadVariableOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

void mlir::mps::ReadVariableOp::getEffects(uint64_t a1, uint64_t a2)
{
  unint64_t v26[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get();
  {
    long long v22 = v3;
    uint64_t v3 = v22;
    if (v13)
    {
      {
        uint64_t v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        unint64_t v24 = 84;
        unint64_t v15 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
        if (v24 >= v15) {
          unint64_t v16 = v15;
        }
        else {
          unint64_t v16 = v24;
        }
        __int16 v17 = &v23[v16];
        unint64_t v18 = v24 - v16;
        if (v24 - v16 >= 0x12) {
          uint64_t v19 = 18;
        }
        else {
          uint64_t v19 = v24 - v16;
        }
        unint64_t v20 = v18 - v19;
        if (v20 >= v20 - 1) {
          uint64_t v21 = v20 - 1;
        }
        else {
          uint64_t v21 = v20;
        }
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v17[v19], v21);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_1EC9A4AE8;
      *(void *)algn_1E8EB9D58 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_180159000);
      uint64_t v3 = v22;
    }
  }
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4 >= *(_DWORD *)(a2 + 12))
  {
    uint64_t v23 = (const char *)v3;
    unint64_t v24 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    unint64_t v6 = v4 + 1;
    uint64_t v25 = 0;
    v26[0] = 0;
    *(void *)((char *)v26 + 5) = 0;
    BOOL v7 = *(void *)a2 + 40 * (unint64_t)v4 > (unint64_t)&v23;
    if (*(void *)a2 <= (unint64_t)&v23 && v7)
    {
      unint64_t v14 = (char *)&v23 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v6, 40);
      uint64_t v8 = *(void *)a2;
      uint64_t v9 = (const char **)&v14[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v6, 40);
      uint64_t v8 = *(void *)a2;
      uint64_t v9 = &v23;
    }
    uint64_t v10 = v8 + 40 * *(unsigned int *)(a2 + 8);
    long long v11 = *(_OWORD *)v9;
    long long v12 = *((_OWORD *)v9 + 1);
    *(void *)(v10 + 32) = v9[4];
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
  }
  else
  {
    unint64_t v5 = (uint64_t **)(*(void *)a2 + 40 * v4);
    *unint64_t v5 = v3;
    v5[1] = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v5[2] = 0;
    v5[3] = 0;
    *(uint64_t **)((char *)v5 + 29) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
}

uint64_t mlir::mps::detail::RealPartOpGenericAdaptorBase::RealPartOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.real_part", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::RealPartOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3)
{
  v21[2] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v16, 1);
  __src = v21;
  uint64_t v20 = 0x200000000;
  unint64_t v5 = *a1;
  mlir::ValueRange::ValueRange(v18, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v17, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::RealPartOp::inferReturnTypes(v5, v8, v9, v18[0], v18[1], Dictionary, v10, v11, v17[0], v17[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v12 = __src;
  }
  uint64_t v13 = v20;
  uint64_t v14 = *(unsigned int *)(a2 + 72);
  unint64_t v15 = v14 + v20;
  if (v15 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  if (v13)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v14), v12, 8 * v13);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v14 + v13;
  if (__src != v21) {
    free(__src);
  }
}

uint64_t mlir::mps::RealPartOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.real_part", 13, v2, v3, 0, 0);
  void *v4 = &unk_1EC97F890;
  v4[12] = mlir::mps::RealPartOp::canonicalize;
  int v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    int v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x10uLL);
    void *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 119;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[129];
    return a1[32];
  }
  return result;
}

void mlir::mps::RealToHermiteanFFTOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  v33[2] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a4;
  uint64_t v27 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v27, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v26, 1);
  uint64_t v10 = *a1;
  unsigned int v28 = a5;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v10);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::FFTScalingModeAttr,void>::id;
  uint64_t v32 = (uint64_t)v10;
  uint64_t v12 = mlir::StorageUniquer::get<mlir::mps::detail::FFTScalingModeAttrStorage,mlir::mps::FFTScalingMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail25FFTScalingModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_18FFTScalingModeAttrEJNS2_14FFTScalingModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::FFTScalingModeAttr,void>::id, &v28);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = v12;
  if (a6)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v13);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v33;
  uint64_t v32 = 0x200000000;
  unint64_t v15 = *a1;
  mlir::ValueRange::ValueRange(v30, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v18 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v29, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::RealToHermiteanFFTOp::inferReturnTypes(v15, v19, v20, v30[0], v30[1], Dictionary, v18, v21, v29[0], v29[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v22 = __src;
  }
  uint64_t v23 = v32;
  uint64_t v24 = *(unsigned int *)(a2 + 72);
  unint64_t v25 = v24 + v32;
  if (v25 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v25, 8);
    LODWORD(v24) = *(_DWORD *)(a2 + 72);
  }
  if (v23)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v24), v22, 8 * v23);
    LODWORD(v24) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v24 + v23;
  if (__src != v33) {
    free(__src);
  }
}

BOOL mlir::mps::RealToHermiteanFFTOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    v20[0] = v2;
    if (mlir::mps::__mlir_ods_local_attr_constraint_MPSOps27(v4, (const void **)"scaling_mode", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps27(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v20)&& (v20[0] = *this, mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v5, (const void **)"inverse", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v20))&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps5(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)&& mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(
                            *this,
                            (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8),
                            (const void **)"operand",
                            7,
                            1u))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v6 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps19(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unint64_t v18 = (const void **)"requires attribute 'scaling_mode'";
    __int16 v19 = 259;
    mlir::OpState::emitOpError(this, &v18, (uint64_t)v20);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v20);
    if (v20[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v20);
    }
    if (v27)
    {
      unint64_t v9 = (void **)__p;
      if (__p)
      {
        uint64_t v10 = v26;
        unint64_t v11 = __p;
        if (v26 != __p)
        {
          do
            uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          unint64_t v11 = __p;
        }
        uint64_t v26 = v9;
        operator delete(v11);
      }
      uint64_t v12 = v23;
      if (v23)
      {
        uint64_t v13 = v24;
        unint64_t v14 = v23;
        if (v24 != v23)
        {
          do
          {
            uint64_t v16 = (void *)*--v13;
            unint64_t v15 = v16;
            void *v13 = 0;
            if (v16) {
              operator delete[](v15);
            }
          }
          while (v13 != v12);
          unint64_t v14 = v23;
        }
        uint64_t v24 = v12;
        operator delete(v14);
      }
      if (v21 != &v22) {
        free(v21);
      }
    }
  }
  return v8;
}

uint64_t mlir::mps::RealToHermiteanFFTOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.real_to_hermitean_fft", 25, v2, v3, 0, 0);
  void *v4 = &unk_1EC9818E0;
  v4[12] = mlir::mps::RealToHermiteanFFTOp::canonicalize;
  unint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReciprocalOpGenericAdaptorBase::ReciprocalOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.reciprocal", 14, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::ReciprocalOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reciprocal", 14, v2, v3, 0, 0);
  void *v4 = &unk_1EC97FF70;
  v4[12] = mlir::mps::ReciprocalOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReciprocalSquareRootOpGenericAdaptorBase::ReciprocalSquareRootOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.reciprocal_square_root", 26, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::ReciprocalSquareRootOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reciprocal_square_root", 26, v2, v3, 0, 0);
  void *v4 = &unk_1EC981BA0;
  v4[12] = mlir::mps::ReciprocalSquareRootOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::ReductionAndOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      unsigned int v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      uint64_t v26 = &v44;
      char v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          char v27 = (char *)v48;
          uint64_t v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v26 = &v44;
          char v27 = (char *)v48;
        }
      }
      uint64_t v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      char v31 = v55;
      uint64_t v32 = __p;
      if (v55 != __p)
      {
        do
          char v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      long long v55 = v30;
      operator delete(v32);
    }
    int v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    uint64_t v33 = v53;
    uint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      char v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "keep_dims", 9uLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 54;
    uint64_t v10 = &v44;
    uint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v11 = (char *)v48;
        uint64_t v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v10 = &v44;
        uint64_t v11 = (char *)v48;
      }
    }
    uint64_t v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v49;
    if (v47[0])
    {
      unint64_t v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      unint64_t v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          unint64_t v15 = (char *)v48;
          unint64_t v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          unint64_t v14 = &v44;
          unint64_t v15 = (char *)v48;
        }
      }
      uint64_t v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  unint64_t v18 = (void **)__p;
  if (__p)
  {
    __int16 v19 = v55;
    int v20 = __p;
    if (v55 != __p)
    {
      do
        __int16 v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      int v20 = __p;
    }
    long long v55 = v18;
    operator delete(v20);
  }
  int v21 = v52;
  if (v52)
  {
    uint64_t v22 = v53;
    uint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      unint64_t v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_41:
    uint64_t v23 = v52;
LABEL_42:
    BOOL v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

uint64_t mlir::mps::ReductionAndOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"keep_dims", 9, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 113;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[131];
    return a1[32];
  }
  return result;
}

void mlir::mps::ReductionAndOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  }
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v27;
  uint64_t v26 = 0x200000000;
  unint64_t v11 = *a1;
  uint64_t v12 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v15 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionAndOp::inferReturnTypes(v11, v12, 1, v24[0], v24[1], Dictionary, v15, v16, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v17 = __src;
  }
  uint64_t v18 = v26;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27) {
    free(__src);
  }
}

BOOL mlir::mps::ReductionAndOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v50[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v3, (const void **)"keep_dims", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v50)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  uint64_t v4 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) == 0)
  {
    uint64_t v6 = -1;
    goto LABEL_5;
  }
  uint64_t v5 = *((unsigned int *)v4 + 17);
  uint64_t v6 = v5 - 1;
  if ((unint64_t)(v5 - 1) <= 1)
  {
    if (v5 == 1)
    {
LABEL_31:
      int v32 = *((_DWORD *)v4 + 9);
      uint64_t v33 = v4 - 2;
      if (v32) {
        uint64_t v34 = (uint64_t)v33;
      }
      else {
        uint64_t v34 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    uint64_t v30 = v4[9] + 56;
    uint64_t v31 = 1;
    while (mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)v30 + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, v31))
    {
      ++v31;
      v30 += 32;
      if (v5 == v31)
      {
        uint64_t v4 = *this;
        goto LABEL_31;
      }
    }
    return 0;
  }
LABEL_5:
  unsigned int v45 = (const void **)"operand group starting at #";
  __int16 v46 = 259;
  mlir::OpState::emitOpError(this, &v45, (uint64_t)v50);
  if (v50[0])
  {
    int v47 = 5;
    uint64_t v48 = 1;
    unint64_t v7 = &v47;
    BOOL v8 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v37 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        int64_t v42 = (char *)&v47 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v37, 24);
        BOOL v8 = (char *)v51;
        unint64_t v7 = (int *)((char *)v51 + v42);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v37, 24);
        unint64_t v7 = &v47;
        BOOL v8 = (char *)v51;
      }
    }
    unint64_t v9 = &v8[24 * v52];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)unint64_t v9 = v10;
    uint64_t v11 = ++v52;
    if (v50[0])
    {
      int v47 = 3;
      uint64_t v48 = (uint64_t)" requires 0 or 1 element, but found ";
      uint64_t v49 = 36;
      uint64_t v12 = &v47;
      long long v13 = (char *)v51;
      if (v11 >= v53)
      {
        unint64_t v38 = v11 + 1;
        BOOL v39 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v39)
        {
          int64_t v43 = (char *)&v47 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          long long v13 = (char *)v51;
          uint64_t v12 = (int *)((char *)v51 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          uint64_t v12 = &v47;
          long long v13 = (char *)v51;
        }
      }
      unint64_t v14 = &v13[24 * v52];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)unint64_t v14 = v15;
      uint64_t v16 = ++v52;
      if (v50[0])
      {
        int v47 = 5;
        uint64_t v48 = v6;
        long long v17 = &v47;
        uint64_t v18 = (char *)v51;
        if (v16 >= v53)
        {
          unint64_t v40 = v16 + 1;
          BOOL v41 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v41)
          {
            int64_t v44 = (char *)&v47 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
            uint64_t v18 = (char *)v51;
            long long v17 = (int *)((char *)v51 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
            long long v17 = &v47;
            uint64_t v18 = (char *)v51;
          }
        }
        uint64_t v19 = &v18[24 * v52];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        ++v52;
      }
    }
  }
  uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  }
  if (v59)
  {
    uint64_t v22 = (void **)__p;
    if (__p)
    {
      uint64_t v23 = v58;
      uint64_t v24 = __p;
      if (v58 != __p)
      {
        do
          uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      int64_t v58 = v22;
      operator delete(v24);
    }
    unint64_t v25 = v55;
    if (v55)
    {
      uint64_t v26 = v56;
      char v27 = v55;
      if (v56 != v55)
      {
        do
        {
          long long v29 = (void *)*--v26;
          uint64_t v28 = v29;
          void *v26 = 0;
          if (v29) {
            operator delete[](v28);
          }
        }
        while (v26 != v25);
        char v27 = v55;
      }
      char v56 = v25;
      operator delete(v27);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
  return v21;
}

uint64_t mlir::mps::ReductionAndOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reduction_and", 17, v2, v3, 0, 0);
  void *v4 = &unk_1EC980548;
  v4[12] = mlir::mps::ReductionAndOp::canonicalize;
  unint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::ReductionArgMaxOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.reduction_argmax", 20, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 116;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[133];
    return a1[32];
  }
  return result;
}

void mlir::mps::ReductionArgMaxOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  }
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v27;
  uint64_t v26 = 0x200000000;
  unint64_t v11 = *a1;
  uint64_t v12 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  long long v15 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionArgMaxOp::inferReturnTypes(v11, v12, 1, v24[0], v24[1], Dictionary, v15, v16, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v17 = __src;
  }
  uint64_t v18 = v26;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27) {
    free(__src);
  }
}

BOOL mlir::mps::ReductionArgMaxOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v50[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v3, (const void **)"keep_dims", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v50)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  unint64_t v4 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) == 0)
  {
    uint64_t v6 = -1;
    goto LABEL_5;
  }
  uint64_t v5 = *((unsigned int *)v4 + 17);
  uint64_t v6 = v5 - 1;
  if ((unint64_t)(v5 - 1) <= 1)
  {
    if (v5 == 1)
    {
LABEL_31:
      int v32 = *((_DWORD *)v4 + 9);
      uint64_t v33 = v4 - 2;
      if (v32) {
        uint64_t v34 = (uint64_t)v33;
      }
      else {
        uint64_t v34 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps24(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    uint64_t v30 = v4[9] + 56;
    uint64_t v31 = 1;
    while (mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)v30 + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, v31))
    {
      ++v31;
      v30 += 32;
      if (v5 == v31)
      {
        unint64_t v4 = *this;
        goto LABEL_31;
      }
    }
    return 0;
  }
LABEL_5:
  unsigned int v45 = (const void **)"operand group starting at #";
  __int16 v46 = 259;
  mlir::OpState::emitOpError(this, &v45, (uint64_t)v50);
  if (v50[0])
  {
    int v47 = 5;
    uint64_t v48 = 1;
    unint64_t v7 = &v47;
    __int16 v8 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v37 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        int64_t v42 = (char *)&v47 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v37, 24);
        __int16 v8 = (char *)v51;
        unint64_t v7 = (int *)((char *)v51 + v42);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v37, 24);
        unint64_t v7 = &v47;
        __int16 v8 = (char *)v51;
      }
    }
    unint64_t v9 = &v8[24 * v52];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)unint64_t v9 = v10;
    uint64_t v11 = ++v52;
    if (v50[0])
    {
      int v47 = 3;
      uint64_t v48 = (uint64_t)" requires 0 or 1 element, but found ";
      uint64_t v49 = 36;
      uint64_t v12 = &v47;
      long long v13 = (char *)v51;
      if (v11 >= v53)
      {
        unint64_t v38 = v11 + 1;
        BOOL v39 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v39)
        {
          int64_t v43 = (char *)&v47 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          long long v13 = (char *)v51;
          uint64_t v12 = (int *)((char *)v51 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          uint64_t v12 = &v47;
          long long v13 = (char *)v51;
        }
      }
      unint64_t v14 = &v13[24 * v52];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)unint64_t v14 = v15;
      uint64_t v16 = ++v52;
      if (v50[0])
      {
        int v47 = 5;
        uint64_t v48 = v6;
        long long v17 = &v47;
        uint64_t v18 = (char *)v51;
        if (v16 >= v53)
        {
          unint64_t v40 = v16 + 1;
          BOOL v41 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v41)
          {
            int64_t v44 = (char *)&v47 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
            uint64_t v18 = (char *)v51;
            long long v17 = (int *)((char *)v51 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
            long long v17 = &v47;
            uint64_t v18 = (char *)v51;
          }
        }
        uint64_t v19 = &v18[24 * v52];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        ++v52;
      }
    }
  }
  uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  }
  if (v59)
  {
    uint64_t v22 = (void **)__p;
    if (__p)
    {
      uint64_t v23 = v58;
      uint64_t v24 = __p;
      if (v58 != __p)
      {
        do
          uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      int64_t v58 = v22;
      operator delete(v24);
    }
    unint64_t v25 = v55;
    if (v55)
    {
      uint64_t v26 = v56;
      char v27 = v55;
      if (v56 != v55)
      {
        do
        {
          long long v29 = (void *)*--v26;
          uint64_t v28 = v29;
          void *v26 = 0;
          if (v29) {
            operator delete[](v28);
          }
        }
        while (v26 != v25);
        char v27 = v55;
      }
      char v56 = v25;
      operator delete(v27);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
  return v21;
}

uint64_t mlir::mps::ReductionArgMaxOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reduction_argmax", 20, v2, v3, 0, 0);
  void *v4 = &unk_1EC981258;
  v4[12] = mlir::mps::ReductionArgMaxOp::canonicalize;
  unint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::ReductionArgMinOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.reduction_argmin", 20, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 116;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[135];
    return a1[32];
  }
  return result;
}

void mlir::mps::ReductionArgMinOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  }
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v27;
  uint64_t v26 = 0x200000000;
  unint64_t v11 = *a1;
  uint64_t v12 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  long long v15 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionArgMinOp::inferReturnTypes(v11, v12, 1, v24[0], v24[1], Dictionary, v15, v16, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v17 = __src;
  }
  uint64_t v18 = v26;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27) {
    free(__src);
  }
}

uint64_t mlir::mps::ReductionArgMinOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reduction_argmin", 20, v2, v3, 0, 0);
  void *v4 = &unk_1EC9812B0;
  v4[12] = mlir::mps::ReductionArgMinOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 119;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[137];
    return a1[32];
  }
  return result;
}

void mlir::mps::ReductionLogSumExpOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  }
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v27;
  uint64_t v26 = 0x200000000;
  unint64_t v11 = *a1;
  uint64_t v12 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  long long v15 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionLogSumExpOp::inferReturnTypes(v11, v12, 1, v24[0], v24[1], Dictionary, v15, v16, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v17 = __src;
  }
  uint64_t v18 = v26;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27) {
    free(__src);
  }
}

uint64_t mlir::mps::ReductionLogSumExpOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reduction_logsumexp", 23, v2, v3, 0, 0);
  void *v4 = &unk_1EC981938;
  v4[12] = mlir::mps::ReductionLogSumExpOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::ReductionMaxOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    int v5 = (_OWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  }
  else {
    int v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v11, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 40) = v8;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.reduction_max", 17, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::ReductionMaxOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v63 = v6;
  if (!v6)
  {
    a3(v67, a4);
    if (v67[0])
    {
      int v64 = 3;
      uint64_t v65 = "expected DictionaryAttr to set properties";
      uint64_t v66 = 41;
      uint64_t v26 = &v64;
      char v27 = (char *)v68;
      if (v69 >= v70)
      {
        unint64_t v53 = v69 + 1;
        if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
        {
          int64_t v58 = (char *)&v64 - (unsigned char *)v68;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v53, 24);
          char v27 = (char *)v68;
          uint64_t v26 = (int *)((char *)v68 + v58);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v53, 24);
          uint64_t v26 = &v64;
          char v27 = (char *)v68;
        }
      }
      uint64_t v28 = &v27[24 * v69];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v69;
      if (v67[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
      }
    }
    if (!v76) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v75;
      int v32 = __p;
      if (v75 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        int v32 = __p;
      }
      unint64_t v75 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v72;
    if (!v72) {
      goto LABEL_64;
    }
    uint64_t v33 = v73;
    uint64_t v23 = v72;
    if (v73 == v72) {
      goto LABEL_63;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_62;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v63, "keep_dims", 9uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v67, a4);
      if (v67[0])
      {
        int v64 = 3;
        uint64_t v66 = 54;
        uint64_t v10 = &v64;
        unint64_t v11 = (char *)v68;
        if (v69 >= v70)
        {
          unint64_t v54 = v69 + 1;
          if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
          {
            int64_t v59 = (char *)&v64 - (unsigned char *)v68;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
            unint64_t v11 = (char *)v68;
            uint64_t v10 = (int *)((char *)v68 + v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
            uint64_t v10 = &v64;
            unint64_t v11 = (char *)v68;
          }
        }
        uint64_t v12 = &v11[24 * v69];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v12 = v13;
        ++v69;
        if (v67[0])
        {
          unint64_t v14 = &v64;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v64, v9);
          long long v15 = (char *)v68;
          if (v69 >= v70)
          {
            unint64_t v55 = v69 + 1;
            if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
            {
              int64_t v60 = (char *)&v64 - (unsigned char *)v68;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v55, 24);
              long long v15 = (char *)v68;
              unint64_t v14 = (int *)((char *)v68 + v60);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v55, 24);
              unint64_t v14 = &v64;
              long long v15 = (char *)v68;
            }
          }
          int v16 = &v15[24 * v69];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = *((void *)v14 + 2);
          *(_OWORD *)int v16 = v17;
          ++v69;
          if (v67[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
          }
        }
      }
      if (!v76) {
        return 0;
      }
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v75;
        unint64_t v20 = __p;
        if (v75 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          unint64_t v20 = __p;
        }
        unint64_t v75 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v72;
      if (!v72) {
        goto LABEL_64;
      }
      uint64_t v22 = v73;
      uint64_t v23 = v72;
      if (v73 == v72) {
        goto LABEL_63;
      }
      do
      {
        unint64_t v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_62;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v63, "propagate_nans", 0xEuLL);
  if (!v36) {
    return 1;
  }
  uint64_t v37 = v36;
  if (*(_UNKNOWN **)(*(void *)v36 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    a1[1] = v36;
    return 1;
  }
  a3(v67, a4);
  if (v67[0])
  {
    int v64 = 3;
    uint64_t v66 = 59;
    unint64_t v38 = &v64;
    BOOL v39 = (char *)v68;
    if (v69 >= v70)
    {
      unint64_t v56 = v69 + 1;
      if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
      {
        int64_t v61 = (char *)&v64 - (unsigned char *)v68;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v56, 24);
        BOOL v39 = (char *)v68;
        unint64_t v38 = (int *)((char *)v68 + v61);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v56, 24);
        unint64_t v38 = &v64;
        BOOL v39 = (char *)v68;
      }
    }
    unint64_t v40 = &v39[24 * v69];
    long long v41 = *(_OWORD *)v38;
    *((void *)v40 + 2) = *((void *)v38 + 2);
    *(_OWORD *)unint64_t v40 = v41;
    ++v69;
    if (v67[0])
    {
      int64_t v42 = &v64;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v64, v37);
      int64_t v43 = (char *)v68;
      if (v69 >= v70)
      {
        unint64_t v57 = v69 + 1;
        if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
        {
          int64_t v62 = (char *)&v64 - (unsigned char *)v68;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
          int64_t v43 = (char *)v68;
          int64_t v42 = (int *)((char *)v68 + v62);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
          int64_t v42 = &v64;
          int64_t v43 = (char *)v68;
        }
      }
      int64_t v44 = &v43[24 * v69];
      long long v45 = *(_OWORD *)v42;
      *((void *)v44 + 2) = *((void *)v42 + 2);
      *(_OWORD *)int64_t v44 = v45;
      ++v69;
      if (v67[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
      }
    }
  }
  if (v76)
  {
    __int16 v46 = (void **)__p;
    if (__p)
    {
      int v47 = v75;
      uint64_t v48 = __p;
      if (v75 != __p)
      {
        do
          int v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        uint64_t v48 = __p;
      }
      unint64_t v75 = v46;
      operator delete(v48);
    }
    uint64_t v21 = v72;
    if (!v72) {
      goto LABEL_64;
    }
    uint64_t v49 = v73;
    uint64_t v23 = v72;
    if (v73 == v72)
    {
LABEL_63:
      unsigned int v73 = v21;
      operator delete(v23);
LABEL_64:
      if (v68 != v71) {
        free(v68);
      }
      return 0;
    }
    do
    {
      long long v51 = (void *)*--v49;
      unsigned int v50 = v51;
      void *v49 = 0;
      if (v51) {
        operator delete[](v50);
      }
    }
    while (v49 != v21);
LABEL_62:
    uint64_t v23 = v72;
    goto LABEL_63;
  }
  return 0;
}

uint64_t mlir::mps::ReductionMaxOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v21[6] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a1;
  uint64_t v19 = v21;
  uint64_t v20 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"keep_dims", 9, *a2);
    uint64_t v5 = v4;
    unsigned int v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      unsigned int v6 = v20;
    }
    uint64_t v7 = (uint64_t *)((char *)v19 + 16 * v6);
    *uint64_t v7 = NamedAttr;
    v7[1] = v5;
    unsigned int v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    uint64_t v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      uint64_t v10 = (uint64_t *)v19;
      if (v8) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t DictionaryAttr = 0;
      if (v10 == v21) {
        return DictionaryAttr;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"propagate_nans", 14, v9);
  uint64_t v15 = v14;
  unsigned int v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    unsigned int v16 = v20;
  }
  long long v17 = (uint64_t *)((char *)v19 + 16 * v16);
  *long long v17 = v13;
  v17[1] = v15;
  unsigned int v8 = v20 + 1;
  LODWORD(v20) = v8;
  uint64_t v10 = (uint64_t *)v19;
  if (!v8) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  uint64_t v10 = (uint64_t *)v19;
  if (v19 != v21) {
LABEL_7:
  }
    free(v10);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x10uLL);
    void *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 113;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        unsigned int v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[139];
    return a1[32];
  }
  return result;
}

void mlir::mps::ReductionMaxOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  unint64_t v30[2] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a4;
  uint64_t v25 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v25, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  }
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v11);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  if (a6)
  {
    uint64_t v13 = mlir::Builder::getUnitAttr(a1, v11);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties>((void *)a2)
              + 8) = v13;
  }
  __src = v30;
  uint64_t v29 = 0x200000000;
  unint64_t v14 = *a1;
  uint64_t v15 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v27, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v18 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v26, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionMaxOp::inferReturnTypes(v14, v15, 1, v27[0], v27[1], Dictionary, v18, v19, v26[0], v26[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v20 = __src;
  }
  uint64_t v21 = v29;
  uint64_t v22 = *(unsigned int *)(a2 + 72);
  unint64_t v23 = v22 + v29;
  if (v23 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v23, 8);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  if (v21)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v22), v20, 8 * v21);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v22 + v21;
  if (__src != v30) {
    free(__src);
  }
}

void mlir::mps::ReductionMaxOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  }
  if (a5) {
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties>((void *)a2) = a5;
  }
  if (a6) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 8) = a6;
  __src = v27;
  uint64_t v26 = 0x200000000;
  unint64_t v11 = *a1;
  uint64_t v12 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v15 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionMaxOp::inferReturnTypes(v11, v12, 1, v24[0], v24[1], Dictionary, v15, v16, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v17 = __src;
  }
  uint64_t v18 = v26;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27) {
    free(__src);
  }
}

BOOL mlir::mps::ReductionMaxOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  v52[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v4, (const void **)"keep_dims", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v52))return 0; {
  v52[0] = *this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v5, (const void **)"propagate_nans", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v52)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  unint64_t v6 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) == 0)
  {
    uint64_t v8 = -1;
    goto LABEL_9;
  }
  uint64_t v7 = *((unsigned int *)v6 + 17);
  uint64_t v8 = v7 - 1;
  if ((unint64_t)(v7 - 1) <= 1)
  {
    if (v7 == 1)
    {
LABEL_35:
      int v34 = *((_DWORD *)v6 + 9);
      uint64_t v35 = v6 - 2;
      if (v34) {
        uint64_t v36 = (uint64_t)v35;
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v36, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    uint64_t v32 = v6[9] + 56;
    uint64_t v33 = 1;
    while (mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)v32 + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, v33))
    {
      ++v33;
      v32 += 32;
      if (v7 == v33)
      {
        unint64_t v6 = *this;
        goto LABEL_35;
      }
    }
    return 0;
  }
LABEL_9:
  int v47 = (const void **)"operand group starting at #";
  __int16 v48 = 259;
  mlir::OpState::emitOpError(this, &v47, (uint64_t)v52);
  if (v52[0])
  {
    int v49 = 5;
    uint64_t v50 = 1;
    unint64_t v9 = &v49;
    uint64_t v10 = (char *)v53;
    if (v54 >= v55)
    {
      unint64_t v39 = v54 + 1;
      if (v53 <= &v49 && (char *)v53 + 24 * v54 > (char *)&v49)
      {
        int64_t v44 = (char *)&v49 - (unsigned char *)v53;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v39, 24);
        uint64_t v10 = (char *)v53;
        unint64_t v9 = (int *)((char *)v53 + v44);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v39, 24);
        unint64_t v9 = &v49;
        uint64_t v10 = (char *)v53;
      }
    }
    unint64_t v11 = &v10[24 * v54];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = *((void *)v9 + 2);
    *(_OWORD *)unint64_t v11 = v12;
    uint64_t v13 = ++v54;
    if (v52[0])
    {
      int v49 = 3;
      uint64_t v50 = (uint64_t)" requires 0 or 1 element, but found ";
      uint64_t v51 = 36;
      unint64_t v14 = &v49;
      uint64_t v15 = (char *)v53;
      if (v13 >= v55)
      {
        unint64_t v40 = v13 + 1;
        BOOL v41 = (char *)v53 + 24 * v13 > (char *)&v49;
        if (v53 <= &v49 && v41)
        {
          int64_t v45 = (char *)&v49 - (unsigned char *)v53;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v40, 24);
          uint64_t v15 = (char *)v53;
          unint64_t v14 = (int *)((char *)v53 + v45);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v40, 24);
          unint64_t v14 = &v49;
          uint64_t v15 = (char *)v53;
        }
      }
      int v16 = &v15[24 * v54];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)int v16 = v17;
      uint64_t v18 = ++v54;
      if (v52[0])
      {
        int v49 = 5;
        uint64_t v50 = v8;
        uint64_t v19 = &v49;
        unint64_t v20 = (char *)v53;
        if (v18 >= v55)
        {
          unint64_t v42 = v18 + 1;
          BOOL v43 = (char *)v53 + 24 * v18 > (char *)&v49;
          if (v53 <= &v49 && v43)
          {
            int64_t v46 = (char *)&v49 - (unsigned char *)v53;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v42, 24);
            unint64_t v20 = (char *)v53;
            uint64_t v19 = (int *)((char *)v53 + v46);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v42, 24);
            uint64_t v19 = &v49;
            unint64_t v20 = (char *)v53;
          }
        }
        uint64_t v21 = &v20[24 * v54];
        long long v22 = *(_OWORD *)v19;
        *((void *)v21 + 2) = *((void *)v19 + 2);
        *(_OWORD *)uint64_t v21 = v22;
        ++v54;
      }
    }
  }
  uint64_t v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v52);
  if (v52[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
  }
  if (v61)
  {
    uint64_t v24 = (void **)__p;
    if (__p)
    {
      uint64_t v25 = v60;
      uint64_t v26 = __p;
      if (v60 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        uint64_t v26 = __p;
      }
      int64_t v60 = v24;
      operator delete(v26);
    }
    char v27 = v57;
    if (v57)
    {
      uint64_t v28 = v58;
      uint64_t v29 = v57;
      if (v58 != v57)
      {
        do
        {
          uint64_t v31 = (void *)*--v28;
          uint64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        uint64_t v29 = v57;
      }
      int64_t v58 = v27;
      operator delete(v29);
    }
    if (v53 != v56) {
      free(v53);
    }
  }
  return v23;
}

uint64_t mlir::mps::ReductionMaxOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reduction_max", 17, v2, v3, 0, 0);
  void *v4 = &unk_1EC9805A0;
  v4[12] = mlir::mps::ReductionMaxOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::ReductionMeanOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.reduction_mean", 18, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = 0x1E8EB8000uLL;
    {
      unint64_t v4 = 0x1E8EB8000;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 114;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = 0x1E8EB8000;
      }
    }
    a1[33] = *(void *)(v4 + 2008);
    return a1[32];
  }
  return result;
}

void mlir::mps::ReductionMeanOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v25[2] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  }
  if (a5) {
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties>((void *)a2) = a5;
  }
  __src = v25;
  uint64_t v24 = 0x200000000;
  unint64_t v9 = *a1;
  uint64_t v10 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v22, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v13 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v21, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionMeanOp::inferReturnTypes(v9, v10, 1, v22[0], v22[1], Dictionary, v13, v14, v21[0], v21[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v15 = __src;
  }
  uint64_t v16 = v24;
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  unint64_t v18 = v17 + v24;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v16)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v25) {
    free(__src);
  }
}

void mlir::mps::ReductionMeanOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  }
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v27;
  uint64_t v26 = 0x200000000;
  unint64_t v11 = *a1;
  uint64_t v12 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v15 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionMeanOp::inferReturnTypes(v11, v12, 1, v24[0], v24[1], Dictionary, v15, v16, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v17 = __src;
  }
  uint64_t v18 = v26;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27) {
    free(__src);
  }
}

BOOL mlir::mps::ReductionMeanOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v50[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v3, (const void **)"keep_dims", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v50)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  unint64_t v4 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) == 0)
  {
    uint64_t v6 = -1;
    goto LABEL_5;
  }
  uint64_t v5 = *((unsigned int *)v4 + 17);
  uint64_t v6 = v5 - 1;
  if ((unint64_t)(v5 - 1) <= 1)
  {
    if (v5 == 1)
    {
LABEL_31:
      int v32 = *((_DWORD *)v4 + 9);
      uint64_t v33 = v4 - 2;
      if (v32) {
        uint64_t v34 = (uint64_t)v33;
      }
      else {
        uint64_t v34 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    uint64_t v30 = v4[9] + 56;
    uint64_t v31 = 1;
    while (mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)v30 + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, v31))
    {
      ++v31;
      v30 += 32;
      if (v5 == v31)
      {
        unint64_t v4 = *this;
        goto LABEL_31;
      }
    }
    return 0;
  }
LABEL_5:
  int64_t v45 = (const void **)"operand group starting at #";
  __int16 v46 = 259;
  mlir::OpState::emitOpError(this, &v45, (uint64_t)v50);
  if (v50[0])
  {
    int v47 = 5;
    uint64_t v48 = 1;
    unint64_t v7 = &v47;
    __int16 v8 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v37 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        int64_t v42 = (char *)&v47 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v37, 24);
        __int16 v8 = (char *)v51;
        unint64_t v7 = (int *)((char *)v51 + v42);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v37, 24);
        unint64_t v7 = &v47;
        __int16 v8 = (char *)v51;
      }
    }
    unint64_t v9 = &v8[24 * v52];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)unint64_t v9 = v10;
    uint64_t v11 = ++v52;
    if (v50[0])
    {
      int v47 = 3;
      uint64_t v48 = (uint64_t)" requires 0 or 1 element, but found ";
      uint64_t v49 = 36;
      uint64_t v12 = &v47;
      uint64_t v13 = (char *)v51;
      if (v11 >= v53)
      {
        unint64_t v38 = v11 + 1;
        BOOL v39 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v39)
        {
          int64_t v43 = (char *)&v47 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          uint64_t v13 = (char *)v51;
          uint64_t v12 = (int *)((char *)v51 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          uint64_t v12 = &v47;
          uint64_t v13 = (char *)v51;
        }
      }
      int v14 = &v13[24 * v52];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)int v14 = v15;
      uint64_t v16 = ++v52;
      if (v50[0])
      {
        int v47 = 5;
        uint64_t v48 = v6;
        uint64_t v17 = &v47;
        uint64_t v18 = (char *)v51;
        if (v16 >= v53)
        {
          unint64_t v40 = v16 + 1;
          BOOL v41 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v41)
          {
            int64_t v44 = (char *)&v47 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
            uint64_t v18 = (char *)v51;
            uint64_t v17 = (int *)((char *)v51 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
            uint64_t v17 = &v47;
            uint64_t v18 = (char *)v51;
          }
        }
        uint64_t v19 = &v18[24 * v52];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        ++v52;
      }
    }
  }
  uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  }
  if (v59)
  {
    uint64_t v22 = (void **)__p;
    if (__p)
    {
      uint64_t v23 = v58;
      uint64_t v24 = __p;
      if (v58 != __p)
      {
        do
          uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      int64_t v58 = v22;
      operator delete(v24);
    }
    uint64_t v25 = v55;
    if (v55)
    {
      uint64_t v26 = v56;
      char v27 = v55;
      if (v56 != v55)
      {
        do
        {
          uint64_t v29 = (void *)*--v26;
          uint64_t v28 = v29;
          void *v26 = 0;
          if (v29) {
            operator delete[](v28);
          }
        }
        while (v26 != v25);
        char v27 = v55;
      }
      unint64_t v56 = v25;
      operator delete(v27);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
  return v21;
}

uint64_t mlir::mps::ReductionMeanOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reduction_mean", 18, v2, v3, 0, 0);
  void *v4 = &unk_1EC980AC8;
  v4[12] = mlir::mps::ReductionMeanOp::canonicalize;
  unint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReductionMinOpGenericAdaptorBase::ReductionMinOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (_OWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v11, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 40) = v8;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.reduction_min", 17, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x10uLL);
    void *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 113;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        long long v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[141];
    return a1[32];
  }
  return result;
}

void mlir::mps::ReductionMinOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  unint64_t v30[2] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a4;
  uint64_t v25 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v25, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  }
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v11);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  if (a6)
  {
    uint64_t v13 = mlir::Builder::getUnitAttr(a1, v11);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties>((void *)a2)
              + 8) = v13;
  }
  __src = v30;
  uint64_t v29 = 0x200000000;
  unint64_t v14 = *a1;
  long long v15 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v27, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v18 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v26, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionMinOp::inferReturnTypes(v14, v15, 1, v27[0], v27[1], Dictionary, v18, v19, v26[0], v26[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v20 = __src;
  }
  uint64_t v21 = v29;
  uint64_t v22 = *(unsigned int *)(a2 + 72);
  unint64_t v23 = v22 + v29;
  if (v23 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v23, 8);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  if (v21)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v22), v20, 8 * v21);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v22 + v21;
  if (__src != v30) {
    free(__src);
  }
}

uint64_t mlir::mps::ReductionMinOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reduction_min", 17, v2, v3, 0, 0);
  void *v4 = &unk_1EC9805F8;
  v4[12] = mlir::mps::ReductionMinOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 112;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[143];
    return a1[32];
  }
  return result;
}

void mlir::mps::ReductionOrOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  }
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v27;
  uint64_t v26 = 0x200000000;
  unint64_t v11 = *a1;
  uint64_t v12 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  long long v15 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionOrOp::inferReturnTypes(v11, v12, 1, v24[0], v24[1], Dictionary, v15, v16, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v17 = __src;
  }
  uint64_t v18 = v26;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27) {
    free(__src);
  }
}

uint64_t mlir::mps::ReductionOrOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reduction_or", 16, v2, v3, 0, 0);
  void *v4 = &unk_1EC9802E0;
  v4[12] = mlir::mps::ReductionOrOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 114;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[145];
    return a1[32];
  }
  return result;
}

void mlir::mps::ReductionProdOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  }
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v27;
  uint64_t v26 = 0x200000000;
  unint64_t v11 = *a1;
  uint64_t v12 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  long long v15 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionProdOp::inferReturnTypes(v11, v12, 1, v24[0], v24[1], Dictionary, v15, v16, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v17 = __src;
  }
  uint64_t v18 = v26;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27) {
    free(__src);
  }
}

void mlir::mps::ReductionProdOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  unint64_t v26[2] = *MEMORY[0x1E4F143B8];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(void *)(a2 + 192) = 0;
  uint64_t v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  __src = v26;
  uint64_t v25 = 0x200000000;
  uint64_t v13 = *a1;
  unint64_t v14 = *(mlir::MLIRContext **)a2;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v17 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionProdOp::inferReturnTypes(v13, v14, 1, a3, a4, Dictionary, v17, v18, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v19 = __src;
  }
  uint64_t v20 = v25;
  uint64_t v21 = *(unsigned int *)(a2 + 72);
  unint64_t v22 = v21 + v25;
  if (v22 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if (v20)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v21), v19, 8 * v20);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + v20;
  if (__src != v26) {
    free(__src);
  }
}

uint64_t mlir::mps::ReductionProdOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reduction_prod", 18, v2, v3, 0, 0);
  void *v4 = &unk_1EC980B20;
  v4[12] = mlir::mps::ReductionProdOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReductionSumOpGenericAdaptorBase::ReductionSumOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  int v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.reduction_sum", 17, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 113;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[147];
    return a1[32];
  }
  return result;
}

void mlir::mps::ReductionSumOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v25[2] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  }
  if (a5) {
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties>((void *)a2) = a5;
  }
  __src = v25;
  uint64_t v24 = 0x200000000;
  unint64_t v9 = *a1;
  uint64_t v10 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v22, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v13 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v21, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionSumOp::inferReturnTypes(v9, v10, 1, v22[0], v22[1], Dictionary, v13, v14, v21[0], v21[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v15 = __src;
  }
  uint64_t v16 = v24;
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  unint64_t v18 = v17 + v24;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v16)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v25) {
    free(__src);
  }
}

void mlir::mps::ReductionSumOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  }
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v27;
  uint64_t v26 = 0x200000000;
  unint64_t v11 = *a1;
  uint64_t v12 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  long long v15 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionSumOp::inferReturnTypes(v11, v12, 1, v24[0], v24[1], Dictionary, v15, v16, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v17 = __src;
  }
  uint64_t v18 = v26;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27) {
    free(__src);
  }
}

void mlir::mps::ReductionSumOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  unint64_t v26[2] = *MEMORY[0x1E4F143B8];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(void *)(a2 + 192) = 0;
  uint64_t v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  __src = v26;
  uint64_t v25 = 0x200000000;
  uint64_t v13 = *a1;
  int v14 = *(mlir::MLIRContext **)a2;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v17 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionSumOp::inferReturnTypes(v13, v14, 1, a3, a4, Dictionary, v17, v18, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v19 = __src;
  }
  uint64_t v20 = v25;
  uint64_t v21 = *(unsigned int *)(a2 + 72);
  unint64_t v22 = v21 + v25;
  if (v22 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if (v20)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v21), v19, 8 * v20);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + v20;
  if (__src != v26) {
    free(__src);
  }
}

uint64_t mlir::mps::ReductionSumOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reduction_sum", 17, v2, v3, 0, 0);
  void *v4 = &unk_1EC980650;
  v4[12] = mlir::mps::ReductionSumOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::ReductionVarianceOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  int v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.reduction_variance", 22, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unint64_t v4 = 0x1E8EB8000uLL;
    {
      unint64_t v4 = 0x1E8EB8000;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 118;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unint64_t v4 = 0x1E8EB8000;
      }
    }
    a1[33] = *(void *)(v4 + 2016);
    return a1[32];
  }
  return result;
}

void mlir::mps::ReductionVarianceOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v25[2] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  }
  if (a5) {
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties>((void *)a2) = a5;
  }
  __src = v25;
  uint64_t v24 = 0x200000000;
  unint64_t v9 = *a1;
  uint64_t v10 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v22, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v13 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v21, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionVarianceOp::inferReturnTypes(v9, v10, 1, v22[0], v22[1], Dictionary, v13, v14, v21[0], v21[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v15 = __src;
  }
  uint64_t v16 = v24;
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  unint64_t v18 = v17 + v24;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v16)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v25) {
    free(__src);
  }
}

void mlir::mps::ReductionVarianceOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  }
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v27;
  uint64_t v26 = 0x200000000;
  unint64_t v11 = *a1;
  uint64_t v12 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  long long v15 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReductionVarianceOp::inferReturnTypes(v11, v12, 1, v24[0], v24[1], Dictionary, v15, v16, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v17 = __src;
  }
  uint64_t v18 = v26;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27) {
    free(__src);
  }
}

uint64_t mlir::mps::ReductionVarianceOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reduction_variance", 22, v2, v3, 0, 0);
  void *v4 = &unk_1EC9816D0;
  v4[12] = mlir::mps::ReductionVarianceOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 116;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[149];
    return a1[32];
  }
  return result;
}

void mlir::mps::ReinterpretCastOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v23[2] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties>((void *)a2) = a4;
  __src = v23;
  uint64_t v22 = 0x200000000;
  unint64_t v7 = *a1;
  mlir::ValueRange::ValueRange(v20, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v10 = *(void ***)(a2 + 256);
  mlir::ValueRange::ValueRange(v19, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReinterpretCastOp::inferReturnTypes(v7, v11, v12, v20[0], v20[1], Dictionary, v10, v13, v19[0], v19[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v14 = __src;
  }
  uint64_t v15 = v22;
  uint64_t v16 = *(unsigned int *)(a2 + 72);
  unint64_t v17 = v16 + v22;
  if (v17 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  if (v15)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v16), v14, 8 * v15);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v16 + v15;
  if (__src != v23) {
    free(__src);
  }
}

{
  uint64_t v7;
  mlir::UnknownLoc *v8;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  void **v11;
  mlir::MLIRContext *v12;
  int v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20[2];
  unint64_t v21[2];
  void *__src;
  uint64_t v23;
  void v24[3];

  unint64_t v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  unint64_t v7 = mlir::TypeAttr::get(a4);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties>((void *)a2) = v7;
  __src = v24;
  unint64_t v23 = 0x200000000;
  __int16 v8 = *a1;
  mlir::ValueRange::ValueRange(v21, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v11 = *(void ***)(a2 + 256);
  mlir::ValueRange::ValueRange(v20, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReinterpretCastOp::inferReturnTypes(v8, v12, v13, v21[0], v21[1], Dictionary, v11, v14, v20[0], v20[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v15 = __src;
  }
  uint64_t v16 = v23;
  unint64_t v17 = *(unsigned int *)(a2 + 72);
  uint64_t v18 = v17 + v23;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v16)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v24) {
    free(__src);
  }
}

BOOL mlir::mps::ReinterpretCastOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v74[0] = v2;
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v3, (const void **)"result_element_type", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v74))return 0; {
    unint64_t v4 = *this;
    }
    int v5 = (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (*((_UNKNOWN **)*v5 + 17) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      uint64_t v48 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v5 + 8);
      v74[0] = v5;
      v74[1] = v48;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v74);
      if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)) {
        goto LABEL_113;
      }
      if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)) {
        goto LABEL_113;
      }
      if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)) {
        goto LABEL_113;
      }
      if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)) {
        goto LABEL_113;
      }
      if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64)) {
        goto LABEL_113;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)) {
        goto LABEL_113;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)) {
        goto LABEL_113;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)) {
        goto LABEL_113;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
        goto LABEL_113;
      }
      if (mlir::Type::isF16((mlir::Type *)&OperandRange)) {
        goto LABEL_113;
      }
      if (mlir::Type::isF32((mlir::Type *)&OperandRange)) {
        goto LABEL_113;
      }
      if (mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
        goto LABEL_113;
      }
      uint64_t v49 = *(void **)(*(void *)OperandRange + 136);
      if (v49 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id) {
        goto LABEL_113;
      }
      if (v49 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        uint64_t v68 = OperandRange;
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v68);
        if (mlir::Type::isF16((mlir::Type *)&Value)) {
          goto LABEL_113;
        }
        uint64_t v66 = OperandRange;
        uint64_t v67 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
        if (mlir::Type::isF32((mlir::Type *)&v67)) {
          goto LABEL_113;
        }
      }
    }
    unint64_t v6 = *v5;
    unint64_t v7 = (void *)*((void *)*v5 + 17);
    if (v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      uint64_t v63 = v5;
      uint64_t v64 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v6 + 8);
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v63);
      if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)
        || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
        || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
        || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
        || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64)
        || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
        || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
        || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
        || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
        || mlir::Type::isF16((mlir::Type *)&OperandRange)
        || mlir::Type::isF32((mlir::Type *)&OperandRange)
        || mlir::Type::isBF16((mlir::Type *)&OperandRange)
        || (unint64_t v9 = *(void **)(*(void *)OperandRange + 136),
            v9 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
        || v9 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
        && ((uint64_t v68 = OperandRange,
             uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v68),
             mlir::Type::isF16((mlir::Type *)&Value))
         || (uint64_t v66 = OperandRange,
             uint64_t v67 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66),
             mlir::Type::isF32((mlir::Type *)&v67))))
      {
        uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v5 + 8);
        long long v71 = v5;
        unint64_t v72 = (const char *)v10;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
        if (v11 >= 1) {
          goto LABEL_113;
        }
      }
    }
    __int16 v65 = 261;
    uint64_t v63 = (const void **)"operand";
    uint64_t v64 = 7;
    mlir::Operation::emitOpError(v4, &v63, (uint64_t)v74);
    if (v74[0])
    {
      LODWORD(v71) = 3;
      unint64_t v72 = " #";
      uint64_t v73 = 2;
      int v12 = &v71;
      int v13 = (char *)v75;
      if (v76 >= v77)
      {
        unint64_t v53 = v76 + 1;
        if (v75 <= &v71 && (char *)v75 + 24 * v76 > (char *)&v71)
        {
          int64_t v59 = (char *)&v71 - (unsigned char *)v75;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v53, 24);
          int v13 = (char *)v75;
          int v12 = (const void ***)((char *)v75 + v59);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v53, 24);
          int v12 = &v71;
          int v13 = (char *)v75;
        }
      }
      unint64_t v14 = &v13[24 * v76];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = v12[2];
      *(_OWORD *)unint64_t v14 = v15;
      uint64_t v16 = ++v76;
      if (v74[0])
      {
        LODWORD(v71) = 5;
        unint64_t v72 = 0;
        unint64_t v17 = &v71;
        uint64_t v18 = (char *)v75;
        if (v16 >= v77)
        {
          unint64_t v54 = v16 + 1;
          BOOL v55 = (char *)v75 + 24 * v16 > (char *)&v71;
          if (v75 <= &v71 && v55)
          {
            int64_t v60 = (char *)&v71 - (unsigned char *)v75;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v54, 24);
            uint64_t v18 = (char *)v75;
            unint64_t v17 = (const void ***)((char *)v75 + v60);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v54, 24);
            unint64_t v17 = &v71;
            uint64_t v18 = (char *)v75;
          }
        }
        uint64_t v19 = &v18[24 * v76];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = v17[2];
        *(_OWORD *)uint64_t v19 = v20;
        uint64_t v21 = ++v76;
        if (v74[0])
        {
          LODWORD(v71) = 3;
          unint64_t v72 = " must be unranked tensor of mps native type or complex values or ranked tensor type with rank equal to o"
                "r greater than 1, but got ";
          uint64_t v73 = 130;
          uint64_t v22 = &v71;
          unint64_t v23 = (char *)v75;
          if (v21 >= v77)
          {
            unint64_t v56 = v21 + 1;
            BOOL v57 = (char *)v75 + 24 * v21 > (char *)&v71;
            if (v75 <= &v71 && v57)
            {
              int64_t v61 = (char *)&v71 - (unsigned char *)v75;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v56, 24);
              unint64_t v23 = (char *)v75;
              uint64_t v22 = (const void ***)((char *)v75 + v61);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v56, 24);
              uint64_t v22 = &v71;
              unint64_t v23 = (char *)v75;
            }
          }
          uint64_t v24 = &v23[24 * v76];
          long long v25 = *(_OWORD *)v22;
          *((void *)v24 + 2) = v22[2];
          *(_OWORD *)uint64_t v24 = v25;
          ++v76;
          if (v74[0])
          {
            uint64_t v26 = &v71;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v71, (uint64_t)v5);
            char v27 = (char *)v75;
            if (v76 >= v77)
            {
              unint64_t v58 = v76 + 1;
              if (v75 <= &v71 && (char *)v75 + 24 * v76 > (char *)&v71)
              {
                int64_t v62 = (char *)&v71 - (unsigned char *)v75;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v58, 24);
                char v27 = (char *)v75;
                uint64_t v26 = (const void ***)((char *)v75 + v62);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v58, 24);
                uint64_t v26 = &v71;
                char v27 = (char *)v75;
              }
            }
            uint64_t v28 = &v27[24 * v76];
            long long v29 = *(_OWORD *)v26;
            *((void *)v28 + 2) = v26[2];
            *(_OWORD *)uint64_t v28 = v29;
            ++v76;
          }
        }
      }
    }
    char v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v74);
    if (v74[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v74);
    }
    if (v83)
    {
      uint64_t v31 = (void **)__p;
      if (__p)
      {
        int v32 = v82;
        uint64_t v33 = __p;
        if (v82 != __p)
        {
          do
            int v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          uint64_t v33 = __p;
        }
        uint64_t v82 = v31;
        operator delete(v33);
      }
      uint64_t v34 = v79;
      if (v79)
      {
        uint64_t v35 = v80;
        uint64_t v36 = v79;
        if (v80 != v79)
        {
          do
          {
            unint64_t v38 = (void *)*--v35;
            unint64_t v37 = v38;
            *uint64_t v35 = 0;
            if (v38) {
              operator delete[](v37);
            }
          }
          while (v35 != v34);
          uint64_t v36 = v79;
        }
        char v80 = v34;
        operator delete(v36);
      }
      if (v75 != v78) {
        free(v75);
      }
    }
    if (v30)
    {
LABEL_113:
      if (*((_DWORD *)*this + 9)) {
        uint64_t v50 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v50 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v50, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v63 = (const void **)"requires attribute 'result_element_type'";
    __int16 v65 = 259;
    mlir::OpState::emitOpError(this, &v63, (uint64_t)v74);
    uint64_t v39 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v74);
    if (v74[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v74);
    }
    if (v83)
    {
      unint64_t v40 = (void **)__p;
      if (__p)
      {
        BOOL v41 = v82;
        int64_t v42 = __p;
        if (v82 != __p)
        {
          do
            BOOL v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
          while (v41 != v40);
          int64_t v42 = __p;
        }
        uint64_t v82 = v40;
        operator delete(v42);
      }
      int64_t v43 = v79;
      if (v79)
      {
        int64_t v44 = v80;
        int64_t v45 = v79;
        if (v80 != v79)
        {
          do
          {
            int v47 = (void *)*--v44;
            __int16 v46 = v47;
            *int64_t v44 = 0;
            if (v47) {
              operator delete[](v46);
            }
          }
          while (v44 != v43);
          int64_t v45 = v79;
        }
        char v80 = v43;
        operator delete(v45);
      }
      if (v75 != v78) {
        free(v75);
      }
    }
  }
  return v39;
}

uint64_t mlir::mps::ReinterpretCastOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reinterpret_cast", 20, v2, v3, 0, 0);
  void *v4 = &unk_1EC981308;
  v4[12] = mlir::mps::ReinterpretCastOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::Relu6OpGenericAdaptorBase::Relu6OpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.relu6", 9, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::Relu6Op::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.relu6", 9, v2, v3, 0, 0);
  void *v4 = &unk_1EC9831A0;
  v4[12] = mlir::mps::Relu6Op::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReluGradOpGenericAdaptorBase::ReluGradOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.relu_grad", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::ReluGradOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.relu_grad", 13, v2, v3, 0, 0);
  void *v4 = &unk_1EC97F8E8;
  v4[12] = mlir::mps::ReluGradOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReluOpGenericAdaptorBase::ReluOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.relu", 8, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::ReluOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.relu", 8, v2, v3, 0, 0);
  void *v4 = &unk_1EC982A68;
  v4[12] = mlir::mps::ReluOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReshapeOpGenericAdaptorBase::ReshapeOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.reshape", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::ReshapeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      int64_t v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      uint64_t v26 = &v44;
      char v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          char v27 = (char *)v48;
          uint64_t v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v26 = &v44;
          char v27 = (char *)v48;
        }
      }
      uint64_t v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    char v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v55;
      int v32 = __p;
      if (v55 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        int v32 = __p;
      }
      BOOL v55 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    uint64_t v33 = v53;
    unint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "zero_is_copy", 0xCuLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 57;
    uint64_t v10 = &v44;
    uint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v11 = (char *)v48;
        uint64_t v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v10 = &v44;
        uint64_t v11 = (char *)v48;
      }
    }
    int v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)int v12 = v13;
    ++v49;
    if (v47[0])
    {
      unint64_t v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      long long v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          long long v15 = (char *)v48;
          unint64_t v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          unint64_t v14 = &v44;
          long long v15 = (char *)v48;
        }
      }
      uint64_t v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  uint64_t v18 = (void **)__p;
  if (__p)
  {
    uint64_t v19 = v55;
    long long v20 = __p;
    if (v55 != __p)
    {
      do
        uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      long long v20 = __p;
    }
    BOOL v55 = v18;
    operator delete(v20);
  }
  uint64_t v21 = v52;
  if (v52)
  {
    uint64_t v22 = v53;
    unint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      long long v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_41:
    unint64_t v23 = v52;
LABEL_42:
    unint64_t v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

uint64_t mlir::mps::ReshapeOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  int v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"zero_is_copy", 12, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 108;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[151];
    return a1[32];
  }
  return result;
}

void mlir::mps::ReshapeOp::build(mlir::Builder *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v16 = a5;
  uint64_t IntegerType = mlir::Builder::getIntegerType(a1, 0x40u, 1);
  unint64_t v11 = (void *)mlir::RankedTensorType::get((uint64_t)&v16, 1, IntegerType, 0);
  uint64_t v12 = v11;
  uint64_t v13 = *a2;
  if (v11) {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v16 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v12, v14, a4, 8 * (void)a5, 8, 1, 1);
  long long v15 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(a1, v13, &v16);
  mlir::mps::ReshapeOp::build((mlir::UnitAttr **)a1, (uint64_t)a2, a3, (uint64_t)v15 - 16, 0);
}

void mlir::mps::ReshapeOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v8);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v27;
  uint64_t v26 = 0x200000000;
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v12 = *(uint64_t **)(a2 + 256);
  uint64_t v13 = mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReshapeOp::inferReturnTypes((uint64_t)v13, v14, v15, v24[0], v24[1], Dictionary, v12, v16, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v17 = __src;
  }
  uint64_t v18 = v26;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27) {
    free(__src);
  }
}

void mlir::mps::ReshapeOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v13 = a5;
  uint64_t v14 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v14, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  if (a6)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v10);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  uint64_t v12 = *(unsigned int *)(a2 + 72);
  if (v12 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v12) = a3;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::mps::ReshapeOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a4;
  uint64_t v19 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  if (a5) {
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties>((void *)a2) = a5;
  }
  __src = v24;
  uint64_t v23 = 0x200000000;
  mlir::ValueRange::ValueRange(v21, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v9 = *(uint64_t **)(a2 + 256);
  uint64_t v10 = mlir::ValueRange::ValueRange(v20, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ReshapeOp::inferReturnTypes((uint64_t)v10, v11, v12, v21[0], v21[1], Dictionary, v9, v13, v20[0], v20[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v14 = __src;
  }
  uint64_t v15 = v23;
  uint64_t v16 = *(unsigned int *)(a2 + 72);
  unint64_t v17 = v16 + v23;
  if (v17 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  if (v15)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v16), v14, 8 * v15);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v16 + v15;
  if (__src != v24) {
    free(__src);
  }
}

BOOL mlir::mps::ReshapeOp::verifyInvariantsImpl(uint64_t **this)
{
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  unint64_t v7 = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v3, (const void **)"zero_is_copy", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v4 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::mps::ReshapeOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reshape", 11, v2, v3, 0, 0);
  void *v4 = &unk_1EC9D0970;
  v4[12] = mlir::mps::ReshapeOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

BOOL mlir::mps::ResizeGradientOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v98 = v6;
  if (!v6)
  {
    a3(v102, a4);
    if (v102[0])
    {
      LODWORD(v99) = 3;
      int64_t v100 = "expected DictionaryAttr to set properties";
      uint64_t v101 = 41;
      uint64_t v26 = &v99;
      char v27 = (char *)v103;
      if (v104 >= v105)
      {
        unint64_t v82 = v104 + 1;
        if (v103 <= &v99 && (char *)v103 + 24 * v104 > (char *)&v99)
        {
          int64_t v90 = (char *)&v99 - (unsigned char *)v103;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v82, 24);
          char v27 = (char *)v103;
          uint64_t v26 = (uint64_t *)((char *)v103 + v90);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v82, 24);
          uint64_t v26 = &v99;
          char v27 = (char *)v103;
        }
      }
      uint64_t v28 = &v27[24 * v104];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)uint64_t v28 = v29;
      ++v104;
      if (v102[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
      }
    }
    if (!v111) {
      return 0;
    }
    char v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v110;
      int v32 = __p;
      if (v110 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        int v32 = __p;
      }
      uint64_t v110 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v107;
    if (!v107) {
      goto LABEL_101;
    }
    uint64_t v33 = v108;
    uint64_t v23 = v107;
    if (v108 == v107)
    {
LABEL_100:
      int v108 = v21;
      operator delete(v23);
LABEL_101:
      if (v103 != v106) {
        free(v103);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_99:
    uint64_t v23 = v107;
    goto LABEL_100;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v98, "align_corners", 0xDuLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v102, a4);
      if (v102[0])
      {
        LODWORD(v99) = 3;
        uint64_t v101 = 58;
        uint64_t v10 = &v99;
        uint64_t v11 = (char *)v103;
        if (v104 >= v105)
        {
          unint64_t v83 = v104 + 1;
          if (v103 <= &v99 && (char *)v103 + 24 * v104 > (char *)&v99)
          {
            int64_t v91 = (char *)&v99 - (unsigned char *)v103;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v83, 24);
            uint64_t v11 = (char *)v103;
            uint64_t v10 = (uint64_t *)((char *)v103 + v91);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v83, 24);
            uint64_t v10 = &v99;
            uint64_t v11 = (char *)v103;
          }
        }
        uint64_t v12 = &v11[24 * v104];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)uint64_t v12 = v13;
        ++v104;
        if (v102[0])
        {
          uint64_t v14 = &v99;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v99, v9);
          uint64_t v15 = (char *)v103;
          if (v104 >= v105)
          {
            unint64_t v84 = v104 + 1;
            if (v103 <= &v99 && (char *)v103 + 24 * v104 > (char *)&v99)
            {
              int64_t v92 = (char *)&v99 - (unsigned char *)v103;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v84, 24);
              uint64_t v15 = (char *)v103;
              uint64_t v14 = (uint64_t *)((char *)v103 + v92);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v84, 24);
              uint64_t v14 = &v99;
              uint64_t v15 = (char *)v103;
            }
          }
          uint64_t v16 = &v15[24 * v104];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)uint64_t v16 = v17;
          ++v104;
          if (v102[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
          }
        }
      }
      if (!v111) {
        return 0;
      }
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v110;
        unint64_t v20 = __p;
        if (v110 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          unint64_t v20 = __p;
        }
        uint64_t v110 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v107;
      if (!v107) {
        goto LABEL_101;
      }
      uint64_t v22 = v108;
      uint64_t v23 = v107;
      if (v108 == v107) {
        goto LABEL_100;
      }
      do
      {
        long long v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_99;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v98, "center_result", 0xDuLL);
  if (v36)
  {
    uint64_t v37 = v36;
    if (*(_UNKNOWN **)(*(void *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v102, a4);
      if (v102[0])
      {
        LODWORD(v99) = 3;
        uint64_t v101 = 58;
        unint64_t v38 = &v99;
        unint64_t v39 = (char *)v103;
        if (v104 >= v105)
        {
          unint64_t v85 = v104 + 1;
          if (v103 <= &v99 && (char *)v103 + 24 * v104 > (char *)&v99)
          {
            int64_t v93 = (char *)&v99 - (unsigned char *)v103;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v85, 24);
            unint64_t v39 = (char *)v103;
            unint64_t v38 = (uint64_t *)((char *)v103 + v93);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v85, 24);
            unint64_t v38 = &v99;
            unint64_t v39 = (char *)v103;
          }
        }
        int64_t v40 = &v39[24 * v104];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = v38[2];
        *(_OWORD *)int64_t v40 = v41;
        ++v104;
        if (v102[0])
        {
          int64_t v42 = &v99;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v99, v37);
          uint64_t v43 = (char *)v103;
          if (v104 >= v105)
          {
            unint64_t v86 = v104 + 1;
            if (v103 <= &v99 && (char *)v103 + 24 * v104 > (char *)&v99)
            {
              int64_t v94 = (char *)&v99 - (unsigned char *)v103;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v86, 24);
              uint64_t v43 = (char *)v103;
              int64_t v42 = (uint64_t *)((char *)v103 + v94);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v86, 24);
              int64_t v42 = &v99;
              uint64_t v43 = (char *)v103;
            }
          }
          int v44 = &v43[24 * v104];
          long long v45 = *(_OWORD *)v42;
          *((void *)v44 + 2) = v42[2];
          *(_OWORD *)int v44 = v45;
          ++v104;
          if (v102[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
          }
        }
      }
      if (!v111) {
        return 0;
      }
      uint64_t v46 = (void **)__p;
      if (__p)
      {
        int v47 = v110;
        uint64_t v48 = __p;
        if (v110 != __p)
        {
          do
            int v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          uint64_t v48 = __p;
        }
        uint64_t v110 = v46;
        operator delete(v48);
      }
      uint64_t v21 = v107;
      if (!v107) {
        goto LABEL_101;
      }
      unsigned int v49 = v108;
      uint64_t v23 = v107;
      if (v108 == v107) {
        goto LABEL_100;
      }
      do
      {
        uint64_t v51 = (void *)*--v49;
        unsigned int v50 = v51;
        void *v49 = 0;
        if (v51) {
          operator delete[](v50);
        }
      }
      while (v49 != v21);
      goto LABEL_99;
    }
    a1[1] = v36;
  }
  uint64_t v52 = mlir::DictionaryAttr::get((uint64_t)&v98, "mode", 4uLL);
  if (!v52)
  {
    a3(v102, a4);
    if (v102[0])
    {
      LODWORD(v99) = 3;
      int64_t v100 = "expected key entry for mode in DictionaryAttr to set Properties.";
      uint64_t v101 = 64;
      uint64_t v68 = &v99;
      unsigned int v69 = (char *)v103;
      if (v104 >= v105)
      {
        unint64_t v88 = v104 + 1;
        if (v103 <= &v99 && (char *)v103 + 24 * v104 > (char *)&v99)
        {
          int64_t v96 = (char *)&v99 - (unsigned char *)v103;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v88, 24);
          unsigned int v69 = (char *)v103;
          uint64_t v68 = (uint64_t *)((char *)v103 + v96);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v88, 24);
          uint64_t v68 = &v99;
          unsigned int v69 = (char *)v103;
        }
      }
      unsigned int v70 = &v69[24 * v104];
      long long v71 = *(_OWORD *)v68;
      *((void *)v70 + 2) = v68[2];
      *(_OWORD *)unsigned int v70 = v71;
      ++v104;
      if (v102[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
      }
    }
    if (!v111) {
      return 0;
    }
    unint64_t v72 = (void **)__p;
    if (__p)
    {
      uint64_t v73 = v110;
      unsigned int v74 = __p;
      if (v110 != __p)
      {
        do
          uint64_t v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
        while (v73 != v72);
        unsigned int v74 = __p;
      }
      uint64_t v110 = v72;
      operator delete(v74);
    }
    uint64_t v21 = v107;
    if (!v107) {
      goto LABEL_101;
    }
    unint64_t v75 = v108;
    uint64_t v23 = v107;
    if (v108 == v107) {
      goto LABEL_100;
    }
    do
    {
      unsigned int v77 = (void *)*--v75;
      unsigned int v76 = v77;
      *unint64_t v75 = 0;
      if (v77) {
        operator delete[](v76);
      }
    }
    while (v75 != v21);
    goto LABEL_99;
  }
  uint64_t v53 = v52;
  if (*(_UNKNOWN **)(*(void *)v52 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id)
  {
    a3(v102, a4);
    if (v102[0])
    {
      LODWORD(v99) = 3;
      uint64_t v101 = 49;
      unint64_t v54 = &v99;
      BOOL v55 = (char *)v103;
      if (v104 >= v105)
      {
        unint64_t v87 = v104 + 1;
        if (v103 <= &v99 && (char *)v103 + 24 * v104 > (char *)&v99)
        {
          int64_t v95 = (char *)&v99 - (unsigned char *)v103;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v87, 24);
          BOOL v55 = (char *)v103;
          unint64_t v54 = (uint64_t *)((char *)v103 + v95);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v87, 24);
          unint64_t v54 = &v99;
          BOOL v55 = (char *)v103;
        }
      }
      char v56 = &v55[24 * v104];
      long long v57 = *(_OWORD *)v54;
      *((void *)v56 + 2) = v54[2];
      *(_OWORD *)char v56 = v57;
      ++v104;
      if (v102[0])
      {
        unint64_t v58 = &v99;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v99, v53);
        int64_t v59 = (char *)v103;
        if (v104 >= v105)
        {
          unint64_t v89 = v104 + 1;
          if (v103 <= &v99 && (char *)v103 + 24 * v104 > (char *)&v99)
          {
            int64_t v97 = (char *)&v99 - (unsigned char *)v103;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v89, 24);
            int64_t v59 = (char *)v103;
            unint64_t v58 = (uint64_t *)((char *)v103 + v97);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v89, 24);
            unint64_t v58 = &v99;
            int64_t v59 = (char *)v103;
          }
        }
        int64_t v60 = &v59[24 * v104];
        long long v61 = *(_OWORD *)v58;
        *((void *)v60 + 2) = v58[2];
        *(_OWORD *)int64_t v60 = v61;
        ++v104;
        if (v102[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
        }
      }
    }
    if (!v111) {
      return 0;
    }
    int64_t v62 = (void **)__p;
    if (__p)
    {
      uint64_t v63 = v110;
      uint64_t v64 = __p;
      if (v110 != __p)
      {
        do
          uint64_t v63 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v63 - 1);
        while (v63 != v62);
        uint64_t v64 = __p;
      }
      uint64_t v110 = v62;
      operator delete(v64);
    }
    uint64_t v21 = v107;
    if (!v107) {
      goto LABEL_101;
    }
    __int16 v65 = v108;
    uint64_t v23 = v107;
    if (v108 == v107) {
      goto LABEL_100;
    }
    do
    {
      uint64_t v67 = (void *)*--v65;
      uint64_t v66 = v67;
      *__int16 v65 = 0;
      if (v67) {
        operator delete[](v66);
      }
    }
    while (v65 != v21);
    goto LABEL_99;
  }
  a1[2] = v52;
  uint64_t v79 = mlir::DictionaryAttr::get((uint64_t)&v98, "nearest_rounding_mode", 0x15uLL);
  uint64_t v99 = v79;
  if (v79)
  {
    if (*(_UNKNOWN **)(*(void *)v79 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::NearestRoundingModeAttr,void>::id)
    {
      a3(v102, a4);
      mlir::InFlightDiagnostic::append<mlir::Attribute>(v80, &v99);
LABEL_108:
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v102);
      return 0;
    }
    a1[3] = v79;
  }
  long long v81 = (void *)mlir::DictionaryAttr::get((uint64_t)&v98, "operandSegmentSizes", 0x13uLL);
  if (!v81)
  {
    long long v81 = (void *)mlir::DictionaryAttr::get((uint64_t)&v98, "operand_segment_sizes", 0x15uLL);
    if (!v81)
    {
      a3(v102, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v102, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
      goto LABEL_108;
    }
  }
  return mlir::convertFromAttribute(a1 + 4, (const char *)4, v81, a3, a4) != 0;
}

uint64_t mlir::mps::ResizeGradientOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v41[6] = *MEMORY[0x1E4F143B8];
  unint64_t v38 = a1;
  unint64_t v39 = v41;
  uint64_t v40 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v38, (uint64_t)"align_corners", 13, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v7 = v40;
    }
    uint64_t v8 = (uint64_t *)((char *)v39 + 16 * v7);
    uint64_t *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v9 = a2[1];
  if (v9)
  {
    uint64_t v10 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"center_result", 13, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v13 = v40;
    }
    uint64_t v14 = (uint64_t *)((char *)v39 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"mode", 4, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v19 = v40;
    }
    unint64_t v20 = (uint64_t *)((char *)v39 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"nearest_rounding_mode", 21, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v40;
    if (v40 >= HIDWORD(v40))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
      unsigned int v25 = v40;
    }
    uint64_t v26 = (uint64_t *)((char *)v39 + 16 * v25);
    uint64_t *v26 = v22;
    v26[1] = v24;
    LODWORD(v40) = v40 + 1;
  }
  uint64_t v27 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);
  uint64_t v28 = mlir::Builder::getNamedAttr(&v38, (uint64_t)"operandSegmentSizes", 19, v27);
  uint64_t v30 = v29;
  unsigned int v31 = v40;
  if (v40 >= HIDWORD(v40))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 16);
    unsigned int v31 = v40;
  }
  int v32 = (uint64_t *)((char *)v39 + 16 * v31);
  *int v32 = v28;
  v32[1] = v30;
  BOOL v33 = __CFADD__(v40, 1);
  uint64_t v34 = (v40 + 1);
  LODWORD(v40) = v40 + 1;
  if (v33)
  {
    uint64_t DictionaryAttr = 0;
    uint64_t v36 = v39;
    if (v39 == v41) {
      return DictionaryAttr;
    }
    goto LABEL_24;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v38, (uint64_t *)v39, v34);
  uint64_t v36 = v39;
  if (v39 != v41) {
LABEL_24:
  }
    free(v36);
  return DictionaryAttr;
}

uint64_t mlir::mps::ResizeGradientOp::getInherentAttr(mlir::MLIRContext *a1, void *a2, char *__s1, size_t __n)
{
  uint64_t result = 0;
  switch(__n)
  {
    case 4uLL:
      if (memcmp(__s1, "mode", __n)) {
        return 0;
      }
      return a2[2];
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      return 0;
    case 0xDuLL:
      if (*(void *)__s1 == 0x6F635F6E67696C61 && *(void *)(__s1 + 5) == 0x7372656E726F635FLL) {
        return *a2;
      }
      if (*(void *)__s1 == 0x725F7265746E6563 && *(void *)(__s1 + 5) == 0x746C757365725F72) {
        return a2[1];
      }
      return 0;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n)) {
        return 0;
      }
      return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);
    case 0x15uLL:
      if (!memcmp(__s1, "nearest_rounding_mode", __n)) {
        return a2[3];
      }
      if (*(void *)__s1 == 0x5F646E617265706FLL
        && *((void *)__s1 + 1) == 0x5F746E656D676573
        && *(void *)(__s1 + 13) == 0x73657A69735F746ELL)
      {
        return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);
      }
      else
      {
        return 0;
      }
    default:
      return result;
  }
}

uint64_t mlir::mps::ResizeGradientOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, void *a4)
{
  uint64_t v6 = (void *)result;
  switch(a3)
  {
    case 4uLL:
      uint64_t result = memcmp(__s1, "mode", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id) {
            uint64_t v14 = a4;
          }
          else {
            uint64_t v14 = 0;
          }
          v6[2] = v14;
        }
        else
        {
          v6[2] = 0;
        }
      }
      break;
    case 0xDuLL:
      if (*(void *)__s1 == 0x6F635F6E67696C61 && *(void *)(__s1 + 5) == 0x7372656E726F635FLL)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v15 = a4;
          }
          else {
            uint64_t v15 = 0;
          }
          *(void *)uint64_t result = v15;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      else if (*(void *)__s1 == 0x725F7265746E6563 && *(void *)(__s1 + 5) == 0x746C757365725F72)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v9 = a4;
          }
          else {
            uint64_t v9 = 0;
          }
          *(void *)(result + 8) = v9;
        }
        else
        {
          *(void *)(result + 8) = 0;
        }
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!result) {
        goto LABEL_29;
      }
      break;
    case 0x15uLL:
      uint64_t result = memcmp(__s1, "nearest_rounding_mode", a3);
      if (result)
      {
        if (*(void *)__s1 == 0x5F646E617265706FLL
          && *((void *)__s1 + 1) == 0x5F746E656D676573
          && *(void *)(__s1 + 13) == 0x73657A69735F746ELL)
        {
LABEL_29:
          if (a4)
          {
            uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
            uint64_t v12 = result ? a4 : 0;
            uint64_t v17 = v12;
            if (result)
            {
              uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17);
              if (result == 4)
              {
                uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
                if (v13) {
                  uint64_t result = (uint64_t)memmove(v6 + 4, (const void *)result, 4 * v13);
                }
              }
            }
          }
        }
      }
      else if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NearestRoundingModeAttr,void>::id) {
          uint64_t v16 = a4;
        }
        else {
          uint64_t v16 = 0;
        }
        v6[3] = v16;
      }
      else
      {
        v6[3] = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::mps::ResizeGradientOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"align_corners", 13, *a2);
  }
  uint64_t v6 = a2[1];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"center_result", 13, v6);
  }
  uint64_t v7 = a2[2];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"mode", 4, v7);
  }
  uint64_t v8 = a2[3];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"nearest_rounding_mode", 21, v8);
  }
  uint64_t v9 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v9);
}

BOOL mlir::mps::ResizeGradientOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v8, (const void **)"align_corners", (const char *)0xD, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v9, (const void **)"center_result", (const char *)0xD, a3, a4))
    {
      uint64_t v10 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps21(v10, (const void **)"mode", (const char *)4, a3, a4))
      {
        uint64_t v11 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps39(v11, (const void **)"nearest_rounding_mode", (const char *)0x15, a3, a4))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t mlir::mps::__mlir_ods_local_attr_constraint_MPSOps39(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1
    || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NearestRoundingModeAttr,void>::id)
  {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    uint64_t v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    uint64_t v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v8 = (char *)v35;
        uint64_t v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        uint64_t v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      uint64_t v29 = a2;
      uint64_t v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        uint64_t v30 = "' failed to satisfy constraint: valid NearestRoundingMode";
        uint64_t v31 = 57;
        uint64_t v11 = &v29;
        uint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v12 = (char *)v35;
            uint64_t v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            uint64_t v12 = (char *)v35;
          }
        }
        uint64_t v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)uint64_t v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      uint64_t v17 = v42;
      uint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      int64_t v42 = v16;
      operator delete(v18);
    }
    unsigned int v19 = v39;
    if (v39)
    {
      unint64_t v20 = v40;
      uint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = (void *)*--v20;
          uint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v39;
      }
      uint64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

BOOL mlir::mps::ResizeGradientOp::readProperties(uint64_t a1, void *a2)
{
  v10[24] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 1)
    || !mlir::DialectBytecodeReader::readAttribute<mlir::mps::SamplingModeAttr>(a1, v3 + 2)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::NearestRoundingModeAttr>(a1, v3 + 3))
  {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v9 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v9)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v9) >= 5)
    {
      uint64_t v7 = "size mismatch for operand/result_segment_size";
      __int16 v8 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v10, a1, &v7);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v10);
      return 0;
    }
    uint64_t v4 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v9);
    if (v5) {
      memmove(v3 + 4, v4, 4 * v5);
    }
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 8, (const char *)4);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x30uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 115;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[153];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::mps::SamplingModeAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    __int16 v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)__int16 v8 = v9;
    ++v47;
  }
  uint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::SamplingModeAttr]";
  unint64_t v41 = 77;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    uint64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unsigned int v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unsigned int v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            unsigned int v19 = (char *)v46;
          }
        }
        unint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)unint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      uint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      uint64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = (void *)*--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      uint64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::NearestRoundingModeAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::NearestRoundingModeAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::NearestRoundingModeAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    __int16 v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)__int16 v8 = v9;
    ++v47;
  }
  uint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::NearestRoundingModeAttr]";
  unint64_t v41 = 84;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    uint64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unsigned int v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unsigned int v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            unsigned int v19 = (char *)v46;
          }
        }
        unint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)unint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      uint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      uint64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = (void *)*--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      uint64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::mps::ResizeGradientOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)v4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 8));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(v4 + 16));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 24));
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) <= 5)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
    uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 32, 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 32), 4);
  }
  return result;
}

uint64_t mlir::mps::ResizeGradientOp::getNearestRoundingMode(mlir::mps::ResizeGradientOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2) {
    return *(unsigned int *)(v2 + 8) | 0x100000000;
  }
  else {
    return 0;
  }
}

void mlir::mps::ResizeGradientOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, char a9, uint64_t a10)
{
  uint64_t v12 = a6;
  v45[2] = *MEMORY[0x1E4F143B8];
  uint64_t v38 = a4;
  uint64_t v39 = a3;
  uint64_t v36 = a6;
  uint64_t v37 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v39, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v38, 1);
  if (a5) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v37, 1);
  }
  if (v12)
  {
    mlir::OperationState::addOperands(a2, (uint64_t)&v36, 1);
    LODWORD(v12) = v36 != 0;
  }
  BOOL v16 = v37 != 0;
  uint64_t v17 = mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties>((void *)a2);
  *(void *)(v17 + 32) = 0x100000001;
  *(_DWORD *)(v17 + 40) = v16;
  *(_DWORD *)(v17 + 44) = v12;
  uint64_t v18 = *a1;
  unsigned int v40 = a7;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v18);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id;
  uint64_t v44 = (uint64_t)v18;
  uint64_t v20 = mlir::StorageUniquer::get<mlir::mps::detail::SamplingModeAttrStorage,mlir::mps::SamplingMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23SamplingModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16SamplingModeAttrEJNS2_12SamplingModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id, &v40);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = v20;
  if (a8)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v21);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties>((void *)a2)
              + 8) = UnitAttr;
    uint64_t v22 = a10;
    if (!a9)
    {
LABEL_7:
      if (!v22) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v22 = a10;
    if (!a9) {
      goto LABEL_7;
    }
  }
  uint64_t v35 = mlir::Builder::getUnitAttr(a1, v21);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties>((void *)a2) = v35;
  if (v22) {
LABEL_8:
  }
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties>((void *)a2)
              + 24) = v22;
LABEL_9:
  __src = v45;
  uint64_t v44 = 0x200000000;
  uint64_t v23 = *a1;
  mlir::ValueRange::ValueRange((unint64_t *)v42, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v26 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v41, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ResizeGradientOp::inferReturnTypes(v23, v27, v28, v42[0], (unint64_t)v42[1], Dictionary, v26, v29, v41[0], v41[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v30 = __src;
  }
  uint64_t v31 = v44;
  uint64_t v32 = *(unsigned int *)(a2 + 72);
  unint64_t v33 = v32 + v44;
  if (v33 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v33, 8);
    LODWORD(v32) = *(_DWORD *)(a2 + 72);
  }
  if (v31)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v32), v30, 8 * v31);
    LODWORD(v32) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v32 + v31;
  if (__src != v45) {
    free(__src);
  }
}

BOOL mlir::mps::ResizeGradientOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = v3[1];
    uint64_t v7 = v3[3];
    v54[0] = v2;
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps21(v4, (const void **)"mode", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps21(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v54))return 0; {
    v54[0] = *this;
    }
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v6, (const void **)"center_result", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v54))return 0; {
    v54[0] = *this;
    }
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v5, (const void **)"align_corners", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v54))return 0; {
    v54[0] = *this;
    }
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps39(v7, (const void **)"nearest_rounding_mode", (const char *)0x15, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps39(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v54))return 0; {
    unsigned int v51 = 0;
    }
    unint64_t v8 = *((unsigned int *)*this + 11);
    uint64_t v9 = (uint64_t)&(*this)[2 * ((v8 >> 23) & 1) + 8];
    if (!HIBYTE(*((_DWORD *)*this + 11))) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(unsigned int *)(v9 + 32);
    if ((v8 & 0x800000) != 0)
    {
      uint64_t v11 = (*this)[9];
      if (v10) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v11 = 0;
      if (v10)
      {
LABEL_13:
        uint64_t v12 = 0;
        uint64_t v13 = v11 + 24;
        while (1)
        {
          unint64_t v14 = *this;
          unint64_t v15 = *(void *)(*(void *)v13 + 8) & 0xFFFFFFFFFFFFFFF8;
          unsigned int v51 = v12 + 1;
          if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v14, v15, (const void **)"operand", (const void **)7, v12))return 0; {
          ++v12;
          }
          v13 += 32;
          if (v10 == v12)
          {
            uint64_t ODSOperands = mlir::pdl_interp::RecordMatchOp::getODSOperands((mlir::pdl_interp::RecordMatchOp *)this, 1u);
            if (v17) {
              goto LABEL_38;
            }
            goto LABEL_41;
          }
        }
      }
    }
    LODWORD(v12) = 0;
    uint64_t ODSOperands = mlir::pdl_interp::RecordMatchOp::getODSOperands((mlir::pdl_interp::RecordMatchOp *)this, 1u);
    if (v17)
    {
LABEL_38:
      uint64_t v27 = v17;
      uint64_t v28 = ODSOperands + 24;
      do
      {
        int v29 = *this;
        uint64_t v30 = (const void **)(*(void *)(*(void *)v28 + 8) & 0xFFFFFFFFFFFFFFF8);
        unsigned int v51 = v12 + 1;
        if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(v29, v30, (const void **)"operand", 7, v12))return 0; {
        v28 += 32;
        }
        LODWORD(v12) = v12 + 1;
      }
      while (--v27);
    }
LABEL_41:
    uint64_t v31 = mlir::pdl_interp::RecordMatchOp::getODSOperands((mlir::pdl_interp::RecordMatchOp *)this, 2u);
    uint64_t v33 = v32;
    if (v32 >= 2) {
      goto LABEL_45;
    }
    if (v32)
    {
      uint64_t v34 = *(void *)(v31 + 24);
      uint64_t v35 = *this;
      uint64_t v36 = (const void **)(*(void *)(v34 + 8) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v37 = v51++;
      if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps45(v35, v36, (const void **)"operand", 7, v37))return 0; {
    }
      }
    uint64_t v38 = mlir::pdl_interp::RecordMatchOp::getODSOperands((mlir::pdl_interp::RecordMatchOp *)this, 3u);
    uint64_t v33 = v39;
    if (v39 >= 2)
    {
LABEL_45:
      v52[0] = (const void **)"operand group starting at #";
      __int16 v53 = 259;
      mlir::OpState::emitOpError(this, v52, (uint64_t)v54);
      uint64_t v40 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)v54, &v51);
      uint64_t v41 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v40, " requires 0 or 1 element, but found ");
      uint64_t v50 = v33;
      uint64_t v42 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v41, &v50);
      uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v42);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v54);
      return v18;
    }
    if (v39)
    {
      uint64_t v43 = *(void *)(v38 + 24);
      uint64_t v44 = *this;
      uint64_t v45 = (const void **)(*(void *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v46 = v51++;
      if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps45(v44, v45, (const void **)"operand", 7, v46))return 0; {
    }
      }
    if (*((_DWORD *)*this + 9)) {
      uint64_t v47 = (uint64_t)(*this - 2);
    }
    else {
      uint64_t v47 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v47, 0);
    return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
  }
  else
  {
    v52[0] = (const void **)"requires attribute 'mode'";
    __int16 v53 = 259;
    mlir::OpState::emitOpError(this, v52, (uint64_t)v54);
    uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
    if (v54[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
    }
    if (v61)
    {
      unsigned int v19 = (void **)__p;
      if (__p)
      {
        uint64_t v20 = v60;
        long long v21 = __p;
        if (v60 != __p)
        {
          do
            uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          long long v21 = __p;
        }
        int64_t v60 = v19;
        operator delete(v21);
      }
      uint64_t v22 = v57;
      if (v57)
      {
        uint64_t v23 = v58;
        uint64_t v24 = v57;
        if (v58 != v57)
        {
          do
          {
            unint64_t v26 = (void *)*--v23;
            unint64_t v25 = v26;
            *uint64_t v23 = 0;
            if (v26) {
              operator delete[](v25);
            }
          }
          while (v23 != v22);
          uint64_t v24 = v57;
        }
        unint64_t v58 = v22;
        operator delete(v24);
      }
      if (v55 != &v56) {
        free(v55);
      }
    }
  }
  return v18;
}

uint64_t mlir::mps::__mlir_ods_local_type_constraint_MPSOps45(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (_UNKNOWN **)*a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    goto LABEL_4;
  }
  v69[0] = a2;
  v69[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
  int ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v69);
  uint64_t v10 = (_UNKNOWN **)*a2;
  if (!ArgOperands) {
    goto LABEL_4;
  }
  unint64_t v58 = a2;
  uint64_t v59 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v58);
  uint64_t v10 = (_UNKNOWN **)*a2;
  if (!v12)
  {
    uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
    uint64_t v66 = a2;
    uint64_t v67 = v18;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66);
    if (mlir::Type::isF16((mlir::Type *)&OperandRange)
      || mlir::Type::isF32((mlir::Type *)&OperandRange)
      || mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      return 1;
    }
    uint64_t v10 = (_UNKNOWN **)*a2;
    if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      goto LABEL_15;
    }
  }
  else
  {
LABEL_4:
    if (v10[17] != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      goto LABEL_15;
    }
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
  v64[0] = a2;
  v64[1] = v13;
  int v14 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v64);
  uint64_t v10 = (_UNKNOWN **)*a2;
  if (v14)
  {
    uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
    v63[0] = a2;
    v63[1] = v15;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v63);
    uint64_t v10 = (_UNKNOWN **)*a2;
    if (v16 == 1)
    {
      uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
      v62[0] = a2;
      v62[1] = v17;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v62);
      if (mlir::Type::isF16((mlir::Type *)&OperandRange)
        || mlir::Type::isF32((mlir::Type *)&OperandRange)
        || mlir::Type::isBF16((mlir::Type *)&OperandRange))
      {
        return 1;
      }
      uint64_t v10 = (_UNKNOWN **)*a2;
    }
  }
LABEL_15:
  if (v10[17] == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    uint64_t v46 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
    v61[0] = a2;
    v61[1] = v46;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v61);
    if (mlir::Type::isF16((mlir::Type *)&OperandRange)
      || mlir::Type::isF32((mlir::Type *)&OperandRange)
      || mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      return 1;
    }
  }
  __int16 v60 = 261;
  unint64_t v58 = a3;
  uint64_t v59 = a4;
  mlir::Operation::emitOpError(a1, &v58, (uint64_t)v69);
  if (v69[0])
  {
    LODWORD(v66) = 3;
    uint64_t v67 = (uint64_t)" #";
    uint64_t v68 = 2;
    unsigned int v19 = &v66;
    uint64_t v20 = (char *)v70;
    if (v71 >= v72)
    {
      unint64_t v48 = v71 + 1;
      if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
      {
        int64_t v54 = (char *)&v66 - (unsigned char *)v70;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v48, 24);
        uint64_t v20 = (char *)v70;
        unsigned int v19 = (const void ***)((char *)v70 + v54);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v48, 24);
        unsigned int v19 = &v66;
        uint64_t v20 = (char *)v70;
      }
    }
    long long v21 = &v20[24 * v71];
    long long v22 = *(_OWORD *)v19;
    *((void *)v21 + 2) = v19[2];
    *(_OWORD *)long long v21 = v22;
    uint64_t v23 = ++v71;
    if (v69[0])
    {
      LODWORD(v66) = 5;
      uint64_t v67 = a5;
      uint64_t v24 = &v66;
      unint64_t v25 = (char *)v70;
      if (v23 >= v72)
      {
        unint64_t v49 = v23 + 1;
        BOOL v50 = (char *)v70 + 24 * v23 > (char *)&v66;
        if (v70 <= &v66 && v50)
        {
          int64_t v55 = (char *)&v66 - (unsigned char *)v70;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v49, 24);
          unint64_t v25 = (char *)v70;
          uint64_t v24 = (const void ***)((char *)v70 + v55);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v49, 24);
          uint64_t v24 = &v66;
          unint64_t v25 = (char *)v70;
        }
      }
      unint64_t v26 = &v25[24 * v71];
      long long v27 = *(_OWORD *)v24;
      *((void *)v26 + 2) = v24[2];
      *(_OWORD *)unint64_t v26 = v27;
      uint64_t v28 = ++v71;
      if (v69[0])
      {
        LODWORD(v66) = 3;
        uint64_t v67 = (uint64_t)" must be 0D tensor of floating point values or 1D tensor of floating point values or unranked ten"
                       "sor of floating point values, but got ";
        uint64_t v68 = 135;
        int v29 = &v66;
        uint64_t v30 = (char *)v70;
        if (v28 >= v72)
        {
          unint64_t v51 = v28 + 1;
          BOOL v52 = (char *)v70 + 24 * v28 > (char *)&v66;
          if (v70 <= &v66 && v52)
          {
            int64_t v56 = (char *)&v66 - (unsigned char *)v70;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v51, 24);
            uint64_t v30 = (char *)v70;
            int v29 = (const void ***)((char *)v70 + v56);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v51, 24);
            int v29 = &v66;
            uint64_t v30 = (char *)v70;
          }
        }
        uint64_t v31 = &v30[24 * v71];
        long long v32 = *(_OWORD *)v29;
        *((void *)v31 + 2) = v29[2];
        *(_OWORD *)uint64_t v31 = v32;
        ++v71;
        if (v69[0])
        {
          uint64_t v33 = &v66;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v66, (uint64_t)a2);
          uint64_t v34 = (char *)v70;
          if (v71 >= v72)
          {
            unint64_t v53 = v71 + 1;
            if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
            {
              int64_t v57 = (char *)&v66 - (unsigned char *)v70;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v53, 24);
              uint64_t v34 = (char *)v70;
              uint64_t v33 = (const void ***)((char *)v70 + v57);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v53, 24);
              uint64_t v33 = &v66;
              uint64_t v34 = (char *)v70;
            }
          }
          uint64_t v35 = &v34[24 * v71];
          long long v36 = *(_OWORD *)v33;
          *((void *)v35 + 2) = v33[2];
          *(_OWORD *)uint64_t v35 = v36;
          ++v71;
        }
      }
    }
  }
  uint64_t v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v69);
  if (v69[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v69);
  }
  if (v78)
  {
    uint64_t v38 = (void **)__p;
    if (__p)
    {
      unint64_t v39 = v77;
      uint64_t v40 = __p;
      if (v77 != __p)
      {
        do
          unint64_t v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        uint64_t v40 = __p;
      }
      unsigned int v77 = v38;
      operator delete(v40);
    }
    uint64_t v41 = v74;
    if (v74)
    {
      uint64_t v42 = v75;
      uint64_t v43 = v74;
      if (v75 != v74)
      {
        do
        {
          uint64_t v45 = (void *)*--v42;
          uint64_t v44 = v45;
          *uint64_t v42 = 0;
          if (v45) {
            operator delete[](v44);
          }
        }
        while (v42 != v41);
        uint64_t v43 = v74;
      }
      unint64_t v75 = v41;
      operator delete(v43);
    }
    if (v70 != v73) {
      free(v70);
    }
  }
  return v37;
}

uint64_t mlir::mps::ResizeGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.resize_gradient", 19, v2, v3, 0, 0);
  void *v4 = &unk_1EC980DE0;
  v4[12] = mlir::mps::ResizeGradientOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ResizeOpGenericAdaptorBase::ResizeOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (long long *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v12, v7, v6);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *v5;
  long long v9 = v5[1];
  *(_OWORD *)(a1 + 56) = v5[2];
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v12;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.resize", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

unint64_t mlir::mps::detail::ResizeOpGenericAdaptorBase::getODSOperandIndexAndLength(mlir::mps::detail::ResizeOpGenericAdaptorBase *this, unsigned int a2)
{
  __int16 v2 = (unsigned int *)((char *)this + 56);
  if (!a2) {
    return (unint64_t)*v2 << 32;
  }
  if (a2 >= 8)
  {
    uint64_t v3 = a2 & 0xFFFFFFF8;
    unint64_t v6 = (int32x4_t *)((char *)this + 72);
    int32x4_t v7 = 0uLL;
    uint64_t v8 = v3;
    int32x4_t v9 = 0uLL;
    do
    {
      int32x4_t v7 = vaddq_s32(v6[-1], v7);
      int32x4_t v9 = vaddq_s32(*v6, v9);
      v6 += 2;
      v8 -= 8;
    }
    while (v8);
    unsigned int v4 = vaddvq_s32(vaddq_s32(v9, v7));
    if (v3 == a2) {
      return v4 | ((unint64_t)v2[a2] << 32);
    }
  }
  else
  {
    uint64_t v3 = 0;
    unsigned int v4 = 0;
  }
  uint64_t v10 = (int *)((char *)this + 4 * v3 + 56);
  uint64_t v11 = a2 - v3;
  do
  {
    int v12 = *v10++;
    v4 += v12;
    --v11;
  }
  while (v11);
  return v4 | ((unint64_t)v2[a2] << 32);
}

uint64_t mlir::mps::ResizeOp::getInherentAttr(mlir::MLIRContext *a1, void *a2, char *__s1, size_t __n)
{
  uint64_t result = 0;
  switch(__n)
  {
    case 4uLL:
      if (memcmp(__s1, "mode", __n)) {
        return 0;
      }
      return a2[2];
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      return 0;
    case 0xDuLL:
      if (*(void *)__s1 == 0x6F635F6E67696C61 && *(void *)(__s1 + 5) == 0x7372656E726F635FLL) {
        return *a2;
      }
      if (*(void *)__s1 == 0x725F7265746E6563 && *(void *)(__s1 + 5) == 0x746C757365725F72) {
        return a2[1];
      }
      return 0;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n)) {
        return 0;
      }
      return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);
    case 0x15uLL:
      if (!memcmp(__s1, "nearest_rounding_mode", __n)) {
        return a2[3];
      }
      if (*(void *)__s1 == 0x5F646E617265706FLL
        && *((void *)__s1 + 1) == 0x5F746E656D676573
        && *(void *)(__s1 + 13) == 0x73657A69735F746ELL)
      {
        return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 4), 4);
      }
      else
      {
        return 0;
      }
    default:
      return result;
  }
}

uint64_t mlir::mps::ResizeOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, void *a4)
{
  unint64_t v6 = (void *)result;
  switch(a3)
  {
    case 4uLL:
      uint64_t result = memcmp(__s1, "mode", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id) {
            int v14 = a4;
          }
          else {
            int v14 = 0;
          }
          v6[2] = v14;
        }
        else
        {
          v6[2] = 0;
        }
      }
      break;
    case 0xDuLL:
      if (*(void *)__s1 == 0x6F635F6E67696C61 && *(void *)(__s1 + 5) == 0x7372656E726F635FLL)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v15 = a4;
          }
          else {
            uint64_t v15 = 0;
          }
          *(void *)uint64_t result = v15;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      else if (*(void *)__s1 == 0x725F7265746E6563 && *(void *)(__s1 + 5) == 0x746C757365725F72)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            int32x4_t v9 = a4;
          }
          else {
            int32x4_t v9 = 0;
          }
          *(void *)(result + 8) = v9;
        }
        else
        {
          *(void *)(result + 8) = 0;
        }
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!result) {
        goto LABEL_29;
      }
      break;
    case 0x15uLL:
      uint64_t result = memcmp(__s1, "nearest_rounding_mode", a3);
      if (result)
      {
        if (*(void *)__s1 == 0x5F646E617265706FLL
          && *((void *)__s1 + 1) == 0x5F746E656D676573
          && *(void *)(__s1 + 13) == 0x73657A69735F746ELL)
        {
LABEL_29:
          if (a4)
          {
            uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
            int v12 = result ? a4 : 0;
            uint64_t v17 = v12;
            if (result)
            {
              uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17);
              if (result == 4)
              {
                uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
                if (v13) {
                  uint64_t result = (uint64_t)memmove(v6 + 4, (const void *)result, 4 * v13);
                }
              }
            }
          }
        }
      }
      else if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NearestRoundingModeAttr,void>::id) {
          uint64_t v16 = a4;
        }
        else {
          uint64_t v16 = 0;
        }
        v6[3] = v16;
      }
      else
      {
        v6[3] = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::mps::ResizeOp::readProperties(uint64_t a1, void *a2)
{
  v10[24] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 1)
    || !mlir::DialectBytecodeReader::readAttribute<mlir::mps::SamplingModeAttr>(a1, v3 + 2)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::NearestRoundingModeAttr>(a1, v3 + 3))
  {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v9 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v9)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v9) >= 5)
    {
      int32x4_t v7 = "size mismatch for operand/result_segment_size";
      __int16 v8 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v10, a1, &v7);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v10);
      return 0;
    }
    unsigned int v4 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v9);
    if (v5) {
      memmove(v3 + 4, v4, 4 * v5);
    }
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 8, (const char *)4);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x30uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 107;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[155];
    return a1[32];
  }
  return result;
}

void mlir::mps::ResizeOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, char a9, uint64_t a10)
{
  uint64_t v12 = a6;
  v45[2] = *MEMORY[0x1E4F143B8];
  uint64_t v38 = a4;
  uint64_t v39 = a3;
  uint64_t v36 = a6;
  uint64_t v37 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v39, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v38, 1);
  if (a5) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v37, 1);
  }
  if (v12)
  {
    mlir::OperationState::addOperands(a2, (uint64_t)&v36, 1);
    LODWORD(v12) = v36 != 0;
  }
  BOOL v16 = v37 != 0;
  uint64_t v17 = mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties>((void *)a2);
  *(void *)(v17 + 32) = 0x100000001;
  *(_DWORD *)(v17 + 40) = v16;
  *(_DWORD *)(v17 + 44) = v12;
  uint64_t v18 = *a1;
  unsigned int v40 = a7;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v18);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id;
  uint64_t v44 = (uint64_t)v18;
  uint64_t v20 = mlir::StorageUniquer::get<mlir::mps::detail::SamplingModeAttrStorage,mlir::mps::SamplingMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23SamplingModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16SamplingModeAttrEJNS2_12SamplingModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id, &v40);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = v20;
  if (a8)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v21);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties>((void *)a2)
              + 8) = UnitAttr;
    uint64_t v22 = a10;
    if (!a9)
    {
LABEL_7:
      if (!v22) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v22 = a10;
    if (!a9) {
      goto LABEL_7;
    }
  }
  uint64_t v35 = mlir::Builder::getUnitAttr(a1, v21);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties>((void *)a2) = v35;
  if (v22) {
LABEL_8:
  }
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties>((void *)a2)
              + 24) = v22;
LABEL_9:
  __src = v45;
  uint64_t v44 = 0x200000000;
  uint64_t v23 = *a1;
  mlir::ValueRange::ValueRange((unint64_t *)v42, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v26 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v41, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ResizeOp::inferReturnTypes(v23, v27, v28, v42[0], (unint64_t)v42[1], Dictionary, v26, v29, v41[0], v41[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v30 = __src;
  }
  uint64_t v31 = v44;
  uint64_t v32 = *(unsigned int *)(a2 + 72);
  unint64_t v33 = v32 + v44;
  if (v33 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v33, 8);
    LODWORD(v32) = *(_DWORD *)(a2 + 72);
  }
  if (v31)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v32), v30, 8 * v31);
    LODWORD(v32) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v32 + v31;
  if (__src != v45) {
    free(__src);
  }
}

uint64_t mlir::mps::ResizeOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unsigned int v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.resize", 10, v2, v3, 0, 0);
  void *v4 = &unk_1EC983670;
  v4[12] = mlir::mps::ResizeOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ReverseOpGenericAdaptorBase::ReverseOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.reverse", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::ReverseOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v22[2] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v14, 1);
  }
  __src = v21;
  uint64_t v20 = 0x200000000;
  uint64_t v6 = *(void *)a2;
  mlir::ValueRange::ValueRange(&v17, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v16, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v22[0] = v17;
  v22[1] = v18;
  if (v18)
  {
    unint64_t v8 = *(void *)(mlir::ValueRange::dereference_iterator(v22, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v9 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v21, v20 + 1, 8);
      unsigned int v9 = v20;
    }
    *((void *)__src + v9) = v8;
    unsigned int v10 = v20 + 1;
    LODWORD(v20) = v10;
    uint64_t v11 = __src;
    uint64_t v12 = *(unsigned int *)(a2 + 72);
    unint64_t v13 = v12 + v10;
    if (v13 > *(unsigned int *)(a2 + 76))
    {
LABEL_7:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v13, 8);
      LODWORD(v12) = *(_DWORD *)(a2 + 72);
    }
  }
  else
  {
    if (!mlir::emitOptionalError<char const(&)[39]>(v6, 1, "invalid number of operands")) {
      llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
    }
    unsigned int v10 = v20;
    uint64_t v11 = __src;
    uint64_t v12 = *(unsigned int *)(a2 + 72);
    unint64_t v13 = v12 + v20;
    if (v13 > *(unsigned int *)(a2 + 76)) {
      goto LABEL_7;
    }
  }
  if (v10)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v12), v11, 8 * v10);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v12 + v10;
  if (__src != v21) {
    free(__src);
  }
}

void mlir::mps::ReverseOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  unint64_t v24[2] = *MEMORY[0x1E4F143B8];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(void *)(a2 + 192) = 0;
  uint64_t v11 = *(unsigned int *)(a2 + 120);
  if (a6 + v11 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v11, 16);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v11), a5, 16 * a6);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v11 + a6;
  __src = v23;
  uint64_t v22 = 0x200000000;
  uint64_t v12 = *(void *)a2;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v20, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v24[0] = a3;
  v24[1] = a4;
  if (a4)
  {
    unint64_t v14 = *(void *)(mlir::ValueRange::dereference_iterator(v24, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v15 = v22;
    if (v22 >= HIDWORD(v22))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v23, v22 + 1, 8);
      unsigned int v15 = v22;
    }
    *((void *)__src + v15) = v14;
    unsigned int v16 = v22 + 1;
    LODWORD(v22) = v16;
    unint64_t v17 = __src;
    uint64_t v18 = *(unsigned int *)(a2 + 72);
    unint64_t v19 = v18 + v16;
    if (v19 > *(unsigned int *)(a2 + 76))
    {
LABEL_9:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v19, 8);
      LODWORD(v18) = *(_DWORD *)(a2 + 72);
    }
  }
  else
  {
    if (!mlir::emitOptionalError<char const(&)[39]>(v12, 1, "invalid number of operands")) {
      llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
    }
    unsigned int v16 = v22;
    unint64_t v17 = __src;
    uint64_t v18 = *(unsigned int *)(a2 + 72);
    unint64_t v19 = v18 + v22;
    if (v19 > *(unsigned int *)(a2 + 76)) {
      goto LABEL_9;
    }
  }
  if (v16)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v18), v17, 8 * v16);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v18 + v16;
  if (__src != v23) {
    free(__src);
  }
}

BOOL mlir::mps::ReverseOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))return 0; {
  __int16 v2 = *this;
  }
  if ((*((unsigned char *)*this + 46) & 0x80) == 0)
  {
    uint64_t v4 = -1;
    goto LABEL_4;
  }
  uint64_t v3 = *((unsigned int *)v2 + 17);
  uint64_t v4 = v3 - 1;
  if ((unint64_t)(v3 - 1) <= 1)
  {
    if (v3 == 1)
    {
LABEL_30:
      int v30 = *((_DWORD *)v2 + 9);
      uint64_t v31 = v2 - 2;
      if (v30) {
        uint64_t v32 = (uint64_t)v31;
      }
      else {
        uint64_t v32 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v32, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    uint64_t v28 = v2[9] + 56;
    uint64_t v29 = 1;
    while (mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)v28 + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, v29))
    {
      ++v29;
      v28 += 32;
      if (v3 == v29)
      {
        __int16 v2 = *this;
        goto LABEL_30;
      }
    }
    return 0;
  }
LABEL_4:
  uint64_t v43 = (const void **)"operand group starting at #";
  __int16 v44 = 259;
  mlir::OpState::emitOpError(this, &v43, (uint64_t)v48);
  if (v48[0])
  {
    int v45 = 5;
    uint64_t v46 = 1;
    unint64_t v5 = &v45;
    uint64_t v6 = (char *)v49;
    if (v50 >= v51)
    {
      unint64_t v35 = v50 + 1;
      if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
      {
        int64_t v40 = (char *)&v45 - (unsigned char *)v49;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
        uint64_t v6 = (char *)v49;
        unint64_t v5 = (int *)((char *)v49 + v40);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
        unint64_t v5 = &v45;
        uint64_t v6 = (char *)v49;
      }
    }
    uint64_t v7 = &v6[24 * v50];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v50;
    if (v48[0])
    {
      int v45 = 3;
      uint64_t v46 = (uint64_t)" requires 0 or 1 element, but found ";
      uint64_t v47 = 36;
      unsigned int v10 = &v45;
      uint64_t v11 = (char *)v49;
      if (v9 >= v51)
      {
        unint64_t v36 = v9 + 1;
        BOOL v37 = (char *)v49 + 24 * v9 > (char *)&v45;
        if (v49 <= &v45 && v37)
        {
          int64_t v41 = (char *)&v45 - (unsigned char *)v49;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v36, 24);
          uint64_t v11 = (char *)v49;
          unsigned int v10 = (int *)((char *)v49 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v36, 24);
          unsigned int v10 = &v45;
          uint64_t v11 = (char *)v49;
        }
      }
      uint64_t v12 = &v11[24 * v50];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      uint64_t v14 = ++v50;
      if (v48[0])
      {
        int v45 = 5;
        uint64_t v46 = v4;
        unsigned int v15 = &v45;
        unsigned int v16 = (char *)v49;
        if (v14 >= v51)
        {
          unint64_t v38 = v14 + 1;
          BOOL v39 = (char *)v49 + 24 * v14 > (char *)&v45;
          if (v49 <= &v45 && v39)
          {
            int64_t v42 = (char *)&v45 - (unsigned char *)v49;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v38, 24);
            unsigned int v16 = (char *)v49;
            unsigned int v15 = (int *)((char *)v49 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v38, 24);
            unsigned int v15 = &v45;
            unsigned int v16 = (char *)v49;
          }
        }
        unint64_t v17 = &v16[24 * v50];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = *((void *)v15 + 2);
        *(_OWORD *)unint64_t v17 = v18;
        ++v50;
      }
    }
  }
  uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v48);
  if (v48[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v48);
  }
  if (v57)
  {
    unint64_t v20 = (void **)__p;
    if (__p)
    {
      long long v21 = v56;
      uint64_t v22 = __p;
      if (v56 != __p)
      {
        do
          long long v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        uint64_t v22 = __p;
      }
      int64_t v56 = v20;
      operator delete(v22);
    }
    uint64_t v23 = v53;
    if (v53)
    {
      uint64_t v24 = v54;
      unint64_t v25 = v53;
      if (v54 != v53)
      {
        do
        {
          long long v27 = (void *)*--v24;
          unint64_t v26 = v27;
          *uint64_t v24 = 0;
          if (v27) {
            operator delete[](v26);
          }
        }
        while (v24 != v23);
        unint64_t v25 = v53;
      }
      int64_t v54 = v23;
      operator delete(v25);
    }
    if (v49 != v52) {
      free(v49);
    }
  }
  return v19;
}

uint64_t mlir::mps::ReverseOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.reverse", 11, v2, v3, 0, 0);
  void *v4 = &unk_1EC983B98;
  v4[12] = mlir::mps::ReverseOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::RintOpGenericAdaptorBase::RintOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.rint", 8, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::RintOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.rint", 8, v2, v3, 0, 0);
  void *v4 = &unk_1EC982AC0;
  v4[12] = mlir::mps::RintOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::RoundOpGenericAdaptorBase::RoundOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.round", 9, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::RoundOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.round", 9, v2, v3, 0, 0);
  void *v4 = &unk_1EC9831F8;
  v4[12] = mlir::mps::RoundOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::SampleGridDataGradientOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v92 = v6;
  if (!v6)
  {
    a3(v96, a4);
    if (v96[0])
    {
      LODWORD(v93) = 3;
      int64_t v94 = "expected DictionaryAttr to set properties";
      uint64_t v95 = 41;
      unint64_t v26 = &v93;
      long long v27 = (char *)v97;
      if (v98 >= v99)
      {
        unint64_t v77 = v98 + 1;
        if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
        {
          int64_t v84 = (char *)&v93 - (unsigned char *)v97;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v77, 24);
          long long v27 = (char *)v97;
          unint64_t v26 = (uint64_t *)((char *)v97 + v84);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v77, 24);
          unint64_t v26 = &v93;
          long long v27 = (char *)v97;
        }
      }
      uint64_t v28 = &v27[24 * v98];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)uint64_t v28 = v29;
      ++v98;
      if (v96[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v96);
      }
    }
    if (!v105) {
      return 0;
    }
    int v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v104;
      uint64_t v32 = __p;
      if (v104 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      unsigned int v104 = v30;
      operator delete(v32);
    }
    long long v21 = v101;
    if (!v101) {
      goto LABEL_103;
    }
    unint64_t v33 = v102;
    uint64_t v23 = v101;
    if (v102 == v101)
    {
LABEL_102:
      int64_t v102 = v21;
      operator delete(v23);
LABEL_103:
      if (v97 != v100) {
        free(v97);
      }
      return 0;
    }
    do
    {
      unint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *unint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_101:
    uint64_t v23 = v101;
    goto LABEL_102;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v92, "normalize_coordinates", 0x15uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v96, a4);
      if (v96[0])
      {
        LODWORD(v93) = 3;
        uint64_t v95 = 66;
        unsigned int v10 = &v93;
        uint64_t v11 = (char *)v97;
        if (v98 >= v99)
        {
          unint64_t v78 = v98 + 1;
          if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
          {
            int64_t v85 = (char *)&v93 - (unsigned char *)v97;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v78, 24);
            uint64_t v11 = (char *)v97;
            unsigned int v10 = (uint64_t *)((char *)v97 + v85);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v78, 24);
            unsigned int v10 = &v93;
            uint64_t v11 = (char *)v97;
          }
        }
        uint64_t v12 = &v11[24 * v98];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)uint64_t v12 = v13;
        ++v98;
        if (v96[0])
        {
          uint64_t v14 = &v93;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v93, v9);
          unsigned int v15 = (char *)v97;
          if (v98 >= v99)
          {
            unint64_t v79 = v98 + 1;
            if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
            {
              int64_t v86 = (char *)&v93 - (unsigned char *)v97;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v79, 24);
              unsigned int v15 = (char *)v97;
              uint64_t v14 = (uint64_t *)((char *)v97 + v86);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v79, 24);
              uint64_t v14 = &v93;
              unsigned int v15 = (char *)v97;
            }
          }
          unsigned int v16 = &v15[24 * v98];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)unsigned int v16 = v17;
          ++v98;
          if (v96[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v96);
          }
        }
      }
      if (!v105) {
        return 0;
      }
      long long v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v104;
        unint64_t v20 = __p;
        if (v104 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          unint64_t v20 = __p;
        }
        unsigned int v104 = v18;
        operator delete(v20);
      }
      long long v21 = v101;
      if (!v101) {
        goto LABEL_103;
      }
      uint64_t v22 = v102;
      uint64_t v23 = v101;
      if (v102 == v101) {
        goto LABEL_102;
      }
      do
      {
        unint64_t v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_101;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v92, "padding_mode", 0xCuLL);
  if (!v36)
  {
    a3(v96, a4);
    if (v96[0])
    {
      LODWORD(v93) = 3;
      int64_t v94 = "expected key entry for padding_mode in DictionaryAttr to set Properties.";
      uint64_t v95 = 72;
      BOOL v52 = &v93;
      unint64_t v53 = (char *)v97;
      if (v98 >= v99)
      {
        unint64_t v81 = v98 + 1;
        if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
        {
          int64_t v88 = (char *)&v93 - (unsigned char *)v97;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v81, 24);
          unint64_t v53 = (char *)v97;
          BOOL v52 = (uint64_t *)((char *)v97 + v88);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v81, 24);
          BOOL v52 = &v93;
          unint64_t v53 = (char *)v97;
        }
      }
      int64_t v54 = &v53[24 * v98];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = v52[2];
      *(_OWORD *)int64_t v54 = v55;
      ++v98;
      if (v96[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v96);
      }
    }
    if (!v105) {
      return 0;
    }
    int64_t v56 = (void **)__p;
    if (__p)
    {
      char v57 = v104;
      uint64_t v58 = __p;
      if (v104 != __p)
      {
        do
          char v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        uint64_t v58 = __p;
      }
      unsigned int v104 = v56;
      operator delete(v58);
    }
    long long v21 = v101;
    if (!v101) {
      goto LABEL_103;
    }
    uint64_t v59 = v102;
    uint64_t v23 = v101;
    if (v102 == v101) {
      goto LABEL_102;
    }
    do
    {
      char v61 = (void *)*--v59;
      __int16 v60 = v61;
      *uint64_t v59 = 0;
      if (v61) {
        operator delete[](v60);
      }
    }
    while (v59 != v21);
    goto LABEL_101;
  }
  uint64_t v37 = v36;
  if (*(_UNKNOWN **)(*(void *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id)
  {
    a3(v96, a4);
    if (v96[0])
    {
      LODWORD(v93) = 3;
      uint64_t v95 = 57;
      unint64_t v38 = &v93;
      BOOL v39 = (char *)v97;
      if (v98 >= v99)
      {
        unint64_t v80 = v98 + 1;
        if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
        {
          int64_t v87 = (char *)&v93 - (unsigned char *)v97;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v80, 24);
          BOOL v39 = (char *)v97;
          unint64_t v38 = (uint64_t *)((char *)v97 + v87);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v80, 24);
          unint64_t v38 = &v93;
          BOOL v39 = (char *)v97;
        }
      }
      int64_t v40 = &v39[24 * v98];
      long long v41 = *(_OWORD *)v38;
      *((void *)v40 + 2) = v38[2];
      *(_OWORD *)int64_t v40 = v41;
      ++v98;
      if (v96[0])
      {
        int64_t v42 = &v93;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v93, v37);
        uint64_t v43 = (char *)v97;
        if (v98 >= v99)
        {
          unint64_t v82 = v98 + 1;
          if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
          {
            int64_t v89 = (char *)&v93 - (unsigned char *)v97;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v82, 24);
            uint64_t v43 = (char *)v97;
            int64_t v42 = (uint64_t *)((char *)v97 + v89);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v82, 24);
            int64_t v42 = &v93;
            uint64_t v43 = (char *)v97;
          }
        }
        __int16 v44 = &v43[24 * v98];
        long long v45 = *(_OWORD *)v42;
        *((void *)v44 + 2) = v42[2];
        *(_OWORD *)__int16 v44 = v45;
        ++v98;
        if (v96[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v96);
        }
      }
    }
    if (!v105) {
      return 0;
    }
    uint64_t v46 = (void **)__p;
    if (__p)
    {
      uint64_t v47 = v104;
      unint64_t v48 = __p;
      if (v104 != __p)
      {
        do
          uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        unint64_t v48 = __p;
      }
      unsigned int v104 = v46;
      operator delete(v48);
    }
    long long v21 = v101;
    if (!v101) {
      goto LABEL_103;
    }
    unint64_t v49 = v102;
    uint64_t v23 = v101;
    if (v102 == v101) {
      goto LABEL_102;
    }
    do
    {
      unsigned int v51 = (void *)*--v49;
      unsigned int v50 = v51;
      void *v49 = 0;
      if (v51) {
        operator delete[](v50);
      }
    }
    while (v49 != v21);
    goto LABEL_101;
  }
  a1[1] = v36;
  uint64_t v62 = mlir::DictionaryAttr::get((uint64_t)&v92, "relative_coordinates", 0x14uLL);
  uint64_t v93 = v62;
  if (v62)
  {
    if (*(_UNKNOWN **)(*(void *)v62 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v96, a4);
      mlir::InFlightDiagnostic::append<mlir::Attribute>(v63, &v93);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v96);
      return 0;
    }
    a1[2] = v62;
  }
  uint64_t v64 = mlir::DictionaryAttr::get((uint64_t)&v92, "sampling_mode", 0xDuLL);
  uint64_t v91 = v64;
  if (!v64)
  {
    a3(v96, a4);
    if (v96[0])
    {
      LODWORD(v93) = 3;
      int64_t v94 = "expected key entry for sampling_mode in DictionaryAttr to set Properties.";
      uint64_t v95 = 73;
      uint64_t v66 = &v93;
      uint64_t v67 = (char *)v97;
      if (v98 >= v99)
      {
        unint64_t v83 = v98 + 1;
        if (v97 <= &v93 && (char *)v97 + 24 * v98 > (char *)&v93)
        {
          int64_t v90 = (char *)&v93 - (unsigned char *)v97;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v83, 24);
          uint64_t v67 = (char *)v97;
          uint64_t v66 = (uint64_t *)((char *)v97 + v90);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v83, 24);
          uint64_t v66 = &v93;
          uint64_t v67 = (char *)v97;
        }
      }
      uint64_t v68 = &v67[24 * v98];
      long long v69 = *(_OWORD *)v66;
      *((void *)v68 + 2) = v66[2];
      *(_OWORD *)uint64_t v68 = v69;
      ++v98;
      if (v96[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v96);
      }
    }
    if (!v105) {
      return 0;
    }
    unsigned int v70 = (void **)__p;
    if (__p)
    {
      unsigned int v71 = v104;
      unsigned int v72 = __p;
      if (v104 != __p)
      {
        do
          unsigned int v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
        while (v71 != v70);
        unsigned int v72 = __p;
      }
      unsigned int v104 = v70;
      operator delete(v72);
    }
    long long v21 = v101;
    if (!v101) {
      goto LABEL_103;
    }
    uint64_t v73 = v102;
    uint64_t v23 = v101;
    if (v102 == v101) {
      goto LABEL_102;
    }
    do
    {
      unint64_t v75 = (void *)*--v73;
      unsigned int v74 = v75;
      *uint64_t v73 = 0;
      if (v75) {
        operator delete[](v74);
      }
    }
    while (v73 != v21);
    goto LABEL_101;
  }
  if (*(_UNKNOWN **)(*(void *)v64 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id)
  {
    a1[3] = v64;
    return 1;
  }
  a3(v96, a4);
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v65, &v91);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v96);
  return 0;
}

uint64_t mlir::mps::SampleGridDataGradientOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  unsigned int v33[6] = *MEMORY[0x1E4F143B8];
  int v30 = a1;
  uint64_t v31 = v33;
  uint64_t v32 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v30, (uint64_t)"normalize_coordinates", 21, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v32;
  if (v32 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
    unsigned int v6 = v32;
  }
  uint64_t v7 = (uint64_t *)((char *)v31 + 16 * v6);
  *uint64_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v32 + 1;
  LODWORD(v32) = v32 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"padding_mode", 12, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v13 = v32;
    }
    uint64_t v14 = (uint64_t *)((char *)v31 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"relative_coordinates", 20, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v19 = v32;
    }
    unint64_t v20 = (uint64_t *)((char *)v31 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"sampling_mode", 13, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v25 = v32;
    }
    unint64_t v26 = (uint64_t *)((char *)v31 + 16 * v25);
    uint64_t *v26 = v22;
    v26[1] = v24;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  long long v27 = v31;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v31 == v33) {
      return DictionaryAttr;
    }
    goto LABEL_20;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v30, (uint64_t *)v31, v8);
  long long v27 = v31;
  if (v31 != v33) {
LABEL_20:
  }
    free(v27);
  return DictionaryAttr;
}

uint64_t mlir::mps::SampleGridDataGradientOp::getInherentAttr(int a1, void *a2, char *__s1, size_t __n)
{
  switch(__n)
  {
    case 0xCuLL:
      if (memcmp(__s1, "padding_mode", __n)) {
        return 0;
      }
      return a2[1];
    case 0xDuLL:
      if (memcmp(__s1, "sampling_mode", __n)) {
        return 0;
      }
      return a2[3];
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
      return 0;
    case 0x14uLL:
      if (memcmp(__s1, "relative_coordinates", __n)) {
        return 0;
      }
      return a2[2];
    case 0x15uLL:
      if (*(void *)__s1 != 0x7A696C616D726F6ELL
        || *((void *)__s1 + 1) != 0x6964726F6F635F65
        || *(void *)(__s1 + 13) != 0x736574616E696472)
      {
        return 0;
      }
      return *a2;
    default:
      return 0;
  }
}

uint64_t mlir::mps::SampleGridDataGradientOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  switch(a3)
  {
    case 0xCuLL:
      uint64_t result = memcmp(__s1, "padding_mode", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id) {
            uint64_t v11 = a4;
          }
          else {
            uint64_t v11 = 0;
          }
          v5[1] = v11;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xDuLL:
      uint64_t result = memcmp(__s1, "sampling_mode", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id) {
            uint64_t v6 = a4;
          }
          else {
            uint64_t v6 = 0;
          }
          v5[3] = v6;
        }
        else
        {
          v5[3] = 0;
        }
      }
      break;
    case 0x14uLL:
      uint64_t result = memcmp(__s1, "relative_coordinates", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v7 = a4;
          }
          else {
            uint64_t v7 = 0;
          }
          v5[2] = v7;
        }
        else
        {
          v5[2] = 0;
        }
      }
      break;
    case 0x15uLL:
      if (*(void *)__s1 == 0x7A696C616D726F6ELL
        && *((void *)__s1 + 1) == 0x6964726F6F635F65
        && *(void *)(__s1 + 13) == 0x736574616E696472)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          *(void *)uint64_t result = v10;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::mps::SampleGridDataGradientOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v8, (const void **)"normalize_coordinates", (const char *)0x15, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps33(v9, (const void **)"padding_mode", (const char *)0xC, a3, a4))
    {
      uint64_t v10 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v10, (const void **)"relative_coordinates", (const char *)0x14, a3, a4))
      {
        uint64_t v11 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps21(v11, (const void **)"sampling_mode", (const char *)0xD, a3, a4))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x20uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::SampleGridDataGradientOpGenericAdaptor"
              "Base::Properties]";
        unint64_t v14 = 123;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[157];
    return a1[32];
  }
  return result;
}

void mlir::mps::SampleGridDataGradientOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, unsigned int a8, unsigned int a9)
{
  v43[2] = *MEMORY[0x1E4F143B8];
  uint64_t v36 = a4;
  uint64_t v37 = a3;
  uint64_t v35 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v37, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v36, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v35, 1);
  if (a6)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v14);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  if (a7)
  {
    uint64_t v16 = mlir::Builder::getUnitAttr(a1, v14);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties>((void *)a2)
              + 16) = v16;
  }
  uint64_t v17 = *a1;
  unsigned int v38 = a8;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v17);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id;
  uint64_t v42 = (uint64_t)v17;
  uint64_t v19 = mlir::StorageUniquer::get<mlir::mps::detail::PaddingModeAttrStorage,mlir::mps::PaddingMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail22PaddingModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_15PaddingModeAttrEJNS2_11PaddingModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id, &v38);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = v19;
  unint64_t v20 = *a1;
  unsigned int v38 = a9;
  uint64_t v21 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v20);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id;
  uint64_t v42 = (uint64_t)v20;
  uint64_t v22 = mlir::StorageUniquer::get<mlir::mps::detail::SamplingModeAttrStorage,mlir::mps::SamplingMode>(v21, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23SamplingModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16SamplingModeAttrEJNS2_12SamplingModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id, &v38);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 24) = v22;
  __src = v43;
  uint64_t v42 = 0x200000000;
  uint64_t v23 = *(void *)a2;
  mlir::ValueRange::ValueRange(v40, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unsigned int v25 = mlir::ValueRange::ValueRange(&v39, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::SampleGridDataGradientOp::inferReturnTypes((uint64_t)v25, v23, 1, v40[0], v40[1], v26, v27, v28, v33, v34, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v29 = __src;
  }
  uint64_t v30 = v42;
  uint64_t v31 = *(unsigned int *)(a2 + 72);
  unint64_t v32 = v31 + v42;
  if (v32 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v32, 8);
    LODWORD(v31) = *(_DWORD *)(a2 + 72);
  }
  if (v30)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v31), v29, 8 * v30);
    LODWORD(v31) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v31 + v30;
  if (__src != v43) {
    free(__src);
  }
}

BOOL mlir::mps::SampleGridDataGradientOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = v3[3];
    if (v5)
    {
      uint64_t v6 = *v3;
      uint64_t v7 = v3[2];
      v28[0] = v2;
      if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v6, (const void **)"normalize_coordinates", (const char *)0x15, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v28))return 0; {
      v28[0] = *this;
      }
      if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v7, (const void **)"relative_coordinates", (const char *)0x14, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v28))return 0; {
      v28[0] = *this;
      }
      if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps33(v4, (const void **)"padding_mode", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps33(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v28))return 0; {
      v28[0] = *this;
      }
      if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps21(v5, (const void **)"sampling_mode", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps21(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v28)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this,
                               *(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8,
                               (const void **)"operand",
                               (const void **)7,
                               2u))
      {
        return 0;
      }
      if (*((_DWORD *)*this + 9)) {
        uint64_t v8 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    v26[0] = (const void **)"requires attribute 'sampling_mode'";
    __int16 v27 = 259;
    mlir::OpState::emitOpError(this, v26, (uint64_t)v28);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v28);
    if (v28[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v28);
    }
    if (v35)
    {
      uint64_t v19 = (void **)__p;
      if (__p)
      {
        unint64_t v20 = v34;
        uint64_t v21 = __p;
        if (v34 != __p)
        {
          do
            unint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          uint64_t v21 = __p;
        }
        uint64_t v34 = v19;
        operator delete(v21);
      }
      unint64_t v14 = v31;
      if (!v31) {
        goto LABEL_48;
      }
      uint64_t v22 = v32;
      uint64_t v16 = v31;
      if (v32 == v31)
      {
LABEL_47:
        unint64_t v32 = v14;
        operator delete(v16);
LABEL_48:
        if (v29 != &v30) {
          free(v29);
        }
        return v10;
      }
      do
      {
        uint64_t v24 = (void *)*--v22;
        uint64_t v23 = v24;
        *uint64_t v22 = 0;
        if (v24) {
          operator delete[](v23);
        }
      }
      while (v22 != v14);
LABEL_46:
      uint64_t v16 = v31;
      goto LABEL_47;
    }
  }
  else
  {
    v26[0] = (const void **)"requires attribute 'padding_mode'";
    __int16 v27 = 259;
    mlir::OpState::emitOpError(this, v26, (uint64_t)v28);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v28);
    if (v28[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v28);
    }
    if (v35)
    {
      unint64_t v11 = (void **)__p;
      if (__p)
      {
        uint64_t v12 = v34;
        unsigned int v13 = __p;
        if (v34 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          unsigned int v13 = __p;
        }
        uint64_t v34 = v11;
        operator delete(v13);
      }
      unint64_t v14 = v31;
      if (!v31) {
        goto LABEL_48;
      }
      uint64_t v15 = v32;
      uint64_t v16 = v31;
      if (v32 == v31) {
        goto LABEL_47;
      }
      do
      {
        uint64_t v18 = (void *)*--v15;
        uint64_t v17 = v18;
        void *v15 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v15 != v14);
      goto LABEL_46;
    }
  }
  return v10;
}

uint64_t mlir::mps::SampleGridDataGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.sample_grid_data_gradient", 29, v2, v3, 0, 0);
  void *v4 = &unk_1EC981F10;
  v4[12] = mlir::mps::SampleGridDataGradientOp::canonicalize;
  unint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::SampleGridOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v82 = v6;
  if (!v6)
  {
    a3(v86, a4);
    if (v86[0])
    {
      LODWORD(v83) = 3;
      int64_t v84 = "expected DictionaryAttr to set properties";
      uint64_t v85 = 41;
      uint64_t v26 = &v83;
      __int16 v27 = (char *)v87;
      if (v88 >= v89)
      {
        unint64_t v70 = v88 + 1;
        if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
        {
          int64_t v76 = (char *)&v83 - (unsigned char *)v87;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v70, 24);
          __int16 v27 = (char *)v87;
          uint64_t v26 = (uint64_t *)((char *)v87 + v76);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v70, 24);
          uint64_t v26 = &v83;
          __int16 v27 = (char *)v87;
        }
      }
      uint64_t v28 = &v27[24 * v88];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)uint64_t v28 = v29;
      ++v88;
      if (v86[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v86);
      }
    }
    if (!v95) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v94;
      unint64_t v32 = __p;
      if (v94 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      int64_t v94 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v91;
    if (!v91) {
      goto LABEL_80;
    }
    uint64_t v33 = v92;
    uint64_t v23 = v91;
    if (v92 == v91)
    {
LABEL_79:
      uint64_t v92 = v21;
      operator delete(v23);
LABEL_80:
      if (v87 != v90) {
        free(v87);
      }
      return 0;
    }
    do
    {
      char v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_78:
    uint64_t v23 = v91;
    goto LABEL_79;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v82, "align_corners", 0xDuLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v86, a4);
      if (v86[0])
      {
        LODWORD(v83) = 3;
        uint64_t v85 = 58;
        uint64_t v10 = &v83;
        unint64_t v11 = (char *)v87;
        if (v88 >= v89)
        {
          unint64_t v71 = v88 + 1;
          if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
          {
            int64_t v77 = (char *)&v83 - (unsigned char *)v87;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v71, 24);
            unint64_t v11 = (char *)v87;
            uint64_t v10 = (uint64_t *)((char *)v87 + v77);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v71, 24);
            uint64_t v10 = &v83;
            unint64_t v11 = (char *)v87;
          }
        }
        uint64_t v12 = &v11[24 * v88];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)uint64_t v12 = v13;
        ++v88;
        if (v86[0])
        {
          unint64_t v14 = &v83;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v83, v9);
          uint64_t v15 = (char *)v87;
          if (v88 >= v89)
          {
            unint64_t v72 = v88 + 1;
            if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
            {
              int64_t v78 = (char *)&v83 - (unsigned char *)v87;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v72, 24);
              uint64_t v15 = (char *)v87;
              unint64_t v14 = (uint64_t *)((char *)v87 + v78);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v72, 24);
              unint64_t v14 = &v83;
              uint64_t v15 = (char *)v87;
            }
          }
          uint64_t v16 = &v15[24 * v88];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)uint64_t v16 = v17;
          ++v88;
          if (v86[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v86);
          }
        }
      }
      if (!v95) {
        return 0;
      }
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v94;
        unint64_t v20 = __p;
        if (v94 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          unint64_t v20 = __p;
        }
        int64_t v94 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v91;
      if (!v91) {
        goto LABEL_80;
      }
      uint64_t v22 = v92;
      uint64_t v23 = v91;
      if (v92 == v91) {
        goto LABEL_79;
      }
      do
      {
        unsigned int v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_78;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v82, "layout", 6uLL);
  if (!v36)
  {
    a3(v86, a4);
    if (v86[0])
    {
      LODWORD(v83) = 3;
      int64_t v84 = "expected key entry for layout in DictionaryAttr to set Properties.";
      uint64_t v85 = 66;
      BOOL v52 = &v83;
      unint64_t v53 = (char *)v87;
      if (v88 >= v89)
      {
        unint64_t v74 = v88 + 1;
        if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
        {
          int64_t v80 = (char *)&v83 - (unsigned char *)v87;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v74, 24);
          unint64_t v53 = (char *)v87;
          BOOL v52 = (uint64_t *)((char *)v87 + v80);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v74, 24);
          BOOL v52 = &v83;
          unint64_t v53 = (char *)v87;
        }
      }
      int64_t v54 = &v53[24 * v88];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = v52[2];
      *(_OWORD *)int64_t v54 = v55;
      ++v88;
      if (v86[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v86);
      }
    }
    if (!v95) {
      return 0;
    }
    int64_t v56 = (void **)__p;
    if (__p)
    {
      char v57 = v94;
      uint64_t v58 = __p;
      if (v94 != __p)
      {
        do
          char v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        uint64_t v58 = __p;
      }
      int64_t v94 = v56;
      operator delete(v58);
    }
    uint64_t v21 = v91;
    if (!v91) {
      goto LABEL_80;
    }
    uint64_t v59 = v92;
    uint64_t v23 = v91;
    if (v92 == v91) {
      goto LABEL_79;
    }
    do
    {
      char v61 = (void *)*--v59;
      __int16 v60 = v61;
      *uint64_t v59 = 0;
      if (v61) {
        operator delete[](v60);
      }
    }
    while (v59 != v21);
    goto LABEL_78;
  }
  uint64_t v37 = v36;
  if (*(_UNKNOWN **)(*(void *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id)
  {
    a3(v86, a4);
    if (v86[0])
    {
      LODWORD(v83) = 3;
      uint64_t v85 = 51;
      unsigned int v38 = &v83;
      unint64_t v39 = (char *)v87;
      if (v88 >= v89)
      {
        unint64_t v73 = v88 + 1;
        if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
        {
          int64_t v79 = (char *)&v83 - (unsigned char *)v87;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v73, 24);
          unint64_t v39 = (char *)v87;
          unsigned int v38 = (uint64_t *)((char *)v87 + v79);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v73, 24);
          unsigned int v38 = &v83;
          unint64_t v39 = (char *)v87;
        }
      }
      int64_t v40 = &v39[24 * v88];
      long long v41 = *(_OWORD *)v38;
      *((void *)v40 + 2) = v38[2];
      *(_OWORD *)int64_t v40 = v41;
      ++v88;
      if (v86[0])
      {
        uint64_t v42 = &v83;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v83, v37);
        uint64_t v43 = (char *)v87;
        if (v88 >= v89)
        {
          unint64_t v75 = v88 + 1;
          if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
          {
            int64_t v81 = (char *)&v83 - (unsigned char *)v87;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v75, 24);
            uint64_t v43 = (char *)v87;
            uint64_t v42 = (uint64_t *)((char *)v87 + v81);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v75, 24);
            uint64_t v42 = &v83;
            uint64_t v43 = (char *)v87;
          }
        }
        __int16 v44 = &v43[24 * v88];
        long long v45 = *(_OWORD *)v42;
        *((void *)v44 + 2) = v42[2];
        *(_OWORD *)__int16 v44 = v45;
        ++v88;
        if (v86[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v86);
        }
      }
    }
    if (!v95) {
      return 0;
    }
    uint64_t v46 = (void **)__p;
    if (__p)
    {
      uint64_t v47 = v94;
      unint64_t v48 = __p;
      if (v94 != __p)
      {
        do
          uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        unint64_t v48 = __p;
      }
      int64_t v94 = v46;
      operator delete(v48);
    }
    uint64_t v21 = v91;
    if (!v91) {
      goto LABEL_80;
    }
    unint64_t v49 = v92;
    uint64_t v23 = v91;
    if (v92 == v91) {
      goto LABEL_79;
    }
    do
    {
      unsigned int v51 = (void *)*--v49;
      unsigned int v50 = v51;
      void *v49 = 0;
      if (v51) {
        operator delete[](v50);
      }
    }
    while (v49 != v21);
    goto LABEL_78;
  }
  a1[1] = v36;
  uint64_t v63 = mlir::DictionaryAttr::get((uint64_t)&v82, "nearest_rounding_mode", 0x15uLL);
  uint64_t v83 = v63;
  if (v63)
  {
    if (*(_UNKNOWN **)(*(void *)v63 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::NearestRoundingModeAttr,void>::id)
    {
      a3(v86, a4);
LABEL_91:
      uint64_t v66 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v86, v64);
      goto LABEL_92;
    }
    a1[2] = v63;
  }
  uint64_t v65 = mlir::DictionaryAttr::get((uint64_t)&v82, "normalize_coordinates", 0x15uLL);
  uint64_t v83 = v65;
  if (v65)
  {
    if (*(_UNKNOWN **)(*(void *)v65 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v86, a4);
      goto LABEL_91;
    }
    a1[3] = v65;
  }
  uint64_t v67 = mlir::DictionaryAttr::get((uint64_t)&v82, "padding_mode", 0xCuLL);
  uint64_t v83 = v67;
  if (!v67)
  {
    a3(v86, a4);
    mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v86, "expected key entry for padding_mode in DictionaryAttr to set Properties.");
    goto LABEL_93;
  }
  if (*(_UNKNOWN **)(*(void *)v67 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id)
  {
    a1[4] = v67;
    uint64_t v68 = mlir::DictionaryAttr::get((uint64_t)&v82, "relative_coordinates", 0x14uLL);
    uint64_t v83 = v68;
    if (v68)
    {
      if (*(_UNKNOWN **)(*(void *)v68 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      {
        a3(v86, a4);
        goto LABEL_92;
      }
      a1[5] = v68;
    }
    uint64_t v69 = mlir::DictionaryAttr::get((uint64_t)&v82, "sampling_mode", 0xDuLL);
    uint64_t v83 = v69;
    if (!v69)
    {
      a3(v86, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v86, "expected key entry for sampling_mode in DictionaryAttr to set Properties.");
      goto LABEL_93;
    }
    if (*(_UNKNOWN **)(*(void *)v69 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id)
    {
      a1[6] = v69;
      return 1;
    }
    a3(v86, a4);
    goto LABEL_92;
  }
  a3(v86, a4);
LABEL_92:
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v66, &v83);
LABEL_93:
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v86);
  return 0;
}

uint64_t mlir::mps::SampleGridOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v51[6] = *MEMORY[0x1E4F143B8];
  unint64_t v48 = a1;
  unint64_t v49 = v51;
  uint64_t v50 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v48, (uint64_t)"align_corners", 13, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v50;
  if (v50 >= HIDWORD(v50))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
    unsigned int v6 = v50;
  }
  uint64_t v7 = (uint64_t *)((char *)v49 + 16 * v6);
  *uint64_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v50 + 1;
  LODWORD(v50) = v50 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v48, (uint64_t)"layout", 6, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
      unsigned int v13 = v50;
    }
    unint64_t v14 = (uint64_t *)((char *)v49 + 16 * v13);
    *unint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v50 + 1;
    LODWORD(v50) = v50 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v48, (uint64_t)"nearest_rounding_mode", 21, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
      unsigned int v19 = v50;
    }
    unint64_t v20 = (uint64_t *)((char *)v49 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v50 + 1;
    LODWORD(v50) = v50 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v48, (uint64_t)"normalize_coordinates", 21, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
      unsigned int v25 = v50;
    }
    uint64_t v26 = (uint64_t *)((char *)v49 + 16 * v25);
    uint64_t *v26 = v22;
    v26[1] = v24;
    unsigned int v8 = v50 + 1;
    LODWORD(v50) = v50 + 1;
  }
  uint64_t v27 = a2[4];
  if (v27)
  {
    uint64_t v28 = mlir::Builder::getNamedAttr(&v48, (uint64_t)"padding_mode", 12, v27);
    uint64_t v30 = v29;
    unsigned int v31 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
      unsigned int v31 = v50;
    }
    unint64_t v32 = (uint64_t *)((char *)v49 + 16 * v31);
    *unint64_t v32 = v28;
    v32[1] = v30;
    unsigned int v8 = v50 + 1;
    LODWORD(v50) = v50 + 1;
  }
  uint64_t v33 = a2[5];
  if (v33)
  {
    uint64_t v34 = mlir::Builder::getNamedAttr(&v48, (uint64_t)"relative_coordinates", 20, v33);
    uint64_t v36 = v35;
    unsigned int v37 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
      unsigned int v37 = v50;
    }
    unsigned int v38 = (uint64_t *)((char *)v49 + 16 * v37);
    *unsigned int v38 = v34;
    v38[1] = v36;
    unsigned int v8 = v50 + 1;
    LODWORD(v50) = v50 + 1;
  }
  uint64_t v39 = a2[6];
  if (v39)
  {
    uint64_t v40 = mlir::Builder::getNamedAttr(&v48, (uint64_t)"sampling_mode", 13, v39);
    uint64_t v42 = v41;
    unsigned int v43 = v50;
    if (v50 >= HIDWORD(v50))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, v50 + 1, 16);
      unsigned int v43 = v50;
    }
    __int16 v44 = (uint64_t *)((char *)v49 + 16 * v43);
    *__int16 v44 = v40;
    v44[1] = v42;
    unsigned int v8 = v50 + 1;
    LODWORD(v50) = v50 + 1;
  }
  long long v45 = v49;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v49 == v51) {
      return DictionaryAttr;
    }
    goto LABEL_32;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v48, (uint64_t *)v49, v8);
  long long v45 = v49;
  if (v49 != v51) {
LABEL_32:
  }
    free(v45);
  return DictionaryAttr;
}

uint64_t mlir::mps::SampleGridOp::getInherentAttr(int a1, void *a2, char *__s1, size_t __n)
{
  switch(__n)
  {
    case 6uLL:
      if (memcmp(__s1, "layout", __n)) {
        return 0;
      }
      return a2[1];
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
      return 0;
    case 0xCuLL:
      if (memcmp(__s1, "padding_mode", __n)) {
        return 0;
      }
      return a2[4];
    case 0xDuLL:
      if (*(void *)__s1 == 0x6F635F6E67696C61 && *(void *)(__s1 + 5) == 0x7372656E726F635FLL) {
        return *a2;
      }
      if (memcmp(__s1, "sampling_mode", __n)) {
        return 0;
      }
      return a2[6];
    case 0x14uLL:
      if (memcmp(__s1, "relative_coordinates", __n)) {
        return 0;
      }
      return a2[5];
    case 0x15uLL:
      if (!memcmp(__s1, "nearest_rounding_mode", __n)) {
        return a2[2];
      }
      if (*(void *)__s1 != 0x7A696C616D726F6ELL
        || *((void *)__s1 + 1) != 0x6964726F6F635F65
        || *(void *)(__s1 + 13) != 0x736574616E696472)
      {
        return 0;
      }
      return a2[3];
    default:
      return 0;
  }
}

uint64_t mlir::mps::SampleGridOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, uint64_t a4)
{
  unsigned int v6 = (void *)result;
  switch(a3)
  {
    case 6uLL:
      uint64_t result = memcmp(__s1, "layout", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id) {
            uint64_t v14 = a4;
          }
          else {
            uint64_t v14 = 0;
          }
          v6[1] = v14;
        }
        else
        {
          v6[1] = 0;
        }
      }
      break;
    case 0xCuLL:
      uint64_t result = memcmp(__s1, "padding_mode", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id) {
            uint64_t v7 = a4;
          }
          else {
            uint64_t v7 = 0;
          }
          v6[4] = v7;
        }
        else
        {
          v6[4] = 0;
        }
      }
      break;
    case 0xDuLL:
      if (*(void *)__s1 == 0x6F635F6E67696C61 && *(void *)(__s1 + 5) == 0x7372656E726F635FLL)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v15 = a4;
          }
          else {
            uint64_t v15 = 0;
          }
          *(void *)uint64_t result = v15;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      else
      {
        uint64_t result = memcmp(__s1, "sampling_mode", a3);
        if (!result)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id) {
              uint64_t v9 = a4;
            }
            else {
              uint64_t v9 = 0;
            }
            v6[6] = v9;
          }
          else
          {
            v6[6] = 0;
          }
        }
      }
      break;
    case 0x14uLL:
      uint64_t result = memcmp(__s1, "relative_coordinates", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          v6[5] = v10;
        }
        else
        {
          v6[5] = 0;
        }
      }
      break;
    case 0x15uLL:
      uint64_t result = memcmp(__s1, "nearest_rounding_mode", a3);
      if (result)
      {
        if (*(void *)__s1 == 0x7A696C616D726F6ELL
          && *((void *)__s1 + 1) == 0x6964726F6F635F65
          && *(void *)(__s1 + 13) == 0x736574616E696472)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
              uint64_t v13 = a4;
            }
            else {
              uint64_t v13 = 0;
            }
            v6[3] = v13;
          }
          else
          {
            v6[3] = 0;
          }
        }
      }
      else if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NearestRoundingModeAttr,void>::id) {
          uint64_t v16 = a4;
        }
        else {
          uint64_t v16 = 0;
        }
        v6[2] = v16;
      }
      else
      {
        v6[2] = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::mps::SampleGridOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"align_corners", 13, *a2);
  }
  uint64_t v5 = a2[1];
  if (v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"layout", 6, v5);
  }
  uint64_t v6 = a2[2];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"nearest_rounding_mode", 21, v6);
  }
  uint64_t v7 = a2[3];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"normalize_coordinates", 21, v7);
  }
  uint64_t v8 = a2[4];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"padding_mode", 12, v8);
  }
  uint64_t v9 = a2[5];
  if (v9) {
    mlir::NamedAttrList::append(a3, (uint64_t)"relative_coordinates", 20, v9);
  }
  uint64_t v10 = a2[6];
  if (v10)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"sampling_mode", 13, v10);
  }
}

BOOL mlir::mps::SampleGridOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v8, (const void **)"align_corners", (const char *)0xD, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps11(v9, (const void **)"layout", (const char *)6, a3, a4))
    {
      uint64_t v10 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps39(v10, (const void **)"nearest_rounding_mode", (const char *)0x15, a3, a4))
      {
        uint64_t v11 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v11, (const void **)"normalize_coordinates", (const char *)0x15, a3, a4))
        {
          uint64_t v12 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 32));
          if (!v12
            || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps33(v12, (const void **)"padding_mode", (const char *)0xC, a3, a4))
          {
            uint64_t v13 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 40));
            if (!v13
              || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v13, (const void **)"relative_coordinates", (const char *)0x14, a3, a4))
            {
              uint64_t v14 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 48));
              if (!v14
                || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps21(v14, (const void **)"sampling_mode", (const char *)0xD, a3, a4))
              {
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL mlir::mps::SampleGridOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::mps::TensorDataLayoutAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::NearestRoundingModeAttr>(a1, v3 + 2)&& mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 3)&& mlir::DialectBytecodeReader::readAttribute<mlir::mps::PaddingModeAttr>(a1, v3 + 4)&& mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 5)&& mlir::DialectBytecodeReader::readAttribute<mlir::mps::SamplingModeAttr>(a1, v3 + 6) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x38uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    *((void *)v3 + 6) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 111;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[159];
    return a1[32];
  }
  return result;
}

uint64_t mlir::mps::SampleGridOp::getNearestRoundingMode(mlir::mps::SampleGridOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2) {
    return *(unsigned int *)(v2 + 8) | 0x100000000;
  }
  else {
    return 0;
  }
}

void mlir::mps::SampleGridOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, unsigned int a9, unsigned int a10, unsigned int a11, uint64_t a12)
{
  v52[2] = *MEMORY[0x1E4F143B8];
  uint64_t v45 = a4;
  uint64_t v46 = a3;
  uint64_t v44 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v46, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v45, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v44, 1);
  if (a6)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v17);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>((void *)a2)
              + 24) = UnitAttr;
    if (!a7)
    {
LABEL_3:
      uint64_t v18 = a12;
      unsigned int v20 = a10;
      unsigned int v19 = a11;
      unsigned int v21 = a9;
      if (!a8) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!a7)
  {
    goto LABEL_3;
  }
  uint64_t v43 = mlir::Builder::getUnitAttr(a1, v17);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>((void *)a2)
            + 40) = v43;
  uint64_t v18 = a12;
  unsigned int v20 = a10;
  unsigned int v19 = a11;
  unsigned int v21 = a9;
  if (a8)
  {
LABEL_4:
    uint64_t v22 = mlir::Builder::getUnitAttr(a1, v17);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>((void *)a2) = v22;
  }
LABEL_5:
  uint64_t v23 = *a1;
  unsigned int v47 = v21;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v23);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id;
  uint64_t v51 = (uint64_t)v23;
  uint64_t v25 = mlir::StorageUniquer::get<mlir::mps::detail::PaddingModeAttrStorage,mlir::mps::PaddingMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail22PaddingModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_15PaddingModeAttrEJNS2_11PaddingModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id, &v47);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>((void *)a2)
            + 32) = v25;
  uint64_t v26 = *a1;
  unsigned int v47 = v20;
  uint64_t v27 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v26);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id;
  uint64_t v51 = (uint64_t)v26;
  uint64_t v28 = mlir::StorageUniquer::get<mlir::mps::detail::SamplingModeAttrStorage,mlir::mps::SamplingMode>(v27, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23SamplingModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16SamplingModeAttrEJNS2_12SamplingModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id, &v47);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>((void *)a2)
            + 48) = v28;
  uint64_t v29 = *a1;
  unsigned int v47 = v19;
  uint64_t v30 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v29);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id;
  uint64_t v51 = (uint64_t)v29;
  uint64_t v31 = mlir::StorageUniquer::get<mlir::mps::detail::TensorDataLayoutAttrStorage,mlir::mps::TensorDataLayout>(v30, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail27TensorDataLayoutAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_20TensorDataLayoutAttrEJNS2_16TensorDataLayoutEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id, &v47);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = v31;
  if (v18) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 16) = v18;
  __src = v52;
  uint64_t v51 = 0x200000000;
  unint64_t v32 = *a1;
  uint64_t v33 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v49, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v36 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v48, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::SampleGridOp::inferReturnTypes(v32, v33, 1, v49[0], v49[1], Dictionary, v36, v37, v48[0], v48[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unsigned int v38 = __src;
  }
  uint64_t v39 = v51;
  uint64_t v40 = *(unsigned int *)(a2 + 72);
  unint64_t v41 = v40 + v51;
  if (v41 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v41, 8);
    LODWORD(v40) = *(_DWORD *)(a2 + 72);
  }
  if (v39)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v40), v38, 8 * v39);
    LODWORD(v40) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v40 + v39;
  if (__src != v52) {
    free(__src);
  }
}

BOOL mlir::mps::SampleGridOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = v3[4];
    if (v5)
    {
      uint64_t v6 = v3[6];
      if (v6)
      {
        uint64_t v7 = *v3;
        uint64_t v9 = v3[2];
        uint64_t v8 = v3[3];
        uint64_t v10 = v3[5];
        v37[0] = v2;
        if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v8, (const void **)"normalize_coordinates", (const char *)0x15, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v37))return 0; {
        v37[0] = *this;
        }
        if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v10, (const void **)"relative_coordinates", (const char *)0x14, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v37))return 0; {
        v37[0] = *this;
        }
        if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v7, (const void **)"align_corners", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v37))return 0; {
        v37[0] = *this;
        }
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps33(v5, (const void **)"padding_mode", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps33(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v37))return 0; {
        v37[0] = *this;
        }
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps21(v6, (const void **)"sampling_mode", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps21(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v37))return 0; {
        v37[0] = *this;
        }
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps11(v4, (const void **)"layout", (const char *)6, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps11(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v37))return 0; {
        v37[0] = *this;
        }
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps39(v9, (const void **)"nearest_rounding_mode", (const char *)0x15, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps39(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v37)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this,
                                 *(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8,
                                 (const void **)"operand",
                                 (const void **)7,
                                 2u))
        {
          return 0;
        }
        if (*((_DWORD *)*this + 9)) {
          uint64_t v11 = (uint64_t)(*this - 2);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0);
        return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
      }
      v35[0] = (const void **)"requires attribute 'sampling_mode'";
      __int16 v36 = 259;
      mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
      uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
      if (v37[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
      }
      if (v44)
      {
        uint64_t v28 = (void **)__p;
        if (__p)
        {
          uint64_t v29 = v43;
          uint64_t v30 = __p;
          if (v43 != __p)
          {
            do
              uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
            while (v29 != v28);
            uint64_t v30 = __p;
          }
          uint64_t v43 = v28;
          operator delete(v30);
        }
        uint64_t v17 = v40;
        if (!v40) {
          goto LABEL_66;
        }
        uint64_t v31 = v41;
        unsigned int v19 = v40;
        if (v41 == v40)
        {
LABEL_65:
          unint64_t v41 = v17;
          operator delete(v19);
LABEL_66:
          if (v38 != &v39) {
            free(v38);
          }
          return v13;
        }
        do
        {
          uint64_t v33 = (void *)*--v31;
          unint64_t v32 = v33;
          void *v31 = 0;
          if (v33) {
            operator delete[](v32);
          }
        }
        while (v31 != v17);
LABEL_64:
        unsigned int v19 = v40;
        goto LABEL_65;
      }
    }
    else
    {
      v35[0] = (const void **)"requires attribute 'padding_mode'";
      __int16 v36 = 259;
      mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
      uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
      if (v37[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
      }
      if (v44)
      {
        uint64_t v22 = (void **)__p;
        if (__p)
        {
          uint64_t v23 = v43;
          uint64_t v24 = __p;
          if (v43 != __p)
          {
            do
              uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
            while (v23 != v22);
            uint64_t v24 = __p;
          }
          uint64_t v43 = v22;
          operator delete(v24);
        }
        uint64_t v17 = v40;
        if (!v40) {
          goto LABEL_66;
        }
        uint64_t v25 = v41;
        unsigned int v19 = v40;
        if (v41 == v40) {
          goto LABEL_65;
        }
        do
        {
          uint64_t v27 = (void *)*--v25;
          uint64_t v26 = v27;
          void *v25 = 0;
          if (v27) {
            operator delete[](v26);
          }
        }
        while (v25 != v17);
        goto LABEL_64;
      }
    }
  }
  else
  {
    v35[0] = (const void **)"requires attribute 'layout'";
    __int16 v36 = 259;
    mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (v44)
    {
      unint64_t v14 = (void **)__p;
      if (__p)
      {
        uint64_t v15 = v43;
        uint64_t v16 = __p;
        if (v43 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          uint64_t v16 = __p;
        }
        uint64_t v43 = v14;
        operator delete(v16);
      }
      uint64_t v17 = v40;
      if (!v40) {
        goto LABEL_66;
      }
      uint64_t v18 = v41;
      unsigned int v19 = v40;
      if (v41 == v40) {
        goto LABEL_65;
      }
      do
      {
        unsigned int v21 = (void *)*--v18;
        unsigned int v20 = v21;
        void *v18 = 0;
        if (v21) {
          operator delete[](v20);
        }
      }
      while (v18 != v17);
      goto LABEL_64;
    }
  }
  return v13;
}

uint64_t mlir::mps::SampleGridOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.sample_grid", 15, v2, v3, 0, 0);
  void *v4 = &unk_1EC97FFC8;
  v4[12] = mlir::mps::SampleGridOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::ScatterAlongAxisOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      char v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      uint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          uint64_t v27 = (char *)v60;
        }
      }
      uint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v67;
      unint64_t v32 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      uint64_t v67 = v30;
      operator delete(v32);
    }
    unsigned int v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "mode", 4uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      char v57 = "expected key entry for mode in DictionaryAttr to set Properties.";
      uint64_t v58 = 64;
      __int16 v36 = &v56;
      int v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          int v37 = (char *)v60;
          __int16 v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          __int16 v36 = &v56;
          int v37 = (char *)v60;
        }
      }
      unsigned int v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)unsigned int v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v40 = (void **)__p;
    if (__p)
    {
      unint64_t v41 = v67;
      uint64_t v42 = __p;
      if (v67 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      uint64_t v67 = v40;
      operator delete(v42);
    }
    unsigned int v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      char v44 = v45;
      *uint64_t v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::ScatterModeAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 49;
    uint64_t v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        uint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      unint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      uint64_t v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v15 = (char *)v60;
          unint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unint64_t v14 = &v56;
          uint64_t v15 = (char *)v60;
        }
      }
      uint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      unsigned int v19 = v67;
      unsigned int v20 = __p;
      if (v67 != __p)
      {
        do
          unsigned int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        unsigned int v20 = __p;
      }
      uint64_t v67 = v18;
      operator delete(v20);
    }
    unsigned int v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      uint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::mps::ScatterAlongAxisOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"mode", 4, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::mps::__mlir_ods_local_attr_constraint_MPSOps40(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1
    || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::ScatterModeAttr,void>::id)
  {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    uint64_t v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    BOOL v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        BOOL v8 = (char *)v35;
        uint64_t v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        BOOL v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      long long v29 = a2;
      uint64_t v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        uint64_t v30 = "' failed to satisfy constraint: valid ScatterMode";
        uint64_t v31 = 49;
        uint64_t v11 = &v29;
        uint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v12 = (char *)v35;
            uint64_t v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            uint64_t v12 = (char *)v35;
          }
        }
        long long v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)long long v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      long long v17 = v42;
      uint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          long long v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      uint64_t v42 = v16;
      operator delete(v18);
    }
    unsigned int v19 = v39;
    if (v39)
    {
      unsigned int v20 = v40;
      unsigned int v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = (void *)*--v20;
          uint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        unsigned int v21 = v39;
      }
      uint64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 117;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[161];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::mps::ScatterModeAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::ScatterModeAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::ScatterModeAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    BOOL v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)BOOL v8 = v9;
    ++v47;
  }
  uint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::ScatterModeAttr]";
  unint64_t v41 = 76;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    uint64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unsigned int v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unsigned int v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            unsigned int v19 = (char *)v46;
          }
        }
        unsigned int v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)unsigned int v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      uint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      int64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = (void *)*--v27;
          long long v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      int64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

void mlir::mps::ScatterAlongAxisOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  v33[2] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a4;
  uint64_t v27 = a3;
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v27, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v26, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v25, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  unint64_t v10 = *a1;
  unsigned int v28 = a7;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v10);
  uint64_t v31 = &mlir::detail::TypeIDResolver<mlir::mps::ScatterModeAttr,void>::id;
  uint64_t v32 = (uint64_t)v10;
  uint64_t v12 = mlir::StorageUniquer::get<mlir::mps::detail::ScatterModeAttrStorage,mlir::mps::ScatterMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail22ScatterModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_15ScatterModeAttrEJNS2_11ScatterModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v31, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::ScatterModeAttr,void>::id, &v28);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties>((void *)a2) = v12;
  uint64_t v31 = v33;
  uint64_t v32 = 0x200000000;
  uint64_t v13 = *(void *)a2;
  mlir::ValueRange::ValueRange(v30, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v15 = mlir::ValueRange::ValueRange(&v29, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ScatterAlongAxisOp::inferReturnTypes((uint64_t)v15, v13, 1, v30[0], v30[1], v16, v17, v18, v22, v23, (uint64_t)&v31))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unsigned int v19 = v31;
  }
  uint64_t v20 = v32;
  uint64_t v21 = *(unsigned int *)(a2 + 72);
  if (v21 + (unint64_t)v32 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v21 + v32, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if (v20)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v21), v19, 8 * v20);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + v20;
  if (v31 != v33) {
    free(v31);
  }
}

BOOL mlir::mps::ScatterAlongAxisOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v18[0] = v2;
    if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps40(v3, (const void **)"mode", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps40(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
    {
      return 0;
    }
    if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps7(*this, *(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 2u))return 0; {
    if (mlir::mps::__mlir_ods_local_type_constraint_MPSOps2(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 3u))
    }
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v4 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = (const void **)"requires attribute 'mode'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError(this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      unint64_t v7 = (void **)__p;
      if (__p)
      {
        BOOL v8 = v24;
        long long v9 = __p;
        if (v24 != __p)
        {
          do
            BOOL v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          long long v9 = __p;
        }
        uint64_t v24 = v7;
        operator delete(v9);
      }
      unint64_t v10 = v21;
      if (v21)
      {
        unint64_t v11 = v22;
        uint64_t v12 = v21;
        if (v22 != v21)
        {
          do
          {
            unint64_t v14 = (void *)*--v11;
            uint64_t v13 = v14;
            *unint64_t v11 = 0;
            if (v14) {
              operator delete[](v13);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v21;
        }
        uint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

uint64_t mlir::mps::ScatterAlongAxisOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.scatter_along_axis", 22, v2, v3, 0, 0);
  void *v4 = &unk_1EC9814C0;
  v4[12] = mlir::mps::ScatterAlongAxisOp::canonicalize;
  long long v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    long long v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::ScatterNDOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v87 = v6;
  if (!v6)
  {
    a3(v91, a4);
    if (v91[0])
    {
      int v88 = 3;
      unsigned int v89 = "expected DictionaryAttr to set properties";
      uint64_t v90 = 41;
      uint64_t v26 = &v88;
      uint64_t v27 = (char *)v92;
      if (v93 >= v94)
      {
        unint64_t v73 = v93 + 1;
        if (v92 <= &v88 && (char *)v92 + 24 * v93 > (char *)&v88)
        {
          int64_t v80 = (char *)&v88 - (unsigned char *)v92;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v73, 24);
          uint64_t v27 = (char *)v92;
          uint64_t v26 = (int *)((char *)v92 + v80);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v73, 24);
          uint64_t v26 = &v88;
          uint64_t v27 = (char *)v92;
        }
      }
      unsigned int v28 = &v27[24 * v93];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)unsigned int v28 = v29;
      ++v93;
      if (v91[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v91);
      }
    }
    if (!v100) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v99;
      uint64_t v32 = __p;
      if (v99 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      unsigned int v99 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v96;
    if (!v96) {
      goto LABEL_95;
    }
    unint64_t v33 = v97;
    uint64_t v23 = v96;
    if (v97 == v96) {
      goto LABEL_94;
    }
    do
    {
      int64_t v35 = (void *)*--v33;
      unint64_t v34 = v35;
      *unint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_93;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v87, "batch_dims", 0xAuLL);
  if (!v8)
  {
    a3(v91, a4);
    if (v91[0])
    {
      int v88 = 3;
      unsigned int v89 = "expected key entry for batch_dims in DictionaryAttr to set Properties.";
      uint64_t v90 = 70;
      int64_t v36 = &v88;
      int64_t v37 = (char *)v92;
      if (v93 >= v94)
      {
        unint64_t v75 = v93 + 1;
        if (v92 <= &v88 && (char *)v92 + 24 * v93 > (char *)&v88)
        {
          int64_t v82 = (char *)&v88 - (unsigned char *)v92;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v75, 24);
          int64_t v37 = (char *)v92;
          int64_t v36 = (int *)((char *)v92 + v82);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v75, 24);
          int64_t v36 = &v88;
          int64_t v37 = (char *)v92;
        }
      }
      unsigned int v38 = &v37[24 * v93];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)unsigned int v38 = v39;
      ++v93;
      if (v91[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v91);
      }
    }
    if (!v100) {
      return 0;
    }
    uint64_t v40 = (void **)__p;
    if (__p)
    {
      unint64_t v41 = v99;
      uint64_t v42 = __p;
      if (v99 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      unsigned int v99 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v96;
    if (!v96) {
      goto LABEL_95;
    }
    __int16 v43 = v97;
    uint64_t v23 = v96;
    if (v97 == v96) {
      goto LABEL_94;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      uint64_t v44 = v45;
      *__int16 v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_93;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a3(v91, a4);
    if (v91[0])
    {
      int v88 = 3;
      uint64_t v90 = 55;
      unint64_t v10 = &v88;
      unint64_t v11 = (char *)v92;
      if (v93 >= v94)
      {
        unint64_t v74 = v93 + 1;
        if (v92 <= &v88 && (char *)v92 + 24 * v93 > (char *)&v88)
        {
          int64_t v81 = (char *)&v88 - (unsigned char *)v92;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v74, 24);
          unint64_t v11 = (char *)v92;
          unint64_t v10 = (int *)((char *)v92 + v81);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v74, 24);
          unint64_t v10 = &v88;
          unint64_t v11 = (char *)v92;
        }
      }
      uint64_t v12 = &v11[24 * v93];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v93;
      if (v91[0])
      {
        unint64_t v14 = &v88;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v88, v9);
        uint64_t v15 = (char *)v92;
        if (v93 >= v94)
        {
          unint64_t v76 = v93 + 1;
          if (v92 <= &v88 && (char *)v92 + 24 * v93 > (char *)&v88)
          {
            int64_t v83 = (char *)&v88 - (unsigned char *)v92;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v76, 24);
            uint64_t v15 = (char *)v92;
            unint64_t v14 = (int *)((char *)v92 + v83);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v76, 24);
            unint64_t v14 = &v88;
            uint64_t v15 = (char *)v92;
          }
        }
        uint64_t v16 = &v15[24 * v93];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v93;
        if (v91[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v91);
        }
      }
    }
    if (!v100) {
      return 0;
    }
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      unsigned int v19 = v99;
      uint64_t v20 = __p;
      if (v99 != __p)
      {
        do
          unsigned int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unsigned int v99 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v96;
    if (!v96) {
      goto LABEL_95;
    }
    uint64_t v22 = v97;
    uint64_t v23 = v96;
    if (v97 == v96) {
      goto LABEL_94;
    }
    do
    {
      char v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
    goto LABEL_93;
  }
  *a1 = v8;
  uint64_t v46 = mlir::DictionaryAttr::get((uint64_t)&v87, "mode", 4uLL);
  if (!v46)
  {
    a3(v91, a4);
    if (v91[0])
    {
      int v88 = 3;
      unsigned int v89 = "expected key entry for mode in DictionaryAttr to set Properties.";
      uint64_t v90 = 64;
      unsigned int v62 = &v88;
      uint64_t v63 = (char *)v92;
      if (v93 >= v94)
      {
        unint64_t v78 = v93 + 1;
        if (v92 <= &v88 && (char *)v92 + 24 * v93 > (char *)&v88)
        {
          int64_t v85 = (char *)&v88 - (unsigned char *)v92;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v78, 24);
          uint64_t v63 = (char *)v92;
          unsigned int v62 = (int *)((char *)v92 + v85);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v78, 24);
          unsigned int v62 = &v88;
          uint64_t v63 = (char *)v92;
        }
      }
      uint64_t v64 = &v63[24 * v93];
      long long v65 = *(_OWORD *)v62;
      *((void *)v64 + 2) = *((void *)v62 + 2);
      *(_OWORD *)uint64_t v64 = v65;
      ++v93;
      if (v91[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v91);
      }
    }
    if (!v100) {
      return 0;
    }
    uint64_t v66 = (void **)__p;
    if (__p)
    {
      uint64_t v67 = v99;
      char v68 = __p;
      if (v99 != __p)
      {
        do
          uint64_t v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        char v68 = __p;
      }
      unsigned int v99 = v66;
      operator delete(v68);
    }
    uint64_t v21 = v96;
    if (!v96) {
      goto LABEL_95;
    }
    uint64_t v69 = v97;
    uint64_t v23 = v96;
    if (v97 == v96) {
      goto LABEL_94;
    }
    do
    {
      unint64_t v71 = (void *)*--v69;
      unint64_t v70 = v71;
      *uint64_t v69 = 0;
      if (v71) {
        operator delete[](v70);
      }
    }
    while (v69 != v21);
    goto LABEL_93;
  }
  uint64_t v47 = v46;
  if (*(_UNKNOWN **)(*(void *)v46 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::ScatterModeAttr,void>::id)
  {
    a1[1] = v46;
    return 1;
  }
  a3(v91, a4);
  if (v91[0])
  {
    int v88 = 3;
    uint64_t v90 = 49;
    unsigned int v48 = &v88;
    unint64_t v49 = (char *)v92;
    if (v93 >= v94)
    {
      unint64_t v77 = v93 + 1;
      if (v92 <= &v88 && (char *)v92 + 24 * v93 > (char *)&v88)
      {
        int64_t v84 = (char *)&v88 - (unsigned char *)v92;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v77, 24);
        unint64_t v49 = (char *)v92;
        unsigned int v48 = (int *)((char *)v92 + v84);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v77, 24);
        unsigned int v48 = &v88;
        unint64_t v49 = (char *)v92;
      }
    }
    unint64_t v50 = &v49[24 * v93];
    long long v51 = *(_OWORD *)v48;
    *((void *)v50 + 2) = *((void *)v48 + 2);
    *(_OWORD *)unint64_t v50 = v51;
    ++v93;
    if (v91[0])
    {
      int64_t v52 = &v88;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v88, v47);
      int64_t v53 = (char *)v92;
      if (v93 >= v94)
      {
        unint64_t v79 = v93 + 1;
        if (v92 <= &v88 && (char *)v92 + 24 * v93 > (char *)&v88)
        {
          int64_t v86 = (char *)&v88 - (unsigned char *)v92;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v79, 24);
          int64_t v53 = (char *)v92;
          int64_t v52 = (int *)((char *)v92 + v86);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v79, 24);
          int64_t v52 = &v88;
          int64_t v53 = (char *)v92;
        }
      }
      char v54 = &v53[24 * v93];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = *((void *)v52 + 2);
      *(_OWORD *)char v54 = v55;
      ++v93;
      if (v91[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v91);
      }
    }
  }
  if (v100)
  {
    int v56 = (void **)__p;
    if (__p)
    {
      char v57 = v99;
      uint64_t v58 = __p;
      if (v99 != __p)
      {
        do
          char v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        uint64_t v58 = __p;
      }
      unsigned int v99 = v56;
      operator delete(v58);
    }
    uint64_t v21 = v96;
    if (!v96) {
      goto LABEL_95;
    }
    uint64_t v59 = v97;
    uint64_t v23 = v96;
    if (v97 == v96)
    {
LABEL_94:
      int64_t v97 = v21;
      operator delete(v23);
LABEL_95:
      if (v92 != v95) {
        free(v92);
      }
      return 0;
    }
    do
    {
      unsigned int v61 = (void *)*--v59;
      __int16 v60 = v61;
      *uint64_t v59 = 0;
      if (v61) {
        operator delete[](v60);
      }
    }
    while (v59 != v21);
LABEL_93:
    uint64_t v23 = v96;
    goto LABEL_94;
  }
  return 0;
}

uint64_t mlir::mps::ScatterNDOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v21[6] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a1;
  unsigned int v19 = v21;
  uint64_t v20 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"batch_dims", 10, *a2);
    uint64_t v5 = v4;
    unsigned int v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      unsigned int v6 = v20;
    }
    unint64_t v7 = (uint64_t *)((char *)v19 + 16 * v6);
    *unint64_t v7 = NamedAttr;
    v7[1] = v5;
    unsigned int v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    uint64_t v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      unint64_t v10 = (uint64_t *)v19;
      if (v8) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t DictionaryAttr = 0;
      if (v10 == v21) {
        return DictionaryAttr;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"mode", 4, v9);
  uint64_t v15 = v14;
  unsigned int v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    unsigned int v16 = v20;
  }
  long long v17 = (uint64_t *)((char *)v19 + 16 * v16);
  *long long v17 = v13;
  v17[1] = v15;
  unsigned int v8 = v20 + 1;
  LODWORD(v20) = v8;
  unint64_t v10 = (uint64_t *)v19;
  if (!v8) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  unint64_t v10 = (uint64_t *)v19;
  if (v19 != v21) {
LABEL_7:
  }
    free(v10);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x10uLL);
    void *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 110;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        unsigned int v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[163];
    return a1[32];
  }
  return result;
}

void mlir::mps::ScatterNDOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  unint64_t v34[2] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = a4;
  uint64_t v28 = a3;
  uint64_t v26 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v28, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v27, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v26, 1);
  uint64_t IntegerType = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a6);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties>((void *)a2) = IntegerAttr;
  uint64_t v13 = *(mlir::MLIRContext **)a1;
  unsigned int v29 = a7;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v13);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::ScatterModeAttr,void>::id;
  uint64_t v33 = (uint64_t)v13;
  uint64_t v15 = mlir::StorageUniquer::get<mlir::mps::detail::ScatterModeAttrStorage,mlir::mps::ScatterMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail22ScatterModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_15ScatterModeAttrEJNS2_11ScatterModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::ScatterModeAttr,void>::id, &v29);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties>((void *)a2)
            + 8) = v15;
  __src = v34;
  uint64_t v33 = 0x200000000;
  unsigned int v16 = *(mlir::UnknownLoc **)a1;
  long long v17 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v31, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v20 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v30, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ScatterNDOp::inferReturnTypes(v16, v17, 1, v31[0], v31[1], Dictionary, v20, v21, v30[0], v30[1], &__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v22 = __src;
  }
  uint64_t v23 = v33;
  uint64_t v24 = *(unsigned int *)(a2 + 72);
  unint64_t v25 = v24 + v33;
  if (v25 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v25, 8);
    LODWORD(v24) = *(_DWORD *)(a2 + 72);
  }
  if (v23)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v24), v22, 8 * v23);
    LODWORD(v24) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v24 + v23;
  if (__src != v34) {
    free(__src);
  }
}

BOOL mlir::mps::ScatterNDOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(const void ***)v3;
  if (*(void *)v3)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    if (v5)
    {
      v26[0] = v2;
      if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v4, (const void **)"batch_dims", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v26))return 0; {
      v26[0] = *this;
      }
      if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps40(v5, (const void **)"mode", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps40(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v26)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps7(*this,
                               *(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8,
                               (const void **)"operand",
                               (const void **)7,
                               2u))
      {
        return 0;
      }
      if (*((_DWORD *)*this + 9)) {
        uint64_t v6 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
      return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    v24[0] = (const void **)"requires attribute 'mode'";
    __int16 v25 = 259;
    mlir::OpState::emitOpError(this, v24, (uint64_t)v26);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      long long v17 = (void **)__p;
      if (__p)
      {
        uint64_t v18 = v32;
        unsigned int v19 = __p;
        if (v32 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          unsigned int v19 = __p;
        }
        uint64_t v32 = v17;
        operator delete(v19);
      }
      uint64_t v12 = v29;
      if (!v29) {
        goto LABEL_46;
      }
      uint64_t v20 = v30;
      unint64_t v14 = v29;
      if (v30 == v29)
      {
LABEL_45:
        uint64_t v30 = v12;
        operator delete(v14);
LABEL_46:
        if (v27 != &v28) {
          free(v27);
        }
        return v8;
      }
      do
      {
        uint64_t v22 = (void *)*--v20;
        int v21 = v22;
        void *v20 = 0;
        if (v22) {
          operator delete[](v21);
        }
      }
      while (v20 != v12);
LABEL_44:
      unint64_t v14 = v29;
      goto LABEL_45;
    }
  }
  else
  {
    v24[0] = (const void **)"requires attribute 'batch_dims'";
    __int16 v25 = 259;
    mlir::OpState::emitOpError(this, v24, (uint64_t)v26);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      unint64_t v9 = (void **)__p;
      if (__p)
      {
        uint64_t v10 = v32;
        unint64_t v11 = __p;
        if (v32 != __p)
        {
          do
            uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          unint64_t v11 = __p;
        }
        uint64_t v32 = v9;
        operator delete(v11);
      }
      uint64_t v12 = v29;
      if (!v29) {
        goto LABEL_46;
      }
      uint64_t v13 = v30;
      unint64_t v14 = v29;
      if (v30 == v29) {
        goto LABEL_45;
      }
      do
      {
        unsigned int v16 = (void *)*--v13;
        uint64_t v15 = v16;
        void *v13 = 0;
        if (v16) {
          operator delete[](v15);
        }
      }
      while (v13 != v12);
      goto LABEL_44;
    }
  }
  return v8;
}

uint64_t mlir::mps::ScatterNDOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.scatter_nd", 14, v2, v3, 0, 0);
  void *v4 = &unk_1EC97FC00;
  v4[12] = mlir::mps::ScatterNDOp::canonicalize;
  unint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 108;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[165];
    return a1[32];
  }
  return result;
}

void mlir::mps::ScatterOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  v33[2] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a4;
  uint64_t v27 = a3;
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v27, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v26, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v25, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  uint64_t v10 = *a1;
  unsigned int v28 = a7;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v10);
  uint64_t v31 = &mlir::detail::TypeIDResolver<mlir::mps::ScatterModeAttr,void>::id;
  uint64_t v32 = (uint64_t)v10;
  uint64_t v12 = mlir::StorageUniquer::get<mlir::mps::detail::ScatterModeAttrStorage,mlir::mps::ScatterMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail22ScatterModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_15ScatterModeAttrEJNS2_11ScatterModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v31, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::ScatterModeAttr,void>::id, &v28);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties>((void *)a2) = v12;
  uint64_t v31 = v33;
  uint64_t v32 = 0x200000000;
  uint64_t v13 = *(void *)a2;
  mlir::ValueRange::ValueRange(v30, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v15 = mlir::ValueRange::ValueRange(&v29, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ScatterOp::inferReturnTypes((uint64_t)v15, v13, 1, v30[0], v30[1], v16, v17, v18, v22, v23, (uint64_t)&v31))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unsigned int v19 = v31;
  }
  uint64_t v20 = v32;
  uint64_t v21 = *(unsigned int *)(a2 + 72);
  if (v21 + (unint64_t)v32 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v21 + v32, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if (v20)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v21), v19, 8 * v20);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + v20;
  if (v31 != v33) {
    free(v31);
  }
}

uint64_t mlir::mps::ScatterOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.scatter", 11, v2, v3, 0, 0);
  void *v4 = &unk_1EC983BF0;
  v4[12] = mlir::mps::ScatterOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SelectOpGenericAdaptorBase::SelectOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.select", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::SelectOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v25[2] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  uint64_t v18 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  __src = v25;
  uint64_t v24 = 0x200000000;
  uint64_t v6 = *(void *)a2;
  mlir::ValueRange::ValueRange(v22, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  __int16 v8 = mlir::ValueRange::ValueRange(&v21, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::SelectOp::inferReturnTypes((uint64_t)v8, v6, 1, v22[0], v22[1], v9, v10, v11, v16, v17, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v12 = __src;
  }
  uint64_t v13 = v24;
  uint64_t v14 = *(unsigned int *)(a2 + 72);
  unint64_t v15 = v14 + v24;
  if (v15 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  if (v13)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v14), v12, 8 * v13);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v14 + v13;
  if (__src != v25) {
    free(__src);
  }
}

uint64_t mlir::mps::SelectOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 2u))
  {
    return 0;
  }
  uint64_t v2 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0))return 0; {
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(*(void *)((*this)[9] + 56));
  }
  if (ElementTypeOrSelf == mlir::getElementTypeOrSelf(*(void *)((*this)[9] + 88)))
  {
    uint64_t v5 = mlir::getElementTypeOrSelf(*(void *)((*this)[9] + 88));
    uint64_t v6 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
    uint64_t v7 = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
    if (v5 == mlir::getElementTypeOrSelf(v7))
    {
      uint64_t v8 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
      uint64_t v9 = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      uint64_t v10 = mlir::getElementTypeOrSelf(v9);
      if (v10 == mlir::getElementTypeOrSelf(*(void *)((*this)[9] + 56))) {
        return 1;
      }
    }
  }
  unint64_t v21 = (const void **)"failed to verify that all of {true_value, false_value, result} have same element type";
  __int16 v22 = 259;
  mlir::OpState::emitOpError(this, &v21, (uint64_t)v23);
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  }
  if (v30)
  {
    uint64_t v12 = (void **)__p;
    if (__p)
    {
      uint64_t v13 = v29;
      uint64_t v14 = __p;
      if (v29 != __p)
      {
        do
          uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        uint64_t v14 = __p;
      }
      unint64_t v29 = v12;
      operator delete(v14);
    }
    unint64_t v15 = v26;
    if (v26)
    {
      uint64_t v16 = v27;
      uint64_t v17 = v26;
      if (v27 != v26)
      {
        do
        {
          uint64_t v19 = (void *)*--v16;
          uint64_t v18 = v19;
          void *v16 = 0;
          if (v19) {
            operator delete[](v18);
          }
        }
        while (v16 != v15);
        uint64_t v17 = v26;
      }
      uint64_t v27 = v15;
      operator delete(v17);
    }
    if (v24 != &v25) {
      free(v24);
    }
  }
  return v11;
}

uint64_t mlir::mps::SelectOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.select", 10, v2, v3, 0, 0);
  void *v4 = &unk_1EC9836C8;
  v4[12] = mlir::mps::SelectOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::ShapeOpGenericAdaptorBase::ShapeOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.shape", 9, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::ShapeOp::build(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v21[2] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v16, 1);
  __src = v21;
  uint64_t v20 = 0x200000000;
  uint64_t v4 = *(void *)a2;
  mlir::ValueRange::ValueRange(v18, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v6 = mlir::ValueRange::ValueRange(&v17, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::ShapeOp::inferReturnTypes((uint64_t)v6, v4, 1, v18[0], v18[1], v7, v8, v9, v14, v15, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v10 = __src;
  }
  uint64_t v11 = v20;
  uint64_t v12 = *(unsigned int *)(a2 + 72);
  unint64_t v13 = v12 + v20;
  if (v13 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v13, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  if (v11)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v12), v10, 8 * v11);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v12 + v11;
  if (__src != v21) {
    free(__src);
  }
}

uint64_t mlir::mps::ShapeOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.shape", 9, v2, v3, 0, 0);
  void *v4 = &unk_1EC983250;
  v4[12] = mlir::mps::ShapeOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SigmoidGradientOpGenericAdaptorBase::SigmoidGradientOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.sigmoid_gradient", 20, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SigmoidGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.sigmoid_gradient", 20, v2, v3, 0, 0);
  void *v4 = &unk_1EC981360;
  v4[12] = mlir::mps::SigmoidGradientOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SigmoidGradientWithSigmoidOpGenericAdaptorBase::SigmoidGradientWithSigmoidOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.sigmoid_gradient_with_sigmoid", 33, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SigmoidGradientWithSigmoidOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.sigmoid_gradient_with_sigmoid", 33, v2, v3, 0, 0);
  void *v4 = &unk_1EC981FC0;
  v4[12] = mlir::mps::SigmoidGradientWithSigmoidOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SigmoidHardOpGenericAdaptorBase::SigmoidHardOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.sigmoid_hard", 16, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SigmoidHardOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.sigmoid_hard", 16, v2, v3, 0, 0);
  void *v4 = &unk_1EC980338;
  v4[12] = mlir::mps::SigmoidHardOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SigmoidOpGenericAdaptorBase::SigmoidOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.sigmoid", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SigmoidOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.sigmoid", 11, v2, v3, 0, 0);
  void *v4 = &unk_1EC983C48;
  v4[12] = mlir::mps::SigmoidOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SignOpGenericAdaptorBase::SignOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.sign", 8, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SignOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.sign", 8, v2, v3, 0, 0);
  void *v4 = &unk_1EC982B18;
  v4[12] = mlir::mps::SignOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SignbitOpGenericAdaptorBase::SignbitOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.signbit", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SignbitOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.signbit", 11, v2, v3, 0, 0);
  void *v4 = &unk_1EC983CA0;
  v4[12] = mlir::mps::SignbitOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SinOpGenericAdaptorBase::SinOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.sin", 7, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SinOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.sin", 7, v2, v3, 0, 0);
  void *v4 = &unk_1EC982598;
  v4[12] = mlir::mps::SinOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::getAsmResultNames(uint64_t *a1, void (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  if (*(_DWORD *)(*a1 + 36)) {
    uint64_t v5 = *a1 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  a2(a3, NextResultAtOffset, "gradient_output_sequence", 24);
  if (*(_DWORD *)(*a1 + 36)) {
    uint64_t v7 = *a1 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 1);
  uint64_t v9 = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
  a2(a3, v9, "gradient_recurrent_weight", 25);
  uint64_t v10 = *a1;
  int v11 = *(_DWORD *)(*a1 + 36);
  uint64_t v12 = v10 - 16;
  if (v11) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t result = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 2);
  if (v11 != 2)
  {
    uint64_t v15 = mlir::detail::OpResultImpl::getNextResultAtOffset(result, 0);
    return ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))a2)(a3, v15, "gradient_input_state", 20);
  }
  return result;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::getODSOperands(mlir::mps::SingleGateRNNGradientOp *this, unsigned int a2)
{
  unint64_t v2 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v3 = *(void *)this + 16 * ((v2 >> 23) & 1) + 64;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!a2)
  {
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (a2 >= 8)
  {
    uint64_t v4 = a2 & 0xFFFFFFF8;
    uint64_t v7 = (int32x4_t *)(v3 + 32);
    int32x4_t v8 = 0uLL;
    uint64_t v9 = v4;
    int32x4_t v10 = 0uLL;
    do
    {
      int32x4_t v8 = vaddq_s32(v7[-1], v8);
      int32x4_t v10 = vaddq_s32(*v7, v10);
      v7 += 2;
      v9 -= 8;
    }
    while (v9);
    unsigned int v5 = vaddvq_s32(vaddq_s32(v10, v8));
    if (v4 == a2) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
  }
  uint64_t v11 = a2 - v4;
  uint64_t v12 = (int *)(v3 + 4 * v4 + 16);
  do
  {
    int v13 = *v12++;
    v5 += v13;
    --v11;
  }
  while (v11);
LABEL_13:
  uint64_t v6 = v5;
LABEL_14:
  if ((v2 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v6;
  }
  else {
    return 32 * v6;
  }
}

BOOL mlir::mps::SingleGateRNNGradientOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v88 = v6;
  if (!v6)
  {
    a3(v92, a4);
    if (v92[0])
    {
      int v89 = 3;
      uint64_t v90 = "expected DictionaryAttr to set properties";
      uint64_t v91 = 41;
      uint64_t v26 = &v89;
      uint64_t v27 = (char *)v93;
      if (v94 >= v95)
      {
        unint64_t v74 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          int64_t v81 = (char *)&v89 - (unsigned char *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v74, 24);
          uint64_t v27 = (char *)v93;
          uint64_t v26 = (int *)((char *)v93 + v81);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v74, 24);
          uint64_t v26 = &v89;
          uint64_t v27 = (char *)v93;
        }
      }
      unsigned int v28 = &v27[24 * v94];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)unsigned int v28 = v29;
      ++v94;
      if (v92[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
      }
    }
    if (!v101) {
      return 0;
    }
    char v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v100;
      uint64_t v32 = __p;
      if (v100 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      char v100 = v30;
      operator delete(v32);
    }
    unint64_t v21 = v97;
    if (!v97) {
      goto LABEL_100;
    }
    char v33 = v98;
    uint64_t v23 = v97;
    if (v98 == v97)
    {
LABEL_99:
      unsigned int v98 = v21;
      operator delete(v23);
LABEL_100:
      if (v93 != v96) {
        free(v93);
      }
      return 0;
    }
    do
    {
      int64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *char v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_98:
    uint64_t v23 = v97;
    goto LABEL_99;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v88, "activation", 0xAuLL);
  if (!v8)
  {
    a3(v92, a4);
    if (v92[0])
    {
      int v89 = 3;
      uint64_t v90 = "expected key entry for activation in DictionaryAttr to set Properties.";
      uint64_t v91 = 70;
      int64_t v36 = &v89;
      int64_t v37 = (char *)v93;
      if (v94 >= v95)
      {
        unint64_t v76 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          int64_t v83 = (char *)&v89 - (unsigned char *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v76, 24);
          int64_t v37 = (char *)v93;
          int64_t v36 = (int *)((char *)v93 + v83);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v76, 24);
          int64_t v36 = &v89;
          int64_t v37 = (char *)v93;
        }
      }
      unsigned int v38 = &v37[24 * v94];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)unsigned int v38 = v39;
      ++v94;
      if (v92[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
      }
    }
    if (!v101) {
      return 0;
    }
    uint64_t v40 = (void **)__p;
    if (__p)
    {
      unint64_t v41 = v100;
      uint64_t v42 = __p;
      if (v100 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      char v100 = v40;
      operator delete(v42);
    }
    unint64_t v21 = v97;
    if (!v97) {
      goto LABEL_100;
    }
    __int16 v43 = v98;
    uint64_t v23 = v97;
    if (v98 == v97) {
      goto LABEL_99;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      uint64_t v44 = v45;
      *__int16 v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_98;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id)
  {
    a3(v92, a4);
    if (v92[0])
    {
      int v89 = 3;
      uint64_t v91 = 55;
      int32x4_t v10 = &v89;
      uint64_t v11 = (char *)v93;
      if (v94 >= v95)
      {
        unint64_t v75 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          int64_t v82 = (char *)&v89 - (unsigned char *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v75, 24);
          uint64_t v11 = (char *)v93;
          int32x4_t v10 = (int *)((char *)v93 + v82);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v75, 24);
          int32x4_t v10 = &v89;
          uint64_t v11 = (char *)v93;
        }
      }
      uint64_t v12 = &v11[24 * v94];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v94;
      if (v92[0])
      {
        uint64_t v14 = &v89;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v89, v9);
        uint64_t v15 = (char *)v93;
        if (v94 >= v95)
        {
          unint64_t v77 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            int64_t v84 = (char *)&v89 - (unsigned char *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
            uint64_t v15 = (char *)v93;
            uint64_t v14 = (int *)((char *)v93 + v84);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
            uint64_t v14 = &v89;
            uint64_t v15 = (char *)v93;
          }
        }
        uint64_t v16 = &v15[24 * v94];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v94;
        if (v92[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
        }
      }
    }
    if (!v101) {
      return 0;
    }
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v100;
      uint64_t v20 = __p;
      if (v100 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      char v100 = v18;
      operator delete(v20);
    }
    unint64_t v21 = v97;
    if (!v97) {
      goto LABEL_100;
    }
    __int16 v22 = v98;
    uint64_t v23 = v97;
    if (v98 == v97) {
      goto LABEL_99;
    }
    do
    {
      uint64_t v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *__int16 v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
    goto LABEL_98;
  }
  *a1 = v8;
  uint64_t v46 = mlir::DictionaryAttr::get((uint64_t)&v88, "gradient_for_input_state", 0x18uLL);
  if (v46)
  {
    uint64_t v47 = v46;
    if (*(_UNKNOWN **)(*(void *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v92, a4);
      if (v92[0])
      {
        int v89 = 3;
        uint64_t v91 = 69;
        unsigned int v48 = &v89;
        unint64_t v49 = (char *)v93;
        if (v94 >= v95)
        {
          unint64_t v78 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            int64_t v85 = (char *)&v89 - (unsigned char *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v78, 24);
            unint64_t v49 = (char *)v93;
            unsigned int v48 = (int *)((char *)v93 + v85);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v78, 24);
            unsigned int v48 = &v89;
            unint64_t v49 = (char *)v93;
          }
        }
        unint64_t v50 = &v49[24 * v94];
        long long v51 = *(_OWORD *)v48;
        *((void *)v50 + 2) = *((void *)v48 + 2);
        *(_OWORD *)unint64_t v50 = v51;
        ++v94;
        if (v92[0])
        {
          int64_t v52 = &v89;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v89, v47);
          int64_t v53 = (char *)v93;
          if (v94 >= v95)
          {
            unint64_t v79 = v94 + 1;
            if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
            {
              int64_t v86 = (char *)&v89 - (unsigned char *)v93;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v79, 24);
              int64_t v53 = (char *)v93;
              int64_t v52 = (int *)((char *)v93 + v86);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v79, 24);
              int64_t v52 = &v89;
              int64_t v53 = (char *)v93;
            }
          }
          char v54 = &v53[24 * v94];
          long long v55 = *(_OWORD *)v52;
          *((void *)v54 + 2) = *((void *)v52 + 2);
          *(_OWORD *)char v54 = v55;
          ++v94;
          if (v92[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
          }
        }
      }
      if (!v101) {
        return 0;
      }
      int v56 = (void **)__p;
      if (__p)
      {
        char v57 = v100;
        uint64_t v58 = __p;
        if (v100 != __p)
        {
          do
            char v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
          while (v57 != v56);
          uint64_t v58 = __p;
        }
        char v100 = v56;
        operator delete(v58);
      }
      unint64_t v21 = v97;
      if (!v97) {
        goto LABEL_100;
      }
      uint64_t v59 = v98;
      uint64_t v23 = v97;
      if (v98 == v97) {
        goto LABEL_99;
      }
      do
      {
        unsigned int v61 = (void *)*--v59;
        __int16 v60 = v61;
        *uint64_t v59 = 0;
        if (v61) {
          operator delete[](v60);
        }
      }
      while (v59 != v21);
      goto LABEL_98;
    }
    a1[1] = v46;
  }
  unsigned int v62 = (void *)mlir::DictionaryAttr::get((uint64_t)&v88, "operandSegmentSizes", 0x13uLL);
  if (!v62)
  {
    unsigned int v62 = (void *)mlir::DictionaryAttr::get((uint64_t)&v88, "operand_segment_sizes", 0x15uLL);
    if (!v62)
    {
      a3(v92, a4);
      if (v92[0])
      {
        int v89 = 3;
        uint64_t v90 = "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.";
        uint64_t v91 = 79;
        uint64_t v64 = &v89;
        long long v65 = (char *)v93;
        if (v94 >= v95)
        {
          unint64_t v80 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            int64_t v87 = (char *)&v89 - (unsigned char *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v80, 24);
            long long v65 = (char *)v93;
            uint64_t v64 = (int *)((char *)v93 + v87);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v80, 24);
            uint64_t v64 = &v89;
            long long v65 = (char *)v93;
          }
        }
        uint64_t v66 = &v65[24 * v94];
        long long v67 = *(_OWORD *)v64;
        *((void *)v66 + 2) = *((void *)v64 + 2);
        *(_OWORD *)uint64_t v66 = v67;
        ++v94;
        if (v92[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
        }
      }
      if (!v101) {
        return 0;
      }
      char v68 = (void **)__p;
      if (__p)
      {
        uint64_t v69 = v100;
        unint64_t v70 = __p;
        if (v100 != __p)
        {
          do
            uint64_t v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
          while (v69 != v68);
          unint64_t v70 = __p;
        }
        char v100 = v68;
        operator delete(v70);
      }
      unint64_t v21 = v97;
      if (!v97) {
        goto LABEL_100;
      }
      unint64_t v71 = v98;
      uint64_t v23 = v97;
      if (v98 == v97) {
        goto LABEL_99;
      }
      do
      {
        unint64_t v73 = (void *)*--v71;
        unint64_t v72 = v73;
        *unint64_t v71 = 0;
        if (v73) {
          operator delete[](v72);
        }
      }
      while (v71 != v21);
      goto LABEL_98;
    }
  }
  return mlir::convertFromAttribute(a1 + 2, (const char *)5, v62, a3, a4) != 0;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v29[6] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a1;
  uint64_t v27 = v29;
  uint64_t v28 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v26, (uint64_t)"activation", 10, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
      unsigned int v7 = v28;
    }
    uint64_t v8 = (uint64_t *)((char *)v27 + 16 * v7);
    uint64_t *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v28) = v28 + 1;
  }
  uint64_t v9 = a2[1];
  if (v9)
  {
    uint64_t v10 = mlir::Builder::getNamedAttr(&v26, (uint64_t)"gradient_for_input_state", 24, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
      unsigned int v13 = v28;
    }
    uint64_t v14 = (uint64_t *)((char *)v27 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    LODWORD(v28) = v28 + 1;
  }
  uint64_t v15 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 2), 5);
  uint64_t v16 = mlir::Builder::getNamedAttr(&v26, (uint64_t)"operandSegmentSizes", 19, v15);
  uint64_t v18 = v17;
  unsigned int v19 = v28;
  if (v28 >= HIDWORD(v28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
    unsigned int v19 = v28;
  }
  uint64_t v20 = (uint64_t *)((char *)v27 + 16 * v19);
  uint64_t *v20 = v16;
  v20[1] = v18;
  BOOL v21 = __CFADD__(v28, 1);
  uint64_t v22 = (v28 + 1);
  LODWORD(v28) = v28 + 1;
  if (v21)
  {
    uint64_t DictionaryAttr = 0;
    uint64_t v24 = v27;
    if (v27 == v29) {
      return DictionaryAttr;
    }
    goto LABEL_16;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v26, (uint64_t *)v27, v22);
  uint64_t v24 = v27;
  if (v27 != v29) {
LABEL_16:
  }
    free(v24);
  return DictionaryAttr;
}

unint64_t mlir::mps::SingleGateRNNGradientOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = 0x1E8EB8000uLL;
  {
    unint64_t v23 = v1;
    uint64_t v25 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v15 = v14;
    unint64_t v1 = v23;
    a1 = v25;
    if (v15)
    {
      unint64_t v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v16 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      unint64_t v1 = v23;
      a1 = v25;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v3 = HIDWORD(v1);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v1) ^ HIDWORD(v1));
  unint64_t v30 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v5 = a1[1];
  {
    unint64_t v24 = v5;
    uint64_t v26 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v18 = v17;
    unint64_t v5 = v24;
    a1 = v26;
    if (v18)
    {
      unint64_t v19 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v19 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v19;
      unint64_t v5 = v24;
      a1 = v26;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v5) ^ HIDWORD(v5));
  unint64_t v29 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  {
    uint64_t v27 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v21 = v20;
    a1 = v27;
    if (v21)
    {
      unint64_t v22 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v22 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v22;
      unint64_t v2 = 0x1E8EB8000;
      a1 = v27;
    }
  }
  uint64_t v8 = *(void *)(v2 + 3024);
  unint64_t v9 = a1[3];
  unint64_t v10 = 0x9AE16A3B2F90404FLL * *(unint64_t *)((char *)a1 + 28);
  uint64_t v11 = __ROR8__(0xB492B66FBE98F273 * a1[2] - v9, 43)
      - 0x3C5A37A36834CED9 * *(unint64_t *)((char *)a1 + 20)
      + __ROR8__(v10 ^ v8, 30);
  uint64_t v12 = v8 + __ROR8__(v9 ^ 0xC949D7C7509E6557, 20) - 0x4B6D499041670D8DLL * a1[2] - v10 + 20;
  unint64_t v28 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v12 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v12)))) ^ ((0x9DDFEA08EB382D69 * (v12 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v12)))) >> 47));
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v30, (uint64_t *)&v29, (uint64_t *)&v28);
}

uint64_t mlir::mps::SingleGateRNNGradientOp::getInherentAttr(mlir::MLIRContext *a1, void *a2, _WORD *__s1, size_t __n)
{
  uint64_t result = 0;
  switch(__n)
  {
    case 0xAuLL:
      if (*(void *)__s1 != 0x6974617669746361 || __s1[4] != 28271) {
        goto LABEL_13;
      }
      return *a2;
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
    case 0x16uLL:
    case 0x17uLL:
      goto LABEL_13;
    case 0x13uLL:
      if (!memcmp(__s1, "operandSegmentSizes", __n)) {
        goto LABEL_11;
      }
      goto LABEL_13;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n)) {
        goto LABEL_13;
      }
LABEL_11:
      uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 2), 5);
      break;
    case 0x18uLL:
      if (!memcmp(__s1, "gradient_for_input_state", __n)) {
        uint64_t result = a2[1];
      }
      else {
LABEL_13:
      }
        uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::setInherentAttr(uint64_t result, _WORD *__s1, size_t a3, void *a4)
{
  uint64_t v5 = result;
  switch(a3)
  {
    case 0xAuLL:
      if (*(void *)__s1 == 0x6974617669746361 && __s1[4] == 28271)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id) {
            unint64_t v10 = a4;
          }
          else {
            unint64_t v10 = 0;
          }
          *(void *)uint64_t result = v10;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!result) {
        goto LABEL_10;
      }
      break;
    case 0x15uLL:
      uint64_t result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!result)
      {
LABEL_10:
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          unint64_t v7 = result ? a4 : 0;
          uint64_t v11 = v7;
          if (result)
          {
            uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v11);
            if (result == 5)
            {
              uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v11);
              if (v8) {
                uint64_t result = (uint64_t)memmove((void *)(v5 + 16), (const void *)result, 4 * v8);
              }
            }
          }
        }
      }
      break;
    case 0x18uLL:
      uint64_t result = memcmp(__s1, "gradient_for_input_state", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            unint64_t v9 = a4;
          }
          else {
            unint64_t v9 = 0;
          }
          *(void *)(v5 + 8) = v9;
        }
        else
        {
          *(void *)(v5 + 8) = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::mps::SingleGateRNNGradientOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readAttribute<mlir::mps::RNNActivationAttr>(a1, v3)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 1))
  {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 6)
    {
      int v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        unint64_t v4 = (void **)__p;
        if (__p)
        {
          uint64_t v5 = v24;
          unint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            unint64_t v6 = __p;
          }
          unint64_t v24 = v4;
          operator delete(v6);
        }
        unint64_t v7 = v21;
        if (v21)
        {
          uint64_t v8 = v22;
          unint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = (void *)*--v8;
              unint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                operator delete[](v10);
              }
            }
            while (v8 != v7);
            unint64_t v9 = v21;
          }
          unint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    uint64_t v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 2, v12, 4 * v13);
    }
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 4, (const char *)5);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    unint64_t v3 = operator new(0x28uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorB"
              "ase::Properties]";
        unint64_t v14 = 122;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[167];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::mps::RNNActivationAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  uint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::RNNActivationAttr]";
  unint64_t v41 = 78;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    uint64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      int v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          int v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          int v15 = (char *)v46;
        }
      }
      __int16 v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)__int16 v16 = v17;
      ++v47;
      if (v44)
      {
        int v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v19 = (char *)v46;
            int v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            int v18 = &v40;
            unint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    unint64_t v23 = (void **)__p;
    if (__p)
    {
      unint64_t v24 = v53;
      char v25 = __p;
      if (v53 != __p)
      {
        do
          unint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        char v25 = __p;
      }
      int64_t v53 = v23;
      operator delete(v25);
    }
    uint64_t v26 = v50;
    if (v50)
    {
      uint64_t v27 = v51;
      unint64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          unint64_t v30 = (void *)*--v27;
          unint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        unint64_t v28 = v50;
      }
      long long v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)v4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 8));
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) <= 5)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
    uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 16, 5);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 16), 5);
  }
  return result;
}

void mlir::mps::SingleGateRNNGradientOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7, uint64_t a8, uint64_t a9)
{
  unint64_t v42[2] = *MEMORY[0x1E4F143B8];
  uint64_t v35 = a4;
  uint64_t v36 = a3;
  uint64_t v33 = a8;
  uint64_t v34 = a5;
  uint64_t v32 = a9;
  mlir::OperationState::addOperands(a2, (uint64_t)&v36, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v35, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v34, 1);
  if (a8) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v33, 1);
  }
  if (a9)
  {
    mlir::OperationState::addOperands(a2, (uint64_t)&v32, 1);
    BOOL v14 = v32 != 0;
  }
  else
  {
    BOOL v14 = 0;
  }
  BOOL v15 = v33 != 0;
  uint64_t v16 = mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties>((void *)a2);
  *(void *)(v16 + 16) = 0x100000001;
  *(_DWORD *)(v16 + 24) = 1;
  *(_DWORD *)(v16 + 28) = v15;
  *(_DWORD *)(v16 + 32) = v14;
  long long v17 = *a1;
  unsigned int v37 = a6;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v17);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v41 = (uint64_t)v17;
  uint64_t v19 = mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v37);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties>((void *)a2) = v19;
  if (a7)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v20);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties>((void *)a2)
              + 8) = UnitAttr;
  }
  __src = v42;
  uint64_t v41 = 0x200000000;
  uint64_t v22 = *a1;
  unint64_t v23 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v39, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v26 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v38, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::SingleGateRNNGradientOp::inferReturnTypes(v22, v23, 1, v39[0], v39[1], Dictionary, v26, v27, v38[0], v38[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v28 = __src;
  }
  uint64_t v29 = v41;
  uint64_t v30 = *(unsigned int *)(a2 + 72);
  unint64_t v31 = v30 + v41;
  if (v31 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v31, 8);
    LODWORD(v30) = *(_DWORD *)(a2 + 72);
  }
  if (v29)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v30), v28, 8 * v29);
    LODWORD(v30) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v30 + v29;
  if (__src != v42) {
    free(__src);
  }
}

uint64_t mlir::mps::SingleGateRNNGradientOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = v3[1];
    v77[0] = v2;
    if (mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v4, (const void **)"activation", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v77))
    {
      v77[0] = *this;
      if (mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v5, (const void **)"gradient_for_input_state", (const char *)0x18, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v77))
      {
        unsigned int v74 = 0;
        uint64_t v6 = *this;
        unint64_t v7 = *((unsigned int *)*this + 11);
        uint64_t v8 = (v7 >> 23) & 1;
        uint64_t v9 = (uint64_t)&(*this)[2 * v8 + 8];
        if (!HIBYTE(*((_DWORD *)*this + 11))) {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(unsigned int *)(v9 + 16);
        if ((v7 & 0x800000) != 0)
        {
          uint64_t v11 = v6[9];
          if (v10) {
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v11 = 0;
          if (v10)
          {
LABEL_11:
            uint64_t v12 = v11 + 24;
            while (1)
            {
              unint64_t v13 = *this;
              unint64_t v14 = *(void *)(*(void *)v12 + 8) & 0xFFFFFFFFFFFFFFF8;
              unsigned int v15 = v74++;
              if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v13, v14, (const void **)"operand", (const void **)7, v15))return 0; {
              v12 += 32;
              }
              if (!--v10)
              {
                uint64_t v6 = *this;
                unint64_t v7 = *((unsigned int *)*this + 11);
                uint64_t v8 = (v7 >> 23) & 1;
                int v16 = v7 & 0x800000;
                goto LABEL_35;
              }
            }
          }
        }
        int v16 = v7 & 0x800000;
LABEL_35:
        if (BYTE3(v7)) {
          uint64_t v26 = (uint64_t)&v6[2 * v8 + 8];
        }
        else {
          uint64_t v26 = 0;
        }
        int v27 = *(_DWORD *)(v26 + 20);
        if (v16)
        {
          uint64_t v28 = v6[9];
          if (v27) {
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v28 = 0;
          if (v27)
          {
LABEL_40:
            uint64_t v29 = *(unsigned int *)(v26 + 16);
            uint64_t v30 = (v27 + v29) - v29;
            uint64_t v31 = v28 + 32 * v29 + 24;
            while (1)
            {
              uint64_t v32 = *this;
              unint64_t v33 = *(void *)(*(void *)v31 + 8) & 0xFFFFFFFFFFFFFFF8;
              unsigned int v34 = v74++;
              if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v32, v33, (const void **)"operand", (const void **)7, v34))return 0; {
              v31 += 32;
              }
              if (!--v30)
              {
                uint64_t v6 = *this;
                unint64_t v7 = *((unsigned int *)*this + 11);
                uint64_t v8 = (v7 >> 23) & 1;
                int v16 = v7 & 0x800000;
                break;
              }
            }
          }
        }
        uint64_t v35 = (uint64_t)&v6[2 * v8 + 8];
        if (BYTE3(v7)) {
          uint64_t v36 = (_DWORD *)v35;
        }
        else {
          uint64_t v36 = 0;
        }
        int v37 = v36[6];
        if (v16)
        {
          uint64_t v38 = v6[9];
          if (v37) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v38 = 0;
          if (v37)
          {
LABEL_49:
            uint64_t v39 = (v36[5] + v36[4]);
            uint64_t v40 = (v37 + v39) - v39;
            uint64_t v41 = v38 + 32 * v39 + 24;
            do
            {
              uint64_t v42 = *this;
              unint64_t v43 = *(void *)(*(void *)v41 + 8) & 0xFFFFFFFFFFFFFFF8;
              unsigned int v44 = v74++;
              if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v42, v43, (const void **)"operand", (const void **)7, v44))return 0; {
              v41 += 32;
              }
            }
            while (--v40);
          }
        }
        uint64_t ODSOperands = mlir::mps::SingleGateRNNGradientOp::getODSOperands((mlir::mps::SingleGateRNNGradientOp *)this, 3u);
        uint64_t v47 = v46;
        if (v46 >= 2) {
          goto LABEL_56;
        }
        if (!v46
          || (uint64_t v48 = *(void *)(ODSOperands + 24),
              unint64_t v49 = *this,
              unint64_t v50 = *(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8,
              unsigned int v51 = v74,
              ++v74,
              mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v49, v50, (const void **)"operand", (const void **)7, v51)))
        {
          uint64_t v52 = mlir::mps::SingleGateRNNGradientOp::getODSOperands((mlir::mps::SingleGateRNNGradientOp *)this, 4u);
          uint64_t v47 = v53;
          if (v53 >= 2)
          {
LABEL_56:
            char v54 = "operand group starting at #";
LABEL_57:
            v75[0] = (const void **)v54;
            __int16 v76 = 259;
            mlir::OpState::emitOpError(this, v75, (uint64_t)v77);
            uint64_t v55 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)v77, &v74);
            uint64_t v56 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v55, " requires 0 or 1 element, but found ");
            uint64_t v73 = v47;
            uint64_t v57 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v56, &v73);
            uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v57);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v77);
            return v17;
          }
          if (!v53
            || (uint64_t v58 = *(void *)(v52 + 24),
                uint64_t v59 = *this,
                unint64_t v60 = *(void *)(v58 + 8) & 0xFFFFFFFFFFFFFFF8,
                unsigned int v61 = v74,
                ++v74,
                mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v59, v60, (const void **)"operand", (const void **)7, v61)))
          {
            uint64_t v62 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
            uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v62, 0);
            if (mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))
            {
              uint64_t v64 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
              uint64_t v65 = mlir::detail::OpResultImpl::getNextResultAtOffset(v64, 1);
              uint64_t v66 = mlir::detail::OpResultImpl::getNextResultAtOffset(v65, 0);
              long long v67 = *this;
              unint64_t v68 = *(void *)(v66 + 8) & 0xFFFFFFFFFFFFFFF8;
              unsigned int v74 = 2;
              if (mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v67, v68, (const void **)"result", (const void **)6, 1u))
              {
                uint64_t ODSResults = mlir::mps::LSTMOp::getODSResults((mlir::mps::LSTMOp *)this, 2u);
                uint64_t v47 = v70;
                if (v70 >= 2)
                {
                  char v54 = "result group starting at #";
                  goto LABEL_57;
                }
                if (!v70) {
                  return 1;
                }
                uint64_t v71 = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
                if (mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(v71 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 2u))return 1; {
              }
                }
            }
          }
        }
      }
    }
    return 0;
  }
  v75[0] = (const void **)"requires attribute 'activation'";
  __int16 v76 = 259;
  mlir::OpState::emitOpError(this, v75, (uint64_t)v77);
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v77);
  if (v77[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v77);
  }
  if (v84)
  {
    int v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v83;
      uint64_t v20 = __p;
      if (v83 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      int64_t v83 = v18;
      operator delete(v20);
    }
    long long v21 = v80;
    if (v80)
    {
      uint64_t v22 = v81;
      unint64_t v23 = v80;
      if (v81 != v80)
      {
        do
        {
          char v25 = (void *)*--v22;
          unint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        unint64_t v23 = v80;
      }
      int64_t v81 = v21;
      operator delete(v23);
    }
    if (v78 != &v79) {
      free(v78);
    }
  }
  return v17;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.singlegate_rnn_gradient", 27, v2, v3, 0, 0);
  void *v4 = &unk_1EC981EB8;
  v4[12] = mlir::mps::SingleGateRNNGradientOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

BOOL mlir::mps::SingleGateRNNOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v88 = v6;
  if (!v6)
  {
    a3(v92, a4);
    if (v92[0])
    {
      int v89 = 3;
      uint64_t v90 = "expected DictionaryAttr to set properties";
      uint64_t v91 = 41;
      uint64_t v26 = &v89;
      int v27 = (char *)v93;
      if (v94 >= v95)
      {
        unint64_t v74 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          int64_t v81 = (char *)&v89 - (unsigned char *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v74, 24);
          int v27 = (char *)v93;
          uint64_t v26 = (int *)((char *)v93 + v81);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v74, 24);
          uint64_t v26 = &v89;
          int v27 = (char *)v93;
        }
      }
      uint64_t v28 = &v27[24 * v94];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v94;
      if (v92[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
      }
    }
    if (!v101) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v100;
      uint64_t v32 = __p;
      if (v100 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      char v100 = v30;
      operator delete(v32);
    }
    long long v21 = v97;
    if (!v97) {
      goto LABEL_100;
    }
    unint64_t v33 = v98;
    unint64_t v23 = v97;
    if (v98 == v97)
    {
LABEL_99:
      unsigned int v98 = v21;
      operator delete(v23);
LABEL_100:
      if (v93 != v96) {
        free(v93);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      unsigned int v34 = v35;
      *unint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_98:
    unint64_t v23 = v97;
    goto LABEL_99;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v88, "activation", 0xAuLL);
  if (!v8)
  {
    a3(v92, a4);
    if (v92[0])
    {
      int v89 = 3;
      uint64_t v90 = "expected key entry for activation in DictionaryAttr to set Properties.";
      uint64_t v91 = 70;
      uint64_t v36 = &v89;
      int v37 = (char *)v93;
      if (v94 >= v95)
      {
        unint64_t v76 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          int64_t v83 = (char *)&v89 - (unsigned char *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v76, 24);
          int v37 = (char *)v93;
          uint64_t v36 = (int *)((char *)v93 + v83);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v76, 24);
          uint64_t v36 = &v89;
          int v37 = (char *)v93;
        }
      }
      uint64_t v38 = &v37[24 * v94];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v94;
      if (v92[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
      }
    }
    if (!v101) {
      return 0;
    }
    uint64_t v40 = (void **)__p;
    if (__p)
    {
      uint64_t v41 = v100;
      uint64_t v42 = __p;
      if (v100 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      char v100 = v40;
      operator delete(v42);
    }
    long long v21 = v97;
    if (!v97) {
      goto LABEL_100;
    }
    unint64_t v43 = v98;
    unint64_t v23 = v97;
    if (v98 == v97) {
      goto LABEL_99;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      unsigned int v44 = v45;
      *unint64_t v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_98;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id)
  {
    a3(v92, a4);
    if (v92[0])
    {
      int v89 = 3;
      uint64_t v91 = 55;
      uint64_t v10 = &v89;
      uint64_t v11 = (char *)v93;
      if (v94 >= v95)
      {
        unint64_t v75 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          int64_t v82 = (char *)&v89 - (unsigned char *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v75, 24);
          uint64_t v11 = (char *)v93;
          uint64_t v10 = (int *)((char *)v93 + v82);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v75, 24);
          uint64_t v10 = &v89;
          uint64_t v11 = (char *)v93;
        }
      }
      uint64_t v12 = &v11[24 * v94];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v94;
      if (v92[0])
      {
        unint64_t v14 = &v89;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v89, v9);
        unsigned int v15 = (char *)v93;
        if (v94 >= v95)
        {
          unint64_t v77 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            int64_t v84 = (char *)&v89 - (unsigned char *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
            unsigned int v15 = (char *)v93;
            unint64_t v14 = (int *)((char *)v93 + v84);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
            unint64_t v14 = &v89;
            unsigned int v15 = (char *)v93;
          }
        }
        int v16 = &v15[24 * v94];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)int v16 = v17;
        ++v94;
        if (v92[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
        }
      }
    }
    if (!v101) {
      return 0;
    }
    int v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v100;
      uint64_t v20 = __p;
      if (v100 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      char v100 = v18;
      operator delete(v20);
    }
    long long v21 = v97;
    if (!v97) {
      goto LABEL_100;
    }
    uint64_t v22 = v98;
    unint64_t v23 = v97;
    if (v98 == v97) {
      goto LABEL_99;
    }
    do
    {
      char v25 = (void *)*--v22;
      unint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
    goto LABEL_98;
  }
  *a1 = v8;
  uint64_t v46 = mlir::DictionaryAttr::get((uint64_t)&v88, "training", 8uLL);
  if (v46)
  {
    uint64_t v47 = v46;
    if (*(_UNKNOWN **)(*(void *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v92, a4);
      if (v92[0])
      {
        int v89 = 3;
        uint64_t v91 = 53;
        uint64_t v48 = &v89;
        unint64_t v49 = (char *)v93;
        if (v94 >= v95)
        {
          unint64_t v78 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            int64_t v85 = (char *)&v89 - (unsigned char *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v78, 24);
            unint64_t v49 = (char *)v93;
            uint64_t v48 = (int *)((char *)v93 + v85);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v78, 24);
            uint64_t v48 = &v89;
            unint64_t v49 = (char *)v93;
          }
        }
        unint64_t v50 = &v49[24 * v94];
        long long v51 = *(_OWORD *)v48;
        *((void *)v50 + 2) = *((void *)v48 + 2);
        *(_OWORD *)unint64_t v50 = v51;
        ++v94;
        if (v92[0])
        {
          uint64_t v52 = &v89;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v89, v47);
          unint64_t v53 = (char *)v93;
          if (v94 >= v95)
          {
            unint64_t v79 = v94 + 1;
            if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
            {
              int64_t v86 = (char *)&v89 - (unsigned char *)v93;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v79, 24);
              unint64_t v53 = (char *)v93;
              uint64_t v52 = (int *)((char *)v93 + v86);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v79, 24);
              uint64_t v52 = &v89;
              unint64_t v53 = (char *)v93;
            }
          }
          char v54 = &v53[24 * v94];
          long long v55 = *(_OWORD *)v52;
          *((void *)v54 + 2) = *((void *)v52 + 2);
          *(_OWORD *)char v54 = v55;
          ++v94;
          if (v92[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
          }
        }
      }
      if (!v101) {
        return 0;
      }
      uint64_t v56 = (void **)__p;
      if (__p)
      {
        uint64_t v57 = v100;
        uint64_t v58 = __p;
        if (v100 != __p)
        {
          do
            uint64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
          while (v57 != v56);
          uint64_t v58 = __p;
        }
        char v100 = v56;
        operator delete(v58);
      }
      long long v21 = v97;
      if (!v97) {
        goto LABEL_100;
      }
      uint64_t v59 = v98;
      unint64_t v23 = v97;
      if (v98 == v97) {
        goto LABEL_99;
      }
      do
      {
        unsigned int v61 = (void *)*--v59;
        unint64_t v60 = v61;
        *uint64_t v59 = 0;
        if (v61) {
          operator delete[](v60);
        }
      }
      while (v59 != v21);
      goto LABEL_98;
    }
    a1[1] = v46;
  }
  uint64_t v62 = (void *)mlir::DictionaryAttr::get((uint64_t)&v88, "operandSegmentSizes", 0x13uLL);
  if (!v62)
  {
    uint64_t v62 = (void *)mlir::DictionaryAttr::get((uint64_t)&v88, "operand_segment_sizes", 0x15uLL);
    if (!v62)
    {
      a3(v92, a4);
      if (v92[0])
      {
        int v89 = 3;
        uint64_t v90 = "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.";
        uint64_t v91 = 79;
        uint64_t v64 = &v89;
        uint64_t v65 = (char *)v93;
        if (v94 >= v95)
        {
          unint64_t v80 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            int64_t v87 = (char *)&v89 - (unsigned char *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v80, 24);
            uint64_t v65 = (char *)v93;
            uint64_t v64 = (int *)((char *)v93 + v87);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v80, 24);
            uint64_t v64 = &v89;
            uint64_t v65 = (char *)v93;
          }
        }
        uint64_t v66 = &v65[24 * v94];
        long long v67 = *(_OWORD *)v64;
        *((void *)v66 + 2) = *((void *)v64 + 2);
        *(_OWORD *)uint64_t v66 = v67;
        ++v94;
        if (v92[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
        }
      }
      if (!v101) {
        return 0;
      }
      unint64_t v68 = (void **)__p;
      if (__p)
      {
        uint64_t v69 = v100;
        unint64_t v70 = __p;
        if (v100 != __p)
        {
          do
            uint64_t v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
          while (v69 != v68);
          unint64_t v70 = __p;
        }
        char v100 = v68;
        operator delete(v70);
      }
      long long v21 = v97;
      if (!v97) {
        goto LABEL_100;
      }
      uint64_t v71 = v98;
      unint64_t v23 = v97;
      if (v98 == v97) {
        goto LABEL_99;
      }
      do
      {
        uint64_t v73 = (void *)*--v71;
        unint64_t v72 = v73;
        *uint64_t v71 = 0;
        if (v73) {
          operator delete[](v72);
        }
      }
      while (v71 != v21);
      goto LABEL_98;
    }
  }
  return mlir::convertFromAttribute(a1 + 2, (const char *)4, v62, a3, a4) != 0;
}

uint64_t mlir::mps::SingleGateRNNOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v29[6] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a1;
  int v27 = v29;
  uint64_t v28 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v26, (uint64_t)"activation", 10, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
      unsigned int v7 = v28;
    }
    uint64_t v8 = (uint64_t *)((char *)v27 + 16 * v7);
    uint64_t *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v28) = v28 + 1;
  }
  uint64_t v9 = a2[1];
  if (v9)
  {
    uint64_t v10 = mlir::Builder::getNamedAttr(&v26, (uint64_t)"training", 8, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
      unsigned int v13 = v28;
    }
    unint64_t v14 = (uint64_t *)((char *)v27 + 16 * v13);
    *unint64_t v14 = v10;
    v14[1] = v12;
    LODWORD(v28) = v28 + 1;
  }
  uint64_t v15 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 2), 4);
  uint64_t v16 = mlir::Builder::getNamedAttr(&v26, (uint64_t)"operandSegmentSizes", 19, v15);
  uint64_t v18 = v17;
  unsigned int v19 = v28;
  if (v28 >= HIDWORD(v28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
    unsigned int v19 = v28;
  }
  uint64_t v20 = (uint64_t *)((char *)v27 + 16 * v19);
  uint64_t *v20 = v16;
  v20[1] = v18;
  BOOL v21 = __CFADD__(v28, 1);
  uint64_t v22 = (v28 + 1);
  LODWORD(v28) = v28 + 1;
  if (v21)
  {
    uint64_t DictionaryAttr = 0;
    unint64_t v24 = v27;
    if (v27 == v29) {
      return DictionaryAttr;
    }
    goto LABEL_16;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v26, (uint64_t *)v27, v22);
  unint64_t v24 = v27;
  if (v27 != v29) {
LABEL_16:
  }
    free(v24);
  return DictionaryAttr;
}

unint64_t mlir::mps::SingleGateRNNOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = 0x1E8EB8000uLL;
  {
    unint64_t v21 = v1;
    unint64_t v23 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v13 = v12;
    unint64_t v1 = v21;
    a1 = v23;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      unint64_t v1 = v21;
      a1 = v23;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v3 = HIDWORD(v1);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v1) ^ HIDWORD(v1));
  unint64_t v28 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v5 = a1[1];
  {
    unint64_t v22 = v5;
    unint64_t v24 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v16 = v15;
    unint64_t v5 = v22;
    a1 = v24;
    if (v16)
    {
      unint64_t v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      unint64_t v5 = v22;
      a1 = v24;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v5) ^ HIDWORD(v5));
  unint64_t v27 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  {
    char v25 = a1;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v19 = v18;
    a1 = v25;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      unint64_t v2 = 0x1E8EB8000;
      a1 = v25;
    }
  }
  unint64_t v8 = a1[3];
  uint64_t v9 = __ROR8__(v8 + 16, 16);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (a1[2] ^ *(void *)(v2 + 3024) ^ v9);
  unint64_t v26 = (0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47))) ^ v8;
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v28, (uint64_t *)&v27, (uint64_t *)&v26);
}

uint64_t mlir::mps::SingleGateRNNOp::getInherentAttr(mlir::MLIRContext *a1, uint64_t *a2, void *__s1, size_t __n)
{
  uint64_t result = 0;
  switch(__n)
  {
    case 8uLL:
      if (memcmp(__s1, "training", __n)) {
        goto LABEL_11;
      }
      return a2[1];
    case 9uLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_11;
    case 0xAuLL:
      if (*__s1 != 0x6974617669746361 || *((_WORD *)__s1 + 4) != 28271) {
        goto LABEL_11;
      }
      uint64_t result = *a2;
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n)) {
        goto LABEL_11;
      }
      goto LABEL_13;
    case 0x15uLL:
      if (!memcmp(__s1, "operand_segment_sizes", __n)) {
LABEL_13:
      }
        uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 2), 4);
      else {
LABEL_11:
      }
        uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::mps::SingleGateRNNOp::setInherentAttr(uint64_t result, void *__s1, size_t a3, void *a4)
{
  uint64_t v5 = result;
  switch(a3)
  {
    case 8uLL:
      uint64_t result = memcmp(__s1, "training", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            unint64_t v10 = a4;
          }
          else {
            unint64_t v10 = 0;
          }
          *(void *)(v5 + 8) = v10;
        }
        else
        {
          *(void *)(v5 + 8) = 0;
        }
      }
      break;
    case 0xAuLL:
      if (*__s1 == 0x6974617669746361 && *((_WORD *)__s1 + 4) == 28271)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id) {
            unint64_t v7 = a4;
          }
          else {
            unint64_t v7 = 0;
          }
          *(void *)uint64_t result = v7;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!result) {
        goto LABEL_17;
      }
      break;
    case 0x15uLL:
      uint64_t result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!result)
      {
LABEL_17:
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          unint64_t v8 = result ? a4 : 0;
          uint64_t v11 = v8;
          if (result)
          {
            uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v11);
            if (result == 4)
            {
              uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v11);
              if (v9) {
                uint64_t result = (uint64_t)memmove((void *)(v5 + 16), (const void *)result, 4 * v9);
              }
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::mps::SingleGateRNNOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readAttribute<mlir::mps::RNNActivationAttr>(a1, v3)) {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 5)
    {
      int v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        unint64_t v4 = (void **)__p;
        if (__p)
        {
          uint64_t v5 = v24;
          unint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            unint64_t v6 = __p;
          }
          unint64_t v24 = v4;
          operator delete(v6);
        }
        unint64_t v7 = v21;
        if (v21)
        {
          unint64_t v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = (void *)*--v8;
              unint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                operator delete[](v10);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          unint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    int v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 2, v12, 4 * v13);
    }
  }
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 1)
      && ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
       || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 4, (const char *)4));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    unint64_t v3 = operator new(0x20uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 114;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        unint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[169];
    return a1[32];
  }
  return result;
}

uint64_t mlir::mps::SingleGateRNNOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)v4);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) <= 5)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
    uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 16, 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(v4 + 8));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 16), 4);
  }
  return result;
}

void mlir::mps::SingleGateRNNOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a8;
  unint64_t v40[2] = *MEMORY[0x1E4F143B8];
  uint64_t v33 = a4;
  uint64_t v34 = a3;
  uint64_t v31 = a8;
  uint64_t v32 = a7;
  mlir::OperationState::addOperands(a2, (uint64_t)&v34, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v33, 1);
  if (a7) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v32, 1);
  }
  if (v8)
  {
    mlir::OperationState::addOperands(a2, (uint64_t)&v31, 1);
    LODWORD(v8) = v31 != 0;
  }
  BOOL v14 = v32 != 0;
  uint64_t v15 = mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties>((void *)a2);
  *(void *)(v15 + 16) = 0x100000001;
  *(_DWORD *)(v15 + 24) = v14;
  *(_DWORD *)(v15 + 28) = v8;
  __int16 v16 = *a1;
  unsigned int v35 = a5;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v16);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id;
  uint64_t v39 = (uint64_t)v16;
  uint64_t v18 = mlir::StorageUniquer::get<mlir::mps::detail::RNNActivationAttrStorage,mlir::mps::RNNActivation>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24RNNActivationAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17RNNActivationAttrEJNS2_13RNNActivationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id, &v35);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties>((void *)a2) = v18;
  if (a6)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v19);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties>((void *)a2)
              + 8) = UnitAttr;
  }
  __src = v40;
  uint64_t v39 = 0x200000000;
  unint64_t v21 = *a1;
  unint64_t v22 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v37, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  char v25 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v36, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::SingleGateRNNOp::inferReturnTypes(v21, v22, 1, v37[0], v37[1], Dictionary, v25, v26, v36[0], v36[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v27 = __src;
  }
  uint64_t v28 = v39;
  uint64_t v29 = *(unsigned int *)(a2 + 72);
  unint64_t v30 = v29 + v39;
  if (v30 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v30, 8);
    LODWORD(v29) = *(_DWORD *)(a2 + 72);
  }
  if (v28)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v29), v27, 8 * v28);
    LODWORD(v29) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v29 + v28;
  if (__src != v40) {
    free(__src);
  }
}

uint64_t mlir::mps::SingleGateRNNOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = v3[1];
    v72[0] = v2;
    if (mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(v4, (const void **)"activation", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v72))
    {
      v72[0] = *this;
      if (mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v5, (const void **)"training", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v72))
      {
        unsigned int v69 = 0;
        uint64_t v6 = *this;
        unint64_t v7 = *((unsigned int *)*this + 11);
        uint64_t v8 = (v7 >> 23) & 1;
        uint64_t v9 = (uint64_t)&(*this)[2 * v8 + 8];
        if (!HIBYTE(*((_DWORD *)*this + 11))) {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(unsigned int *)(v9 + 16);
        if ((v7 & 0x800000) != 0)
        {
          uint64_t v11 = v6[9];
          if (v10) {
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v11 = 0;
          if (v10)
          {
LABEL_11:
            uint64_t v12 = v11 + 24;
            while (1)
            {
              uint64_t v13 = *this;
              unint64_t v14 = *(void *)(*(void *)v12 + 8) & 0xFFFFFFFFFFFFFFF8;
              unsigned int v15 = v69++;
              if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v13, v14, (const void **)"operand", (const void **)7, v15))return 0; {
              v12 += 32;
              }
              if (!--v10)
              {
                uint64_t v6 = *this;
                unint64_t v7 = *((unsigned int *)*this + 11);
                uint64_t v8 = (v7 >> 23) & 1;
                int v16 = v7 & 0x800000;
                goto LABEL_35;
              }
            }
          }
        }
        int v16 = v7 & 0x800000;
LABEL_35:
        if (BYTE3(v7)) {
          uint64_t v26 = (uint64_t)&v6[2 * v8 + 8];
        }
        else {
          uint64_t v26 = 0;
        }
        int v27 = *(_DWORD *)(v26 + 20);
        if (v16)
        {
          uint64_t v28 = v6[9];
          if (v27) {
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v28 = 0;
          if (v27)
          {
LABEL_40:
            uint64_t v29 = *(unsigned int *)(v26 + 16);
            uint64_t v30 = (v27 + v29) - v29;
            uint64_t v31 = v28 + 32 * v29 + 24;
            while (1)
            {
              uint64_t v32 = *this;
              unint64_t v33 = *(void *)(*(void *)v31 + 8) & 0xFFFFFFFFFFFFFFF8;
              unsigned int v34 = v69++;
              if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v32, v33, (const void **)"operand", (const void **)7, v34))return 0; {
              v31 += 32;
              }
              if (!--v30)
              {
                uint64_t v6 = *this;
                unint64_t v7 = *((unsigned int *)*this + 11);
                uint64_t v8 = (v7 >> 23) & 1;
                int v16 = v7 & 0x800000;
                break;
              }
            }
          }
        }
        uint64_t v35 = (uint64_t)&v6[2 * v8 + 8];
        if (BYTE3(v7)) {
          uint64_t v36 = (_DWORD *)v35;
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v37 = (v36[5] + v36[4]);
        int v38 = v36[6];
        if (v16)
        {
          uint64_t v39 = v6[9];
          unint64_t v40 = (v38 + v37) - v37;
          if (v40 > 1)
          {
LABEL_49:
            uint64_t v41 = "operand group starting at #";
LABEL_50:
            v70[0] = (const void **)v41;
            __int16 v71 = 259;
            mlir::OpState::emitOpError(this, v70, (uint64_t)v72);
            uint64_t v42 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)v72, &v69);
            uint64_t v43 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v42, " requires 0 or 1 element, but found ");
            unint64_t v68 = v40;
LABEL_60:
            uint64_t v52 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v43, (uint64_t *)&v68);
            uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v52);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v72);
            return v17;
          }
        }
        else
        {
          uint64_t v39 = 0;
          unint64_t v40 = (v38 + v37) - v37;
          if (v40 > 1) {
            goto LABEL_49;
          }
        }
        if (v38)
        {
          uint64_t v44 = v39 + 32 * v37 + 24;
          while (1)
          {
            uint64_t v45 = *this;
            unint64_t v46 = *(void *)(*(void *)v44 + 8) & 0xFFFFFFFFFFFFFFF8;
            unsigned int v47 = v69++;
            if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v45, v46, (const void **)"operand", (const void **)7, v47))break; {
            v44 += 32;
            }
            if (!--v40) {
              goto LABEL_58;
            }
          }
        }
        else
        {
LABEL_58:
          uint64_t ODSOperands = mlir::mps::SingleGateRNNGradientOp::getODSOperands((mlir::mps::SingleGateRNNGradientOp *)this, 3u);
          uint64_t v50 = v49;
          if (v49 >= 2)
          {
            v70[0] = (const void **)"operand group starting at #";
            __int16 v71 = 259;
            mlir::OpState::emitOpError(this, v70, (uint64_t)v72);
            uint64_t v51 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)v72, &v69);
            uint64_t v43 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v51, " requires 0 or 1 element, but found ");
            unint64_t v68 = v50;
            goto LABEL_60;
          }
          if (!v49
            || (uint64_t v53 = *(void *)(ODSOperands + 24),
                char v54 = *this,
                unint64_t v55 = *(void *)(v53 + 8) & 0xFFFFFFFFFFFFFFF8,
                unsigned int v56 = v69,
                ++v69,
                mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v54, v55, (const void **)"operand", (const void **)7, v56)))
          {
            uint64_t v57 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
            uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v57, 0);
            uint64_t v59 = *this;
            unint64_t v60 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
            unsigned int v69 = 1;
            if (mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(v59, v60, (const void **)"result", (const void **)6, 0))
            {
              uint64_t v61 = *((unsigned int *)*this + 9);
              if (*((_DWORD *)*this + 9)) {
                uint64_t v62 = (uint64_t)(*this - 2);
              }
              else {
                uint64_t v62 = 0;
              }
              uint64_t v63 = mlir::detail::OpResultImpl::getNextResultAtOffset(v62, 1);
              unint64_t v40 = v61 - 1;
              if ((unint64_t)(v61 - 1) > 1)
              {
                uint64_t v41 = "result group starting at #";
                goto LABEL_50;
              }
              if (v61 == 1) {
                return 1;
              }
              uint64_t v64 = v63;
              uint64_t v65 = 1;
              while (1)
              {
                uint64_t v66 = mlir::detail::OpResultImpl::getNextResultAtOffset(v64, v65 - 1);
                if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(v66 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, v65))break; {
                if (v61 == ++v65)
                }
                  return 1;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  v70[0] = (const void **)"requires attribute 'activation'";
  __int16 v71 = 259;
  mlir::OpState::emitOpError(this, v70, (uint64_t)v72);
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v72);
  if (v72[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v72);
  }
  if (v79)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      int v19 = v78;
      uint64_t v20 = __p;
      if (v78 != __p)
      {
        do
          int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v78 = v18;
      operator delete(v20);
    }
    unint64_t v21 = v75;
    if (v75)
    {
      unint64_t v22 = v76;
      unint64_t v23 = v75;
      if (v76 != v75)
      {
        do
        {
          char v25 = (void *)*--v22;
          unint64_t v24 = v25;
          *unint64_t v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        unint64_t v23 = v75;
      }
      unint64_t v76 = v21;
      operator delete(v23);
    }
    if (v73 != &v74) {
      free(v73);
    }
  }
  return v17;
}

uint64_t mlir::mps::SingleGateRNNOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.singlegate_rnn", 18, v2, v3, 0, 0);
  void *v4 = &unk_1EC980B78;
  v4[12] = mlir::mps::SingleGateRNNOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SinhOpGenericAdaptorBase::SinhOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.sinh", 8, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SinhOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.sinh", 8, v2, v3, 0, 0);
  void *v4 = &unk_1EC982B70;
  v4[12] = mlir::mps::SinhOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SizeOpGenericAdaptorBase::SizeOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.size", 8, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SizeOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.size", 8, v2, v3, 0, 0);
  void *v4 = &unk_1EC982BC8;
  v4[12] = mlir::mps::SizeOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SliceOpGenericAdaptorBase::SliceOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.slice", 9, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::SliceOp::build(mlir::mps::ConstantOp *a1, uint64_t *a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  unsigned int v13 = a5;
  unsigned int v14 = a4;
  unsigned int v12 = a6;
  uint64_t v9 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,int &>(a1, *a2, &v14) - 16;
  uint64_t v10 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,int &>(a1, *a2, &v13) - 16;
  uint64_t v11 = mlir::OpBuilder::create<mlir::mps::ConstantOp,int &>(a1, *a2, &v12);
  mlir::mps::SliceOp::build((mlir::UnknownLoc **)a1, (uint64_t)a2, a3, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11 - 16);
}

void mlir::mps::SliceOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  uint64_t v19 = a6;
  uint64_t v20 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  __src = v27;
  uint64_t v26 = 0x200000000;
  __int16 v8 = *a1;
  mlir::ValueRange::ValueRange((unint64_t *)v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::SliceOp::inferReturnTypes(v8, v11, v12, v24[0], (unint64_t)v24[1], Dictionary, v13, v14, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unsigned int v15 = __src;
  }
  uint64_t v16 = v26;
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  unint64_t v18 = v17 + v26;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v16)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v27) {
    free(__src);
  }
}

BOOL mlir::mps::SliceOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps2(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps2(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 2u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps2(*this,
                           (const void **)(*(void *)(*(void *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8),
                           (const void **)"operand",
                           7,
                           3u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v2 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
}

uint64_t mlir::mps::SliceOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.slice", 9, v2, v3, 0, 0);
  void *v4 = &unk_1EC9832A8;
  v4[12] = mlir::mps::SliceOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SoftmaxOpGenericAdaptorBase::SoftmaxOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.softmax", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::SoftmaxOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v21[2] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a4;
  uint64_t v14 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v14, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  __src = v20;
  uint64_t v19 = 0x200000000;
  uint64_t v5 = *(void *)a2;
  mlir::ValueRange::ValueRange(&v16, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v15, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v21[0] = v16;
  v21[1] = v17;
  if (v17)
  {
    unint64_t v7 = *(void *)(mlir::ValueRange::dereference_iterator(v21, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v8 = v19;
    if (v19 >= HIDWORD(v19))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v20, v19 + 1, 8);
      unsigned int v8 = v19;
    }
    *((void *)__src + v8) = v7;
    unsigned int v9 = v19 + 1;
    LODWORD(v19) = v9;
    uint64_t v10 = __src;
    uint64_t v11 = *(unsigned int *)(a2 + 72);
    unint64_t v12 = v11 + v9;
    if (v12 > *(unsigned int *)(a2 + 76))
    {
LABEL_5:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12, 8);
      LODWORD(v11) = *(_DWORD *)(a2 + 72);
    }
  }
  else
  {
    if (!mlir::emitOptionalError<char const(&)[39]>(v5, 1, "invalid number of operands")) {
      llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
    }
    unsigned int v9 = v19;
    uint64_t v10 = __src;
    uint64_t v11 = *(unsigned int *)(a2 + 72);
    unint64_t v12 = v11 + v19;
    if (v12 > *(unsigned int *)(a2 + 76)) {
      goto LABEL_5;
    }
  }
  if (v9)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v11), v10, 8 * v9);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v11 + v9;
  if (__src != v20) {
    free(__src);
  }
}

BOOL mlir::mps::SoftmaxOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps5(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v2 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps5(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mps::SoftmaxOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.softmax", 11, v2, v3, 0, 0);
  void *v4 = &unk_1EC983CF8;
  v4[12] = mlir::mps::SoftmaxOp::canonicalize;
  unsigned int v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unsigned int v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SoftplusOpGenericAdaptorBase::SoftplusOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.softplus", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SoftplusOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.softplus", 12, v2, v3, 0, 0);
  void *v4 = &unk_1EC97F940;
  v4[12] = mlir::mps::SoftplusOp::canonicalize;
  unsigned int v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unsigned int v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SoftplusParametricOpGenericAdaptorBase::SoftplusParametricOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.softplus_parametric", 23, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::mps::SoftplusParametricOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps46(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps46(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 2u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps2(*this,
                           (const void **)(*(void *)(*(void *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8),
                           (const void **)"operand",
                           7,
                           3u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v2 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mps::__mlir_ods_local_type_constraint_MPSOps46(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (_UNKNOWN **)*a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    goto LABEL_4;
  }
  v69[0] = a2;
  v69[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
  int ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v69);
  uint64_t v10 = (_UNKNOWN **)*a2;
  if (!ArgOperands) {
    goto LABEL_4;
  }
  uint64_t v58 = a2;
  uint64_t v59 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v58);
  uint64_t v10 = (_UNKNOWN **)*a2;
  if (!v12)
  {
    uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
    uint64_t v66 = a2;
    uint64_t v67 = v18;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64)
      || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
      || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
      || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
      || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
      || mlir::Type::isF16((mlir::Type *)&OperandRange)
      || mlir::Type::isF32((mlir::Type *)&OperandRange)
      || mlir::Type::isBF16((mlir::Type *)&OperandRange)
      || *(_UNKNOWN **)(*(void *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    {
      return 1;
    }
    uint64_t v10 = (_UNKNOWN **)*a2;
    if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      goto LABEL_35;
    }
  }
  else
  {
LABEL_4:
    if (v10[17] != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      goto LABEL_35;
    }
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
  v64[0] = a2;
  v64[1] = v13;
  int v14 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v64);
  uint64_t v10 = (_UNKNOWN **)*a2;
  if (v14)
  {
    uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
    v63[0] = a2;
    v63[1] = v15;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v63);
    uint64_t v10 = (_UNKNOWN **)*a2;
    if (v16 == 1)
    {
      uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
      v62[0] = a2;
      v62[1] = v17;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v62);
      if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)
        || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
        || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
        || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
        || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64)
        || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
        || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
        || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
        || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
        || mlir::Type::isF16((mlir::Type *)&OperandRange)
        || mlir::Type::isF32((mlir::Type *)&OperandRange)
        || mlir::Type::isBF16((mlir::Type *)&OperandRange)
        || *(_UNKNOWN **)(*(void *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
      {
        return 1;
      }
      uint64_t v10 = (_UNKNOWN **)*a2;
    }
  }
LABEL_35:
  if (v10[17] == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    uint64_t v46 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v10 + 1));
    v61[0] = a2;
    v61[1] = v46;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v61);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64)
      || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
      || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
      || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
      || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
      || mlir::Type::isF16((mlir::Type *)&OperandRange)
      || mlir::Type::isF32((mlir::Type *)&OperandRange)
      || mlir::Type::isBF16((mlir::Type *)&OperandRange)
      || *(_UNKNOWN **)(*(void *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    {
      return 1;
    }
  }
  __int16 v60 = 261;
  uint64_t v58 = a3;
  uint64_t v59 = a4;
  mlir::Operation::emitOpError(a1, &v58, (uint64_t)v69);
  if (v69[0])
  {
    LODWORD(v66) = 3;
    uint64_t v67 = (uint64_t)" #";
    uint64_t v68 = 2;
    uint64_t v19 = &v66;
    uint64_t v20 = (char *)v70;
    if (v71 >= v72)
    {
      unint64_t v48 = v71 + 1;
      if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
      {
        int64_t v54 = (char *)&v66 - (unsigned char *)v70;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v48, 24);
        uint64_t v20 = (char *)v70;
        uint64_t v19 = (const void ***)((char *)v70 + v54);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v48, 24);
        uint64_t v19 = &v66;
        uint64_t v20 = (char *)v70;
      }
    }
    uint64_t v21 = &v20[24 * v71];
    long long v22 = *(_OWORD *)v19;
    *((void *)v21 + 2) = v19[2];
    *(_OWORD *)uint64_t v21 = v22;
    uint64_t v23 = ++v71;
    if (v69[0])
    {
      LODWORD(v66) = 5;
      uint64_t v67 = a5;
      unint64_t v24 = &v66;
      char v25 = (char *)v70;
      if (v23 >= v72)
      {
        unint64_t v49 = v23 + 1;
        BOOL v50 = (char *)v70 + 24 * v23 > (char *)&v66;
        if (v70 <= &v66 && v50)
        {
          int64_t v55 = (char *)&v66 - (unsigned char *)v70;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v49, 24);
          char v25 = (char *)v70;
          unint64_t v24 = (const void ***)((char *)v70 + v55);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v49, 24);
          unint64_t v24 = &v66;
          char v25 = (char *)v70;
        }
      }
      uint64_t v26 = &v25[24 * v71];
      long long v27 = *(_OWORD *)v24;
      *((void *)v26 + 2) = v24[2];
      *(_OWORD *)uint64_t v26 = v27;
      uint64_t v28 = ++v71;
      if (v69[0])
      {
        LODWORD(v66) = 3;
        uint64_t v67 = (uint64_t)" must be 0D tensor of mps native type values or 1D tensor of mps native type values or unranked t"
                       "ensor of mps native type values, but got ";
        uint64_t v68 = 138;
        uint64_t v29 = &v66;
        uint64_t v30 = (char *)v70;
        if (v28 >= v72)
        {
          unint64_t v51 = v28 + 1;
          BOOL v52 = (char *)v70 + 24 * v28 > (char *)&v66;
          if (v70 <= &v66 && v52)
          {
            int64_t v56 = (char *)&v66 - (unsigned char *)v70;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v51, 24);
            uint64_t v30 = (char *)v70;
            uint64_t v29 = (const void ***)((char *)v70 + v56);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v51, 24);
            uint64_t v29 = &v66;
            uint64_t v30 = (char *)v70;
          }
        }
        uint64_t v31 = &v30[24 * v71];
        long long v32 = *(_OWORD *)v29;
        *((void *)v31 + 2) = v29[2];
        *(_OWORD *)uint64_t v31 = v32;
        ++v71;
        if (v69[0])
        {
          unint64_t v33 = &v66;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v66, (uint64_t)a2);
          unsigned int v34 = (char *)v70;
          if (v71 >= v72)
          {
            unint64_t v53 = v71 + 1;
            if (v70 <= &v66 && (char *)v70 + 24 * v71 > (char *)&v66)
            {
              int64_t v57 = (char *)&v66 - (unsigned char *)v70;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v53, 24);
              unsigned int v34 = (char *)v70;
              unint64_t v33 = (const void ***)((char *)v70 + v57);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v53, 24);
              unint64_t v33 = &v66;
              unsigned int v34 = (char *)v70;
            }
          }
          uint64_t v35 = &v34[24 * v71];
          long long v36 = *(_OWORD *)v33;
          *((void *)v35 + 2) = v33[2];
          *(_OWORD *)uint64_t v35 = v36;
          ++v71;
        }
      }
    }
  }
  uint64_t v37 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v69);
  if (v69[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v69);
  }
  if (v78)
  {
    int v38 = (void **)__p;
    if (__p)
    {
      uint64_t v39 = v77;
      unint64_t v40 = __p;
      if (v77 != __p)
      {
        do
          uint64_t v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        unint64_t v40 = __p;
      }
      unint64_t v77 = v38;
      operator delete(v40);
    }
    uint64_t v41 = v74;
    if (v74)
    {
      uint64_t v42 = v75;
      uint64_t v43 = v74;
      if (v75 != v74)
      {
        do
        {
          uint64_t v45 = (void *)*--v42;
          uint64_t v44 = v45;
          *uint64_t v42 = 0;
          if (v45) {
            operator delete[](v44);
          }
        }
        while (v42 != v41);
        uint64_t v43 = v74;
      }
      unint64_t v75 = v41;
      operator delete(v43);
    }
    if (v70 != v73) {
      free(v70);
    }
  }
  return v37;
}

uint64_t mlir::mps::SoftplusParametricOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.softplus_parametric", 23, v2, v3, 0, 0);
  void *v4 = &unk_1EC981990;
  v4[12] = mlir::mps::SoftplusParametricOp::canonicalize;
  unsigned int v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unsigned int v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SoftsignOpGenericAdaptorBase::SoftsignOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.softsign", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SoftsignOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.softsign", 12, v2, v3, 0, 0);
  void *v4 = &unk_1EC97F998;
  v4[12] = mlir::mps::SoftsignOp::canonicalize;
  unsigned int v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unsigned int v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::SortOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      uint64_t v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      uint64_t v26 = &v44;
      long long v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          long long v27 = (char *)v48;
          uint64_t v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v26 = &v44;
          long long v27 = (char *)v48;
        }
      }
      uint64_t v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v55;
      long long v32 = __p;
      if (v55 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        long long v32 = __p;
      }
      int64_t v55 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    unint64_t v33 = v53;
    uint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      unsigned int v34 = v35;
      *unint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "descending", 0xAuLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 55;
    uint64_t v10 = &v44;
    uint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v11 = (char *)v48;
        uint64_t v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v10 = &v44;
        uint64_t v11 = (char *)v48;
      }
    }
    uint64_t v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v49;
    if (v47[0])
    {
      int v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      uint64_t v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v15 = (char *)v48;
          int v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          int v14 = &v44;
          uint64_t v15 = (char *)v48;
        }
      }
      uint64_t v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  uint64_t v18 = (void **)__p;
  if (__p)
  {
    uint64_t v19 = v55;
    uint64_t v20 = __p;
    if (v55 != __p)
    {
      do
        uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      uint64_t v20 = __p;
    }
    int64_t v55 = v18;
    operator delete(v20);
  }
  uint64_t v21 = v52;
  if (v52)
  {
    long long v22 = v53;
    uint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      char v25 = (void *)*--v22;
      unint64_t v24 = v25;
      *long long v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_41:
    uint64_t v23 = v52;
LABEL_42:
    unint64_t v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

uint64_t mlir::mps::SortOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"descending", 10, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::SortOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SortOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SortOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SortOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SortOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::SortOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 105;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::SortOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[171];
    return a1[32];
  }
  return result;
}

void mlir::mps::SortOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v29[2] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = a4;
  uint64_t v24 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v23, 1);
  if (a5)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v8);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::SortOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v29;
  uint64_t v28 = 0x200000000;
  uint64_t v10 = *a1;
  mlir::ValueRange::ValueRange(v26, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v25, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::SortOp::inferReturnTypes(v10, v12, v13, v26[0], v26[1], v14, v15, v16, v21, v22, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  long long v17 = __src;
  }
  uint64_t v18 = v28;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v28;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v29) {
    free(__src);
  }
}

BOOL mlir::mps::SortOp::verifyInvariantsImpl(uint64_t **this)
{
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  uint64_t v10 = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v3, (const void **)"descending", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v10)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps2(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  uint64_t v4 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0; {
  if (*((_DWORD *)*this + 9))
  }
    uint64_t v6 = (uint64_t)(*this - 2);
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 1);
  uint64_t v8 = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps24(*this, *(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 1u) != 0;
}

uint64_t mlir::mps::SortOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.sort", 8, v2, v3, 0, 0);
  void *v4 = &unk_1EC982C20;
  v4[12] = mlir::mps::SortOp::canonicalize;
  unint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::SpaceToBatchOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  int v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.space_to_batch", 18, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 113;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[173];
    return a1[32];
  }
  return result;
}

void mlir::mps::SpaceToBatchOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a4;
  uint64_t v27 = a3;
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v27, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v26, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v25, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  if (a7)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v10);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v32;
  uint64_t v31 = 0x200000000;
  uint64_t v12 = *(void *)a2;
  mlir::ValueRange::ValueRange(v29, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v14 = mlir::ValueRange::ValueRange(&v28, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::SpaceToBatchOp::inferReturnTypes((uint64_t)v14, v12, 1, v29[0], v29[1], v15, v16, v17, v22, v23, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v18 = __src;
  }
  uint64_t v19 = v31;
  uint64_t v20 = *(unsigned int *)(a2 + 72);
  unint64_t v21 = v20 + v31;
  if (v21 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v21, 8);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  if (v19)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v20), v18, 8 * v19);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v20 + v19;
  if (__src != v32) {
    free(__src);
  }
}

uint64_t mlir::mps::SpaceToBatchOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.space_to_batch", 18, v2, v3, 0, 0);
  void *v4 = &unk_1EC9806A8;
  v4[12] = mlir::mps::SpaceToBatchOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::SpaceToDepth2DOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    int v5 = (_OWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  }
  else {
    int v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v11, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 40) = v8;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.space_to_depth_2d", 21, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x10uLL);
    void *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 115;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        long long v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[175];
    return a1[32];
  }
  return result;
}

void mlir::mps::SpaceToDepth2DOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8)
{
  unint64_t v34[2] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a4;
  uint64_t v29 = a3;
  uint64_t v26 = a6;
  uint64_t v27 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v29, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v28, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v27, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v26, 1);
  uint64_t IntegerType = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a7);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties>((void *)a2) = IntegerAttr;
  if (a8)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v14);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties>((void *)a2)
              + 8) = UnitAttr;
  }
  __src = v34;
  uint64_t v33 = 0x200000000;
  uint64_t v16 = *(mlir::UnknownLoc **)a1;
  uint64_t v17 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v31, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v20 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v30, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::SpaceToDepth2DOp::inferReturnTypes(v16, v17, 1, v31[0], v31[1], Dictionary, v20, v21, v30[0], v30[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v22 = __src;
  }
  uint64_t v23 = v33;
  uint64_t v24 = *(unsigned int *)(a2 + 72);
  unint64_t v25 = v24 + v33;
  if (v25 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v25, 8);
    LODWORD(v24) = *(_DWORD *)(a2 + 72);
  }
  if (v23)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v24), v22, 8 * v23);
    LODWORD(v24) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v24 + v23;
  if (__src != v34) {
    free(__src);
  }
}

uint64_t mlir::mps::SpaceToDepth2DOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.space_to_depth_2d", 21, v2, v3, 0, 0);
  void *v4 = &unk_1EC980E38;
  v4[12] = mlir::mps::SpaceToDepth2DOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SplitOpGenericAdaptorBase::SplitOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  int v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.split", 9, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SplitOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      uint64_t v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      uint64_t v26 = &v44;
      uint64_t v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v27 = (char *)v48;
          uint64_t v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v26 = &v44;
          uint64_t v27 = (char *)v48;
        }
      }
      uint64_t v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v55;
      long long v32 = __p;
      if (v55 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        long long v32 = __p;
      }
      int64_t v55 = v30;
      operator delete(v32);
    }
    int v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    uint64_t v33 = v53;
    uint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      unsigned int v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "num_splits", 0xAuLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 55;
    uint64_t v10 = &v44;
    uint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v11 = (char *)v48;
        uint64_t v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v10 = &v44;
        uint64_t v11 = (char *)v48;
      }
    }
    uint64_t v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v49;
    if (v47[0])
    {
      unint64_t v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      uint64_t v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v15 = (char *)v48;
          unint64_t v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          unint64_t v14 = &v44;
          uint64_t v15 = (char *)v48;
        }
      }
      uint64_t v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  uint64_t v18 = (void **)__p;
  if (__p)
  {
    uint64_t v19 = v55;
    uint64_t v20 = __p;
    if (v55 != __p)
    {
      do
        uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      uint64_t v20 = __p;
    }
    int64_t v55 = v18;
    operator delete(v20);
  }
  int v21 = v52;
  if (v52)
  {
    uint64_t v22 = v53;
    uint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      unint64_t v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_41:
    uint64_t v23 = v52;
LABEL_42:
    unint64_t v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

uint64_t mlir::mps::SplitOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"num_splits", 10, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::SplitOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 106;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[177];
    return a1[32];
  }
  return result;
}

void mlir::mps::SplitOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  uint64_t v20 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  if (a5) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  }
  if (a6) {
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties>((void *)a2) = a6;
  }
  __src = v27;
  uint64_t v26 = 0x200000000;
  uint64_t v10 = *a1;
  unint64_t v11 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v14 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::SplitOp::inferReturnTypes(v10, v11, 1, v24[0], v24[1], Dictionary, v14, v15, v23[0], v23[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v16 = __src;
  }
  uint64_t v17 = v26;
  uint64_t v18 = *(unsigned int *)(a2 + 72);
  unint64_t v19 = v18 + v26;
  if (v19 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v19, 8);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  if (v17)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v18), v16, 8 * v17);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v18 + v17;
  if (__src != v27) {
    free(__src);
  }
}

uint64_t mlir::mps::SplitOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  uint64_t v3 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v51[0] = v2;
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v3, (const void **)"num_splits", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps2(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  uint64_t v4 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) == 0)
  {
    uint64_t v6 = -2;
    goto LABEL_6;
  }
  uint64_t v5 = *((unsigned int *)v4 + 17);
  uint64_t v6 = v5 - 2;
  if ((unint64_t)(v5 - 2) <= 1)
  {
    if (v5 == 2)
    {
LABEL_32:
      uint64_t v32 = *((unsigned int *)v4 + 9);
      uint64_t v33 = v4 - 2;
      if (v32) {
        uint64_t v34 = (uint64_t)v33;
      }
      else {
        uint64_t v34 = 0;
      }
      if (!v32) {
        return 1;
      }
      uint64_t v35 = 0;
      uint64_t v21 = 1;
      while (1)
      {
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, v35);
        if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps11(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, v35))break; {
        if (v32 == ++v35)
        }
          return v21;
      }
    }
    else
    {
      uint64_t v30 = v4[9] + 88;
      uint64_t v31 = 2;
      while (mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)v30 + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, v31))
      {
        ++v31;
        v30 += 32;
        if (v5 == v31)
        {
          uint64_t v4 = *this;
          goto LABEL_32;
        }
      }
    }
    return 0;
  }
LABEL_6:
  uint64_t v46 = (const void **)"operand group starting at #";
  __int16 v47 = 259;
  mlir::OpState::emitOpError(this, &v46, (uint64_t)v51);
  if (v51[0])
  {
    int v48 = 5;
    uint64_t v49 = 2;
    unint64_t v7 = &v48;
    BOOL v8 = (char *)v52;
    if (v53 >= v54)
    {
      unint64_t v38 = v53 + 1;
      if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
      {
        int64_t v43 = (char *)&v48 - (unsigned char *)v52;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
        BOOL v8 = (char *)v52;
        unint64_t v7 = (int *)((char *)v52 + v43);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
        unint64_t v7 = &v48;
        BOOL v8 = (char *)v52;
      }
    }
    unint64_t v9 = &v8[24 * v53];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)unint64_t v9 = v10;
    uint64_t v11 = ++v53;
    if (v51[0])
    {
      int v48 = 3;
      uint64_t v49 = (uint64_t)" requires 0 or 1 element, but found ";
      uint64_t v50 = 36;
      uint64_t v12 = &v48;
      long long v13 = (char *)v52;
      if (v11 >= v54)
      {
        unint64_t v39 = v11 + 1;
        BOOL v40 = (char *)v52 + 24 * v11 > (char *)&v48;
        if (v52 <= &v48 && v40)
        {
          int64_t v44 = (char *)&v48 - (unsigned char *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
          long long v13 = (char *)v52;
          uint64_t v12 = (int *)((char *)v52 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
          uint64_t v12 = &v48;
          long long v13 = (char *)v52;
        }
      }
      unint64_t v14 = &v13[24 * v53];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)unint64_t v14 = v15;
      uint64_t v16 = ++v53;
      if (v51[0])
      {
        int v48 = 5;
        uint64_t v49 = v6;
        uint64_t v17 = &v48;
        uint64_t v18 = (char *)v52;
        if (v16 >= v54)
        {
          unint64_t v41 = v16 + 1;
          BOOL v42 = (char *)v52 + 24 * v16 > (char *)&v48;
          if (v52 <= &v48 && v42)
          {
            int64_t v45 = (char *)&v48 - (unsigned char *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
            uint64_t v18 = (char *)v52;
            uint64_t v17 = (int *)((char *)v52 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
            uint64_t v17 = &v48;
            uint64_t v18 = (char *)v52;
          }
        }
        unint64_t v19 = &v18[24 * v53];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)unint64_t v19 = v20;
        ++v53;
      }
    }
  }
  uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
  if (v51[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
  }
  if (v60)
  {
    uint64_t v22 = (void **)__p;
    if (__p)
    {
      uint64_t v23 = v59;
      uint64_t v24 = __p;
      if (v59 != __p)
      {
        do
          uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      uint64_t v59 = v22;
      operator delete(v24);
    }
    unint64_t v25 = v56;
    if (v56)
    {
      uint64_t v26 = v57;
      uint64_t v27 = v56;
      if (v57 != v56)
      {
        do
        {
          long long v29 = (void *)*--v26;
          uint64_t v28 = v29;
          void *v26 = 0;
          if (v29) {
            operator delete[](v28);
          }
        }
        while (v26 != v25);
        uint64_t v27 = v56;
      }
      uint64_t v57 = v25;
      operator delete(v27);
    }
    if (v52 != v55) {
      free(v52);
    }
  }
  return v21;
}

uint64_t mlir::mps::SplitOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.split", 9, v2, v3, 0, 0);
  void *v4 = &unk_1EC983300;
  v4[12] = mlir::mps::SplitOp::canonicalize;
  unint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SquareOpGenericAdaptorBase::SquareOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.square", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SquareOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.square", 10, v2, v3, 0, 0);
  void *v4 = &unk_1EC983720;
  v4[12] = mlir::mps::SquareOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SquareRootOpGenericAdaptorBase::SquareRootOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.square_root", 15, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SquareRootOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.square_root", 15, v2, v3, 0, 0);
  void *v4 = &unk_1EC980020;
  v4[12] = mlir::mps::SquareRootOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SqueezeOpGenericAdaptorBase::SqueezeOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.squeeze", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::SqueezeOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a4;
  uint64_t v19 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  if (a4) {
    mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  }
  __src = v24;
  uint64_t v23 = 0x200000000;
  uint64_t v6 = *(void *)a2;
  mlir::ValueRange::ValueRange(v21, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  __int16 v8 = mlir::ValueRange::ValueRange(&v20, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::SqueezeOp::inferReturnTypes((uint64_t)v8, v6, 1, v21[0], v21[1], v9, v10, v11, v16, v17, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v12 = __src;
  }
  uint64_t v13 = v23;
  uint64_t v14 = *(unsigned int *)(a2 + 72);
  unint64_t v15 = v14 + v23;
  if (v15 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  if (v13)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v14), v12, 8 * v13);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v14 + v13;
  if (__src != v24) {
    free(__src);
  }
}

void mlir::mps::SqueezeOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  unint64_t v27[2] = *MEMORY[0x1E4F143B8];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(void *)(a2 + 192) = 0;
  uint64_t v11 = *(unsigned int *)(a2 + 120);
  if (a6 + v11 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v11, 16);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v11), a5, 16 * a6);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v11 + a6;
  __src = v27;
  uint64_t v26 = 0x200000000;
  uint64_t v12 = *(void *)a2;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v14 = mlir::ValueRange::ValueRange(&v24, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::SqueezeOp::inferReturnTypes((uint64_t)v14, v12, 1, a3, a4, v15, v16, v17, v22, v23, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v18 = __src;
  }
  uint64_t v19 = v26;
  uint64_t v20 = *(unsigned int *)(a2 + 72);
  unint64_t v21 = v20 + v26;
  if (v21 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v21, 8);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  if (v19)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v20), v18, 8 * v19);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v20 + v19;
  if (__src != v27) {
    free(__src);
  }
}

uint64_t mlir::mps::SqueezeOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.squeeze", 11, v2, v3, 0, 0);
  void *v4 = &unk_1EC9D09C8;
  v4[12] = mlir::mps::SqueezeOp::canonicalize;
  uint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::StencilOpGenericAdaptorBase::StencilOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v5 = (long long *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v13, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *v5;
  long long v9 = v5[1];
  long long v10 = v5[2];
  *(_OWORD *)(a1 + 72) = v5[3];
  *(_OWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)v13;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.stencil", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::StencilOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v73 = v6;
  if (!v6)
  {
    a3(v77, a4);
    if (v77[0])
    {
      LODWORD(v74) = 3;
      unint64_t v75 = "expected DictionaryAttr to set properties";
      uint64_t v76 = 41;
      uint64_t v16 = &v74;
      uint64_t v17 = (char *)v78;
      if (v79 >= v80)
      {
        unint64_t v63 = v79 + 1;
        if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
        {
          int64_t v68 = (char *)&v74 - (unsigned char *)v78;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v63, 24);
          uint64_t v17 = (char *)v78;
          uint64_t v16 = (uint64_t *)((char *)v78 + v68);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v63, 24);
          uint64_t v16 = &v74;
          uint64_t v17 = (char *)v78;
        }
      }
      uint64_t v18 = &v17[24 * v79];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)uint64_t v18 = v19;
      ++v79;
      if (v77[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v77);
      }
    }
    if (!v86) {
      return 0;
    }
    uint64_t v20 = (void **)__p;
    if (__p)
    {
      unint64_t v21 = v85;
      uint64_t v22 = __p;
      if (v85 != __p)
      {
        do
          unint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        uint64_t v22 = __p;
      }
      int64_t v85 = v20;
      operator delete(v22);
    }
    uint64_t v23 = v82;
    if (!v82) {
      goto LABEL_71;
    }
    unint64_t v24 = v83;
    unint64_t v25 = v82;
    if (v83 == v82)
    {
LABEL_70:
      int64_t v83 = v23;
      operator delete(v25);
LABEL_71:
      if (v78 != v81) {
        free(v78);
      }
      return 0;
    }
    do
    {
      uint64_t v27 = (void *)*--v24;
      uint64_t v26 = v27;
      *unint64_t v24 = 0;
      if (v27) {
        operator delete[](v26);
      }
    }
    while (v24 != v23);
LABEL_69:
    unint64_t v25 = v82;
    goto LABEL_70;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v73, "dilation_rates", 0xEuLL);
  if (!v8) {
    goto LABEL_8;
  }
  uint64_t v9 = v8;
  if (!mlir::DenseIntElementsAttr::classof(v8))
  {
    a3(v77, a4);
    if (v77[0])
    {
      LODWORD(v74) = 3;
      uint64_t v76 = 59;
      uint64_t v28 = &v74;
      long long v29 = (char *)v78;
      if (v79 >= v80)
      {
        unint64_t v64 = v79 + 1;
        if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
        {
          int64_t v69 = (char *)&v74 - (unsigned char *)v78;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
          long long v29 = (char *)v78;
          uint64_t v28 = (uint64_t *)((char *)v78 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
          uint64_t v28 = &v74;
          long long v29 = (char *)v78;
        }
      }
      uint64_t v30 = &v29[24 * v79];
      long long v31 = *(_OWORD *)v28;
      *((void *)v30 + 2) = v28[2];
      *(_OWORD *)uint64_t v30 = v31;
      ++v79;
      if (v77[0])
      {
        uint64_t v32 = &v74;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v74, v9);
        uint64_t v33 = (char *)v78;
        if (v79 >= v80)
        {
          unint64_t v66 = v79 + 1;
          if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
          {
            int64_t v71 = (char *)&v74 - (unsigned char *)v78;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v66, 24);
            uint64_t v33 = (char *)v78;
            uint64_t v32 = (uint64_t *)((char *)v78 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v66, 24);
            uint64_t v32 = &v74;
            uint64_t v33 = (char *)v78;
          }
        }
        uint64_t v34 = &v33[24 * v79];
        long long v35 = *(_OWORD *)v32;
        *((void *)v34 + 2) = v32[2];
        *(_OWORD *)uint64_t v34 = v35;
        ++v79;
        if (v77[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v77);
        }
      }
    }
    if (!v86) {
      return 0;
    }
    long long v36 = (void **)__p;
    if (__p)
    {
      unint64_t v37 = v85;
      unint64_t v38 = __p;
      if (v85 != __p)
      {
        do
          unint64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
        while (v37 != v36);
        unint64_t v38 = __p;
      }
      int64_t v85 = v36;
      operator delete(v38);
    }
    uint64_t v23 = v82;
    if (!v82) {
      goto LABEL_71;
    }
    unint64_t v39 = v83;
    unint64_t v25 = v82;
    if (v83 == v82) {
      goto LABEL_70;
    }
    do
    {
      unint64_t v41 = (void *)*--v39;
      BOOL v40 = v41;
      *unint64_t v39 = 0;
      if (v41) {
        operator delete[](v40);
      }
    }
    while (v39 != v23);
    goto LABEL_69;
  }
  *a1 = v9;
LABEL_8:
  uint64_t v10 = mlir::DictionaryAttr::get((uint64_t)&v73, "explicit_padding", 0x10uLL);
  if (!v10) {
    goto LABEL_11;
  }
  uint64_t v11 = v10;
  if (!mlir::DenseIntElementsAttr::classof(v10))
  {
    a3(v77, a4);
    if (v77[0])
    {
      LODWORD(v74) = 3;
      uint64_t v76 = 61;
      BOOL v42 = &v74;
      int64_t v43 = (char *)v78;
      if (v79 >= v80)
      {
        unint64_t v65 = v79 + 1;
        if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
        {
          int64_t v70 = (char *)&v74 - (unsigned char *)v78;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v65, 24);
          int64_t v43 = (char *)v78;
          BOOL v42 = (uint64_t *)((char *)v78 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v65, 24);
          BOOL v42 = &v74;
          int64_t v43 = (char *)v78;
        }
      }
      int64_t v44 = &v43[24 * v79];
      long long v45 = *(_OWORD *)v42;
      *((void *)v44 + 2) = v42[2];
      *(_OWORD *)int64_t v44 = v45;
      ++v79;
      if (v77[0])
      {
        uint64_t v46 = &v74;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v74, v11);
        __int16 v47 = (char *)v78;
        if (v79 >= v80)
        {
          unint64_t v67 = v79 + 1;
          if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
          {
            int64_t v72 = (char *)&v74 - (unsigned char *)v78;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v67, 24);
            __int16 v47 = (char *)v78;
            uint64_t v46 = (uint64_t *)((char *)v78 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v67, 24);
            uint64_t v46 = &v74;
            __int16 v47 = (char *)v78;
          }
        }
        int v48 = &v47[24 * v79];
        long long v49 = *(_OWORD *)v46;
        *((void *)v48 + 2) = v46[2];
        *(_OWORD *)int v48 = v49;
        ++v79;
        if (v77[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v77);
        }
      }
    }
    if (!v86) {
      return 0;
    }
    uint64_t v50 = (void **)__p;
    if (__p)
    {
      unint64_t v51 = v85;
      BOOL v52 = __p;
      if (v85 != __p)
      {
        do
          unint64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
        while (v51 != v50);
        BOOL v52 = __p;
      }
      int64_t v85 = v50;
      operator delete(v52);
    }
    uint64_t v23 = v82;
    if (!v82) {
      goto LABEL_71;
    }
    unsigned int v53 = v83;
    unint64_t v25 = v82;
    if (v83 == v82) {
      goto LABEL_70;
    }
    do
    {
      int64_t v55 = (void *)*--v53;
      unsigned int v54 = v55;
      *unsigned int v53 = 0;
      if (v55) {
        operator delete[](v54);
      }
    }
    while (v53 != v23);
    goto LABEL_69;
  }
  a1[1] = v11;
LABEL_11:
  uint64_t v12 = mlir::DictionaryAttr::get((uint64_t)&v73, "offsets", 7uLL);
  uint64_t v74 = v12;
  if (v12)
  {
    uint64_t v13 = v12;
    if (!mlir::DenseIntElementsAttr::classof(v12))
    {
      a3(v77, a4);
LABEL_86:
      uint64_t v15 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v77, v56);
      goto LABEL_87;
    }
    a1[2] = v13;
  }
  uint64_t v14 = mlir::DictionaryAttr::get((uint64_t)&v73, "paddingConstant", 0xFuLL);
  uint64_t v74 = v14;
  if (v14)
  {
    if (*(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
    {
      a3(v77, a4);
LABEL_87:
      mlir::InFlightDiagnostic::append<mlir::Attribute>(v15, &v74);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v77);
      return 0;
    }
    a1[3] = v14;
  }
  uint64_t v57 = mlir::DictionaryAttr::get((uint64_t)&v73, "paddingMode", 0xBuLL);
  uint64_t v74 = v57;
  if (v57)
  {
    if (*(_UNKNOWN **)(*(void *)v57 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::StencilPaddingModeAttr,void>::id)
    {
      a3(v77, a4);
      goto LABEL_87;
    }
    a1[4] = v57;
  }
  uint64_t v58 = mlir::DictionaryAttr::get((uint64_t)&v73, "padding_style", 0xDuLL);
  uint64_t v74 = v58;
  if (v58)
  {
    if (*(_UNKNOWN **)(*(void *)v58 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id)
    {
      a3(v77, a4);
      goto LABEL_86;
    }
    a1[5] = v58;
  }
  uint64_t v59 = mlir::DictionaryAttr::get((uint64_t)&v73, "reductionMode", 0xDuLL);
  uint64_t v74 = v59;
  if (v59)
  {
    if (*(_UNKNOWN **)(*(void *)v59 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::ReductionModeAttr,void>::id)
    {
      a3(v77, a4);
      goto LABEL_86;
    }
    a1[6] = v59;
  }
  uint64_t v61 = mlir::DictionaryAttr::get((uint64_t)&v73, "strides", 7uLL);
  uint64_t v74 = v61;
  if (v61)
  {
    uint64_t v62 = v61;
    if (!mlir::DenseIntElementsAttr::classof(v61))
    {
      a3(v77, a4);
      goto LABEL_86;
    }
    a1[7] = v62;
  }
  return 1;
}

uint64_t mlir::mps::StencilOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v57[6] = *MEMORY[0x1E4F143B8];
  unsigned int v54 = a1;
  int64_t v55 = v57;
  uint64_t v56 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v54, (uint64_t)"dilation_rates", 14, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v56;
  if (v56 >= HIDWORD(v56))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 16);
    unsigned int v6 = v56;
  }
  uint64_t v7 = (uint64_t *)((char *)v55 + 16 * v6);
  *uint64_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v56 + 1;
  LODWORD(v56) = v56 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v54, (uint64_t)"explicit_padding", 16, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v56;
    if (v56 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 16);
      unsigned int v13 = v56;
    }
    uint64_t v14 = (uint64_t *)((char *)v55 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v56 + 1;
    LODWORD(v56) = v56 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v54, (uint64_t)"offsets", 7, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v56;
    if (v56 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 16);
      unsigned int v19 = v56;
    }
    uint64_t v20 = (uint64_t *)((char *)v55 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v56 + 1;
    LODWORD(v56) = v56 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v54, (uint64_t)"paddingConstant", 15, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v56;
    if (v56 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 16);
      unsigned int v25 = v56;
    }
    uint64_t v26 = (uint64_t *)((char *)v55 + 16 * v25);
    uint64_t *v26 = v22;
    v26[1] = v24;
    unsigned int v8 = v56 + 1;
    LODWORD(v56) = v56 + 1;
  }
  uint64_t v27 = a2[4];
  if (v27)
  {
    uint64_t v28 = mlir::Builder::getNamedAttr(&v54, (uint64_t)"paddingMode", 11, v27);
    uint64_t v30 = v29;
    unsigned int v31 = v56;
    if (v56 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 16);
      unsigned int v31 = v56;
    }
    uint64_t v32 = (uint64_t *)((char *)v55 + 16 * v31);
    *uint64_t v32 = v28;
    v32[1] = v30;
    unsigned int v8 = v56 + 1;
    LODWORD(v56) = v56 + 1;
  }
  uint64_t v33 = a2[5];
  if (v33)
  {
    uint64_t v34 = mlir::Builder::getNamedAttr(&v54, (uint64_t)"padding_style", 13, v33);
    uint64_t v36 = v35;
    unsigned int v37 = v56;
    if (v56 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 16);
      unsigned int v37 = v56;
    }
    unint64_t v38 = (uint64_t *)((char *)v55 + 16 * v37);
    *unint64_t v38 = v34;
    v38[1] = v36;
    unsigned int v8 = v56 + 1;
    LODWORD(v56) = v56 + 1;
  }
  uint64_t v39 = a2[6];
  if (v39)
  {
    uint64_t v40 = mlir::Builder::getNamedAttr(&v54, (uint64_t)"reductionMode", 13, v39);
    uint64_t v42 = v41;
    unsigned int v43 = v56;
    if (v56 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 16);
      unsigned int v43 = v56;
    }
    int64_t v44 = (uint64_t *)((char *)v55 + 16 * v43);
    *int64_t v44 = v40;
    v44[1] = v42;
    unsigned int v8 = v56 + 1;
    LODWORD(v56) = v56 + 1;
  }
  uint64_t v45 = a2[7];
  if (v45)
  {
    uint64_t v46 = mlir::Builder::getNamedAttr(&v54, (uint64_t)"strides", 7, v45);
    uint64_t v48 = v47;
    unsigned int v49 = v56;
    if (v56 >= HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 16);
      unsigned int v49 = v56;
    }
    uint64_t v50 = (uint64_t *)((char *)v55 + 16 * v49);
    uint64_t *v50 = v46;
    v50[1] = v48;
    unsigned int v8 = v56 + 1;
    LODWORD(v56) = v56 + 1;
  }
  unint64_t v51 = v55;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v55 == v57) {
      return DictionaryAttr;
    }
    goto LABEL_36;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v54, (uint64_t *)v55, v8);
  unint64_t v51 = v55;
  if (v55 != v57) {
LABEL_36:
  }
    free(v51);
  return DictionaryAttr;
}

unint64_t mlir::mps::StencilOp::computePropertiesHash(unint64_t *a1)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *a1;
  unint64_t v2 = 0x1E8EB8000uLL;
  {
    unint64_t v66 = a1;
    unint64_t v90 = v1;
    unint64_t v1 = v90;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v30 = v29;
    a1 = v66;
    if (v30)
    {
      unint64_t v31 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v31 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v31;
      unint64_t v1 = v90;
      unint64_t v2 = 0x1E8EB8000;
      a1 = v66;
    }
  }
  uint64_t v3 = *(void *)(v2 + 3024);
  unint64_t v4 = a1[1];
  {
    unint64_t v67 = a1;
    uint64_t v74 = v3;
    unint64_t v82 = v4;
    unint64_t v91 = v1;
    uint64_t v3 = v74;
    unint64_t v4 = v82;
    unint64_t v1 = v91;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v33 = v32;
    a1 = v67;
    if (v33)
    {
      unint64_t v34 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v34 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v34;
      uint64_t v3 = v74;
      unint64_t v4 = v82;
      unint64_t v1 = v91;
      unint64_t v2 = 0x1E8EB8000;
      a1 = v67;
    }
  }
  uint64_t v5 = *(void *)(v2 + 3024);
  unint64_t v6 = a1[2];
  {
    int64_t v68 = a1;
    uint64_t v75 = v3;
    unint64_t v83 = v4;
    unint64_t v92 = v1;
    unint64_t v54 = v6;
    uint64_t v59 = v5;
    unint64_t v6 = v54;
    uint64_t v5 = v59;
    uint64_t v3 = v75;
    unint64_t v4 = v83;
    unint64_t v1 = v92;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v36 = v35;
    a1 = v68;
    if (v36)
    {
      unint64_t v37 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v37 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v37;
      unint64_t v6 = v54;
      uint64_t v5 = v59;
      uint64_t v3 = v75;
      unint64_t v4 = v83;
      unint64_t v1 = v92;
      unint64_t v2 = 0x1E8EB8000;
      a1 = v68;
    }
  }
  unint64_t v7 = HIDWORD(v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v6) ^ HIDWORD(v6));
  unint64_t v104 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  unint64_t v9 = a1[3];
  {
    int64_t v69 = a1;
    uint64_t v76 = v3;
    unint64_t v84 = v4;
    unint64_t v93 = v1;
    unint64_t v55 = v9;
    uint64_t v60 = v5;
    unint64_t v9 = v55;
    uint64_t v5 = v60;
    uint64_t v3 = v76;
    unint64_t v4 = v84;
    unint64_t v1 = v93;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v39 = v38;
    a1 = v69;
    if (v39)
    {
      unint64_t v40 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v40 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v40;
      unint64_t v9 = v55;
      uint64_t v5 = v60;
      uint64_t v3 = v76;
      unint64_t v4 = v84;
      unint64_t v1 = v93;
      unint64_t v2 = 0x1E8EB8000;
      a1 = v69;
    }
  }
  unint64_t v10 = HIDWORD(v9);
  unint64_t v11 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v9) ^ HIDWORD(v9));
  unint64_t v103 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47));
  unint64_t v12 = a1[4];
  {
    int64_t v70 = a1;
    uint64_t v77 = v3;
    unint64_t v85 = v4;
    unint64_t v94 = v1;
    unint64_t v56 = v12;
    uint64_t v61 = v5;
    unint64_t v12 = v56;
    uint64_t v5 = v61;
    uint64_t v3 = v77;
    unint64_t v4 = v85;
    unint64_t v1 = v94;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v42 = v41;
    a1 = v70;
    if (v42)
    {
      unint64_t v43 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v43 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v43;
      unint64_t v12 = v56;
      uint64_t v5 = v61;
      uint64_t v3 = v77;
      unint64_t v4 = v85;
      unint64_t v1 = v94;
      unint64_t v2 = 0x1E8EB8000;
      a1 = v70;
    }
  }
  unint64_t v13 = HIDWORD(v12);
  unint64_t v14 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v12) ^ HIDWORD(v12));
  unint64_t v102 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) ^ ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) >> 47));
  unint64_t v15 = a1[5];
  {
    int64_t v71 = a1;
    uint64_t v78 = v3;
    unint64_t v86 = v4;
    unint64_t v95 = v1;
    unint64_t v57 = v15;
    uint64_t v62 = v5;
    unint64_t v15 = v57;
    uint64_t v5 = v62;
    uint64_t v3 = v78;
    unint64_t v4 = v86;
    unint64_t v1 = v95;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v45 = v44;
    a1 = v71;
    if (v45)
    {
      unint64_t v46 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v46 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v46;
      unint64_t v15 = v57;
      uint64_t v5 = v62;
      uint64_t v3 = v78;
      unint64_t v4 = v86;
      unint64_t v1 = v95;
      unint64_t v2 = 0x1E8EB8000;
      a1 = v71;
    }
  }
  unint64_t v16 = HIDWORD(v15);
  unint64_t v17 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v15) ^ HIDWORD(v15));
  unint64_t v101 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v16 ^ (v17 >> 47) ^ v17)) ^ ((0x9DDFEA08EB382D69 * (v16 ^ (v17 >> 47) ^ v17)) >> 47));
  unint64_t v18 = a1[6];
  {
    int64_t v72 = a1;
    uint64_t v79 = v3;
    unint64_t v87 = v4;
    unint64_t v96 = v1;
    unint64_t v58 = v18;
    uint64_t v63 = v5;
    unint64_t v18 = v58;
    uint64_t v5 = v63;
    uint64_t v3 = v79;
    unint64_t v4 = v87;
    unint64_t v1 = v96;
    unint64_t v2 = 0x1E8EB8000uLL;
    int v48 = v47;
    a1 = v72;
    if (v48)
    {
      unint64_t v49 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v49 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v49;
      unint64_t v18 = v58;
      uint64_t v5 = v63;
      uint64_t v3 = v79;
      unint64_t v4 = v87;
      unint64_t v1 = v96;
      unint64_t v2 = 0x1E8EB8000;
      a1 = v72;
    }
  }
  unint64_t v19 = HIDWORD(v18);
  unint64_t v20 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v18) ^ HIDWORD(v18));
  unint64_t v100 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v19 ^ (v20 >> 47) ^ v20)) ^ ((0x9DDFEA08EB382D69 * (v19 ^ (v20 >> 47) ^ v20)) >> 47));
  unint64_t v21 = a1[7];
  {
    unint64_t v88 = v4;
    unint64_t v97 = v1;
    unint64_t v73 = v21;
    uint64_t v80 = v3;
    uint64_t v64 = v5;
    uint64_t v5 = v64;
    unint64_t v21 = v73;
    uint64_t v3 = v80;
    unint64_t v4 = v88;
    unint64_t v1 = v97;
    unint64_t v2 = 0x1E8EB8000uLL;
    if (v50)
    {
      unint64_t v51 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v51 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v51;
      uint64_t v5 = v64;
      unint64_t v21 = v73;
      uint64_t v3 = v80;
      unint64_t v4 = v88;
      unint64_t v1 = v97;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v22 = HIDWORD(v21);
  unint64_t v23 = 0x9DDFEA08EB382D69 * ((*(void *)(v2 + 3024) + 8 * v21) ^ HIDWORD(v21));
  unint64_t v99 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v22 ^ (v23 >> 47) ^ v23)) ^ ((0x9DDFEA08EB382D69 * (v22 ^ (v23 >> 47) ^ v23)) >> 47));
  uint64_t v108 = 0;
  memset(v107, 0, sizeof(v107));
  memset(v106, 0, sizeof(v106));
  long long v105 = 0u;
  {
    unint64_t v89 = v4;
    unint64_t v98 = v1;
    uint64_t v81 = v3;
    uint64_t v65 = v5;
    uint64_t v5 = v65;
    uint64_t v3 = v81;
    unint64_t v4 = v89;
    unint64_t v1 = v98;
    unint64_t v2 = 0x1E8EB8000uLL;
    if (v52)
    {
      unint64_t v53 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v53 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v53;
      uint64_t v5 = v65;
      uint64_t v3 = v81;
      unint64_t v4 = v89;
      unint64_t v1 = v98;
      unint64_t v2 = 0x1E8EB8000;
    }
  }
  unint64_t v24 = 0x9DDFEA08EB382D69 * ((v5 + 8 * v4) ^ HIDWORD(v4));
  unint64_t v25 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v24 >> 47) ^ v24);
  unint64_t v26 = HIDWORD(v1);
  unint64_t v27 = 0x9DDFEA08EB382D69 * ((v3 + 8 * v1) ^ HIDWORD(v1));
  uint64_t v109 = *(void *)(v2 + 3024);
  *(void *)&long long v105 = 0x9DDFEA08EB382D69
                   * ((0x9DDFEA08EB382D69 * (v26 ^ (v27 >> 47) ^ v27)) ^ ((0x9DDFEA08EB382D69
                                                                           * (v26 ^ (v27 >> 47) ^ v27)) >> 47));
  *((void *)&v105 + 1) = 0x9DDFEA08EB382D69 * (v25 ^ (v25 >> 47));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)&v105, 0, v106, (char *)v107, (uint64_t *)&v104, (uint64_t *)&v103, (uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, (uint64_t *)&v99);
}

uint64_t mlir::mps::StencilOp::getInherentAttr(int a1, void *a2, char *__s1, size_t __n)
{
  switch(__n)
  {
    case 7uLL:
      if (!memcmp(__s1, "offsets", __n)) {
        return a2[2];
      }
      if (memcmp(__s1, "strides", __n)) {
        return 0;
      }
      return a2[7];
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xCuLL:
      return 0;
    case 0xBuLL:
      if (memcmp(__s1, "paddingMode", __n)) {
        return 0;
      }
      return a2[4];
    case 0xDuLL:
      if (!memcmp(__s1, "padding_style", __n)) {
        return a2[5];
      }
      if (*(void *)__s1 != 0x6F69746375646572 || *(void *)(__s1 + 5) != 0x65646F4D6E6F6974) {
        return 0;
      }
      return a2[6];
    case 0xEuLL:
      if (*(void *)__s1 != 0x6E6F6974616C6964 || *(void *)(__s1 + 6) != 0x73657461725F6E6FLL) {
        return 0;
      }
      return *a2;
    case 0xFuLL:
      if (memcmp(__s1, "paddingConstant", __n)) {
        return 0;
      }
      return a2[3];
    case 0x10uLL:
      if (memcmp(__s1, "explicit_padding", __n)) {
        return 0;
      }
      return a2[1];
    default:
      return 0;
  }
}

uint64_t mlir::mps::StencilOp::setInherentAttr(uint64_t result, char *__s1, size_t __n, uint64_t a4)
{
  unint64_t v7 = (uint64_t *)result;
  switch(__n)
  {
    case 7uLL:
      uint64_t result = memcmp(__s1, "offsets", __n);
      if (result)
      {
        uint64_t result = memcmp(__s1, "strides", __n);
        if (!result)
        {
          if (a4)
          {
            uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
            if (result) {
              uint64_t v17 = a4;
            }
            else {
              uint64_t v17 = 0;
            }
            v7[7] = v17;
          }
          else
          {
            v7[7] = 0;
          }
        }
      }
      else if (a4)
      {
        uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
        if (result) {
          uint64_t v15 = a4;
        }
        else {
          uint64_t v15 = 0;
        }
        v7[2] = v15;
      }
      else
      {
        v7[2] = 0;
      }
      break;
    case 0xBuLL:
      uint64_t result = memcmp(__s1, "paddingMode", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::StencilPaddingModeAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          uint64_t v7[4] = v8;
        }
        else
        {
          uint64_t v7[4] = 0;
        }
      }
      break;
    case 0xDuLL:
      uint64_t result = memcmp(__s1, "padding_style", __n);
      if (result)
      {
        if (*(void *)__s1 == 0x6F69746375646572 && *(void *)(__s1 + 5) == 0x65646F4D6E6F6974)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionModeAttr,void>::id) {
              uint64_t v10 = a4;
            }
            else {
              uint64_t v10 = 0;
            }
            v7[6] = v10;
          }
          else
          {
            v7[6] = 0;
          }
        }
      }
      else if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id) {
          uint64_t v16 = a4;
        }
        else {
          uint64_t v16 = 0;
        }
        v7[5] = v16;
      }
      else
      {
        v7[5] = 0;
      }
      break;
    case 0xEuLL:
      if (*(void *)__s1 == 0x6E6F6974616C6964 && *(void *)(__s1 + 6) == 0x73657461725F6E6FLL)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v12 = a4;
          }
          else {
            uint64_t v12 = 0;
          }
          *unint64_t v7 = v12;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xFuLL:
      uint64_t result = memcmp(__s1, "paddingConstant", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
            uint64_t v13 = a4;
          }
          else {
            uint64_t v13 = 0;
          }
          v7[3] = v13;
        }
        else
        {
          v7[3] = 0;
        }
      }
      break;
    case 0x10uLL:
      uint64_t result = memcmp(__s1, "explicit_padding", __n);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::DenseIntElementsAttr::classof(a4);
          if (result) {
            uint64_t v14 = a4;
          }
          else {
            uint64_t v14 = 0;
          }
          v7[1] = v14;
        }
        else
        {
          v7[1] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::mps::StencilOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"dilation_rates", 14, *a2);
  }
  uint64_t v5 = a2[1];
  if (v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"explicit_padding", 16, v5);
  }
  uint64_t v6 = a2[2];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"offsets", 7, v6);
  }
  uint64_t v7 = a2[3];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"paddingConstant", 15, v7);
  }
  uint64_t v8 = a2[4];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"paddingMode", 11, v8);
  }
  uint64_t v9 = a2[5];
  if (v9) {
    mlir::NamedAttrList::append(a3, (uint64_t)"padding_style", 13, v9);
  }
  uint64_t v10 = a2[6];
  if (v10) {
    mlir::NamedAttrList::append(a3, (uint64_t)"reductionMode", 13, v10);
  }
  uint64_t v11 = a2[7];
  if (v11)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"strides", 7, v11);
  }
}

BOOL mlir::mps::StencilOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = (const void **)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v8, (const void **)"dilation_rates", (const char *)0xE, (void (*)(void **__return_ptr, uint64_t))a3, a4))
  {
    uint64_t v9 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(v9, (const void **)"explicit_padding", (const char *)0x10, (void (*)(void **__return_ptr, uint64_t))a3, a4))
    {
      uint64_t v10 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps41(v10, (const void **)"offsets", (const char *)7, (void (*)(void **__return_ptr, uint64_t))a3, a4))
      {
        uint64_t v11 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v11, (const void **)"paddingConstant", (const char *)0xF, a3, a4))
        {
          uint64_t v12 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 32));
          if (!v12
            || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps43(v12, (const void **)"paddingMode", (const char *)0xB, a3, a4))
          {
            uint64_t v13 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 40));
            if (!v13
              || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(v13, (const void **)"padding_style", (const char *)0xD, a3, a4))
            {
              uint64_t v14 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 48));
              if (!v14
                || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps42(v14, (const void **)"reductionMode", (const char *)0xD, a3, a4))
              {
                uint64_t v15 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 56));
                if (!v15
                  || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v15, (const void **)"strides", (const char *)7, (void (*)(void **__return_ptr, uint64_t))a3, a4))
                {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t mlir::mps::__mlir_ods_local_attr_constraint_MPSOps41(const void **a1, const void **a2, const char *a3, void (*a4)(void **__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)a1)) {
    goto LABEL_9;
  }
  uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>((uint64_t)*a1 + 8);
  int v41 = a1;
  int v42 = (const char *)v10;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v41);
  uint64_t v12 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  int v45 = v12;
  unint64_t v46 = Type;
  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45);
  uint64_t v56 = 4;
  if (v14 == 1 && *ArgAttrsAttr == v56)
  {
    int v38 = a1;
    v39[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38);
    v39[1] = v15;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v39);
    if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64)) {
      return 1;
    }
  }
LABEL_9:
  a4(&v45, a5);
  if (v45)
  {
    LODWORD(v41) = 3;
    int v42 = "attribute '";
    uint64_t v43 = 11;
    uint64_t v17 = &v41;
    unint64_t v18 = (char *)v47;
    if (v48 >= v49)
    {
      unint64_t v34 = v48 + 1;
      if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
      {
        int64_t v36 = (char *)&v41 - (unsigned char *)v47;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
        unint64_t v18 = (char *)v47;
        uint64_t v17 = (const void ***)((char *)v47 + v36);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
        uint64_t v17 = &v41;
        unint64_t v18 = (char *)v47;
      }
    }
    unint64_t v19 = &v18[24 * v48];
    long long v20 = *(_OWORD *)v17;
    *((void *)v19 + 2) = v17[2];
    *(_OWORD *)unint64_t v19 = v20;
    ++v48;
    if (v45)
    {
      __int16 v44 = 261;
      int v41 = a2;
      int v42 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v46, &v41);
      if (v45)
      {
        LODWORD(v41) = 3;
        int v42 = "' failed to satisfy constraint: si64 elements attribute of shape {4}";
        uint64_t v43 = 68;
        unint64_t v21 = &v41;
        unint64_t v22 = (char *)v47;
        if (v48 >= v49)
        {
          unint64_t v35 = v48 + 1;
          if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
          {
            int64_t v37 = (char *)&v41 - (unsigned char *)v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
            unint64_t v22 = (char *)v47;
            unint64_t v21 = (const void ***)((char *)v47 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
            unint64_t v21 = &v41;
            unint64_t v22 = (char *)v47;
          }
        }
        unint64_t v23 = &v22[24 * v48];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = v21[2];
        *(_OWORD *)unint64_t v23 = v24;
        ++v48;
      }
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
  if (v45) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
  }
  if (v55)
  {
    unint64_t v25 = (void **)__p;
    if (__p)
    {
      unint64_t v26 = v54;
      unint64_t v27 = __p;
      if (v54 != __p)
      {
        do
          unint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        unint64_t v27 = __p;
      }
      unint64_t v54 = v25;
      operator delete(v27);
    }
    uint64_t v28 = v51;
    if (v51)
    {
      int v29 = v52;
      int v30 = v51;
      if (v52 != v51)
      {
        do
        {
          int v32 = (void *)*--v29;
          unint64_t v31 = v32;
          void *v29 = 0;
          if (v32) {
            operator delete[](v31);
          }
        }
        while (v29 != v28);
        int v30 = v51;
      }
      int v52 = v28;
      operator delete(v30);
    }
    if (v47 != v50) {
      free(v47);
    }
  }
  return v16;
}

uint64_t mlir::mps::__mlir_ods_local_attr_constraint_MPSOps43(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1
    || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::StencilPaddingModeAttr,void>::id)
  {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    int v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    uint64_t v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v8 = (char *)v35;
        uint64_t v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        uint64_t v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      int v29 = a2;
      int v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        int v30 = "' failed to satisfy constraint: valid StencilPaddingMode";
        uint64_t v31 = 56;
        uint64_t v11 = &v29;
        uint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v12 = (char *)v35;
            uint64_t v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            uint64_t v12 = (char *)v35;
          }
        }
        uint64_t v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)uint64_t v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      uint64_t v17 = v42;
      unint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        unint64_t v18 = __p;
      }
      int v42 = v16;
      operator delete(v18);
    }
    unint64_t v19 = v39;
    if (v39)
    {
      long long v20 = v40;
      unint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          unint64_t v23 = (void *)*--v20;
          unint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        unint64_t v21 = v39;
      }
      unint64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

uint64_t mlir::mps::__mlir_ods_local_attr_constraint_MPSOps42(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1
    || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionModeAttr,void>::id)
  {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    int v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    uint64_t v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v8 = (char *)v35;
        uint64_t v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        uint64_t v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      int v29 = a2;
      int v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        int v30 = "' failed to satisfy constraint: valid ReductionMode";
        uint64_t v31 = 51;
        uint64_t v11 = &v29;
        uint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v12 = (char *)v35;
            uint64_t v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            uint64_t v12 = (char *)v35;
          }
        }
        uint64_t v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)uint64_t v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      uint64_t v17 = v42;
      unint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        unint64_t v18 = __p;
      }
      int v42 = v16;
      operator delete(v18);
    }
    unint64_t v19 = v39;
    if (v39)
    {
      long long v20 = v40;
      unint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          unint64_t v23 = (void *)*--v20;
          unint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        unint64_t v21 = v39;
      }
      unint64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

BOOL mlir::mps::StencilOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::FloatAttr>(a1, v3 + 3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::StencilPaddingModeAttr>(a1, v3 + 4)&& mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::PaddingStyleAttr>(a1, v3 + 5)&& mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::ReductionModeAttr>(a1, v3 + 6)&& mlir::DialectBytecodeReader::readOptionalAttribute<mlir::DenseIntElementsAttr>(a1, v3 + 7) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x40uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    v3[3] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::StencilOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 108;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[179];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::StencilPaddingModeAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::StencilPaddingModeAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::StencilPaddingModeAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  unint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::StencilPaddingModeAttr]";
  unint64_t v41 = 83;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    unint64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        unint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v19 = (char *)v46;
            unint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v18 = &v40;
            unint64_t v19 = (char *)v46;
          }
        }
        long long v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)long long v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    unint64_t v23 = (void **)__p;
    if (__p)
    {
      long long v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          long long v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      unint64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          int v30 = (void *)*--v27;
          int v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      unint64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::ReductionModeAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::ReductionModeAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionModeAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  unint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::ReductionModeAttr]";
  unint64_t v41 = 78;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    unint64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      uint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)uint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        unint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v19 = (char *)v46;
            unint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v18 = &v40;
            unint64_t v19 = (char *)v46;
          }
        }
        long long v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)long long v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    unint64_t v23 = (void **)__p;
    if (__p)
    {
      long long v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          long long v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      unint64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          int v30 = (void *)*--v27;
          int v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      unint64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

void mlir::mps::StencilOp::build(mlir::Float32Type **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, unsigned int a11, unsigned int a12)
{
  unint64_t v47[2] = *MEMORY[0x1E4F143B8];
  uint64_t v40 = a4;
  uint64_t v41 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v41, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v40, 1);
  if (a5) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 16) = a5;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>((void *)a2)
            + 56) = a6;
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>((void *)a2) = a7;
  if (a8) {
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>((void *)a2)
  }
              + 8) = a8;
  uint64_t F32Type = mlir::Builder::getF32Type(a1, v18);
  uint64_t FloatAttr = mlir::Builder::getFloatAttr((uint64_t)a1, F32Type, a9);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>((void *)a2)
            + 24) = FloatAttr;
  long long v21 = *a1;
  unsigned int v42 = a10;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v21);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::ReductionModeAttr,void>::id;
  uint64_t v46 = (uint64_t)v21;
  uint64_t v23 = mlir::StorageUniquer::get<mlir::mps::detail::ReductionModeAttrStorage,mlir::mps::ReductionMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24ReductionModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17ReductionModeAttrEJNS2_13ReductionModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::ReductionModeAttr,void>::id, &v42);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>((void *)a2)
            + 48) = v23;
  long long v24 = *a1;
  unsigned int v42 = a11;
  unint64_t v25 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v24);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::StencilPaddingModeAttr,void>::id;
  uint64_t v46 = (uint64_t)v24;
  uint64_t v26 = mlir::StorageUniquer::get<mlir::mps::detail::StencilPaddingModeAttrStorage,mlir::mps::StencilPaddingMode>(v25, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail29StencilPaddingModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_22StencilPaddingModeAttrEJNS2_18StencilPaddingModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::StencilPaddingModeAttr,void>::id, &v42);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>((void *)a2)
            + 32) = v26;
  int64_t v27 = *a1;
  unsigned int v42 = a12;
  int64_t v28 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v27);
  __src = &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id;
  uint64_t v46 = (uint64_t)v27;
  uint64_t v29 = mlir::StorageUniquer::get<mlir::mps::detail::PaddingStyleAttrStorage,mlir::mps::PaddingStyle>(v28, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23PaddingStyleAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16PaddingStyleAttrEJNS2_12PaddingStyleEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&__src, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id, &v42);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>((void *)a2)
            + 40) = v29;
  __src = v47;
  uint64_t v46 = 0x200000000;
  int v30 = *a1;
  uint64_t v31 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v44, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v34 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v43, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::StencilOp::inferReturnTypes(v30, v31, 1, v44[0], v44[1], Dictionary, v34, v35, v43[0], v43[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  int64_t v36 = __src;
  }
  uint64_t v37 = v46;
  uint64_t v38 = *(unsigned int *)(a2 + 72);
  unint64_t v39 = v38 + v46;
  if (v39 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v39, 8);
    LODWORD(v38) = *(_DWORD *)(a2 + 72);
  }
  if (v37)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v38), v36, 8 * v37);
    LODWORD(v38) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v38 + v37;
  if (__src != v47) {
    free(__src);
  }
}

mlir::MLIRContext *mlir::mps::StencilOp::populateDefaultProperties(uint64_t a1, mlir::MLIRContext **a2)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v21 = *(void *)(a1 + 8);
  uint64_t result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  long long v20 = result;
  if (a2[7])
  {
    if (*a2) {
      goto LABEL_3;
    }
  }
  else
  {
    v23[0] = 4;
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)&v20, 0x40u, 0);
    unint64_t v6 = (void *)mlir::RankedTensorType::get((uint64_t)v23, 1, IntegerType, 0);
    unint64_t v7 = v6;
    if (v6) {
      uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    long long v21 = xmmword_181119FA8;
    long long v22 = unk_181119FB8;
    uint64_t result = (mlir::MLIRContext *)mlir::DenseElementsAttr::getFromRawBuffer(v7, v8, &v21, 32, 8, 1, 0);
    a2[7] = result;
    if (*a2)
    {
LABEL_3:
      if (a2[3]) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  v23[0] = 4;
  uint64_t v9 = mlir::Builder::getIntegerType((mlir::Builder *)&v20, 0x40u, 0);
  unint64_t v10 = (void *)mlir::RankedTensorType::get((uint64_t)v23, 1, v9, 0);
  unint64_t v11 = v10;
  if (v10) {
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  long long v21 = xmmword_181119FA8;
  long long v22 = unk_181119FB8;
  uint64_t result = (mlir::MLIRContext *)mlir::DenseElementsAttr::getFromRawBuffer(v11, v12, &v21, 32, 8, 1, 0);
  *a2 = result;
  if (a2[3])
  {
LABEL_4:
    if (a2[6]) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t F32Type = mlir::Builder::getF32Type(&v20, v4);
  uint64_t result = mlir::Builder::getFloatAttr(0.0, (uint64_t)&v20, F32Type);
  a2[3] = result;
  if (a2[6])
  {
LABEL_5:
    if (a2[4]) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  unint64_t v14 = v20;
  LODWORD(v23[0]) = 2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v20);
  *(void *)&long long v21 = &mlir::detail::TypeIDResolver<mlir::mps::ReductionModeAttr,void>::id;
  *((void *)&v21 + 1) = v14;
  uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::ReductionModeAttrStorage,mlir::mps::ReductionMode>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail24ReductionModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_17ReductionModeAttrEJNS2_13ReductionModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v21, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::ReductionModeAttr,void>::id, (unsigned int *)v23);
  a2[6] = result;
  if (a2[4])
  {
LABEL_6:
    if (a2[5]) {
      return result;
    }
LABEL_19:
    unint64_t v18 = v20;
    LODWORD(v23[0]) = 2;
    unint64_t v19 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v20);
    *(void *)&long long v21 = &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id;
    *((void *)&v21 + 1) = v18;
    uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::PaddingStyleAttrStorage,mlir::mps::PaddingStyle>(v19, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail23PaddingStyleAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_16PaddingStyleAttrEJNS2_12PaddingStyleEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v21, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id, (unsigned int *)v23);
    a2[5] = result;
    return result;
  }
LABEL_18:
  uint64_t v16 = v20;
  LODWORD(v23[0]) = 4;
  long long v17 = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v20);
  *(void *)&long long v21 = &mlir::detail::TypeIDResolver<mlir::mps::StencilPaddingModeAttr,void>::id;
  *((void *)&v21 + 1) = v16;
  uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::StencilPaddingModeAttrStorage,mlir::mps::StencilPaddingMode>(v17, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail29StencilPaddingModeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_22StencilPaddingModeAttrEJNS2_18StencilPaddingModeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v21, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::StencilPaddingModeAttr,void>::id, (unsigned int *)v23);
  a2[4] = result;
  if (!a2[5]) {
    goto LABEL_19;
  }
  return result;
}

BOOL mlir::mps::StencilOp::verifyInvariantsImpl(uint64_t **this)
{
  unint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  int v5 = *(const void ***)v3;
  uint64_t v4 = *(const void ***)(v3 + 8);
  unint64_t v6 = *(const void ***)(v3 + 16);
  unint64_t v7 = *(const void ***)(v3 + 24);
  uint64_t v9 = *(void *)(v3 + 32);
  uint64_t v8 = *(void *)(v3 + 40);
  uint64_t v10 = *(void *)(v3 + 48);
  unint64_t v11 = *(const void ***)(v3 + 56);
  uint64_t v15 = v2;
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps41(v6, (const void **)"offsets", (const char *)7, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps41(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v15))return 0; {
  uint64_t v15 = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v11, (const void **)"strides", (const char *)7, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v15))return 0; {
  uint64_t v15 = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(v5, (const void **)"dilation_rates", (const char *)0xE, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v15))return 0; {
  uint64_t v15 = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(v4, (const void **)"explicit_padding", (const char *)0x10, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v15))return 0; {
  uint64_t v15 = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(v7, (const void **)"paddingConstant", (const char *)0xF, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v15))return 0; {
  uint64_t v15 = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps42(v10, (const void **)"reductionMode", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps42(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v15))return 0; {
  uint64_t v15 = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps43(v9, (const void **)"paddingMode", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps43(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v15))return 0; {
  uint64_t v15 = *this;
  }
  if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(v8, (const void **)"padding_style", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v15)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v12 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mps::StencilOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.stencil", 11, v2, v3, 0, 0);
  void *v4 = &unk_1EC983D50;
  v4[12] = mlir::mps::StencilOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::StridedSliceGradientOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v109 = v6;
  if (!v6)
  {
    a3(v113, a4);
    if (v113[0])
    {
      LODWORD(v110) = 3;
      char v111 = "expected DictionaryAttr to set properties";
      uint64_t v112 = 41;
      uint64_t v26 = &v110;
      int64_t v27 = (char *)v114;
      if (v115 >= v116)
      {
        unint64_t v91 = v115 + 1;
        if (v114 <= &v110 && (char *)v114 + 24 * v115 > (char *)&v110)
        {
          int64_t v100 = (char *)&v110 - (unsigned char *)v114;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v91, 24);
          int64_t v27 = (char *)v114;
          uint64_t v26 = (uint64_t *)((char *)v114 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v91, 24);
          uint64_t v26 = &v110;
          int64_t v27 = (char *)v114;
        }
      }
      int64_t v28 = &v27[24 * v115];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)int64_t v28 = v29;
      ++v115;
      if (v113[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v113);
      }
    }
    if (!v122) {
      return 0;
    }
    int v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v121;
      unint64_t v32 = __p;
      if (v121 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      uint64_t v121 = v30;
      operator delete(v32);
    }
    long long v21 = v118;
    if (!v118) {
      goto LABEL_116;
    }
    unint64_t v33 = v119;
    uint64_t v23 = v118;
    if (v119 == v118)
    {
LABEL_115:
      unint64_t v119 = v21;
      operator delete(v23);
LABEL_116:
      if (v114 != v117) {
        free(v114);
      }
      return 0;
    }
    do
    {
      int v35 = (void *)*--v33;
      unint64_t v34 = v35;
      *unint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_114:
    uint64_t v23 = v118;
    goto LABEL_115;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v109, "begin_mask", 0xAuLL);
  if (!v8)
  {
    a3(v113, a4);
    if (v113[0])
    {
      LODWORD(v110) = 3;
      char v111 = "expected key entry for begin_mask in DictionaryAttr to set Properties.";
      uint64_t v112 = 70;
      int64_t v36 = &v110;
      uint64_t v37 = (char *)v114;
      if (v115 >= v116)
      {
        unint64_t v93 = v115 + 1;
        if (v114 <= &v110 && (char *)v114 + 24 * v115 > (char *)&v110)
        {
          int64_t v102 = (char *)&v110 - (unsigned char *)v114;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v93, 24);
          uint64_t v37 = (char *)v114;
          int64_t v36 = (uint64_t *)((char *)v114 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v93, 24);
          int64_t v36 = &v110;
          uint64_t v37 = (char *)v114;
        }
      }
      uint64_t v38 = &v37[24 * v115];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = v36[2];
      *(_OWORD *)uint64_t v38 = v39;
      ++v115;
      if (v113[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v113);
      }
    }
    if (!v122) {
      return 0;
    }
    uint64_t v40 = (void **)__p;
    if (__p)
    {
      uint64_t v41 = v121;
      unsigned int v42 = __p;
      if (v121 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        unsigned int v42 = __p;
      }
      uint64_t v121 = v40;
      operator delete(v42);
    }
    long long v21 = v118;
    if (!v118) {
      goto LABEL_116;
    }
    __int16 v43 = v119;
    uint64_t v23 = v118;
    if (v119 == v118) {
      goto LABEL_115;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      uint64_t v44 = v45;
      *__int16 v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_114;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a3(v113, a4);
    if (v113[0])
    {
      LODWORD(v110) = 3;
      uint64_t v112 = 55;
      uint64_t v10 = &v110;
      unint64_t v11 = (char *)v114;
      if (v115 >= v116)
      {
        unint64_t v92 = v115 + 1;
        if (v114 <= &v110 && (char *)v114 + 24 * v115 > (char *)&v110)
        {
          int64_t v101 = (char *)&v110 - (unsigned char *)v114;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v92, 24);
          unint64_t v11 = (char *)v114;
          uint64_t v10 = (uint64_t *)((char *)v114 + v101);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v92, 24);
          uint64_t v10 = &v110;
          unint64_t v11 = (char *)v114;
        }
      }
      uint64_t v12 = &v11[24 * v115];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = v10[2];
      *(_OWORD *)uint64_t v12 = v13;
      ++v115;
      if (v113[0])
      {
        unint64_t v14 = &v110;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v110, v9);
        uint64_t v15 = (char *)v114;
        if (v115 >= v116)
        {
          unint64_t v94 = v115 + 1;
          if (v114 <= &v110 && (char *)v114 + 24 * v115 > (char *)&v110)
          {
            int64_t v103 = (char *)&v110 - (unsigned char *)v114;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v94, 24);
            uint64_t v15 = (char *)v114;
            unint64_t v14 = (uint64_t *)((char *)v114 + v103);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v94, 24);
            unint64_t v14 = &v110;
            uint64_t v15 = (char *)v114;
          }
        }
        uint64_t v16 = &v15[24 * v115];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = v14[2];
        *(_OWORD *)uint64_t v16 = v17;
        ++v115;
        if (v113[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v113);
        }
      }
    }
    if (!v122) {
      return 0;
    }
    unint64_t v18 = (void **)__p;
    if (__p)
    {
      unint64_t v19 = v121;
      long long v20 = __p;
      if (v121 != __p)
      {
        do
          unint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        long long v20 = __p;
      }
      uint64_t v121 = v18;
      operator delete(v20);
    }
    long long v21 = v118;
    if (!v118) {
      goto LABEL_116;
    }
    long long v22 = v119;
    uint64_t v23 = v118;
    if (v119 == v118) {
      goto LABEL_115;
    }
    do
    {
      unint64_t v25 = (void *)*--v22;
      long long v24 = v25;
      *long long v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
    goto LABEL_114;
  }
  *a1 = v8;
  uint64_t v46 = mlir::DictionaryAttr::get((uint64_t)&v109, "end_is_size", 0xBuLL);
  if (v46)
  {
    uint64_t v47 = v46;
    if (*(_UNKNOWN **)(*(void *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v113, a4);
      if (v113[0])
      {
        LODWORD(v110) = 3;
        uint64_t v112 = 56;
        unsigned int v48 = &v110;
        unsigned int v49 = (char *)v114;
        if (v115 >= v116)
        {
          unint64_t v95 = v115 + 1;
          if (v114 <= &v110 && (char *)v114 + 24 * v115 > (char *)&v110)
          {
            int64_t v104 = (char *)&v110 - (unsigned char *)v114;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v95, 24);
            unsigned int v49 = (char *)v114;
            unsigned int v48 = (uint64_t *)((char *)v114 + v104);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v95, 24);
            unsigned int v48 = &v110;
            unsigned int v49 = (char *)v114;
          }
        }
        int v50 = &v49[24 * v115];
        long long v51 = *(_OWORD *)v48;
        *((void *)v50 + 2) = v48[2];
        *(_OWORD *)int v50 = v51;
        ++v115;
        if (v113[0])
        {
          int v52 = &v110;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v110, v47);
          unint64_t v53 = (char *)v114;
          if (v115 >= v116)
          {
            unint64_t v96 = v115 + 1;
            if (v114 <= &v110 && (char *)v114 + 24 * v115 > (char *)&v110)
            {
              int64_t v105 = (char *)&v110 - (unsigned char *)v114;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v96, 24);
              unint64_t v53 = (char *)v114;
              int v52 = (uint64_t *)((char *)v114 + v105);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v96, 24);
              int v52 = &v110;
              unint64_t v53 = (char *)v114;
            }
          }
          char v54 = &v53[24 * v115];
          long long v55 = *(_OWORD *)v52;
          *((void *)v54 + 2) = v52[2];
          *(_OWORD *)char v54 = v55;
          ++v115;
          if (v113[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v113);
          }
        }
      }
      if (!v122) {
        return 0;
      }
      uint64_t v56 = (void **)__p;
      if (__p)
      {
        uint64_t v57 = v121;
        unint64_t v58 = __p;
        if (v121 != __p)
        {
          do
            uint64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
          while (v57 != v56);
          unint64_t v58 = __p;
        }
        uint64_t v121 = v56;
        operator delete(v58);
      }
      long long v21 = v118;
      if (!v118) {
        goto LABEL_116;
      }
      uint64_t v59 = v119;
      uint64_t v23 = v118;
      if (v119 == v118) {
        goto LABEL_115;
      }
      do
      {
        uint64_t v61 = (void *)*--v59;
        uint64_t v60 = v61;
        *uint64_t v59 = 0;
        if (v61) {
          operator delete[](v60);
        }
      }
      while (v59 != v21);
      goto LABEL_114;
    }
    a1[1] = v46;
  }
  uint64_t v62 = mlir::DictionaryAttr::get((uint64_t)&v109, "end_mask", 8uLL);
  if (!v62)
  {
    a3(v113, a4);
    if (v113[0])
    {
      LODWORD(v110) = 3;
      char v111 = "expected key entry for end_mask in DictionaryAttr to set Properties.";
      uint64_t v112 = 68;
      uint64_t v78 = &v110;
      uint64_t v79 = (char *)v114;
      if (v115 >= v116)
      {
        unint64_t v98 = v115 + 1;
        if (v114 <= &v110 && (char *)v114 + 24 * v115 > (char *)&v110)
        {
          int64_t v107 = (char *)&v110 - (unsigned char *)v114;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v98, 24);
          uint64_t v79 = (char *)v114;
          uint64_t v78 = (uint64_t *)((char *)v114 + v107);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v98, 24);
          uint64_t v78 = &v110;
          uint64_t v79 = (char *)v114;
        }
      }
      uint64_t v80 = &v79[24 * v115];
      long long v81 = *(_OWORD *)v78;
      *((void *)v80 + 2) = v78[2];
      *(_OWORD *)uint64_t v80 = v81;
      ++v115;
      if (v113[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v113);
      }
    }
    if (!v122) {
      return 0;
    }
    unint64_t v82 = (void **)__p;
    if (__p)
    {
      unint64_t v83 = v121;
      unint64_t v84 = __p;
      if (v121 != __p)
      {
        do
          unint64_t v83 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v83 - 1);
        while (v83 != v82);
        unint64_t v84 = __p;
      }
      uint64_t v121 = v82;
      operator delete(v84);
    }
    long long v21 = v118;
    if (!v118) {
      goto LABEL_116;
    }
    unint64_t v85 = v119;
    uint64_t v23 = v118;
    if (v119 == v118) {
      goto LABEL_115;
    }
    do
    {
      unint64_t v87 = (void *)*--v85;
      unint64_t v86 = v87;
      *unint64_t v85 = 0;
      if (v87) {
        operator delete[](v86);
      }
    }
    while (v85 != v21);
    goto LABEL_114;
  }
  uint64_t v63 = v62;
  if (*(_UNKNOWN **)(*(void *)v62 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a3(v113, a4);
    if (v113[0])
    {
      LODWORD(v110) = 3;
      uint64_t v112 = 53;
      uint64_t v64 = &v110;
      uint64_t v65 = (char *)v114;
      if (v115 >= v116)
      {
        unint64_t v97 = v115 + 1;
        if (v114 <= &v110 && (char *)v114 + 24 * v115 > (char *)&v110)
        {
          int64_t v106 = (char *)&v110 - (unsigned char *)v114;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v97, 24);
          uint64_t v65 = (char *)v114;
          uint64_t v64 = (uint64_t *)((char *)v114 + v106);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v97, 24);
          uint64_t v64 = &v110;
          uint64_t v65 = (char *)v114;
        }
      }
      unint64_t v66 = &v65[24 * v115];
      long long v67 = *(_OWORD *)v64;
      *((void *)v66 + 2) = v64[2];
      *(_OWORD *)unint64_t v66 = v67;
      ++v115;
      if (v113[0])
      {
        int64_t v68 = &v110;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v110, v63);
        int64_t v69 = (char *)v114;
        if (v115 >= v116)
        {
          unint64_t v99 = v115 + 1;
          if (v114 <= &v110 && (char *)v114 + 24 * v115 > (char *)&v110)
          {
            int64_t v108 = (char *)&v110 - (unsigned char *)v114;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v99, 24);
            int64_t v69 = (char *)v114;
            int64_t v68 = (uint64_t *)((char *)v114 + v108);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v99, 24);
            int64_t v68 = &v110;
            int64_t v69 = (char *)v114;
          }
        }
        int64_t v70 = &v69[24 * v115];
        long long v71 = *(_OWORD *)v68;
        *((void *)v70 + 2) = v68[2];
        *(_OWORD *)int64_t v70 = v71;
        ++v115;
        if (v113[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v113);
        }
      }
    }
    if (!v122) {
      return 0;
    }
    int64_t v72 = (void **)__p;
    if (__p)
    {
      unint64_t v73 = v121;
      uint64_t v74 = __p;
      if (v121 != __p)
      {
        do
          unint64_t v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
        while (v73 != v72);
        uint64_t v74 = __p;
      }
      uint64_t v121 = v72;
      operator delete(v74);
    }
    long long v21 = v118;
    if (!v118) {
      goto LABEL_116;
    }
    uint64_t v75 = v119;
    uint64_t v23 = v118;
    if (v119 == v118) {
      goto LABEL_115;
    }
    do
    {
      uint64_t v77 = (void *)*--v75;
      uint64_t v76 = v77;
      *uint64_t v75 = 0;
      if (v77) {
        operator delete[](v76);
      }
    }
    while (v75 != v21);
    goto LABEL_114;
  }
  a1[2] = v62;
  uint64_t v89 = mlir::DictionaryAttr::get((uint64_t)&v109, "shrink_axis_mask", 0x10uLL);
  uint64_t v110 = v89;
  if (v89)
  {
    if (*(_UNKNOWN **)(*(void *)v89 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      a1[3] = v89;
      return 1;
    }
    a3(v113, a4);
    mlir::InFlightDiagnostic::append<mlir::Attribute>(v90, &v110);
  }
  else
  {
    a3(v113, a4);
    mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v113, "expected key entry for shrink_axis_mask in DictionaryAttr to set Properties.");
  }
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v113);
  return 0;
}

uint64_t mlir::mps::StridedSliceGradientOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  unsigned int v33[6] = *MEMORY[0x1E4F143B8];
  int v30 = a1;
  uint64_t v31 = v33;
  uint64_t v32 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v30, (uint64_t)"begin_mask", 10, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v32;
  if (v32 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
    unsigned int v6 = v32;
  }
  unint64_t v7 = (uint64_t *)((char *)v31 + 16 * v6);
  *unint64_t v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v32 + 1;
  LODWORD(v32) = v32 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"end_is_size", 11, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v13 = v32;
    }
    unint64_t v14 = (uint64_t *)((char *)v31 + 16 * v13);
    *unint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"end_mask", 8, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v19 = v32;
    }
    long long v20 = (uint64_t *)((char *)v31 + 16 * v19);
    uint64_t *v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"shrink_axis_mask", 16, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v25 = v32;
    }
    uint64_t v26 = (uint64_t *)((char *)v31 + 16 * v25);
    uint64_t *v26 = v22;
    v26[1] = v24;
    unsigned int v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  int64_t v27 = v31;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v31 == v33) {
      return DictionaryAttr;
    }
    goto LABEL_20;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v30, (uint64_t *)v31, v8);
  int64_t v27 = v31;
  if (v31 != v33) {
LABEL_20:
  }
    free(v27);
  return DictionaryAttr;
}

uint64_t mlir::mps::StridedSliceGradientOp::getInherentAttr(int a1, void *a2, void *__s1, size_t __n)
{
  switch(__n)
  {
    case 8uLL:
      if (memcmp(__s1, "end_mask", __n)) {
        return 0;
      }
      return a2[2];
    case 9uLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
      return 0;
    case 0xAuLL:
      if (*__s1 != 0x616D5F6E69676562 || *((_WORD *)__s1 + 4) != 27507) {
        return 0;
      }
      return *a2;
    case 0xBuLL:
      if (memcmp(__s1, "end_is_size", __n)) {
        return 0;
      }
      return a2[1];
    case 0x10uLL:
      if (memcmp(__s1, "shrink_axis_mask", __n)) {
        return 0;
      }
      return a2[3];
    default:
      return 0;
  }
}

uint64_t mlir::mps::StridedSliceGradientOp::setInherentAttr(uint64_t result, void *__s1, size_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  switch(a3)
  {
    case 8uLL:
      uint64_t result = memcmp(__s1, "end_mask", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          v5[2] = v10;
        }
        else
        {
          v5[2] = 0;
        }
      }
      break;
    case 0xAuLL:
      if (*__s1 == 0x616D5F6E69676562 && *((_WORD *)__s1 + 4) == 27507)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            uint64_t v7 = a4;
          }
          else {
            uint64_t v7 = 0;
          }
          *(void *)uint64_t result = v7;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xBuLL:
      uint64_t result = memcmp(__s1, "end_is_size", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          v5[1] = v8;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0x10uLL:
      uint64_t result = memcmp(__s1, "shrink_axis_mask", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            uint64_t v9 = a4;
          }
          else {
            uint64_t v9 = 0;
          }
          v5[3] = v9;
        }
        else
        {
          v5[3] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::mps::StridedSliceGradientOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = (const void **)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v8, (const void **)"begin_mask", (const char *)0xA, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v9, (const void **)"end_is_size", (const char *)0xB, a3, a4))
    {
      uint64_t v10 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v10, (const void **)"end_mask", (const char *)8, a3, a4))
      {
        uint64_t v11 = (const void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
        if (!v11
          || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v11, (const void **)"shrink_axis_mask", (const char *)0x10, a3, a4))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x20uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 121;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[181];
    return a1[32];
  }
  return result;
}

void mlir::mps::StridedSliceGradientOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, char a11)
{
  unint64_t v42[2] = *MEMORY[0x1E4F143B8];
  uint64_t v36 = a4;
  uint64_t v37 = a3;
  uint64_t v34 = a6;
  uint64_t v35 = a5;
  uint64_t v33 = a7;
  mlir::OperationState::addOperands(a2, (uint64_t)&v37, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v36, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v35, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v34, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v33, 1);
  uint64_t IntegerType = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a8);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties>((void *)a2) = IntegerAttr;
  uint64_t v16 = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  uint64_t v17 = mlir::Builder::getIntegerAttr((uint64_t)a1, v16, a9);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = v17;
  uint64_t v18 = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  uint64_t v19 = mlir::Builder::getIntegerAttr((uint64_t)a1, v18, a10);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties>((void *)a2)
            + 24) = v19;
  if (a11)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v20);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties>((void *)a2)
              + 8) = UnitAttr;
  }
  uint64_t v40 = v42;
  uint64_t v41 = 0x200000000;
  uint64_t v22 = *(void *)a2;
  mlir::ValueRange::ValueRange(v39, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v24 = mlir::ValueRange::ValueRange(&v38, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::StridedSliceGradientOp::inferReturnTypes((uint64_t)v24, v22, 1, v39[0], v39[1], v25, v26, v27, v31, v32, (uint64_t)&v40))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  int64_t v28 = v40;
  }
  uint64_t v29 = v41;
  uint64_t v30 = *(unsigned int *)(a2 + 72);
  if (v30 + (unint64_t)v41 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v30 + v41, 8);
    LODWORD(v30) = *(_DWORD *)(a2 + 72);
  }
  if (v29)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v30), v28, 8 * v29);
    LODWORD(v30) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v30 + v29;
  if (v40 != v42) {
    free(v40);
  }
}

BOOL mlir::mps::StridedSliceGradientOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(const void ***)v3;
  if (*(void *)v3)
  {
    int v5 = *(const void ***)(v3 + 16);
    if (v5)
    {
      unint64_t v6 = *(const void ***)(v3 + 24);
      if (v6)
      {
        uint64_t v7 = *(void *)(v3 + 8);
        v34[0] = v2;
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v4, (const void **)"begin_mask", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v34))return 0; {
        v34[0] = *this;
        }
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v5, (const void **)"end_mask", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v34))return 0; {
        v34[0] = *this;
        }
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v6, (const void **)"shrink_axis_mask", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v34))return 0; {
        v34[0] = *this;
        }
        if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v7, (const void **)"end_is_size", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v34)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this,
                                 (const void **)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8),
                                 (const void **)"operand",
                                 7,
                                 2u)
          || !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 3u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 152) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 4u))
        {
          return 0;
        }
        if (*((_DWORD *)*this + 9)) {
          uint64_t v8 = (uint64_t)(*this - 2);
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
        return mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
      }
      v32[0] = (const void **)"requires attribute 'shrink_axis_mask'";
      __int16 v33 = 259;
      mlir::OpState::emitOpError(this, v32, (uint64_t)v34);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
      if (v34[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v34);
      }
      if (v41)
      {
        uint64_t v25 = (void **)__p;
        if (__p)
        {
          uint64_t v26 = v40;
          uint64_t v27 = __p;
          if (v40 != __p)
          {
            do
              uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
            while (v26 != v25);
            uint64_t v27 = __p;
          }
          uint64_t v40 = v25;
          operator delete(v27);
        }
        unint64_t v14 = v37;
        if (!v37) {
          goto LABEL_65;
        }
        int64_t v28 = v38;
        uint64_t v16 = v37;
        if (v38 == v37)
        {
LABEL_64:
          unint64_t v38 = v14;
          operator delete(v16);
LABEL_65:
          if (v35 != &v36) {
            free(v35);
          }
          return v10;
        }
        do
        {
          uint64_t v30 = (void *)*--v28;
          uint64_t v29 = v30;
          void *v28 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v28 != v14);
LABEL_63:
        uint64_t v16 = v37;
        goto LABEL_64;
      }
    }
    else
    {
      v32[0] = (const void **)"requires attribute 'end_mask'";
      __int16 v33 = 259;
      mlir::OpState::emitOpError(this, v32, (uint64_t)v34);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
      if (v34[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v34);
      }
      if (v41)
      {
        uint64_t v19 = (void **)__p;
        if (__p)
        {
          long long v20 = v40;
          uint64_t v21 = __p;
          if (v40 != __p)
          {
            do
              long long v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
            while (v20 != v19);
            uint64_t v21 = __p;
          }
          uint64_t v40 = v19;
          operator delete(v21);
        }
        unint64_t v14 = v37;
        if (!v37) {
          goto LABEL_65;
        }
        uint64_t v22 = v38;
        uint64_t v16 = v37;
        if (v38 == v37) {
          goto LABEL_64;
        }
        do
        {
          uint64_t v24 = (void *)*--v22;
          uint64_t v23 = v24;
          *uint64_t v22 = 0;
          if (v24) {
            operator delete[](v23);
          }
        }
        while (v22 != v14);
        goto LABEL_63;
      }
    }
  }
  else
  {
    v32[0] = (const void **)"requires attribute 'begin_mask'";
    __int16 v33 = 259;
    mlir::OpState::emitOpError(this, v32, (uint64_t)v34);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
    if (v34[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v34);
    }
    if (v41)
    {
      unint64_t v11 = (void **)__p;
      if (__p)
      {
        uint64_t v12 = v40;
        unsigned int v13 = __p;
        if (v40 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          unsigned int v13 = __p;
        }
        uint64_t v40 = v11;
        operator delete(v13);
      }
      unint64_t v14 = v37;
      if (!v37) {
        goto LABEL_65;
      }
      uint64_t v15 = v38;
      uint64_t v16 = v37;
      if (v38 == v37) {
        goto LABEL_64;
      }
      do
      {
        uint64_t v18 = (void *)*--v15;
        uint64_t v17 = v18;
        void *v15 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v15 != v14);
      goto LABEL_63;
    }
  }
  return v10;
}

uint64_t mlir::mps::StridedSliceGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.strided_slice_gradient", 26, v2, v3, 0, 0);
  void *v4 = &unk_1EC981BF8;
  v4[12] = mlir::mps::StridedSliceGradientOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::StridedSliceOpGenericAdaptorBase::StridedSliceOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    int v5 = (long long *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  }
  else {
    int v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v11, v7, v6);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *v5;
  *(_OWORD *)(a1 + 40) = v5[1];
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v11;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.strided_slice", 17, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::StridedSliceOp::getInherentAttr(int a1, void *a2, void *__s1, size_t __n)
{
  switch(__n)
  {
    case 8uLL:
      if (memcmp(__s1, "end_mask", __n)) {
        return 0;
      }
      return a2[2];
    case 9uLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
      return 0;
    case 0xAuLL:
      if (*__s1 != 0x616D5F6E69676562 || *((_WORD *)__s1 + 4) != 27507) {
        return 0;
      }
      return *a2;
    case 0xBuLL:
      if (memcmp(__s1, "end_is_size", __n)) {
        return 0;
      }
      return a2[1];
    case 0x10uLL:
      if (memcmp(__s1, "shrink_axis_mask", __n)) {
        return 0;
      }
      return a2[3];
    default:
      return 0;
  }
}

uint64_t mlir::mps::StridedSliceOp::setInherentAttr(uint64_t result, void *__s1, size_t a3, uint64_t a4)
{
  int v5 = (void *)result;
  switch(a3)
  {
    case 8uLL:
      uint64_t result = memcmp(__s1, "end_mask", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          v5[2] = v10;
        }
        else
        {
          v5[2] = 0;
        }
      }
      break;
    case 0xAuLL:
      if (*__s1 == 0x616D5F6E69676562 && *((_WORD *)__s1 + 4) == 27507)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            uint64_t v7 = a4;
          }
          else {
            uint64_t v7 = 0;
          }
          *(void *)uint64_t result = v7;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xBuLL:
      uint64_t result = memcmp(__s1, "end_is_size", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          v5[1] = v8;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0x10uLL:
      uint64_t result = memcmp(__s1, "shrink_axis_mask", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            uint64_t v9 = a4;
          }
          else {
            uint64_t v9 = 0;
          }
          v5[3] = v9;
        }
        else
        {
          v5[3] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x20uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 113;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[183];
    return a1[32];
  }
  return result;
}

void mlir::mps::StridedSliceOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8, unsigned int a9, char a10)
{
  unint64_t v40[2] = *MEMORY[0x1E4F143B8];
  uint64_t v34 = a4;
  uint64_t v35 = a3;
  uint64_t v32 = a6;
  uint64_t v33 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v35, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v34, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v33, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v32, 1);
  uint64_t IntegerType = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a7);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties>((void *)a2) = IntegerAttr;
  uint64_t v16 = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  uint64_t v17 = mlir::Builder::getIntegerAttr((uint64_t)a1, v16, a8);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = v17;
  uint64_t v18 = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  uint64_t v19 = mlir::Builder::getIntegerAttr((uint64_t)a1, v18, a9);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties>((void *)a2)
            + 24) = v19;
  if (a10)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v20);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties>((void *)a2)
              + 8) = UnitAttr;
  }
  __src = v40;
  uint64_t v39 = 0x200000000;
  uint64_t v22 = *(mlir::UnknownLoc **)a1;
  uint64_t v23 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v37, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v26 = *(long long **)(a2 + 256);
  mlir::ValueRange::ValueRange(v36, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::StridedSliceOp::inferReturnTypes(v22, v23, 1, v37[0], v37[1], Dictionary, v26, v27, v36[0], v36[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  int64_t v28 = __src;
  }
  uint64_t v29 = v39;
  uint64_t v30 = *(unsigned int *)(a2 + 72);
  unint64_t v31 = v30 + v39;
  if (v31 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v31, 8);
    LODWORD(v30) = *(_DWORD *)(a2 + 72);
  }
  if (v29)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v30), v28, 8 * v29);
    LODWORD(v30) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v30 + v29;
  if (__src != v40) {
    free(__src);
  }
}

BOOL mlir::mps::StridedSliceOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *(const void ***)v3;
  if (*(void *)v3)
  {
    int v5 = *(const void ***)(v3 + 16);
    if (v5)
    {
      unint64_t v6 = *(const void ***)(v3 + 24);
      if (v6)
      {
        uint64_t v7 = *(void *)(v3 + 8);
        v34[0] = v2;
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v4, (const void **)"begin_mask", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v34))return 0; {
        v34[0] = *this;
        }
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v5, (const void **)"end_mask", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v34))return 0; {
        v34[0] = *this;
        }
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v6, (const void **)"shrink_axis_mask", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v34))return 0; {
        v34[0] = *this;
        }
        if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v7, (const void **)"end_is_size", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v34)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this,
                                 (const void **)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8),
                                 (const void **)"operand",
                                 7,
                                 2u)
          || !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 3u))
        {
          return 0;
        }
        if (*((_DWORD *)*this + 9)) {
          uint64_t v8 = (uint64_t)(*this - 2);
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
        return mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
      }
      v32[0] = (const void **)"requires attribute 'shrink_axis_mask'";
      __int16 v33 = 259;
      mlir::OpState::emitOpError(this, v32, (uint64_t)v34);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
      if (v34[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v34);
      }
      if (v41)
      {
        uint64_t v25 = (void **)__p;
        if (__p)
        {
          uint64_t v26 = v40;
          int v27 = __p;
          if (v40 != __p)
          {
            do
              uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
            while (v26 != v25);
            int v27 = __p;
          }
          uint64_t v40 = v25;
          operator delete(v27);
        }
        unint64_t v14 = v37;
        if (!v37) {
          goto LABEL_64;
        }
        int64_t v28 = v38;
        uint64_t v16 = v37;
        if (v38 == v37)
        {
LABEL_63:
          unint64_t v38 = v14;
          operator delete(v16);
LABEL_64:
          if (v35 != &v36) {
            free(v35);
          }
          return v10;
        }
        do
        {
          uint64_t v30 = (void *)*--v28;
          uint64_t v29 = v30;
          void *v28 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v28 != v14);
LABEL_62:
        uint64_t v16 = v37;
        goto LABEL_63;
      }
    }
    else
    {
      v32[0] = (const void **)"requires attribute 'end_mask'";
      __int16 v33 = 259;
      mlir::OpState::emitOpError(this, v32, (uint64_t)v34);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
      if (v34[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v34);
      }
      if (v41)
      {
        uint64_t v19 = (void **)__p;
        if (__p)
        {
          long long v20 = v40;
          uint64_t v21 = __p;
          if (v40 != __p)
          {
            do
              long long v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
            while (v20 != v19);
            uint64_t v21 = __p;
          }
          uint64_t v40 = v19;
          operator delete(v21);
        }
        unint64_t v14 = v37;
        if (!v37) {
          goto LABEL_64;
        }
        uint64_t v22 = v38;
        uint64_t v16 = v37;
        if (v38 == v37) {
          goto LABEL_63;
        }
        do
        {
          uint64_t v24 = (void *)*--v22;
          uint64_t v23 = v24;
          *uint64_t v22 = 0;
          if (v24) {
            operator delete[](v23);
          }
        }
        while (v22 != v14);
        goto LABEL_62;
      }
    }
  }
  else
  {
    v32[0] = (const void **)"requires attribute 'begin_mask'";
    __int16 v33 = 259;
    mlir::OpState::emitOpError(this, v32, (uint64_t)v34);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
    if (v34[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v34);
    }
    if (v41)
    {
      unint64_t v11 = (void **)__p;
      if (__p)
      {
        uint64_t v12 = v40;
        unsigned int v13 = __p;
        if (v40 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          unsigned int v13 = __p;
        }
        uint64_t v40 = v11;
        operator delete(v13);
      }
      unint64_t v14 = v37;
      if (!v37) {
        goto LABEL_64;
      }
      uint64_t v15 = v38;
      uint64_t v16 = v37;
      if (v38 == v37) {
        goto LABEL_63;
      }
      do
      {
        uint64_t v18 = (void *)*--v15;
        uint64_t v17 = v18;
        void *v15 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v15 != v14);
      goto LABEL_62;
    }
  }
  return v10;
}

uint64_t mlir::mps::StridedSliceOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.strided_slice", 17, v2, v3, 0, 0);
  void *v4 = &unk_1EC9D0868;
  v4[12] = mlir::mps::StridedSliceOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::StridedSliceUpdateOp::getInherentAttr(int a1, void *a2, void *__s1, size_t __n)
{
  switch(__n)
  {
    case 8uLL:
      if (memcmp(__s1, "end_mask", __n)) {
        return 0;
      }
      return a2[2];
    case 9uLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
      return 0;
    case 0xAuLL:
      if (*__s1 != 0x616D5F6E69676562 || *((_WORD *)__s1 + 4) != 27507) {
        return 0;
      }
      return *a2;
    case 0xBuLL:
      if (memcmp(__s1, "end_is_size", __n)) {
        return 0;
      }
      return a2[1];
    case 0x10uLL:
      if (memcmp(__s1, "shrink_axis_mask", __n)) {
        return 0;
      }
      return a2[3];
    default:
      return 0;
  }
}

uint64_t mlir::mps::StridedSliceUpdateOp::setInherentAttr(uint64_t result, void *__s1, size_t a3, uint64_t a4)
{
  int v5 = (void *)result;
  switch(a3)
  {
    case 8uLL:
      uint64_t result = memcmp(__s1, "end_mask", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          v5[2] = v10;
        }
        else
        {
          v5[2] = 0;
        }
      }
      break;
    case 0xAuLL:
      if (*__s1 == 0x616D5F6E69676562 && *((_WORD *)__s1 + 4) == 27507)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            uint64_t v7 = a4;
          }
          else {
            uint64_t v7 = 0;
          }
          *(void *)uint64_t result = v7;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xBuLL:
      uint64_t result = memcmp(__s1, "end_is_size", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          v5[1] = v8;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0x10uLL:
      uint64_t result = memcmp(__s1, "shrink_axis_mask", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            uint64_t v9 = a4;
          }
          else {
            uint64_t v9 = 0;
          }
          v5[3] = v9;
        }
        else
        {
          v5[3] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x20uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 119;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[185];
    return a1[32];
  }
  return result;
}

void mlir::mps::StridedSliceUpdateOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, char a11)
{
  unint64_t v41[2] = *MEMORY[0x1E4F143B8];
  uint64_t v33 = a4;
  uint64_t v34 = a3;
  uint64_t v31 = a6;
  uint64_t v32 = a5;
  uint64_t v30 = a7;
  mlir::OperationState::addOperands(a2, (uint64_t)&v34, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v33, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v32, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v31, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v30, 1);
  uint64_t IntegerType = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a8);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties>((void *)a2) = IntegerAttr;
  uint64_t v16 = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  uint64_t v17 = mlir::Builder::getIntegerAttr((uint64_t)a1, v16, a9);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties>((void *)a2)
            + 16) = v17;
  uint64_t v18 = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  uint64_t v19 = mlir::Builder::getIntegerAttr((uint64_t)a1, v18, a10);
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties>((void *)a2)
            + 24) = v19;
  if (a11)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)a1, v20);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties>((void *)a2)
              + 8) = UnitAttr;
  }
  __src = v40;
  uint64_t v39 = 0x200000000;
  uint64_t v22 = *(void *)a2;
  mlir::ValueRange::ValueRange(&v36, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v35, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v41[0] = v36;
  v41[1] = v37;
  if (v37)
  {
    unint64_t v24 = *(void *)(mlir::ValueRange::dereference_iterator(v41, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v25 = v39;
    if (v39 >= HIDWORD(v39))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v40, v39 + 1, 8);
      unsigned int v25 = v39;
    }
    *((void *)__src + v25) = v24;
    unsigned int v26 = v39 + 1;
    LODWORD(v39) = v26;
    int v27 = __src;
    uint64_t v28 = *(unsigned int *)(a2 + 72);
    unint64_t v29 = v28 + v26;
    if (v29 > *(unsigned int *)(a2 + 76))
    {
LABEL_7:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v29, 8);
      LODWORD(v28) = *(_DWORD *)(a2 + 72);
    }
  }
  else
  {
    if (!mlir::emitOptionalError<char const(&)[39]>(v22, 1, "invalid number of operands")) {
      llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
    }
    unsigned int v26 = v39;
    int v27 = __src;
    uint64_t v28 = *(unsigned int *)(a2 + 72);
    unint64_t v29 = v28 + v39;
    if (v29 > *(unsigned int *)(a2 + 76)) {
      goto LABEL_7;
    }
  }
  if (v26)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v28), v27, 8 * v26);
    LODWORD(v28) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v28 + v26;
  if (__src != v40) {
    free(__src);
  }
}

BOOL mlir::mps::StridedSliceUpdateOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *(const void ***)v3;
  if (*(void *)v3)
  {
    int v5 = *(const void ***)(v3 + 16);
    if (v5)
    {
      unint64_t v6 = *(const void ***)(v3 + 24);
      if (v6)
      {
        uint64_t v7 = *(void *)(v3 + 8);
        v34[0] = v2;
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v4, (const void **)"begin_mask", (const char *)0xA, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v34))return 0; {
        v34[0] = *this;
        }
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v5, (const void **)"end_mask", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v34))return 0; {
        v34[0] = *this;
        }
        if (!mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(v6, (const void **)"shrink_axis_mask", (const char *)0x10, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v34))return 0; {
        v34[0] = *this;
        }
        if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v7, (const void **)"end_is_size", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v34)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this,
                                 (const void **)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8),
                                 (const void **)"operand",
                                 7,
                                 2u)
          || !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 3u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 152) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 4u))
        {
          return 0;
        }
        if (*((_DWORD *)*this + 9)) {
          uint64_t v8 = (uint64_t)(*this - 2);
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
        return mlir::mps::__mlir_ods_local_type_constraint_MPSOps0(*this, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
      }
      v32[0] = (const void **)"requires attribute 'shrink_axis_mask'";
      __int16 v33 = 259;
      mlir::OpState::emitOpError(this, v32, (uint64_t)v34);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
      if (v34[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v34);
      }
      if (v41)
      {
        unsigned int v25 = (void **)__p;
        if (__p)
        {
          unsigned int v26 = v40;
          int v27 = __p;
          if (v40 != __p)
          {
            do
              unsigned int v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
            while (v26 != v25);
            int v27 = __p;
          }
          uint64_t v40 = v25;
          operator delete(v27);
        }
        unint64_t v14 = v37;
        if (!v37) {
          goto LABEL_65;
        }
        uint64_t v28 = v38;
        uint64_t v16 = v37;
        if (v38 == v37)
        {
LABEL_64:
          unint64_t v38 = v14;
          operator delete(v16);
LABEL_65:
          if (v35 != &v36) {
            free(v35);
          }
          return v10;
        }
        do
        {
          uint64_t v30 = (void *)*--v28;
          unint64_t v29 = v30;
          void *v28 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v28 != v14);
LABEL_63:
        uint64_t v16 = v37;
        goto LABEL_64;
      }
    }
    else
    {
      v32[0] = (const void **)"requires attribute 'end_mask'";
      __int16 v33 = 259;
      mlir::OpState::emitOpError(this, v32, (uint64_t)v34);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
      if (v34[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v34);
      }
      if (v41)
      {
        uint64_t v19 = (void **)__p;
        if (__p)
        {
          long long v20 = v40;
          uint64_t v21 = __p;
          if (v40 != __p)
          {
            do
              long long v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
            while (v20 != v19);
            uint64_t v21 = __p;
          }
          uint64_t v40 = v19;
          operator delete(v21);
        }
        unint64_t v14 = v37;
        if (!v37) {
          goto LABEL_65;
        }
        uint64_t v22 = v38;
        uint64_t v16 = v37;
        if (v38 == v37) {
          goto LABEL_64;
        }
        do
        {
          unint64_t v24 = (void *)*--v22;
          uint64_t v23 = v24;
          *uint64_t v22 = 0;
          if (v24) {
            operator delete[](v23);
          }
        }
        while (v22 != v14);
        goto LABEL_63;
      }
    }
  }
  else
  {
    v32[0] = (const void **)"requires attribute 'begin_mask'";
    __int16 v33 = 259;
    mlir::OpState::emitOpError(this, v32, (uint64_t)v34);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
    if (v34[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v34);
    }
    if (v41)
    {
      unint64_t v11 = (void **)__p;
      if (__p)
      {
        uint64_t v12 = v40;
        unsigned int v13 = __p;
        if (v40 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          unsigned int v13 = __p;
        }
        uint64_t v40 = v11;
        operator delete(v13);
      }
      unint64_t v14 = v37;
      if (!v37) {
        goto LABEL_65;
      }
      uint64_t v15 = v38;
      uint64_t v16 = v37;
      if (v38 == v37) {
        goto LABEL_64;
      }
      do
      {
        uint64_t v18 = (void *)*--v15;
        uint64_t v17 = v18;
        void *v15 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v15 != v14);
      goto LABEL_63;
    }
  }
  return v10;
}

uint64_t mlir::mps::StridedSliceUpdateOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.strided_slice_update", 24, v2, v3, 0, 0);
  void *v4 = &unk_1EC9819E8;
  v4[12] = mlir::mps::StridedSliceUpdateOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SubtractOpGenericAdaptorBase::SubtractOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.subtract", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SubtractOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.subtract", 12, v2, v3, 0, 0);
  void *v4 = &unk_1EC97F9F0;
  v4[12] = mlir::mps::SubtractOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::SwishOpGenericAdaptorBase::SwishOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.swish", 9, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::SwishOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.swish", 9, v2, v3, 0, 0);
  void *v4 = &unk_1EC983358;
  v4[12] = mlir::mps::SwishOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::TanOpGenericAdaptorBase::TanOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.tan", 7, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::TanOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.tan", 7, v2, v3, 0, 0);
  void *v4 = &unk_1EC9825F0;
  v4[12] = mlir::mps::TanOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::TanhOpGenericAdaptorBase::TanhOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.tanh", 8, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::TanhOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.tanh", 8, v2, v3, 0, 0);
  void *v4 = &unk_1EC982C78;
  v4[12] = mlir::mps::TanhOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::TileGradientOpGenericAdaptorBase::TileGradientOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.tile_gradient", 17, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::TileGradientOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  uint64_t v13 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v14, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  __src = v20;
  uint64_t v19 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v17, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v16, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  long long v21 = v17;
  uint64_t v7 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v21, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = mlir::ValueRange::dereference_iterator(&v21, 1);
  unint64_t v9 = __src;
  uint64_t v10 = v19;
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  unint64_t v12 = v11 + v19;
  if (v12 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  if (v10)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v11), v9, 8 * v10);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v11 + v10;
  if (__src != v20) {
    free(__src);
  }
}

BOOL mlir::mps::TileGradientOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps24(*this, *(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 2u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v2 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mps::TileGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.tile_gradient", 17, v2, v3, 0, 0);
  void *v4 = &unk_1EC980700;
  v4[12] = mlir::mps::TileGradientOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::TileOpGenericAdaptorBase::TileOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.tile", 8, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::TileOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a4;
  uint64_t v19 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  __src = v24;
  uint64_t v23 = 0x200000000;
  mlir::ValueRange::ValueRange(v21, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v6 = mlir::ValueRange::ValueRange(&v20, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::TileOp::inferReturnTypes((uint64_t)v6, v7, v8, v21[0], v21[1], v9, v10, v11, v16, v17, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v12 = __src;
  }
  uint64_t v13 = v23;
  uint64_t v14 = *(unsigned int *)(a2 + 72);
  unint64_t v15 = v14 + v23;
  if (v15 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  if (v13)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v14), v12, 8 * v13);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v14 + v13;
  if (__src != v24) {
    free(__src);
  }
}

BOOL mlir::mps::TileOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps24(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v2 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mps::TileOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  unint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.tile", 8, v2, v3, 0, 0);
  void *v4 = &unk_1EC982CD0;
  v4[12] = mlir::mps::TileOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::TopKGradientOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      uint64_t v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      unsigned int v26 = &v44;
      int v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          int v27 = (char *)v48;
          unsigned int v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          unsigned int v26 = &v44;
          int v27 = (char *)v48;
        }
      }
      uint64_t v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v55;
      uint64_t v32 = __p;
      if (v55 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      long long v55 = v30;
      operator delete(v32);
    }
    long long v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    __int16 v33 = v53;
    uint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      unint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *__int16 v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "smallest", 8uLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 53;
    uint64_t v10 = &v44;
    uint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v11 = (char *)v48;
        uint64_t v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v10 = &v44;
        uint64_t v11 = (char *)v48;
      }
    }
    unint64_t v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)unint64_t v12 = v13;
    ++v49;
    if (v47[0])
    {
      uint64_t v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      unint64_t v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          unint64_t v15 = (char *)v48;
          uint64_t v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v14 = &v44;
          unint64_t v15 = (char *)v48;
        }
      }
      uint64_t v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  uint64_t v18 = (void **)__p;
  if (__p)
  {
    uint64_t v19 = v55;
    unint64_t v20 = __p;
    if (v55 != __p)
    {
      do
        uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      unint64_t v20 = __p;
    }
    long long v55 = v18;
    operator delete(v20);
  }
  long long v21 = v52;
  if (v52)
  {
    uint64_t v22 = v53;
    uint64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      unsigned int v25 = (void *)*--v22;
      unint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_41:
    uint64_t v23 = v52;
LABEL_42:
    unint64_t v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

uint64_t mlir::mps::TopKGradientOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  unint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"smallest", 8, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 113;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[187];
    return a1[32];
  }
  return result;
}

void mlir::mps::TopKGradientOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unint64_t v31[2] = *MEMORY[0x1E4F143B8];
  uint64_t v25 = a4;
  uint64_t v26 = a3;
  uint64_t v23 = a6;
  uint64_t v24 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v26, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v25, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v23, 1);
  if (a7)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v10);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v31;
  uint64_t v30 = 0x200000000;
  uint64_t v12 = *a1;
  mlir::ValueRange::ValueRange((unint64_t *)v28, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v15 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v27, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::TopKGradientOp::inferReturnTypes(v12, v16, v17, v28[0], (unint64_t)v28[1], Dictionary, v15, v18, v27[0], v27[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v19 = __src;
  }
  uint64_t v20 = v30;
  uint64_t v21 = *(unsigned int *)(a2 + 72);
  unint64_t v22 = v21 + v30;
  if (v22 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v22, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if (v20)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v21), v19, 8 * v20);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + v20;
  if (__src != v31) {
    free(__src);
  }
}

BOOL mlir::mps::TopKGradientOp::verifyInvariantsImpl(uint64_t **this)
{
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  unint64_t v7 = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v3, (const void **)"smallest", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps2(*this,
                           (const void **)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8),
                           (const void **)"operand",
                           7,
                           2u)
    || !mlir::mps::__mlir_ods_local_type_constraint_MPSOps2(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 3u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v4 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mps::TopKGradientOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.top_k_grad", 14, v2, v3, 0, 0);
  void *v4 = &unk_1EC980758;
  v4[12] = mlir::mps::TopKGradientOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    unint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::TopKOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 105;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        __int16 v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[189];
    return a1[32];
  }
  return result;
}

void mlir::mps::TopKOp::build(mlir::UnitAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unint64_t v29[2] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = a4;
  uint64_t v24 = a3;
  uint64_t v22 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v23, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  if (a6)
  {
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(a1, v9);
    *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties>((void *)a2) = UnitAttr;
  }
  __src = v29;
  uint64_t v28 = 0x200000000;
  unint64_t v11 = *a1;
  mlir::ValueRange::ValueRange((unint64_t *)v26, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v14 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v25, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::TopKOp::inferReturnTypes(v11, v15, v16, v26[0], (unint64_t)v26[1], Dictionary, v14, v17, v25[0], v25[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  int v18 = __src;
  }
  uint64_t v19 = v28;
  uint64_t v20 = *(unsigned int *)(a2 + 72);
  unint64_t v21 = v20 + v28;
  if (v21 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v21, 8);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  if (v19)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v20), v18, 8 * v19);
    LODWORD(v20) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v20 + v19;
  if (__src != v29) {
    free(__src);
  }
}

BOOL mlir::mps::TopKOp::verifyInvariantsImpl(uint64_t **this)
{
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  uint64_t v10 = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v3, (const void **)"smallest", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v10)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps2(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps2(*this,
                           (const void **)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8),
                           (const void **)"operand",
                           7,
                           2u))
  {
    return 0;
  }
  uint64_t v4 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0; {
  if (*((_DWORD *)*this + 9))
  }
    uint64_t v6 = (uint64_t)(*this - 2);
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 1);
  uint64_t v8 = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 1u) != 0;
}

uint64_t mlir::mps::TopKOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.top_k", 9, v2, v3, 0, 0);
  void *v4 = &unk_1EC982D28;
  v4[12] = mlir::mps::TopKOp::canonicalize;
  unint64_t v9 = v4;
  uint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::TransposeOpGenericAdaptorBase::TransposeOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.transpose", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::mps::TransposeOp::build(mlir::mps::ConstantOp *a1, uint64_t *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  unsigned int v10 = a5;
  unsigned int v11 = a4;
  __int16 v8 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,int &>(a1, *a2, &v11) - 16;
  unint64_t v9 = mlir::OpBuilder::create<mlir::mps::ConstantOp,int &>(a1, *a2, &v10);
  mlir::mps::TransposeOp::build((mlir::Float32Type **)a1, (uint64_t)a2, a3, (uint64_t)v8, (uint64_t)v9 - 16);
}

void mlir::mps::TransposeOp::build(mlir::Float32Type **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v25[2] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  uint64_t v18 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v20, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  __src = v25;
  uint64_t v24 = 0x200000000;
  uint64_t v7 = *a1;
  mlir::ValueRange::ValueRange((unint64_t *)v22, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v21, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::TransposeOp::inferReturnTypes(v7, v10, v11, v22[0], (unint64_t)v22[1], Dictionary, v12, v13, v21[0], v21[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v14 = __src;
  }
  uint64_t v15 = v24;
  uint64_t v16 = *(unsigned int *)(a2 + 72);
  unint64_t v17 = v16 + v24;
  if (v17 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  if (v15)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v16), v14, 8 * v15);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v16 + v15;
  if (__src != v25) {
    free(__src);
  }
}

uint64_t mlir::mps::TransposeOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.transpose", 13, v2, v3, 0, 0);
  void *v4 = &unk_1EC97FC58;
  v4[12] = mlir::mps::TransposeOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::TruncateOpGenericAdaptorBase::TruncateOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.truncate", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::TruncateOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.truncate", 12, v2, v3, 0, 0);
  void *v4 = &unk_1EC97FA48;
  v4[12] = mlir::mps::TruncateOp::canonicalize;
  unint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    unint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::TypeConstraintOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      int v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          int v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          int v27 = (char *)v60;
        }
      }
      uint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v67;
      uint64_t v32 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      long long v67 = v30;
      operator delete(v32);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    __int16 v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      unint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *__int16 v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "type_constraint", 0xFuLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected key entry for type_constraint in DictionaryAttr to set Properties.";
      uint64_t v58 = 75;
      uint64_t v36 = &v56;
      unint64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          unint64_t v37 = (char *)v60;
          uint64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v36 = &v56;
          unint64_t v37 = (char *)v60;
        }
      }
      unint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)unint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    int64_t v40 = (void **)__p;
    if (__p)
    {
      int64_t v41 = v67;
      int64_t v42 = __p;
      if (v67 != __p)
      {
        do
          int64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        int64_t v42 = __p;
      }
      long long v67 = v40;
      operator delete(v42);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      int v44 = v45;
      *uint64_t v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 60;
    unsigned int v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        unsigned int v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        unsigned int v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      unint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      uint64_t v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v15 = (char *)v60;
          unint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unint64_t v14 = &v56;
          uint64_t v15 = (char *)v60;
        }
      }
      uint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      long long v67 = v18;
      operator delete(v20);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      uint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::mps::TypeConstraintOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"type_constraint", 15, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 115;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[191];
    return a1[32];
  }
  return result;
}

void mlir::mps::TypeConstraintOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v9, 1);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties>((void *)a2) = a5;
  uint64_t v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v8) = a3;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::mps::TypeConstraintOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  uint64_t v7 = mlir::TypeAttr::get(a4);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties>((void *)a2) = v7;
  __src = v24;
  uint64_t v23 = 0x200000000;
  uint64_t v8 = *a1;
  mlir::ValueRange::ValueRange(v21, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  unint64_t v11 = *(uint64_t **)(a2 + 256);
  mlir::ValueRange::ValueRange(v20, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mps::TypeConstraintOp::inferReturnTypes(v8, v12, v13, v21[0], v21[1], Dictionary, v11, v14, v20[0], v20[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  uint64_t v15 = __src;
  }
  uint64_t v16 = v23;
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  unint64_t v18 = v17 + v23;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v16)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v24) {
    free(__src);
  }
}

uint64_t mlir::mps::TypeConstraintOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  __int16 v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v17[0] = v2;
    if (mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v3, (const void **)"type_constraint", (const char *)0xF, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v17))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v4 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v4 = 0;
      }
      mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v15 = (const void **)"requires attribute 'type_constraint'";
    __int16 v16 = 259;
    mlir::OpState::emitOpError(this, &v15, (uint64_t)v17);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
    if (v17[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v17);
    }
    if (v24)
    {
      unint64_t v6 = (void **)__p;
      if (__p)
      {
        uint64_t v7 = v23;
        uint64_t v8 = __p;
        if (v23 != __p)
        {
          do
            uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          uint64_t v8 = __p;
        }
        uint64_t v23 = v6;
        operator delete(v8);
      }
      uint64_t v9 = v20;
      if (v20)
      {
        uint64_t v10 = v21;
        unint64_t v11 = v20;
        if (v21 != v20)
        {
          do
          {
            int v13 = (void *)*--v10;
            uint64_t v12 = v13;
            *uint64_t v10 = 0;
            if (v13) {
              operator delete[](v12);
            }
          }
          while (v10 != v9);
          unint64_t v11 = v20;
        }
        unint64_t v21 = v9;
        operator delete(v11);
      }
      if (v18 != &v19) {
        free(v18);
      }
    }
  }
  return v5;
}

uint64_t mlir::mps::TypeConstraintOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.type_constraint", 19, v2, v3, 0, 0);
  void *v4 = &unk_1EC980E90;
  v4[12] = mlir::mps::TypeConstraintOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::UnrealizedFoldOpGenericAdaptorBase::UnrealizedFoldOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.unrealized_fold", 19, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::UnrealizedFoldOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.unrealized_fold", 19, v2, v3, 0, 0);
  void *v4 = &unk_1EC980EE8;
  v4[12] = mlir::mps::UnrealizedFoldOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::UpdateRandomStateOpGenericAdaptorBase::UpdateRandomStateOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.update_random_state", 23, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::mps::UpdateRandomStateOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)|| !mlir::mps::__mlir_ods_local_type_constraint_MPSOps3(*this, (const void **)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v2 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::mps::__mlir_ods_local_type_constraint_MPSOps6(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mps::UpdateRandomStateOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.update_random_state", 23, v2, v3, 0, 0);
  void *v4 = &unk_1EC981728;
  v4[12] = mlir::mps::UpdateRandomStateOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::VariableFromTensorOpGenericAdaptorBase::VariableFromTensorOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.variable_from_tensor", 24, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::VariableFromTensorOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.variable_from_tensor", 24, v2, v3, 0, 0);
  void *v4 = &unk_1EC981A40;
  v4[12] = mlir::mps::VariableFromTensorOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::XnorOpGenericAdaptorBase::XnorOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.xnor", 8, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::XnorOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.xnor", 8, v2, v3, 0, 0);
  void *v4 = &unk_1EC982D80;
  v4[12] = mlir::mps::XnorOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::detail::XorOpGenericAdaptorBase::XorOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Attrunint64_t Dictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.xor", 7, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::XorOp::getCanonicalizationPatterns(uint64_t *a1)
{
  mlir::PatternBenefit::PatternBenefit(&v8, 1);
  __int16 v2 = v8;
  uint64_t v3 = *a1;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = mlir::Pattern::Pattern((uint64_t)(v4 + 1), (uint64_t)"mps.xor", 7, v2, v3, 0, 0);
  void *v4 = &unk_1EC982648;
  v4[12] = mlir::mps::XorOp::canonicalize;
  uint64_t v9 = v4;
  unint64_t v6 = (void *)a1[2];
  if ((unint64_t)v6 >= a1[3])
  {
    uint64_t v7 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    a1[2] = (uint64_t)v7;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *unint64_t v6 = v4;
    a1[2] = (uint64_t)(v6 + 1);
  }
  return result;
}

uint64_t mlir::mps::anonymous namespace'::inferElementWiseBinaryMathOpReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(uint64_t a1, mlir::Float32Type *this)
{
  uint64_t v3 = mlir::Float32Type::get(this, this);
  uint64_t v4 = mlir::UnrankedTensorType::get(v3);
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
  }
  *(void *)(*(void *)a1 + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 8);
  return 1;
}

uint64_t mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, uint64_t *a6, const char *a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v22);
  if (v22) {
    mlir::Diagnostic::append<char const(&)[13],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>((uint64_t)&v23, a3, a4, a5, a6, a7);
  }
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v22);
  if (v22) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
  }
  if (v30)
  {
    int v13 = (void **)__p;
    if (__p)
    {
      int v14 = v29;
      uint64_t v15 = __p;
      if (v29 != __p)
      {
        do
          int v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        uint64_t v15 = __p;
      }
      long long v29 = v13;
      operator delete(v15);
    }
    __int16 v16 = v26;
    if (v26)
    {
      uint64_t v17 = v27;
      unint64_t v18 = v26;
      if (v27 != v26)
      {
        do
        {
          uint64_t v20 = (void *)*--v17;
          uint64_t v19 = v20;
          *uint64_t v17 = 0;
          if (v20) {
            operator delete[](v19);
          }
        }
        while (v17 != v16);
        unint64_t v18 = v26;
      }
      int v27 = v16;
      operator delete(v18);
    }
    if (v24 != &v25) {
      free(v24);
    }
  }
  return v12;
}

uint64_t mlir::Diagnostic::append<char const(&)[13],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(uint64_t a1, char *__s, uint64_t *a3, char *a4, uint64_t *a5, const char *a6)
{
  size_t v12 = strlen(__s);
  uint64_t v13 = a1 + 16;
  unint64_t v14 = *(void *)(a1 + 16);
  int v23 = 3;
  char v24 = __s;
  size_t v25 = v12;
  uint64_t v15 = *(unsigned int *)(a1 + 24);
  __int16 v16 = &v23;
  if (v15 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v20 = v15 + 1;
    BOOL v21 = v14 + 24 * v15 > (unint64_t)&v23;
    if (v14 <= (unint64_t)&v23 && v21)
    {
      uint64_t v22 = (char *)&v23 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v20, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      __int16 v16 = (int *)&v22[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v20, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      __int16 v16 = &v23;
    }
  }
  uint64_t v17 = v14 + 24 * *(unsigned int *)(a1 + 24);
  long long v18 = *(_OWORD *)v16;
  *(void *)(v17 + 16) = *((void *)v16 + 2);
  *(_OWORD *)uint64_t v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(a1, a3, a4, a5, a6);
}

uint64_t mlir::Diagnostic::append<mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(uint64_t a1, uint64_t *a2, char *a3, uint64_t *a4, const char *a5)
{
  uint64_t v9 = v19;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v19, *a2);
  uint64_t v10 = a1 + 16;
  unint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v16 = v12 + 1;
    BOOL v17 = v11 + 24 * v12 > (unint64_t)v19;
    if (v11 <= (unint64_t)v19 && v17)
    {
      long long v18 = &v19[-v11];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(a1 + 32), v16, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v9 = &v18[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(a1 + 32), v16, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v9 = v19;
    }
  }
  unint64_t v13 = v11 + 24 * *(unsigned int *)(a1 + 24);
  long long v14 = *(_OWORD *)v9;
  *(void *)(v13 + 16) = *((void *)v9 + 2);
  *(_OWORD *)unint64_t v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[6],mlir::Type &,char const(&)[30]>(a1, a3, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[6],mlir::Type &,char const(&)[30]>(uint64_t a1, char *__s, uint64_t *a3, const char *a4)
{
  size_t v8 = strlen(__s);
  uint64_t v9 = a1 + 16;
  unint64_t v10 = *(void *)(a1 + 16);
  int v19 = 3;
  unint64_t v20 = __s;
  size_t v21 = v8;
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  uint64_t v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v16 = v11 + 1;
    BOOL v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      long long v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      uint64_t v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      uint64_t v12 = &v19;
    }
  }
  uint64_t v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  long long v14 = *(_OWORD *)v12;
  *(void *)(v13 + 16) = *((void *)v12 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<mlir::Type &,char const(&)[30]>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<mlir::Type &,char const(&)[30]>(uint64_t a1, uint64_t *a2, const char *a3)
{
  uint64_t v5 = &v22;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v22, *a2);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  if (v7 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v17 = v7 + 1;
    BOOL v18 = v6 + 24 * v7 > (unint64_t)&v22;
    if (v6 <= (unint64_t)&v22 && v18)
    {
      unint64_t v20 = (char *)&v22 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v17, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = (int *)&v20[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v17, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = &v22;
    }
  }
  uint64_t v8 = v6 + 24 * *(unsigned int *)(a1 + 24);
  long long v9 = *(_OWORD *)v5;
  *(void *)(v8 + 16) = *((void *)v5 + 2);
  *(_OWORD *)uint64_t v8 = v9;
  uint64_t v10 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v10;
  size_t v11 = strlen(a3);
  int v22 = 3;
  int v23 = a3;
  size_t v24 = v11;
  unint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = &v22;
  if (v10 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v10 + 1;
    if (v12 <= (unint64_t)&v22 && v12 + 24 * v10 > (unint64_t)&v22)
    {
      size_t v21 = (char *)&v22 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v13 = (int *)&v21[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v13 = &v22;
    }
  }
  uint64_t v14 = v12 + 24 * *(unsigned int *)(a1 + 24);
  long long v15 = *(_OWORD *)v13;
  *(void *)(v14 + 16) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v14 = v15;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::Diagnostic::append<char const(&)[13],mlir::Type &,char const(&)[4],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(uint64_t a1, char *__s, uint64_t *a3, char *a4, uint64_t *a5, char *a6, uint64_t *a7, const char *a8)
{
  size_t v16 = strlen(__s);
  uint64_t v17 = a1 + 16;
  unint64_t v18 = *(void *)(a1 + 16);
  int v27 = 3;
  uint64_t v28 = __s;
  size_t v29 = v16;
  uint64_t v19 = *(unsigned int *)(a1 + 24);
  unint64_t v20 = &v27;
  if (v19 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v24 = v19 + 1;
    BOOL v25 = v18 + 24 * v19 > (unint64_t)&v27;
    if (v18 <= (unint64_t)&v27 && v25)
    {
      uint64_t v26 = (char *)&v27 - v18;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17, (void *)(a1 + 32), v24, 24);
      unint64_t v18 = *(void *)(a1 + 16);
      unint64_t v20 = (int *)&v26[v18];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17, (void *)(a1 + 32), v24, 24);
      unint64_t v18 = *(void *)(a1 + 16);
      unint64_t v20 = &v27;
    }
  }
  uint64_t v21 = v18 + 24 * *(unsigned int *)(a1 + 24);
  long long v22 = *(_OWORD *)v20;
  *(void *)(v21 + 16) = *((void *)v20 + 2);
  *(_OWORD *)uint64_t v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<mlir::Type &,char const(&)[4],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t mlir::Diagnostic::append<mlir::Type &,char const(&)[4],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(uint64_t a1, uint64_t *a2, char *a3, uint64_t *a4, char *a5, uint64_t *a6, const char *a7)
{
  uint64_t v13 = v23;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v23, *a2);
  uint64_t v14 = a1 + 16;
  unint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(unsigned int *)(a1 + 24);
  if (v16 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v20 = v16 + 1;
    BOOL v21 = v15 + 24 * v16 > (unint64_t)v23;
    if (v15 <= (unint64_t)v23 && v21)
    {
      long long v22 = &v23[-v15];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(a1 + 32), v20, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v13 = &v22[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(a1 + 32), v20, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      uint64_t v13 = v23;
    }
  }
  unint64_t v17 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v18 = *(_OWORD *)v13;
  *(void *)(v17 + 16) = *((void *)v13 + 2);
  *(_OWORD *)unint64_t v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[13],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(a1, a3, a4, a5, a6, a7);
}

uint64_t mlir::mps::anonymous namespace'::getPositiveAxes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  v19[6] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  int ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v15);
  uint64_t v18 = v12;
  if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return mlir::emitOptionalError<char const(&)[39]>(a5, a6, "attribute is not integer type");
  int ArgOperands = v19;
  uint64_t v18 = 0x600000000;
  mlir::getIntValues<long long>(v15, v16, (uint64_t)&ArgOperands, 1);
  if (ArgOperands != v19) {
    free(ArgOperands);
  }
  return PositiveAxes;
}

uint64_t mlir::emitOptionalError<char const(&)[37],char const(&)[14],unsigned long,char const(&)[5],unsigned long &>(uint64_t a1, char a2, char *a3, char *a4, char **a5, char *a6, char **a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v22);
  if (v22) {
    mlir::Diagnostic::append<char const(&)[37],char const(&)[14],unsigned long,char const(&)[5],unsigned long &>((uint64_t)&v23, a3, a4, a5, a6, a7);
  }
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v22);
  if (v22) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
  }
  if (v30)
  {
    uint64_t v13 = (void **)__p;
    if (__p)
    {
      uint64_t v14 = v29;
      uint64_t v15 = __p;
      if (v29 != __p)
      {
        do
          uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        uint64_t v15 = __p;
      }
      size_t v29 = v13;
      operator delete(v15);
    }
    uint64_t v16 = v26;
    if (v26)
    {
      unint64_t v17 = v27;
      uint64_t v18 = v26;
      if (v27 != v26)
      {
        do
        {
          unint64_t v20 = (void *)*--v17;
          uint64_t v19 = v20;
          *unint64_t v17 = 0;
          if (v20) {
            operator delete[](v19);
          }
        }
        while (v17 != v16);
        uint64_t v18 = v26;
      }
      int v27 = v16;
      operator delete(v18);
    }
    if (v24 != &v25) {
      free(v24);
    }
  }
  return v12;
}

uint64_t mlir::Diagnostic::append<char const(&)[37],char const(&)[14],unsigned long,char const(&)[5],unsigned long &>(uint64_t a1, char *__s, char *a3, char **a4, char *a5, char **a6)
{
  size_t v12 = strlen(__s);
  uint64_t v13 = a1 + 16;
  unint64_t v14 = *(void *)(a1 + 16);
  int v23 = 3;
  unint64_t v24 = __s;
  size_t v25 = v12;
  uint64_t v15 = *(unsigned int *)(a1 + 24);
  uint64_t v16 = &v23;
  if (v15 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v20 = v15 + 1;
    BOOL v21 = v14 + 24 * v15 > (unint64_t)&v23;
    if (v14 <= (unint64_t)&v23 && v21)
    {
      uint64_t v22 = (char *)&v23 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v20, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      uint64_t v16 = (int *)&v22[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v20, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      uint64_t v16 = &v23;
    }
  }
  uint64_t v17 = v14 + 24 * *(unsigned int *)(a1 + 24);
  long long v18 = *(_OWORD *)v16;
  *(void *)(v17 + 16) = *((void *)v16 + 2);
  *(_OWORD *)uint64_t v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[18],unsigned long long &,char const(&)[36],unsigned long long &>(a1, a3, a4, a5, a6);
}

uint64_t mlir::emitOptionalError<char const(&)[15],long long &,char const(&)[7],char const(&)[15],unsigned long &>(uint64_t a1, char a2, char *a3, char **a4, char *a5, char *a6, char **a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v22);
  if (v22) {
    mlir::Diagnostic::append<char const(&)[15],long long &,char const(&)[7],char const(&)[15],unsigned long &>((uint64_t)&v23, a3, a4, a5, a6, a7);
  }
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v22);
  if (v22) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
  }
  if (v30)
  {
    uint64_t v13 = (void **)__p;
    if (__p)
    {
      unint64_t v14 = v29;
      uint64_t v15 = __p;
      if (v29 != __p)
      {
        do
          unint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        uint64_t v15 = __p;
      }
      size_t v29 = v13;
      operator delete(v15);
    }
    uint64_t v16 = v26;
    if (v26)
    {
      uint64_t v17 = v27;
      long long v18 = v26;
      if (v27 != v26)
      {
        do
        {
          unint64_t v20 = (void *)*--v17;
          uint64_t v19 = v20;
          *uint64_t v17 = 0;
          if (v20) {
            operator delete[](v19);
          }
        }
        while (v17 != v16);
        long long v18 = v26;
      }
      int v27 = v16;
      operator delete(v18);
    }
    if (v24 != &v25) {
      free(v24);
    }
  }
  return v12;
}

uint64_t mlir::emitOptionalError<char const(&)[37],char const(&)[6],unsigned long &,char const(&)[13]>(uint64_t a1, char a2, char *a3, char *a4, char **a5, char *a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v20);
  if (v20) {
    mlir::Diagnostic::append<char const(&)[37],char const(&)[6],unsigned long &,char const(&)[13]>((uint64_t)&v21, a3, a4, a5, a6);
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v20);
  if (v20) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  }
  if (v28)
  {
    size_t v11 = (void **)__p;
    if (__p)
    {
      uint64_t v12 = v27;
      uint64_t v13 = __p;
      if (v27 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        uint64_t v13 = __p;
      }
      int v27 = v11;
      operator delete(v13);
    }
    unint64_t v14 = v24;
    if (v24)
    {
      uint64_t v15 = v25;
      uint64_t v16 = v24;
      if (v25 != v24)
      {
        do
        {
          long long v18 = (void *)*--v15;
          uint64_t v17 = v18;
          void *v15 = 0;
          if (v18) {
            operator delete[](v17);
          }
        }
        while (v15 != v14);
        uint64_t v16 = v24;
      }
      uint64_t v25 = v14;
      operator delete(v16);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v10;
}

uint64_t mlir::Diagnostic::append<char const(&)[15],long long &,char const(&)[7],char const(&)[15],unsigned long &>(uint64_t a1, char *__s, char **a3, char *a4, char *a5, char **a6)
{
  size_t v12 = strlen(__s);
  unint64_t v13 = *(void *)(a1 + 16);
  int v32 = 3;
  __int16 v33 = __s;
  size_t v34 = v12;
  uint64_t v14 = *(unsigned int *)(a1 + 24);
  uint64_t v15 = &v32;
  if (v14 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v26 = v14 + 1;
    BOOL v27 = v13 + 24 * v14 > (unint64_t)&v32;
    if (v13 <= (unint64_t)&v32 && v27)
    {
      char v30 = (char *)&v32 - v13;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v13 = *(void *)(a1 + 16);
      uint64_t v15 = (int *)&v30[v13];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v13 = *(void *)(a1 + 16);
      uint64_t v15 = &v32;
    }
  }
  uint64_t v16 = v13 + 24 * *(unsigned int *)(a1 + 24);
  long long v17 = *(_OWORD *)v15;
  *(void *)(v16 + 16) = *((void *)v15 + 2);
  *(_OWORD *)uint64_t v16 = v17;
  unsigned int v18 = *(_DWORD *)(a1 + 28);
  uint64_t v19 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v19;
  uint64_t v20 = *a3;
  int v32 = 2;
  __int16 v33 = v20;
  unint64_t v21 = *(void *)(a1 + 16);
  uint64_t v22 = &v32;
  if (v19 >= v18)
  {
    unint64_t v28 = v19 + 1;
    BOOL v29 = v21 + 24 * v19 > (unint64_t)&v32;
    if (v21 <= (unint64_t)&v32 && v29)
    {
      uint64_t v31 = (char *)&v32 - v21;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = (int *)&v31[v21];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = &v32;
    }
  }
  uint64_t v23 = v21 + 24 * *(unsigned int *)(a1 + 24);
  long long v24 = *(_OWORD *)v22;
  *(void *)(v23 + 16) = *((void *)v22 + 2);
  *(_OWORD *)uint64_t v23 = v24;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[7],char const(&)[15],unsigned long &>(a1, a4, a5, a6);
}

uint64_t mlir::Diagnostic::append<char const(&)[7],char const(&)[15],unsigned long &>(uint64_t a1, char *__s, char *a3, char **a4)
{
  size_t v8 = strlen(__s);
  uint64_t v9 = a1 + 16;
  unint64_t v10 = *(void *)(a1 + 16);
  int v19 = 3;
  uint64_t v20 = __s;
  size_t v21 = v8;
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  size_t v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v16 = v11 + 1;
    BOOL v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      unsigned int v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      size_t v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      size_t v12 = &v19;
    }
  }
  uint64_t v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  long long v14 = *(_OWORD *)v12;
  *(void *)(v13 + 16) = *((void *)v12 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[36],unsigned long long &>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<char const(&)[37],char const(&)[6],unsigned long &,char const(&)[13]>(uint64_t a1, char *__s, char *a3, char **a4, char *a5)
{
  size_t v10 = strlen(__s);
  uint64_t v11 = a1 + 16;
  unint64_t v12 = *(void *)(a1 + 16);
  int v21 = 3;
  uint64_t v22 = __s;
  size_t v23 = v10;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  long long v14 = &v21;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v18 = v13 + 1;
    BOOL v19 = v12 + 24 * v13 > (unint64_t)&v21;
    if (v12 <= (unint64_t)&v21 && v19)
    {
      uint64_t v20 = (char *)&v21 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      long long v14 = (int *)&v20[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      long long v14 = &v21;
    }
  }
  uint64_t v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = *((void *)v14 + 2);
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[18],unsigned long,char const(&)[8]>(a1, a3, a4, a5);
}

uint64_t mlir::emitOptionalError<char const(&)[36],char const(&)[49],long long &,char const(&)[6]>(uint64_t a1, char a2, char *a3, char *a4, char **a5, char *a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v20);
  if (v20) {
    mlir::Diagnostic::append<char const(&)[36],char const(&)[49],long long &,char const(&)[6]>((uint64_t)&v21, a3, a4, a5, a6);
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v20);
  if (v20) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  }
  if (v28)
  {
    uint64_t v11 = (void **)__p;
    if (__p)
    {
      unint64_t v12 = v27;
      uint64_t v13 = __p;
      if (v27 != __p)
      {
        do
          unint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        uint64_t v13 = __p;
      }
      BOOL v27 = v11;
      operator delete(v13);
    }
    long long v14 = v24;
    if (v24)
    {
      uint64_t v15 = v25;
      long long v16 = v24;
      if (v25 != v24)
      {
        do
        {
          unint64_t v18 = (void *)*--v15;
          BOOL v17 = v18;
          void *v15 = 0;
          if (v18) {
            operator delete[](v17);
          }
        }
        while (v15 != v14);
        long long v16 = v24;
      }
      uint64_t v25 = v14;
      operator delete(v16);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v10;
}

uint64_t mlir::emitOptionalError<char const(&)[31],char const(&)[45],char const(&)[25]>(uint64_t a1, char a2, char *a3, char *a4, const char *a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v18);
  if (v18) {
    mlir::Diagnostic::append<char const(&)[31],char const(&)[45],char const(&)[25]>((uint64_t)&v19, a3, a4, a5);
  }
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v18);
  if (v18) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v18);
  }
  if (v26)
  {
    uint64_t v9 = (void **)__p;
    if (__p)
    {
      uint64_t v10 = v25;
      uint64_t v11 = __p;
      if (v25 != __p)
      {
        do
          uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        uint64_t v11 = __p;
      }
      uint64_t v25 = v9;
      operator delete(v11);
    }
    unint64_t v12 = v22;
    if (v22)
    {
      uint64_t v13 = v23;
      long long v14 = v22;
      if (v23 != v22)
      {
        do
        {
          long long v16 = (void *)*--v13;
          uint64_t v15 = v16;
          void *v13 = 0;
          if (v16) {
            operator delete[](v15);
          }
        }
        while (v13 != v12);
        long long v14 = v22;
      }
      uint64_t v23 = v12;
      operator delete(v14);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v8;
}

uint64_t mlir::Diagnostic::append<char const(&)[36],char const(&)[49],long long &,char const(&)[6]>(uint64_t a1, char *__s, char *a3, char **a4, char *a5)
{
  size_t v10 = strlen(__s);
  uint64_t v11 = a1 + 16;
  unint64_t v12 = *(void *)(a1 + 16);
  int v21 = 3;
  uint64_t v22 = __s;
  size_t v23 = v10;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  long long v14 = &v21;
  if (v13 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v18 = v13 + 1;
    BOOL v19 = v12 + 24 * v13 > (unint64_t)&v21;
    if (v12 <= (unint64_t)&v21 && v19)
    {
      uint64_t v20 = (char *)&v21 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      long long v14 = (int *)&v20[v12];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(a1 + 32), v18, 24);
      unint64_t v12 = *(void *)(a1 + 16);
      long long v14 = &v21;
    }
  }
  uint64_t v15 = v12 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = *((void *)v14 + 2);
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[49],long long &,char const(&)[6]>(a1, a3, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[49],long long &,char const(&)[6]>(uint64_t a1, char *__s, char **a3, char *a4)
{
  size_t v8 = strlen(__s);
  uint64_t v9 = a1 + 16;
  unint64_t v10 = *(void *)(a1 + 16);
  int v19 = 3;
  uint64_t v20 = __s;
  size_t v21 = v8;
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  unint64_t v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v16 = v11 + 1;
    BOOL v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      unint64_t v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      unint64_t v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      unint64_t v12 = &v19;
    }
  }
  uint64_t v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  long long v14 = *(_OWORD *)v12;
  *(void *)(v13 + 16) = *((void *)v12 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<long long &,char const(&)[6]>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<long long &,char const(&)[6]>(uint64_t a1, char **a2, char *__s)
{
  uint64_t v6 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *a2;
  int v24 = 2;
  uint64_t v25 = v7;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = &v24;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v8 + 1;
    BOOL v20 = v5 + 24 * v8 > (unint64_t)&v24;
    if (v5 <= (unint64_t)&v24 && v20)
    {
      uint64_t v22 = (char *)&v24 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v5 = *(void *)(a1 + 16);
      uint64_t v9 = (int *)&v22[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v5 = *(void *)(a1 + 16);
      uint64_t v9 = &v24;
    }
  }
  uint64_t v10 = v5 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  uint64_t v12 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v12;
  size_t v13 = strlen(__s);
  int v24 = 3;
  uint64_t v25 = __s;
  size_t v26 = v13;
  unint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = &v24;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v21 = v12 + 1;
    if (v14 <= (unint64_t)&v24 && v14 + 24 * v12 > (unint64_t)&v24)
    {
      size_t v23 = (char *)&v24 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v21, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = (int *)&v23[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v21, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = &v24;
    }
  }
  uint64_t v16 = v14 + 24 * *(unsigned int *)(a1 + 24);
  long long v17 = *(_OWORD *)v15;
  *(void *)(v16 + 16) = *((void *)v15 + 2);
  *(_OWORD *)uint64_t v16 = v17;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::Diagnostic::append<char const(&)[39],char const(&)[29],long long &,char const(&)[4],long long>(uint64_t a1, char *__s, char *a3, char **a4, char *a5, char **a6)
{
  size_t v12 = strlen(__s);
  uint64_t v13 = a1 + 16;
  unint64_t v14 = *(void *)(a1 + 16);
  int v23 = 3;
  int v24 = __s;
  size_t v25 = v12;
  uint64_t v15 = *(unsigned int *)(a1 + 24);
  uint64_t v16 = &v23;
  if (v15 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v20 = v15 + 1;
    BOOL v21 = v14 + 24 * v15 > (unint64_t)&v23;
    if (v14 <= (unint64_t)&v23 && v21)
    {
      uint64_t v22 = (char *)&v23 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v20, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      uint64_t v16 = (int *)&v22[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v20, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      uint64_t v16 = &v23;
    }
  }
  uint64_t v17 = v14 + 24 * *(unsigned int *)(a1 + 24);
  long long v18 = *(_OWORD *)v16;
  *(void *)(v17 + 16) = *((void *)v16 + 2);
  *(_OWORD *)uint64_t v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[29],long long &,char const(&)[4],long long>(a1, a3, a4, a5, a6);
}

uint64_t mlir::Diagnostic::append<char const(&)[29],long long &,char const(&)[4],long long>(uint64_t a1, char *__s, char **a3, char *a4, char **a5)
{
  size_t v10 = strlen(__s);
  unint64_t v11 = *(void *)(a1 + 16);
  int v30 = 3;
  uint64_t v31 = __s;
  size_t v32 = v10;
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  uint64_t v13 = &v30;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v24 = v12 + 1;
    BOOL v25 = v11 + 24 * v12 > (unint64_t)&v30;
    if (v11 <= (unint64_t)&v30 && v25)
    {
      char v28 = (char *)&v30 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = (int *)&v28[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = &v30;
    }
  }
  uint64_t v14 = v11 + 24 * *(unsigned int *)(a1 + 24);
  long long v15 = *(_OWORD *)v13;
  *(void *)(v14 + 16) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v14 = v15;
  unsigned int v16 = *(_DWORD *)(a1 + 28);
  uint64_t v17 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v17;
  long long v18 = *a3;
  int v30 = 2;
  uint64_t v31 = v18;
  unint64_t v19 = *(void *)(a1 + 16);
  unint64_t v20 = &v30;
  if (v17 >= v16)
  {
    unint64_t v26 = v17 + 1;
    BOOL v27 = v19 + 24 * v17 > (unint64_t)&v30;
    if (v19 <= (unint64_t)&v30 && v27)
    {
      uint64_t v29 = (char *)&v30 - v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      unint64_t v20 = (int *)&v29[v19];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      unint64_t v20 = &v30;
    }
  }
  uint64_t v21 = v19 + 24 * *(unsigned int *)(a1 + 24);
  long long v22 = *(_OWORD *)v20;
  *(void *)(v21 + 16) = *((void *)v20 + 2);
  *(_OWORD *)uint64_t v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[4],long long>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[4],long long>(uint64_t a1, char *__s, char **a3)
{
  size_t v6 = strlen(__s);
  unint64_t v7 = *(void *)(a1 + 16);
  int v26 = 3;
  BOOL v27 = __s;
  size_t v28 = v6;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = &v26;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v20 = v8 + 1;
    BOOL v21 = v7 + 24 * v8 > (unint64_t)&v26;
    if (v7 <= (unint64_t)&v26 && v21)
    {
      unint64_t v24 = (char *)&v26 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      uint64_t v9 = (int *)&v24[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v20, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      uint64_t v9 = &v26;
    }
  }
  uint64_t v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  unsigned int v12 = *(_DWORD *)(a1 + 28);
  uint64_t v13 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v13;
  uint64_t v14 = *a3;
  int v26 = 2;
  BOOL v27 = v14;
  unint64_t v15 = *(void *)(a1 + 16);
  unsigned int v16 = &v26;
  if (v13 >= v12)
  {
    unint64_t v22 = v13 + 1;
    BOOL v23 = v15 + 24 * v13 > (unint64_t)&v26;
    if (v15 <= (unint64_t)&v26 && v23)
    {
      BOOL v25 = (char *)&v26 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      unsigned int v16 = (int *)&v25[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v22, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      unsigned int v16 = &v26;
    }
  }
  uint64_t v17 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v18 = *(_OWORD *)v16;
  *(void *)(v17 + 16) = *((void *)v16 + 2);
  *(_OWORD *)uint64_t v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::Diagnostic::append<char const(&)[31],char const(&)[45],char const(&)[25]>(uint64_t a1, char *__s, char *a3, const char *a4)
{
  size_t v8 = strlen(__s);
  uint64_t v9 = a1 + 16;
  unint64_t v10 = *(void *)(a1 + 16);
  int v19 = 3;
  unint64_t v20 = __s;
  size_t v21 = v8;
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  unsigned int v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v16 = v11 + 1;
    BOOL v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      long long v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      unsigned int v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      unsigned int v12 = &v19;
    }
  }
  uint64_t v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  long long v14 = *(_OWORD *)v12;
  *(void *)(v13 + 16) = *((void *)v12 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[45],char const(&)[25]>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<char const(&)[45],char const(&)[25]>(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  unint64_t v7 = *(void *)(a1 + 16);
  int v24 = 3;
  BOOL v25 = __s;
  size_t v26 = v6;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = &v24;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v19 = v8 + 1;
    BOOL v20 = v7 + 24 * v8 > (unint64_t)&v24;
    if (v7 <= (unint64_t)&v24 && v20)
    {
      unint64_t v22 = (char *)&v24 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      uint64_t v9 = (int *)&v22[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v19, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      uint64_t v9 = &v24;
    }
  }
  uint64_t v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  uint64_t v12 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v12;
  size_t v13 = strlen(a3);
  int v24 = 3;
  BOOL v25 = (char *)a3;
  size_t v26 = v13;
  unint64_t v14 = *(void *)(a1 + 16);
  unint64_t v15 = &v24;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v21 = v12 + 1;
    if (v14 <= (unint64_t)&v24 && v14 + 24 * v12 > (unint64_t)&v24)
    {
      BOOL v23 = (char *)&v24 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      unint64_t v15 = (int *)&v23[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v21, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      unint64_t v15 = &v24;
    }
  }
  uint64_t v16 = v14 + 24 * *(unsigned int *)(a1 + 24);
  long long v17 = *(_OWORD *)v15;
  *(void *)(v16 + 16) = *((void *)v15 + 2);
  *(_OWORD *)uint64_t v16 = v17;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::emitOptionalError<char const(&)[38],char const(&)[49],char const(&)[41],unsigned long &,char const(&)[4],long long &>(uint64_t a1, char a2, char *a3, char *a4, char *a5, char **a6, char *a7, char **a8)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v24);
  if (v24) {
    mlir::Diagnostic::append<char const(&)[38],char const(&)[49],char const(&)[41],unsigned long &,char const(&)[4],long long &>((uint64_t)&v25, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v24);
  if (v24) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v24);
  }
  if (v32)
  {
    unint64_t v15 = (void **)__p;
    if (__p)
    {
      uint64_t v16 = v31;
      long long v17 = __p;
      if (v31 != __p)
      {
        do
          uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        long long v17 = __p;
      }
      uint64_t v31 = v15;
      operator delete(v17);
    }
    long long v18 = v28;
    if (v28)
    {
      unint64_t v19 = v29;
      BOOL v20 = v28;
      if (v29 != v28)
      {
        do
        {
          unint64_t v22 = (void *)*--v19;
          unint64_t v21 = v22;
          void *v19 = 0;
          if (v22) {
            operator delete[](v21);
          }
        }
        while (v19 != v18);
        BOOL v20 = v28;
      }
      uint64_t v29 = v18;
      operator delete(v20);
    }
    if (v26 != &v27) {
      free(v26);
    }
  }
  return v14;
}

uint64_t mlir::Diagnostic::append<char const(&)[38],char const(&)[49],char const(&)[41],unsigned long &,char const(&)[4],long long &>(uint64_t a1, char *__s, char *a3, char *a4, char **a5, char *a6, char **a7)
{
  size_t v14 = strlen(__s);
  uint64_t v15 = a1 + 16;
  unint64_t v16 = *(void *)(a1 + 16);
  int v25 = 3;
  size_t v26 = __s;
  size_t v27 = v14;
  uint64_t v17 = *(unsigned int *)(a1 + 24);
  long long v18 = &v25;
  if (v17 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v22 = v17 + 1;
    BOOL v23 = v16 + 24 * v17 > (unint64_t)&v25;
    if (v16 <= (unint64_t)&v25 && v23)
    {
      uint64_t v24 = (char *)&v25 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v22, 24);
      unint64_t v16 = *(void *)(a1 + 16);
      long long v18 = (int *)&v24[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(a1 + 32), v22, 24);
      unint64_t v16 = *(void *)(a1 + 16);
      long long v18 = &v25;
    }
  }
  uint64_t v19 = v16 + 24 * *(unsigned int *)(a1 + 24);
  long long v20 = *(_OWORD *)v18;
  *(void *)(v19 + 16) = *((void *)v18 + 2);
  *(_OWORD *)uint64_t v19 = v20;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[49],char const(&)[41],unsigned long &,char const(&)[4],long long &>(a1, a3, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<char const(&)[49],char const(&)[41],unsigned long &,char const(&)[4],long long &>(uint64_t a1, char *__s, char *a3, char **a4, char *a5, char **a6)
{
  size_t v12 = strlen(__s);
  uint64_t v13 = a1 + 16;
  unint64_t v14 = *(void *)(a1 + 16);
  int v23 = 3;
  uint64_t v24 = __s;
  size_t v25 = v12;
  uint64_t v15 = *(unsigned int *)(a1 + 24);
  unint64_t v16 = &v23;
  if (v15 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v20 = v15 + 1;
    BOOL v21 = v14 + 24 * v15 > (unint64_t)&v23;
    if (v14 <= (unint64_t)&v23 && v21)
    {
      unint64_t v22 = (char *)&v23 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v20, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      unint64_t v16 = (int *)&v22[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v20, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      unint64_t v16 = &v23;
    }
  }
  uint64_t v17 = v14 + 24 * *(unsigned int *)(a1 + 24);
  long long v18 = *(_OWORD *)v16;
  *(void *)(v17 + 16) = *((void *)v16 + 2);
  *(_OWORD *)uint64_t v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[41],unsigned long &,char const(&)[4],long long &>(a1, a3, a4, a5, a6);
}

uint64_t mlir::Diagnostic::append<char const(&)[41],unsigned long &,char const(&)[4],long long &>(uint64_t a1, char *__s, char **a3, char *a4, char **a5)
{
  size_t v10 = strlen(__s);
  unint64_t v11 = *(void *)(a1 + 16);
  int v30 = 3;
  uint64_t v31 = __s;
  size_t v32 = v10;
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  uint64_t v13 = &v30;
  if (v12 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v24 = v12 + 1;
    BOOL v25 = v11 + 24 * v12 > (unint64_t)&v30;
    if (v11 <= (unint64_t)&v30 && v25)
    {
      size_t v28 = (char *)&v30 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = (int *)&v28[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v24, 24);
      unint64_t v11 = *(void *)(a1 + 16);
      uint64_t v13 = &v30;
    }
  }
  uint64_t v14 = v11 + 24 * *(unsigned int *)(a1 + 24);
  long long v15 = *(_OWORD *)v13;
  *(void *)(v14 + 16) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v14 = v15;
  unsigned int v16 = *(_DWORD *)(a1 + 28);
  uint64_t v17 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v17;
  long long v18 = *a3;
  int v30 = 5;
  uint64_t v31 = v18;
  unint64_t v19 = *(void *)(a1 + 16);
  unint64_t v20 = &v30;
  if (v17 >= v16)
  {
    unint64_t v26 = v17 + 1;
    BOOL v27 = v19 + 24 * v17 > (unint64_t)&v30;
    if (v19 <= (unint64_t)&v30 && v27)
    {
      uint64_t v29 = (char *)&v30 - v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      unint64_t v20 = (int *)&v29[v19];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v19 = *(void *)(a1 + 16);
      unint64_t v20 = &v30;
    }
  }
  uint64_t v21 = v19 + 24 * *(unsigned int *)(a1 + 24);
  long long v22 = *(_OWORD *)v20;
  *(void *)(v21 + 16) = *((void *)v20 + 2);
  *(_OWORD *)uint64_t v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[4],long long>(a1, a4, a5);
}

uint64_t mlir::mps::anonymous namespace'::verifyUnsignedIntegerAttr(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 47) && (uint64_t InherentAttr = mlir::Operation::getInherentAttr(a1, (uint64_t)a2, a3), v7))
  {
    if (!InherentAttr) {
      return 1;
    }
  }
  else
  {
    uint64_t InherentAttr = mlir::DictionaryAttr::get(a1 + 56, a2, a3);
    if (!InherentAttr) {
      return 1;
    }
  }
  uint64_t v8 = *(void **)(*(void *)InherentAttr + 136);
  BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (v8 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v10 = InherentAttr;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v53 = v10;
  if (!v9) {
    return 1;
  }
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v53);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32)) {
    return 1;
  }
  __int16 v52 = 259;
  mlir::Operation::emitOpError((uint64_t *)a1, &v51, (uint64_t)&Value);
  if (Value)
  {
    __int16 v57 = 261;
    int64_t v54 = (const void **)a2;
    size_t v55 = a3;
    mlir::Diagnostic::operator<<((uint64_t)&v59, &v54);
    if (Value)
    {
      LODWORD(v54) = 3;
      uint64_t v56 = 11;
      uint64_t v13 = &v54;
      uint64_t v14 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v40 = v61 + 1;
        if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
        {
          int64_t v47 = (char *)&v54 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v40, 24);
          uint64_t v14 = (char *)v60;
          uint64_t v13 = (const void ***)((char *)v60 + v47);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v40, 24);
          uint64_t v13 = &v54;
          uint64_t v14 = (char *)v60;
        }
      }
      long long v15 = &v14[24 * v61];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = v13[2];
      *(_OWORD *)long long v15 = v16;
      uint64_t v17 = ++v61;
      if (Value)
      {
        LODWORD(v54) = 3;
        size_t v55 = (size_t)", should be unsigned integer of ";
        uint64_t v56 = 32;
        long long v18 = &v54;
        unint64_t v19 = (char *)v60;
        if (v17 >= v62)
        {
          unint64_t v41 = v17 + 1;
          BOOL v42 = (char *)v60 + 24 * v17 > (char *)&v54;
          if (v60 <= &v54 && v42)
          {
            int64_t v48 = (char *)&v54 - (unsigned char *)v60;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v41, 24);
            unint64_t v19 = (char *)v60;
            long long v18 = (const void ***)((char *)v60 + v48);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v41, 24);
            long long v18 = &v54;
            unint64_t v19 = (char *)v60;
          }
        }
        unint64_t v20 = &v19[24 * v61];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)unint64_t v20 = v21;
        uint64_t v22 = ++v61;
        if (Value)
        {
          LODWORD(v54) = 5;
          size_t v55 = 32;
          int v23 = &v54;
          unint64_t v24 = (char *)v60;
          if (v22 >= v62)
          {
            unint64_t v43 = v22 + 1;
            BOOL v44 = (char *)v60 + 24 * v22 > (char *)&v54;
            if (v60 <= &v54 && v44)
            {
              int64_t v49 = (char *)&v54 - (unsigned char *)v60;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
              unint64_t v24 = (char *)v60;
              int v23 = (const void ***)((char *)v60 + v49);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
              int v23 = &v54;
              unint64_t v24 = (char *)v60;
            }
          }
          BOOL v25 = &v24[24 * v61];
          long long v26 = *(_OWORD *)v23;
          *((void *)v25 + 2) = v23[2];
          *(_OWORD *)BOOL v25 = v26;
          uint64_t v27 = ++v61;
          if (Value)
          {
            LODWORD(v54) = 3;
            size_t v55 = (size_t)" bits.";
            uint64_t v56 = 6;
            size_t v28 = &v54;
            uint64_t v29 = (char *)v60;
            if (v27 >= v62)
            {
              unint64_t v45 = v27 + 1;
              BOOL v46 = (char *)v60 + 24 * v27 > (char *)&v54;
              if (v60 <= &v54 && v46)
              {
                int64_t v50 = (char *)&v54 - (unsigned char *)v60;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
                uint64_t v29 = (char *)v60;
                size_t v28 = (const void ***)((char *)v60 + v50);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
                size_t v28 = &v54;
                uint64_t v29 = (char *)v60;
              }
            }
            int v30 = &v29[24 * v61];
            long long v31 = *(_OWORD *)v28;
            *((void *)v30 + 2) = v28[2];
            *(_OWORD *)int v30 = v31;
            ++v61;
          }
        }
      }
    }
  }
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  }
  if (v68)
  {
    size_t v32 = (void **)__p;
    if (__p)
    {
      uint64_t v33 = v67;
      size_t v34 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        size_t v34 = __p;
      }
      long long v67 = v32;
      operator delete(v34);
    }
    unint64_t v35 = v64;
    if (v64)
    {
      uint64_t v36 = v65;
      unint64_t v37 = v64;
      if (v65 != v64)
      {
        do
        {
          long long v39 = (void *)*--v36;
          unint64_t v38 = v39;
          *uint64_t v36 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v36 != v35);
        unint64_t v37 = v64;
      }
      uint64_t v65 = v35;
      operator delete(v37);
    }
    if (v60 != v63) {
      free(v60);
    }
  }
  return v11;
}

char *mlir::detail::ElementsAttrIterator<llvm::APInt>::operator*@<X0>(uint64_t a1@<X0>, llvm::APInt *a2@<X8>)
{
  BOOL v3 = *(unsigned char *)(a1 + 1) == 0;
  uint64_t v6 = a1 + 8;
  uint64_t result = *(char **)(a1 + 8);
  uint64_t v5 = *(void *)(v6 + 8);
  if (v3) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  if (!*(unsigned char *)a1) {
    return (char *)(*(uint64_t (**)(char *, uint64_t))(*(void *)result + 24))(result, v7);
  }
  uint64_t v8 = &result[16 * v7];
  unsigned int v9 = *((_DWORD *)v8 + 2);
  *((_DWORD *)a2 + 2) = v9;
  if (v9 > 0x40) {
    return (char *)llvm::APInt::initSlowCase(a2, (const void **)v8);
  }
  *(void *)a2 = *(void *)v8;
  return result;
}

uint64_t mlir::mps::anonymous namespace'::inferStridedSliceShape(uint64_t a1, char a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  void v69[4] = *MEMORY[0x1E4F143B8];
  long long v67 = v69;
  uint64_t v68 = 0x400000000;
  uint64_t v64 = v66;
  uint64_t v65 = 0x400000000;
  uint64_t v60 = a4;
  unsigned int v61 = v63;
  uint64_t v62 = 0x400000000;
  if (a5) {
    mlir::getIntValues<long long>(a5, a6, (uint64_t)&v67, 1);
  }
  if (a7) {
    mlir::getIntValues<long long>(a7, a8, (uint64_t)&v64, 1);
  }
  if (a9) {
    mlir::getIntValues<long long>(a9, a10, (uint64_t)&v61, 1);
  }
  if ((uint64_t)a4 >= v62) {
    char v21 = 1;
  }
  else {
    char v21 = a14;
  }
  if ((uint64_t)a4 < v68 || (uint64_t)a4 < v65 || (v21 & 1) == 0)
  {
    unint64_t v58 = v65;
    unint64_t v59 = v68;
    unint64_t v57 = v62;
    uint64_t v23 = mlir::emitOptionalError<char const(&)[37],unsigned long,char const(&)[10],unsigned long,char const(&)[11],unsigned long,char const(&)[40],long long &>(a1, a2, "Slice specification lengths: begin (", (char **)&v59, "),  end (", (char **)&v58, ") stride (", (char **)&v57, ") must be lower or equal to input rank ", &v60);
    unint64_t v24 = v61;
    if (v61 == v63) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((unint64_t)a4 <= *(unsigned int *)(a15 + 12))
  {
    uint64_t v22 = a5;
    if (a4) {
      goto LABEL_23;
    }
    uint64_t v23 = 1;
    unint64_t v24 = v61;
    if (v61 == v63) {
      goto LABEL_17;
    }
LABEL_16:
    free(v24);
    goto LABEL_17;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a15, (void *)(a15 + 16), (unint64_t)a4, 8);
  uint64_t v22 = a5;
LABEL_23:
  char v55 = a2;
  unint64_t v26 = 0;
  size_t v28 = (void *)(a15 + 16);
  while (1)
  {
    uint64_t v32 = 1 << v26;
    if ((v32 & a13) != 0) {
      goto LABEL_26;
    }
    uint64_t v33 = *(void *)(a3 + 8 * v26);
    if (v33 == 0x8000000000000000) {
      goto LABEL_24;
    }
    if (!a7)
    {
      uint64_t v34 = *(void *)(a3 + 8 * v26);
      if ((a12 & v32) == 0) {
        goto LABEL_24;
      }
      uint64_t v35 = 0;
      if (v33 == -1) {
        char v36 = 0;
      }
      else {
        char v36 = a14;
      }
      uint64_t v37 = v32 & a11;
      if ((v32 & a11) != 0) {
        goto LABEL_47;
      }
      goto LABEL_43;
    }
    if (v26 >= v65) {
      break;
    }
    uint64_t v34 = *((void *)v64 + v26);
    uint64_t v35 = 0;
    if (v34 == -1) {
      char v36 = 0;
    }
    else {
      char v36 = a14;
    }
    uint64_t v37 = v32 & a11;
    if ((v32 & a11) == 0) {
      goto LABEL_43;
    }
LABEL_47:
    if (a9) {
      goto LABEL_48;
    }
LABEL_24:
    unint64_t v30 = *(unsigned int *)(a15 + 8);
    uint64_t v31 = 0x8000000000000000;
    if (v30 >= *(unsigned int *)(a15 + 12)) {
      goto LABEL_88;
    }
LABEL_25:
    *(void *)(*(void *)a15 + 8 * v30) = v31;
    ++*(_DWORD *)(a15 + 8);
LABEL_26:
    if (a4 == (char *)++v26)
    {
      uint64_t v23 = 1;
      unint64_t v24 = v61;
      if (v61 != v63) {
        goto LABEL_16;
      }
      goto LABEL_17;
    }
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  char v36 = a14;
  uint64_t v37 = v32 & a11;
  if ((v32 & a11) != 0) {
    goto LABEL_47;
  }
LABEL_43:
  if (v36) {
    goto LABEL_47;
  }
  if (!v22) {
    goto LABEL_24;
  }
  if (v26 < v68)
  {
    uint64_t v35 = v67[v26];
    goto LABEL_47;
  }
  uint64_t v35 = 0;
  if (!a9) {
    goto LABEL_24;
  }
LABEL_48:
  if (v26 >= v62)
  {
    uint64_t v38 = 1;
    uint64_t v39 = (v33 & (v35 >> 63)) + v35;
    if (a14) {
      goto LABEL_54;
    }
LABEL_51:
    if (v34 < 0) {
      goto LABEL_60;
    }
LABEL_56:
    uint64_t v40 = 0;
LABEL_61:
    uint64_t v41 = v40 + v34;
    uint64_t v42 = v38 >> 63;
    if (v39 >= v33 - 1) {
      uint64_t v43 = v33 - 1;
    }
    else {
      uint64_t v43 = v39;
    }
    if (v39 >= v42) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = v38 >> 63;
    }
    if (v41 >= v33) {
      uint64_t v45 = *(void *)(a3 + 8 * v26);
    }
    else {
      uint64_t v45 = v41;
    }
    if (v41 < -1) {
      uint64_t v46 = -1;
    }
    else {
      uint64_t v46 = v45;
    }
    BOOL v47 = v26 < v68 && v37 == 0;
    uint64_t v48 = v42 & (v33 - 1);
    if (v47) {
      uint64_t v48 = v44;
    }
    uint64_t v49 = v38 - 1;
    if (v38 < 0)
    {
      uint64_t v33 = -1;
      uint64_t v49 = v38 + 1;
    }
    if ((a12 & v32) != 0 || v26 >= v65) {
      uint64_t v51 = v33;
    }
    else {
      uint64_t v51 = v46;
    }
    uint64_t v31 = ((v49 - v48 + v51) / v38) & ~(((v49 - v48 + v51) / v38) >> 63);
    unint64_t v30 = *(unsigned int *)(a15 + 8);
    if (v30 < *(unsigned int *)(a15 + 12)) {
      goto LABEL_25;
    }
LABEL_88:
    uint64_t v53 = a12;
    int64_t v54 = v28;
    uint64_t v52 = a11;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a15, v28, v30 + 1, 8);
    a11 = v52;
    a12 = v53;
    size_t v28 = v54;
    uint64_t v22 = a5;
    unint64_t v30 = *(unsigned int *)(a15 + 8);
    goto LABEL_25;
  }
  uint64_t v38 = *((void *)v61 + v26);
  if (v38)
  {
    uint64_t v39 = (v33 & (v35 >> 63)) + v35;
    if (!a14) {
      goto LABEL_51;
    }
LABEL_54:
    if (v34 == -1)
    {
      a12 |= v32;
    }
    else
    {
      v34 += v39;
      if ((v34 & 0x8000000000000000) == 0) {
        goto LABEL_56;
      }
    }
LABEL_60:
    uint64_t v40 = *(void *)(a3 + 8 * v26);
    goto LABEL_61;
  }
  uint64_t v23 = mlir::emitOptionalError<char const(&)[39]>(a1, v55, "stride cannot be 0");
  unint64_t v24 = v61;
  if (v61 != v63) {
    goto LABEL_16;
  }
LABEL_17:
  if (v64 != v66) {
    free(v64);
  }
  if (v67 != v69) {
    free(v67);
  }
  return v23;
}

uint64_t mlir::emitOptionalError<char const(&)[37],unsigned long,char const(&)[10],unsigned long,char const(&)[11],unsigned long,char const(&)[40],long long &>(uint64_t a1, char a2, char *a3, char **a4, char *a5, char **a6, char *a7, char **a8, char *a9, char **a10)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v26);
  if (v26) {
    mlir::Diagnostic::append<char const(&)[37],unsigned long,char const(&)[10],unsigned long,char const(&)[11],unsigned long,char const(&)[40],long long &>((uint64_t)&v27, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v26);
  if (v26) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
  }
  if (v34)
  {
    uint64_t v17 = (void **)__p;
    if (__p)
    {
      long long v18 = v33;
      unint64_t v19 = __p;
      if (v33 != __p)
      {
        do
          long long v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        unint64_t v19 = __p;
      }
      uint64_t v33 = v17;
      operator delete(v19);
    }
    unint64_t v20 = v30;
    if (v30)
    {
      char v21 = v31;
      uint64_t v22 = v30;
      if (v31 != v30)
      {
        do
        {
          unint64_t v24 = (void *)*--v21;
          uint64_t v23 = v24;
          *char v21 = 0;
          if (v24) {
            operator delete[](v23);
          }
        }
        while (v21 != v20);
        uint64_t v22 = v30;
      }
      uint64_t v31 = v20;
      operator delete(v22);
    }
    if (v28 != &v29) {
      free(v28);
    }
  }
  return v16;
}

uint64_t mlir::Diagnostic::append<char const(&)[37],unsigned long,char const(&)[10],unsigned long,char const(&)[11],unsigned long,char const(&)[40],long long &>(uint64_t a1, char *__s, char **a3, char *a4, char **a5, char *a6, char **a7, char *a8, char **a9)
{
  size_t v17 = strlen(__s);
  unint64_t v18 = *(void *)(a1 + 16);
  int v37 = 3;
  uint64_t v38 = __s;
  size_t v39 = v17;
  uint64_t v19 = *(unsigned int *)(a1 + 24);
  unint64_t v20 = &v37;
  if (v19 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v31 = v19 + 1;
    BOOL v32 = v18 + 24 * v19 > (unint64_t)&v37;
    if (v18 <= (unint64_t)&v37 && v32)
    {
      uint64_t v35 = (char *)&v37 - v18;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v31, 24);
      unint64_t v18 = *(void *)(a1 + 16);
      unint64_t v20 = (int *)&v35[v18];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v31, 24);
      unint64_t v18 = *(void *)(a1 + 16);
      unint64_t v20 = &v37;
    }
  }
  uint64_t v21 = v18 + 24 * *(unsigned int *)(a1 + 24);
  long long v22 = *(_OWORD *)v20;
  *(void *)(v21 + 16) = *((void *)v20 + 2);
  *(_OWORD *)uint64_t v21 = v22;
  unsigned int v23 = *(_DWORD *)(a1 + 28);
  uint64_t v24 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v24;
  BOOL v25 = *a3;
  int v37 = 5;
  uint64_t v38 = v25;
  unint64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = &v37;
  if (v24 >= v23)
  {
    unint64_t v33 = v24 + 1;
    BOOL v34 = v26 + 24 * v24 > (unint64_t)&v37;
    if (v26 <= (unint64_t)&v37 && v34)
    {
      char v36 = (char *)&v37 - v26;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v33, 24);
      unint64_t v26 = *(void *)(a1 + 16);
      uint64_t v27 = (int *)&v36[v26];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v33, 24);
      unint64_t v26 = *(void *)(a1 + 16);
      uint64_t v27 = &v37;
    }
  }
  uint64_t v28 = v26 + 24 * *(unsigned int *)(a1 + 24);
  long long v29 = *(_OWORD *)v27;
  *(void *)(v28 + 16) = *((void *)v27 + 2);
  *(_OWORD *)uint64_t v28 = v29;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[10],unsigned long,char const(&)[11],unsigned long,char const(&)[40],long long &>(a1, a4, a5, a6, a7, a8, a9);
}

uint64_t mlir::Diagnostic::append<char const(&)[10],unsigned long,char const(&)[11],unsigned long,char const(&)[40],long long &>(uint64_t a1, char *__s, char **a3, char *a4, char **a5, char *a6, char **a7)
{
  size_t v14 = strlen(__s);
  unint64_t v15 = *(void *)(a1 + 16);
  int v34 = 3;
  uint64_t v35 = __s;
  size_t v36 = v14;
  uint64_t v16 = *(unsigned int *)(a1 + 24);
  size_t v17 = &v34;
  if (v16 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v28 = v16 + 1;
    BOOL v29 = v15 + 24 * v16 > (unint64_t)&v34;
    if (v15 <= (unint64_t)&v34 && v29)
    {
      BOOL v32 = (char *)&v34 - v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      size_t v17 = (int *)&v32[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      size_t v17 = &v34;
    }
  }
  uint64_t v18 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v19 = *(_OWORD *)v17;
  *(void *)(v18 + 16) = *((void *)v17 + 2);
  *(_OWORD *)uint64_t v18 = v19;
  unsigned int v20 = *(_DWORD *)(a1 + 28);
  uint64_t v21 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v21;
  long long v22 = *a3;
  int v34 = 5;
  uint64_t v35 = v22;
  unint64_t v23 = *(void *)(a1 + 16);
  uint64_t v24 = &v34;
  if (v21 >= v20)
  {
    unint64_t v30 = v21 + 1;
    BOOL v31 = v23 + 24 * v21 > (unint64_t)&v34;
    if (v23 <= (unint64_t)&v34 && v31)
    {
      unint64_t v33 = (char *)&v34 - v23;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v30, 24);
      unint64_t v23 = *(void *)(a1 + 16);
      uint64_t v24 = (int *)&v33[v23];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v30, 24);
      unint64_t v23 = *(void *)(a1 + 16);
      uint64_t v24 = &v34;
    }
  }
  uint64_t v25 = v23 + 24 * *(unsigned int *)(a1 + 24);
  long long v26 = *(_OWORD *)v24;
  *(void *)(v25 + 16) = *((void *)v24 + 2);
  *(_OWORD *)uint64_t v25 = v26;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[41],unsigned long &,char const(&)[4],long long &>(a1, a4, a5, a6, a7);
}

uint64_t mlir::emitOptionalError<llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<long long &>,llvm::detail::provider_format_adapter<unsigned long long &>>>>(uint64_t a1, char a2, const void **a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v16);
  if (v16)
  {
    __int16 v15 = 263;
    size_t v14 = a3;
    mlir::Diagnostic::operator<<((uint64_t)&v17, &v14);
  }
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v16);
  if (v16) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v16);
  }
  if (v24)
  {
    uint64_t v5 = (void **)__p;
    if (__p)
    {
      uint64_t v6 = v23;
      uint64_t v7 = __p;
      if (v23 != __p)
      {
        do
          uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        uint64_t v7 = __p;
      }
      unint64_t v23 = v5;
      operator delete(v7);
    }
    uint64_t v8 = v20;
    if (v20)
    {
      unsigned int v9 = v21;
      uint64_t v10 = v20;
      if (v21 != v20)
      {
        do
        {
          uint64_t v12 = (void *)*--v9;
          uint64_t v11 = v12;
          *unsigned int v9 = 0;
          if (v12) {
            operator delete[](v11);
          }
        }
        while (v9 != v8);
        uint64_t v10 = v20;
      }
      uint64_t v21 = v8;
      operator delete(v10);
    }
    if (v18 != &v19) {
      free(v18);
    }
  }
  return v4;
}

uint64_t mlir::mps::anonymous namespace'::inferBatchToSpaceShape(char *__src, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  int64_t v7 = *(unsigned int *)(a5 + 8);
  if (*(_DWORD *)(a3 + 8) != v7 || a2 < v7) {
    return 0;
  }
  unint64_t v17 = *(unsigned int *)(a7 + 8);
  if (a2 != v17)
  {
    if (a2 >= v17)
    {
      if (a2 > (unint64_t)*(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a7, (void *)(a7 + 16), a2, 8);
        unint64_t v17 = *(unsigned int *)(a7 + 8);
      }
      if (a2 != v17) {
        bzero((void *)(*(void *)a7 + 8 * v17), 8 * (a2 - v17));
      }
    }
    *(_DWORD *)(a7 + 8) = a2;
  }
  if (a2) {
    memmove(*(void **)a7, __src, 8 * a2);
  }
  uint64_t v18 = *(unsigned int *)(a5 + 8);
  if (v18)
  {
    uint64_t v19 = *(uint64_t **)a5;
    unsigned int v20 = *(uint64_t **)a3;
    uint64_t v21 = *(void **)a7;
    int v22 = 0;
    if (a6)
    {
      uint64_t v23 = 1;
      while (1)
      {
        uint64_t v24 = *v19;
        if (*v19 != 1)
        {
          uint64_t result = 0;
          uint64_t v25 = (a2 & (*v20 >> 63)) + *v20;
          if (v25 < 0 || a2 <= v25) {
            return result;
          }
          if (v24 < 1 || ((1 << v25) & v22) != 0) {
            return 0;
          }
          uint64_t v27 = *(void *)&__src[8 * v25];
          uint64_t v28 = 0x8000000000000000;
          if (v27 != 0x8000000000000000) {
            uint64_t v28 = v27 / v24;
          }
          v22 |= 1 << v25;
          v21[v25] = v28;
          v23 *= *v19;
        }
        ++v20;
        ++v19;
        if (!--v18) {
          goto LABEL_33;
        }
      }
    }
    uint64_t v23 = 1;
    while (1)
    {
      uint64_t v32 = *v19;
      if (*v19 != 1)
      {
        uint64_t result = 0;
        uint64_t v33 = (a2 & (*v20 >> 63)) + *v20;
        if (v33 < 0 || a2 <= v33) {
          return result;
        }
        if (v32 < 1 || ((1 << v33) & v22) != 0) {
          return 0;
        }
        v22 |= 1 << v33;
        uint64_t v35 = 8 * v33;
        uint64_t v36 = *(void *)&__src[v35];
        uint64_t v37 = v36 * v32;
        if (v36 == 0x8000000000000000) {
          uint64_t v37 = *(void *)&__src[v35];
        }
        v21[(unint64_t)v35 / 8] = v37;
        v23 *= *v19;
      }
      ++v19;
      ++v20;
      if (!--v18) {
        goto LABEL_33;
      }
    }
  }
  uint64_t v23 = 1;
LABEL_33:
  uint64_t result = 0;
  uint64_t v29 = (a2 & (a4 >> 63)) + a4;
  if (v29 >= 0 && a2 > v29)
  {
    uint64_t v30 = *(void *)&__src[8 * v29];
    uint64_t v31 = 0x8000000000000000;
    if (v30 != 0x8000000000000000)
    {
      if (a6) {
        uint64_t v31 = v30 * v23;
      }
      else {
        uint64_t v31 = v30 / v23;
      }
    }
    *(void *)(*(void *)a7 + 8 * v29) = v31;
    return 1;
  }
  return result;
}

uint64_t mlir::emitOptionalError<char const(&)[16],unsigned long &,char const(&)[29],unsigned long &,char const(&)[2]>(uint64_t a1, char a2, char *a3, char **a4, char *a5, char **a6, char *a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v22);
  if (v22) {
    mlir::Diagnostic::append<char const(&)[20],unsigned long &,char const(&)[18],unsigned long,char const(&)[8]>((uint64_t)&v23, a3, a4, a5, a6, a7);
  }
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v22);
  if (v22) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
  }
  if (v30)
  {
    uint64_t v13 = (void **)__p;
    if (__p)
    {
      size_t v14 = v29;
      __int16 v15 = __p;
      if (v29 != __p)
      {
        do
          size_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        __int16 v15 = __p;
      }
      uint64_t v29 = v13;
      operator delete(v15);
    }
    uint64_t v16 = v26;
    if (v26)
    {
      unint64_t v17 = v27;
      uint64_t v18 = v26;
      if (v27 != v26)
      {
        do
        {
          unsigned int v20 = (void *)*--v17;
          uint64_t v19 = v20;
          *unint64_t v17 = 0;
          if (v20) {
            operator delete[](v19);
          }
        }
        while (v17 != v16);
        uint64_t v18 = v26;
      }
      uint64_t v27 = v16;
      operator delete(v18);
    }
    if (v24 != &v25) {
      free(v24);
    }
  }
  return v12;
}

uint64_t mlir::emitOptionalError<char const(&)[18],unsigned long &,char const(&)[3],unsigned long &>(uint64_t a1, char a2, char *a3, char **a4, char *a5, char **a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v20);
  if (v20) {
    mlir::Diagnostic::append<char const(&)[18],unsigned long long &,char const(&)[36],unsigned long long &>((uint64_t)&v21, a3, a4, a5, a6);
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v20);
  if (v20) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  }
  if (v28)
  {
    uint64_t v11 = (void **)__p;
    if (__p)
    {
      uint64_t v12 = v27;
      uint64_t v13 = __p;
      if (v27 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        uint64_t v13 = __p;
      }
      uint64_t v27 = v11;
      operator delete(v13);
    }
    size_t v14 = v24;
    if (v24)
    {
      __int16 v15 = v25;
      uint64_t v16 = v24;
      if (v25 != v24)
      {
        do
        {
          uint64_t v18 = (void *)*--v15;
          unint64_t v17 = v18;
          void *v15 = 0;
          if (v18) {
            operator delete[](v17);
          }
        }
        while (v15 != v14);
        uint64_t v16 = v24;
      }
      uint64_t v25 = v14;
      operator delete(v16);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v10;
}

uint64_t mlir::emitOptionalError<char const(&)[21],long long const&,char const(&)[37],long long const&,char const(&)[2]>(uint64_t a1, char a2, char *a3, char **a4, char *a5, char **a6, char *a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v22);
  if (v22) {
    mlir::Diagnostic::append<char const(&)[21],long long const&,char const(&)[37],long long const&,char const(&)[2]>((uint64_t)&v23, a3, a4, a5, a6, a7);
  }
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v22);
  if (v22) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
  }
  if (v30)
  {
    uint64_t v13 = (void **)__p;
    if (__p)
    {
      size_t v14 = v29;
      __int16 v15 = __p;
      if (v29 != __p)
      {
        do
          size_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        __int16 v15 = __p;
      }
      uint64_t v29 = v13;
      operator delete(v15);
    }
    uint64_t v16 = v26;
    if (v26)
    {
      unint64_t v17 = v27;
      uint64_t v18 = v26;
      if (v27 != v26)
      {
        do
        {
          uint64_t v20 = (void *)*--v17;
          uint64_t v19 = v20;
          *unint64_t v17 = 0;
          if (v20) {
            operator delete[](v19);
          }
        }
        while (v17 != v16);
        uint64_t v18 = v26;
      }
      uint64_t v27 = v16;
      operator delete(v18);
    }
    if (v24 != &v25) {
      free(v24);
    }
  }
  return v12;
}

uint64_t mlir::Diagnostic::append<char const(&)[21],long long const&,char const(&)[37],long long const&,char const(&)[2]>(uint64_t a1, char *__s, char **a3, char *a4, char **a5, char *a6)
{
  size_t v12 = strlen(__s);
  unint64_t v13 = *(void *)(a1 + 16);
  int v32 = 3;
  uint64_t v33 = __s;
  size_t v34 = v12;
  uint64_t v14 = *(unsigned int *)(a1 + 24);
  __int16 v15 = &v32;
  if (v14 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v26 = v14 + 1;
    BOOL v27 = v13 + 24 * v14 > (unint64_t)&v32;
    if (v13 <= (unint64_t)&v32 && v27)
    {
      char v30 = (char *)&v32 - v13;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v13 = *(void *)(a1 + 16);
      __int16 v15 = (int *)&v30[v13];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v26, 24);
      unint64_t v13 = *(void *)(a1 + 16);
      __int16 v15 = &v32;
    }
  }
  uint64_t v16 = v13 + 24 * *(unsigned int *)(a1 + 24);
  long long v17 = *(_OWORD *)v15;
  *(void *)(v16 + 16) = *((void *)v15 + 2);
  *(_OWORD *)uint64_t v16 = v17;
  unsigned int v18 = *(_DWORD *)(a1 + 28);
  uint64_t v19 = (*(_DWORD *)(a1 + 24) + 1);
  *(_DWORD *)(a1 + 24) = v19;
  uint64_t v20 = *a3;
  int v32 = 2;
  uint64_t v33 = v20;
  unint64_t v21 = *(void *)(a1 + 16);
  uint64_t v22 = &v32;
  if (v19 >= v18)
  {
    unint64_t v28 = v19 + 1;
    BOOL v29 = v21 + 24 * v19 > (unint64_t)&v32;
    if (v21 <= (unint64_t)&v32 && v29)
    {
      uint64_t v31 = (char *)&v32 - v21;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = (int *)&v31[v21];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v28, 24);
      unint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = &v32;
    }
  }
  uint64_t v23 = v21 + 24 * *(unsigned int *)(a1 + 24);
  long long v24 = *(_OWORD *)v22;
  *(void *)(v23 + 16) = *((void *)v22 + 2);
  *(_OWORD *)uint64_t v23 = v24;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[49],long long &,char const(&)[6]>(a1, a4, a5, a6);
}

uint64_t mlir::emitOptionalError<char const(&)[15],long long &,char const(&)[21],long long &>(uint64_t a1, char a2, char *a3, char **a4, char *a5, char **a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v20);
  if (v20) {
    mlir::Diagnostic::append<char const(&)[29],long long &,char const(&)[4],long long>((uint64_t)&v21, a3, a4, a5, a6);
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v20);
  if (v20) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  }
  if (v28)
  {
    uint64_t v11 = (void **)__p;
    if (__p)
    {
      size_t v12 = v27;
      unint64_t v13 = __p;
      if (v27 != __p)
      {
        do
          size_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        unint64_t v13 = __p;
      }
      BOOL v27 = v11;
      operator delete(v13);
    }
    uint64_t v14 = v24;
    if (v24)
    {
      __int16 v15 = v25;
      uint64_t v16 = v24;
      if (v25 != v24)
      {
        do
        {
          unsigned int v18 = (void *)*--v15;
          long long v17 = v18;
          void *v15 = 0;
          if (v18) {
            operator delete[](v17);
          }
        }
        while (v15 != v14);
        uint64_t v16 = v24;
      }
      uint64_t v25 = v14;
      operator delete(v16);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v10;
}

uint64_t mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[6],llvm::StringRef const&,char const(&)[7],mlir::Type,char const(&)[30]>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, uint64_t a6, char *a7, uint64_t *a8, const char *a9)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v25);
  if (v25) {
    mlir::Diagnostic::append<char const(&)[13],mlir::Type &,char const(&)[6],llvm::StringRef const&,char const(&)[7],mlir::Type,char const(&)[30]>((uint64_t)&v26, a3, a4, a5, a6, a7, a8, a9);
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v25);
  if (v25) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  }
  if (v33)
  {
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      long long v17 = v32;
      unsigned int v18 = __p;
      if (v32 != __p)
      {
        do
          long long v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        unsigned int v18 = __p;
      }
      int v32 = v16;
      operator delete(v18);
    }
    uint64_t v19 = v29;
    if (v29)
    {
      uint64_t v20 = v30;
      uint64_t v21 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v23 = (void *)*--v20;
          uint64_t v22 = v23;
          void *v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v29;
      }
      char v30 = v19;
      operator delete(v21);
    }
    if (v27 != &v28) {
      free(v27);
    }
  }
  return v15;
}

uint64_t mlir::Diagnostic::append<char const(&)[13],mlir::Type &,char const(&)[6],llvm::StringRef const&,char const(&)[7],mlir::Type,char const(&)[30]>(uint64_t a1, char *__s, uint64_t *a3, char *a4, uint64_t a5, char *a6, uint64_t *a7, const char *a8)
{
  size_t v16 = strlen(__s);
  uint64_t v17 = a1 + 16;
  unint64_t v18 = *(void *)(a1 + 16);
  int v27 = 3;
  uint64_t v28 = __s;
  size_t v29 = v16;
  uint64_t v19 = *(unsigned int *)(a1 + 24);
  uint64_t v20 = &v27;
  if (v19 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v24 = v19 + 1;
    BOOL v25 = v18 + 24 * v19 > (unint64_t)&v27;
    if (v18 <= (unint64_t)&v27 && v25)
    {
      uint64_t v26 = (char *)&v27 - v18;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17, (void *)(a1 + 32), v24, 24);
      unint64_t v18 = *(void *)(a1 + 16);
      uint64_t v20 = (int *)&v26[v18];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17, (void *)(a1 + 32), v24, 24);
      unint64_t v18 = *(void *)(a1 + 16);
      uint64_t v20 = &v27;
    }
  }
  uint64_t v21 = v18 + 24 * *(unsigned int *)(a1 + 24);
  long long v22 = *(_OWORD *)v20;
  *(void *)(v21 + 16) = *((void *)v20 + 2);
  *(_OWORD *)uint64_t v21 = v22;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<mlir::Type &,char const(&)[6],llvm::StringRef const&,char const(&)[7],mlir::Type,char const(&)[30]>(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t mlir::Diagnostic::append<mlir::Type &,char const(&)[6],llvm::StringRef const&,char const(&)[7],mlir::Type,char const(&)[30]>(uint64_t a1, uint64_t *a2, char *a3, uint64_t a4, char *a5, uint64_t *a6, const char *a7)
{
  unint64_t v13 = v23;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v23, *a2);
  uint64_t v14 = a1 + 16;
  unint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(unsigned int *)(a1 + 24);
  if (v16 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v20 = v16 + 1;
    BOOL v21 = v15 + 24 * v16 > (unint64_t)v23;
    if (v15 <= (unint64_t)v23 && v21)
    {
      long long v22 = &v23[-v15];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(a1 + 32), v20, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      unint64_t v13 = &v22[v15];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(a1 + 32), v20, 24);
      unint64_t v15 = *(void *)(a1 + 16);
      unint64_t v13 = v23;
    }
  }
  unint64_t v17 = v15 + 24 * *(unsigned int *)(a1 + 24);
  long long v18 = *(_OWORD *)v13;
  *(void *)(v17 + 16) = *((void *)v13 + 2);
  *(_OWORD *)unint64_t v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[6],llvm::StringRef const&,char const(&)[7],mlir::Type,char const(&)[30]>(a1, a3, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<char const(&)[6],llvm::StringRef const&,char const(&)[7],mlir::Type,char const(&)[30]>(uint64_t a1, char *__s, uint64_t a3, char *a4, uint64_t *a5, const char *a6)
{
  size_t v12 = strlen(__s);
  uint64_t v13 = a1 + 16;
  unint64_t v14 = *(void *)(a1 + 16);
  LODWORD(v24) = 3;
  BOOL v25 = __s;
  size_t v26 = v12;
  uint64_t v15 = *(unsigned int *)(a1 + 24);
  uint64_t v16 = &v24;
  if (v15 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v21 = v15 + 1;
    BOOL v22 = v14 + 24 * v15 > (unint64_t)&v24;
    if (v14 <= (unint64_t)&v24 && v22)
    {
      uint64_t v23 = (char *)&v24 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v21, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      uint64_t v16 = (const void ***)&v23[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v21, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      uint64_t v16 = &v24;
    }
  }
  uint64_t v17 = v14 + 24 * *(unsigned int *)(a1 + 24);
  long long v18 = *(_OWORD *)v16;
  *(void *)(v17 + 16) = v16[2];
  *(_OWORD *)uint64_t v17 = v18;
  ++*(_DWORD *)(a1 + 24);
  __int16 v27 = 261;
  uint64_t v19 = *(char **)(a3 + 8);
  unint64_t v24 = *(const void ***)a3;
  BOOL v25 = v19;
  mlir::Diagnostic::operator<<(a1, &v24);
  return mlir::Diagnostic::append<char const(&)[6],mlir::Type &,char const(&)[30]>(a1, a4, a5, a6);
}

uint64_t mlir::mps::anonymous namespace'::inferConv2DShape(uint64_t a1, char a2, uint64_t *a3, char *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v41 = a4;
  if (a4 != (char *)4) {
    return mlir::emitOptionalError<char const(&)[19],unsigned long &,char const(&)[11]>(a1, a2, "conv2D input rank ", &v41, "must be 4 ");
  }
  unsigned int v11 = *(_DWORD *)(a6 + 8);
  if (v11 <= 3)
  {
    if (*(_DWORD *)(a6 + 12) > 3u
      || (llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), 4uLL, 8),
          unsigned int v11 = *(_DWORD *)(a6 + 8),
          v11 != 4))
    {
      bzero((void *)(*(void *)a6 + 8 * v11), 32 - 8 * v11);
    }
  }
  *(_DWORD *)(a6 + 8) = 0;
  uint64_t v12 = *a3;
  if (*(_DWORD *)(a6 + 12))
  {
    uint64_t v13 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), 1uLL, 8);
    uint64_t v13 = *(unsigned int *)(a6 + 8);
  }
  *(void *)(*(void *)a6 + 8 * v13) = v12;
  unsigned int v14 = *(_DWORD *)(a6 + 12);
  uint64_t v15 = (*(_DWORD *)(a6 + 8) + 1);
  *(_DWORD *)(a6 + 8) = v15;
  uint64_t v16 = a3[1];
  if (v15 >= v14)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a6 + 8);
  }
  *(void *)(*(void *)a6 + 8 * v15) = v16;
  unsigned int v17 = *(_DWORD *)(a6 + 12);
  uint64_t v18 = (*(_DWORD *)(a6 + 8) + 1);
  *(_DWORD *)(a6 + 8) = v18;
  uint64_t v19 = a3[2];
  if (v18 >= v17)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a6 + 8);
  }
  *(void *)(*(void *)a6 + 8 * v18) = v19;
  unsigned int v20 = *(_DWORD *)(a6 + 12);
  uint64_t v21 = (*(_DWORD *)(a6 + 8) + 1);
  *(_DWORD *)(a6 + 8) = v21;
  uint64_t v22 = a3[3];
  if (v21 >= v20)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a6 + 8);
  }
  *(void *)(*(void *)a6 + 8 * v21) = v22;
  uint64_t v23 = (*(_DWORD *)(a6 + 8) + 1);
  *(_DWORD *)(a6 + 8) = v23;
  uint64_t v24 = a5[1];
  uint64_t v25 = 0x8000000000000000;
  uint64_t v26 = 0x8000000000000000;
  if (v24 == 0x8000000000000000)
  {
    uint64_t v27 = *a5;
    if (*a5 == 0x8000000000000000) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v26 = (a5[11] + v24 + a5[12] + a5[7] + ~((a5[3] - 1) * a5[9])) / a5[7];
    uint64_t v27 = *a5;
    if (*a5 == 0x8000000000000000)
    {
LABEL_16:
      uint64_t v28 = *(void *)a6;
      int v29 = *((_DWORD *)a5 + 31);
      if (v29) {
        goto LABEL_17;
      }
LABEL_35:
      if (v23)
      {
        int v36 = 0;
        if (v25 <= 0) {
          uint64_t v25 = 0x8000000000000000;
        }
        if (v26 <= 0) {
          uint64_t v26 = 0x8000000000000000;
        }
        uint64_t v37 = 8 * v23;
        uint64_t v38 = v28 - 8;
        size_t v39 = a3 + 3;
        do
        {
          uint64_t v40 = v26;
          if (v36)
          {
            if (v36 == 2)
            {
              uint64_t v40 = a5[5];
              if (v40 <= 0) {
                uint64_t v40 = 0x8000000000000000;
              }
            }
            else
            {
              uint64_t v40 = v25;
              if (v36 != 1) {
                uint64_t v40 = *v39;
              }
            }
          }
          *(void *)(v38 + v37) = v40;
          ++v36;
          --v39;
          v37 -= 8;
        }
        while (v37);
      }
      return 1;
    }
  }
  uint64_t v25 = (v27 + ~((a5[4] - 1) * a5[10]) + a5[13] + a5[14] + a5[8]) / a5[8];
  uint64_t v28 = *(void *)a6;
  int v29 = *((_DWORD *)a5 + 31);
  if (!v29) {
    goto LABEL_35;
  }
LABEL_17:
  if (v29 == 1)
  {
    if (v23)
    {
      int v30 = 0;
      if (v25 <= 0) {
        uint64_t v25 = 0x8000000000000000;
      }
      if (v26 <= 0) {
        uint64_t v26 = 0x8000000000000000;
      }
      uint64_t v31 = 8 * v23;
      uint64_t v32 = v28 - 8;
      char v33 = a3 + 3;
      do
      {
        uint64_t v34 = v25;
        if (v30 != 2)
        {
          uint64_t v34 = v26;
          if (v30 != 1)
          {
            if (v30)
            {
              uint64_t v34 = *v33;
            }
            else
            {
              uint64_t v34 = a5[5];
              if (v34 <= 0) {
                uint64_t v34 = 0x8000000000000000;
              }
            }
          }
        }
        *(void *)(v32 + v31) = v34;
        ++v30;
        --v33;
        v31 -= 8;
      }
      while (v31);
    }
    return 1;
  }

  return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "unrecognized input dataLayout to conv2D");
}

uint64_t mlir::emitOptionalError<char const(&)[19],unsigned long &,char const(&)[11]>(uint64_t a1, char a2, char *a3, char **a4, char *a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v18);
  if (v18) {
    mlir::Diagnostic::append<char const(&)[18],unsigned long,char const(&)[8]>((uint64_t)&v19, a3, a4, a5);
  }
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v18);
  if (v18) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v18);
  }
  if (v26)
  {
    unsigned int v9 = (void **)__p;
    if (__p)
    {
      uint64_t v10 = v25;
      unsigned int v11 = __p;
      if (v25 != __p)
      {
        do
          uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        unsigned int v11 = __p;
      }
      uint64_t v25 = v9;
      operator delete(v11);
    }
    uint64_t v12 = v22;
    if (v22)
    {
      uint64_t v13 = v23;
      unsigned int v14 = v22;
      if (v23 != v22)
      {
        do
        {
          uint64_t v16 = (void *)*--v13;
          uint64_t v15 = v16;
          void *v13 = 0;
          if (v16) {
            operator delete[](v15);
          }
        }
        while (v13 != v12);
        unsigned int v14 = v22;
      }
      uint64_t v23 = v12;
      operator delete(v14);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v8;
}

void *std::__function::__func<mlir::mps::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EC9CF3A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mlir::mps::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EC9CF3A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mlir::mps::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, void **a2, void **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(**a2 + 8))
  {
    uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
    uint64_t v25 = v4;
    uint64_t v26 = v6;
    uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
    if (v7)
    {
LABEL_3:
      uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
      uint64_t v9 = 0;
      uint64_t v23 = v5;
      uint64_t v24 = v8;
      if (!v4) {
        return v9;
      }
      goto LABEL_7;
    }
  }
  uint64_t v5 = 0;
  uint64_t v9 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = v7;
  if (!v4) {
    return v9;
  }
LABEL_7:
  if (!v5) {
    return v9;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v25);
  uint64_t v27 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v23);
  uint64_t v28 = OperandRange;
  uint64_t v12 = *(void *)(v10 + 24);
  if (v12)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v28, &v27))
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v23)) {
        return 1;
      }
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v25))
      {
        ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v25);
        uint64_t v15 = v14;
        uint64_t v16 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v23);
        if (v15 == v17)
        {
          if (v15)
          {
            uint64_t v18 = 8 * v15 - 8;
            do
            {
              uint64_t v19 = v18;
              BOOL v20 = *ArgAttrsAttr == *v16 || *v16 == 0x8000000000000000;
              uint64_t v9 = v20;
              if (!v20) {
                break;
              }
              ++ArgAttrsAttr;
              ++v16;
              v18 -= 8;
              uint64_t v9 = 1;
            }
            while (v19);
            return v9;
          }
          return 1;
        }
      }
    }
    return 0;
  }
  uint64_t v22 = std::__throw_bad_function_call[abi:nn180100]();
}

uint64_t std::__function::__func<mlir::mps::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir3mps12_GLOBAL__N_123areMoreSpecializedTypesENS_9TypeRangeES2_NSt3__18functionIFbNS_4TypeES5_EEEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4mlir3mps12_GLOBAL__N_123areMoreSpecializedTypesENS_9TypeRangeES2_NSt3__18functionIFbN"
                                "S_4TypeES5_EEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir3mps12_GLOBAL__N_123areMoreSpecializedTypesENS_9TypeRangeES2_NSt3__18functionIFbNS_4TypeES5_EEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir3mps12_GLOBAL__N_123areMoreSpecializedTypesENS_9TypeRangeES2_NSt3__18functionIFbNS_4TypeES5_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mlir::mps::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::target_type()
{
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::ExternalCanonicalizeInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalCanonicalizeInterface,mlir::Operation *,void>>::doCastIfPossible(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4)
  {
    uint64_t v16 = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!Values || !mlir::Dialect::getRegisteredInterfaceForOp<mlir::ExternalCanonicalizeInterface>(Values, v2)) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    if (!mlir::detail::InterfaceMap::lookup<mlir::ExternalCanonicalizeInterface>(v6 + 32)
      && !mlir::Dialect::getRegisteredInterfaceForOp<mlir::ExternalCanonicalizeInterface>(*(void *)(v6 + 24), *(void *)(v1 + 48)))
    {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void **)(v8 + 16);
  BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v1 + 48);
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!v14) {
      return v1;
    }
    uint64_t v15 = v8;
  }
  else
  {
    unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::ExternalCanonicalizeInterface>(v12 + 32)) {
      return v1;
    }
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v1 + 48);
  }
  mlir::Dialect::getRegisteredInterfaceForOp<mlir::ExternalCanonicalizeInterface>(v14, v15);
  return v1;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::ExternalCanonicalizeInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ExternalCanonicalizeInterface]";
      unint64_t v17 = 85;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      uint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::ExternalCanonicalizeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 1928), v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::ExternalCanonicalizeInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ExternalCanonicalizeInterface]";
      unint64_t v22 = 85;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::ExternalCanonicalizeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 1928);
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4)
  {
    uint64_t v16 = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!Values || !mlir::Dialect::getRegisteredInterfaceForOp<mlir::ExternalFoldInterface>(Values, v2)) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    if (!mlir::detail::InterfaceMap::lookup<mlir::ExternalFoldInterface>(v6 + 32)
      && !mlir::Dialect::getRegisteredInterfaceForOp<mlir::ExternalFoldInterface>(*(void *)(v6 + 24), *(void *)(v1 + 48)))
    {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v1 + 48);
  unint64_t v9 = *(void **)(v8 + 16);
  BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v1 + 48);
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!v14) {
      return v1;
    }
    uint64_t v15 = v8;
  }
  else
  {
    unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::ExternalFoldInterface>(v12 + 32)) {
      return v1;
    }
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v1 + 48);
  }
  mlir::Dialect::getRegisteredInterfaceForOp<mlir::ExternalFoldInterface>(v14, v15);
  return v1;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::ExternalFoldInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ExternalFoldInterface]";
      unint64_t v17 = 77;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      unint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::ExternalFoldInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 1904), v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::ExternalFoldInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ExternalFoldInterface]";
      unint64_t v22 = 77;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::ExternalFoldInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 1904);
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

uint64_t _ZN4llvm12function_refIFN4mlir18InFlightDiagnosticEvEE11callback_fnIZNS1_9AsmParser10getCheckedINS1_3mps19MPSBufferTensorAttrEJPNS1_11MLIRContextENS1_16RankedTensorTypeENS8_28MPSDialectResourceBlobHandleEyEEEDaNS_5SMLocEDpOT0_EUlvE_EES2_l(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)a1[1];
  __int16 v5 = 257;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v1 + 24))(v1, v2, v4);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps7(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps8(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps10(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps11(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps13(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps14(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps15(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps16(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps17(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps18(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps19(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps20(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps21(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps22(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps23(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps24(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps25(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps26(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps27(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps28(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps29(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps30(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps31(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps32(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps33(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps34(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps35(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps36(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps37(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps38(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps39(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps40(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps41(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps42(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::__mlir_ods_local_attr_constraint_MPSOps43(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mps::AssignVariableOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AssignVariableOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DowngraderInterfaceInterfaceTraits::Model<mlir::mps::AssignVariableOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mps.assign_variable", 19, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::AssignVariableOp,void>::id, (uint64_t)&v9);
  unint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    __int16 v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *uint64_t v2 = &unk_1EC9B11E0;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mps::CallOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::CallOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DowngraderInterfaceInterfaceTraits::Model<mlir::mps::CallOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mps.call", 8, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::CallOp,void>::id, (uint64_t)&v9);
  unint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    __int16 v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *uint64_t v2 = &unk_1EC9B4F98;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mps::CallOp::getAttributeNames(void)::attrNames, 2);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mps::ConstantOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::ConstantOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ConstantOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mps.constant", 12, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id, (uint64_t)&v9);
  unint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    __int16 v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *uint64_t v2 = &unk_1EC9AD298;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mps::MaterializeSparseTensorOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::MaterializeSparseTensorOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::MaterializeSparseTensorOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mps.materialize_sparse_tensor", 29, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MaterializeSparseTensorOp,void>::id, (uint64_t)&v9);
  unint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    __int16 v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *uint64_t v2 = &unk_1EC9B3CD8;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mps::MaterializeSparseTensorOp::getAttributeNames(void)::attrNames, 1);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mps::PlaceholderOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::PlaceholderOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mps.placeholder", 15, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::PlaceholderOp,void>::id, (uint64_t)&v9);
  unint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    __int16 v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *uint64_t v2 = &unk_1EC9AF368;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mps::UnrealizedFoldOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::UnrealizedFoldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DowngraderInterfaceInterfaceTraits::Model<mlir::mps::UnrealizedFoldOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mps.unrealized_fold", 19, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::UnrealizedFoldOp,void>::id, (uint64_t)&v9);
  unint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    __int16 v5 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *uint64_t v2 = &unk_1EC9B1820;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.acos", 8, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::ACosOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9B4D40;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        int v11 = v13;
      }
      else {
        int v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::ACosOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        int v11 = v12;
      }
      else {
        int v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      int v11 = v32;
      int v12 = __p;
      if (v32 != __p)
      {
        do
          int v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        int v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          unint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    int v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    int v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    int v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  v14[0] = a4;
  v14[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(void **)a11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ACosOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACosOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ACosOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v20[0] = v21;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  v21[0] = 0;
  v20[1] = (void *)0x400000001;
  v21[0] = *(void *)(mlir::ValueRange::dereference_iterator(&v24, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v19, (uint64_t)v21, 1uLL);
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  v22[0] = &unk_1EC9CE8F0;
  uint64_t v23 = v22;
  unsigned int v26 = &v24;
  uint64_t v24 = (const char *)&unk_1EC9CE8F0;
  if (v26 == &v24)
  {
    (*((void (**)(const char **))v24 + 4))(&v24);
    unint64_t v14 = v23;
    if (v23 != v22) {
      goto LABEL_5;
    }
LABEL_11:
    (*(void (**)(void *))(v22[0] + 32))(v22);
    if (v13) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  if (v26) {
    (*((void (**)(const char **))*v26 + 5))(v26);
  }
  unint64_t v14 = v23;
  if (v23 == v22) {
    goto LABEL_11;
  }
LABEL_5:
  if (v14) {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  if (v13)
  {
LABEL_8:
    uint64_t v15 = 1;
    unint64_t v16 = v20[0];
    if (v20[0] == v21) {
      return v15;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v24 = "mps.acos";
  uint64_t v25 = 8;
  uint64_t v15 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)&v24, "' op inferred type(s) ", (uint64_t)v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v16 = v20[0];
  if (v20[0] != v21) {
LABEL_13:
  }
    free(v16);
  return v15;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::ACosOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::ACosOp>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::mps::detail::ACosOpGenericAdaptorBase::ACosOpGenericAdaptorBase((uint64_t)v14, this);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)this);
  v13[0] = result;
  v13[1] = v9;
  if (result)
  {
    unint64_t v10 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v13, v15, v16);
    if (v10 < 8)
    {
      return 0;
    }
    else
    {
      if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v10 & ((uint64_t)(v10 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          unint64_t v12 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          unint64_t v10 = v12;
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v210 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      uint64_t v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v223 = 81;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      uint64_t v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v223 = 104;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      unint64_t v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = *(void *)(v5 + 2896);
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      long long v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[12];
  unint64_t v9 = 0x1E8EB8000uLL;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    unint64_t v9 = 0x1E8EB8000;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v223 = 82;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      uint64_t v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      unint64_t v9 = 0x1E8EB8000;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = *(void *)(v9 + 4080);
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      unint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      unint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = *(void *)(v13 + 3904);
  uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultElementType<Empty>]";
      unint64_t v223 = 104;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      int64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultElementType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[22];
  uint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    uint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      unint64_t v223 = 97;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      uint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[21];
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Stitchable<Empty>]";
      unint64_t v223 = 82;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      uint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = *(void *)(v19 + 2032);
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface::Trait<Empty>]";
      unint64_t v223 = 100;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      __int16 v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = *(void *)(v21 + 3984);
  unint64_t v23 = 0x1E8EB8000uLL;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    unint64_t v23 = 0x1E8EB8000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v223 = 90;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      uint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      unint64_t v23 = 0x1E8EB8000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || *(void *)(v23 + 3856) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::ACosOp>,mlir::OpTrait::OneResult<mlir::mps::ACosOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::ACosOp>,mlir::OpTrait::ZeroSuccessors<mlir::mps::ACosOp>,mlir::OpTrait::OneOperand<mlir::mps::ACosOp>,mlir::OpTrait::OpInvariants<mlir::mps::ACosOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::mps::ACosOp>,mlir::OpTrait::Stitchable<mlir::mps::ACosOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::ACosOp>,mlir::InferTypeOpInterface::Trait<mlir::mps::ACosOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::ACosOp>,mlir::OpTrait::OneResult<mlir::mps::ACosOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::ACosOp>,mlir::OpTrait::ZeroSuccessors<mlir::mps::ACosOp>,mlir::OpTrait::OneOperand<mlir::mps::ACosOp>,mlir::OpTrait::OpInvariants<mlir::mps::ACosOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::mps::ACosOp>,mlir::OpTrait::Stitchable<mlir::mps::ACosOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::ACosOp>,mlir::InferTypeOpInterface::Trait<mlir::mps::ACosOp>>(uint64_t a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    && mlir::OpTrait::impl::verifyOneResult((mlir::OpTrait::impl *)a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand((mlir::OpTrait::impl *)a1, v5)
    && mlir::mps::__mlir_ods_local_type_constraint_MPSOps0((uint64_t *)a1, (const void **)(*(void *)(*(void *)(*(void *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0)&& (*(_DWORD *)(a1 + 36) ? (uint64_t v6 = a1 - 16) : (uint64_t v6 = 0), (NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0), mlir::mps::__mlir_ods_local_type_constraint_MPSOps0((uint64_t *)a1, (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0))&& mlir::OpTrait::impl::verifySameOperandsAndResultElementType((mlir::OpTrait::impl *)a1, v8)))
  {
    return mlir::OpTrait::impl::verifySameOperandsAndResultType((mlir::OpTrait::impl *)a1, v9) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::mps::ACosOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.acosh", 9, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::ACoshOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9B5E70;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::ACoshOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      uint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  v14[0] = a4;
  v14[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(void **)a11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ACoshOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ACoshOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ACoshOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v20[0] = v21;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  v21[0] = 0;
  v20[1] = (void *)0x400000001;
  v21[0] = *(void *)(mlir::ValueRange::dereference_iterator(&v24, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v19, (uint64_t)v21, 1uLL);
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  v22[0] = &unk_1EC9CE8F0;
  uint64_t v23 = v22;
  unsigned int v26 = &v24;
  uint64_t v24 = (const char *)&unk_1EC9CE8F0;
  if (v26 == &v24)
  {
    (*((void (**)(const char **))v24 + 4))(&v24);
    unint64_t v14 = v23;
    if (v23 != v22) {
      goto LABEL_5;
    }
LABEL_11:
    (*(void (**)(void *))(v22[0] + 32))(v22);
    if (v13) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  if (v26) {
    (*((void (**)(const char **))*v26 + 5))(v26);
  }
  unint64_t v14 = v23;
  if (v23 == v22) {
    goto LABEL_11;
  }
LABEL_5:
  if (v14) {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  if (v13)
  {
LABEL_8:
    uint64_t v15 = 1;
    uint64_t v16 = v20[0];
    if (v20[0] == v21) {
      return v15;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v24 = "mps.acosh";
  uint64_t v25 = 9;
  uint64_t v15 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)&v24, "' op inferred type(s) ", (uint64_t)v20, " are incompatible with return type(s) of operation ", a11);
  uint64_t v16 = v20[0];
  if (v20[0] != v21) {
LABEL_13:
  }
    free(v16);
  return v15;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::ACoshOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::ACoshOp>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::mps::detail::ACoshOpGenericAdaptorBase::ACoshOpGenericAdaptorBase((uint64_t)v14, this);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)this);
  v13[0] = result;
  v13[1] = v9;
  if (result)
  {
    unint64_t v10 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v13, v15, v16);
    if (v10 < 8)
    {
      return 0;
    }
    else
    {
      if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v10 & ((uint64_t)(v10 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          unint64_t v12 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          unint64_t v10 = v12;
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::ACosOp>,mlir::OpTrait::OneResult<mlir::mps::ACosOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::ACosOp>,mlir::OpTrait::ZeroSuccessors<mlir::mps::ACosOp>,mlir::OpTrait::OneOperand<mlir::mps::ACosOp>,mlir::OpTrait::OpInvariants<mlir::mps::ACosOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::mps::ACosOp>,mlir::OpTrait::Stitchable<mlir::mps::ACosOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::ACosOp>,mlir::InferTypeOpInterface::Trait<mlir::mps::ACosOp>>(a1, a2);
}

BOOL mlir::Op<mlir::mps::ACoshOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.asin", 8, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::ASinOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9B4E08;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::ASinOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  v14[0] = a4;
  v14[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(void **)a11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ASinOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ASinOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v20[0] = v21;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  v21[0] = 0;
  v20[1] = (void *)0x400000001;
  v21[0] = *(void *)(mlir::ValueRange::dereference_iterator(&v24, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v19, (uint64_t)v21, 1uLL);
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  v22[0] = &unk_1EC9CE8F0;
  uint64_t v23 = v22;
  unsigned int v26 = &v24;
  uint64_t v24 = (const char *)&unk_1EC9CE8F0;
  if (v26 == &v24)
  {
    (*((void (**)(const char **))v24 + 4))(&v24);
    unint64_t v14 = v23;
    if (v23 != v22) {
      goto LABEL_5;
    }
LABEL_11:
    (*(void (**)(void *))(v22[0] + 32))(v22);
    if (v13) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  if (v26) {
    (*((void (**)(const char **))*v26 + 5))(v26);
  }
  unint64_t v14 = v23;
  if (v23 == v22) {
    goto LABEL_11;
  }
LABEL_5:
  if (v14) {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  if (v13)
  {
LABEL_8:
    uint64_t v15 = 1;
    uint64_t v16 = v20[0];
    if (v20[0] == v21) {
      return v15;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v24 = "mps.asin";
  uint64_t v25 = 8;
  uint64_t v15 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)&v24, "' op inferred type(s) ", (uint64_t)v20, " are incompatible with return type(s) of operation ", a11);
  uint64_t v16 = v20[0];
  if (v20[0] != v21) {
LABEL_13:
  }
    free(v16);
  return v15;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::ASinOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::ASinOp>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::mps::detail::ASinOpGenericAdaptorBase::ASinOpGenericAdaptorBase((uint64_t)v14, this);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)this);
  v13[0] = result;
  v13[1] = v9;
  if (result)
  {
    unint64_t v10 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v13, v15, v16);
    if (v10 < 8)
    {
      return 0;
    }
    else
    {
      if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v10 & ((uint64_t)(v10 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          unint64_t v12 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          unint64_t v10 = v12;
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::ACosOp>,mlir::OpTrait::OneResult<mlir::mps::ACosOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::ACosOp>,mlir::OpTrait::ZeroSuccessors<mlir::mps::ACosOp>,mlir::OpTrait::OneOperand<mlir::mps::ACosOp>,mlir::OpTrait::OpInvariants<mlir::mps::ACosOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::mps::ACosOp>,mlir::OpTrait::Stitchable<mlir::mps::ACosOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::ACosOp>,mlir::InferTypeOpInterface::Trait<mlir::mps::ACosOp>>(a1, a2);
}

BOOL mlir::Op<mlir::mps::ASinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.asinh", 9, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::ASinhOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9B5F38;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::ASinhOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  v14[0] = a4;
  v14[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(void **)a11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ASinhOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ASinhOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ASinhOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v20[0] = v21;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  v21[0] = 0;
  v20[1] = (void *)0x400000001;
  v21[0] = *(void *)(mlir::ValueRange::dereference_iterator(&v24, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v19, (uint64_t)v21, 1uLL);
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  v22[0] = &unk_1EC9CE8F0;
  uint64_t v23 = v22;
  unsigned int v26 = &v24;
  uint64_t v24 = (const char *)&unk_1EC9CE8F0;
  if (v26 == &v24)
  {
    (*((void (**)(const char **))v24 + 4))(&v24);
    unint64_t v14 = v23;
    if (v23 != v22) {
      goto LABEL_5;
    }
LABEL_11:
    (*(void (**)(void *))(v22[0] + 32))(v22);
    if (v13) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  if (v26) {
    (*((void (**)(const char **))*v26 + 5))(v26);
  }
  unint64_t v14 = v23;
  if (v23 == v22) {
    goto LABEL_11;
  }
LABEL_5:
  if (v14) {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  if (v13)
  {
LABEL_8:
    uint64_t v15 = 1;
    uint64_t v16 = v20[0];
    if (v20[0] == v21) {
      return v15;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v24 = "mps.asinh";
  uint64_t v25 = 9;
  uint64_t v15 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)&v24, "' op inferred type(s) ", (uint64_t)v20, " are incompatible with return type(s) of operation ", a11);
  uint64_t v16 = v20[0];
  if (v20[0] != v21) {
LABEL_13:
  }
    free(v16);
  return v15;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::ASinhOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::ASinhOp>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::mps::detail::ASinhOpGenericAdaptorBase::ASinhOpGenericAdaptorBase((uint64_t)v14, this);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)this);
  v13[0] = result;
  v13[1] = v9;
  if (result)
  {
    unint64_t v10 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v13, v15, v16);
    if (v10 < 8)
    {
      return 0;
    }
    else
    {
      if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v10 & ((uint64_t)(v10 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          unint64_t v12 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          unint64_t v10 = v12;
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::ACosOp>,mlir::OpTrait::OneResult<mlir::mps::ACosOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::ACosOp>,mlir::OpTrait::ZeroSuccessors<mlir::mps::ACosOp>,mlir::OpTrait::OneOperand<mlir::mps::ACosOp>,mlir::OpTrait::OpInvariants<mlir::mps::ACosOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::mps::ACosOp>,mlir::OpTrait::Stitchable<mlir::mps::ACosOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::ACosOp>,mlir::InferTypeOpInterface::Trait<mlir::mps::ACosOp>>(a1, a2);
}

BOOL mlir::Op<mlir::mps::ASinhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.atan2", 9, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::ATan2Op,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9B6000;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::ATan2Op::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>::inferReturnTypes(mlir::Float32Type *a1, uint64_t a2, uint64_t a3, mlir::MLIRContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>::refineReturnTypes(mlir::Float32Type *a1, uint64_t a2, char a3, mlir::MLIRContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ATan2Op>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ATan2Op>::refineReturnTypes(mlir::Float32Type *a1, uint64_t a2, char a3, mlir::MLIRContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  {
    mlir::ValueRange::ValueRange(v19, (uint64_t)v20, v21);
    mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
    v23[0] = &unk_1EC9CE8F0;
    uint64_t v24 = v23;
    unsigned int v26 = v25;
    v25[0] = &unk_1EC9CE8F0;
    if (v26 == v25)
    {
      (*(void (**)(void *))(v25[0] + 32))(v25);
      unint64_t v14 = v24;
      if (v24 != v23) {
        goto LABEL_6;
      }
    }
    else
    {
      if (v26) {
        (*(void (**)(void *))(*v26 + 40))(v26);
      }
      unint64_t v14 = v24;
      if (v24 != v23)
      {
LABEL_6:
        if (v14) {
          (*(void (**)(void *))(*v14 + 40))(v14);
        }
        if (v13)
        {
LABEL_9:
          uint64_t v15 = 1;
          uint64_t v16 = v20;
          if (v20 == v22) {
            return v15;
          }
          goto LABEL_12;
        }
        goto LABEL_16;
      }
    }
    (*(void (**)(void *))(v23[0] + 32))(v23);
    if (v13) {
      goto LABEL_9;
    }
LABEL_16:
    v25[0] = "mps.atan2";
    v25[1] = 9;
    uint64_t v15 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)v25, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
    uint64_t v16 = v20;
    if (v20 == v22) {
      return v15;
    }
    goto LABEL_12;
  }
  uint64_t v15 = 0;
  uint64_t v16 = v20;
  if (v20 != v22) {
LABEL_12:
  }
    free(v16);
  return v15;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      char v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ATan2Op>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::ATan2Op>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::ATan2Op>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::mps::detail::ATan2OpGenericAdaptorBase::ATan2OpGenericAdaptorBase((uint64_t)v14, this);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)this);
  v13[0] = result;
  v13[1] = v9;
  if (result)
  {
    unint64_t v10 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v13, v15, v16);
    if (v10 < 8)
    {
      return 0;
    }
    else
    {
      if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v10 & ((uint64_t)(v10 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          unint64_t v12 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          unint64_t v10 = v12;
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v210 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      uint64_t v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v223 = 81;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      uint64_t v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v223 = 104;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      unint64_t v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = *(void *)(v5 + 2896);
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      long long v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[12];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v223 = 90;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      uint64_t v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[24];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      unint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      unint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = *(void *)(v13 + 3904);
  uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultElementType<Empty>]";
      unint64_t v223 = 104;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      int64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultElementType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[22];
  uint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    uint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ResultsBroadcastableShape<Empty>]";
      unint64_t v223 = 97;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      uint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ResultsBroadcastableShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ResultsBroadcastableShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[20];
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Stitchable<Empty>]";
      unint64_t v223 = 82;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      uint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = *(void *)(v19 + 2032);
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v223 = 90;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      __int16 v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = *(void *)(v21 + 3856);
  unint64_t v23 = 0x1E8EB8000uLL;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    unint64_t v23 = 0x1E8EB8000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface::Trait<Empty>]";
      unint64_t v223 = 100;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      uint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      unint64_t v23 = 0x1E8EB8000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || *(void *)(v23 + 3984) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::ATan2Op>,mlir::OpTrait::OneResult<mlir::mps::ATan2Op>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::ATan2Op>,mlir::OpTrait::ZeroSuccessors<mlir::mps::ATan2Op>,mlir::OpTrait::NOperands<2u>::Impl<mlir::mps::ATan2Op>,mlir::OpTrait::OpInvariants<mlir::mps::ATan2Op>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::ATan2Op>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::mps::ATan2Op>,mlir::OpTrait::ResultsBroadcastableShape<mlir::mps::ATan2Op>,mlir::OpTrait::Stitchable<mlir::mps::ATan2Op>,mlir::InferTypeOpInterface::Trait<mlir::mps::ATan2Op>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::ATan2Op>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::ATan2Op>,mlir::OpTrait::OneResult<mlir::mps::ATan2Op>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::ATan2Op>,mlir::OpTrait::ZeroSuccessors<mlir::mps::ATan2Op>,mlir::OpTrait::NOperands<2u>::Impl<mlir::mps::ATan2Op>,mlir::OpTrait::OpInvariants<mlir::mps::ATan2Op>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::ATan2Op>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::mps::ATan2Op>,mlir::OpTrait::ResultsBroadcastableShape<mlir::mps::ATan2Op>,mlir::OpTrait::Stitchable<mlir::mps::ATan2Op>,mlir::InferTypeOpInterface::Trait<mlir::mps::ATan2Op>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::ATan2Op>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v8 = a1, mlir::mps::ATan2Op::verifyInvariantsImpl((uint64_t **)&v8))
    && mlir::OpTrait::impl::verifySameOperandsAndResultElementType(a1, v5))
  {
    return mlir::OpTrait::impl::verifyCompatibleOperandBroadcast(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::mps::ATan2Op,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.atan", 8, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::ATanOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9B4ED0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::ATanOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      uint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  v14[0] = a4;
  v14[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(void **)a11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ATanOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ATanOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v20[0] = v21;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  v21[0] = 0;
  v20[1] = (void *)0x400000001;
  v21[0] = *(void *)(mlir::ValueRange::dereference_iterator(&v24, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v19, (uint64_t)v21, 1uLL);
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  v22[0] = &unk_1EC9CE8F0;
  uint64_t v23 = v22;
  unsigned int v26 = &v24;
  uint64_t v24 = (const char *)&unk_1EC9CE8F0;
  if (v26 == &v24)
  {
    (*((void (**)(const char **))v24 + 4))(&v24);
    unint64_t v14 = v23;
    if (v23 != v22) {
      goto LABEL_5;
    }
LABEL_11:
    (*(void (**)(void *))(v22[0] + 32))(v22);
    if (v13) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  if (v26) {
    (*((void (**)(const char **))*v26 + 5))(v26);
  }
  unint64_t v14 = v23;
  if (v23 == v22) {
    goto LABEL_11;
  }
LABEL_5:
  if (v14) {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  if (v13)
  {
LABEL_8:
    uint64_t v15 = 1;
    uint64_t v16 = v20[0];
    if (v20[0] == v21) {
      return v15;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v24 = "mps.atan";
  uint64_t v25 = 8;
  uint64_t v15 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)&v24, "' op inferred type(s) ", (uint64_t)v20, " are incompatible with return type(s) of operation ", a11);
  uint64_t v16 = v20[0];
  if (v20[0] != v21) {
LABEL_13:
  }
    free(v16);
  return v15;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::ATanOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::ATanOp>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::mps::detail::ATanOpGenericAdaptorBase::ATanOpGenericAdaptorBase((uint64_t)v14, this);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)this);
  v13[0] = result;
  v13[1] = v9;
  if (result)
  {
    unint64_t v10 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v13, v15, v16);
    if (v10 < 8)
    {
      return 0;
    }
    else
    {
      if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v10 & ((uint64_t)(v10 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          unint64_t v12 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          unint64_t v10 = v12;
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::ACosOp>,mlir::OpTrait::OneResult<mlir::mps::ACosOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::ACosOp>,mlir::OpTrait::ZeroSuccessors<mlir::mps::ACosOp>,mlir::OpTrait::OneOperand<mlir::mps::ACosOp>,mlir::OpTrait::OpInvariants<mlir::mps::ACosOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::mps::ACosOp>,mlir::OpTrait::Stitchable<mlir::mps::ACosOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::ACosOp>,mlir::InferTypeOpInterface::Trait<mlir::mps::ACosOp>>(a1, a2);
}

BOOL mlir::Op<mlir::mps::ATanOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.atanh", 9, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::ATanhOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9B60C8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::ATanhOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  v14[0] = a4;
  v14[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(void **)a11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ATanhOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::ATanhOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::ATanhOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v20[0] = v21;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  v21[0] = 0;
  v20[1] = (void *)0x400000001;
  v21[0] = *(void *)(mlir::ValueRange::dereference_iterator(&v24, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v19, (uint64_t)v21, 1uLL);
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  v22[0] = &unk_1EC9CE8F0;
  uint64_t v23 = v22;
  unsigned int v26 = &v24;
  uint64_t v24 = (const char *)&unk_1EC9CE8F0;
  if (v26 == &v24)
  {
    (*((void (**)(const char **))v24 + 4))(&v24);
    unint64_t v14 = v23;
    if (v23 != v22) {
      goto LABEL_5;
    }
LABEL_11:
    (*(void (**)(void *))(v22[0] + 32))(v22);
    if (v13) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  if (v26) {
    (*((void (**)(const char **))*v26 + 5))(v26);
  }
  unint64_t v14 = v23;
  if (v23 == v22) {
    goto LABEL_11;
  }
LABEL_5:
  if (v14) {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  if (v13)
  {
LABEL_8:
    uint64_t v15 = 1;
    uint64_t v16 = v20[0];
    if (v20[0] == v21) {
      return v15;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v24 = "mps.atanh";
  uint64_t v25 = 9;
  uint64_t v15 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)&v24, "' op inferred type(s) ", (uint64_t)v20, " are incompatible with return type(s) of operation ", a11);
  uint64_t v16 = v20[0];
  if (v20[0] != v21) {
LABEL_13:
  }
    free(v16);
  return v15;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::ATanhOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::ATanhOp>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::mps::detail::ATanhOpGenericAdaptorBase::ATanhOpGenericAdaptorBase((uint64_t)v14, this);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)this);
  v13[0] = result;
  v13[1] = v9;
  if (result)
  {
    unint64_t v10 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v13, v15, v16);
    if (v10 < 8)
    {
      return 0;
    }
    else
    {
      if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v10 & ((uint64_t)(v10 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          unint64_t v12 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          unint64_t v10 = v12;
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::ACosOp>,mlir::OpTrait::OneResult<mlir::mps::ACosOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::ACosOp>,mlir::OpTrait::ZeroSuccessors<mlir::mps::ACosOp>,mlir::OpTrait::OneOperand<mlir::mps::ACosOp>,mlir::OpTrait::OpInvariants<mlir::mps::ACosOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::mps::ACosOp>,mlir::OpTrait::Stitchable<mlir::mps::ACosOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::ACosOp>,mlir::InferTypeOpInterface::Trait<mlir::mps::ACosOp>>(a1, a2);
}

BOOL mlir::Op<mlir::mps::ATanhOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.absolute", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::AbsoluteOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9AD108;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::AbsoluteOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  v14[0] = a4;
  v14[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(void **)a11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::AbsoluteOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::AbsoluteOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v20[0] = v21;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  v21[0] = 0;
  v20[1] = (void *)0x400000001;
  v21[0] = *(void *)(mlir::ValueRange::dereference_iterator(&v24, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v19, (uint64_t)v21, 1uLL);
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  v22[0] = &unk_1EC9CE8F0;
  uint64_t v23 = v22;
  unsigned int v26 = &v24;
  uint64_t v24 = (const char *)&unk_1EC9CE8F0;
  if (v26 == &v24)
  {
    (*((void (**)(const char **))v24 + 4))(&v24);
    unint64_t v14 = v23;
    if (v23 != v22) {
      goto LABEL_5;
    }
LABEL_11:
    (*(void (**)(void *))(v22[0] + 32))(v22);
    if (v13) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  if (v26) {
    (*((void (**)(const char **))*v26 + 5))(v26);
  }
  unint64_t v14 = v23;
  if (v23 == v22) {
    goto LABEL_11;
  }
LABEL_5:
  if (v14) {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  if (v13)
  {
LABEL_8:
    uint64_t v15 = 1;
    uint64_t v16 = v20[0];
    if (v20[0] == v21) {
      return v15;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v24 = "mps.absolute";
  uint64_t v25 = 12;
  uint64_t v15 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)&v24, "' op inferred type(s) ", (uint64_t)v20, " are incompatible with return type(s) of operation ", a11);
  uint64_t v16 = v20[0];
  if (v20[0] != v21) {
LABEL_13:
  }
    free(v16);
  return v15;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::AbsoluteOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::AbsoluteOp>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::mps::detail::AbsoluteOpGenericAdaptorBase::AbsoluteOpGenericAdaptorBase((uint64_t)v14, a1);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a1);
  v13[0] = result;
  v13[1] = v9;
  if (result)
  {
    unint64_t v10 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v13, v15, v16);
    if (v10 < 8)
    {
      return 0;
    }
    else
    {
      if (a1 - 4 != (unsigned int *)(v10 & ((uint64_t)(v10 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          unint64_t v12 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          unint64_t v10 = v12;
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::ACosOp>,mlir::OpTrait::OneResult<mlir::mps::ACosOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::ACosOp>,mlir::OpTrait::ZeroSuccessors<mlir::mps::ACosOp>,mlir::OpTrait::OneOperand<mlir::mps::ACosOp>,mlir::OpTrait::OpInvariants<mlir::mps::ACosOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::mps::ACosOp>,mlir::OpTrait::Stitchable<mlir::mps::ACosOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::ACosOp>,mlir::InferTypeOpInterface::Trait<mlir::mps::ACosOp>>(a1, a2);
}

BOOL mlir::Op<mlir::mps::AbsoluteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.absolute_square", 19, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::AbsoluteSquareOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9B1118;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::AbsoluteSquareOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  v14[0] = a4;
  v14[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(void **)a11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::AbsoluteSquareOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AbsoluteSquareOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::AbsoluteSquareOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v20[0] = v21;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  v21[0] = 0;
  v20[1] = (void *)0x400000001;
  v21[0] = *(void *)(mlir::ValueRange::dereference_iterator(&v24, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v19, (uint64_t)v21, 1uLL);
  mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
  v22[0] = &unk_1EC9CE8F0;
  uint64_t v23 = v22;
  unsigned int v26 = &v24;
  uint64_t v24 = (const char *)&unk_1EC9CE8F0;
  if (v26 == &v24)
  {
    (*((void (**)(const char **))v24 + 4))(&v24);
    unint64_t v14 = v23;
    if (v23 != v22) {
      goto LABEL_5;
    }
LABEL_11:
    (*(void (**)(void *))(v22[0] + 32))(v22);
    if (v13) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  if (v26) {
    (*((void (**)(const char **))*v26 + 5))(v26);
  }
  unint64_t v14 = v23;
  if (v23 == v22) {
    goto LABEL_11;
  }
LABEL_5:
  if (v14) {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  if (v13)
  {
LABEL_8:
    uint64_t v15 = 1;
    uint64_t v16 = v20[0];
    if (v20[0] == v21) {
      return v15;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v24 = "mps.absolute_square";
  uint64_t v25 = 19;
  uint64_t v15 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)&v24, "' op inferred type(s) ", (uint64_t)v20, " are incompatible with return type(s) of operation ", a11);
  uint64_t v16 = v20[0];
  if (v20[0] != v21) {
LABEL_13:
  }
    free(v16);
  return v15;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::AbsoluteSquareOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::foldSingleResultHook<mlir::mps::AbsoluteSquareOp>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::mps::detail::AbsoluteSquareOpGenericAdaptorBase::AbsoluteSquareOpGenericAdaptorBase((uint64_t)v14, this);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)this);
  v13[0] = result;
  v13[1] = v9;
  if (result)
  {
    unint64_t v10 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v13, v15, v16);
    if (v10 < 8)
    {
      return 0;
    }
    else
    {
      if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v10 & ((uint64_t)(v10 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          unint64_t v12 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          unint64_t v10 = v12;
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::ACosOp>,mlir::OpTrait::OneResult<mlir::mps::ACosOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::ACosOp>,mlir::OpTrait::ZeroSuccessors<mlir::mps::ACosOp>,mlir::OpTrait::OneOperand<mlir::mps::ACosOp>,mlir::OpTrait::OpInvariants<mlir::mps::ACosOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::mps::ACosOp>,mlir::OpTrait::SameOperandsAndResultType<mlir::mps::ACosOp>,mlir::OpTrait::Stitchable<mlir::mps::ACosOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::ACosOp>,mlir::InferTypeOpInterface::Trait<mlir::mps::ACosOp>>(a1, a2);
}

BOOL mlir::Op<mlir::mps::AbsoluteSquareOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultType,mlir::OpTrait::Stitchable,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AddOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AddOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AddOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.add", 7, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::AddOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9B43E0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::AddOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AddOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AddOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AddOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AddOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AddOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AddOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AddOp>::inferReturnTypes(mlir::Float32Type *a1, uint64_t a2, uint64_t a3, mlir::MLIRContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AddOp>::refineReturnTypes(mlir::Float32Type *a1, uint64_t a2, char a3, mlir::MLIRContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::AddOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AddOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::AddOp>::refineReturnTypes(mlir::Float32Type *a1, uint64_t a2, char a3, mlir::MLIRContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  {
    mlir::ValueRange::ValueRange(v19, (uint64_t)v20, v21);
    mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
    v23[0] = &unk_1EC9CE8F0;
    uint64_t v24 = v23;
    unsigned int v26 = v25;
    v25[0] = &unk_1EC9CE8F0;
    if (v26 == v25)
    {
      (*(void (**)(void *))(v25[0] + 32))(v25);
      unint64_t v14 = v24;
      if (v24 != v23) {
        goto LABEL_6;
      }
    }
    else
    {
      if (v26) {
        (*(void (**)(void *))(*v26 + 40))(v26);
      }
      unint64_t v14 = v24;
      if (v24 != v23)
      {
LABEL_6:
        if (v14) {
          (*(void (**)(void *))(*v14 + 40))(v14);
        }
        if (v13)
        {
LABEL_9:
          uint64_t v15 = 1;
          uint64_t v16 = v20;
          if (v20 == v22) {
            return v15;
          }
          goto LABEL_12;
        }
        goto LABEL_16;
      }
    }
    (*(void (**)(void *))(v23[0] + 32))(v23);
    if (v13) {
      goto LABEL_9;
    }
LABEL_16:
    v25[0] = "mps.add";
    v25[1] = 7;
    uint64_t v15 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)v25, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
    uint64_t v16 = v20;
    if (v20 == v22) {
      return v15;
    }
    goto LABEL_12;
  }
  uint64_t v15 = 0;
  uint64_t v16 = v20;
  if (v20 != v22) {
LABEL_12:
  }
    free(v16);
  return v15;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AddOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AddOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      char v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AddOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::AddOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::AddOp>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  mlir::mps::detail::AddOpGenericAdaptorBase::AddOpGenericAdaptorBase((uint64_t)v15, this);
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  v14[0] = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)this);
  v14[1] = v8;
  if (v14[0] && (unint64_t v9 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v14, v16, v17), v9 >= 8))
  {
    unint64_t v10 = v9;
    if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v11 = *(unsigned int *)(a4 + 8);
      if (v11 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
        LODWORD(v11) = *(_DWORD *)(a4 + 8);
      }
      *(void *)(*(void *)a4 + 8 * v11) = v10;
      ++*(_DWORD *)(a4 + 8);
      return 1;
    }
    uint64_t v12 = 1;
    if (*(_DWORD *)(a4 + 8)) {
      return v12;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (*(_DWORD *)(a4 + 8)) {
      return v12;
    }
  }
  if (mlir::OpTrait::impl::foldCommutative((uint64_t)this, a2, a3)) {
    return 1;
  }
  return v12;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v234 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v40 = v39;
    a1 = v234;
    if (v40)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v248 = 83;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v248;
      }
      unint64_t v43 = &v247[v42];
      unint64_t v44 = v248 - v42;
      if (v248 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v248 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v234;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v222 = v2;
    uint64_t v235 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v49 = v48;
    uint64_t v2 = v222;
    a1 = v235;
    if (v49)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v248 = 81;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v248;
      }
      unint64_t v52 = &v247[v51];
      unint64_t v53 = v248 - v51;
      if (v248 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v248 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v222;
      a1 = v235;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v223 = v2;
    uint64_t v236 = a1;
    uint64_t v211 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v211;
    uint64_t v2 = v223;
    int v58 = v57;
    a1 = v236;
    if (v58)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v248 = 104;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v248;
      }
      unint64_t v61 = &v247[v60];
      unint64_t v62 = v248 - v60;
      if (v248 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v248 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v211;
      uint64_t v2 = v223;
      a1 = v236;
    }
  }
  uint64_t v6 = *(void *)(v5 + 2896);
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v224 = v2;
    uint64_t v237 = a1;
    uint64_t v201 = v6;
    uint64_t v212 = v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v201;
    uint64_t v4 = v212;
    int v67 = v66;
    uint64_t v2 = v224;
    a1 = v237;
    if (v67)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v248 = 86;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v248;
      }
      unint64_t v70 = &v247[v69];
      unint64_t v71 = v248 - v69;
      if (v248 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v248 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v201;
      uint64_t v4 = v212;
      uint64_t v2 = v224;
      a1 = v237;
    }
  }
  uint64_t v8 = v7[12];
  unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v225 = v2;
    uint64_t v238 = a1;
    uint64_t v202 = v6;
    uint64_t v213 = v4;
    uint64_t v192 = v8;
    unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v192;
    uint64_t v6 = v202;
    uint64_t v4 = v213;
    int v76 = v75;
    uint64_t v2 = v225;
    a1 = v238;
    if (v76)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v248 = 90;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v248;
      }
      unint64_t v79 = &v247[v78];
      unint64_t v80 = v248 - v78;
      if (v248 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v248 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v192;
      uint64_t v6 = v202;
      uint64_t v4 = v213;
      uint64_t v2 = v225;
      a1 = v238;
    }
  }
  uint64_t v10 = v9[24];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v226 = v2;
    uint64_t v239 = a1;
    uint64_t v203 = v6;
    uint64_t v214 = v4;
    uint64_t v184 = v10;
    uint64_t v193 = v8;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v184;
    uint64_t v8 = v193;
    uint64_t v6 = v203;
    uint64_t v4 = v214;
    int v85 = v84;
    uint64_t v2 = v226;
    a1 = v239;
    if (v85)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v248 = 84;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v248;
      }
      unint64_t v88 = &v247[v87];
      unint64_t v89 = v248 - v87;
      if (v248 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v248 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v184;
      uint64_t v8 = v193;
      uint64_t v6 = v203;
      uint64_t v4 = v214;
      uint64_t v2 = v226;
      a1 = v239;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v227 = v2;
    uint64_t v240 = a1;
    uint64_t v204 = v6;
    uint64_t v215 = v4;
    uint64_t v185 = v10;
    uint64_t v194 = v8;
    uint64_t v177 = v12;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v177;
    uint64_t v10 = v185;
    uint64_t v8 = v194;
    uint64_t v6 = v204;
    uint64_t v4 = v215;
    int v94 = v93;
    uint64_t v2 = v227;
    a1 = v240;
    if (v94)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v248 = 93;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v248;
      }
      unint64_t v97 = &v247[v96];
      unint64_t v98 = v248 - v96;
      if (v248 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v248 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v177;
      uint64_t v10 = v185;
      uint64_t v8 = v194;
      uint64_t v6 = v204;
      uint64_t v4 = v215;
      uint64_t v2 = v227;
      a1 = v240;
    }
  }
  uint64_t v14 = *(void *)(v13 + 3904);
  uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v228 = v2;
    uint64_t v241 = a1;
    uint64_t v205 = v6;
    uint64_t v216 = v4;
    uint64_t v186 = v10;
    uint64_t v195 = v8;
    uint64_t v171 = v14;
    uint64_t v178 = v12;
    uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v14 = v171;
    uint64_t v12 = v178;
    uint64_t v10 = v186;
    uint64_t v8 = v195;
    uint64_t v6 = v205;
    uint64_t v4 = v216;
    int v103 = v102;
    uint64_t v2 = v228;
    a1 = v241;
    if (v103)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultElementType<Empty>]";
      unint64_t v248 = 104;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v248;
      }
      unint64_t v106 = &v247[v105];
      unint64_t v107 = v248 - v105;
      if (v248 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v248 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultElementType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v14 = v171;
      uint64_t v12 = v178;
      uint64_t v10 = v186;
      uint64_t v8 = v195;
      uint64_t v6 = v205;
      uint64_t v4 = v216;
      uint64_t v2 = v228;
      a1 = v241;
    }
  }
  uint64_t v16 = v15[22];
  uint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v229 = v2;
    uint64_t v242 = a1;
    uint64_t v206 = v6;
    uint64_t v217 = v4;
    uint64_t v187 = v10;
    uint64_t v196 = v8;
    uint64_t v172 = v14;
    uint64_t v179 = v12;
    uint64_t v166 = v16;
    uint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v16 = v166;
    uint64_t v14 = v172;
    uint64_t v12 = v179;
    uint64_t v10 = v187;
    uint64_t v8 = v196;
    uint64_t v6 = v206;
    uint64_t v4 = v217;
    int v112 = v111;
    uint64_t v2 = v229;
    a1 = v242;
    if (v112)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ResultsBroadcastableShape<Empty>]";
      unint64_t v248 = 97;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v248;
      }
      unint64_t v115 = &v247[v114];
      unint64_t v116 = v248 - v114;
      if (v248 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v248 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ResultsBroadcastableShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ResultsBroadcastableShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      uint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v16 = v166;
      uint64_t v14 = v172;
      uint64_t v12 = v179;
      uint64_t v10 = v187;
      uint64_t v8 = v196;
      uint64_t v6 = v206;
      uint64_t v4 = v217;
      uint64_t v2 = v229;
      a1 = v242;
    }
  }
  uint64_t v18 = v17[20];
  unint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v230 = v2;
    uint64_t v243 = a1;
    uint64_t v207 = v6;
    uint64_t v218 = v4;
    uint64_t v188 = v10;
    uint64_t v197 = v8;
    uint64_t v173 = v14;
    uint64_t v180 = v12;
    uint64_t v162 = v18;
    uint64_t v167 = v16;
    unint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v18 = v162;
    uint64_t v16 = v167;
    uint64_t v14 = v173;
    uint64_t v12 = v180;
    uint64_t v10 = v188;
    uint64_t v8 = v197;
    uint64_t v6 = v207;
    uint64_t v4 = v218;
    int v121 = v120;
    uint64_t v2 = v230;
    a1 = v243;
    if (v121)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsCommutative<Empty>]";
      unint64_t v248 = 85;
      unint64_t v122 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v122) {
        unint64_t v123 = v122;
      }
      else {
        unint64_t v123 = v248;
      }
      unint64_t v124 = &v247[v123];
      unint64_t v125 = v248 - v123;
      if (v248 - v123 >= 0x12) {
        uint64_t v126 = 18;
      }
      else {
        uint64_t v126 = v248 - v123;
      }
      unint64_t v127 = v125 - v126;
      if (v127 >= v127 - 1) {
        uint64_t v128 = v127 - 1;
      }
      else {
        uint64_t v128 = v127;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsCommutative<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsCommutative>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      unint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v18 = v162;
      uint64_t v16 = v167;
      uint64_t v14 = v173;
      uint64_t v12 = v180;
      uint64_t v10 = v188;
      uint64_t v8 = v197;
      uint64_t v6 = v207;
      uint64_t v4 = v218;
      uint64_t v2 = v230;
      a1 = v243;
    }
  }
  uint64_t v20 = v19[11];
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v231 = v2;
    uint64_t v244 = a1;
    uint64_t v208 = v6;
    uint64_t v219 = v4;
    uint64_t v189 = v10;
    uint64_t v198 = v8;
    uint64_t v174 = v14;
    uint64_t v181 = v12;
    uint64_t v163 = v18;
    uint64_t v168 = v16;
    uint64_t v159 = v20;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v159;
    uint64_t v18 = v163;
    uint64_t v16 = v168;
    uint64_t v14 = v174;
    uint64_t v12 = v181;
    uint64_t v10 = v189;
    uint64_t v8 = v198;
    uint64_t v6 = v208;
    uint64_t v4 = v219;
    int v130 = v129;
    uint64_t v2 = v231;
    a1 = v244;
    if (v130)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Stitchable<Empty>]";
      unint64_t v248 = 82;
      unint64_t v131 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v131) {
        unint64_t v132 = v131;
      }
      else {
        unint64_t v132 = v248;
      }
      unint64_t v133 = &v247[v132];
      unint64_t v134 = v248 - v132;
      if (v248 - v132 >= 0x12) {
        uint64_t v135 = 18;
      }
      else {
        uint64_t v135 = v248 - v132;
      }
      unint64_t v136 = v134 - v135;
      if (v136 >= v136 - 1) {
        uint64_t v137 = v136 - 1;
      }
      else {
        uint64_t v137 = v136;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v159;
      uint64_t v18 = v163;
      uint64_t v16 = v168;
      uint64_t v14 = v174;
      uint64_t v12 = v181;
      uint64_t v10 = v189;
      uint64_t v8 = v198;
      uint64_t v6 = v208;
      uint64_t v4 = v219;
      uint64_t v2 = v231;
      a1 = v244;
    }
  }
  uint64_t v22 = *(void *)(v21 + 2032);
  unint64_t v23 = 0x1E8EB8000uLL;
  {
    uint64_t v232 = v2;
    uint64_t v245 = a1;
    uint64_t v209 = v6;
    uint64_t v220 = v4;
    uint64_t v190 = v10;
    uint64_t v199 = v8;
    uint64_t v175 = v14;
    uint64_t v182 = v12;
    uint64_t v164 = v18;
    uint64_t v169 = v16;
    uint64_t v157 = v22;
    uint64_t v160 = v20;
    unint64_t v23 = 0x1E8EB8000;
    uint64_t v22 = v157;
    uint64_t v20 = v160;
    uint64_t v18 = v164;
    uint64_t v16 = v169;
    uint64_t v14 = v175;
    uint64_t v12 = v182;
    uint64_t v10 = v190;
    uint64_t v8 = v199;
    uint64_t v6 = v209;
    uint64_t v4 = v220;
    int v139 = v138;
    uint64_t v2 = v232;
    a1 = v245;
    if (v139)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v248 = 90;
      unint64_t v140 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v140) {
        unint64_t v141 = v140;
      }
      else {
        unint64_t v141 = v248;
      }
      unint64_t v142 = &v247[v141];
      unint64_t v143 = v248 - v141;
      if (v248 - v141 >= 0x12) {
        uint64_t v144 = 18;
      }
      else {
        uint64_t v144 = v248 - v141;
      }
      unint64_t v145 = v143 - v144;
      if (v145 >= v145 - 1) {
        uint64_t v146 = v145 - 1;
      }
      else {
        uint64_t v146 = v145;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      unint64_t v23 = 0x1E8EB8000;
      uint64_t v22 = v157;
      uint64_t v20 = v160;
      uint64_t v18 = v164;
      uint64_t v16 = v169;
      uint64_t v14 = v175;
      uint64_t v12 = v182;
      uint64_t v10 = v190;
      uint64_t v8 = v199;
      uint64_t v6 = v209;
      uint64_t v4 = v220;
      uint64_t v2 = v232;
      a1 = v245;
    }
  }
  uint64_t v24 = *(void *)(v23 + 3856);
  unint64_t v25 = 0x1E8EB8000uLL;
  {
    uint64_t v233 = v2;
    uint64_t v246 = a1;
    uint64_t v210 = v6;
    uint64_t v221 = v4;
    uint64_t v191 = v10;
    uint64_t v200 = v8;
    uint64_t v176 = v14;
    uint64_t v183 = v12;
    uint64_t v165 = v18;
    uint64_t v170 = v16;
    uint64_t v158 = v22;
    uint64_t v161 = v20;
    uint64_t v156 = v24;
    unint64_t v25 = 0x1E8EB8000;
    uint64_t v24 = v156;
    uint64_t v22 = v158;
    uint64_t v20 = v161;
    uint64_t v18 = v165;
    uint64_t v16 = v170;
    uint64_t v14 = v176;
    uint64_t v12 = v183;
    uint64_t v10 = v191;
    uint64_t v8 = v200;
    uint64_t v6 = v210;
    uint64_t v4 = v221;
    int v148 = v147;
    uint64_t v2 = v233;
    a1 = v246;
    if (v148)
    {
      v247 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface::Trait<Empty>]";
      unint64_t v248 = 100;
      unint64_t v149 = llvm::StringRef::find((uint64_t *)&v247, "DesiredTypeName = ", 0x12uLL, 0);
      if (v248 >= v149) {
        unint64_t v150 = v149;
      }
      else {
        unint64_t v150 = v248;
      }
      uint64_t v151 = &v247[v150];
      unint64_t v152 = v248 - v150;
      if (v248 - v150 >= 0x12) {
        uint64_t v153 = 18;
      }
      else {
        uint64_t v153 = v248 - v150;
      }
      unint64_t v154 = v152 - v153;
      if (v154 >= v154 - 1) {
        uint64_t v155 = v154 - 1;
      }
      else {
        uint64_t v155 = v154;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      unint64_t v25 = 0x1E8EB8000;
      uint64_t v24 = v156;
      uint64_t v22 = v158;
      uint64_t v20 = v161;
      uint64_t v18 = v165;
      uint64_t v16 = v170;
      uint64_t v14 = v176;
      uint64_t v12 = v183;
      uint64_t v10 = v191;
      uint64_t v8 = v200;
      uint64_t v6 = v210;
      uint64_t v4 = v221;
      uint64_t v2 = v233;
      a1 = v246;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || *(void *)(v25 + 3984) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::ATan2Op>,mlir::OpTrait::OneResult<mlir::mps::ATan2Op>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::ATan2Op>,mlir::OpTrait::ZeroSuccessors<mlir::mps::ATan2Op>,mlir::OpTrait::NOperands<2u>::Impl<mlir::mps::ATan2Op>,mlir::OpTrait::OpInvariants<mlir::mps::ATan2Op>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::ATan2Op>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::mps::ATan2Op>,mlir::OpTrait::ResultsBroadcastableShape<mlir::mps::ATan2Op>,mlir::OpTrait::Stitchable<mlir::mps::ATan2Op>,mlir::InferTypeOpInterface::Trait<mlir::mps::ATan2Op>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::ATan2Op>>(a1, a2);
}

BOOL mlir::Op<mlir::mps::AddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AndOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AndOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AndOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.and", 7, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::AndOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9B44A8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::AndOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      uint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AndOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AndOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AndOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AndOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AndOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AndOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AndOp>::inferReturnTypes(mlir::Float32Type *a1, uint64_t a2, uint64_t a3, mlir::MLIRContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AndOp>::refineReturnTypes(mlir::Float32Type *a1, uint64_t a2, char a3, mlir::MLIRContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::AndOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::AndOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::AndOp>::refineReturnTypes(mlir::Float32Type *a1, uint64_t a2, char a3, mlir::MLIRContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  {
    mlir::ValueRange::ValueRange(v19, (uint64_t)v20, v21);
    mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
    v23[0] = &unk_1EC9CE8F0;
    uint64_t v24 = v23;
    unsigned int v26 = v25;
    v25[0] = &unk_1EC9CE8F0;
    if (v26 == v25)
    {
      (*(void (**)(void *))(v25[0] + 32))(v25);
      unint64_t v14 = v24;
      if (v24 != v23) {
        goto LABEL_6;
      }
    }
    else
    {
      if (v26) {
        (*(void (**)(void *))(*v26 + 40))(v26);
      }
      unint64_t v14 = v24;
      if (v24 != v23)
      {
LABEL_6:
        if (v14) {
          (*(void (**)(void *))(*v14 + 40))(v14);
        }
        if (v13)
        {
LABEL_9:
          uint64_t v15 = 1;
          uint64_t v16 = v20;
          if (v20 == v22) {
            return v15;
          }
          goto LABEL_12;
        }
        goto LABEL_16;
      }
    }
    (*(void (**)(void *))(v23[0] + 32))(v23);
    if (v13) {
      goto LABEL_9;
    }
LABEL_16:
    v25[0] = "mps.and";
    v25[1] = 7;
    uint64_t v15 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)v25, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
    uint64_t v16 = v20;
    if (v20 == v22) {
      return v15;
    }
    goto LABEL_12;
  }
  uint64_t v15 = 0;
  uint64_t v16 = v20;
  if (v20 != v22) {
LABEL_12:
  }
    free(v16);
  return v15;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AndOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AndOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      char v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::AndOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::AndOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::AndOp>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  mlir::mps::detail::AndOpGenericAdaptorBase::AndOpGenericAdaptorBase((uint64_t)v15, this);
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  v14[0] = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)this);
  v14[1] = v8;
  if (v14[0] && (unint64_t v9 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v14, v16, v17), v9 >= 8))
  {
    unint64_t v10 = v9;
    if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v11 = *(unsigned int *)(a4 + 8);
      if (v11 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
        LODWORD(v11) = *(_DWORD *)(a4 + 8);
      }
      *(void *)(*(void *)a4 + 8 * v11) = v10;
      ++*(_DWORD *)(a4 + 8);
      return 1;
    }
    uint64_t v12 = 1;
    if (*(_DWORD *)(a4 + 8)) {
      return v12;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (*(_DWORD *)(a4 + 8)) {
      return v12;
    }
  }
  if (mlir::OpTrait::impl::foldCommutative((uint64_t)this, a2, a3)) {
    return 1;
  }
  return v12;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::ATan2Op>,mlir::OpTrait::OneResult<mlir::mps::ATan2Op>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::ATan2Op>,mlir::OpTrait::ZeroSuccessors<mlir::mps::ATan2Op>,mlir::OpTrait::NOperands<2u>::Impl<mlir::mps::ATan2Op>,mlir::OpTrait::OpInvariants<mlir::mps::ATan2Op>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::ATan2Op>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::mps::ATan2Op>,mlir::OpTrait::ResultsBroadcastableShape<mlir::mps::ATan2Op>,mlir::OpTrait::Stitchable<mlir::mps::ATan2Op>,mlir::InferTypeOpInterface::Trait<mlir::mps::ATan2Op>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::ATan2Op>>(a1, a2);
}

BOOL mlir::Op<mlir::mps::AndOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::ResultsBroadcastableShape,mlir::OpTrait::IsCommutative,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::AssignVariableOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      uint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::AssignVariableOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AssignVariableOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AssignVariableOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::AssignVariableOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DowngraderInterfaceInterfaceTraits::Model<mlir::mps::AssignVariableOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::DowngraderInterfaceInterfaceTraits::Model<mlir::mps::AssignVariableOp>::downgradeToVersion;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DowngraderInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::DowngraderInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 1896), v2);
}

void mlir::detail::DowngraderInterfaceInterfaceTraits::Model<mlir::mps::AssignVariableOp>::downgradeToVersion(uint64_t *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  unint64_t v3 = a1;
  mlir::mps::UnrealizedFoldOp::downgradeToVersion(&v3, a2, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::mps::detail::AssignVariableOpGenericAdaptorBase::AssignVariableOpGenericAdaptorBase((uint64_t)v12, a2);
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
  v11[0] = result;
  v11[1] = v10;
  if (result) {
    return mlir::RegionBranchOpInterface::getEntrySuccessorRegions(v11, v13, v14, a5);
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v105 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      unint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v113 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      uint64_t v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[5];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      unint64_t v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[12];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v113 = 90;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      unint64_t v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[24];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      unint64_t v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[9];
  unint64_t v11 = 0x1E8EB8000uLL;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    unint64_t v11 = 0x1E8EB8000;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v113 = 93;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      unint64_t v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      unint64_t v11 = 0x1E8EB8000;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = *(void *)(v11 + 3904);
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      int v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DowngraderInterface::Trait<Empty>]";
      unint64_t v113 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      unint64_t v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::DowngraderInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DowngraderInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v13[329] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::AssignVariableOp>,mlir::OpTrait::ZeroResults<mlir::mps::AssignVariableOp>,mlir::OpTrait::ZeroSuccessors<mlir::mps::AssignVariableOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::mps::AssignVariableOp>,mlir::OpTrait::OpInvariants<mlir::mps::AssignVariableOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::AssignVariableOp>,mlir::DowngraderInterface::Trait<mlir::mps::AssignVariableOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::AssignVariableOp>,mlir::OpTrait::ZeroResults<mlir::mps::AssignVariableOp>,mlir::OpTrait::ZeroSuccessors<mlir::mps::AssignVariableOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::mps::AssignVariableOp>,mlir::OpTrait::OpInvariants<mlir::mps::AssignVariableOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::AssignVariableOp>,mlir::DowngraderInterface::Trait<mlir::mps::AssignVariableOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
      && mlir::tensor::__mlir_ods_local_type_constraint_TensorOps0((uint64_t *)a1, *(void *)(*(void *)(*((void *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)&& mlir::tensor::__mlir_ods_local_type_constraint_TensorOps0((uint64_t *)a1, *(void *)(*(void *)(*((void *)a1 + 9) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u) != 0;
}

uint64_t mlir::Op<mlir::mps::AssignVariableOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::DowngraderInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.band_part", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::BandPartOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9AD1D0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        unint64_t v11 = v13;
      }
      else {
        unint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::BandPartOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    int v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      unint64_t v11 = v32;
      uint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  v14[0] = a4;
  v14[1] = a5;
  if (a5)
  {
    unint64_t v11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(unsigned int *)(a11 + 8);
    if (v12 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v12 + 1, 8);
      LODWORD(v12) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v12) = v11;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  }
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::BandPartOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::BandPartOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v21 = v23;
  uint64_t v22 = 0x400000000;
  unsigned int v26 = a4;
  uint64_t v27 = a5;
  if (a5)
  {
    *((void *)v21 + v22) = *(void *)(mlir::ValueRange::dereference_iterator(&v26, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v13 = v22 + 1;
    LODWORD(v22) = v22 + 1;
  }
  else
  {
    if (!mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands"))
    {
      uint64_t v16 = 0;
      uint64_t v17 = v21;
      if (v21 == v23) {
        return v16;
      }
      goto LABEL_17;
    }
    unsigned int v13 = v22;
  }
  mlir::ValueRange::ValueRange(v20, (uint64_t)v21, v13);
  mlir::ValueRange::ValueRange(v19, *(void *)a11, *(unsigned int *)(a11 + 8));
  v24[0] = &unk_1EC9CE8F0;
  unint64_t v25 = v24;
  unint64_t v28 = &v26;
  unsigned int v26 = (const char *)&unk_1EC9CE8F0;
  if (v28 == &v26)
  {
    (*((void (**)(const char **))v26 + 4))(&v26);
    uint64_t v15 = v25;
    if (v25 != v24) {
      goto LABEL_9;
    }
LABEL_15:
    (*(void (**)(void *))(v24[0] + 32))(v24);
    if (v14) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  if (v28) {
    (*((void (**)(const char **))*v28 + 5))(v28);
  }
  uint64_t v15 = v25;
  if (v25 == v24) {
    goto LABEL_15;
  }
LABEL_9:
  if (v15) {
    (*(void (**)(void *))(*v15 + 40))(v15);
  }
  if (v14)
  {
LABEL_12:
    uint64_t v16 = 1;
    uint64_t v17 = v21;
    if (v21 == v23) {
      return v16;
    }
    goto LABEL_17;
  }
LABEL_16:
  unsigned int v26 = "mps.band_part";
  uint64_t v27 = 13;
  uint64_t v16 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)&v26, "' op inferred type(s) ", (uint64_t)&v21, " are incompatible with return type(s) of operation ", a11);
  uint64_t v17 = v21;
  if (v21 != v23) {
LABEL_17:
  }
    free(v17);
  return v16;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BandPartOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::BandPartOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::BandPartOp>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::mps::detail::BandPartOpGenericAdaptorBase::BandPartOpGenericAdaptorBase((uint64_t)v14, this);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible((uint64_t)this);
  v13[0] = result;
  v13[1] = v9;
  if (result)
  {
    unint64_t v10 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v13, v15, v16);
    if (v10 < 8)
    {
      return 0;
    }
    else
    {
      if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v10 & ((uint64_t)(v10 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          unint64_t v12 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          unint64_t v10 = v12;
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v144 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      int v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v154 = 81;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      int v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v154 = 104;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      int v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = *(void *)(v5 + 2896);
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      int v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[12];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<3>::Impl<Empty>]";
      unint64_t v154 = 90;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      int v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<3u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<3u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[25];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      int v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      uint64_t v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = *(void *)(v13 + 3904);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v154 = 90;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      uint64_t v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = *(void *)(v15 + 3856);
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface::Trait<Empty>]";
      unint64_t v154 = 100;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      uint64_t v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || *(void *)(v17 + 3984) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)3))
  {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::mps::BandPartOp::verifyInvariantsImpl((uint64_t **)&v6);
}

BOOL mlir::Op<mlir::mps::BandPartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.batch_to_space", 18, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::BatchToSpaceOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9AFD90;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                               + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::BatchToSpaceOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 13
    && (*a3 == 0x68735F6C65786970 ? (BOOL v7 = *(void *)((char *)a3 + 5) == 0x656C66667568735FLL) : (BOOL v7 = 0), v7))
  {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

void *mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 13 && *result == 0x68735F6C65786970 && *(void *)((char *)result + 5) == 0x656C66667568735FLL)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      *uint64_t v5 = v9;
    }
    else
    {
      *uint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"pixel_shuffle", 13, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v7, (const void **)"pixel_shuffle", (const char *)0xD, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::mps::BatchToSpaceOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::mps::BatchToSpaceOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::BatchToSpaceOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mps::BatchToSpaceOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::BatchToSpaceOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::BatchToSpaceOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = v24;
  uint64_t v23 = 0x400000000;
  if (mlir::mps::BatchToSpaceOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, v18, v19, (uint64_t)&v22))
  {
    mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
    mlir::ValueRange::ValueRange(v20, *(void *)a11, *(unsigned int *)(a11 + 8));
    v25[0] = &unk_1EC9CE8F0;
    unsigned int v26 = v25;
    int v28 = v27;
    v27[0] = &unk_1EC9CE8F0;
    if (v28 == v27)
    {
      (*(void (**)(void *))(v27[0] + 32))(v27);
      unint64_t v14 = v26;
      if (v26 != v25) {
        goto LABEL_6;
      }
    }
    else
    {
      if (v28) {
        (*(void (**)(void *))(*v28 + 40))(v28);
      }
      unint64_t v14 = v26;
      if (v26 != v25)
      {
LABEL_6:
        if (v14) {
          (*(void (**)(void *))(*v14 + 40))(v14);
        }
        if (v13)
        {
LABEL_9:
          uint64_t v15 = 1;
          uint64_t v16 = v22;
          if (v22 == v24) {
            return v15;
          }
          goto LABEL_12;
        }
        goto LABEL_16;
      }
    }
    (*(void (**)(void *))(v25[0] + 32))(v25);
    if (v13) {
      goto LABEL_9;
    }
LABEL_16:
    v27[0] = "mps.batch_to_space";
    v27[1] = 18;
    uint64_t v15 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)v27, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
    uint64_t v16 = v22;
    if (v22 == v24) {
      return v15;
    }
    goto LABEL_12;
  }
  uint64_t v15 = 0;
  uint64_t v16 = v22;
  if (v22 != v24) {
LABEL_12:
  }
    free(v16);
  return v15;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      char v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BatchToSpaceOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::BatchToSpaceOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::BatchToSpaceOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(unsigned int *)(a1 + 44);
  unint64_t v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  unint64_t v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    uint64_t v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  uint64_t v19 = v8;
  v20[0] = 0;
  char v21 = 0;
  uint64_t v22 = *v10;
  long long v23 = *(_OWORD *)v26;
  if (v8)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21) {
      char v21 = 0;
    }
    mlir::OperationName::OperationName(v20, "mps.batch_to_space", 18, Context);
    char v21 = 1;
  }
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible(a1);
  v26[0] = result;
  v26[1] = v15;
  if (result)
  {
    unint64_t v16 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v26, v24, v25);
    if (v16 < 8)
    {
      return 0;
    }
    else
    {
      unint64_t v17 = v16;
      if (a1 - 16 != (v16 & ((uint64_t)(v16 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v18 = *(unsigned int *)(a4 + 8);
        if (v18 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v18 + 1, 8);
          LODWORD(v18) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v18) = v17;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v165 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      unint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v176 = 104;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = *(void *)(v5 + 2896);
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[12];
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<4>::Impl<Empty>]";
      unint64_t v176 = 90;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<4u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<4u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  __guard v10 = v9[331];
  unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    __guard v130 = v10;
    uint64_t v136 = v8;
    unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    __guard v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      __guard v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    __guard v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v126;
    __guard v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v126;
      __guard v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2744);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    __guard v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    __guard v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      __guard v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = *(void *)(v15 + 3904);
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    __guard v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    __guard v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v176 = 90;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      __guard v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = *(void *)(v17 + 3856);
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    __guard v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    __guard v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface::Trait<Empty>]";
      unint64_t v176 = 100;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      __guard v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || *(void *)(v19 + 3984) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)4)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::mps::BatchToSpaceOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::mps::BatchToSpaceOp::verify(&v6) != 0;
}

BOOL mlir::Op<mlir::mps::BatchToSpaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<4u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.bias_add_grad", 17, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::BiasAddGradOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9AEEB8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                               + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        unint64_t v11 = v13;
      }
      else {
        unint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::BiasAddGradOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 11
    && (*a3 == 0x726F665F61746164 ? (BOOL v7 = *(void *)((char *)a3 + 3) == 0x74616D726F665F61) : (BOOL v7 = 0), v7))
  {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

void *mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 11 && *result == 0x726F665F61746164 && *(void *)((char *)result + 3) == 0x74616D726F665F61)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      *uint64_t v5 = v9;
    }
    else
    {
      *uint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"data_format", 11, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = (_DWORD *)mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps1(v7, (const void **)"data_format", (const char *)0xB, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    uint64_t v5 = *a4;
  }
  else {
    uint64_t v5 = 0;
  }
  *a3 = v5;
  v10[0] = *(void *)(a2 + 8);
  uint64_t result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v10);
  if (!*a3)
  {
    uint64_t v7 = result;
    unsigned int v9 = 1;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(result);
    v10[0] = &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id;
    v10[1] = v7;
    uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::TensorDataLayoutAttrStorage,mlir::mps::TensorDataLayout>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail27TensorDataLayoutAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_20TensorDataLayoutAttrEJNS2_16TensorDataLayoutEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id, &v9);
    *a3 = result;
  }
  return result;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  v8[0] = *(void *)(a2 + 8);
  uint64_t result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v8);
  if (!*a3)
  {
    uint64_t v5 = result;
    unsigned int v7 = 1;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(result);
    v8[0] = &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id;
    v8[1] = v5;
    uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::TensorDataLayoutAttrStorage,mlir::mps::TensorDataLayout>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail27TensorDataLayoutAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_20TensorDataLayoutAttrEJNS2_16TensorDataLayoutEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id, &v7);
    *a3 = result;
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::mps::BiasAddGradOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::mps::BiasAddGradOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unsigned int v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::BiasAddGradOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::TensorDataLayoutAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unsigned int v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unsigned int v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mps::BiasAddGradOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::BiasAddGradOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::BiasAddGradOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (mlir::mps::BiasAddGradOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    mlir::ValueRange::ValueRange(v19, (uint64_t)v20, v21);
    mlir::ValueRange::ValueRange(v18, *(void *)a11, *(unsigned int *)(a11 + 8));
    v23[0] = &unk_1EC9CE8F0;
    uint64_t v24 = v23;
    unsigned int v26 = v25;
    v25[0] = &unk_1EC9CE8F0;
    if (v26 == v25)
    {
      (*(void (**)(void *))(v25[0] + 32))(v25);
      unint64_t v14 = v24;
      if (v24 != v23) {
        goto LABEL_6;
      }
    }
    else
    {
      if (v26) {
        (*(void (**)(void *))(*v26 + 40))(v26);
      }
      unint64_t v14 = v24;
      if (v24 != v23)
      {
LABEL_6:
        if (v14) {
          (*(void (**)(void *))(*v14 + 40))(v14);
        }
        if (v13)
        {
LABEL_9:
          uint64_t v15 = 1;
          uint64_t v16 = v20;
          if (v20 == v22) {
            return v15;
          }
          goto LABEL_12;
        }
        goto LABEL_16;
      }
    }
    (*(void (**)(void *))(v23[0] + 32))(v23);
    if (v13) {
      goto LABEL_9;
    }
LABEL_16:
    v25[0] = "mps.bias_add_grad";
    v25[1] = 17;
    uint64_t v15 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)a2, a3, "'", (uint64_t)v25, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
    uint64_t v16 = v20;
    if (v20 == v22) {
      return v15;
    }
    goto LABEL_12;
  }
  uint64_t v15 = 0;
  uint64_t v16 = v20;
  if (v20 != v22) {
LABEL_12:
  }
    free(v16);
  return v15;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      char v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unsigned int v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BiasAddGradOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CE8F0;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CE8F0;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::BiasAddGradOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::BiasAddGradOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(unsigned int *)(a1 + 44);
  unint64_t v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  unint64_t v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    uint64_t v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  uint64_t v19 = v8;
  v20[0] = 0;
  char v21 = 0;
  uint64_t v22 = *v10;
  long long v23 = *(_OWORD *)v26;
  if (v8)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21) {
      char v21 = 0;
    }
    mlir::OperationName::OperationName(v20, "mps.bias_add_grad", 17, Context);
    char v21 = 1;
  }
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible(a1);
  v26[0] = result;
  v26[1] = v15;
  if (result)
  {
    unint64_t v16 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v26, v24, v25);
    if (v16 < 8)
    {
      return 0;
    }
    else
    {
      unint64_t v17 = v16;
      if (a1 - 16 != (v16 & ((uint64_t)(v16 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v18 = *(unsigned int *)(a4 + 8);
        if (v18 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v18 + 1, 8);
          LODWORD(v18) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v18) = v17;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v165 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      unint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v176 = 104;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = *(void *)(v5 + 2896);
  unsigned int v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    unsigned int v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      unsigned int v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[12];
  unint64_t v9 = 0x1E8EB8000uLL;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    unint64_t v9 = 0x1E8EB8000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v176 = 82;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      unint64_t v9 = 0x1E8EB8000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = *(void *)(v9 + 4080);
  unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2744);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = *(void *)(v15 + 3904);
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v176 = 90;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = *(void *)(v17 + 3856);
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface::Trait<Empty>]";
      unint64_t v176 = 100;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || *(void *)(v19 + 3984) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  unsigned int v7 = a1;
  if (!mlir::mps::BiasAddGradOp::verifyInvariantsImpl((uint64_t **)&v7)) {
    return 0;
  }
  unsigned int v7 = a1;
  return mlir::mps::BiasAddGradOp::verify((uint64_t **)&v7) != 0;
}

BOOL mlir::Op<mlir::mps::BiasAddGradOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::mps::detail::MixedPrecisionInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.bias_add", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::BiasAddOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      unsigned int v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9B7518;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                               + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        unint64_t v11 = v13;
      }
      else {
        unint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::mps::BiasAddOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        unint64_t v11 = v12;
      }
      else {
        unint64_t v11 = (llvm **)v12[0];
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 11
    && (*a3 == 0x726F665F61746164 ? (BOOL v7 = *(void *)((char *)a3 + 3) == 0x74616D726F665F61) : (BOOL v7 = 0), v7))
  {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

void *mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 11 && *result == 0x726F665F61746164 && *(void *)((char *)result + 3) == 0x74616D726F665F61)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      *uint64_t v5 = v9;
    }
    else
    {
      *uint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"data_format", 11, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = (_DWORD *)mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::mps::__mlir_ods_local_attr_constraint_MPSOps1(v7, (const void **)"data_format", (const char *)0xB, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::getOpPropertyByteSize()
{
  return 8;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::initProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, mlir::MLIRContext **a4)
{
  if (a4) {
    uint64_t v5 = *a4;
  }
  else {
    uint64_t v5 = 0;
  }
  *a3 = v5;
  v10[0] = *(void *)(a2 + 8);
  uint64_t result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v10);
  if (!*a3)
  {
    uint64_t v7 = result;
    unsigned int v9 = 1;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(result);
    v10[0] = &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id;
    v10[1] = v7;
    uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::TensorDataLayoutAttrStorage,mlir::mps::TensorDataLayout>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail27TensorDataLayoutAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_20TensorDataLayoutAttrEJNS2_16TensorDataLayoutEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id, &v9);
    *a3 = result;
  }
  return result;
}

mlir::MLIRContext *mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  v8[0] = *(void *)(a2 + 8);
  uint64_t result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v8);
  if (!*a3)
  {
    uint64_t v5 = result;
    unsigned int v7 = 1;
    AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(result);
    v8[0] = &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id;
    v8[1] = v5;
    uint64_t result = (mlir::MLIRContext *)mlir::StorageUniquer::get<mlir::mps::detail::TensorDataLayoutAttrStorage,mlir::mps::TensorDataLayout>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail27TensorDataLayoutAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_20TensorDataLayoutAttrEJNS2_16TensorDataLayoutEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id, &v7);
    *a3 = result;
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::mps::BiasAddGradOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::mps::BiasAddGradOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unsigned int v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::detail::BiasAddOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::mps::TensorDataLayoutAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unsigned int v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::mps::detail::MixedPrecisionInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::mps::detail::MixedPrecisionInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::isValidMixedPrecision;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MixedPrecisionInterface]";
      unint64_t v14 = 84;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unsigned int v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::mps::MixedPrecisionInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2808), v2);
}

void mlir::mps::detail::MixedPrecisionInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::isValidMixedPrecision(uint64_t a1, mlir::mps::mixed_precision *a2)
{
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unsigned int v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  v14[0] = a4;
  v14[1] = a5;
  if (a5)
  {
    unint64_t v11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(unsigned int *)(a11 + 8);
    if (v12 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v12 + 1, 8);
      LODWORD(v12) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v12) = v11;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  }
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::BiasAddOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CF558;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CF558;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mps::BiasAddOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  char v21 = v23;
  uint64_t v22 = 0x400000000;
  unsigned int v26 = a4;
  uint64_t v27 = a5;
  if (a5)
  {
    *((void *)v21 + v22) = *(void *)(mlir::ValueRange::dereference_iterator(&v26, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v13 = v22 + 1;
    LODWORD(v22) = v22 + 1;
  }
  else
  {
    if (!mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands"))
    {
      uint64_t v16 = 0;
      unint64_t v17 = v21;
      if (v21 == v23) {
        return v16;
      }
      goto LABEL_17;
    }
    unsigned int v13 = v22;
  }
  mlir::ValueRange::ValueRange(v20, (uint64_t)v21, v13);
  mlir::ValueRange::ValueRange(v19, *(void *)a11, *(unsigned int *)(a11 + 8));
  v24[0] = &unk_1EC9CF558;
  uint64_t v25 = v24;
  int v28 = &v26;
  unsigned int v26 = (const char *)&unk_1EC9CF558;
  if (v28 == &v26)
  {
    (*((void (**)(const char **))v26 + 4))(&v26);
    uint64_t v15 = v25;
    if (v25 != v24) {
      goto LABEL_9;
    }
LABEL_15:
    (*(void (**)(void *))(v24[0] + 32))(v24);
    if (v14) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  if (v28) {
    (*((void (**)(const char **))*v28 + 5))(v28);
  }
  uint64_t v15 = v25;
  if (v25 == v24) {
    goto LABEL_15;
  }
LABEL_9:
  if (v15) {
    (*(void (**)(void *))(*v15 + 40))(v15);
  }
  if (v14)
  {
LABEL_12:
    uint64_t v16 = 1;
    unint64_t v17 = v21;
    if (v21 == v23) {
      return v16;
    }
    goto LABEL_17;
  }
LABEL_16:
  unsigned int v26 = "mps.bias_add";
  uint64_t v27 = 12;
  uint64_t v16 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, a3, "'", (uint64_t)&v26, "' op inferred type(s) ", (uint64_t)&v21, " are incompatible with return type(s) of operation ", a11);
  unint64_t v17 = v21;
  if (v21 != v23) {
LABEL_17:
  }
    free(v17);
  return v16;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unsigned int v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3992), v2);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BiasAddOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1EC9CF558;
  unint64_t v10 = v9;
  unint64_t v8 = v7;
  v9[0] = &unk_1EC9CF558;
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    unint64_t v5 = v8;
    if (v8 != v7) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(void *))(v7[0] + 32))(v7);
    return v4;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  unint64_t v5 = v8;
  if (v8 == v7) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return v4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::BiasAddOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::foldSingleResultHook<mlir::mps::BiasAddOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(unsigned int *)(a1 + 44);
  unint64_t v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  unint64_t v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    uint64_t v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  uint64_t v19 = v8;
  v20[0] = 0;
  char v21 = 0;
  uint64_t v22 = *v10;
  long long v23 = *(_OWORD *)v26;
  if (v8)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21) {
      char v21 = 0;
    }
    mlir::OperationName::OperationName(v20, "mps.bias_add", 12, Context);
    char v21 = 1;
  }
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ExternalFoldInterface,mlir::Operation *,llvm::CastInfo<mlir::ExternalFoldInterface,mlir::Operation *,void>>::doCastIfPossible(a1);
  v26[0] = result;
  v26[1] = v15;
  if (result)
  {
    unint64_t v16 = mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)v26, v24, v25);
    if (v16 < 8)
    {
      return 0;
    }
    else
    {
      unint64_t v17 = v16;
      if (a1 - 16 != (v16 & ((uint64_t)(v16 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v18 = *(unsigned int *)(a4 + 8);
        if (v18 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v18 + 1, 8);
          LODWORD(v18) = *(_DWORD *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v18) = v17;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v187 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      unint64_t v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      unint64_t v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v199 = 104;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      unint64_t v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = *(void *)(v5 + 2896);
  unsigned int v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    unsigned int v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      unint64_t v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      unsigned int v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[12];
  unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v199 = 90;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      unint64_t v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[24];
  unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      unint64_t v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      unint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v199 = 89;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      unint64_t v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2744);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      unint64_t v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = *(void *)(v15 + 3904);
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MixedPrecisionInterface::Trait<Empty>]";
      unint64_t v199 = 98;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      unint64_t v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::mps::MixedPrecisionInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::mps::MixedPrecisionInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = *(void *)(v17 + 2800);
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v199 = 90;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      unint64_t v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = *(void *)(v19 + 3856);
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CompatibleReturnTypesInterface::Trait<Empty>]";
      unint64_t v199 = 100;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      uint64_t v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || *(void *)(v21 + 3984) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::BiasAddOp>,mlir::OpTrait::OneResult<mlir::mps::BiasAddOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::BiasAddOp>,mlir::OpTrait::ZeroSuccessors<mlir::mps::BiasAddOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::mps::BiasAddOp>,mlir::OpTrait::OpInvariants<mlir::mps::BiasAddOp>,mlir::BytecodeOpInterface::Trait<mlir::mps::BiasAddOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::BiasAddOp>,mlir::mps::MixedPrecisionInterface::Trait<mlir::mps::BiasAddOp>,mlir::InferTypeOpInterface::Trait<mlir::mps::BiasAddOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::BiasAddOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::mps::BiasAddOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mps::BiasAddOp>,mlir::OpTrait::OneResult<mlir::mps::BiasAddOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mps::BiasAddOp>,mlir::OpTrait::ZeroSuccessors<mlir::mps::BiasAddOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::mps::BiasAddOp>,mlir::OpTrait::OpInvariants<mlir::mps::BiasAddOp>,mlir::BytecodeOpInterface::Trait<mlir::mps::BiasAddOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mps::BiasAddOp>,mlir::mps::MixedPrecisionInterface::Trait<mlir::mps::BiasAddOp>,mlir::InferTypeOpInterface::Trait<mlir::mps::BiasAddOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mps::BiasAddOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v6 = a1, mlir::mps::BiasAddOp::verifyInvariantsImpl((uint64_t **)&v6)))
  {
    return mlir::mps::detail::MixedPrecisionInterfaceTrait<mlir::mps::BiasAddOp>::verifyTrait((uint64_t)a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::mps::detail::MixedPrecisionInterfaceTrait<mlir::mps::BiasAddOp>::verifyTrait(uint64_t Values)
{
  uint64_t v1 = Values;
  if (Values)
  {
    uint64_t v2 = *(void *)(Values + 48);
    unint64_t v3 = *(void **)(v2 + 16);
    BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
    if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = *(void *)(Values + 48);
    }
    if (v4)
    {
      v9[0] = *(void *)(v2 + 8);
      uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v9);
      if (Values)
      {
        uint64_t v7 = v2;
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
      uint64_t Values = mlir::detail::InterfaceMap::lookup<mlir::mps::MixedPrecisionInterface>(v6 + 32);
      if (!Values)
      {
        uint64_t Values = *(void *)(v6 + 24);
        uint64_t v7 = *(void *)(v1 + 48);
LABEL_10:
        uint64_t Values = mlir::Dialect::getRegisteredInterfaceForOp<mlir::mps::MixedPrecisionInterface>(Values, v7);
      }
    }
  }
  v9[0] = v1;
  v9[1] = Values;
  return mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v9);
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::mps::MixedPrecisionInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MixedPrecisionInterface]";
      unint64_t v17 = 84;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      unint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::mps::MixedPrecisionInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 2808), v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::mps::MixedPrecisionInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MixedPrecisionInterface]";
      unint64_t v22 = 84;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::mps::MixedPrecisionInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 2808);
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

BOOL mlir::Op<mlir::mps::BiasAddOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::mps::MixedPrecisionInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::mps::BitwiseAndOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mps::BitwiseAndOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mps::BitwiseAndOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mps::BitwiseAndOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mps.bitwise_and", 15, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::BitwiseAndOp,void>::id, (uint64_t)&v9);
  BOOL v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      unint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    BOOL v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9AE490;
  return a1;
}