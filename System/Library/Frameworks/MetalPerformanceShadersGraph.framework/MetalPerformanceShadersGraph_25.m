uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PadGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PadGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PadGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::PadGradientOp>(mlir::LogicalResult (*)(mlir::mps::PadGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::PadOp>(mlir::LogicalResult (*)(mlir::mps::PadOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::PadOp>(mlir::LogicalResult (*)(mlir::mps::PadOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PadOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PadOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PadOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::PadOp>(mlir::LogicalResult (*)(mlir::mps::PadOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::PermuteOp>(mlir::LogicalResult (*)(mlir::mps::PermuteOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::PermuteOp>(mlir::LogicalResult (*)(mlir::mps::PermuteOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::PermuteOp>(mlir::LogicalResult (*)(mlir::mps::PermuteOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::PlaceholderOp>(mlir::LogicalResult (*)(mlir::mps::PlaceholderOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::PlaceholderOp>(mlir::LogicalResult (*)(mlir::mps::PlaceholderOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PlaceholderOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PlaceholderOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PlaceholderOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::PlaceholderOp>(mlir::LogicalResult (*)(mlir::mps::PlaceholderOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::PoolAvgGradientOp>(mlir::LogicalResult (*)(mlir::mps::PoolAvgGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::PoolAvgGradientOp>(mlir::LogicalResult (*)(mlir::mps::PoolAvgGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PoolAvgGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PoolAvgGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PoolAvgGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::PoolAvgGradientOp>(mlir::LogicalResult (*)(mlir::mps::PoolAvgGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolAvgOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::PoolAvgOp>(mlir::LogicalResult (*)(mlir::mps::PoolAvgOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::PoolAvgOp>(mlir::LogicalResult (*)(mlir::mps::PoolAvgOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::PoolAvgOp>(mlir::LogicalResult (*)(mlir::mps::PoolAvgOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::PoolL2NormGradientOp>(mlir::LogicalResult (*)(mlir::mps::PoolL2NormGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::PoolL2NormGradientOp>(mlir::LogicalResult (*)(mlir::mps::PoolL2NormGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PoolL2NormGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PoolL2NormGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PoolL2NormGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::PoolL2NormGradientOp>(mlir::LogicalResult (*)(mlir::mps::PoolL2NormGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::PoolL2NormOp>(mlir::LogicalResult (*)(mlir::mps::PoolL2NormOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::PoolL2NormOp>(mlir::LogicalResult (*)(mlir::mps::PoolL2NormOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::PoolL2NormOp>(mlir::LogicalResult (*)(mlir::mps::PoolL2NormOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *(__n128 *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  long long v6 = *(_OWORD *)(a3 + 64);
  *(void *)(a2 + 80) = *(void *)(a3 + 80);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::PoolMaxGradientOp>(mlir::LogicalResult (*)(mlir::mps::PoolMaxGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::PoolMaxGradientOp>(mlir::LogicalResult (*)(mlir::mps::PoolMaxGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PoolMaxGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PoolMaxGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PoolMaxGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::PoolMaxGradientOp>(mlir::LogicalResult (*)(mlir::mps::PoolMaxGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PoolMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  __n128 result = *(__n128 *)(a3 + 16);
  long long v4 = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::PoolMaxOp>(mlir::LogicalResult (*)(mlir::mps::PoolMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::PoolMaxOp>(mlir::LogicalResult (*)(mlir::mps::PoolMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PoolMaxOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PoolMaxOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PoolMaxOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::PoolMaxOp>(mlir::LogicalResult (*)(mlir::mps::PoolMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::PowerOp>(mlir::LogicalResult (*)(mlir::mps::PowerOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::PowerOp>(mlir::LogicalResult (*)(mlir::mps::PowerOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::PowerOp>(mlir::LogicalResult (*)(mlir::mps::PowerOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::PruningGradientOp>(mlir::LogicalResult (*)(mlir::mps::PruningGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::PruningGradientOp>(mlir::LogicalResult (*)(mlir::mps::PruningGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PruningGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PruningGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PruningGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::PruningGradientOp>(mlir::LogicalResult (*)(mlir::mps::PruningGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PruningOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::PruningOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::PruningOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::PruningOp>(mlir::LogicalResult (*)(mlir::mps::PruningOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::PruningOp>(mlir::LogicalResult (*)(mlir::mps::PruningOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PruningOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PruningOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::PruningOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::PruningOp>(mlir::LogicalResult (*)(mlir::mps::PruningOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::QuantizeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::QuantizeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::QuantizeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::QuantizeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::QuantizeOp>(mlir::LogicalResult (*)(mlir::mps::QuantizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::QuantizeOp>(mlir::LogicalResult (*)(mlir::mps::QuantizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::QuantizeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::QuantizeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::QuantizeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::QuantizeOp>(mlir::LogicalResult (*)(mlir::mps::QuantizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::RandomNormalOp>(mlir::LogicalResult (*)(mlir::mps::RandomNormalOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RandomNormalOp>(mlir::LogicalResult (*)(mlir::mps::RandomNormalOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RandomNormalOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RandomNormalOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RandomNormalOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RandomNormalOp>(mlir::LogicalResult (*)(mlir::mps::RandomNormalOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomTruncatedNormalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::RandomTruncatedNormalOp>(mlir::LogicalResult (*)(mlir::mps::RandomTruncatedNormalOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RandomTruncatedNormalOp>(mlir::LogicalResult (*)(mlir::mps::RandomTruncatedNormalOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RandomTruncatedNormalOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RandomTruncatedNormalOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RandomTruncatedNormalOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RandomTruncatedNormalOp>(mlir::LogicalResult (*)(mlir::mps::RandomTruncatedNormalOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::RandomUniformOp>(mlir::LogicalResult (*)(mlir::mps::RandomUniformOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RandomUniformOp>(mlir::LogicalResult (*)(mlir::mps::RandomUniformOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RandomUniformOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RandomUniformOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RandomUniformOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RandomUniformOp>(mlir::LogicalResult (*)(mlir::mps::RandomUniformOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::RankOp>(mlir::LogicalResult (*)(mlir::mps::RankOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RankOp>(mlir::LogicalResult (*)(mlir::mps::RankOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RankOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RankOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RankOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RankOp>(mlir::LogicalResult (*)(mlir::mps::RankOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReadDataFromFileOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReadDataFromFileOp>(mlir::LogicalResult (*)(mlir::mps::ReadDataFromFileOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReadDataFromFileOp>(mlir::LogicalResult (*)(mlir::mps::ReadDataFromFileOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReadDataFromFileOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReadDataFromFileOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReadDataFromFileOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReadDataFromFileOp>(mlir::LogicalResult (*)(mlir::mps::ReadDataFromFileOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::ReadVariableOp>(mlir::LogicalResult (*)(mlir::mps::ReadVariableOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReadVariableOp>(mlir::LogicalResult (*)(mlir::mps::ReadVariableOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReadVariableOp>(mlir::LogicalResult (*)(mlir::mps::ReadVariableOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::RealPartOp>(mlir::LogicalResult (*)(mlir::mps::RealPartOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RealPartOp>(mlir::LogicalResult (*)(mlir::mps::RealPartOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RealPartOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RealPartOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RealPartOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RealPartOp>(mlir::LogicalResult (*)(mlir::mps::RealPartOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::RealToHermiteanFFTOp>(mlir::LogicalResult (*)(mlir::mps::RealToHermiteanFFTOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RealToHermiteanFFTOp>(mlir::LogicalResult (*)(mlir::mps::RealToHermiteanFFTOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RealToHermiteanFFTOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RealToHermiteanFFTOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RealToHermiteanFFTOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RealToHermiteanFFTOp>(mlir::LogicalResult (*)(mlir::mps::RealToHermiteanFFTOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::ReciprocalOp>(mlir::LogicalResult (*)(mlir::mps::ReciprocalOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReciprocalOp>(mlir::LogicalResult (*)(mlir::mps::ReciprocalOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReciprocalOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReciprocalOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReciprocalOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReciprocalOp>(mlir::LogicalResult (*)(mlir::mps::ReciprocalOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::ReciprocalSquareRootOp>(mlir::LogicalResult (*)(mlir::mps::ReciprocalSquareRootOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReciprocalSquareRootOp>(mlir::LogicalResult (*)(mlir::mps::ReciprocalSquareRootOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReciprocalSquareRootOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReciprocalSquareRootOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReciprocalSquareRootOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReciprocalSquareRootOp>(mlir::LogicalResult (*)(mlir::mps::ReciprocalSquareRootOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReductionAndOp>(mlir::LogicalResult (*)(mlir::mps::ReductionAndOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionAndOp>(mlir::LogicalResult (*)(mlir::mps::ReductionAndOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionAndOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionAndOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionAndOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionAndOp>(mlir::LogicalResult (*)(mlir::mps::ReductionAndOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReductionArgMaxOp>(mlir::LogicalResult (*)(mlir::mps::ReductionArgMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionArgMaxOp>(mlir::LogicalResult (*)(mlir::mps::ReductionArgMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionArgMaxOp>(mlir::LogicalResult (*)(mlir::mps::ReductionArgMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReductionArgMinOp>(mlir::LogicalResult (*)(mlir::mps::ReductionArgMinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionArgMinOp>(mlir::LogicalResult (*)(mlir::mps::ReductionArgMinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionArgMinOp>(mlir::LogicalResult (*)(mlir::mps::ReductionArgMinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReductionLogSumExpOp>(mlir::LogicalResult (*)(mlir::mps::ReductionLogSumExpOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionLogSumExpOp>(mlir::LogicalResult (*)(mlir::mps::ReductionLogSumExpOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionLogSumExpOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionLogSumExpOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionLogSumExpOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionLogSumExpOp>(mlir::LogicalResult (*)(mlir::mps::ReductionLogSumExpOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReductionMaxOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionMaxOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionMaxOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReductionMeanOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMeanOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionMeanOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMeanOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionMeanOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionMeanOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionMeanOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionMeanOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMeanOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReductionMinOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionMinOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionMinOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReductionOrOp>(mlir::LogicalResult (*)(mlir::mps::ReductionOrOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionOrOp>(mlir::LogicalResult (*)(mlir::mps::ReductionOrOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionOrOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionOrOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionOrOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionOrOp>(mlir::LogicalResult (*)(mlir::mps::ReductionOrOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReductionProdOp>(mlir::LogicalResult (*)(mlir::mps::ReductionProdOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionProdOp>(mlir::LogicalResult (*)(mlir::mps::ReductionProdOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionProdOp>(mlir::LogicalResult (*)(mlir::mps::ReductionProdOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReductionSumOp>(mlir::LogicalResult (*)(mlir::mps::ReductionSumOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionSumOp>(mlir::LogicalResult (*)(mlir::mps::ReductionSumOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionSumOp>(mlir::LogicalResult (*)(mlir::mps::ReductionSumOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReductionVarianceOp>(mlir::LogicalResult (*)(mlir::mps::ReductionVarianceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionVarianceOp>(mlir::LogicalResult (*)(mlir::mps::ReductionVarianceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionVarianceOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionVarianceOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionVarianceOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionVarianceOp>(mlir::LogicalResult (*)(mlir::mps::ReductionVarianceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReinterpretCastOp>(mlir::LogicalResult (*)(mlir::mps::ReinterpretCastOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReinterpretCastOp>(mlir::LogicalResult (*)(mlir::mps::ReinterpretCastOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReinterpretCastOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReinterpretCastOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReinterpretCastOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReinterpretCastOp>(mlir::LogicalResult (*)(mlir::mps::ReinterpretCastOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::Relu6Op>(mlir::LogicalResult (*)(mlir::mps::Relu6Op,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::Relu6Op>(mlir::LogicalResult (*)(mlir::mps::Relu6Op,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Relu6Op>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Relu6Op>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Relu6Op>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::Relu6Op>(mlir::LogicalResult (*)(mlir::mps::Relu6Op,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::ReluGradOp>(mlir::LogicalResult (*)(mlir::mps::ReluGradOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReluGradOp>(mlir::LogicalResult (*)(mlir::mps::ReluGradOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReluGradOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReluGradOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReluGradOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReluGradOp>(mlir::LogicalResult (*)(mlir::mps::ReluGradOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::ReluOp>(mlir::LogicalResult (*)(mlir::mps::ReluOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReluOp>(mlir::LogicalResult (*)(mlir::mps::ReluOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReluOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReluOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReluOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReluOp>(mlir::LogicalResult (*)(mlir::mps::ReluOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::ReshapeOp>(mlir::LogicalResult (*)(mlir::mps::ReshapeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReshapeOp>(mlir::LogicalResult (*)(mlir::mps::ReshapeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReshapeOp>(mlir::LogicalResult (*)(mlir::mps::ReshapeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::ResizeGradientOp>(mlir::LogicalResult (*)(mlir::mps::ResizeGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ResizeGradientOp>(mlir::LogicalResult (*)(mlir::mps::ResizeGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ResizeGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ResizeGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ResizeGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ResizeGradientOp>(mlir::LogicalResult (*)(mlir::mps::ResizeGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::ResizeOp>(mlir::LogicalResult (*)(mlir::mps::ResizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ResizeOp>(mlir::LogicalResult (*)(mlir::mps::ResizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ResizeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ResizeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ResizeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ResizeOp>(mlir::LogicalResult (*)(mlir::mps::ResizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::ReverseOp>(mlir::LogicalResult (*)(mlir::mps::ReverseOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReverseOp>(mlir::LogicalResult (*)(mlir::mps::ReverseOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReverseOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReverseOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReverseOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReverseOp>(mlir::LogicalResult (*)(mlir::mps::ReverseOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::RintOp>(mlir::LogicalResult (*)(mlir::mps::RintOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RintOp>(mlir::LogicalResult (*)(mlir::mps::RintOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RintOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RintOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RintOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RintOp>(mlir::LogicalResult (*)(mlir::mps::RintOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::RoundOp>(mlir::LogicalResult (*)(mlir::mps::RoundOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RoundOp>(mlir::LogicalResult (*)(mlir::mps::RoundOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RoundOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RoundOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RoundOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RoundOp>(mlir::LogicalResult (*)(mlir::mps::RoundOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::SampleGridDataGradientOp>(mlir::LogicalResult (*)(mlir::mps::SampleGridDataGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SampleGridDataGradientOp>(mlir::LogicalResult (*)(mlir::mps::SampleGridDataGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SampleGridDataGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SampleGridDataGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SampleGridDataGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SampleGridDataGradientOp>(mlir::LogicalResult (*)(mlir::mps::SampleGridDataGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::SampleGridOp>(mlir::LogicalResult (*)(mlir::mps::SampleGridOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SampleGridOp>(mlir::LogicalResult (*)(mlir::mps::SampleGridOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SampleGridOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SampleGridOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SampleGridOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SampleGridOp>(mlir::LogicalResult (*)(mlir::mps::SampleGridOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::ScatterAlongAxisOp>(mlir::LogicalResult (*)(mlir::mps::ScatterAlongAxisOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ScatterAlongAxisOp>(mlir::LogicalResult (*)(mlir::mps::ScatterAlongAxisOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterAlongAxisOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterAlongAxisOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterAlongAxisOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ScatterAlongAxisOp>(mlir::LogicalResult (*)(mlir::mps::ScatterAlongAxisOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::ScatterNDOp>(mlir::LogicalResult (*)(mlir::mps::ScatterNDOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ScatterNDOp>(mlir::LogicalResult (*)(mlir::mps::ScatterNDOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterNDOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterNDOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterNDOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ScatterNDOp>(mlir::LogicalResult (*)(mlir::mps::ScatterNDOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::ScatterOp>(mlir::LogicalResult (*)(mlir::mps::ScatterOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ScatterOp>(mlir::LogicalResult (*)(mlir::mps::ScatterOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ScatterOp>(mlir::LogicalResult (*)(mlir::mps::ScatterOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SelectOp>(mlir::LogicalResult (*)(mlir::mps::SelectOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SelectOp>(mlir::LogicalResult (*)(mlir::mps::SelectOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SelectOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SelectOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SelectOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SelectOp>(mlir::LogicalResult (*)(mlir::mps::SelectOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::ShapeOp>(mlir::LogicalResult (*)(mlir::mps::ShapeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ShapeOp>(mlir::LogicalResult (*)(mlir::mps::ShapeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ShapeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ShapeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ShapeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ShapeOp>(mlir::LogicalResult (*)(mlir::mps::ShapeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SigmoidGradientOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SigmoidGradientOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SigmoidGradientOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SigmoidGradientWithSigmoidOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidGradientWithSigmoidOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SigmoidGradientWithSigmoidOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidGradientWithSigmoidOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidGradientWithSigmoidOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidGradientWithSigmoidOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidGradientWithSigmoidOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SigmoidGradientWithSigmoidOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidGradientWithSigmoidOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SigmoidHardOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidHardOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SigmoidHardOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidHardOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidHardOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidHardOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidHardOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SigmoidHardOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidHardOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SigmoidOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SigmoidOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SigmoidOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SignOp>(mlir::LogicalResult (*)(mlir::mps::SignOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SignOp>(mlir::LogicalResult (*)(mlir::mps::SignOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SignOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SignOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SignOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SignOp>(mlir::LogicalResult (*)(mlir::mps::SignOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SignbitOp>(mlir::LogicalResult (*)(mlir::mps::SignbitOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SignbitOp>(mlir::LogicalResult (*)(mlir::mps::SignbitOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SignbitOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SignbitOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SignbitOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SignbitOp>(mlir::LogicalResult (*)(mlir::mps::SignbitOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SinOp>(mlir::LogicalResult (*)(mlir::mps::SinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SinOp>(mlir::LogicalResult (*)(mlir::mps::SinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SinOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SinOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SinOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SinOp>(mlir::LogicalResult (*)(mlir::mps::SinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::SingleGateRNNGradientOp>(mlir::LogicalResult (*)(mlir::mps::SingleGateRNNGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SingleGateRNNGradientOp>(mlir::LogicalResult (*)(mlir::mps::SingleGateRNNGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SingleGateRNNGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SingleGateRNNGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SingleGateRNNGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SingleGateRNNGradientOp>(mlir::LogicalResult (*)(mlir::mps::SingleGateRNNGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::SingleGateRNNOp>(mlir::LogicalResult (*)(mlir::mps::SingleGateRNNOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SingleGateRNNOp>(mlir::LogicalResult (*)(mlir::mps::SingleGateRNNOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SingleGateRNNOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SingleGateRNNOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SingleGateRNNOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SingleGateRNNOp>(mlir::LogicalResult (*)(mlir::mps::SingleGateRNNOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SinhOp>(mlir::LogicalResult (*)(mlir::mps::SinhOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SinhOp>(mlir::LogicalResult (*)(mlir::mps::SinhOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SinhOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SinhOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SinhOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SinhOp>(mlir::LogicalResult (*)(mlir::mps::SinhOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SizeOp>(mlir::LogicalResult (*)(mlir::mps::SizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SizeOp>(mlir::LogicalResult (*)(mlir::mps::SizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SizeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SizeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SizeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SizeOp>(mlir::LogicalResult (*)(mlir::mps::SizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SliceOp>(mlir::LogicalResult (*)(mlir::mps::SliceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SliceOp>(mlir::LogicalResult (*)(mlir::mps::SliceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SliceOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SliceOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SliceOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SliceOp>(mlir::LogicalResult (*)(mlir::mps::SliceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SoftmaxOp>(mlir::LogicalResult (*)(mlir::mps::SoftmaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SoftmaxOp>(mlir::LogicalResult (*)(mlir::mps::SoftmaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftmaxOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftmaxOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftmaxOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SoftmaxOp>(mlir::LogicalResult (*)(mlir::mps::SoftmaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SoftplusOp>(mlir::LogicalResult (*)(mlir::mps::SoftplusOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SoftplusOp>(mlir::LogicalResult (*)(mlir::mps::SoftplusOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftplusOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftplusOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftplusOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SoftplusOp>(mlir::LogicalResult (*)(mlir::mps::SoftplusOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SoftplusParametricOp>(mlir::LogicalResult (*)(mlir::mps::SoftplusParametricOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SoftplusParametricOp>(mlir::LogicalResult (*)(mlir::mps::SoftplusParametricOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftplusParametricOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftplusParametricOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftplusParametricOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SoftplusParametricOp>(mlir::LogicalResult (*)(mlir::mps::SoftplusParametricOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SoftsignOp>(mlir::LogicalResult (*)(mlir::mps::SoftsignOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SoftsignOp>(mlir::LogicalResult (*)(mlir::mps::SoftsignOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftsignOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftsignOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftsignOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SoftsignOp>(mlir::LogicalResult (*)(mlir::mps::SoftsignOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SortOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SortOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SortOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SortOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::SortOp>(mlir::LogicalResult (*)(mlir::mps::SortOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SortOp>(mlir::LogicalResult (*)(mlir::mps::SortOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SortOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SortOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SortOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SortOp>(mlir::LogicalResult (*)(mlir::mps::SortOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::SpaceToBatchOp>(mlir::LogicalResult (*)(mlir::mps::SpaceToBatchOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SpaceToBatchOp>(mlir::LogicalResult (*)(mlir::mps::SpaceToBatchOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SpaceToBatchOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SpaceToBatchOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SpaceToBatchOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SpaceToBatchOp>(mlir::LogicalResult (*)(mlir::mps::SpaceToBatchOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::SpaceToDepth2DOp>(mlir::LogicalResult (*)(mlir::mps::SpaceToDepth2DOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SpaceToDepth2DOp>(mlir::LogicalResult (*)(mlir::mps::SpaceToDepth2DOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SpaceToDepth2DOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SpaceToDepth2DOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SpaceToDepth2DOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SpaceToDepth2DOp>(mlir::LogicalResult (*)(mlir::mps::SpaceToDepth2DOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::SplitOp>(mlir::LogicalResult (*)(mlir::mps::SplitOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SplitOp>(mlir::LogicalResult (*)(mlir::mps::SplitOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SplitOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SplitOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SplitOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SplitOp>(mlir::LogicalResult (*)(mlir::mps::SplitOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SquareOp>(mlir::LogicalResult (*)(mlir::mps::SquareOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SquareOp>(mlir::LogicalResult (*)(mlir::mps::SquareOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SquareOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SquareOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SquareOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SquareOp>(mlir::LogicalResult (*)(mlir::mps::SquareOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SquareRootOp>(mlir::LogicalResult (*)(mlir::mps::SquareRootOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SquareRootOp>(mlir::LogicalResult (*)(mlir::mps::SquareRootOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SquareRootOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SquareRootOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SquareRootOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SquareRootOp>(mlir::LogicalResult (*)(mlir::mps::SquareRootOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SqueezeOp>(mlir::LogicalResult (*)(mlir::mps::SqueezeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SqueezeOp>(mlir::LogicalResult (*)(mlir::mps::SqueezeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SqueezeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SqueezeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SqueezeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SqueezeOp>(mlir::LogicalResult (*)(mlir::mps::SqueezeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::StencilOp>(mlir::LogicalResult (*)(mlir::mps::StencilOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::StencilOp>(mlir::LogicalResult (*)(mlir::mps::StencilOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StencilOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StencilOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StencilOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::StencilOp>(mlir::LogicalResult (*)(mlir::mps::StencilOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::StridedSliceGradientOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::StridedSliceGradientOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::StridedSliceGradientOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::StridedSliceOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::StridedSliceOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::StridedSliceOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void *mlir::RewritePatternSet::add<mlir::mps::StridedSliceUpdateOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceUpdateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::StridedSliceUpdateOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceUpdateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceUpdateOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceUpdateOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceUpdateOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::StridedSliceUpdateOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceUpdateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SubtractOp>(mlir::LogicalResult (*)(mlir::mps::SubtractOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SubtractOp>(mlir::LogicalResult (*)(mlir::mps::SubtractOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SubtractOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SubtractOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SubtractOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SubtractOp>(mlir::LogicalResult (*)(mlir::mps::SubtractOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::SwishOp>(mlir::LogicalResult (*)(mlir::mps::SwishOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SwishOp>(mlir::LogicalResult (*)(mlir::mps::SwishOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SwishOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SwishOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SwishOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SwishOp>(mlir::LogicalResult (*)(mlir::mps::SwishOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::TanOp>(mlir::LogicalResult (*)(mlir::mps::TanOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TanOp>(mlir::LogicalResult (*)(mlir::mps::TanOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TanOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TanOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TanOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TanOp>(mlir::LogicalResult (*)(mlir::mps::TanOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::TanhOp>(mlir::LogicalResult (*)(mlir::mps::TanhOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TanhOp>(mlir::LogicalResult (*)(mlir::mps::TanhOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TanhOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TanhOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TanhOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TanhOp>(mlir::LogicalResult (*)(mlir::mps::TanhOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::TileGradientOp>(mlir::LogicalResult (*)(mlir::mps::TileGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TileGradientOp>(mlir::LogicalResult (*)(mlir::mps::TileGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TileGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TileGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TileGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TileGradientOp>(mlir::LogicalResult (*)(mlir::mps::TileGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::TileOp>(mlir::LogicalResult (*)(mlir::mps::TileOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TileOp>(mlir::LogicalResult (*)(mlir::mps::TileOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TileOp>(mlir::LogicalResult (*)(mlir::mps::TileOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::TopKGradientOp>(mlir::LogicalResult (*)(mlir::mps::TopKGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TopKGradientOp>(mlir::LogicalResult (*)(mlir::mps::TopKGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TopKGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TopKGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TopKGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TopKGradientOp>(mlir::LogicalResult (*)(mlir::mps::TopKGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::TopKOp>(mlir::LogicalResult (*)(mlir::mps::TopKOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TopKOp>(mlir::LogicalResult (*)(mlir::mps::TopKOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TopKOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TopKOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TopKOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TopKOp>(mlir::LogicalResult (*)(mlir::mps::TopKOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::TransposeOp>(mlir::LogicalResult (*)(mlir::mps::TransposeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TransposeOp>(mlir::LogicalResult (*)(mlir::mps::TransposeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TransposeOp>(mlir::LogicalResult (*)(mlir::mps::TransposeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::TruncateOp>(mlir::LogicalResult (*)(mlir::mps::TruncateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TruncateOp>(mlir::LogicalResult (*)(mlir::mps::TruncateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TruncateOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TruncateOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TruncateOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TruncateOp>(mlir::LogicalResult (*)(mlir::mps::TruncateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *mlir::RewritePatternSet::add<mlir::mps::TypeConstraintOp>(mlir::LogicalResult (*)(mlir::mps::TypeConstraintOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TypeConstraintOp>(mlir::LogicalResult (*)(mlir::mps::TypeConstraintOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TypeConstraintOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TypeConstraintOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TypeConstraintOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TypeConstraintOp>(mlir::LogicalResult (*)(mlir::mps::TypeConstraintOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::UnrealizedFoldOp>(mlir::LogicalResult (*)(mlir::mps::UnrealizedFoldOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::UnrealizedFoldOp>(mlir::LogicalResult (*)(mlir::mps::UnrealizedFoldOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::UnrealizedFoldOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::UnrealizedFoldOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::UnrealizedFoldOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::UnrealizedFoldOp>(mlir::LogicalResult (*)(mlir::mps::UnrealizedFoldOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::UpdateRandomStateOp>(mlir::LogicalResult (*)(mlir::mps::UpdateRandomStateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::UpdateRandomStateOp>(mlir::LogicalResult (*)(mlir::mps::UpdateRandomStateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::UpdateRandomStateOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::UpdateRandomStateOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::UpdateRandomStateOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::UpdateRandomStateOp>(mlir::LogicalResult (*)(mlir::mps::UpdateRandomStateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::VariableFromTensorOp>(mlir::LogicalResult (*)(mlir::mps::VariableFromTensorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::VariableFromTensorOp>(mlir::LogicalResult (*)(mlir::mps::VariableFromTensorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::VariableFromTensorOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::VariableFromTensorOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::VariableFromTensorOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::VariableFromTensorOp>(mlir::LogicalResult (*)(mlir::mps::VariableFromTensorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::XnorOp>(mlir::LogicalResult (*)(mlir::mps::XnorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::XnorOp>(mlir::LogicalResult (*)(mlir::mps::XnorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::XnorOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::XnorOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::XnorOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::XnorOp>(mlir::LogicalResult (*)(mlir::mps::XnorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::mps::XorOp>(mlir::LogicalResult (*)(mlir::mps::XorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  long long v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::XorOp>(mlir::LogicalResult (*)(mlir::mps::XorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  long long v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::XorOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::XorOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::XorOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::XorOp>(mlir::LogicalResult (*)(mlir::mps::XorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

uint64_t mlir::mps::MPSBytecodeDialectInterface::writeAttribute(uint64_t a1, __n128 *a2, uint64_t a3)
{
  long long v5 = *(void **)(a2->n128_u64[0] + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
  {
    (*(void (**)(uint64_t, void))(*(void *)a3 + 48))(a3, 0);
    v12 = a2;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, Value);
    __n128 Handle = mlir::mps::MPSBufferTensorAttr::getHandle(&v12, &v11);
    (*(void (**)(uint64_t, __n128 *, __n128))(*(void *)a3 + 40))(a3, &v11, Handle);
    uint64_t v9 = mlir::OpPassManager::begin((mlir::OpPassManager *)&v12);
LABEL_50:
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, v9);
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::CropResizeAlignmentModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 1);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::CropResizeCoordinateModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 2);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::DeviceHintAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 3);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::FFTScalingModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 4);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::GRUGateLayoutAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 5);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 6);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::MetalPixelFormatAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 7);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::NearestRoundingModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 8);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 9);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 10);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 11);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PruningMetricAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 12);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PruningStructureAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 13);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 14);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 15);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 16);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 17);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::ScatterModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 18);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::SimilarityTypeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 19);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 20);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::StencilPaddingModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 21);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 22);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::CallInlineModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 23);
    unsigned int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
LABEL_49:
    uint64_t v9 = Kind;
    goto LABEL_50;
  }
  return 1;
}

uint64_t mlir::mps::MPSBytecodeDialectInterface::readAttribute(mlir::DialectInterface *a1, uint64_t a2)
{
  Context = (mlir::MLIRContext *)mlir::DialectInterface::getContext(a1);
  uint64_t v5 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a2 + 72))(a2, &v5)) {
    return 0;
  }
  switch(v5)
  {
    case 0:
      uint64_t v12 = 0;
      if (!mlir::DialectBytecodeReader::readType<mlir::RankedTensorType>(a2, &v12)) {
        return 0;
      }
      mlir::DialectBytecodeReader::readResourceHandle<mlir::mps::MPSDialectResourceBlobHandle>(a2, (uint64_t)&v9);
      if (!v11) {
        return 0;
      }
      uint64_t v8 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a2 + 72))(a2, &v8)) {
        return 0;
      }
      long long v6 = v9;
      uint64_t v7 = v10;
      uint64_t result = mlir::mps::MPSBufferTensorAttr::get(Context, v12, &v6, v8);
      break;
    case 1:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::CropResizeAlignmentModeAttr::get(Context, v9);
      break;
    case 2:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::CropResizeCoordinateModeAttr::get(Context, v9);
      break;
    case 3:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::DeviceHintAttr::get(Context, v9);
      break;
    case 4:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::FFTScalingModeAttr::get(Context, v9);
      break;
    case 5:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::GRUGateLayoutAttr::get(Context, v9);
      break;
    case 6:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::LSTMGateLayoutAttr::get(Context, v9);
      break;
    case 7:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::MetalPixelFormatAttr::get(Context, v9);
      break;
    case 8:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::NearestRoundingModeAttr::get(Context, v9);
      break;
    case 9:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::PaddingModeAttr::get(Context, v9);
      break;
    case 10:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::PaddingStyleAttr::get(Context, v9);
      break;
    case 11:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::PoolIndicesModeAttr::get(Context, v9);
      break;
    case 12:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::PruningMetricAttr::get(Context, v9);
      break;
    case 13:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::PruningStructureAttr::get(Context, v9);
      break;
    case 14:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::RNNActivationAttr::get(Context, v9);
      break;
    case 15:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::NormalSamplingMethodAttr::get(Context, v9);
      break;
    case 16:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::ReductionModeAttr::get(Context, v9);
      break;
    case 17:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::SamplingModeAttr::get(Context, v9);
      break;
    case 18:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::ScatterModeAttr::get(Context, v9);
      break;
    case 19:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::SimilarityTypeAttr::get(Context, v9);
      break;
    case 20:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::SparseTensorStorageAttr::get(Context, v9);
      break;
    case 21:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::StencilPaddingModeAttr::get(Context, v9);
      break;
    case 22:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::TensorDataLayoutAttr::get(Context, v9);
      break;
    case 23:
      *(void *)&long long v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a2 + 72))(a2, &v9)) {
        return 0;
      }
      uint64_t result = mlir::mps::CallInlineModeAttr::get(Context, v9);
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t mlir::mps::MPSBytecodeDialectInterface::writeType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 1);
    (*(void (**)(uint64_t, void))(*(void *)a3 + 48))(a3, 0);
  }
  return 1;
}

uint64_t mlir::mps::MPSBytecodeDialectInterface::readType(mlir::DialectInterface *a1, uint64_t a2)
{
  Context = (mlir::MLIRContext *)mlir::DialectInterface::getContext(a1);
  uint64_t v10 = 0;
  char v4 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 72))(a2, &v10);
  uint64_t result = 0;
  if (v4) {
    BOOL v6 = v10 == 1;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v11 = 0;
    char v7 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 72))(a2, &v11);
    uint64_t result = 0;
    if (v7) {
      BOOL v8 = v11 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(Context);
      return mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id);
    }
  }
  return result;
}

void mlir::mps::MPSBytecodeDialectInterface::~MPSBytecodeDialectInterface(mlir::mps::MPSBytecodeDialectInterface *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(this);

  operator delete(v1);
}

uint64_t mlir::mps::MPSBytecodeDialectInterface::writeVersion(unsigned int *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a2 + 48))(a2, a1[8]);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 48))(a2, a1[9]);
  uint64_t v4 = a1[10];
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 48);

  return v5(a2, v4);
}

_DWORD *mlir::mps::MPSBytecodeDialectInterface::readVersion@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, &v10)
    && (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, &v9)
    && (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, &v8))
  {
    uint64_t result = operator new(0x18uLL);
    int v6 = v9;
    int v5 = v10;
    int v7 = v8;
    *(void *)uint64_t result = &unk_1EC9CA678;
    result[2] = v5;
    result[3] = v6;
    result[4] = v7;
    *a2 = result;
  }
  else
  {
    uint64_t result = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t mlir::mps::MPSBytecodeDialectInterface::upgradeFromVersion(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  v32[0] = &unk_1EC9CA678;
  v32[1] = 0x300000001;
  int v33 = 0;
  int v4 = a3[2];
  if (v4)
  {
    if (v4 != 1) {
      goto LABEL_7;
    }
    unsigned int v5 = a3[3];
    if (v5 == 3)
    {
      if (!a3[4]) {
        return 1;
      }
LABEL_7:
      v22 = "current mps dialect version is {0}, can't parse version {1}";
      uint64_t v23 = 59;
      v24 = v29;
      uint64_t v25 = 2;
      v26 = &unk_1EC9A4798;
      v27 = v32;
      v28[0] = &unk_1EC9A4798;
      v28[1] = a3;
      v29[0] = &v26;
      v29[1] = v28;
      __int16 v31 = 263;
      v30[0] = &v22;
      mlir::Operation::emitError(a2, (uint64_t)v30, (uint64_t)v34);
      uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
      if (v34[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v34);
      }
      if (v41)
      {
        int v7 = (void **)__p;
        if (__p)
        {
          uint64_t v8 = v40;
          uint64_t v9 = __p;
          if (v40 != __p)
          {
            do
              uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
            while (v8 != v7);
            uint64_t v9 = __p;
          }
          v40 = v7;
          operator delete(v9);
        }
        uint64_t v10 = v37;
        if (!v37) {
          goto LABEL_39;
        }
        uint64_t v11 = v38;
        uint64_t v12 = v37;
        if (v38 == v37)
        {
LABEL_38:
          v38 = v10;
          operator delete(v12);
LABEL_39:
          if (v35 != &v36) {
            free(v35);
          }
          return v6;
        }
        do
        {
          v14 = (void *)*--v11;
          v13 = v14;
          *uint64_t v11 = 0;
          if (v14) {
            operator delete[](v13);
          }
        }
        while (v11 != v10);
LABEL_37:
        uint64_t v12 = v37;
        goto LABEL_38;
      }
      return v6;
    }
    if (v5 >= 4) {
      goto LABEL_7;
    }
  }
  if (mlir::detail::upgradeFromVersion((mlir::ForwardIterator *)a2, (uint64_t)a3)) {
    return 1;
  }
  v22 = "IR upgrade to version {0} failed";
  uint64_t v23 = 32;
  v24 = v28;
  uint64_t v25 = 1;
  v26 = &unk_1EC9A4798;
  v27 = v32;
  v28[0] = &v26;
  __int16 v31 = 263;
  v30[0] = &v22;
  mlir::Operation::emitError(a2, (uint64_t)v30, (uint64_t)v34);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
  if (v34[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v34);
  }
  if (v41)
  {
    v15 = (void **)__p;
    if (__p)
    {
      v16 = v40;
      v17 = __p;
      if (v40 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v40 = v15;
      operator delete(v17);
    }
    uint64_t v10 = v37;
    if (!v37) {
      goto LABEL_39;
    }
    v18 = v38;
    uint64_t v12 = v37;
    if (v38 == v37) {
      goto LABEL_38;
    }
    do
    {
      v20 = (void *)*--v18;
      v19 = v20;
      void *v18 = 0;
      if (v20) {
        operator delete[](v19);
      }
    }
    while (v18 != v10);
    goto LABEL_37;
  }
  return v6;
}

uint64_t mlir::DialectBytecodeReader::readType<mlir::RankedTensorType>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 64))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  unsigned int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v6 = &v40;
    int v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        int v7 = (char *)v46;
        uint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v6 = &v40;
        int v7 = (char *)v46;
      }
    }
    uint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)uint64_t v8 = v9;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::RankedTensorType]";
  unint64_t v41 = 72;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      v14 = &v40;
      v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v15 = (char *)v46;
          v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v14 = &v40;
          v15 = (char *)v46;
        }
      }
      v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v47;
      if (v44)
      {
        v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v19 = (char *)v46;
            v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v18 = &v40;
            v19 = (char *)v46;
          }
        }
        v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      v24 = v53;
      uint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        uint64_t v25 = __p;
      }
      v53 = v23;
      operator delete(v25);
    }
    v26 = v50;
    if (v50)
    {
      v27 = v51;
      v28 = v50;
      if (v51 != v50)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        v28 = v50;
      }
      v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

void mlir::DialectBytecodeReader::readResourceHandle<mlir::mps::MPSDialectResourceBlobHandle>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 128))(&v32);
  if (!v34)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return;
  }
  uint64_t v4 = *((void *)&v32 + 1);
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v29 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v29;
    if (v20)
    {
      v38 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSDialectResourceBlobHandle]";
      unint64_t v39 = 89;
      unint64_t v21 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
      if (v39 >= v21) {
        unint64_t v22 = v21;
      }
      else {
        unint64_t v22 = v39;
      }
      uint64_t v23 = &v38[v22];
      unint64_t v24 = v39 - v22;
      if (v39 - v22 >= 0x12) {
        uint64_t v25 = 18;
      }
      else {
        uint64_t v25 = v39 - v22;
      }
      unint64_t v26 = v24 - v25;
      if (v26 >= v26 - 1) {
        uint64_t v27 = v26 - 1;
      }
      else {
        uint64_t v27 = v26;
      }
      mlir::detail::TypeIDResolver<mlir::mps::MPSDialectResourceBlobHandle,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v23[v25], v27);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v29;
    }
  }
  if (v4 == *(void *)(v5 + 2816))
  {
    *(_OWORD *)a2 = v32;
    *(void *)(a2 + 16) = v33;
    *(unsigned char *)(a2 + 24) = 1;
    return;
  }
  __int16 v31 = 257;
  (*(void (**)(const char **__return_ptr, uint64_t, char *))(*(void *)a1 + 16))(&v38, a1, v30);
  if (!v38)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    if (!v48) {
      return;
    }
    goto LABEL_13;
  }
  int v35 = 3;
  int64_t v36 = "provided resource handle differs from the expected resource type";
  uint64_t v37 = 64;
  uint64_t v6 = &v35;
  int v7 = (char *)v40;
  if (v41 >= v42)
  {
    unint64_t v19 = v41 + 1;
    if (v40 <= &v35 && (char *)v40 + 24 * v41 > (char *)&v35)
    {
      int64_t v28 = (char *)&v35 - (unsigned char *)v40;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v19, 24);
      int v7 = (char *)v40;
      uint64_t v6 = (int *)((char *)v40 + v28);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v19, 24);
      uint64_t v6 = &v35;
      int v7 = (char *)v40;
    }
  }
  uint64_t v8 = &v7[24 * v41];
  long long v9 = *(_OWORD *)v6;
  *((void *)v8 + 2) = *((void *)v6 + 2);
  *(_OWORD *)uint64_t v8 = v9;
  ++v41;
  unint64_t v10 = v38;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v10) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v38);
  }
  if (v48)
  {
LABEL_13:
    unint64_t v11 = (void **)__p;
    if (__p)
    {
      uint64_t v12 = v47;
      unint64_t v13 = __p;
      if (v47 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        unint64_t v13 = __p;
      }
      unsigned int v47 = v11;
      operator delete(v13);
    }
    v14 = v44;
    if (v44)
    {
      v15 = v45;
      v16 = v44;
      if (v45 != v44)
      {
        do
        {
          v18 = (void *)*--v15;
          long long v17 = v18;
          void *v15 = 0;
          if (v18) {
            operator delete[](v17);
          }
        }
        while (v15 != v14);
        v16 = v44;
      }
      uint64_t v45 = v14;
      operator delete(v16);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

uint64_t mlir::mps::serialization::FuncOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, void, void *, void, void, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mps::serialization::FuncOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(void **)(*(void *)(a2 + 8) + 96), *(void *)(*(void *)(*(void *)(a2 + 8) + 96) + 16));
}

void mlir::mps::serialization::ConditionOp::getSuccessorRegions(mlir::Operation **a1, void **a2, uint64_t a3, uint64_t a4)
{
  v46[2] = *MEMORY[0x1E4F143B8];
  mlir::mps::serialization::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase((uint64_t)v42, *a1);
  __int16 v43 = a2;
  uint64_t v44 = a3;
  uint64_t v8 = (mlir::Block *)*((void *)*a1 + 2);
  if (v8)
  {
    ParentOp = (unsigned int *)mlir::Block::getParentOp(v8);
    unint64_t v10 = *v43;
    if (*v43) {
      goto LABEL_3;
    }
LABEL_26:
    unsigned int v41 = 0;
    unint64_t v12 = ParentOp[11];
    if ((v12 & 0x7FFFFF) != 0)
    {
LABEL_9:
      unint64_t v13 = (((unint64_t)&ParentOp[4 * ((v12 >> 23) & 1) + 17] + ((v12 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * ParentOp[10];
      uint64_t v14 = v13 + 24;
      if (*(void *)(v13 + 24) != v13 + 24) {
        goto LABEL_10;
      }
      goto LABEL_28;
    }
LABEL_27:
    unint64_t v13 = 0;
    uint64_t v14 = 24;
    if (MEMORY[0x18] != 24)
    {
LABEL_10:
      uint64_t v15 = *(void *)(v13 + 32);
      if (v15) {
        uint64_t v16 = v15 - 8;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void *)(v16 + 48);
      unint64_t v18 = (*(void *)(v16 + 56) - v17) >> 3;
      unsigned int v19 = *(_DWORD *)(a4 + 8);
      if (v19 < *(_DWORD *)(a4 + 12)) {
        goto LABEL_14;
      }
      goto LABEL_29;
    }
LABEL_28:
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    unsigned int v19 = *(_DWORD *)(a4 + 8);
    if (v19 < *(_DWORD *)(a4 + 12))
    {
LABEL_14:
      int v20 = (uint64_t *)(*(void *)a4 + 24 * v19);
      uint64_t *v20 = v14;
      mlir::ValueRange::ValueRange((unint64_t *)v20 + 1, v17, v18);
LABEL_15:
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_16;
    }
LABEL_29:
    uint64_t v45 = v14;
    uint64_t v25 = (char *)&v45;
    mlir::ValueRange::ValueRange(v46, v17, v18);
    uint64_t v26 = *(unsigned int *)(a4 + 8);
    unint64_t v27 = *(void *)a4;
    if (v26 >= *(_DWORD *)(a4 + 12))
    {
      unint64_t v35 = v26 + 1;
      BOOL v36 = v27 + 24 * v26 > (unint64_t)&v45;
      if (v27 <= (unint64_t)&v45 && v36)
      {
        unint64_t v39 = (char *)&v46[-1] - v27;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v35, 24);
        unint64_t v27 = *(void *)a4;
        uint64_t v25 = &v39[*(void *)a4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v35, 24);
        unint64_t v27 = *(void *)a4;
        uint64_t v25 = (char *)&v45;
      }
    }
    uint64_t v28 = v27 + 24 * *(unsigned int *)(a4 + 8);
    long long v29 = *(_OWORD *)v25;
    *(void *)(v28 + 16) = *((void *)v25 + 2);
    *(_OWORD *)uint64_t v28 = v29;
    goto LABEL_15;
  }
  ParentOp = 0;
  unint64_t v10 = *a2;
  if (!v10) {
    goto LABEL_26;
  }
LABEL_3:
  if (mlir::BoolAttr::classof(v10)) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = 0;
  }
  unsigned int v41 = v11;
  if (!v11 || mlir::BoolAttr::getValue((mlir::BoolAttr *)&v41))
  {
    unint64_t v12 = ParentOp[11];
    if ((v12 & 0x7FFFFF) != 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_16:
  if (!v41 || !mlir::BoolAttr::getValue((mlir::BoolAttr *)&v41))
  {
    unint64_t v21 = ParentOp[9];
    if (v21) {
      uint64_t v22 = (uint64_t)(ParentOp - 4);
    }
    else {
      uint64_t v22 = 0;
    }
    unsigned int v23 = *(_DWORD *)(a4 + 8);
    if (v23 >= *(_DWORD *)(a4 + 12))
    {
      uint64_t v45 = 0;
      v30 = (char *)&v45;
      mlir::ValueRange::ValueRange(v46, v22, v21);
      uint64_t v31 = *(unsigned int *)(a4 + 8);
      unint64_t v32 = *(void *)a4;
      if (v31 >= *(_DWORD *)(a4 + 12))
      {
        unint64_t v37 = v31 + 1;
        BOOL v38 = v32 + 24 * v31 > (unint64_t)&v45;
        if (v32 <= (unint64_t)&v45 && v38)
        {
          v40 = (char *)&v46[-1] - v32;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v37, 24);
          unint64_t v32 = *(void *)a4;
          v30 = &v40[*(void *)a4];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v37, 24);
          unint64_t v32 = *(void *)a4;
          v30 = (char *)&v45;
        }
      }
      uint64_t v33 = v32 + 24 * *(unsigned int *)(a4 + 8);
      long long v34 = *(_OWORD *)v30;
      *(void *)(v33 + 16) = *((void *)v30 + 2);
      *(_OWORD *)uint64_t v33 = v34;
    }
    else
    {
      unint64_t v24 = (void *)(*(void *)a4 + 24 * v23);
      void *v24 = 0;
      mlir::ValueRange::ValueRange(v24 + 1, v22, v21);
    }
    ++*(_DWORD *)(a4 + 8);
  }
}

uint64_t mlir::mps::serialization::IfOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v24[0] = a9;
  v24[1] = a10;
  if (!a10) {
    return 0;
  }
  unint64_t v11 = (void *)mlir::RegionRange::dereference_iterator(v24, 0);
  if ((void *)*v11 == v11) {
    return 0;
  }
  uint64_t v12 = v11[1];
  uint64_t v13 = v12 ? v12 - 8 : 0;
  uint64_t v14 = *(mlir::GenericProgramPoint **)(v13 + 32);
  if (v14 == (mlir::GenericProgramPoint *)(v13 + 32)) {
    return 0;
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v14);
  if (!v15
    || *(void *)(*(void *)(v15 + 48) + 16) != (void)&mlir::detail::TypeIDResolver<mlir::mps::serialization::YieldOp,void>::id)
  {
    return 0;
  }
  if ((*(unsigned char *)(v15 + 46) & 0x80) != 0)
  {
    uint64_t v18 = *(void *)(v15 + 72);
    unint64_t v19 = *(unsigned int *)(v15 + 68);
  }
  else
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
  }
  uint64_t v25 = v18;
  unint64_t v26 = v19;
  mlir::OperandRange::getTypes(&v25, &v20);
  mlir::ValueRange::ValueRange((unint64_t *)&v25, v20 + 32 * v21, v22 - v21);
  mlir::TypeRange::TypeRange(v23, v25, v26);
  llvm::SmallVectorImpl<mlir::Type>::insert<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,void>(a11, *(void *)a11 + 8 * *(unsigned int *)(a11 + 8), v23[0], 0, v23[0], v23[1]);
  return 1;
}

BOOL mlir::mps::serialization::IfOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  llvm::SmallVectorImpl<std::unique_ptr<mlir::Region>>::reserve((uint64_t)a2 + 224, 2uLL);
  uint64_t v4 = (void *)mlir::OperationState::addRegion(a2);
  unint64_t v5 = (void *)mlir::OperationState::addRegion(a2);
  uint64_t v6 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  memset(v11, 0, 24);
  uint64_t IntegerType = mlir::Builder::getIntegerType(v6, 1u);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v11, 1)
    && (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v11, IntegerType, (uint64_t)a2 + 16)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 536))(a1, (uint64_t)a2 + 64)&& (*(unsigned __int8 (**)(uint64_t, void *, void, void, void))(*(void *)a1 + 744))(a1, v4, 0, 0, 0))
  {
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    mlir::impl::ensureRegionTerminator(v4, v8, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::mps::serialization::YieldOp>::Impl<mlir::mps::serialization::IfOp>::buildTerminator);
    if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "else", 4)) {
      return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, (uint64_t)a2 + 112) != 0;
    }
    if ((*(unsigned __int8 (**)(uint64_t, void *, void, void, void))(*(void *)a1 + 744))(a1, v5, 0, 0, 0))
    {
      long long v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      mlir::impl::ensureRegionTerminator(v5, v9, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::mps::serialization::YieldOp>::Impl<mlir::mps::serialization::IfOp>::buildTerminator);
      return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, (uint64_t)a2 + 112) != 0;
    }
  }
  return 0;
}

uint64_t mlir::mps::serialization::WhileOp::parse(uint64_t a1, mlir::OperationState *this)
{
  v98[32] = *MEMORY[0x1E4F143B8];
  v96 = v98;
  uint64_t v97 = 0x400000000;
  v93 = v95;
  uint64_t v94 = 0x400000000;
  uint64_t v4 = mlir::OperationState::addRegion(this);
  uint64_t v5 = mlir::OperationState::addRegion(this);
  unsigned __int16 v6 = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)a1 + 792))(a1, &v96, &v93);
  BOOL v7 = v6 >= 0x100u && v6 == 0;
  if (v7
    || (uint64_t v79 = 0,
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        !mlir::AsmParser::parseColonType<mlir::FunctionType>(a1, &v79)))
  {
LABEL_53:
    uint64_t v51 = 0;
    goto LABEL_54;
  }
  Results = (const void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v79);
  uint64_t v11 = v10;
  size_t v12 = 8 * v10;
  uint64_t v13 = *((unsigned int *)this + 18);
  unint64_t v14 = v13 + ((8 * v10) >> 3);
  if (v14 > *((unsigned int *)this + 19))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 64, (char *)this + 80, v14, 8);
    LODWORD(v13) = *((_DWORD *)this + 18);
  }
  if (v11)
  {
    memcpy((void *)(*((void *)this + 8) + 8 * v13), Results, v12);
    LODWORD(v13) = *((_DWORD *)this + 18);
  }
  *((_DWORD *)this + 18) = v13 + (v12 >> 3);
  int Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v79);
  if (v94 == Kind)
  {
    v83[0] = mlir::FunctionType::getInputs((mlir::FunctionType *)&v79);
    v83[1] = v16;
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,3u> &,llvm::ArrayRef<mlir::Type>>(a1, (uint64_t *)&v93, v83, v17, (uint64_t)this + 16))
    {
      if (v97)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 8 * v97;
        do
        {
          uint64_t Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v79);
          *((void *)v96 + v18 + 4) = *(void *)(Inputs + v18);
          v18 += 8;
        }
        while (v19 != v18);
        uint64_t v21 = v97;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t, void *, uint64_t, void))(*(void *)a1 + 744))(a1, v4, v96, v21, 0))
      {
        LOWORD(v85) = 257;
        if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "do", 2, v83))
        {
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t, void, void, void))(*(void *)a1 + 744))(a1, v5, 0, 0, 0))
          {
            uint64_t v51 = (*(unsigned __int8 (**)(uint64_t, char *))(*(void *)a1 + 464))(a1, (char *)this + 112) != 0;
            goto LABEL_54;
          }
        }
      }
    }
    goto LABEL_53;
  }
  __int16 v78 = 257;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, char *))(*(void *)a1 + 24))(v83, a1, v8, v77);
  if (v83[0])
  {
    int v80 = 3;
    v81 = "expected as many input types as operands ";
    uint64_t v82 = 41;
    uint64_t v22 = &v80;
    unsigned int v23 = (char *)v84;
    if (v85 >= v86)
    {
      unint64_t v61 = v85 + 1;
      if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
      {
        int64_t v71 = (char *)&v80 - (unsigned char *)v84;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
        unsigned int v23 = (char *)v84;
        uint64_t v22 = (int *)((char *)v84 + v71);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
        uint64_t v22 = &v80;
        unsigned int v23 = (char *)v84;
      }
    }
    unint64_t v24 = &v23[24 * v85];
    long long v25 = *(_OWORD *)v22;
    *((void *)v24 + 2) = *((void *)v22 + 2);
    *(_OWORD *)unint64_t v24 = v25;
    uint64_t v26 = ++v85;
    if (v83[0])
    {
      int v80 = 3;
      v81 = "(expected ";
      uint64_t v82 = 10;
      uint64_t v27 = &v80;
      uint64_t v28 = (char *)v84;
      if (v26 >= v86)
      {
        unint64_t v63 = v26 + 1;
        BOOL v64 = (char *)v84 + 24 * v26 > (char *)&v80;
        if (v84 <= &v80 && v64)
        {
          int64_t v73 = (char *)&v80 - (unsigned char *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v63, 24);
          uint64_t v28 = (char *)v84;
          uint64_t v27 = (int *)((char *)v84 + v73);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v63, 24);
          uint64_t v27 = &v80;
          uint64_t v28 = (char *)v84;
        }
      }
      long long v29 = &v28[24 * v85];
      long long v30 = *(_OWORD *)v27;
      *((void *)v29 + 2) = *((void *)v27 + 2);
      *(_OWORD *)long long v29 = v30;
      uint64_t v31 = ++v85;
      if (v83[0])
      {
        int v80 = 5;
        v81 = (const char *)v94;
        unint64_t v32 = &v80;
        uint64_t v33 = (char *)v84;
        if (v31 >= v86)
        {
          unint64_t v67 = v31 + 1;
          BOOL v68 = (char *)v84 + 24 * v31 > (char *)&v80;
          if (v84 <= &v80 && v68)
          {
            int64_t v75 = (char *)&v80 - (unsigned char *)v84;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v67, 24);
            uint64_t v33 = (char *)v84;
            unint64_t v32 = (int *)((char *)v84 + v75);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v67, 24);
            unint64_t v32 = &v80;
            uint64_t v33 = (char *)v84;
          }
        }
        long long v34 = &v33[24 * v85];
        long long v35 = *(_OWORD *)v32;
        *((void *)v34 + 2) = *((void *)v32 + 2);
        *(_OWORD *)long long v34 = v35;
        uint64_t v36 = ++v85;
        if (v83[0])
        {
          int v80 = 3;
          v81 = " got ";
          uint64_t v82 = 5;
          unint64_t v37 = &v80;
          BOOL v38 = (char *)v84;
          if (v36 >= v86)
          {
            unint64_t v69 = v36 + 1;
            BOOL v70 = (char *)v84 + 24 * v36 > (char *)&v80;
            if (v84 <= &v80 && v70)
            {
              int64_t v76 = (char *)&v80 - (unsigned char *)v84;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v69, 24);
              BOOL v38 = (char *)v84;
              unint64_t v37 = (int *)((char *)v84 + v76);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v69, 24);
              unint64_t v37 = &v80;
              BOOL v38 = (char *)v84;
            }
          }
          unint64_t v39 = &v38[24 * v85];
          long long v40 = *(_OWORD *)v37;
          *((void *)v39 + 2) = *((void *)v37 + 2);
          *(_OWORD *)unint64_t v39 = v40;
          ++v85;
        }
      }
    }
  }
  unsigned int v41 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v79);
  if (v83[0])
  {
    int v80 = 5;
    v81 = (const char *)v41;
    unsigned int v42 = &v80;
    __int16 v43 = (char *)v84;
    if (v85 >= v86)
    {
      unint64_t v62 = v85 + 1;
      if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
      {
        int64_t v72 = (char *)&v80 - (unsigned char *)v84;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
        __int16 v43 = (char *)v84;
        unsigned int v42 = (int *)((char *)v84 + v72);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
        unsigned int v42 = &v80;
        __int16 v43 = (char *)v84;
      }
    }
    uint64_t v44 = &v43[24 * v85];
    long long v45 = *(_OWORD *)v42;
    *((void *)v44 + 2) = *((void *)v42 + 2);
    *(_OWORD *)uint64_t v44 = v45;
    uint64_t v46 = ++v85;
    if (v83[0])
    {
      int v80 = 3;
      v81 = ")";
      uint64_t v82 = 1;
      unsigned int v47 = &v80;
      char v48 = (char *)v84;
      if (v46 >= v86)
      {
        unint64_t v65 = v46 + 1;
        BOOL v66 = (char *)v84 + 24 * v46 > (char *)&v80;
        if (v84 <= &v80 && v66)
        {
          int64_t v74 = (char *)&v80 - (unsigned char *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v65, 24);
          char v48 = (char *)v84;
          unsigned int v47 = (int *)((char *)v84 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v65, 24);
          unsigned int v47 = &v80;
          char v48 = (char *)v84;
        }
      }
      uint64_t v49 = &v48[24 * v85];
      long long v50 = *(_OWORD *)v47;
      *((void *)v49 + 2) = *((void *)v47 + 2);
      *(_OWORD *)uint64_t v49 = v50;
      ++v85;
    }
  }
  uint64_t v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v83);
  if (v83[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v83);
  }
  if (v92)
  {
    v52 = (void **)__p;
    if (__p)
    {
      v53 = v91;
      char v54 = __p;
      if (v91 != __p)
      {
        do
          v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
        while (v53 != v52);
        char v54 = __p;
      }
      v91 = v52;
      operator delete(v54);
    }
    uint64_t v55 = v88;
    if (v88)
    {
      v56 = v89;
      v57 = v88;
      if (v89 != v88)
      {
        do
        {
          v59 = (void *)*--v56;
          v58 = v59;
          void *v56 = 0;
          if (v59) {
            operator delete[](v58);
          }
        }
        while (v56 != v55);
        v57 = v88;
      }
      v89 = v55;
      operator delete(v57);
    }
    if (v84 != v87) {
      free(v84);
    }
  }
LABEL_54:
  if (v93 != v95) {
    free(v93);
  }
  if (v96 != v98) {
    free(v96);
  }
  return v51;
}

uint64_t mlir::mps::serialization::WhileOp::verify(mlir::mps::serialization::WhileOp *this)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(unsigned int *)(*(void *)this + 44);
  if ((v3 & 0x7FFFFF) != 0)
  {
    uint64_t v4 = (void *)(((v2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v2 + 40));
    if ((void *)*v4 == v4) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (!MEMORY[0])
    {
LABEL_14:
      uint64_t v9 = 0;
      goto LABEL_15;
    }
  }
  uint64_t v5 = v4[1];
  if (v5) {
    uint64_t v6 = v5 - 8;
  }
  else {
    uint64_t v6 = 0;
  }
  BOOL v7 = *(mlir::GenericProgramPoint **)(v6 + 32);
  if (v7 == (mlir::GenericProgramPoint *)(v6 + 32)) {
    goto LABEL_14;
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v7);
  uint64_t v9 = v8;
  if (v8
    && *(_UNKNOWN **)(*(void *)(v8 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ConditionOp,void>::id)
  {
    uint64_t v10 = *(void *)this;
    unint64_t v11 = *(unsigned int *)(*(void *)this + 44);
    if ((v11 & 0x7FFFFF) != 0)
    {
      unint64_t v12 = ((v10 + 16 * ((v11 >> 23) & 1) + ((v11 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(v10 + 40);
      if (*(void *)(v12 + 24) == v12 + 24) {
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v12 = 0;
      if (MEMORY[0x18] == 24) {
        goto LABEL_40;
      }
    }
    uint64_t v28 = *(void *)(v12 + 32);
    if (v28) {
      uint64_t v29 = v28 - 8;
    }
    else {
      uint64_t v29 = 0;
    }
    long long v30 = *(mlir::GenericProgramPoint **)(v29 + 32);
    if (v30 != (mlir::GenericProgramPoint *)(v29 + 32))
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v30);
      uint64_t v32 = v31;
      if (v31
        && *(_UNKNOWN **)(*(void *)(v31 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::YieldOp,void>::id)
      {
        return 1;
      }
      goto LABEL_41;
    }
LABEL_40:
    uint64_t v32 = 0;
LABEL_41:
    __int16 v57 = 261;
    char v54 = (const void **)"expects the 'after' region to terminate with 'mps.yield'";
    uint64_t v55 = 56;
    mlir::Operation::emitOpError((uint64_t *)v10, &v54, (uint64_t)&v58);
    if (v32)
    {
      uint64_t v34 = mlir::Diagnostic::attachNote(v59, *(void *)(v32 + 24), 1);
      unint64_t v35 = *(void *)(v34 + 16);
      LODWORD(v54) = 3;
      uint64_t v55 = (uint64_t)"terminator here";
      uint64_t v56 = 15;
      uint64_t v36 = *(unsigned int *)(v34 + 24);
      unint64_t v37 = &v54;
      if (v36 >= *(_DWORD *)(v34 + 28))
      {
        unint64_t v48 = v36 + 1;
        BOOL v49 = v35 + 24 * v36 > (unint64_t)&v54;
        if (v35 <= (unint64_t)&v54 && v49)
        {
          v52 = (char *)&v54 - v35;
          uint64_t v53 = v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v34 + 16, (void *)(v34 + 32), v48, 24);
          uint64_t v34 = v53;
          unint64_t v35 = *(void *)(v53 + 16);
          unint64_t v37 = (const void ***)&v52[v35];
        }
        else
        {
          uint64_t v50 = v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v34 + 16, (void *)(v34 + 32), v48, 24);
          uint64_t v34 = v50;
          unint64_t v35 = *(void *)(v50 + 16);
          unint64_t v37 = &v54;
        }
      }
      uint64_t v38 = v35 + 24 * *(unsigned int *)(v34 + 24);
      long long v39 = *(_OWORD *)v37;
      *(void *)(v38 + 16) = v37[2];
      *(_OWORD *)uint64_t v38 = v39;
      ++*(_DWORD *)(v34 + 24);
    }
    if (v58) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
    }
    if (!v66) {
      return 0;
    }
    long long v40 = (void **)__p;
    if (__p)
    {
      unsigned int v41 = v65;
      unsigned int v42 = __p;
      if (v65 != __p)
      {
        do
          unsigned int v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        unsigned int v42 = __p;
      }
      unint64_t v65 = v40;
      operator delete(v42);
    }
    unsigned int v23 = v62;
    if (!v62) {
      goto LABEL_60;
    }
    __int16 v43 = v63;
    long long v25 = v62;
    if (v63 == v62) {
      goto LABEL_59;
    }
    do
    {
      long long v45 = (void *)*--v43;
      uint64_t v44 = v45;
      *__int16 v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v23);
    goto LABEL_58;
  }
LABEL_15:
  __int16 v57 = 261;
  char v54 = (const void **)"expects the 'before' region to terminate with 'mps.condition'";
  uint64_t v55 = 61;
  mlir::Operation::emitOpError((uint64_t *)v2, &v54, (uint64_t)&v58);
  if (v9)
  {
    uint64_t v13 = mlir::Diagnostic::attachNote(v59, *(void *)(v9 + 24), 1);
    uint64_t v14 = v13 + 16;
    unint64_t v15 = *(void *)(v13 + 16);
    LODWORD(v54) = 3;
    uint64_t v55 = (uint64_t)"terminator here";
    uint64_t v56 = 15;
    uint64_t v16 = *(unsigned int *)(v13 + 24);
    uint64_t v17 = &v54;
    if (v16 >= *(_DWORD *)(v13 + 28))
    {
      unint64_t v46 = v16 + 1;
      BOOL v47 = v15 + 24 * v16 > (unint64_t)&v54;
      if (v15 <= (unint64_t)&v54 && v47)
      {
        uint64_t v51 = (char *)&v54 - v15;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v13 + 32), v46, 24);
        unint64_t v15 = *(void *)(v13 + 16);
        uint64_t v17 = (const void ***)&v51[v15];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v13 + 32), v46, 24);
        unint64_t v15 = *(void *)(v13 + 16);
        uint64_t v17 = &v54;
      }
    }
    uint64_t v18 = v15 + 24 * *(unsigned int *)(v13 + 24);
    long long v19 = *(_OWORD *)v17;
    *(void *)(v18 + 16) = v17[2];
    *(_OWORD *)uint64_t v18 = v19;
    ++*(_DWORD *)(v13 + 24);
  }
  if (v58) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
  }
  if (!v66) {
    return 0;
  }
  uint64_t v20 = (void **)__p;
  if (__p)
  {
    uint64_t v21 = v65;
    uint64_t v22 = __p;
    if (v65 != __p)
    {
      do
        uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
      while (v21 != v20);
      uint64_t v22 = __p;
    }
    unint64_t v65 = v20;
    operator delete(v22);
  }
  unsigned int v23 = v62;
  if (v62)
  {
    unint64_t v24 = v63;
    long long v25 = v62;
    if (v63 == v62) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v27 = (void *)*--v24;
      uint64_t v26 = v27;
      void *v24 = 0;
      if (v27) {
        operator delete[](v26);
      }
    }
    while (v24 != v23);
LABEL_58:
    long long v25 = v62;
LABEL_59:
    unint64_t v63 = v23;
    operator delete(v25);
  }
LABEL_60:
  if (v60 != &v61) {
    free(v60);
  }
  return 0;
}

void *mlir::mps::serialization::ForOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t), uint64_t a10)
{
  v41[2] = *MEMORY[0x1E4F143B8];
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  mlir::ValueRange::ValueRange(v41, (uint64_t)&v38, 3uLL);
  mlir::OperationState::addOperands(a2, v41[0], v41[1]);
  mlir::OperationState::addOperands(a2, a6, a7);
  uint64_t v38 = a6;
  uint64_t v39 = 0;
  if (a7)
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v17 = *(void *)(mlir::ValueRange::dereference_iterator(&v38, v15) + 8);
      unint64_t v18 = *(unsigned int *)(a2 + 72);
      if (v18 >= *(unsigned int *)(a2 + 76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18 + 1, 8);
        unint64_t v18 = *(unsigned int *)(a2 + 72);
      }
      *(void *)(*(void *)(a2 + 64) + 8 * v18) = v17 & 0xFFFFFFFFFFFFFFF8;
      ++*(_DWORD *)(a2 + 72);
      uint64_t v15 = ++v39;
    }
    while (v38 != a6 || v15 != a7);
  }
  unint64_t v19 = *(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = (uint64_t *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  uint64_t v21 = operator new(0x48uLL);
  *uint64_t v21 = 0u;
  v21[1] = 0u;
  *((void *)v21 + 4) = v21 + 2;
  *((void *)v21 + 5) = v21 + 2;
  *((void *)v21 + 7) = 0;
  *((void *)v21 + 8) = 0;
  *((void *)v21 + 6) = 0;
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v20, (uint64_t)v21);
  uint64_t v22 = *v20;
  *((void *)v21 + 2) = v20;
  *((void *)v21 + 1) = v22;
  uint64_t v21 = (_OWORD *)((char *)v21 + 8);
  *(void *)(v22 + 8) = v21;
  uint64_t *v20 = (uint64_t)v21;
  uint64_t v23 = v20[1];
  if (v23) {
    unint64_t v24 = (void *)(v23 - 8);
  }
  else {
    unint64_t v24 = 0;
  }
  mlir::Block::addArgument(v24, v19, *(void *)a2);
  uint64_t v38 = a6;
  uint64_t v39 = 0;
  if (!a7)
  {
    if (!a9) {
      return (void *)mlir::impl::ensureRegionTerminator(v20, a1, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::mps::serialization::YieldOp>::Impl<mlir::mps::serialization::ForOp>::buildTerminator);
    }
    goto LABEL_22;
  }
  uint64_t v25 = 0;
  do
  {
    uint64_t v36 = mlir::ValueRange::dereference_iterator(&v38, v25);
    unint64_t v26 = *(void *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v36);
    uint64_t result = mlir::Block::addArgument(v24, v26, Loc);
    uint64_t v25 = ++v39;
  }
  while (v38 != a6 || v25 != a7);
  if (a9)
  {
LABEL_22:
    long long v30 = (_OWORD *)(a1 + 16);
    long long v35 = *(_OWORD *)(a1 + 16);
    uint64_t v31 = v24[5];
    *(void *)(a1 + 16) = v24;
    *(void *)(a1 + 24) = v31;
    uint64_t v32 = *(void *)a2;
    uint64_t v33 = (uint64_t *)v24[6];
    uint64_t v34 = *v33;
    mlir::ValueRange::ValueRange(v37, (uint64_t)(v33 + 1), ((uint64_t)(v24[7] - (void)v33) >> 3) - 1);
    uint64_t result = (void *)a9(a10, a1, v32, v34, v37[0], v37[1]);
    if ((void)v35)
    {
      _OWORD *v30 = v35;
    }
    else
    {
      *(void *)long long v30 = 0;
      *(void *)(a1 + 24) = 0;
    }
  }
  return result;
}

uint64_t mlir::mps::serialization::ForOp::verify(uint64_t **this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v25 = 0;
  v23[0] = *(const void ***)((*this)[9] + 88);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v23);
  if (!DefiningOp) {
    goto LABEL_12;
  }
  uint64_t v3 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_12;
  }
  v26[0] = &v27;
  v26[1] = (void *)0x100000000;
  mlir::Operation::fold(v3, 0, 0, (uint64_t)v26);
  BOOL v4 = (*(void *)v26[0] & 0xFFFFFFFFFFFFFFF8) == 0
    || *(void *)(*(void *)(*(void *)v26[0] & 0xFFFFFFFFFFFFFFF8) + 136) != (void)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (!v4) {
    unint64_t v25 = *(void *)v26[0] & 0xFFFFFFFFFFFFFFF8;
  }
  if (v26[0] != &v27) {
    free(v26[0]);
  }
  if (!v4 && mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v25) <= 0)
  {
    v23[0] = (const void **)"constant step operand must be positive";
    __int16 v24 = 259;
    mlir::OpState::emitOpError(this, v23, (uint64_t)v26);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v34)
    {
      uint64_t v9 = (void **)__p;
      if (__p)
      {
        uint64_t v10 = v33;
        unint64_t v11 = __p;
        if (v33 != __p)
        {
          do
            uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          unint64_t v11 = __p;
        }
        uint64_t v33 = v9;
        operator delete(v11);
      }
      unint64_t v12 = v30;
      if (!v30) {
        goto LABEL_48;
      }
      uint64_t v13 = v31;
      uint64_t v14 = v30;
      if (v31 == v30) {
        goto LABEL_47;
      }
      do
      {
        uint64_t v16 = (void *)*--v13;
        uint64_t v15 = v16;
        void *v13 = 0;
        if (v16) {
          operator delete[](v15);
        }
      }
      while (v13 != v12);
      goto LABEL_46;
    }
  }
  else
  {
LABEL_12:
    uint64_t v5 = *this;
    int v6 = *((_DWORD *)*this + 9);
    if (!v6) {
      return 1;
    }
    if ((*((unsigned char *)v5 + 46) & 0x80) != 0)
    {
      if (*((_DWORD *)v5 + 17) - 3 == v6) {
        return 1;
      }
    }
    else if (v6 == -3)
    {
      return 1;
    }
    v23[0] = (const void **)"mismatch in number of loop-carried values and defined values";
    __int16 v24 = 259;
    mlir::OpState::emitOpError(this, v23, (uint64_t)v26);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v34)
    {
      uint64_t v17 = (void **)__p;
      if (__p)
      {
        unint64_t v18 = v33;
        unint64_t v19 = __p;
        if (v33 != __p)
        {
          do
            unint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          unint64_t v19 = __p;
        }
        uint64_t v33 = v17;
        operator delete(v19);
      }
      unint64_t v12 = v30;
      if (!v30) {
        goto LABEL_48;
      }
      uint64_t v20 = v31;
      uint64_t v14 = v30;
      if (v31 == v30)
      {
LABEL_47:
        uint64_t v31 = v12;
        operator delete(v14);
LABEL_48:
        if (v28 != &v29) {
          free(v28);
        }
        return v7;
      }
      do
      {
        uint64_t v22 = (void *)*--v20;
        uint64_t v21 = v22;
        void *v20 = 0;
        if (v22) {
          operator delete[](v21);
        }
      }
      while (v20 != v12);
LABEL_46:
      uint64_t v14 = v30;
      goto LABEL_47;
    }
  }
  return v7;
}

uint64_t mlir::mps::serialization::ForOp::verifyRegions(uint64_t **this)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = *(void *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v3) {
    uint64_t v4 = v3 - 8;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 48);
  uint64_t v6 = v2[9];
  if ((*(void *)(*(void *)v5 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(*(void *)(v6 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v92[0] = (const void **)"expected induction variable to be same type as bounds and step";
    __int16 v93 = 259;
    mlir::OpState::emitOpError(this, v92, (uint64_t)v97);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
    if (v97[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
    }
    if (v106)
    {
      uint64_t v8 = (void **)__p;
      if (__p)
      {
        uint64_t v9 = v105;
        uint64_t v10 = __p;
        if (v105 != __p)
        {
          do
            uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          uint64_t v10 = __p;
        }
        v105 = v8;
        operator delete(v10);
      }
      unint64_t v11 = v102;
      if (!v102) {
        goto LABEL_89;
      }
      unint64_t v12 = v103;
      uint64_t v13 = v102;
      if (v103 == v102)
      {
LABEL_88:
        v103 = v11;
        operator delete(v13);
LABEL_89:
        if (v98 != v101) {
          free(v98);
        }
        return v7;
      }
      do
      {
        uint64_t v15 = (void *)*--v12;
        uint64_t v14 = v15;
        void *v12 = 0;
        if (v15) {
          operator delete[](v14);
        }
      }
      while (v12 != v11);
LABEL_87:
      uint64_t v13 = v102;
      goto LABEL_88;
    }
    return v7;
  }
  uint64_t v16 = *((unsigned int *)v2 + 9);
  if (!v16) {
    return 1;
  }
  uint64_t v17 = *(void *)(v4 + 56) - v5;
  if (((unint64_t)v17 >> 3) - 1 == v16)
  {
    uint64_t v18 = *((unsigned int *)v2 + 17);
    uint64_t v7 = 1;
    if (v18 == 3 || v17 == 8) {
      return v7;
    }
    uint64_t v19 = 0;
    uint64_t v20 = (uint64_t)(v2 - 2);
    uint64_t v21 = v5 + 8;
    uint64_t v22 = 8 * (v17 >> 3) - 16;
    uint64_t v23 = (uint64_t *)(v6 + 120);
    uint64_t v24 = v18 - 4;
    while (v16 != v19)
    {
      uint64_t v25 = *v23;
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v19);
      unint64_t v27 = *(void *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v27 != (*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        __int16 v93 = 257;
        mlir::OpState::emitOpError(this, v92, (uint64_t)v97);
        if (v97[0])
        {
          int v94 = 3;
          v95 = "types mismatch between ";
          uint64_t v96 = 23;
          uint64_t v35 = &v94;
          uint64_t v36 = (char *)v98;
          if (v99 >= v100)
          {
            unint64_t v76 = v99 + 1;
            if (v98 <= &v94 && (char *)v98 + 24 * v99 > (char *)&v94)
            {
              int64_t v86 = (char *)&v94 - (unsigned char *)v98;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v76, 24);
              uint64_t v36 = (char *)v98;
              uint64_t v35 = (int *)((char *)v98 + v86);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v76, 24);
              uint64_t v35 = &v94;
              uint64_t v36 = (char *)v98;
            }
          }
          unint64_t v37 = &v36[24 * v99];
          long long v38 = *(_OWORD *)v35;
          *((void *)v37 + 2) = *((void *)v35 + 2);
          *(_OWORD *)unint64_t v37 = v38;
          uint64_t v39 = ++v99;
          if (v97[0])
          {
            int v94 = 5;
            v95 = (const char *)v19;
            uint64_t v40 = &v94;
            unsigned int v41 = (char *)v98;
            if (v39 >= v100)
            {
              unint64_t v78 = v39 + 1;
              BOOL v79 = (char *)v98 + 24 * v39 > (char *)&v94;
              if (v98 <= &v94 && v79)
              {
                int64_t v88 = (char *)&v94 - (unsigned char *)v98;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v78, 24);
                unsigned int v41 = (char *)v98;
                uint64_t v40 = (int *)((char *)v98 + v88);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v78, 24);
                uint64_t v40 = &v94;
                unsigned int v41 = (char *)v98;
              }
            }
            unsigned int v42 = &v41[24 * v99];
            long long v43 = *(_OWORD *)v40;
            *((void *)v42 + 2) = *((void *)v40 + 2);
            *(_OWORD *)unsigned int v42 = v43;
            uint64_t v44 = ++v99;
            if (v97[0])
            {
              int v94 = 3;
              v95 = "th iter operand and defined value";
              uint64_t v96 = 33;
              long long v45 = &v94;
              unint64_t v46 = (char *)v98;
              if (v44 >= v100)
              {
                unint64_t v82 = v44 + 1;
                BOOL v83 = (char *)v98 + 24 * v44 > (char *)&v94;
                if (v98 <= &v94 && v83)
                {
                  int64_t v90 = (char *)&v94 - (unsigned char *)v98;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v82, 24);
                  unint64_t v46 = (char *)v98;
                  long long v45 = (int *)((char *)v98 + v90);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v82, 24);
                  long long v45 = &v94;
                  unint64_t v46 = (char *)v98;
                }
              }
              BOOL v47 = &v46[24 * v99];
              long long v48 = *(_OWORD *)v45;
              *((void *)v47 + 2) = *((void *)v45 + 2);
              *(_OWORD *)BOOL v47 = v48;
              ++v99;
            }
          }
        }
        uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
        if (v97[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
        }
        if (!v106) {
          return v7;
        }
        BOOL v49 = (void **)__p;
        if (__p)
        {
          uint64_t v50 = v105;
          uint64_t v51 = __p;
          if (v105 != __p)
          {
            do
              uint64_t v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
            while (v50 != v49);
            uint64_t v51 = __p;
          }
          v105 = v49;
          operator delete(v51);
        }
        unint64_t v11 = v102;
        if (!v102) {
          goto LABEL_89;
        }
        v52 = v103;
        uint64_t v13 = v102;
        if (v103 == v102) {
          goto LABEL_88;
        }
        do
        {
          char v54 = (void *)*--v52;
          uint64_t v53 = v54;
          void *v52 = 0;
          if (v54) {
            operator delete[](v53);
          }
        }
        while (v52 != v11);
        goto LABEL_87;
      }
      if ((*(void *)(*(void *)(v21 + 8 * v19) + 8) & 0xFFFFFFFFFFFFFFF8) != v27)
      {
        __int16 v93 = 257;
        mlir::OpState::emitOpError(this, v92, (uint64_t)v97);
        if (v97[0])
        {
          int v94 = 3;
          v95 = "types mismatch between ";
          uint64_t v96 = 23;
          uint64_t v55 = &v94;
          uint64_t v56 = (char *)v98;
          if (v99 >= v100)
          {
            unint64_t v77 = v99 + 1;
            if (v98 <= &v94 && (char *)v98 + 24 * v99 > (char *)&v94)
            {
              int64_t v87 = (char *)&v94 - (unsigned char *)v98;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v77, 24);
              uint64_t v56 = (char *)v98;
              uint64_t v55 = (int *)((char *)v98 + v87);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v77, 24);
              uint64_t v55 = &v94;
              uint64_t v56 = (char *)v98;
            }
          }
          __int16 v57 = &v56[24 * v99];
          long long v58 = *(_OWORD *)v55;
          *((void *)v57 + 2) = *((void *)v55 + 2);
          *(_OWORD *)__int16 v57 = v58;
          uint64_t v59 = ++v99;
          if (v97[0])
          {
            int v94 = 5;
            v95 = (const char *)v19;
            v60 = &v94;
            uint64_t v61 = (char *)v98;
            if (v59 >= v100)
            {
              unint64_t v80 = v59 + 1;
              BOOL v81 = (char *)v98 + 24 * v59 > (char *)&v94;
              if (v98 <= &v94 && v81)
              {
                int64_t v89 = (char *)&v94 - (unsigned char *)v98;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v80, 24);
                uint64_t v61 = (char *)v98;
                v60 = (int *)((char *)v98 + v89);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v80, 24);
                v60 = &v94;
                uint64_t v61 = (char *)v98;
              }
            }
            unint64_t v62 = &v61[24 * v99];
            long long v63 = *(_OWORD *)v60;
            *((void *)v62 + 2) = *((void *)v60 + 2);
            *(_OWORD *)unint64_t v62 = v63;
            uint64_t v64 = ++v99;
            if (v97[0])
            {
              int v94 = 3;
              v95 = "th iter region arg and defined value";
              uint64_t v96 = 36;
              unint64_t v65 = &v94;
              char v66 = (char *)v98;
              if (v64 >= v100)
              {
                unint64_t v84 = v64 + 1;
                BOOL v85 = (char *)v98 + 24 * v64 > (char *)&v94;
                if (v98 <= &v94 && v85)
                {
                  int64_t v91 = (char *)&v94 - (unsigned char *)v98;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v84, 24);
                  char v66 = (char *)v98;
                  unint64_t v65 = (int *)((char *)v98 + v91);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v84, 24);
                  unint64_t v65 = &v94;
                  char v66 = (char *)v98;
                }
              }
              uint64_t v67 = &v66[24 * v99];
              long long v68 = *(_OWORD *)v65;
              *((void *)v67 + 2) = *((void *)v65 + 2);
              *(_OWORD *)uint64_t v67 = v68;
              ++v99;
            }
          }
        }
        uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
        if (v97[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
        }
        if (!v106) {
          return v7;
        }
        unint64_t v69 = (void **)__p;
        if (__p)
        {
          BOOL v70 = v105;
          int64_t v71 = __p;
          if (v105 != __p)
          {
            do
              BOOL v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
            while (v70 != v69);
            int64_t v71 = __p;
          }
          v105 = v69;
          operator delete(v71);
        }
        unint64_t v11 = v102;
        if (!v102) {
          goto LABEL_89;
        }
        int64_t v72 = v103;
        uint64_t v13 = v102;
        if (v103 == v102) {
          goto LABEL_88;
        }
        do
        {
          int64_t v74 = (void *)*--v72;
          int64_t v73 = v74;
          *int64_t v72 = 0;
          if (v74) {
            operator delete[](v73);
          }
        }
        while (v72 != v11);
        goto LABEL_87;
      }
      uint64_t v7 = 1;
      if (v24 != v19)
      {
        ++v19;
        uint64_t v28 = v22;
        v22 -= 8;
        v23 += 4;
        if (v28) {
          continue;
        }
      }
      return v7;
    }
    return 1;
  }
  v92[0] = (const void **)"mismatch in number of basic block args and defined values";
  __int16 v93 = 259;
  mlir::OpState::emitOpError(this, v92, (uint64_t)v97);
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
  if (v97[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
  }
  if (v106)
  {
    uint64_t v29 = (void **)__p;
    if (__p)
    {
      long long v30 = v105;
      uint64_t v31 = __p;
      if (v105 != __p)
      {
        do
          long long v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        uint64_t v31 = __p;
      }
      v105 = v29;
      operator delete(v31);
    }
    unint64_t v11 = v102;
    if (!v102) {
      goto LABEL_89;
    }
    uint64_t v32 = v103;
    uint64_t v13 = v102;
    if (v103 == v102) {
      goto LABEL_88;
    }
    do
    {
      char v34 = (void *)*--v32;
      uint64_t v33 = v34;
      *uint64_t v32 = 0;
      if (v34) {
        operator delete[](v33);
      }
    }
    while (v32 != v11);
    goto LABEL_87;
  }
  return v7;
}

uint64_t mlir::mps::serialization::ForOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v50[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *uint64_t v5 = 32;
    ++*((void *)v4 + 4);
  }
  uint64_t v6 = *(void *)((((unint64_t)*this
                   + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v6) {
    uint64_t v7 = v6 - 8;
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, **(void **)(v7 + 48));
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = *((void *)v8 + 4);
  if ((unint64_t)(*((void *)v8 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 32;
    *(_WORD *)uint64_t v9 = 15648;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v11 = (_DWORD *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 3uLL)
  {
    *unint64_t v11 = 544175136;
    *((void *)v10 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v10, " to ", 4uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  unint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = *((void *)v12 + 4);
  if ((unint64_t)(*((void *)v12 + 3) - v13) > 5)
  {
    *(_WORD *)(v13 + 4) = 8304;
    *(_DWORD *)uint64_t v13 = 1702130464;
    *((void *)v12 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v12, " step ", 6uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 88));
  uint64_t v14 = *this;
  unint64_t v15 = *((unsigned int *)*this + 11);
  uint64_t v16 = *(void *)((((unint64_t)*this + 16 * ((v15 >> 23) & 1) + ((v15 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*this + 10)
                  + 8);
  if (v16) {
    uint64_t v17 = v16 - 8;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void *)(v17 + 48);
  uint64_t v19 = ((*(void *)(v17 + 56) - v18) >> 3) - 1;
  uint64_t v20 = (void *)(v18 + 8);
  if ((v15 & 0x800000) != 0)
  {
    uint64_t v21 = *((void *)v14 + 9);
    unint64_t v22 = *((unsigned int *)v14 + 17) - 3;
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v22 = -3;
  }
  mlir::ValueRange::ValueRange(v50, v21 + 96, v22);
  printInitializationList(a2, v20, v19, v50[0], v50[1], " iter_args", 0xAuLL);
  if ((*((unsigned char *)*this + 46) & 0x80) == 0 || *((_DWORD *)*this + 17) != 3)
  {
    uint64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v24 = *((void *)v23 + 4);
    if ((unint64_t)(*((void *)v23 + 3) - v24) > 4)
    {
      *(unsigned char *)(v24 + 4) = 40;
      *(_DWORD *)uint64_t v24 = 540945696;
      *((void *)v23 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v23, " -> (", 5uLL);
    }
    uint64_t v25 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v26 = *((void *)v25 + 9);
      uint64_t v27 = *((unsigned int *)v25 + 17) - 3;
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = -3;
    }
    v47[0] = v26 + 96;
    v47[1] = v27;
    mlir::OperandRange::getTypes(v47, v48);
    v49[0] = ", ";
    v49[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v48[0], v48[1], v48[2], v48[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)v49);
    uint64_t v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v29 = (unsigned char *)*((void *)v28 + 4);
    if ((unint64_t)v29 >= *((void *)v28 + 3))
    {
      llvm::raw_ostream::write(v28, 41);
    }
    else
    {
      *((void *)v28 + 4) = v29 + 1;
      unsigned char *v29 = 41;
    }
  }
  long long v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v31 = (unsigned char *)*((void *)v30 + 4);
  if ((unint64_t)v31 >= *((void *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((void *)v30 + 4) = v31 + 1;
    *uint64_t v31 = 32;
  }
  uint64_t v32 = *(void *)((((unint64_t)*this
                    + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*this + 10)
                  + 8);
  if (v32) {
    uint64_t v33 = v32 - 8;
  }
  else {
    uint64_t v33 = 0;
  }
  v48[0] = *(void *)(**(void **)(v33 + 48) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::Type::isIndex((mlir::Type *)v48))
  {
LABEL_43:
    long long v38 = *this;
    unint64_t v39 = *((unsigned int *)*this + 11);
    if ((v39 & 0x7FFFFF) != 0) {
      goto LABEL_44;
    }
LABEL_51:
    unint64_t v40 = 0;
    if ((v39 & 0x800000) != 0) {
      goto LABEL_45;
    }
    goto LABEL_52;
  }
  char v34 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v35 = *((void *)v34 + 4);
  if ((unint64_t)(*((void *)v34 + 3) - v35) > 2)
  {
    *(unsigned char *)(v35 + 2) = 32;
    *(_WORD *)uint64_t v35 = 14880;
    *((void *)v34 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v34, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 32))(a2, v48[0]);
  uint64_t v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v37 = (unsigned char *)*((void *)v36 + 4);
  if ((unint64_t)v37 < *((void *)v36 + 3))
  {
    *((void *)v36 + 4) = v37 + 1;
    unsigned char *v37 = 32;
    goto LABEL_43;
  }
  llvm::raw_ostream::write(v36, 32);
  long long v38 = *this;
  unint64_t v39 = *((unsigned int *)*this + 11);
  if ((v39 & 0x7FFFFF) == 0) {
    goto LABEL_51;
  }
LABEL_44:
  unint64_t v40 = (((unint64_t)v38 + 16 * ((v39 >> 23) & 1) + ((v39 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *((unsigned int *)v38 + 10);
  if ((v39 & 0x800000) != 0)
  {
LABEL_45:
    BOOL v41 = *((_DWORD *)v38 + 17) > 3u;
    goto LABEL_46;
  }
LABEL_52:
  BOOL v41 = 0;
LABEL_46:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v40, 0, v41, 0);
  unsigned int v42 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v48[0] = mlir::Operation::getAttrDictionary(v42);
    long long v43 = (mlir::ArrayAttr *)v48;
  }
  else
  {
    long long v43 = (mlir::Operation *)((char *)v42 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v43);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v45, 0, 0);
}

uint64_t mlir::mps::serialization::ForOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v30 = 0;
  memset(v27, 0, 24);
  char v29 = 0;
  v27[4] = 0;
  v27[5] = 0;
  char v28 = 0;
  memset(v26, 0, 24);
  memset(v25, 0, 24);
  memset(v24, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v27, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 136))(a1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v26, 1)) {
    return 0;
  }
  __int16 v38 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "to", 2, &v35))return 0; {
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v25, 1))
  }
    return 0;
  __int16 v38 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(void *)a1 + 368))(a1, "step", 4, &v35)|| !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v24, 1))
  {
    return 0;
  }
  uint64_t v35 = v37;
  uint64_t v36 = 0x400000000;
  uint64_t v32 = v34;
  uint64_t v33 = 0x400000000;
  __n128 v5 = llvm::SmallVectorTemplateBase<mlir::OpAsmParser::Argument,true>::push_back((uint64_t)&v35, (unint64_t)v27);
  char v6 = (*(uint64_t (**)(uint64_t, const char *, uint64_t, __n128))(*(void *)a1 + 376))(a1, "iter_args", 9, v5);
  if (v6
    && (!mlir::OpAsmParser::parseAssignmentList(a1)
     || !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 528))(a1, a2 + 64)))
  {
    goto LABEL_34;
  }
  if (*(unsigned int *)(a2 + 72) + 1 == v36)
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1))
    {
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v30)) {
        goto LABEL_34;
      }
      uint64_t IndexType = v30;
    }
    else
    {
      uint64_t IndexType = mlir::Builder::getIndexType(v4, v7);
      uint64_t v30 = IndexType;
    }
    *((void *)v35 + 4) = IndexType;
    if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 696))(a1, v26)
      && (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v25, v30, a2 + 16)&& (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v24, v30, a2 + 16))
    {
      if (v6)
      {
        if (v36 != 1)
        {
          if (v33)
          {
            uint64_t v12 = *(unsigned int *)(a2 + 72);
            if (v12)
            {
              uint64_t v13 = 0;
              uint64_t v14 = (char *)v32;
              unint64_t v15 = *(void **)(a2 + 64);
              unint64_t v20 = ((unint64_t)v36 << 6) - 128;
              uint64_t v21 = (char *)v35 + 96;
              uint64_t v19 = (v12 << 6) - 64;
              unint64_t v16 = ((unint64_t)v33 << 6) - 64;
              while (1)
              {
                *(void *)&v21[v13] = *v15;
                if (!(*(unsigned __int8 (**)(uint64_t, char *))(*(void *)a1 + 696))(a1, v14)) {
                  goto LABEL_34;
                }
                if (v20 != v13 && v16 != v13)
                {
                  v14 += 32;
                  ++v15;
                  BOOL v17 = v19 == v13;
                  v13 += 64;
                  if (!v17) {
                    continue;
                  }
                }
                break;
              }
            }
          }
        }
      }
      uint64_t v18 = (void *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
      if ((*(unsigned __int8 (**)(uint64_t, void *, void *, void, void))(*(void *)a1 + 744))(a1, v18, v35, v36, 0))
      {
        mlir::impl::ensureRegionTerminator(v18, v4, *(void *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::mps::serialization::YieldOp>::Impl<mlir::mps::serialization::ForOp>::buildTerminator);
        uint64_t v9 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112) != 0;
        goto LABEL_35;
      }
    }
LABEL_34:
    uint64_t v9 = 0;
    goto LABEL_35;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  unint64_t v22 = "mismatch in number of loop-carried values and defined values";
  __int16 v23 = 259;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v31, a1, v11, &v22);
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v31);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v31);
LABEL_35:
  if (v32 != v34) {
    free(v32);
  }
  if (v35 != v37) {
    free(v35);
  }
  return v9;
}

uint64_t mlir::mps::serialization::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.condition", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::mps::serialization::ConditionOp::verifyInvariantsImpl(uint64_t **this)
{
  return mlir::complex::__mlir_ods_local_type_constraint_ComplexOps3(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0) != 0;
}

BOOL mlir::mps::serialization::ConditionOp::parse(uint64_t a1, uint64_t a2)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  memset(v15, 0, 24);
  uint64_t v12 = v14;
  uint64_t v13 = 0x400000000;
  v10[0] = &v11;
  v10[1] = (void *)0x100000000;
  BOOL v8 = (*(unsigned __int8 (**)(void))(*(void *)a1 + 264))()
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v15, 1))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v12, 0, 1, 0xFFFFFFFFLL))&& (!v13|| (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)&& mlir::AsmParser::parseTypeList(a1, (uint64_t)v10))&& (unint64_t v5 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1), IntegerType = mlir::Builder::getIntegerType(v5, 1u), v7 = a2 + 16, (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v15, IntegerType, v7))&& mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v12,
                          (uint64_t)v10,
                          v4,
                          v7) != 0;
  if (v10[0] != &v11) {
    free(v10[0]);
  }
  if (v12 != v14) {
    free(v12);
  }
  return v8;
}

uint64_t mlir::mps::serialization::detail::ForOpGenericAdaptorBase::ForOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.for", 7, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::serialization::ForOp::getInitArgs(mlir::mps::serialization::ForOp *this)
{
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    return *(void *)(*(void *)this + 72) + 96;
  }
  else {
    return 96;
  }
}

BOOL mlir::mps::serialization::ForOp::verifyInvariantsImpl(uint64_t **this)
{
  if (!mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*this, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)|| !mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*this, *(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 2u))
  {
    return 0;
  }
  uint64_t v2 = *this;
  uint64_t v3 = *((unsigned int *)*this + 9);
  if (*((_DWORD *)*this + 9)) {
    uint64_t v4 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i);
    uint64_t v2 = *this;
  }
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v2, (((unint64_t)&v2[2 * (((unint64_t)*((unsigned int *)v2 + 11) >> 23) & 1) + 8]+ (((unint64_t)*((unsigned int *)v2 + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v2 + 10), (uint64_t)"region", 6, 0) != 0;
}

uint64_t mlir::mps::serialization::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.if", 6, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::serialization::detail::ExtractOpGenericAdaptorBase::ExtractOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.extract", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::serialization::ExtractOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  v17[0] = a4;
  v17[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 == 1) {
    goto LABEL_8;
  }
  if (!v11)
  {
    if (*(_DWORD *)(a11 + 12))
    {
      unsigned int v12 = 0;
LABEL_6:
      bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
      goto LABEL_7;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
    unsigned int v12 = *(_DWORD *)(a11 + 8);
    if (v12 != 1) {
      goto LABEL_6;
    }
  }
LABEL_7:
  *(_DWORD *)(a11 + 8) = 1;
LABEL_8:
  uint64_t v13 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v17, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v13) {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  v16[0] = v13;
  v16[1] = v14;
  **(void **)a11 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v16);
  return 1;
}

uint64_t mlir::mps::serialization::ExtractOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  unint64_t v3 = *(void *)(*(void *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)v3;
  if (*(_UNKNOWN **)(*(void *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v110 = *(void *)(*(void *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v111 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v4 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v110);
  }
  else
  {
    __int16 v106 = 261;
    v104 = (const void **)"operand";
    uint64_t v105 = 7;
    mlir::Operation::emitOpError(v2, &v104, (uint64_t)&v110);
    if (v110)
    {
      int v107 = 3;
      v108 = " #";
      uint64_t v109 = 2;
      unint64_t v5 = &v107;
      unint64_t v6 = (char *)v112;
      if (v113 >= v114)
      {
        unint64_t v94 = v113 + 1;
        if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
        {
          int64_t v100 = (char *)&v107 - (unsigned char *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v94, 24);
          unint64_t v6 = (char *)v112;
          unint64_t v5 = (int *)((char *)v112 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v94, 24);
          unint64_t v5 = &v107;
          unint64_t v6 = (char *)v112;
        }
      }
      uint64_t v7 = &v6[24 * v113];
      long long v8 = *(_OWORD *)v5;
      *((void *)v7 + 2) = *((void *)v5 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      uint64_t v9 = ++v113;
      if (v110)
      {
        int v107 = 5;
        v108 = 0;
        uint64_t v10 = &v107;
        int v11 = (char *)v112;
        if (v9 >= v114)
        {
          unint64_t v95 = v9 + 1;
          BOOL v96 = (char *)v112 + 24 * v9 > (char *)&v107;
          if (v112 <= &v107 && v96)
          {
            int64_t v101 = (char *)&v107 - (unsigned char *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v95, 24);
            int v11 = (char *)v112;
            uint64_t v10 = (int *)((char *)v112 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v95, 24);
            uint64_t v10 = &v107;
            int v11 = (char *)v112;
          }
        }
        unsigned int v12 = &v11[24 * v113];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = *((void *)v10 + 2);
        *(_OWORD *)unsigned int v12 = v13;
        uint64_t v14 = ++v113;
        if (v110)
        {
          int v107 = 3;
          v108 = " must be ranked tensor of any type values, but got ";
          uint64_t v109 = 51;
          unint64_t v15 = &v107;
          unint64_t v16 = (char *)v112;
          if (v14 >= v114)
          {
            unint64_t v97 = v14 + 1;
            BOOL v98 = (char *)v112 + 24 * v14 > (char *)&v107;
            if (v112 <= &v107 && v98)
            {
              int64_t v102 = (char *)&v107 - (unsigned char *)v112;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v97, 24);
              unint64_t v16 = (char *)v112;
              unint64_t v15 = (int *)((char *)v112 + v102);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v97, 24);
              unint64_t v15 = &v107;
              unint64_t v16 = (char *)v112;
            }
          }
          BOOL v17 = &v16[24 * v113];
          long long v18 = *(_OWORD *)v15;
          *((void *)v17 + 2) = *((void *)v15 + 2);
          *(_OWORD *)BOOL v17 = v18;
          ++v113;
          if (v110)
          {
            uint64_t v19 = &v107;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v107, v3);
            unint64_t v20 = (char *)v112;
            if (v113 >= v114)
            {
              unint64_t v99 = v113 + 1;
              if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
              {
                int64_t v103 = (char *)&v107 - (unsigned char *)v112;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v99, 24);
                unint64_t v20 = (char *)v112;
                uint64_t v19 = (int *)((char *)v112 + v103);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v99, 24);
                uint64_t v19 = &v107;
                unint64_t v20 = (char *)v112;
              }
            }
            uint64_t v21 = &v20[24 * v113];
            long long v22 = *(_OWORD *)v19;
            *((void *)v21 + 2) = *((void *)v19 + 2);
            *(_OWORD *)uint64_t v21 = v22;
            ++v113;
          }
        }
      }
    }
    char v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
    if (v110) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
    }
    if (v120)
    {
      uint64_t v24 = (void **)__p;
      if (__p)
      {
        uint64_t v25 = v119;
        uint64_t v26 = __p;
        if (v119 != __p)
        {
          do
            uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
          while (v25 != v24);
          uint64_t v26 = __p;
        }
        v119 = v24;
        operator delete(v26);
      }
      uint64_t v27 = v116;
      if (v116)
      {
        char v28 = v117;
        char v29 = v116;
        if (v117 != v116)
        {
          do
          {
            uint64_t v31 = (void *)*--v28;
            uint64_t v30 = v31;
            void *v28 = 0;
            if (v31) {
              operator delete[](v30);
            }
          }
          while (v28 != v27);
          char v29 = v116;
        }
        v117 = v27;
        operator delete(v29);
      }
      if (v112 != v115) {
        free(v112);
      }
    }
    if (!v23) {
      return 0;
    }
  }
  uint64_t v32 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) == 0)
  {
    uint64_t v34 = -1;
    uint64_t v35 = 32;
LABEL_34:
    uint64_t v36 = 0;
    unsigned int v37 = 1;
    while (1)
    {
      unint64_t v38 = *(void *)(*(void *)(v35 + 32 * v36 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(void *)v38 + 136) != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
      {
        uint64_t v39 = *this;
        __int16 v106 = 261;
        v104 = (const void **)"operand";
        uint64_t v105 = 7;
        mlir::Operation::emitOpError(v39, &v104, (uint64_t)&v110);
        if (v110)
        {
          int v107 = 3;
          v108 = " #";
          uint64_t v109 = 2;
          unint64_t v40 = (char *)v112;
          if (v113 >= v114)
          {
            unint64_t v67 = v113 + 1;
            if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
            {
              int64_t v73 = (char *)&v107 - (unsigned char *)v112;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v67, 24);
              unint64_t v40 = (char *)v112;
              BOOL v41 = (int *)((char *)v112 + v73);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v67, 24);
              BOOL v41 = &v107;
              unint64_t v40 = (char *)v112;
            }
          }
          else
          {
            BOOL v41 = &v107;
          }
          unsigned int v42 = &v40[24 * v113];
          long long v43 = *(_OWORD *)v41;
          *((void *)v42 + 2) = *((void *)v41 + 2);
          *(_OWORD *)unsigned int v42 = v43;
          uint64_t v44 = ++v113;
          if (v110)
          {
            int v107 = 5;
            v108 = (const char *)v37;
            uint64_t v45 = (char *)v112;
            if (v44 >= v114)
            {
              unint64_t v68 = v44 + 1;
              BOOL v69 = (char *)v112 + 24 * v44 > (char *)&v107;
              if (v112 <= &v107 && v69)
              {
                int64_t v74 = (char *)&v107 - (unsigned char *)v112;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v68, 24);
                uint64_t v45 = (char *)v112;
                unint64_t v46 = (int *)((char *)v112 + v74);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v68, 24);
                unint64_t v46 = &v107;
                uint64_t v45 = (char *)v112;
              }
            }
            else
            {
              unint64_t v46 = &v107;
            }
            BOOL v47 = &v45[24 * v113];
            long long v48 = *(_OWORD *)v46;
            *((void *)v47 + 2) = *((void *)v46 + 2);
            *(_OWORD *)BOOL v47 = v48;
            uint64_t v49 = ++v113;
            if (v110)
            {
              int v107 = 3;
              v108 = " must be variadic of index, but got ";
              uint64_t v109 = 36;
              uint64_t v50 = (char *)v112;
              if (v49 >= v114)
              {
                unint64_t v70 = v49 + 1;
                BOOL v71 = (char *)v112 + 24 * v49 > (char *)&v107;
                if (v112 <= &v107 && v71)
                {
                  int64_t v75 = (char *)&v107 - (unsigned char *)v112;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v70, 24);
                  uint64_t v50 = (char *)v112;
                  uint64_t v51 = (int *)((char *)v112 + v75);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v70, 24);
                  uint64_t v51 = &v107;
                  uint64_t v50 = (char *)v112;
                }
              }
              else
              {
                uint64_t v51 = &v107;
              }
              v52 = &v50[24 * v113];
              long long v53 = *(_OWORD *)v51;
              *((void *)v52 + 2) = *((void *)v51 + 2);
              *(_OWORD *)v52 = v53;
              ++v113;
              if (v110)
              {
                char v54 = &v107;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v107, v38);
                uint64_t v55 = (char *)v112;
                if (v113 >= v114)
                {
                  unint64_t v72 = v113 + 1;
                  if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
                  {
                    int64_t v76 = (char *)&v107 - (unsigned char *)v112;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v72, 24);
                    uint64_t v55 = (char *)v112;
                    char v54 = (int *)((char *)v112 + v76);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v72, 24);
                    char v54 = &v107;
                    uint64_t v55 = (char *)v112;
                  }
                }
                uint64_t v56 = &v55[24 * v113];
                long long v57 = *(_OWORD *)v54;
                *((void *)v56 + 2) = *((void *)v54 + 2);
                *(_OWORD *)uint64_t v56 = v57;
                ++v113;
              }
            }
          }
        }
        char v58 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
        if (v110) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
        }
        if (v120)
        {
          uint64_t v59 = (void **)__p;
          if (__p)
          {
            v60 = v119;
            uint64_t v61 = __p;
            if (v119 != __p)
            {
              do
                v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
              while (v60 != v59);
              uint64_t v61 = __p;
            }
            v119 = v59;
            operator delete(v61);
          }
          unint64_t v62 = v116;
          if (v116)
          {
            long long v63 = v117;
            uint64_t v64 = v116;
            if (v117 != v116)
            {
              do
              {
                char v66 = (void *)*--v63;
                unint64_t v65 = v66;
                *long long v63 = 0;
                if (v66) {
                  operator delete[](v65);
                }
              }
              while (v63 != v62);
              uint64_t v64 = v116;
            }
            v117 = v62;
            operator delete(v64);
          }
          if (v112 != v115) {
            free(v112);
          }
        }
        if (!v58) {
          return 0;
        }
      }
      ++v37;
      if (++v36 == v34)
      {
        uint64_t v32 = *this;
        goto LABEL_86;
      }
    }
  }
  uint64_t v33 = *((unsigned int *)v32 + 17);
  uint64_t v34 = v33 - 1;
  if (v33 != 1)
  {
    uint64_t v35 = v32[9] + 32;
    goto LABEL_34;
  }
LABEL_86:
  int v78 = *((_DWORD *)v32 + 9);
  uint64_t v79 = (uint64_t)(v32 - 2);
  if (v78) {
    uint64_t v80 = v79;
  }
  else {
    uint64_t v80 = 0;
  }
  mlir::detail::OpResultImpl::getNextResultAtOffset(v80, 0);
  BOOL v81 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v81) {
    uint64_t v82 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v81 + 8);
  }
  else {
    uint64_t v82 = 0;
  }
  unint64_t v110 = (unint64_t)v81;
  uint64_t v111 = v82;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v110);
  if (*((_DWORD *)*this + 9)) {
    uint64_t v84 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v84 = 0;
  }
  if (OperandRange == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v84, 0) + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  v104 = (const void **)"failed to verify that result type matches element type of tensor";
  __int16 v106 = 259;
  mlir::OpState::emitOpError(this, &v104, (uint64_t)&v110);
  uint64_t v77 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
  if (v110) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
  }
  if (v120)
  {
    BOOL v85 = (void **)__p;
    if (__p)
    {
      int64_t v86 = v119;
      int64_t v87 = __p;
      if (v119 != __p)
      {
        do
          int64_t v86 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v86 - 1);
        while (v86 != v85);
        int64_t v87 = __p;
      }
      v119 = v85;
      operator delete(v87);
    }
    int64_t v88 = v116;
    if (v116)
    {
      int64_t v89 = v117;
      int64_t v90 = v116;
      if (v117 != v116)
      {
        do
        {
          char v92 = (void *)*--v89;
          int64_t v91 = v92;
          void *v89 = 0;
          if (v92) {
            operator delete[](v91);
          }
        }
        while (v89 != v88);
        int64_t v90 = v116;
      }
      v117 = v88;
      operator delete(v90);
    }
    if (v112 != v115) {
      free(v112);
    }
  }
  return v77;
}

uint64_t mlir::mps::serialization::ExtractOp::parse(uint64_t a1, uint64_t a2)
{
  v32[4] = *MEMORY[0x1E4F143B8];
  memset(v32, 0, 24);
  v25[0] = (uint64_t)v32;
  v25[1] = 1;
  char v28 = 0;
  char v29 = v31;
  uint64_t v30 = 0x400000000;
  v24[0] = &v28;
  v24[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v32, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 296))(a1))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
      if ((*(unsigned __int8 (**)(uint64_t, unsigned char **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v29, 0, 1, 0xFFFFFFFFLL))
      {
        if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 312))(a1))
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
          {
            if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
            {
              uint64_t v26 = 0;
              if (mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v26))
              {
                uint64_t v5 = v26;
                char v28 = (void *)v26;
                uint64_t v23 = v26;
                if (*(_UNKNOWN **)(*(void *)v26 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
                {
                  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
                  __int16 v22 = 257;
                  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(&v26, a1, v6, v21);
                  uint64_t v7 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v26, "'tensor' must be ranked tensor of any type values, but got ");
                  uint64_t v8 = mlir::InFlightDiagnostic::append<mlir::Type &>(v7, &v23);
                  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v8);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v26);
                  uint64_t v10 = v29;
                  if (v29 == v31) {
                    return v9;
                  }
                  goto LABEL_22;
                }
                uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v26 + 8);
                uint64_t v26 = v5;
                uint64_t v27 = v11;
                mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
                unsigned int v12 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
                uint64_t IndexType = mlir::Builder::getIndexType(v12, v13);
                unint64_t v15 = v28;
                uint64_t v16 = v28 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v28 + 8) : 0;
                uint64_t v26 = (uint64_t)v15;
                uint64_t v27 = v16;
                v21[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
                mlir::OperationState::addTypes(a2, v21, 1);
                uint64_t v17 = a2 + 16;
                if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v25, v24, v4, v17))
                {
                  if (!v30)
                  {
                    uint64_t v9 = 1;
                    uint64_t v10 = v29;
                    if (v29 == v31) {
                      return v9;
                    }
                    goto LABEL_22;
                  }
                  long long v18 = v29;
                  uint64_t v19 = 32 * v30;
                  uint64_t v9 = 1;
                  while ((*(unsigned __int8 (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v18, IndexType, v17))
                  {
                    v18 += 32;
                    v19 -= 32;
                    if (!v19) {
                      goto LABEL_21;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
LABEL_21:
  uint64_t v10 = v29;
  if (v29 != v31) {
LABEL_22:
  }
    free(v10);
  return v9;
}

uint64_t mlir::mps::serialization::detail::FromElementsOpGenericAdaptorBase::FromElementsOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.from_elements", 17, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::serialization::FromElementsOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)*this + 9)) {
    uint64_t v2 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  uint64_t v4 = *this;
  unint64_t v5 = (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = *v5;
  if (*((_UNKNOWN **)*v5 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v94 = (void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v95 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v6 + 8);
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v94))
    {
      ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v94);
      if (!v8)
      {
LABEL_10:
        uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v5 + 8);
        int64_t v87 = v5;
        uint64_t v88 = v10;
        mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v87);
        goto LABEL_39;
      }
      uint64_t v9 = 8 * v8;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v9 -= 8;
        if (!v9) {
          goto LABEL_10;
        }
      }
    }
  }
  __int16 v90 = 261;
  int64_t v87 = (const void **)"result";
  uint64_t v88 = 6;
  mlir::Operation::emitOpError(v4, &v87, (uint64_t)&v94);
  if (v94)
  {
    LODWORD(v91) = 3;
    char v92 = " #";
    uint64_t v93 = 2;
    uint64_t v11 = (char *)&v91;
    unsigned int v12 = (char *)v97;
    if (v98 >= v99)
    {
      unint64_t v75 = v98 + 1;
      if (v97 <= &v91 && (char *)v97 + 24 * v98 > (char *)&v91)
      {
        int64_t v81 = (char *)&v91 - (unsigned char *)v97;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v75, 24);
        unsigned int v12 = (char *)v97;
        uint64_t v11 = (char *)v97 + v81;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v75, 24);
        uint64_t v11 = (char *)&v91;
        unsigned int v12 = (char *)v97;
      }
    }
    long long v13 = &v12[24 * v98];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = *((void *)v11 + 2);
    *(_OWORD *)long long v13 = v14;
    uint64_t v15 = ++v98;
    if (v94)
    {
      LODWORD(v91) = 5;
      char v92 = 0;
      uint64_t v16 = (char *)&v91;
      uint64_t v17 = (char *)v97;
      if (v15 >= v99)
      {
        unint64_t v76 = v15 + 1;
        BOOL v77 = (char *)v97 + 24 * v15 > (char *)&v91;
        if (v97 <= &v91 && v77)
        {
          int64_t v82 = (char *)&v91 - (unsigned char *)v97;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v76, 24);
          uint64_t v17 = (char *)v97;
          uint64_t v16 = (char *)v97 + v82;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v76, 24);
          uint64_t v16 = (char *)&v91;
          uint64_t v17 = (char *)v97;
        }
      }
      long long v18 = &v17[24 * v98];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)long long v18 = v19;
      uint64_t v20 = ++v98;
      if (v94)
      {
        LODWORD(v91) = 3;
        char v92 = " must be statically shaped tensor of any type values, but got ";
        uint64_t v93 = 62;
        uint64_t v21 = (char *)&v91;
        __int16 v22 = (char *)v97;
        if (v20 >= v99)
        {
          unint64_t v78 = v20 + 1;
          BOOL v79 = (char *)v97 + 24 * v20 > (char *)&v91;
          if (v97 <= &v91 && v79)
          {
            int64_t v83 = (char *)&v91 - (unsigned char *)v97;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v78, 24);
            __int16 v22 = (char *)v97;
            uint64_t v21 = (char *)v97 + v83;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v78, 24);
            uint64_t v21 = (char *)&v91;
            __int16 v22 = (char *)v97;
          }
        }
        uint64_t v23 = &v22[24 * v98];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v23 = v24;
        ++v98;
        if (v94)
        {
          uint64_t v25 = (char *)&v91;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v91, (uint64_t)v5);
          uint64_t v26 = (char *)v97;
          if (v98 >= v99)
          {
            unint64_t v80 = v98 + 1;
            if (v97 <= &v91 && (char *)v97 + 24 * v98 > (char *)&v91)
            {
              int64_t v84 = (char *)&v91 - (unsigned char *)v97;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v80, 24);
              uint64_t v26 = (char *)v97;
              uint64_t v25 = (char *)v97 + v84;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v80, 24);
              uint64_t v25 = (char *)&v91;
              uint64_t v26 = (char *)v97;
            }
          }
          uint64_t v27 = &v26[24 * v98];
          long long v28 = *(_OWORD *)v25;
          *((void *)v27 + 2) = *((void *)v25 + 2);
          *(_OWORD *)uint64_t v27 = v28;
          ++v98;
        }
      }
    }
  }
  char v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v94);
  if (v94) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v94);
  }
  if (v105)
  {
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v104;
      uint64_t v32 = __p;
      if (v104 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      v104 = v30;
      operator delete(v32);
    }
    uint64_t v33 = v101;
    if (v101)
    {
      uint64_t v34 = v102;
      uint64_t v35 = v101;
      if (v102 != v101)
      {
        do
        {
          unsigned int v37 = (void *)*--v34;
          uint64_t v36 = v37;
          *uint64_t v34 = 0;
          if (v37) {
            operator delete[](v36);
          }
        }
        while (v34 != v33);
        uint64_t v35 = v101;
      }
      int64_t v102 = v33;
      operator delete(v35);
    }
    if (v97 != v100) {
      free(v97);
    }
  }
  if (!v29) {
    return 0;
  }
LABEL_39:
  if (*((_DWORD *)*this + 9)) {
    uint64_t v38 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v39 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v38, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v39) {
    uint64_t v40 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v39 + 8);
  }
  else {
    uint64_t v40 = 0;
  }
  int64_t v91 = v39;
  char v92 = (const char *)v40;
  unsigned int v42 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v91);
  unint64_t NumElements = mlir::ShapedType::getNumElements(v42, v43);
  if (*((_DWORD *)*this + 9)) {
    uint64_t v45 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v45 = 0;
  }
  unint64_t v46 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v45, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v46) {
    uint64_t v47 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v46 + 8);
  }
  else {
    uint64_t v47 = 0;
  }
  v86[0] = v46;
  v86[1] = v47;
  uint64_t OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v86);
  unint64_t v49 = (unint64_t)OperandRange;
  unint64_t v94 = &v96;
  HIDWORD(v95) = 2;
  if (NumElements < 3)
  {
    if (NumElements)
    {
      BOOL v96 = OperandRange;
      if (NumElements != 1) {
        unint64_t v97 = OperandRange;
      }
    }
  }
  else
  {
    LODWORD(v95) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, &v96, NumElements, 8);
    if (NumElements == 3)
    {
      uint64_t v50 = 3;
      uint64_t v51 = (unint64_t *)v94;
    }
    else
    {
      uint64_t v51 = (unint64_t *)((char *)v94 + 8 * (NumElements & 0xFFFFFFFFFFFFFFFCLL));
      uint64_t v50 = NumElements & 3;
      int64x2_t v52 = vdupq_n_s64(v49);
      long long v53 = (int64x2_t *)((char *)v94 + 16);
      unint64_t v54 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v53[-1] = v52;
        *long long v53 = v52;
        v53 += 2;
        v54 -= 4;
      }
      while (v54);
      if (NumElements == (NumElements & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_62;
      }
    }
    do
    {
      *v51++ = v49;
      --v50;
    }
    while (v50);
  }
LABEL_62:
  LODWORD(v95) = NumElements;
  uint64_t v55 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v56 = *((unsigned int *)v55 + 17);
    uint64_t v57 = v55[9];
  }
  else
  {
    uint64_t v57 = 0;
    uint64_t v56 = 0;
  }
  v85[0] = v57;
  v85[1] = v56;
  mlir::OperandRange::getTypes(v85, (uint64_t *)&v87);
  if (v89 - v88 != v95)
  {
    BOOL v64 = 0;
    goto LABEL_74;
  }
  if (v95)
  {
    uint64_t v58 = 8 * v95 - 8;
    uint64_t v59 = &v87[4 * v88 + 3];
    v60 = (uint64_t *)v94;
    do
    {
      uint64_t v61 = *v59;
      v59 += 4;
      uint64_t v62 = v61[1];
      uint64_t v63 = *v60++;
      BOOL v64 = v63 == (v62 & 0xFFFFFFFFFFFFFFF8);
      BOOL v65 = v63 != (v62 & 0xFFFFFFFFFFFFFFF8) || v58 == 0;
      v58 -= 8;
    }
    while (!v65);
LABEL_74:
    if (v94 == &v96) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  BOOL v64 = 1;
  if (v94 != &v96) {
LABEL_75:
  }
    free(v94);
LABEL_76:
  if (v64) {
    return 1;
  }
  int64_t v87 = (const void **)"failed to verify that operand types match result element type";
  __int16 v90 = 259;
  mlir::OpState::emitOpError(this, &v87, (uint64_t)&v94);
  uint64_t v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v94);
  if (v94) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v94);
  }
  if (v105)
  {
    char v66 = (void **)__p;
    if (__p)
    {
      unint64_t v67 = v104;
      unint64_t v68 = __p;
      if (v104 != __p)
      {
        do
          unint64_t v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        unint64_t v68 = __p;
      }
      v104 = v66;
      operator delete(v68);
    }
    BOOL v69 = v101;
    if (v101)
    {
      unint64_t v70 = v102;
      BOOL v71 = v101;
      if (v102 != v101)
      {
        do
        {
          int64_t v73 = (void *)*--v70;
          unint64_t v72 = v73;
          *unint64_t v70 = 0;
          if (v73) {
            operator delete[](v72);
          }
        }
        while (v70 != v69);
        BOOL v71 = v101;
      }
      int64_t v102 = v69;
      operator delete(v71);
    }
    if (v97 != v100) {
      free(v97);
    }
  }
  return v41;
}

uint64_t mlir::mps::serialization::FromElementsOp::parse(uint64_t a1, uint64_t a2)
{
  v68[16] = *MEMORY[0x1E4F143B8];
  v67[0] = (uint64_t)v68;
  v67[1] = 0x400000000;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, v67, 0, 1, 0xFFFFFFFFLL)|| ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1), !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| (uint64_t v55 = 0, !mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v55)))
  {
    uint64_t v21 = 0;
    __int16 v22 = (void *)v67[0];
    if ((void *)v67[0] == v68) {
      return v21;
    }
    goto LABEL_42;
  }
  unint64_t v5 = v55;
  if (*(_UNKNOWN **)(*(void *)v55 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || (uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v55 + 8),
        uint64_t v55 = v5,
        uint64_t v56 = v6,
        !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v55)))
  {
LABEL_18:
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    __int16 v51 = 257;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void **))(*(void *)a1 + 24))(&v55, a1, v23, &v49);
    if (v55)
    {
      LODWORD(v52) = 3;
      long long v53 = "'result' must be statically shaped tensor of any type values, but got ";
      uint64_t v54 = 70;
      long long v24 = (char *)&v52;
      uint64_t v25 = (char *)v58;
      if (v59 >= v60)
      {
        unint64_t v45 = v59 + 1;
        if (v58 <= &v52 && (char *)v58 + 24 * v59 > (char *)&v52)
        {
          int64_t v47 = (char *)&v52 - (unsigned char *)v58;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v45, 24);
          uint64_t v25 = (char *)v58;
          long long v24 = (char *)v58 + v47;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v45, 24);
          long long v24 = (char *)&v52;
          uint64_t v25 = (char *)v58;
        }
      }
      uint64_t v26 = &v25[24 * v59];
      long long v27 = *(_OWORD *)v24;
      *((void *)v26 + 2) = *((void *)v24 + 2);
      *(_OWORD *)uint64_t v26 = v27;
      ++v59;
      if (v55)
      {
        long long v28 = (char *)&v52;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, (uint64_t)v5);
        char v29 = (char *)v58;
        if (v59 >= v60)
        {
          unint64_t v46 = v59 + 1;
          if (v58 <= &v52 && (char *)v58 + 24 * v59 > (char *)&v52)
          {
            int64_t v48 = (char *)&v52 - (unsigned char *)v58;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v46, 24);
            char v29 = (char *)v58;
            long long v28 = (char *)v58 + v48;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v46, 24);
            long long v28 = (char *)&v52;
            char v29 = (char *)v58;
          }
        }
        uint64_t v30 = &v29[24 * v59];
        long long v31 = *(_OWORD *)v28;
        *((void *)v30 + 2) = *((void *)v28 + 2);
        *(_OWORD *)uint64_t v30 = v31;
        ++v59;
      }
    }
    uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v55);
    if (v55) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v55);
    }
    if (v66)
    {
      uint64_t v32 = (void **)__p;
      if (__p)
      {
        uint64_t v33 = v65;
        uint64_t v34 = __p;
        if (v65 != __p)
        {
          do
            uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          uint64_t v34 = __p;
        }
        BOOL v65 = v32;
        operator delete(v34);
      }
      uint64_t v35 = v62;
      if (v62)
      {
        uint64_t v36 = v63;
        unsigned int v37 = v62;
        if (v63 != v62)
        {
          do
          {
            uint64_t v39 = (void *)*--v36;
            uint64_t v38 = v39;
            *uint64_t v36 = 0;
            if (v39) {
              operator delete[](v38);
            }
          }
          while (v36 != v35);
          unsigned int v37 = v62;
        }
        uint64_t v63 = v35;
        operator delete(v37);
      }
      if (v58 != v61) {
        free(v58);
      }
    }
    __int16 v22 = (void *)v67[0];
    if ((void *)v67[0] != v68) {
      goto LABEL_42;
    }
    return v21;
  }
  ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v55);
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v9 -= 8;
      if (!v9) {
        goto LABEL_11;
      }
    }
    goto LABEL_18;
  }
LABEL_11:
  uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  unint64_t v49 = v5;
  uint64_t v50 = v10;
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v49);
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v11) = v5;
  ++*(_DWORD *)(a2 + 72);
  uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  unint64_t v49 = v5;
  uint64_t v50 = v12;
  long long v13 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  unint64_t NumElements = mlir::ShapedType::getNumElements(v13, v14);
  uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  int64x2_t v52 = v5;
  long long v53 = (const char *)v16;
  uint64_t OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
  unint64_t v18 = (unint64_t)OperandRange;
  uint64_t v55 = &v57;
  HIDWORD(v56) = 2;
  if (NumElements < 3)
  {
    if (NumElements)
    {
      uint64_t v57 = OperandRange;
      if (NumElements != 1) {
        uint64_t v58 = OperandRange;
      }
    }
  }
  else
  {
    LODWORD(v56) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, &v57, NumElements, 8);
    if (NumElements == 3)
    {
      uint64_t v19 = 3;
      uint64_t v20 = (unint64_t *)v55;
      do
      {
LABEL_50:
        *v20++ = v18;
        --v19;
      }
      while (v19);
      goto LABEL_51;
    }
    uint64_t v20 = (unint64_t *)((char *)v55 + 8 * (NumElements & 0xFFFFFFFFFFFFFFFCLL));
    uint64_t v19 = NumElements & 3;
    int64x2_t v41 = vdupq_n_s64(v18);
    unsigned int v42 = (int64x2_t *)((char *)v55 + 16);
    unint64_t v43 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v42[-1] = v41;
      *unsigned int v42 = v41;
      v42 += 2;
      v43 -= 4;
    }
    while (v43);
    if (NumElements != (NumElements & 0xFFFFFFFFFFFFFFFCLL)) {
      goto LABEL_50;
    }
  }
LABEL_51:
  LODWORD(v56) = NumElements;
  char v44 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, v67, (uint64_t)&v55, v4, a2 + 16);
  if (v55 != &v57) {
    free(v55);
  }
  uint64_t v21 = v44 != 0;
  __int16 v22 = (void *)v67[0];
  if ((void *)v67[0] != v68) {
LABEL_42:
  }
    free(v22);
  return v21;
}

uint64_t mlir::mps::serialization::FuncOp::getInherentAttr(int a1, void *a2, void *__s1, size_t __n)
{
  switch(__n)
  {
    case 8uLL:
      if (memcmp(__s1, "sym_name", __n)) {
        return 0;
      }
      return a2[3];
    case 9uLL:
      if (*__s1 == 0x727474615F677261 && *((unsigned char *)__s1 + 8) == 115) {
        return *a2;
      }
      if (memcmp(__s1, "res_attrs", __n)) {
        return 0;
      }
      return a2[2];
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
      return 0;
    case 0xDuLL:
      if (memcmp(__s1, "function_type", __n)) {
        return 0;
      }
      return a2[1];
    case 0xEuLL:
      if (memcmp(__s1, "sym_visibility", __n)) {
        return 0;
      }
      return a2[4];
    default:
      return 0;
  }
}

uint64_t mlir::mps::serialization::FuncOp::setInherentAttr(uint64_t result, void *__s1, size_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)result;
  switch(a3)
  {
    case 8uLL:
      uint64_t result = memcmp(__s1, "sym_name", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          v5[3] = v10;
        }
        else
        {
          v5[3] = 0;
        }
      }
      break;
    case 9uLL:
      if (*__s1 == 0x727474615F677261 && *((unsigned char *)__s1 + 8) == 115)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
            uint64_t v11 = a4;
          }
          else {
            uint64_t v11 = 0;
          }
          *(void *)uint64_t result = v11;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      else
      {
        uint64_t result = memcmp(__s1, "res_attrs", a3);
        if (!result)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
              uint64_t v7 = a4;
            }
            else {
              uint64_t v7 = 0;
            }
            v5[2] = v7;
          }
          else
          {
            v5[2] = 0;
          }
        }
      }
      break;
    case 0xDuLL:
      uint64_t result = memcmp(__s1, "function_type", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          v5[1] = v8;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xEuLL:
      uint64_t result = memcmp(__s1, "sym_visibility", a3);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
            uint64_t v9 = a4;
          }
          else {
            uint64_t v9 = 0;
          }
          v5[4] = v9;
        }
        else
        {
          v5[4] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::mps::serialization::FuncOp::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::TypeAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3 + 3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 4) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    unint64_t v3 = operator new(0x28uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    *((void *)v3 + 4) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 120;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[193];
    return a1[32];
  }
  return result;
}

uint64_t mlir::mps::serialization::FuncOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v3 = (void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v3 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *v3);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, v3[1]);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, v3[2]);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, v3[3]);
  uint64_t v4 = v3[4];
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24);

  return v5(a2, v4);
}

uint64_t mlir::mps::serialization::FuncOp::getSymVisibility@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = 0;
  }
  uint64_t v5 = *(void *)(v3 + 32);
  if (v5)
  {
    this = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v5);
    *(void *)a2 = this;
    *(void *)(a2 + 8) = v4;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return this;
}

uint64_t mlir::mps::serialization::FuncOp::removeArgAttrsAttr(mlir::mps::serialization::FuncOp *this)
{
  v1 = (void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    v1 = 0;
  }
  void *v1 = 0;
  return 0;
}

uint64_t mlir::mps::serialization::FuncOp::removeResAttrsAttr(mlir::mps::serialization::FuncOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  *(void *)(v1 + 16) = 0;
  return 0;
}

BOOL mlir::mps::serialization::FuncOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = (const void **)v3[1];
  if (v4)
  {
    uint64_t v5 = v3[3];
    if (v5)
    {
      uint64_t v6 = *v3;
      uint64_t v7 = v3[2];
      uint64_t v8 = v3[4];
      v30[0] = v2;
      if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v5, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
      v30[0] = *this;
      }
      if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps2(v4, (const void **)"function_type", (const char *)0xD, (void (*)(const void ***__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
      v30[0] = *this;
      }
      if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v8, (const void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
      v30[0] = *this;
      }
      if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps3(v6, (const void **)"arg_attrs", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
      v30[0] = *this;
      }
      return mlir::func::__mlir_ods_local_attr_constraint_FuncOps3(v7, (const void **)"res_attrs", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30) != 0;
    }
    v28[0] = (const void **)"requires attribute 'sym_name'";
    __int16 v29 = 259;
    mlir::OpState::emitOpError(this, v28, (uint64_t)v30);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
    if (v30[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    }
    if (v37)
    {
      unint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v36;
        uint64_t v20 = __p;
        if (v36 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        uint64_t v36 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v33;
      if (v33)
      {
        __int16 v22 = v34;
        uint64_t v23 = v33;
        if (v34 != v33)
        {
          do
          {
            uint64_t v25 = (void *)*--v22;
            long long v24 = v25;
            void *v22 = 0;
            if (v25) {
              operator delete[](v24);
            }
          }
          while (v22 != v21);
          uint64_t v23 = v33;
        }
        uint64_t v34 = v21;
        operator delete(v23);
      }
      uint64_t v26 = v31;
      if (v31 != v32) {
LABEL_47:
      }
        free(v26);
    }
  }
  else
  {
    v28[0] = (const void **)"requires attribute 'function_type'";
    __int16 v29 = 259;
    mlir::OpState::emitOpError(this, v28, (uint64_t)v30);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
    if (v30[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    }
    if (v37)
    {
      uint64_t v10 = (void **)__p;
      if (__p)
      {
        unint64_t v11 = v36;
        uint64_t v12 = __p;
        if (v36 != __p)
        {
          do
            unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          uint64_t v12 = __p;
        }
        uint64_t v36 = v10;
        operator delete(v12);
      }
      long long v13 = v33;
      if (v33)
      {
        unint64_t v14 = v34;
        uint64_t v15 = v33;
        if (v34 != v33)
        {
          do
          {
            uint64_t v17 = (void *)*--v14;
            uint64_t v16 = v17;
            void *v14 = 0;
            if (v17) {
              operator delete[](v16);
            }
          }
          while (v14 != v13);
          uint64_t v15 = v33;
        }
        uint64_t v34 = v13;
        operator delete(v15);
      }
      uint64_t v26 = v31;
      if (v31 != v32) {
        goto LABEL_47;
      }
    }
  }
  return v9;
}

uint64_t mlir::mps::serialization::ModuleOp::getInherentAttr(int a1, void *a2, void *__s1, size_t __n)
{
  if (__n == 14)
  {
    if (!memcmp(__s1, "sym_visibility", 0xEuLL)) {
      return a2[1];
    }
    return 0;
  }
  if (__n != 8 || *__s1 != 0x656D616E5F6D7973) {
    return 0;
  }
  return *a2;
}

uint64_t mlir::mps::serialization::ModuleOp::setInherentAttr(uint64_t result, void *__s1, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 14)
  {
    uint64_t result = memcmp(__s1, "sym_visibility", 0xEuLL);
    if (!result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
          uint64_t v6 = a4;
        }
        else {
          uint64_t v6 = 0;
        }
        *(void *)(v5 + 8) = v6;
      }
      else
      {
        *(void *)(v5 + 8) = 0;
      }
    }
  }
  else if (a3 == 8 && *__s1 == 0x656D616E5F6D7973)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = 0;
      }
      *(void *)uint64_t result = v7;
    }
    else
    {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

void mlir::mps::serialization::ModuleOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_name", 8, *a2);
  }
  uint64_t v5 = a2[1];
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_visibility", 14, v5);
  }
}

BOOL mlir::mps::serialization::ModuleOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v8, (const void **)"sym_name", (const char *)8, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v9, (const void **)"sym_visibility", (const char *)0xE, a3, a4))
    {
      return 1;
    }
  }
  return result;
}

BOOL mlir::mps::serialization::ModuleOp::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    unint64_t v3 = operator new(0x10uLL);
    void *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::serialization::detail::ModuleOpGenericAdaptorB"
              "ase::Properties]";
        unint64_t v14 = 122;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[195];
    return a1[32];
  }
  return result;
}

uint64_t mlir::mps::serialization::ModuleOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v3 = (void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v3 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *v3);
  uint64_t v4 = v3[1];
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24);

  return v5(a2, v4);
}

uint64_t mlir::mps::serialization::ModuleOp::getSymName@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v4)
  {
    this = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v4);
    *(void *)a2 = this;
    *(void *)(a2 + 8) = v3;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return this;
}

BOOL mlir::mps::serialization::ModuleOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  unint64_t v7 = v2;
  if (mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v4, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)&& (unint64_t v7 = *this, mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v5, (const void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)))
  {
    return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(*this, (((unint64_t)&(*this)[2* (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ 8]+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10), (uint64_t)"bodyRegion", 10, 0) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::mps::serialization::ModuleOp::verifyInvariants(uint64_t **this)
{
  return mlir::mps::serialization::ModuleOp::verifyInvariantsImpl(this) && mlir::ModuleOp::verify(this);
}

uint64_t mlir::mps::serialization::ModuleOp::parse(uint64_t a1, void *a2)
{
  uint64_t v17 = 0;
  uint64_t v4 = (mlir::Region *)operator new(0x18uLL);
  *(void *)uint64_t v4 = v4;
  *((void *)v4 + 1) = v4;
  *((void *)v4 + 2) = 0;
  uint64_t v16 = v4;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 496))(a1, &v17);
  if (v17)
  {
    uint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v5 = v17;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 464))(a1, a2 + 14)
    || (uint64_t v6 = a2[1],
        v14[0] = a1,
        v14[1] = &v15,
        v14[2] = a2,
        (uint64_t v7 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v6 + 96))) != 0)
    && !mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v7, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v14)|| (uint64_t v8 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), *(void *)(*(void *)(v6 + 96) + 8))) != 0&& !mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v8, (const void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v14)|| !(*(unsigned __int8 (**)(uint64_t, mlir::Region *, void, void, void))(*(void *)a1 + 744))(a1, v4, 0, 0, 0))
  {
    uint64_t v11 = 0;
    uint64_t v16 = 0;
LABEL_14:
    mlir::Region::~Region(v4);
    operator delete(v12);
    return v11;
  }
  if (*(mlir::Region **)v4 == v4)
  {
    unint64_t v9 = operator new(0x48uLL);
    *unint64_t v9 = 0u;
    v9[1] = 0u;
    *((void *)v9 + 4) = v9 + 2;
    *((void *)v9 + 5) = v9 + 2;
    *((void *)v9 + 7) = 0;
    *((void *)v9 + 8) = 0;
    *((void *)v9 + 6) = 0;
    llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v4, (uint64_t)v9);
    uint64_t v10 = *(void *)v4;
    *((void *)v9 + 2) = v4;
    *((void *)v9 + 1) = v10;
    unint64_t v9 = (_OWORD *)((char *)v9 + 8);
    *(void *)(v10 + 8) = v9;
    *(void *)uint64_t v4 = v9;
  }
  mlir::OperationState::addRegion((uint64_t)a2, (unint64_t)&v16);
  uint64_t v4 = v16;
  uint64_t v16 = 0;
  uint64_t v11 = 1;
  if (v4) {
    goto LABEL_14;
  }
  return v11;
}

BOOL mlir::mps::serialization::ReturnOp::parse(uint64_t a1, uint64_t a2)
{
  v12[16] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = v12;
  uint64_t v11 = 0x400000000;
  v8[0] = &v9;
  v8[1] = (void *)0x100000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)
    || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v10, 0, 1, 0xFFFFFFFFLL))|| v11&& (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v8)))
  {
    BOOL v5 = 0;
    uint64_t v6 = v8[0];
    if (v8[0] == &v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  BOOL v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v10, (uint64_t)v8, v4, a2 + 16) != 0;
  uint64_t v6 = v8[0];
  if (v8[0] != &v9) {
LABEL_9:
  }
    free(v6);
LABEL_10:
  if (v10 != v12) {
    free(v10);
  }
  return v5;
}

uint64_t mlir::mps::serialization::detail::WhileOpGenericAdaptorBase::WhileOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.while", 9, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::serialization::detail::YieldOpGenericAdaptorBase::YieldOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "mps.yield", 9, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::mps::serialization::YieldOp::parse(uint64_t a1, uint64_t a2)
{
  v12[16] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = v12;
  uint64_t v11 = 0x400000000;
  v8[0] = &v9;
  v8[1] = (void *)0x100000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)
    || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v10, 0, 1, 0xFFFFFFFFLL))|| v11&& (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v8)))
  {
    BOOL v5 = 0;
    unint64_t v6 = v8[0];
    if (v8[0] == &v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  BOOL v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v10, (uint64_t)v8, v4, a2 + 16) != 0;
  unint64_t v6 = v8[0];
  if (v8[0] != &v9) {
LABEL_9:
  }
    free(v6);
LABEL_10:
  if (v10 != v12) {
    free(v10);
  }
  return v5;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mps::serialization::FuncOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::mps::serialization::YieldOp>::Impl<mlir::mps::serialization::IfOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  v5[38] = *MEMORY[0x1E4F143B8];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"mps.yield", 9);
  uint64_t v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::mps::serialization::YieldOp>::Impl<mlir::mps::serialization::ForOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  v5[38] = *MEMORY[0x1E4F143B8];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"mps.yield", 9);
  uint64_t v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v37);
  if (v37)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "'";
    uint64_t v35 = 1;
    long long v4 = &v33;
    BOOL v5 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v29 = v41 + 1;
      if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
      {
        int64_t v31 = (char *)&v33 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        BOOL v5 = (char *)v40;
        long long v4 = (const void ***)((char *)v40 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
        long long v4 = &v33;
        BOOL v5 = (char *)v40;
      }
    }
    unint64_t v6 = &v5[24 * v41];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)unint64_t v6 = v7;
    ++v41;
  }
  uint64_t v33 = *(const void ***)(*(void *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v33);
  uint64_t v10 = v37;
  if (v37)
  {
    __int16 v36 = 261;
    uint64_t v33 = AttrData;
    uint64_t v34 = v9;
    mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
    uint64_t v10 = v37;
    if (v37)
    {
      LODWORD(v33) = 3;
      uint64_t v34 = "' op ";
      uint64_t v35 = 5;
      uint64_t v11 = &v33;
      uint64_t v12 = (char *)v40;
      if (v41 >= v42)
      {
        unint64_t v30 = v41 + 1;
        if (v40 <= &v33 && (char *)v40 + 24 * v41 > (char *)&v33)
        {
          int64_t v32 = (char *)&v33 - (unsigned char *)v40;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v12 = (char *)v40;
          uint64_t v11 = (const void ***)((char *)v40 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v30, 24);
          uint64_t v11 = &v33;
          uint64_t v12 = (char *)v40;
        }
      }
      long long v13 = &v12[24 * v41];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)long long v13 = v14;
      ++v41;
      uint64_t v10 = v37;
    }
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 184) = 0;
  if (v48)
  {
    *(void *)(a2 + 8) = v38;
    unint64_t v15 = v41;
    *(_DWORD *)(a2 + 16) = v39;
    uint64_t v16 = (void *)(a2 + 40);
    *(void *)(a2 + 24) = a2 + 40;
    *(void *)(a2 + 32) = 0x400000000;
    if (!v15 || &v37 == (uint64_t *)a2)
    {
      int v19 = 1;
      goto LABEL_21;
    }
    uint64_t v17 = v43;
    if (v40 != v43)
    {
      *(void *)(a2 + 24) = v40;
      unsigned int v18 = v42;
      *(_DWORD *)(a2 + 32) = v15;
      *(_DWORD *)(a2 + 36) = v18;
      uint64_t v40 = v43;
      unsigned int v42 = 0;
      int v19 = 1;
LABEL_20:
      unsigned int v41 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v44;
      *(void *)(a2 + 152) = v45;
      v44[0] = 0;
      v44[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(void *)(a2 + 176) = v47;
      uint64_t v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v47 = 0;
      *(unsigned char *)(a2 + 184) = 1;
      if (v19)
      {
        if (v40 != v43) {
          free(v40);
        }
        unsigned __int8 v48 = 0;
      }
      goto LABEL_25;
    }
    if (v15 < 5)
    {
      unint64_t v20 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v15, 24);
      unint64_t v20 = v41;
      if (!v41)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v15;
        int v19 = v48;
        goto LABEL_20;
      }
      uint64_t v17 = v40;
      uint64_t v16 = *(void **)(a2 + 24);
    }
    memcpy(v16, v17, 24 * v20);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v48)
  {
    uint64_t v21 = (void **)__p[0];
    if (__p[0])
    {
      __int16 v22 = (void **)__p[1];
      uint64_t v23 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          __int16 v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p[0];
      }
      __p[1] = v21;
      operator delete(v23);
    }
    long long v24 = v44[0];
    if (v44[0])
    {
      uint64_t v25 = v44[1];
      uint64_t v26 = v44[0];
      if (v44[1] != v44[0])
      {
        do
        {
          long long v28 = (void *)*--v25;
          long long v27 = v28;
          *uint64_t v25 = 0;
          if (v28) {
            operator delete[](v27);
          }
        }
        while (v25 != v24);
        uint64_t v26 = v44[0];
      }
      v44[1] = v24;
      operator delete(v26);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

uint64_t mlir::mps::MPSDialect::parseType(uint64_t a1, mlir::AsmParser *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if (mlir::AsmParser::parseKeyword(this, (llvm::StringRef *)&v20))
  {
    uint64_t v4 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)this + 16))(this);
    uint64_t v5 = (*(uint64_t (**)(mlir::AsmParser *, uint64_t))(*(void *)this + 48))(this, v4);
    if (v21 == 3)
    {
      uint64_t v6 = v20;
      if (*(_WORD *)v20 == 26222 && *(unsigned char *)(v20 + 2) == 52)
      {
        TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
        return mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id);
      }
    }
    else
    {
      uint64_t v6 = v20;
    }
    __int16 v19 = 1283;
    v18[0] = "unknown MPS type: ";
    v18[2] = v6;
    v18[3] = v21;
    mlir::emitError(v5, (uint64_t)v18, (uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      uint64_t v10 = (void **)__p;
      if (__p)
      {
        uint64_t v11 = v28;
        uint64_t v12 = __p;
        if (v28 != __p)
        {
          do
            uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          uint64_t v12 = __p;
        }
        long long v28 = v10;
        operator delete(v12);
      }
      long long v13 = v25;
      if (v25)
      {
        long long v14 = v26;
        unint64_t v15 = v25;
        if (v26 != v25)
        {
          do
          {
            uint64_t v17 = (void *)*--v14;
            uint64_t v16 = v17;
            void *v14 = 0;
            if (v17) {
              operator delete[](v16);
            }
          }
          while (v14 != v13);
          unint64_t v15 = v25;
        }
        uint64_t v26 = v13;
        operator delete(v15);
      }
      if (v23 != &v24) {
        free(v23);
      }
    }
  }
  return 0;
}

llvm::raw_ostream *mlir::mps::MPSDialect::printType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  uint64_t v4 = *((void *)result + 4);
  if ((unint64_t)(*((void *)result + 3) - v4) > 2)
  {
    *(unsigned char *)(v4 + 2) = 52;
    *(_WORD *)uint64_t v4 = 26222;
    *((void *)result + 4) += 3;
  }
  else
  {
    return llvm::raw_ostream::write(result, "nf4", 3uLL);
  }
  return result;
}

uint64_t mlir::mps::serializeMPSModule(unsigned int *a1, uint64_t a2, mlir::Operation *a3, llvm::raw_ostream *a4, void (*a5)(uint64_t, mlir *), uint64_t a6)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 6));
  v37[0] = Context;
  memset(&v37[1], 0, 24);
  __int16 v36 = mlir::OpBuilder::create<mlir::mps::serialization::ModuleOp>(v37, *((void *)a1 + 3));
  uint64_t v13 = *(void *)((((unint64_t)v36
                    + 16 * (((unint64_t)*((unsigned int *)v36 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v36 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v36 + 10)
                  + 8);
  BOOL v14 = v13 == 0;
  uint64_t v15 = v13 - 8;
  if (v14) {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void *)((((unint64_t)&a1[4 * (((unint64_t)a1[11] >> 23) & 1) + 17]
                    + (((unint64_t)a1[11] >> 21) & 0x7F8)
                    + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * a1[10]
                  + 8);
  if (v16) {
    uint64_t v17 = v16 - 8;
  }
  else {
    uint64_t v17 = 0;
  }
  unsigned int v18 = (uint64_t *)(v17 + 32);
  if (*(void *)(v17 + 32) != v17 + 32)
  {
    __int16 v19 = *(uint64_t **)(v15 + 40);
    if (v19 != v18)
    {
      uint64_t v20 = *(uint64_t **)(v17 + 40);
      llvm::ilist_traits<mlir::Operation>::transferNodesFromList(v15 + 32, v17 + 32, (uint64_t)v20, v17 + 32);
      if (v20 != v18)
      {
        uint64_t v21 = *v18;
        uint64_t v22 = *v20;
        *(void *)(v22 + 8) = v18;
        uint64_t *v18 = v22;
        uint64_t v23 = *v19;
        *(void *)(v21 + 8) = v19;
        uint64_t *v20 = v23;
        *(void *)(v23 + 8) = v20;
        uint64_t *v19 = v21;
      }
    }
  }
  if (!mlir::mps::serialization::ModuleOp::verifyInvariants((uint64_t **)&v36))
  {
    int64_t v32 = v36;
    if (!v36) {
      return 0;
    }
    goto LABEL_23;
  }
  mlir::PassManager::PassManager(v35, (uint64_t)Context, "any", 3uLL, 1);
  uint64_t v24 = operator new(0x158uLL);
  void v24[2] = 0u;
  v24[3] = 0u;
  void v24[4] = 0u;
  v24[5] = 0u;
  v24[6] = 0u;
  v24[7] = 0u;
  v24[8] = 0u;
  v24[9] = 0u;
  v24[10] = 0u;
  v24[11] = 0u;
  v24[12] = 0u;
  v24[13] = 0u;
  v24[14] = 0u;
  v24[15] = 0u;
  v24[16] = 0u;
  v24[17] = 0u;
  *((void *)v24 + 1) = &mlir::mps::MPSSerializationPass::resolveTypeID(void)::id;
  *((void *)v24 + 2) = "mps.module";
  *((void *)v24 + 3) = 10;
  *((unsigned char *)v24 + 32) = 1;
  v24[9] = 0u;
  v24[10] = 0u;
  v24[8] = 0u;
  *((void *)v24 + 22) = 0;
  *((void *)v24 + 23) = (char *)v24 + 200;
  *((_DWORD *)v24 + 49) = 4;
  *((void *)v24 + 29) = (char *)v24 + 248;
  *((_DWORD *)v24 + 61) = 4;
  *((void *)v24 + 35) = 0;
  *((void *)v24 + 36) = 0;
  *((void *)v24 + 37) = 0x1000000000;
  v24[19] = 0u;
  v24[20] = 0u;
  *((void *)v24 + 42) = 0;
  *(void *)uint64_t v24 = &unk_1EC9CA7A8;
  uint64_t v34 = (uint64_t)v24;
  mlir::OpPassManager::addPass(v35, &v34);
  uint64_t v25 = v34;
  uint64_t v34 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  if (!mlir::PassManager::run((mlir::PassManager *)v35, v36))
  {
    mlir::PassManager::~PassManager((mlir::PassManager *)v35);
    int64_t v32 = v36;
    if (!v36) {
      return 0;
    }
    goto LABEL_23;
  }
  uint64_t v38 = Context;
  Dialect = mlir::MLIRContext::getOrLoadDialect(Context, (uint64_t)"mps", 3, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::mps::MPSDialect * mlir::MLIRContext::getOrLoadDialect<mlir::mps::MPSDialect>(void)::{lambda(void)#1}>, (uint64_t)&v38);
  char v27 = *((unsigned char *)Dialect + 40);
  *((unsigned char *)Dialect + 40) = 1;
  if (mlir::detail::downgradeToVersion(v36, a2))
  {
    if (a5) {
      a5(a6, v36);
    }
    uint64_t LoadedDialect = mlir::MLIRContext::getLoadedDialect((uint64_t *)Context, (uint64_t)"mps", 3);
    uint64_t v29 = mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>(LoadedDialect);
    int v30 = *(_DWORD *)(a2 + 16);
    *(void *)(v29 + 32) = *(void *)(a2 + 8);
    *(_DWORD *)(v29 + 40) = v30;
    mlir::writeBytecodeToFile(v36, a3, a4, v31);
  }
  *((unsigned char *)Dialect + 40) = v27;
  mlir::PassManager::~PassManager((mlir::PassManager *)v35);
  int64_t v32 = v36;
  if (v36) {
LABEL_23:
  }
    mlir::Operation::erase(v32);
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::ModuleOp>(mlir::StringAttr **a1, uint64_t a2)
{
  v16[38] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  uint64_t v5 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.module", (const unsigned __int8 *)0xA, Context);
  if (!v6)
  {
    __int16 v15 = 1283;
    v14[2] = (uint64_t)"mps.module";
    void v14[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v13 = 259;
    llvm::operator+(v14, (uint64_t *)&v12, (uint64_t)v16);
    llvm::report_fatal_error((llvm::Twine *)v16, 1);
  }
  mlir::OperationState::OperationState(v16, a2, v5);
  v10[0] = 0;
  v10[16] = 0;
  mlir::ModuleOp::build(a1, (mlir::OperationState *)v16, (uint64_t)v10);
  long long v7 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v16);
  if (*(_UNKNOWN **)(*((void *)v7 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ModuleOp,void>::id) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v16);
  return v8;
}

void mlir::mps::importMPSModule(uint64_t ***a1@<X0>, mlir::StringAttr **a2@<X1>, mlir::GenericProgramPoint **a3@<X8>)
{
  v50[5] = *MEMORY[0x1E4F143B8];
  char v6 = (const llvm::MemoryBuffer *)***a1;
  long long v7 = *a2;
  uint64_t v8 = (const char *)(*(uint64_t (**)(const llvm::MemoryBuffer *))(*(void *)v6 + 16))(v6);
  uint64_t v10 = mlir::FileLineColLoc::get(v7, v8, v9, 0, 0);
  *(void *)&long long v41 = *a2;
  Dialect = mlir::MLIRContext::getOrLoadDialect((void *)v41, (uint64_t)"mps", 3, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::mps::MPSDialect * mlir::MLIRContext::getOrLoadDialect<mlir::mps::MPSDialect>(void)::{lambda(void)#1}>, (uint64_t)&v41);
  char v12 = *((unsigned char *)Dialect + 40);
  *((unsigned char *)Dialect + 40) = 1;
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v38, v6);
  if (!mlir::isBytecode((uint64_t)v38))
  {
    *(void *)&long long v41 = *a2;
    BYTE8(v41) = 1;
    long long v42 = 0uLL;
    LODWORD(v43) = 0;
    char v44 = 0;
    uint64_t v45 = v47;
    uint64_t v46 = 0x600000000;
    v47[6] = &v48;
    v47[7] = 0x600000000;
    v40[0] = 0;
    memset(v49, 0, sizeof(v49));
    v50[0] = v50;
    v50[1] = v50;
    memset(&v50[2], 0, 24);
    if (mlir::parseSourceFile(a1, (uint64_t)v49, (uint64_t ***)&v41, (uint64_t *)v40)) {
      mlir::detail::constructContainerOpForParserIfNecessary<mlir::ModuleOp>((uint64_t)v49, (mlir::StringAttr *)v41, (uint64_t)v40[0], a3);
    }
    else {
      *a3 = 0;
    }
    mlir::Block::~Block((mlir::Block *)v49);
    mlir::ParserConfig::~ParserConfig((mlir::ParserConfig *)&v41);
  }
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v43 = (uint64_t)&v43;
  char v44 = (mlir::GenericProgramPoint *)&v43;
  uint64_t v46 = 0;
  v47[0] = 0;
  uint64_t v45 = 0;
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v37, v6);
  if (!mlir::readBytecodeFile(v37, (uint64_t)&v41, a2)) {
    goto LABEL_6;
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v44);
  if (v13)
  {
    uint64_t v14 = (uint64_t)v13;
    if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
    {
      char v35 = mlir::Operation::CloneOptions::all(v13);
      mlir::Operation::clone(v14, v35);
    }
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v44);
  if (*(_UNKNOWN **)(*(void *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ModuleOp,void>::id)
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v44);
    uint64_t v17 = v16;
    mlir::PassManager::PassManager(v49, (uint64_t)*a2, "any", 3uLL, 1);
    unsigned int v18 = operator new(0x158uLL);
    v18[2] = 0u;
    v18[3] = 0u;
    void v18[4] = 0u;
    v18[5] = 0u;
    v18[6] = 0u;
    v18[7] = 0u;
    v18[8] = 0u;
    v18[9] = 0u;
    v18[10] = 0u;
    v18[11] = 0u;
    v18[12] = 0u;
    v18[13] = 0u;
    v18[14] = 0u;
    v18[15] = 0u;
    v18[16] = 0u;
    v18[17] = 0u;
    *((void *)v18 + 1) = &mlir::mps::MPSDeserializationPass::resolveTypeID(void)::id;
    *((void *)v18 + 2) = "mps.module";
    *((void *)v18 + 3) = 10;
    *((unsigned char *)v18 + 32) = 1;
    v18[9] = 0u;
    v18[10] = 0u;
    v18[8] = 0u;
    *((void *)v18 + 22) = 0;
    *((void *)v18 + 23) = (char *)v18 + 200;
    *((_DWORD *)v18 + 49) = 4;
    *((void *)v18 + 29) = (char *)v18 + 248;
    *((_DWORD *)v18 + 61) = 4;
    *((void *)v18 + 35) = 0;
    *((void *)v18 + 36) = 0;
    *((void *)v18 + 37) = 0x1000000000;
    v18[19] = 0u;
    v18[20] = 0u;
    *((void *)v18 + 42) = 0;
    *(void *)unsigned int v18 = &unk_1EC9CA8B8;
    uint64_t v36 = (uint64_t)v18;
    mlir::OpPassManager::addPass((unsigned char **)v49, &v36);
    uint64_t v19 = v36;
    uint64_t v36 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    if (mlir::PassManager::run((mlir::PassManager *)v49, (mlir::Operation *)v17))
    {
      v40[0] = *a2;
      memset(&v40[1], 0, 24);
      uint64_t v20 = mlir::OpBuilder::create<mlir::ModuleOp>(v40, v10);
      unint64_t v21 = (((unint64_t)v20
            + 16 * (((unint64_t)*((unsigned int *)v20 + 11) >> 23) & 1)
            + (((unint64_t)*((unsigned int *)v20 + 11) >> 21) & 0x7F8)
            + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v20 + 10);
      uint64_t v23 = v17[10];
      unint64_t v22 = v17[11];
      int v39 = v20;
      uint64_t v24 = *(void *)(v21 + 8);
      BOOL v25 = v24 == 0;
      uint64_t v26 = v24 - 8;
      if (v25) {
        uint64_t v26 = 0;
      }
      uint64_t v27 = *(void *)((((unint64_t)&v17[4 * ((v22 >> 23) & 1) + 17] + ((v22 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * v23
                      + 8);
      if (v27) {
        uint64_t v28 = v27 - 8;
      }
      else {
        uint64_t v28 = 0;
      }
      uint64_t v29 = (uint64_t *)(v28 + 32);
      if (*(void *)(v28 + 32) != v28 + 32)
      {
        int v30 = *(uint64_t **)(v26 + 40);
        if (v30 != v29)
        {
          int64_t v31 = *(uint64_t **)(v28 + 40);
          llvm::ilist_traits<mlir::Operation>::transferNodesFromList(v26 + 32, v28 + 32, (uint64_t)v31, v28 + 32);
          if (v31 != v29)
          {
            uint64_t v32 = *v29;
            uint64_t v33 = *v31;
            *(void *)(v33 + 8) = v29;
            uint64_t *v29 = v33;
            uint64_t v34 = *v30;
            *(void *)(v32 + 8) = v30;
            *int64_t v31 = v34;
            *(void *)(v34 + 8) = v31;
            uint64_t *v30 = v32;
          }
        }
      }
      if (!mlir::ModuleOp::verifyInvariants((uint64_t **)&v39))
      {
        mlir::Operation::erase(v20);
        uint64_t v20 = 0;
      }
      *a3 = v20;
    }
    else
    {
      *a3 = 0;
    }
    mlir::PassManager::~PassManager((mlir::PassManager *)v49);
  }
  else
  {
LABEL_6:
    *a3 = 0;
  }
  mlir::Block::~Block((mlir::Block *)&v41);
  *((unsigned char *)Dialect + 40) = v12;
}

void mlir::detail::constructContainerOpForParserIfNecessary<mlir::ModuleOp>(uint64_t a1@<X0>, mlir::StringAttr *a2@<X1>, uint64_t a3@<X2>, mlir::GenericProgramPoint **a4@<X8>)
{
  uint64_t v8 = (mlir::GenericProgramPoint *)(a1 + 32);
  unint64_t v9 = *(mlir::GenericProgramPoint **)(a1 + 40);
  if (v9 != v8
    && *((mlir::GenericProgramPoint **)v9 + 1) == v8
    && ((mlir::GenericProgramPoint::~GenericProgramPoint(v9), v10)
      ? (BOOL v11 = *(void *)(v10[6] + 16) == (void)&mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
      : (BOOL v11 = 0),
        v11))
  {
    unint64_t v22 = v10;
    mlir::Operation::remove(v10);
    *a4 = (mlir::GenericProgramPoint *)v22;
  }
  else
  {
    v24[0] = a2;
    memset(&v24[1], 0, 24);
    char v12 = mlir::OpBuilder::create<mlir::ModuleOp>(v24, a3);
    uint64_t v14 = *((unsigned int *)v12 + 10);
    unint64_t v13 = *((unsigned int *)v12 + 11);
    uint64_t v23 = v12;
    uint64_t v15 = *(void *)((((unint64_t)v12 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * v14
                    + 8);
    if (v15) {
      uint64_t v16 = v15 - 8;
    }
    else {
      uint64_t v16 = 0;
    }
    if (*(mlir::GenericProgramPoint **)v8 != v8)
    {
      uint64_t v17 = *(mlir::GenericProgramPoint **)(v16 + 40);
      if (v17 != v8)
      {
        unsigned int v18 = *(mlir::GenericProgramPoint **)(a1 + 40);
        llvm::ilist_traits<mlir::Operation>::transferNodesFromList(v16 + 32, (uint64_t)v8, (uint64_t)v18, (uint64_t)v8);
        if (v18 != v8)
        {
          uint64_t v19 = *(void **)v8;
          uint64_t v20 = *(void *)v18;
          *(void *)(v20 + 8) = v8;
          *(void *)uint64_t v8 = v20;
          uint64_t v21 = *(void *)v17;
          v19[1] = v17;
          *(void *)unsigned int v18 = v21;
          *(void *)(v21 + 8) = v18;
          *(void *)uint64_t v17 = v19;
        }
      }
    }
    if (!mlir::ModuleOp::verifyInvariants((uint64_t **)&v23))
    {
      mlir::Operation::erase(v12);
      char v12 = 0;
    }
    *a4 = v12;
  }
}

void mlir::mps::MPSSerializationPass::~MPSSerializationPass(mlir::mps::MPSSerializationPass *this)
{
  mlir::Pass::~Pass(this);

  operator delete(v1);
}

const char *mlir::PassWrapper<mlir::mps::MPSSerializationPass,mlir::OperationPass<mlir::mps::serialization::ModuleOp>>::getName()
{
  uint64_t v5 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSSerializationPass]";
  unint64_t v6 = 81;
  unint64_t v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0) {
    unint64_t v1 = v0;
  }
  else {
    unint64_t v1 = v6;
  }
  uint64_t v2 = &v5[v1];
  if (v6 - v1 >= 0x12) {
    uint64_t v3 = 18;
  }
  else {
    uint64_t v3 = v6 - v1;
  }
  return &v2[v3];
}

void *mlir::mps::MPSSerializationPass::getDependentDialects(mlir::mps::MPSSerializationPass *this, uint64_t **a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EC9CEFB8;
  uint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::func::FuncDialect,void>::id, "func", 4uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CEEE0;
  uint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, "mps", 3uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CEF28;
  uint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::scf::SCFDialect,void>::id, "scf", 3uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CF090;
  uint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::tensor::TensorDialect,void>::id, "tensor", 6uLL, v4);
  __n128 result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

const char *mlir::mps::MPSSerializationPass::getArgument(mlir::mps::MPSSerializationPass *this)
{
  return "mps-serialize";
}

const char *mlir::mps::MPSSerializationPass::getDescription(mlir::mps::MPSSerializationPass *this)
{
  return "Converts module to a fully versioned MPS module";
}

void mlir::mps::MPSSerializationPass::runOnOperation(mlir::mps::MPSSerializationPass *this)
{
  uint64_t v282 = *MEMORY[0x1E4F143B8];
  v252[0] = mlir::Attribute::getContext((mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  memset(&v252[1], 0, 24);
  uint64_t v2 = (mlir::ForwardIterator *)(*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  v268[0] = (uint64_t)v252;
  v255 = v268;
  mlir::detail::walk<mlir::ForwardIterator>(v2, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_3mps20MPSSerializationPass14runOnOperationEvEUlNS1_4func6FuncOpEE_SE_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v255, 1);
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  v268[1] = 0;
  v268[2] = 0;
  v268[0] = (uint64_t)&unk_1EC9AA748;
  int v269 = 0;
  uint64_t v274 = 0;
  uint64_t v275 = 0;
  v270 = v272;
  uint64_t v271 = 0;
  v272[0] = 0;
  v272[1] = 0;
  int v273 = 0;
  uint64_t v276 = 0x1000000000;
  uint64_t v277 = 0;
  uint64_t v278 = 0;
  uint64_t v279 = 0x2800000000;
  uint64_t v280 = 0;
  uint64_t v281 = Context;
  v255 = &__p[1];
  __p[1] = "mps";
  *(void *)&long long v257 = 3;
  __p[0] = (void *)0x200000001;
  mlir::ConversionTarget::setDialectAction(v268, (uint64_t)&__p[1], 1, 0);
  if (v255 != &__p[1]) {
    free(v255);
  }
  v255 = (void *)mlir::Attribute::getContext((mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  *(_OWORD *)__p = 0u;
  long long v257 = 0u;
  v258 = v260;
  uint64_t v259 = 0x600000000;
  v260[6] = 0;
  v260[7] = 0;
  int v261 = 0;
  uint64_t v262 = 0;
  uint64_t v263 = 0;
  uint64_t v264 = 0x2800000000;
  uint64_t v265 = 0;
  uint64_t v4 = (mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v266 = 0;
  uint64_t v267 = 0x2800000000;
  uint64_t v5 = mlir::Attribute::getContext(v4);
  uint64_t v6 = operator new(0x68uLL);
  mlir::PatternBenefit::PatternBenefit(&v253, 1);
  mlir::Pattern::Pattern((uint64_t)(v6 + 1), (uint64_t)"scf.for", 7, (__int16)v253, v5, 0, 0);
  v6[12] = 0;
  *uint64_t v6 = &unk_1EC9C78F0;
  if (v6[9])
  {
    unint64_t v7 = *((unsigned int *)v6 + 22);
    if (v7 <= *((_DWORD *)v6 + 23)) {
      goto LABEL_5;
    }
  }
  else
  {
    v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertForOp<mlir::scf::Fo"
           "rOp, mlir::mps::serialization::ForOp>]";
    unint64_t v254 = 147;
    unint64_t v11 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
    if (v254 >= v11) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = v254;
    }
    unint64_t v13 = &v253[v12];
    unint64_t v14 = v254 - v12;
    if (v254 - v12 >= 0x12) {
      uint64_t v15 = 18;
    }
    else {
      uint64_t v15 = v254 - v12;
    }
    uint64_t v16 = &v13[v15];
    unint64_t v17 = v14 - v15;
    if (v17 >= v17 - 1) {
      --v17;
    }
    v6[8] = v16;
    v6[9] = v17;
    unint64_t v7 = *((unsigned int *)v6 + 22);
    if (v7 <= *((_DWORD *)v6 + 23))
    {
LABEL_5:
      *((_DWORD *)v6 + 22) = v7;
      unint64_t v9 = (char *)__p[1];
      uint64_t v8 = v257;
      if (__p[1] < (void *)v257)
      {
LABEL_6:
        *(void *)unint64_t v9 = v6;
        uint64_t v10 = v9 + 8;
        goto LABEL_41;
      }
LABEL_17:
      unsigned int v18 = (char *)__p[0];
      int64_t v19 = v9 - (char *)__p[0];
      uint64_t v20 = (v9 - (char *)__p[0]) >> 3;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61) {
        goto LABEL_270;
      }
      uint64_t v22 = v8 - (unint64_t)__p[0];
      if (v22 >> 2 > v21) {
        unint64_t v21 = v22 >> 2;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 61) {
          goto LABEL_271;
        }
        uint64_t v24 = (char *)operator new(8 * v23);
        BOOL v25 = &v24[8 * v20];
        uint64_t v26 = &v24[8 * v23];
        *(void *)BOOL v25 = v6;
        uint64_t v10 = v25 + 8;
        int64_t v27 = v9 - v18;
        if (v9 != v18) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v24 = 0;
        BOOL v25 = (char *)(8 * v20);
        uint64_t v26 = 0;
        *(void *)(8 * v20) = v6;
        uint64_t v10 = (void *)(8 * v20 + 8);
        int64_t v27 = v9 - v18;
        if (v9 != v18)
        {
LABEL_26:
          unint64_t v28 = v27 - 8;
          if (v28 < 0x78
            || &v9[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] < v25 && &v24[v19 - (v28 & 0xFFFFFFFFFFFFFFF8) - 8] < v9)
          {
            goto LABEL_274;
          }
          uint64_t v29 = (v28 >> 3) + 1;
          uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
          int64_t v31 = &v9[-v30];
          v25 -= v30;
          uint64_t v32 = &v24[8 * v20 - 16];
          uint64_t v33 = v9 - 16;
          uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v36 = *((_OWORD *)v33 - 1);
            long long v35 = *(_OWORD *)v33;
            *((_OWORD *)v33 - 1) = 0uLL;
            *(_OWORD *)uint64_t v33 = 0uLL;
            *((_OWORD *)v32 - 1) = v36;
            *(_OWORD *)uint64_t v32 = v35;
            v32 -= 32;
            v33 -= 32;
            v34 -= 4;
          }
          while (v34);
          unint64_t v9 = v31;
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v37 = *((void *)v9 - 1);
              v9 -= 8;
              *(void *)unint64_t v9 = 0;
              *((void *)v25 - 1) = v37;
              v25 -= 8;
            }
            while (v9 != v18);
          }
          unint64_t v9 = (char *)__p[0];
          uint64_t v38 = (char *)__p[1];
          __p[0] = v25;
          __p[1] = v10;
          *(void *)&long long v257 = v26;
          while (v38 != v9)
          {
            uint64_t v40 = *((void *)v38 - 1);
            v38 -= 8;
            uint64_t v39 = v40;
            *(void *)uint64_t v38 = 0;
            if (v40) {
              (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
            }
          }
          goto LABEL_39;
        }
      }
      __p[0] = v25;
      __p[1] = v10;
      *(void *)&long long v257 = v26;
LABEL_39:
      if (v9) {
        operator delete(v9);
      }
LABEL_41:
      __p[1] = v10;
      long long v41 = operator new(0x68uLL);
      mlir::PatternBenefit::PatternBenefit(&v253, 1);
      mlir::Pattern::Pattern((uint64_t)(v41 + 1), (uint64_t)"scf.while", 9, (__int16)v253, v5, 0, 0);
      v41[12] = 0;
      *long long v41 = &unk_1EC9C7C80;
      if (v41[9])
      {
        unint64_t v42 = *((unsigned int *)v41 + 22);
        if (v42 <= *((_DWORD *)v41 + 23)) {
          goto LABEL_43;
        }
      }
      else
      {
        v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertWhileOp<mlir::s"
               "cf::WhileOp, mlir::mps::serialization::WhileOp>]";
        unint64_t v254 = 153;
        unint64_t v46 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
        if (v254 >= v46) {
          unint64_t v47 = v46;
        }
        else {
          unint64_t v47 = v254;
        }
        uint64_t v48 = &v253[v47];
        unint64_t v49 = v254 - v47;
        if (v254 - v47 >= 0x12) {
          uint64_t v50 = 18;
        }
        else {
          uint64_t v50 = v254 - v47;
        }
        __int16 v51 = &v48[v50];
        unint64_t v52 = v49 - v50;
        if (v52 >= v52 - 1) {
          --v52;
        }
        v41[8] = v51;
        v41[9] = v52;
        unint64_t v42 = *((unsigned int *)v41 + 22);
        if (v42 <= *((_DWORD *)v41 + 23))
        {
LABEL_43:
          *((_DWORD *)v41 + 22) = v42;
          char v44 = (char *)__p[1];
          uint64_t v43 = v257;
          if (__p[1] < (void *)v257)
          {
LABEL_44:
            *(void *)char v44 = v41;
            uint64_t v45 = v44 + 8;
            goto LABEL_79;
          }
LABEL_55:
          long long v53 = (char *)__p[0];
          int64_t v54 = v44 - (char *)__p[0];
          uint64_t v55 = (v44 - (char *)__p[0]) >> 3;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61) {
            goto LABEL_270;
          }
          uint64_t v57 = v43 - (unint64_t)__p[0];
          if (v57 >> 2 > v56) {
            unint64_t v56 = v57 >> 2;
          }
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v56;
          }
          if (v58)
          {
            if (v58 >> 61) {
              goto LABEL_271;
            }
            unsigned int v59 = (char *)operator new(8 * v58);
            unsigned int v60 = &v59[8 * v55];
            uint64_t v61 = &v59[8 * v58];
            *(void *)unsigned int v60 = v41;
            uint64_t v45 = v60 + 8;
            int64_t v62 = v44 - v53;
            if (v44 != v53) {
              goto LABEL_64;
            }
          }
          else
          {
            unsigned int v59 = 0;
            unsigned int v60 = (char *)(8 * v55);
            uint64_t v61 = 0;
            *(void *)(8 * v55) = v41;
            uint64_t v45 = (void *)(8 * v55 + 8);
            int64_t v62 = v44 - v53;
            if (v44 != v53)
            {
LABEL_64:
              unint64_t v63 = v62 - 8;
              if (v63 < 0x78
                || &v44[-(v63 & 0xFFFFFFFFFFFFFFF8) - 8] < v60 && &v59[v54 - (v63 & 0xFFFFFFFFFFFFFFF8) - 8] < v44)
              {
                goto LABEL_275;
              }
              uint64_t v64 = (v63 >> 3) + 1;
              uint64_t v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
              char v66 = &v44[-v65];
              v60 -= v65;
              unint64_t v67 = &v59[8 * v55 - 16];
              unint64_t v68 = v44 - 16;
              uint64_t v69 = v64 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v71 = *((_OWORD *)v68 - 1);
                long long v70 = *(_OWORD *)v68;
                *((_OWORD *)v68 - 1) = 0uLL;
                *(_OWORD *)unint64_t v68 = 0uLL;
                *((_OWORD *)v67 - 1) = v71;
                *(_OWORD *)unint64_t v67 = v70;
                v67 -= 32;
                v68 -= 32;
                v69 -= 4;
              }
              while (v69);
              char v44 = v66;
              if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_275:
                do
                {
                  uint64_t v72 = *((void *)v44 - 1);
                  v44 -= 8;
                  *(void *)char v44 = 0;
                  *((void *)v60 - 1) = v72;
                  v60 -= 8;
                }
                while (v44 != v53);
              }
              char v44 = (char *)__p[0];
              int64_t v73 = (char *)__p[1];
              __p[0] = v60;
              __p[1] = v45;
              *(void *)&long long v257 = v61;
              while (v73 != v44)
              {
                uint64_t v75 = *((void *)v73 - 1);
                v73 -= 8;
                uint64_t v74 = v75;
                *(void *)int64_t v73 = 0;
                if (v75) {
                  (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
                }
              }
              goto LABEL_77;
            }
          }
          __p[0] = v60;
          __p[1] = v45;
          *(void *)&long long v257 = v61;
LABEL_77:
          if (v44) {
            operator delete(v44);
          }
LABEL_79:
          __p[1] = v45;
          unint64_t v76 = operator new(0x68uLL);
          mlir::PatternBenefit::PatternBenefit(&v253, 1);
          mlir::Pattern::Pattern((uint64_t)(v76 + 1), (uint64_t)"scf.if", 6, (__int16)v253, v5, 0, 0);
          v76[12] = 0;
          *unint64_t v76 = &unk_1EC9C77C8;
          if (v76[9])
          {
            unint64_t v77 = *((unsigned int *)v76 + 22);
            if (v77 <= *((_DWORD *)v76 + 23)) {
              goto LABEL_81;
            }
          }
          else
          {
            v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertIfOp<mlir::"
                   "scf::IfOp, mlir::mps::serialization::IfOp>]";
            unint64_t v254 = 144;
            unint64_t v81 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
            if (v254 >= v81) {
              unint64_t v82 = v81;
            }
            else {
              unint64_t v82 = v254;
            }
            int64_t v83 = &v253[v82];
            unint64_t v84 = v254 - v82;
            if (v254 - v82 >= 0x12) {
              uint64_t v85 = 18;
            }
            else {
              uint64_t v85 = v254 - v82;
            }
            int64_t v86 = &v83[v85];
            unint64_t v87 = v84 - v85;
            if (v87 >= v87 - 1) {
              --v87;
            }
            v76[8] = v86;
            v76[9] = v87;
            unint64_t v77 = *((unsigned int *)v76 + 22);
            if (v77 <= *((_DWORD *)v76 + 23))
            {
LABEL_81:
              *((_DWORD *)v76 + 22) = v77;
              BOOL v79 = (char *)__p[1];
              uint64_t v78 = v257;
              if (__p[1] < (void *)v257)
              {
LABEL_82:
                *(void *)BOOL v79 = v76;
                unint64_t v80 = v79 + 8;
                goto LABEL_117;
              }
LABEL_93:
              uint64_t v88 = (char *)__p[0];
              int64_t v89 = v79 - (char *)__p[0];
              uint64_t v90 = (v79 - (char *)__p[0]) >> 3;
              unint64_t v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 61) {
                goto LABEL_270;
              }
              uint64_t v92 = v78 - (unint64_t)__p[0];
              if (v92 >> 2 > v91) {
                unint64_t v91 = v92 >> 2;
              }
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v93 = v91;
              }
              if (v93)
              {
                if (v93 >> 61) {
                  goto LABEL_271;
                }
                unint64_t v94 = (char *)operator new(8 * v93);
                uint64_t v95 = &v94[8 * v90];
                BOOL v96 = &v94[8 * v93];
                *(void *)uint64_t v95 = v76;
                unint64_t v80 = v95 + 8;
                int64_t v97 = v79 - v88;
                if (v79 != v88) {
                  goto LABEL_102;
                }
              }
              else
              {
                unint64_t v94 = 0;
                uint64_t v95 = (char *)(8 * v90);
                BOOL v96 = 0;
                *(void *)(8 * v90) = v76;
                unint64_t v80 = (void *)(8 * v90 + 8);
                int64_t v97 = v79 - v88;
                if (v79 != v88)
                {
LABEL_102:
                  unint64_t v98 = v97 - 8;
                  if (v98 < 0x78
                    || &v79[-(v98 & 0xFFFFFFFFFFFFFFF8) - 8] < v95
                    && &v94[v89 - (v98 & 0xFFFFFFFFFFFFFFF8) - 8] < v79)
                  {
                    goto LABEL_276;
                  }
                  uint64_t v99 = (v98 >> 3) + 1;
                  uint64_t v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                  int64_t v101 = &v79[-v100];
                  v95 -= v100;
                  int64_t v102 = &v94[8 * v90 - 16];
                  int64_t v103 = v79 - 16;
                  uint64_t v104 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v106 = *((_OWORD *)v103 - 1);
                    long long v105 = *(_OWORD *)v103;
                    *((_OWORD *)v103 - 1) = 0uLL;
                    *(_OWORD *)int64_t v103 = 0uLL;
                    *((_OWORD *)v102 - 1) = v106;
                    *(_OWORD *)int64_t v102 = v105;
                    v102 -= 32;
                    v103 -= 32;
                    v104 -= 4;
                  }
                  while (v104);
                  BOOL v79 = v101;
                  if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_276:
                    do
                    {
                      uint64_t v107 = *((void *)v79 - 1);
                      v79 -= 8;
                      *(void *)BOOL v79 = 0;
                      *((void *)v95 - 1) = v107;
                      v95 -= 8;
                    }
                    while (v79 != v88);
                  }
                  BOOL v79 = (char *)__p[0];
                  v108 = (char *)__p[1];
                  __p[0] = v95;
                  __p[1] = v80;
                  *(void *)&long long v257 = v96;
                  while (v108 != v79)
                  {
                    uint64_t v110 = *((void *)v108 - 1);
                    v108 -= 8;
                    uint64_t v109 = v110;
                    *(void *)v108 = 0;
                    if (v110) {
                      (*(void (**)(uint64_t))(*(void *)v109 + 8))(v109);
                    }
                  }
                  goto LABEL_115;
                }
              }
              __p[0] = v95;
              __p[1] = v80;
              *(void *)&long long v257 = v96;
LABEL_115:
              if (v79) {
                operator delete(v79);
              }
LABEL_117:
              __p[1] = v80;
              uint64_t v111 = operator new(0x68uLL);
              mlir::PatternBenefit::PatternBenefit(&v253, 1);
              mlir::Pattern::Pattern((uint64_t)(v111 + 1), (uint64_t)"scf.condition", 13, (__int16)v253, v5, 0, 0);
              v111[12] = 0;
              *uint64_t v111 = &unk_1EC9C8698;
              if (v111[9])
              {
                unint64_t v112 = *((unsigned int *)v111 + 22);
                if (v112 <= *((_DWORD *)v111 + 23)) {
                  goto LABEL_119;
                }
              }
              else
              {
                v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertConditi"
                       "onOp<mlir::scf::ConditionOp, mlir::mps::serialization::ConditionOp>]";
                unint64_t v254 = 165;
                unint64_t v116 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                if (v254 >= v116) {
                  unint64_t v117 = v116;
                }
                else {
                  unint64_t v117 = v254;
                }
                v118 = &v253[v117];
                unint64_t v119 = v254 - v117;
                if (v254 - v117 >= 0x12) {
                  uint64_t v120 = 18;
                }
                else {
                  uint64_t v120 = v254 - v117;
                }
                uint64_t v121 = &v118[v120];
                unint64_t v122 = v119 - v120;
                if (v122 >= v122 - 1) {
                  --v122;
                }
                v111[8] = v121;
                v111[9] = v122;
                unint64_t v112 = *((unsigned int *)v111 + 22);
                if (v112 <= *((_DWORD *)v111 + 23))
                {
LABEL_119:
                  *((_DWORD *)v111 + 22) = v112;
                  unsigned int v114 = (char *)__p[1];
                  uint64_t v113 = v257;
                  if (__p[1] < (void *)v257)
                  {
LABEL_120:
                    *(void *)unsigned int v114 = v111;
                    v115 = v114 + 8;
                    goto LABEL_155;
                  }
LABEL_131:
                  v123 = (char *)__p[0];
                  int64_t v124 = v114 - (char *)__p[0];
                  uint64_t v125 = (v114 - (char *)__p[0]) >> 3;
                  unint64_t v126 = v125 + 1;
                  if ((unint64_t)(v125 + 1) >> 61) {
                    goto LABEL_270;
                  }
                  uint64_t v127 = v113 - (unint64_t)__p[0];
                  if (v127 >> 2 > v126) {
                    unint64_t v126 = v127 >> 2;
                  }
                  if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v128 = v126;
                  }
                  if (v128)
                  {
                    if (v128 >> 61) {
                      goto LABEL_271;
                    }
                    v129 = (char *)operator new(8 * v128);
                    v130 = &v129[8 * v125];
                    v131 = &v129[8 * v128];
                    *(void *)v130 = v111;
                    v115 = v130 + 8;
                    int64_t v132 = v114 - v123;
                    if (v114 != v123) {
                      goto LABEL_140;
                    }
                  }
                  else
                  {
                    v129 = 0;
                    v130 = (char *)(8 * v125);
                    v131 = 0;
                    *(void *)(8 * v125) = v111;
                    v115 = (void *)(8 * v125 + 8);
                    int64_t v132 = v114 - v123;
                    if (v114 != v123)
                    {
LABEL_140:
                      unint64_t v133 = v132 - 8;
                      if (v133 < 0x78
                        || &v114[-(v133 & 0xFFFFFFFFFFFFFFF8) - 8] < v130
                        && &v129[v124 - (v133 & 0xFFFFFFFFFFFFFFF8) - 8] < v114)
                      {
                        goto LABEL_277;
                      }
                      uint64_t v134 = (v133 >> 3) + 1;
                      uint64_t v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
                      v136 = &v114[-v135];
                      v130 -= v135;
                      v137 = &v129[8 * v125 - 16];
                      v138 = v114 - 16;
                      uint64_t v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v141 = *((_OWORD *)v138 - 1);
                        long long v140 = *(_OWORD *)v138;
                        *((_OWORD *)v138 - 1) = 0uLL;
                        *(_OWORD *)v138 = 0uLL;
                        *((_OWORD *)v137 - 1) = v141;
                        *(_OWORD *)v137 = v140;
                        v137 -= 32;
                        v138 -= 32;
                        v139 -= 4;
                      }
                      while (v139);
                      unsigned int v114 = v136;
                      if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_277:
                        do
                        {
                          uint64_t v142 = *((void *)v114 - 1);
                          v114 -= 8;
                          *(void *)unsigned int v114 = 0;
                          *((void *)v130 - 1) = v142;
                          v130 -= 8;
                        }
                        while (v114 != v123);
                      }
                      unsigned int v114 = (char *)__p[0];
                      v143 = (char *)__p[1];
                      __p[0] = v130;
                      __p[1] = v115;
                      *(void *)&long long v257 = v131;
                      while (v143 != v114)
                      {
                        uint64_t v145 = *((void *)v143 - 1);
                        v143 -= 8;
                        uint64_t v144 = v145;
                        *(void *)v143 = 0;
                        if (v145) {
                          (*(void (**)(uint64_t))(*(void *)v144 + 8))(v144);
                        }
                      }
                      goto LABEL_153;
                    }
                  }
                  __p[0] = v130;
                  __p[1] = v115;
                  *(void *)&long long v257 = v131;
LABEL_153:
                  if (v114) {
                    operator delete(v114);
                  }
LABEL_155:
                  __p[1] = v115;
                  v146 = operator new(0x68uLL);
                  mlir::PatternBenefit::PatternBenefit(&v253, 1);
                  mlir::Pattern::Pattern((uint64_t)(v146 + 1), (uint64_t)"scf.yield", 9, (__int16)v253, v5, 0, 0);
                  v146[12] = 0;
                  void *v146 = &unk_1EC9C7D50;
                  if (v146[9])
                  {
                    unint64_t v147 = *((unsigned int *)v146 + 22);
                    if (v147 <= *((_DWORD *)v146 + 23)) {
                      goto LABEL_157;
                    }
                  }
                  else
                  {
                    v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertYie"
                           "ldOp<mlir::scf::YieldOp, mlir::mps::serialization::YieldOp>]";
                    unint64_t v254 = 153;
                    unint64_t v151 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                    if (v254 >= v151) {
                      unint64_t v152 = v151;
                    }
                    else {
                      unint64_t v152 = v254;
                    }
                    v153 = &v253[v152];
                    unint64_t v154 = v254 - v152;
                    if (v254 - v152 >= 0x12) {
                      uint64_t v155 = 18;
                    }
                    else {
                      uint64_t v155 = v254 - v152;
                    }
                    v156 = &v153[v155];
                    unint64_t v157 = v154 - v155;
                    if (v157 >= v157 - 1) {
                      --v157;
                    }
                    v146[8] = v156;
                    v146[9] = v157;
                    unint64_t v147 = *((unsigned int *)v146 + 22);
                    if (v147 <= *((_DWORD *)v146 + 23))
                    {
LABEL_157:
                      *((_DWORD *)v146 + 22) = v147;
                      v149 = (char *)__p[1];
                      uint64_t v148 = v257;
                      if (__p[1] < (void *)v257)
                      {
LABEL_158:
                        *(void *)v149 = v146;
                        v150 = v149 + 8;
                        goto LABEL_193;
                      }
LABEL_169:
                      v158 = (char *)__p[0];
                      int64_t v159 = v149 - (char *)__p[0];
                      uint64_t v160 = (v149 - (char *)__p[0]) >> 3;
                      unint64_t v161 = v160 + 1;
                      if ((unint64_t)(v160 + 1) >> 61) {
                        goto LABEL_270;
                      }
                      uint64_t v162 = v148 - (unint64_t)__p[0];
                      if (v162 >> 2 > v161) {
                        unint64_t v161 = v162 >> 2;
                      }
                      if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v163 = v161;
                      }
                      if (v163)
                      {
                        if (v163 >> 61) {
                          goto LABEL_271;
                        }
                        v164 = (char *)operator new(8 * v163);
                        v165 = &v164[8 * v160];
                        v166 = &v164[8 * v163];
                        *(void *)v165 = v146;
                        v150 = v165 + 8;
                        int64_t v167 = v149 - v158;
                        if (v149 != v158) {
                          goto LABEL_178;
                        }
                      }
                      else
                      {
                        v164 = 0;
                        v165 = (char *)(8 * v160);
                        v166 = 0;
                        *(void *)(8 * v160) = v146;
                        v150 = (void *)(8 * v160 + 8);
                        int64_t v167 = v149 - v158;
                        if (v149 != v158)
                        {
LABEL_178:
                          unint64_t v168 = v167 - 8;
                          if (v168 < 0x78
                            || &v149[-(v168 & 0xFFFFFFFFFFFFFFF8) - 8] < v165
                            && &v164[v159 - (v168 & 0xFFFFFFFFFFFFFFF8) - 8] < v149)
                          {
                            goto LABEL_278;
                          }
                          uint64_t v169 = (v168 >> 3) + 1;
                          uint64_t v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
                          v171 = &v149[-v170];
                          v165 -= v170;
                          v172 = &v164[8 * v160 - 16];
                          v173 = v149 - 16;
                          uint64_t v174 = v169 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            long long v176 = *((_OWORD *)v173 - 1);
                            long long v175 = *(_OWORD *)v173;
                            *((_OWORD *)v173 - 1) = 0uLL;
                            *(_OWORD *)v173 = 0uLL;
                            *((_OWORD *)v172 - 1) = v176;
                            *(_OWORD *)v172 = v175;
                            v172 -= 32;
                            v173 -= 32;
                            v174 -= 4;
                          }
                          while (v174);
                          v149 = v171;
                          if (v169 != (v169 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_278:
                            do
                            {
                              uint64_t v177 = *((void *)v149 - 1);
                              v149 -= 8;
                              *(void *)v149 = 0;
                              *((void *)v165 - 1) = v177;
                              v165 -= 8;
                            }
                            while (v149 != v158);
                          }
                          v149 = (char *)__p[0];
                          v178 = (char *)__p[1];
                          __p[0] = v165;
                          __p[1] = v150;
                          *(void *)&long long v257 = v166;
                          while (v178 != v149)
                          {
                            uint64_t v180 = *((void *)v178 - 1);
                            v178 -= 8;
                            uint64_t v179 = v180;
                            *(void *)v178 = 0;
                            if (v180) {
                              (*(void (**)(uint64_t))(*(void *)v179 + 8))(v179);
                            }
                          }
                          goto LABEL_191;
                        }
                      }
                      __p[0] = v165;
                      __p[1] = v150;
                      *(void *)&long long v257 = v166;
LABEL_191:
                      if (v149) {
                        operator delete(v149);
                      }
LABEL_193:
                      __p[1] = v150;
                      v181 = operator new(0x68uLL);
                      mlir::PatternBenefit::PatternBenefit(&v253, 1);
                      mlir::Pattern::Pattern((uint64_t)(v181 + 1), (uint64_t)"tensor.from_elements", 20, (__int16)v253, v5, 0, 0);
                      v181[12] = 0;
                      void *v181 = &unk_1EC9C9018;
                      if (v181[9])
                      {
                        unint64_t v182 = *((unsigned int *)v181 + 22);
                        if (v182 <= *((_DWORD *)v181 + 23)) {
                          goto LABEL_195;
                        }
                      }
                      else
                      {
                        v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::Conver"
                               "tFromElementsOp<mlir::tensor::FromElementsOp, mlir::mps::serialization::FromElementsOp>]";
                        unint64_t v254 = 177;
                        unint64_t v186 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                        if (v254 >= v186) {
                          unint64_t v187 = v186;
                        }
                        else {
                          unint64_t v187 = v254;
                        }
                        v188 = &v253[v187];
                        unint64_t v189 = v254 - v187;
                        if (v254 - v187 >= 0x12) {
                          uint64_t v190 = 18;
                        }
                        else {
                          uint64_t v190 = v254 - v187;
                        }
                        v191 = &v188[v190];
                        unint64_t v192 = v189 - v190;
                        if (v192 >= v192 - 1) {
                          --v192;
                        }
                        v181[8] = v191;
                        v181[9] = v192;
                        unint64_t v182 = *((unsigned int *)v181 + 22);
                        if (v182 <= *((_DWORD *)v181 + 23))
                        {
LABEL_195:
                          *((_DWORD *)v181 + 22) = v182;
                          v184 = (char *)__p[1];
                          uint64_t v183 = v257;
                          if (__p[1] < (void *)v257)
                          {
LABEL_196:
                            *(void *)v184 = v181;
                            v185 = v184 + 8;
                            goto LABEL_231;
                          }
LABEL_207:
                          v193 = (char *)__p[0];
                          int64_t v194 = v184 - (char *)__p[0];
                          uint64_t v195 = (v184 - (char *)__p[0]) >> 3;
                          unint64_t v196 = v195 + 1;
                          if ((unint64_t)(v195 + 1) >> 61) {
                            goto LABEL_270;
                          }
                          uint64_t v197 = v183 - (unint64_t)__p[0];
                          if (v197 >> 2 > v196) {
                            unint64_t v196 = v197 >> 2;
                          }
                          if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v198 = v196;
                          }
                          if (v198)
                          {
                            if (v198 >> 61) {
                              goto LABEL_271;
                            }
                            v199 = (char *)operator new(8 * v198);
                            v200 = &v199[8 * v195];
                            v201 = &v199[8 * v198];
                            *(void *)v200 = v181;
                            v185 = v200 + 8;
                            int64_t v202 = v184 - v193;
                            if (v184 != v193) {
                              goto LABEL_216;
                            }
                          }
                          else
                          {
                            v199 = 0;
                            v200 = (char *)(8 * v195);
                            v201 = 0;
                            *(void *)(8 * v195) = v181;
                            v185 = (void *)(8 * v195 + 8);
                            int64_t v202 = v184 - v193;
                            if (v184 != v193)
                            {
LABEL_216:
                              unint64_t v203 = v202 - 8;
                              if (v203 < 0x78
                                || &v184[-(v203 & 0xFFFFFFFFFFFFFFF8) - 8] < v200
                                && &v199[v194 - (v203 & 0xFFFFFFFFFFFFFFF8) - 8] < v184)
                              {
                                goto LABEL_279;
                              }
                              uint64_t v204 = (v203 >> 3) + 1;
                              uint64_t v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
                              v206 = &v184[-v205];
                              v200 -= v205;
                              v207 = &v199[8 * v195 - 16];
                              v208 = v184 - 16;
                              uint64_t v209 = v204 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                long long v211 = *((_OWORD *)v208 - 1);
                                long long v210 = *(_OWORD *)v208;
                                *((_OWORD *)v208 - 1) = 0uLL;
                                *(_OWORD *)v208 = 0uLL;
                                *((_OWORD *)v207 - 1) = v211;
                                *(_OWORD *)v207 = v210;
                                v207 -= 32;
                                v208 -= 32;
                                v209 -= 4;
                              }
                              while (v209);
                              v184 = v206;
                              if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_279:
                                do
                                {
                                  uint64_t v212 = *((void *)v184 - 1);
                                  v184 -= 8;
                                  *(void *)v184 = 0;
                                  *((void *)v200 - 1) = v212;
                                  v200 -= 8;
                                }
                                while (v184 != v193);
                              }
                              v184 = (char *)__p[0];
                              v213 = (char *)__p[1];
                              __p[0] = v200;
                              __p[1] = v185;
                              *(void *)&long long v257 = v201;
                              while (v213 != v184)
                              {
                                uint64_t v215 = *((void *)v213 - 1);
                                v213 -= 8;
                                uint64_t v214 = v215;
                                *(void *)v213 = 0;
                                if (v215) {
                                  (*(void (**)(uint64_t))(*(void *)v214 + 8))(v214);
                                }
                              }
                              goto LABEL_229;
                            }
                          }
                          __p[0] = v200;
                          __p[1] = v185;
                          *(void *)&long long v257 = v201;
LABEL_229:
                          if (v184) {
                            operator delete(v184);
                          }
LABEL_231:
                          __p[1] = v185;
                          v216 = operator new(0x68uLL);
                          mlir::PatternBenefit::PatternBenefit(&v253, 1);
                          mlir::Pattern::Pattern((uint64_t)(v216 + 1), (uint64_t)"tensor.extract", 14, (__int16)v253, v5, 0, 0);
                          v216[12] = 0;
                          void *v216 = &unk_1EC9C8178;
                          if (v216[9])
                          {
                            unint64_t v217 = *((unsigned int *)v216 + 22);
                            if (v217 <= *((_DWORD *)v216 + 23)) {
                              goto LABEL_233;
                            }
                          }
                          else
                          {
                            v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::Co"
                                   "nvertExtractOp<mlir::tensor::ExtractOp, mlir::mps::serialization::ExtractOp>]";
                            unint64_t v254 = 162;
                            unint64_t v221 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                            if (v254 >= v221) {
                              unint64_t v222 = v221;
                            }
                            else {
                              unint64_t v222 = v254;
                            }
                            v223 = &v253[v222];
                            unint64_t v224 = v254 - v222;
                            if (v254 - v222 >= 0x12) {
                              uint64_t v225 = 18;
                            }
                            else {
                              uint64_t v225 = v254 - v222;
                            }
                            v226 = &v223[v225];
                            unint64_t v227 = v224 - v225;
                            if (v227 >= v227 - 1) {
                              --v227;
                            }
                            v216[8] = v226;
                            v216[9] = v227;
                            unint64_t v217 = *((unsigned int *)v216 + 22);
                            if (v217 <= *((_DWORD *)v216 + 23))
                            {
LABEL_233:
                              *((_DWORD *)v216 + 22) = v217;
                              v219 = (char *)__p[1];
                              uint64_t v218 = v257;
                              if (__p[1] < (void *)v257)
                              {
LABEL_234:
                                *(void *)v219 = v216;
                                v220 = v219 + 8;
                                goto LABEL_269;
                              }
LABEL_245:
                              v228 = (char *)__p[0];
                              int64_t v229 = v219 - (char *)__p[0];
                              uint64_t v230 = (v219 - (char *)__p[0]) >> 3;
                              unint64_t v231 = v230 + 1;
                              if (!((unint64_t)(v230 + 1) >> 61))
                              {
                                uint64_t v232 = v218 - (unint64_t)__p[0];
                                if (v232 >> 2 > v231) {
                                  unint64_t v231 = v232 >> 2;
                                }
                                if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v233 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v233 = v231;
                                }
                                if (!v233)
                                {
                                  v234 = 0;
                                  v235 = (char *)(8 * v230);
                                  v236 = 0;
                                  *(void *)(8 * v230) = v216;
                                  v220 = (void *)(8 * v230 + 8);
                                  int64_t v237 = v219 - v228;
                                  if (v219 != v228) {
                                    goto LABEL_254;
                                  }
                                  goto LABEL_266;
                                }
                                if (!(v233 >> 61))
                                {
                                  v234 = (char *)operator new(8 * v233);
                                  v235 = &v234[8 * v230];
                                  v236 = &v234[8 * v233];
                                  *(void *)v235 = v216;
                                  v220 = v235 + 8;
                                  int64_t v237 = v219 - v228;
                                  if (v219 != v228)
                                  {
LABEL_254:
                                    unint64_t v238 = v237 - 8;
                                    if (v238 < 0x78
                                      || &v219[-(v238 & 0xFFFFFFFFFFFFFFF8) - 8] < v235
                                      && &v234[v229 - (v238 & 0xFFFFFFFFFFFFFFF8) - 8] < v219)
                                    {
                                      goto LABEL_280;
                                    }
                                    uint64_t v239 = (v238 >> 3) + 1;
                                    uint64_t v240 = 8 * (v239 & 0x3FFFFFFFFFFFFFFCLL);
                                    v241 = &v219[-v240];
                                    v235 -= v240;
                                    v242 = &v234[8 * v230 - 16];
                                    v243 = v219 - 16;
                                    uint64_t v244 = v239 & 0x3FFFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      long long v246 = *((_OWORD *)v243 - 1);
                                      long long v245 = *(_OWORD *)v243;
                                      *((_OWORD *)v243 - 1) = 0uLL;
                                      *(_OWORD *)v243 = 0uLL;
                                      *((_OWORD *)v242 - 1) = v246;
                                      *(_OWORD *)v242 = v245;
                                      v242 -= 32;
                                      v243 -= 32;
                                      v244 -= 4;
                                    }
                                    while (v244);
                                    v219 = v241;
                                    if (v239 != (v239 & 0x3FFFFFFFFFFFFFFCLL))
                                    {
LABEL_280:
                                      do
                                      {
                                        uint64_t v247 = *((void *)v219 - 1);
                                        v219 -= 8;
                                        *(void *)v219 = 0;
                                        *((void *)v235 - 1) = v247;
                                        v235 -= 8;
                                      }
                                      while (v219 != v228);
                                    }
                                    v219 = (char *)__p[0];
                                    v248 = (char *)__p[1];
                                    __p[0] = v235;
                                    __p[1] = v220;
                                    *(void *)&long long v257 = v236;
                                    while (v248 != v219)
                                    {
                                      uint64_t v250 = *((void *)v248 - 1);
                                      v248 -= 8;
                                      uint64_t v249 = v250;
                                      *(void *)v248 = 0;
                                      if (v250) {
                                        (*(void (**)(uint64_t))(*(void *)v249 + 8))(v249);
                                      }
                                    }
                                    goto LABEL_267;
                                  }
LABEL_266:
                                  __p[0] = v235;
                                  __p[1] = v220;
                                  *(void *)&long long v257 = v236;
LABEL_267:
                                  if (v219) {
                                    operator delete(v219);
                                  }
LABEL_269:
                                  __p[1] = v220;
                                  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(&v253, &v255, 0, 0, 0, 0);
                                  mlir::applyFullConversion(v2, (mlir::Operation *)v268, (const mlir::ConversionTarget *)&v253, v251);
                                }
LABEL_271:
                                std::__throw_bad_array_new_length[abi:nn180100]();
                              }
LABEL_270:
                              abort();
                            }
                          }
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v216 + 10), v216 + 12, v217, 16);
                          *((_DWORD *)v216 + 22) = *((_DWORD *)v216 + 22);
                          v219 = (char *)__p[1];
                          uint64_t v218 = v257;
                          if (__p[1] < (void *)v257) {
                            goto LABEL_234;
                          }
                          goto LABEL_245;
                        }
                      }
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v181 + 10), v181 + 12, v182, 16);
                      *((_DWORD *)v181 + 22) = *((_DWORD *)v181 + 22);
                      v184 = (char *)__p[1];
                      uint64_t v183 = v257;
                      if (__p[1] < (void *)v257) {
                        goto LABEL_196;
                      }
                      goto LABEL_207;
                    }
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v146 + 10), v146 + 12, v147, 16);
                  *((_DWORD *)v146 + 22) = *((_DWORD *)v146 + 22);
                  v149 = (char *)__p[1];
                  uint64_t v148 = v257;
                  if (__p[1] < (void *)v257) {
                    goto LABEL_158;
                  }
                  goto LABEL_169;
                }
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v111 + 10), v111 + 12, v112, 16);
              *((_DWORD *)v111 + 22) = *((_DWORD *)v111 + 22);
              unsigned int v114 = (char *)__p[1];
              uint64_t v113 = v257;
              if (__p[1] < (void *)v257) {
                goto LABEL_120;
              }
              goto LABEL_131;
            }
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v76 + 10), v76 + 12, v77, 16);
          *((_DWORD *)v76 + 22) = *((_DWORD *)v76 + 22);
          BOOL v79 = (char *)__p[1];
          uint64_t v78 = v257;
          if (__p[1] < (void *)v257) {
            goto LABEL_82;
          }
          goto LABEL_93;
        }
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v41 + 10), v41 + 12, v42, 16);
      *((_DWORD *)v41 + 22) = *((_DWORD *)v41 + 22);
      char v44 = (char *)__p[1];
      uint64_t v43 = v257;
      if (__p[1] < (void *)v257) {
        goto LABEL_44;
      }
      goto LABEL_55;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v6 + 10), v6 + 12, v7, 16);
  *((_DWORD *)v6 + 22) = *((_DWORD *)v6 + 22);
  unint64_t v9 = (char *)__p[1];
  uint64_t v8 = v257;
  if (__p[1] < (void *)v257) {
    goto LABEL_6;
  }
  goto LABEL_17;
}

BOOL mlir::OperationPass<mlir::mps::serialization::ModuleOp>::canScheduleOn(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 8);
  AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v6);
  if (!*(unsigned char *)(a1 + 32) || v4 != *(void *)(a1 + 24)) {
    return 0;
  }
  if (v4) {
    return memcmp(AttrData, *(const void **)(a1 + 16), v4) == 0;
  }
  return 1;
}

double mlir::PassWrapper<mlir::mps::MPSSerializationPass,mlir::OperationPass<mlir::mps::serialization::ModuleOp>>::clonePass@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v4 = operator new(0x158uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  double result = 0.0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)size_t v4 = &unk_1EC9CA7A8;
  *a2 = v4;
  return result;
}

mlir::StringAttr ****_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_3mps20MPSSerializationPass14runOnOperationEvEUlNS1_4func6FuncOpEE_SE_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_(mlir::StringAttr ****result, mlir::GenericProgramPoint *a2)
{
  if (a2)
  {
    if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id) {
      return (mlir::StringAttr ****)mlir::mps::MPSSerializationPass::runOnOperation(void)::{lambda(mlir::func::FuncOp)#1}::operator()(*result, a2);
    }
  }
  return result;
}

mlir::GenericProgramPoint *mlir::mps::MPSSerializationPass::runOnOperation(void)::{lambda(mlir::func::FuncOp)#1}::operator()(mlir::StringAttr ***a1, mlir::GenericProgramPoint *this)
{
  uint64_t v32 = this;
  size_t v4 = *a1;
  uint64_t v5 = (uint64_t)(*a1 + 2);
  long long v26 = *(_OWORD *)v5;
  uint64_t v6 = *((void *)this + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  *(void *)uint64_t v5 = v6;
  void v4[3] = v7;
  uint64_t v8 = *a1;
  uint64_t v9 = *((void *)this + 3);
  if (*((unsigned char *)this + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"sym_name", 8);
    if (v11)
    {
      if (InherentAttr) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v12 = 0;
      goto LABEL_9;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)this + 56, "sym_name", 8uLL);
  if (!InherentAttr) {
    goto LABEL_8;
  }
LABEL_4:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
    uint64_t v12 = InherentAttr;
  }
  else {
    uint64_t v12 = 0;
  }
LABEL_9:
  uint64_t v29 = (mlir::StringAttr **)v12;
  *(void *)&long long v30 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v29);
  *((void *)&v30 + 1) = v13;
  v27[1] = 0;
  uint64_t FunctionType = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v32);
  v27[0] = 0;
  unint64_t v14 = mlir::OpBuilder::create<mlir::mps::serialization::FuncOp,llvm::StringRef,mlir::FunctionType,llvm::ArrayRef<mlir::NamedAttribute>>(v8, v9, (uint64_t *)&v30, &FunctionType, (uint64_t)v27);
  int64_t v31 = v14;
  v27[0] = mlir::Operation::getAttrDictionary(v14);
  *(void *)&long long v30 = mlir::Operation::getAttrDictionary(v32);
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30);
  if (v16)
  {
    unint64_t v17 = (long long *)Value;
    uint64_t v18 = 16 * v16;
    do
    {
      long long v30 = *v17;
      uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v30);
      if ((mlir::DictionaryAttr::contains((uint64_t)v27, CallableRegion) & 1) == 0)
      {
        uint64_t v20 = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v30);
        mlir::Operation::setAttr((uint64_t)v14, v20, *((uint64_t *)&v30 + 1));
      }
      ++v17;
      v18 -= 16;
    }
    while (v18);
  }
  mlir::detail::FunctionOpInterfaceTrait<mlir::func::FuncOp>::addEntryBlock((mlir::func::FuncOp *)&v31);
  unint64_t v21 = *((unsigned int *)v31 + 11);
  if ((v21 & 0x7FFFFF) != 0)
  {
    uint64_t v22 = (void *)((((unint64_t)v31 + 16 * ((v21 >> 23) & 1) + ((v21 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)v31 + 10));
    if ((void *)*v22 != v22)
    {
LABEL_16:
      Body = (mlir::Region *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v31);
      goto LABEL_19;
    }
  }
  else if (MEMORY[0])
  {
    goto LABEL_16;
  }
  Body = 0;
LABEL_19:
  uint64_t v24 = (mlir::Region *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v32);
  mlir::Region::takeBody(Body, v24);
  mlir::Operation::erase(v32);
  uint64_t v29 = *a1;
  *(void *)&long long v30 = &v29;
  double result = mlir::detail::walk<mlir::ForwardIterator>(v31, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_3mps20MPSSerializationPass14runOnOperationEvENKUlNS1_4func6FuncOpEE_clESE_EUlNSD_8ReturnOpEE_SG_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESP_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v30, 1);
  if (v4)
  {
    if ((void)v26)
    {
      *(_OWORD *)uint64_t v5 = v26;
    }
    else
    {
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::FuncOp,llvm::StringRef,mlir::FunctionType,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v22[38] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.func", (const unsigned __int8 *)8, Context);
  if (!v12)
  {
    __int16 v21 = 1283;
    v20[2] = (uint64_t)"mps.func";
    v20[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v11);
  mlir::func::FuncOp::build(a1, (uint64_t)v22, *a3, a3[1], *a4, *(const void **)a5, *(void *)(a5 + 8), v13, 0, 0);
  unint64_t v14 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::FuncOp,void>::id) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v15;
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_3mps20MPSSerializationPass14runOnOperationEvENKUlNS1_4func6FuncOpEE_clESE_EUlNSD_8ReturnOpEE_SG_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESP_E4typeES3_OT1_EUlS3_E_EEvlS3_(mlir::OpBuilder ***a1, mlir::GenericProgramPoint *a2)
{
  if (a2)
  {
    if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::ReturnOp,void>::id) {
      mlir::mps::MPSSerializationPass::runOnOperation(void)::{lambda(mlir::func::FuncOp)#1}::operator() const(mlir::func::FuncOp)::{lambda(mlir::func::ReturnOp)#1}::operator()(*a1, a2);
    }
  }
}

void mlir::mps::MPSSerializationPass::runOnOperation(void)::{lambda(mlir::func::FuncOp)#1}::operator() const(mlir::func::FuncOp)::{lambda(mlir::func::ReturnOp)#1}::operator()(mlir::OpBuilder **a1, mlir::GenericProgramPoint *this)
{
  v28[6] = *MEMORY[0x1E4F143B8];
  BOOL v25 = this;
  size_t v4 = *a1;
  uint64_t v5 = *((void *)this + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  *((void *)v4 + 2) = v5;
  *((void *)v4 + 3) = v6;
  unint64_t v7 = *a1;
  uint64_t v8 = *((void *)this + 3);
  uint64_t Inputs = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&v25);
  unint64_t v11 = v9;
  long long v26 = v28;
  uint64_t v27 = 0x600000000;
  if (v9 < 7)
  {
    if (!v9)
    {
      int v24 = 0;
      goto LABEL_16;
    }
    char v12 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v9, 8);
    char v12 = (char *)v26 + 8 * v27;
    if (v11 >= 0xD
      && ((unint64_t)v12 >= Inputs + 32 * v11
       || Inputs + 24 >= (unint64_t)v26 + 8 * v11 + 8 * v27))
    {
      uint64_t v14 = v11 & 3;
      if ((v11 & 3) == 0) {
        uint64_t v14 = 4;
      }
      unint64_t v13 = v11 - v14;
      v12 += v13;
      uint64_t v15 = (const double *)(Inputs + 88);
      uint64_t v16 = (unsigned long long *)((char *)v26 + 8 * v27 + 16);
      unint64_t v17 = v13;
      do
      {
        uint64_t v18 = v15 - 8;
        unsigned long long v19 = (unsigned __int128)vld4q_f64(v18);
        unsigned long long v20 = (unsigned __int128)vld4q_f64(v15);
        *(v16 - 1) = v19;
        unsigned long long *v16 = v20;
        v15 += 16;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      goto LABEL_13;
    }
  }
  unint64_t v13 = 0;
LABEL_13:
  unint64_t v21 = v11 - v13;
  uint64_t v22 = (uint64_t *)(Inputs + 32 * v13 + 24);
  do
  {
    uint64_t v23 = *v22;
    v22 += 4;
    *v12++ = v23;
    --v21;
  }
  while (v21);
  int v24 = v27;
LABEL_16:
  LODWORD(v27) = v24 + v11;
  mlir::OpBuilder::create<mlir::mps::serialization::ReturnOp,llvm::SmallVector<mlir::Value,6u>>(v7, v8, (uint64_t)&v26);
  if (v26 != v28) {
    free(v26);
  }
  mlir::Operation::erase(v25);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::ReturnOp,llvm::SmallVector<mlir::Value,6u>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  v18[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.return", (const unsigned __int8 *)0xA, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"mps.return";
    v15[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::RegionReturn::build((uint64_t)a1, (uint64_t)v18, v17[0], v17[1]);
  unint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ReturnOp,void>::id) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

void *mlir::mps::anonymous namespace'::ConvertForOp<mlir::scf::ForOp,mlir::mps::serialization::ForOp>::~ConvertForOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertForOp<mlir::scf::ForOp,mlir::mps::serialization::ForOp>::~ConvertForOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::scf::ForOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::scf::ForOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::scf::detail::ForOpGenericAdaptorBase::ForOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::scf::ForOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::scf::detail::ForOpGenericAdaptorBase::ForOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertForOp<mlir::scf::ForOp,mlir::mps::serialization::ForOp>::matchAndRewrite(int a1, uint64_t a2, mlir::scf::detail::ForOpGenericAdaptorBase *this, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v27 = (unsigned int *)a2;
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 12));
  unint64_t v8 = *((void *)this + 5);
  unint64_t v29 = v8;
  uint64_t v30 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v8 = mlir::ValueRange::offset_base(&v29, ODSOperandIndexAndLength);
  }
  unint64_t v29 = v8;
  uint64_t v30 = 0;
  uint64_t v25 = mlir::ValueRange::dereference_iterator(&v29, 0);
  unsigned int v9 = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 12));
  unint64_t v10 = *((void *)this + 5);
  unint64_t v29 = v10;
  uint64_t v30 = v9;
  if (v9) {
    unint64_t v10 = mlir::ValueRange::offset_base(&v29, v9);
  }
  unint64_t v29 = v10;
  uint64_t v30 = 0;
  uint64_t v24 = mlir::ValueRange::dereference_iterator(&v29, 0);
  unsigned int v11 = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 2u, *((_DWORD *)this + 12));
  unint64_t v12 = *((void *)this + 5);
  unint64_t v29 = v12;
  uint64_t v30 = v11;
  if (v11) {
    unint64_t v12 = mlir::ValueRange::offset_base(&v29, v11);
  }
  unint64_t v29 = v12;
  uint64_t v30 = 0;
  uint64_t v23 = mlir::ValueRange::dereference_iterator(&v29, 0);
  uint64_t v13 = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 3u, *((_DWORD *)this + 12));
  unint64_t v14 = *((void *)this + 5);
  unint64_t v29 = v14;
  uint64_t v30 = v13;
  if (v13)
  {
    unint64_t v14 = mlir::ValueRange::offset_base(&v29, v13);
    uint64_t v15 = v30;
  }
  else
  {
    uint64_t v15 = 0;
  }
  unint64_t v29 = v14;
  uint64_t v30 = (HIDWORD(v13) + v13) - v15;
  long long v26 = mlir::OpBuilder::create<mlir::mps::serialization::ForOp,mlir::Value,mlir::Value,mlir::Value,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), v6, &v25, &v24, &v23, (uint64_t *)&v29);
  Body = (mlir::mps::_anonymous_namespace_ *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v27);
  unint64_t v17 = (mlir::Region **)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v26);
  unsigned long long v19 = v27;
  uint64_t Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v26);
  mlir::ValueRange::ValueRange(v28, Results, v21);
  mlir::ConversionPatternRewriter::replaceOp(a4, v19, v28[0], v28[1]);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::ForOp,mlir::Value,mlir::Value,mlir::Value,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v25[38] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.for", (const unsigned __int8 *)7, Context);
  if (!v14)
  {
    __int16 v24 = 1283;
    unint64_t v23[2] = (uint64_t)"mps.for";
    v23[3] = 7;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v13);
  mlir::mps::serialization::ForOp::build((uint64_t)a1, (uint64_t)v25, *a3, *a4, *a5, *a6, a6[1], v15, 0, v19);
  __int16 v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ForOp,void>::id) {
    unint64_t v17 = v16;
  }
  else {
    unint64_t v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v17;
}

uint64_t mlir::mps::anonymous namespace'::inlineRegion(mlir::mps::_anonymous_namespace_ *this, mlir::Region **a2, mlir::Region *a3, mlir::PatternRewriter *a4)
{
  v12[2] = *MEMORY[0x1E4F143B8];
  for (uint64_t i = *a2; *a2 != (mlir::Region *)a2; uint64_t i = *a2)
  {
    if (i) {
      unint64_t v8 = (char *)i - 8;
    }
    else {
      unint64_t v8 = 0;
    }
    (*(void (**)(mlir::Region *, char *, mlir::Region *, mlir::PatternRewriter *))(*(void *)a3 + 48))(a3, v8, a3, a4);
  }
  mlir::ValueRange::ValueRange(v12, 0, 0);
  mlir::OpBuilder::createBlock((void *)a3 + 1, (uint64_t)a2, 0, v12[0], v12[1], 0, 0);
  if (*a2) {
    unsigned int v9 = (mlir::Region *)((char *)*a2 - 8);
  }
  else {
    unsigned int v9 = 0;
  }
  mlir::RewriterBase::inlineRegionBefore((uint64_t (***)(void, uint64_t, unint64_t, char *))a3, (uint64_t)this, v9);
  if (*a2) {
    uint64_t v10 = (uint64_t)*a2 - 8;
  }
  else {
    uint64_t v10 = 0;
  }
  return (*(uint64_t (**)(mlir::Region *, uint64_t))(*(void *)a3 + 48))(a3, v10);
}

void *mlir::mps::anonymous namespace'::ConvertWhileOp<mlir::scf::WhileOp,mlir::mps::serialization::WhileOp>::~ConvertWhileOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertWhileOp<mlir::scf::WhileOp,mlir::mps::serialization::WhileOp>::~ConvertWhileOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::scf::WhileOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::scf::WhileOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::scf::detail::WhileOpGenericAdaptorBase::WhileOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::scf::WhileOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::scf::detail::WhileOpGenericAdaptorBase::WhileOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertWhileOp<mlir::scf::WhileOp,mlir::mps::serialization::WhileOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, mlir::Region *a4)
{
  v33[2] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = (unsigned int *)a2;
  uint64_t v6 = (mlir::Region *)((char *)a4 + 8);
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v8 = *(unsigned int *)(a2 + 36);
  if (v8) {
    uint64_t v9 = a2 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v30 = v32;
  uint64_t v31 = 0x600000000;
  if (v8 < 7)
  {
    if (!v8)
    {
      int v14 = 0;
      uint64_t v15 = v32;
      goto LABEL_11;
    }
    uint64_t v10 = 0;
    unsigned int v11 = v32;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v8, 8);
    uint64_t v10 = v31;
    unsigned int v11 = v30;
  }
  uint64_t v12 = 0;
  unint64_t v13 = &v11[8 * v10];
  do
  {
    *(void *)&v13[8 * v12] = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v12) + 8) & 0xFFFFFFFFFFFFFFF8;
    ++v12;
  }
  while (v8 != v12);
  int v14 = v31;
  uint64_t v15 = v30;
LABEL_11:
  LODWORD(v31) = v14 + v8;
  mlir::ValueRange::ValueRange((unint64_t *)v33, (uint64_t)v15, (v14 + v8));
  *(_OWORD *)unint64_t v29 = *(_OWORD *)(a3 + 40);
  long long v26 = mlir::OpBuilder::create<mlir::mps::serialization::WhileOp,mlir::TypeRange,mlir::ValueRange>(v6, v7, v33, v29);
  if (v30 != v32) {
    free(v30);
  }
  Body = (mlir::mps::_anonymous_namespace_ *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v27);
  unint64_t v17 = (mlir::Region **)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v26);
  uint64_t v19 = (mlir::mps::_anonymous_namespace_ *)mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v27);
  uint64_t v20 = (mlir::Region **)mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v26);
  __int16 v22 = v27;
  uint64_t Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v26);
  mlir::ValueRange::ValueRange(v28, Results, v24);
  mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, v22, v28[0], v28[1]);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::WhileOp,mlir::TypeRange,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.while", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"mps.while";
    void v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::scf::WhileOp::build((uint64_t)a1, (uint64_t)v19, *a3, a3[1], *a4, a4[1], 0, 0);
  unsigned int v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::WhileOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void *mlir::mps::anonymous namespace'::ConvertIfOp<mlir::scf::IfOp,mlir::mps::serialization::IfOp>::~ConvertIfOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertIfOp<mlir::scf::IfOp,mlir::mps::serialization::IfOp>::~ConvertIfOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::scf::IfOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::scf::IfOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::scf::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::scf::IfOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::scf::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertIfOp<mlir::scf::IfOp,mlir::mps::serialization::IfOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::scf::detail::IfOpGenericAdaptorBase *a3, mlir::Region *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v29 = (unsigned int *)a2;
  uint64_t v6 = (mlir::Region *)((char *)a4 + 8);
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v8 = *(unsigned int *)(a2 + 36);
  if (v8) {
    uint64_t v9 = a2 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v31 = v33;
  uint64_t v32 = 0x600000000;
  if (v8 < 7)
  {
    if (!v8)
    {
      int v14 = 0;
      uint64_t v15 = v33;
      goto LABEL_11;
    }
    uint64_t v10 = 0;
    unsigned int v11 = v33;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v8, 8);
    uint64_t v10 = v32;
    unsigned int v11 = v31;
  }
  uint64_t v12 = 0;
  unint64_t v13 = &v11[8 * v10];
  do
  {
    *(void *)&v13[8 * v12] = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v12) + 8) & 0xFFFFFFFFFFFFFFF8;
    ++v12;
  }
  while (v8 != v12);
  int v14 = v32;
  uint64_t v15 = v31;
LABEL_11:
  LODWORD(v32) = v14 + v8;
  mlir::ValueRange::ValueRange((unint64_t *)v34, (uint64_t)v15, (v14 + v8));
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength(a3, 0);
  unint64_t v17 = *((void *)a3 + 5);
  long long v35 = (mlir::GenericProgramPoint *)v17;
  uint64_t v36 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v17 = mlir::ValueRange::offset_base(&v35, ODSOperandIndexAndLength);
  }
  long long v35 = (mlir::GenericProgramPoint *)v17;
  uint64_t v36 = 0;
  uint64_t v28 = mlir::ValueRange::dereference_iterator(&v35, 0);
  long long v35 = mlir::OpBuilder::create<mlir::mps::serialization::IfOp,mlir::TypeRange,mlir::Value>(v6, v7, v34, &v28);
  if (v31 != v33) {
    free(v31);
  }
  Body = (mlir::mps::_anonymous_namespace_ *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
  uint64_t v19 = (mlir::Region **)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v35);
  unint64_t v21 = (mlir::mps::_anonymous_namespace_ *)mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v29);
  __int16 v22 = (mlir::Region **)mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v35);
  unint64_t v24 = v29;
  uint64_t Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v35);
  mlir::ValueRange::ValueRange(v30, Results, v26);
  mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, v24, v30[0], v30[1]);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::IfOp,mlir::TypeRange,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.if", (const unsigned __int8 *)6, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"mps.if";
    void v17[3] = 6;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::scf::IfOp::build(a1, (unsigned int *)v19, *a3, a3[1], *a4);
  unsigned int v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::IfOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void *mlir::mps::anonymous namespace'::ConvertConditionOp<mlir::scf::ConditionOp,mlir::mps::serialization::ConditionOp>::~ConvertConditionOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertConditionOp<mlir::scf::ConditionOp,mlir::mps::serialization::ConditionOp>::~ConvertConditionOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::scf::ConditionOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::scf::ConditionOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::scf::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::scf::ConditionOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::scf::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertConditionOp<mlir::scf::ConditionOp,mlir::mps::serialization::ConditionOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *(unsigned int *)(a2 + 36);
  if (v7) {
    uint64_t v8 = a2 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v23 = v25;
  uint64_t v24 = 0x600000000;
  if (v7 < 7)
  {
    if (!v7)
    {
      int v13 = 0;
      unint64_t v14 = v25;
      goto LABEL_11;
    }
    uint64_t v9 = 0;
    char v10 = v25;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v7, 8);
    uint64_t v9 = v24;
    char v10 = v23;
  }
  uint64_t v11 = 0;
  uint64_t v12 = &v10[8 * v9];
  do
  {
    *(void *)&v12[8 * v11] = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v11) + 8) & 0xFFFFFFFFFFFFFFF8;
    ++v11;
  }
  while (v7 != v11);
  int v13 = v24;
  unint64_t v14 = v23;
LABEL_11:
  LODWORD(v24) = v13 + v7;
  mlir::ValueRange::ValueRange((unint64_t *)v26, (uint64_t)v14, (v13 + v7));
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 0, *(_DWORD *)(a3 + 48));
  unint64_t v16 = *(void *)(a3 + 40);
  unint64_t v27 = v16;
  uint64_t v28 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v16 = mlir::ValueRange::offset_base(&v27, ODSOperandIndexAndLength);
  }
  unint64_t v27 = v16;
  uint64_t v28 = 0;
  uint64_t v22 = mlir::ValueRange::dereference_iterator(&v27, 0);
  uint64_t v17 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 1u, *(_DWORD *)(a3 + 48));
  unint64_t v18 = *(void *)(a3 + 40);
  unint64_t v27 = v18;
  uint64_t v28 = v17;
  if (v17)
  {
    unint64_t v18 = mlir::ValueRange::offset_base(&v27, v17);
    uint64_t v19 = v28;
  }
  else
  {
    uint64_t v19 = 0;
  }
  unint64_t v27 = v18;
  uint64_t v28 = (HIDWORD(v17) + v17) - v19;
  uint64_t v20 = mlir::OpBuilder::create<mlir::mps::serialization::ConditionOp,mlir::TypeRange,mlir::Value,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(void *)(a2 + 24), v26, &v22, (uint64_t *)&v27);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, a2, v20);
  if (v23 != v25) {
    free(v23);
  }
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::ConditionOp,mlir::TypeRange,mlir::Value,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.condition", (const unsigned __int8 *)0xD, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"mps.condition";
    v19[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::scf::ConditionOp::build((uint64_t)a1, (uint64_t)v21, *a3, a3[1], *a4, *a5, a5[1]);
  int v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ConditionOp,void>::id) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void *mlir::mps::anonymous namespace'::ConvertYieldOp<mlir::scf::YieldOp,mlir::mps::serialization::YieldOp>::~ConvertYieldOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertYieldOp<mlir::scf::YieldOp,mlir::mps::serialization::YieldOp>::~ConvertYieldOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::scf::YieldOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::scf::YieldOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::scf::detail::YieldOpGenericAdaptorBase::YieldOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::scf::YieldOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::scf::detail::YieldOpGenericAdaptorBase::YieldOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertYieldOp<mlir::scf::YieldOp,mlir::mps::serialization::YieldOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *(unsigned int *)(a2 + 36);
  if (v7) {
    uint64_t v8 = a2 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  __int16 v20 = v22;
  uint64_t v21 = 0x600000000;
  if (v7 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v7, 8);
    uint64_t v9 = v21;
    char v10 = v20;
    goto LABEL_8;
  }
  if (v7)
  {
    uint64_t v9 = 0;
    char v10 = v22;
LABEL_8:
    uint64_t v11 = 0;
    char v12 = &v10[8 * v9];
    do
    {
      *(void *)&v12[8 * v11] = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v11) + 8) & 0xFFFFFFFFFFFFFFF8;
      ++v11;
    }
    while (v7 != v11);
    int v13 = v21;
    unint64_t v14 = v20;
    goto LABEL_11;
  }
  int v13 = 0;
  unint64_t v14 = v22;
LABEL_11:
  LODWORD(v21) = v13 + v7;
  mlir::ValueRange::ValueRange((unint64_t *)v23, (uint64_t)v14, (v13 + v7));
  unint64_t ODSOperandIndexAndLength = mlir::scf::detail::YieldOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::YieldOpGenericAdaptorBase *)a3, 0, *(unsigned int *)(a3 + 48));
  unint64_t v16 = *(void *)(a3 + 40);
  unint64_t v24 = v16;
  uint64_t v25 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
  {
    unint64_t v16 = mlir::ValueRange::offset_base(&v24, ODSOperandIndexAndLength);
    uint64_t v17 = v25;
  }
  else
  {
    uint64_t v17 = 0;
  }
  unint64_t v24 = v16;
  uint64_t v25 = (HIDWORD(ODSOperandIndexAndLength) + ODSOperandIndexAndLength) - v17;
  __int16 v18 = mlir::OpBuilder::create<mlir::mps::serialization::YieldOp,mlir::TypeRange,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(void *)(a2 + 24), v23, (uint64_t *)&v24);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, a2, v18);
  if (v20 != v22) {
    free(v20);
  }
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::YieldOp,mlir::TypeRange,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.yield", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"mps.yield";
    void v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v19, *a3, a3[1], *a4, a4[1], 0, 0);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::YieldOp,void>::id) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void *mlir::mps::anonymous namespace'::ConvertFromElementsOp<mlir::tensor::FromElementsOp,mlir::mps::serialization::FromElementsOp>::~ConvertFromElementsOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertFromElementsOp<mlir::tensor::FromElementsOp,mlir::mps::serialization::FromElementsOp>::~ConvertFromElementsOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::tensor::FromElementsOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::tensor::FromElementsOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::tensor::detail::FromElementsOpGenericAdaptorBase::FromElementsOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::tensor::FromElementsOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::tensor::detail::FromElementsOpGenericAdaptorBase::FromElementsOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertFromElementsOp<mlir::tensor::FromElementsOp,mlir::mps::serialization::FromElementsOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a2;
  unint64_t v9 = *(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v10) + 8) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)(a3 + 40);
  unint64_t v7 = mlir::OpBuilder::create<mlir::mps::serialization::FromElementsOp,mlir::RankedTensorType,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(void *)(a2 + 24), (uint64_t *)&v9, v11);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, a2, v7);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::FromElementsOp,mlir::RankedTensorType,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.from_elements", (const unsigned __int8 *)0x11, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"mps.from_elements";
    void v17[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::pdl_interp::CreateRangeOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4, a4[1]);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::FromElementsOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void *mlir::mps::anonymous namespace'::ConvertExtractOp<mlir::tensor::ExtractOp,mlir::mps::serialization::ExtractOp>::~ConvertExtractOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertExtractOp<mlir::tensor::ExtractOp,mlir::mps::serialization::ExtractOp>::~ConvertExtractOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::tensor::ExtractOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::tensor::ExtractOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::tensor::detail::ExtractOpGenericAdaptorBase::ExtractOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::tensor::ExtractOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::tensor::detail::ExtractOpGenericAdaptorBase::ExtractOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertExtractOp<mlir::tensor::ExtractOp,mlir::mps::serialization::ExtractOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  unint64_t v15 = *(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v16) + 8) & 0xFFFFFFFFFFFFFFF8;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 0, *(_DWORD *)(a3 + 48));
  unint64_t v8 = *(void *)(a3 + 40);
  unint64_t v17 = v8;
  uint64_t v18 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v8 = mlir::ValueRange::offset_base(&v17, ODSOperandIndexAndLength);
  }
  unint64_t v17 = v8;
  uint64_t v18 = 0;
  uint64_t v14 = mlir::ValueRange::dereference_iterator(&v17, 0);
  uint64_t v9 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 1u, *(_DWORD *)(a3 + 48));
  unint64_t v10 = *(void *)(a3 + 40);
  unint64_t v17 = v10;
  uint64_t v18 = v9;
  if (v9)
  {
    unint64_t v10 = mlir::ValueRange::offset_base(&v17, v9);
    uint64_t v11 = v18;
  }
  else
  {
    uint64_t v11 = 0;
  }
  unint64_t v17 = v10;
  uint64_t v18 = (HIDWORD(v9) + v9) - v11;
  uint64_t v12 = mlir::OpBuilder::create<mlir::mps::serialization::ExtractOp,mlir::Type,mlir::Value,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(void *)(a2 + 24), (uint64_t *)&v15, &v14, (uint64_t *)&v17);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, a2, v12);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::ExtractOp,mlir::Type,mlir::Value,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.extract", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"mps.extract";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::tensor::ExtractOp::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5, a5[1]);
  unint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ExtractOp,void>::id) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void mlir::mps::MPSDeserializationPass::~MPSDeserializationPass(mlir::mps::MPSDeserializationPass *this)
{
  mlir::Pass::~Pass(this);

  operator delete(v1);
}

const char *mlir::PassWrapper<mlir::mps::MPSDeserializationPass,mlir::OperationPass<mlir::mps::serialization::ModuleOp>>::getName()
{
  uint64_t v5 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSDeserializationPass]";
  unint64_t v6 = 83;
  unint64_t v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0) {
    unint64_t v1 = v0;
  }
  else {
    unint64_t v1 = v6;
  }
  uint64_t v2 = &v5[v1];
  if (v6 - v1 >= 0x12) {
    uint64_t v3 = 18;
  }
  else {
    uint64_t v3 = v6 - v1;
  }
  return &v2[v3];
}

void *mlir::mps::MPSDeserializationPass::getDependentDialects(mlir::mps::MPSDeserializationPass *this, uint64_t **a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EC9CEFB8;
  uint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::func::FuncDialect,void>::id, "func", 4uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CEEE0;
  uint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, "mps", 3uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CEF28;
  uint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::scf::SCFDialect,void>::id, "scf", 3uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CF090;
  uint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::tensor::TensorDialect,void>::id, "tensor", 6uLL, v4);
  double result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

const char *mlir::mps::MPSDeserializationPass::getArgument(mlir::mps::MPSDeserializationPass *this)
{
  return "mps-deserialize";
}

const char *mlir::mps::MPSDeserializationPass::getDescription(mlir::mps::MPSDeserializationPass *this)
{
  return "Convert serialized MPS module to a runnable form";
}

void mlir::mps::MPSDeserializationPass::runOnOperation(mlir::mps::MPSDeserializationPass *this)
{
  uint64_t v282 = *MEMORY[0x1E4F143B8];
  v252[0] = mlir::Attribute::getContext((mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  memset(&v252[1], 0, 24);
  uint64_t v2 = (mlir::ForwardIterator *)(*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  v268[0] = (uint64_t)v252;
  v255 = v268;
  mlir::detail::walk<mlir::ForwardIterator>(v2, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_3mps22MPSDeserializationPass14runOnOperationEvEUlNSB_13serialization6FuncOpEE_SE_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v255, 1);
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  v268[1] = 0;
  v268[2] = 0;
  v268[0] = (uint64_t)&unk_1EC9AA748;
  int v269 = 0;
  uint64_t v274 = 0;
  uint64_t v275 = 0;
  v270 = v272;
  uint64_t v271 = 0;
  v272[0] = 0;
  v272[1] = 0;
  int v273 = 0;
  uint64_t v276 = 0x1000000000;
  uint64_t v277 = 0;
  uint64_t v278 = 0;
  uint64_t v279 = 0x2800000000;
  uint64_t v280 = 0;
  uint64_t v281 = Context;
  v255 = &__p[1];
  __p[1] = "mps";
  *(void *)&long long v257 = 3;
  __p[0] = (void *)0x200000001;
  mlir::ConversionTarget::setDialectAction(v268, (uint64_t)&__p[1], 1, 0);
  if (v255 != &__p[1]) {
    free(v255);
  }
  v255 = &__p[1];
  __p[1] = "scf";
  *(void *)&long long v257 = 3;
  __p[0] = (void *)0x200000001;
  mlir::ConversionTarget::setDialectAction(v268, (uint64_t)&__p[1], 1, 0);
  if (v255 != &__p[1]) {
    free(v255);
  }
  v255 = &__p[1];
  __p[1] = "tensor";
  *(void *)&long long v257 = 6;
  __p[0] = (void *)0x200000001;
  mlir::ConversionTarget::setDialectAction(v268, (uint64_t)&__p[1], 1, 0);
  if (v255 != &__p[1]) {
    free(v255);
  }
  v255 = &__p[1];
  __p[1] = "func";
  *(void *)&long long v257 = 4;
  __p[0] = (void *)0x200000001;
  mlir::ConversionTarget::setDialectAction(v268, (uint64_t)&__p[1], 1, 0);
  if (v255 != &__p[1]) {
    free(v255);
  }
  mlir::OperationName::OperationName(&v255, "mps.for", 7, v281);
  mlir::ConversionTarget::setOpAction((uint64_t)v268, (uint64_t)v255, 2);
  mlir::OperationName::OperationName(&v255, "mps.while", 9, v281);
  mlir::ConversionTarget::setOpAction((uint64_t)v268, (uint64_t)v255, 2);
  mlir::OperationName::OperationName(&v255, "mps.if", 6, v281);
  mlir::ConversionTarget::setOpAction((uint64_t)v268, (uint64_t)v255, 2);
  mlir::ConversionTarget::addIllegalOp<mlir::mps::serialization::ConditionOp,mlir::mps::serialization::YieldOp,mlir::mps::serialization::ExtractOp,mlir::mps::serialization::FromElementsOp>((uint64_t)v268);
  v255 = (void *)mlir::Attribute::getContext((mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  *(_OWORD *)__p = 0u;
  long long v257 = 0u;
  v258 = v260;
  uint64_t v259 = 0x600000000;
  v260[6] = 0;
  v260[7] = 0;
  int v261 = 0;
  uint64_t v262 = 0;
  uint64_t v263 = 0;
  uint64_t v264 = 0x2800000000;
  uint64_t v265 = 0;
  size_t v4 = (mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v266 = 0;
  uint64_t v267 = 0x2800000000;
  uint64_t v5 = mlir::Attribute::getContext(v4);
  uint64_t v6 = operator new(0x68uLL);
  mlir::PatternBenefit::PatternBenefit(&v253, 1);
  mlir::Pattern::Pattern((uint64_t)(v6 + 1), (uint64_t)"mps.for", 7, (__int16)v253, v5, 0, 0);
  v6[12] = 0;
  *uint64_t v6 = &unk_1EC9C7888;
  if (v6[9])
  {
    unint64_t v7 = *((unsigned int *)v6 + 22);
    if (v7 <= *((_DWORD *)v6 + 23)) {
      goto LABEL_11;
    }
  }
  else
  {
    v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertForOp<mlir::mps::se"
           "rialization::ForOp, mlir::scf::ForOp>]";
    unint64_t v254 = 147;
    unint64_t v11 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
    if (v254 >= v11) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = v254;
    }
    unint64_t v13 = &v253[v12];
    unint64_t v14 = v254 - v12;
    if (v254 - v12 >= 0x12) {
      uint64_t v15 = 18;
    }
    else {
      uint64_t v15 = v254 - v12;
    }
    uint64_t v16 = &v13[v15];
    unint64_t v17 = v14 - v15;
    if (v17 >= v17 - 1) {
      --v17;
    }
    v6[8] = v16;
    v6[9] = v17;
    unint64_t v7 = *((unsigned int *)v6 + 22);
    if (v7 <= *((_DWORD *)v6 + 23))
    {
LABEL_11:
      *((_DWORD *)v6 + 22) = v7;
      uint64_t v9 = (char *)__p[1];
      uint64_t v8 = v257;
      if (__p[1] < (void *)v257)
      {
LABEL_12:
        *(void *)uint64_t v9 = v6;
        unint64_t v10 = v9 + 8;
        goto LABEL_47;
      }
LABEL_23:
      __int16 v18 = (char *)__p[0];
      int64_t v19 = v9 - (char *)__p[0];
      uint64_t v20 = (v9 - (char *)__p[0]) >> 3;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61) {
        goto LABEL_276;
      }
      uint64_t v22 = v8 - (unint64_t)__p[0];
      if (v22 >> 2 > v21) {
        unint64_t v21 = v22 >> 2;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 61) {
          goto LABEL_277;
        }
        unint64_t v24 = (char *)operator new(8 * v23);
        uint64_t v25 = &v24[8 * v20];
        uint64_t v26 = &v24[8 * v23];
        *(void *)uint64_t v25 = v6;
        unint64_t v10 = v25 + 8;
        int64_t v27 = v9 - v18;
        if (v9 != v18) {
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = (char *)(8 * v20);
        uint64_t v26 = 0;
        *(void *)(8 * v20) = v6;
        unint64_t v10 = (void *)(8 * v20 + 8);
        int64_t v27 = v9 - v18;
        if (v9 != v18)
        {
LABEL_32:
          unint64_t v28 = v27 - 8;
          if (v28 < 0x78
            || &v9[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] < v25 && &v24[v19 - (v28 & 0xFFFFFFFFFFFFFFF8) - 8] < v9)
          {
            goto LABEL_280;
          }
          uint64_t v29 = (v28 >> 3) + 1;
          uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v31 = &v9[-v30];
          v25 -= v30;
          uint64_t v32 = &v24[8 * v20 - 16];
          uint64_t v33 = v9 - 16;
          uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v36 = *((_OWORD *)v33 - 1);
            long long v35 = *(_OWORD *)v33;
            *((_OWORD *)v33 - 1) = 0uLL;
            *(_OWORD *)uint64_t v33 = 0uLL;
            *((_OWORD *)v32 - 1) = v36;
            *(_OWORD *)uint64_t v32 = v35;
            v32 -= 32;
            v33 -= 32;
            v34 -= 4;
          }
          while (v34);
          uint64_t v9 = v31;
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_280:
            do
            {
              uint64_t v37 = *((void *)v9 - 1);
              v9 -= 8;
              *(void *)uint64_t v9 = 0;
              *((void *)v25 - 1) = v37;
              v25 -= 8;
            }
            while (v9 != v18);
          }
          uint64_t v9 = (char *)__p[0];
          uint64_t v38 = (char *)__p[1];
          __p[0] = v25;
          __p[1] = v10;
          *(void *)&long long v257 = v26;
          while (v38 != v9)
          {
            uint64_t v40 = *((void *)v38 - 1);
            v38 -= 8;
            uint64_t v39 = v40;
            *(void *)uint64_t v38 = 0;
            if (v40) {
              (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
            }
          }
          goto LABEL_45;
        }
      }
      __p[0] = v25;
      __p[1] = v10;
      *(void *)&long long v257 = v26;
LABEL_45:
      if (v9) {
        operator delete(v9);
      }
LABEL_47:
      __p[1] = v10;
      long long v41 = operator new(0x68uLL);
      mlir::PatternBenefit::PatternBenefit(&v253, 1);
      mlir::Pattern::Pattern((uint64_t)(v41 + 1), (uint64_t)"mps.while", 9, (__int16)v253, v5, 0, 0);
      v41[12] = 0;
      *long long v41 = &unk_1EC9C7C18;
      if (v41[9])
      {
        unint64_t v42 = *((unsigned int *)v41 + 22);
        if (v42 <= *((_DWORD *)v41 + 23)) {
          goto LABEL_49;
        }
      }
      else
      {
        v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertWhileOp<mlir::m"
               "ps::serialization::WhileOp, mlir::scf::WhileOp>]";
        unint64_t v254 = 153;
        unint64_t v46 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
        if (v254 >= v46) {
          unint64_t v47 = v46;
        }
        else {
          unint64_t v47 = v254;
        }
        uint64_t v48 = &v253[v47];
        unint64_t v49 = v254 - v47;
        if (v254 - v47 >= 0x12) {
          uint64_t v50 = 18;
        }
        else {
          uint64_t v50 = v254 - v47;
        }
        __int16 v51 = &v48[v50];
        unint64_t v52 = v49 - v50;
        if (v52 >= v52 - 1) {
          --v52;
        }
        v41[8] = v51;
        v41[9] = v52;
        unint64_t v42 = *((unsigned int *)v41 + 22);
        if (v42 <= *((_DWORD *)v41 + 23))
        {
LABEL_49:
          *((_DWORD *)v41 + 22) = v42;
          char v44 = (char *)__p[1];
          uint64_t v43 = v257;
          if (__p[1] < (void *)v257)
          {
LABEL_50:
            *(void *)char v44 = v41;
            uint64_t v45 = v44 + 8;
            goto LABEL_85;
          }
LABEL_61:
          long long v53 = (char *)__p[0];
          int64_t v54 = v44 - (char *)__p[0];
          uint64_t v55 = (v44 - (char *)__p[0]) >> 3;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61) {
            goto LABEL_276;
          }
          uint64_t v57 = v43 - (unint64_t)__p[0];
          if (v57 >> 2 > v56) {
            unint64_t v56 = v57 >> 2;
          }
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v56;
          }
          if (v58)
          {
            if (v58 >> 61) {
              goto LABEL_277;
            }
            unsigned int v59 = (char *)operator new(8 * v58);
            unsigned int v60 = &v59[8 * v55];
            uint64_t v61 = &v59[8 * v58];
            *(void *)unsigned int v60 = v41;
            uint64_t v45 = v60 + 8;
            int64_t v62 = v44 - v53;
            if (v44 != v53) {
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v59 = 0;
            unsigned int v60 = (char *)(8 * v55);
            uint64_t v61 = 0;
            *(void *)(8 * v55) = v41;
            uint64_t v45 = (void *)(8 * v55 + 8);
            int64_t v62 = v44 - v53;
            if (v44 != v53)
            {
LABEL_70:
              unint64_t v63 = v62 - 8;
              if (v63 < 0x78
                || &v44[-(v63 & 0xFFFFFFFFFFFFFFF8) - 8] < v60 && &v59[v54 - (v63 & 0xFFFFFFFFFFFFFFF8) - 8] < v44)
              {
                goto LABEL_281;
              }
              uint64_t v64 = (v63 >> 3) + 1;
              uint64_t v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
              char v66 = &v44[-v65];
              v60 -= v65;
              unint64_t v67 = &v59[8 * v55 - 16];
              unint64_t v68 = v44 - 16;
              uint64_t v69 = v64 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v71 = *((_OWORD *)v68 - 1);
                long long v70 = *(_OWORD *)v68;
                *((_OWORD *)v68 - 1) = 0uLL;
                *(_OWORD *)unint64_t v68 = 0uLL;
                *((_OWORD *)v67 - 1) = v71;
                *(_OWORD *)unint64_t v67 = v70;
                v67 -= 32;
                v68 -= 32;
                v69 -= 4;
              }
              while (v69);
              char v44 = v66;
              if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_281:
                do
                {
                  uint64_t v72 = *((void *)v44 - 1);
                  v44 -= 8;
                  *(void *)char v44 = 0;
                  *((void *)v60 - 1) = v72;
                  v60 -= 8;
                }
                while (v44 != v53);
              }
              char v44 = (char *)__p[0];
              int64_t v73 = (char *)__p[1];
              __p[0] = v60;
              __p[1] = v45;
              *(void *)&long long v257 = v61;
              while (v73 != v44)
              {
                uint64_t v75 = *((void *)v73 - 1);
                v73 -= 8;
                uint64_t v74 = v75;
                *(void *)int64_t v73 = 0;
                if (v75) {
                  (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
                }
              }
              goto LABEL_83;
            }
          }
          __p[0] = v60;
          __p[1] = v45;
          *(void *)&long long v257 = v61;
LABEL_83:
          if (v44) {
            operator delete(v44);
          }
LABEL_85:
          __p[1] = v45;
          unint64_t v76 = operator new(0x68uLL);
          mlir::PatternBenefit::PatternBenefit(&v253, 1);
          mlir::Pattern::Pattern((uint64_t)(v76 + 1), (uint64_t)"mps.if", 6, (__int16)v253, v5, 0, 0);
          v76[12] = 0;
          *unint64_t v76 = &unk_1EC9C7760;
          if (v76[9])
          {
            unint64_t v77 = *((unsigned int *)v76 + 22);
            if (v77 <= *((_DWORD *)v76 + 23)) {
              goto LABEL_87;
            }
          }
          else
          {
            v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertIfOp<mlir::"
                   "mps::serialization::IfOp, mlir::scf::IfOp>]";
            unint64_t v254 = 144;
            unint64_t v81 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
            if (v254 >= v81) {
              unint64_t v82 = v81;
            }
            else {
              unint64_t v82 = v254;
            }
            int64_t v83 = &v253[v82];
            unint64_t v84 = v254 - v82;
            if (v254 - v82 >= 0x12) {
              uint64_t v85 = 18;
            }
            else {
              uint64_t v85 = v254 - v82;
            }
            int64_t v86 = &v83[v85];
            unint64_t v87 = v84 - v85;
            if (v87 >= v87 - 1) {
              --v87;
            }
            v76[8] = v86;
            v76[9] = v87;
            unint64_t v77 = *((unsigned int *)v76 + 22);
            if (v77 <= *((_DWORD *)v76 + 23))
            {
LABEL_87:
              *((_DWORD *)v76 + 22) = v77;
              BOOL v79 = (char *)__p[1];
              uint64_t v78 = v257;
              if (__p[1] < (void *)v257)
              {
LABEL_88:
                *(void *)BOOL v79 = v76;
                unint64_t v80 = v79 + 8;
                goto LABEL_123;
              }
LABEL_99:
              uint64_t v88 = (char *)__p[0];
              int64_t v89 = v79 - (char *)__p[0];
              uint64_t v90 = (v79 - (char *)__p[0]) >> 3;
              unint64_t v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 61) {
                goto LABEL_276;
              }
              uint64_t v92 = v78 - (unint64_t)__p[0];
              if (v92 >> 2 > v91) {
                unint64_t v91 = v92 >> 2;
              }
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v93 = v91;
              }
              if (v93)
              {
                if (v93 >> 61) {
                  goto LABEL_277;
                }
                unint64_t v94 = (char *)operator new(8 * v93);
                uint64_t v95 = &v94[8 * v90];
                BOOL v96 = &v94[8 * v93];
                *(void *)uint64_t v95 = v76;
                unint64_t v80 = v95 + 8;
                int64_t v97 = v79 - v88;
                if (v79 != v88) {
                  goto LABEL_108;
                }
              }
              else
              {
                unint64_t v94 = 0;
                uint64_t v95 = (char *)(8 * v90);
                BOOL v96 = 0;
                *(void *)(8 * v90) = v76;
                unint64_t v80 = (void *)(8 * v90 + 8);
                int64_t v97 = v79 - v88;
                if (v79 != v88)
                {
LABEL_108:
                  unint64_t v98 = v97 - 8;
                  if (v98 < 0x78
                    || &v79[-(v98 & 0xFFFFFFFFFFFFFFF8) - 8] < v95
                    && &v94[v89 - (v98 & 0xFFFFFFFFFFFFFFF8) - 8] < v79)
                  {
                    goto LABEL_282;
                  }
                  uint64_t v99 = (v98 >> 3) + 1;
                  uint64_t v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                  int64_t v101 = &v79[-v100];
                  v95 -= v100;
                  int64_t v102 = &v94[8 * v90 - 16];
                  int64_t v103 = v79 - 16;
                  uint64_t v104 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v106 = *((_OWORD *)v103 - 1);
                    long long v105 = *(_OWORD *)v103;
                    *((_OWORD *)v103 - 1) = 0uLL;
                    *(_OWORD *)int64_t v103 = 0uLL;
                    *((_OWORD *)v102 - 1) = v106;
                    *(_OWORD *)int64_t v102 = v105;
                    v102 -= 32;
                    v103 -= 32;
                    v104 -= 4;
                  }
                  while (v104);
                  BOOL v79 = v101;
                  if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_282:
                    do
                    {
                      uint64_t v107 = *((void *)v79 - 1);
                      v79 -= 8;
                      *(void *)BOOL v79 = 0;
                      *((void *)v95 - 1) = v107;
                      v95 -= 8;
                    }
                    while (v79 != v88);
                  }
                  BOOL v79 = (char *)__p[0];
                  v108 = (char *)__p[1];
                  __p[0] = v95;
                  __p[1] = v80;
                  *(void *)&long long v257 = v96;
                  while (v108 != v79)
                  {
                    uint64_t v110 = *((void *)v108 - 1);
                    v108 -= 8;
                    uint64_t v109 = v110;
                    *(void *)v108 = 0;
                    if (v110) {
                      (*(void (**)(uint64_t))(*(void *)v109 + 8))(v109);
                    }
                  }
                  goto LABEL_121;
                }
              }
              __p[0] = v95;
              __p[1] = v80;
              *(void *)&long long v257 = v96;
LABEL_121:
              if (v79) {
                operator delete(v79);
              }
LABEL_123:
              __p[1] = v80;
              uint64_t v111 = operator new(0x68uLL);
              mlir::PatternBenefit::PatternBenefit(&v253, 1);
              mlir::Pattern::Pattern((uint64_t)(v111 + 1), (uint64_t)"mps.condition", 13, (__int16)v253, v5, 0, 0);
              v111[12] = 0;
              *uint64_t v111 = &unk_1EC9C8630;
              if (v111[9])
              {
                unint64_t v112 = *((unsigned int *)v111 + 22);
                if (v112 <= *((_DWORD *)v111 + 23)) {
                  goto LABEL_125;
                }
              }
              else
              {
                v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertConditi"
                       "onOp<mlir::mps::serialization::ConditionOp, mlir::scf::ConditionOp>]";
                unint64_t v254 = 165;
                unint64_t v116 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                if (v254 >= v116) {
                  unint64_t v117 = v116;
                }
                else {
                  unint64_t v117 = v254;
                }
                v118 = &v253[v117];
                unint64_t v119 = v254 - v117;
                if (v254 - v117 >= 0x12) {
                  uint64_t v120 = 18;
                }
                else {
                  uint64_t v120 = v254 - v117;
                }
                uint64_t v121 = &v118[v120];
                unint64_t v122 = v119 - v120;
                if (v122 >= v122 - 1) {
                  --v122;
                }
                v111[8] = v121;
                v111[9] = v122;
                unint64_t v112 = *((unsigned int *)v111 + 22);
                if (v112 <= *((_DWORD *)v111 + 23))
                {
LABEL_125:
                  *((_DWORD *)v111 + 22) = v112;
                  unsigned int v114 = (char *)__p[1];
                  uint64_t v113 = v257;
                  if (__p[1] < (void *)v257)
                  {
LABEL_126:
                    *(void *)unsigned int v114 = v111;
                    v115 = v114 + 8;
                    goto LABEL_161;
                  }
LABEL_137:
                  v123 = (char *)__p[0];
                  int64_t v124 = v114 - (char *)__p[0];
                  uint64_t v125 = (v114 - (char *)__p[0]) >> 3;
                  unint64_t v126 = v125 + 1;
                  if ((unint64_t)(v125 + 1) >> 61) {
                    goto LABEL_276;
                  }
                  uint64_t v127 = v113 - (unint64_t)__p[0];
                  if (v127 >> 2 > v126) {
                    unint64_t v126 = v127 >> 2;
                  }
                  if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v128 = v126;
                  }
                  if (v128)
                  {
                    if (v128 >> 61) {
                      goto LABEL_277;
                    }
                    v129 = (char *)operator new(8 * v128);
                    v130 = &v129[8 * v125];
                    v131 = &v129[8 * v128];
                    *(void *)v130 = v111;
                    v115 = v130 + 8;
                    int64_t v132 = v114 - v123;
                    if (v114 != v123) {
                      goto LABEL_146;
                    }
                  }
                  else
                  {
                    v129 = 0;
                    v130 = (char *)(8 * v125);
                    v131 = 0;
                    *(void *)(8 * v125) = v111;
                    v115 = (void *)(8 * v125 + 8);
                    int64_t v132 = v114 - v123;
                    if (v114 != v123)
                    {
LABEL_146:
                      unint64_t v133 = v132 - 8;
                      if (v133 < 0x78
                        || &v114[-(v133 & 0xFFFFFFFFFFFFFFF8) - 8] < v130
                        && &v129[v124 - (v133 & 0xFFFFFFFFFFFFFFF8) - 8] < v114)
                      {
                        goto LABEL_283;
                      }
                      uint64_t v134 = (v133 >> 3) + 1;
                      uint64_t v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
                      v136 = &v114[-v135];
                      v130 -= v135;
                      v137 = &v129[8 * v125 - 16];
                      v138 = v114 - 16;
                      uint64_t v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v141 = *((_OWORD *)v138 - 1);
                        long long v140 = *(_OWORD *)v138;
                        *((_OWORD *)v138 - 1) = 0uLL;
                        *(_OWORD *)v138 = 0uLL;
                        *((_OWORD *)v137 - 1) = v141;
                        *(_OWORD *)v137 = v140;
                        v137 -= 32;
                        v138 -= 32;
                        v139 -= 4;
                      }
                      while (v139);
                      unsigned int v114 = v136;
                      if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_283:
                        do
                        {
                          uint64_t v142 = *((void *)v114 - 1);
                          v114 -= 8;
                          *(void *)unsigned int v114 = 0;
                          *((void *)v130 - 1) = v142;
                          v130 -= 8;
                        }
                        while (v114 != v123);
                      }
                      unsigned int v114 = (char *)__p[0];
                      v143 = (char *)__p[1];
                      __p[0] = v130;
                      __p[1] = v115;
                      *(void *)&long long v257 = v131;
                      while (v143 != v114)
                      {
                        uint64_t v145 = *((void *)v143 - 1);
                        v143 -= 8;
                        uint64_t v144 = v145;
                        *(void *)v143 = 0;
                        if (v145) {
                          (*(void (**)(uint64_t))(*(void *)v144 + 8))(v144);
                        }
                      }
                      goto LABEL_159;
                    }
                  }
                  __p[0] = v130;
                  __p[1] = v115;
                  *(void *)&long long v257 = v131;
LABEL_159:
                  if (v114) {
                    operator delete(v114);
                  }
LABEL_161:
                  __p[1] = v115;
                  v146 = operator new(0x68uLL);
                  mlir::PatternBenefit::PatternBenefit(&v253, 1);
                  mlir::Pattern::Pattern((uint64_t)(v146 + 1), (uint64_t)"mps.yield", 9, (__int16)v253, v5, 0, 0);
                  v146[12] = 0;
                  void *v146 = &unk_1EC9C7CE8;
                  if (v146[9])
                  {
                    unint64_t v147 = *((unsigned int *)v146 + 22);
                    if (v147 <= *((_DWORD *)v146 + 23)) {
                      goto LABEL_163;
                    }
                  }
                  else
                  {
                    v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertYie"
                           "ldOp<mlir::mps::serialization::YieldOp, mlir::scf::YieldOp>]";
                    unint64_t v254 = 153;
                    unint64_t v151 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                    if (v254 >= v151) {
                      unint64_t v152 = v151;
                    }
                    else {
                      unint64_t v152 = v254;
                    }
                    v153 = &v253[v152];
                    unint64_t v154 = v254 - v152;
                    if (v254 - v152 >= 0x12) {
                      uint64_t v155 = 18;
                    }
                    else {
                      uint64_t v155 = v254 - v152;
                    }
                    v156 = &v153[v155];
                    unint64_t v157 = v154 - v155;
                    if (v157 >= v157 - 1) {
                      --v157;
                    }
                    v146[8] = v156;
                    v146[9] = v157;
                    unint64_t v147 = *((unsigned int *)v146 + 22);
                    if (v147 <= *((_DWORD *)v146 + 23))
                    {
LABEL_163:
                      *((_DWORD *)v146 + 22) = v147;
                      v149 = (char *)__p[1];
                      uint64_t v148 = v257;
                      if (__p[1] < (void *)v257)
                      {
LABEL_164:
                        *(void *)v149 = v146;
                        v150 = v149 + 8;
                        goto LABEL_199;
                      }
LABEL_175:
                      v158 = (char *)__p[0];
                      int64_t v159 = v149 - (char *)__p[0];
                      uint64_t v160 = (v149 - (char *)__p[0]) >> 3;
                      unint64_t v161 = v160 + 1;
                      if ((unint64_t)(v160 + 1) >> 61) {
                        goto LABEL_276;
                      }
                      uint64_t v162 = v148 - (unint64_t)__p[0];
                      if (v162 >> 2 > v161) {
                        unint64_t v161 = v162 >> 2;
                      }
                      if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v163 = v161;
                      }
                      if (v163)
                      {
                        if (v163 >> 61) {
                          goto LABEL_277;
                        }
                        v164 = (char *)operator new(8 * v163);
                        v165 = &v164[8 * v160];
                        v166 = &v164[8 * v163];
                        *(void *)v165 = v146;
                        v150 = v165 + 8;
                        int64_t v167 = v149 - v158;
                        if (v149 != v158) {
                          goto LABEL_184;
                        }
                      }
                      else
                      {
                        v164 = 0;
                        v165 = (char *)(8 * v160);
                        v166 = 0;
                        *(void *)(8 * v160) = v146;
                        v150 = (void *)(8 * v160 + 8);
                        int64_t v167 = v149 - v158;
                        if (v149 != v158)
                        {
LABEL_184:
                          unint64_t v168 = v167 - 8;
                          if (v168 < 0x78
                            || &v149[-(v168 & 0xFFFFFFFFFFFFFFF8) - 8] < v165
                            && &v164[v159 - (v168 & 0xFFFFFFFFFFFFFFF8) - 8] < v149)
                          {
                            goto LABEL_284;
                          }
                          uint64_t v169 = (v168 >> 3) + 1;
                          uint64_t v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
                          v171 = &v149[-v170];
                          v165 -= v170;
                          v172 = &v164[8 * v160 - 16];
                          v173 = v149 - 16;
                          uint64_t v174 = v169 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            long long v176 = *((_OWORD *)v173 - 1);
                            long long v175 = *(_OWORD *)v173;
                            *((_OWORD *)v173 - 1) = 0uLL;
                            *(_OWORD *)v173 = 0uLL;
                            *((_OWORD *)v172 - 1) = v176;
                            *(_OWORD *)v172 = v175;
                            v172 -= 32;
                            v173 -= 32;
                            v174 -= 4;
                          }
                          while (v174);
                          v149 = v171;
                          if (v169 != (v169 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_284:
                            do
                            {
                              uint64_t v177 = *((void *)v149 - 1);
                              v149 -= 8;
                              *(void *)v149 = 0;
                              *((void *)v165 - 1) = v177;
                              v165 -= 8;
                            }
                            while (v149 != v158);
                          }
                          v149 = (char *)__p[0];
                          v178 = (char *)__p[1];
                          __p[0] = v165;
                          __p[1] = v150;
                          *(void *)&long long v257 = v166;
                          while (v178 != v149)
                          {
                            uint64_t v180 = *((void *)v178 - 1);
                            v178 -= 8;
                            uint64_t v179 = v180;
                            *(void *)v178 = 0;
                            if (v180) {
                              (*(void (**)(uint64_t))(*(void *)v179 + 8))(v179);
                            }
                          }
                          goto LABEL_197;
                        }
                      }
                      __p[0] = v165;
                      __p[1] = v150;
                      *(void *)&long long v257 = v166;
LABEL_197:
                      if (v149) {
                        operator delete(v149);
                      }
LABEL_199:
                      __p[1] = v150;
                      v181 = operator new(0x68uLL);
                      mlir::PatternBenefit::PatternBenefit(&v253, 1);
                      mlir::Pattern::Pattern((uint64_t)(v181 + 1), (uint64_t)"mps.from_elements", 17, (__int16)v253, v5, 0, 0);
                      v181[12] = 0;
                      void *v181 = &unk_1EC9C8FB0;
                      if (v181[9])
                      {
                        unint64_t v182 = *((unsigned int *)v181 + 22);
                        if (v182 <= *((_DWORD *)v181 + 23)) {
                          goto LABEL_201;
                        }
                      }
                      else
                      {
                        v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::Conver"
                               "tFromElementsOp<mlir::mps::serialization::FromElementsOp, mlir::tensor::FromElementsOp>]";
                        unint64_t v254 = 177;
                        unint64_t v186 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                        if (v254 >= v186) {
                          unint64_t v187 = v186;
                        }
                        else {
                          unint64_t v187 = v254;
                        }
                        v188 = &v253[v187];
                        unint64_t v189 = v254 - v187;
                        if (v254 - v187 >= 0x12) {
                          uint64_t v190 = 18;
                        }
                        else {
                          uint64_t v190 = v254 - v187;
                        }
                        v191 = &v188[v190];
                        unint64_t v192 = v189 - v190;
                        if (v192 >= v192 - 1) {
                          --v192;
                        }
                        v181[8] = v191;
                        v181[9] = v192;
                        unint64_t v182 = *((unsigned int *)v181 + 22);
                        if (v182 <= *((_DWORD *)v181 + 23))
                        {
LABEL_201:
                          *((_DWORD *)v181 + 22) = v182;
                          v184 = (char *)__p[1];
                          uint64_t v183 = v257;
                          if (__p[1] < (void *)v257)
                          {
LABEL_202:
                            *(void *)v184 = v181;
                            v185 = v184 + 8;
                            goto LABEL_237;
                          }
LABEL_213:
                          v193 = (char *)__p[0];
                          int64_t v194 = v184 - (char *)__p[0];
                          uint64_t v195 = (v184 - (char *)__p[0]) >> 3;
                          unint64_t v196 = v195 + 1;
                          if ((unint64_t)(v195 + 1) >> 61) {
                            goto LABEL_276;
                          }
                          uint64_t v197 = v183 - (unint64_t)__p[0];
                          if (v197 >> 2 > v196) {
                            unint64_t v196 = v197 >> 2;
                          }
                          if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v198 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v198 = v196;
                          }
                          if (v198)
                          {
                            if (v198 >> 61) {
                              goto LABEL_277;
                            }
                            v199 = (char *)operator new(8 * v198);
                            v200 = &v199[8 * v195];
                            v201 = &v199[8 * v198];
                            *(void *)v200 = v181;
                            v185 = v200 + 8;
                            int64_t v202 = v184 - v193;
                            if (v184 != v193) {
                              goto LABEL_222;
                            }
                          }
                          else
                          {
                            v199 = 0;
                            v200 = (char *)(8 * v195);
                            v201 = 0;
                            *(void *)(8 * v195) = v181;
                            v185 = (void *)(8 * v195 + 8);
                            int64_t v202 = v184 - v193;
                            if (v184 != v193)
                            {
LABEL_222:
                              unint64_t v203 = v202 - 8;
                              if (v203 < 0x78
                                || &v184[-(v203 & 0xFFFFFFFFFFFFFFF8) - 8] < v200
                                && &v199[v194 - (v203 & 0xFFFFFFFFFFFFFFF8) - 8] < v184)
                              {
                                goto LABEL_285;
                              }
                              uint64_t v204 = (v203 >> 3) + 1;
                              uint64_t v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
                              v206 = &v184[-v205];
                              v200 -= v205;
                              v207 = &v199[8 * v195 - 16];
                              v208 = v184 - 16;
                              uint64_t v209 = v204 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                long long v211 = *((_OWORD *)v208 - 1);
                                long long v210 = *(_OWORD *)v208;
                                *((_OWORD *)v208 - 1) = 0uLL;
                                *(_OWORD *)v208 = 0uLL;
                                *((_OWORD *)v207 - 1) = v211;
                                *(_OWORD *)v207 = v210;
                                v207 -= 32;
                                v208 -= 32;
                                v209 -= 4;
                              }
                              while (v209);
                              v184 = v206;
                              if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_285:
                                do
                                {
                                  uint64_t v212 = *((void *)v184 - 1);
                                  v184 -= 8;
                                  *(void *)v184 = 0;
                                  *((void *)v200 - 1) = v212;
                                  v200 -= 8;
                                }
                                while (v184 != v193);
                              }
                              v184 = (char *)__p[0];
                              v213 = (char *)__p[1];
                              __p[0] = v200;
                              __p[1] = v185;
                              *(void *)&long long v257 = v201;
                              while (v213 != v184)
                              {
                                uint64_t v215 = *((void *)v213 - 1);
                                v213 -= 8;
                                uint64_t v214 = v215;
                                *(void *)v213 = 0;
                                if (v215) {
                                  (*(void (**)(uint64_t))(*(void *)v214 + 8))(v214);
                                }
                              }
                              goto LABEL_235;
                            }
                          }
                          __p[0] = v200;
                          __p[1] = v185;
                          *(void *)&long long v257 = v201;
LABEL_235:
                          if (v184) {
                            operator delete(v184);
                          }
LABEL_237:
                          __p[1] = v185;
                          v216 = operator new(0x68uLL);
                          mlir::PatternBenefit::PatternBenefit(&v253, 1);
                          mlir::Pattern::Pattern((uint64_t)(v216 + 1), (uint64_t)"mps.extract", 11, (__int16)v253, v5, 0, 0);
                          v216[12] = 0;
                          void *v216 = &unk_1EC9C8110;
                          if (v216[9])
                          {
                            unint64_t v217 = *((unsigned int *)v216 + 22);
                            if (v217 <= *((_DWORD *)v216 + 23)) {
                              goto LABEL_239;
                            }
                          }
                          else
                          {
                            v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::Co"
                                   "nvertExtractOp<mlir::mps::serialization::ExtractOp, mlir::tensor::ExtractOp>]";
                            unint64_t v254 = 162;
                            unint64_t v221 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                            if (v254 >= v221) {
                              unint64_t v222 = v221;
                            }
                            else {
                              unint64_t v222 = v254;
                            }
                            v223 = &v253[v222];
                            unint64_t v224 = v254 - v222;
                            if (v254 - v222 >= 0x12) {
                              uint64_t v225 = 18;
                            }
                            else {
                              uint64_t v225 = v254 - v222;
                            }
                            v226 = &v223[v225];
                            unint64_t v227 = v224 - v225;
                            if (v227 >= v227 - 1) {
                              --v227;
                            }
                            v216[8] = v226;
                            v216[9] = v227;
                            unint64_t v217 = *((unsigned int *)v216 + 22);
                            if (v217 <= *((_DWORD *)v216 + 23))
                            {
LABEL_239:
                              *((_DWORD *)v216 + 22) = v217;
                              v219 = (char *)__p[1];
                              uint64_t v218 = v257;
                              if (__p[1] < (void *)v257)
                              {
LABEL_240:
                                *(void *)v219 = v216;
                                v220 = v219 + 8;
                                goto LABEL_275;
                              }
LABEL_251:
                              v228 = (char *)__p[0];
                              int64_t v229 = v219 - (char *)__p[0];
                              uint64_t v230 = (v219 - (char *)__p[0]) >> 3;
                              unint64_t v231 = v230 + 1;
                              if (!((unint64_t)(v230 + 1) >> 61))
                              {
                                uint64_t v232 = v218 - (unint64_t)__p[0];
                                if (v232 >> 2 > v231) {
                                  unint64_t v231 = v232 >> 2;
                                }
                                if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v233 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v233 = v231;
                                }
                                if (!v233)
                                {
                                  v234 = 0;
                                  v235 = (char *)(8 * v230);
                                  v236 = 0;
                                  *(void *)(8 * v230) = v216;
                                  v220 = (void *)(8 * v230 + 8);
                                  int64_t v237 = v219 - v228;
                                  if (v219 != v228) {
                                    goto LABEL_260;
                                  }
                                  goto LABEL_272;
                                }
                                if (!(v233 >> 61))
                                {
                                  v234 = (char *)operator new(8 * v233);
                                  v235 = &v234[8 * v230];
                                  v236 = &v234[8 * v233];
                                  *(void *)v235 = v216;
                                  v220 = v235 + 8;
                                  int64_t v237 = v219 - v228;
                                  if (v219 != v228)
                                  {
LABEL_260:
                                    unint64_t v238 = v237 - 8;
                                    if (v238 < 0x78
                                      || &v219[-(v238 & 0xFFFFFFFFFFFFFFF8) - 8] < v235
                                      && &v234[v229 - (v238 & 0xFFFFFFFFFFFFFFF8) - 8] < v219)
                                    {
                                      goto LABEL_286;
                                    }
                                    uint64_t v239 = (v238 >> 3) + 1;
                                    uint64_t v240 = 8 * (v239 & 0x3FFFFFFFFFFFFFFCLL);
                                    v241 = &v219[-v240];
                                    v235 -= v240;
                                    v242 = &v234[8 * v230 - 16];
                                    v243 = v219 - 16;
                                    uint64_t v244 = v239 & 0x3FFFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      long long v246 = *((_OWORD *)v243 - 1);
                                      long long v245 = *(_OWORD *)v243;
                                      *((_OWORD *)v243 - 1) = 0uLL;
                                      *(_OWORD *)v243 = 0uLL;
                                      *((_OWORD *)v242 - 1) = v246;
                                      *(_OWORD *)v242 = v245;
                                      v242 -= 32;
                                      v243 -= 32;
                                      v244 -= 4;
                                    }
                                    while (v244);
                                    v219 = v241;
                                    if (v239 != (v239 & 0x3FFFFFFFFFFFFFFCLL))
                                    {
LABEL_286:
                                      do
                                      {
                                        uint64_t v247 = *((void *)v219 - 1);
                                        v219 -= 8;
                                        *(void *)v219 = 0;
                                        *((void *)v235 - 1) = v247;
                                        v235 -= 8;
                                      }
                                      while (v219 != v228);
                                    }
                                    v219 = (char *)__p[0];
                                    v248 = (char *)__p[1];
                                    __p[0] = v235;
                                    __p[1] = v220;
                                    *(void *)&long long v257 = v236;
                                    while (v248 != v219)
                                    {
                                      uint64_t v250 = *((void *)v248 - 1);
                                      v248 -= 8;
                                      uint64_t v249 = v250;
                                      *(void *)v248 = 0;
                                      if (v250) {
                                        (*(void (**)(uint64_t))(*(void *)v249 + 8))(v249);
                                      }
                                    }
                                    goto LABEL_273;
                                  }
LABEL_272:
                                  __p[0] = v235;
                                  __p[1] = v220;
                                  *(void *)&long long v257 = v236;
LABEL_273:
                                  if (v219) {
                                    operator delete(v219);
                                  }
LABEL_275:
                                  __p[1] = v220;
                                  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(&v253, &v255, 0, 0, 0, 0);
                                  mlir::applyFullConversion(v2, (mlir::Operation *)v268, (const mlir::ConversionTarget *)&v253, v251);
                                }
LABEL_277:
                                std::__throw_bad_array_new_length[abi:nn180100]();
                              }
LABEL_276:
                              abort();
                            }
                          }
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v216 + 10), v216 + 12, v217, 16);
                          *((_DWORD *)v216 + 22) = *((_DWORD *)v216 + 22);
                          v219 = (char *)__p[1];
                          uint64_t v218 = v257;
                          if (__p[1] < (void *)v257) {
                            goto LABEL_240;
                          }
                          goto LABEL_251;
                        }
                      }
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v181 + 10), v181 + 12, v182, 16);
                      *((_DWORD *)v181 + 22) = *((_DWORD *)v181 + 22);
                      v184 = (char *)__p[1];
                      uint64_t v183 = v257;
                      if (__p[1] < (void *)v257) {
                        goto LABEL_202;
                      }
                      goto LABEL_213;
                    }
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v146 + 10), v146 + 12, v147, 16);
                  *((_DWORD *)v146 + 22) = *((_DWORD *)v146 + 22);
                  v149 = (char *)__p[1];
                  uint64_t v148 = v257;
                  if (__p[1] < (void *)v257) {
                    goto LABEL_164;
                  }
                  goto LABEL_175;
                }
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v111 + 10), v111 + 12, v112, 16);
              *((_DWORD *)v111 + 22) = *((_DWORD *)v111 + 22);
              unsigned int v114 = (char *)__p[1];
              uint64_t v113 = v257;
              if (__p[1] < (void *)v257) {
                goto LABEL_126;
              }
              goto LABEL_137;
            }
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v76 + 10), v76 + 12, v77, 16);
          *((_DWORD *)v76 + 22) = *((_DWORD *)v76 + 22);
          BOOL v79 = (char *)__p[1];
          uint64_t v78 = v257;
          if (__p[1] < (void *)v257) {
            goto LABEL_88;
          }
          goto LABEL_99;
        }
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v41 + 10), v41 + 12, v42, 16);
      *((_DWORD *)v41 + 22) = *((_DWORD *)v41 + 22);
      char v44 = (char *)__p[1];
      uint64_t v43 = v257;
      if (__p[1] < (void *)v257) {
        goto LABEL_50;
      }
      goto LABEL_61;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v6 + 10), v6 + 12, v7, 16);
  *((_DWORD *)v6 + 22) = *((_DWORD *)v6 + 22);
  uint64_t v9 = (char *)__p[1];
  uint64_t v8 = v257;
  if (__p[1] < (void *)v257) {
    goto LABEL_12;
  }
  goto LABEL_23;
}

double mlir::PassWrapper<mlir::mps::MPSDeserializationPass,mlir::OperationPass<mlir::mps::serialization::ModuleOp>>::clonePass@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v4 = operator new(0x158uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  double result = 0.0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)size_t v4 = &unk_1EC9CA8B8;
  *a2 = v4;
  return result;
}

mlir::StringAttr ****_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_3mps22MPSDeserializationPass14runOnOperationEvEUlNSB_13serialization6FuncOpEE_SE_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_(mlir::StringAttr ****result, mlir::GenericProgramPoint *a2)
{
  if (a2)
  {
    if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::FuncOp,void>::id) {
      return (mlir::StringAttr ****)mlir::mps::MPSDeserializationPass::runOnOperation(void)::{lambda(mlir::mps::serialization::FuncOp)#1}::operator()(*result, a2);
    }
  }
  return result;
}

mlir::GenericProgramPoint *mlir::mps::MPSDeserializationPass::runOnOperation(void)::{lambda(mlir::mps::serialization::FuncOp)#1}::operator()(mlir::StringAttr ***a1, mlir::GenericProgramPoint *this)
{
  uint64_t v32 = this;
  size_t v4 = *a1;
  uint64_t v5 = (uint64_t)(*a1 + 2);
  long long v26 = *(_OWORD *)v5;
  uint64_t v6 = *((void *)this + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  *(void *)uint64_t v5 = v6;
  void v4[3] = v7;
  uint64_t v8 = *a1;
  uint64_t v9 = *((void *)this + 3);
  if (*((unsigned char *)this + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"sym_name", 8);
    if (v11)
    {
      if (InherentAttr) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v12 = 0;
      goto LABEL_9;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)this + 56, "sym_name", 8uLL);
  if (!InherentAttr) {
    goto LABEL_8;
  }
LABEL_4:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
    uint64_t v12 = InherentAttr;
  }
  else {
    uint64_t v12 = 0;
  }
LABEL_9:
  uint64_t v29 = (mlir::StringAttr **)v12;
  *(void *)&long long v30 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v29);
  *((void *)&v30 + 1) = v13;
  v27[1] = 0;
  uint64_t FunctionType = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v32);
  v27[0] = 0;
  unint64_t v14 = mlir::OpBuilder::create<mlir::func::FuncOp,llvm::StringRef,mlir::FunctionType,llvm::ArrayRef<mlir::NamedAttribute>>(v8, v9, (uint64_t *)&v30, &FunctionType, (uint64_t)v27);
  uint64_t v31 = v14;
  v27[0] = mlir::Operation::getAttrDictionary(v14);
  *(void *)&long long v30 = mlir::Operation::getAttrDictionary(v32);
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30);
  if (v16)
  {
    unint64_t v17 = (long long *)Value;
    uint64_t v18 = 16 * v16;
    do
    {
      long long v30 = *v17;
      uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v30);
      if ((mlir::DictionaryAttr::contains((uint64_t)v27, CallableRegion) & 1) == 0)
      {
        uint64_t v20 = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v30);
        mlir::Operation::setAttr((uint64_t)v14, v20, *((uint64_t *)&v30 + 1));
      }
      ++v17;
      v18 -= 16;
    }
    while (v18);
  }
  mlir::detail::FunctionOpInterfaceTrait<mlir::func::FuncOp>::addEntryBlock((mlir::func::FuncOp *)&v31);
  unint64_t v21 = *((unsigned int *)v31 + 11);
  if ((v21 & 0x7FFFFF) != 0)
  {
    uint64_t v22 = (void *)((((unint64_t)v31 + 16 * ((v21 >> 23) & 1) + ((v21 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)v31 + 10));
    if ((void *)*v22 != v22)
    {
LABEL_16:
      Body = (mlir::Region *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v31);
      goto LABEL_19;
    }
  }
  else if (MEMORY[0])
  {
    goto LABEL_16;
  }
  Body = 0;
LABEL_19:
  unint64_t v24 = (mlir::Region *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v32);
  mlir::Region::takeBody(Body, v24);
  mlir::Operation::erase(v32);
  uint64_t v29 = *a1;
  *(void *)&long long v30 = &v29;
  double result = mlir::detail::walk<mlir::ForwardIterator>(v31, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_3mps22MPSDeserializationPass14runOnOperationEvENKUlNSB_13serialization6FuncOpEE_clESE_EUlNSD_8ReturnOpEE_SG_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESP_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v30, 1);
  if (v4)
  {
    if ((void)v26)
    {
      *(_OWORD *)uint64_t v5 = v26;
    }
    else
    {
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::func::FuncOp,llvm::StringRef,mlir::FunctionType,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v22[38] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"func.func", (const unsigned __int8 *)9, Context);
  if (!v12)
  {
    __int16 v21 = 1283;
    v20[2] = (uint64_t)"func.func";
    v20[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v11);
  mlir::func::FuncOp::build(a1, (uint64_t)v22, *a3, a3[1], *a4, *(const void **)a5, *(void *)(a5 + 8), v13, 0, 0);
  unint64_t v14 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v15;
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_3mps22MPSDeserializationPass14runOnOperationEvENKUlNSB_13serialization6FuncOpEE_clESE_EUlNSD_8ReturnOpEE_SG_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESP_E4typeES3_OT1_EUlS3_E_EEvlS3_(mlir::OpBuilder ***a1, mlir::GenericProgramPoint *a2)
{
  if (a2)
  {
    if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ReturnOp,void>::id) {
      mlir::mps::MPSDeserializationPass::runOnOperation(void)::{lambda(mlir::mps::serialization::FuncOp)#1}::operator() const(mlir::mps::serialization::FuncOp)::{lambda(mlir::mps::serialization::ReturnOp)#1}::operator()(*a1, a2);
    }
  }
}

void mlir::mps::MPSDeserializationPass::runOnOperation(void)::{lambda(mlir::mps::serialization::FuncOp)#1}::operator() const(mlir::mps::serialization::FuncOp)::{lambda(mlir::mps::serialization::ReturnOp)#1}::operator()(mlir::OpBuilder **a1, mlir::GenericProgramPoint *this)
{
  v28[6] = *MEMORY[0x1E4F143B8];
  uint64_t v25 = this;
  size_t v4 = *a1;
  uint64_t v5 = *((void *)this + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  *((void *)v4 + 2) = v5;
  *((void *)v4 + 3) = v6;
  unint64_t v7 = *a1;
  uint64_t v8 = *((void *)this + 3);
  uint64_t Inputs = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&v25);
  unint64_t v11 = v9;
  long long v26 = v28;
  uint64_t v27 = 0x600000000;
  if (v9 < 7)
  {
    if (!v9)
    {
      int v24 = 0;
      goto LABEL_16;
    }
    char v12 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v9, 8);
    char v12 = (char *)v26 + 8 * v27;
    if (v11 >= 0xD
      && ((unint64_t)v12 >= Inputs + 32 * v11
       || Inputs + 24 >= (unint64_t)v26 + 8 * v11 + 8 * v27))
    {
      uint64_t v14 = v11 & 3;
      if ((v11 & 3) == 0) {
        uint64_t v14 = 4;
      }
      unint64_t v13 = v11 - v14;
      v12 += v13;
      uint64_t v15 = (const double *)(Inputs + 88);
      uint64_t v16 = (unsigned long long *)((char *)v26 + 8 * v27 + 16);
      unint64_t v17 = v13;
      do
      {
        uint64_t v18 = v15 - 8;
        unsigned long long v19 = (unsigned __int128)vld4q_f64(v18);
        unsigned long long v20 = (unsigned __int128)vld4q_f64(v15);
        *(v16 - 1) = v19;
        unsigned long long *v16 = v20;
        v15 += 16;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      goto LABEL_13;
    }
  }
  unint64_t v13 = 0;
LABEL_13:
  unint64_t v21 = v11 - v13;
  uint64_t v22 = (uint64_t *)(Inputs + 32 * v13 + 24);
  do
  {
    uint64_t v23 = *v22;
    v22 += 4;
    *v12++ = v23;
    --v21;
  }
  while (v21);
  int v24 = v27;
LABEL_16:
  LODWORD(v27) = v24 + v11;
  mlir::OpBuilder::create<mlir::func::ReturnOp,llvm::SmallVector<mlir::Value,2u> &>(v7, v8, (uint64_t)&v26);
  if (v26 != v28) {
    free(v26);
  }
  mlir::Operation::erase(v25);
}

_DWORD *mlir::ConversionTarget::addIllegalOp<mlir::mps::serialization::ConditionOp,mlir::mps::serialization::YieldOp,mlir::mps::serialization::ExtractOp,mlir::mps::serialization::FromElementsOp>(uint64_t a1)
{
  mlir::OperationName::OperationName(&v3, "mps.condition", 13, *(void *)(a1 + 152));
  mlir::ConversionTarget::setOpAction(a1, v3, 2);
  mlir::OperationName::OperationName(&v3, "mps.yield", 9, *(void *)(a1 + 152));
  mlir::ConversionTarget::setOpAction(a1, v3, 2);
  mlir::OperationName::OperationName(&v3, "mps.extract", 11, *(void *)(a1 + 152));
  mlir::ConversionTarget::setOpAction(a1, v3, 2);
  mlir::OperationName::OperationName(&v3, "mps.from_elements", 17, *(void *)(a1 + 152));
  return mlir::ConversionTarget::setOpAction(a1, v3, 2);
}

void *mlir::mps::anonymous namespace'::ConvertForOp<mlir::mps::serialization::ForOp,mlir::scf::ForOp>::~ConvertForOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertForOp<mlir::mps::serialization::ForOp,mlir::scf::ForOp>::~ConvertForOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ForOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ForOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::ForOpGenericAdaptorBase::ForOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ForOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::ForOpGenericAdaptorBase::ForOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertForOp<mlir::mps::serialization::ForOp,mlir::scf::ForOp>::matchAndRewrite(int a1, uint64_t a2, mlir::scf::detail::ForOpGenericAdaptorBase *this, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v27 = (unsigned int *)a2;
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 12));
  unint64_t v8 = *((void *)this + 5);
  unint64_t v29 = v8;
  uint64_t v30 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v8 = mlir::ValueRange::offset_base(&v29, ODSOperandIndexAndLength);
  }
  unint64_t v29 = v8;
  uint64_t v30 = 0;
  uint64_t v25 = mlir::ValueRange::dereference_iterator(&v29, 0);
  unsigned int v9 = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 12));
  unint64_t v10 = *((void *)this + 5);
  unint64_t v29 = v10;
  uint64_t v30 = v9;
  if (v9) {
    unint64_t v10 = mlir::ValueRange::offset_base(&v29, v9);
  }
  unint64_t v29 = v10;
  uint64_t v30 = 0;
  uint64_t v24 = mlir::ValueRange::dereference_iterator(&v29, 0);
  unsigned int v11 = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 2u, *((_DWORD *)this + 12));
  unint64_t v12 = *((void *)this + 5);
  unint64_t v29 = v12;
  uint64_t v30 = v11;
  if (v11) {
    unint64_t v12 = mlir::ValueRange::offset_base(&v29, v11);
  }
  unint64_t v29 = v12;
  uint64_t v30 = 0;
  uint64_t v23 = mlir::ValueRange::dereference_iterator(&v29, 0);
  uint64_t v13 = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 3u, *((_DWORD *)this + 12));
  unint64_t v14 = *((void *)this + 5);
  unint64_t v29 = v14;
  uint64_t v30 = v13;
  if (v13)
  {
    unint64_t v14 = mlir::ValueRange::offset_base(&v29, v13);
    uint64_t v15 = v30;
  }
  else
  {
    uint64_t v15 = 0;
  }
  unint64_t v29 = v14;
  uint64_t v30 = (HIDWORD(v13) + v13) - v15;
  long long v26 = mlir::OpBuilder::create<mlir::scf::ForOp,mlir::Value,mlir::Value,mlir::Value,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), v6, &v25, &v24, &v23, (uint64_t *)&v29);
  Body = (mlir::mps::_anonymous_namespace_ *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v27);
  unint64_t v17 = (mlir::Region **)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v26);
  unsigned long long v19 = v27;
  uint64_t Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v26);
  mlir::ValueRange::ValueRange(v28, Results, v21);
  mlir::ConversionPatternRewriter::replaceOp(a4, v19, v28[0], v28[1]);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::ForOp,mlir::Value,mlir::Value,mlir::Value,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v25[38] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.for", (const unsigned __int8 *)7, Context);
  if (!v14)
  {
    __int16 v24 = 1283;
    uint64_t v23[2] = (uint64_t)"scf.for";
    v23[3] = 7;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v13);
  mlir::scf::ForOp::build((uint64_t)a1, (uint64_t)v25, *a3, *a4, *a5, *a6, a6[1], v15, 0, v19);
  uint64_t v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ForOp,void>::id) {
    unint64_t v17 = v16;
  }
  else {
    unint64_t v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v17;
}

void *mlir::mps::anonymous namespace'::ConvertWhileOp<mlir::mps::serialization::WhileOp,mlir::scf::WhileOp>::~ConvertWhileOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertWhileOp<mlir::mps::serialization::WhileOp,mlir::scf::WhileOp>::~ConvertWhileOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::WhileOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::WhileOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::WhileOpGenericAdaptorBase::WhileOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::WhileOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::WhileOpGenericAdaptorBase::WhileOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertWhileOp<mlir::mps::serialization::WhileOp,mlir::scf::WhileOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, mlir::Region *a4)
{
  v33[2] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = (unsigned int *)a2;
  uint64_t v6 = (mlir::Region *)((char *)a4 + 8);
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v8 = *(unsigned int *)(a2 + 36);
  if (v8) {
    uint64_t v9 = a2 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v30 = v32;
  uint64_t v31 = 0x600000000;
  if (v8 < 7)
  {
    if (!v8)
    {
      int v14 = 0;
      uint64_t v15 = v32;
      goto LABEL_11;
    }
    uint64_t v10 = 0;
    unsigned int v11 = v32;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v8, 8);
    uint64_t v10 = v31;
    unsigned int v11 = v30;
  }
  uint64_t v12 = 0;
  unint64_t v13 = &v11[8 * v10];
  do
  {
    *(void *)&v13[8 * v12] = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v12) + 8) & 0xFFFFFFFFFFFFFFF8;
    ++v12;
  }
  while (v8 != v12);
  int v14 = v31;
  uint64_t v15 = v30;
LABEL_11:
  LODWORD(v31) = v14 + v8;
  mlir::ValueRange::ValueRange((unint64_t *)v33, (uint64_t)v15, (v14 + v8));
  *(_OWORD *)unint64_t v29 = *(_OWORD *)(a3 + 40);
  long long v26 = mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::TypeRange,mlir::ValueRange>(v6, v7, v33, v29);
  if (v30 != v32) {
    free(v30);
  }
  Body = (mlir::mps::_anonymous_namespace_ *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v27);
  unint64_t v17 = (mlir::Region **)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v26);
  uint64_t v19 = (mlir::mps::_anonymous_namespace_ *)mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v27);
  uint64_t v20 = (mlir::Region **)mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v26);
  __int16 v22 = v27;
  uint64_t Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v26);
  mlir::ValueRange::ValueRange(v28, Results, v24);
  mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, v22, v28[0], v28[1]);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::TypeRange,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.while", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"scf.while";
    void v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::scf::WhileOp::build((uint64_t)a1, (uint64_t)v19, *a3, a3[1], *a4, a4[1], 0, 0);
  unsigned int v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void *mlir::mps::anonymous namespace'::ConvertIfOp<mlir::mps::serialization::IfOp,mlir::scf::IfOp>::~ConvertIfOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertIfOp<mlir::mps::serialization::IfOp,mlir::scf::IfOp>::~ConvertIfOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::IfOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::IfOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::IfOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertIfOp<mlir::mps::serialization::IfOp,mlir::scf::IfOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::scf::detail::IfOpGenericAdaptorBase *a3, mlir::Region *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v29 = (unsigned int *)a2;
  uint64_t v6 = (mlir::Region *)((char *)a4 + 8);
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v8 = *(unsigned int *)(a2 + 36);
  if (v8) {
    uint64_t v9 = a2 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v31 = v33;
  uint64_t v32 = 0x600000000;
  if (v8 < 7)
  {
    if (!v8)
    {
      int v14 = 0;
      uint64_t v15 = v33;
      goto LABEL_11;
    }
    uint64_t v10 = 0;
    unsigned int v11 = v33;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v8, 8);
    uint64_t v10 = v32;
    unsigned int v11 = v31;
  }
  uint64_t v12 = 0;
  unint64_t v13 = &v11[8 * v10];
  do
  {
    *(void *)&v13[8 * v12] = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v12) + 8) & 0xFFFFFFFFFFFFFFF8;
    ++v12;
  }
  while (v8 != v12);
  int v14 = v32;
  uint64_t v15 = v31;
LABEL_11:
  LODWORD(v32) = v14 + v8;
  mlir::ValueRange::ValueRange((unint64_t *)v34, (uint64_t)v15, (v14 + v8));
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength(a3, 0);
  unint64_t v17 = *((void *)a3 + 5);
  long long v35 = (mlir::GenericProgramPoint *)v17;
  uint64_t v36 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v17 = mlir::ValueRange::offset_base(&v35, ODSOperandIndexAndLength);
  }
  long long v35 = (mlir::GenericProgramPoint *)v17;
  uint64_t v36 = 0;
  uint64_t v28 = mlir::ValueRange::dereference_iterator(&v35, 0);
  long long v35 = mlir::OpBuilder::create<mlir::scf::IfOp,mlir::TypeRange,mlir::Value>(v6, v7, v34, &v28);
  if (v31 != v33) {
    free(v31);
  }
  Body = (mlir::mps::_anonymous_namespace_ *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
  uint64_t v19 = (mlir::Region **)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v35);
  unint64_t v21 = (mlir::mps::_anonymous_namespace_ *)mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v29);
  __int16 v22 = (mlir::Region **)mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v35);
  unint64_t v24 = v29;
  uint64_t Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v35);
  mlir::ValueRange::ValueRange(v30, Results, v26);
  mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, v24, v30[0], v30[1]);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::IfOp,mlir::TypeRange,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.if", (const unsigned __int8 *)6, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"scf.if";
    void v17[3] = 6;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::scf::IfOp::build(a1, (unsigned int *)v19, *a3, a3[1], *a4);
  unsigned int v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::IfOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void *mlir::mps::anonymous namespace'::ConvertConditionOp<mlir::mps::serialization::ConditionOp,mlir::scf::ConditionOp>::~ConvertConditionOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertConditionOp<mlir::mps::serialization::ConditionOp,mlir::scf::ConditionOp>::~ConvertConditionOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ConditionOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ConditionOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ConditionOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertConditionOp<mlir::mps::serialization::ConditionOp,mlir::scf::ConditionOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *(unsigned int *)(a2 + 36);
  if (v7) {
    uint64_t v8 = a2 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v23 = v25;
  uint64_t v24 = 0x600000000;
  if (v7 < 7)
  {
    if (!v7)
    {
      int v13 = 0;
      unint64_t v14 = v25;
      goto LABEL_11;
    }
    uint64_t v9 = 0;
    char v10 = v25;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v7, 8);
    uint64_t v9 = v24;
    char v10 = v23;
  }
  uint64_t v11 = 0;
  uint64_t v12 = &v10[8 * v9];
  do
  {
    *(void *)&v12[8 * v11] = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v11) + 8) & 0xFFFFFFFFFFFFFFF8;
    ++v11;
  }
  while (v7 != v11);
  int v13 = v24;
  unint64_t v14 = v23;
LABEL_11:
  LODWORD(v24) = v13 + v7;
  mlir::ValueRange::ValueRange((unint64_t *)v26, (uint64_t)v14, (v13 + v7));
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 0, *(_DWORD *)(a3 + 48));
  unint64_t v16 = *(void *)(a3 + 40);
  unint64_t v27 = v16;
  uint64_t v28 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v16 = mlir::ValueRange::offset_base(&v27, ODSOperandIndexAndLength);
  }
  unint64_t v27 = v16;
  uint64_t v28 = 0;
  uint64_t v22 = mlir::ValueRange::dereference_iterator(&v27, 0);
  uint64_t v17 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 1u, *(_DWORD *)(a3 + 48));
  unint64_t v18 = *(void *)(a3 + 40);
  unint64_t v27 = v18;
  uint64_t v28 = v17;
  if (v17)
  {
    unint64_t v18 = mlir::ValueRange::offset_base(&v27, v17);
    uint64_t v19 = v28;
  }
  else
  {
    uint64_t v19 = 0;
  }
  unint64_t v27 = v18;
  uint64_t v28 = (HIDWORD(v17) + v17) - v19;
  uint64_t v20 = mlir::OpBuilder::create<mlir::scf::ConditionOp,mlir::TypeRange,mlir::Value,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(void *)(a2 + 24), v26, &v22, (uint64_t *)&v27);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, a2, v20);
  if (v23 != v25) {
    free(v23);
  }
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::ConditionOp,mlir::TypeRange,mlir::Value,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.condition", (const unsigned __int8 *)0xD, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"scf.condition";
    v19[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::scf::ConditionOp::build((uint64_t)a1, (uint64_t)v21, *a3, a3[1], *a4, *a5, a5[1]);
  int v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ConditionOp,void>::id) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void *mlir::mps::anonymous namespace'::ConvertYieldOp<mlir::mps::serialization::YieldOp,mlir::scf::YieldOp>::~ConvertYieldOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertYieldOp<mlir::mps::serialization::YieldOp,mlir::scf::YieldOp>::~ConvertYieldOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::YieldOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::YieldOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::YieldOpGenericAdaptorBase::YieldOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::YieldOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::YieldOpGenericAdaptorBase::YieldOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertYieldOp<mlir::mps::serialization::YieldOp,mlir::scf::YieldOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *(unsigned int *)(a2 + 36);
  if (v7) {
    uint64_t v8 = a2 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  __int16 v20 = v22;
  uint64_t v21 = 0x600000000;
  if (v7 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v7, 8);
    uint64_t v9 = v21;
    char v10 = v20;
    goto LABEL_8;
  }
  if (v7)
  {
    uint64_t v9 = 0;
    char v10 = v22;
LABEL_8:
    uint64_t v11 = 0;
    char v12 = &v10[8 * v9];
    do
    {
      *(void *)&v12[8 * v11] = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v11) + 8) & 0xFFFFFFFFFFFFFFF8;
      ++v11;
    }
    while (v7 != v11);
    int v13 = v21;
    unint64_t v14 = v20;
    goto LABEL_11;
  }
  int v13 = 0;
  unint64_t v14 = v22;
LABEL_11:
  LODWORD(v21) = v13 + v7;
  mlir::ValueRange::ValueRange((unint64_t *)v23, (uint64_t)v14, (v13 + v7));
  unint64_t ODSOperandIndexAndLength = mlir::scf::detail::YieldOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::YieldOpGenericAdaptorBase *)a3, 0, *(unsigned int *)(a3 + 48));
  unint64_t v16 = *(void *)(a3 + 40);
  unint64_t v24 = v16;
  uint64_t v25 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
  {
    unint64_t v16 = mlir::ValueRange::offset_base(&v24, ODSOperandIndexAndLength);
    uint64_t v17 = v25;
  }
  else
  {
    uint64_t v17 = 0;
  }
  unint64_t v24 = v16;
  uint64_t v25 = (HIDWORD(ODSOperandIndexAndLength) + ODSOperandIndexAndLength) - v17;
  __int16 v18 = mlir::OpBuilder::create<mlir::scf::YieldOp,mlir::TypeRange,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(void *)(a2 + 24), v23, (uint64_t *)&v24);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, a2, v18);
  if (v20 != v22) {
    free(v20);
  }
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::YieldOp,mlir::TypeRange,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.yield", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"scf.yield";
    void v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v19, *a3, a3[1], *a4, a4[1], 0, 0);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void *mlir::mps::anonymous namespace'::ConvertFromElementsOp<mlir::mps::serialization::FromElementsOp,mlir::tensor::FromElementsOp>::~ConvertFromElementsOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertFromElementsOp<mlir::mps::serialization::FromElementsOp,mlir::tensor::FromElementsOp>::~ConvertFromElementsOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::FromElementsOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::FromElementsOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::FromElementsOpGenericAdaptorBase::FromElementsOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::FromElementsOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::FromElementsOpGenericAdaptorBase::FromElementsOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertFromElementsOp<mlir::mps::serialization::FromElementsOp,mlir::tensor::FromElementsOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a2;
  unint64_t v9 = *(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v10) + 8) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)(a3 + 40);
  unint64_t v7 = mlir::OpBuilder::create<mlir::tensor::FromElementsOp,mlir::RankedTensorType,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(void *)(a2 + 24), (uint64_t *)&v9, v11);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, a2, v7);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::FromElementsOp,mlir::RankedTensorType,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.from_elements", (const unsigned __int8 *)0x14, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"tensor.from_elements";
    void v17[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::pdl_interp::CreateRangeOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4, a4[1]);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::FromElementsOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void *mlir::mps::anonymous namespace'::ConvertExtractOp<mlir::mps::serialization::ExtractOp,mlir::tensor::ExtractOp>::~ConvertExtractOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConvertExtractOp<mlir::mps::serialization::ExtractOp,mlir::tensor::ExtractOp>::~ConvertExtractOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ExtractOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ExtractOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::ExtractOpGenericAdaptorBase::ExtractOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ExtractOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  unint64_t v8 = v11[0];
  unint64_t v9 = v11[1];
  mlir::mps::serialization::detail::ExtractOpGenericAdaptorBase::ExtractOpGenericAdaptorBase((uint64_t)v12, a2);
  unint64_t v13 = v8;
  unint64_t v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::anonymous namespace'::ConvertExtractOp<mlir::mps::serialization::ExtractOp,mlir::tensor::ExtractOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  unint64_t v15 = *(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v16) + 8) & 0xFFFFFFFFFFFFFFF8;
  unsigned int ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 0, *(_DWORD *)(a3 + 48));
  unint64_t v8 = *(void *)(a3 + 40);
  unint64_t v17 = v8;
  uint64_t v18 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength) {
    unint64_t v8 = mlir::ValueRange::offset_base(&v17, ODSOperandIndexAndLength);
  }
  unint64_t v17 = v8;
  uint64_t v18 = 0;
  uint64_t v14 = mlir::ValueRange::dereference_iterator(&v17, 0);
  uint64_t v9 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 1u, *(_DWORD *)(a3 + 48));
  unint64_t v10 = *(void *)(a3 + 40);
  unint64_t v17 = v10;
  uint64_t v18 = v9;
  if (v9)
  {
    unint64_t v10 = mlir::ValueRange::offset_base(&v17, v9);
    uint64_t v11 = v18;
  }
  else
  {
    uint64_t v11 = 0;
  }
  unint64_t v17 = v10;
  uint64_t v18 = (HIDWORD(v9) + v9) - v11;
  uint64_t v12 = mlir::OpBuilder::create<mlir::tensor::ExtractOp,mlir::Type,mlir::Value,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(void *)(a2 + 24), (uint64_t *)&v15, &v14, (uint64_t *)&v17);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a4 + 32))(a4, a2, v12);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::ExtractOp,mlir::Type,mlir::Value,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.extract", (const unsigned __int8 *)0xE, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"tensor.extract";
    v19[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::tensor::ExtractOp::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5, a5[1]);
  unint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractOp,void>::id) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

mlir::mps::MPSResourceBlobManagerInterface *mlir::mps::MPSResourceBlobManagerInterface::MPSResourceBlobManagerInterface(mlir::mps::MPSResourceBlobManagerInterface *this, mlir::Dialect *a2)
{
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v15 = a2;
    unint64_t v3 = 0x1E8EB8000;
    a2 = v15;
    if (v7)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSResourceBlobManagerInterface]";
      unint64_t v17 = 92;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      unint64_t v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::mps::MPSResourceBlobManagerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = 0x1E8EB8000;
      a2 = v15;
    }
  }
  uint64_t v4 = *(void *)(v3 + 2824);
  *((void *)this + 1) = a2;
  *((void *)this + 2) = v4;
  *(void *)this = &unk_1EC9CAA60;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0x7000000000;
  llvm::sys::RWMutexImpl::RWMutexImpl((mlir::mps::MPSResourceBlobManagerInterface *)((char *)this + 48));
  *((void *)this + 7) = 0;
  uint64_t v5 = operator new(8uLL);
  *uint64_t v5 = &unk_1EC9C97F0;
  *((void *)this + 8) = v5;
  return this;
}

void mlir::mps::MPSResourceBlobManagerInterface::~MPSResourceBlobManagerInterface(mlir::mps::MPSResourceBlobManagerInterface *this)
{
  *(void *)this = &unk_1EC9CAA60;
  uint64_t v2 = (void *)((char *)this + 24);
  if (*((_DWORD *)this + 9))
  {
    uint64_t v3 = *((unsigned int *)this + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = *(llvm **)(*v2 + v4);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::StringMapEntry<mlir::mps::MPSResourceBlobEntry>::Destroy<llvm::MallocAllocator>(v5);
        }
        *(void *)(*v2 + v4) = 0;
        v4 += 8;
      }
      while (8 * v3 != v4);
    }
    *((_DWORD *)this + 9) = 0;
    *((_DWORD *)this + 10) = 0;
  }
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v8 = *((void *)this + 8);
    *((void *)this + 8) = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  llvm::sys::RWMutexImpl::~RWMutexImpl((pthread_rwlock_t **)this + 6);
  if (*((_DWORD *)this + 9))
  {
    uint64_t v9 = *((unsigned int *)this + 8);
    if (v9)
    {
      uint64_t v10 = 0;
      do
      {
        unint64_t v11 = *(llvm **)(*v2 + v10);
        if (v11 != (llvm *)-8 && v11 != 0) {
          llvm::StringMapEntry<mlir::mps::MPSResourceBlobEntry>::Destroy<llvm::MallocAllocator>(v11);
        }
        v10 += 8;
      }
      while (8 * v9 != v10);
    }
  }
  free(*((void **)this + 3));

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
}

{
  void *v1;
  uint64_t vars8;

  mlir::mps::MPSResourceBlobManagerInterface::~MPSResourceBlobManagerInterface(this);

  operator delete(v1);
}

uint64_t mlir::mps::MPSResourceBlobManagerInterface::getManager(mlir::mps::MPSResourceBlobManagerInterface *this, mlir::MLIRContext *a2)
{
  uint64_t LoadedDialect = mlir::MLIRContext::getLoadedDialect((uint64_t *)this, (uint64_t)"mps", 3);

  return mlir::Dialect::getRegisteredInterface<mlir::mps::MPSResourceBlobManagerInterface>(LoadedDialect);
}

uint64_t mlir::Dialect::getRegisteredInterface<mlir::mps::MPSResourceBlobManagerInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSResourceBlobManagerInterface]";
      unint64_t v22 = 92;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      unint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::mps::MPSResourceBlobManagerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 2824);
    LODWORD(v5) = ((v4 >> 4) ^ (v4 >> 9)) & (v3 - 1);
    uint64_t v6 = (uint64_t *)(v2 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == v4) {
      goto LABEL_9;
    }
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v3 - 1);
      uint64_t v7 = *(void *)(v2 + 16 * v5);
      if (v7 == v4)
      {
        uint64_t v6 = (uint64_t *)(v2 + 16 * v5);
        goto LABEL_9;
      }
    }
  }
  uint64_t v6 = (uint64_t *)(v2 + 16 * v3);
LABEL_9:
  if (v6 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return v6[1];
  }
}

uint64_t mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob@<X0>(mlir::mps::MPSResourceBlobManagerInterface *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((void *)this + 8);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  *(void *)(a4 + 48) = (char *)llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallbacksHolder<mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob(unsigned long,unsigned long)::$_0,mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob(unsigned long,unsigned long)::$_0,void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallbacksHolder<mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob(unsigned long,unsigned long)::$_0,mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob(unsigned long,unsigned long)::$_0,void>::Callbacks
     + 2 >= 8)
    *(void *)(a4 + 24) = v7;
  *(unsigned char *)(a4 + 56) = 1;
  return result;
}

uint64_t mlir::mps::MPSResourceBlobManagerInterface::lookup(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = (pthread_rwlock_t **)(a1 + 48);
  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(a1 + 48));
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 24), a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 32)) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8 * Key) + 8;
  }
  llvm::sys::RWMutexImpl::unlock_shared(v6);
  return v8;
}

BOOL mlir::mps::MPSResourceBlobManagerInterface::contains(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6 = (pthread_rwlock_t **)(a1 + 48);
  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(a1 + 48));
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 24), a2, a3);
  if (Key == -1)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = Key;
    uint64_t v9 = *(unsigned int *)(a1 + 32);
  }
  BOOL v10 = v8 != v9;
  llvm::sys::RWMutexImpl::unlock_shared(v6);
  return v10;
}

uint64_t *mlir::mps::MPSResourceBlobManagerInterface::defineEntryValue(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, long long *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (pthread_rwlock_t **)(a1 + 48);
  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(a1 + 48));
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 24), a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 32)) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 8 * Key) + 8;
  }
  llvm::sys::RWMutexImpl::unlock_shared(v8);
  long long v21 = *a4;
  unint64_t v11 = *((void *)a4 + 6);
  uint64_t v22 = *((void *)a4 + 2);
  unint64_t v25 = v11;
  if (v11 >= 8)
  {
    int v12 = (long long *)((char *)a4 + 24);
    if ((v11 & 2) != 0 && (v11 & 4) != 0)
    {
      (*(void (**)(long long *, long long *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(&v23, v12);
    }
    else
    {
      long long v23 = *v12;
      unint64_t v24 = *((void *)a4 + 5);
    }
    *((void *)a4 + 6) = 0;
  }
  char v13 = *((unsigned char *)a4 + 56);
  char v26 = v13;
  uint64_t result = (uint64_t *)(v10 + 16);
  if (*(unsigned char *)(v10 + 80))
  {
    uint64_t result = mlir::AsmResourceBlob::operator=(result, (uint64_t)&v21);
    if (v25 >= 8)
    {
      unint64_t v15 = (v25 & 2) != 0 ? &v23 : (long long *)v23;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(long long *, void, void, uint64_t))(v25 & 0xFFFFFFFFFFFFFFF8))(v15, v21, *((void *)&v21 + 1), v22);
      char v16 = v25;
      if (v25 >= 8)
      {
        if ((v25 & 4) != 0)
        {
          if ((v25 & 2) != 0) {
            uint64_t v17 = &v23;
          }
          else {
            uint64_t v17 = (long long *)v23;
          }
          uint64_t result = (uint64_t *)(*(uint64_t (**)(long long *))((v25 & 0xFFFFFFFFFFFFFFF8) + 16))(v17);
        }
        if ((v16 & 2) == 0) {
          llvm::deallocate_buffer((llvm *)v23, *((void **)&v23 + 1));
        }
      }
    }
  }
  else
  {
    uint64_t v18 = v22;
    *(_OWORD *)uint64_t result = v21;
    *(void *)(v10 + 32) = v18;
    unint64_t v19 = v25;
    *(void *)(v10 + 64) = v25;
    if (v19 >= 8)
    {
      uint64_t result = (uint64_t *)(v10 + 40);
      if ((v19 & 2) != 0 && (v19 & 4) != 0)
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, long long *))((v19 & 0xFFFFFFFFFFFFFFF8) + 8))(result, &v23);
        char v13 = v26;
      }
      else
      {
        unint64_t v20 = v24;
        *(_OWORD *)uint64_t result = v23;
        *(void *)(v10 + 56) = v20;
      }
    }
    *(unsigned char *)(v10 + 72) = v13;
    *(unsigned char *)(v10 + 80) = 1;
  }
  *(unsigned char *)(v10 + 96) = 1;
  return result;
}

BOOL mlir::mps::MPSResourceBlobManagerInterface::insert@<W0>(uint64_t a1@<X0>, int8x16_t *a2@<X1>, const unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  v47[4] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (pthread_rwlock_t **)(a1 + 48);
  llvm::sys::RWMutexImpl::lock((pthread_rwlock_t **)(a1 + 48));
  v44[0] = a1;
  v44[1] = a4;
  uint64_t v11 = mlir::mps::MPSResourceBlobManagerInterface::insert(llvm::StringRef,std::optional<mlir::AsmResourceBlob>)::$_0::operator()(v44, a2, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(a1 + 8);
    {
      uint64_t v45 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSDialectResourceBlobHandle]";
      *(void *)&long long v46 = 89;
      unint64_t v24 = llvm::StringRef::find((uint64_t *)&v45, "DesiredTypeName = ", 0x12uLL, 0);
      if ((unint64_t)v46 >= v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = v46;
      }
      char v26 = (char *)v45 + v25;
      uint64_t v27 = v46 - v25;
      if ((unint64_t)(v46 - v25) >= 0x12) {
        uint64_t v28 = 18;
      }
      else {
        uint64_t v28 = v46 - v25;
      }
      unint64_t v29 = v27 - v28;
      if (v29 >= v29 - 1) {
        uint64_t v30 = v29 - 1;
      }
      else {
        uint64_t v30 = v29;
      }
      mlir::detail::TypeIDResolver<mlir::mps::MPSDialectResourceBlobHandle,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v26[v28], v30);
    }
    uint64_t v14 = mlir::detail::TypeIDResolver<mlir::mps::MPSDialectResourceBlobHandle,void>::resolveTypeID(void)::id;
    *a5 = v12;
    a5[1] = v14;
    a5[2] = v13;
    return llvm::sys::RWMutexImpl::unlock_shared(v10);
  }
  uint64_t v45 = v47;
  long long v46 = xmmword_1810FE500;
  if ((unint64_t)a3 >= 0x21)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v45, v47, (unint64_t)a3, 1);
    uint64_t v15 = v46;
LABEL_7:
    memcpy((char *)v45 + v15, a2, (size_t)a3);
    uint64_t v15 = v46;
    goto LABEL_8;
  }
  uint64_t v15 = 0;
  if (a3) {
    goto LABEL_7;
  }
LABEL_8:
  char v16 = &a3[v15];
  *(void *)&long long v46 = v16;
  if ((unint64_t)(v16 + 1) > *((void *)&v46 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v45, v47, (unint64_t)(v16 + 1), 1);
    char v16 = (const unsigned __int8 *)v46;
  }
  v16[(void)v45] = 95;
  *(void *)&long long v46 = v46 + 1;
  unint64_t v17 = (unint64_t)(a3 + 1);
  uint64_t v18 = 1;
  while (1)
  {
    uint64_t v40 = v18;
    long long v41 = (const char *)&v40;
    __int16 v43 = 267;
    llvm::Twine::toVector((uint64_t)&v41, (uint64_t)&v45);
    uint64_t v19 = mlir::mps::MPSResourceBlobManagerInterface::insert(llvm::StringRef,std::optional<mlir::AsmResourceBlob>)::$_0::operator()(v44, (int8x16_t *)v45, (const unsigned __int8 *)v46);
    if (v19) {
      break;
    }
    uint64_t v20 = v46;
    if ((void)v46 == v17)
    {
      ++v18;
    }
    else
    {
      if ((unint64_t)v46 <= v17)
      {
        if (*((void *)&v46 + 1) < v17)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v45, v47, v17, 1);
          uint64_t v20 = v46;
        }
        if (v17 != v20) {
          bzero((char *)v45 + v20, v17 - v20);
        }
      }
      *(void *)&long long v46 = v17;
      ++v18;
    }
  }
  uint64_t v21 = *(void *)(a1 + 8);
  {
    uint64_t v31 = v19;
    uint64_t v19 = v31;
    if (v32)
    {
      long long v41 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSDialectResourceBlobHandle]";
      unint64_t v42 = 89;
      unint64_t v33 = llvm::StringRef::find((uint64_t *)&v41, "DesiredTypeName = ", 0x12uLL, 0);
      if (v42 >= v33) {
        unint64_t v34 = v33;
      }
      else {
        unint64_t v34 = v42;
      }
      long long v35 = &v41[v34];
      unint64_t v36 = v42 - v34;
      if (v42 - v34 >= 0x12) {
        uint64_t v37 = 18;
      }
      else {
        uint64_t v37 = v42 - v34;
      }
      unint64_t v38 = v36 - v37;
      if (v38 >= v38 - 1) {
        uint64_t v39 = v38 - 1;
      }
      else {
        uint64_t v39 = v38;
      }
      mlir::detail::TypeIDResolver<mlir::mps::MPSDialectResourceBlobHandle,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v35[v37], v39);
      uint64_t v19 = v31;
    }
  }
  uint64_t v22 = mlir::detail::TypeIDResolver<mlir::mps::MPSDialectResourceBlobHandle,void>::resolveTypeID(void)::id;
  *a5 = v19;
  a5[1] = v22;
  a5[2] = v21;
  if (v45 != v47) {
    free(v45);
  }
  return llvm::sys::RWMutexImpl::unlock_shared(v10);
}

uint64_t mlir::mps::MPSResourceBlobManagerInterface::insert(llvm::StringRef,std::optional<mlir::AsmResourceBlob>)::$_0::operator()(void *a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1 + 24;
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  *(_OWORD *)unint64_t v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v5 = llvm::StringMap<mlir::mps::MPSResourceBlobEntry,llvm::MallocAllocator>::try_emplace<mlir::mps::MPSResourceBlobEntry>(v4, a2, a3, (uint64_t)&v30);
  char v7 = v6;
  if ((_BYTE)v35 && (unint64_t)v34 >= 8)
  {
    uint64_t v8 = (v34 & 2) != 0 ? (long long *)((char *)&v32 + 8) : (long long *)*((void *)&v32 + 1);
    (*(void (**)(long long *, void, void, void))(v34 & 0xFFFFFFFFFFFFFFF8))(v8, v31, *((void *)&v31 + 1), v32);
    char v9 = v34;
    if ((unint64_t)v34 >= 8)
    {
      if ((v34 & 4) != 0)
      {
        if ((v34 & 2) != 0) {
          uint64_t v10 = (char *)&v32 + 8;
        }
        else {
          uint64_t v10 = (char *)*((void *)&v32 + 1);
        }
        (*(void (**)(char *))((v34 & 0xFFFFFFFFFFFFFFF8) + 16))(v10);
      }
      if ((v9 & 2) == 0) {
        llvm::deallocate_buffer(*((llvm **)&v32 + 1), (void *)v33[0]);
      }
    }
  }
  if (!v7) {
    return 0;
  }
  uint64_t v11 = (void *)*v5;
  uint64_t v12 = *v5 + 112;
  uint64_t v13 = *(void *)*v5;
  uint64_t v14 = (long long *)a1[1];
  LOBYTE(v23) = 0;
  char v29 = 0;
  if (*((unsigned char *)v14 + 64))
  {
    uint64_t v15 = *((void *)v14 + 2);
    long long v23 = *v14;
    unint64_t v16 = *((void *)v14 + 6);
    uint64_t v24 = v15;
    unint64_t v27 = v16;
    if (v16 >= 8)
    {
      unint64_t v17 = (long long *)((char *)v14 + 24);
      if ((v16 & 2) != 0 && (v16 & 4) != 0)
      {
        (*(void (**)(long long *, long long *))((v16 & 0xFFFFFFFFFFFFFFF8) + 8))(&v25, v17);
      }
      else
      {
        long long v18 = *v17;
        unint64_t v26 = *((void *)v14 + 5);
        long long v25 = v18;
      }
      *((void *)v14 + 6) = 0;
    }
    char v28 = *((unsigned char *)v14 + 56);
    char v29 = 1;
  }
  v11[1] = v12;
  unint64_t v11[2] = v13;
  std::__optional_storage_base<mlir::AsmResourceBlob,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<mlir::AsmResourceBlob,false>>(v11 + 3, (uint64_t)&v23);
  *((unsigned char *)v11 + 104) = *((unsigned char *)v11 + 88);
  v11[12] = 0;
  if (v29 && v27 >= 8)
  {
    uint64_t v20 = (v27 & 2) != 0 ? &v25 : (long long *)v25;
    (*(void (**)(long long *, void, void, uint64_t))(v27 & 0xFFFFFFFFFFFFFFF8))(v20, v23, *((void *)&v23 + 1), v24);
    char v21 = v27;
    if (v27 >= 8)
    {
      if ((v27 & 4) != 0)
      {
        if ((v27 & 2) != 0) {
          uint64_t v22 = &v25;
        }
        else {
          uint64_t v22 = (long long *)v25;
        }
        (*(void (**)(long long *))((v27 & 0xFFFFFFFFFFFFFFF8) + 16))(v22);
      }
      if ((v21 & 2) == 0) {
        llvm::deallocate_buffer((llvm *)v25, *((void **)&v25 + 1));
      }
    }
  }
  return *v5 + 8;
}

uint64_t *llvm::StringMap<mlir::mps::MPSResourceBlobEntry,llvm::MallocAllocator>::try_emplace<mlir::mps::MPSResourceBlobEntry>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  char v9 = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 113), (std::align_val_t)8uLL);
    uint64_t v12 = buffer + 112;
    if (!a3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (v10)
  {
    while (!v10 || v10 == -8)
    {
      uint64_t v16 = v9[1];
      ++v9;
      uint64_t v10 = v16;
    }
    return v9;
  }
  buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 113), (std::align_val_t)8uLL);
  uint64_t v12 = buffer + 112;
  if (a3) {
LABEL_4:
  }
    memcpy(v12, a2, (size_t)a3);
LABEL_5:
  a3[(void)v12] = 0;
  *(void *)buffer = a3;
  *(_OWORD *)(buffer + 8) = *(_OWORD *)a4;
  buffer[24] = 0;
  buffer[88] = 0;
  if (*(unsigned char *)(a4 + 80))
  {
    *(_OWORD *)(buffer + 24) = *(_OWORD *)(a4 + 16);
    *((void *)buffer + 5) = *(void *)(a4 + 32);
    unint64_t v13 = *(void *)(a4 + 64);
    *((void *)buffer + 9) = v13;
    if (v13 >= 8)
    {
      uint64_t v14 = buffer + 48;
      uint64_t v15 = (_OWORD *)(a4 + 40);
      if ((v13 & 2) != 0 && (v13 & 4) != 0)
      {
        (*(void (**)(_OWORD *, _OWORD *))((v13 & 0xFFFFFFFFFFFFFFF8) + 8))(v14, v15);
      }
      else
      {
        _OWORD *v14 = *v15;
        *((void *)buffer + 8) = *(void *)(a4 + 56);
      }
      *(void *)(a4 + 64) = 0;
    }
    buffer[80] = *(unsigned char *)(a4 + 72);
    buffer[88] = 1;
  }
  *((void *)buffer + 12) = *(void *)(a4 + 88);
  buffer[104] = *(unsigned char *)(a4 + 96);
  *char v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  char v9 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9) {
    BOOL v17 = *v9 == -8;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    do
    {
      uint64_t v19 = v9[1];
      ++v9;
      uint64_t v18 = v19;
      if (v19) {
        BOOL v20 = v18 == -8;
      }
      else {
        BOOL v20 = 1;
      }
    }
    while (v20);
  }
  return v9;
}

void *mlir::mps::anonymous namespace'::DefaultResourceAllocator::allocateResource(mlir::mps::_anonymous_namespace_::DefaultResourceAllocator *this, size_t __sz, std::align_val_t a3)
{
  return operator new(__sz, a3);
}

void mlir::mps::anonymous namespace'::DefaultResourceAllocator::deallocateResource(mlir::mps::_anonymous_namespace_::DefaultResourceAllocator *this, void *a2)
{
}

void llvm::StringMapEntry<mlir::mps::MPSResourceBlobEntry>::Destroy<llvm::MallocAllocator>(llvm *this)
{
  uint64_t v2 = *(void *)this;
  if (*((unsigned char *)this + 88))
  {
    unint64_t v3 = *((void *)this + 9);
    if (v3 >= 8)
    {
      uint64_t v4 = (char *)this + 48;
      uint64_t v5 = *((void *)this + 3);
      uint64_t v6 = *((void *)this + 4);
      uint64_t v7 = *((void *)this + 5);
      uint64_t v8 = (char *)this + 48;
      if ((v3 & 2) == 0) {
        uint64_t v8 = *(char **)v4;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFF8))(v8, v5, v6, v7);
      unint64_t v9 = *((void *)this + 9);
      if (v9 >= 8)
      {
        if ((v9 & 4) != 0)
        {
          if ((v9 & 2) == 0) {
            uint64_t v4 = *(char **)v4;
          }
          (*(void (**)(char *))((v9 & 0xFFFFFFFFFFFFFFF8) + 16))(v4);
        }
        if ((v9 & 2) == 0) {
          llvm::deallocate_buffer(*((llvm **)this + 6), *((void **)this + 7));
        }
      }
    }
  }

  llvm::deallocate_buffer(this, (void *)(v2 + 113));
}

uint64_t llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallImpl<mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob(unsigned long,unsigned long)::$_0>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 24))();
}

void *mlir::createRawElementsAttr(void *a1, const void *a2, const void *a3)
{
  uint64_t v5 = (uint64_t)a1;
  BOOL v17 = a1;
  if ((unint64_t)a3 <= 0x40
    && (uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v17),
        char isCompatibleWithDenseStorage = mlir::mps::isCompatibleWithDenseStorage(RHS),
        uint64_t v5 = (uint64_t)v17,
        (isCompatibleWithDenseStorage & 1) != 0))
  {
    if (v17)
    {
      uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
      BufferTensorAttr = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v5, v11, a2, a3, v12, v13, v14);
      if (!BufferTensorAttr) {
        return BufferTensorAttr;
      }
    }
    else
    {
      BufferTensorAttr = (void *)mlir::DenseElementsAttr::getFromRawBuffer(0, 0, a2, a3, v8, v9, v10);
      if (!BufferTensorAttr) {
        return BufferTensorAttr;
      }
    }
  }
  else
  {
    BufferTensorAttr = (void *)mlir::mps::getBufferTensorAttr(v5, a2, a3);
    if (!BufferTensorAttr) {
      return BufferTensorAttr;
    }
  }
  mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*BufferTensorAttr + 8);
  return BufferTensorAttr;
}

uint64_t mlir::getElementsAttrRawData(uint64_t a1)
{
  uint64_t result = mlir::DenseElementsAttr::classof(a1);
  if (result) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = v3;
  if (v3) {
    return mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v5);
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4;
  if (v4) {
    return mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)&v5);
  }
  return result;
}

uint64_t mlir::tryCreateMutableElementsAttr(void *a1, __n128 **a2)
{
  if (a1)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8);
    if (mlir::mps::getElementsAttrStorageSize((uint64_t)a1, v4) <= 0x40)
    {
LABEL_3:
      uint64_t result = 0;
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
  }
  else if (mlir::mps::getElementsAttrStorageSize(0, 0) <= 0x40)
  {
    goto LABEL_3;
  }
  BufferTensorAttr = (__n128 *)mlir::mps::getBufferTensorAttr(a1);
  uint64_t v7 = BufferTensorAttr;
  uint64_t v10 = BufferTensorAttr;
  if (BufferTensorAttr) {
    BufferTensorAttr = (__n128 *)mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(BufferTensorAttr->n128_u64[0] + 8);
  }
  *a2 = v7;
  a2[1] = BufferTensorAttr;
  mlir::mps::MPSBufferTensorAttr::getHandle(&v10, &v9);
  if (*(unsigned char *)(v9.n128_u64[0] + 80)) {
    unint64_t v8 = v9.n128_u64[0] + 16;
  }
  else {
    unint64_t v8 = 0;
  }
  return *(void *)v8;
}

uint64_t mlir::convertElementsAttr(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (const void *)a1;
  v23[0] = a1;
  v23[1] = a2;
  if (mlir::DenseElementsAttr::classof(a1)) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v24 = v6;
  if (v6)
  {
    uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v24);
LABEL_11:
    uint64_t v3 = (const void *)RawStringData;
    uint64_t v5 = v8;
    goto LABEL_12;
  }
  if (*(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
    __n128 v9 = v5;
  }
  else {
    __n128 v9 = 0;
  }
  uint64_t v24 = v9;
  if (v9)
  {
    uint64_t RawStringData = mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)&v24);
    goto LABEL_11;
  }
LABEL_12:
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v23);
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(Type);
  int isCompatibleWithDenseStorage = mlir::mps::isCompatibleWithDenseStorage(ElementTypeOrSelf);
  if ((unint64_t)v5 < 0x41) {
    int v13 = 1;
  }
  else {
    int v13 = a3;
  }
  int v14 = v13 & isCompatibleWithDenseStorage;
  if ((v13 & isCompatibleWithDenseStorage) == mlir::DenseElementsAttr::classof(v23[0])) {
    return v23[0];
  }
  if (v14)
  {
    uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v23);
    BufferTensorAttr = (void *)mlir::DenseElementsAttr::getFromRawBuffer(ArgOperands, v16, v3, v5, v17, v18, v19);
    if (!BufferTensorAttr) {
      return (uint64_t)BufferTensorAttr;
    }
  }
  else
  {
    uint64_t v22 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)v23);
    BufferTensorAttr = (void *)mlir::mps::getBufferTensorAttr(v22, v3, v5);
    if (!BufferTensorAttr) {
      return (uint64_t)BufferTensorAttr;
    }
  }
  mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*BufferTensorAttr + 8);
  return (uint64_t)BufferTensorAttr;
}

void *mlir::reshapeElementsAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a3;
  v19[1] = a4;
  if (mlir::DenseElementsAttr::classof(a1)) {
    uint64_t v7 = (__n128 *)a1;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v18 = v7;
  if (v7)
  {
    unint64_t v8 = (void *)mlir::DenseElementsAttr::reshape((uint64_t *)&v18, a3, a4);
    if (v8)
    {
LABEL_6:
      mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v8 + 8);
      return v8;
    }
    return v8;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
    uint64_t v10 = (__n128 *)a1;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v18 = v10;
  if (v10)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v19);
    uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19);
    uint64_t v14 = v13;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v19);
    uint64_t v16 = mlir::RankedTensorType::get(ArgAttrsAttr, v14, OperandRange, 0);
    mlir::mps::MPSBufferTensorAttr::getHandle(&v18, &v17);
    unint64_t v8 = (void *)mlir::mps::MPSBufferTensorAttr::get(Context, v16, (uint64_t)&v17);
    if (v8) {
      goto LABEL_6;
    }
    return v8;
  }
  return (void *)a4;
}

__n128 *mlir::createElementsAttr(void *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v68 = a1;
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v68);
  unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS);
  v64[1] = 0;
  uint64_t RHS = (uint64_t)&v67;
  long long v66 = xmmword_1810FF9E0;
  v64[0] = 0;
  uint64_t MutableElementsAttr = mlir::tryCreateMutableElementsAttr(v68, v64);
  RawElementsAttr = v64[0];
  if (!v64[0])
  {
    uint64_t v11 = v68;
    if (v68)
    {
      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v68 + 8);
      ElementsAttrStorageSize = (char *)mlir::mps::getElementsAttrStorageSize((uint64_t)v11, v12);
      uint64_t v13 = (unsigned char *)v66;
      BOOL v14 = (unint64_t)v66 > (unint64_t)ElementsAttrStorageSize;
      if ((char *)v66 == ElementsAttrStorageSize) {
        goto LABEL_13;
      }
    }
    else
    {
      ElementsAttrStorageSize = (char *)mlir::mps::getElementsAttrStorageSize(0, 0);
      uint64_t v13 = (unsigned char *)v66;
      BOOL v14 = (unint64_t)v66 > (unint64_t)ElementsAttrStorageSize;
      if ((char *)v66 == ElementsAttrStorageSize)
      {
LABEL_13:
        __n128 v9 = (unsigned char *)RHS;
        goto LABEL_14;
      }
    }
    if (!v14)
    {
      if (*((void *)&v66 + 1) < (unint64_t)ElementsAttrStorageSize)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&RHS, &v67, (unint64_t)ElementsAttrStorageSize, 1);
        uint64_t v13 = (unsigned char *)v66;
      }
      if (ElementsAttrStorageSize != v13) {
        bzero(&v13[RHS], ElementsAttrStorageSize - v13);
      }
    }
    *(void *)&long long v66 = ElementsAttrStorageSize;
    goto LABEL_13;
  }
  __n128 v9 = (unsigned char *)MutableElementsAttr;
  ElementsAttrStorageSize = v7;
LABEL_14:
  uint64_t v63 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v68);
  __dst = v9;
  if (mlir::Type::isInteger((mlir::Type *)&v63, 1) && a3 == 1)
  {
    unsigned int v15 = a2[2];
    if (v15 > 0x40) {
      BOOL v16 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) == v15;
    }
    else {
      BOOL v16 = *(void *)a2 == 0;
    }
    char v22 = v16;
    *__n128 v9 = v22 - 1;
    goto LABEL_31;
  }
  uint64_t v63 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v68);
  if (mlir::Type::isInteger((mlir::Type *)&v63, 1))
  {
    if (!ElementsAttrStorageSize) {
      goto LABEL_31;
    }
    __n128 v17 = v9;
    uint64_t v18 = ElementsAttrStorageSize;
    while (1)
    {
      while (1)
      {
        uint64_t v29 = a3 - 8;
        if ((unint64_t)a3 >= 8) {
          a3 = 8;
        }
        if (a3) {
          break;
        }
        *v17++ = 0;
        a3 = v29;
        if (!--v18) {
          goto LABEL_31;
        }
      }
      unsigned int v30 = a2[2];
      if (v30 > 0x40)
      {
        char v28 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != v30;
        if (a3 == 1) {
          goto LABEL_45;
        }
      }
      else
      {
        char v28 = *(void *)a2 != 0;
        if (a3 == 1) {
          goto LABEL_45;
        }
      }
      long long v31 = (llvm::APInt *)(a2 + 4);
      unsigned int v32 = a2[6];
      if (v32 >= 0x41) {
        BOOL v33 = llvm::APInt::countLeadingZerosSlowCase(v31) == v32;
      }
      else {
        BOOL v33 = *(void *)v31 == 0;
      }
      if (v33) {
        char v35 = 0;
      }
      else {
        char v35 = 2;
      }
      v28 |= v35;
      if (a3 != 2)
      {
        uint64_t v36 = (llvm::APInt *)(a2 + 8);
        unsigned int v37 = a2[10];
        BOOL v38 = v37 >= 0x41 ? llvm::APInt::countLeadingZerosSlowCase(v36) == v37 : *(void *)v36 == 0;
        BOOL v39 = v38;
        char v40 = v39 ? 0 : 4;
        v28 |= v40;
        if (a3 != 3)
        {
          long long v41 = (llvm::APInt *)(a2 + 12);
          unsigned int v42 = a2[14];
          if (v42 >= 0x41)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v41) == v42) {
              char v44 = 0;
            }
            else {
              char v44 = 8;
            }
            v28 |= v44;
            if (a3 != 4)
            {
LABEL_85:
              uint64_t v45 = (llvm::APInt *)(a2 + 16);
              unsigned int v46 = a2[18];
              if (v46 >= 0x41) {
                BOOL v47 = llvm::APInt::countLeadingZerosSlowCase(v45) == v46;
              }
              else {
                BOOL v47 = *(void *)v45 == 0;
              }
              if (v47) {
                char v49 = 0;
              }
              else {
                char v49 = 16;
              }
              v28 |= v49;
              if (a3 != 5)
              {
                uint64_t v50 = (llvm::APInt *)(a2 + 20);
                unsigned int v51 = a2[22];
                BOOL v52 = v51 >= 0x41
                    ? llvm::APInt::countLeadingZerosSlowCase(v50) == v51
                    : *(void *)v50 == 0;
                BOOL v53 = v52;
                char v54 = v53 ? 0 : 32;
                v28 |= v54;
                if (a3 != 6)
                {
                  uint64_t v55 = (llvm::APInt *)(a2 + 24);
                  unsigned int v56 = a2[26];
                  BOOL v57 = v56 >= 0x41
                      ? llvm::APInt::countLeadingZerosSlowCase(v55) == v56
                      : *(void *)v55 == 0;
                  BOOL v58 = v57;
                  char v59 = v58 ? 0 : 64;
                  v28 |= v59;
                  if (a3 != 7)
                  {
                    unsigned int v60 = (llvm::APInt *)(a2 + 28);
                    unsigned int v61 = a2[30];
                    if (v61 < 0x41) {
                      BOOL v25 = *(void *)v60 == 0;
                    }
                    else {
                      BOOL v25 = llvm::APInt::countLeadingZerosSlowCase(v60) == v61;
                    }
                    if (v25) {
                      char v27 = 0;
                    }
                    else {
                      char v27 = 0x80;
                    }
                    v28 |= v27;
                  }
                }
              }
            }
          }
          else
          {
            if (*(void *)v41) {
              char v43 = 8;
            }
            else {
              char v43 = 0;
            }
            v28 |= v43;
            if (a3 != 4) {
              goto LABEL_85;
            }
          }
        }
      }
LABEL_45:
      a2 += 4 * a3;
      *v17++ = v28;
      a3 = v29;
      if (!--v18) {
        goto LABEL_31;
      }
    }
  }
  if (a3 >= 1)
  {
    size_t v19 = IntOrFloatBitWidth >> 3;
    BOOL v20 = v9;
    do
    {
      char v21 = a2;
      if (a2[2] >= 0x41u) {
        char v21 = *(const void **)a2;
      }
      memcpy(v20, v21, v19);
      v20 += v19;
      a2 += 4;
      --a3;
    }
    while (a3);
  }
LABEL_31:
  if (!RawElementsAttr)
  {
    RawElementsAttr = (__n128 *)mlir::createRawElementsAttr(v68, __dst, ElementsAttrStorageSize);
    long long v23 = (void *)RHS;
    if ((uint64_t *)RHS == &v67) {
      return RawElementsAttr;
    }
    goto LABEL_33;
  }
  long long v23 = (void *)RHS;
  if ((uint64_t *)RHS != &v67) {
LABEL_33:
  }
    free(v23);
  return RawElementsAttr;
}

__n128 *mlir::createElementsAttr(void *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v32 = a1;
  uint64_t RHS = (llvm::APFloatBase *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v32);
  unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS);
  v28[1] = 0;
  uint64_t RHS = (llvm::APFloatBase *)&v31;
  long long v30 = xmmword_1810FF9E0;
  v28[0] = 0;
  uint64_t MutableElementsAttr = (llvm::APFloatBase *)mlir::tryCreateMutableElementsAttr(v32, v28);
  RawElementsAttr = v28[0];
  if (v28[0])
  {
    __n128 v9 = MutableElementsAttr;
    BOOL v25 = v7;
    if (a3 < 1) {
      goto LABEL_28;
    }
    goto LABEL_15;
  }
  uint64_t v10 = v32;
  if (v32)
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v32 + 8);
    uint64_t MutableElementsAttr = (llvm::APFloatBase *)mlir::mps::getElementsAttrStorageSize((uint64_t)v10, v11);
    unint64_t v12 = (unint64_t)MutableElementsAttr;
    uint64_t v13 = v30;
    BOOL v14 = (unint64_t)v30 > (unint64_t)MutableElementsAttr;
    if ((llvm::APFloatBase *)v30 == MutableElementsAttr) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t MutableElementsAttr = (llvm::APFloatBase *)mlir::mps::getElementsAttrStorageSize(0, 0);
    unint64_t v12 = (unint64_t)MutableElementsAttr;
    uint64_t v13 = v30;
    BOOL v14 = (unint64_t)v30 > (unint64_t)MutableElementsAttr;
    if ((llvm::APFloatBase *)v30 == MutableElementsAttr) {
      goto LABEL_14;
    }
  }
  if (!v14)
  {
    if (*((void *)&v30 + 1) < v12)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&RHS, &v31, v12, 1);
      uint64_t v13 = v30;
    }
    if (v12 != v13) {
      bzero((char *)RHS + v13, v12 - v13);
    }
  }
  *(void *)&long long v30 = v12;
LABEL_14:
  BOOL v25 = (const void *)v12;
  __n128 v9 = RHS;
  if (a3 < 1) {
    goto LABEL_28;
  }
LABEL_15:
  size_t v15 = IntOrFloatBitWidth >> 3;
  BOOL v16 = llvm::APFloatBase::PPCDoubleDouble(MutableElementsAttr);
  __n128 v17 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  uint64_t v18 = v9;
  do
  {
    if (v16 == *(void **)v17) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v17, (llvm::APInt *)&v26);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt(v17, (uint64_t)&v26);
    }
    unsigned int v19 = v27;
    BOOL v20 = v26;
    if (v27 >= 0x41) {
      char v21 = (void **)v26;
    }
    else {
      char v21 = &v26;
    }
    memcpy(v18, v21, v15);
    if (v19 >= 0x41 && v20 != 0) {
      operator delete[](v20);
    }
    uint64_t v18 = (llvm::APFloatBase *)((char *)v18 + v15);
    __n128 v17 = (llvm::detail::DoubleAPFloat *)((char *)v17 + 32);
    --a3;
  }
  while (a3);
LABEL_28:
  if (!RawElementsAttr)
  {
    RawElementsAttr = (__n128 *)mlir::createRawElementsAttr(v32, v9, v25);
    long long v23 = RHS;
    if (RHS == (llvm::APFloatBase *)&v31) {
      return RawElementsAttr;
    }
    goto LABEL_30;
  }
  long long v23 = RHS;
  if (RHS != (llvm::APFloatBase *)&v31) {
LABEL_30:
  }
    free(v23);
  return RawElementsAttr;
}

void *mlir::createSplatF16ElementsAttr(void *a1, float _S0)
{
  __asm { FCVT            H0, S0 }
  __int16 v8 = _H0;
  return mlir::createRawElementsAttr(a1, &v8, (const void *)2);
}

void *mlir::rewriteElementsAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v514[5] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v504 = a1;
  *((void *)&v504 + 1) = a2;
  v503[0] = a3;
  v503[1] = a4;
  v502[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v504);
  v502[1] = v8;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v503))
  {
    __n128 v9 = (mlir::CallableOpInterface *)v503;
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v503);
    if (!v11) {
      goto LABEL_8;
    }
    uint64_t v12 = 8 * v11;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v12 -= 8;
      if (!v12)
      {
        __n128 v9 = (mlir::CallableOpInterface *)v503;
        goto LABEL_8;
      }
    }
  }
  __n128 v9 = (mlir::CallableOpInterface *)v502;
LABEL_8:
  uint64_t v13 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr(v9);
  uint64_t v15 = v14;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v503);
  v501 = (void *)mlir::RankedTensorType::get((uint64_t)v13, v15, OperandRange, 0);
  uint64_t v17 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v502);
  if (v17 != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v503))
  {
    if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v502)
                      + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
      && *(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v503)
                      + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      return 0;
    }
    v509 = v511;
    long long v510 = xmmword_181101A00;
    if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v504))
    {
      uint64_t RHS = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
      unint64_t ElementsAttrStorageSize = (unint64_t)(mlir::mps::getElementsAttrElementBitWidth(RHS) + 7) >> 3;
      uint64_t v20 = v510;
      BOOL v21 = (unint64_t)v510 > ElementsAttrStorageSize;
      if ((void)v510 == ElementsAttrStorageSize) {
        goto LABEL_31;
      }
    }
    else if (v501)
    {
      uint64_t v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v501 + 8);
      unint64_t ElementsAttrStorageSize = mlir::mps::getElementsAttrStorageSize((uint64_t)v501, v27);
      uint64_t v20 = v510;
      BOOL v21 = (unint64_t)v510 > ElementsAttrStorageSize;
      if ((void)v510 == ElementsAttrStorageSize) {
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t ElementsAttrStorageSize = mlir::mps::getElementsAttrStorageSize(0, 0);
      uint64_t v20 = v510;
      BOOL v21 = (unint64_t)v510 > ElementsAttrStorageSize;
      if ((void)v510 == ElementsAttrStorageSize) {
        goto LABEL_31;
      }
    }
    if (!v21)
    {
      if (*((void *)&v510 + 1) < ElementsAttrStorageSize)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v509, v511, ElementsAttrStorageSize, 1);
        uint64_t v20 = v510;
      }
      if (ElementsAttrStorageSize != v20) {
        bzero((char *)v509 + v20, ElementsAttrStorageSize - v20);
      }
    }
    *(void *)&long long v510 = ElementsAttrStorageSize;
LABEL_31:
    v512 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v512, 8))
    {
      uint64_t v29 = (unsigned __int8 *)v509;
      long long v508 = v504;
      Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v508);
      uint64_t v31 = Type;
      if (Type) {
        Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
      }
      v506 = v31;
      v507 = Type;
      uint64_t v505 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v506);
      int v32 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v508);
      BOOL v33 = (void *)v508;
      if (mlir::DenseElementsAttr::classof(v508)) {
        long long v34 = v33;
      }
      else {
        long long v34 = 0;
      }
      v512 = v34;
      if (v34)
      {
        uint64_t RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v512);
        uint64_t v6 = v35;
        if (v32) {
          goto LABEL_39;
        }
LABEL_66:
        int64_t NumElements = mlir::ElementsAttr::getNumElements(v508, *((uint64_t *)&v508 + 1));
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 8))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_68;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v505, 8))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_89;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 16))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_118;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v505, 16))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_157;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 32))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_206;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v505, 32))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_250;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 64))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          if ((unint64_t)NumElements < 8
            || v29 < &RawStringData[8 * NumElements] && &v29[NumElements] > RawStringData)
          {
            unint64_t v104 = 0;
            goto LABEL_298;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            unint64_t v104 = NumElements & 0x7FFFFFFFFFFFFFE0;
            v185 = (int8x16x4_t *)(RawStringData + 128);
            unint64_t v186 = v29 + 16;
            unint64_t v187 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *(void *)&long long v188 = vqtbl4q_s8(v185[-2], (int8x16_t)xmmword_181126CE0).u64[0];
              *(void *)&long long v189 = vqtbl4q_s8(*v185, (int8x16_t)xmmword_181126CE0).u64[0];
              *((void *)&v188 + 1) = vqtbl4q_s8(v185[-1], (int8x16_t)xmmword_181126CE0).u64[0];
              *((void *)&v189 + 1) = vqtbl4q_s8(v185[1], (int8x16_t)xmmword_181126CE0).u64[0];
              *(v186 - 1) = v188;
              *unint64_t v186 = v189;
              v185 += 4;
              v186 += 2;
              v187 -= 32;
            }
            while (v187);
            if (NumElements == v104) {
              goto LABEL_897;
            }
            if ((NumElements & 0x18) == 0)
            {
LABEL_298:
              unint64_t v105 = NumElements - v104;
              long long v106 = &v29[v104];
              uint64_t v107 = &RawStringData[8 * v104];
              do
              {
                uint64_t v108 = *(void *)v107;
                v107 += 8;
                *v106++ = v108;
                --v105;
              }
              while (v105);
              goto LABEL_897;
            }
          }
          else
          {
            unint64_t v104 = 0;
          }
          unint64_t v190 = v104;
          unint64_t v104 = NumElements & 0xFFFFFFFFFFFFFFF8;
          v191 = (int8x16x4_t *)&RawStringData[8 * v190];
          unint64_t v192 = &v29[v190];
          unint64_t v193 = v190 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(void *)unint64_t v192 = vqtbl4q_s8(*v191, (int8x16_t)xmmword_181126CF0).u64[0];
            v192 += 8;
            ++v191;
            v193 += 8;
          }
          while (v193);
          if (NumElements == v104) {
            goto LABEL_897;
          }
          goto LABEL_298;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v505, 64))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          if ((unint64_t)NumElements < 8
            || v29 < &RawStringData[8 * NumElements] && &v29[NumElements] > RawStringData)
          {
            unint64_t v114 = 0;
            goto LABEL_336;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            unint64_t v114 = NumElements & 0x7FFFFFFFFFFFFFE0;
            uint64_t v230 = (int8x16x4_t *)(RawStringData + 128);
            unint64_t v231 = v29 + 16;
            unint64_t v232 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *(void *)&long long v233 = vqtbl4q_s8(v230[-2], (int8x16_t)xmmword_181126CE0).u64[0];
              *(void *)&long long v234 = vqtbl4q_s8(*v230, (int8x16_t)xmmword_181126CE0).u64[0];
              *((void *)&v233 + 1) = vqtbl4q_s8(v230[-1], (int8x16_t)xmmword_181126CE0).u64[0];
              *((void *)&v234 + 1) = vqtbl4q_s8(v230[1], (int8x16_t)xmmword_181126CE0).u64[0];
              *(v231 - 1) = v233;
              *unint64_t v231 = v234;
              v230 += 4;
              v231 += 2;
              v232 -= 32;
            }
            while (v232);
            if (NumElements == v114) {
              goto LABEL_897;
            }
            if ((NumElements & 0x18) == 0)
            {
LABEL_336:
              unint64_t v115 = NumElements - v114;
              unint64_t v116 = &v29[v114];
              unint64_t v117 = &RawStringData[8 * v114];
              do
              {
                uint64_t v118 = *(void *)v117;
                v117 += 8;
                *v116++ = v118;
                --v115;
              }
              while (v115);
              goto LABEL_897;
            }
          }
          else
          {
            unint64_t v114 = 0;
          }
          unint64_t v235 = v114;
          unint64_t v114 = NumElements & 0xFFFFFFFFFFFFFFF8;
          v236 = (int8x16x4_t *)&RawStringData[8 * v235];
          int64_t v237 = &v29[v235];
          unint64_t v238 = v235 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(void *)int64_t v237 = vqtbl4q_s8(*v236, (int8x16_t)xmmword_181126CF0).u64[0];
            v237 += 8;
            ++v236;
            v238 += 8;
          }
          while (v238);
          if (NumElements == v114) {
            goto LABEL_897;
          }
          goto LABEL_336;
        }
        if (mlir::Type::isF16((mlir::Type *)&v505))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_375;
        }
        if (mlir::Type::isF32((mlir::Type *)&v505))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          if ((unint64_t)NumElements < 8
            || v29 < &RawStringData[4 * NumElements] && &v29[NumElements] > RawStringData)
          {
            unint64_t v150 = 0;
            goto LABEL_433;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            unint64_t v150 = NumElements & 0x7FFFFFFFFFFFFFE0;
            v310 = (float32x4_t *)(RawStringData + 64);
            v311 = (int8x16_t *)(v29 + 16);
            unint64_t v312 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v516.val[3] = (int8x16_t)vcvtq_u32_f32(v310[-1]);
              v516.val[2] = (int8x16_t)vcvtq_u32_f32(v310[-2]);
              v516.val[1] = (int8x16_t)vcvtq_u32_f32(v310[-3]);
              v516.val[0] = (int8x16_t)vcvtq_u32_f32(v310[-4]);
              int8x16_t v313 = vqtbl4q_s8(v516, (int8x16_t)xmmword_181126D00);
              v516.val[2] = (int8x16_t)vcvtq_u32_f32(v310[3]);
              v516.val[1] = (int8x16_t)vcvtq_u32_f32(v310[2]);
              v516.val[0] = (int8x16_t)vcvtq_u32_f32(v310[1]);
              uint32x4_t v314 = vcvtq_u32_f32(*v310);
              v311[-1] = v313;
              int8x16_t *v311 = vqtbl4q_s8(v516, (int8x16_t)xmmword_181126D00);
              v310 += 8;
              v311 += 2;
              v312 -= 32;
            }
            while (v312);
            if (NumElements == v150) {
              goto LABEL_897;
            }
            if ((NumElements & 0x18) == 0)
            {
LABEL_433:
              unint64_t v151 = NumElements - v150;
              unint64_t v152 = &v29[v150];
              v153 = (float *)&RawStringData[4 * v150];
              do
              {
                float v154 = *v153++;
                *v152++ = (int)v154;
                --v151;
              }
              while (v151);
              goto LABEL_897;
            }
          }
          else
          {
            unint64_t v150 = 0;
          }
          unint64_t v315 = v150;
          unint64_t v150 = NumElements & 0xFFFFFFFFFFFFFFF8;
          v316 = (float32x4_t *)&RawStringData[4 * v315];
          v317 = &v29[v315];
          unint64_t v318 = v315 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            float32x4_t v319 = *v316;
            float32x4_t v320 = v316[1];
            v316 += 2;
            v515.val[1] = (int8x16_t)vcvtq_u32_f32(v320);
            v515.val[0] = (int8x16_t)vcvtq_u32_f32(v319);
            *(void *)v317 = vqtbl2q_s8(v515, (int8x16_t)xmmword_181126D10).u64[0];
            v317 += 8;
            v318 += 8;
          }
          while (v318);
          if (NumElements == v150) {
            goto LABEL_897;
          }
          goto LABEL_433;
        }
        if (!mlir::Type::isF64((mlir::Type *)&v505))
        {
          if (!mlir::Type::isBF16((mlir::Type *)&v505)) {
            goto LABEL_551;
          }
          if (NumElements < 1) {
            goto LABEL_897;
          }
LABEL_528:
          for (uint64_t i = 0; i != NumElements; ++i)
          {
            if (v32) {
              uint64_t v197 = 0;
            }
            else {
              uint64_t v197 = i;
            }
            v29[i] = (int)COERCE_FLOAT(*(unsigned __int16 *)&RawStringData[2 * v197] << 16);
          }
          goto LABEL_897;
        }
        if (NumElements < 1) {
          goto LABEL_897;
        }
        if ((unint64_t)NumElements < 8
          || v29 < &RawStringData[8 * NumElements] && &v29[NumElements] > RawStringData)
        {
          unint64_t v165 = 0;
          goto LABEL_474;
        }
        if ((unint64_t)NumElements >= 0x10)
        {
          unint64_t v165 = NumElements & 0x7FFFFFFFFFFFFFF0;
          unint64_t v359 = NumElements & 0xFFFFFFFFFFFFFFF0;
          v360 = (int8x16_t *)v29;
          v361 = (float64x2_t *)RawStringData;
          do
          {
            *(int16x4_t *)v362.uint64_t i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v361[4])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v361[5])));
            v362.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v361[6])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v361[7])));
            *(int16x4_t *)v363.uint64_t i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(*v361)), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v361[1])));
            v363.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v361[2])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v361[3])));
            *v360++ = vuzp1q_s8(v363, v362);
            v361 += 8;
            v359 -= 16;
          }
          while (v359);
          if (NumElements == v165) {
            goto LABEL_897;
          }
          if ((NumElements & 8) == 0)
          {
LABEL_474:
            unint64_t v166 = NumElements - v165;
            int64_t v167 = &v29[v165];
            unint64_t v168 = (double *)&RawStringData[8 * v165];
            do
            {
              double v169 = *v168++;
              *v167++ = (int)v169;
              --v166;
            }
            while (v166);
            goto LABEL_897;
          }
        }
        else
        {
          unint64_t v165 = 0;
        }
        unint64_t v294 = v165;
        unint64_t v165 = NumElements & 0xFFFFFFFFFFFFFFF8;
        v295 = (float64x2_t *)&RawStringData[8 * v294];
        v296 = (int8x8_t *)&v29[v294];
        unint64_t v297 = v294 - (NumElements & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *v296++ = vuzp1_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(*v295)), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v295[1]))), (int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v295[2])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v295[3]))));
          v295 += 4;
          v297 += 8;
        }
        while (v297);
        if (NumElements == v165) {
          goto LABEL_897;
        }
        goto LABEL_474;
      }
      if (*(_UNKNOWN **)(*(void *)v33 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
        char v54 = v33;
      }
      else {
        char v54 = 0;
      }
      v512 = v54;
      if (v54)
      {
        uint64_t RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)&v512);
        uint64_t v6 = v55;
        if ((v32 & 1) == 0) {
          goto LABEL_66;
        }
      }
      else if ((v32 & 1) == 0)
      {
        goto LABEL_66;
      }
LABEL_39:
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 8))
      {
        int64_t NumElements = 1;
LABEL_68:
        for (uint64_t j = 0; j != NumElements; ++j)
        {
          if (v32) {
            uint64_t v57 = 0;
          }
          else {
            uint64_t v57 = j;
          }
          v29[j] = RawStringData[v57];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v505, 8))
      {
        int64_t NumElements = 1;
LABEL_89:
        for (uint64_t k = 0; k != NumElements; ++k)
        {
          if (v32) {
            uint64_t v65 = 0;
          }
          else {
            uint64_t v65 = k;
          }
          v29[k] = RawStringData[v65];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 16))
      {
        int64_t NumElements = 1;
LABEL_118:
        for (uint64_t m = 0; m != NumElements; ++m)
        {
          if (v32) {
            uint64_t v71 = 0;
          }
          else {
            uint64_t v71 = m;
          }
          v29[m] = *(_WORD *)&RawStringData[2 * v71];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v505, 16))
      {
        int64_t NumElements = 1;
LABEL_157:
        for (uint64_t n = 0; n != NumElements; ++n)
        {
          if (v32) {
            uint64_t v79 = 0;
          }
          else {
            uint64_t v79 = n;
          }
          v29[n] = *(_WORD *)&RawStringData[2 * v79];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 32))
      {
        int64_t NumElements = 1;
LABEL_206:
        for (iuint64_t i = 0; ii != NumElements; ++ii)
        {
          if (v32) {
            uint64_t v89 = 0;
          }
          else {
            uint64_t v89 = ii;
          }
          v29[ii] = *(_DWORD *)&RawStringData[4 * v89];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v505, 32))
      {
        int64_t NumElements = 1;
LABEL_250:
        for (juint64_t j = 0; jj != NumElements; ++jj)
        {
          if (v32) {
            uint64_t v97 = 0;
          }
          else {
            uint64_t v97 = jj;
          }
          v29[jj] = *(_DWORD *)&RawStringData[4 * v97];
        }
        goto LABEL_897;
      }
      if (!mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 64) && !mlir::Type::isInteger((mlir::Type *)&v505, 64))
      {
        if (mlir::Type::isF16((mlir::Type *)&v505))
        {
          int64_t NumElements = 1;
LABEL_375:
          for (kuint64_t k = 0; kk != NumElements; ++kk)
          {
            if (v32) {
              uint64_t v132 = 0;
            }
            else {
              uint64_t v132 = kk;
            }
            v29[kk] = (int)*(short float *)&RawStringData[2 * v132];
          }
          goto LABEL_897;
        }
        if (!mlir::Type::isF32((mlir::Type *)&v505))
        {
          if (!mlir::Type::isF64((mlir::Type *)&v505))
          {
            int64_t NumElements = 1;
            if (!mlir::Type::isBF16((mlir::Type *)&v505))
            {
LABEL_551:
              if (mlir::Type::isInteger((mlir::Type *)&v505, 1))
              {
                llvm::SmallVector<char,40u>::SmallVector((uint64_t)&v512, NumElements);
                mlir::detail::unpackBooleanData(RawStringData, v6, (uint64_t)v512, v513);
                uint64_t v205 = (char *)v512;
                if (NumElements < 1) {
                  goto LABEL_816;
                }
                if (v32)
                {
                  if ((unint64_t)NumElements < 8
                    || v29 < (unsigned __int8 *)((char *)v512 + 1) && v512 < &v29[NumElements])
                  {
                    unint64_t v206 = 0;
                    goto LABEL_558;
                  }
                  if ((unint64_t)NumElements >= 0x20)
                  {
                    unint64_t v206 = NumElements & 0x7FFFFFFFFFFFFFE0;
                    int8x16_t v434 = vld1q_dup_s8((const char *)v512);
                    v435 = (int8x16_t *)(v29 + 16);
                    unint64_t v436 = NumElements & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v435[-1] = v434;
                      int8x16_t *v435 = v434;
                      v435 += 2;
                      v436 -= 32;
                    }
                    while (v436);
                    if (NumElements == v206) {
                      goto LABEL_816;
                    }
                    if ((NumElements & 0x18) == 0)
                    {
LABEL_558:
                      unint64_t v207 = NumElements - v206;
                      v208 = (char *)&v29[v206];
                      do
                      {
                        *v208++ = *v205;
                        --v207;
                      }
                      while (v207);
                      goto LABEL_816;
                    }
                  }
                  else
                  {
                    unint64_t v206 = 0;
                  }
                  unint64_t v437 = v206;
                  unint64_t v206 = NumElements & 0xFFFFFFFFFFFFFFF8;
                  int8x8_t v438 = vld1_dup_s8(v205);
                  v439 = (int8x8_t *)&v29[v437];
                  unint64_t v440 = v437 - (NumElements & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    *v439++ = v438;
                    v440 += 8;
                  }
                  while (v440);
                  if (NumElements != v206) {
                    goto LABEL_558;
                  }
LABEL_816:
                  if (v205 == (char *)v514) {
                    goto LABEL_897;
                  }
                  goto LABEL_817;
                }
                unint64_t v309 = 0;
                if ((unint64_t)NumElements >= 8 && (unint64_t)(v29 - (unsigned char *)v512) >= 0x20)
                {
                  if ((unint64_t)NumElements < 0x20)
                  {
                    unint64_t v309 = 0;
LABEL_787:
                    unint64_t v402 = v309;
                    unint64_t v309 = NumElements & 0xFFFFFFFFFFFFFFF8;
                    v403 = &v205[v402];
                    v404 = &v29[v402];
                    unint64_t v405 = v402 - (NumElements & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      uint64_t v406 = *(void *)v403;
                      v403 += 8;
                      *(void *)v404 = v406;
                      v404 += 8;
                      v405 += 8;
                    }
                    while (v405);
                    if (NumElements == v309) {
                      goto LABEL_816;
                    }
                    goto LABEL_790;
                  }
                  unint64_t v309 = NumElements & 0x7FFFFFFFFFFFFFE0;
                  v398 = (long long *)((char *)v512 + 16);
                  v399 = v29 + 16;
                  unint64_t v400 = NumElements & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v401 = *v398;
                    *(v399 - 1) = *(v398 - 1);
                    _OWORD *v399 = v401;
                    v398 += 2;
                    v399 += 2;
                    v400 -= 32;
                  }
                  while (v400);
                  if (NumElements == v309) {
                    goto LABEL_816;
                  }
                  if ((NumElements & 0x18) != 0) {
                    goto LABEL_787;
                  }
                }
LABEL_790:
                unint64_t v407 = NumElements - v309;
                v408 = &v29[v309];
                v409 = &v205[v309];
                do
                {
                  unsigned __int8 v410 = *v409++;
                  *v408++ = v410;
                  --v407;
                }
                while (v407);
                goto LABEL_816;
              }
LABEL_623:
              mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v505);
              unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v505);
              mlir::detail::unpackQuantizedData<unsigned char>(RawStringData, v6, (uint64_t)v29, NumElements, IntOrFloatBitWidth);
              goto LABEL_897;
            }
            goto LABEL_528;
          }
LABEL_519:
          unsigned __int8 *v29 = (int)*(double *)RawStringData;
          goto LABEL_897;
        }
LABEL_464:
        unsigned __int8 *v29 = (int)*(float *)RawStringData;
        goto LABEL_897;
      }
LABEL_327:
      unsigned __int8 *v29 = *(void *)RawStringData;
      goto LABEL_897;
    }
    v512 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
    if (mlir::Type::isInteger((mlir::Type *)&v512, 8))
    {
      uint64_t v29 = (unsigned __int8 *)v509;
      long long v508 = v504;
      char v40 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v508);
      long long v41 = v40;
      if (v40) {
        char v40 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v40 + 8);
      }
      v506 = v41;
      v507 = v40;
      uint64_t v505 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v506);
      int v42 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v508);
      char v43 = (void *)v508;
      if (mlir::DenseElementsAttr::classof(v508)) {
        char v44 = v43;
      }
      else {
        char v44 = 0;
      }
      v512 = v44;
      if (v44)
      {
        uint64_t RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v512);
        uint64_t v6 = v45;
        if (v42) {
          goto LABEL_49;
        }
LABEL_100:
        int64_t NumElements = mlir::ElementsAttr::getNumElements(v508, *((uint64_t *)&v508 + 1));
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 8))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_102;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v505, 8))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_126;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 16))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_165;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v505, 16))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_214;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 32))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_258;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v505, 32))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_303;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 64))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          if ((unint64_t)NumElements < 8
            || v29 < &RawStringData[8 * NumElements] && &v29[NumElements] > RawStringData)
          {
            unint64_t v119 = 0;
            goto LABEL_345;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            unint64_t v119 = NumElements & 0x7FFFFFFFFFFFFFE0;
            uint64_t v239 = (int8x16x4_t *)(RawStringData + 128);
            uint64_t v240 = v29 + 16;
            unint64_t v241 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *(void *)&long long v242 = vqtbl4q_s8(v239[-2], (int8x16_t)xmmword_181126CE0).u64[0];
              *(void *)&long long v243 = vqtbl4q_s8(*v239, (int8x16_t)xmmword_181126CE0).u64[0];
              *((void *)&v242 + 1) = vqtbl4q_s8(v239[-1], (int8x16_t)xmmword_181126CE0).u64[0];
              *((void *)&v243 + 1) = vqtbl4q_s8(v239[1], (int8x16_t)xmmword_181126CE0).u64[0];
              *(v240 - 1) = v242;
              *uint64_t v240 = v243;
              v239 += 4;
              v240 += 2;
              v241 -= 32;
            }
            while (v241);
            if (NumElements == v119) {
              goto LABEL_897;
            }
            if ((NumElements & 0x18) == 0)
            {
LABEL_345:
              unint64_t v120 = NumElements - v119;
              uint64_t v121 = &v29[v119];
              unint64_t v122 = &RawStringData[8 * v119];
              do
              {
                uint64_t v123 = *(void *)v122;
                v122 += 8;
                *v121++ = v123;
                --v120;
              }
              while (v120);
              goto LABEL_897;
            }
          }
          else
          {
            unint64_t v119 = 0;
          }
          unint64_t v244 = v119;
          unint64_t v119 = NumElements & 0xFFFFFFFFFFFFFFF8;
          long long v245 = (int8x16x4_t *)&RawStringData[8 * v244];
          long long v246 = &v29[v244];
          unint64_t v247 = v244 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(void *)long long v246 = vqtbl4q_s8(*v245, (int8x16_t)xmmword_181126CF0).u64[0];
            v246 += 8;
            ++v245;
            v247 += 8;
          }
          while (v247);
          if (NumElements == v119) {
            goto LABEL_897;
          }
          goto LABEL_345;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v505, 64))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          if ((unint64_t)NumElements < 8
            || v29 < &RawStringData[8 * NumElements] && &v29[NumElements] > RawStringData)
          {
            unint64_t v133 = 0;
            goto LABEL_387;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            unint64_t v133 = NumElements & 0x7FFFFFFFFFFFFFE0;
            uint64_t v275 = (int8x16x4_t *)(RawStringData + 128);
            uint64_t v276 = v29 + 16;
            unint64_t v277 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *(void *)&long long v278 = vqtbl4q_s8(v275[-2], (int8x16_t)xmmword_181126CE0).u64[0];
              *(void *)&long long v279 = vqtbl4q_s8(*v275, (int8x16_t)xmmword_181126CE0).u64[0];
              *((void *)&v278 + 1) = vqtbl4q_s8(v275[-1], (int8x16_t)xmmword_181126CE0).u64[0];
              *((void *)&v279 + 1) = vqtbl4q_s8(v275[1], (int8x16_t)xmmword_181126CE0).u64[0];
              *(v276 - 1) = v278;
              *uint64_t v276 = v279;
              v275 += 4;
              v276 += 2;
              v277 -= 32;
            }
            while (v277);
            if (NumElements == v133) {
              goto LABEL_897;
            }
            if ((NumElements & 0x18) == 0)
            {
LABEL_387:
              unint64_t v134 = NumElements - v133;
              uint64_t v135 = &v29[v133];
              v136 = &RawStringData[8 * v133];
              do
              {
                uint64_t v137 = *(void *)v136;
                v136 += 8;
                *v135++ = v137;
                --v134;
              }
              while (v134);
              goto LABEL_897;
            }
          }
          else
          {
            unint64_t v133 = 0;
          }
          unint64_t v280 = v133;
          unint64_t v133 = NumElements & 0xFFFFFFFFFFFFFFF8;
          uint64_t v281 = (int8x16x4_t *)&RawStringData[8 * v280];
          uint64_t v282 = &v29[v280];
          unint64_t v283 = v280 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(void *)uint64_t v282 = vqtbl4q_s8(*v281, (int8x16_t)xmmword_181126CF0).u64[0];
            v282 += 8;
            ++v281;
            v283 += 8;
          }
          while (v283);
          if (NumElements == v133) {
            goto LABEL_897;
          }
          goto LABEL_387;
        }
        if (mlir::Type::isF16((mlir::Type *)&v505))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          goto LABEL_438;
        }
        if (mlir::Type::isF32((mlir::Type *)&v505))
        {
          if (NumElements < 1) {
            goto LABEL_897;
          }
          if ((unint64_t)NumElements < 8
            || v29 < &RawStringData[4 * NumElements] && &v29[NumElements] > RawStringData)
          {
            unint64_t v170 = 0;
            goto LABEL_483;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            unint64_t v170 = NumElements & 0x7FFFFFFFFFFFFFE0;
            v364 = (float32x4_t *)(RawStringData + 64);
            v365 = (int8x16_t *)(v29 + 16);
            unint64_t v366 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *(int16x4_t *)v367.uint64_t i8 = vmovn_s32(vcvtq_s32_f32(v364[-2]));
              v367.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v364[-1]));
              *(int16x4_t *)v368.uint64_t i8 = vmovn_s32(vcvtq_s32_f32(v364[-4]));
              v368.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v364[-3]));
              int8x16_t v369 = vuzp1q_s8(v368, v367);
              *(int16x4_t *)v367.uint64_t i8 = vmovn_s32(vcvtq_s32_f32(v364[2]));
              v367.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v364[3]));
              *(int16x4_t *)v370.uint64_t i8 = vmovn_s32(vcvtq_s32_f32(*v364));
              v370.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v364[1]));
              v365[-1] = v369;
              int8x16_t *v365 = vuzp1q_s8(v370, v367);
              v364 += 8;
              v365 += 2;
              v366 -= 32;
            }
            while (v366);
            if (NumElements == v170) {
              goto LABEL_897;
            }
            if ((NumElements & 0x18) == 0)
            {
LABEL_483:
              unint64_t v171 = NumElements - v170;
              v172 = &v29[v170];
              v173 = (float *)&RawStringData[4 * v170];
              do
              {
                float v174 = *v173++;
                *v172++ = (int)v174;
                --v171;
              }
              while (v171);
              goto LABEL_897;
            }
          }
          else
          {
            unint64_t v170 = 0;
          }
          unint64_t v371 = v170;
          unint64_t v170 = NumElements & 0xFFFFFFFFFFFFFFF8;
          v372 = (float32x4_t *)&RawStringData[4 * v371];
          v373 = (int8x8_t *)&v29[v371];
          unint64_t v374 = v371 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            float32x4_t v375 = *v372;
            float32x4_t v376 = v372[1];
            v372 += 2;
            *v373++ = vuzp1_s8((int8x8_t)vmovn_s32(vcvtq_s32_f32(v375)), (int8x8_t)vmovn_s32(vcvtq_s32_f32(v376)));
            v374 += 8;
          }
          while (v374);
          if (NumElements == v170) {
            goto LABEL_897;
          }
          goto LABEL_483;
        }
        if (!mlir::Type::isF64((mlir::Type *)&v505))
        {
          if (!mlir::Type::isBF16((mlir::Type *)&v505)) {
            goto LABEL_624;
          }
          if (NumElements < 1) {
            goto LABEL_897;
          }
LABEL_609:
          for (muint64_t m = 0; mm != NumElements; ++mm)
          {
            if (v42) {
              uint64_t v251 = 0;
            }
            else {
              uint64_t v251 = mm;
            }
            v29[mm] = (int)COERCE_FLOAT(*(unsigned __int16 *)&RawStringData[2 * v251] << 16);
          }
          goto LABEL_897;
        }
        if (NumElements < 1) {
          goto LABEL_897;
        }
        if ((unint64_t)NumElements < 8
          || v29 < &RawStringData[8 * NumElements] && &v29[NumElements] > RawStringData)
        {
          unint64_t v198 = 0;
          goto LABEL_540;
        }
        if ((unint64_t)NumElements >= 0x10)
        {
          unint64_t v198 = NumElements & 0x7FFFFFFFFFFFFFF0;
          unint64_t v411 = NumElements & 0xFFFFFFFFFFFFFFF0;
          v412 = (int8x16_t *)v29;
          v413 = (float64x2_t *)RawStringData;
          do
          {
            *(int16x4_t *)v414.uint64_t i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v413[4])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v413[5])));
            v414.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v413[6])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v413[7])));
            *(int16x4_t *)v415.uint64_t i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(*v413)), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v413[1])));
            v415.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v413[2])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v413[3])));
            *v412++ = vuzp1q_s8(v415, v414);
            v413 += 8;
            v411 -= 16;
          }
          while (v411);
          if (NumElements == v198) {
            goto LABEL_897;
          }
          if ((NumElements & 8) == 0)
          {
LABEL_540:
            unint64_t v199 = NumElements - v198;
            v200 = &v29[v198];
            v201 = (double *)&RawStringData[8 * v198];
            do
            {
              double v202 = *v201++;
              *v200++ = (int)v202;
              --v199;
            }
            while (v199);
            goto LABEL_897;
          }
        }
        else
        {
          unint64_t v198 = 0;
        }
        unint64_t v327 = v198;
        unint64_t v198 = NumElements & 0xFFFFFFFFFFFFFFF8;
        v328 = (float64x2_t *)&RawStringData[8 * v327];
        v329 = (int8x8_t *)&v29[v327];
        unint64_t v330 = v327 - (NumElements & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *v329++ = vuzp1_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(*v328)), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v328[1]))), (int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v328[2])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v328[3]))));
          v328 += 4;
          v330 += 8;
        }
        while (v330);
        if (NumElements == v198) {
          goto LABEL_897;
        }
        goto LABEL_540;
      }
      if (*(_UNKNOWN **)(*(void *)v43 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
        long long v66 = v43;
      }
      else {
        long long v66 = 0;
      }
      v512 = v66;
      if (v66)
      {
        uint64_t RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)&v512);
        uint64_t v6 = v67;
        if ((v42 & 1) == 0) {
          goto LABEL_100;
        }
      }
      else if ((v42 & 1) == 0)
      {
        goto LABEL_100;
      }
LABEL_49:
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 8))
      {
        int64_t NumElements = 1;
LABEL_102:
        for (uint64_t nn = 0; nn != NumElements; ++nn)
        {
          if (v42) {
            uint64_t v69 = 0;
          }
          else {
            uint64_t v69 = nn;
          }
          v29[nn] = RawStringData[v69];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v505, 8))
      {
        int64_t NumElements = 1;
LABEL_126:
        for (uint64_t i1 = 0; i1 != NumElements; ++i1)
        {
          if (v42) {
            uint64_t v73 = 0;
          }
          else {
            uint64_t v73 = i1;
          }
          v29[i1] = RawStringData[v73];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 16))
      {
        int64_t NumElements = 1;
LABEL_165:
        for (uint64_t i2 = 0; i2 != NumElements; ++i2)
        {
          if (v42) {
            uint64_t v81 = 0;
          }
          else {
            uint64_t v81 = i2;
          }
          v29[i2] = *(_WORD *)&RawStringData[2 * v81];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v505, 16))
      {
        int64_t NumElements = 1;
LABEL_214:
        for (uint64_t i3 = 0; i3 != NumElements; ++i3)
        {
          if (v42) {
            uint64_t v91 = 0;
          }
          else {
            uint64_t v91 = i3;
          }
          v29[i3] = *(_WORD *)&RawStringData[2 * v91];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 32))
      {
        int64_t NumElements = 1;
LABEL_258:
        for (uint64_t i4 = 0; i4 != NumElements; ++i4)
        {
          if (v42) {
            uint64_t v99 = 0;
          }
          else {
            uint64_t v99 = i4;
          }
          v29[i4] = *(_DWORD *)&RawStringData[4 * v99];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v505, 32))
      {
        int64_t NumElements = 1;
LABEL_303:
        for (uint64_t i5 = 0; i5 != NumElements; ++i5)
        {
          if (v42) {
            uint64_t v110 = 0;
          }
          else {
            uint64_t v110 = i5;
          }
          v29[i5] = *(_DWORD *)&RawStringData[4 * v110];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 64) || mlir::Type::isInteger((mlir::Type *)&v505, 64)) {
        goto LABEL_327;
      }
      if (mlir::Type::isF16((mlir::Type *)&v505))
      {
        int64_t NumElements = 1;
LABEL_438:
        for (uint64_t i6 = 0; i6 != NumElements; ++i6)
        {
          if (v42) {
            uint64_t v156 = 0;
          }
          else {
            uint64_t v156 = i6;
          }
          v29[i6] = (int)*(short float *)&RawStringData[2 * v156];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isF32((mlir::Type *)&v505)) {
        goto LABEL_464;
      }
      if (mlir::Type::isF64((mlir::Type *)&v505)) {
        goto LABEL_519;
      }
      int64_t NumElements = 1;
      if (!mlir::Type::isBF16((mlir::Type *)&v505))
      {
LABEL_624:
        if (!mlir::Type::isInteger((mlir::Type *)&v505, 1)) {
          goto LABEL_623;
        }
        llvm::SmallVector<char,40u>::SmallVector((uint64_t)&v512, NumElements);
        mlir::detail::unpackBooleanData(RawStringData, v6, (uint64_t)v512, v513);
        uint64_t v205 = (char *)v512;
        if (NumElements < 1) {
          goto LABEL_816;
        }
        if (v42)
        {
          if ((unint64_t)NumElements < 8
            || v29 < (unsigned __int8 *)((char *)v512 + 1) && v512 < &v29[NumElements])
          {
            unint64_t v259 = 0;
            goto LABEL_631;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            unint64_t v259 = NumElements & 0x7FFFFFFFFFFFFFE0;
            int8x16_t v441 = vld1q_dup_s8((const char *)v512);
            v442 = (int8x16_t *)(v29 + 16);
            unint64_t v443 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v442[-1] = v441;
              int8x16_t *v442 = v441;
              v442 += 2;
              v443 -= 32;
            }
            while (v443);
            if (NumElements == v259) {
              goto LABEL_816;
            }
            if ((NumElements & 0x18) == 0)
            {
LABEL_631:
              unint64_t v260 = NumElements - v259;
              int v261 = (char *)&v29[v259];
              do
              {
                *v261++ = *v205;
                --v260;
              }
              while (v260);
              goto LABEL_816;
            }
          }
          else
          {
            unint64_t v259 = 0;
          }
          unint64_t v444 = v259;
          unint64_t v259 = NumElements & 0xFFFFFFFFFFFFFFF8;
          int8x8_t v445 = vld1_dup_s8(v205);
          v446 = (int8x8_t *)&v29[v444];
          unint64_t v447 = v444 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *v446++ = v445;
            v447 += 8;
          }
          while (v447);
          if (NumElements == v259) {
            goto LABEL_816;
          }
          goto LABEL_631;
        }
        unint64_t v358 = 0;
        if ((unint64_t)NumElements >= 8 && (unint64_t)(v29 - (unsigned char *)v512) >= 0x20)
        {
          if ((unint64_t)NumElements < 0x20)
          {
            unint64_t v358 = 0;
LABEL_811:
            unint64_t v425 = v358;
            unint64_t v358 = NumElements & 0xFFFFFFFFFFFFFFF8;
            v426 = &v205[v425];
            v427 = &v29[v425];
            unint64_t v428 = v425 - (NumElements & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v429 = *(void *)v426;
              v426 += 8;
              *(void *)v427 = v429;
              v427 += 8;
              v428 += 8;
            }
            while (v428);
            if (NumElements == v358) {
              goto LABEL_816;
            }
            goto LABEL_814;
          }
          unint64_t v358 = NumElements & 0x7FFFFFFFFFFFFFE0;
          v421 = (long long *)((char *)v512 + 16);
          v422 = v29 + 16;
          unint64_t v423 = NumElements & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v424 = *v421;
            *(v422 - 1) = *(v421 - 1);
            _OWORD *v422 = v424;
            v421 += 2;
            v422 += 2;
            v423 -= 32;
          }
          while (v423);
          if (NumElements == v358) {
            goto LABEL_816;
          }
          if ((NumElements & 0x18) != 0) {
            goto LABEL_811;
          }
        }
LABEL_814:
        unint64_t v430 = NumElements - v358;
        v431 = &v29[v358];
        v432 = &v205[v358];
        do
        {
          unsigned __int8 v433 = *v432++;
          *v431++ = v433;
          --v430;
        }
        while (v430);
        goto LABEL_816;
      }
      goto LABEL_609;
    }
    v512 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v512, 16))
    {
      unsigned int v46 = (int16x8_t *)v509;
      long long v508 = v504;
      BOOL v47 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v508);
      uint64_t v48 = v47;
      if (v47) {
        BOOL v47 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v47 + 8);
      }
      v506 = v48;
      v507 = v47;
      uint64_t v505 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v506);
      int v49 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v508);
      uint64_t v50 = (void *)v508;
      if (mlir::DenseElementsAttr::classof(v508)) {
        unsigned int v51 = v50;
      }
      else {
        unsigned int v51 = 0;
      }
      v512 = v51;
      if (v51)
      {
        uint64_t RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v512);
        uint64_t v6 = v52;
        if (v49) {
          goto LABEL_59;
        }
LABEL_137:
        int64_t v53 = mlir::ElementsAttr::getNumElements(v508, *((uint64_t *)&v508 + 1));
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 8))
        {
          if (v53 < 1) {
            goto LABEL_897;
          }
          goto LABEL_139;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v505, 8))
        {
          if (v53 < 1) {
            goto LABEL_897;
          }
          goto LABEL_173;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 16))
        {
          if (v53 < 1) {
            goto LABEL_897;
          }
          goto LABEL_222;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v505, 16))
        {
          if (v53 < 1) {
            goto LABEL_897;
          }
          goto LABEL_266;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 32))
        {
          if (v53 < 1) {
            goto LABEL_897;
          }
          goto LABEL_311;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v505, 32))
        {
          if (v53 < 1) {
            goto LABEL_897;
          }
          goto LABEL_350;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 64))
        {
          if (v53 < 1) {
            goto LABEL_897;
          }
          if ((unint64_t)v53 >= 0x10)
          {
            uint64_t v138 = v53 & 0x7FFFFFFFFFFFFFF0;
            uint64_t v177 = (int32x4_t *)(RawStringData + 64);
            v178 = v46 + 1;
            unint64_t v179 = v53 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              int16x8_t v180 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v177, v177[1]), (int16x8_t)vuzp1q_s32(v177[2], v177[3]));
              v178[-1] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v177[-4], v177[-3]), (int16x8_t)vuzp1q_s32(v177[-2], v177[-1]));
              int16x8_t *v178 = v180;
              v177 += 8;
              v178 += 2;
              v179 -= 16;
            }
            while (v179);
            if (v53 == v138) {
              goto LABEL_897;
            }
          }
          else
          {
            uint64_t v138 = 0;
          }
          int64_t v181 = v53 - v138;
          unint64_t v182 = &v46->i16[v138];
          uint64_t v183 = &RawStringData[8 * v138];
          do
          {
            uint64_t v184 = *(void *)v183;
            v183 += 8;
            *v182++ = v184;
            --v181;
          }
          while (v181);
          goto LABEL_897;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v505, 64))
        {
          if (v53 < 1) {
            goto LABEL_897;
          }
          if ((unint64_t)v53 >= 0x10)
          {
            uint64_t v157 = v53 & 0x7FFFFFFFFFFFFFF0;
            uint64_t v214 = (int32x4_t *)(RawStringData + 64);
            uint64_t v215 = v46 + 1;
            unint64_t v216 = v53 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              int16x8_t v217 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v214, v214[1]), (int16x8_t)vuzp1q_s32(v214[2], v214[3]));
              v215[-1] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v214[-4], v214[-3]), (int16x8_t)vuzp1q_s32(v214[-2], v214[-1]));
              *uint64_t v215 = v217;
              v214 += 8;
              v215 += 2;
              v216 -= 16;
            }
            while (v216);
            if (v53 == v157) {
              goto LABEL_897;
            }
          }
          else
          {
            uint64_t v157 = 0;
          }
          int64_t v218 = v53 - v157;
          v219 = &v46->i16[v157];
          v220 = &RawStringData[8 * v157];
          do
          {
            uint64_t v221 = *(void *)v220;
            v220 += 8;
            *v219++ = v221;
            --v218;
          }
          while (v218);
          goto LABEL_897;
        }
        if (mlir::Type::isF16((mlir::Type *)&v505))
        {
          if (v53 < 1) {
            goto LABEL_897;
          }
          goto LABEL_488;
        }
        if (mlir::Type::isF32((mlir::Type *)&v505))
        {
          if (v53 < 1) {
            goto LABEL_897;
          }
          if ((unint64_t)v53 >= 0x10)
          {
            uint64_t v203 = v53 & 0x7FFFFFFFFFFFFFF0;
            v298 = (float32x4_t *)(RawStringData + 32);
            v299 = v46 + 1;
            unint64_t v300 = v53 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              float32x4_t v301 = v298[-2];
              float32x4_t v302 = v298[-1];
              float32x4_t v303 = *v298;
              float32x4_t v304 = v298[1];
              v298 += 4;
              v299[-1] = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(v301), (int16x8_t)vcvtq_u32_f32(v302));
              int16x8_t *v299 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(v303), (int16x8_t)vcvtq_u32_f32(v304));
              v299 += 2;
              v300 -= 16;
            }
            while (v300);
            if (v53 == v203) {
              goto LABEL_897;
            }
          }
          else
          {
            uint64_t v203 = 0;
          }
          int64_t v305 = v53 - v203;
          v306 = &v46->i16[v203];
          v307 = (float *)&RawStringData[4 * v203];
          do
          {
            float v308 = *v307++;
            *v306++ = (int)v308;
            --v305;
          }
          while (v305);
          goto LABEL_897;
        }
        if (mlir::Type::isF64((mlir::Type *)&v505))
        {
          if (v53 < 1) {
            goto LABEL_897;
          }
          if ((unint64_t)v53 >= 0x10)
          {
            uint64_t v256 = v53 & 0x7FFFFFFFFFFFFFF0;
            v331 = (float64x2_t *)(RawStringData + 64);
            v332 = (int8x16_t *)&v46[1];
            unint64_t v333 = v53 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              float64x2_t v334 = v331[3];
              int32x2_t v335 = vmovn_s64(vcvtq_s64_f64(v331[-1]));
              int32x2_t v336 = vmovn_s64(vcvtq_s64_f64(v331[-2]));
              int32x2_t v337 = vmovn_s64(vcvtq_s64_f64(v331[-3]));
              int32x2_t v338 = vmovn_s64(vcvtq_s64_f64(v331[-4]));
              int8x16_t v339 = vqtbl4q_s8(*(int8x16x4_t *)(&v252 - 1), (int8x16_t)xmmword_181126CD0);
              int32x2_t v340 = vmovn_s64(vcvtq_s64_f64(v334));
              int32x2_t v341 = vmovn_s64(vcvtq_s64_f64(v331[2]));
              int32x2_t v342 = vmovn_s64(vcvtq_s64_f64(v331[1]));
              *(int32x2_t *)&v334.f64[0] = vmovn_s64(vcvtq_s64_f64(*v331));
              v332[-1] = v339;
              int8x16_t *v332 = vqtbl4q_s8(*(int8x16x4_t *)(&v252 - 3), (int8x16_t)xmmword_181126CD0);
              v331 += 8;
              v332 += 2;
              v333 -= 16;
            }
            while (v333);
            if (v53 == v256) {
              goto LABEL_897;
            }
          }
          else
          {
            uint64_t v256 = 0;
          }
          int64_t v343 = v53 - v256;
          v344 = &v46->i16[v256];
          v345 = (double *)&RawStringData[8 * v256];
          do
          {
            double v346 = *v345++;
            *v344++ = (int)v346;
            --v343;
          }
          while (v343);
          goto LABEL_897;
        }
        if (!mlir::Type::isBF16((mlir::Type *)&v505))
        {
LABEL_675:
          if (mlir::Type::isInteger((mlir::Type *)&v505, 1))
          {
            llvm::SmallVector<char,40u>::SmallVector((uint64_t)&v512, v53);
            mlir::detail::unpackBooleanData(RawStringData, v6, (uint64_t)v512, v513);
            uint64_t v205 = (char *)v512;
            if (v53 < 1) {
              goto LABEL_816;
            }
            if (v49)
            {
              if ((unint64_t)v53 < 8 || v46 < (int16x8_t *)((char *)v512 + 1) && v512 < (char *)v46 + 2 * v53)
              {
                unint64_t v291 = 0;
                goto LABEL_682;
              }
              if ((unint64_t)v53 >= 0x20)
              {
                unint64_t v291 = v53 & 0x7FFFFFFFFFFFFFE0;
                int8x8_t v448 = vld1_dup_s8((const char *)v512);
                int16x8_t v449 = vmovl_s8(v448);
                v450 = v46 + 2;
                unint64_t v451 = v53 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v450[-2] = v449;
                  v450[-1] = v449;
                  int16x8_t *v450 = v449;
                  v450[1] = v449;
                  v450 += 4;
                  v451 -= 32;
                }
                while (v451);
                if (v53 == v291) {
                  goto LABEL_816;
                }
                if ((v53 & 0x18) == 0)
                {
LABEL_682:
                  unint64_t v292 = v53 - v291;
                  v293 = &v46->i16[v291];
                  do
                  {
                    *v293++ = *v205;
                    --v292;
                  }
                  while (v292);
                  goto LABEL_816;
                }
              }
              else
              {
                unint64_t v291 = 0;
              }
              unint64_t v452 = v291;
              unint64_t v291 = v53 & 0xFFFFFFFFFFFFFFF8;
              int8x8_t v453 = vld1_dup_s8(v205);
              int16x8_t v454 = vmovl_s8(v453);
              v455 = (int16x8_t *)((char *)v46 + 2 * v452);
              unint64_t v456 = v452 - (v53 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                *v455++ = v454;
                v456 += 8;
              }
              while (v456);
              if (v53 == v291) {
                goto LABEL_816;
              }
              goto LABEL_682;
            }
            if ((unint64_t)v53 < 8 || v46 < (int16x8_t *)((char *)v512 + v53) && v512 < (char *)v46 + 2 * v53)
            {
              unint64_t v393 = 0;
              goto LABEL_780;
            }
            if ((unint64_t)v53 >= 0x20)
            {
              unint64_t v393 = v53 & 0x7FFFFFFFFFFFFFE0;
              v457 = (int8x8_t *)((char *)v512 + 16);
              v458 = v46 + 2;
              unint64_t v459 = v53 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                int8x16_t v460 = *(int8x16_t *)v457[-2].i8;
                int16x8_t v461 = vmovl_s8(*v457);
                int16x8_t v462 = vmovl_high_s8(*(int8x16_t *)v457->i8);
                v458[-2] = vmovl_s8(*(int8x8_t *)v460.i8);
                v458[-1] = vmovl_high_s8(v460);
                int16x8_t *v458 = v461;
                v458[1] = v462;
                v458 += 4;
                v457 += 4;
                v459 -= 32;
              }
              while (v459);
              if (v53 == v393) {
                goto LABEL_816;
              }
              if ((v53 & 0x18) == 0)
              {
LABEL_780:
                unint64_t v394 = v53 - v393;
                v395 = &v46->i16[v393];
                v396 = &v205[v393];
                do
                {
                  __int16 v397 = *v396++;
                  *v395++ = v397;
                  --v394;
                }
                while (v394);
                goto LABEL_816;
              }
            }
            else
            {
              unint64_t v393 = 0;
            }
            unint64_t v463 = v393;
            unint64_t v393 = v53 & 0xFFFFFFFFFFFFFFF8;
            v464 = (int8x8_t *)&v205[v463];
            v465 = (int16x8_t *)((char *)v46 + 2 * v463);
            unint64_t v466 = v463 - (v53 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              int8x8_t v467 = *v464++;
              *v465++ = vmovl_s8(v467);
              v466 += 8;
            }
            while (v466);
            if (v53 == v393) {
              goto LABEL_816;
            }
            goto LABEL_780;
          }
LABEL_721:
          mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v505);
          unsigned int v323 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v505);
          mlir::detail::unpackQuantizedData<unsigned short>(RawStringData, v6, (uint64_t)v46, v53, v323);
          goto LABEL_897;
        }
        if (v53 < 1) {
          goto LABEL_897;
        }
LABEL_664:
        for (uint64_t i7 = 0; i7 != v53; ++i7)
        {
          if (v49) {
            uint64_t v285 = 0;
          }
          else {
            uint64_t v285 = i7;
          }
          v46->i16[i7] = (int)COERCE_FLOAT(*(unsigned __int16 *)&RawStringData[2 * v285] << 16);
        }
        goto LABEL_897;
      }
      if (*(_UNKNOWN **)(*(void *)v50 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
        uint64_t v74 = v50;
      }
      else {
        uint64_t v74 = 0;
      }
      v512 = v74;
      if (v74)
      {
        uint64_t RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)&v512);
        uint64_t v6 = v75;
        if ((v49 & 1) == 0) {
          goto LABEL_137;
        }
      }
      else if ((v49 & 1) == 0)
      {
        goto LABEL_137;
      }
LABEL_59:
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 8))
      {
        int64_t v53 = 1;
LABEL_139:
        for (uint64_t i8 = 0; i8 != v53; ++i8)
        {
          if (v49) {
            uint64_t v77 = 0;
          }
          else {
            uint64_t v77 = i8;
          }
          v46->i16[i8] = RawStringData[v77];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v505, 8))
      {
        int64_t v53 = 1;
LABEL_173:
        for (uint64_t i9 = 0; i9 != v53; ++i9)
        {
          if (v49) {
            uint64_t v83 = 0;
          }
          else {
            uint64_t v83 = i9;
          }
          v46->i16[i9] = (char)RawStringData[v83];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 16))
      {
        int64_t v53 = 1;
LABEL_222:
        for (uint64_t i10 = 0; i10 != v53; ++i10)
        {
          if (v49) {
            uint64_t v93 = 0;
          }
          else {
            uint64_t v93 = i10;
          }
          v46->i16[i10] = *(_WORD *)&RawStringData[2 * v93];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v505, 16))
      {
        int64_t v53 = 1;
LABEL_266:
        for (uint64_t i11 = 0; i11 != v53; ++i11)
        {
          if (v49) {
            uint64_t v101 = 0;
          }
          else {
            uint64_t v101 = i11;
          }
          v46->i16[i11] = *(_WORD *)&RawStringData[2 * v101];
        }
        goto LABEL_897;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 32))
      {
        int64_t v53 = 1;
LABEL_311:
        if ((unint64_t)v53 >= 2)
        {
          uint64_t v126 = 0;
          unint64_t v111 = v53 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            if (v49) {
              uint64_t v127 = 0;
            }
            else {
              uint64_t v127 = v126;
            }
            if (v49) {
              uint64_t v128 = 0;
            }
            else {
              uint64_t v128 = v126 + 1;
            }
            int v129 = *(_DWORD *)&RawStringData[4 * v128];
            v130 = &v46->i16[v126];
            __int16 *v130 = *(_DWORD *)&RawStringData[4 * v127];
            v130[1] = v129;
            v126 += 2;
          }
          while (v126 != v111);
          goto LABEL_878;
        }
        unint64_t v111 = 0;
        do
        {
          if (v49) {
            unint64_t v488 = 0;
          }
          else {
            unint64_t v488 = v111;
          }
          v46->i16[v111++] = *(_DWORD *)&RawStringData[4 * v488];
LABEL_878:
          ;
        }
        while (v53 != v111);
        goto LABEL_897;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v505, 32))
      {
        int64_t v53 = 1;
LABEL_350:
        if ((unint64_t)v53 >= 2)
        {
          uint64_t v140 = 0;
          unint64_t v124 = v53 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            if (v49) {
              uint64_t v141 = 0;
            }
            else {
              uint64_t v141 = v140;
            }
            if (v49) {
              uint64_t v142 = 0;
            }
            else {
              uint64_t v142 = v140 + 1;
            }
            int v143 = *(_DWORD *)&RawStringData[4 * v142];
            uint64_t v144 = &v46->i16[v140];
            *uint64_t v144 = *(_DWORD *)&RawStringData[4 * v141];
            v144[1] = v143;
            v140 += 2;
          }
          while (v140 != v124);
          goto LABEL_884;
        }
        unint64_t v124 = 0;
        do
        {
          if (v49) {
            unint64_t v489 = 0;
          }
          else {
            unint64_t v489 = v124;
          }
          v46->i16[v124++] = *(_DWORD *)&RawStringData[4 * v489];
LABEL_884:
          ;
        }
        while (v53 != v124);
        goto LABEL_897;
      }
      if (!mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 64) && !mlir::Type::isInteger((mlir::Type *)&v505, 64))
      {
        if (mlir::Type::isF16((mlir::Type *)&v505))
        {
          int64_t v53 = 1;
LABEL_488:
          if ((unint64_t)v53 >= 2)
          {
            uint64_t v209 = 0;
            unint64_t v175 = v53 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              if (v49) {
                uint64_t v210 = 0;
              }
              else {
                uint64_t v210 = v209;
              }
              if (v49) {
                uint64_t v211 = 0;
              }
              else {
                uint64_t v211 = v209 + 1;
              }
              short float v212 = *(short float *)&RawStringData[2 * v211];
              v213 = &v46->i16[v209];
              __int16 *v213 = (int)*(short float *)&RawStringData[2 * v210];
              v213[1] = (int)v212;
              v209 += 2;
            }
            while (v209 != v175);
            goto LABEL_912;
          }
          unint64_t v175 = 0;
          do
          {
            if (v49) {
              unint64_t v499 = 0;
            }
            else {
              unint64_t v499 = v175;
            }
            v46->i16[v175++] = (int)*(short float *)&RawStringData[2 * v499];
LABEL_912:
            ;
          }
          while (v53 != v175);
          goto LABEL_897;
        }
        if (!mlir::Type::isF32((mlir::Type *)&v505))
        {
          if (!mlir::Type::isF64((mlir::Type *)&v505))
          {
            int64_t v53 = 1;
            if (!mlir::Type::isBF16((mlir::Type *)&v505)) {
              goto LABEL_675;
            }
            goto LABEL_664;
          }
LABEL_661:
          v46->i16[0] = (int)*(double *)RawStringData;
          goto LABEL_897;
        }
LABEL_604:
        v46->i16[0] = (int)*(float *)RawStringData;
        goto LABEL_897;
      }
LABEL_424:
      v46->i16[0] = *(void *)RawStringData;
      goto LABEL_897;
    }
    v512 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
    if (!mlir::Type::isInteger((mlir::Type *)&v512, 16))
    {
      v512 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v512, 32))
      {
        mlir::copyElementsAttrData<unsigned int>(v504, *((uint64_t *)&v504 + 1), (int32x4_t *)v509);
        goto LABEL_897;
      }
      v512 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
      if (mlir::Type::isInteger((mlir::Type *)&v512, 32))
      {
        mlir::copyElementsAttrData<int>(v504, *((uint64_t *)&v504 + 1), (int32x4_t *)v509);
        goto LABEL_897;
      }
      v512 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v512, 64))
      {
        mlir::copyElementsAttrData<unsigned long long>(v504, *((uint64_t *)&v504 + 1), v509);
        goto LABEL_897;
      }
      v512 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
      if (mlir::Type::isInteger((mlir::Type *)&v512, 64))
      {
        mlir::copyElementsAttrData<long long>(v504, *((uint64_t *)&v504 + 1), v509);
        goto LABEL_897;
      }
      v512 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
      if (mlir::Type::isF16((mlir::Type *)&v512))
      {
        mlir::copyElementsAttrData<half>(v504, *((uint64_t *)&v504 + 1), (float16x8_t *)v509);
        goto LABEL_897;
      }
      v512 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
      if (mlir::Type::isBF16((mlir::Type *)&v512))
      {
        mlir::copyElementsAttrData<__emulated_bf16>(v504, *((uint64_t *)&v504 + 1), (uint64_t)v509);
        goto LABEL_897;
      }
      v512 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
      if (mlir::Type::isF32((mlir::Type *)&v512))
      {
        mlir::copyElementsAttrData<float>(v504, *((uint64_t *)&v504 + 1), v509);
        goto LABEL_897;
      }
      v512 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
      if (mlir::Type::isF64((mlir::Type *)&v512))
      {
        mlir::copyElementsAttrData<double>(v504, *((uint64_t *)&v504 + 1), v509);
        goto LABEL_897;
      }
      v512 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
      if (mlir::Type::isInteger((mlir::Type *)&v512, 1))
      {
        if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v504))
        {
          unint64_t v164 = 1;
        }
        else
        {
          uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v501);
          unint64_t v164 = mlir::ShapedType::getNumElements(Value, v249);
        }
        llvm::SmallVector<char,40u>::SmallVector((uint64_t)&v512, v164);
        mlir::copyElementsAttrData<char>(v504, *((uint64_t *)&v504 + 1), (unsigned __int8 *)v512);
        mlir::detail::packBooleanData(v512, v513, (char *)v509, v510);
        uint64_t v205 = (char *)v512;
        if (v512 == v514) {
          goto LABEL_897;
        }
LABEL_817:
        free(v205);
        goto LABEL_897;
      }
      uint64_t v194 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v501);
      if (*(_UNKNOWN **)(*(void *)v194 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
        uint64_t v195 = (void *)v194;
      }
      else {
        uint64_t v195 = 0;
      }
      v512 = v195;
      if (v195)
      {
        *(void *)&long long v508 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v512);
        if (mlir::Type::isF32((mlir::Type *)&v508))
        {
          mlir::copyElementsAttrData<complex_support::complex_fp<float,(void *)0>>(v504, *((uint64_t *)&v504 + 1), (unint64_t)v509);
        }
        else
        {
          *(void *)&long long v508 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v512);
          mlir::Type::isF16((mlir::Type *)&v508);
          mlir::copyElementsAttrData<complex_support::complex_fp<half,(void *)0>>(v504, *((uint64_t *)&v504 + 1), (unint64_t)v509);
        }
      }
LABEL_897:
      v492 = v501;
      if (a5)
      {
        if (v501)
        {
          uint64_t v493 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v501 + 8);
          RawElementsAttr = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v492, v493, v509, v510, v494, v495, v496);
          if (RawElementsAttr) {
            goto LABEL_900;
          }
        }
        else
        {
          RawElementsAttr = (void *)mlir::DenseElementsAttr::getFromRawBuffer(0, 0, v509, v510, v36, v37, v38);
          if (RawElementsAttr)
          {
LABEL_900:
            mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*RawElementsAttr + 8);
            v497 = v509;
            if (v509 == v511) {
              return RawElementsAttr;
            }
            goto LABEL_903;
          }
        }
        v497 = v509;
        if (v509 == v511) {
          return RawElementsAttr;
        }
      }
      else
      {
        RawElementsAttr = mlir::createRawElementsAttr(v501, v509, (const void *)v510);
        v497 = v509;
        if (v509 == v511) {
          return RawElementsAttr;
        }
      }
LABEL_903:
      free(v497);
      return RawElementsAttr;
    }
    unsigned int v46 = (int16x8_t *)v509;
    long long v508 = v504;
    BOOL v58 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v508);
    char v59 = v58;
    if (v58) {
      BOOL v58 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v58 + 8);
    }
    v506 = v59;
    v507 = v58;
    uint64_t v505 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v506);
    int v60 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v508);
    unsigned int v61 = (void *)v508;
    if (mlir::DenseElementsAttr::classof(v508)) {
      int64_t v62 = v61;
    }
    else {
      int64_t v62 = 0;
    }
    v512 = v62;
    if (v62)
    {
      uint64_t RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v512);
      uint64_t v6 = v63;
      if (v60) {
        goto LABEL_85;
      }
LABEL_184:
      int64_t v53 = mlir::ElementsAttr::getNumElements(v508, *((uint64_t *)&v508 + 1));
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 8))
      {
        if (v53 < 1) {
          goto LABEL_897;
        }
        goto LABEL_186;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v505, 8))
      {
        if (v53 < 1) {
          goto LABEL_897;
        }
        goto LABEL_230;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 16))
      {
        if (v53 < 1) {
          goto LABEL_897;
        }
        goto LABEL_274;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v505, 16))
      {
        if (v53 < 1) {
          goto LABEL_897;
        }
        goto LABEL_315;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 32))
      {
        if (v53 < 1) {
          goto LABEL_897;
        }
        goto LABEL_354;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v505, 32))
      {
        if (v53 < 1) {
          goto LABEL_897;
        }
        goto LABEL_396;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 64))
      {
        if (v53 < 1) {
          goto LABEL_897;
        }
        if ((unint64_t)v53 >= 0x10)
        {
          uint64_t v158 = v53 & 0x7FFFFFFFFFFFFFF0;
          unint64_t v222 = (int32x4_t *)(RawStringData + 64);
          v223 = v46 + 1;
          unint64_t v224 = v53 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int16x8_t v225 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v222, v222[1]), (int16x8_t)vuzp1q_s32(v222[2], v222[3]));
            v223[-1] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v222[-4], v222[-3]), (int16x8_t)vuzp1q_s32(v222[-2], v222[-1]));
            int16x8_t *v223 = v225;
            v222 += 8;
            v223 += 2;
            v224 -= 16;
          }
          while (v224);
          if (v53 == v158) {
            goto LABEL_897;
          }
        }
        else
        {
          uint64_t v158 = 0;
        }
        int64_t v226 = v53 - v158;
        unint64_t v227 = &v46->i16[v158];
        v228 = &RawStringData[8 * v158];
        do
        {
          uint64_t v229 = *(void *)v228;
          v228 += 8;
          *v227++ = v229;
          --v226;
        }
        while (v226);
        goto LABEL_897;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v505, 64))
      {
        if (v53 < 1) {
          goto LABEL_897;
        }
        if ((unint64_t)v53 >= 0x10)
        {
          uint64_t v176 = v53 & 0x7FFFFFFFFFFFFFF0;
          uint64_t v267 = (int32x4_t *)(RawStringData + 64);
          v268 = v46 + 1;
          unint64_t v269 = v53 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int16x8_t v270 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v267, v267[1]), (int16x8_t)vuzp1q_s32(v267[2], v267[3]));
            v268[-1] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v267[-4], v267[-3]), (int16x8_t)vuzp1q_s32(v267[-2], v267[-1]));
            int16x8_t *v268 = v270;
            v267 += 8;
            v268 += 2;
            v269 -= 16;
          }
          while (v269);
          if (v53 == v176) {
            goto LABEL_897;
          }
        }
        else
        {
          uint64_t v176 = 0;
        }
        int64_t v271 = v53 - v176;
        v272 = &v46->i16[v176];
        int v273 = &RawStringData[8 * v176];
        do
        {
          uint64_t v274 = *(void *)v273;
          v273 += 8;
          *v272++ = v274;
          --v271;
        }
        while (v271);
        goto LABEL_897;
      }
      if (mlir::Type::isF16((mlir::Type *)&v505))
      {
        if (v53 < 1) {
          goto LABEL_897;
        }
        goto LABEL_549;
      }
      if (mlir::Type::isF32((mlir::Type *)&v505))
      {
        if (v53 < 1) {
          goto LABEL_897;
        }
        if ((unint64_t)v53 >= 0x10)
        {
          uint64_t v257 = v53 & 0x7FFFFFFFFFFFFFF0;
          v347 = (float32x4_t *)(RawStringData + 32);
          v348 = v46 + 1;
          unint64_t v349 = v53 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            float32x4_t v350 = v347[-2];
            float32x4_t v351 = v347[-1];
            float32x4_t v352 = *v347;
            float32x4_t v353 = v347[1];
            v347 += 4;
            v348[-1] = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v350), (int16x8_t)vcvtq_s32_f32(v351));
            int16x8_t *v348 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v352), (int16x8_t)vcvtq_s32_f32(v353));
            v348 += 2;
            v349 -= 16;
          }
          while (v349);
          if (v53 == v257) {
            goto LABEL_897;
          }
        }
        else
        {
          uint64_t v257 = 0;
        }
        int64_t v354 = v53 - v257;
        v355 = &v46->i16[v257];
        v356 = (float *)&RawStringData[4 * v257];
        do
        {
          float v357 = *v356++;
          *v355++ = (int)v357;
          --v354;
        }
        while (v354);
        goto LABEL_897;
      }
      if (mlir::Type::isF64((mlir::Type *)&v505))
      {
        if (v53 < 1) {
          goto LABEL_897;
        }
        if ((unint64_t)v53 >= 0x10)
        {
          uint64_t v290 = v53 & 0x7FFFFFFFFFFFFFF0;
          v377 = (float64x2_t *)(RawStringData + 64);
          v378 = (int8x16_t *)&v46[1];
          unint64_t v379 = v53 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            float64x2_t v380 = v377[3];
            int32x2_t v381 = vmovn_s64(vcvtq_s64_f64(v377[-1]));
            int32x2_t v382 = vmovn_s64(vcvtq_s64_f64(v377[-2]));
            int32x2_t v383 = vmovn_s64(vcvtq_s64_f64(v377[-3]));
            int32x2_t v384 = vmovn_s64(vcvtq_s64_f64(v377[-4]));
            int8x16_t v385 = vqtbl4q_s8(*(int8x16x4_t *)(&v286 - 1), (int8x16_t)xmmword_181126CD0);
            int32x2_t v386 = vmovn_s64(vcvtq_s64_f64(v380));
            int32x2_t v387 = vmovn_s64(vcvtq_s64_f64(v377[2]));
            int32x2_t v388 = vmovn_s64(vcvtq_s64_f64(v377[1]));
            *(int32x2_t *)&v380.f64[0] = vmovn_s64(vcvtq_s64_f64(*v377));
            v378[-1] = v385;
            int8x16_t *v378 = vqtbl4q_s8(*(int8x16x4_t *)(&v286 - 3), (int8x16_t)xmmword_181126CD0);
            v377 += 8;
            v378 += 2;
            v379 -= 16;
          }
          while (v379);
          if (v53 == v290) {
            goto LABEL_897;
          }
        }
        else
        {
          uint64_t v290 = 0;
        }
        int64_t v389 = v53 - v290;
        v390 = &v46->i16[v290];
        v391 = (double *)&RawStringData[8 * v290];
        do
        {
          double v392 = *v391++;
          *v390++ = (int)v392;
          --v389;
        }
        while (v389);
        goto LABEL_897;
      }
      if (!mlir::Type::isBF16((mlir::Type *)&v505))
      {
LABEL_722:
        if (!mlir::Type::isInteger((mlir::Type *)&v505, 1)) {
          goto LABEL_721;
        }
        llvm::SmallVector<char,40u>::SmallVector((uint64_t)&v512, v53);
        mlir::detail::unpackBooleanData(RawStringData, v6, (uint64_t)v512, v513);
        uint64_t v205 = (char *)v512;
        if (v53 < 1) {
          goto LABEL_816;
        }
        if (v60)
        {
          if ((unint64_t)v53 < 8 || v46 < (int16x8_t *)((char *)v512 + 1) && v512 < (char *)v46 + 2 * v53)
          {
            unint64_t v324 = 0;
            goto LABEL_729;
          }
          if ((unint64_t)v53 >= 0x20)
          {
            unint64_t v324 = v53 & 0x7FFFFFFFFFFFFFE0;
            int8x8_t v468 = vld1_dup_s8((const char *)v512);
            int16x8_t v469 = vmovl_s8(v468);
            v470 = v46 + 2;
            unint64_t v471 = v53 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v470[-2] = v469;
              v470[-1] = v469;
              int16x8_t *v470 = v469;
              v470[1] = v469;
              v470 += 4;
              v471 -= 32;
            }
            while (v471);
            if (v53 == v324) {
              goto LABEL_816;
            }
            if ((v53 & 0x18) == 0)
            {
LABEL_729:
              unint64_t v325 = v53 - v324;
              v326 = &v46->i16[v324];
              do
              {
                *v326++ = *v205;
                --v325;
              }
              while (v325);
              goto LABEL_816;
            }
          }
          else
          {
            unint64_t v324 = 0;
          }
          unint64_t v472 = v324;
          unint64_t v324 = v53 & 0xFFFFFFFFFFFFFFF8;
          int8x8_t v473 = vld1_dup_s8(v205);
          int16x8_t v474 = vmovl_s8(v473);
          v475 = (int16x8_t *)((char *)v46 + 2 * v472);
          unint64_t v476 = v472 - (v53 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *v475++ = v474;
            v476 += 8;
          }
          while (v476);
          if (v53 == v324) {
            goto LABEL_816;
          }
          goto LABEL_729;
        }
        if ((unint64_t)v53 < 8 || v46 < (int16x8_t *)((char *)v512 + v53) && v512 < (char *)v46 + 2 * v53)
        {
          unint64_t v416 = 0;
          goto LABEL_804;
        }
        if ((unint64_t)v53 >= 0x20)
        {
          unint64_t v416 = v53 & 0x7FFFFFFFFFFFFFE0;
          v477 = (int8x8_t *)((char *)v512 + 16);
          v478 = v46 + 2;
          unint64_t v479 = v53 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v480 = *(int8x16_t *)v477[-2].i8;
            int16x8_t v481 = vmovl_s8(*v477);
            int16x8_t v482 = vmovl_high_s8(*(int8x16_t *)v477->i8);
            v478[-2] = vmovl_s8(*(int8x8_t *)v480.i8);
            v478[-1] = vmovl_high_s8(v480);
            int16x8_t *v478 = v481;
            v478[1] = v482;
            v478 += 4;
            v477 += 4;
            v479 -= 32;
          }
          while (v479);
          if (v53 == v416) {
            goto LABEL_816;
          }
          if ((v53 & 0x18) == 0)
          {
LABEL_804:
            unint64_t v417 = v53 - v416;
            v418 = &v46->i16[v416];
            v419 = &v205[v416];
            do
            {
              __int16 v420 = *v419++;
              *v418++ = v420;
              --v417;
            }
            while (v417);
            goto LABEL_816;
          }
        }
        else
        {
          unint64_t v416 = 0;
        }
        unint64_t v483 = v416;
        unint64_t v416 = v53 & 0xFFFFFFFFFFFFFFF8;
        v484 = (int8x8_t *)&v205[v483];
        v485 = (int16x8_t *)((char *)v46 + 2 * v483);
        unint64_t v486 = v483 - (v53 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int8x8_t v487 = *v484++;
          *v485++ = vmovl_s8(v487);
          v486 += 8;
        }
        while (v486);
        if (v53 == v416) {
          goto LABEL_816;
        }
        goto LABEL_804;
      }
      if (v53 < 1) {
        goto LABEL_897;
      }
LABEL_715:
      for (uint64_t i12 = 0; i12 != v53; ++i12)
      {
        if (v60) {
          uint64_t v322 = 0;
        }
        else {
          uint64_t v322 = i12;
        }
        v46->i16[i12] = (int)COERCE_FLOAT(*(unsigned __int16 *)&RawStringData[2 * v322] << 16);
      }
      goto LABEL_897;
    }
    if (*(_UNKNOWN **)(*(void *)v61 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
      unint64_t v84 = v61;
    }
    else {
      unint64_t v84 = 0;
    }
    v512 = v84;
    if (v84)
    {
      uint64_t RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)&v512);
      uint64_t v6 = v85;
      if ((v60 & 1) == 0) {
        goto LABEL_184;
      }
    }
    else if ((v60 & 1) == 0)
    {
      goto LABEL_184;
    }
LABEL_85:
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 8))
    {
      int64_t v53 = 1;
LABEL_186:
      for (uint64_t i13 = 0; i13 != v53; ++i13)
      {
        if (v60) {
          uint64_t v87 = 0;
        }
        else {
          uint64_t v87 = i13;
        }
        v46->i16[i13] = RawStringData[v87];
      }
      goto LABEL_897;
    }
    if (mlir::Type::isInteger((mlir::Type *)&v505, 8))
    {
      int64_t v53 = 1;
LABEL_230:
      for (uint64_t i14 = 0; i14 != v53; ++i14)
      {
        if (v60) {
          uint64_t v95 = 0;
        }
        else {
          uint64_t v95 = i14;
        }
        v46->i16[i14] = (char)RawStringData[v95];
      }
      goto LABEL_897;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 16))
    {
      int64_t v53 = 1;
LABEL_274:
      for (uint64_t i15 = 0; i15 != v53; ++i15)
      {
        if (v60) {
          uint64_t v103 = 0;
        }
        else {
          uint64_t v103 = i15;
        }
        v46->i16[i15] = *(_WORD *)&RawStringData[2 * v103];
      }
      goto LABEL_897;
    }
    if (mlir::Type::isInteger((mlir::Type *)&v505, 16))
    {
      int64_t v53 = 1;
LABEL_315:
      for (uint64_t i16 = 0; i16 != v53; ++i16)
      {
        if (v60) {
          uint64_t v113 = 0;
        }
        else {
          uint64_t v113 = i16;
        }
        v46->i16[i16] = *(_WORD *)&RawStringData[2 * v113];
      }
      goto LABEL_897;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 32))
    {
      int64_t v53 = 1;
LABEL_354:
      if ((unint64_t)v53 >= 2)
      {
        uint64_t v145 = 0;
        unint64_t v125 = v53 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v60) {
            uint64_t v146 = 0;
          }
          else {
            uint64_t v146 = v145;
          }
          if (v60) {
            uint64_t v147 = 0;
          }
          else {
            uint64_t v147 = v145 + 1;
          }
          int v148 = *(_DWORD *)&RawStringData[4 * v147];
          v149 = &v46->i16[v145];
          __int16 *v149 = *(_DWORD *)&RawStringData[4 * v146];
          v149[1] = v148;
          v145 += 2;
        }
        while (v145 != v125);
        goto LABEL_890;
      }
      unint64_t v125 = 0;
      do
      {
        if (v60) {
          unint64_t v490 = 0;
        }
        else {
          unint64_t v490 = v125;
        }
        v46->i16[v125++] = *(_DWORD *)&RawStringData[4 * v490];
LABEL_890:
        ;
      }
      while (v53 != v125);
      goto LABEL_897;
    }
    if (mlir::Type::isInteger((mlir::Type *)&v505, 32))
    {
      int64_t v53 = 1;
LABEL_396:
      if ((unint64_t)v53 >= 2)
      {
        uint64_t v159 = 0;
        unint64_t v139 = v53 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v60) {
            uint64_t v160 = 0;
          }
          else {
            uint64_t v160 = v159;
          }
          if (v60) {
            uint64_t v161 = 0;
          }
          else {
            uint64_t v161 = v159 + 1;
          }
          int v162 = *(_DWORD *)&RawStringData[4 * v161];
          unint64_t v163 = &v46->i16[v159];
          *unint64_t v163 = *(_DWORD *)&RawStringData[4 * v160];
          v163[1] = v162;
          v159 += 2;
        }
        while (v159 != v139);
        goto LABEL_896;
      }
      unint64_t v139 = 0;
      do
      {
        if (v60) {
          unint64_t v491 = 0;
        }
        else {
          unint64_t v491 = v139;
        }
        v46->i16[v139++] = *(_DWORD *)&RawStringData[4 * v491];
LABEL_896:
        ;
      }
      while (v53 != v139);
      goto LABEL_897;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v505, 64) || mlir::Type::isInteger((mlir::Type *)&v505, 64)) {
      goto LABEL_424;
    }
    if (mlir::Type::isF16((mlir::Type *)&v505))
    {
      int64_t v53 = 1;
LABEL_549:
      if ((unint64_t)v53 >= 2)
      {
        uint64_t v262 = 0;
        unint64_t v204 = v53 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v60) {
            uint64_t v263 = 0;
          }
          else {
            uint64_t v263 = v262;
          }
          if (v60) {
            uint64_t v264 = 0;
          }
          else {
            uint64_t v264 = v262 + 1;
          }
          short float v265 = *(short float *)&RawStringData[2 * v264];
          uint64_t v266 = &v46->i16[v262];
          *uint64_t v266 = (int)*(short float *)&RawStringData[2 * v263];
          v266[1] = (int)v265;
          v262 += 2;
        }
        while (v262 != v204);
        goto LABEL_918;
      }
      unint64_t v204 = 0;
      do
      {
        if (v60) {
          unint64_t v500 = 0;
        }
        else {
          unint64_t v500 = v204;
        }
        v46->i16[v204++] = (int)*(short float *)&RawStringData[2 * v500];
LABEL_918:
        ;
      }
      while (v53 != v204);
      goto LABEL_897;
    }
    if (mlir::Type::isF32((mlir::Type *)&v505)) {
      goto LABEL_604;
    }
    if (mlir::Type::isF64((mlir::Type *)&v505)) {
      goto LABEL_661;
    }
    int64_t v53 = 1;
    if (!mlir::Type::isBF16((mlir::Type *)&v505)) {
      goto LABEL_722;
    }
    goto LABEL_715;
  }
  *(void *)&long long v504 = mlir::convertElementsAttr(v504, *((uint64_t *)&v504 + 1), a5);
  *((void *)&v504 + 1) = v22;
  long long v23 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v502);
  if (v15 == v24 && !memcmp(v13, v23, 8 * v15)) {
    return (void *)v504;
  }
  long long v25 = v504;
  if (v501) {
    uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v501 + 8);
  }
  else {
    uint64_t v26 = 0;
  }
  return mlir::reshapeElementsAttr(v25, *((uint64_t *)&v25 + 1), (uint64_t)v501, v26);
}

float mlir::copyElementsAttrData<unsigned int>(uint64_t a1, uint64_t a2, int32x4_t *a3)
{
  v141[5] = *MEMORY[0x1E4F143B8];
  uint64_t v138 = a1;
  uint64_t v139 = a2;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v138);
  uint64_t v7 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  v137[0] = v7;
  v137[1] = Type;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v137);
  int v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v138);
  uint64_t v9 = v138;
  if (mlir::DenseElementsAttr::classof(v138)) {
    uint64_t v10 = (void *)v9;
  }
  else {
    uint64_t v10 = 0;
  }
  v140[0] = v10;
  if (!v10)
  {
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
      uint64_t v14 = (void *)v9;
    }
    else {
      uint64_t v14 = 0;
    }
    v140[0] = v14;
    if (v14)
    {
      MutableRawData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v140);
      uint64_t v4 = v15;
      if ((v8 & 1) == 0) {
        goto LABEL_15;
      }
    }
    else if ((v8 & 1) == 0)
    {
      goto LABEL_15;
    }
LABEL_8:
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_17:
      for (uint64_t i = 0; i != NumElements; ++i)
      {
        if (v8) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = i;
        }
        a3->i32[i] = MutableRawData[v17];
      }
      return *(float *)v12.i32;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_27:
      for (uint64_t j = 0; j != NumElements; ++j)
      {
        if (v8) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = j;
        }
        a3->i32[j] = (char)MutableRawData[v19];
      }
      return *(float *)v12.i32;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_39:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v22 = 0;
        unint64_t v20 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = v22;
          }
          if (v8) {
            uint64_t v24 = 0;
          }
          else {
            uint64_t v24 = v22 + 1;
          }
          int v25 = *(unsigned __int16 *)&MutableRawData[2 * v24];
          uint64_t v26 = &a3->i32[v22];
          __int32 *v26 = *(unsigned __int16 *)&MutableRawData[2 * v23];
          v26[1] = v25;
          v22 += 2;
        }
        while (v22 != v20);
        goto LABEL_205;
      }
      unint64_t v20 = 0;
      do
      {
        if (v8) {
          unint64_t v131 = 0;
        }
        else {
          unint64_t v131 = v20;
        }
        a3->i32[v20++] = *(unsigned __int16 *)&MutableRawData[2 * v131];
LABEL_205:
        ;
      }
      while (NumElements != v20);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_45:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v29 = 0;
        unint64_t v21 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = v29;
          }
          if (v8) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = v29 + 1;
          }
          int v32 = *(__int16 *)&MutableRawData[2 * v31];
          BOOL v33 = &a3->i32[v29];
          *BOOL v33 = *(__int16 *)&MutableRawData[2 * v30];
          v33[1] = v32;
          v29 += 2;
        }
        while (v29 != v21);
        goto LABEL_211;
      }
      unint64_t v21 = 0;
      do
      {
        if (v8) {
          unint64_t v132 = 0;
        }
        else {
          unint64_t v132 = v21;
        }
        a3->i32[v21++] = *(__int16 *)&MutableRawData[2 * v132];
LABEL_211:
        ;
      }
      while (NumElements != v21);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_60:
      for (uint64_t k = 0; k != NumElements; ++k)
      {
        if (v8) {
          uint64_t v28 = 0;
        }
        else {
          uint64_t v28 = k;
        }
        a3->i32[k] = *(_DWORD *)&MutableRawData[4 * v28];
      }
      return *(float *)v12.i32;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_79:
      for (uint64_t m = 0; m != NumElements; ++m)
      {
        if (v8) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = m;
        }
        a3->i32[m] = *(_DWORD *)&MutableRawData[4 * v35];
      }
      return *(float *)v12.i32;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
      || mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      a3->i32[0] = *(void *)MutableRawData;
      return *(float *)v12.i32;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      int64_t NumElements = 1;
LABEL_100:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v51 = 0;
        unint64_t v38 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v52 = 0;
          }
          else {
            uint64_t v52 = v51;
          }
          if (v8) {
            uint64_t v53 = 0;
          }
          else {
            uint64_t v53 = v51 + 1;
          }
          v12.i16[0] = *(_WORD *)&MutableRawData[2 * v52];
          unsigned int v54 = *(short float *)&MutableRawData[2 * v53];
          uint64_t v55 = &a3->i32[v51];
          *uint64_t v55 = *(short float *)v12.i16;
          v55[1] = v54;
          v51 += 2;
        }
        while (v51 != v38);
        goto LABEL_217;
      }
      unint64_t v38 = 0;
      do
      {
        if (v8) {
          unint64_t v133 = 0;
        }
        else {
          unint64_t v133 = v38;
        }
        v12.i16[0] = *(_WORD *)&MutableRawData[2 * v133];
        a3->i32[v38++] = *(short float *)v12.i16;
LABEL_217:
        ;
      }
      while (NumElements != v38);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      v12.i32[0] = *(_DWORD *)MutableRawData;
      a3->i32[0] = *(float *)MutableRawData;
      return *(float *)v12.i32;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      v12.i64[0] = *(void *)MutableRawData;
      a3->i32[0] = *(double *)MutableRawData;
      return *(float *)v12.i32;
    }
    int64_t NumElements = 1;
    if (!mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
      goto LABEL_141;
    }
    goto LABEL_139;
  }
  MutableRawData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v140);
  uint64_t v4 = v11;
  if (v8) {
    goto LABEL_8;
  }
LABEL_15:
  int64_t NumElements = mlir::ElementsAttr::getNumElements(v138, v139);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_17;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_27;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_39;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_45;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_60;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_79;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements >= 8)
    {
      uint64_t v36 = NumElements & 0x7FFFFFFFFFFFFFF8;
      BOOL v39 = (int32x4_t *)(MutableRawData + 32);
      char v40 = a3 + 1;
      unint64_t v41 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        int32x4_t v43 = v39[-2];
        int32x4_t v42 = v39[-1];
        int32x4_t v45 = *v39;
        int32x4_t v44 = v39[1];
        v39 += 4;
        int32x4_t v12 = vuzp1q_s32(v43, v42);
        v40[-1] = v12;
        int32x4_t *v40 = vuzp1q_s32(v45, v44);
        v40 += 2;
        v41 -= 8;
      }
      while (v41);
      if (NumElements == v36) {
        return *(float *)v12.i32;
      }
    }
    else
    {
      uint64_t v36 = 0;
    }
    unsigned int v46 = &MutableRawData[8 * v36];
    int64_t v47 = NumElements - v36;
    uint64_t v48 = &a3->i32[v36];
    do
    {
      uint64_t v49 = *(void *)v46;
      v46 += 8;
      *v48++ = v49;
      --v47;
    }
    while (v47);
    return *(float *)v12.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements >= 8)
    {
      uint64_t v37 = NumElements & 0x7FFFFFFFFFFFFFF8;
      unsigned int v56 = (int32x4_t *)(MutableRawData + 32);
      uint64_t v57 = a3 + 1;
      unint64_t v58 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        int32x4_t v60 = v56[-2];
        int32x4_t v59 = v56[-1];
        int32x4_t v62 = *v56;
        int32x4_t v61 = v56[1];
        v56 += 4;
        int32x4_t v12 = vuzp1q_s32(v60, v59);
        v57[-1] = v12;
        int32x4_t *v57 = vuzp1q_s32(v62, v61);
        v57 += 2;
        v58 -= 8;
      }
      while (v58);
      if (NumElements == v37) {
        return *(float *)v12.i32;
      }
    }
    else
    {
      uint64_t v37 = 0;
    }
    uint64_t v63 = &MutableRawData[8 * v37];
    int64_t v64 = NumElements - v37;
    uint64_t v65 = &a3->i32[v37];
    do
    {
      uint64_t v66 = *(void *)v63;
      v63 += 8;
      *v65++ = v66;
      --v64;
    }
    while (v64);
    return *(float *)v12.i32;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_100;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements >= 8)
    {
      uint64_t v50 = NumElements & 0x7FFFFFFFFFFFFFF8;
      uint64_t v73 = (float32x4_t *)(MutableRawData + 16);
      uint64_t v74 = (uint32x4_t *)&a3[1];
      unint64_t v75 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        int32x4_t v12 = (int32x4_t)vcvtq_u32_f32(v73[-1]);
        uint32x4_t v76 = vcvtq_u32_f32(*v73);
        v74[-1] = (uint32x4_t)v12;
        *uint64_t v74 = v76;
        v73 += 2;
        v74 += 2;
        v75 -= 8;
      }
      while (v75);
      if (NumElements == v50) {
        return *(float *)v12.i32;
      }
    }
    else
    {
      uint64_t v50 = 0;
    }
    uint64_t v77 = v50;
    uint64_t v78 = (float *)&MutableRawData[4 * v50];
    int64_t v79 = NumElements - v50;
    unint64_t v80 = &a3->i32[v77];
    do
    {
      float v81 = *v78++;
      *(float *)v12.i32 = v81;
      *v80++ = v81;
      --v79;
    }
    while (v79);
    return *(float *)v12.i32;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements >= 8)
    {
      uint64_t v67 = NumElements & 0x7FFFFFFFFFFFFFF8;
      uint64_t v87 = (float64x2_t *)(MutableRawData + 32);
      uint64_t v88 = a3 + 1;
      unint64_t v89 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float64x2_t v90 = v87[-2];
        float64x2_t v91 = v87[-1];
        float64x2_t v92 = *v87;
        float64x2_t v93 = v87[1];
        v87 += 4;
        int32x4_t v12 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(v90), (int32x4_t)vcvtq_u64_f64(v91));
        v88[-1] = v12;
        int32x4_t *v88 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(v92), (int32x4_t)vcvtq_u64_f64(v93));
        v88 += 2;
        v89 -= 8;
      }
      while (v89);
      if (NumElements == v67) {
        return *(float *)v12.i32;
      }
    }
    else
    {
      uint64_t v67 = 0;
    }
    unint64_t v94 = (double *)&MutableRawData[8 * v67];
    int64_t v95 = NumElements - v67;
    BOOL v96 = &a3->i32[v67];
    do
    {
      double v97 = *v94++;
      v12.i32[0] = LODWORD(v97);
      *v96++ = v97;
      --v95;
    }
    while (v95);
    return *(float *)v12.i32;
  }
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
LABEL_141:
    if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<unsigned int>(MutableRawData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
      return *(float *)v12.i32;
    }
    llvm::SmallVector<char,40u>::SmallVector((uint64_t)v140, NumElements);
    mlir::detail::unpackBooleanData(MutableRawData, v4, (uint64_t)v140[0], (unint64_t)v140[1]);
    uint64_t v69 = (char *)v140[0];
    if (NumElements < 1) {
      goto LABEL_179;
    }
    if (v8)
    {
      if ((unint64_t)NumElements < 8
        || (char *)v140[0] + 1 > (char *)a3 && v140[0] < (char *)a3 + 4 * NumElements)
      {
        unint64_t v70 = 0;
        goto LABEL_148;
      }
      if ((unint64_t)NumElements >= 0x20)
      {
        int8x8_t v103 = vld1_dup_s8((const char *)v140[0]);
        unint64_t v70 = NumElements & 0xFFFFFFFFFFFFFFE0;
        int16x8_t v104 = vmovl_s8(v103);
        int32x4_t v12 = vmovl_high_s16(v104);
        int32x4_t v105 = vmovl_s16(*(int16x4_t *)v104.i8);
        long long v106 = a3 + 4;
        unint64_t v107 = NumElements & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v106[-4] = v105;
          v106[-3] = v12;
          v106[-2] = v105;
          v106[-1] = v12;
          *long long v106 = v105;
          v106[1] = v12;
          v106[2] = v105;
          v106[3] = v12;
          v106 += 8;
          v107 -= 32;
        }
        while (v107);
        if (NumElements == v70) {
          goto LABEL_179;
        }
        if ((NumElements & 0x18) == 0)
        {
LABEL_148:
          unint64_t v71 = NumElements - v70;
          uint64_t v72 = &a3->i32[v70];
          do
          {
            *v72++ = *v69;
            --v71;
          }
          while (v71);
          goto LABEL_179;
        }
      }
      else
      {
        unint64_t v70 = 0;
      }
      unint64_t v108 = v70;
      int8x8_t v109 = vld1_dup_s8(v69);
      unint64_t v70 = NumElements & 0xFFFFFFFFFFFFFFF8;
      int16x8_t v110 = vmovl_s8(v109);
      int32x4_t v12 = vmovl_high_s16(v110);
      int32x4_t v111 = vmovl_s16(*(int16x4_t *)v110.i8);
      unint64_t v112 = (int32x4_t *)((char *)a3 + 4 * v108);
      unint64_t v113 = v108 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int32x4_t *v112 = v111;
        v112[1] = v12;
        v112 += 2;
        v113 += 8;
      }
      while (v113);
      if (NumElements != v70) {
        goto LABEL_148;
      }
LABEL_179:
      if (v69 != (char *)v141) {
        free(v69);
      }
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements < 8
      || (char *)v140[0] + NumElements > (char *)a3 && v140[0] < (char *)a3 + 4 * NumElements)
    {
      unint64_t v98 = 0;
      goto LABEL_177;
    }
    if ((unint64_t)NumElements >= 0x20)
    {
      unint64_t v98 = NumElements & 0x7FFFFFFFFFFFFFE0;
      unint64_t v114 = (int8x8_t *)((char *)v140[0] + 16);
      unint64_t v115 = a3 + 4;
      unint64_t v116 = NumElements & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v117 = *(int8x16_t *)v114[-2].i8;
        int8x16_t v118 = *(int8x16_t *)v114->i8;
        int16x8_t v119 = vmovl_s8(*(int8x8_t *)v117.i8);
        int16x8_t v120 = vmovl_high_s8(v117);
        int16x8_t v121 = vmovl_s8(*v114);
        v115[-2] = vmovl_s16(*(int16x4_t *)v120.i8);
        v115[-1] = vmovl_high_s16(v120);
        int16x8_t v122 = vmovl_high_s8(v118);
        int32x4_t v123 = vmovl_s16(*(int16x4_t *)v122.i8);
        v115[-4] = vmovl_s16(*(int16x4_t *)v119.i8);
        v115[-3] = vmovl_high_s16(v119);
        int32x4_t v12 = vmovl_high_s16(v122);
        v115[2] = v123;
        v115[3] = v12;
        int32x4_t *v115 = vmovl_s16(*(int16x4_t *)v121.i8);
        v115[1] = vmovl_high_s16(v121);
        v115 += 8;
        v114 += 4;
        v116 -= 32;
      }
      while (v116);
      if (NumElements == v98) {
        goto LABEL_179;
      }
      if ((NumElements & 0x18) == 0)
      {
LABEL_177:
        uint64_t v99 = &v69[v98];
        unint64_t v100 = NumElements - v98;
        uint64_t v101 = &a3->i32[v98];
        do
        {
          int v102 = *v99++;
          *v101++ = v102;
          --v100;
        }
        while (v100);
        goto LABEL_179;
      }
    }
    else
    {
      unint64_t v98 = 0;
    }
    unint64_t v124 = v98;
    unint64_t v98 = NumElements & 0xFFFFFFFFFFFFFFF8;
    unint64_t v125 = (int8x8_t *)&v69[v124];
    uint64_t v126 = (int32x4_t *)((char *)a3 + 4 * v124);
    unint64_t v127 = v124 - (NumElements & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v128 = *v125++;
      int16x8_t v129 = vmovl_s8(v128);
      int32x4_t v130 = vmovl_s16(*(int16x4_t *)v129.i8);
      int32x4_t v12 = vmovl_high_s16(v129);
      *uint64_t v126 = v130;
      v126[1] = v12;
      v126 += 2;
      v127 += 8;
    }
    while (v127);
    if (NumElements == v98) {
      goto LABEL_179;
    }
    goto LABEL_177;
  }
  if (NumElements < 1) {
    return *(float *)v12.i32;
  }
LABEL_139:
  if ((unint64_t)NumElements >= 2)
  {
    uint64_t v83 = 0;
    unint64_t v68 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v84 = (uint64_t *)a3;
    do
    {
      if (v8) {
        uint64_t v85 = 0;
      }
      else {
        uint64_t v85 = v83;
      }
      if (v8) {
        uint64_t v86 = 0;
      }
      else {
        uint64_t v86 = v83 + 1;
      }
      v12.i16[0] = *(_WORD *)&MutableRawData[2 * v85];
      v12.i16[2] = *(_WORD *)&MutableRawData[2 * v86];
      *(uint32x2_t *)v12.uint64_t i8 = vcvt_u32_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)v12.i8, 0x10uLL));
      *v84++ = v12.i64[0];
      v83 += 2;
    }
    while (v83 != v68);
    goto LABEL_223;
  }
  unint64_t v68 = 0;
  do
  {
    if (v8) {
      unint64_t v134 = 0;
    }
    else {
      unint64_t v134 = v68;
    }
    v12.i32[0] = *(unsigned __int16 *)&MutableRawData[2 * v134] << 16;
    a3->i32[v68++] = *(float *)v12.i32;
LABEL_223:
    ;
  }
  while (NumElements != v68);
  return *(float *)v12.i32;
}

float mlir::copyElementsAttrData<int>(uint64_t a1, uint64_t a2, int32x4_t *a3)
{
  v141[5] = *MEMORY[0x1E4F143B8];
  uint64_t v138 = a1;
  uint64_t v139 = a2;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v138);
  uint64_t v7 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  v137[0] = v7;
  v137[1] = Type;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v137);
  int v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v138);
  uint64_t v9 = v138;
  if (mlir::DenseElementsAttr::classof(v138)) {
    uint64_t v10 = (void *)v9;
  }
  else {
    uint64_t v10 = 0;
  }
  v140[0] = v10;
  if (!v10)
  {
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
      uint64_t v14 = (void *)v9;
    }
    else {
      uint64_t v14 = 0;
    }
    v140[0] = v14;
    if (v14)
    {
      MutableRawData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v140);
      uint64_t v4 = v15;
      if ((v8 & 1) == 0) {
        goto LABEL_15;
      }
    }
    else if ((v8 & 1) == 0)
    {
      goto LABEL_15;
    }
LABEL_8:
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_17:
      for (uint64_t i = 0; i != NumElements; ++i)
      {
        if (v8) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = i;
        }
        a3->i32[i] = MutableRawData[v17];
      }
      return *(float *)v12.i32;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_27:
      for (uint64_t j = 0; j != NumElements; ++j)
      {
        if (v8) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = j;
        }
        a3->i32[j] = (char)MutableRawData[v19];
      }
      return *(float *)v12.i32;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_39:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v22 = 0;
        unint64_t v20 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = v22;
          }
          if (v8) {
            uint64_t v24 = 0;
          }
          else {
            uint64_t v24 = v22 + 1;
          }
          int v25 = *(unsigned __int16 *)&MutableRawData[2 * v24];
          uint64_t v26 = &a3->i32[v22];
          __int32 *v26 = *(unsigned __int16 *)&MutableRawData[2 * v23];
          v26[1] = v25;
          v22 += 2;
        }
        while (v22 != v20);
        goto LABEL_205;
      }
      unint64_t v20 = 0;
      do
      {
        if (v8) {
          unint64_t v131 = 0;
        }
        else {
          unint64_t v131 = v20;
        }
        a3->i32[v20++] = *(unsigned __int16 *)&MutableRawData[2 * v131];
LABEL_205:
        ;
      }
      while (NumElements != v20);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_45:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v29 = 0;
        unint64_t v21 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = v29;
          }
          if (v8) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = v29 + 1;
          }
          int v32 = *(__int16 *)&MutableRawData[2 * v31];
          BOOL v33 = &a3->i32[v29];
          *BOOL v33 = *(__int16 *)&MutableRawData[2 * v30];
          v33[1] = v32;
          v29 += 2;
        }
        while (v29 != v21);
        goto LABEL_211;
      }
      unint64_t v21 = 0;
      do
      {
        if (v8) {
          unint64_t v132 = 0;
        }
        else {
          unint64_t v132 = v21;
        }
        a3->i32[v21++] = *(__int16 *)&MutableRawData[2 * v132];
LABEL_211:
        ;
      }
      while (NumElements != v21);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_60:
      for (uint64_t k = 0; k != NumElements; ++k)
      {
        if (v8) {
          uint64_t v28 = 0;
        }
        else {
          uint64_t v28 = k;
        }
        a3->i32[k] = *(_DWORD *)&MutableRawData[4 * v28];
      }
      return *(float *)v12.i32;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_79:
      for (uint64_t m = 0; m != NumElements; ++m)
      {
        if (v8) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = m;
        }
        a3->i32[m] = *(_DWORD *)&MutableRawData[4 * v35];
      }
      return *(float *)v12.i32;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
      || mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      a3->i32[0] = *(void *)MutableRawData;
      return *(float *)v12.i32;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      int64_t NumElements = 1;
LABEL_100:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v51 = 0;
        unint64_t v38 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v52 = 0;
          }
          else {
            uint64_t v52 = v51;
          }
          if (v8) {
            uint64_t v53 = 0;
          }
          else {
            uint64_t v53 = v51 + 1;
          }
          v12.i16[0] = *(_WORD *)&MutableRawData[2 * v52];
          int v54 = (int)*(short float *)&MutableRawData[2 * v53];
          uint64_t v55 = &a3->i32[v51];
          *uint64_t v55 = (int)*(short float *)v12.i16;
          v55[1] = v54;
          v51 += 2;
        }
        while (v51 != v38);
        goto LABEL_217;
      }
      unint64_t v38 = 0;
      do
      {
        if (v8) {
          unint64_t v133 = 0;
        }
        else {
          unint64_t v133 = v38;
        }
        v12.i16[0] = *(_WORD *)&MutableRawData[2 * v133];
        a3->i32[v38++] = (int)*(short float *)v12.i16;
LABEL_217:
        ;
      }
      while (NumElements != v38);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      v12.i32[0] = *(_DWORD *)MutableRawData;
      a3->i32[0] = (int)*(float *)MutableRawData;
      return *(float *)v12.i32;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      v12.i64[0] = *(void *)MutableRawData;
      a3->i32[0] = (int)*(double *)MutableRawData;
      return *(float *)v12.i32;
    }
    int64_t NumElements = 1;
    if (!mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
      goto LABEL_141;
    }
    goto LABEL_139;
  }
  MutableRawData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v140);
  uint64_t v4 = v11;
  if (v8) {
    goto LABEL_8;
  }
LABEL_15:
  int64_t NumElements = mlir::ElementsAttr::getNumElements(v138, v139);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_17;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_27;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_39;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_45;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_60;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_79;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements >= 8)
    {
      uint64_t v36 = NumElements & 0x7FFFFFFFFFFFFFF8;
      BOOL v39 = (int32x4_t *)(MutableRawData + 32);
      char v40 = a3 + 1;
      unint64_t v41 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        int32x4_t v43 = v39[-2];
        int32x4_t v42 = v39[-1];
        int32x4_t v45 = *v39;
        int32x4_t v44 = v39[1];
        v39 += 4;
        int32x4_t v12 = vuzp1q_s32(v43, v42);
        v40[-1] = v12;
        int32x4_t *v40 = vuzp1q_s32(v45, v44);
        v40 += 2;
        v41 -= 8;
      }
      while (v41);
      if (NumElements == v36) {
        return *(float *)v12.i32;
      }
    }
    else
    {
      uint64_t v36 = 0;
    }
    unsigned int v46 = &MutableRawData[8 * v36];
    int64_t v47 = NumElements - v36;
    uint64_t v48 = &a3->i32[v36];
    do
    {
      uint64_t v49 = *(void *)v46;
      v46 += 8;
      *v48++ = v49;
      --v47;
    }
    while (v47);
    return *(float *)v12.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements >= 8)
    {
      uint64_t v37 = NumElements & 0x7FFFFFFFFFFFFFF8;
      unsigned int v56 = (int32x4_t *)(MutableRawData + 32);
      uint64_t v57 = a3 + 1;
      unint64_t v58 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        int32x4_t v60 = v56[-2];
        int32x4_t v59 = v56[-1];
        int32x4_t v62 = *v56;
        int32x4_t v61 = v56[1];
        v56 += 4;
        int32x4_t v12 = vuzp1q_s32(v60, v59);
        v57[-1] = v12;
        int32x4_t *v57 = vuzp1q_s32(v62, v61);
        v57 += 2;
        v58 -= 8;
      }
      while (v58);
      if (NumElements == v37) {
        return *(float *)v12.i32;
      }
    }
    else
    {
      uint64_t v37 = 0;
    }
    uint64_t v63 = &MutableRawData[8 * v37];
    int64_t v64 = NumElements - v37;
    uint64_t v65 = &a3->i32[v37];
    do
    {
      uint64_t v66 = *(void *)v63;
      v63 += 8;
      *v65++ = v66;
      --v64;
    }
    while (v64);
    return *(float *)v12.i32;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_100;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements >= 8)
    {
      uint64_t v50 = NumElements & 0x7FFFFFFFFFFFFFF8;
      uint64_t v73 = (float32x4_t *)(MutableRawData + 16);
      uint64_t v74 = a3 + 1;
      unint64_t v75 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        int32x4_t v12 = vcvtq_s32_f32(v73[-1]);
        int32x4_t v76 = vcvtq_s32_f32(*v73);
        v74[-1] = v12;
        *uint64_t v74 = v76;
        v73 += 2;
        v74 += 2;
        v75 -= 8;
      }
      while (v75);
      if (NumElements == v50) {
        return *(float *)v12.i32;
      }
    }
    else
    {
      uint64_t v50 = 0;
    }
    uint64_t v77 = v50;
    uint64_t v78 = (float *)&MutableRawData[4 * v50];
    int64_t v79 = NumElements - v50;
    unint64_t v80 = &a3->i32[v77];
    do
    {
      float v81 = *v78++;
      *(float *)v12.i32 = v81;
      *v80++ = (int)v81;
      --v79;
    }
    while (v79);
    return *(float *)v12.i32;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements >= 8)
    {
      uint64_t v67 = NumElements & 0x7FFFFFFFFFFFFFF8;
      uint64_t v87 = (float64x2_t *)(MutableRawData + 32);
      uint64_t v88 = a3 + 1;
      unint64_t v89 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float64x2_t v90 = v87[-2];
        float64x2_t v91 = v87[-1];
        float64x2_t v92 = *v87;
        float64x2_t v93 = v87[1];
        v87 += 4;
        int32x4_t v12 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v90), (int32x4_t)vcvtq_s64_f64(v91));
        v88[-1] = v12;
        int32x4_t *v88 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v92), (int32x4_t)vcvtq_s64_f64(v93));
        v88 += 2;
        v89 -= 8;
      }
      while (v89);
      if (NumElements == v67) {
        return *(float *)v12.i32;
      }
    }
    else
    {
      uint64_t v67 = 0;
    }
    unint64_t v94 = (double *)&MutableRawData[8 * v67];
    int64_t v95 = NumElements - v67;
    BOOL v96 = &a3->i32[v67];
    do
    {
      double v97 = *v94++;
      v12.i32[0] = LODWORD(v97);
      *v96++ = (int)v97;
      --v95;
    }
    while (v95);
    return *(float *)v12.i32;
  }
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
LABEL_141:
    if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<int>(MutableRawData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
      return *(float *)v12.i32;
    }
    llvm::SmallVector<char,40u>::SmallVector((uint64_t)v140, NumElements);
    mlir::detail::unpackBooleanData(MutableRawData, v4, (uint64_t)v140[0], (unint64_t)v140[1]);
    uint64_t v69 = (char *)v140[0];
    if (NumElements < 1) {
      goto LABEL_179;
    }
    if (v8)
    {
      if ((unint64_t)NumElements < 8
        || (char *)v140[0] + 1 > (char *)a3 && v140[0] < (char *)a3 + 4 * NumElements)
      {
        unint64_t v70 = 0;
        goto LABEL_148;
      }
      if ((unint64_t)NumElements >= 0x20)
      {
        int8x8_t v103 = vld1_dup_s8((const char *)v140[0]);
        unint64_t v70 = NumElements & 0xFFFFFFFFFFFFFFE0;
        int16x8_t v104 = vmovl_s8(v103);
        int32x4_t v12 = vmovl_high_s16(v104);
        int32x4_t v105 = vmovl_s16(*(int16x4_t *)v104.i8);
        long long v106 = a3 + 4;
        unint64_t v107 = NumElements & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v106[-4] = v105;
          v106[-3] = v12;
          v106[-2] = v105;
          v106[-1] = v12;
          *long long v106 = v105;
          v106[1] = v12;
          v106[2] = v105;
          v106[3] = v12;
          v106 += 8;
          v107 -= 32;
        }
        while (v107);
        if (NumElements == v70) {
          goto LABEL_179;
        }
        if ((NumElements & 0x18) == 0)
        {
LABEL_148:
          unint64_t v71 = NumElements - v70;
          uint64_t v72 = &a3->i32[v70];
          do
          {
            *v72++ = *v69;
            --v71;
          }
          while (v71);
          goto LABEL_179;
        }
      }
      else
      {
        unint64_t v70 = 0;
      }
      unint64_t v108 = v70;
      int8x8_t v109 = vld1_dup_s8(v69);
      unint64_t v70 = NumElements & 0xFFFFFFFFFFFFFFF8;
      int16x8_t v110 = vmovl_s8(v109);
      int32x4_t v12 = vmovl_high_s16(v110);
      int32x4_t v111 = vmovl_s16(*(int16x4_t *)v110.i8);
      unint64_t v112 = (int32x4_t *)((char *)a3 + 4 * v108);
      unint64_t v113 = v108 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int32x4_t *v112 = v111;
        v112[1] = v12;
        v112 += 2;
        v113 += 8;
      }
      while (v113);
      if (NumElements != v70) {
        goto LABEL_148;
      }
LABEL_179:
      if (v69 != (char *)v141) {
        free(v69);
      }
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements < 8
      || (char *)v140[0] + NumElements > (char *)a3 && v140[0] < (char *)a3 + 4 * NumElements)
    {
      unint64_t v98 = 0;
      goto LABEL_177;
    }
    if ((unint64_t)NumElements >= 0x20)
    {
      unint64_t v98 = NumElements & 0x7FFFFFFFFFFFFFE0;
      unint64_t v114 = (int8x8_t *)((char *)v140[0] + 16);
      unint64_t v115 = a3 + 4;
      unint64_t v116 = NumElements & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v117 = *(int8x16_t *)v114[-2].i8;
        int8x16_t v118 = *(int8x16_t *)v114->i8;
        int16x8_t v119 = vmovl_s8(*(int8x8_t *)v117.i8);
        int16x8_t v120 = vmovl_high_s8(v117);
        int16x8_t v121 = vmovl_s8(*v114);
        v115[-2] = vmovl_s16(*(int16x4_t *)v120.i8);
        v115[-1] = vmovl_high_s16(v120);
        int16x8_t v122 = vmovl_high_s8(v118);
        int32x4_t v123 = vmovl_s16(*(int16x4_t *)v122.i8);
        v115[-4] = vmovl_s16(*(int16x4_t *)v119.i8);
        v115[-3] = vmovl_high_s16(v119);
        int32x4_t v12 = vmovl_high_s16(v122);
        v115[2] = v123;
        v115[3] = v12;
        int32x4_t *v115 = vmovl_s16(*(int16x4_t *)v121.i8);
        v115[1] = vmovl_high_s16(v121);
        v115 += 8;
        v114 += 4;
        v116 -= 32;
      }
      while (v116);
      if (NumElements == v98) {
        goto LABEL_179;
      }
      if ((NumElements & 0x18) == 0)
      {
LABEL_177:
        uint64_t v99 = &v69[v98];
        unint64_t v100 = NumElements - v98;
        uint64_t v101 = &a3->i32[v98];
        do
        {
          int v102 = *v99++;
          *v101++ = v102;
          --v100;
        }
        while (v100);
        goto LABEL_179;
      }
    }
    else
    {
      unint64_t v98 = 0;
    }
    unint64_t v124 = v98;
    unint64_t v98 = NumElements & 0xFFFFFFFFFFFFFFF8;
    unint64_t v125 = (int8x8_t *)&v69[v124];
    uint64_t v126 = (int32x4_t *)((char *)a3 + 4 * v124);
    unint64_t v127 = v124 - (NumElements & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v128 = *v125++;
      int16x8_t v129 = vmovl_s8(v128);
      int32x4_t v130 = vmovl_s16(*(int16x4_t *)v129.i8);
      int32x4_t v12 = vmovl_high_s16(v129);
      *uint64_t v126 = v130;
      v126[1] = v12;
      v126 += 2;
      v127 += 8;
    }
    while (v127);
    if (NumElements == v98) {
      goto LABEL_179;
    }
    goto LABEL_177;
  }
  if (NumElements < 1) {
    return *(float *)v12.i32;
  }
LABEL_139:
  if ((unint64_t)NumElements >= 2)
  {
    uint64_t v83 = 0;
    unint64_t v68 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v84 = (uint64_t *)a3;
    do
    {
      if (v8) {
        uint64_t v85 = 0;
      }
      else {
        uint64_t v85 = v83;
      }
      if (v8) {
        uint64_t v86 = 0;
      }
      else {
        uint64_t v86 = v83 + 1;
      }
      v12.i16[0] = *(_WORD *)&MutableRawData[2 * v85];
      v12.i16[2] = *(_WORD *)&MutableRawData[2 * v86];
      *(int32x2_t *)v12.uint64_t i8 = vcvt_s32_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)v12.i8, 0x10uLL));
      *v84++ = v12.i64[0];
      v83 += 2;
    }
    while (v83 != v68);
    goto LABEL_223;
  }
  unint64_t v68 = 0;
  do
  {
    if (v8) {
      unint64_t v134 = 0;
    }
    else {
      unint64_t v134 = v68;
    }
    v12.i32[0] = *(unsigned __int16 *)&MutableRawData[2 * v134] << 16;
    a3->i32[v68++] = (int)*(float *)v12.i32;
LABEL_223:
    ;
  }
  while (NumElements != v68);
  return *(float *)v12.i32;
}

float mlir::copyElementsAttrData<unsigned long long>(uint64_t a1, uint64_t a2, void *a3)
{
  v164[5] = *MEMORY[0x1E4F143B8];
  uint64_t v161 = a1;
  uint64_t v162 = a2;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v161);
  uint64_t v7 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  v160[0] = v7;
  v160[1] = Type;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v160);
  int v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v161);
  uint64_t v9 = v161;
  if (mlir::DenseElementsAttr::classof(v161)) {
    uint64_t v10 = (void *)v9;
  }
  else {
    uint64_t v10 = 0;
  }
  v163[0] = v10;
  if (!v10)
  {
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
      uint64_t v14 = (void *)v9;
    }
    else {
      uint64_t v14 = 0;
    }
    v163[0] = v14;
    if (v14)
    {
      MutableRawData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v163);
      uint64_t v4 = v15;
      if ((v8 & 1) == 0) {
        goto LABEL_15;
      }
    }
    else if ((v8 & 1) == 0)
    {
      goto LABEL_15;
    }
LABEL_8:
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_17:
      for (uint64_t i = 0; i != NumElements; ++i)
      {
        if (v8) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = i;
        }
        a3[i] = MutableRawData[v17];
      }
      return *(float *)v12.i32;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_27:
      for (uint64_t j = 0; j != NumElements; ++j)
      {
        if (v8) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = j;
        }
        a3[j] = (char)MutableRawData[v19];
      }
      return *(float *)v12.i32;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_39:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v22 = 0;
        unint64_t v20 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = v22;
          }
          if (v8) {
            uint64_t v24 = 0;
          }
          else {
            uint64_t v24 = v22 + 1;
          }
          uint64_t v25 = *(unsigned __int16 *)&MutableRawData[2 * v24];
          uint64_t v26 = &a3[v22];
          void *v26 = *(unsigned __int16 *)&MutableRawData[2 * v23];
          v26[1] = v25;
          v22 += 2;
        }
        while (v22 != v20);
        goto LABEL_217;
      }
      unint64_t v20 = 0;
      do
      {
        if (v8) {
          unint64_t v152 = 0;
        }
        else {
          unint64_t v152 = v20;
        }
        a3[v20++] = *(unsigned __int16 *)&MutableRawData[2 * v152];
LABEL_217:
        ;
      }
      while (NumElements != v20);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_45:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v28 = 0;
        unint64_t v21 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = v28;
          }
          if (v8) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = v28 + 1;
          }
          uint64_t v31 = *(__int16 *)&MutableRawData[2 * v30];
          int v32 = &a3[v28];
          *int v32 = *(__int16 *)&MutableRawData[2 * v29];
          v32[1] = v31;
          v28 += 2;
        }
        while (v28 != v21);
        goto LABEL_223;
      }
      unint64_t v21 = 0;
      do
      {
        if (v8) {
          unint64_t v153 = 0;
        }
        else {
          unint64_t v153 = v21;
        }
        a3[v21++] = *(__int16 *)&MutableRawData[2 * v153];
LABEL_223:
        ;
      }
      while (NumElements != v21);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_60:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v34 = 0;
        unint64_t v27 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v35 = 0;
          }
          else {
            uint64_t v35 = v34;
          }
          if (v8) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = v34 + 1;
          }
          uint64_t v37 = *(unsigned int *)&MutableRawData[4 * v36];
          unint64_t v38 = &a3[v34];
          void *v38 = *(unsigned int *)&MutableRawData[4 * v35];
          v38[1] = v37;
          v34 += 2;
        }
        while (v34 != v27);
        goto LABEL_229;
      }
      unint64_t v27 = 0;
      do
      {
        if (v8) {
          unint64_t v154 = 0;
        }
        else {
          unint64_t v154 = v27;
        }
        a3[v27++] = *(unsigned int *)&MutableRawData[4 * v154];
LABEL_229:
        ;
      }
      while (NumElements != v27);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_75:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v49 = 0;
        unint64_t v33 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v50 = 0;
          }
          else {
            uint64_t v50 = v49;
          }
          if (v8) {
            uint64_t v51 = 0;
          }
          else {
            uint64_t v51 = v49 + 1;
          }
          uint64_t v52 = *(int *)&MutableRawData[4 * v51];
          uint64_t v53 = &a3[v49];
          *uint64_t v53 = *(int *)&MutableRawData[4 * v50];
          v53[1] = v52;
          v49 += 2;
        }
        while (v49 != v33);
        goto LABEL_235;
      }
      unint64_t v33 = 0;
      do
      {
        if (v8) {
          unint64_t v155 = 0;
        }
        else {
          unint64_t v155 = v33;
        }
        a3[v33++] = *(int *)&MutableRawData[4 * v155];
LABEL_235:
        ;
      }
      while (NumElements != v33);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
      || mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      *a3 = *(void *)MutableRawData;
      return *(float *)v12.i32;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      int64_t NumElements = 1;
LABEL_122:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v66 = 0;
        unint64_t v64 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v67 = 0;
          }
          else {
            uint64_t v67 = v66;
          }
          if (v8) {
            uint64_t v68 = 0;
          }
          else {
            uint64_t v68 = v66 + 1;
          }
          v12.i16[0] = *(_WORD *)&MutableRawData[2 * v67];
          unint64_t v69 = (unint64_t)*(short float *)&MutableRawData[2 * v68];
          unint64_t v70 = &a3[v66];
          *unint64_t v70 = (unint64_t)*(short float *)v12.i16;
          v70[1] = v69;
          v66 += 2;
        }
        while (v66 != v64);
        goto LABEL_241;
      }
      unint64_t v64 = 0;
      do
      {
        if (v8) {
          unint64_t v156 = 0;
        }
        else {
          unint64_t v156 = v64;
        }
        v12.i16[0] = *(_WORD *)&MutableRawData[2 * v156];
        a3[v64++] = (unint64_t)*(short float *)v12.i16;
LABEL_241:
        ;
      }
      while (NumElements != v64);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      v12.i32[0] = *(_DWORD *)MutableRawData;
      *a3 = (unint64_t)*(float *)MutableRawData;
      return *(float *)v12.i32;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      v12.i64[0] = *(void *)MutableRawData;
      *a3 = (unint64_t)*(double *)MutableRawData;
      return *(float *)v12.i32;
    }
    int64_t NumElements = 1;
    if (!mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
      goto LABEL_151;
    }
    goto LABEL_149;
  }
  MutableRawData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v163);
  uint64_t v4 = v11;
  if (v8) {
    goto LABEL_8;
  }
LABEL_15:
  int64_t NumElements = mlir::ElementsAttr::getNumElements(v161, v162);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_17;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_27;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_39;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_45;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_60;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_75;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements >= 1)
    {
      uint64_t v39 = 0;
      if ((unint64_t)NumElements < 4) {
        goto LABEL_96;
      }
      if ((unint64_t)((char *)a3 - (char *)MutableRawData) < 0x20) {
        goto LABEL_96;
      }
      uint64_t v39 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
      char v40 = (int32x4_t *)(MutableRawData + 16);
      unint64_t v41 = (int32x4_t *)(a3 + 2);
      unint64_t v42 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        int32x4_t v12 = v40[-1];
        int32x4_t v43 = *v40;
        v41[-1] = v12;
        *unint64_t v41 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 4;
      }
      while (v42);
      if (NumElements != v39)
      {
LABEL_96:
        uint64_t v44 = v39;
        int32x4_t v45 = &MutableRawData[8 * v39];
        int64_t v46 = NumElements - v39;
        int64_t v47 = &a3[v44];
        do
        {
          uint64_t v48 = *(void *)v45;
          v45 += 8;
          *v47++ = v48;
          --v46;
        }
        while (v46);
      }
    }
    return *(float *)v12.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements >= 1)
    {
      uint64_t v54 = 0;
      if ((unint64_t)NumElements < 4) {
        goto LABEL_115;
      }
      if ((unint64_t)((char *)a3 - (char *)MutableRawData) < 0x20) {
        goto LABEL_115;
      }
      uint64_t v54 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
      uint64_t v55 = (int32x4_t *)(MutableRawData + 16);
      unsigned int v56 = (int32x4_t *)(a3 + 2);
      unint64_t v57 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        int32x4_t v12 = v55[-1];
        int32x4_t v58 = *v55;
        v56[-1] = v12;
        int32x4_t *v56 = v58;
        v55 += 2;
        v56 += 2;
        v57 -= 4;
      }
      while (v57);
      if (NumElements != v54)
      {
LABEL_115:
        uint64_t v59 = v54;
        int32x4_t v60 = &MutableRawData[8 * v54];
        int64_t v61 = NumElements - v54;
        int32x4_t v62 = &a3[v59];
        do
        {
          uint64_t v63 = *(void *)v60;
          v60 += 8;
          *v62++ = v63;
          --v61;
        }
        while (v61);
      }
    }
    return *(float *)v12.i32;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_122;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements >= 8)
    {
      uint64_t v65 = NumElements & 0x7FFFFFFFFFFFFFF8;
      uint64_t v77 = (float32x2_t *)(MutableRawData + 16);
      uint64_t v78 = (uint64x2_t *)(a3 + 4);
      unint64_t v79 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v80 = *(float32x4_t *)v77[-2].f32;
        uint64x2_t v81 = vcvtq_u64_f64(vcvtq_f64_f32(*v77));
        float64x2_t v82 = vcvt_hight_f64_f32(*(float32x4_t *)v77->f32);
        v78[-2] = vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)v80.f32));
        v78[-1] = vcvtq_u64_f64(vcvt_hight_f64_f32(v80));
        int32x4_t v12 = (int32x4_t)vcvtq_u64_f64(v82);
        *uint64_t v78 = v81;
        v78[1] = (uint64x2_t)v12;
        v78 += 4;
        v77 += 4;
        v79 -= 8;
      }
      while (v79);
      if (NumElements == v65) {
        return *(float *)v12.i32;
      }
    }
    else
    {
      uint64_t v65 = 0;
    }
    uint64_t v83 = (float *)&MutableRawData[4 * v65];
    int64_t v84 = NumElements - v65;
    uint64_t v85 = &a3[v65];
    do
    {
      float v86 = *v83++;
      *(float *)v12.i32 = v86;
      *v85++ = (unint64_t)v86;
      --v84;
    }
    while (v84);
    return *(float *)v12.i32;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements >= 4)
    {
      uint64_t v71 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
      float64x2_t v92 = (float64x2_t *)(MutableRawData + 16);
      float64x2_t v93 = (uint64x2_t *)(a3 + 2);
      unint64_t v94 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        int32x4_t v12 = (int32x4_t)vcvtq_u64_f64(v92[-1]);
        uint64x2_t v95 = vcvtq_u64_f64(*v92);
        v93[-1] = (uint64x2_t)v12;
        uint64x2_t *v93 = v95;
        v92 += 2;
        v93 += 2;
        v94 -= 4;
      }
      while (v94);
      if (NumElements == v71) {
        return *(float *)v12.i32;
      }
    }
    else
    {
      uint64_t v71 = 0;
    }
    uint64_t v96 = v71;
    double v97 = (double *)&MutableRawData[8 * v71];
    int64_t v98 = NumElements - v71;
    uint64_t v99 = &a3[v96];
    do
    {
      double v100 = *v97++;
      v12.i32[0] = LODWORD(v100);
      *v99++ = (unint64_t)v100;
      --v98;
    }
    while (v98);
    return *(float *)v12.i32;
  }
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
LABEL_151:
    if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<unsigned long long>(MutableRawData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
      return *(float *)v12.i32;
    }
    llvm::SmallVector<char,40u>::SmallVector((uint64_t)v163, NumElements);
    mlir::detail::unpackBooleanData(MutableRawData, v4, (uint64_t)v163[0], (unint64_t)v163[1]);
    uint64_t v73 = (char *)v163[0];
    if (NumElements < 1) {
      goto LABEL_189;
    }
    if (v8)
    {
      if ((unint64_t)NumElements < 8 || (char *)v163[0] + 1 > (char *)a3 && v163[0] < &a3[NumElements])
      {
        unint64_t v74 = 0;
        goto LABEL_158;
      }
      if ((unint64_t)NumElements >= 0x10)
      {
        unint64_t v74 = NumElements & 0x7FFFFFFFFFFFFFF0;
        int8x8_t v127 = vld1_dup_s8((const char *)v163[0]);
        int16x8_t v128 = vmovl_s8(v127);
        int32x4_t v129 = vmovl_high_s16(v128);
        v130.i64[0] = v129.i32[2];
        v130.i64[1] = v129.i32[3];
        int32x4_t v12 = v130;
        v130.i64[0] = v129.i32[0];
        v130.i64[1] = v129.i32[1];
        int32x4_t v131 = v130;
        int32x4_t v132 = vmovl_s16(*(int16x4_t *)v128.i8);
        v130.i64[0] = v132.i32[2];
        v130.i64[1] = v132.i32[3];
        int32x4_t v133 = v130;
        v130.i64[0] = v132.i32[0];
        v130.i64[1] = v132.i32[1];
        int32x4_t v134 = v130;
        unint64_t v135 = NumElements & 0xFFFFFFFFFFFFFFF0;
        v136 = (int32x4_t *)a3;
        do
        {
          int32x4_t *v136 = v134;
          v136[1] = v133;
          v136[2] = v131;
          v136[3] = v12;
          v136[4] = v134;
          v136[5] = v133;
          v136[6] = v131;
          v136[7] = v12;
          v136 += 8;
          v135 -= 16;
        }
        while (v135);
        if (NumElements == v74) {
          goto LABEL_189;
        }
        if ((NumElements & 8) == 0)
        {
LABEL_158:
          unint64_t v75 = NumElements - v74;
          int32x4_t v76 = &a3[v74];
          do
          {
            *v76++ = *v73;
            --v75;
          }
          while (v75);
          goto LABEL_189;
        }
      }
      else
      {
        unint64_t v74 = 0;
      }
      unint64_t v106 = v74;
      unint64_t v74 = NumElements & 0xFFFFFFFFFFFFFFF8;
      int8x8_t v107 = vld1_dup_s8(v73);
      int16x8_t v108 = vmovl_s8(v107);
      int32x4_t v109 = vmovl_high_s16(v108);
      v110.i64[0] = v109.i32[2];
      v110.i64[1] = v109.i32[3];
      int32x4_t v12 = v110;
      v110.i64[0] = v109.i32[0];
      v110.i64[1] = v109.i32[1];
      int32x4_t v111 = v110;
      int32x4_t v112 = vmovl_s16(*(int16x4_t *)v108.i8);
      v110.i64[0] = v112.i32[2];
      v110.i64[1] = v112.i32[3];
      int32x4_t v113 = v110;
      v110.i64[0] = v112.i32[0];
      v110.i64[1] = v112.i32[1];
      int32x4_t v114 = v110;
      unint64_t v115 = (int32x4_t *)&a3[v106];
      unint64_t v116 = v106 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int32x4_t *v115 = v114;
        v115[1] = v113;
        v115[2] = v111;
        v115[3] = v12;
        v115 += 4;
        v116 += 8;
      }
      while (v116);
      if (NumElements != v74) {
        goto LABEL_158;
      }
LABEL_189:
      if (v73 != (char *)v164) {
        free(v73);
      }
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements < 8 || (char *)v163[0] + NumElements > (char *)a3 && v163[0] < &a3[NumElements])
    {
      unint64_t v101 = 0;
      goto LABEL_187;
    }
    if ((unint64_t)NumElements >= 0x10)
    {
      unint64_t v101 = NumElements & 0x7FFFFFFFFFFFFFF0;
      unint64_t v137 = NumElements & 0xFFFFFFFFFFFFFFF0;
      uint64_t v138 = a3;
      uint64_t v139 = (int8x16_t *)v163[0];
      do
      {
        int8x16_t v140 = *v139++;
        int16x8_t v141 = vmovl_s8(*(int8x8_t *)v140.i8);
        int32x4_t v142 = vmovl_s16(*(int16x4_t *)v141.i8);
        *(void *)&long long v143 = v142.i32[0];
        *((void *)&v143 + 1) = v142.i32[1];
        long long v144 = v143;
        int32x4_t v145 = vmovl_high_s16(v141);
        *(void *)&long long v143 = v145.i32[0];
        *((void *)&v143 + 1) = v145.i32[1];
        long long v146 = v143;
        int16x8_t v147 = vmovl_high_s8(v140);
        int32x4_t v148 = vmovl_high_s16(v147);
        *(void *)&long long v143 = v148.i32[0];
        *((void *)&v143 + 1) = v148.i32[1];
        long long v149 = v143;
        *(void *)&long long v143 = v148.i32[2];
        *((void *)&v143 + 1) = v148.i32[3];
        v138[6] = v149;
        v138[7] = v143;
        int32x4_t v12 = vmovl_s16(*(int16x4_t *)v147.i8);
        *(void *)&long long v143 = v12.i32[0];
        *((void *)&v143 + 1) = v12.i32[1];
        long long v150 = v143;
        *(void *)&long long v143 = v145.i32[2];
        *((void *)&v143 + 1) = v145.i32[3];
        long long v151 = v143;
        *(void *)&long long v143 = v12.i32[2];
        *((void *)&v143 + 1) = v12.i32[3];
        v138[4] = v150;
        v138[5] = v143;
        v138[2] = v146;
        v138[3] = v151;
        *(void *)&long long v143 = v142.i32[2];
        *((void *)&v143 + 1) = v142.i32[3];
        v12.i32[0] = v142.i32[2];
        _OWORD *v138 = v144;
        v138[1] = v143;
        v138 += 8;
        v137 -= 16;
      }
      while (v137);
      if (NumElements == v101) {
        goto LABEL_189;
      }
      if ((NumElements & 8) == 0)
      {
LABEL_187:
        int v102 = &v73[v101];
        unint64_t v103 = NumElements - v101;
        int16x8_t v104 = &a3[v101];
        do
        {
          uint64_t v105 = *v102++;
          *v104++ = v105;
          --v103;
        }
        while (v103);
        goto LABEL_189;
      }
    }
    else
    {
      unint64_t v101 = 0;
    }
    unint64_t v117 = v101;
    unint64_t v101 = NumElements & 0xFFFFFFFFFFFFFFF8;
    int8x16_t v118 = (int8x8_t *)&v73[v117];
    int16x8_t v119 = &a3[v117];
    unint64_t v120 = v117 - (NumElements & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v121 = *v118++;
      int16x8_t v122 = vmovl_s8(v121);
      int32x4_t v123 = vmovl_s16(*(int16x4_t *)v122.i8);
      *(void *)&long long v124 = v123.i32[0];
      *((void *)&v124 + 1) = v123.i32[1];
      long long v125 = v124;
      int32x4_t v12 = vmovl_high_s16(v122);
      *(void *)&long long v124 = v12.i32[0];
      *((void *)&v124 + 1) = v12.i32[1];
      long long v126 = v124;
      *(void *)&long long v124 = v12.i32[2];
      *((void *)&v124 + 1) = v12.i32[3];
      v119[2] = v126;
      v119[3] = v124;
      *(void *)&long long v124 = v123.i32[2];
      *((void *)&v124 + 1) = v123.i32[3];
      v12.i32[0] = v123.i32[2];
      *int16x8_t v119 = v125;
      v119[1] = v124;
      v119 += 4;
      v120 += 8;
    }
    while (v120);
    if (NumElements == v101) {
      goto LABEL_189;
    }
    goto LABEL_187;
  }
  if (NumElements < 1) {
    return *(float *)v12.i32;
  }
LABEL_149:
  if ((unint64_t)NumElements >= 2)
  {
    uint64_t v88 = 0;
    unint64_t v72 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v89 = (int32x4_t *)a3;
    do
    {
      if (v8) {
        uint64_t v90 = 0;
      }
      else {
        uint64_t v90 = v88;
      }
      if (v8) {
        uint64_t v91 = 0;
      }
      else {
        uint64_t v91 = v88 + 1;
      }
      v12.i16[0] = *(_WORD *)&MutableRawData[2 * v90];
      v12.i16[2] = *(_WORD *)&MutableRawData[2 * v91];
      int32x4_t v12 = (int32x4_t)vcvtq_u64_f64(vcvtq_f64_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)v12.i8, 0x10uLL)));
      *v89++ = v12;
      v88 += 2;
    }
    while (v88 != v72);
    goto LABEL_247;
  }
  unint64_t v72 = 0;
  do
  {
    if (v8) {
      unint64_t v157 = 0;
    }
    else {
      unint64_t v157 = v72;
    }
    v12.i32[0] = *(unsigned __int16 *)&MutableRawData[2 * v157] << 16;
    a3[v72++] = (unint64_t)*(float *)v12.i32;
LABEL_247:
    ;
  }
  while (NumElements != v72);
  return *(float *)v12.i32;
}

float mlir::copyElementsAttrData<long long>(uint64_t a1, uint64_t a2, void *a3)
{
  v164[5] = *MEMORY[0x1E4F143B8];
  uint64_t v161 = a1;
  uint64_t v162 = a2;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v161);
  uint64_t v7 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  v160[0] = v7;
  v160[1] = Type;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v160);
  int v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v161);
  uint64_t v9 = v161;
  if (mlir::DenseElementsAttr::classof(v161)) {
    uint64_t v10 = (void *)v9;
  }
  else {
    uint64_t v10 = 0;
  }
  v163[0] = v10;
  if (!v10)
  {
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
      uint64_t v14 = (void *)v9;
    }
    else {
      uint64_t v14 = 0;
    }
    v163[0] = v14;
    if (v14)
    {
      MutableRawData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v163);
      uint64_t v4 = v15;
      if ((v8 & 1) == 0) {
        goto LABEL_15;
      }
    }
    else if ((v8 & 1) == 0)
    {
      goto LABEL_15;
    }
LABEL_8:
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_17:
      for (uint64_t i = 0; i != NumElements; ++i)
      {
        if (v8) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = i;
        }
        a3[i] = MutableRawData[v17];
      }
      return *(float *)v12.i32;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_27:
      for (uint64_t j = 0; j != NumElements; ++j)
      {
        if (v8) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = j;
        }
        a3[j] = (char)MutableRawData[v19];
      }
      return *(float *)v12.i32;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_39:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v22 = 0;
        unint64_t v20 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = v22;
          }
          if (v8) {
            uint64_t v24 = 0;
          }
          else {
            uint64_t v24 = v22 + 1;
          }
          uint64_t v25 = *(unsigned __int16 *)&MutableRawData[2 * v24];
          uint64_t v26 = &a3[v22];
          void *v26 = *(unsigned __int16 *)&MutableRawData[2 * v23];
          v26[1] = v25;
          v22 += 2;
        }
        while (v22 != v20);
        goto LABEL_217;
      }
      unint64_t v20 = 0;
      do
      {
        if (v8) {
          unint64_t v152 = 0;
        }
        else {
          unint64_t v152 = v20;
        }
        a3[v20++] = *(unsigned __int16 *)&MutableRawData[2 * v152];
LABEL_217:
        ;
      }
      while (NumElements != v20);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_45:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v28 = 0;
        unint64_t v21 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = v28;
          }
          if (v8) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = v28 + 1;
          }
          uint64_t v31 = *(__int16 *)&MutableRawData[2 * v30];
          int v32 = &a3[v28];
          *int v32 = *(__int16 *)&MutableRawData[2 * v29];
          v32[1] = v31;
          v28 += 2;
        }
        while (v28 != v21);
        goto LABEL_223;
      }
      unint64_t v21 = 0;
      do
      {
        if (v8) {
          unint64_t v153 = 0;
        }
        else {
          unint64_t v153 = v21;
        }
        a3[v21++] = *(__int16 *)&MutableRawData[2 * v153];
LABEL_223:
        ;
      }
      while (NumElements != v21);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_60:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v34 = 0;
        unint64_t v27 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v35 = 0;
          }
          else {
            uint64_t v35 = v34;
          }
          if (v8) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = v34 + 1;
          }
          uint64_t v37 = *(unsigned int *)&MutableRawData[4 * v36];
          unint64_t v38 = &a3[v34];
          void *v38 = *(unsigned int *)&MutableRawData[4 * v35];
          v38[1] = v37;
          v34 += 2;
        }
        while (v34 != v27);
        goto LABEL_229;
      }
      unint64_t v27 = 0;
      do
      {
        if (v8) {
          unint64_t v154 = 0;
        }
        else {
          unint64_t v154 = v27;
        }
        a3[v27++] = *(unsigned int *)&MutableRawData[4 * v154];
LABEL_229:
        ;
      }
      while (NumElements != v27);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_75:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v49 = 0;
        unint64_t v33 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v50 = 0;
          }
          else {
            uint64_t v50 = v49;
          }
          if (v8) {
            uint64_t v51 = 0;
          }
          else {
            uint64_t v51 = v49 + 1;
          }
          uint64_t v52 = *(int *)&MutableRawData[4 * v51];
          uint64_t v53 = &a3[v49];
          *uint64_t v53 = *(int *)&MutableRawData[4 * v50];
          v53[1] = v52;
          v49 += 2;
        }
        while (v49 != v33);
        goto LABEL_235;
      }
      unint64_t v33 = 0;
      do
      {
        if (v8) {
          unint64_t v155 = 0;
        }
        else {
          unint64_t v155 = v33;
        }
        a3[v33++] = *(int *)&MutableRawData[4 * v155];
LABEL_235:
        ;
      }
      while (NumElements != v33);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
      || mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      *a3 = *(void *)MutableRawData;
      return *(float *)v12.i32;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      int64_t NumElements = 1;
LABEL_122:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v66 = 0;
        unint64_t v64 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v67 = 0;
          }
          else {
            uint64_t v67 = v66;
          }
          if (v8) {
            uint64_t v68 = 0;
          }
          else {
            uint64_t v68 = v66 + 1;
          }
          v12.i16[0] = *(_WORD *)&MutableRawData[2 * v67];
          uint64_t v69 = (uint64_t)*(short float *)&MutableRawData[2 * v68];
          unint64_t v70 = &a3[v66];
          *unint64_t v70 = (uint64_t)*(short float *)v12.i16;
          v70[1] = v69;
          v66 += 2;
        }
        while (v66 != v64);
        goto LABEL_241;
      }
      unint64_t v64 = 0;
      do
      {
        if (v8) {
          unint64_t v156 = 0;
        }
        else {
          unint64_t v156 = v64;
        }
        v12.i16[0] = *(_WORD *)&MutableRawData[2 * v156];
        a3[v64++] = (uint64_t)*(short float *)v12.i16;
LABEL_241:
        ;
      }
      while (NumElements != v64);
      return *(float *)v12.i32;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      v12.i32[0] = *(_DWORD *)MutableRawData;
      *a3 = (uint64_t)*(float *)MutableRawData;
      return *(float *)v12.i32;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      v12.i64[0] = *(void *)MutableRawData;
      *a3 = (uint64_t)*(double *)MutableRawData;
      return *(float *)v12.i32;
    }
    int64_t NumElements = 1;
    if (!mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
      goto LABEL_151;
    }
    goto LABEL_149;
  }
  MutableRawData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v163);
  uint64_t v4 = v11;
  if (v8) {
    goto LABEL_8;
  }
LABEL_15:
  int64_t NumElements = mlir::ElementsAttr::getNumElements(v161, v162);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_17;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_27;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_39;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_45;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_60;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_75;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements >= 1)
    {
      uint64_t v39 = 0;
      if ((unint64_t)NumElements < 4) {
        goto LABEL_96;
      }
      if ((unint64_t)((char *)a3 - (char *)MutableRawData) < 0x20) {
        goto LABEL_96;
      }
      uint64_t v39 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
      char v40 = (int32x4_t *)(MutableRawData + 16);
      unint64_t v41 = (int32x4_t *)(a3 + 2);
      unint64_t v42 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        int32x4_t v12 = v40[-1];
        int32x4_t v43 = *v40;
        v41[-1] = v12;
        *unint64_t v41 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 4;
      }
      while (v42);
      if (NumElements != v39)
      {
LABEL_96:
        uint64_t v44 = v39;
        int32x4_t v45 = &MutableRawData[8 * v39];
        int64_t v46 = NumElements - v39;
        int64_t v47 = &a3[v44];
        do
        {
          uint64_t v48 = *(void *)v45;
          v45 += 8;
          *v47++ = v48;
          --v46;
        }
        while (v46);
      }
    }
    return *(float *)v12.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements >= 1)
    {
      uint64_t v54 = 0;
      if ((unint64_t)NumElements < 4) {
        goto LABEL_115;
      }
      if ((unint64_t)((char *)a3 - (char *)MutableRawData) < 0x20) {
        goto LABEL_115;
      }
      uint64_t v54 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
      uint64_t v55 = (int32x4_t *)(MutableRawData + 16);
      unsigned int v56 = (int32x4_t *)(a3 + 2);
      unint64_t v57 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        int32x4_t v12 = v55[-1];
        int32x4_t v58 = *v55;
        v56[-1] = v12;
        int32x4_t *v56 = v58;
        v55 += 2;
        v56 += 2;
        v57 -= 4;
      }
      while (v57);
      if (NumElements != v54)
      {
LABEL_115:
        uint64_t v59 = v54;
        int32x4_t v60 = &MutableRawData[8 * v54];
        int64_t v61 = NumElements - v54;
        int32x4_t v62 = &a3[v59];
        do
        {
          uint64_t v63 = *(void *)v60;
          v60 += 8;
          *v62++ = v63;
          --v61;
        }
        while (v61);
      }
    }
    return *(float *)v12.i32;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    goto LABEL_122;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements >= 8)
    {
      uint64_t v65 = NumElements & 0x7FFFFFFFFFFFFFF8;
      uint64_t v77 = (float32x2_t *)(MutableRawData + 16);
      uint64_t v78 = (int64x2_t *)(a3 + 4);
      unint64_t v79 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v80 = *(float32x4_t *)v77[-2].f32;
        int64x2_t v81 = vcvtq_s64_f64(vcvtq_f64_f32(*v77));
        float64x2_t v82 = vcvt_hight_f64_f32(*(float32x4_t *)v77->f32);
        v78[-2] = vcvtq_s64_f64(vcvtq_f64_f32(*(float32x2_t *)v80.f32));
        v78[-1] = vcvtq_s64_f64(vcvt_hight_f64_f32(v80));
        int32x4_t v12 = (int32x4_t)vcvtq_s64_f64(v82);
        *uint64_t v78 = v81;
        v78[1] = (int64x2_t)v12;
        v78 += 4;
        v77 += 4;
        v79 -= 8;
      }
      while (v79);
      if (NumElements == v65) {
        return *(float *)v12.i32;
      }
    }
    else
    {
      uint64_t v65 = 0;
    }
    uint64_t v83 = (float *)&MutableRawData[4 * v65];
    int64_t v84 = NumElements - v65;
    uint64_t v85 = &a3[v65];
    do
    {
      float v86 = *v83++;
      *(float *)v12.i32 = v86;
      *v85++ = (uint64_t)v86;
      --v84;
    }
    while (v84);
    return *(float *)v12.i32;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements >= 4)
    {
      uint64_t v71 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
      float64x2_t v92 = (float64x2_t *)(MutableRawData + 16);
      float64x2_t v93 = (int64x2_t *)(a3 + 2);
      unint64_t v94 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        int32x4_t v12 = (int32x4_t)vcvtq_s64_f64(v92[-1]);
        int64x2_t v95 = vcvtq_s64_f64(*v92);
        v93[-1] = (int64x2_t)v12;
        int64x2_t *v93 = v95;
        v92 += 2;
        v93 += 2;
        v94 -= 4;
      }
      while (v94);
      if (NumElements == v71) {
        return *(float *)v12.i32;
      }
    }
    else
    {
      uint64_t v71 = 0;
    }
    uint64_t v96 = v71;
    double v97 = (double *)&MutableRawData[8 * v71];
    int64_t v98 = NumElements - v71;
    uint64_t v99 = &a3[v96];
    do
    {
      double v100 = *v97++;
      v12.i32[0] = LODWORD(v100);
      *v99++ = (uint64_t)v100;
      --v98;
    }
    while (v98);
    return *(float *)v12.i32;
  }
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
LABEL_151:
    if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<long long>(MutableRawData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
      return *(float *)v12.i32;
    }
    llvm::SmallVector<char,40u>::SmallVector((uint64_t)v163, NumElements);
    mlir::detail::unpackBooleanData(MutableRawData, v4, (uint64_t)v163[0], (unint64_t)v163[1]);
    uint64_t v73 = (char *)v163[0];
    if (NumElements < 1) {
      goto LABEL_189;
    }
    if (v8)
    {
      if ((unint64_t)NumElements < 8 || (char *)v163[0] + 1 > (char *)a3 && v163[0] < &a3[NumElements])
      {
        unint64_t v74 = 0;
        goto LABEL_158;
      }
      if ((unint64_t)NumElements >= 0x10)
      {
        unint64_t v74 = NumElements & 0x7FFFFFFFFFFFFFF0;
        int8x8_t v127 = vld1_dup_s8((const char *)v163[0]);
        int16x8_t v128 = vmovl_s8(v127);
        int32x4_t v129 = vmovl_high_s16(v128);
        v130.i64[0] = v129.i32[2];
        v130.i64[1] = v129.i32[3];
        int32x4_t v12 = v130;
        v130.i64[0] = v129.i32[0];
        v130.i64[1] = v129.i32[1];
        int32x4_t v131 = v130;
        int32x4_t v132 = vmovl_s16(*(int16x4_t *)v128.i8);
        v130.i64[0] = v132.i32[2];
        v130.i64[1] = v132.i32[3];
        int32x4_t v133 = v130;
        v130.i64[0] = v132.i32[0];
        v130.i64[1] = v132.i32[1];
        int32x4_t v134 = v130;
        unint64_t v135 = NumElements & 0xFFFFFFFFFFFFFFF0;
        v136 = (int32x4_t *)a3;
        do
        {
          int32x4_t *v136 = v134;
          v136[1] = v133;
          v136[2] = v131;
          v136[3] = v12;
          v136[4] = v134;
          v136[5] = v133;
          v136[6] = v131;
          v136[7] = v12;
          v136 += 8;
          v135 -= 16;
        }
        while (v135);
        if (NumElements == v74) {
          goto LABEL_189;
        }
        if ((NumElements & 8) == 0)
        {
LABEL_158:
          unint64_t v75 = NumElements - v74;
          int32x4_t v76 = &a3[v74];
          do
          {
            *v76++ = *v73;
            --v75;
          }
          while (v75);
          goto LABEL_189;
        }
      }
      else
      {
        unint64_t v74 = 0;
      }
      unint64_t v106 = v74;
      unint64_t v74 = NumElements & 0xFFFFFFFFFFFFFFF8;
      int8x8_t v107 = vld1_dup_s8(v73);
      int16x8_t v108 = vmovl_s8(v107);
      int32x4_t v109 = vmovl_high_s16(v108);
      v110.i64[0] = v109.i32[2];
      v110.i64[1] = v109.i32[3];
      int32x4_t v12 = v110;
      v110.i64[0] = v109.i32[0];
      v110.i64[1] = v109.i32[1];
      int32x4_t v111 = v110;
      int32x4_t v112 = vmovl_s16(*(int16x4_t *)v108.i8);
      v110.i64[0] = v112.i32[2];
      v110.i64[1] = v112.i32[3];
      int32x4_t v113 = v110;
      v110.i64[0] = v112.i32[0];
      v110.i64[1] = v112.i32[1];
      int32x4_t v114 = v110;
      unint64_t v115 = (int32x4_t *)&a3[v106];
      unint64_t v116 = v106 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int32x4_t *v115 = v114;
        v115[1] = v113;
        v115[2] = v111;
        v115[3] = v12;
        v115 += 4;
        v116 += 8;
      }
      while (v116);
      if (NumElements != v74) {
        goto LABEL_158;
      }
LABEL_189:
      if (v73 != (char *)v164) {
        free(v73);
      }
      return *(float *)v12.i32;
    }
    if ((unint64_t)NumElements < 8 || (char *)v163[0] + NumElements > (char *)a3 && v163[0] < &a3[NumElements])
    {
      unint64_t v101 = 0;
      goto LABEL_187;
    }
    if ((unint64_t)NumElements >= 0x10)
    {
      unint64_t v101 = NumElements & 0x7FFFFFFFFFFFFFF0;
      unint64_t v137 = NumElements & 0xFFFFFFFFFFFFFFF0;
      uint64_t v138 = a3;
      uint64_t v139 = (int8x16_t *)v163[0];
      do
      {
        int8x16_t v140 = *v139++;
        int16x8_t v141 = vmovl_s8(*(int8x8_t *)v140.i8);
        int32x4_t v142 = vmovl_s16(*(int16x4_t *)v141.i8);
        *(void *)&long long v143 = v142.i32[0];
        *((void *)&v143 + 1) = v142.i32[1];
        long long v144 = v143;
        int32x4_t v145 = vmovl_high_s16(v141);
        *(void *)&long long v143 = v145.i32[0];
        *((void *)&v143 + 1) = v145.i32[1];
        long long v146 = v143;
        int16x8_t v147 = vmovl_high_s8(v140);
        int32x4_t v148 = vmovl_high_s16(v147);
        *(void *)&long long v143 = v148.i32[0];
        *((void *)&v143 + 1) = v148.i32[1];
        long long v149 = v143;
        *(void *)&long long v143 = v148.i32[2];
        *((void *)&v143 + 1) = v148.i32[3];
        v138[6] = v149;
        v138[7] = v143;
        int32x4_t v12 = vmovl_s16(*(int16x4_t *)v147.i8);
        *(void *)&long long v143 = v12.i32[0];
        *((void *)&v143 + 1) = v12.i32[1];
        long long v150 = v143;
        *(void *)&long long v143 = v145.i32[2];
        *((void *)&v143 + 1) = v145.i32[3];
        long long v151 = v143;
        *(void *)&long long v143 = v12.i32[2];
        *((void *)&v143 + 1) = v12.i32[3];
        v138[4] = v150;
        v138[5] = v143;
        v138[2] = v146;
        v138[3] = v151;
        *(void *)&long long v143 = v142.i32[2];
        *((void *)&v143 + 1) = v142.i32[3];
        v12.i32[0] = v142.i32[2];
        _OWORD *v138 = v144;
        v138[1] = v143;
        v138 += 8;
        v137 -= 16;
      }
      while (v137);
      if (NumElements == v101) {
        goto LABEL_189;
      }
      if ((NumElements & 8) == 0)
      {
LABEL_187:
        int v102 = &v73[v101];
        unint64_t v103 = NumElements - v101;
        int16x8_t v104 = &a3[v101];
        do
        {
          uint64_t v105 = *v102++;
          *v104++ = v105;
          --v103;
        }
        while (v103);
        goto LABEL_189;
      }
    }
    else
    {
      unint64_t v101 = 0;
    }
    unint64_t v117 = v101;
    unint64_t v101 = NumElements & 0xFFFFFFFFFFFFFFF8;
    int8x16_t v118 = (int8x8_t *)&v73[v117];
    int16x8_t v119 = &a3[v117];
    unint64_t v120 = v117 - (NumElements & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v121 = *v118++;
      int16x8_t v122 = vmovl_s8(v121);
      int32x4_t v123 = vmovl_s16(*(int16x4_t *)v122.i8);
      *(void *)&long long v124 = v123.i32[0];
      *((void *)&v124 + 1) = v123.i32[1];
      long long v125 = v124;
      int32x4_t v12 = vmovl_high_s16(v122);
      *(void *)&long long v124 = v12.i32[0];
      *((void *)&v124 + 1) = v12.i32[1];
      long long v126 = v124;
      *(void *)&long long v124 = v12.i32[2];
      *((void *)&v124 + 1) = v12.i32[3];
      v119[2] = v126;
      v119[3] = v124;
      *(void *)&long long v124 = v123.i32[2];
      *((void *)&v124 + 1) = v123.i32[3];
      v12.i32[0] = v123.i32[2];
      *int16x8_t v119 = v125;
      v119[1] = v124;
      v119 += 4;
      v120 += 8;
    }
    while (v120);
    if (NumElements == v101) {
      goto LABEL_189;
    }
    goto LABEL_187;
  }
  if (NumElements < 1) {
    return *(float *)v12.i32;
  }
LABEL_149:
  if ((unint64_t)NumElements >= 2)
  {
    uint64_t v88 = 0;
    unint64_t v72 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v89 = (int32x4_t *)a3;
    do
    {
      if (v8) {
        uint64_t v90 = 0;
      }
      else {
        uint64_t v90 = v88;
      }
      if (v8) {
        uint64_t v91 = 0;
      }
      else {
        uint64_t v91 = v88 + 1;
      }
      v12.i16[0] = *(_WORD *)&MutableRawData[2 * v90];
      v12.i16[2] = *(_WORD *)&MutableRawData[2 * v91];
      int32x4_t v12 = (int32x4_t)vcvtq_s64_f64(vcvtq_f64_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)v12.i8, 0x10uLL)));
      *v89++ = v12;
      v88 += 2;
    }
    while (v88 != v72);
    goto LABEL_247;
  }
  unint64_t v72 = 0;
  do
  {
    if (v8) {
      unint64_t v157 = 0;
    }
    else {
      unint64_t v157 = v72;
    }
    v12.i32[0] = *(unsigned __int16 *)&MutableRawData[2 * v157] << 16;
    a3[v72++] = (uint64_t)*(float *)v12.i32;
LABEL_247:
    ;
  }
  while (NumElements != v72);
  return *(float *)v12.i32;
}

__int16 mlir::copyElementsAttrData<half>@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float16x8_t *a3@<X2>)
{
  v150[5] = *MEMORY[0x1E4F143B8];
  uint64_t v147 = a1;
  uint64_t v148 = a2;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v147);
  uint64_t v7 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  v146[0] = v7;
  v146[1] = Type;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v146);
  int v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v147);
  uint64_t v9 = v147;
  if (mlir::DenseElementsAttr::classof(v147)) {
    uint64_t v10 = (void *)v9;
  }
  else {
    uint64_t v10 = 0;
  }
  v149[0] = v10;
  if (!v10)
  {
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
      uint64_t v14 = (void *)v9;
    }
    else {
      uint64_t v14 = 0;
    }
    v149[0] = v14;
    if (v14)
    {
      MutableRawData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v149);
      uint64_t v4 = v15;
      if ((v8 & 1) == 0) {
        goto LABEL_15;
      }
    }
    else if ((v8 & 1) == 0)
    {
      goto LABEL_15;
    }
LABEL_8:
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_17:
      for (uint64_t i = 0; i != NumElements; ++i)
      {
        if (v8) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = i;
        }
        _Q0.i8[0] = MutableRawData[v17];
        *(short float *)_Q0.uint64_t i16 = (short float)_Q0.u16[0];
        a3->i16[i] = _Q0.i16[0];
      }
      return _Q0.i16[0];
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_27:
      for (uint64_t j = 0; j != NumElements; ++j)
      {
        if (v8) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = j;
        }
        _Q0.i8[0] = MutableRawData[v19];
        _Q0.i64[0] = vmovl_s8(*(int8x8_t *)_Q0.i8).u64[0];
        *(short float *)_Q0.uint64_t i16 = (short float)_Q0.i16[0];
        a3->i16[j] = _Q0.i16[0];
      }
      return _Q0.i16[0];
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_39:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v22 = 0;
        unint64_t v20 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = v22;
          }
          if (v8) {
            uint64_t v24 = 0;
          }
          else {
            uint64_t v24 = v22 + 1;
          }
          *(short float *)_Q0.uint64_t i16 = (short float)*(unsigned __int16 *)&MutableRawData[2 * v23];
          short float v25 = (short float)*(unsigned __int16 *)&MutableRawData[2 * v24];
          uint64_t v26 = (short float *)&a3->i16[v22];
          short float *v26 = *(short float *)_Q0.i16;
          v26[1] = v25;
          v22 += 2;
        }
        while (v22 != v20);
        goto LABEL_219;
      }
      unint64_t v20 = 0;
      do
      {
        if (v8) {
          unint64_t v137 = 0;
        }
        else {
          unint64_t v137 = v20;
        }
        *(short float *)_Q0.uint64_t i16 = (short float)*(unsigned __int16 *)&MutableRawData[2 * v137];
        a3->i16[v20++] = _Q0.i16[0];
LABEL_219:
        ;
      }
      while (NumElements != v20);
      return _Q0.i16[0];
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_45:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v28 = 0;
        unint64_t v21 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = v28;
          }
          if (v8) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = v28 + 1;
          }
          *(short float *)_Q0.uint64_t i16 = (short float)*(__int16 *)&MutableRawData[2 * v29];
          short float v31 = (short float)*(__int16 *)&MutableRawData[2 * v30];
          int v32 = (short float *)&a3->i16[v28];
          *int v32 = *(short float *)_Q0.i16;
          v32[1] = v31;
          v28 += 2;
        }
        while (v28 != v21);
        goto LABEL_225;
      }
      unint64_t v21 = 0;
      do
      {
        if (v8) {
          unint64_t v138 = 0;
        }
        else {
          unint64_t v138 = v21;
        }
        *(short float *)_Q0.uint64_t i16 = (short float)*(__int16 *)&MutableRawData[2 * v138];
        a3->i16[v21++] = _Q0.i16[0];
LABEL_225:
        ;
      }
      while (NumElements != v21);
      return _Q0.i16[0];
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_60:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v34 = 0;
        unint64_t v27 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v35 = 0;
          }
          else {
            uint64_t v35 = v34;
          }
          unsigned int v36 = *(_DWORD *)&MutableRawData[4 * v35];
          if (v8) {
            uint64_t v37 = 0;
          }
          else {
            uint64_t v37 = v34 + 1;
          }
          *(float *)_Q0.i32 = (float)v36;
          _S1 = (float)*(unsigned int *)&MutableRawData[4 * v37];
          __asm
          {
            FCVT            H0, S0
            FCVT            H1, S1
          }
          int32x4_t v43 = &a3->i16[v34];
          *int32x4_t v43 = _Q0.i16[0];
          v43[1] = LOWORD(_S1);
          v34 += 2;
        }
        while (v34 != v27);
        goto LABEL_231;
      }
      unint64_t v27 = 0;
      do
      {
        if (v8) {
          unint64_t v139 = 0;
        }
        else {
          unint64_t v139 = v27;
        }
        *(float *)_Q0.i32 = (float)*(unsigned int *)&MutableRawData[4 * v139];
        __asm { FCVT            H0, S0 }
        a3->i16[v27++] = _Q0.i16[0];
LABEL_231:
        ;
      }
      while (NumElements != v27);
      return _Q0.i16[0];
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_75:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v45 = 0;
        unint64_t v33 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v46 = 0;
          }
          else {
            uint64_t v46 = v45;
          }
          int v47 = *(_DWORD *)&MutableRawData[4 * v46];
          if (v8) {
            uint64_t v48 = 0;
          }
          else {
            uint64_t v48 = v45 + 1;
          }
          *(float *)_Q0.i32 = (float)v47;
          _S1 = (float)*(int *)&MutableRawData[4 * v48];
          __asm
          {
            FCVT            H0, S0
            FCVT            H1, S1
          }
          uint64_t v50 = &a3->i16[v45];
          __int16 *v50 = _Q0.i16[0];
          v50[1] = LOWORD(_S1);
          v45 += 2;
        }
        while (v45 != v33);
        goto LABEL_237;
      }
      unint64_t v33 = 0;
      do
      {
        if (v8) {
          unint64_t v140 = 0;
        }
        else {
          unint64_t v140 = v33;
        }
        *(float *)_Q0.i32 = (float)*(int *)&MutableRawData[4 * v140];
        __asm { FCVT            H0, S0 }
        a3->i16[v33++] = _Q0.i16[0];
LABEL_237:
        ;
      }
      while (NumElements != v33);
      return _Q0.i16[0];
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      int64_t NumElements = 1;
LABEL_90:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v52 = 0;
        unint64_t v44 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v53 = 0;
          }
          else {
            uint64_t v53 = v52;
          }
          if (v8) {
            uint64_t v54 = 0;
          }
          else {
            uint64_t v54 = v52 + 1;
          }
          *(float *)_Q0.i32 = (float)*(unint64_t *)&MutableRawData[8 * v53];
          _S1 = (float)*(unint64_t *)&MutableRawData[8 * v54];
          __asm
          {
            FCVT            H0, S0
            FCVT            H1, S1
          }
          unsigned int v56 = &a3->i16[v52];
          __int16 *v56 = _Q0.i16[0];
          v56[1] = LOWORD(_S1);
          v52 += 2;
        }
        while (v52 != v44);
        goto LABEL_243;
      }
      unint64_t v44 = 0;
      do
      {
        if (v8) {
          unint64_t v141 = 0;
        }
        else {
          unint64_t v141 = v44;
        }
        *(float *)_Q0.i32 = (float)*(unint64_t *)&MutableRawData[8 * v141];
        __asm { FCVT            H0, S0 }
        a3->i16[v44++] = _Q0.i16[0];
LABEL_243:
        ;
      }
      while (NumElements != v44);
      return _Q0.i16[0];
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      int64_t NumElements = 1;
LABEL_105:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v67 = 0;
        unint64_t v51 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v68 = 0;
          }
          else {
            uint64_t v68 = v67;
          }
          if (v8) {
            uint64_t v69 = 0;
          }
          else {
            uint64_t v69 = v67 + 1;
          }
          *(float *)_Q0.i32 = (float)*(uint64_t *)&MutableRawData[8 * v68];
          _S1 = (float)*(uint64_t *)&MutableRawData[8 * v69];
          __asm
          {
            FCVT            H0, S0
            FCVT            H1, S1
          }
          uint64_t v71 = &a3->i16[v67];
          *uint64_t v71 = _Q0.i16[0];
          v71[1] = LOWORD(_S1);
          v67 += 2;
        }
        while (v67 != v51);
        goto LABEL_249;
      }
      unint64_t v51 = 0;
      do
      {
        if (v8) {
          unint64_t v142 = 0;
        }
        else {
          unint64_t v142 = v51;
        }
        *(float *)_Q0.i32 = (float)*(uint64_t *)&MutableRawData[8 * v142];
        __asm { FCVT            H0, S0 }
        a3->i16[v51++] = _Q0.i16[0];
LABEL_249:
        ;
      }
      while (NumElements != v51);
      return _Q0.i16[0];
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      _Q0.i16[0] = *(_WORD *)MutableRawData;
      a3->i16[0] = *(_WORD *)MutableRawData;
      return _Q0.i16[0];
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      _Q0.i32[0] = *(_DWORD *)MutableRawData;
      __asm { FCVT            H0, S0 }
      a3->i16[0] = _Q0.i16[0];
      return _Q0.i16[0];
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      _Q0.i64[0] = *(void *)MutableRawData;
      __asm { FCVT            H0, D0 }
      a3->i16[0] = _Q0.i16[0];
      return _Q0.i16[0];
    }
    int64_t NumElements = 1;
    if (!mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
      goto LABEL_155;
    }
    goto LABEL_153;
  }
  MutableRawData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v149);
  uint64_t v4 = v11;
  if (v8) {
    goto LABEL_8;
  }
LABEL_15:
  int64_t NumElements = mlir::ElementsAttr::getNumElements(v147, v148);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1) {
      return _Q0.i16[0];
    }
    goto LABEL_17;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1) {
      return _Q0.i16[0];
    }
    goto LABEL_27;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1) {
      return _Q0.i16[0];
    }
    goto LABEL_39;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1) {
      return _Q0.i16[0];
    }
    goto LABEL_45;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1) {
      return _Q0.i16[0];
    }
    goto LABEL_60;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1) {
      return _Q0.i16[0];
    }
    goto LABEL_75;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements < 1) {
      return _Q0.i16[0];
    }
    goto LABEL_90;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements < 1) {
      return _Q0.i16[0];
    }
    goto LABEL_105;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    if (NumElements >= 1)
    {
      uint64_t v57 = 0;
      if ((unint64_t)NumElements < 0x10) {
        goto LABEL_125;
      }
      if ((unint64_t)((char *)a3 - (char *)MutableRawData) < 0x20) {
        goto LABEL_125;
      }
      uint64_t v57 = NumElements & 0x7FFFFFFFFFFFFFF0;
      int32x4_t v58 = (float16x8_t *)(MutableRawData + 16);
      uint64_t v59 = a3 + 1;
      unint64_t v60 = NumElements & 0xFFFFFFFFFFFFFFF0;
      do
      {
        _Q0 = v58[-1];
        float16x8_t v61 = *v58;
        v59[-1] = _Q0;
        float16x8_t *v59 = v61;
        v58 += 2;
        v59 += 2;
        v60 -= 16;
      }
      while (v60);
      if (NumElements != v57)
      {
LABEL_125:
        uint64_t v62 = v57;
        uint64_t v63 = &MutableRawData[2 * v57];
        int64_t v64 = NumElements - v57;
        uint64_t v65 = &a3->i16[v62];
        do
        {
          __int16 v66 = *(_WORD *)v63;
          v63 += 2;
          _Q0.i16[0] = v66;
          *v65++ = v66;
          --v64;
        }
        while (v64);
      }
    }
    return _Q0.i16[0];
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return _Q0.i16[0];
    }
    if ((unint64_t)NumElements >= 0x10)
    {
      uint64_t v72 = NumElements & 0x7FFFFFFFFFFFFFF0;
      unint64_t v79 = (float32x4_t *)(MutableRawData + 32);
      float32x4_t v80 = a3 + 1;
      unint64_t v81 = NumElements & 0xFFFFFFFFFFFFFFF0;
      do
      {
        float32x4_t v83 = v79[-2];
        float32x4_t v82 = v79[-1];
        float32x4_t v85 = *v79;
        float32x4_t v84 = v79[1];
        v79 += 4;
        float16x8_t v86 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v83), v82);
        _Q0 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v85), v84);
        v80[-1] = v86;
        *float32x4_t v80 = _Q0;
        v80 += 2;
        v81 -= 16;
      }
      while (v81);
      if (NumElements == v72) {
        return _Q0.i16[0];
      }
    }
    else
    {
      uint64_t v72 = 0;
    }
    uint64_t v87 = &MutableRawData[4 * v72];
    int64_t v88 = NumElements - v72;
    unint64_t v89 = &a3->i16[v72];
    do
    {
      __int32 v90 = *(_DWORD *)v87;
      v87 += 4;
      _Q0.i32[0] = v90;
      __asm { FCVT            H0, S0 }
      *v89++ = _Q0.i16[0];
      --v88;
    }
    while (v88);
    return _Q0.i16[0];
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return _Q0.i16[0];
    }
    if ((unint64_t)NumElements >= 0x10)
    {
      uint64_t v73 = NumElements & 0x7FFFFFFFFFFFFFF0;
      double v97 = (float16x8_t *)(MutableRawData + 64);
      int64_t v98 = a3 + 1;
      unint64_t v99 = NumElements & 0xFFFFFFFFFFFFFFF0;
      do
      {
        _Q3 = v97[-2];
        _Q2 = v97[-1];
        _Q1 = v97[-4];
        _Q4 = v97[-3];
        _Q5 = v97[2];
        _Q0 = v97[3];
        _Q7 = *v97;
        _Q6 = v97[1];
        v97 += 8;
        _D16 = _Q1.i64[1];
        __asm
        {
          FCVT            H1, D1
          FCVT            H17, D4
          FCVT            H16, D16
        }
        _Q4.i64[0] = _Q4.i64[1];
        __asm { FCVT            H4, D4 }
        _D18 = _Q7.i64[1];
        __asm { FCVT            H18, D18 }
        _Q1.i16[1] = _D16;
        __asm { FCVT            H7, D7 }
        _Q7.i16[1] = _D18;
        __asm { FCVT            H16, D6 }
        _Q1.i16[2] = _H17;
        _Q7.i16[2] = _D16;
        __asm { FCVT            H16, D3 }
        _Q3.i64[0] = _Q3.i64[1];
        _Q1.i16[3] = _Q4.i16[0];
        __asm
        {
          FCVT            H3, D3
          FCVT            H4, D2
        }
        _Q2.i64[0] = _Q2.i64[1];
        __asm { FCVT            H2, D2 }
        _Q1.i16[4] = _D16;
        _Q6.i64[0] = _Q6.i64[1];
        __asm { FCVT            H6, D6 }
        _Q7.i16[3] = _Q6.i16[0];
        _Q1.i16[5] = _Q3.i16[0];
        __asm { FCVT            H3, D5 }
        _Q7.i16[4] = _Q3.i16[0];
        _Q3.i64[0] = _Q5.i64[1];
        _Q1.i16[6] = _Q4.i16[0];
        __asm { FCVT            H3, D3 }
        _Q7.i16[5] = _Q3.i16[0];
        __asm { FCVT            H3, D0 }
        _Q1.i16[7] = _Q2.i16[0];
        _Q7.i16[6] = _Q3.i16[0];
        _Q0.i64[0] = _Q0.i64[1];
        __asm { FCVT            H0, D0 }
        _Q7.i16[7] = _Q0.i16[0];
        v98[-1] = _Q1;
        float16x8_t *v98 = _Q7;
        v98 += 2;
        v99 -= 16;
      }
      while (v99);
      if (NumElements == v73) {
        return _Q0.i16[0];
      }
    }
    else
    {
      uint64_t v73 = 0;
    }
    int32x4_t v110 = &MutableRawData[8 * v73];
    int64_t v111 = NumElements - v73;
    int32x4_t v112 = &a3->i16[v73];
    do
    {
      uint64_t v113 = *(void *)v110;
      v110 += 8;
      _Q0.i64[0] = v113;
      __asm { FCVT            H0, D0 }
      *v112++ = _Q0.i16[0];
      --v111;
    }
    while (v111);
    return _Q0.i16[0];
  }
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
LABEL_155:
    if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<half>(MutableRawData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
      return _Q0.i16[0];
    }
    llvm::SmallVector<char,40u>::SmallVector((uint64_t)v149, NumElements);
    mlir::detail::unpackBooleanData(MutableRawData, v4, (uint64_t)v149[0], (unint64_t)v149[1]);
    unint64_t v75 = (char *)v149[0];
    if (NumElements < 1) {
      goto LABEL_193;
    }
    if (v8)
    {
      if ((unint64_t)NumElements < 8
        || (char *)v149[0] + 1 > (char *)a3 && v149[0] < (char *)a3 + 2 * NumElements)
      {
        unint64_t v76 = 0;
        goto LABEL_162;
      }
      if ((unint64_t)NumElements >= 0x20)
      {
        unint64_t v76 = NumElements & 0x7FFFFFFFFFFFFFE0;
        int8x8_t v119 = vld1_dup_s8((const char *)v149[0]);
        _Q0 = vcvtq_f16_s16(vmovl_s8(v119));
        unint64_t v120 = a3 + 2;
        unint64_t v121 = NumElements & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v120[-2] = _Q0;
          v120[-1] = _Q0;
          *unint64_t v120 = _Q0;
          v120[1] = _Q0;
          v120 += 4;
          v121 -= 32;
        }
        while (v121);
        if (NumElements == v76) {
          goto LABEL_193;
        }
        if ((NumElements & 0x18) == 0)
        {
LABEL_162:
          unint64_t v77 = NumElements - v76;
          uint64_t v78 = &a3->i16[v76];
          do
          {
            _Q0.i8[0] = *v75;
            _Q0.i64[0] = vmovl_s8(*(int8x8_t *)_Q0.i8).u64[0];
            *(short float *)_Q0.uint64_t i16 = (short float)_Q0.i16[0];
            *v78++ = _Q0.i16[0];
            --v77;
          }
          while (v77);
          goto LABEL_193;
        }
      }
      else
      {
        unint64_t v76 = 0;
      }
      unint64_t v122 = v76;
      unint64_t v76 = NumElements & 0xFFFFFFFFFFFFFFF8;
      int8x8_t v123 = vld1_dup_s8(v75);
      _Q0 = vcvtq_f16_s16(vmovl_s8(v123));
      long long v124 = (float16x8_t *)((char *)a3 + 2 * v122);
      unint64_t v125 = v122 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *v124++ = _Q0;
        v125 += 8;
      }
      while (v125);
      if (NumElements != v76) {
        goto LABEL_162;
      }
LABEL_193:
      if (v75 != (char *)v150) {
        free(v75);
      }
      return _Q0.i16[0];
    }
    if ((unint64_t)NumElements < 8
      || (char *)v149[0] + NumElements > (char *)a3 && v149[0] < (char *)a3 + 2 * NumElements)
    {
      unint64_t v114 = 0;
      goto LABEL_191;
    }
    if ((unint64_t)NumElements >= 0x20)
    {
      unint64_t v114 = NumElements & 0x7FFFFFFFFFFFFFE0;
      long long v126 = (int8x8_t *)((char *)v149[0] + 16);
      int8x8_t v127 = a3 + 2;
      unint64_t v128 = NumElements & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v129 = *(int8x16_t *)v126[-2].i8;
        float16x8_t v130 = vcvtq_f16_s16(vmovl_s8(*v126));
        int16x8_t v131 = vmovl_high_s8(*(int8x16_t *)v126->i8);
        v127[-2] = vcvtq_f16_s16(vmovl_s8(*(int8x8_t *)v129.i8));
        v127[-1] = vcvtq_f16_s16(vmovl_high_s8(v129));
        _Q0 = vcvtq_f16_s16(v131);
        *int8x8_t v127 = v130;
        v127[1] = _Q0;
        v127 += 4;
        v126 += 4;
        v128 -= 32;
      }
      while (v128);
      if (NumElements == v114) {
        goto LABEL_193;
      }
      if ((NumElements & 0x18) == 0)
      {
LABEL_191:
        unint64_t v115 = &v75[v114];
        unint64_t v116 = NumElements - v114;
        unint64_t v117 = (short float *)&a3->i16[v114];
        do
        {
          int v118 = *v115++;
          *(short float *)_Q0.uint64_t i16 = (short float)v118;
          *v117++ = (short float)v118;
          --v116;
        }
        while (v116);
        goto LABEL_193;
      }
    }
    else
    {
      unint64_t v114 = 0;
    }
    unint64_t v132 = v114;
    unint64_t v114 = NumElements & 0xFFFFFFFFFFFFFFF8;
    int32x4_t v133 = (int8x8_t *)&v75[v132];
    int32x4_t v134 = (float16x8_t *)((char *)a3 + 2 * v132);
    unint64_t v135 = v132 - (NumElements & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v136 = *v133++;
      _Q0 = vcvtq_f16_s16(vmovl_s8(v136));
      *v134++ = _Q0;
      v135 += 8;
    }
    while (v135);
    if (NumElements == v114) {
      goto LABEL_193;
    }
    goto LABEL_191;
  }
  if (NumElements < 1) {
    return _Q0.i16[0];
  }
LABEL_153:
  if ((unint64_t)NumElements >= 2)
  {
    uint64_t v92 = 0;
    unint64_t v74 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if (v8) {
        uint64_t v93 = 0;
      }
      else {
        uint64_t v93 = v92;
      }
      if (v8) {
        uint64_t v94 = 0;
      }
      else {
        uint64_t v94 = v92 + 1;
      }
      _Q0.i32[0] = *(unsigned __int16 *)&MutableRawData[2 * v93] << 16;
      _S1 = *(unsigned __int16 *)&MutableRawData[2 * v94] << 16;
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      uint64_t v96 = &a3->i16[v92];
      __int16 *v96 = _Q0.i16[0];
      v96[1] = _S1;
      v92 += 2;
    }
    while (v92 != v74);
    goto LABEL_255;
  }
  unint64_t v74 = 0;
  do
  {
    if (v8) {
      unint64_t v143 = 0;
    }
    else {
      unint64_t v143 = v74;
    }
    _Q0.i32[0] = *(unsigned __int16 *)&MutableRawData[2 * v143] << 16;
    __asm { FCVT            H0, S0 }
    a3->i16[v74++] = _Q0.i16[0];
LABEL_255:
    ;
  }
  while (NumElements != v74);
  return _Q0.i16[0];
}

void mlir::copyElementsAttrData<__emulated_bf16>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v96[5] = *MEMORY[0x1E4F143B8];
  uint64_t v93 = (unsigned __int8 *)a1;
  uint64_t v94 = a2;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
  uint64_t v6 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  v92[0] = v6;
  v92[1] = Type;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v92);
  int v7 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v93);
  uint64_t RawStringData = v93;
  if (mlir::DenseElementsAttr::classof((uint64_t)v93)) {
    uint64_t v9 = RawStringData;
  }
  else {
    uint64_t v9 = 0;
  }
  v95[0] = v9;
  if (v9)
  {
    uint64_t RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v95);
    uint64_t v3 = v10;
    if ((v7 & 1) == 0)
    {
LABEL_19:
      int64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v93, v94);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1) {
          return;
        }
        goto LABEL_21;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1) {
          return;
        }
        goto LABEL_29;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1) {
          return;
        }
        goto LABEL_39;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1) {
          return;
        }
        goto LABEL_49;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1) {
          return;
        }
        goto LABEL_59;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1) {
          return;
        }
LABEL_65:
        if ((unint64_t)NumElements >= 2)
        {
          uint64_t v39 = 0;
          unint64_t v27 = NumElements & 0xFFFFFFFFFFFFFFFELL;
          float32x2_t v40 = (float32x2_t)vdup_n_s32(0x3B800000u);
          unint64_t v41 = (_WORD *)a3;
          do
          {
            if (v7) {
              uint64_t v42 = 0;
            }
            else {
              uint64_t v42 = v39;
            }
            if (v7) {
              uint64_t v43 = 0;
            }
            else {
              uint64_t v43 = v39 + 1;
            }
            v44.i32[0] = *(_DWORD *)&RawStringData[4 * v42];
            v44.i32[1] = *(_DWORD *)&RawStringData[4 * v43];
            float32x2_t v45 = vcvt_f32_s32(v44);
            uint32x2_t v46 = vshr_n_u32((uint32x2_t)vmla_f32(v45, v40, (float32x2_t)vand_s8((int8x8_t)v45, (int8x8_t)0x7F0000007FLL)), 0x10uLL);
            v41[1] = v46.i16[2];
            *unint64_t v41 = v46.i16[0];
            v41 += 2;
            v39 += 2;
          }
          while (v39 != v27);
          if (NumElements == v27) {
            return;
          }
        }
        else
        {
          unint64_t v27 = 0;
        }
        do
        {
          if (v7) {
            unint64_t v47 = 0;
          }
          else {
            unint64_t v47 = v27;
          }
          float v48 = (float)*(int *)&RawStringData[4 * v47]
              + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)*(int *)&RawStringData[4 * v47]) & 0xFF800000)
                      * 0.0039062);
          *(_WORD *)(a3 + 2 * v27++) = HIWORD(v48);
        }
        while (NumElements != v27);
        return;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements < 1) {
          return;
        }
LABEL_85:
        if ((unint64_t)NumElements >= 2)
        {
          uint64_t v50 = 0;
          unint64_t v38 = NumElements & 0xFFFFFFFFFFFFFFFELL;
          float32x2_t v51 = (float32x2_t)vdup_n_s32(0x3B800000u);
          uint64_t v52 = (_WORD *)a3;
          do
          {
            if (v7) {
              uint64_t v53 = 0;
            }
            else {
              uint64_t v53 = v50;
            }
            if (v7) {
              uint64_t v54 = 0;
            }
            else {
              uint64_t v54 = v50 + 1;
            }
            v55.i64[0] = *(void *)&RawStringData[8 * v53];
            v55.i64[1] = *(void *)&RawStringData[8 * v54];
            *(float32x2_t *)v55.uint64_t i8 = vcvt_f32_f64(vcvtq_f64_u64(v55));
            *(uint32x2_t *)v55.uint64_t i8 = vshr_n_u32((uint32x2_t)vmla_f32(*(float32x2_t *)v55.i8, v51, (float32x2_t)vand_s8(*(int8x8_t *)v55.i8, (int8x8_t)0x7F0000007FLL)), 0x10uLL);
            v52[1] = v55.i16[2];
            _WORD *v52 = v55.i16[0];
            v52 += 2;
            v50 += 2;
          }
          while (v50 != v38);
          if (NumElements == v38) {
            return;
          }
        }
        else
        {
          unint64_t v38 = 0;
        }
        do
        {
          if (v7) {
            unint64_t v56 = 0;
          }
          else {
            unint64_t v56 = v38;
          }
          float v57 = (float)*(unint64_t *)&RawStringData[8 * v56]
              + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)*(unint64_t *)&RawStringData[8 * v56]) & 0xFF800000)
                      * 0.0039062);
          *(_WORD *)(a3 + 2 * v38++) = HIWORD(v57);
        }
        while (NumElements != v38);
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements < 1) {
          return;
        }
LABEL_105:
        if ((unint64_t)NumElements >= 2)
        {
          uint64_t v67 = 0;
          unint64_t v49 = NumElements & 0xFFFFFFFFFFFFFFFELL;
          float32x2_t v68 = (float32x2_t)vdup_n_s32(0x3B800000u);
          uint64_t v69 = (_WORD *)a3;
          do
          {
            if (v7) {
              uint64_t v70 = 0;
            }
            else {
              uint64_t v70 = v67;
            }
            if (v7) {
              uint64_t v71 = 0;
            }
            else {
              uint64_t v71 = v67 + 1;
            }
            v72.i64[0] = *(void *)&RawStringData[8 * v70];
            v72.i64[1] = *(void *)&RawStringData[8 * v71];
            *(float32x2_t *)v72.uint64_t i8 = vcvt_f32_f64(vcvtq_f64_s64(v72));
            *(uint32x2_t *)v72.uint64_t i8 = vshr_n_u32((uint32x2_t)vmla_f32(*(float32x2_t *)v72.i8, v68, (float32x2_t)vand_s8(*(int8x8_t *)v72.i8, (int8x8_t)0x7F0000007FLL)), 0x10uLL);
            v69[1] = v72.i16[2];
            *uint64_t v69 = v72.i16[0];
            v69 += 2;
            v67 += 2;
          }
          while (v67 != v49);
          if (NumElements == v49) {
            return;
          }
        }
        else
        {
          unint64_t v49 = 0;
        }
        do
        {
          if (v7) {
            unint64_t v73 = 0;
          }
          else {
            unint64_t v73 = v49;
          }
          float v74 = (float)*(uint64_t *)&RawStringData[8 * v73]
              + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)*(uint64_t *)&RawStringData[8 * v73]) & 0xFF800000)
                      * 0.0039062);
          *(_WORD *)(a3 + 2 * v49++) = HIWORD(v74);
        }
        while (NumElements != v49);
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1) {
          return;
        }
        goto LABEL_125;
      }
      if (mlir::Type::isF32((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1) {
          return;
        }
        goto LABEL_149;
      }
      if (mlir::Type::isF64((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1) {
          return;
        }
        goto LABEL_159;
      }
      if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1) {
          return;
        }
        goto LABEL_169;
      }
      goto LABEL_175;
    }
  }
  else
  {
    if (*(_UNKNOWN **)(*(void *)RawStringData + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
      uint64_t v11 = RawStringData;
    }
    else {
      uint64_t v11 = 0;
    }
    v95[0] = v11;
    if (v11)
    {
      uint64_t RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v95);
      uint64_t v3 = v12;
      if ((v7 & 1) == 0) {
        goto LABEL_19;
      }
    }
    else if ((v7 & 1) == 0)
    {
      goto LABEL_19;
    }
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    int64_t NumElements = 1;
LABEL_21:
    for (uint64_t i = 0; i != NumElements; ++i)
    {
      if (v7) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = i;
      }
      LOBYTE(v13) = RawStringData[v17];
      float v13 = (float)LODWORD(v13)
          + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)LODWORD(v13)) & 0xFF800000) * 0.0039062);
      *(_WORD *)(a3 + 2 * i) = HIWORD(v13);
    }
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    int64_t NumElements = 1;
LABEL_29:
    for (uint64_t j = 0; j != NumElements; ++j)
    {
      if (v7) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = j;
      }
      v15.i8[0] = RawStringData[v19];
      int8x8_t v15 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v15)).u64[0];
      *(float *)v15.i32 = (float)v15.i32[0]
                        + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)v15.i32[0]) & 0xFF800000) * 0.0039062);
      *(_WORD *)(a3 + 2 * j) = v15.i16[1];
    }
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    int64_t NumElements = 1;
LABEL_39:
    for (uint64_t k = 0; k != NumElements; ++k)
    {
      if (v7) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = k;
      }
      LOWORD(v20) = *(_WORD *)&RawStringData[2 * v22];
      float v20 = (float)LODWORD(v20)
          + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)LODWORD(v20)) & 0xFF800000) * 0.0039062);
      *(_WORD *)(a3 + 2 * k) = HIWORD(v20);
    }
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    int64_t NumElements = 1;
LABEL_49:
    for (uint64_t m = 0; m != NumElements; ++m)
    {
      if (v7) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = m;
      }
      v23.i16[0] = *(_WORD *)&RawStringData[2 * v25];
      int16x4_t v23 = (int16x4_t)vmovl_s16(v23).u64[0];
      *(float *)v23.i32 = (float)v23.i32[0]
                        + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)v23.i32[0]) & 0xFF800000) * 0.0039062);
      *(_WORD *)(a3 + 2 * m) = v23.i16[1];
    }
    return;
  }
  if (!mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
      goto LABEL_65;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      int64_t NumElements = 1;
      goto LABEL_85;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      int64_t NumElements = 1;
      goto LABEL_105;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      int64_t NumElements = 1;
LABEL_125:
      for (uint64_t n = 0; n != NumElements; ++n)
      {
        if (v7) {
          uint64_t v59 = 0;
        }
        else {
          uint64_t v59 = n;
        }
        _H0 = *(_WORD *)&RawStringData[2 * v59];
        __asm { FCVT            S0, H0 }
        float v66 = _S0 + (float)(COERCE_FLOAT(LODWORD(_S0) & 0xFF800000) * 0.0039062);
        *(_WORD *)(a3 + 2 * n) = HIWORD(v66);
      }
      return;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      int64_t NumElements = 1;
LABEL_149:
      for (iuint64_t i = 0; ii != NumElements; ++ii)
      {
        if (v7) {
          uint64_t v76 = 0;
        }
        else {
          uint64_t v76 = ii;
        }
        float v77 = *(float *)&RawStringData[4 * v76]
            + (float)(COERCE_FLOAT(*(_DWORD *)&RawStringData[4 * v76] & 0xFF800000) * 0.0039062);
        *(_WORD *)(a3 + 2 * ii) = HIWORD(v77);
      }
      return;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      int64_t NumElements = 1;
LABEL_159:
      for (juint64_t j = 0; jj != NumElements; ++jj)
      {
        if (v7) {
          uint64_t v79 = 0;
        }
        else {
          uint64_t v79 = jj;
        }
        float v80 = *(double *)&RawStringData[8 * v79];
        float v81 = v80 + (float)(COERCE_FLOAT(LODWORD(v80) & 0xFF800000) * 0.0039062);
        *(_WORD *)(a3 + 2 * jj) = HIWORD(v81);
      }
      return;
    }
    int64_t NumElements = 1;
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
LABEL_169:
      for (kuint64_t k = 0; kk != NumElements; ++kk)
      {
        if (v7) {
          uint64_t v83 = 0;
        }
        else {
          uint64_t v83 = kk;
        }
        LODWORD(v84) = *(unsigned __int16 *)&RawStringData[2 * v83] << 16;
        float v85 = v84 + (float)(COERCE_FLOAT(LODWORD(v84) & 0xFF800000) * 0.0039062);
        *(_WORD *)(a3 + 2 * kk) = HIWORD(v85);
      }
      return;
    }
LABEL_175:
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
    {
      llvm::SmallVector<char,40u>::SmallVector((uint64_t)v95, NumElements);
      mlir::detail::unpackBooleanData(RawStringData, v3, (uint64_t)v95[0], (unint64_t)v95[1]);
      uint64_t v87 = v95[0];
      if (NumElements >= 1)
      {
        for (muint64_t m = 0; mm != NumElements; ++mm)
        {
          if (v7) {
            uint64_t v89 = 0;
          }
          else {
            uint64_t v89 = mm;
          }
          v86.i8[0] = v87[v89];
          int8x8_t v86 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v86)).u64[0];
          *(float *)v86.i32 = (float)v86.i32[0]
                            + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)v86.i32[0]) & 0xFF800000) * 0.0039062);
          *(_WORD *)(a3 + 2 * mm) = v86.i16[1];
        }
      }
      if (v87 != (unsigned char *)v96) {
        free(v87);
      }
    }
    else
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<__emulated_bf16>(RawStringData, v3, a3, NumElements, IntOrFloatBitWidth);
    }
    return;
  }
  int64_t NumElements = 1;
LABEL_59:
  if ((unint64_t)NumElements < 2)
  {
    for (unint64_t nn = 0; nn != NumElements; ++nn)
    {
LABEL_76:
      if (v7) {
        unint64_t v36 = 0;
      }
      else {
        unint64_t v36 = nn;
      }
      float v37 = (float)*(unsigned int *)&RawStringData[4 * v36]
          + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)*(unsigned int *)&RawStringData[4 * v36]) & 0xFF800000)
                  * 0.0039062);
      *(_WORD *)(a3 + 2 * nn) = HIWORD(v37);
    }
    return;
  }
  uint64_t v28 = 0;
  unint64_t nn = NumElements & 0xFFFFFFFFFFFFFFFELL;
  float32x2_t v29 = (float32x2_t)vdup_n_s32(0x3B800000u);
  uint64_t v30 = (_WORD *)a3;
  do
  {
    if (v7) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    if (v7) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v28 + 1;
    }
    v33.i32[0] = *(_DWORD *)&RawStringData[4 * v31];
    v33.i32[1] = *(_DWORD *)&RawStringData[4 * v32];
    float32x2_t v34 = vcvt_f32_u32(v33);
    uint32x2_t v35 = vshr_n_u32((uint32x2_t)vmla_f32(v34, v29, (float32x2_t)vand_s8((int8x8_t)v34, (int8x8_t)0x7F0000007FLL)), 0x10uLL);
    v30[1] = v35.i16[2];
    _WORD *v30 = v35.i16[0];
    v30 += 2;
    v28 += 2;
  }
  while (v28 != nn);
  if (NumElements != nn) {
    goto LABEL_76;
  }
}

float32_t mlir::copyElementsAttrData<float>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  v145[5] = *MEMORY[0x1E4F143B8];
  uint64_t v142 = a1;
  uint64_t v143 = a2;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v142);
  int v7 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  v141[0] = v7;
  v141[1] = Type;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v141);
  int v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v142);
  uint64_t v9 = v142;
  if (mlir::DenseElementsAttr::classof(v142)) {
    uint64_t v10 = (void *)v9;
  }
  else {
    uint64_t v10 = 0;
  }
  v144[0] = v10;
  if (v10)
  {
    uint64_t RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v144);
    uint64_t v4 = v11;
    if (v8) {
      goto LABEL_8;
    }
LABEL_15:
    int64_t NumElements = mlir::ElementsAttr::getNumElements(v142, v143);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1) {
        return _Q0.f32[0];
      }
      goto LABEL_17;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1) {
        return _Q0.f32[0];
      }
      goto LABEL_27;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1) {
        return _Q0.f32[0];
      }
      goto LABEL_39;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1) {
        return _Q0.f32[0];
      }
      goto LABEL_45;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1) {
        return _Q0.f32[0];
      }
      goto LABEL_60;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1) {
        return _Q0.f32[0];
      }
      goto LABEL_75;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1) {
        return _Q0.f32[0];
      }
      goto LABEL_90;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1) {
        return _Q0.f32[0];
      }
      goto LABEL_105;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return _Q0.f32[0];
      }
      goto LABEL_120;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      if (NumElements >= 1)
      {
        uint64_t v57 = 0;
        if ((unint64_t)NumElements < 8) {
          goto LABEL_140;
        }
        if ((unint64_t)((char *)a3 - (char *)RawStringData) < 0x20) {
          goto LABEL_140;
        }
        uint64_t v57 = NumElements & 0x7FFFFFFFFFFFFFF8;
        int32x4_t v58 = (float32x4_t *)(RawStringData + 16);
        uint64_t v59 = (float32x4_t *)(a3 + 4);
        unint64_t v60 = NumElements & 0xFFFFFFFFFFFFFFF8;
        do
        {
          _Q0 = v58[-1];
          float32x4_t v61 = *v58;
          v59[-1] = _Q0;
          float32x4_t *v59 = v61;
          v58 += 2;
          v59 += 2;
          v60 -= 8;
        }
        while (v60);
        if (NumElements != v57)
        {
LABEL_140:
          uint64_t v62 = v57;
          uint64_t v63 = &RawStringData[4 * v57];
          int64_t v64 = NumElements - v57;
          uint64_t v65 = &a3[v62];
          do
          {
            __int32 v66 = *(_DWORD *)v63;
            v63 += 4;
            _Q0.i32[0] = v66;
            *v65++ = v66;
            --v64;
          }
          while (v64);
        }
      }
      return _Q0.f32[0];
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return _Q0.f32[0];
      }
      if ((unint64_t)NumElements >= 8)
      {
        uint64_t v78 = NumElements & 0x7FFFFFFFFFFFFFF8;
        float v85 = (float64x2_t *)(RawStringData + 32);
        int8x8_t v86 = (float32x4_t *)(a3 + 4);
        unint64_t v87 = NumElements & 0xFFFFFFFFFFFFFFF8;
        do
        {
          float64x2_t v89 = v85[-2];
          float64x2_t v88 = v85[-1];
          float64x2_t v91 = *v85;
          float64x2_t v90 = v85[1];
          v85 += 4;
          float32x4_t v92 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v89), v88);
          _Q0 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v91), v90);
          v86[-1] = v92;
          *int8x8_t v86 = _Q0;
          v86 += 2;
          v87 -= 8;
        }
        while (v87);
        if (NumElements == v78) {
          return _Q0.f32[0];
        }
      }
      else
      {
        uint64_t v78 = 0;
      }
      uint64_t v93 = (double *)&RawStringData[8 * v78];
      int64_t v94 = NumElements - v78;
      int64x2_t v95 = &a3[v78];
      do
      {
        double v96 = *v93++;
        _Q0.f32[0] = v96;
        *v95++ = _Q0.i32[0];
        --v94;
      }
      while (v94);
      return _Q0.f32[0];
    }
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return _Q0.f32[0];
      }
      if ((unint64_t)NumElements >= 0x10)
      {
        uint64_t v79 = NumElements & 0x7FFFFFFFFFFFFFF0;
        double v97 = (int16x4_t *)(RawStringData + 16);
        int64_t v98 = (int32x4_t *)(a3 + 8);
        unint64_t v99 = NumElements & 0xFFFFFFFFFFFFFFF0;
        do
        {
          _Q0 = *(_OWORD *)v97[-2].i8;
          _Q1 = *(int32x4_t *)v97->i8;
          int32x4_t v102 = vshll_n_s16(*(int16x4_t *)&_Q0, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v103 = vshll_n_s16(*v97, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v98[-2] = v102;
          v98[-1] = (int32x4_t)_Q0;
          int32x4_t *v98 = v103;
          v98[1] = _Q1;
          v98 += 4;
          v97 += 4;
          v99 -= 16;
        }
        while (v99);
        if (NumElements == v79) {
          return _Q0.f32[0];
        }
      }
      else
      {
        uint64_t v79 = 0;
      }
      int16x8_t v104 = &RawStringData[2 * v79];
      int64_t v105 = NumElements - v79;
      unint64_t v106 = &a3[v79];
      do
      {
        int v107 = *(unsigned __int16 *)v104;
        v104 += 2;
        *v106++ = v107 << 16;
        --v105;
      }
      while (v105);
      return _Q0.f32[0];
    }
LABEL_165:
    if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<float>(RawStringData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
      return _Q0.f32[0];
    }
    llvm::SmallVector<char,40u>::SmallVector((uint64_t)v144, NumElements);
    mlir::detail::unpackBooleanData(RawStringData, v4, (uint64_t)v144[0], (unint64_t)v144[1]);
    float v80 = (__int8 *)v144[0];
    if (NumElements < 1) {
      goto LABEL_194;
    }
    if (v8)
    {
      if ((unint64_t)NumElements < 8 || (char *)v144[0] + 1 > (char *)a3 && v144[0] < &a3[NumElements])
      {
        unint64_t v81 = 0;
        goto LABEL_172;
      }
      if ((unint64_t)NumElements >= 0x10)
      {
        unint64_t v81 = NumElements & 0x7FFFFFFFFFFFFFF0;
        int16x4_t v123 = (int16x4_t)vld1_dup_s8((const char *)v144[0]);
        _Q0 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16(v123, 8uLL), 8uLL)));
        unint64_t v124 = NumElements & 0xFFFFFFFFFFFFFFF0;
        unint64_t v125 = (float32x4_t *)a3;
        do
        {
          *unint64_t v125 = _Q0;
          v125[1] = _Q0;
          v125[2] = _Q0;
          v125[3] = _Q0;
          v125 += 4;
          v124 -= 16;
        }
        while (v124);
        if (NumElements == v81) {
          goto LABEL_194;
        }
        if ((NumElements & 8) == 0)
        {
LABEL_172:
          unint64_t v82 = NumElements - v81;
          uint64_t v83 = &a3[v81];
          do
          {
            _Q0.i8[0] = *v80;
            _Q0.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)_Q0.f32)).u64[0];
            _Q0.f32[0] = (float)_Q0.i32[0];
            *v83++ = _Q0.i32[0];
            --v82;
          }
          while (v82);
          goto LABEL_194;
        }
      }
      else
      {
        unint64_t v81 = 0;
      }
      unint64_t v113 = v81;
      unint64_t v81 = NumElements & 0xFFFFFFFFFFFFFFF8;
      _Q0 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16(vdup_n_s16(*v80), 8uLL), 8uLL)));
      unint64_t v114 = (float32x4_t *)&a3[v113];
      unint64_t v115 = v113 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *unint64_t v114 = _Q0;
        v114[1] = _Q0;
        v114 += 2;
        v115 += 8;
      }
      while (v115);
      if (NumElements != v81) {
        goto LABEL_172;
      }
LABEL_194:
      if (v80 != (__int8 *)v145) {
        free(v80);
      }
      return _Q0.f32[0];
    }
    if ((unint64_t)NumElements < 8 || (char *)v144[0] + NumElements > (char *)a3 && v144[0] < &a3[NumElements])
    {
      unint64_t v108 = 0;
      goto LABEL_192;
    }
    if ((unint64_t)NumElements >= 0x10)
    {
      unint64_t v108 = NumElements & 0x7FFFFFFFFFFFFFF0;
      unint64_t v126 = NumElements & 0xFFFFFFFFFFFFFFF0;
      int8x8_t v127 = (float32x4_t *)a3;
      unint64_t v128 = (int8x16_t *)v144[0];
      do
      {
        int8x16_t v129 = *v128++;
        int8x8_t v130 = (int8x8_t)vextq_s8(v129, v129, 8uLL).u64[0];
        *int8x8_t v127 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v129.i8, *(int8x8_t *)v129.i8), 8uLL), 8uLL)));
        v127[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v129.i8, *(int8x8_t *)v129.i8), 8uLL), 8uLL)));
        _Q0 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v130, *(int8x8_t *)v129.i8), 8uLL), 8uLL)));
        v127[2] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v130, *(int8x8_t *)v129.i8), 8uLL), 8uLL)));
        v127[3] = _Q0;
        v127 += 4;
        v126 -= 16;
      }
      while (v126);
      if (NumElements == v108) {
        goto LABEL_194;
      }
      if ((NumElements & 8) == 0)
      {
LABEL_192:
        int32x4_t v109 = &v80[v108];
        unint64_t v110 = NumElements - v108;
        int64_t v111 = (float *)&a3[v108];
        do
        {
          int v112 = *v109++;
          _Q0.f32[0] = (float)v112;
          *v111++ = (float)v112;
          --v110;
        }
        while (v110);
        goto LABEL_194;
      }
    }
    else
    {
      unint64_t v108 = 0;
    }
    unint64_t v116 = v108;
    unint64_t v108 = NumElements & 0xFFFFFFFFFFFFFFF8;
    unint64_t v117 = (int8x8_t *)&v80[v116];
    int v118 = (float32x4_t *)&a3[v116];
    unint64_t v119 = v116 - (NumElements & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v120 = *v117++;
      int8x8_t v121 = v120;
      float32x4_t v122 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v121, v121), 8uLL), 8uLL)));
      _Q0 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v121, v121), 8uLL), 8uLL)));
      float32x4_t *v118 = v122;
      v118[1] = _Q0;
      v118 += 2;
      v119 += 8;
    }
    while (v119);
    if (NumElements == v108) {
      goto LABEL_194;
    }
    goto LABEL_192;
  }
  if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
    uint64_t v14 = (void *)v9;
  }
  else {
    uint64_t v14 = 0;
  }
  v144[0] = v14;
  if (v14)
  {
    uint64_t RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v144);
    uint64_t v4 = v15;
    if ((v8 & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v8 & 1) == 0)
  {
    goto LABEL_15;
  }
LABEL_8:
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    int64_t NumElements = 1;
LABEL_17:
    for (uint64_t i = 0; i != NumElements; ++i)
    {
      if (v8) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = i;
      }
      _Q0.i8[0] = RawStringData[v17];
      _Q0.f32[0] = (float)_Q0.u32[0];
      a3[i] = _Q0.i32[0];
    }
    return _Q0.f32[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    int64_t NumElements = 1;
LABEL_27:
    for (uint64_t j = 0; j != NumElements; ++j)
    {
      if (v8) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = j;
      }
      _Q0.i8[0] = RawStringData[v19];
      _Q0.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)_Q0.f32)).u64[0];
      _Q0.f32[0] = (float)_Q0.i32[0];
      a3[j] = _Q0.i32[0];
    }
    return _Q0.f32[0];
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    int64_t NumElements = 1;
LABEL_39:
    if ((unint64_t)NumElements >= 2)
    {
      uint64_t v24 = 0;
      unint64_t v21 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v24;
        }
        if (v8) {
          uint64_t v26 = 0;
        }
        else {
          uint64_t v26 = v24 + 1;
        }
        _Q0.i16[0] = *(_WORD *)&RawStringData[2 * v25];
        _Q0.f32[0] = (float)_Q0.u32[0];
        LOWORD(v20) = *(_WORD *)&RawStringData[2 * v26];
        float v20 = (float)LODWORD(v20);
        unint64_t v27 = (float *)&a3[v24];
        float *v27 = _Q0.f32[0];
        v27[1] = v20;
        v24 += 2;
      }
      while (v24 != v21);
      goto LABEL_222;
    }
    unint64_t v21 = 0;
    do
    {
      if (v8) {
        unint64_t v131 = 0;
      }
      else {
        unint64_t v131 = v21;
      }
      _Q0.i16[0] = *(_WORD *)&RawStringData[2 * v131];
      _Q0.f32[0] = (float)_Q0.u32[0];
      a3[v21++] = _Q0.i32[0];
LABEL_222:
      ;
    }
    while (NumElements != v21);
    return _Q0.f32[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    int64_t NumElements = 1;
LABEL_45:
    if ((unint64_t)NumElements >= 2)
    {
      uint64_t v29 = 0;
      unint64_t v23 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = v29;
        }
        _Q0.i16[0] = *(_WORD *)&RawStringData[2 * v30];
        if (v8) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = v29 + 1;
        }
        _Q0.i64[0] = vmovl_s16(*(int16x4_t *)_Q0.f32).u64[0];
        _Q0.f32[0] = (float)_Q0.i32[0];
        v22.i16[0] = *(_WORD *)&RawStringData[2 * v31];
        int16x4_t v22 = (int16x4_t)vmovl_s16(v22).u64[0];
        *(float *)v22.i32 = (float)v22.i32[0];
        uint64_t v32 = &a3[v29];
        *uint64_t v32 = _Q0.i32[0];
        v32[1] = v22.i32[0];
        v29 += 2;
      }
      while (v29 != v23);
      goto LABEL_228;
    }
    unint64_t v23 = 0;
    do
    {
      if (v8) {
        unint64_t v132 = 0;
      }
      else {
        unint64_t v132 = v23;
      }
      _Q0.i16[0] = *(_WORD *)&RawStringData[2 * v132];
      _Q0.i64[0] = vmovl_s16(*(int16x4_t *)_Q0.f32).u64[0];
      _Q0.f32[0] = (float)_Q0.i32[0];
      a3[v23++] = _Q0.i32[0];
LABEL_228:
      ;
    }
    while (NumElements != v23);
    return _Q0.f32[0];
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    int64_t NumElements = 1;
LABEL_60:
    if ((unint64_t)NumElements >= 2)
    {
      uint64_t v34 = 0;
      unint64_t v28 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v8) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = v34 + 1;
        }
        _Q0.f32[0] = (float)*(unsigned int *)&RawStringData[4 * v35];
        float v37 = (float)*(unsigned int *)&RawStringData[4 * v36];
        unint64_t v38 = (float *)&a3[v34];
        float *v38 = _Q0.f32[0];
        v38[1] = v37;
        v34 += 2;
      }
      while (v34 != v28);
      goto LABEL_234;
    }
    unint64_t v28 = 0;
    do
    {
      if (v8) {
        unint64_t v133 = 0;
      }
      else {
        unint64_t v133 = v28;
      }
      _Q0.f32[0] = (float)*(unsigned int *)&RawStringData[4 * v133];
      a3[v28++] = _Q0.i32[0];
LABEL_234:
      ;
    }
    while (NumElements != v28);
    return _Q0.f32[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    int64_t NumElements = 1;
LABEL_75:
    if ((unint64_t)NumElements >= 2)
    {
      uint64_t v40 = 0;
      unint64_t v33 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        if (v8) {
          uint64_t v42 = 0;
        }
        else {
          uint64_t v42 = v40 + 1;
        }
        _Q0.f32[0] = (float)*(int *)&RawStringData[4 * v41];
        float v43 = (float)*(int *)&RawStringData[4 * v42];
        int32x2_t v44 = (float *)&a3[v40];
        *int32x2_t v44 = _Q0.f32[0];
        v44[1] = v43;
        v40 += 2;
      }
      while (v40 != v33);
      goto LABEL_240;
    }
    unint64_t v33 = 0;
    do
    {
      if (v8) {
        unint64_t v134 = 0;
      }
      else {
        unint64_t v134 = v33;
      }
      _Q0.f32[0] = (float)*(int *)&RawStringData[4 * v134];
      a3[v33++] = _Q0.i32[0];
LABEL_240:
      ;
    }
    while (NumElements != v33);
    return _Q0.f32[0];
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    int64_t NumElements = 1;
LABEL_90:
    if ((unint64_t)NumElements >= 2)
    {
      uint64_t v46 = 0;
      unint64_t v39 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8) {
          uint64_t v47 = 0;
        }
        else {
          uint64_t v47 = v46;
        }
        if (v8) {
          uint64_t v48 = 0;
        }
        else {
          uint64_t v48 = v46 + 1;
        }
        _Q0.f32[0] = (float)*(unint64_t *)&RawStringData[8 * v47];
        float v49 = (float)*(unint64_t *)&RawStringData[8 * v48];
        uint64_t v50 = (float *)&a3[v46];
        float *v50 = _Q0.f32[0];
        v50[1] = v49;
        v46 += 2;
      }
      while (v46 != v39);
      goto LABEL_246;
    }
    unint64_t v39 = 0;
    do
    {
      if (v8) {
        unint64_t v135 = 0;
      }
      else {
        unint64_t v135 = v39;
      }
      _Q0.f32[0] = (float)*(unint64_t *)&RawStringData[8 * v135];
      *(float *)&a3[v39++] = _Q0.f32[0];
LABEL_246:
      ;
    }
    while (NumElements != v39);
    return _Q0.f32[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    int64_t NumElements = 1;
LABEL_105:
    if ((unint64_t)NumElements >= 2)
    {
      uint64_t v52 = 0;
      unint64_t v45 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8) {
          uint64_t v53 = 0;
        }
        else {
          uint64_t v53 = v52;
        }
        if (v8) {
          uint64_t v54 = 0;
        }
        else {
          uint64_t v54 = v52 + 1;
        }
        _Q0.f32[0] = (float)*(uint64_t *)&RawStringData[8 * v53];
        float v55 = (float)*(uint64_t *)&RawStringData[8 * v54];
        unint64_t v56 = (float *)&a3[v52];
        float *v56 = _Q0.f32[0];
        v56[1] = v55;
        v52 += 2;
      }
      while (v52 != v45);
      goto LABEL_252;
    }
    unint64_t v45 = 0;
    do
    {
      if (v8) {
        unint64_t v136 = 0;
      }
      else {
        unint64_t v136 = v45;
      }
      _Q0.f32[0] = (float)*(uint64_t *)&RawStringData[8 * v136];
      *(float *)&a3[v45++] = _Q0.f32[0];
LABEL_252:
      ;
    }
    while (NumElements != v45);
    return _Q0.f32[0];
  }
  if (!mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      _Q0.i32[0] = *(_DWORD *)RawStringData;
      *a3 = *(_DWORD *)RawStringData;
      return _Q0.f32[0];
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      _Q0.f32[0] = *(double *)RawStringData;
      *a3 = _Q0.i32[0];
      return _Q0.f32[0];
    }
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      *a3 = *(unsigned __int16 *)RawStringData << 16;
      return _Q0.f32[0];
    }
    int64_t NumElements = 1;
    goto LABEL_165;
  }
  int64_t NumElements = 1;
LABEL_120:
  if ((unint64_t)NumElements >= 2)
  {
    uint64_t v67 = 0;
    unint64_t v51 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if (v8) {
        uint64_t v68 = 0;
      }
      else {
        uint64_t v68 = v67;
      }
      if (v8) {
        uint64_t v69 = 0;
      }
      else {
        uint64_t v69 = v67 + 1;
      }
      _H0 = *(_WORD *)&RawStringData[2 * v68];
      _H1 = *(_WORD *)&RawStringData[2 * v69];
      __asm
      {
        FCVT            S0, H0
        FCVT            S1, H1
      }
      float v77 = &a3[v67];
      *float v77 = _Q0.i32[0];
      v77[1] = _S1;
      v67 += 2;
    }
    while (v67 != v51);
    goto LABEL_258;
  }
  unint64_t v51 = 0;
  do
  {
    if (v8) {
      unint64_t v137 = 0;
    }
    else {
      unint64_t v137 = v51;
    }
    _H0 = *(_WORD *)&RawStringData[2 * v137];
    __asm { FCVT            S0, H0 }
    a3[v51++] = _Q0.i32[0];
LABEL_258:
    ;
  }
  while (NumElements != v51);
  return _Q0.f32[0];
}

float64_t mlir::copyElementsAttrData<double>(uint64_t a1, uint64_t a2, void *a3)
{
  v184[5] = *MEMORY[0x1E4F143B8];
  uint64_t v181 = a1;
  uint64_t v182 = a2;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v181);
  int v7 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  v180[0] = v7;
  v180[1] = Type;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v180);
  int v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v181);
  uint64_t v9 = v181;
  if (mlir::DenseElementsAttr::classof(v181)) {
    uint64_t v10 = (void *)v9;
  }
  else {
    uint64_t v10 = 0;
  }
  v183[0] = v10;
  if (!v10)
  {
    if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
      uint64_t v14 = (void *)v9;
    }
    else {
      uint64_t v14 = 0;
    }
    v183[0] = v14;
    if (v14)
    {
      MutableRawData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v183);
      uint64_t v4 = v15;
      if ((v8 & 1) == 0) {
        goto LABEL_15;
      }
    }
    else if ((v8 & 1) == 0)
    {
      goto LABEL_15;
    }
LABEL_8:
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_17:
      for (uint64_t i = 0; i != NumElements; ++i)
      {
        if (v8) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = i;
        }
        LOBYTE(_Q0.f64[0]) = MutableRawData[v17];
        _Q0.f64[0] = (double)*(unint64_t *)&_Q0.f64[0];
        a3[i] = *(void *)&_Q0.f64[0];
      }
      return _Q0.f64[0];
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      int64_t NumElements = 1;
LABEL_27:
      for (uint64_t j = 0; j != NumElements; ++j)
      {
        if (v8) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = j;
        }
        _Q0.f64[0] = (double)(char)MutableRawData[v19];
        *(double *)&a3[j] = _Q0.f64[0];
      }
      return _Q0.f64[0];
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_39:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v24 = 0;
        unint64_t v21 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v25 = 0;
          }
          else {
            uint64_t v25 = v24;
          }
          if (v8) {
            uint64_t v26 = 0;
          }
          else {
            uint64_t v26 = v24 + 1;
          }
          LOWORD(_Q0.f64[0]) = *(_WORD *)&MutableRawData[2 * v25];
          _Q0.f64[0] = (double)*(unint64_t *)&_Q0.f64[0];
          LOWORD(v20) = *(_WORD *)&MutableRawData[2 * v26];
          double v20 = (double)*(unint64_t *)&v20;
          unint64_t v27 = (float64_t *)&a3[v24];
          float64_t *v27 = _Q0.f64[0];
          v27[1] = v20;
          v24 += 2;
        }
        while (v24 != v21);
        goto LABEL_224;
      }
      unint64_t v21 = 0;
      do
      {
        if (v8) {
          unint64_t v169 = 0;
        }
        else {
          unint64_t v169 = v21;
        }
        LOWORD(_Q0.f64[0]) = *(_WORD *)&MutableRawData[2 * v169];
        _Q0.f64[0] = (double)*(unint64_t *)&_Q0.f64[0];
        a3[v21++] = *(void *)&_Q0.f64[0];
LABEL_224:
        ;
      }
      while (NumElements != v21);
      return _Q0.f64[0];
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      int64_t NumElements = 1;
LABEL_45:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v30 = 0;
        unint64_t v23 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = v30;
          }
          if (v8) {
            uint64_t v32 = 0;
          }
          else {
            uint64_t v32 = v30 + 1;
          }
          LOWORD(_Q0.f64[0]) = *(_WORD *)&MutableRawData[2 * v31];
          _Q0.f64[0] = (double)vmovl_s16(*(int16x4_t *)&_Q0.f64[0]).i32[0];
          LOWORD(v22) = *(_WORD *)&MutableRawData[2 * v32];
          double v22 = (double)vmovl_s16(*(int16x4_t *)&v22).i32[0];
          unint64_t v33 = (float64_t *)&a3[v30];
          *unint64_t v33 = _Q0.f64[0];
          v33[1] = v22;
          v30 += 2;
        }
        while (v30 != v23);
        goto LABEL_230;
      }
      unint64_t v23 = 0;
      do
      {
        if (v8) {
          unint64_t v170 = 0;
        }
        else {
          unint64_t v170 = v23;
        }
        LOWORD(_Q0.f64[0]) = *(_WORD *)&MutableRawData[2 * v170];
        _Q0.f64[0] = (double)vmovl_s16(*(int16x4_t *)&_Q0.f64[0]).i32[0];
        *(double *)&a3[v23++] = _Q0.f64[0];
LABEL_230:
        ;
      }
      while (NumElements != v23);
      return _Q0.f64[0];
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_60:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v35 = 0;
        unint64_t v29 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = v35;
          }
          if (v8) {
            uint64_t v37 = 0;
          }
          else {
            uint64_t v37 = v35 + 1;
          }
          LODWORD(_Q0.f64[0]) = *(_DWORD *)&MutableRawData[4 * v36];
          _Q0.f64[0] = (double)*(unint64_t *)&_Q0.f64[0];
          LODWORD(v28) = *(_DWORD *)&MutableRawData[4 * v37];
          double v28 = (double)*(unint64_t *)&v28;
          unint64_t v38 = (float64_t *)&a3[v35];
          float64_t *v38 = _Q0.f64[0];
          v38[1] = v28;
          v35 += 2;
        }
        while (v35 != v29);
        goto LABEL_236;
      }
      unint64_t v29 = 0;
      do
      {
        if (v8) {
          unint64_t v171 = 0;
        }
        else {
          unint64_t v171 = v29;
        }
        LODWORD(_Q0.f64[0]) = *(_DWORD *)&MutableRawData[4 * v171];
        _Q0.f64[0] = (double)*(unint64_t *)&_Q0.f64[0];
        a3[v29++] = *(void *)&_Q0.f64[0];
LABEL_236:
        ;
      }
      while (NumElements != v29);
      return _Q0.f64[0];
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      int64_t NumElements = 1;
LABEL_75:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v40 = 0;
        unint64_t v34 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v41 = 0;
          }
          else {
            uint64_t v41 = v40;
          }
          int v42 = *(_DWORD *)&MutableRawData[4 * v41];
          if (v8) {
            uint64_t v43 = 0;
          }
          else {
            uint64_t v43 = v40 + 1;
          }
          _Q0.f64[0] = (double)v42;
          double v44 = (double)*(int *)&MutableRawData[4 * v43];
          unint64_t v45 = (float64_t *)&a3[v40];
          *unint64_t v45 = _Q0.f64[0];
          v45[1] = v44;
          v40 += 2;
        }
        while (v40 != v34);
        goto LABEL_242;
      }
      unint64_t v34 = 0;
      do
      {
        if (v8) {
          unint64_t v172 = 0;
        }
        else {
          unint64_t v172 = v34;
        }
        _Q0.f64[0] = (double)*(int *)&MutableRawData[4 * v172];
        *(double *)&a3[v34++] = _Q0.f64[0];
LABEL_242:
        ;
      }
      while (NumElements != v34);
      return _Q0.f64[0];
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      int64_t NumElements = 1;
LABEL_90:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v47 = 0;
        unint64_t v39 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v48 = 0;
          }
          else {
            uint64_t v48 = v47;
          }
          if (v8) {
            uint64_t v49 = 0;
          }
          else {
            uint64_t v49 = v47 + 1;
          }
          _Q0.f64[0] = (double)*(unint64_t *)&MutableRawData[8 * v48];
          double v50 = (double)*(unint64_t *)&MutableRawData[8 * v49];
          unint64_t v51 = (float64_t *)&a3[v47];
          float64_t *v51 = _Q0.f64[0];
          v51[1] = v50;
          v47 += 2;
        }
        while (v47 != v39);
        goto LABEL_248;
      }
      unint64_t v39 = 0;
      do
      {
        if (v8) {
          unint64_t v173 = 0;
        }
        else {
          unint64_t v173 = v39;
        }
        _Q0.f64[0] = (double)*(unint64_t *)&MutableRawData[8 * v173];
        a3[v39++] = *(void *)&_Q0.f64[0];
LABEL_248:
        ;
      }
      while (NumElements != v39);
      return _Q0.f64[0];
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      int64_t NumElements = 1;
LABEL_105:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v53 = 0;
        unint64_t v46 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v54 = 0;
          }
          else {
            uint64_t v54 = v53;
          }
          if (v8) {
            uint64_t v55 = 0;
          }
          else {
            uint64_t v55 = v53 + 1;
          }
          _Q0.f64[0] = (double)*(uint64_t *)&MutableRawData[8 * v54];
          double v56 = (double)*(uint64_t *)&MutableRawData[8 * v55];
          uint64_t v57 = (float64_t *)&a3[v53];
          float64_t *v57 = _Q0.f64[0];
          v57[1] = v56;
          v53 += 2;
        }
        while (v53 != v46);
        goto LABEL_254;
      }
      unint64_t v46 = 0;
      do
      {
        if (v8) {
          unint64_t v174 = 0;
        }
        else {
          unint64_t v174 = v46;
        }
        _Q0.f64[0] = (double)*(uint64_t *)&MutableRawData[8 * v174];
        a3[v46++] = *(void *)&_Q0.f64[0];
LABEL_254:
        ;
      }
      while (NumElements != v46);
      return _Q0.f64[0];
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      int64_t NumElements = 1;
LABEL_120:
      if ((unint64_t)NumElements >= 2)
      {
        uint64_t v59 = 0;
        unint64_t v52 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8) {
            uint64_t v60 = 0;
          }
          else {
            uint64_t v60 = v59;
          }
          if (v8) {
            uint64_t v61 = 0;
          }
          else {
            uint64_t v61 = v59 + 1;
          }
          _H0 = *(_WORD *)&MutableRawData[2 * v60];
          _H1 = *(_WORD *)&MutableRawData[2 * v61];
          __asm
          {
            FCVT            D0, H0
            FCVT            D1, H1
          }
          uint64_t v69 = &a3[v59];
          *uint64_t v69 = *(void *)&_Q0.f64[0];
          v69[1] = _D1;
          v59 += 2;
        }
        while (v59 != v52);
        goto LABEL_260;
      }
      unint64_t v52 = 0;
      do
      {
        if (v8) {
          unint64_t v175 = 0;
        }
        else {
          unint64_t v175 = v52;
        }
        _H0 = *(_WORD *)&MutableRawData[2 * v175];
        __asm { FCVT            D0, H0 }
        a3[v52++] = *(void *)&_Q0.f64[0];
LABEL_260:
        ;
      }
      while (NumElements != v52);
      return _Q0.f64[0];
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      _Q0.f64[0] = *(float *)MutableRawData;
      *a3 = *(void *)&_Q0.f64[0];
      return _Q0.f64[0];
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      _Q0.f64[0] = *(float64_t *)MutableRawData;
      *a3 = *(void *)MutableRawData;
      return _Q0.f64[0];
    }
    int64_t NumElements = 1;
    if (!mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
      goto LABEL_164;
    }
    goto LABEL_162;
  }
  MutableRawData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v183);
  uint64_t v4 = v11;
  if (v8) {
    goto LABEL_8;
  }
LABEL_15:
  int64_t NumElements = mlir::ElementsAttr::getNumElements(v181, v182);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1) {
      return _Q0.f64[0];
    }
    goto LABEL_17;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1) {
      return _Q0.f64[0];
    }
    goto LABEL_27;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1) {
      return _Q0.f64[0];
    }
    goto LABEL_39;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1) {
      return _Q0.f64[0];
    }
    goto LABEL_45;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1) {
      return _Q0.f64[0];
    }
    goto LABEL_60;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1) {
      return _Q0.f64[0];
    }
    goto LABEL_75;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements < 1) {
      return _Q0.f64[0];
    }
    goto LABEL_90;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements < 1) {
      return _Q0.f64[0];
    }
    goto LABEL_105;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return _Q0.f64[0];
    }
    goto LABEL_120;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1) {
      return _Q0.f64[0];
    }
    if ((unint64_t)NumElements >= 8)
    {
      uint64_t v58 = NumElements & 0x7FFFFFFFFFFFFFF8;
      float v85 = (float32x2_t *)(MutableRawData + 16);
      int8x8_t v86 = (float64x2_t *)(a3 + 4);
      unint64_t v87 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v88 = *(float32x4_t *)v85[-2].f32;
        float64x2_t v89 = vcvtq_f64_f32(*(float32x2_t *)v88.f32);
        _Q0 = vcvt_hight_f64_f32(v88);
        float64x2_t v90 = vcvtq_f64_f32(*v85);
        float64x2_t v91 = vcvt_hight_f64_f32(*(float32x4_t *)v85->f32);
        v86[-2] = v89;
        v86[-1] = _Q0;
        *int8x8_t v86 = v90;
        v86[1] = v91;
        v86 += 4;
        v85 += 4;
        v87 -= 8;
      }
      while (v87);
      if (NumElements == v58) {
        return _Q0.f64[0];
      }
    }
    else
    {
      uint64_t v58 = 0;
    }
    float32x4_t v92 = (float *)&MutableRawData[4 * v58];
    int64_t v93 = NumElements - v58;
    int64_t v94 = (double *)&a3[v58];
    do
    {
      float v95 = *v92++;
      _Q0.f64[0] = v95;
      *v94++ = v95;
      --v93;
    }
    while (v93);
    return _Q0.f64[0];
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    if (NumElements >= 1)
    {
      uint64_t v70 = 0;
      if ((unint64_t)NumElements < 4) {
        goto LABEL_155;
      }
      if ((unint64_t)((char *)a3 - (char *)MutableRawData) < 0x20) {
        goto LABEL_155;
      }
      uint64_t v70 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
      uint64_t v71 = (float64x2_t *)(MutableRawData + 16);
      int64x2_t v72 = (float64x2_t *)(a3 + 2);
      unint64_t v73 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        _Q0 = v71[-1];
        float64x2_t v74 = *v71;
        v72[-1] = _Q0;
        *int64x2_t v72 = v74;
        v71 += 2;
        v72 += 2;
        v73 -= 4;
      }
      while (v73);
      if (NumElements != v70)
      {
LABEL_155:
        uint64_t v75 = v70;
        uint64_t v76 = &MutableRawData[8 * v70];
        int64_t v77 = NumElements - v70;
        uint64_t v78 = (float64_t *)&a3[v75];
        do
        {
          float64_t v79 = *(double *)v76;
          v76 += 8;
          _Q0.f64[0] = v79;
          *v78++ = v79;
          --v77;
        }
        while (v77);
      }
    }
    return _Q0.f64[0];
  }
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
LABEL_164:
    if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<double>(MutableRawData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
      return _Q0.f64[0];
    }
    llvm::SmallVector<char,40u>::SmallVector((uint64_t)v183, NumElements);
    mlir::detail::unpackBooleanData(MutableRawData, v4, (uint64_t)v183[0], (unint64_t)v183[1]);
    unint64_t v81 = (unsigned __int8 *)v183[0];
    if (NumElements < 1) {
      goto LABEL_196;
    }
    if (v8)
    {
      if ((unint64_t)NumElements < 8 || (char *)v183[0] + 1 > (char *)a3 && v183[0] < &a3[NumElements])
      {
        unint64_t v82 = 0;
        goto LABEL_171;
      }
      if ((unint64_t)NumElements >= 0x10)
      {
        unint64_t v82 = NumElements & 0x7FFFFFFFFFFFFFF0;
        int8x8_t v128 = vld1_dup_s8((const char *)v183[0]);
        v129.i32[0] = v128.u8[6];
        v129.i32[1] = v128.u8[7];
        int32x2_t v130 = vshr_n_s32(vshl_n_s32(v129, 0x18uLL), 0x18uLL);
        v131.i64[0] = v130.i32[0];
        v131.i64[1] = v130.i32[1];
        _Q0 = vcvtq_f64_s64(v131);
        v132.i32[0] = v128.u8[4];
        v132.i32[1] = v128.u8[5];
        int32x2_t v133 = vshr_n_s32(vshl_n_s32(v132, 0x18uLL), 0x18uLL);
        v131.i64[0] = v133.i32[0];
        v131.i64[1] = v133.i32[1];
        v134.i32[0] = v128.u8[2];
        v134.i32[1] = v128.u8[3];
        float64x2_t v135 = vcvtq_f64_s64(v131);
        int32x2_t v136 = vshr_n_s32(vshl_n_s32(v134, 0x18uLL), 0x18uLL);
        v131.i64[0] = v136.i32[0];
        v131.i64[1] = v136.i32[1];
        float64x2_t v137 = vcvtq_f64_s64(v131);
        v138.i32[0] = v128.u8[0];
        v138.i32[1] = v128.u8[1];
        int32x2_t v139 = vshr_n_s32(vshl_n_s32(v138, 0x18uLL), 0x18uLL);
        v131.i64[0] = v139.i32[0];
        v131.i64[1] = v139.i32[1];
        float64x2_t v140 = vcvtq_f64_s64(v131);
        unint64_t v141 = NumElements & 0xFFFFFFFFFFFFFFF0;
        uint64_t v142 = (float64x2_t *)a3;
        do
        {
          *uint64_t v142 = v140;
          v142[1] = v137;
          v142[2] = v135;
          v142[3] = _Q0;
          v142[4] = v140;
          v142[5] = v137;
          v142[6] = v135;
          v142[7] = _Q0;
          v142 += 8;
          v141 -= 16;
        }
        while (v141);
        if (NumElements == v82) {
          goto LABEL_196;
        }
        if ((NumElements & 8) == 0)
        {
LABEL_171:
          unint64_t v83 = NumElements - v82;
          float v84 = (double *)&a3[v82];
          do
          {
            _Q0.f64[0] = (double)(char)*v81;
            *v84++ = _Q0.f64[0];
            --v83;
          }
          while (v83);
          goto LABEL_196;
        }
      }
      else
      {
        unint64_t v82 = 0;
      }
      unint64_t v106 = v82;
      unint64_t v82 = NumElements & 0xFFFFFFFFFFFFFFF8;
      int32x2_t v107 = vshr_n_s32(vshl_n_s32(vdup_n_s32(*v81), 0x18uLL), 0x18uLL);
      v108.i64[0] = v107.i32[0];
      v108.i64[1] = v107.i32[1];
      _Q0 = vcvtq_f64_s64(v108);
      int32x4_t v109 = (float64x2_t *)&a3[v106];
      unint64_t v110 = v106 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *int32x4_t v109 = _Q0;
        v109[1] = _Q0;
        v109[2] = _Q0;
        v109[3] = _Q0;
        v109 += 4;
        v110 += 8;
      }
      while (v110);
      if (NumElements != v82) {
        goto LABEL_171;
      }
LABEL_196:
      if (v81 != (unsigned __int8 *)v184) {
        free(v81);
      }
      return _Q0.f64[0];
    }
    if ((unint64_t)NumElements < 8 || (char *)v183[0] + NumElements > (char *)a3 && v183[0] < &a3[NumElements])
    {
      unint64_t v101 = 0;
      goto LABEL_194;
    }
    if ((unint64_t)NumElements >= 0x10)
    {
      unint64_t v101 = NumElements & 0x7FFFFFFFFFFFFFF0;
      unint64_t v143 = NumElements & 0xFFFFFFFFFFFFFFF0;
      long long v144 = (float64x2_t *)a3;
      int32x4_t v145 = (int8x16_t *)v183[0];
      do
      {
        int8x16_t v146 = *v145++;
        unint64_t v147 = vextq_s8(v146, v146, 8uLL).u64[0];
        v148.i32[0] = v147;
        v148.i32[1] = BYTE1(v147);
        int32x2_t v149 = vshr_n_s32(vshl_n_s32(v148, 0x18uLL), 0x18uLL);
        v150.i64[0] = v149.i32[0];
        v150.i64[1] = v149.i32[1];
        _Q0 = vcvtq_f64_s64(v150);
        v151.i32[0] = BYTE2(v147);
        v151.i32[1] = BYTE3(v147);
        int32x2_t v152 = vshr_n_s32(vshl_n_s32(v151, 0x18uLL), 0x18uLL);
        v150.i64[0] = v152.i32[0];
        v150.i64[1] = v152.i32[1];
        int64x2_t v153 = v150;
        v154.i32[0] = BYTE4(v147);
        v154.i32[1] = BYTE5(v147);
        int32x2_t v155 = vshr_n_s32(vshl_n_s32(v154, 0x18uLL), 0x18uLL);
        v150.i64[0] = v155.i32[0];
        v150.i64[1] = v155.i32[1];
        v156.i32[0] = BYTE6(v147);
        v156.i32[1] = HIBYTE(v147);
        float64x2_t v157 = vcvtq_f64_s64(v150);
        int32x2_t v158 = vshr_n_s32(vshl_n_s32(v156, 0x18uLL), 0x18uLL);
        v150.i64[0] = v158.i32[0];
        v150.i64[1] = v158.i32[1];
        float64x2_t v159 = vcvtq_f64_s64(v150);
        v156.i32[0] = v146.u8[0];
        v156.i32[1] = v146.u8[1];
        int32x2_t v160 = vshr_n_s32(vshl_n_s32(v156, 0x18uLL), 0x18uLL);
        v150.i64[0] = v160.i32[0];
        v150.i64[1] = v160.i32[1];
        float64x2_t v161 = vcvtq_f64_s64(v150);
        v162.i32[0] = v146.u8[2];
        v162.i32[1] = v146.u8[3];
        int32x2_t v163 = vshr_n_s32(vshl_n_s32(v162, 0x18uLL), 0x18uLL);
        v164.i32[0] = v146.u8[4];
        v164.i32[1] = v146.u8[5];
        int32x2_t v165 = vshr_n_s32(vshl_n_s32(v164, 0x18uLL), 0x18uLL);
        v150.i64[0] = v165.i32[0];
        v150.i64[1] = v165.i32[1];
        v166.i32[0] = v146.u8[6];
        v166.i32[1] = v146.u8[7];
        float64x2_t v167 = vcvtq_f64_s64(v150);
        int32x2_t v168 = vshr_n_s32(vshl_n_s32(v166, 0x18uLL), 0x18uLL);
        v150.i64[0] = v168.i32[0];
        v150.i64[1] = v168.i32[1];
        v144[2] = v167;
        v144[3] = vcvtq_f64_s64(v150);
        v150.i64[0] = v163.i32[0];
        v150.i64[1] = v163.i32[1];
        *long long v144 = v161;
        v144[1] = vcvtq_f64_s64(v150);
        v144[6] = v157;
        v144[7] = v159;
        v144[4] = _Q0;
        v144[5] = vcvtq_f64_s64(v153);
        v144 += 8;
        v143 -= 16;
      }
      while (v143);
      if (NumElements == v101) {
        goto LABEL_196;
      }
      if ((NumElements & 8) == 0)
      {
LABEL_194:
        int32x4_t v102 = (char *)&v81[v101];
        unint64_t v103 = NumElements - v101;
        int16x8_t v104 = (double *)&a3[v101];
        do
        {
          int v105 = *v102++;
          _Q0.f64[0] = (double)v105;
          *v104++ = (double)v105;
          --v103;
        }
        while (v103);
        goto LABEL_196;
      }
    }
    else
    {
      unint64_t v101 = 0;
    }
    unint64_t v111 = v101;
    unint64_t v101 = NumElements & 0xFFFFFFFFFFFFFFF8;
    int v112 = (char *)&v81[v111];
    unint64_t v113 = (float64x2_t *)&a3[v111];
    unint64_t v114 = v111 - (NumElements & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v115 = *(void *)v112;
      v112 += 8;
      v116.i32[0] = v115;
      v116.i32[1] = BYTE1(v115);
      int32x2_t v117 = vshr_n_s32(vshl_n_s32(v116, 0x18uLL), 0x18uLL);
      v118.i64[0] = v117.i32[0];
      v118.i64[1] = v117.i32[1];
      float64x2_t v119 = vcvtq_f64_s64(v118);
      v120.i32[0] = BYTE2(v115);
      v120.i32[1] = BYTE3(v115);
      int32x2_t v121 = vshr_n_s32(vshl_n_s32(v120, 0x18uLL), 0x18uLL);
      v118.i64[0] = v121.i32[0];
      v118.i64[1] = v121.i32[1];
      int64x2_t v122 = v118;
      v123.i32[0] = BYTE4(v115);
      v123.i32[1] = BYTE5(v115);
      int32x2_t v124 = vshr_n_s32(vshl_n_s32(v123, 0x18uLL), 0x18uLL);
      v118.i64[0] = v124.i32[0];
      v118.i64[1] = v124.i32[1];
      v125.i32[0] = BYTE6(v115);
      v125.i32[1] = HIBYTE(v115);
      float64x2_t v126 = vcvtq_f64_s64(v118);
      int32x2_t v127 = vshr_n_s32(vshl_n_s32(v125, 0x18uLL), 0x18uLL);
      v118.i64[0] = v127.i32[0];
      v118.i64[1] = v127.i32[1];
      v113[2] = v126;
      v113[3] = vcvtq_f64_s64(v118);
      _Q0 = vcvtq_f64_s64(v122);
      *unint64_t v113 = v119;
      v113[1] = _Q0;
      v113 += 4;
      v114 += 8;
    }
    while (v114);
    if (NumElements == v101) {
      goto LABEL_196;
    }
    goto LABEL_194;
  }
  if (NumElements < 1) {
    return _Q0.f64[0];
  }
LABEL_162:
  if ((unint64_t)NumElements >= 2)
  {
    uint64_t v97 = 0;
    unint64_t v80 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    int64_t v98 = (float64x2_t *)a3;
    do
    {
      if (v8) {
        uint64_t v99 = 0;
      }
      else {
        uint64_t v99 = v97;
      }
      if (v8) {
        uint64_t v100 = 0;
      }
      else {
        uint64_t v100 = v97 + 1;
      }
      LOWORD(_Q0.f64[0]) = *(_WORD *)&MutableRawData[2 * v99];
      WORD2(_Q0.f64[0]) = *(_WORD *)&MutableRawData[2 * v100];
      _Q0 = vcvtq_f64_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)&_Q0.f64[0], 0x10uLL));
      *v98++ = _Q0;
      v97 += 2;
    }
    while (v97 != v80);
    goto LABEL_266;
  }
  unint64_t v80 = 0;
  do
  {
    if (v8) {
      unint64_t v177 = 0;
    }
    else {
      unint64_t v177 = v80;
    }
    _Q0.f64[0] = COERCE_FLOAT(*(unsigned __int16 *)&MutableRawData[2 * v177] << 16);
    *(double *)&a3[v80++] = _Q0.f64[0];
LABEL_266:
    ;
  }
  while (NumElements != v80);
  return _Q0.f64[0];
}

void mlir::copyElementsAttrData<char>(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  v122[5] = *MEMORY[0x1E4F143B8];
  uint64_t v119 = a1;
  uint64_t v120 = a2;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v119);
  int v7 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  v118[0] = v7;
  v118[1] = Type;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118);
  int v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v119);
  uint64_t v9 = v119;
  if (mlir::DenseElementsAttr::classof(v119)) {
    uint64_t v10 = (void *)v9;
  }
  else {
    uint64_t v10 = 0;
  }
  v121[0] = v10;
  if (v10)
  {
    uint64_t RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v121);
    uint64_t v4 = v11;
    if (v8) {
      goto LABEL_8;
    }
LABEL_15:
    int64_t NumElements = mlir::ElementsAttr::getNumElements(v119, v120);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_17;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_27;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_39;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_49;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_59;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_69;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1) {
        return;
      }
      if ((unint64_t)NumElements < 8 || &RawStringData[8 * NumElements] > a3 && &a3[NumElements] > RawStringData)
      {
        unint64_t v27 = 0;
        goto LABEL_84;
      }
      if ((unint64_t)NumElements >= 0x20)
      {
        unint64_t v27 = NumElements & 0x7FFFFFFFFFFFFFE0;
        uint64_t v49 = (int8x16x4_t *)(RawStringData + 128);
        double v50 = a3 + 16;
        unint64_t v51 = NumElements & 0xFFFFFFFFFFFFFFE0;
        do
        {
          *(void *)&long long v52 = vqtbl4q_s8(v49[-2], (int8x16_t)xmmword_181126CE0).u64[0];
          *(void *)&long long v53 = vqtbl4q_s8(*v49, (int8x16_t)xmmword_181126CE0).u64[0];
          *((void *)&v52 + 1) = vqtbl4q_s8(v49[-1], (int8x16_t)xmmword_181126CE0).u64[0];
          *((void *)&v53 + 1) = vqtbl4q_s8(v49[1], (int8x16_t)xmmword_181126CE0).u64[0];
          *(v50 - 1) = v52;
          _OWORD *v50 = v53;
          v49 += 4;
          v50 += 2;
          v51 -= 32;
        }
        while (v51);
        if (NumElements == v27) {
          return;
        }
        if ((NumElements & 0x18) == 0)
        {
LABEL_84:
          double v28 = &RawStringData[8 * v27];
          unint64_t v29 = NumElements - v27;
          uint64_t v30 = &a3[v27];
          do
          {
            uint64_t v31 = *(void *)v28;
            v28 += 8;
            *v30++ = v31;
            --v29;
          }
          while (v29);
          return;
        }
      }
      else
      {
        unint64_t v27 = 0;
      }
      unint64_t v54 = v27;
      unint64_t v27 = NumElements & 0xFFFFFFFFFFFFFFF8;
      uint64_t v55 = (int8x16x4_t *)&RawStringData[8 * v54];
      double v56 = &a3[v54];
      unint64_t v57 = v54 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *(void *)double v56 = vqtbl4q_s8(*v55, (int8x16_t)xmmword_181126CF0).u64[0];
        v56 += 8;
        ++v55;
        v57 += 8;
      }
      while (v57);
      if (NumElements == v27) {
        return;
      }
      goto LABEL_84;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1) {
        return;
      }
      if ((unint64_t)NumElements < 8 || &RawStringData[8 * NumElements] > a3 && &a3[NumElements] > RawStringData)
      {
        unint64_t v32 = 0;
        goto LABEL_93;
      }
      if ((unint64_t)NumElements >= 0x20)
      {
        unint64_t v32 = NumElements & 0x7FFFFFFFFFFFFFE0;
        int64_t v64 = (int8x16x4_t *)(RawStringData + 128);
        uint64_t v65 = a3 + 16;
        unint64_t v66 = NumElements & 0xFFFFFFFFFFFFFFE0;
        do
        {
          *(void *)&long long v67 = vqtbl4q_s8(v64[-2], (int8x16_t)xmmword_181126CE0).u64[0];
          *(void *)&long long v68 = vqtbl4q_s8(*v64, (int8x16_t)xmmword_181126CE0).u64[0];
          *((void *)&v67 + 1) = vqtbl4q_s8(v64[-1], (int8x16_t)xmmword_181126CE0).u64[0];
          *((void *)&v68 + 1) = vqtbl4q_s8(v64[1], (int8x16_t)xmmword_181126CE0).u64[0];
          *(v65 - 1) = v67;
          *uint64_t v65 = v68;
          v64 += 4;
          v65 += 2;
          v66 -= 32;
        }
        while (v66);
        if (NumElements == v32) {
          return;
        }
        if ((NumElements & 0x18) == 0)
        {
LABEL_93:
          unint64_t v33 = &RawStringData[8 * v32];
          unint64_t v34 = NumElements - v32;
          uint64_t v35 = &a3[v32];
          do
          {
            uint64_t v36 = *(void *)v33;
            v33 += 8;
            *v35++ = v36;
            --v34;
          }
          while (v34);
          return;
        }
      }
      else
      {
        unint64_t v32 = 0;
      }
      unint64_t v69 = v32;
      unint64_t v32 = NumElements & 0xFFFFFFFFFFFFFFF8;
      uint64_t v70 = (int8x16x4_t *)&RawStringData[8 * v69];
      uint64_t v71 = &a3[v69];
      unint64_t v72 = v69 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *(void *)uint64_t v71 = vqtbl4q_s8(*v70, (int8x16_t)xmmword_181126CF0).u64[0];
        v71 += 8;
        ++v70;
        v72 += 8;
      }
      while (v72);
      if (NumElements == v32) {
        return;
      }
      goto LABEL_93;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_100;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return;
      }
      if ((unint64_t)NumElements < 8 || &RawStringData[4 * NumElements] > a3 && &a3[NumElements] > RawStringData)
      {
        unint64_t v39 = 0;
        goto LABEL_114;
      }
      if ((unint64_t)NumElements >= 0x20)
      {
        unint64_t v39 = NumElements & 0x7FFFFFFFFFFFFFE0;
        float64_t v79 = (float32x4_t *)(RawStringData + 64);
        unint64_t v80 = (int8x16_t *)(a3 + 16);
        unint64_t v81 = NumElements & 0xFFFFFFFFFFFFFFE0;
        do
        {
          *(int16x4_t *)v82.uint64_t i8 = vmovn_s32(vcvtq_s32_f32(v79[-2]));
          v82.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v79[-1]));
          *(int16x4_t *)v83.uint64_t i8 = vmovn_s32(vcvtq_s32_f32(v79[-4]));
          v83.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v79[-3]));
          int8x16_t v84 = vuzp1q_s8(v83, v82);
          *(int16x4_t *)v82.uint64_t i8 = vmovn_s32(vcvtq_s32_f32(v79[2]));
          v82.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v79[3]));
          *(int16x4_t *)v85.uint64_t i8 = vmovn_s32(vcvtq_s32_f32(*v79));
          v85.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v79[1]));
          v80[-1] = v84;
          *unint64_t v80 = vuzp1q_s8(v85, v82);
          v79 += 8;
          v80 += 2;
          v81 -= 32;
        }
        while (v81);
        if (NumElements == v39) {
          return;
        }
        if ((NumElements & 0x18) == 0)
        {
LABEL_114:
          uint64_t v40 = (float *)&RawStringData[4 * v39];
          unint64_t v41 = NumElements - v39;
          int v42 = &a3[v39];
          do
          {
            float v43 = *v40++;
            *v42++ = (int)v43;
            --v41;
          }
          while (v41);
          return;
        }
      }
      else
      {
        unint64_t v39 = 0;
      }
      unint64_t v86 = v39;
      unint64_t v39 = NumElements & 0xFFFFFFFFFFFFFFF8;
      unint64_t v87 = (float32x4_t *)&RawStringData[4 * v86];
      float32x4_t v88 = (int8x8_t *)&a3[v86];
      unint64_t v89 = v86 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      do
      {
        float32x4_t v90 = *v87;
        float32x4_t v91 = v87[1];
        v87 += 2;
        *v88++ = vuzp1_s8((int8x8_t)vmovn_s32(vcvtq_s32_f32(v90)), (int8x8_t)vmovn_s32(vcvtq_s32_f32(v91)));
        v89 += 8;
      }
      while (v89);
      if (NumElements == v39) {
        return;
      }
      goto LABEL_114;
    }
    if (!mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      if (!mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
        goto LABEL_150;
      }
      if (NumElements < 1) {
        return;
      }
LABEL_144:
      for (uint64_t i = 0; i != NumElements; ++i)
      {
        if (v8) {
          uint64_t v59 = 0;
        }
        else {
          uint64_t v59 = i;
        }
        a3[i] = (int)COERCE_FLOAT(*(unsigned __int16 *)&RawStringData[2 * v59] << 16);
      }
      return;
    }
    if (NumElements < 1) {
      return;
    }
    if ((unint64_t)NumElements < 8 || &RawStringData[8 * NumElements] > a3 && &a3[NumElements] > RawStringData)
    {
      unint64_t v44 = 0;
      goto LABEL_127;
    }
    if ((unint64_t)NumElements >= 0x10)
    {
      unint64_t v44 = NumElements & 0x7FFFFFFFFFFFFFF0;
      unint64_t v92 = NumElements & 0xFFFFFFFFFFFFFFF0;
      int64_t v93 = (int8x16_t *)a3;
      int64_t v94 = (float64x2_t *)RawStringData;
      do
      {
        *(int16x4_t *)v95.uint64_t i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v94[4])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v94[5])));
        v95.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v94[6])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v94[7])));
        *(int16x4_t *)v96.uint64_t i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(*v94)), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v94[1])));
        v96.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v94[2])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v94[3])));
        *v93++ = vuzp1q_s8(v96, v95);
        v94 += 8;
        v92 -= 16;
      }
      while (v92);
      if (NumElements == v44) {
        return;
      }
      if ((NumElements & 8) == 0)
      {
LABEL_127:
        unint64_t v45 = (double *)&RawStringData[8 * v44];
        unint64_t v46 = NumElements - v44;
        uint64_t v47 = &a3[v44];
        do
        {
          double v48 = *v45++;
          *v47++ = (int)v48;
          --v46;
        }
        while (v46);
        return;
      }
    }
    else
    {
      unint64_t v44 = 0;
    }
    unint64_t v74 = v44;
    unint64_t v44 = NumElements & 0xFFFFFFFFFFFFFFF8;
    uint64_t v75 = (float64x2_t *)&RawStringData[8 * v74];
    uint64_t v76 = (int8x8_t *)&a3[v74];
    unint64_t v77 = v74 - (NumElements & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *v76++ = vuzp1_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(*v75)), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v75[1]))), (int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v75[2])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v75[3]))));
      v75 += 4;
      v77 += 8;
    }
    while (v77);
    if (NumElements == v44) {
      return;
    }
    goto LABEL_127;
  }
  if (*(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
    float v13 = (void *)v9;
  }
  else {
    float v13 = 0;
  }
  v121[0] = v13;
  if (v13)
  {
    uint64_t RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v121);
    uint64_t v4 = v14;
    if ((v8 & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v8 & 1) == 0)
  {
    goto LABEL_15;
  }
LABEL_8:
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    int64_t NumElements = 1;
LABEL_17:
    for (uint64_t j = 0; j != NumElements; ++j)
    {
      if (v8) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = j;
      }
      a3[j] = RawStringData[v16];
    }
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    int64_t NumElements = 1;
LABEL_27:
    for (uint64_t k = 0; k != NumElements; ++k)
    {
      if (v8) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = k;
      }
      a3[k] = RawStringData[v18];
    }
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    int64_t NumElements = 1;
LABEL_39:
    for (uint64_t m = 0; m != NumElements; ++m)
    {
      if (v8) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = m;
      }
      a3[m] = *(_WORD *)&RawStringData[2 * v20];
    }
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    int64_t NumElements = 1;
LABEL_49:
    for (uint64_t n = 0; n != NumElements; ++n)
    {
      if (v8) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = n;
      }
      a3[n] = *(_WORD *)&RawStringData[2 * v22];
    }
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    int64_t NumElements = 1;
LABEL_59:
    for (iuint64_t i = 0; ii != NumElements; ++ii)
    {
      if (v8) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = ii;
      }
      a3[ii] = *(_DWORD *)&RawStringData[4 * v24];
    }
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    int64_t NumElements = 1;
LABEL_69:
    for (juint64_t j = 0; jj != NumElements; ++jj)
    {
      if (v8) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = jj;
      }
      a3[jj] = *(_DWORD *)&RawStringData[4 * v26];
    }
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
    || mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    *a3 = *(void *)RawStringData;
    return;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    int64_t NumElements = 1;
LABEL_100:
    for (kuint64_t k = 0; kk != NumElements; ++kk)
    {
      if (v8) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = kk;
      }
      a3[kk] = (int)*(short float *)&RawStringData[2 * v38];
    }
    return;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    *a3 = (int)*(float *)RawStringData;
    return;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    *a3 = (int)*(double *)RawStringData;
    return;
  }
  int64_t NumElements = 1;
  if (mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
    goto LABEL_144;
  }
LABEL_150:
  if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
    unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
    mlir::detail::unpackQuantizedData<unsigned char>(RawStringData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
    return;
  }
  llvm::SmallVector<char,40u>::SmallVector((uint64_t)v121, NumElements);
  mlir::detail::unpackBooleanData(RawStringData, v4, (uint64_t)v121[0], (unint64_t)v121[1]);
  uint64_t v60 = (char *)v121[0];
  if (NumElements < 1) {
    goto LABEL_205;
  }
  if ((v8 & 1) == 0)
  {
    unint64_t v78 = 0;
    if ((unint64_t)NumElements < 8 || (unint64_t)((char *)a3 - (char *)v121[0]) < 0x20) {
      goto LABEL_203;
    }
    if ((unint64_t)NumElements >= 0x20)
    {
      unint64_t v78 = NumElements & 0x7FFFFFFFFFFFFFE0;
      uint64_t v97 = (long long *)((char *)v121[0] + 16);
      int64_t v98 = a3 + 16;
      unint64_t v99 = NumElements & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v100 = *v97;
        *(v98 - 1) = *(v97 - 1);
        _OWORD *v98 = v100;
        v97 += 2;
        v98 += 2;
        v99 -= 32;
      }
      while (v99);
      if (NumElements == v78) {
        goto LABEL_205;
      }
      if ((NumElements & 0x18) == 0)
      {
LABEL_203:
        unint64_t v106 = &v60[v78];
        unint64_t v107 = NumElements - v78;
        int64x2_t v108 = &a3[v78];
        do
        {
          unsigned __int8 v109 = *v106++;
          *v108++ = v109;
          --v107;
        }
        while (v107);
        goto LABEL_205;
      }
    }
    else
    {
      unint64_t v78 = 0;
    }
    unint64_t v101 = v78;
    unint64_t v78 = NumElements & 0xFFFFFFFFFFFFFFF8;
    int32x4_t v102 = &v60[v101];
    unint64_t v103 = &a3[v101];
    unint64_t v104 = v101 - (NumElements & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v105 = *(void *)v102;
      v102 += 8;
      *(void *)unint64_t v103 = v105;
      v103 += 8;
      v104 += 8;
    }
    while (v104);
    if (NumElements == v78) {
      goto LABEL_205;
    }
    goto LABEL_203;
  }
  if ((unint64_t)NumElements < 8 || (char *)v121[0] + 1 > (char *)a3 && v121[0] < &a3[NumElements])
  {
    unint64_t v61 = 0;
    goto LABEL_157;
  }
  if ((unint64_t)NumElements >= 0x20)
  {
    unint64_t v61 = NumElements & 0x7FFFFFFFFFFFFFE0;
    int8x16_t v110 = vld1q_dup_s8((const char *)v121[0]);
    unint64_t v111 = (int8x16_t *)(a3 + 16);
    unint64_t v112 = NumElements & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v111[-1] = v110;
      *unint64_t v111 = v110;
      v111 += 2;
      v112 -= 32;
    }
    while (v112);
    if (NumElements == v61) {
      goto LABEL_205;
    }
    if ((NumElements & 0x18) == 0)
    {
LABEL_157:
      unint64_t v62 = NumElements - v61;
      uint64_t v63 = (char *)&a3[v61];
      do
      {
        *v63++ = *v60;
        --v62;
      }
      while (v62);
      goto LABEL_205;
    }
  }
  else
  {
    unint64_t v61 = 0;
  }
  unint64_t v113 = v61;
  unint64_t v61 = NumElements & 0xFFFFFFFFFFFFFFF8;
  int8x8_t v114 = vld1_dup_s8(v60);
  uint64_t v115 = (int8x8_t *)&a3[v113];
  unint64_t v116 = v113 - (NumElements & 0xFFFFFFFFFFFFFFF8);
  do
  {
    *v115++ = v114;
    v116 += 8;
  }
  while (v116);
  if (NumElements != v61) {
    goto LABEL_157;
  }
LABEL_205:
  if (v60 != (char *)v122) {
    free(v60);
  }
}

unsigned char *mlir::detail::packBooleanData(unsigned char *result, unint64_t a2, char *a3, uint64_t a4)
{
  if (a2 == 1)
  {
    if (*result) {
      char v4 = -1;
    }
    else {
      char v4 = 0;
    }
    *a3 = v4;
  }
  else if (a4)
  {
    uint64_t v5 = result + 3;
    do
    {
      unint64_t v7 = a2;
      BOOL v8 = a2 >= 8;
      a2 -= 8;
      if (v8) {
        uint64_t v9 = 8;
      }
      else {
        uint64_t v9 = v7;
      }
      if (v9)
      {
        char v6 = *(v5 - 3);
        if (v9 != 1)
        {
          v6 |= 2 * *(v5 - 2);
          if (v9 != 2)
          {
            v6 |= 4 * *(v5 - 1);
            if (v9 != 3)
            {
              v6 |= 8 * *v5;
              if (v9 != 4)
              {
                v6 |= 16 * v5[1];
                if (v9 != 5)
                {
                  v6 |= 32 * v5[2];
                  if (v9 != 6)
                  {
                    v6 |= v5[3] << 6;
                    if (v9 != 7) {
                      v6 |= v5[4] << 7;
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        char v6 = 0;
      }
      *a3++ = v6;
      v5 += 8;
      --a4;
    }
    while (a4);
  }
  return result;
}

void mlir::copyElementsAttrData<complex_support::complex_fp<float,(void *)0>>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  v94[5] = *MEMORY[0x1E4F143B8];
  float32x4_t v91 = (unsigned __int8 *)a1;
  uint64_t v92 = a2;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v91);
  char v6 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  v90[0] = v6;
  v90[1] = Type;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v90);
  int v7 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v91);
  uint64_t RawStringData = v91;
  if (mlir::DenseElementsAttr::classof((uint64_t)v91)) {
    uint64_t v9 = RawStringData;
  }
  else {
    uint64_t v9 = 0;
  }
  v93[0] = v9;
  if (v9)
  {
    uint64_t RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v93);
    uint64_t v3 = v10;
    if (v7) {
      goto LABEL_8;
    }
LABEL_15:
    int64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_17;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_27;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_39;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_49;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_59;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_69;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_79;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_89;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_99;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_109;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_119;
    }
    if (!mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
      goto LABEL_135;
    }
    if (NumElements < 1) {
      return;
    }
LABEL_129:
    uint64_t v58 = 0;
    unint64_t v59 = a3 + 4;
    do
    {
      if (v7) {
        uint64_t v60 = 0;
      }
      else {
        uint64_t v60 = v58;
      }
      *(void *)(v59 - 4) = *(unsigned __int16 *)&RawStringData[2 * v60] << 16;
      ++v58;
      v59 += 8;
    }
    while (NumElements != v58);
    return;
  }
  if (*(_UNKNOWN **)(*(void *)RawStringData + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
    float v13 = RawStringData;
  }
  else {
    float v13 = 0;
  }
  v93[0] = v13;
  if (v13)
  {
    uint64_t RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v93);
    uint64_t v3 = v14;
    if ((v7 & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_15;
  }
LABEL_8:
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    int64_t NumElements = 1;
LABEL_17:
    uint64_t v15 = 0;
    uint64_t v16 = (float *)(a3 + 4);
    do
    {
      if (v7) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v15;
      }
      LOBYTE(v11) = RawStringData[v17];
      float v11 = (float)LODWORD(v11);
      *(v16 - 1) = v11;
      float *v16 = 0.0;
      v16 += 2;
      ++v15;
    }
    while (NumElements != v15);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    int64_t NumElements = 1;
LABEL_27:
    uint64_t v19 = 0;
    uint64_t v20 = (_DWORD *)(a3 + 4);
    do
    {
      if (v7) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = v19;
      }
      v18.i8[0] = RawStringData[v21];
      int8x8_t v18 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).u64[0];
      *(float *)v18.i32 = (float)v18.i32[0];
      *(v20 - 1) = v18.i32[0];
      _DWORD *v20 = 0;
      v20 += 2;
      ++v19;
    }
    while (NumElements != v19);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    int64_t NumElements = 1;
LABEL_39:
    uint64_t v23 = 0;
    uint64_t v24 = (float *)(a3 + 4);
    do
    {
      if (v7) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = v23;
      }
      LOWORD(v22) = *(_WORD *)&RawStringData[2 * v25];
      float v22 = (float)LODWORD(v22);
      *(v24 - 1) = v22;
      float *v24 = 0.0;
      v24 += 2;
      ++v23;
    }
    while (NumElements != v23);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    int64_t NumElements = 1;
LABEL_49:
    uint64_t v27 = 0;
    double v28 = (_DWORD *)(a3 + 4);
    do
    {
      if (v7) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = v27;
      }
      v26.i16[0] = *(_WORD *)&RawStringData[2 * v29];
      int16x4_t v26 = (int16x4_t)vmovl_s16(v26).u64[0];
      *(float *)v26.i32 = (float)v26.i32[0];
      *(v28 - 1) = v26.i32[0];
      _DWORD *v28 = 0;
      v28 += 2;
      ++v27;
    }
    while (NumElements != v27);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    int64_t NumElements = 1;
LABEL_59:
    uint64_t v30 = 0;
    uint64_t v31 = (float *)(a3 + 4);
    do
    {
      if (v7) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = v30;
      }
      *(v31 - 1) = (float)*(unsigned int *)&RawStringData[4 * v32];
      *uint64_t v31 = 0.0;
      v31 += 2;
      ++v30;
    }
    while (NumElements != v30);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    int64_t NumElements = 1;
LABEL_69:
    uint64_t v33 = 0;
    unint64_t v34 = (float *)(a3 + 4);
    do
    {
      if (v7) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = v33;
      }
      *(v34 - 1) = (float)*(int *)&RawStringData[4 * v35];
      *unint64_t v34 = 0.0;
      v34 += 2;
      ++v33;
    }
    while (NumElements != v33);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    int64_t NumElements = 1;
LABEL_79:
    uint64_t v36 = 0;
    uint64_t v37 = (float *)(a3 + 4);
    do
    {
      if (v7) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = v36;
      }
      *(v37 - 1) = (float)*(unint64_t *)&RawStringData[8 * v38];
      float *v37 = 0.0;
      v37 += 2;
      ++v36;
    }
    while (NumElements != v36);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    int64_t NumElements = 1;
LABEL_89:
    uint64_t v39 = 0;
    uint64_t v40 = (float *)(a3 + 4);
    do
    {
      if (v7) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = v39;
      }
      *(v40 - 1) = (float)*(uint64_t *)&RawStringData[8 * v41];
      float *v40 = 0.0;
      v40 += 2;
      ++v39;
    }
    while (NumElements != v39);
    return;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    int64_t NumElements = 1;
LABEL_99:
    uint64_t v42 = 0;
    float v43 = (_DWORD *)(a3 + 4);
    do
    {
      if (v7) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = v42;
      }
      _H0 = *(_WORD *)&RawStringData[2 * v44];
      __asm { FCVT            S0, H0 }
      *(v43 - 1) = _S0;
      *float v43 = 0;
      v43 += 2;
      ++v42;
    }
    while (NumElements != v42);
    return;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    int64_t NumElements = 1;
LABEL_109:
    uint64_t v51 = 0;
    unint64_t v52 = a3 + 4;
    do
    {
      if (v7) {
        uint64_t v53 = 0;
      }
      else {
        uint64_t v53 = v51;
      }
      *(void *)(v52 - 4) = *(unsigned int *)&RawStringData[4 * v53];
      ++v51;
      v52 += 8;
    }
    while (NumElements != v51);
    return;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    int64_t NumElements = 1;
LABEL_119:
    uint64_t v54 = 0;
    uint64_t v55 = (float *)(a3 + 4);
    do
    {
      if (v7) {
        uint64_t v56 = 0;
      }
      else {
        uint64_t v56 = v54;
      }
      float v57 = *(double *)&RawStringData[8 * v56];
      *(v55 - 1) = v57;
      *uint64_t v55 = 0.0;
      v55 += 2;
      ++v54;
    }
    while (NumElements != v54);
    return;
  }
  int64_t NumElements = 1;
  if (mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
    goto LABEL_129;
  }
LABEL_135:
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    llvm::SmallVector<char,40u>::SmallVector((uint64_t)v93, NumElements);
    mlir::detail::unpackBooleanData(RawStringData, v3, (uint64_t)v93[0], (unint64_t)v93[1]);
    unint64_t v62 = v93[0];
    if (NumElements >= 1)
    {
      uint64_t v63 = 0;
      int64_t v64 = (_DWORD *)(a3 + 4);
      do
      {
        if (v7) {
          uint64_t v65 = 0;
        }
        else {
          uint64_t v65 = v63;
        }
        v61.i8[0] = v62[v65];
        int8x8_t v61 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v61)).u64[0];
        *(float *)v61.i32 = (float)v61.i32[0];
        *(v64 - 1) = v61.i32[0];
        *int64_t v64 = 0;
        v64 += 2;
        ++v63;
      }
      while (NumElements != v63);
    }
    if (v62 != (unsigned char *)v94) {
      free(v62);
    }
  }
  else
  {
    unint64_t v66 = (void *)OperandRange;
    long long v67 = *(void **)(*(void *)OperandRange + 136);
    if (v67 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      unint64_t v66 = 0;
    }
    v93[0] = v66;
    if (v67 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<complex_support::complex_fp<float,(void *)0>>(RawStringData, v3, a3, NumElements, IntOrFloatBitWidth);
      return;
    }
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v93);
    if (mlir::Type::isF32((mlir::Type *)&Value))
    {
      if (NumElements < 1) {
        return;
      }
      if (v7)
      {
        if ((unint64_t)NumElements >= 8
          && ((unint64_t)(RawStringData + 8) <= a3 || a3 + 8 * NumElements <= (unint64_t)RawStringData))
        {
          uint64_t v69 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
          float64x2_t v85 = vld1q_dup_f64((const double *)RawStringData);
          unint64_t v86 = (float64x2_t *)(a3 + 16);
          unint64_t v87 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v86[-1] = v85;
            *unint64_t v86 = v85;
            v86 += 2;
            v87 -= 4;
          }
          while (v87);
          if (NumElements == v69) {
            return;
          }
        }
        else
        {
          uint64_t v69 = 0;
        }
        int64_t v70 = NumElements - v69;
        uint64_t v71 = (void *)(a3 + 8 * v69);
        do
        {
          *v71++ = *(void *)RawStringData;
          --v70;
        }
        while (v70);
        return;
      }
      uint64_t v75 = 0;
      if ((unint64_t)NumElements < 4) {
        goto LABEL_171;
      }
      if (a3 - (unint64_t)RawStringData < 0x20) {
        goto LABEL_171;
      }
      uint64_t v75 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
      uint64_t v76 = (long long *)(RawStringData + 16);
      unint64_t v77 = (_OWORD *)(a3 + 16);
      unint64_t v78 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v79 = *v76;
        *(v77 - 1) = *(v76 - 1);
        *unint64_t v77 = v79;
        v76 += 2;
        v77 += 2;
        v78 -= 4;
      }
      while (v78);
      if (NumElements != v75)
      {
LABEL_171:
        uint64_t v80 = 8 * v75;
        unint64_t v81 = &RawStringData[8 * v75];
        int64_t v82 = NumElements - v75;
        int8x16_t v83 = (void *)(a3 + v80);
        do
        {
          uint64_t v84 = *(void *)v81;
          v81 += 8;
          *v83++ = v84;
          --v82;
        }
        while (v82);
      }
    }
    else
    {
      uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v93);
      mlir::Type::isF16((mlir::Type *)&Value);
      if (NumElements >= 1)
      {
        for (uint64_t i = 0; i != NumElements; ++i)
        {
          if (v7) {
            uint64_t v74 = 0;
          }
          else {
            uint64_t v74 = i;
          }
          v72.i32[0] = *(_DWORD *)&RawStringData[4 * v74];
          float16x4_t v72 = (float16x4_t)vcvtq_f32_f16(v72).u64[0];
          *(float16x4_t *)(a3 + 8 * i) = v72;
        }
      }
    }
  }
}

void mlir::copyElementsAttrData<complex_support::complex_fp<half,(void *)0>>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  v99[5] = *MEMORY[0x1E4F143B8];
  int8x16_t v96 = (unsigned __int8 *)a1;
  uint64_t v97 = a2;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v96);
  char v6 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  v95[0] = v6;
  v95[1] = Type;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v95);
  int v7 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v96);
  uint64_t RawStringData = v96;
  if (mlir::DenseElementsAttr::classof((uint64_t)v96)) {
    uint64_t v9 = RawStringData;
  }
  else {
    uint64_t v9 = 0;
  }
  v98[0] = v9;
  if (v9)
  {
    uint64_t RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v98);
    uint64_t v3 = v10;
    if (v7) {
      goto LABEL_8;
    }
LABEL_15:
    int64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v96, v97);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_17;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_27;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_39;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_49;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_59;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_69;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_79;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_89;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_99;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_109;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1) {
        return;
      }
      goto LABEL_119;
    }
    if (!mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
      goto LABEL_135;
    }
    if (NumElements < 1) {
      return;
    }
LABEL_129:
    uint64_t v59 = 0;
    uint64_t v60 = (_WORD *)(a3 + 2);
    do
    {
      if (v7) {
        uint64_t v61 = 0;
      }
      else {
        uint64_t v61 = v59;
      }
      _S0 = *(unsigned __int16 *)&RawStringData[2 * v61] << 16;
      __asm { FCVT            H0, S0 }
      *(v60 - 1) = _S0;
      _WORD *v60 = 0;
      v60 += 2;
      ++v59;
    }
    while (NumElements != v59);
    return;
  }
  if (*(_UNKNOWN **)(*(void *)RawStringData + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id) {
    float v13 = RawStringData;
  }
  else {
    float v13 = 0;
  }
  v98[0] = v13;
  if (v13)
  {
    uint64_t RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v98);
    uint64_t v3 = v14;
    if ((v7 & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_15;
  }
LABEL_8:
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    int64_t NumElements = 1;
LABEL_17:
    uint64_t v15 = 0;
    uint64_t v16 = (short float *)(a3 + 2);
    do
    {
      if (v7) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v15;
      }
      LOBYTE(v11) = RawStringData[v17];
      short float v11 = (short float)LOWORD(v11);
      *(v16 - 1) = v11;
      *(_WORD *)uint64_t v16 = 0;
      v16 += 2;
      ++v15;
    }
    while (NumElements != v15);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    int64_t NumElements = 1;
LABEL_27:
    uint64_t v19 = 0;
    uint64_t v20 = (_WORD *)(a3 + 2);
    do
    {
      if (v7) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = v19;
      }
      v18.i8[0] = RawStringData[v21];
      int8x8_t v18 = (int8x8_t)vmovl_s8(v18).u64[0];
      *(short float *)v18.uint64_t i16 = (short float)v18.i16[0];
      *(v20 - 1) = v18.i16[0];
      _WORD *v20 = 0;
      v20 += 2;
      ++v19;
    }
    while (NumElements != v19);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    int64_t NumElements = 1;
LABEL_39:
    uint64_t v22 = 0;
    uint64_t v23 = (short float *)(a3 + 2);
    do
    {
      if (v7) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v22;
      }
      *(v23 - 1) = (short float)*(unsigned __int16 *)&RawStringData[2 * v24];
      *(_WORD *)uint64_t v23 = 0;
      v23 += 2;
      ++v22;
    }
    while (NumElements != v22);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    int64_t NumElements = 1;
LABEL_49:
    uint64_t v25 = 0;
    int16x4_t v26 = (short float *)(a3 + 2);
    do
    {
      if (v7) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v25;
      }
      *(v26 - 1) = (short float)*(__int16 *)&RawStringData[2 * v27];
      *(_WORD *)int16x4_t v26 = 0;
      v26 += 2;
      ++v25;
    }
    while (NumElements != v25);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    int64_t NumElements = 1;
LABEL_59:
    uint64_t v28 = 0;
    uint64_t v29 = (_WORD *)(a3 + 2);
    do
    {
      if (v7) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v28;
      }
      _S0 = (float)*(unsigned int *)&RawStringData[4 * v30];
      __asm { FCVT            H0, S0 }
      *(v29 - 1) = LOWORD(_S0);
      _WORD *v29 = 0;
      v29 += 2;
      ++v28;
    }
    while (NumElements != v28);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    int64_t NumElements = 1;
LABEL_69:
    uint64_t v36 = 0;
    uint64_t v37 = (_WORD *)(a3 + 2);
    do
    {
      if (v7) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = v36;
      }
      _S0 = (float)*(int *)&RawStringData[4 * v38];
      __asm { FCVT            H0, S0 }
      *(v37 - 1) = LOWORD(_S0);
      _WORD *v37 = 0;
      v37 += 2;
      ++v36;
    }
    while (NumElements != v36);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    int64_t NumElements = 1;
LABEL_79:
    uint64_t v40 = 0;
    uint64_t v41 = (_WORD *)(a3 + 2);
    do
    {
      if (v7) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = v40;
      }
      _S0 = (float)*(unint64_t *)&RawStringData[8 * v42];
      __asm { FCVT            H0, S0 }
      *(v41 - 1) = LOWORD(_S0);
      *uint64_t v41 = 0;
      v41 += 2;
      ++v40;
    }
    while (NumElements != v40);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    int64_t NumElements = 1;
LABEL_89:
    uint64_t v44 = 0;
    unint64_t v45 = (_WORD *)(a3 + 2);
    do
    {
      if (v7) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = v44;
      }
      _S0 = (float)*(uint64_t *)&RawStringData[8 * v46];
      __asm { FCVT            H0, S0 }
      *(v45 - 1) = LOWORD(_S0);
      *unint64_t v45 = 0;
      v45 += 2;
      ++v44;
    }
    while (NumElements != v44);
    return;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    int64_t NumElements = 1;
LABEL_99:
    uint64_t v48 = 0;
    unint64_t v49 = a3 + 2;
    do
    {
      if (v7) {
        uint64_t v50 = 0;
      }
      else {
        uint64_t v50 = v48;
      }
      *(_DWORD *)(v49 - 2) = *(unsigned __int16 *)&RawStringData[2 * v50];
      v49 += 4;
      ++v48;
    }
    while (NumElements != v48);
    return;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    int64_t NumElements = 1;
LABEL_109:
    uint64_t v51 = 0;
    unint64_t v52 = (_WORD *)(a3 + 2);
    do
    {
      if (v7) {
        uint64_t v53 = 0;
      }
      else {
        uint64_t v53 = v51;
      }
      _S0 = *(_DWORD *)&RawStringData[4 * v53];
      __asm { FCVT            H0, S0 }
      *(v52 - 1) = _S0;
      _WORD *v52 = 0;
      v52 += 2;
      ++v51;
    }
    while (NumElements != v51);
    return;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    int64_t NumElements = 1;
LABEL_119:
    uint64_t v55 = 0;
    uint64_t v56 = (_WORD *)(a3 + 2);
    do
    {
      if (v7) {
        uint64_t v57 = 0;
      }
      else {
        uint64_t v57 = v55;
      }
      _S0 = *(double *)&RawStringData[8 * v57];
      __asm { FCVT            H0, S0 }
      *(v56 - 1) = LOWORD(_S0);
      _WORD *v56 = 0;
      v56 += 2;
      ++v55;
    }
    while (NumElements != v55);
    return;
  }
  int64_t NumElements = 1;
  if (mlir::Type::isBF16((mlir::Type *)&OperandRange)) {
    goto LABEL_129;
  }
LABEL_135:
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    llvm::SmallVector<char,40u>::SmallVector((uint64_t)v98, NumElements);
    mlir::detail::unpackBooleanData(RawStringData, v3, (uint64_t)v98[0], (unint64_t)v98[1]);
    int64_t v64 = v98[0];
    if (NumElements >= 1)
    {
      uint64_t v65 = 0;
      unint64_t v66 = (_WORD *)(a3 + 2);
      do
      {
        if (v7) {
          uint64_t v67 = 0;
        }
        else {
          uint64_t v67 = v65;
        }
        v63.i8[0] = v64[v67];
        int8x8_t v63 = (int8x8_t)vmovl_s8(v63).u64[0];
        *(short float *)v63.uint64_t i16 = (short float)v63.i16[0];
        *(v66 - 1) = v63.i16[0];
        *unint64_t v66 = 0;
        v66 += 2;
        ++v65;
      }
      while (NumElements != v65);
    }
    if (v64 != (unsigned char *)v99) {
      free(v64);
    }
  }
  else
  {
    long long v68 = (void *)OperandRange;
    uint64_t v69 = *(void **)(*(void *)OperandRange + 136);
    if (v69 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      long long v68 = 0;
    }
    v98[0] = v68;
    if (v69 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<complex_support::complex_fp<half,(void *)0>>(RawStringData, v3, a3, NumElements, IntOrFloatBitWidth);
      return;
    }
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v98);
    if (mlir::Type::isF32((mlir::Type *)&Value))
    {
      if (NumElements >= 1)
      {
        uint64_t v71 = 0;
        float16x4_t v72 = (_WORD *)(a3 + 2);
        do
        {
          if (v7) {
            uint64_t v73 = 0;
          }
          else {
            uint64_t v73 = v71;
          }
          uint64_t v74 = &RawStringData[8 * v73];
          _S0 = *(_DWORD *)v74;
          _S1 = *((_DWORD *)v74 + 1);
          __asm
          {
            FCVT            H0, S0
            FCVT            H1, S1
          }
          *(v72 - 1) = _S0;
          *float16x4_t v72 = _S1;
          ++v71;
          v72 += 2;
        }
        while (NumElements != v71);
      }
    }
    else
    {
      uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v98);
      mlir::Type::isF16((mlir::Type *)&Value);
      if (NumElements < 1) {
        return;
      }
      if (v7)
      {
        if ((unint64_t)NumElements >= 8
          && ((unint64_t)(RawStringData + 4) <= a3 || a3 + 4 * NumElements <= (unint64_t)RawStringData))
        {
          uint64_t v77 = NumElements & 0x7FFFFFFFFFFFFFF8;
          float32x4_t v90 = vld1q_dup_f32((const float *)RawStringData);
          float32x4_t v91 = (float32x4_t *)(a3 + 16);
          unint64_t v92 = NumElements & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v91[-1] = v90;
            *float32x4_t v91 = v90;
            v91 += 2;
            v92 -= 8;
          }
          while (v92);
          if (NumElements == v77) {
            return;
          }
        }
        else
        {
          uint64_t v77 = 0;
        }
        int64_t v78 = NumElements - v77;
        long long v79 = (_DWORD *)(a3 + 4 * v77);
        do
        {
          *v79++ = *(_DWORD *)RawStringData;
          --v78;
        }
        while (v78);
        return;
      }
      uint64_t v80 = 0;
      if ((unint64_t)NumElements < 8) {
        goto LABEL_171;
      }
      if (a3 - (unint64_t)RawStringData < 0x20) {
        goto LABEL_171;
      }
      uint64_t v80 = NumElements & 0x7FFFFFFFFFFFFFF8;
      unint64_t v81 = (long long *)(RawStringData + 16);
      int64_t v82 = (_OWORD *)(a3 + 16);
      unint64_t v83 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        long long v84 = *v81;
        *(v82 - 1) = *(v81 - 1);
        *int64_t v82 = v84;
        v81 += 2;
        v82 += 2;
        v83 -= 8;
      }
      while (v83);
      if (NumElements != v80)
      {
LABEL_171:
        uint64_t v85 = 4 * v80;
        unint64_t v86 = &RawStringData[4 * v80];
        int64_t v87 = NumElements - v80;
        float32x4_t v88 = (_DWORD *)(a3 + v85);
        do
        {
          int v89 = *(_DWORD *)v86;
          v86 += 4;
          *v88++ = v89;
          --v87;
        }
        while (v87);
      }
    }
  }
}

unsigned __int8 *mlir::detail::unpackQuantizedData<unsigned char>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    int v6 = ~(-1 << a5);
    unint64_t v7 = a4;
    unint64_t v8 = 8 / a5;
    do
    {
      unint64_t v9 = v5 * v8;
      unint64_t v10 = a4 - v5 * v8;
      if (v10 >= v8) {
        unint64_t v10 = 8 / a5;
      }
      if (!v10) {
        goto LABEL_3;
      }
      unsigned int v11 = *result;
      if (v7 >= v8) {
        unint64_t v12 = 8 / a5;
      }
      else {
        unint64_t v12 = v7;
      }
      uint64x2_t v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      int32x2_t v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_1810FE2E0));
      if (v14.i8[0])
      {
        *(unsigned char *)(a3 + v9) = v11 & v6;
        if (v14.i8[4])
        {
LABEL_15:
          *(unsigned char *)(v9 + a3 + 1) = (v11 >> a5) & v6;
          uint64_t v15 = ((_BYTE)v12 + 1) & 0x1E;
          if (v15 == 2) {
            goto LABEL_3;
          }
          goto LABEL_16;
        }
      }
      else if (v14.i8[4])
      {
        goto LABEL_15;
      }
      uint64_t v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2) {
        goto LABEL_3;
      }
LABEL_16:
      int32x2_t v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE320));
      if (v16.i8[0])
      {
        *(unsigned char *)(v9 + a3 + 2) = (v11 >> (2 * a5)) & v6;
        if (v16.i8[4])
        {
LABEL_21:
          *(unsigned char *)(v9 + a3 + 3) = (v11 >> (3 * a5)) & v6;
          if (v15 == 4) {
            goto LABEL_3;
          }
          goto LABEL_22;
        }
      }
      else if (v16.i8[4])
      {
        goto LABEL_21;
      }
      if (v15 == 4) {
        goto LABEL_3;
      }
LABEL_22:
      int32x2_t v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE330));
      if (v17.i8[0])
      {
        *(unsigned char *)(v9 + a3 + 4) = (v11 >> (4 * a5)) & v6;
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v15 != 6) {
            goto LABEL_28;
          }
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      *(unsigned char *)(v9 + a3 + 5) = (v11 >> (5 * a5)) & v6;
      if (v15 != 6)
      {
LABEL_28:
        int32x2_t v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE340));
        if (v18.i8[0]) {
          *(unsigned char *)(v9 + a3 + 6) = (v11 >> (6 * a5)) & v6;
        }
        if (v18.i8[4]) {
          *(unsigned char *)(v9 + a3 + 7) = (v11 >> (7 * a5)) & v6;
        }
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<unsigned short>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    __int16 v6 = ~(-1 << a5);
    unint64_t v7 = a4;
    unint64_t v8 = 8 / a5;
    do
    {
      unint64_t v9 = v5 * v8;
      unint64_t v10 = a4 - v5 * v8;
      if (v10 >= v8) {
        unint64_t v10 = 8 / a5;
      }
      if (!v10) {
        goto LABEL_3;
      }
      unsigned int v11 = *result;
      if (v7 >= v8) {
        unint64_t v12 = 8 / a5;
      }
      else {
        unint64_t v12 = v7;
      }
      uint64x2_t v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      int32x2_t v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_1810FE2E0));
      if (v14.i8[0])
      {
        *(_WORD *)(a3 + 2 * v9) = v6 & v11;
        if (v14.i8[4])
        {
LABEL_15:
          *(_WORD *)(a3 + 2 * v9 + 2) = (v11 >> a5) & v6;
          uint64_t v15 = ((_BYTE)v12 + 1) & 0x1E;
          if (v15 == 2) {
            goto LABEL_3;
          }
          goto LABEL_16;
        }
      }
      else if (v14.i8[4])
      {
        goto LABEL_15;
      }
      uint64_t v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2) {
        goto LABEL_3;
      }
LABEL_16:
      int32x2_t v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE320));
      if (v16.i8[0])
      {
        *(_WORD *)(a3 + 2 * v9 + 4) = (v11 >> (2 * a5)) & v6;
        if (v16.i8[4])
        {
LABEL_21:
          *(_WORD *)(a3 + 2 * v9 + 6) = (v11 >> (3 * a5)) & v6;
          if (v15 == 4) {
            goto LABEL_3;
          }
          goto LABEL_22;
        }
      }
      else if (v16.i8[4])
      {
        goto LABEL_21;
      }
      if (v15 == 4) {
        goto LABEL_3;
      }
LABEL_22:
      int32x2_t v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE330));
      if (v17.i8[0])
      {
        *(_WORD *)(a3 + 2 * v9 + 8) = (v11 >> (4 * a5)) & v6;
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v15 != 6) {
            goto LABEL_28;
          }
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      *(_WORD *)(a3 + 2 * v9 + 10) = (v11 >> (5 * a5)) & v6;
      if (v15 != 6)
      {
LABEL_28:
        int32x2_t v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE340));
        if (v18.i8[0]) {
          *(_WORD *)(a3 + 2 * v9 + 12) = (v11 >> (6 * a5)) & v6;
        }
        if (v18.i8[4]) {
          *(_WORD *)(a3 + 2 * v9 + 14) = (v11 >> (7 * a5)) & v6;
        }
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<unsigned int>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    int v6 = ~(-1 << a5);
    unint64_t v7 = a4;
    unint64_t v8 = 8 / a5;
    do
    {
      unint64_t v9 = v5 * v8;
      unint64_t v10 = a4 - v5 * v8;
      if (v10 >= v8) {
        unint64_t v10 = 8 / a5;
      }
      if (!v10) {
        goto LABEL_3;
      }
      unsigned int v11 = *result;
      if (v7 >= v8) {
        unint64_t v12 = 8 / a5;
      }
      else {
        unint64_t v12 = v7;
      }
      uint64x2_t v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      int32x2_t v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_1810FE2E0));
      if (v14.i8[0])
      {
        *(_DWORD *)(a3 + 4 * v9) = v6 & v11;
        if (v14.i8[4])
        {
LABEL_15:
          *(_DWORD *)(a3 + 4 * v9 + 4) = (v11 >> a5) & v6;
          uint64_t v15 = ((_BYTE)v12 + 1) & 0x1E;
          if (v15 == 2) {
            goto LABEL_3;
          }
          goto LABEL_16;
        }
      }
      else if (v14.i8[4])
      {
        goto LABEL_15;
      }
      uint64_t v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2) {
        goto LABEL_3;
      }
LABEL_16:
      int32x2_t v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE320));
      if (v16.i8[0])
      {
        *(_DWORD *)(a3 + 4 * v9 + 8) = (v11 >> (2 * a5)) & v6;
        if (v16.i8[4])
        {
LABEL_21:
          *(_DWORD *)(a3 + 4 * v9 + 12) = (v11 >> (3 * a5)) & v6;
          if (v15 == 4) {
            goto LABEL_3;
          }
          goto LABEL_22;
        }
      }
      else if (v16.i8[4])
      {
        goto LABEL_21;
      }
      if (v15 == 4) {
        goto LABEL_3;
      }
LABEL_22:
      int32x2_t v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE330));
      if (v17.i8[0])
      {
        *(_DWORD *)(a3 + 4 * v9 + 16) = (v11 >> (4 * a5)) & v6;
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v15 != 6) {
            goto LABEL_28;
          }
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      *(_DWORD *)(a3 + 4 * v9 + 20) = (v11 >> (5 * a5)) & v6;
      if (v15 != 6)
      {
LABEL_28:
        int32x2_t v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE340));
        if (v18.i8[0]) {
          *(_DWORD *)(a3 + 4 * v9 + 24) = (v11 >> (6 * a5)) & v6;
        }
        if (v18.i8[4]) {
          *(_DWORD *)(a3 + 4 * v9 + 28) = (v11 >> (7 * a5)) & v6;
        }
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<unsigned long long>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    int v6 = ~(-1 << a5);
    unint64_t v7 = a4;
    unint64_t v8 = 8 / a5;
    do
    {
      unint64_t v9 = v5 * v8;
      unint64_t v10 = a4 - v5 * v8;
      if (v10 >= v8) {
        unint64_t v10 = 8 / a5;
      }
      if (!v10) {
        goto LABEL_3;
      }
      unsigned int v11 = *result;
      if (v7 >= v8) {
        unint64_t v12 = 8 / a5;
      }
      else {
        unint64_t v12 = v7;
      }
      uint64x2_t v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      int32x2_t v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_1810FE2E0));
      if (v14.i8[0])
      {
        *(void *)(a3 + 8 * v9) = v6 & v11;
        if (v14.i8[4])
        {
LABEL_15:
          *(void *)(a3 + 8 * v9 + 8) = (v11 >> a5) & v6;
          uint64_t v15 = ((_BYTE)v12 + 1) & 0x1E;
          if (v15 == 2) {
            goto LABEL_3;
          }
          goto LABEL_16;
        }
      }
      else if (v14.i8[4])
      {
        goto LABEL_15;
      }
      uint64_t v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2) {
        goto LABEL_3;
      }
LABEL_16:
      int32x2_t v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE320));
      if (v16.i8[0])
      {
        *(void *)(a3 + 8 * v9 + 16) = (v11 >> (2 * a5)) & v6;
        if (v16.i8[4])
        {
LABEL_21:
          *(void *)(a3 + 8 * v9 + 24) = (v11 >> (3 * a5)) & v6;
          if (v15 == 4) {
            goto LABEL_3;
          }
          goto LABEL_22;
        }
      }
      else if (v16.i8[4])
      {
        goto LABEL_21;
      }
      if (v15 == 4) {
        goto LABEL_3;
      }
LABEL_22:
      int32x2_t v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE330));
      if (v17.i8[0])
      {
        *(void *)(a3 + 8 * v9 + 32) = (v11 >> (4 * a5)) & v6;
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v15 != 6) {
            goto LABEL_28;
          }
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      *(void *)(a3 + 8 * v9 + 40) = (v11 >> (5 * a5)) & v6;
      if (v15 != 6)
      {
LABEL_28:
        int32x2_t v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE340));
        if (v18.i8[0]) {
          *(void *)(a3 + 8 * v9 + 48) = (v11 >> (6 * a5)) & v6;
        }
        if (v18.i8[4]) {
          *(void *)(a3 + 8 * v9 + 56) = (v11 >> (7 * a5)) & v6;
        }
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<half>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    int v6 = ~(-1 << a5);
    unint64_t v7 = a4;
    unint64_t v8 = 8 / a5;
    do
    {
      unint64_t v9 = v5 * v8;
      unint64_t v10 = a4 - v5 * v8;
      if (v10 >= v8) {
        unint64_t v10 = 8 / a5;
      }
      if (!v10) {
        goto LABEL_3;
      }
      unsigned int v11 = *result;
      if (v7 >= v8) {
        unint64_t v12 = 8 / a5;
      }
      else {
        unint64_t v12 = v7;
      }
      uint64x2_t v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      int32x2_t v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_1810FE2E0));
      if (v14.i8[0])
      {
        *(short float *)(a3 + 2 * v9) = (short float)(int)(v6 & v11);
        if (v14.i8[4])
        {
LABEL_15:
          *(short float *)(a3 + 2 * v9 + 2) = (short float)(int)((v11 >> a5) & v6);
          uint64_t v15 = ((_BYTE)v12 + 1) & 0x1E;
          if (v15 == 2) {
            goto LABEL_3;
          }
          goto LABEL_16;
        }
      }
      else if (v14.i8[4])
      {
        goto LABEL_15;
      }
      uint64_t v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2) {
        goto LABEL_3;
      }
LABEL_16:
      int32x2_t v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE320));
      if (v16.i8[0])
      {
        *(short float *)(a3 + 2 * v9 + 4) = (short float)(int)((v11 >> (2 * a5)) & v6);
        if (v16.i8[4])
        {
LABEL_21:
          *(short float *)(a3 + 2 * v9 + 6) = (short float)(int)((v11 >> (3 * a5)) & v6);
          if (v15 == 4) {
            goto LABEL_3;
          }
          goto LABEL_22;
        }
      }
      else if (v16.i8[4])
      {
        goto LABEL_21;
      }
      if (v15 == 4) {
        goto LABEL_3;
      }
LABEL_22:
      int32x2_t v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE330));
      if (v17.i8[0])
      {
        *(short float *)(a3 + 2 * v9 + 8) = (short float)(int)((v11 >> (4 * a5)) & v6);
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v15 != 6) {
            goto LABEL_28;
          }
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      *(short float *)(a3 + 2 * v9 + 10) = (short float)(int)((v11 >> (5 * a5)) & v6);
      if (v15 != 6)
      {
LABEL_28:
        int32x2_t v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE340));
        if (v18.i8[0]) {
          *(short float *)(a3 + 2 * v9 + 12) = (short float)(int)((v11 >> (6 * a5)) & v6);
        }
        if (v18.i8[4]) {
          *(short float *)(a3 + 2 * v9 + 14) = (short float)(int)((v11 >> (7 * a5)) & v6);
        }
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<__emulated_bf16>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    int v6 = ~(-1 << a5);
    unint64_t v7 = a4;
    unint64_t v8 = 8 / a5;
    do
    {
      unint64_t v9 = v5 * v8;
      unint64_t v10 = a4 - v5 * v8;
      if (v10 >= v8) {
        unint64_t v10 = 8 / a5;
      }
      if (v10)
      {
        unsigned int v11 = *result;
        if (v7 >= v8) {
          unint64_t v12 = 8 / a5;
        }
        else {
          unint64_t v12 = v7;
        }
        float v13 = (float)(int)(v6 & v11)
            + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)(v6 & v11)) & 0xFF800000) * 0.0039062);
        *(_WORD *)(a3 + 2 * v9) = HIWORD(v13);
        if (v12 != 1)
        {
          float v14 = (float)(int)((v11 >> a5) & v6)
              + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> a5) & v6)) & 0xFF800000) * 0.0039062);
          uint64_t v15 = a3 + 2 * v9;
          *(_WORD *)(v15 + 2) = HIWORD(v14);
          if (v12 != 2)
          {
            float v16 = (float)(int)((v11 >> (2 * a5)) & v6)
                + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> (2 * a5)) & v6)) & 0xFF800000)
                        * 0.0039062);
            *(_WORD *)(v15 + 4) = HIWORD(v16);
            if (v12 != 3)
            {
              float v17 = (float)(int)((v11 >> (3 * a5)) & v6)
                  + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> (3 * a5)) & v6)) & 0xFF800000)
                          * 0.0039062);
              uint64_t v18 = a3 + 2 * v9;
              *(_WORD *)(v18 + 6) = HIWORD(v17);
              if (v12 != 4)
              {
                float v19 = (float)(int)((v11 >> (4 * a5)) & v6)
                    + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> (4 * a5)) & v6)) & 0xFF800000)
                            * 0.0039062);
                *(_WORD *)(v18 + 8) = HIWORD(v19);
                if (v12 != 5)
                {
                  float v20 = (float)(int)((v11 >> (5 * a5)) & v6)
                      + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> (5 * a5)) & v6)) & 0xFF800000)
                              * 0.0039062);
                  uint64_t v21 = a3 + 2 * v9;
                  *(_WORD *)(v21 + 10) = HIWORD(v20);
                  if (v12 != 6)
                  {
                    float v22 = (float)(int)((v11 >> (6 * a5)) & v6)
                        + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> (6 * a5)) & v6)) & 0xFF800000)
                                * 0.0039062);
                    *(_WORD *)(v21 + 12) = HIWORD(v22);
                    if (v12 != 7)
                    {
                      float v23 = (float)(int)((v11 >> (7 * a5)) & v6)
                          + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> (7 * a5)) & v6)) & 0xFF800000)
                                  * 0.0039062);
                      *(_WORD *)(a3 + 2 * v9 + 14) = HIWORD(v23);
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<double>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    int v6 = ~(-1 << a5);
    unint64_t v7 = a4;
    unint64_t v8 = 8 / a5;
    do
    {
      unint64_t v9 = v5 * v8;
      unint64_t v10 = a4 - v5 * v8;
      if (v10 >= v8) {
        unint64_t v10 = 8 / a5;
      }
      if (!v10) {
        goto LABEL_3;
      }
      unsigned int v11 = *result;
      if (v7 >= v8) {
        unint64_t v12 = 8 / a5;
      }
      else {
        unint64_t v12 = v7;
      }
      uint64x2_t v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      int32x2_t v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_1810FE2E0));
      if (v14.i8[0])
      {
        *(double *)(a3 + 8 * v9) = (double)(int)(v6 & v11);
        if (v14.i8[4])
        {
LABEL_15:
          *(double *)(a3 + 8 * v9 + 8) = (double)(int)((v11 >> a5) & v6);
          uint64_t v15 = ((_BYTE)v12 + 1) & 0x1E;
          if (v15 == 2) {
            goto LABEL_3;
          }
          goto LABEL_16;
        }
      }
      else if (v14.i8[4])
      {
        goto LABEL_15;
      }
      uint64_t v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2) {
        goto LABEL_3;
      }
LABEL_16:
      int32x2_t v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE320));
      if (v16.i8[0])
      {
        *(double *)(a3 + 8 * v9 + 16) = (double)(int)((v11 >> (2 * a5)) & v6);
        if (v16.i8[4])
        {
LABEL_21:
          *(double *)(a3 + 8 * v9 + 24) = (double)(int)((v11 >> (3 * a5)) & v6);
          if (v15 == 4) {
            goto LABEL_3;
          }
          goto LABEL_22;
        }
      }
      else if (v16.i8[4])
      {
        goto LABEL_21;
      }
      if (v15 == 4) {
        goto LABEL_3;
      }
LABEL_22:
      int32x2_t v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE330));
      if (v17.i8[0])
      {
        *(double *)(a3 + 8 * v9 + 32) = (double)(int)((v11 >> (4 * a5)) & v6);
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v15 != 6) {
            goto LABEL_28;
          }
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      *(double *)(a3 + 8 * v9 + 40) = (double)(int)((v11 >> (5 * a5)) & v6);
      if (v15 != 6)
      {
LABEL_28:
        int32x2_t v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_1810FE340));
        if (v18.i8[0]) {
          *(double *)(a3 + 8 * v9 + 48) = (double)(int)((v11 >> (6 * a5)) & v6);
        }
        if (v18.i8[4]) {
          *(double *)(a3 + 8 * v9 + 56) = (double)(int)((v11 >> (7 * a5)) & v6);
        }
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<complex_support::complex_fp<float,(void *)0>>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    int v6 = ~(-1 << a5);
    unint64_t v7 = a4;
    unint64_t v8 = 8 / a5;
    do
    {
      unint64_t v9 = v5 * v8;
      unint64_t v10 = a4 - v5 * v8;
      if (v10 >= v8) {
        unint64_t v10 = 8 / a5;
      }
      if (v10)
      {
        unsigned int v11 = *result;
        if (v7 >= v8) {
          unint64_t v12 = 8 / a5;
        }
        else {
          unint64_t v12 = v7;
        }
        uint64_t v13 = a3 + 8 * v9;
        *(float *)uint64_t v13 = (float)(int)(v6 & v11);
        *(_DWORD *)(v13 + 4) = 0;
        if (v12 != 1)
        {
          *(float *)(v13 + 8) = (float)(int)((v11 >> a5) & v6);
          *(_DWORD *)(v13 + 12) = 0;
          if (v12 != 2)
          {
            uint64_t v14 = a3 + 8 * v9;
            *(float *)(v14 + 16) = (float)(int)((v11 >> (2 * a5)) & v6);
            *(_DWORD *)(v14 + 20) = 0;
            if (v12 != 3)
            {
              *(float *)(v14 + 24) = (float)(int)((v11 >> (3 * a5)) & v6);
              *(_DWORD *)(v14 + 28) = 0;
              if (v12 != 4)
              {
                uint64_t v15 = a3 + 8 * v9;
                *(float *)(v15 + 32) = (float)(int)((v11 >> (4 * a5)) & v6);
                *(_DWORD *)(v15 + 36) = 0;
                if (v12 != 5)
                {
                  *(float *)(v15 + 40) = (float)(int)((v11 >> (5 * a5)) & v6);
                  *(_DWORD *)(v15 + 44) = 0;
                  if (v12 != 6)
                  {
                    uint64_t v16 = a3 + 8 * v9;
                    *(float *)(v16 + 48) = (float)(int)((v11 >> (6 * a5)) & v6);
                    *(_DWORD *)(v16 + 52) = 0;
                    if (v12 != 7)
                    {
                      *(float *)(v16 + 56) = (float)(int)((v11 >> (7 * a5)) & v6);
                      *(_DWORD *)(v16 + 60) = 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<complex_support::complex_fp<half,(void *)0>>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    int v6 = ~(-1 << a5);
    unint64_t v7 = a4;
    unint64_t v8 = 8 / a5;
    do
    {
      unint64_t v9 = v5 * v8;
      unint64_t v10 = a4 - v5 * v8;
      if (v10 >= v8) {
        unint64_t v10 = 8 / a5;
      }
      if (v10)
      {
        unsigned int v11 = *result;
        if (v7 >= v8) {
          unint64_t v12 = 8 / a5;
        }
        else {
          unint64_t v12 = v7;
        }
        uint64_t v13 = a3 + 4 * v9;
        *(short float *)uint64_t v13 = (short float)(int)(v6 & v11);
        *(_WORD *)(v13 + 2) = 0;
        if (v12 != 1)
        {
          *(short float *)(v13 + 4) = (short float)(int)((v11 >> a5) & v6);
          *(_WORD *)(v13 + 6) = 0;
          if (v12 != 2)
          {
            uint64_t v14 = a3 + 4 * v9;
            *(short float *)(v14 + 8) = (short float)(int)((v11 >> (2 * a5)) & v6);
            *(_WORD *)(v14 + 10) = 0;
            if (v12 != 3)
            {
              *(short float *)(v14 + 12) = (short float)(int)((v11 >> (3 * a5)) & v6);
              *(_WORD *)(v14 + 14) = 0;
              if (v12 != 4)
              {
                uint64_t v15 = a3 + 4 * v9;
                *(short float *)(v15 + 16) = (short float)(int)((v11 >> (4 * a5)) & v6);
                *(_WORD *)(v15 + 18) = 0;
                if (v12 != 5)
                {
                  *(short float *)(v15 + 20) = (short float)(int)((v11 >> (5 * a5)) & v6);
                  *(_WORD *)(v15 + 22) = 0;
                  if (v12 != 6)
                  {
                    uint64_t v16 = a3 + 4 * v9;
                    *(short float *)(v16 + 24) = (short float)(int)((v11 >> (6 * a5)) & v6);
                    *(_WORD *)(v16 + 26) = 0;
                    if (v12 != 7)
                    {
                      *(short float *)(v16 + 28) = (short float)(int)((v11 >> (7 * a5)) & v6);
                      *(_WORD *)(v16 + 30) = 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

BOOL mlir::detail::upgradeFromVersion(mlir::ForwardIterator *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::detail::upgradeFromVersion(mlir::Operation *,mlir::DialectVersion const&)::$_0>, (uint64_t)&v3, 1) != 0;
}

BOOL mlir::detail::downgradeToVersion(mlir::ForwardIterator *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::detail::downgradeToVersion(mlir::Operation *,mlir::DialectVersion const&)::$_0>, (uint64_t)&v3, 1) != 0;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::detail::upgradeFromVersion(mlir::Operation *,mlir::DialectVersion const&)::$_0>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  if (*(_UNKNOWN **)(v4 + 16) == &mlir::detail::TypeIDResolver<void,void>::id
    && (uint64_t Context = *(void *)(v4 + 8),
        uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&Context),
        *(void *)(Values + 16) == 3)
    && ((int v6 = *(unsigned __int16 **)(Values + 8), v7 = *v6, v8 = *((unsigned __int8 *)v6 + 2), v7 == 28781)
      ? (BOOL v9 = v8 == 115)
      : (BOOL v9 = 0),
        v9))
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    uint64_t v33 = 0;
    uint64_t v25 = *(void *)(a2 + 16);
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a2);
    uint64_t v34 = v25;
    uint64_t v35 = v26;
    uint64_t v27 = *(void *)(a2 + 48);
    if (*(_UNKNOWN **)(v27 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      uint64_t v29 = *(void *)(v27 + 8);
      mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v29);
    }
    mlir::mps::MPSDialect::convertUnregisteredOperation((mlir::OpBuilder *)&Context, *a1, a2, (uint64_t)&v29);
    uint64_t v13 = v29;
    uint64_t v14 = v30;
    if (v31) {
      goto LABEL_9;
    }
  }
  else
  {
    v28[0] = llvm::DefaultDoCastIfPossible<mlir::UpgraderInterface,mlir::Operation *,llvm::CastInfo<mlir::UpgraderInterface,mlir::Operation *,void>>::doCastIfPossible(a2);
    v28[1] = v10;
    if (!v28[0]) {
      return 1;
    }
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    uint64_t v33 = 0;
    uint64_t v11 = *(void *)(a2 + 16);
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a2);
    uint64_t v34 = v11;
    uint64_t v35 = v12;
    mlir::DowngraderInterface::downgradeToVersion((uint64_t)v28, (uint64_t)&Context, *a1);
    uint64_t v13 = v29;
    uint64_t v14 = v30;
    if (v31)
    {
LABEL_9:
      if (v14)
      {
        uint64_t Context = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0);
        if (mlir::Value::getDefiningOp((mlir::Value *)&Context) == a2)
        {
          uint64_t v15 = 1;
          while (v14 != v15)
          {
            uint64_t Context = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, v15++);
            if (mlir::Value::getDefiningOp((mlir::Value *)&Context) != a2) {
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          uint64_t v16 = *(unsigned int *)(a2 + 36);
          if (v16) {
            uint64_t v17 = a2 - 16;
          }
          else {
            uint64_t v17 = 0;
          }
          if (v16)
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t NextResultAtOffset = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset(v17, v18);
              for (uint64_t i = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v13, v18); ; *uint64_t i = (uint64_t)v21)
              {
                uint64_t v21 = *NextResultAtOffset;
                if (!*NextResultAtOffset) {
                  break;
                }
                float v22 = (uint64_t *)v21[1];
                if (v22)
                {
                  uint64_t *v22 = *v21;
                  if (*v21) {
                    *(void *)(*v21 + 8) = v21[1];
                  }
                }
                v21[3] = (uint64_t)i;
                v21[1] = (uint64_t)i;
                uint64_t v23 = *i;
                *uint64_t v21 = *i;
                if (v23) {
                  *(void *)(v23 + 8) = v21;
                }
              }
              ++v18;
            }
            while (v18 != v16 && v18 != v14);
          }
          mlir::Operation::erase((mlir::Operation *)a2);
        }
      }
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::UpgraderInterface,mlir::Operation *,llvm::CastInfo<mlir::UpgraderInterface,mlir::Operation *,void>>::doCastIfPossible(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4)
  {
    uint64_t v16 = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!Values || !mlir::Dialect::getRegisteredInterfaceForOp<mlir::UpgraderInterface>(Values, v2)) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    if (!mlir::detail::InterfaceMap::lookup<mlir::UpgraderInterface>(v6 + 32)
      && !mlir::Dialect::getRegisteredInterfaceForOp<mlir::UpgraderInterface>(*(void *)(v6 + 24), *(void *)(v1 + 48)))
    {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v1 + 48);
  BOOL v9 = *(void **)(v8 + 16);
  BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v1 + 48);
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!v14) {
      return v1;
    }
    uint64_t v15 = v8;
  }
  else
  {
    unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::UpgraderInterface>(v12 + 32)) {
      return v1;
    }
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v1 + 48);
  }
  mlir::Dialect::getRegisteredInterfaceForOp<mlir::UpgraderInterface>(v14, v15);
  return v1;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::UpgraderInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::UpgraderInterface]";
      unint64_t v17 = 73;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      BOOL v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::UpgraderInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 2336), v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::UpgraderInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::UpgraderInterface]";
      unint64_t v22 = 73;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::UpgraderInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 2336);
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::detail::downgradeToVersion(mlir::Operation *,mlir::DialectVersion const&)::$_0>(uint64_t *a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    return 1;
  }
  uint64_t v21 = llvm::DefaultDoCastIfPossible<mlir::DowngraderInterface,mlir::Operation *,llvm::CastInfo<mlir::DowngraderInterface,mlir::Operation *,void>>::doCastIfPossible(a2);
  uint64_t v22 = v4;
  if (!v21) {
    return 1;
  }
  v20[0] = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v20[1] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a2);
  v20[2] = v5;
  v20[3] = v6;
  mlir::DowngraderInterface::downgradeToVersion((uint64_t)&v21, (uint64_t)v20, *a1);
  if (v19)
  {
    if (v18)
    {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v17, 0);
      if (mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset) == a2)
      {
        uint64_t v7 = 1;
        while (v18 != v7)
        {
          uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v17, v7++);
          if (mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset) != a2) {
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        uint64_t v8 = *(unsigned int *)(a2 + 36);
        if (v8) {
          uint64_t v9 = a2 - 16;
        }
        else {
          uint64_t v9 = 0;
        }
        if (v8)
        {
          uint64_t v10 = 0;
          do
          {
            int v11 = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v10);
            for (uint64_t i = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v17, v10); ; *uint64_t i = (uint64_t)v13)
            {
              unint64_t v13 = *v11;
              if (!*v11) {
                break;
              }
              unint64_t v14 = (uint64_t *)v13[1];
              if (v14)
              {
                uint64_t *v14 = *v13;
                if (*v13) {
                  *(void *)(*v13 + 8) = v13[1];
                }
              }
              v13[3] = (uint64_t)i;
              v13[1] = (uint64_t)i;
              uint64_t v15 = *i;
              uint64_t *v13 = *i;
              if (v15) {
                *(void *)(v15 + 8) = v13;
              }
            }
            ++v10;
          }
          while (v10 != v8 && v10 != v18);
        }
        mlir::Operation::erase((mlir::Operation *)a2);
      }
    }
    return 1;
  }
  return 0;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::DowngraderInterface,mlir::Operation *,llvm::CastInfo<mlir::DowngraderInterface,mlir::Operation *,void>>::doCastIfPossible(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4)
  {
    uint64_t v16 = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!Values || !mlir::Dialect::getRegisteredInterfaceForOp<mlir::DowngraderInterface>(Values, v2)) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    if (!mlir::detail::InterfaceMap::lookup<mlir::DowngraderInterface>(v6 + 32)
      && !mlir::Dialect::getRegisteredInterfaceForOp<mlir::DowngraderInterface>(*(void *)(v6 + 24), *(void *)(v1 + 48)))
    {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void **)(v8 + 16);
  BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v1 + 48);
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!v14) {
      return v1;
    }
    uint64_t v15 = v8;
  }
  else
  {
    unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::DowngraderInterface>(v12 + 32)) {
      return v1;
    }
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v1 + 48);
  }
  mlir::Dialect::getRegisteredInterfaceForOp<mlir::DowngraderInterface>(v14, v15);
  return v1;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::DowngraderInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DowngraderInterface]";
      unint64_t v17 = 75;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      uint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::DowngraderInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 1896), v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::DowngraderInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DowngraderInterface]";
      unint64_t v22 = 75;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::DowngraderInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 1896);
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

_OWORD *mlir::mps::buildConv2DDescriptor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10, unint64_t a11, unint64_t a12, int a13, int a14, int a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  memset(v64, 0, sizeof(v64));
  uint64_t v25 = (void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8))
  {
    uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
    unint64_t v62 = v25;
    uint64_t v63 = v26;
    if (v25 && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v62))
    {
      uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v62);
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v62 = 0;
    uint64_t v63 = 0;
  }
  uint64_t ArgAttrsAttr = (uint64_t *)v64;
LABEL_8:
  uint64_t v28 = (void *)(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v28 + 8))
  {
    uint64_t v29 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v28 + 8);
    unint64_t v62 = v28;
    uint64_t v63 = v29;
    if (v28 && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v62))
    {
      uint64_t result = (_OWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v62);
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v62 = 0;
    uint64_t v63 = 0;
  }
  uint64_t result = v64;
LABEL_15:
  *(void *)(a9 + 72) = a6;
  *(void *)(a9 + 80) = a7;
  *(void *)(a9 + 56) = a4;
  *(void *)(a9 + 64) = a5;
  *(void *)(a9 + 48) = a3;
  *(_DWORD *)(a9 + 120) = a13;
  *(_DWORD *)(a9 + 124) = a14;
  *(_DWORD *)(a9 + 128) = a15;
  if (a15 != 2)
  {
    if (a15 != 3)
    {
      uint64_t v35 = a18;
      uint64_t v36 = *(void *)(a9 + 24) - 1;
      uint64_t v37 = *(void *)(a9 + 32) - 1;
      if (a14 == 1) {
        goto LABEL_22;
      }
      goto LABEL_27;
    }
    uint64_t v32 = *ArgAttrsAttr;
    uint64_t v31 = ArgAttrsAttr[1];
    *(void *)(a9 + 24) = v31;
    *(void *)(a9 + 32) = v32;
    uint64_t v33 = ArgAttrsAttr[3];
    if (a19)
    {
      uint64_t v34 = ArgAttrsAttr[2];
      goto LABEL_21;
    }
LABEL_26:
    *(void *)(a9 + 40) = v33;
    uint64_t v35 = a18;
    uint64_t v36 = v31 - 1;
    uint64_t v37 = v32 - 1;
    if (a14 == 1) {
      goto LABEL_22;
    }
LABEL_27:
    if (a14) {
      goto LABEL_33;
    }
    *(_OWORD *)a9 = result[1];
    *(void *)(a9 + 16) = *((void *)result + 1);
    if (a16)
    {
      a16[2] = a5;
      a16[3] = a4;
    }
    if (!a17) {
      goto LABEL_33;
    }
    uint64_t v38 = 3;
    uint64_t v39 = 2;
    goto LABEL_32;
  }
  uint64_t v32 = ArgAttrsAttr[2];
  uint64_t v31 = ArgAttrsAttr[3];
  *(void *)(a9 + 24) = v31;
  *(void *)(a9 + 32) = v32;
  uint64_t v33 = *ArgAttrsAttr;
  if (!a19) {
    goto LABEL_26;
  }
  uint64_t v34 = ArgAttrsAttr[1];
LABEL_21:
  *(void *)(a9 + 40) = v34 * v33;
  uint64_t v35 = a18;
  uint64_t v36 = v31 - 1;
  uint64_t v37 = v32 - 1;
  if (a14 != 1) {
    goto LABEL_27;
  }
LABEL_22:
  *(_OWORD *)a9 = *(_OWORD *)((char *)result + 8);
  *(void *)(a9 + 16) = *((void *)result + 3);
  if (a16)
  {
    a16[1] = a5;
    a16[2] = a4;
  }
  if (!a17) {
    goto LABEL_33;
  }
  uint64_t v38 = 2;
  uint64_t v39 = 1;
LABEL_32:
  *(void *)(a17 + 8 * v39) = a7;
  *(void *)(a17 + 8 * v38) = a6;
LABEL_33:
  unint64_t v40 = a11;
  unint64_t v41 = a12;
  uint64_t v42 = v36 * a6 + 1;
  unint64_t v43 = a10;
  uint64_t v44 = v37 * a7 + 1;
  switch(a13)
  {
    case 1:
      unint64_t v43 = 0;
      unint64_t v52 = 0;
      unint64_t v41 = 0;
      unint64_t v40 = 0;
      *(_OWORD *)(a9 + 104) = 0u;
      *(_OWORD *)(a9 + 88) = 0u;
      if (!v35) {
        return result;
      }
      goto LABEL_55;
    case 2:
    case 4:
      uint64_t v45 = *(void *)a9;
      uint64_t v46 = *(void *)(a9 + 8);
      unint64_t v47 = v46 % a4;
      if (!(v46 % a4)) {
        unint64_t v47 = a4;
      }
      unint64_t v48 = (v42 - v47) & ~((uint64_t)(v42 - v47) >> 63);
      if (v45 < 1)
      {
        unint64_t v41 = 0;
        unint64_t v40 = 0;
        *(void *)(a9 + 104) = 0;
        *(void *)(a9 + 112) = 0;
        if (v46 > 0) {
          goto LABEL_52;
        }
        goto LABEL_49;
      }
      unint64_t v49 = v45 % a5;
      if (!v49) {
        unint64_t v49 = a5;
      }
      unint64_t v50 = (v44 - v49) & ~((uint64_t)(v44 - v49) >> 63);
      unint64_t v51 = v50 >> 1;
      unint64_t v40 = v50 - (v50 >> 1);
      *(void *)(a9 + 104) = v51;
      *(void *)(a9 + 112) = v40;
      if (a13 != 4)
      {
        unint64_t v41 = v40;
        unint64_t v40 = v51;
        if (v46 > 0)
        {
LABEL_52:
          unint64_t v52 = v48 >> 1;
          unint64_t v43 = v48 - (v48 >> 1);
          *(void *)(a9 + 96) = v43;
          uint64_t v54 = (unint64_t *)(a9 + 96);
          *(v54 - 1) = v52;
          uint64_t v53 = v54 - 1;
          if (a13 != 4) {
            goto LABEL_54;
          }
          goto LABEL_53;
        }
LABEL_49:
        unint64_t v43 = 0;
        unint64_t v52 = 0;
        *(void *)(a9 + 88) = 0;
        *(void *)(a9 + 96) = 0;
        if (!v35) {
          return result;
        }
        goto LABEL_55;
      }
      *(void *)(a9 + 104) = v40;
      *(void *)(a9 + 112) = v51;
      if (v46 < 1)
      {
        unint64_t v41 = v51;
        unint64_t v43 = 0;
        unint64_t v52 = 0;
        *(void *)(a9 + 88) = 0;
        *(void *)(a9 + 96) = 0;
        if (!v35) {
          return result;
        }
        goto LABEL_55;
      }
      unint64_t v52 = v48 >> 1;
      uint64_t v53 = (unint64_t *)(a9 + 88);
      unint64_t v43 = v48 - (v48 >> 1);
      uint64_t v54 = (unint64_t *)(a9 + 96);
      unint64_t v41 = v51;
LABEL_53:
      unint64_t v55 = v43;
      *uint64_t v53 = v43;
      *uint64_t v54 = v52;
      unint64_t v43 = v52;
      unint64_t v52 = v55;
LABEL_54:
      if (!v35) {
        return result;
      }
LABEL_55:
      if (a14)
      {
        if (a14 != 1) {
          return result;
        }
        uint64_t v56 = 5;
        uint64_t v57 = 4;
        uint64_t v58 = 3;
        uint64_t v59 = 2;
      }
      else
      {
        uint64_t v56 = 7;
        uint64_t v57 = 6;
        uint64_t v58 = 5;
        uint64_t v59 = 4;
      }
      *(void *)(v35 + 8 * v59) = v40;
      *(void *)(v35 + 8 * v58) = v41;
      *(void *)(v35 + 8 * v57) = v52;
      *(void *)(v35 + 8 * v56) = v43;
      return result;
    case 3:
      __break(1u);
      JUMPOUT(0x180C56D14);
    default:
      unint64_t v52 = a8;
      *(void *)(a9 + 88) = a8;
      *(void *)(a9 + 96) = a10;
      *(void *)(a9 + 104) = a11;
      *(void *)(a9 + 112) = a12;
      if (!v35) {
        return result;
      }
      goto LABEL_55;
  }
}

uint64_t mlir::mps::getBroadcastGradientArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  v119[0] = a1;
  v119[1] = a2;
  v118[0] = a3;
  v118[1] = a4;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  uint64_t ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v118);
  uint64_t v8 = v7;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v119))
  {
    unint64_t v9 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v119);
    if (v10)
    {
      uint64_t v11 = 8 * v10;
      while (*v9 != 0x8000000000000000)
      {
        ++v9;
        v11 -= 8;
        if (!v11) {
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      int v12 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v119);
      if (v13 == v8)
      {
        uint64_t result = memcmp(v12, ArgAttrsAttr, 8 * v13);
        if (!result) {
          return result;
        }
      }
    }
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v119);
  uint64_t v16 = v15;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v118);
  uint64_t v18 = v17;
  uint64_t v19 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v119);
  uint64_t result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v118);
  uint64_t v20 = v16 - v18;
  uint64_t v116 = result;
  uint64_t v117 = v19;
  uint64_t v115 = v16;
  if (v16 != v18)
  {
    uint64_t v114 = v18;
    if (v16 < v18)
    {
      if (v16 < 1) {
        return result;
      }
      unint64_t v55 = 0;
      uint64_t v56 = 0;
      uint64_t v57 = v18 - v16;
      while (1)
      {
        if (*(void *)(v19 + 8 * (v20 + v57)) == 1 || *(void *)(result + 8 * v57) != 1) {
          goto LABEL_72;
        }
        unint64_t v59 = (unint64_t)a5[2];
        if ((unint64_t)v55 >= v59) {
          break;
        }
        *(void *)unint64_t v55 = v57;
        uint64_t v58 = (uint64_t)(v55 + 8);
LABEL_71:
        a5[1] = (char *)v58;
        unint64_t v55 = (char *)v58;
LABEL_72:
        if (++v57 >= v18) {
          return result;
        }
      }
      uint64_t v60 = (v55 - v56) >> 3;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61) {
        goto LABEL_168;
      }
      uint64_t v62 = v59 - (void)v56;
      if (v62 >> 2 > v61) {
        unint64_t v61 = v62 >> 2;
      }
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v63 = v61;
      }
      if (v63)
      {
        if (v63 >> 61) {
          goto LABEL_169;
        }
        int64_t v64 = operator new(8 * v63);
        uint64_t v65 = &v64[8 * v60];
        *(void *)uint64_t v65 = v57;
        uint64_t v58 = (uint64_t)(v65 + 8);
        if (v55 != v56)
        {
LABEL_85:
          unint64_t v66 = v55 - 8 - v56;
          if (v66 < 0x168
            || &v64[v55 - v56 - 8 - (v66 & 0xFFFFFFFFFFFFFFF8)] > &v64[v55 - v56 - 8]
            || &v55[-(v66 & 0xFFFFFFFFFFFFFFF8) - 8] > v55 - 8
            || (unint64_t)(v56 - v64) < 0x20)
          {
            uint64_t v67 = v55;
            uint64_t v19 = v117;
            uint64_t v18 = v114;
          }
          else
          {
            uint64_t v69 = (v66 >> 3) + 1;
            uint64_t v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v67 = &v55[-v70];
            v65 -= v70;
            uint64_t v71 = &v64[8 * v60 - 16];
            float16x4_t v72 = v55 - 16;
            uint64_t v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v19 = v117;
            do
            {
              long long v74 = *(_OWORD *)v72;
              *(v71 - 1) = *((_OWORD *)v72 - 1);
              *uint64_t v71 = v74;
              v71 -= 2;
              v72 -= 32;
              v73 -= 4;
            }
            while (v73);
            uint64_t v18 = v114;
            if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_88:
              *a5 = v65;
              a5[1] = (char *)v58;
              a5[2] = &v64[8 * v63];
              if (!v56)
              {
LABEL_90:
                uint64_t v56 = v65;
                uint64_t result = v116;
                goto LABEL_71;
              }
LABEL_89:
              operator delete(v56);
              goto LABEL_90;
            }
          }
          do
          {
            uint64_t v68 = *((void *)v67 - 1);
            v67 -= 8;
            *((void *)v65 - 1) = v68;
            v65 -= 8;
          }
          while (v67 != v56);
          goto LABEL_88;
        }
      }
      else
      {
        int64_t v64 = 0;
        uint64_t v65 = (char *)(8 * v60);
        *(void *)(8 * v60) = v57;
        uint64_t v58 = 8 * v60 + 8;
        if (v55 != v56) {
          goto LABEL_85;
        }
      }
      uint64_t v19 = v117;
      uint64_t v18 = v114;
      *a5 = v65;
      a5[1] = (char *)v58;
      a5[2] = &v64[8 * v63];
      if (!v56) {
        goto LABEL_90;
      }
      goto LABEL_89;
    }
    if (v20 >= 1)
    {
      uint64_t v75 = 0;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      while (1)
      {
        if (*(void *)(v19 + 8 * v76) == 1) {
          goto LABEL_105;
        }
        unint64_t v79 = (unint64_t)a5[2];
        if ((unint64_t)v75 >= v79) {
          break;
        }
        *(void *)uint64_t v75 = v76;
        uint64_t v78 = (uint64_t)(v75 + 8);
LABEL_104:
        a5[1] = (char *)v78;
        uint64_t v75 = (char *)v78;
LABEL_105:
        if (++v76 == v20) {
          goto LABEL_134;
        }
      }
      uint64_t v80 = (v75 - v77) >> 3;
      unint64_t v81 = v80 + 1;
      if ((unint64_t)(v80 + 1) >> 61) {
LABEL_168:
      }
        abort();
      uint64_t v82 = v79 - (void)v77;
      if (v82 >> 2 > v81) {
        unint64_t v81 = v82 >> 2;
      }
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v83 = v81;
      }
      if (v83)
      {
        if (v83 >> 61) {
LABEL_169:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        long long v84 = operator new(8 * v83);
        uint64_t v85 = &v84[8 * v80];
        *(void *)uint64_t v85 = v76;
        uint64_t v78 = (uint64_t)(v85 + 8);
        if (v75 != v77)
        {
LABEL_117:
          unint64_t v86 = v75 - 8 - v77;
          if (v86 >= 0x168
            && &v84[v75 - v77 - 8 - (v86 & 0xFFFFFFFFFFFFFFF8)] <= &v84[v75 - v77 - 8]
            && &v75[-(v86 & 0xFFFFFFFFFFFFFFF8) - 8] <= v75 - 8
            && (unint64_t)(v77 - v84) >= 0x20)
          {
            uint64_t v89 = (v86 >> 3) + 1;
            uint64_t v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
            int64_t v87 = &v75[-v90];
            v85 -= v90;
            float32x4_t v91 = &v84[8 * v80 - 16];
            unint64_t v92 = v75 - 16;
            uint64_t v93 = v89 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v19 = v117;
            do
            {
              long long v94 = *(_OWORD *)v92;
              *(v91 - 1) = *((_OWORD *)v92 - 1);
              *float32x4_t v91 = v94;
              v91 -= 2;
              v92 -= 32;
              v93 -= 4;
            }
            while (v93);
            uint64_t v16 = v115;
            if (v89 == (v89 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_123:
              *a5 = v85;
              a5[1] = (char *)v78;
              a5[2] = &v84[8 * v83];
              if (!v77)
              {
LABEL_125:
                uint64_t v77 = v85;
                uint64_t result = v116;
                goto LABEL_104;
              }
LABEL_124:
              operator delete(v77);
              goto LABEL_125;
            }
          }
          else
          {
            int64_t v87 = v75;
            uint64_t v19 = v117;
            uint64_t v16 = v115;
          }
          do
          {
            uint64_t v88 = *((void *)v87 - 1);
            v87 -= 8;
            *((void *)v85 - 1) = v88;
            v85 -= 8;
          }
          while (v87 != v77);
          goto LABEL_123;
        }
      }
      else
      {
        long long v84 = 0;
        uint64_t v85 = (char *)(8 * v80);
        *(void *)(8 * v80) = v76;
        uint64_t v78 = 8 * v80 + 8;
        if (v75 != v77) {
          goto LABEL_117;
        }
      }
      uint64_t v19 = v117;
      uint64_t v16 = v115;
      *a5 = v85;
      a5[1] = (char *)v78;
      a5[2] = &v84[8 * v83];
      if (!v77) {
        goto LABEL_125;
      }
      goto LABEL_124;
    }
    uint64_t v75 = 0;
LABEL_134:
    if (v114 < 1) {
      return result;
    }
    int8x16_t v95 = *a5;
    uint64_t v96 = v114 - v16;
    while (1)
    {
      if (*(void *)(v19 + 8 * v20) == 1 || *(void *)(result + 8 * (v96 + v20)) != 1) {
        goto LABEL_138;
      }
      unint64_t v98 = (unint64_t)a5[2];
      if ((unint64_t)v75 >= v98) {
        break;
      }
      *(void *)uint64_t v75 = v20;
      uint64_t v97 = (uint64_t)(v75 + 8);
LABEL_137:
      a5[1] = (char *)v97;
      uint64_t v75 = (char *)v97;
LABEL_138:
      if (++v20 >= v16) {
        return result;
      }
    }
    uint64_t v99 = (v75 - v95) >> 3;
    unint64_t v100 = v99 + 1;
    if ((unint64_t)(v99 + 1) >> 61) {
      goto LABEL_168;
    }
    uint64_t v101 = v98 - (void)v95;
    if (v101 >> 2 > v100) {
      unint64_t v100 = v101 >> 2;
    }
    if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v102 = v100;
    }
    if (v102)
    {
      if (v102 >> 61) {
        goto LABEL_169;
      }
      unint64_t v103 = operator new(8 * v102);
      unint64_t v104 = (uint64_t *)&v103[8 * v99];
      *unint64_t v104 = v20;
      uint64_t v97 = (uint64_t)(v104 + 1);
      if (v75 != v95)
      {
LABEL_151:
        unint64_t v105 = v75 - 8 - v95;
        if (v105 < 0x168
          || &v103[v75 - v95 - 8 - (v105 & 0xFFFFFFFFFFFFFFF8)] > &v103[v75 - v95 - 8]
          || &v75[-(v105 & 0xFFFFFFFFFFFFFFF8) - 8] > v75 - 8
          || (unint64_t)(v95 - v103) < 0x20)
        {
          unint64_t v106 = v75;
          uint64_t v19 = v117;
          uint64_t v16 = v115;
        }
        else
        {
          uint64_t v108 = (v105 >> 3) + 1;
          uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v106 = &v75[-v109];
          unint64_t v104 = (uint64_t *)((char *)v104 - v109);
          int8x16_t v110 = &v103[8 * v99 - 16];
          unint64_t v111 = v75 - 16;
          uint64_t v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v19 = v117;
          do
          {
            long long v113 = *(_OWORD *)v111;
            *(v110 - 1) = *((_OWORD *)v111 - 1);
            *int8x16_t v110 = v113;
            v110 -= 2;
            v111 -= 32;
            v112 -= 4;
          }
          while (v112);
          uint64_t v16 = v115;
          if (v108 == (v108 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_154:
            *a5 = (char *)v104;
            a5[1] = (char *)v97;
            a5[2] = &v103[8 * v102];
            if (!v95)
            {
LABEL_156:
              int8x16_t v95 = (char *)v104;
              uint64_t result = v116;
              goto LABEL_137;
            }
LABEL_155:
            operator delete(v95);
            goto LABEL_156;
          }
        }
        do
        {
          uint64_t v107 = *((void *)v106 - 1);
          v106 -= 8;
          *--unint64_t v104 = v107;
        }
        while (v106 != v95);
        goto LABEL_154;
      }
    }
    else
    {
      unint64_t v103 = 0;
      unint64_t v104 = (uint64_t *)(8 * v99);
      *(void *)(8 * v99) = v20;
      uint64_t v97 = 8 * v99 + 8;
      if (v75 != v95) {
        goto LABEL_151;
      }
    }
    uint64_t v19 = v117;
    uint64_t v16 = v115;
    *a5 = (char *)v104;
    a5[1] = (char *)v97;
    a5[2] = &v103[8 * v102];
    if (!v95) {
      goto LABEL_156;
    }
    goto LABEL_155;
  }
  if (v16 >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    do
    {
      if (*(void *)(v19 + 8 * v22) == 1) {
        goto LABEL_13;
      }
      uint64_t v25 = *(void *)(result + 8 * v22);
      if (v25 == -1)
      {
        unint64_t v33 = (unint64_t)a5[2];
        if ((unint64_t)v21 >= v33)
        {
          uint64_t v34 = (v21 - v23) >> 3;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61) {
            goto LABEL_168;
          }
          uint64_t v36 = v33 - (void)v23;
          if (v36 >> 2 > v35) {
            unint64_t v35 = v36 >> 2;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v35;
          }
          if (v30)
          {
            if (v30 >> 61) {
              goto LABEL_169;
            }
            uint64_t v31 = operator new(8 * v30);
            uint64_t v32 = &v31[8 * v34];
            *(void *)uint64_t v32 = v22;
            uint64_t v24 = (uint64_t)(v32 + 8);
            if (v21 == v23)
            {
LABEL_49:
              uint64_t v19 = v117;
              uint64_t v16 = v115;
              goto LABEL_50;
            }
          }
          else
          {
            uint64_t v31 = 0;
            uint64_t v32 = (char *)(8 * v34);
            *(void *)(8 * v34) = v22;
            uint64_t v24 = 8 * v34 + 8;
            if (v21 == v23) {
              goto LABEL_49;
            }
          }
          unint64_t v40 = v21 - 8 - v23;
          if (v40 < 0x168
            || &v31[v21 - v23 - 8 - (v40 & 0xFFFFFFFFFFFFFFF8)] > &v31[v21 - v23 - 8]
            || &v21[-(v40 & 0xFFFFFFFFFFFFFFF8) - 8] > v21 - 8
            || (unint64_t)(v23 - v31) < 0x20)
          {
            unint64_t v41 = v21;
            uint64_t v19 = v117;
            uint64_t v16 = v115;
          }
          else
          {
            uint64_t v49 = (v40 >> 3) + 1;
            uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v41 = &v21[-v50];
            v32 -= v50;
            unint64_t v51 = &v31[8 * v34 - 16];
            unint64_t v52 = v21 - 16;
            uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v19 = v117;
            do
            {
              long long v54 = *(_OWORD *)v52;
              *(v51 - 1) = *((_OWORD *)v52 - 1);
              _OWORD *v51 = v54;
              v51 -= 2;
              v52 -= 32;
              v53 -= 4;
            }
            while (v53);
            uint64_t v16 = v115;
            if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_50:
              *a5 = v32;
              a5[1] = (char *)v24;
              a5[2] = &v31[8 * v30];
              if (v23) {
                operator delete(v23);
              }
              uint64_t v23 = v32;
              uint64_t result = v116;
              goto LABEL_12;
            }
          }
          do
          {
            uint64_t v42 = *((void *)v41 - 1);
            v41 -= 8;
            *((void *)v32 - 1) = v42;
            v32 -= 8;
          }
          while (v41 != v23);
          goto LABEL_50;
        }
      }
      else
      {
        if (v25 != 1) {
          goto LABEL_13;
        }
        unint64_t v26 = (unint64_t)a5[2];
        if ((unint64_t)v21 >= v26)
        {
          uint64_t v27 = (v21 - v23) >> 3;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61) {
            goto LABEL_168;
          }
          uint64_t v29 = v26 - (void)v23;
          if (v29 >> 2 > v28) {
            unint64_t v28 = v29 >> 2;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            if (v30 >> 61) {
              goto LABEL_169;
            }
            uint64_t v31 = operator new(8 * v30);
            uint64_t v32 = &v31[8 * v27];
            *(void *)uint64_t v32 = v22;
            uint64_t v24 = (uint64_t)(v32 + 8);
            if (v21 == v23) {
              goto LABEL_49;
            }
          }
          else
          {
            uint64_t v31 = 0;
            uint64_t v32 = (char *)(8 * v27);
            *(void *)(8 * v27) = v22;
            uint64_t v24 = 8 * v27 + 8;
            if (v21 == v23) {
              goto LABEL_49;
            }
          }
          unint64_t v37 = v21 - 8 - v23;
          if (v37 < 0x168
            || &v31[v21 - v23 - 8 - (v37 & 0xFFFFFFFFFFFFFFF8)] > &v31[v21 - v23 - 8]
            || &v21[-(v37 & 0xFFFFFFFFFFFFFFF8) - 8] > v21 - 8
            || (unint64_t)(v23 - v31) < 0x20)
          {
            uint64_t v38 = v21;
            uint64_t v19 = v117;
            uint64_t v16 = v115;
          }
          else
          {
            uint64_t v43 = (v37 >> 3) + 1;
            uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v38 = &v21[-v44];
            v32 -= v44;
            uint64_t v45 = &v31[8 * v27 - 16];
            uint64_t v46 = v21 - 16;
            uint64_t v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v19 = v117;
            do
            {
              long long v48 = *(_OWORD *)v46;
              *(v45 - 1) = *((_OWORD *)v46 - 1);
              *uint64_t v45 = v48;
              v45 -= 2;
              v46 -= 32;
              v47 -= 4;
            }
            while (v47);
            uint64_t v16 = v115;
            if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_50;
            }
          }
          do
          {
            uint64_t v39 = *((void *)v38 - 1);
            v38 -= 8;
            *((void *)v32 - 1) = v39;
            v32 -= 8;
          }
          while (v38 != v23);
          goto LABEL_50;
        }
      }
      *(void *)uint64_t v21 = v22;
      uint64_t v24 = (uint64_t)(v21 + 8);
LABEL_12:
      a5[1] = (char *)v24;
      uint64_t v21 = (char *)v24;
LABEL_13:
      ++v22;
    }
    while (v22 != v16);
  }
  return result;
}

unint64_t mlir::mps::mergeDynamicDims(unint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return 0x8000000000000000;
  }
  uint64_t v2 = 8 * a2;
  unint64_t v3 = 0x8000000000000000;
  do
  {
    unint64_t v5 = *a1++;
    unint64_t v4 = v5;
    if (v3 == 0x8000000000000000) {
      unint64_t v3 = v4;
    }
    v2 -= 8;
  }
  while (v2);
  return v3;
}

uint64_t mlir::mps::getDataSize(void *a1)
{
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  uint64_t v6 = ElementTypeOrSelf;
  if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v2 = ElementTypeOrSelf;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v5 = v2;
  if (v2)
  {
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v5);
    return 2 * (mlir::mps::getDataSize(Value) & 0xFFFFFFFFFFFFFFFLL);
  }
  else if (mlir::Type::isIndex((mlir::Type *)&v6))
  {
    return 8;
  }
  else
  {
    return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v6) >> 3;
  }
}

void mlir::mps::mixed_precision::defaultMixedPrecisionCheck(mlir::mps::mixed_precision *this, mlir::Operation *a2, char a3)
{
  char v4 = (char)a2;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *((unsigned int *)this + 9);
  uint64_t v7 = (char *)this - 16;
  if (!v6) {
    uint64_t v7 = 0;
  }
  uint64_t v21 = v7;
  unint64_t v22 = v6;
  mlir::OperandRange::getTypes((uint64_t *)&v21, &v16);
  uint64_t NextResultAtOffset = v16;
  uint64_t v9 = v17;
  uint64_t v10 = v18;
  if (v17) {
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, v17);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v21, NextResultAtOffset, v10 - v9);
  mlir::TypeRange::TypeRange(v20, (uint64_t)v21, v22);
  if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
    uint64_t v11 = *((void *)this + 9);
    unint64_t v12 = *((unsigned int *)this + 17);
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
  }
  uint64_t v21 = (char *)v11;
  unint64_t v22 = v12;
  mlir::OperandRange::getTypes((uint64_t *)&v21, &v13);
  mlir::ValueRange::ValueRange((unint64_t *)&v21, v13 + 32 * v14, v15 - v14);
  mlir::TypeRange::TypeRange(v19, (uint64_t)v21, v22);
  mlir::mps::mixed_precision::defaultMixedPrecisionCheck((uint64_t *)this, v20[0], v20[1], v19[0], v19[1], v4, a3);
}

void mlir::mps::mixed_precision::defaultMixedPrecisionCheck(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t v7 = a5;
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  int64x2_t v144 = 0uLL;
  unsigned int v145 = 0;
  if (a5)
  {
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = (void *)mlir::TypeRange::dereference_iterator(a4, v15);
      v142[0] = (const void **)mlir::getElementTypeOrSelf(v16);
      BOOL isF16 = mlir::Type::isF16((mlir::Type *)v142);
      BOOL isBF16 = mlir::Type::isBF16((mlir::Type *)v142);
      BOOL isF32 = mlir::Type::isF32((mlir::Type *)v142);
      BOOL v20 = *((void *)*v142[0] + 17) == (void)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
      if (mlir::Type::isIntOrIndex((mlir::Type *)v142)) {
        llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(&v144, (uint64_t *)v142, (uint64_t)v149);
      }
      v11 |= isF16;
      v12 |= isBF16;
      v13 |= isF32;
      v14 |= v20;
      ++v15;
    }
    while (v7 != v15);
    if (v144.i32[2] >= 2u && (a7 & 1) == 0)
    {
      __int16 v143 = 257;
      mlir::Operation::emitOpError(a1, v142, (uint64_t)v149);
      if (v149[0])
      {
        int v146 = 3;
        unint64_t v147 = "detected operation with operands of different integer types which is not supported";
        uint64_t v148 = 82;
        uint64_t v21 = &v146;
        unint64_t v22 = (char *)v150;
        if (v151 >= v152)
        {
          unint64_t v117 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            int64_t v126 = (char *)&v146 - (unsigned char *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v117, 24);
            unint64_t v22 = (char *)v150;
            uint64_t v21 = (int *)((char *)v150 + v126);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v117, 24);
            uint64_t v21 = &v146;
            unint64_t v22 = (char *)v150;
          }
        }
        uint64_t v23 = &v22[24 * v151];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v23 = v24;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      }
      if (v158)
      {
        uint64_t v25 = (void **)__p;
        if (__p)
        {
          unint64_t v26 = v157;
          uint64_t v27 = __p;
          if (v157 != __p)
          {
            do
              unint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
            while (v26 != v25);
            uint64_t v27 = __p;
          }
          float64x2_t v157 = v25;
          operator delete(v27);
        }
        unint64_t v28 = v154;
        if (v154)
        {
          uint64_t v29 = v155;
          unint64_t v30 = v154;
          if (v155 == v154) {
            goto LABEL_196;
          }
          do
          {
            uint64_t v32 = (void *)*--v29;
            uint64_t v31 = v32;
            void *v29 = 0;
            if (v32) {
              operator delete[](v31);
            }
          }
          while (v29 != v28);
          goto LABEL_195;
        }
        goto LABEL_197;
      }
      goto LABEL_199;
    }
    BOOL v33 = v144.i32[2] == 0;
    LODWORD(v7) = v11 | v13 | v12;
    if ((v7 & 1) != 0 && (a6 & 1) == 0 && v144.i32[2])
    {
      __int16 v143 = 257;
      mlir::Operation::emitOpError(a1, v142, (uint64_t)v149);
      if (v149[0])
      {
        int v146 = 3;
        unint64_t v147 = "detected operation with both float and integer operands which is not supported";
        uint64_t v148 = 78;
        uint64_t v45 = &v146;
        uint64_t v46 = (char *)v150;
        if (v151 >= v152)
        {
          unint64_t v118 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            int64_t v127 = (char *)&v146 - (unsigned char *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v118, 24);
            uint64_t v46 = (char *)v150;
            uint64_t v45 = (int *)((char *)v150 + v127);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v118, 24);
            uint64_t v45 = &v146;
            uint64_t v46 = (char *)v150;
          }
        }
        uint64_t v47 = &v46[24 * v151];
        long long v48 = *(_OWORD *)v45;
        *((void *)v47 + 2) = *((void *)v45 + 2);
        *(_OWORD *)uint64_t v47 = v48;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      }
      if (!v158) {
        goto LABEL_199;
      }
      uint64_t v49 = (void **)__p;
      if (__p)
      {
        uint64_t v50 = v157;
        unint64_t v51 = __p;
        if (v157 != __p)
        {
          do
            uint64_t v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
          while (v50 != v49);
          unint64_t v51 = __p;
        }
        float64x2_t v157 = v49;
        operator delete(v51);
      }
      unint64_t v28 = v154;
      if (!v154) {
        goto LABEL_197;
      }
      unint64_t v52 = v155;
      unint64_t v30 = v154;
      if (v155 != v154)
      {
        do
        {
          long long v54 = (void *)*--v52;
          uint64_t v53 = v54;
          void *v52 = 0;
          if (v54) {
            operator delete[](v53);
          }
        }
        while (v52 != v28);
        goto LABEL_195;
      }
      goto LABEL_196;
    }
    uint64_t v10 = a1;
    if (v144.i32[2] && ((v14 ^ 1) & 1) == 0)
    {
      __int16 v143 = 257;
      mlir::Operation::emitOpError(a1, v142, (uint64_t)v149);
      if (v149[0])
      {
        int v146 = 3;
        unint64_t v147 = "detected operation with both complex and integer type operands which is not supported";
        uint64_t v148 = 85;
        uint64_t v57 = &v146;
        uint64_t v58 = (char *)v150;
        if (v151 >= v152)
        {
          unint64_t v119 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            int64_t v128 = (char *)&v146 - (unsigned char *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v119, 24);
            uint64_t v58 = (char *)v150;
            uint64_t v57 = (int *)((char *)v150 + v128);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v119, 24);
            uint64_t v57 = &v146;
            uint64_t v58 = (char *)v150;
          }
        }
        unint64_t v59 = &v58[24 * v151];
        long long v60 = *(_OWORD *)v57;
        *((void *)v59 + 2) = *((void *)v57 + 2);
        *(_OWORD *)unint64_t v59 = v60;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      }
      if (!v158) {
        goto LABEL_199;
      }
      unint64_t v61 = (void **)__p;
      if (__p)
      {
        uint64_t v62 = v157;
        unint64_t v63 = __p;
        if (v157 != __p)
        {
          do
            uint64_t v62 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v62 - 1);
          while (v62 != v61);
          unint64_t v63 = __p;
        }
        float64x2_t v157 = v61;
        operator delete(v63);
      }
      unint64_t v28 = v154;
      if (!v154) {
        goto LABEL_197;
      }
      int64_t v64 = v155;
      unint64_t v30 = v154;
      if (v155 != v154)
      {
        do
        {
          unint64_t v66 = (void *)*--v64;
          uint64_t v65 = v66;
          *int64_t v64 = 0;
          if (v66) {
            operator delete[](v65);
          }
        }
        while (v64 != v28);
        goto LABEL_195;
      }
      goto LABEL_196;
    }
    if (v14 & v12)
    {
      __int16 v143 = 257;
      mlir::Operation::emitOpError(a1, v142, (uint64_t)v149);
      if (v149[0])
      {
        int v146 = 3;
        unint64_t v147 = "detected operation with both complex and BF16 type operands which is not supported";
        uint64_t v148 = 82;
        uint64_t v67 = &v146;
        uint64_t v68 = (char *)v150;
        if (v151 >= v152)
        {
          unint64_t v121 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            int64_t v130 = (char *)&v146 - (unsigned char *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v121, 24);
            uint64_t v68 = (char *)v150;
            uint64_t v67 = (int *)((char *)v150 + v130);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v121, 24);
            uint64_t v67 = &v146;
            uint64_t v68 = (char *)v150;
          }
        }
        uint64_t v69 = &v68[24 * v151];
        long long v70 = *(_OWORD *)v67;
        *((void *)v69 + 2) = *((void *)v67 + 2);
        *(_OWORD *)uint64_t v69 = v70;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      }
      if (!v158) {
        goto LABEL_199;
      }
      uint64_t v71 = (void **)__p;
      if (__p)
      {
        float16x4_t v72 = v157;
        uint64_t v73 = __p;
        if (v157 != __p)
        {
          do
            float16x4_t v72 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v72 - 1);
          while (v72 != v71);
          uint64_t v73 = __p;
        }
        float64x2_t v157 = v71;
        operator delete(v73);
      }
      unint64_t v28 = v154;
      if (!v154) {
        goto LABEL_197;
      }
      long long v74 = v155;
      unint64_t v30 = v154;
      if (v155 != v154)
      {
        do
        {
          uint64_t v76 = (void *)*--v74;
          uint64_t v75 = v76;
          *long long v74 = 0;
          if (v76) {
            operator delete[](v75);
          }
        }
        while (v74 != v28);
        goto LABEL_195;
      }
      goto LABEL_196;
    }
    uint64_t v9 = a2;
    uint64_t v8 = a3;
    if (v11 & v12)
    {
      __int16 v143 = 257;
      mlir::Operation::emitOpError(a1, v142, (uint64_t)v149);
      if (v149[0])
      {
        int v146 = 3;
        unint64_t v147 = "detected operation with both F16 and BF16 operands which is not supported";
        uint64_t v148 = 73;
        int64_t v87 = &v146;
        uint64_t v88 = (char *)v150;
        if (v151 >= v152)
        {
          unint64_t v125 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            int64_t v134 = (char *)&v146 - (unsigned char *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v125, 24);
            uint64_t v88 = (char *)v150;
            int64_t v87 = (int *)((char *)v150 + v134);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v125, 24);
            int64_t v87 = &v146;
            uint64_t v88 = (char *)v150;
          }
        }
        uint64_t v89 = &v88[24 * v151];
        long long v90 = *(_OWORD *)v87;
        *((void *)v89 + 2) = *((void *)v87 + 2);
        *(_OWORD *)uint64_t v89 = v90;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      }
      if (!v158) {
        goto LABEL_199;
      }
      float32x4_t v91 = (void **)__p;
      if (__p)
      {
        unint64_t v92 = v157;
        uint64_t v93 = __p;
        if (v157 != __p)
        {
          do
            unint64_t v92 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v92 - 1);
          while (v92 != v91);
          uint64_t v93 = __p;
        }
        float64x2_t v157 = v91;
        operator delete(v93);
      }
      unint64_t v28 = v154;
      if (!v154) {
        goto LABEL_197;
      }
      long long v94 = v155;
      unint64_t v30 = v154;
      if (v155 != v154)
      {
        do
        {
          uint64_t v96 = (void *)*--v94;
          int8x16_t v95 = v96;
          *long long v94 = 0;
          if (v96) {
            operator delete[](v95);
          }
        }
        while (v94 != v28);
        goto LABEL_195;
      }
      goto LABEL_196;
    }
  }
  else
  {
    LOBYTE(v11) = 0;
    LOBYTE(v12) = 0;
    BOOL v33 = 1;
  }
  if (!v8) {
    goto LABEL_199;
  }
  uint64_t v34 = 0;
  if ((v33 & v7 & 1) == 0)
  {
    while (1)
    {
      unint64_t v35 = (void *)mlir::TypeRange::dereference_iterator(v9, v34);
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v35);
      mlir::Type::isIntOrIndex((mlir::Type *)&ElementTypeOrSelf);
      if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf) || mlir::Type::isF32((mlir::Type *)&ElementTypeOrSelf))
      {
        if (((v33 | v7) & 1) == 0) {
          goto LABEL_126;
        }
      }
      else if (!(v33 | !mlir::Type::isBF16((mlir::Type *)&ElementTypeOrSelf) | v7 & 1))
      {
        goto LABEL_126;
      }
      if ((v11 & 1) != 0 && mlir::Type::isBF16((mlir::Type *)&ElementTypeOrSelf)) {
        break;
      }
      if ((v12 & 1) != 0 && mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf)) {
        goto LABEL_51;
      }
      if (v8 == ++v34) {
        goto LABEL_199;
      }
    }
LABEL_161:
    __int16 v143 = 257;
    mlir::Operation::emitOpError(v10, v142, (uint64_t)v149);
    if (v149[0])
    {
      int v146 = 3;
      unint64_t v147 = "detected operation with F16 inputs and BF16 result type which is not supported";
      uint64_t v148 = 78;
      uint64_t v97 = &v146;
      unint64_t v98 = (char *)v150;
      if (v151 >= v152)
      {
        unint64_t v122 = v151 + 1;
        if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
        {
          int64_t v131 = (char *)&v146 - (unsigned char *)v150;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v122, 24);
          unint64_t v98 = (char *)v150;
          uint64_t v97 = (int *)((char *)v150 + v131);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v122, 24);
          uint64_t v97 = &v146;
          unint64_t v98 = (char *)v150;
        }
      }
      uint64_t v99 = &v98[24 * v151];
      long long v100 = *(_OWORD *)v97;
      *((void *)v99 + 2) = *((void *)v97 + 2);
      *(_OWORD *)uint64_t v99 = v100;
      ++v151;
    }
    mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
    if (v149[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
    }
    if (!v158) {
      goto LABEL_199;
    }
    uint64_t v101 = (void **)__p;
    if (__p)
    {
      unint64_t v102 = v157;
      unint64_t v103 = __p;
      if (v157 != __p)
      {
        do
          unint64_t v102 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v102 - 1);
        while (v102 != v101);
        unint64_t v103 = __p;
      }
      float64x2_t v157 = v101;
      operator delete(v103);
    }
    unint64_t v28 = v154;
    if (!v154) {
      goto LABEL_197;
    }
    unint64_t v104 = v155;
    unint64_t v30 = v154;
    if (v155 != v154)
    {
      do
      {
        unint64_t v106 = (void *)*--v104;
        unint64_t v105 = v106;
        *unint64_t v104 = 0;
        if (v106) {
          operator delete[](v105);
        }
      }
      while (v104 != v28);
      goto LABEL_195;
    }
LABEL_196:
    int32x2_t v155 = v28;
    operator delete(v30);
    goto LABEL_197;
  }
  while (1)
  {
    uint64_t v36 = (void *)mlir::TypeRange::dereference_iterator(v9, v34);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v36);
    if (mlir::Type::isIntOrIndex((mlir::Type *)&ElementTypeOrSelf))
    {
      __int16 v143 = 257;
      mlir::Operation::emitOpError(v10, v142, (uint64_t)v149);
      if (v149[0])
      {
        int v146 = 3;
        unint64_t v147 = "detected operation with float inputs and integer result type which is not supported";
        uint64_t v148 = 83;
        uint64_t v107 = &v146;
        uint64_t v108 = (char *)v150;
        if (v151 >= v152)
        {
          unint64_t v124 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            int64_t v133 = (char *)&v146 - (unsigned char *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v124, 24);
            uint64_t v108 = (char *)v150;
            uint64_t v107 = (int *)((char *)v150 + v133);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v124, 24);
            uint64_t v107 = &v146;
            uint64_t v108 = (char *)v150;
          }
        }
        uint64_t v109 = &v108[24 * v151];
        long long v110 = *(_OWORD *)v107;
        *((void *)v109 + 2) = *((void *)v107 + 2);
        *(_OWORD *)uint64_t v109 = v110;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      }
      if (!v158) {
        goto LABEL_199;
      }
      unint64_t v111 = (void **)__p;
      if (__p)
      {
        uint64_t v112 = v157;
        long long v113 = __p;
        if (v157 != __p)
        {
          do
            uint64_t v112 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v112 - 1);
          while (v112 != v111);
          long long v113 = __p;
        }
        float64x2_t v157 = v111;
        operator delete(v113);
      }
      unint64_t v28 = v154;
      if (!v154) {
        goto LABEL_197;
      }
      uint64_t v114 = v155;
      unint64_t v30 = v154;
      if (v155 != v154)
      {
        do
        {
          uint64_t v116 = (void *)*--v114;
          uint64_t v115 = v116;
          *uint64_t v114 = 0;
          if (v116) {
            operator delete[](v115);
          }
        }
        while (v114 != v28);
        goto LABEL_195;
      }
      goto LABEL_196;
    }
    if (!mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf) && !mlir::Type::isF32((mlir::Type *)&ElementTypeOrSelf)) {
      break;
    }
    if (((v33 | v7) & 1) == 0)
    {
LABEL_126:
      __int16 v143 = 257;
      mlir::Operation::emitOpError(v10, v142, (uint64_t)v149);
      if (v149[0])
      {
        int v146 = 3;
        unint64_t v147 = "detected operation with integer inputs and float result type which is not supported";
        uint64_t v148 = 83;
        uint64_t v77 = &v146;
        uint64_t v78 = (char *)v150;
        if (v151 >= v152)
        {
          unint64_t v120 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            int64_t v129 = (char *)&v146 - (unsigned char *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v120, 24);
            uint64_t v78 = (char *)v150;
            uint64_t v77 = (int *)((char *)v150 + v129);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v120, 24);
            uint64_t v77 = &v146;
            uint64_t v78 = (char *)v150;
          }
        }
        unint64_t v79 = &v78[24 * v151];
        long long v80 = *(_OWORD *)v77;
        *((void *)v79 + 2) = *((void *)v77 + 2);
        *(_OWORD *)unint64_t v79 = v80;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      }
      if (!v158) {
        goto LABEL_199;
      }
      unint64_t v81 = (void **)__p;
      if (__p)
      {
        uint64_t v82 = v157;
        unint64_t v83 = __p;
        if (v157 != __p)
        {
          do
            uint64_t v82 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v82 - 1);
          while (v82 != v81);
          unint64_t v83 = __p;
        }
        float64x2_t v157 = v81;
        operator delete(v83);
      }
      unint64_t v28 = v154;
      if (!v154) {
        goto LABEL_197;
      }
      long long v84 = v155;
      unint64_t v30 = v154;
      if (v155 != v154)
      {
        do
        {
          unint64_t v86 = (void *)*--v84;
          uint64_t v85 = v86;
          void *v84 = 0;
          if (v86) {
            operator delete[](v85);
          }
        }
        while (v84 != v28);
        goto LABEL_195;
      }
      goto LABEL_196;
    }
    if (v11) {
      goto LABEL_48;
    }
LABEL_49:
    if ((v12 & 1) != 0 && mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
    {
LABEL_51:
      __int16 v143 = 257;
      mlir::Operation::emitOpError(v10, v142, (uint64_t)v149);
      if (v149[0])
      {
        int v146 = 3;
        unint64_t v147 = "detected operation with BF16 inputs and F16 result type which is not supported";
        uint64_t v148 = 78;
        unint64_t v37 = &v146;
        uint64_t v38 = (char *)v150;
        if (v151 >= v152)
        {
          unint64_t v123 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            int64_t v132 = (char *)&v146 - (unsigned char *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v123, 24);
            uint64_t v38 = (char *)v150;
            unint64_t v37 = (int *)((char *)v150 + v132);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v123, 24);
            unint64_t v37 = &v146;
            uint64_t v38 = (char *)v150;
          }
        }
        uint64_t v39 = &v38[24 * v151];
        long long v40 = *(_OWORD *)v37;
        *((void *)v39 + 2) = *((void *)v37 + 2);
        *(_OWORD *)uint64_t v39 = v40;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      }
      if (v158)
      {
        unint64_t v41 = (void **)__p;
        if (__p)
        {
          uint64_t v42 = v157;
          uint64_t v43 = __p;
          if (v157 != __p)
          {
            do
              uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
            while (v42 != v41);
            uint64_t v43 = __p;
          }
          float64x2_t v157 = v41;
          operator delete(v43);
        }
        unint64_t v28 = v154;
        if (v154)
        {
          uint64_t v44 = v155;
          unint64_t v30 = v154;
          if (v155 == v154) {
            goto LABEL_196;
          }
          do
          {
            uint64_t v56 = (void *)*--v44;
            unint64_t v55 = v56;
            *uint64_t v44 = 0;
            if (v56) {
              operator delete[](v55);
            }
          }
          while (v44 != v28);
LABEL_195:
          unint64_t v30 = v154;
          goto LABEL_196;
        }
LABEL_197:
        if (v150 != v153) {
          free(v150);
        }
      }
LABEL_199:
      llvm::deallocate_buffer((llvm *)v144.i64[0], (void *)(8 * v145));
    }
    if (v8 == ++v34) {
      goto LABEL_199;
    }
  }
  mlir::Type::isBF16((mlir::Type *)&ElementTypeOrSelf);
  if ((v11 & 1) == 0) {
    goto LABEL_49;
  }
LABEL_48:
  if (mlir::Type::isBF16((mlir::Type *)&ElementTypeOrSelf)) {
    goto LABEL_161;
  }
  goto LABEL_49;
}

uint64_t mlir::DowngraderInterface::downgradeToVersion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (**(uint64_t (***)(void, void, uint64_t, uint64_t))(a1 + 8))(*(void *)(a1 + 8), *(void *)a1, a2, a3);
}

uint64_t mlir::detail::verifyLoopLikeOpInterface(mlir::detail *this, mlir::Operation *a2)
{
  uint64_t v322 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    uint64_t v3 = *((void *)this + 6);
    char v4 = *(void **)(v3 + 16);
    BOOL v5 = v4 == &mlir::detail::TypeIDResolver<void,void>::id;
    if (v4 == &mlir::detail::TypeIDResolver<void,void>::id) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = *((void *)this + 6);
    }
    if (!v5)
    {
      unint64_t v7 = v6 | v3 & 0xFFFFFFFFFFFFFF00;
      uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::LoopLikeOpInterface>(v7 + 32);
      if (v8) {
        goto LABEL_11;
      }
      uint64_t Values = *(void *)(v7 + 24);
      uint64_t v10 = *((void *)this + 6);
LABEL_10:
      uint64_t v8 = mlir::Dialect::getRegisteredInterfaceForOp<mlir::LoopLikeOpInterface>(Values, v10);
LABEL_11:
      unint64_t v11 = (*(uint64_t (**)(uint64_t, mlir::detail *))(v8 + 64))(v8, this);
      uint64_t v13 = v12;
      if (!v12) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    v310 = *(mlir::detail::OpResultImpl **)(v3 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v310);
    if (Values)
    {
      uint64_t v10 = v3;
      goto LABEL_10;
    }
  }
  uint64_t v8 = 0;
  unint64_t v11 = MEMORY[0x40](0, this);
  uint64_t v13 = v57;
  if (v57) {
LABEL_12:
  }
    mlir::OpOperand::getOperandNumber(v11);
LABEL_13:
  (*(void (**)(uint64_t, mlir::detail *))(v8 + 72))(v8, this);
  if (v13 != v14)
  {
    int64_t v305 = (std::string *)"different number of inits and region iter_args: ";
    LOWORD(v309) = 259;
    mlir::Operation::emitOpError((uint64_t *)this, (const void ***)&v305, (uint64_t)&v310);
    unint64_t v31 = (*(uint64_t (**)(uint64_t, mlir::detail *))(v8 + 64))(v8, this);
    BOOL v33 = v32;
    if (v32) {
      mlir::OpOperand::getOperandNumber(v31);
    }
    if (v310)
    {
      LODWORD(v301) = 5;
      size = v33;
      uint64_t v34 = &v301;
      unint64_t v35 = (char *)v313;
      if (v314 >= v315)
      {
        unint64_t v233 = v314 + 1;
        if (v313 <= &v301 && (char *)v313 + 24 * v314 > (char *)&v301)
        {
          int64_t v272 = (char *)&v301 - (unsigned char *)v313;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v233, 24);
          unint64_t v35 = (char *)v313;
          uint64_t v34 = (std::string **)((char *)v313 + v272);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v233, 24);
          uint64_t v34 = &v301;
          unint64_t v35 = (char *)v313;
        }
      }
      uint64_t v36 = &v35[24 * v314];
      long long v37 = *(_OWORD *)v34;
      *((void *)v36 + 2) = v34[2];
      *(_OWORD *)uint64_t v36 = v37;
      uint64_t v38 = ++v314;
      if (v310)
      {
        LODWORD(v301) = 3;
        size = " != ";
        uint64_t v303 = 4;
        uint64_t v39 = &v301;
        long long v40 = (char *)v313;
        if (v38 >= v315)
        {
          unint64_t v235 = v38 + 1;
          BOOL v236 = (char *)v313 + 24 * v38 > (char *)&v301;
          if (v313 <= &v301 && v236)
          {
            int64_t v274 = (char *)&v301 - (unsigned char *)v313;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v235, 24);
            long long v40 = (char *)v313;
            uint64_t v39 = (std::string **)((char *)v313 + v274);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v235, 24);
            uint64_t v39 = &v301;
            long long v40 = (char *)v313;
          }
        }
        unint64_t v41 = &v40[24 * v314];
        long long v42 = *(_OWORD *)v39;
        *((void *)v41 + 2) = v39[2];
        *(_OWORD *)unint64_t v41 = v42;
        ++v314;
      }
    }
    (*(void (**)(uint64_t, mlir::detail *))(v8 + 72))(v8, this);
    if (v310)
    {
      LODWORD(v301) = 5;
      size = v43;
      uint64_t v44 = &v301;
      uint64_t v45 = (char *)v313;
      if (v314 >= v315)
      {
        unint64_t v234 = v314 + 1;
        if (v313 <= &v301 && (char *)v313 + 24 * v314 > (char *)&v301)
        {
          int64_t v273 = (char *)&v301 - (unsigned char *)v313;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v234, 24);
          uint64_t v45 = (char *)v313;
          uint64_t v44 = (std::string **)((char *)v313 + v273);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v234, 24);
          uint64_t v44 = &v301;
          uint64_t v45 = (char *)v313;
        }
      }
      uint64_t v46 = &v45[24 * v314];
      long long v47 = *(_OWORD *)v44;
      *((void *)v46 + 2) = v44[2];
      *(_OWORD *)uint64_t v46 = v47;
      ++v314;
    }
    uint64_t v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v310);
    if (v310) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v310);
    }
    if (!v321) {
      return v48;
    }
    uint64_t v49 = (void **)__p;
    if (__p)
    {
      uint64_t v50 = v320;
      unint64_t v51 = __p;
      if (v320 != __p)
      {
        do
          uint64_t v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
        while (v50 != v49);
        unint64_t v51 = __p;
      }
      float32x4_t v320 = v49;
      operator delete(v51);
    }
    unint64_t v52 = v317;
    if (v317)
    {
      uint64_t v53 = v318;
      long long v54 = v317;
      if (v318 == v317) {
        goto LABEL_101;
      }
      do
      {
        uint64_t v56 = (void *)*--v53;
        unint64_t v55 = v56;
        *uint64_t v53 = 0;
        if (v56) {
          operator delete[](v55);
        }
      }
      while (v53 != v52);
LABEL_100:
      long long v54 = v317;
LABEL_101:
      unint64_t v318 = v52;
      operator delete(v54);
    }
LABEL_102:
    if (v313 != v316) {
      free(v313);
    }
    return v48;
  }
  (*(void (**)(uint64_t, mlir::detail *))(v8 + 72))(v8, this);
  uint64_t v16 = v15;
  unint64_t v17 = (*(uint64_t (**)(uint64_t, mlir::detail *))(v8 + 80))(v8, this);
  if (!v18)
  {
    mlir::ValueRange::ValueRange((unint64_t *)&v310, 0, 0);
    if (v16 == v311) {
      goto LABEL_18;
    }
LABEL_51:
    int64_t v305 = (std::string *)"different number of region iter_args and yielded values: ";
    LOWORD(v309) = 259;
    mlir::Operation::emitOpError((uint64_t *)this, (const void ***)&v305, (uint64_t)&v310);
    (*(void (**)(uint64_t, mlir::detail *))(v8 + 72))(v8, this);
    if (v310)
    {
      LODWORD(v301) = 5;
      size = v58;
      unint64_t v59 = &v301;
      long long v60 = (char *)v313;
      if (v314 >= v315)
      {
        unint64_t v237 = v314 + 1;
        if (v313 <= &v301 && (char *)v313 + 24 * v314 > (char *)&v301)
        {
          int64_t v275 = (char *)&v301 - (unsigned char *)v313;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v237, 24);
          long long v60 = (char *)v313;
          unint64_t v59 = (std::string **)((char *)v313 + v275);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v237, 24);
          unint64_t v59 = &v301;
          long long v60 = (char *)v313;
        }
      }
      unint64_t v61 = &v60[24 * v314];
      long long v62 = *(_OWORD *)v59;
      *((void *)v61 + 2) = v59[2];
      *(_OWORD *)unint64_t v61 = v62;
      uint64_t v63 = ++v314;
      if (v310)
      {
        LODWORD(v301) = 3;
        size = " != ";
        uint64_t v303 = 4;
        int64_t v64 = &v301;
        uint64_t v65 = (char *)v313;
        if (v63 >= v315)
        {
          unint64_t v239 = v63 + 1;
          BOOL v240 = (char *)v313 + 24 * v63 > (char *)&v301;
          if (v313 <= &v301 && v240)
          {
            int64_t v277 = (char *)&v301 - (unsigned char *)v313;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v239, 24);
            uint64_t v65 = (char *)v313;
            int64_t v64 = (std::string **)((char *)v313 + v277);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v239, 24);
            int64_t v64 = &v301;
            uint64_t v65 = (char *)v313;
          }
        }
        unint64_t v66 = &v65[24 * v314];
        long long v67 = *(_OWORD *)v64;
        *((void *)v66 + 2) = v64[2];
        *(_OWORD *)unint64_t v66 = v67;
        ++v314;
      }
    }
    unint64_t v68 = (*(uint64_t (**)(uint64_t, mlir::detail *))(v8 + 80))(v8, this);
    if (v69)
    {
      unint64_t v70 = v69;
      uint64_t v71 = *(void *)(v68 + 16);
      unsigned int OperandNumber = mlir::OpOperand::getOperandNumber(v68);
      if ((*(unsigned char *)(v71 + 46) & 0x80) != 0) {
        uint64_t v73 = *(void *)(v71 + 72);
      }
      else {
        uint64_t v73 = 0;
      }
      mlir::ValueRange::ValueRange((unint64_t *)&v301, v73 + 32 * OperandNumber, v70);
      if (!v310) {
        goto LABEL_64;
      }
    }
    else
    {
      mlir::ValueRange::ValueRange((unint64_t *)&v301, 0, 0);
      if (!v310) {
        goto LABEL_64;
      }
    }
    LODWORD(v301) = 5;
    long long v74 = &v301;
    uint64_t v75 = (char *)v313;
    if (v314 >= v315)
    {
      unint64_t v238 = v314 + 1;
      if (v313 <= &v301 && (char *)v313 + 24 * v314 > (char *)&v301)
      {
        int64_t v276 = (char *)&v301 - (unsigned char *)v313;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v238, 24);
        uint64_t v75 = (char *)v313;
        long long v74 = (std::string **)((char *)v313 + v276);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v238, 24);
        long long v74 = &v301;
        uint64_t v75 = (char *)v313;
      }
    }
    uint64_t v76 = &v75[24 * v314];
    long long v77 = *(_OWORD *)v74;
    *((void *)v76 + 2) = v74[2];
    *(_OWORD *)uint64_t v76 = v77;
    ++v314;
LABEL_64:
    uint64_t v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v310);
    if (v310) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v310);
    }
    if (!v321) {
      return v48;
    }
    uint64_t v78 = (void **)__p;
    if (__p)
    {
      unint64_t v79 = v320;
      long long v80 = __p;
      if (v320 != __p)
      {
        do
          unint64_t v79 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v79 - 1);
        while (v79 != v78);
        long long v80 = __p;
      }
      float32x4_t v320 = v78;
      operator delete(v80);
    }
    unint64_t v52 = v317;
    if (v317)
    {
      unint64_t v81 = v318;
      long long v54 = v317;
      if (v318 == v317) {
        goto LABEL_101;
      }
      do
      {
        unint64_t v83 = (void *)*--v81;
        uint64_t v82 = v83;
        void *v81 = 0;
        if (v83) {
          operator delete[](v82);
        }
      }
      while (v81 != v52);
      goto LABEL_100;
    }
    goto LABEL_102;
  }
  unint64_t v19 = v18;
  uint64_t v20 = *(void *)(v17 + 16);
  unsigned int v21 = mlir::OpOperand::getOperandNumber(v17);
  if ((*(unsigned char *)(v20 + 46) & 0x80) != 0) {
    uint64_t v22 = *(void *)(v20 + 72);
  }
  else {
    uint64_t v22 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v310, v22 + 32 * v21, v19);
  if (v16 != v311) {
    goto LABEL_51;
  }
LABEL_18:
  (*(void (**)(mlir::detail::OpResultImpl **__return_ptr, uint64_t, mlir::detail *))(v8 + 88))(&v310, v8, this);
  if (v312)
  {
    (*(void (**)(std::string **__return_ptr, uint64_t, mlir::detail *))(v8 + 88))(&v305, v8, this);
    uint64_t v23 = v306;
    (*(void (**)(uint64_t, mlir::detail *))(v8 + 72))(v8, this);
    if (v23 != v24)
    {
      int64_t v305 = (std::string *)"different number of loop results and region iter_args: ";
      LOWORD(v309) = 259;
      mlir::Operation::emitOpError((uint64_t *)this, (const void ***)&v305, (uint64_t)&v310);
      (*(void (**)(std::string *__return_ptr, uint64_t, mlir::detail *))(v8 + 88))(&v300, v8, this);
      if (v310)
      {
        LODWORD(v301) = 5;
        size = (const char *)v300.__r_.__value_.__l.__size_;
        long long v84 = &v301;
        uint64_t v85 = (char *)v313;
        if (v314 >= v315)
        {
          unint64_t v241 = v314 + 1;
          if (v313 <= &v301 && (char *)v313 + 24 * v314 > (char *)&v301)
          {
            int64_t v278 = (char *)&v301 - (unsigned char *)v313;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v241, 24);
            uint64_t v85 = (char *)v313;
            long long v84 = (std::string **)((char *)v313 + v278);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v241, 24);
            long long v84 = &v301;
            uint64_t v85 = (char *)v313;
          }
        }
        unint64_t v86 = &v85[24 * v314];
        long long v87 = *(_OWORD *)v84;
        *((void *)v86 + 2) = v84[2];
        *(_OWORD *)unint64_t v86 = v87;
        uint64_t v88 = ++v314;
        if (v310)
        {
          LODWORD(v301) = 3;
          size = " != ";
          uint64_t v303 = 4;
          uint64_t v89 = &v301;
          long long v90 = (char *)v313;
          if (v88 >= v315)
          {
            unint64_t v243 = v88 + 1;
            BOOL v244 = (char *)v313 + 24 * v88 > (char *)&v301;
            if (v313 <= &v301 && v244)
            {
              int64_t v280 = (char *)&v301 - (unsigned char *)v313;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v243, 24);
              long long v90 = (char *)v313;
              uint64_t v89 = (std::string **)((char *)v313 + v280);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v243, 24);
              uint64_t v89 = &v301;
              long long v90 = (char *)v313;
            }
          }
          float32x4_t v91 = &v90[24 * v314];
          long long v92 = *(_OWORD *)v89;
          *((void *)v91 + 2) = v89[2];
          *(_OWORD *)float32x4_t v91 = v92;
          ++v314;
        }
      }
      (*(void (**)(uint64_t, mlir::detail *))(v8 + 72))(v8, this);
      if (v310)
      {
        LODWORD(v301) = 5;
        size = v93;
        long long v94 = &v301;
        int8x16_t v95 = (char *)v313;
        if (v314 >= v315)
        {
          unint64_t v242 = v314 + 1;
          if (v313 <= &v301 && (char *)v313 + 24 * v314 > (char *)&v301)
          {
            int64_t v279 = (char *)&v301 - (unsigned char *)v313;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v242, 24);
            int8x16_t v95 = (char *)v313;
            long long v94 = (std::string **)((char *)v313 + v279);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v242, 24);
            long long v94 = &v301;
            int8x16_t v95 = (char *)v313;
          }
        }
        uint64_t v96 = &v95[24 * v314];
        long long v97 = *(_OWORD *)v94;
        *((void *)v96 + 2) = v94[2];
        *(_OWORD *)uint64_t v96 = v97;
        ++v314;
      }
      uint64_t v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v310);
      if (v310) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v310);
      }
      if (!v321) {
        return v48;
      }
      unint64_t v98 = (void **)__p;
      if (__p)
      {
        uint64_t v99 = v320;
        long long v100 = __p;
        if (v320 != __p)
        {
          do
            uint64_t v99 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v99 - 1);
          while (v99 != v98);
          long long v100 = __p;
        }
        float32x4_t v320 = v98;
        operator delete(v100);
      }
      unint64_t v52 = v317;
      if (v317)
      {
        uint64_t v101 = v318;
        long long v54 = v317;
        if (v318 == v317) {
          goto LABEL_101;
        }
        do
        {
          unint64_t v103 = (void *)*--v101;
          unint64_t v102 = v103;
          *uint64_t v101 = 0;
          if (v103) {
            operator delete[](v102);
          }
        }
        while (v101 != v52);
        goto LABEL_100;
      }
      goto LABEL_102;
    }
  }
  unint64_t v25 = (*(uint64_t (**)(uint64_t, mlir::detail *))(v8 + 64))(v8, this);
  uint64_t v27 = v26;
  if (v26)
  {
    unsigned int v28 = mlir::OpOperand::getOperandNumber(v25);
    if ((*((unsigned char *)this + 46) & 0x80) != 0) {
      uint64_t v29 = *((void *)this + 9);
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v30 = v28;
  }
  else if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
    uint64_t v29 = *((void *)this + 9);
    uint64_t v30 = *((unsigned int *)this + 17);
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v29 = 0;
  }
  unint64_t v105 = (const void **)(v29 + 32 * v30);
  uint64_t v106 = (*(uint64_t (**)(uint64_t, mlir::detail *))(v8 + 72))(v8, this);
  unint64_t v107 = (*(uint64_t (**)(uint64_t, mlir::detail *))(v8 + 80))(v8, this);
  if (v108)
  {
    unint64_t v109 = v108;
    uint64_t v110 = *(void *)(v107 + 16);
    unsigned int v111 = mlir::OpOperand::getOperandNumber(v107);
    if ((*(unsigned char *)(v110 + 46) & 0x80) != 0) {
      uint64_t v112 = *(void *)(v110 + 72);
    }
    else {
      uint64_t v112 = 0;
    }
    mlir::ValueRange::ValueRange((unint64_t *)&v310, v112 + 32 * v111, v109);
    int64_t v305 = (std::string *)v105;
    uint64_t v306 = 0;
    uint64_t v307 = v106;
    float v308 = v310;
    uint64_t v309 = 0;
    if (!v27)
    {
LABEL_118:
      (*(void (**)(mlir::detail::OpResultImpl **__return_ptr, uint64_t, mlir::detail *))(v8 + 88))(&v310, v8, this);
      if (!v312) {
        return 1;
      }
      uint64_t v121 = (*(uint64_t (**)(uint64_t, mlir::detail *))(v8 + 72))(v8, this);
      uint64_t v123 = v122;
      (*(void (**)(mlir::detail::OpResultImpl **__return_ptr, uint64_t, mlir::detail *))(v8 + 88))(&v310, v8, this);
      if (!v123) {
        return 1;
      }
      uint64_t v124 = 0;
      unint64_t v125 = v310;
      uint64_t v126 = 8 * v123;
      while (1)
      {
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v125, v124);
        if ((*(void *)(*(void *)(v121 + 8 * v124) + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8)) {
          break;
        }
        ++v124;
        uint64_t v48 = 1;
        v126 -= 8;
        if (!v126) {
          return v48;
        }
      }
      uint64_t v196 = NextResultAtOffset;
      std::to_string(&v300, 0);
      LOWORD(v309) = 260;
      int64_t v305 = &v300;
      mlir::Operation::emitOpError((uint64_t *)this, (const void ***)&v305, (uint64_t)&v310);
      if (v310)
      {
        LODWORD(v301) = 3;
        size = "-th region iter_arg and ";
        uint64_t v303 = 24;
        uint64_t v197 = &v301;
        unint64_t v198 = (char *)v313;
        if (v314 >= v315)
        {
          unint64_t v251 = v314 + 1;
          if (v313 <= &v301 && (char *)v313 + 24 * v314 > (char *)&v301)
          {
            int64_t v285 = (char *)&v301 - (unsigned char *)v313;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v251, 24);
            unint64_t v198 = (char *)v313;
            uint64_t v197 = (std::string **)((char *)v313 + v285);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v251, 24);
            uint64_t v197 = &v301;
            unint64_t v198 = (char *)v313;
          }
        }
        unint64_t v199 = &v198[24 * v314];
        long long v200 = *(_OWORD *)v197;
        *((void *)v199 + 2) = v197[2];
        *(_OWORD *)unint64_t v199 = v200;
        uint64_t v201 = ++v314;
        if (v310)
        {
          LODWORD(v301) = 2;
          size = 0;
          double v202 = &v301;
          uint64_t v203 = (char *)v313;
          if (v201 >= v315)
          {
            unint64_t v256 = v201 + 1;
            BOOL v257 = (char *)v313 + 24 * v201 > (char *)&v301;
            if (v313 <= &v301 && v257)
            {
              int64_t v288 = (char *)&v301 - (unsigned char *)v313;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v256, 24);
              uint64_t v203 = (char *)v313;
              double v202 = (std::string **)((char *)v313 + v288);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v256, 24);
              double v202 = &v301;
              uint64_t v203 = (char *)v313;
            }
          }
          unint64_t v204 = &v203[24 * v314];
          long long v205 = *(_OWORD *)v202;
          *((void *)v204 + 2) = v202[2];
          *(_OWORD *)unint64_t v204 = v205;
          uint64_t v206 = ++v314;
          if (v310)
          {
            LODWORD(v301) = 3;
            size = "-th loop result have different type: ";
            uint64_t v303 = 37;
            unint64_t v207 = &v301;
            v208 = (char *)v313;
            if (v206 >= v315)
            {
              unint64_t v260 = v206 + 1;
              BOOL v261 = (char *)v313 + 24 * v206 > (char *)&v301;
              if (v313 <= &v301 && v261)
              {
                int64_t v291 = (char *)&v301 - (unsigned char *)v313;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v260, 24);
                v208 = (char *)v313;
                unint64_t v207 = (std::string **)((char *)v313 + v291);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v260, 24);
                unint64_t v207 = &v301;
                v208 = (char *)v313;
              }
            }
            uint64_t v209 = &v208[24 * v314];
            long long v210 = *(_OWORD *)v207;
            *((void *)v209 + 2) = v207[2];
            *(_OWORD *)uint64_t v209 = v210;
            ++v314;
            if (v310)
            {
              uint64_t v211 = &v301;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v301, *(void *)(*(void *)(v121 + 8 * v124) + 8) & 0xFFFFFFFFFFFFFFF8);
              short float v212 = (char *)v313;
              if (v314 >= v315)
              {
                unint64_t v266 = v314 + 1;
                if (v313 <= &v301 && (char *)v313 + 24 * v314 > (char *)&v301)
                {
                  int64_t v294 = (char *)&v301 - (unsigned char *)v313;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v266, 24);
                  short float v212 = (char *)v313;
                  uint64_t v211 = (std::string **)((char *)v313 + v294);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v266, 24);
                  uint64_t v211 = &v301;
                  short float v212 = (char *)v313;
                }
              }
              v213 = &v212[24 * v314];
              long long v214 = *(_OWORD *)v211;
              *((void *)v213 + 2) = v211[2];
              *(_OWORD *)v213 = v214;
              uint64_t v215 = ++v314;
              if (v310)
              {
                LODWORD(v301) = 3;
                size = " != ";
                uint64_t v303 = 4;
                unint64_t v216 = &v301;
                int16x8_t v217 = (char *)v313;
                if (v215 >= v315)
                {
                  unint64_t v269 = v215 + 1;
                  BOOL v270 = (char *)v313 + 24 * v215 > (char *)&v301;
                  if (v313 <= &v301 && v270)
                  {
                    int64_t v297 = (char *)&v301 - (unsigned char *)v313;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v269, 24);
                    int16x8_t v217 = (char *)v313;
                    unint64_t v216 = (std::string **)((char *)v313 + v297);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v269, 24);
                    unint64_t v216 = &v301;
                    int16x8_t v217 = (char *)v313;
                  }
                }
                int64_t v218 = &v217[24 * v314];
                long long v219 = *(_OWORD *)v216;
                *((void *)v218 + 2) = v216[2];
                *(_OWORD *)int64_t v218 = v219;
                ++v314;
                if (v310)
                {
                  v220 = &v301;
                  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v301, *(void *)(v196 + 8) & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v221 = (char *)v313;
                  if (v314 >= v315)
                  {
                    unint64_t v271 = v314 + 1;
                    if (v313 <= &v301 && (char *)v313 + 24 * v314 > (char *)&v301)
                    {
                      int64_t v298 = (char *)&v301 - (unsigned char *)v313;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v271, 24);
                      uint64_t v221 = (char *)v313;
                      v220 = (std::string **)((char *)v313 + v298);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v271, 24);
                      v220 = &v301;
                      uint64_t v221 = (char *)v313;
                    }
                  }
                  unint64_t v222 = &v221[24 * v314];
                  long long v223 = *(_OWORD *)v220;
                  *((void *)v222 + 2) = v220[2];
                  *(_OWORD *)unint64_t v222 = v223;
                  ++v314;
                }
              }
            }
          }
        }
      }
      uint64_t v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v310);
      if (v310) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v310);
      }
      if (v321)
      {
        unint64_t v224 = (void **)__p;
        if (__p)
        {
          int16x8_t v225 = v320;
          int64_t v226 = __p;
          if (v320 != __p)
          {
            do
              int16x8_t v225 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v225 - 1);
            while (v225 != v224);
            int64_t v226 = __p;
          }
          float32x4_t v320 = v224;
          operator delete(v226);
        }
        unint64_t v227 = v317;
        if (v317)
        {
          v228 = v318;
          uint64_t v229 = v317;
          if (v318 != v317)
          {
            do
            {
              unint64_t v231 = (void *)*--v228;
              uint64_t v230 = v231;
              void *v228 = 0;
              if (v231) {
                operator delete[](v230);
              }
            }
            while (v228 != v227);
            uint64_t v229 = v317;
          }
          unint64_t v318 = v227;
          operator delete(v229);
        }
        if (v313 != v316) {
          free(v313);
        }
      }
      if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v232 = (void *)v300.__r_.__value_.__r.__words[0];
        goto LABEL_218;
      }
      return v48;
    }
  }
  else
  {
    mlir::ValueRange::ValueRange((unint64_t *)&v310, 0, 0);
    int64_t v305 = (std::string *)v105;
    uint64_t v306 = 0;
    uint64_t v307 = v106;
    float v308 = v310;
    uint64_t v309 = 0;
    if (!v27) {
      goto LABEL_118;
    }
  }
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  std::string::size_type v115 = 0;
  uint64_t v116 = (std::string *)v105;
  while (1)
  {
    uint64_t v117 = *((void *)&v116[1].__r_.__value_.__l.__data_ + 4 * v114);
    uint64_t v118 = mlir::ValueRange::dereference_iterator(&v308, v113);
    unint64_t v119 = *(void *)(v117 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v119 != (*(void *)(*(void *)v106 + 8) & 0xFFFFFFFFFFFFFFF8)) {
      break;
    }
    uint64_t v120 = v118;
    if (v119 != (*(void *)(v118 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      std::to_string(&v299, v115);
      __int16 v304 = 260;
      float32x4_t v301 = &v299;
      mlir::Operation::emitOpError((uint64_t *)this, (const void ***)&v301, (uint64_t)&v310);
      if (v310)
      {
        LODWORD(v300.__r_.__value_.__l.__data_) = 3;
        v300.__r_.__value_.__l.__size_ = (std::string::size_type)"-th region iter_arg and ";
        v300.__r_.__value_.__r.__words[2] = 24;
        int32x2_t v163 = &v300;
        int32x2_t v164 = (char *)v313;
        if (v314 >= v315)
        {
          unint64_t v246 = v314 + 1;
          if (v313 <= &v300 && (char *)v313 + 24 * v314 > (char *)&v300)
          {
            int64_t v282 = (char *)&v300 - (unsigned char *)v313;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v246, 24);
            int32x2_t v164 = (char *)v313;
            int32x2_t v163 = (std::string *)((char *)v313 + v282);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v246, 24);
            int32x2_t v163 = &v300;
            int32x2_t v164 = (char *)v313;
          }
        }
        int32x2_t v165 = &v164[24 * v314];
        long long v166 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
        *((void *)v165 + 2) = *((void *)&v163->__r_.__value_.__l + 2);
        *(_OWORD *)int32x2_t v165 = v166;
        uint64_t v167 = ++v314;
        if (v310)
        {
          LODWORD(v300.__r_.__value_.__l.__data_) = 2;
          v300.__r_.__value_.__l.__size_ = v115;
          int32x2_t v168 = &v300;
          unint64_t v169 = (char *)v313;
          if (v167 >= v315)
          {
            unint64_t v249 = v167 + 1;
            BOOL v250 = (char *)v313 + 24 * v167 > (char *)&v300;
            if (v313 <= &v300 && v250)
            {
              int64_t v284 = (char *)&v300 - (unsigned char *)v313;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v249, 24);
              unint64_t v169 = (char *)v313;
              int32x2_t v168 = (std::string *)((char *)v313 + v284);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v249, 24);
              int32x2_t v168 = &v300;
              unint64_t v169 = (char *)v313;
            }
          }
          unint64_t v170 = &v169[24 * v314];
          long long v171 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
          *((void *)v170 + 2) = *((void *)&v168->__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v170 = v171;
          uint64_t v172 = ++v314;
          if (v310)
          {
            LODWORD(v300.__r_.__value_.__l.__data_) = 3;
            v300.__r_.__value_.__l.__size_ = (std::string::size_type)"-th yielded value have different type: ";
            v300.__r_.__value_.__r.__words[2] = 39;
            unint64_t v173 = &v300;
            unint64_t v174 = (char *)v313;
            if (v172 >= v315)
            {
              unint64_t v254 = v172 + 1;
              BOOL v255 = (char *)v313 + 24 * v172 > (char *)&v300;
              if (v313 <= &v300 && v255)
              {
                int64_t v287 = (char *)&v300 - (unsigned char *)v313;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v254, 24);
                unint64_t v174 = (char *)v313;
                unint64_t v173 = (std::string *)((char *)v313 + v287);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v254, 24);
                unint64_t v173 = &v300;
                unint64_t v174 = (char *)v313;
              }
            }
            unint64_t v175 = &v174[24 * v314];
            long long v176 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
            *((void *)v175 + 2) = *((void *)&v173->__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v175 = v176;
            ++v314;
            if (v310)
            {
              unint64_t v177 = &v300;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v300, *(void *)(*(void *)v106 + 8) & 0xFFFFFFFFFFFFFFF8);
              v178 = (char *)v313;
              if (v314 >= v315)
              {
                unint64_t v259 = v314 + 1;
                if (v313 <= &v300 && (char *)v313 + 24 * v314 > (char *)&v300)
                {
                  int64_t v290 = (char *)&v300 - (unsigned char *)v313;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v259, 24);
                  v178 = (char *)v313;
                  unint64_t v177 = (std::string *)((char *)v313 + v290);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v259, 24);
                  unint64_t v177 = &v300;
                  v178 = (char *)v313;
                }
              }
              unint64_t v179 = &v178[24 * v314];
              long long v180 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
              *((void *)v179 + 2) = *((void *)&v177->__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v179 = v180;
              uint64_t v181 = ++v314;
              if (v310)
              {
                LODWORD(v300.__r_.__value_.__l.__data_) = 3;
                v300.__r_.__value_.__l.__size_ = (std::string::size_type)" != ";
                v300.__r_.__value_.__r.__words[2] = 4;
                uint64_t v182 = &v300;
                uint64_t v183 = (char *)v313;
                if (v181 >= v315)
                {
                  unint64_t v264 = v181 + 1;
                  BOOL v265 = (char *)v313 + 24 * v181 > (char *)&v300;
                  if (v313 <= &v300 && v265)
                  {
                    int64_t v293 = (char *)&v300 - (unsigned char *)v313;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v264, 24);
                    uint64_t v183 = (char *)v313;
                    uint64_t v182 = (std::string *)((char *)v313 + v293);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v264, 24);
                    uint64_t v182 = &v300;
                    uint64_t v183 = (char *)v313;
                  }
                }
                uint64_t v184 = &v183[24 * v314];
                long long v185 = *(_OWORD *)&v182->__r_.__value_.__l.__data_;
                *((void *)v184 + 2) = *((void *)&v182->__r_.__value_.__l + 2);
                *(_OWORD *)uint64_t v184 = v185;
                ++v314;
                if (v310)
                {
                  unint64_t v186 = &v300;
                  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v300, *(void *)(v120 + 8) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v187 = (char *)v313;
                  if (v314 >= v315)
                  {
                    unint64_t v268 = v314 + 1;
                    if (v313 <= &v300 && (char *)v313 + 24 * v314 > (char *)&v300)
                    {
                      int64_t v296 = (char *)&v300 - (unsigned char *)v313;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v268, 24);
                      unint64_t v187 = (char *)v313;
                      unint64_t v186 = (std::string *)((char *)v313 + v296);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v268, 24);
                      unint64_t v186 = &v300;
                      unint64_t v187 = (char *)v313;
                    }
                  }
                  long long v188 = &v187[24 * v314];
                  long long v189 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
                  *((void *)v188 + 2) = *((void *)&v186->__r_.__value_.__l + 2);
                  *(_OWORD *)long long v188 = v189;
                  ++v314;
                }
              }
            }
          }
        }
      }
      uint64_t v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v310);
      if (v310) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v310);
      }
      if (v321)
      {
        unint64_t v190 = (void **)__p;
        if (__p)
        {
          v191 = v320;
          unint64_t v192 = __p;
          if (v320 != __p)
          {
            do
              v191 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v191 - 1);
            while (v191 != v190);
            unint64_t v192 = __p;
          }
          float32x4_t v320 = v190;
          operator delete(v192);
        }
        char v158 = v317;
        if (!v317) {
          goto LABEL_208;
        }
        unint64_t v193 = v318;
        int32x2_t v160 = v317;
        if (v318 == v317)
        {
LABEL_207:
          unint64_t v318 = v158;
          operator delete(v160);
LABEL_208:
          if (v313 != v316) {
            free(v313);
          }
          goto LABEL_210;
        }
        do
        {
          uint64_t v195 = (void *)*--v193;
          uint64_t v194 = v195;
          void *v193 = 0;
          if (v195) {
            operator delete[](v194);
          }
        }
        while (v193 != v158);
LABEL_206:
        int32x2_t v160 = v317;
        goto LABEL_207;
      }
      goto LABEL_210;
    }
    ++v115;
    uint64_t v116 = v305;
    uint64_t v114 = v306 + 1;
    uint64_t v106 = v307 + 8;
    ++v306;
    v307 += 8;
    uint64_t v113 = ++v309;
    if (v305 == (std::string *)v105 && v114 == v27) {
      goto LABEL_118;
    }
  }
  std::to_string(&v299, v115);
  __int16 v304 = 260;
  float32x4_t v301 = &v299;
  mlir::Operation::emitOpError((uint64_t *)this, (const void ***)&v301, (uint64_t)&v310);
  if (v310)
  {
    LODWORD(v300.__r_.__value_.__l.__data_) = 3;
    v300.__r_.__value_.__l.__size_ = (std::string::size_type)"-th init and ";
    v300.__r_.__value_.__r.__words[2] = 13;
    int64_t v128 = &v300;
    int64_t v129 = (char *)v313;
    if (v314 >= v315)
    {
      unint64_t v245 = v314 + 1;
      if (v313 <= &v300 && (char *)v313 + 24 * v314 > (char *)&v300)
      {
        int64_t v281 = (char *)&v300 - (unsigned char *)v313;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v245, 24);
        int64_t v129 = (char *)v313;
        int64_t v128 = (std::string *)((char *)v313 + v281);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v245, 24);
        int64_t v128 = &v300;
        int64_t v129 = (char *)v313;
      }
    }
    int64_t v130 = &v129[24 * v314];
    long long v131 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
    *((void *)v130 + 2) = *((void *)&v128->__r_.__value_.__l + 2);
    *(_OWORD *)int64_t v130 = v131;
    uint64_t v132 = ++v314;
    if (v310)
    {
      LODWORD(v300.__r_.__value_.__l.__data_) = 2;
      v300.__r_.__value_.__l.__size_ = v115;
      int64_t v133 = &v300;
      int64_t v134 = (char *)v313;
      if (v132 >= v315)
      {
        unint64_t v247 = v132 + 1;
        BOOL v248 = (char *)v313 + 24 * v132 > (char *)&v300;
        if (v313 <= &v300 && v248)
        {
          int64_t v283 = (char *)&v300 - (unsigned char *)v313;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v247, 24);
          int64_t v134 = (char *)v313;
          int64_t v133 = (std::string *)((char *)v313 + v283);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v247, 24);
          int64_t v133 = &v300;
          int64_t v134 = (char *)v313;
        }
      }
      float64x2_t v135 = &v134[24 * v314];
      long long v136 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
      *((void *)v135 + 2) = *((void *)&v133->__r_.__value_.__l + 2);
      *(_OWORD *)float64x2_t v135 = v136;
      uint64_t v137 = ++v314;
      if (v310)
      {
        LODWORD(v300.__r_.__value_.__l.__data_) = 3;
        v300.__r_.__value_.__l.__size_ = (std::string::size_type)"-th region iter_arg have different type: ";
        v300.__r_.__value_.__r.__words[2] = 41;
        int32x2_t v138 = &v300;
        int32x2_t v139 = (char *)v313;
        if (v137 >= v315)
        {
          unint64_t v252 = v137 + 1;
          BOOL v253 = (char *)v313 + 24 * v137 > (char *)&v300;
          if (v313 <= &v300 && v253)
          {
            int64_t v286 = (char *)&v300 - (unsigned char *)v313;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v252, 24);
            int32x2_t v139 = (char *)v313;
            int32x2_t v138 = (std::string *)((char *)v313 + v286);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v252, 24);
            int32x2_t v138 = &v300;
            int32x2_t v139 = (char *)v313;
          }
        }
        float64x2_t v140 = &v139[24 * v314];
        long long v141 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
        *((void *)v140 + 2) = *((void *)&v138->__r_.__value_.__l + 2);
        *(_OWORD *)float64x2_t v140 = v141;
        ++v314;
        if (v310)
        {
          uint64_t v142 = &v300;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v300, *(void *)(v117 + 8) & 0xFFFFFFFFFFFFFFF8);
          __int16 v143 = (char *)v313;
          if (v314 >= v315)
          {
            unint64_t v258 = v314 + 1;
            if (v313 <= &v300 && (char *)v313 + 24 * v314 > (char *)&v300)
            {
              int64_t v289 = (char *)&v300 - (unsigned char *)v313;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v258, 24);
              __int16 v143 = (char *)v313;
              uint64_t v142 = (std::string *)((char *)v313 + v289);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v258, 24);
              uint64_t v142 = &v300;
              __int16 v143 = (char *)v313;
            }
          }
          int64x2_t v144 = &v143[24 * v314];
          long long v145 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
          *((void *)v144 + 2) = *((void *)&v142->__r_.__value_.__l + 2);
          *(_OWORD *)int64x2_t v144 = v145;
          uint64_t v146 = ++v314;
          if (v310)
          {
            LODWORD(v300.__r_.__value_.__l.__data_) = 3;
            v300.__r_.__value_.__l.__size_ = (std::string::size_type)" != ";
            v300.__r_.__value_.__r.__words[2] = 4;
            unint64_t v147 = &v300;
            uint64_t v148 = (char *)v313;
            if (v146 >= v315)
            {
              unint64_t v262 = v146 + 1;
              BOOL v263 = (char *)v313 + 24 * v146 > (char *)&v300;
              if (v313 <= &v300 && v263)
              {
                int64_t v292 = (char *)&v300 - (unsigned char *)v313;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v262, 24);
                uint64_t v148 = (char *)v313;
                unint64_t v147 = (std::string *)((char *)v313 + v292);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v262, 24);
                unint64_t v147 = &v300;
                uint64_t v148 = (char *)v313;
              }
            }
            int32x2_t v149 = &v148[24 * v314];
            long long v150 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
            *((void *)v149 + 2) = *((void *)&v147->__r_.__value_.__l + 2);
            *(_OWORD *)int32x2_t v149 = v150;
            ++v314;
            if (v310)
            {
              unsigned int v151 = &v300;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v300, *(void *)(*(void *)v106 + 8) & 0xFFFFFFFFFFFFFFF8);
              unsigned int v152 = (char *)v313;
              if (v314 >= v315)
              {
                unint64_t v267 = v314 + 1;
                if (v313 <= &v300 && (char *)v313 + 24 * v314 > (char *)&v300)
                {
                  int64_t v295 = (char *)&v300 - (unsigned char *)v313;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v267, 24);
                  unsigned int v152 = (char *)v313;
                  unsigned int v151 = (std::string *)((char *)v313 + v295);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v313, v316, v267, 24);
                  unsigned int v151 = &v300;
                  unsigned int v152 = (char *)v313;
                }
              }
              int64x2_t v153 = &v152[24 * v314];
              long long v154 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
              *((void *)v153 + 2) = *((void *)&v151->__r_.__value_.__l + 2);
              *(_OWORD *)int64x2_t v153 = v154;
              ++v314;
            }
          }
        }
      }
    }
  }
  uint64_t v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v310);
  if (v310) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v310);
  }
  if (v321)
  {
    int32x2_t v155 = (void **)__p;
    if (__p)
    {
      int32x2_t v156 = v320;
      float64x2_t v157 = __p;
      if (v320 != __p)
      {
        do
          int32x2_t v156 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v156 - 1);
        while (v156 != v155);
        float64x2_t v157 = __p;
      }
      float32x4_t v320 = v155;
      operator delete(v157);
    }
    char v158 = v317;
    if (!v317) {
      goto LABEL_208;
    }
    uint64_t v159 = v318;
    int32x2_t v160 = v317;
    if (v318 == v317) {
      goto LABEL_207;
    }
    do
    {
      int32x2_t v162 = (void *)*--v159;
      float64x2_t v161 = v162;
      *uint64_t v159 = 0;
      if (v162) {
        operator delete[](v161);
      }
    }
    while (v159 != v158);
    goto LABEL_206;
  }
LABEL_210:
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t v232 = (void *)v299.__r_.__value_.__r.__words[0];
LABEL_218:
    operator delete(v232);
  }
  return v48;
}

void *llvm::APFloatBase::IEEEhalf(llvm::APFloatBase *this)
{
  return &llvm::semIEEEhalf;
}

void *llvm::APFloatBase::BFloat(llvm::APFloatBase *this)
{
  return &llvm::semBFloat;
}

void *llvm::APFloatBase::IEEEsingle(llvm::APFloatBase *this)
{
  return &llvm::semIEEEsingle;
}

void *llvm::APFloatBase::IEEEdouble(llvm::APFloatBase *this)
{
  return &llvm::semIEEEdouble;
}

void *llvm::APFloatBase::IEEEquad(llvm::APFloatBase *this)
{
  return &llvm::semIEEEquad;
}

void *llvm::APFloatBase::PPCDoubleDouble(llvm::APFloatBase *this)
{
  return &llvm::semPPCDoubleDouble;
}

void *llvm::APFloatBase::Float8E5M2(llvm::APFloatBase *this)
{
  return &llvm::semFloat8E5M2;
}

void *llvm::APFloatBase::Float8E5M2FNUZ(llvm::APFloatBase *this)
{
  return &llvm::semFloat8E5M2FNUZ;
}

void *llvm::APFloatBase::Float8E4M3FN(llvm::APFloatBase *this)
{
  return &llvm::semFloat8E4M3FN;
}

void *llvm::APFloatBase::Float8E4M3FNUZ(llvm::APFloatBase *this)
{
  return &llvm::semFloat8E4M3FNUZ;
}

void *llvm::APFloatBase::Float8E4M3B11FNUZ(llvm::APFloatBase *this)
{
  return &llvm::semFloat8E4M3B11FNUZ;
}

void *llvm::APFloatBase::FloatTF32(llvm::APFloatBase *this)
{
  return &llvm::semFloatTF32;
}

void *llvm::APFloatBase::x87DoubleExtended(llvm::APFloatBase *this)
{
  return &llvm::semX87DoubleExtended;
}

void *llvm::APFloatBase::Bogus(llvm::APFloatBase *this)
{
  return &llvm::semBogus;
}

uint64_t llvm::APFloatBase::semanticsPrecision(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t llvm::APFloatBase::getSizeInBits(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

void llvm::detail::IEEEFloat::makeNaN(llvm::detail::IEEEFloat *this, int a2, int a3, const llvm::APInt *a4)
{
  p_p = (void **)a4;
  char v7 = *((unsigned char *)this + 20) & 0xF0;
  if (a3) {
    char v8 = 9;
  }
  else {
    char v8 = 1;
  }
  *((unsigned char *)this + 20) = v8 | v7;
  uint64_t v9 = *(_DWORD **)this;
  int v10 = *(_DWORD *)(*(void *)this + 16);
  if (v10 != 1)
  {
    *((_DWORD *)this + 4) = *v9 + 1;
    int v11 = v9[2];
    uint64_t v12 = (llvm::detail::IEEEFloat *)((char *)this + 8);
    if ((v11 - 64) > 0xFFFFFF7F) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v9[5] == 2)
  {
    *((_DWORD *)this + 4) = v9[1] - 1;
    int v11 = v9[2];
    uint64_t v12 = (llvm::detail::IEEEFloat *)((char *)this + 8);
    if ((v11 - 64) > 0xFFFFFF7F) {
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v12 = *(llvm::APInt **)v12;
    goto LABEL_10;
  }
  *((_DWORD *)this + 4) = *v9;
  int v11 = v9[2];
  uint64_t v12 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  if ((v11 - 64) <= 0xFFFFFF7F) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v13 = (const unint64_t *)((v11 + 64) >> 6);
  unsigned int v32 = 1;
  __p = 0;
  if (v10 == 1)
  {
    if (v9[5] == 2)
    {
      *((unsigned char *)this + 20) = v7 | 9;
      unsigned int v30 = v9[2] - 1;
      if (v30 <= 0x40)
      {
        uint64_t v29 = 0;
        goto LABEL_30;
      }
      uint64_t v19 = 0;
      int v20 = 0;
    }
    else
    {
      unsigned int v30 = v11 - 1;
      if ((v11 - 1) <= 0x40)
      {
        if (v11 == 1) {
          unint64_t v15 = 0;
        }
        else {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> ~(v11 + 62);
        }
        uint64_t v29 = (void *)v15;
LABEL_30:
        a2 = 0;
        __p = v29;
        unsigned int v14 = v30;
        unsigned int v32 = v30;
        p_p = &__p;
        if (v13 <= (((unint64_t)v30 + 63) >> 6)) {
          goto LABEL_32;
        }
        goto LABEL_31;
      }
      uint64_t v19 = -1;
      int v20 = 1;
    }
    llvm::APInt::initSlowCase((llvm::APInt *)&v29, v19, v20);
    goto LABEL_30;
  }
  if (a4)
  {
    unsigned int v14 = *((_DWORD *)a4 + 2);
    if (v13 <= (((unint64_t)v14 + 63) >> 6))
    {
LABEL_32:
      if (v14 >= 0x41) {
        p_p = (void **)*p_p;
      }
      unint64_t v21 = ((unint64_t)v14 + 63) >> 6;
      if (v13 >= v21) {
        unint64_t v22 = v21;
      }
      else {
        unint64_t v22 = v13;
      }
      llvm::APInt::tcAssign((uint64_t)v12, (unint64_t *)p_p, (const unint64_t *)v22);
      uint64_t v16 = *(void *)this;
      int v17 = *(_DWORD *)(*(void *)this + 8);
      unsigned int v23 = (v17 - 1) >> 6;
      *((void *)v12 + v23) &= ~(-1 << (v17 - 1));
      unsigned int v24 = v23 + 1;
      if (v23 + 1 != v13)
      {
        unsigned int v25 = v13 + ~v23;
        if (v25 < 0xA)
        {
          unsigned int v26 = v23 + 1;
        }
        else if ((int)v13 - 1 <= v23)
        {
          unsigned int v26 = v23 + 1;
        }
        else
        {
          unsigned int v26 = v24 + (v25 & 0xFFFFFFFC);
          unsigned int v27 = v25 & 0xFFFFFFFC;
          do
          {
            unsigned int v28 = (_OWORD *)((char *)v12 + 8 * v24);
            _OWORD *v28 = 0uLL;
            v28[1] = 0uLL;
            v24 += 4;
            v27 -= 4;
          }
          while (v27);
          if (v25 == (v25 & 0xFFFFFFFC)) {
            goto LABEL_47;
          }
        }
        do
          *((void *)v12 + v26++) = 0;
        while (v13 != v26);
      }
LABEL_47:
      unint64_t v18 = (v17 - 2);
      if (a2) {
        goto LABEL_48;
      }
      goto LABEL_25;
    }
LABEL_31:
    llvm::APInt::tcSet(v12, 0, v13);
    unsigned int v14 = *((_DWORD *)p_p + 2);
    goto LABEL_32;
  }
  llvm::APInt::tcSet(v12, 0, (v11 + 64) >> 6);
  uint64_t v16 = *(void *)this;
  int v17 = *(_DWORD *)(*(void *)this + 8);
  unint64_t v18 = (v17 - 2);
  if (a2)
  {
LABEL_48:
    llvm::APInt::tcClearBit((uint64_t)v12, (unint64_t *)v18);
    if (!llvm::APInt::tcIsZero(v12, v13)) {
      goto LABEL_51;
    }
    unint64_t v18 = (v17 - 3);
    goto LABEL_50;
  }
LABEL_25:
  if (*(_DWORD *)(v16 + 20) != 2) {
LABEL_50:
  }
    llvm::APInt::tcSetBit((uint64_t)v12, (unint64_t *)v18);
LABEL_51:
  if (*(_UNKNOWN **)this == &llvm::semX87DoubleExtended)
  {
    llvm::APInt::tcSetBit((uint64_t)v12, (unint64_t *)(v17 - 1));
    if (v32 < 0x41) {
      return;
    }
  }
  else if (v32 < 0x41)
  {
    return;
  }
  if (__p) {
    operator delete[](__p);
  }
}

uint64_t *llvm::detail::IEEEFloat::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*a1 == *a2)
    {
      uint64_t v4 = *a1;
    }
    else
    {
      if ((*(_DWORD *)(*a1 + 8) - 64) <= 0xFFFFFF7F)
      {
        BOOL v5 = (void *)a1[1];
        if (v5)
        {
          operator delete[](v5);
          uint64_t v4 = *a2;
        }
      }
      *a1 = v4;
      unsigned int v6 = *(_DWORD *)(v4 + 8) + 64;
      if (v6 >= 0x80) {
        a1[1] = (uint64_t)operator new[]((v6 >> 3) & 0x1FFFFFF8);
      }
    }
    char v7 = *((unsigned char *)a1 + 20) & 0xF7 | *((unsigned char *)a2 + 20) & 8;
    *((unsigned char *)a1 + 20) = v7;
    char v8 = *((unsigned char *)a2 + 20);
    int v9 = v8 & 7;
    *((unsigned char *)a1 + 20) = v7 & 0xF8 | v8 & 7;
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    BOOL v11 = (v8 & 6) != 0 && v9 != 3;
    if (v9 == 1 || v11)
    {
      int v13 = *(_DWORD *)(v4 + 8);
      unsigned int v14 = a1 + 1;
      if ((v13 - 64) <= 0xFFFFFF7F) {
        unsigned int v14 = (void *)*v14;
      }
      unsigned int v15 = *(_DWORD *)(*a2 + 8) - 64;
      unint64_t v18 = (unint64_t *)a2[1];
      int v17 = (unint64_t *)(a2 + 1);
      uint64_t v16 = v18;
      if (v15 >= 0xFFFFFF80) {
        uint64_t v19 = v17;
      }
      else {
        uint64_t v19 = v16;
      }
      llvm::APInt::tcAssign((uint64_t)v14, v19, (const unint64_t *)((v13 + 64) >> 6));
    }
  }
  return a1;
}

uint64_t llvm::detail::IEEEFloat::operator=(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)a1 + 8) - 64) <= 0xFFFFFF7F)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    if (v4) {
      operator delete[](v4);
    }
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  char v5 = *(unsigned char *)(a1 + 20) & 0xF8 | *(unsigned char *)(a2 + 20) & 7;
  *(unsigned char *)(a1 + 20) = v5;
  *(unsigned char *)(a1 + 20) = v5 & 0xF7 | *(unsigned char *)(a2 + 20) & 8;
  *(void *)a2 = &llvm::semBogus;
  return a1;
}

BOOL llvm::detail::IEEEFloat::isSignificandAllOnes(llvm::detail::IEEEFloat *this)
{
  uint64_t v2 = *(void *)this;
  unint64_t v1 = (uint64_t *)((char *)this + 8);
  int v3 = *(_DWORD *)(v2 + 8);
  if ((v3 - 64) <= 0xFFFFFF7F) {
    unint64_t v1 = (uint64_t *)*v1;
  }
  unsigned int v4 = v3 + 63;
  uint64_t v5 = (v4 >> 6) - 1;
  if (v4 >> 6 == 1)
  {
    uint64_t v5 = 0;
    return (v1[v5] | (-1 << v4)) == -1;
  }
  else
  {
    uint64_t v6 = (v4 >> 6) - 1;
    char v7 = v1;
    while (1)
    {
      uint64_t v8 = *v7++;
      if (v8 != -1) {
        break;
      }
      if (!--v6) {
        return (v1[v5] | (-1 << v4)) == -1;
      }
    }
    return 0;
  }
}

uint64_t llvm::detail::IEEEFloat::compare(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  unsigned int v3 = *((unsigned __int8 *)this + 20);
  unsigned int v4 = *((unsigned __int8 *)a2 + 20);
  uint64_t result = 3;
  switch(4 * (v3 & 7) + (v4 & 7))
  {
    case 1u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 9u:
    case 0xDu:
      return result;
    case 2u:
    case 3u:
    case 0xBu:
      uint64_t result = ~(v3 >> 2) & 2;
      break;
    case 8u:
    case 0xCu:
    case 0xEu:
      uint64_t result = (v4 >> 2) & 2;
      break;
    case 0xAu:
      int v7 = (v3 >> 3) & 1;
      if (v7 == ((v4 >> 3) & 1))
      {
        int v8 = *((_DWORD *)this + 4) - *((_DWORD *)a2 + 4);
        if (!v8)
        {
          int v9 = (llvm::detail::IEEEFloat *)((char *)this + 8);
          int v10 = *(_DWORD *)(*(void *)this + 8);
          if ((v10 - 64) <= 0xFFFFFF7F) {
            int v9 = *(llvm::APInt **)v9;
          }
          unsigned int v11 = *(_DWORD *)(*(void *)a2 + 8) - 64;
          unsigned int v14 = (const unint64_t *)*((void *)a2 + 1);
          uint64_t v12 = (const unint64_t *)((char *)a2 + 8);
          int v13 = v14;
          if (v11 < 0xFFFFFF80) {
            uint64_t v12 = v13;
          }
          int v8 = llvm::APInt::tcCompare(v9, v12, (const unint64_t *)((v10 + 64) >> 6));
          LOBYTE(v3) = *((unsigned char *)this + 20);
        }
        if (v8 <= 0) {
          uint64_t result = v8 >= 0;
        }
        else {
          uint64_t result = 2;
        }
        if ((v3 & 8) != 0)
        {
          BOOL v15 = v8 <= 0 && v8 >= 0;
          if (result) {
            uint64_t result = v15;
          }
          else {
            uint64_t result = 2;
          }
        }
      }
      else
      {
        uint64_t result = (2 * v7) ^ 2u;
      }
      break;
    case 0xFu:
      uint64_t result = 1;
      break;
    default:
      int v6 = (v3 >> 3) & 1;
      if (v6 == ((v4 >> 3) & 1)) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = (2 * v6) ^ 2u;
      }
      break;
  }
  return result;
}

void llvm::detail::IEEEFloat::~IEEEFloat(llvm::detail::IEEEFloat *this)
{
  if ((*(_DWORD *)(*(void *)this + 8) - 64) <= 0xFFFFFF7F)
  {
    unint64_t v1 = (void *)*((void *)this + 1);
    if (v1) {
      operator delete[](v1);
    }
  }
}

BOOL llvm::detail::IEEEFloat::bitwiseIsEqual(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  if (this == a2) {
    return 1;
  }
  if (*(void *)this != *(void *)a2) {
    return 0;
  }
  int v4 = *((unsigned __int8 *)this + 20);
  int v5 = *((unsigned __int8 *)a2 + 20);
  if ((v4 & 7) != (v5 & 7) || ((v5 ^ v4) & 8) != 0) {
    return 0;
  }
  uint64_t v2 = 1;
  if ((v4 & 7) == 0 || (v4 & 7) == 3) {
    return v2;
  }
  if ((v4 & 6) != 0 && *((_DWORD *)this + 4) != *((_DWORD *)a2 + 4)) {
    return 0;
  }
  int v6 = *(_DWORD *)(*(void *)this + 8);
  unsigned int v7 = v6 - 64;
  int v8 = (void *)((char *)this + 8);
  if ((v6 - 64) <= 0xFFFFFF7F) {
    int v8 = (void *)*v8;
  }
  unsigned int v9 = v6 + 64;
  uint64_t v12 = (char *)*((void *)a2 + 1);
  int v10 = (char *)a2 + 8;
  unsigned int v11 = v12;
  if (v7 < 0xFFFFFF80) {
    int v10 = v11;
  }
  return memcmp(v8, v10, (v9 >> 3) & 0x1FFFFFF8) == 0;
}

uint64_t llvm::detail::IEEEFloat::normalize(uint64_t a1, int a2, int a3)
{
  if ((*(unsigned char *)(a1 + 20) & 6) == 0 || (*(unsigned char *)(a1 + 20) & 7) == 3) {
    return 0;
  }
  int v8 = (llvm::APInt *)(a1 + 8);
  int v9 = *(_DWORD *)(*(void *)a1 + 8);
  int v10 = (llvm::APInt *)(a1 + 8);
  if ((v9 - 64) <= 0xFFFFFF7F) {
    int v10 = *(llvm::APInt **)v8;
  }
  int v11 = llvm::APInt::tcMSB(v10, (const unint64_t *)((v9 + 64) >> 6));
  uint64_t v12 = *(_DWORD **)a1;
  unsigned int v13 = v11 + 1;
  if (v11 == -1)
  {
    unsigned int v13 = 0;
LABEL_11:
    if (v12[4] != 1 || v12[5] != 1 || *(_DWORD *)(a1 + 16) != *v12)
    {
LABEL_42:
      if (a3)
      {
        switch(a2)
        {
          case 1:
            if (a3 == 3) {
              goto LABEL_59;
            }
            if (a3 == 2 && (*(unsigned char *)(a1 + 20) & 7) != 3)
            {
              uint64_t v34 = v8;
              if ((v12[2] - 64) <= 0xFFFFFF7F) {
                uint64_t v34 = *(llvm::APInt **)v8;
              }
              int Bit = llvm::APInt::tcExtractBit(v34, 0);
              uint64_t v12 = *(_DWORD **)a1;
              if (Bit) {
                goto LABEL_59;
              }
            }
            goto LABEL_75;
          case 2:
            if ((*(unsigned char *)(a1 + 20) & 8) != 0) {
              goto LABEL_75;
            }
            goto LABEL_59;
          case 3:
            if ((*(unsigned char *)(a1 + 20) & 8) != 0) {
              goto LABEL_59;
            }
            goto LABEL_75;
          case 4:
            if ((a3 & 0xFFFFFFFE) != 2) {
              goto LABEL_75;
            }
LABEL_59:
            if (!v13) {
              *(_DWORD *)(a1 + 16) = v12[1];
            }
            int v37 = v12[2];
            uint64_t v38 = v8;
            if ((v37 - 64) <= 0xFFFFFF7F) {
              uint64_t v38 = *(llvm::APInt **)v8;
            }
            llvm::APInt::tcAddPart(v38, (unint64_t *)1, (v37 + 64) >> 6);
            int v39 = *(_DWORD *)(*(void *)a1 + 8);
            long long v40 = v8;
            if ((v39 - 64) <= 0xFFFFFF7F) {
              long long v40 = *(llvm::APInt **)v8;
            }
            int v41 = llvm::APInt::tcMSB(v40, (const unint64_t *)((v39 + 64) >> 6));
            uint64_t v12 = *(_DWORD **)a1;
            if (v41 == *(_DWORD *)(*(void *)a1 + 8))
            {
              int v42 = *(_DWORD *)(a1 + 16);
              if (v42 == *v12)
              {
                if ((*(unsigned char *)(a1 + 20) & 8) != 0) {
                  int v25 = 3;
                }
                else {
                  int v25 = 2;
                }
                unsigned int v24 = (_DWORD **)a1;
                goto LABEL_23;
              }
              *(_DWORD *)(a1 + 16) = v42 + 1;
              if ((v41 - 64) <= 0xFFFFFF7F) {
                int v8 = *(llvm::APInt **)v8;
              }
              uint64_t v44 = (unint64_t *)((v41 + 64) >> 6);
              llvm::APInt::tcLSB(v8, v44);
              llvm::APInt::tcShiftRight(v8, v44, 1u);
              uint64_t result = 16;
            }
            else
            {
              unsigned int v13 = v41 + 1;
              if (v12[4] == 1
                && v12[5] == 1
                && *(_DWORD *)(a1 + 16) == *v12
                && llvm::detail::IEEEFloat::isSignificandAllOnes((llvm::detail::IEEEFloat *)a1))
              {
                goto LABEL_22;
              }
LABEL_75:
              if (v13 == v12[2])
              {
                uint64_t result = 16;
              }
              else
              {
                if (!v13)
                {
                  char v43 = *(unsigned char *)(a1 + 20) & 0xF8 | 3;
                  *(unsigned char *)(a1 + 20) = v43;
                  if (v12[5] == 2) {
                    *(unsigned char *)(a1 + 20) = v43 & 0xF3;
                  }
                }
                uint64_t result = 24;
              }
            }
            break;
          default:
            goto LABEL_75;
        }
        return result;
      }
      if (!v13)
      {
        char v36 = *(unsigned char *)(a1 + 20) & 0xF8 | 3;
        *(unsigned char *)(a1 + 20) = v36;
        if (v12[5] == 2)
        {
          uint64_t result = 0;
          *(unsigned char *)(a1 + 20) = v36 & 0xF3;
          return result;
        }
      }
      return 0;
    }
    int v14 = v12[2];
    BOOL v15 = v8;
    if ((v14 - 64) <= 0xFFFFFF7F) {
      BOOL v15 = *(llvm::APInt **)v8;
    }
    unsigned int v16 = v14 + 63;
    uint64_t v17 = (v16 >> 6) - 1;
    if (v16 >> 6 != 1)
    {
      unint64_t v18 = v15;
      uint64_t v19 = (v16 >> 6) - 1;
      while (1)
      {
        uint64_t v20 = *(void *)v18;
        unint64_t v18 = (llvm::APInt *)((char *)v18 + 8);
        if (v20 != -1) {
          goto LABEL_42;
        }
        if (!--v19) {
          goto LABEL_41;
        }
      }
    }
    uint64_t v17 = 0;
LABEL_41:
    if ((*((void *)v15 + v17) | (-1 << v16)) != 0xFFFFFFFFFFFFFFFFLL) {
      goto LABEL_42;
    }
LABEL_22:
    unsigned int v24 = (_DWORD **)a1;
    int v25 = a2;
LABEL_23:
    return llvm::detail::IEEEFloat::handleOverflow(v24, v25);
  }
  int v21 = v12[2];
  int v22 = *(_DWORD *)(a1 + 16);
  int v23 = v22 + v13 - v21;
  if (v23 > *v12) {
    goto LABEL_22;
  }
  int v26 = v12[1];
  if (v23 >= v26) {
    unsigned int v27 = v13 - v21;
  }
  else {
    unsigned int v27 = v26 - v22;
  }
  if ((v27 & 0x80000000) == 0)
  {
    if (v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + v22;
      unsigned int v28 = v8;
      if ((v21 - 64) <= 0xFFFFFF7F) {
        unsigned int v28 = *(llvm::APInt **)v8;
      }
      unsigned int v29 = v21 + 64;
      unsigned int v30 = (unint64_t *)((v21 + 64) >> 6);
      unsigned int v31 = llvm::APInt::tcLSB(v28, v30);
      if (v31 >= v27)
      {
        llvm::APInt::tcShiftRight(v28, (unint64_t *)(v29 >> 6), v27);
        a3 = a3 != 0;
      }
      else
      {
        if (v31 + 1 == v27)
        {
          int v32 = 2;
          int v33 = 3;
        }
        else if ((v29 & 0xFFFFFFC0) >= v27 {
               && llvm::APInt::tcExtractBit(v28, (const unint64_t *)(v27 - 1)))
        }
        {
          int v33 = 3;
          int v32 = 3;
        }
        else
        {
          int v33 = 1;
          int v32 = 1;
        }
        llvm::APInt::tcShiftRight(v28, v30, v27);
        if (a3) {
          a3 = v33;
        }
        else {
          a3 = v32;
        }
      }
      if (v13 >= v27) {
        v13 -= v27;
      }
      else {
        unsigned int v13 = 0;
      }
      uint64_t v12 = *(_DWORD **)a1;
    }
    goto LABEL_11;
  }
  if ((v21 - 64) <= 0xFFFFFF7F) {
    int v8 = *(llvm::APInt **)v8;
  }
  llvm::APInt::tcShiftLeft(v8, (unint64_t *)((v21 + 64) >> 6), -v27);
  uint64_t result = 0;
  *(_DWORD *)(a1 + 16) += v27;
  return result;
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(uint64_t a1, uint64_t a2, llvm::APInt *a3)
{
  *(void *)a1 = a2;
  unsigned int v6 = *(_DWORD *)(a2 + 8) + 64;
  if (v6 >= 0x80) {
    *(void *)(a1 + 8) = operator new[]((v6 >> 3) & 0x1FFFFFF8);
  }
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a1 + 20) & 0xF0 | 2;
  int v7 = *(_DWORD *)(a2 + 8);
  int v8 = (llvm::APInt **)(a1 + 8);
  int v9 = (llvm::APInt *)(a1 + 8);
  if ((v7 - 64) <= 0xFFFFFF7F) {
    int v9 = *v8;
  }
  llvm::APInt::tcSet(v9, 0, (v7 + 64) >> 6);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 8) - 1;
  if ((*(_DWORD *)(*(void *)a1 + 8) - 64) <= 0xFFFFFF7F) {
    int v8 = (llvm::APInt **)*v8;
  }
  *int v8 = a3;
  llvm::detail::IEEEFloat::normalize(a1, 1, 0);
  return a1;
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  unsigned int v4 = *(_DWORD *)(a2 + 8) + 64;
  if (v4 >= 0x80) {
    *(void *)(a1 + 8) = operator new[]((v4 >> 3) & 0x1FFFFFF8);
  }
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a1 + 20) & 0xF0 | 3;
  int v5 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 4) - 1;
  unsigned int v6 = (llvm::APInt *)(a1 + 8);
  if ((v5 - 64) <= 0xFFFFFF7F) {
    unsigned int v6 = *(llvm::APInt **)v6;
  }
  llvm::APInt::tcSet(v6, 0, (v5 + 64) >> 6);
  return a1;
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  uint64_t v4 = *(void *)a2;
  *(void *)this = *(void *)a2;
  unsigned int v5 = *(_DWORD *)(v4 + 8) + 64;
  if (v5 >= 0x80) {
    *((void *)this + 1) = operator new[]((v5 >> 3) & 0x1FFFFFF8);
  }
  char v6 = *((unsigned char *)this + 20) & 0xF7 | *((unsigned char *)a2 + 20) & 8;
  *((unsigned char *)this + 20) = v6;
  char v7 = *((unsigned char *)a2 + 20);
  int v8 = v7 & 7;
  *((unsigned char *)this + 20) = v6 & 0xF8 | v7 & 7;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  BOOL v10 = (v7 & 6) != 0 && v8 != 3;
  if (v8 == 1 || v10)
  {
    int v12 = *(_DWORD *)(v4 + 8);
    unsigned int v13 = (void *)((char *)this + 8);
    if ((v12 - 64) <= 0xFFFFFF7F) {
      unsigned int v13 = (void *)*v13;
    }
    unsigned int v14 = *(_DWORD *)(*(void *)a2 + 8) - 64;
    uint64_t v17 = (unint64_t *)*((void *)a2 + 1);
    unsigned int v16 = (unint64_t *)((char *)a2 + 8);
    BOOL v15 = v17;
    if (v14 >= 0xFFFFFF80) {
      unint64_t v18 = v16;
    }
    else {
      unint64_t v18 = v15;
    }
    llvm::APInt::tcAssign((uint64_t)v13, v18, (const unint64_t *)((v12 + 64) >> 6));
  }
  return this;
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &llvm::semBogus;
  *(void *)uint64_t result = *(void *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  char v2 = *(unsigned char *)(result + 20) & 0xF8 | *(unsigned char *)(a2 + 20) & 7;
  *(unsigned char *)(result + 20) = v2;
  *(unsigned char *)(result + 20) = v2 & 0xF7 | *(unsigned char *)(a2 + 20) & 8;
  *(void *)a2 = &llvm::semBogus;
  return result;
}

uint64_t llvm::detail::IEEEFloat::multiplySignificand(unint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *((_DWORD *)*a1 + 2);
  int v7 = 2 * v6;
  unsigned int v8 = 2 * v6 + 64;
  int v9 = (unint64_t *)(v8 >> 6);
  if (v8 < 0x140)
  {
    BOOL v10 = (llvm::APInt *)&v54;
    int v11 = a1 + 1;
    int v12 = (unint64_t *)(a1 + 1);
    if (v6 - 64 > 0xFFFFFF7F) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v10 = (llvm::APInt *)operator new[]((8 * v9));
  int v11 = a1 + 1;
  int v12 = (unint64_t *)(a1 + 1);
  if (v6 - 64 <= 0xFFFFFF7F) {
LABEL_5:
  }
    int v12 = *v11;
LABEL_6:
  uint64_t v46 = v11;
  if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
    unsigned int v13 = (unint64_t *)(a2 + 8);
  }
  else {
    unsigned int v13 = *(unint64_t **)(a2 + 8);
  }
  llvm::APInt::tcFullMultiply(v10, v12, v13, (const unint64_t *)((v6 + 64) >> 6), (const unint64_t *)((v6 + 64) >> 6));
  p_p = (void *)llvm::APInt::tcMSB(v10, (const unint64_t *)(v8 >> 6));
  unsigned int v15 = p_p + 1;
  int v16 = *(_DWORD *)(a2 + 16) + *((_DWORD *)a1 + 4) + 2;
  *((_DWORD *)a1 + 4) = v16;
  if ((*(unsigned char *)(a3 + 20) & 7) == 3)
  {
    uint64_t v17 = 0;
    *((_DWORD *)a1 + 4) = v16 + ~v6;
    unsigned int v18 = v15 - v6;
    if (v15 <= v6) {
      goto LABEL_54;
    }
    goto LABEL_41;
  }
  uint64_t v45 = v12;
  unsigned int v19 = v7 + 64;
  uint64_t v20 = (long long *)*a1;
  char v43 = (long long *)*a1;
  uint64_t v44 = a1[1];
  if (v7 != v15)
  {
    llvm::APInt::tcShiftLeft(v10, v9, v7 - v15);
    *((_DWORD *)a1 + 4) -= v7 - v15;
    uint64_t v20 = (long long *)*a1;
  }
  uint64_t v21 = *((void *)v20 + 2);
  long long v51 = *v20;
  uint64_t v52 = v21;
  DWORD2(v51) = (2 * v6) | 1;
  int v22 = v10;
  if (v9 == 1) {
    int v22 = *(llvm::APInt **)v10;
  }
  *a1 = (unint64_t *)&v51;
  a1[1] = (unint64_t *)v22;
  *(void *)&v47[1] = *(void *)a3;
  int v23 = *(_DWORD *)(*(void *)&v47[1] + 8);
  unsigned int v24 = v23 + 64;
  unsigned int v8 = v19;
  if ((v23 + 64) >= 0x80)
  {
    p_p = operator new[]((v24 >> 3) & 0x1FFFFFF8);
    __p = p_p;
  }
  char v25 = *(unsigned char *)(a3 + 20);
  int v26 = v25 & 7;
  char v50 = v25 & 0xF;
  int v49 = *(_DWORD *)(a3 + 16);
  BOOL v28 = (v25 & 6) != 0 && v26 != 3;
  int v12 = v45;
  if (v26 == 1 || v28)
  {
    if ((v23 - 64) >= 0xFFFFFF80) {
      p_p = &__p;
    }
    unsigned int v31 = *(unint64_t **)(a3 + 8);
    unsigned int v30 = (unint64_t *)(a3 + 8);
    unsigned int v29 = v31;
    if ((v23 - 64) >= 0xFFFFFF80) {
      int v32 = v30;
    }
    else {
      int v32 = v29;
    }
    llvm::APInt::tcAssign((uint64_t)p_p, v32, (const unint64_t *)(v24 >> 6));
  }
  llvm::detail::IEEEFloat::convert((uint64_t)&v47[1], (uint64_t)&v51, 0, &v53);
  ++v49;
  int v33 = *(_DWORD *)(*(void *)&v47[1] + 8);
  if ((v33 - 64) >= 0xFFFFFF80) {
    uint64_t v34 = (llvm::APInt *)&__p;
  }
  else {
    uint64_t v34 = (llvm::APInt *)__p;
  }
  unint64_t v35 = (unint64_t *)((v33 + 64) >> 6);
  llvm::APInt::tcLSB(v34, v35);
  llvm::APInt::tcShiftRight(v34, v35, 1u);
  uint64_t v17 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)&v47[1], 0);
  if (v9 == 1) {
    *(void *)BOOL v10 = *v46;
  }
  *a1 = (unint64_t *)v43;
  a1[1] = v44;
  unsigned int v15 = llvm::APInt::tcMSB(v10, v9) + 1;
  if ((*(_DWORD *)(*(void *)&v47[1] + 8) - 64) <= 0xFFFFFF7F && __p) {
    operator delete[](__p);
  }
  *((_DWORD *)a1 + 4) += ~v6;
  unsigned int v18 = v15 - v6;
  if (v15 > v6)
  {
LABEL_41:
    unsigned int v36 = v15 + 63;
    int v37 = (unint64_t *)((v15 + 63) >> 6);
    unsigned int v38 = llvm::APInt::tcLSB(v10, v37);
    if (v38 >= v18)
    {
      llvm::APInt::tcShiftRight(v10, (unint64_t *)(v36 >> 6), v18);
      uint64_t v17 = v17 != 0;
    }
    else
    {
      unsigned int v39 = v8;
      if (v38 + 1 == v18)
      {
        unsigned int v40 = 2;
        unsigned int v41 = 3;
      }
      else if ((v36 & 0xFFFFFFC0) >= v18 {
             && llvm::APInt::tcExtractBit(v10, (const unint64_t *)(v18 - 1)))
      }
      {
        unsigned int v41 = 3;
        unsigned int v40 = 3;
      }
      else
      {
        unsigned int v41 = 1;
        unsigned int v40 = 1;
      }
      llvm::APInt::tcShiftRight(v10, v37, v18);
      if (v17) {
        uint64_t v17 = v41;
      }
      else {
        uint64_t v17 = v40;
      }
      unsigned int v8 = v39;
    }
    *((_DWORD *)a1 + 4) += v18;
  }
LABEL_54:
  llvm::APInt::tcAssign((uint64_t)v12, (unint64_t *)v10, (const unint64_t *)((v6 + 64) >> 6));
  if (v8 >= 0x140) {
    operator delete[](v10);
  }
  return v17;
}

uint64_t llvm::detail::IEEEFloat::convert(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  uint64_t v8 = *(void *)a1;
  if ((*(unsigned char *)(a1 + 20) & 7) == 1 && *(_DWORD *)(v8 + 16) != 1)
  {
    int v10 = *(_DWORD *)(v8 + 8);
    int v11 = (llvm::APInt *)(a1 + 8);
    if ((v10 - 64) <= 0xFFFFFF7F) {
      int v11 = *(llvm::APInt **)v11;
    }
    BOOL v65 = llvm::APInt::tcExtractBit(v11, (const unint64_t *)(v10 - 2)) == 0;
    uint64_t v9 = *(void *)a1;
  }
  else
  {
    BOOL v65 = 0;
    uint64_t v9 = *(void *)a1;
  }
  char v12 = 0;
  int v13 = *(_DWORD *)(a2 + 8);
  unsigned int v14 = v13 + 64;
  int v15 = *(_DWORD *)(v9 + 8);
  unsigned int v16 = v15 + 64;
  uint64_t v17 = (const unint64_t *)((v15 + 64) >> 6);
  signed int v18 = v13 - *(_DWORD *)(v8 + 8);
  if ((_UNKNOWN *)a2 == &llvm::semX87DoubleExtended || (_UNKNOWN *)v8 != &llvm::semX87DoubleExtended)
  {
LABEL_16:
    char v64 = v12;
    uint64_t v20 = (unint64_t *)(v14 >> 6);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_19;
  }
  if ((*(unsigned char *)(a1 + 20) & 7) != 1) {
    goto LABEL_18;
  }
  if ((v15 - 64) > 0xFFFFFF7F)
  {
    uint64_t v19 = *(void *)(a1 + 8);
    if (v19 < 0) {
      goto LABEL_14;
    }
LABEL_15:
    char v12 = 1;
    goto LABEL_16;
  }
  uint64_t v19 = **(void **)(a1 + 8);
  if ((v19 & 0x8000000000000000) == 0) {
    goto LABEL_15;
  }
LABEL_14:
  if ((v19 & 0x4000000000000000) == 0) {
    goto LABEL_15;
  }
LABEL_18:
  char v64 = 0;
  uint64_t v20 = (unint64_t *)(v14 >> 6);
  if ((v18 & 0x80000000) == 0) {
    goto LABEL_42;
  }
LABEL_19:
  if ((*(unsigned char *)(a1 + 20) & 6) != 0 && (*(unsigned char *)(a1 + 20) & 7) != 3)
  {
    uint64_t v21 = (llvm::APInt *)(a1 + 8);
    if ((v15 - 64) <= 0xFFFFFF7F) {
      uint64_t v21 = *(llvm::APInt **)v21;
    }
    int v22 = llvm::APInt::tcMSB(v21, (const unint64_t *)(v16 >> 6));
    int v23 = v22 + 1 - *(_DWORD *)(v8 + 8);
    int v24 = *(_DWORD *)(a1 + 16);
    int v25 = *(_DWORD *)(a2 + 4);
    if (v24 + v23 < v25) {
      int v23 = v25 - v24;
    }
    if (v23 <= v18) {
      int v23 = v18;
    }
    if (v23 < 0)
    {
      v18 -= v23;
      *(_DWORD *)(a1 + 16) = v23 + v24;
      if ((v18 & 0x80000000) == 0) {
        goto LABEL_42;
      }
    }
    else if (v22 + 1 <= -v18)
    {
      int v26 = v22 + v18;
      signed int v18 = -v22;
      *(_DWORD *)(a1 + 16) = v26 + v24;
      if ((-v22 & 0x80000000) == 0) {
        goto LABEL_42;
      }
    }
  }
  int v27 = *(unsigned char *)(a1 + 20) & 7;
  if ((*(unsigned char *)(a1 + 20) & 6) != 0 && v27 != 3)
  {
    uint64_t v28 = *(void *)a1;
    goto LABEL_35;
  }
  if (v27 != 1 || (uint64_t v28 = *(void *)a1, *(_DWORD *)(*(void *)a1 + 16) == 1))
  {
LABEL_42:
    int v32 = 0;
    if (v20 <= v17) {
      goto LABEL_63;
    }
LABEL_43:
    int v33 = a4;
    int v34 = v32;
    int v35 = a3;
    unsigned int v36 = (llvm::APInt *)operator new[]((8 * v20));
    llvm::APInt::tcSet(v36, 0, v20);
    int v37 = *(unsigned char *)(a1 + 20) & 7;
    BOOL v39 = (*(unsigned char *)(a1 + 20) & 6) != 0 && v37 != 3;
    if (v37 == 1 || v39)
    {
      unsigned int v40 = (unint64_t *)(a1 + 8);
      if ((*(_DWORD *)(*(void *)a1 + 8) - 64) <= 0xFFFFFF7F) {
        unsigned int v40 = (unint64_t *)*v40;
      }
      llvm::APInt::tcAssign((uint64_t)v36, v40, v17);
    }
    if ((*(_DWORD *)(*(void *)a1 + 8) - 64) <= 0xFFFFFF7F)
    {
      unsigned int v41 = *(void **)(a1 + 8);
      if (v41) {
        operator delete[](v41);
      }
    }
    *(void *)(a1 + 8) = v36;
    a3 = v35;
    int v32 = v34;
    a4 = v33;
    goto LABEL_83;
  }
LABEL_35:
  int v62 = a3;
  unsigned int v29 = (llvm::APInt *)(a1 + 8);
  uint64_t v63 = a4;
  if ((*(_DWORD *)(v28 + 8) - 64) <= 0xFFFFFF7F) {
    unsigned int v29 = *(llvm::APInt **)v29;
  }
  unsigned int v30 = -v18;
  unsigned int v31 = llvm::APInt::tcLSB(v29, (const unint64_t *)(v16 >> 6));
  int v32 = 0;
  if (v31 < -v18)
  {
    if (v31 + 1 == v30)
    {
      int v32 = 2;
    }
    else if ((v16 & 0xFFFFFFC0) >= v30 {
           && llvm::APInt::tcExtractBit(v29, (const unint64_t *)~v18))
    }
    {
      int v32 = 3;
    }
    else
    {
      int v32 = 1;
    }
  }
  llvm::APInt::tcShiftRight(v29, (unint64_t *)(v16 >> 6), -v18);
  a4 = v63;
  a3 = v62;
  if (v20 > v17) {
    goto LABEL_43;
  }
LABEL_63:
  if (v20 == 1 && v17 != 1)
  {
    int v43 = *(unsigned char *)(a1 + 20) & 7;
    BOOL v45 = (*(unsigned char *)(a1 + 20) & 6) != 0 && v43 != 3;
    unsigned int v46 = *(_DWORD *)(*(void *)a1 + 8) - 64;
    if (v43 == 1 || v45)
    {
      int v49 = (void *)(a1 + 8);
      long long v47 = a4;
      if (v46 <= 0xFFFFFF7F) {
        int v49 = (void *)*v49;
      }
      uint64_t v48 = (void *)*v49;
      if (v46 > 0xFFFFFF7F) {
        goto LABEL_82;
      }
    }
    else
    {
      long long v47 = a4;
      uint64_t v48 = 0;
      if (v46 > 0xFFFFFF7F)
      {
LABEL_82:
        *(void *)(a1 + 8) = v48;
        a4 = v47;
        goto LABEL_83;
      }
    }
    char v50 = *(void **)(a1 + 8);
    if (v50) {
      operator delete[](v50);
    }
    goto LABEL_82;
  }
LABEL_83:
  *(void *)a1 = a2;
  unsigned int v51 = *(unsigned __int8 *)(a1 + 20);
  if (v18 >= 1)
  {
    int v52 = v51 & 7;
    BOOL v53 = (v51 & 6) == 0 || v52 == 3;
    BOOL v54 = !v53;
    if (v52 == 1 || v54)
    {
      uint64_t v55 = (llvm::APInt *)(a1 + 8);
      if ((*(_DWORD *)(a2 + 8) - 64) <= 0xFFFFFF7F) {
        uint64_t v55 = *(llvm::APInt **)v55;
      }
      llvm::APInt::tcShiftLeft(v55, v20, v18);
      unsigned int v51 = *(unsigned __int8 *)(a1 + 20);
    }
  }
  int v56 = v51 & 7;
  if ((v51 & 6) != 0 && v56 != 3)
  {
    uint64_t result = llvm::detail::IEEEFloat::normalize(a1, a3, v32);
    *a4 = result != 0;
    return result;
  }
  if ((v51 & 7) == 0)
  {
    if (*(_DWORD *)(*(void *)a1 + 16) == 1)
    {
      llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, (v51 >> 3) & 1, 0);
      *a4 = 1;
      return 16;
    }
    goto LABEL_110;
  }
  if (v56 == 3)
  {
    if (*(_DWORD *)(*(void *)a1 + 20) == 2)
    {
      int v58 = (*(_DWORD *)(v8 + 20) != 2) & (v51 >> 3);
      *a4 = v58;
      if (v58) {
        uint64_t result = 16;
      }
      else {
        uint64_t result = 0;
      }
      *(unsigned char *)(a1 + 20) &= ~8u;
      return result;
    }
LABEL_110:
    uint64_t result = 0;
    *a4 = 0;
    return result;
  }
  if (v56 != 1) {
    goto LABEL_110;
  }
  if (*(_DWORD *)(*(void *)a1 + 16) == 1)
  {
    *a4 = *(_DWORD *)(v8 + 16) != 1;
    llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, (*(unsigned __int8 *)(a1 + 20) >> 3) & 1, 0);
    return v65;
  }
  else
  {
    if (*(_DWORD *)(v8 + 20) == 2 && *(_DWORD *)(*(void *)a1 + 20) != 2) {
      llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, 0, 0);
    }
    if (v32) {
      char v59 = 1;
    }
    else {
      char v59 = v64;
    }
    *a4 = v59;
    if ((v64 & 1) == 0 && *(_UNKNOWN **)a1 == &llvm::semX87DoubleExtended) {
      llvm::APInt::tcSetBit(*(void *)(a1 + 8), (unint64_t *)0x3F);
    }
    if (v65)
    {
      if (*(_DWORD *)(*(void *)a1 + 16) == 1)
      {
        return 1;
      }
      else
      {
        int v60 = *(_DWORD *)(*(void *)a1 + 8);
        unint64_t v61 = (void *)(a1 + 8);
        if ((v60 - 64) <= 0xFFFFFF7F) {
          unint64_t v61 = (void *)*v61;
        }
        llvm::APInt::tcSetBit((uint64_t)v61, (unint64_t *)(v60 - 2));
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
}

uint64_t llvm::detail::IEEEFloat::addOrSubtractSignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2, int a3)
{
  uint64_t v4 = this;
  unsigned int v6 = (int *)((char *)this + 16);
  int v5 = *((_DWORD *)this + 4);
  unsigned __int8 v7 = *((unsigned char *)a2 + 20);
  int v8 = *((_DWORD *)a2 + 4);
  signed int v9 = v5 - v8;
  if ((((((v7 ^ *((unsigned char *)this + 20)) & 8) == 0) ^ a3) & 1) == 0)
  {
    uint64_t v22 = *(void *)a2;
    uint64_t v88 = *(void *)a2;
    unsigned int v23 = *(_DWORD *)(*(void *)a2 + 8) + 64;
    if (v23 >= 0x80)
    {
      this = (llvm::detail::IEEEFloat *)operator new[]((v23 >> 3) & 0x1FFFFFF8);
      __p = this;
    }
    int v24 = v7 & 7;
    char v91 = v7 & 0xF;
    int v90 = v8;
    BOOL v26 = (v7 & 6) != 0 && v24 != 3;
    if (v24 == 1 || v26)
    {
      int v28 = *(_DWORD *)(v22 + 8);
      if ((v28 - 64) >= 0xFFFFFF80) {
        this = (llvm::detail::IEEEFloat *)&__p;
      }
      unsigned int v31 = (unint64_t *)*((void *)a2 + 1);
      unsigned int v30 = (unint64_t *)((char *)a2 + 8);
      unsigned int v29 = v31;
      if ((v28 - 64) >= 0xFFFFFF80) {
        int v32 = v30;
      }
      else {
        int v32 = v29;
      }
      llvm::APInt::tcAssign((uint64_t)this, v32, (const unint64_t *)((v28 + 64) >> 6));
    }
    if (v5 == v8)
    {
      int v33 = 0;
      int v34 = *v6 - v90;
      if (*v6 != v90) {
        goto LABEL_45;
      }
    }
    else
    {
      unsigned int v40 = v9 - 1;
      if (v9 < 1)
      {
        unsigned int v54 = ~v9;
        *((_DWORD *)v4 + 4) += ~v9;
        int v55 = *(_DWORD *)(*(void *)v4 + 8);
        int v56 = (llvm::detail::IEEEFloat *)((char *)v4 + 8);
        if ((v55 - 64) <= 0xFFFFFF7F) {
          int v56 = *(llvm::APInt **)v56;
        }
        uint64_t v57 = &v90;
        int v58 = v55 + 64;
        char v59 = (unint64_t *)((v55 + 64) >> 6);
        unsigned int v60 = llvm::APInt::tcLSB(v56, v59);
        if (v60 >= v54)
        {
          int v33 = 0;
        }
        else if (v60 + 1 == v54)
        {
          int v33 = 2;
        }
        else if ((v58 & 0xFFFFFFC0) >= v54 {
               && llvm::APInt::tcExtractBit(v56, (const unint64_t *)(-2 - v9)))
        }
        {
          int v33 = 3;
        }
        else
        {
          int v33 = 1;
        }
        llvm::APInt::tcShiftRight(v56, v59, ~v9);
        int v73 = *(_DWORD *)(v88 + 8);
        if ((v73 - 64) >= 0xFFFFFF80) {
          p_p = (llvm::APInt *)&__p;
        }
        else {
          p_p = (llvm::APInt *)__p;
        }
        llvm::APInt::tcShiftLeft(p_p, (unint64_t *)((v73 + 64) >> 6), 1u);
      }
      else
      {
        v90 += v40;
        int v41 = *(_DWORD *)(v88 + 8);
        if ((v41 - 64) >= 0xFFFFFF80) {
          int v42 = (llvm::APInt *)&__p;
        }
        else {
          int v42 = (llvm::APInt *)__p;
        }
        int v43 = v41 + 64;
        uint64_t v44 = (unint64_t *)((v41 + 64) >> 6);
        unsigned int v45 = llvm::APInt::tcLSB(v42, v44);
        if (v45 >= v40)
        {
          int v33 = 0;
        }
        else
        {
          unsigned int v46 = (const unint64_t *)(v9 - 2);
          if (v45 == v46)
          {
            int v33 = 2;
          }
          else if ((v43 & 0xFFFFFFC0) >= v40 && llvm::APInt::tcExtractBit(v42, v46))
          {
            int v33 = 3;
          }
          else
          {
            int v33 = 1;
          }
        }
        llvm::APInt::tcShiftRight(v42, v44, v9 - 1);
        uint64_t v71 = (llvm::detail::IEEEFloat *)((char *)v4 + 8);
        int v72 = *(_DWORD *)(*(void *)v4 + 8);
        if ((v72 - 64) <= 0xFFFFFF7F) {
          uint64_t v71 = *(llvm::APInt **)v71;
        }
        llvm::APInt::tcShiftLeft(v71, (unint64_t *)((v72 + 64) >> 6), 1u);
        uint64_t v57 = v6;
      }
      --*v57;
      int v34 = *v6 - v90;
      if (*v6 != v90)
      {
LABEL_45:
        unint64_t v35 = v33 != 0;
        if ((v34 & 0x80000000) == 0)
        {
LABEL_46:
          uint64_t v37 = *(void *)v4;
          unsigned int v36 = (llvm::detail::IEEEFloat *)((char *)v4 + 8);
          int v38 = *(_DWORD *)(v37 + 8);
          if ((v38 - 64) <= 0xFFFFFF7F) {
            unsigned int v36 = *(llvm::APInt **)v36;
          }
          if ((*(_DWORD *)(v88 + 8) - 64) >= 0xFFFFFF80) {
            BOOL v39 = (unint64_t *)&__p;
          }
          else {
            BOOL v39 = (unint64_t *)__p;
          }
          llvm::APInt::tcSubtract(v36, v39, v35, (v38 + 64) >> 6);
          goto LABEL_128;
        }
LABEL_116:
        int v79 = *(_DWORD *)(v88 + 8);
        if ((v79 - 64) >= 0xFFFFFF80) {
          long long v80 = (llvm::APInt *)&__p;
        }
        else {
          long long v80 = (llvm::APInt *)__p;
        }
        unint64_t v81 = (void *)((char *)v4 + 8);
        if ((*(_DWORD *)(*(void *)v4 + 8) - 64) >= 0xFFFFFF80) {
          uint64_t v82 = (unint64_t *)((char *)v4 + 8);
        }
        else {
          uint64_t v82 = (unint64_t *)*((void *)v4 + 1);
        }
        llvm::APInt::tcSubtract(v80, v82, v35, (v79 + 64) >> 6);
        int v83 = *(_DWORD *)(*(void *)v4 + 8);
        if ((v83 - 64) <= 0xFFFFFF7F) {
          unint64_t v81 = (void *)*v81;
        }
        if ((*(_DWORD *)(v88 + 8) - 64) >= 0xFFFFFF80) {
          long long v84 = (unint64_t *)&__p;
        }
        else {
          long long v84 = (unint64_t *)__p;
        }
        llvm::APInt::tcAssign((uint64_t)v81, v84, (const unint64_t *)((v83 + 64) >> 6));
        *((unsigned char *)v4 + 20) ^= 8u;
LABEL_128:
        if (v33 == 3) {
          unsigned int v85 = 1;
        }
        else {
          unsigned int v85 = v33;
        }
        if (v33 == 1) {
          uint64_t v21 = 3;
        }
        else {
          uint64_t v21 = v85;
        }
        if ((*(_DWORD *)(v88 + 8) - 64) > 0xFFFFFF7F) {
          return v21;
        }
        goto LABEL_135;
      }
    }
    uint64_t v75 = (llvm::detail::IEEEFloat *)((char *)v4 + 8);
    int v76 = *(_DWORD *)(*(void *)v4 + 8);
    if ((v76 - 64) <= 0xFFFFFF7F) {
      uint64_t v75 = *(llvm::APInt **)v75;
    }
    if ((*(_DWORD *)(v88 + 8) - 64) >= 0xFFFFFF80) {
      long long v77 = (const unint64_t *)&__p;
    }
    else {
      long long v77 = (const unint64_t *)__p;
    }
    int v78 = llvm::APInt::tcCompare(v75, v77, (const unint64_t *)((v76 + 64) >> 6));
    unint64_t v35 = v33 != 0;
    if ((v78 & 0x80000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_116;
  }
  if (v9 >= 1)
  {
    uint64_t v87 = *(void *)a2;
    int v10 = *(_DWORD *)(*(void *)a2 + 8);
    unsigned int v11 = v10 + 64;
    if ((v10 + 64) >= 0x80)
    {
      this = (llvm::detail::IEEEFloat *)operator new[]((v11 >> 3) & 0x1FFFFFF8);
      __p = this;
    }
    int v12 = v7 & 7;
    char v91 = v7 & 0xF;
    int v90 = v8;
    BOOL v14 = (v7 & 6) != 0 && v12 != 3;
    if (v12 == 1 || v14)
    {
      if ((v10 - 64) >= 0xFFFFFF80) {
        this = (llvm::detail::IEEEFloat *)&__p;
      }
      uint64_t v17 = (unint64_t *)*((void *)a2 + 1);
      unsigned int v16 = (unint64_t *)((char *)a2 + 8);
      int v15 = v17;
      if ((v10 - 64) >= 0xFFFFFF80) {
        signed int v18 = v16;
      }
      else {
        signed int v18 = v15;
      }
      llvm::APInt::tcAssign((uint64_t)this, v18, (const unint64_t *)(v11 >> 6));
      int v8 = v90;
      this = (llvm::detail::IEEEFloat *)__p;
      int v10 = *(_DWORD *)(v87 + 8);
      unsigned int v11 = v10 + 64;
    }
    int v90 = v8 + v9;
    if ((v10 - 64) >= 0xFFFFFF80) {
      uint64_t v19 = (llvm::APInt *)&__p;
    }
    else {
      uint64_t v19 = this;
    }
    unsigned int v20 = llvm::APInt::tcLSB(v19, (const unint64_t *)(v11 >> 6));
    if (v20 >= v9)
    {
      uint64_t v21 = 0;
    }
    else if (v20 + 1 == v9)
    {
      uint64_t v21 = 2;
    }
    else if ((v11 & 0xFFFFFFC0) >= v9 {
           && llvm::APInt::tcExtractBit(v19, (const unint64_t *)(v9 - 1)))
    }
    {
      uint64_t v21 = 3;
    }
    else
    {
      uint64_t v21 = 1;
    }
    llvm::APInt::tcShiftRight(v19, (unint64_t *)(v11 >> 6), v9);
    uint64_t v62 = *(void *)v4;
    unint64_t v61 = (llvm::detail::IEEEFloat *)((char *)v4 + 8);
    int v63 = *(_DWORD *)(v62 + 8);
    if ((v63 - 64) <= 0xFFFFFF7F) {
      unint64_t v61 = *(llvm::APInt **)v61;
    }
    if ((*(_DWORD *)(v87 + 8) - 64) >= 0xFFFFFF80) {
      char v64 = (unint64_t *)&__p;
    }
    else {
      char v64 = (unint64_t *)__p;
    }
    llvm::APInt::tcAdd(v61, v64, 0, (v63 + 64) >> 6);
    if ((*(_DWORD *)(v87 + 8) - 64) > 0xFFFFFF7F) {
      return v21;
    }
LABEL_135:
    if (__p) {
      operator delete[](__p);
    }
    return v21;
  }
  unsigned int v47 = v8 - v5;
  *((_DWORD *)this + 4) = v8;
  int v48 = *(_DWORD *)(*(void *)this + 8);
  int v49 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  char v50 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  if ((v48 - 64) <= 0xFFFFFF7F) {
    char v50 = *(llvm::APInt **)v49;
  }
  int v51 = v48 + 64;
  int v52 = (unint64_t *)((v48 + 64) >> 6);
  unsigned int v53 = llvm::APInt::tcLSB(v50, v52);
  if (v53 >= v47)
  {
    uint64_t v21 = 0;
  }
  else if (v53 + 1 == v47)
  {
    uint64_t v21 = 2;
  }
  else if ((v51 & 0xFFFFFFC0) >= v47 {
         && llvm::APInt::tcExtractBit(v50, (const unint64_t *)~v9))
  }
  {
    uint64_t v21 = 3;
  }
  else
  {
    uint64_t v21 = 1;
  }
  llvm::APInt::tcShiftRight(v50, v52, -v9);
  int v65 = *(_DWORD *)(*(void *)v4 + 8);
  if ((v65 - 64) <= 0xFFFFFF7F) {
    int v49 = *(llvm::APInt **)v49;
  }
  unsigned int v66 = *(_DWORD *)(*(void *)a2 + 8) - 64;
  unint64_t v69 = (unint64_t *)*((void *)a2 + 1);
  unint64_t v68 = (unint64_t *)((char *)a2 + 8);
  long long v67 = v69;
  if (v66 >= 0xFFFFFF80) {
    unint64_t v70 = v68;
  }
  else {
    unint64_t v70 = v67;
  }
  llvm::APInt::tcAdd(v49, v70, 0, (v65 + 64) >> 6);
  return v21;
}

uint64_t llvm::detail::IEEEFloat::multiplySignificand(unint64_t **this, const llvm::detail::IEEEFloat *a2)
{
  unsigned int v3 = this;
  uint64_t v4 = *this;
  signed int v9 = v4;
  int v5 = *((_DWORD *)v4 + 2);
  unsigned int v6 = v5 + 64;
  if ((v5 + 64) >= 0x80)
  {
    this = (unint64_t **)operator new[]((v6 >> 3) & 0x1FFFFFF8);
    __p = this;
  }
  char v12 = 3;
  int v11 = *((_DWORD *)v4 + 1) - 1;
  if ((v5 - 64) >= 0xFFFFFF80) {
    this = (unint64_t **)&__p;
  }
  llvm::APInt::tcSet((llvm::APInt *)this, 0, v6 >> 6);
  uint64_t v7 = llvm::detail::IEEEFloat::multiplySignificand(v3, (uint64_t)a2, (uint64_t)&v9);
  if ((*((_DWORD *)v9 + 2) - 64) <= 0xFFFFFF7F && __p) {
    operator delete[](__p);
  }
  return v7;
}

uint64_t llvm::detail::IEEEFloat::divideSignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  v41[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)this + 8;
  LODWORD(v5) = *(_DWORD *)(*(void *)this + 8);
  if ((v5 - 64) <= 0xFFFFFF7F) {
    uint64_t v4 = *(char **)v4;
  }
  if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
    unsigned int v6 = (char *)a2 + 8;
  }
  else {
    unsigned int v6 = (char *)*((void *)a2 + 1);
  }
  unsigned int v7 = v5 + 64;
  unsigned int v8 = (v5 + 64) >> 6;
  if ((v5 + 64) < 0xC0)
  {
    signed int v9 = (llvm::APInt *)v41;
    int v10 = (llvm::APInt *)&v41[v8];
    if (v5 > 0xFFFFFFBF) {
      goto LABEL_15;
    }
  }
  else
  {
    signed int v9 = (llvm::APInt *)operator new[](16 * v8);
    int v10 = (llvm::APInt *)((char *)v9 + 8 * v8);
  }
  if (v8 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = v8;
  }
  if (v11 < 0x14)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
LABEL_14:
      uint64_t v13 = 8 * i;
      *(void *)((char *)v9 + v13) = *(void *)&v4[8 * i];
      *(void *)((char *)v10 + v13) = *(void *)&v6[8 * i];
      *(void *)&v4[v13] = 0;
    }
    goto LABEL_15;
  }
  uint64_t i = 0;
  signed int v18 = (llvm::APInt *)((char *)v9 + 8 * v11);
  uint64_t v19 = (llvm::APInt *)((char *)v10 + 8 * v11);
  unsigned int v20 = (llvm::APInt *)&v4[8 * v11];
  uint64_t v21 = &v6[8 * v11];
  BOOL v23 = v9 < v20 && v4 < (char *)v18;
  BOOL v25 = v9 < (llvm::APInt *)v21 && v6 < (char *)v18;
  BOOL v27 = v10 < v20 && v4 < (char *)v19;
  BOOL v29 = v10 < (llvm::APInt *)v21 && v6 < (char *)v19;
  BOOL v31 = v4 < v21 && v6 < (char *)v20;
  if (v10 < v18 && v9 < v19) {
    goto LABEL_14;
  }
  if (v23) {
    goto LABEL_14;
  }
  if (v25) {
    goto LABEL_14;
  }
  if (v27) {
    goto LABEL_14;
  }
  if (v29) {
    goto LABEL_14;
  }
  if (v31) {
    goto LABEL_14;
  }
  uint64_t i = v11 & 0x3FFFFFC;
  uint64_t v33 = 16;
  uint64_t v34 = i;
  do
  {
    unint64_t v35 = &v4[v33];
    long long v36 = *(_OWORD *)&v4[v33];
    uint64_t v37 = (_OWORD *)((char *)v9 + v33);
    *(v37 - 1) = *(_OWORD *)&v4[v33 - 16];
    _OWORD *v37 = v36;
    long long v38 = *(_OWORD *)&v6[v33];
    BOOL v39 = (_OWORD *)((char *)v10 + v33);
    *(v39 - 1) = *(_OWORD *)&v6[v33 - 16];
    *BOOL v39 = v38;
    *((_OWORD *)v35 - 1) = 0uLL;
    *(_OWORD *)unint64_t v35 = 0uLL;
    v33 += 32;
    v34 -= 4;
  }
  while (v34);
  if (i != v11) {
    goto LABEL_14;
  }
LABEL_15:
  *((_DWORD *)this + 4) -= *((_DWORD *)a2 + 4);
  unsigned int v14 = v5 + ~llvm::APInt::tcMSB(v10, (const unint64_t *)(v7 >> 6));
  if (v14)
  {
    *((_DWORD *)this + 4) += v14;
    llvm::APInt::tcShiftLeft(v10, (unint64_t *)(v7 >> 6), v14);
  }
  unsigned int v15 = v5 + ~llvm::APInt::tcMSB(v9, (const unint64_t *)(v7 >> 6));
  if (v15)
  {
    *((_DWORD *)this + 4) -= v15;
    llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), v15);
  }
  if ((llvm::APInt::tcCompare(v9, (const unint64_t *)v10, (const unint64_t *)(v7 >> 6)) & 0x80000000) != 0)
  {
    --*((_DWORD *)this + 4);
    llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), 1u);
  }
  while (v5)
  {
    while ((llvm::APInt::tcCompare(v9, (const unint64_t *)v10, (const unint64_t *)(v7 >> 6)) & 0x80000000) == 0)
    {
      llvm::APInt::tcSubtract(v9, (unint64_t *)v10, 0, v7 >> 6);
      int v5 = (unint64_t *)(v5 - 1);
      llvm::APInt::tcSetBit((uint64_t)v4, v5);
      llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), 1u);
      if (!v5) {
        goto LABEL_26;
      }
    }
    LODWORD(v5) = v5 - 1;
    llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), 1u);
  }
LABEL_26:
  int v16 = llvm::APInt::tcCompare(v9, (const unint64_t *)v10, (const unint64_t *)(v7 >> 6));
  if (v16 > 0)
  {
    uint64_t v17 = 3;
    if (v7 < 0xC0) {
      return v17;
    }
    goto LABEL_75;
  }
  if (!v16)
  {
    uint64_t v17 = 2;
    if (v7 < 0xC0) {
      return v17;
    }
    goto LABEL_75;
  }
  uint64_t v17 = !llvm::APInt::tcIsZero(v9, (const unint64_t *)(v7 >> 6));
  if (v7 >= 0xC0) {
LABEL_75:
  }
    operator delete[](v9);
  return v17;
}

uint64_t llvm::detail::IEEEFloat::handleOverflow(_DWORD **a1, int a2)
{
  switch(a2)
  {
    case 1:
    case 4:
      goto LABEL_5;
    case 2:
      char v2 = *((unsigned char *)a1 + 20);
      if ((v2 & 8) != 0) {
        goto LABEL_10;
      }
      goto LABEL_5;
    case 3:
      char v2 = *((unsigned char *)a1 + 20);
      if ((v2 & 8) == 0) {
        goto LABEL_10;
      }
LABEL_5:
      unsigned int v3 = *((unsigned __int8 *)a1 + 20);
      if ((*a1)[4] == 1) {
        llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, (v3 >> 3) & 1, 0);
      }
      else {
        *((unsigned char *)a1 + 20) = v3 & 0xF8;
      }
      return 20;
    default:
      char v2 = *((unsigned char *)a1 + 20);
LABEL_10:
      *((unsigned char *)a1 + 20) = v2 & 0xF8 | 2;
      int v5 = *a1;
      *((_DWORD *)a1 + 4) = **a1;
      unsigned int v6 = v5[2];
      unsigned int v7 = v6 - 64;
      unsigned int v8 = a1 + 1;
      signed int v9 = a1 + 1;
      if (v6 - 64 <= 0xFFFFFF7F) {
        signed int v9 = (void *)*v8;
      }
      unsigned int v10 = v6 + 64;
      unsigned int v11 = v6 - 65;
      if (v6 < 0x41)
      {
        unsigned int v12 = 0;
        unsigned int v13 = v10 >> 6;
        if (!v6) {
          goto LABEL_17;
        }
      }
      else
      {
        memset(v9, 255, 8 * (v11 >> 6) + 8);
        unsigned int v12 = (v11 >> 6) + 1;
        unsigned int v6 = v7 - (v11 & 0xFFFFFFC0);
        unsigned int v13 = v10 >> 6;
        if (!v6) {
          goto LABEL_17;
        }
      }
      v9[v12++] = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
LABEL_17:
      if (v12 < v13) {
        bzero(&v9[v12], 8 * (v13 + ~v12) + 8);
      }
      if (v5[4] == 1 && v5[5] == 1)
      {
        if (v7 <= 0xFFFFFF7F) {
          unsigned int v8 = (void *)*v8;
        }
        llvm::APInt::tcClearBit((uint64_t)v8, 0);
      }
      return 16;
  }
}

uint64_t llvm::detail::IEEEFloat::addOrSubtractSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2, int a3)
{
  unsigned __int8 v4 = *((unsigned char *)this + 20);
  unsigned __int8 v5 = *((unsigned char *)a2 + 20);
  uint64_t result = 0;
  switch(4 * (v4 & 7) + (v5 & 7))
  {
    case 1:
    case 9:
    case 0xD:
      char v9 = v5 & 8 | v4 & 0xF7;
      *((unsigned char *)this + 20) = v9;
      char v10 = *((unsigned char *)a2 + 20);
      int v11 = v10 & 7;
      unsigned __int8 v4 = v9 & 0xF8 | v10 & 7;
      *((unsigned char *)this + 20) = v4;
      *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
      BOOL v13 = (v10 & 6) != 0 && v11 != 3;
      if (v11 == 1 || v13)
      {
        unsigned int v15 = (void *)((char *)this + 8);
        int v16 = *(_DWORD *)(*(void *)this + 8);
        if ((v16 - 64) <= 0xFFFFFF7F) {
          unsigned int v15 = (void *)*v15;
        }
        if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
          uint64_t v17 = (unint64_t *)((char *)a2 + 8);
        }
        else {
          uint64_t v17 = (unint64_t *)*((void *)a2 + 1);
        }
        llvm::APInt::tcAssign((uint64_t)v15, v17, (const unint64_t *)((v16 + 64) >> 6));
        unsigned __int8 v4 = *((unsigned char *)this + 20);
      }
      goto LABEL_18;
    case 2:
    case 3:
    case 0xB:
    case 0xF:
      return result;
    case 4:
    case 5:
    case 6:
    case 7:
LABEL_18:
      if ((v4 & 7) != 1 || *(_DWORD *)(*(void *)this + 16) == 1) {
        goto LABEL_24;
      }
      int v18 = *(_DWORD *)(*(void *)this + 8);
      uint64_t v19 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      unsigned int v20 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      if ((v18 - 64) <= 0xFFFFFF7F) {
        unsigned int v20 = *(llvm::APInt **)v19;
      }
      if (llvm::APInt::tcExtractBit(v20, (const unint64_t *)(v18 - 2)))
      {
LABEL_24:
        if ((*((unsigned char *)a2 + 20) & 7) != 1 || *(_DWORD *)(*(void *)a2 + 16) == 1)
        {
LABEL_34:
          uint64_t result = 0;
        }
        else
        {
          int v21 = *(_DWORD *)(*(void *)a2 + 8);
          int v24 = (llvm::APInt *)*((void *)a2 + 1);
          BOOL v23 = (const llvm::detail::IEEEFloat *)((char *)a2 + 8);
          uint64_t v22 = v24;
          if ((v21 - 64) >= 0xFFFFFF80) {
            BOOL v25 = v23;
          }
          else {
            BOOL v25 = v22;
          }
          uint64_t result = llvm::APInt::tcExtractBit(v25, (const unint64_t *)(v21 - 2)) == 0;
        }
      }
      else if (*(_DWORD *)(*(void *)this + 16) == 1)
      {
        uint64_t result = 1;
      }
      else
      {
        int v38 = *(_DWORD *)(*(void *)this + 8);
        if ((v38 - 64) <= 0xFFFFFF7F) {
          uint64_t v19 = *(llvm::APInt **)v19;
        }
        llvm::APInt::tcSetBit((uint64_t)v19, (unint64_t *)(v38 - 2));
        uint64_t result = 1;
      }
      break;
    case 8:
    case 0xC:
      uint64_t result = 0;
      *((unsigned char *)this + 20) = v4 & 0xF8;
      if (a3 != (*((unsigned char *)a2 + 20) & 8) >> 3) {
        char v26 = 8;
      }
      else {
        char v26 = 0;
      }
      *((unsigned char *)this + 20) = v26 | v4 & 0xF0;
      return result;
    case 0xA:
      return 2;
    case 0xE:
      char v27 = v5 & 8 | v4 & 0xF7;
      *((unsigned char *)this + 20) = v27;
      char v28 = *((unsigned char *)a2 + 20);
      int v29 = v28 & 7;
      char v30 = v27 & 0xF8 | v28 & 7;
      *((unsigned char *)this + 20) = v30;
      *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
      BOOL v32 = (v28 & 6) != 0 && v29 != 3;
      if (v29 == 1 || v32)
      {
        uint64_t v34 = (void *)((char *)this + 8);
        int v35 = *(_DWORD *)(*(void *)this + 8);
        if ((v35 - 64) <= 0xFFFFFF7F) {
          uint64_t v34 = (void *)*v34;
        }
        if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
          long long v36 = (unint64_t *)((char *)a2 + 8);
        }
        else {
          long long v36 = (unint64_t *)*((void *)a2 + 1);
        }
        llvm::APInt::tcAssign((uint64_t)v34, v36, (const unint64_t *)((v35 + 64) >> 6));
        char v30 = *((unsigned char *)this + 20);
      }
      uint64_t result = 0;
      if (a3 != (*((unsigned char *)a2 + 20) & 8) >> 3) {
        char v37 = 8;
      }
      else {
        char v37 = 0;
      }
      *((unsigned char *)this + 20) = v37 | v30 & 0xF7;
      return result;
    default:
      if (((((v5 ^ v4) & 8) == 0) ^ a3)) {
        goto LABEL_34;
      }
      llvm::detail::IEEEFloat::makeNaN(this, 0, 0, 0);
      uint64_t result = 1;
      break;
  }
  return result;
}

BOOL llvm::detail::IEEEFloat::multiplySpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  char v3 = *((unsigned char *)this + 20);
  char v4 = *((unsigned char *)a2 + 20);
  BOOL result = 0;
  switch(4 * (v3 & 7) + (v4 & 7))
  {
    case 1:
    case 9:
    case 0xD:
      char v7 = v4 & 8 | v3 & 0xF7;
      *((unsigned char *)this + 20) = v7;
      char v8 = *((unsigned char *)a2 + 20);
      int v9 = v8 & 7;
      char v10 = v7 & 0xF8 | v8 & 7;
      *((unsigned char *)this + 20) = v10;
      *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
      BOOL v12 = (v8 & 6) != 0 && v9 != 3;
      if (v9 == 1 || v12)
      {
        unsigned int v14 = (void *)((char *)this + 8);
        int v15 = *(_DWORD *)(*(void *)this + 8);
        if ((v15 - 64) <= 0xFFFFFF7F) {
          unsigned int v14 = (void *)*v14;
        }
        if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
          int v16 = (unint64_t *)((char *)a2 + 8);
        }
        else {
          int v16 = (unint64_t *)*((void *)a2 + 1);
        }
        llvm::APInt::tcAssign((uint64_t)v14, v16, (const unint64_t *)((v15 + 64) >> 6));
        char v10 = *((unsigned char *)this + 20);
      }
      char v17 = v10 & 0xF7;
      *((unsigned char *)this + 20) = v17;
      *((unsigned char *)this + 20) = *((unsigned char *)a2 + 20) & 8 ^ v17;
      if ((v17 & 7) != 1) {
        goto LABEL_26;
      }
      goto LABEL_22;
    case 3:
    case 0xC:
      llvm::detail::IEEEFloat::makeNaN(this, 0, 0, 0);
      return 1;
    case 4:
    case 5:
    case 6:
    case 7:
      *((unsigned char *)this + 20) = v4 & 8 ^ v3;
      if ((v3 & 7) != 1) {
        goto LABEL_26;
      }
LABEL_22:
      if (*(_DWORD *)(*(void *)this + 16) == 1) {
        goto LABEL_26;
      }
      int v18 = *(_DWORD *)(*(void *)this + 8);
      uint64_t v19 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      unsigned int v20 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      if ((v18 - 64) <= 0xFFFFFF7F) {
        unsigned int v20 = *(llvm::APInt **)v19;
      }
      if (llvm::APInt::tcExtractBit(v20, (const unint64_t *)(v18 - 2)))
      {
LABEL_26:
        if ((*((unsigned char *)a2 + 20) & 7) == 1 && *(_DWORD *)(*(void *)a2 + 16) != 1)
        {
          int v21 = *(_DWORD *)(*(void *)a2 + 8);
          int v24 = (llvm::APInt *)*((void *)a2 + 1);
          BOOL v23 = (const llvm::detail::IEEEFloat *)((char *)a2 + 8);
          uint64_t v22 = v24;
          if ((v21 - 64) >= 0xFFFFFF80) {
            BOOL v25 = v23;
          }
          else {
            BOOL v25 = v22;
          }
          return llvm::APInt::tcExtractBit(v25, (const unint64_t *)(v21 - 2)) == 0;
        }
        else
        {
          return 0;
        }
      }
      else if (*(_DWORD *)(*(void *)this + 16) == 1)
      {
        return 1;
      }
      else
      {
        int v26 = *(_DWORD *)(*(void *)this + 8);
        if ((v26 - 64) <= 0xFFFFFF7F) {
          uint64_t v19 = *(llvm::APInt **)v19;
        }
        llvm::APInt::tcSetBit((uint64_t)v19, (unint64_t *)(v26 - 2));
        return 1;
      }
    case 0xA:
      return result;
    case 0xB:
    case 0xE:
    case 0xF:
      BOOL result = 0;
      *((unsigned char *)this + 20) = v3 & 0xF8 | 3;
      return result;
    default:
      BOOL result = 0;
      *((unsigned char *)this + 20) = v3 & 0xF8;
      return result;
  }
}

uint64_t llvm::detail::IEEEFloat::divideSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  unsigned int v3 = *((unsigned __int8 *)this + 20);
  char v4 = *((unsigned char *)a2 + 20);
  uint64_t result = 0;
  switch(4 * (v3 & 7) + (v4 & 7))
  {
    case 1u:
    case 9u:
    case 0xDu:
      char v7 = v4 & 8 | v3 & 0xF7;
      *((unsigned char *)this + 20) = v7;
      char v8 = *((unsigned char *)a2 + 20);
      int v9 = v8 & 7;
      char v10 = v7 & 0xF8 | v8 & 7;
      *((unsigned char *)this + 20) = v10;
      *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
      BOOL v12 = (v8 & 6) != 0 && v9 != 3;
      if (v9 == 1 || v12)
      {
        unsigned int v14 = (void *)((char *)this + 8);
        int v15 = *(_DWORD *)(*(void *)this + 8);
        if ((v15 - 64) <= 0xFFFFFF7F) {
          unsigned int v14 = (void *)*v14;
        }
        if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
          int v16 = (unint64_t *)((char *)a2 + 8);
        }
        else {
          int v16 = (unint64_t *)*((void *)a2 + 1);
        }
        llvm::APInt::tcAssign((uint64_t)v14, v16, (const unint64_t *)((v15 + 64) >> 6));
        char v10 = *((unsigned char *)this + 20);
      }
      LOBYTE(v3) = v10 & 0xF7;
      *((unsigned char *)this + 20) = v3;
      char v4 = *((unsigned char *)a2 + 20);
      goto LABEL_19;
    case 2u:
    case 3u:
    case 0xAu:
    case 0xCu:
    case 0xEu:
      return result;
    case 4u:
    case 5u:
    case 6u:
    case 7u:
LABEL_19:
      *((unsigned char *)this + 20) = v4 & 8 ^ v3;
      if ((v3 & 7) != 1 || *(_DWORD *)(*(void *)this + 16) == 1) {
        goto LABEL_25;
      }
      int v17 = *(_DWORD *)(*(void *)this + 8);
      int v18 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      uint64_t v19 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      if ((v17 - 64) <= 0xFFFFFF7F) {
        uint64_t v19 = *(llvm::APInt **)v18;
      }
      if (llvm::APInt::tcExtractBit(v19, (const unint64_t *)(v17 - 2)))
      {
LABEL_25:
        if ((*((unsigned char *)a2 + 20) & 7) == 1 && *(_DWORD *)(*(void *)a2 + 16) != 1)
        {
          int v20 = *(_DWORD *)(*(void *)a2 + 8);
          BOOL v23 = (llvm::APInt *)*((void *)a2 + 1);
          uint64_t v22 = (const llvm::detail::IEEEFloat *)((char *)a2 + 8);
          int v21 = v23;
          if ((v20 - 64) >= 0xFFFFFF80) {
            int v24 = v22;
          }
          else {
            int v24 = v21;
          }
          return llvm::APInt::tcExtractBit(v24, (const unint64_t *)(v20 - 2)) == 0;
        }
        else
        {
          return 0;
        }
      }
      else if (*(_DWORD *)(*(void *)this + 16) == 1)
      {
        return 1;
      }
      else
      {
        int v25 = *(_DWORD *)(*(void *)this + 8);
        if ((v25 - 64) <= 0xFFFFFF7F) {
          int v18 = *(llvm::APInt **)v18;
        }
        llvm::APInt::tcSetBit((uint64_t)v18, (unint64_t *)(v25 - 2));
        return 1;
      }
    case 8u:
      uint64_t result = 0;
      *((unsigned char *)this + 20) = v3 & 0xF8 | 3;
      return result;
    case 0xBu:
      if (*(_DWORD *)(*(void *)this + 16) == 1) {
        llvm::detail::IEEEFloat::makeNaN(this, 0, (v3 >> 3) & 1, 0);
      }
      else {
        *((unsigned char *)this + 20) = v3 & 0xF8;
      }
      return 2;
    default:
      llvm::detail::IEEEFloat::makeNaN(this, 0, 0, 0);
      return 1;
  }
}

BOOL llvm::detail::IEEEFloat::modSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  char v3 = *((unsigned char *)this + 20);
  char v4 = *((unsigned char *)a2 + 20);
  BOOL result = 0;
  switch(4 * (v3 & 7) + (v4 & 7))
  {
    case 1:
    case 9:
    case 0xD:
      char v7 = v4 & 8 | v3 & 0xF7;
      *((unsigned char *)this + 20) = v7;
      char v8 = *((unsigned char *)a2 + 20);
      int v9 = v8 & 7;
      char v3 = v7 & 0xF8 | v8 & 7;
      *((unsigned char *)this + 20) = v3;
      *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
      BOOL v11 = (v8 & 6) != 0 && v9 != 3;
      if (v9 == 1 || v11)
      {
        BOOL v13 = (void *)((char *)this + 8);
        int v14 = *(_DWORD *)(*(void *)this + 8);
        if ((v14 - 64) <= 0xFFFFFF7F) {
          BOOL v13 = (void *)*v13;
        }
        if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
          int v15 = (unint64_t *)((char *)a2 + 8);
        }
        else {
          int v15 = (unint64_t *)*((void *)a2 + 1);
        }
        llvm::APInt::tcAssign((uint64_t)v13, v15, (const unint64_t *)((v14 + 64) >> 6));
        char v3 = *((unsigned char *)this + 20);
      }
      goto LABEL_20;
    case 4:
    case 5:
    case 6:
    case 7:
LABEL_20:
      if ((v3 & 7) != 1 || *(_DWORD *)(*(void *)this + 16) == 1) {
        goto LABEL_26;
      }
      int v16 = *(_DWORD *)(*(void *)this + 8);
      int v17 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      int v18 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      if ((v16 - 64) <= 0xFFFFFF7F) {
        int v18 = *(llvm::APInt **)v17;
      }
      if (llvm::APInt::tcExtractBit(v18, (const unint64_t *)(v16 - 2)))
      {
LABEL_26:
        if ((*((unsigned char *)a2 + 20) & 7) == 1 && *(_DWORD *)(*(void *)a2 + 16) != 1)
        {
          int v19 = *(_DWORD *)(*(void *)a2 + 8);
          uint64_t v22 = (llvm::APInt *)*((void *)a2 + 1);
          int v21 = (const llvm::detail::IEEEFloat *)((char *)a2 + 8);
          int v20 = v22;
          if ((v19 - 64) >= 0xFFFFFF80) {
            BOOL v23 = v21;
          }
          else {
            BOOL v23 = v20;
          }
          return llvm::APInt::tcExtractBit(v23, (const unint64_t *)(v19 - 2)) == 0;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        if (*(_DWORD *)(*(void *)this + 16) != 1)
        {
          int v24 = *(_DWORD *)(*(void *)this + 8);
          if ((v24 - 64) <= 0xFFFFFF7F) {
            int v17 = *(llvm::APInt **)v17;
          }
          llvm::APInt::tcSetBit((uint64_t)v17, (unint64_t *)(v24 - 2));
        }
        return 1;
      }
    case 8:
    case 0xA:
    case 0xC:
    case 0xE:
      return result;
    default:
      llvm::detail::IEEEFloat::makeNaN(this, 0, 0, 0);
      return 1;
  }
}

uint64_t llvm::detail::IEEEFloat::remainderSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  char v3 = *((unsigned char *)this + 20);
  char v4 = *((unsigned char *)a2 + 20);
  uint64_t result = 0;
  switch(4 * (v3 & 7) + (v4 & 7))
  {
    case 1:
    case 9:
    case 0xD:
      char v7 = v4 & 8 | v3 & 0xF7;
      *((unsigned char *)this + 20) = v7;
      char v8 = *((unsigned char *)a2 + 20);
      int v9 = v8 & 7;
      char v3 = v7 & 0xF8 | v8 & 7;
      *((unsigned char *)this + 20) = v3;
      *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
      BOOL v11 = (v8 & 6) != 0 && v9 != 3;
      if (v9 == 1 || v11)
      {
        BOOL v13 = (void *)((char *)this + 8);
        int v14 = *(_DWORD *)(*(void *)this + 8);
        if ((v14 - 64) <= 0xFFFFFF7F) {
          BOOL v13 = (void *)*v13;
        }
        if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
          int v15 = (unint64_t *)((char *)a2 + 8);
        }
        else {
          int v15 = (unint64_t *)*((void *)a2 + 1);
        }
        llvm::APInt::tcAssign((uint64_t)v13, v15, (const unint64_t *)((v14 + 64) >> 6));
        char v3 = *((unsigned char *)this + 20);
      }
      goto LABEL_19;
    case 4:
    case 5:
    case 6:
    case 7:
LABEL_19:
      if ((v3 & 7) != 1 || *(_DWORD *)(*(void *)this + 16) == 1) {
        goto LABEL_25;
      }
      int v16 = *(_DWORD *)(*(void *)this + 8);
      int v17 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      int v18 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      if ((v16 - 64) <= 0xFFFFFF7F) {
        int v18 = *(llvm::APInt **)v17;
      }
      if (llvm::APInt::tcExtractBit(v18, (const unint64_t *)(v16 - 2)))
      {
LABEL_25:
        if ((*((unsigned char *)a2 + 20) & 7) == 1 && *(_DWORD *)(*(void *)a2 + 16) != 1)
        {
          int v19 = *(_DWORD *)(*(void *)a2 + 8);
          uint64_t v22 = (llvm::APInt *)*((void *)a2 + 1);
          int v21 = (const llvm::detail::IEEEFloat *)((char *)a2 + 8);
          int v20 = v22;
          if ((v19 - 64) >= 0xFFFFFF80) {
            BOOL v23 = v21;
          }
          else {
            BOOL v23 = v20;
          }
          uint64_t result = llvm::APInt::tcExtractBit(v23, (const unint64_t *)(v19 - 2)) == 0;
        }
        else
        {
          uint64_t result = 0;
        }
      }
      else if (*(_DWORD *)(*(void *)this + 16) == 1)
      {
        uint64_t result = 1;
      }
      else
      {
        int v24 = *(_DWORD *)(*(void *)this + 8);
        if ((v24 - 64) <= 0xFFFFFF7F) {
          int v17 = *(llvm::APInt **)v17;
        }
        llvm::APInt::tcSetBit((uint64_t)v17, (unint64_t *)(v24 - 2));
        uint64_t result = 1;
      }
      break;
    case 8:
    case 0xC:
    case 0xE:
      return result;
    case 0xA:
      uint64_t result = 2;
      break;
    default:
      llvm::detail::IEEEFloat::makeNaN(this, 0, 0, 0);
      uint64_t result = 1;
      break;
  }
  return result;
}

unsigned char *llvm::detail::IEEEFloat::changeSign(unsigned char *this)
{
  char v1 = this[20];
  if (*(_DWORD *)(*(void *)this + 20) != 2 || (v1 & 5 | 2) != 3) {
    this[20] = v1 ^ 8;
  }
  return this;
}

uint64_t llvm::detail::IEEEFloat::add(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  uint64_t result = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)a2, 0);
  if (result == 2)
  {
    int v7 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)a2, 0);
    uint64_t result = llvm::detail::IEEEFloat::normalize((uint64_t)a1, a3, v7);
  }
  int v8 = a1[20];
  if ((v8 & 7) == 3)
  {
    int v9 = a2[20];
    if ((v9 & 7) != 3 || ((v9 ^ v8) & 8) != 0)
    {
      LOBYTE(v8) = v8 & 0xF7 | (8 * (a3 == 3));
      a1[20] = v8;
    }
    if (*(_DWORD *)(*(void *)a1 + 20) == 2) {
      a1[20] = v8 & 0xF7;
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::subtract(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  uint64_t result = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)a2, 1);
  if (result == 2)
  {
    int v7 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)a2, 1);
    uint64_t result = llvm::detail::IEEEFloat::normalize((uint64_t)a1, a3, v7);
  }
  int v8 = a1[20];
  if ((v8 & 7) == 3)
  {
    int v9 = a2[20];
    if ((v9 & 7) != 3 || ((v9 ^ v8) & 8) == 0)
    {
      LOBYTE(v8) = v8 & 0xF7 | (8 * (a3 == 3));
      a1[20] = v8;
    }
    if (*(_DWORD *)(*(void *)a1 + 20) == 2) {
      a1[20] = v8 & 0xF7;
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::multiply(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  *((unsigned char *)a1 + 20) ^= *((unsigned char *)a2 + 20) & 8;
  uint64_t result = llvm::detail::IEEEFloat::multiplySpecials(a1, a2);
  char v7 = *((unsigned char *)a1 + 20);
  int v8 = v7 & 7;
  if (v8 == 3)
  {
    if (*(_DWORD *)(*(void *)a1 + 20) != 2) {
      return result;
    }
    v7 &= ~8u;
    *((unsigned char *)a1 + 20) = v7;
  }
  if ((v7 & 6) != 0 && v8 != 3)
  {
    int v10 = llvm::detail::IEEEFloat::multiplySignificand((unint64_t **)a1, a2);
    LODWORD(result) = llvm::detail::IEEEFloat::normalize((uint64_t)a1, a3, v10);
    if (v10) {
      return result | 0x10;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::divide(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  *((unsigned char *)a1 + 20) ^= *((unsigned char *)a2 + 20) & 8;
  uint64_t result = llvm::detail::IEEEFloat::divideSpecials(a1, a2);
  char v7 = *((unsigned char *)a1 + 20);
  int v8 = v7 & 7;
  if (v8 == 3)
  {
    if (*(_DWORD *)(*(void *)a1 + 20) != 2) {
      return result;
    }
    v7 &= ~8u;
    *((unsigned char *)a1 + 20) = v7;
  }
  if ((v7 & 6) != 0 && v8 != 3)
  {
    int v10 = llvm::detail::IEEEFloat::divideSignificand(a1, a2);
    LODWORD(result) = llvm::detail::IEEEFloat::normalize((uint64_t)a1, a3, v10);
    if (v10) {
      return result | 0x10;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::remainder(long long **this, unint64_t **a2)
{
  char v4 = *((unsigned char *)this + 20);
  unsigned __int8 v5 = (void **)llvm::detail::IEEEFloat::remainderSpecials((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)a2);
  uint64_t v6 = (uint64_t)v5;
  if (v5 != 2) {
    return v6;
  }
  int v79 = *a2;
  unsigned int v7 = *((_DWORD *)v79 + 2) + 64;
  if (v7 >= 0x80)
  {
    unsigned __int8 v5 = (void **)operator new[]((v7 >> 3) & 0x1FFFFFF8);
    long long v80 = v5;
  }
  char v8 = *((unsigned char *)a2 + 20);
  int v9 = v8 & 7;
  unsigned __int8 v82 = v8 & 0xF;
  int v81 = *((_DWORD *)a2 + 4);
  BOOL v11 = (v8 & 6) != 0 && v9 != 3;
  if (v9 != 1 && !v11)
  {
    int v13 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v79, (const llvm::detail::IEEEFloat *)a2, 0);
    if (v13 == 2) {
      goto LABEL_22;
    }
LABEL_16:
    int v14 = v82;
    if ((v82 & 7) != 3) {
      goto LABEL_28;
    }
    goto LABEL_23;
  }
  int v15 = *((_DWORD *)v79 + 2);
  if ((v15 - 64) < 0xFFFFFF80)
  {
    int v16 = a2[1];
  }
  else
  {
    unsigned __int8 v5 = (void **)&v80;
    int v16 = (unint64_t *)(a2 + 1);
  }
  llvm::APInt::tcAssign((uint64_t)v5, v16, (const unint64_t *)((v15 + 64) >> 6));
  int v13 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v79, (const llvm::detail::IEEEFloat *)a2, 0);
  if (v13 != 2) {
    goto LABEL_16;
  }
LABEL_22:
  int v17 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v79, (const llvm::detail::IEEEFloat *)a2, 0);
  int v13 = llvm::detail::IEEEFloat::normalize((uint64_t)&v79, 1, v17);
  int v14 = v82;
  if ((v82 & 7) != 3) {
    goto LABEL_28;
  }
LABEL_23:
  int v18 = *((unsigned __int8 *)a2 + 20);
  if ((v18 & 7) != 3 || ((v18 ^ v14) & 8) != 0)
  {
    LOBYTE(v14) = v14 & 0xF7;
    unsigned __int8 v82 = v14;
  }
  if (*((_DWORD *)v79 + 5) == 2) {
    unsigned __int8 v82 = v14 & 0xF7;
  }
LABEL_28:
  if (v13)
  {
    int v19 = *a2;
    uint64_t v75 = v19;
    unsigned int v20 = *((_DWORD *)v19 + 2) + 64;
    if (v20 < 0x80) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  llvm::detail::IEEEFloat::mod((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v79);
  int v19 = *a2;
  uint64_t v75 = v19;
  unsigned int v20 = *((_DWORD *)v19 + 2) + 64;
  if (v20 >= 0x80) {
LABEL_30:
  }
    int v76 = operator new[]((v20 >> 3) & 0x1FFFFFF8);
LABEL_31:
  char v21 = *((unsigned char *)a2 + 20);
  int v22 = v21 & 7;
  unsigned __int8 v23 = v78 & 0xF0 | v21 & 0xF;
  unsigned __int8 v78 = v23;
  int v77 = *((_DWORD *)a2 + 4);
  BOOL v25 = (v21 & 6) != 0 && v22 != 3;
  if (v22 == 1 || v25)
  {
    int v26 = *((_DWORD *)v19 + 2);
    if ((v26 - 64) >= 0xFFFFFF80) {
      char v27 = &v76;
    }
    else {
      char v27 = v76;
    }
    char v30 = a2[1];
    int v29 = (unint64_t *)(a2 + 1);
    char v28 = v30;
    if ((v26 - 64) >= 0xFFFFFF80) {
      BOOL v31 = v29;
    }
    else {
      BOOL v31 = v28;
    }
    llvm::APInt::tcAssign((uint64_t)v27, v31, (const unint64_t *)((v26 + 64) >> 6));
    unsigned __int8 v23 = v78;
  }
  unsigned __int8 v78 = v23 & 0xF7;
  char v32 = *((unsigned char *)this + 20);
  *((unsigned char *)this + 20) = v32 & 0xF7;
  char v74 = 0;
  uint64_t v33 = *this;
  uint64_t v34 = *((void *)*this + 2);
  long long v72 = **this;
  uint64_t v73 = v34;
  *(int32x2_t *)&long long v72 = vadd_s32(*(int32x2_t *)&v72, (int32x2_t)0xFFFFFFFF00000001);
  DWORD2(v72) += 2;
  unint64_t v68 = v33;
  unsigned int v35 = *((_DWORD *)v33 + 2) + 64;
  if (v35 >= 0x80) {
    unint64_t v69 = operator new[]((v35 >> 3) & 0x1FFFFFF8);
  }
  int v36 = v32 & 7;
  unsigned __int8 v71 = v71 & 0xF0 | v32 & 7;
  int v70 = *((_DWORD *)this + 4);
  BOOL v38 = (v32 & 6) != 0 && v36 != 3;
  if (v36 == 1 || v38)
  {
    int v39 = *((_DWORD *)v33 + 2);
    if ((v39 - 64) >= 0xFFFFFF80) {
      unsigned int v40 = &v69;
    }
    else {
      unsigned int v40 = v69;
    }
    if ((v39 - 64) >= 0xFFFFFF80) {
      int v41 = (unint64_t *)(this + 1);
    }
    else {
      int v41 = (unint64_t *)this[1];
    }
    llvm::APInt::tcAssign((uint64_t)v40, v41, (const unint64_t *)((v39 + 64) >> 6));
  }
  llvm::detail::IEEEFloat::convert((uint64_t)&v68, (uint64_t)&v72, 1, &v74);
  int v42 = v75;
  char v64 = v75;
  unsigned int v43 = *((_DWORD *)v75 + 2) + 64;
  if (v43 >= 0x80) {
    __p = operator new[]((v43 >> 3) & 0x1FFFFFF8);
  }
  int v44 = v78 & 7;
  unsigned __int8 v67 = v67 & 0xF0 | v78 & 0xF;
  int v66 = v77;
  BOOL v46 = (v78 & 6) != 0 && v44 != 3;
  if (v44 == 1 || v46)
  {
    int v47 = *((_DWORD *)v42 + 2);
    if ((v47 - 64) >= 0xFFFFFF80) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v47 - 64) >= 0xFFFFFF80) {
      int v49 = (unint64_t *)&v76;
    }
    else {
      int v49 = (unint64_t *)v76;
    }
    llvm::APInt::tcAssign((uint64_t)p_p, v49, (const unint64_t *)((v47 + 64) >> 6));
  }
  llvm::detail::IEEEFloat::convert((uint64_t)&v64, (uint64_t)&v72, 1, &v74);
  uint64_t v6 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v68, (const llvm::detail::IEEEFloat *)&v68, 0);
  if (v6 == 2)
  {
    int v50 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v68, (const llvm::detail::IEEEFloat *)&v68, 0);
    uint64_t v6 = llvm::detail::IEEEFloat::normalize((uint64_t)&v68, 1, v50);
  }
  if ((v71 & 7) == 3 && *((_DWORD *)v68 + 5) == 2) {
    v71 &= ~8u;
  }
  if (llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v68, (const llvm::detail::IEEEFloat *)&v64) == 2)
  {
    if (llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v75, 1) == 2)
    {
      int v51 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v75, 1);
      llvm::detail::IEEEFloat::normalize((uint64_t)this, 1, v51);
    }
    int v52 = *((unsigned __int8 *)this + 20);
    if ((v52 & 7) == 3)
    {
      if ((v78 & 7) != 3 || ((v78 ^ v52) & 8) == 0)
      {
        LOBYTE(v52) = v52 & 0xF7;
        *((unsigned char *)this + 20) = v52;
      }
      if (*((_DWORD *)*this + 5) == 2) {
        *((unsigned char *)this + 20) = v52 & 0xF7;
      }
    }
    if (llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v68, (const llvm::detail::IEEEFloat *)&v64, 1) == 2)
    {
      int v53 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v68, (const llvm::detail::IEEEFloat *)&v64, 1);
      llvm::detail::IEEEFloat::normalize((uint64_t)&v68, 1, v53);
    }
    char v54 = v71;
    if ((v71 & 7) == 3)
    {
      if ((v67 & 7) != 3 || ((v67 ^ v71) & 8) == 0)
      {
        char v54 = v71 & 0xF7;
        v71 &= ~8u;
      }
      if (*((_DWORD *)v68 + 5) == 2) {
        unsigned __int8 v71 = v54 & 0xF7;
      }
    }
    uint64_t v6 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v68, (const llvm::detail::IEEEFloat *)&v64, 1);
    if (v6 == 2)
    {
      int v55 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v68, (const llvm::detail::IEEEFloat *)&v64, 1);
      uint64_t v6 = llvm::detail::IEEEFloat::normalize((uint64_t)&v68, 1, v55);
    }
    char v56 = v71;
    if ((v71 & 7) == 3)
    {
      if ((v67 & 7) != 3 || ((v67 ^ v71) & 8) == 0)
      {
        char v56 = v71 & 0xF7;
        v71 &= ~8u;
      }
      if (*((_DWORD *)v68 + 5) == 2) {
        unsigned __int8 v71 = v56 & 0xF7;
      }
    }
    if (llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v68, (const llvm::detail::IEEEFloat *)&v64)- 1 <= 1)
    {
      uint64_t v6 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v75, 1);
      if (v6 == 2)
      {
        int v57 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v75, 1);
        uint64_t v6 = llvm::detail::IEEEFloat::normalize((uint64_t)this, 1, v57);
      }
      int v58 = *((unsigned __int8 *)this + 20);
      if ((v58 & 7) == 3)
      {
        if ((v78 & 7) != 3 || ((v78 ^ v58) & 8) == 0)
        {
          LOBYTE(v58) = v58 & 0xF7;
          *((unsigned char *)this + 20) = v58;
        }
        if (*((_DWORD *)*this + 5) == 2) {
          *((unsigned char *)this + 20) = v58 & 0xF7;
        }
      }
    }
  }
  char v59 = v4 & 8;
  char v60 = *((unsigned char *)this + 20);
  if ((v60 & 7) == 3)
  {
    char v61 = v60 & 0xF7;
    char v62 = v61 | v59;
    *((unsigned char *)this + 20) = v62;
    if (*((_DWORD *)*this + 5) == 2) {
      char v62 = v61;
    }
    *((unsigned char *)this + 20) = v62;
    if ((*((_DWORD *)v64 + 2) - 64) > 0xFFFFFF7F) {
      goto LABEL_127;
    }
    goto LABEL_125;
  }
  *((unsigned char *)this + 20) = v60 ^ v59;
  if ((*((_DWORD *)v64 + 2) - 64) <= 0xFFFFFF7F)
  {
LABEL_125:
    if (__p) {
      operator delete[](__p);
    }
  }
LABEL_127:
  if ((*((_DWORD *)v68 + 2) - 64) <= 0xFFFFFF7F && v69) {
    operator delete[](v69);
  }
  if ((*((_DWORD *)v75 + 2) - 64) <= 0xFFFFFF7F && v76) {
    operator delete[](v76);
  }
  if ((*((_DWORD *)v79 + 2) - 64) <= 0xFFFFFF7F && v80) {
    operator delete[](v80);
  }
  return v6;
}

uint64_t llvm::detail::IEEEFloat::mod(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  uint64_t v5 = llvm::detail::IEEEFloat::modSpecials(this, a2);
  char v6 = *((unsigned char *)this + 20);
  BOOL v7 = (v6 & 6) == 0 || (v6 & 7) == 3;
  if (v7 || (*((unsigned char *)a2 + 20) & 6) == 0 || (*((unsigned char *)a2 + 20) & 7) == 3)
  {
    LOBYTE(v8) = *((unsigned char *)this + 20);
    goto LABEL_7;
  }
  BOOL v11 = (llvm::APInt **)((char *)this + 8);
  BOOL v12 = (unint64_t **)((char *)a2 + 8);
  while (1)
  {
    int v13 = *((_DWORD *)this + 4);
    int v14 = *((_DWORD *)a2 + 4);
    int v15 = v13 - v14;
    if (v13 == v14)
    {
      int v16 = *(_DWORD *)(*(void *)this + 8);
      int v17 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      if ((v16 - 64) <= 0xFFFFFF7F) {
        int v17 = *v11;
      }
      if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
        int v18 = (const unint64_t *)((char *)a2 + 8);
      }
      else {
        int v18 = (const unint64_t *)*((void *)a2 + 1);
      }
      int v15 = llvm::APInt::tcCompare(v17, v18, (const unint64_t *)((v16 + 64) >> 6));
    }
    if (v15 < 0) {
      break;
    }
    int v19 = llvm::detail::ilogb(this, v4);
    int v21 = llvm::detail::ilogb(a2, v20);
    int v22 = *(_DWORD **)a2;
    int v70 = v22;
    unsigned int v23 = v22[2] + 64;
    if (v23 >= 0x80) {
      unsigned __int8 v71 = (void **)operator new[]((v23 >> 3) & 0x1FFFFFF8);
    }
    char v24 = *((unsigned char *)a2 + 20);
    int v25 = v24 & 7;
    char v73 = v73 & 0xF0 | v24 & 0xF;
    int v26 = *((_DWORD *)a2 + 4);
    int v72 = v26;
    BOOL v28 = (v24 & 6) != 0 && v25 != 3;
    if (v25 == 1 || v28)
    {
      int v30 = v22[2];
      if ((v30 - 64) >= 0xFFFFFF80) {
        BOOL v31 = (void **)&v71;
      }
      else {
        BOOL v31 = v71;
      }
      if ((v30 - 64) >= 0xFFFFFF80) {
        char v32 = (unint64_t *)((char *)a2 + 8);
      }
      else {
        char v32 = *v12;
      }
      llvm::APInt::tcAssign((uint64_t)v31, v32, (const unint64_t *)((v30 + 64) >> 6));
      int v22 = v70;
      int v26 = v72;
    }
    int v33 = v19 - v21;
    int v34 = *v22 + v22[2] + ~v22[1];
    int v35 = -2 - v34;
    if (v34 + 1 < v33) {
      int v36 = v34 + 1;
    }
    else {
      int v36 = v33;
    }
    if (v35 > v33) {
      int v36 = v35;
    }
    int v72 = v36 + v26;
    llvm::detail::IEEEFloat::normalize((uint64_t)&v70, 1, 0);
    char v37 = v73;
    int v38 = v73 & 7;
    int v39 = v70;
    if (v38 == 1)
    {
      if (v70[4] == 1)
      {
        int v38 = 1;
      }
      else
      {
        int v40 = v70[2];
        if ((v40 - 64) >= 0xFFFFFF80) {
          int v41 = (void **)&v71;
        }
        else {
          int v41 = v71;
        }
        llvm::APInt::tcSetBit((uint64_t)v41, (unint64_t *)(v40 - 2));
        int v39 = v70;
        char v37 = v73;
        int v38 = v73 & 7;
      }
    }
    char v74 = v39;
    __p = v71;
    int v76 = v72;
    unsigned __int8 v77 = v77 & 0xF0 | v37 & 0xF;
    int v70 = &llvm::semBogus;
    if (v38 == 1) {
      goto LABEL_64;
    }
    int v42 = *((_DWORD *)this + 4);
    if (v42 == v72)
    {
      int v43 = *(_DWORD *)(*(void *)this + 8);
      int v44 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      if ((v43 - 64) <= 0xFFFFFF7F) {
        int v44 = *v11;
      }
      if ((v39[2] - 64) >= 0xFFFFFF80) {
        p_p = &__p;
      }
      else {
        p_p = v71;
      }
      if ((llvm::APInt::tcCompare(v44, (const unint64_t *)p_p, (const unint64_t *)((v43 + 64) >> 6)) & 0x80000000) == 0)goto LABEL_98; {
LABEL_64:
      }
      BOOL v46 = *(_DWORD **)a2;
      int v66 = v46;
      unsigned int v47 = v46[2] + 64;
      if (v47 >= 0x80) {
        unsigned __int8 v67 = operator new[]((v47 >> 3) & 0x1FFFFFF8);
      }
      char v48 = *((unsigned char *)a2 + 20);
      int v49 = v48 & 7;
      char v69 = v69 & 0xF0 | v48 & 0xF;
      int v50 = *((_DWORD *)a2 + 4);
      int v68 = v50;
      BOOL v52 = (v48 & 6) != 0 && v49 != 3;
      if (v49 == 1 || v52)
      {
        int v53 = v46[2];
        if ((v53 - 64) >= 0xFFFFFF80) {
          char v54 = &v67;
        }
        else {
          char v54 = v67;
        }
        if ((v53 - 64) >= 0xFFFFFF80) {
          int v55 = (unint64_t *)((char *)a2 + 8);
        }
        else {
          int v55 = *v12;
        }
        llvm::APInt::tcAssign((uint64_t)v54, v55, (const unint64_t *)((v53 + 64) >> 6));
        BOOL v46 = v66;
        int v50 = v68;
      }
      int v56 = v33 - 1;
      int v57 = *v46 + v46[2] + ~v46[1];
      if (v57 + 1 < v33 - 1) {
        int v56 = v57 + 1;
      }
      if (-2 - v57 >= v33) {
        int v56 = -2 - v57;
      }
      int v68 = v56 + v50;
      llvm::detail::IEEEFloat::normalize((uint64_t)&v66, 1, 0);
      char v58 = v69;
      char v59 = v66;
      if ((v69 & 7) == 1 && v66[4] != 1)
      {
        int v60 = v66[2];
        if ((v60 - 64) >= 0xFFFFFF80) {
          char v61 = &v67;
        }
        else {
          char v61 = v67;
        }
        llvm::APInt::tcSetBit((uint64_t)v61, (unint64_t *)(v60 - 2));
        char v59 = v66;
        char v58 = v69;
      }
      char v62 = v67;
      int v63 = v68;
      int v66 = &llvm::semBogus;
      char v64 = &llvm::semBogus;
      if ((v74[2] - 64) <= 0xFFFFFF7F)
      {
        if (__p)
        {
          operator delete[](__p);
          char v64 = v66;
        }
        else
        {
          char v64 = &llvm::semBogus;
        }
      }
      char v74 = v59;
      __p = v62;
      int v76 = v63;
      unsigned __int8 v77 = v77 & 0xF0 | v58 & 0xF;
      if ((v64[2] - 64) <= 0xFFFFFF7F && v67) {
        operator delete[](v67);
      }
      goto LABEL_98;
    }
    if (v42 - v72 < 0) {
      goto LABEL_64;
    }
LABEL_98:
    unsigned __int8 v77 = v77 & 0xF7 | *((unsigned char *)this + 20) & 8;
    uint64_t v5 = llvm::detail::IEEEFloat::addOrSubtractSpecials(this, (const llvm::detail::IEEEFloat *)&v74, 1);
    if (v5 == 2)
    {
      int v65 = llvm::detail::IEEEFloat::addOrSubtractSignificand(this, (const llvm::detail::IEEEFloat *)&v74, 1);
      uint64_t v5 = llvm::detail::IEEEFloat::normalize((uint64_t)this, 1, v65);
    }
    int v8 = *((unsigned __int8 *)this + 20);
    if ((v8 & 7) == 3)
    {
      if ((v77 & 7) != 3 || ((v77 ^ v8) & 8) == 0)
      {
        LOBYTE(v8) = v8 & 0xF7;
        *((unsigned char *)this + 20) = v8;
      }
      if (*(_DWORD *)(*(void *)this + 20) == 2)
      {
        LOBYTE(v8) = v8 & 0xF7;
        *((unsigned char *)this + 20) = v8;
      }
    }
    if ((v74[2] - 64) <= 0xFFFFFF7F && __p)
    {
      operator delete[](__p);
      LOBYTE(v8) = *((unsigned char *)this + 20);
    }
    if ((v8 & 6) == 0 || (v8 & 7) == 3 || (*((unsigned char *)a2 + 20) & 6) == 0 || (*((unsigned char *)a2 + 20) & 7) == 3) {
      goto LABEL_7;
    }
  }
  LOBYTE(v8) = *((unsigned char *)this + 20);
LABEL_7:
  if ((v8 & 7) == 3)
  {
    char v9 = v8 & 0xF7;
    *((unsigned char *)this + 20) = v9 | v6 & 8;
    if (*(_DWORD *)(*(void *)this + 20) != 2) {
      v9 |= v6 & 8;
    }
    *((unsigned char *)this + 20) = v9;
  }
  return v5;
}

uint64_t llvm::detail::ilogb(llvm::detail *this, const llvm::detail::IEEEFloat *a2)
{
  int v2 = *((unsigned char *)this + 20) & 7;
  if ((*((unsigned char *)this + 20) & 7) == 0) {
    return 0x7FFFFFFFLL;
  }
  if (v2 == 1) {
    return 0x80000000;
  }
  if (v2 == 3) {
    return 2147483649;
  }
  BOOL v6 = (*((unsigned char *)this + 20) & 6) == 0 || v2 == 3;
  if (v6 || *((_DWORD *)this + 4) != *(_DWORD *)(*(void *)this + 4)) {
    return *((unsigned int *)this + 4);
  }
  int v7 = *(_DWORD *)(*(void *)this + 8);
  int v8 = (v7 - 64) >= 0xFFFFFF80 ? (llvm::detail *)((char *)this + 8) : (llvm::APInt *)*((void *)this + 1);
  int Bit = (void *)llvm::APInt::tcExtractBit(v8, (const unint64_t *)(v7 - 1));
  if (Bit) {
    return *((unsigned int *)this + 4);
  }
  uint64_t v18 = *(void *)this;
  int v10 = *(_DWORD *)(v18 + 8);
  unsigned int v11 = v10 + 64;
  if ((v10 + 64) >= 0x80)
  {
    int Bit = operator new[]((v11 >> 3) & 0x1FFFFFF8);
    __p = Bit;
  }
  char v12 = *((unsigned char *)this + 20);
  int v13 = v12 & 7;
  char v21 = v12 & 0xF;
  int v14 = *((_DWORD *)this + 4);
  int v20 = v14;
  BOOL v16 = (v12 & 6) != 0 && v13 != 3;
  if (v13 == 1 || v16)
  {
    if ((v10 - 64) < 0xFFFFFF80)
    {
      int v17 = (unint64_t *)*((void *)this + 1);
    }
    else
    {
      int Bit = &__p;
      int v17 = (unint64_t *)((char *)this + 8);
    }
    llvm::APInt::tcAssign((uint64_t)Bit, v17, (const unint64_t *)(v11 >> 6));
    int v10 = *(_DWORD *)(*(void *)this + 8);
    int v14 = v20;
  }
  int v20 = v14 + v10 - 1;
  llvm::detail::IEEEFloat::normalize((uint64_t)&v18, 1, 0);
  uint64_t v3 = (v20 - (v10 - 1));
  if ((*(_DWORD *)(v18 + 8) - 64) > 0xFFFFFF7F || !__p) {
    return v3;
  }
  operator delete[](__p);
  return v3;
}

uint64_t llvm::detail::IEEEFloat::fusedMultiplyAdd(llvm::detail::IEEEFloat *this, llvm::detail::IEEEFloat *a2, unint64_t *a3, int a4)
{
  int v7 = (unsigned __int8 *)this;
  char v8 = *((unsigned char *)this + 20);
  *((unsigned char *)this + 20) = *((unsigned char *)a2 + 20) & 8 ^ v8;
  int v9 = v8 & 6;
  int v10 = v8 & 7;
  if (v9) {
    BOOL v11 = v10 == 3;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11
    || ((*((unsigned char *)a2 + 20) & 6) != 0 ? (BOOL v12 = (*((unsigned char *)a2 + 20) & 7) == 3) : (BOOL v12 = 1),
        v12 || (char v13 = *((unsigned char *)a3 + 20), (v13 & 6) == 0)))
  {
    if (llvm::detail::IEEEFloat::multiplySpecials(this, a2)) {
      return 1;
    }
    uint64_t result = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)v7, (const llvm::detail::IEEEFloat *)a3, 0);
    if (result == 2)
    {
      int v21 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)v7, (const llvm::detail::IEEEFloat *)a3, 0);
      uint64_t result = llvm::detail::IEEEFloat::normalize((uint64_t)v7, a4, v21);
    }
    int v22 = v7[20];
    if ((v22 & 7) == 3)
    {
      int v23 = *((unsigned __int8 *)a3 + 20);
      if ((v23 & 7) != 3 || ((v23 ^ v22) & 8) != 0)
      {
        LOBYTE(v22) = v22 & 0xF7 | (8 * (a4 == 3));
        v7[20] = v22;
      }
      if (*(_DWORD *)(*(void *)v7 + 20) == 2)
      {
        unsigned __int8 v20 = v22 & 0xF7;
LABEL_38:
        v7[20] = v20;
      }
    }
  }
  else
  {
    unint64_t v24 = *a3;
    int v14 = *(_DWORD *)(v24 + 8);
    unsigned int v15 = v14 + 64;
    if ((v14 + 64) >= 0x80)
    {
      this = (llvm::detail::IEEEFloat *)operator new[]((v15 >> 3) & 0x1FFFFFF8);
      __p = this;
    }
    char v27 = v13 & 0xF;
    int v26 = *((_DWORD *)a3 + 4);
    if ((v13 & 7) != 3)
    {
      if ((v14 - 64) < 0xFFFFFF80)
      {
        BOOL v16 = (unint64_t *)a3[1];
      }
      else
      {
        this = (llvm::detail::IEEEFloat *)&__p;
        BOOL v16 = a3 + 1;
      }
      llvm::APInt::tcAssign((uint64_t)this, v16, (const unint64_t *)(v15 >> 6));
    }
    int v17 = llvm::detail::IEEEFloat::multiplySignificand((unint64_t **)v7, (uint64_t)a2, (uint64_t)&v24);
    if ((*(_DWORD *)(v24 + 8) - 64) <= 0xFFFFFF7F && __p) {
      operator delete[](__p);
    }
    LODWORD(result) = llvm::detail::IEEEFloat::normalize((uint64_t)v7, a4, v17);
    if (v17) {
      uint64_t result = result | 0x10;
    }
    else {
      uint64_t result = result;
    }
    int v19 = v7[20];
    if ((v19 & 7) == 3 && (result & 8) == 0 && ((*((unsigned __int8 *)a3 + 20) ^ v19) & 8) != 0)
    {
      unsigned __int8 v20 = v19 & 0xF7;
      v7[20] = v20 | (8 * (a4 == 3));
      if (*(_DWORD *)(*(void *)v7 + 20) != 2) {
        v20 |= 8 * (a4 == 3);
      }
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::convertFromAPInt(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = *(unsigned int *)(a2 + 8);
  char v8 = (unint64_t *)((unint64_t)(v7 + 63) >> 6);
  unsigned int v19 = *(_DWORD *)(a2 + 8);
  if (v7 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)a2);
    LODWORD(v7) = v19;
    unint64_t v9 = (unint64_t)__p;
    char v10 = *(unsigned char *)(a1 + 20);
    *(unsigned char *)(a1 + 20) = v10 & 0xF7;
    if (!a3) {
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v9 = *(void *)a2;
    __p = *(void **)a2;
    char v10 = *(unsigned char *)(a1 + 20);
    *(unsigned char *)(a1 + 20) = v10 & 0xF7;
    if (!a3) {
      goto LABEL_21;
    }
  }
  p_p = (void **)(v9 + 8 * ((v7 - 1) >> 6));
  if (v7 < 0x41) {
    p_p = &__p;
  }
  if (((unint64_t)*p_p >> (v7 - 1)))
  {
    *(unsigned char *)(a1 + 20) = v10 | 8;
    unsigned int v17 = v7;
    if (v7 >= 0x41)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v16, (const void **)&__p);
      LODWORD(v7) = v17;
      if (v17 > 0x40)
      {
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v16);
LABEL_15:
        llvm::APInt::operator++((uint64_t **)&v16);
        LODWORD(v7) = v17;
        unint64_t v9 = (unint64_t)v16;
        unsigned int v17 = 0;
        if (v19 > 0x40 && __p)
        {
          operator delete[](__p);
          __p = (void *)v9;
          unsigned int v19 = v7;
          if (v17 >= 0x41 && v16)
          {
            operator delete[](v16);
            LODWORD(v7) = v19;
            unint64_t v9 = (unint64_t)__p;
          }
        }
        else
        {
          __p = v16;
          unsigned int v19 = v7;
        }
        goto LABEL_21;
      }
      unint64_t v9 = (unint64_t)v16;
    }
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (!v7) {
      unint64_t v12 = 0;
    }
    BOOL v16 = (void *)(v12 & ~v9);
    goto LABEL_15;
  }
LABEL_21:
  if (v7 >= 0x41) {
    char v13 = (void **)v9;
  }
  else {
    char v13 = &__p;
  }
  uint64_t v14 = llvm::detail::IEEEFloat::convertFromUnsignedParts(a1, (llvm::APInt *)v13, v8, a4);
  if (v19 >= 0x41 && __p) {
    operator delete[](__p);
  }
  return v14;
}

uint64_t llvm::detail::IEEEFloat::convertToSignExtendedInteger(uint64_t a1, llvm::APInt *this, uint64_t a3, unsigned int a4, int a5, int a6, unsigned char *a7)
{
  *a7 = 0;
  unsigned int v7 = *(unsigned char *)(a1 + 20) & 7;
  if (v7 < 2) {
    return 1;
  }
  char v13 = (unint64_t *)((a4 + 63) >> 6);
  if (v7 == 3)
  {
    llvm::APInt::tcSet(this, 0, (a4 + 63) >> 6);
    LOBYTE(v14) = ((*(unsigned __int8 *)(a1 + 20) >> 3) & 1) == 0;
LABEL_5:
    uint64_t v8 = 0;
    *a7 = v14;
    return v8;
  }
  uint64_t v18 = (llvm::APInt *)(a1 + 8);
  unsigned int v19 = (const unint64_t *)*(unsigned int *)(*(void *)a1 + 8);
  unsigned __int8 v20 = (llvm::APInt *)(a1 + 8);
  if ((v19 - 64) <= 0xFFFFFF7F) {
    unsigned __int8 v20 = *(llvm::APInt **)v18;
  }
  unsigned int v21 = *(_DWORD *)(a1 + 16);
  if ((v21 & 0x80000000) != 0)
  {
    unsigned int v37 = v13;
    llvm::APInt::tcSet(this, 0, v13);
    unint64_t v25 = (*(_DWORD *)(*(void *)a1 + 8) + ~*(_DWORD *)(a1 + 16));
    if (!v25)
    {
LABEL_18:
      int v31 = 1;
      char v13 = (unint64_t *)v37;
      goto LABEL_39;
    }
  }
  else
  {
    if (v21 >= a4) {
      return 1;
    }
    int v22 = (const unint64_t *)(v21 + 1);
    if (v19 <= v22)
    {
      llvm::APInt::tcExtract(this, v13, (uint64_t)v20, v19, 0);
      llvm::APInt::tcShiftLeft(this, v13, v22 - *(_DWORD *)(*(void *)a1 + 8));
      int v31 = 1;
      goto LABEL_39;
    }
    unsigned int v37 = v13;
    unint64_t v24 = v13;
    unint64_t v25 = (v19 - v22);
    llvm::APInt::tcExtract(this, v24, (uint64_t)v20, v22, v19 - v22);
    if (!v25) {
      goto LABEL_18;
    }
  }
  unsigned int v26 = *(_DWORD *)(*(void *)a1 + 8) + 64;
  unsigned int v27 = llvm::APInt::tcLSB(v20, (const unint64_t *)(v26 >> 6));
  if (v27 >= v25) {
    goto LABEL_18;
  }
  BOOL v28 = (const unint64_t *)v25;
  if (v27 + 1 == v25)
  {
    char v29 = 0;
    int v30 = 2;
  }
  else if ((v26 & 0xFFFFFFC0) >= v25 {
         && (int Bit = llvm::APInt::tcExtractBit(v20, (const unint64_t *)(v25 - 1)),
  }
             BOOL v28 = (const unint64_t *)v25,
             Bit))
  {
    char v29 = 0;
    int v30 = 3;
  }
  else
  {
    char v29 = 1;
    int v30 = 1;
  }
  char v13 = (unint64_t *)v37;
  int v31 = 0;
  switch(a6)
  {
    case 1:
      if (v30 != 3)
      {
        if (v30 != 2 || (*(unsigned char *)(a1 + 20) & 7) == 3) {
          goto LABEL_38;
        }
        if ((*(_DWORD *)(*(void *)a1 + 8) - 64) <= 0xFFFFFF7F) {
          uint64_t v18 = *(llvm::APInt **)v18;
        }
        if (!llvm::APInt::tcExtractBit(v18, v28)) {
          goto LABEL_38;
        }
      }
      goto LABEL_37;
    case 2:
      if ((*(unsigned char *)(a1 + 20) & 8) != 0) {
        goto LABEL_38;
      }
      goto LABEL_37;
    case 3:
      if ((*(unsigned char *)(a1 + 20) & 8) != 0) {
        goto LABEL_37;
      }
      goto LABEL_38;
    case 4:
      if (v29) {
        goto LABEL_38;
      }
LABEL_37:
      uint64_t v8 = 1;
      if (llvm::APInt::tcAddPart(this, (unint64_t *)1, v37)) {
        return v8;
      }
LABEL_38:
      int v31 = 0;
      break;
    default:
      break;
  }
LABEL_39:
  int v33 = llvm::APInt::tcMSB(this, v13);
  unsigned int v34 = v33 + 1;
  if ((*(unsigned char *)(a1 + 20) & 8) != 0)
  {
    if (a5)
    {
      if (v34 == a4)
      {
        if (llvm::APInt::tcLSB(this, v13) == v33) {
          goto LABEL_55;
        }
      }
      else if (v34 <= a4)
      {
LABEL_55:
        llvm::APInt::tcNegate((int8x16_t *)this, v13);
        if ((v31 & 1) == 0) {
          return 16;
        }
        LOBYTE(v14) = 1;
        goto LABEL_5;
      }
    }
    else if (v33 == -1)
    {
      goto LABEL_55;
    }
    return 1;
  }
  unsigned int v35 = (a5 ^ 1) + a4;
  BOOL v36 = v34 >= v35;
  if (v34 < v35) {
    int v14 = v31;
  }
  else {
    int v14 = 0;
  }
  if (v36) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = 16;
  }
  if (v14 == 1) {
    goto LABEL_5;
  }
  return v8;
}

uint64_t llvm::detail::IEEEFloat::convertToInteger(uint64_t a1, llvm::APInt *a2, uint64_t a3, unsigned int a4, int a5, int a6, unsigned char *a7)
{
  uint64_t v11 = llvm::detail::IEEEFloat::convertToSignExtendedInteger(a1, a2, a3, a4, a5, a6, a7);
  if (v11 != 1) {
    return v11;
  }
  unsigned int v12 = (a4 + 63) >> 6;
  if ((*(unsigned char *)(a1 + 20) & 7) != 1)
  {
    if ((*(unsigned char *)(a1 + 20) & 8) != 0)
    {
      unsigned int v13 = 0;
      LOBYTE(v14) = a5;
      if (!a5) {
        goto LABEL_10;
      }
    }
    else
    {
      unsigned int v14 = a4 - a5;
      unsigned int v15 = a4 - a5 - 65;
      if (a4 - a5 < 0x41)
      {
        unsigned int v13 = 0;
        if (!v14) {
          goto LABEL_10;
        }
      }
      else
      {
        memset(a2, 255, 8 * (v15 >> 6) + 8);
        unsigned int v13 = (v15 >> 6) + 1;
        unsigned int v16 = v14 - (v15 & 0xFFFFFFC0);
        LOBYTE(v14) = v16 - 64;
        if (v16 == 64) {
          goto LABEL_10;
        }
      }
    }
    *((void *)a2 + v13++) = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
    goto LABEL_10;
  }
  unsigned int v13 = 0;
LABEL_10:
  if (v13 < v12) {
    bzero((char *)a2 + 8 * v13, 8 * (v12 + ~v13) + 8);
  }
  if ((*(unsigned char *)(a1 + 20) & 8) != 0 && a5) {
    llvm::APInt::tcShiftLeft(a2, (unint64_t *)((a4 + 63) >> 6), a4 - 1);
  }
  return v11;
}

uint64_t llvm::detail::IEEEFloat::convertFromUnsignedParts(uint64_t a1, llvm::APInt *this, unint64_t *a3, int a4)
{
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a1 + 20) & 0xF8 | 2;
  int v8 = llvm::APInt::tcMSB(this, a3);
  unint64_t v9 = (const unint64_t *)(v8 + 1);
  char v10 = (const unint64_t *)*(unsigned int *)(*(void *)a1 + 8);
  uint64_t v11 = (llvm::APInt *)(a1 + 8);
  if ((v10 - 64) <= 0xFFFFFF7F) {
    uint64_t v11 = *(llvm::APInt **)v11;
  }
  unsigned int v12 = (unint64_t *)((v10 + 64) >> 6);
  unsigned int v13 = v9 - v10;
  if (v9 >= v10)
  {
    *(_DWORD *)(a1 + 16) = v8;
    unsigned int v15 = llvm::APInt::tcLSB(this, a3);
    if (v15 >= v13)
    {
      int v14 = 0;
    }
    else if (v15 + 1 == v13)
    {
      int v14 = 2;
    }
    else if (v13 <= a3 << 6 {
           && llvm::APInt::tcExtractBit(this, (const unint64_t *)(v13 - 1)))
    }
    {
      int v14 = 3;
    }
    else
    {
      int v14 = 1;
    }
    llvm::APInt::tcExtract(v11, v12, (uint64_t)this, v10, v13);
  }
  else
  {
    *(_DWORD *)(a1 + 16) = v10 - 1;
    llvm::APInt::tcExtract(v11, v12, (uint64_t)this, v9, 0);
    int v14 = 0;
  }

  return llvm::detail::IEEEFloat::normalize(a1, a4, v14);
}

uint64_t llvm::detail::IEEEFloat::convertFromHexadecimalString@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a1 + 20) & 0xF8 | 2;
  int v10 = *(_DWORD *)(*(void *)a1 + 8);
  uint64_t v11 = (llvm::APInt **)(a1 + 8);
  unsigned int v12 = (llvm::APInt *)(a1 + 8);
  if ((v10 - 64) <= 0xFFFFFF7F) {
    unsigned int v12 = *v11;
  }
  llvm::APInt::tcSet(v12, 0, (v10 + 64) >> 6);
  *(_DWORD *)(a1 + 16) = 0;
  int v14 = *(_DWORD *)(*(void *)a1 + 8);
  if ((v14 - 64) <= 0xFFFFFF7F) {
    uint64_t v11 = (llvm::APInt **)*v11;
  }
  unsigned int v15 = &a2[a3];
  if (a3)
  {
    uint64_t v16 = a3 - 1;
    unsigned int v17 = a2;
    while (1)
    {
      int v18 = *v17;
      if (v18 != 48) {
        break;
      }
      ++v17;
      if (--v16 == -1)
      {
        unsigned int v19 = &a2[a3];
        goto LABEL_15;
      }
    }
    if (v18 == 46)
    {
      if (a3 == 1) {
        goto LABEL_12;
      }
      unsigned int v19 = v17;
      while (v16)
      {
        int v42 = *++v19;
        --v16;
        if (v42 != 48) {
          goto LABEL_16;
        }
      }
      unsigned int v19 = &a2[a3];
      goto LABEL_16;
    }
    unsigned int v19 = v17;
  }
  else
  {
    unsigned int v19 = a2;
  }
LABEL_15:
  unsigned int v17 = &a2[a3];
LABEL_16:
  if (v19 == v15)
  {
LABEL_62:
    unsigned __int8 v20 = "Hex strings require an exponent";
    goto LABEL_63;
  }
  char v21 = 0;
  unint64_t v22 = 0;
  unsigned int v23 = v14 & 0xFFFFFFC0;
  unsigned int v24 = v23 + 64;
  unint64_t v25 = v19;
  while (1)
  {
    uint64_t v27 = *v25;
    if (v27 == 46)
    {
      if (v17 != v15)
      {
        unsigned __int8 v20 = "String contains multiple dots";
        goto LABEL_63;
      }
      unsigned int v17 = v25++;
      goto LABEL_19;
    }
    uint64_t v13 = llvm::hexDigitValue(char)::LUT[v27];
    if (v13 == -1) {
      break;
    }
    ++v25;
    if (v24)
    {
      v24 -= 4;
      uint64_t v26 = v13 << v24;
      uint64_t v13 = 8 * (v24 >> 6);
      *(llvm::APInt **)((char *)v11 + v13) = (llvm::APInt *)(*(unint64_t *)((char *)v11 + v13) | v26);
    }
    else
    {
      if ((v21 & 1) == 0)
      {
        if ((unint64_t)(v27 - 57) > 0xFFFFFFFFFFFFFFF6)
        {
          if ((v13 & 0xFFFFFFF7) != 0)
          {
            unint64_t v22 = v22 & 0xFFFFFFFF00000000 | 1;
          }
          else
          {
            BOOL v28 = v25;
            if (v25 == v15)
            {
LABEL_68:
              unsigned __int8 v20 = "Invalid trailing hexadecimal fraction!";
              goto LABEL_63;
            }
            while (1)
            {
              uint64_t v29 = *v28;
              if (v29 != 48 && v29 != 46) {
                break;
              }
              if (++v28 == v15) {
                goto LABEL_68;
              }
            }
            unint64_t v30 = v22 & 0xFFFFFFFF00000000;
            if (llvm::hexDigitValue(char)::LUT[v29] == -1)
            {
              unint64_t v22 = v30 | (2 * (v27 != 48));
            }
            else
            {
              if (v27 == 48) {
                uint64_t v31 = 1;
              }
              else {
                uint64_t v31 = 3;
              }
              unint64_t v22 = v31 | v30;
            }
          }
        }
        else
        {
          unint64_t v22 = v22 & 0xFFFFFFFF00000000 | 3;
        }
      }
      unsigned int v24 = 0;
      char v21 = 1;
    }
LABEL_19:
    if (v25 == v15) {
      goto LABEL_62;
    }
  }
  if (v25 == v15) {
    goto LABEL_62;
  }
  if ((v27 | 0x20) != 0x70)
  {
    unsigned __int8 v20 = "Invalid character in significand";
    goto LABEL_63;
  }
  if (v25 == a2 || v17 != v15 && v25 - a2 == 1)
  {
LABEL_12:
    unsigned __int8 v20 = "Significand has no digits";
    goto LABEL_63;
  }
  if (v25 == v19)
  {
LABEL_82:
    uint64_t result = llvm::detail::IEEEFloat::normalize(a1, a4, v22);
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = result;
    return result;
  }
  if (v17 == v15) {
    int v32 = (int)v25;
  }
  else {
    int v32 = (int)v17;
  }
  int v33 = (char *)(v25 + 1);
  if (v25 + 1 == v15
    || ((v34 = *v33, v34 == 45) || v34 == 43) && (int v33 = (char *)(v25 + 2), v25 + 2 == v15))
  {
    unsigned __int8 v20 = "Exponent has no digits";
    goto LABEL_63;
  }
  if (v33 == (char *)v15)
  {
    int v35 = 0;
LABEL_73:
    unsigned int v43 = *(_DWORD *)(*(void *)a1 + 8)
        - v23
        + 4 * (v32 - v19 + ((v32 - v19) >> 31))
        - 65;
    if (v43 != (__int16)v43 || (v34 != 45 ? (int v44 = v35) : (int v44 = -v35), v45 = v44 + v43, v45 != (__int16)v45))
    {
LABEL_78:
      if (v34 == 45) {
        int v45 = -32768;
      }
      else {
        int v45 = 0x7FFF;
      }
    }
    *(_DWORD *)(a1 + 16) = v45;
    goto LABEL_82;
  }
  int v35 = 0;
  while (1)
  {
    unsigned int v36 = *v33 - 48;
    if (v36 >= 0xA) {
      break;
    }
    int v35 = v36 + 10 * v35;
    if (v35 >= 0x8000) {
      goto LABEL_78;
    }
    if (++v33 == (char *)v15) {
      goto LABEL_73;
    }
  }
  unsigned __int8 v20 = "Invalid character in exponent";
LABEL_63:
  BOOL v46 = v20;
  __int16 v47 = 259;
  uint64_t v37 = llvm::inconvertibleErrorCode((llvm *)v13);
  uint64_t v39 = v38;
  int v40 = operator new(0x38uLL);
  uint64_t result = llvm::StringError::StringError((uint64_t)v40, (llvm::Twine *)&v46, v37, v39);
  *(unsigned char *)(a5 + 8) |= 1u;
  *(void *)a5 = result;
  return result;
}

uint64_t llvm::createError(llvm *a1, llvm::Twine *a2)
{
  uint64_t v4 = llvm::inconvertibleErrorCode(a1);
  uint64_t v6 = v5;
  unsigned int v7 = operator new(0x38uLL);
  uint64_t result = llvm::StringError::StringError((uint64_t)v7, a2, v4, v6);
  *(void *)a1 = result;
  return result;
}

unint64_t *llvm::detail::IEEEFloat::roundSignificandWithExponent()
{
  uint64_t v1 = MEMORY[0x1F4188790]();
  unsigned int v63 = v4;
  char v62 = v5;
  uint64_t v6 = (unsigned char *)v1;
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  *(void *)&v65[1] = 0xFFFF800100007FFFLL;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  int v60 = v3;
  BOOL v8 = v3 == 1 || v3 == 4;
  BOOL v61 = v8;
  unsigned int v9 = (*(_DWORD *)(*(void *)v1 + 8) + 74) >> 6;
  if (v2 >= 0) {
    unsigned int v10 = v2;
  }
  else {
    unsigned int v10 = -v2;
  }
  uint64_t v77 = 390625;
  memset(v76, 0, sizeof(v76));
  long long v75 = 0u;
  long long v74 = 0u;
  int v64 = v2;
  v65[0] = 1;
  int v73 = 1;
  v68[0] = llvm::powerOf5(unsigned long long *,unsigned int)::firstEightPowers[v10 & 7];
  if (v10 < 8) {
    goto LABEL_29;
  }
  unsigned int v11 = v10 >> 3;
  unint64_t v0 = v68;
  unsigned int v12 = (llvm::APInt *)&v69;
  uint64_t v13 = (llvm::APInt *)&v77;
  v65[0] = 1;
  unsigned int v14 = -1;
  unsigned int v15 = &v73;
  do
  {
    unint64_t v19 = *v15;
    if (v19)
    {
      if ((v11 & 1) == 0) {
        goto LABEL_24;
      }
    }
    else
    {
      unsigned __int8 v20 = (const unint64_t *)*(&v73 + v14);
      llvm::APInt::tcFullMultiply(v13, (unint64_t *)v13 - (void)v20, (unint64_t *)v13 - (void)v20, v20, v20);
      unsigned int v21 = 2 * v20 - 1;
      if (*((void *)v13 + v21)) {
        unint64_t v19 = (2 * v20);
      }
      else {
        unint64_t v19 = v21;
      }
      int *v15 = v19;
      if ((v11 & 1) == 0)
      {
LABEL_24:
        unsigned int v17 = v0;
        goto LABEL_15;
      }
    }
    llvm::APInt::tcFullMultiply(v12, v0, (unint64_t *)v13, (const unint64_t *)v65[0], (const unint64_t *)v19);
    int v16 = v19 + v65[0];
    if (!*((void *)v12 + (v19 + v65[0] - 1))) {
      int v16 = v19 + v65[0] - 1;
    }
    v65[0] = v16;
    unsigned int v17 = (unint64_t *)v12;
    unsigned int v12 = (llvm::APInt *)v0;
    unint64_t v0 = v17;
LABEL_15:
    uint64_t v13 = (llvm::APInt *)((char *)v13 + 8 * v19);
    ++v14;
    ++v15;
    BOOL v18 = v11 >= 2;
    v11 >>= 1;
  }
  while (v18);
  if (v17 != v68) {
    llvm::APInt::tcAssign((uint64_t)v68, v17, (const unint64_t *)v65[0]);
  }
LABEL_29:
  while (2)
  {
    LODWORD(v66) = (v9 << 6) - 1;
    int v22 = *(_DWORD *)(*(void *)v6 + 8);
    uint64_t v77 = (uint64_t)&v65[1];
    if (v9 << 6 <= 0x7F)
    {
      unsigned int v23 = v78;
    }
    else
    {
      unsigned int v23 = operator new[]((8 * v9) & 0x1FFFFFFF);
      unsigned __int8 v78 = v23;
    }
    char v80 = v80 & 0xF0 | 3;
    int v79 = v65[2] - 1;
    if ((v9 << 6) - 65 >= 0xFFFFFF80) {
      unsigned int v23 = &v78;
    }
    llvm::APInt::tcSet((llvm::APInt *)v23, 0, v9 & 0x3FFFFFF);
    char v24 = v80 & 0xF0;
    char v80 = v80 & 0xF0 | v6[20] & 8 | 3;
    if (*(_DWORD *)(v77 + 20) == 2) {
      char v80 = v24 | 3;
    }
    int v79 = *(_DWORD *)(v77 + 4) - 1;
    int v25 = *(_DWORD *)(v77 + 8);
    if ((v25 - 64) >= 0xFFFFFF80) {
      uint64_t v26 = (llvm::APInt *)&v78;
    }
    else {
      uint64_t v26 = (llvm::APInt *)v78;
    }
    llvm::APInt::tcSet(v26, 0, (v25 + 64) >> 6);
    char v69 = &v65[1];
    int v27 = v66;
    unsigned int v28 = v66 + 64;
    if ((v66 + 64) <= 0x7F)
    {
      p_p = __p;
    }
    else
    {
      p_p = operator new[]((v28 >> 3) & 0x1FFFFFF8);
      __p = p_p;
    }
    unsigned int v30 = (v9 << 6) - 1 - v22;
    char v72 = v72 & 0xF0 | 3;
    int v71 = v65[2] - 1;
    if ((v27 - 64) >= 0xFFFFFF80) {
      p_p = &__p;
    }
    llvm::APInt::tcSet((llvm::APInt *)p_p, 0, v28 >> 6);
    int v31 = llvm::detail::IEEEFloat::convertFromUnsignedParts((uint64_t)&v77, v62, (unint64_t *)v63, 1);
    int v32 = llvm::detail::IEEEFloat::convertFromUnsignedParts((uint64_t)&v69, (llvm::APInt *)v68, (unint64_t *)v65[0], 1);
    v79 += v64;
    if (v64 < 0)
    {
      int v33 = llvm::detail::IEEEFloat::divideSignificand((llvm::detail::IEEEFloat *)&v77, (const llvm::detail::IEEEFloat *)&v69);
      int v36 = *(_DWORD *)(*(void *)v6 + 4);
      unsigned int v35 = v30;
      int v37 = v36 - v79;
      if (v36 > v79)
      {
        unsigned int v35 = v37 + v30;
        if (v37 + v30 >= v66) {
          unsigned int v30 = v66;
        }
        else {
          v30 += v37;
        }
      }
      int v34 = 2 * ((v32 | v33) != 0);
    }
    else
    {
      int v33 = llvm::detail::IEEEFloat::multiplySignificand((unint64_t **)&v77, (const llvm::detail::IEEEFloat *)&v69);
      int v34 = v32 != 0;
      unsigned int v35 = v30;
    }
    BOOL v38 = v33 != 0;
    if (v31) {
      ++v34;
    }
    unsigned int v39 = 2 * v38;
    unsigned int v40 = v38 | (2 * v34);
    if (v34) {
      unint64_t v41 = v40;
    }
    else {
      unint64_t v41 = v39;
    }
    if ((*(_DWORD *)(v77 + 8) - 64) >= 0xFFFFFF80) {
      int v42 = &v78;
    }
    else {
      int v42 = v78;
    }
    unsigned int v43 = (v30 - 1) >> 6;
    unint64_t v44 = v42[v43] & (0xFFFFFFFFFFFFFFFFLL >> ((v30 - 1) & 0x3F ^ 0x3F));
    uint64_t v45 = 1 << (v30 - 1);
    if (!v61) {
      uint64_t v45 = 0;
    }
    if (v30 - 1 <= 0x3F)
    {
      unint64_t v46 = v44 - v45;
      if ((uint64_t)(v44 - v45) < 0) {
        unint64_t v46 = v45 - v44;
      }
      unint64_t v47 = 2 * v46;
      if (2 * v46 < v41) {
        goto LABEL_93;
      }
LABEL_79:
      int v52 = *(_DWORD *)(*(void *)v6 + 8);
      int v53 = (llvm::APInt *)(v6 + 8);
      if ((v52 - 64) <= 0xFFFFFF7F) {
        int v53 = (llvm::APInt *)*((void *)v6 + 1);
      }
      llvm::APInt::tcExtract(v53, (unint64_t *)((v52 + 64) >> 6), (uint64_t)v42, (const unint64_t *)(v66 - v30), v30);
      *((_DWORD *)v6 + 4) = v79 + v30 + *(_DWORD *)(*(void *)v6 + 8) - v66;
      int v54 = *(_DWORD *)(v77 + 8);
      if ((v54 - 64) >= 0xFFFFFF80) {
        int v55 = (llvm::APInt *)&v78;
      }
      else {
        int v55 = (llvm::APInt *)v78;
      }
      int v56 = v54 + 64;
      unsigned int v57 = llvm::APInt::tcLSB(v55, (const unint64_t *)((v54 + 64) >> 6));
      if (v57 >= v35)
      {
        int v58 = 0;
      }
      else if (v57 + 1 == v35)
      {
        int v58 = 2;
      }
      else if ((v56 & 0xFFFFFFC0) >= v35 {
             && llvm::APInt::tcExtractBit(v55, (const unint64_t *)(v35 - 1)))
      }
      {
        int v58 = 3;
      }
      else
      {
        int v58 = 1;
      }
      unint64_t v0 = (unint64_t *)llvm::detail::IEEEFloat::normalize((uint64_t)v6, v60, v58);
      goto LABEL_93;
    }
    if (v44 == v45)
    {
      unsigned int v48 = v43 - 1;
      while (v48)
      {
        if (v42[v48--]) {
          goto LABEL_75;
        }
      }
      unint64_t v47 = 2 * *v42;
      if (v47 >= v41) {
        goto LABEL_79;
      }
    }
    else
    {
      if (v44 != v45 - 1)
      {
LABEL_75:
        unint64_t v47 = -2;
        goto LABEL_79;
      }
      unsigned int v50 = v43 - 1;
      while (v50)
      {
        uint64_t v51 = v42[v50--];
        if (v51 != -1) {
          goto LABEL_75;
        }
      }
      unint64_t v47 = -2 * *v42;
      if (v47 >= v41) {
        goto LABEL_79;
      }
    }
LABEL_93:
    if ((v69[2] - 64) <= 0xFFFFFF7F && __p) {
      operator delete[](__p);
    }
    if ((*(_DWORD *)(v77 + 8) - 64) <= 0xFFFFFF7F && v78) {
      operator delete[](v78);
    }
    v9 *= 2;
    if (v47 < v41) {
      continue;
    }
    return v0;
  }
}

void llvm::detail::IEEEFloat::convertFromDecimalString(unsigned char *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a2;
  unsigned int v9 = (char *)&a2[a3];
  if (a3)
  {
    uint64_t v10 = a3 - 1;
    unsigned int v11 = a2;
    while (1)
    {
      int v12 = *v11;
      if (v12 != 48) {
        break;
      }
      ++v11;
      if (--v10 == -1)
      {
        uint64_t v13 = &a2[a3];
        goto LABEL_15;
      }
    }
    if (v12 == 46)
    {
      if (a3 == 1)
      {
LABEL_30:
        unsigned int v17 = "Significand has no digits";
        goto LABEL_88;
      }
      uint64_t v13 = v11;
      while (v10)
      {
        int v14 = *++v13;
        --v10;
        if (v14 != 48) {
          goto LABEL_16;
        }
      }
      uint64_t v13 = &a2[a3];
      goto LABEL_36;
    }
    uint64_t v13 = v11;
LABEL_15:
    unsigned int v11 = &a2[a3];
LABEL_16:
    if (v13 == (unsigned __int8 *)v9) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v13 = a2;
    unsigned int v11 = a2;
    if (a2 == (unsigned __int8 *)v9)
    {
LABEL_36:
      int v18 = 0;
      unint64_t v19 = &a2[a3];
      if (v9 == (char *)v13) {
        goto LABEL_33;
      }
      goto LABEL_37;
    }
  }
  unsigned int v15 = v13;
  while (1)
  {
    int v16 = *v15;
    if (v16 == 46)
    {
      if (v11 != (unsigned __int8 *)v9)
      {
        unsigned int v17 = "String contains multiple dots";
        goto LABEL_88;
      }
      if (v15 + 1 == (unsigned __int8 *)v9)
      {
        int v18 = 0;
        unint64_t v19 = &a2[a3];
        unsigned int v11 = v15;
        if (v9 != (char *)v13) {
          goto LABEL_37;
        }
        goto LABEL_33;
      }
      int v16 = v15[1];
      unsigned int v11 = v15++;
    }
    if (((char)v16 - 58) < 0xFFFFFFF6) {
      break;
    }
    if (++v15 == (unsigned __int8 *)v9) {
      goto LABEL_36;
    }
  }
  if (v15 == (unsigned __int8 *)v9) {
    goto LABEL_36;
  }
  if ((v16 | 0x20) != 0x65) {
    goto LABEL_87;
  }
  if (v15 == a2 || v11 != (unsigned __int8 *)v9 && v15 - a2 == 1) {
    goto LABEL_30;
  }
  unint64_t v41 = (char *)(v15 + 1);
  if (v15 + 1 == (unsigned __int8 *)v9
    || ((int v42 = *v41, v42 == 45) || v42 == 43) && v15 + 2 == (unsigned __int8 *)v9)
  {
    int v18 = 0;
    if (v11 == (unsigned __int8 *)v9) {
      unsigned int v11 = v15;
    }
    unint64_t v19 = v15;
    if (v15 != v13) {
      goto LABEL_37;
    }
LABEL_33:
    int v20 = 0;
    unsigned int v21 = v13;
    if (v13 == (unsigned __int8 *)v9)
    {
LABEL_49:
      char v29 = a1[20] & 0xF8 | 3;
      a1[20] = v29;
      unsigned int v30 = 0;
      if (*(_DWORD *)(*(void *)a1 + 20) == 2) {
        a1[20] = v29 & 0xF3;
      }
      goto LABEL_75;
    }
    goto LABEL_48;
  }
  if (v42 == 45 || (char v43 = *v41, v42 == 43))
  {
    unint64_t v41 = (char *)(v15 + 2);
    if (v15 + 2 == (unsigned __int8 *)v9)
    {
      unsigned int v17 = "Exponent has no digits";
      goto LABEL_88;
    }
    char v43 = *v41;
  }
  unsigned int v44 = v43 - 48;
  if (v44 > 9)
  {
LABEL_85:
    unsigned int v17 = "Invalid character in exponent";
    goto LABEL_88;
  }
  unsigned int v50 = v41 + 1;
  while (v50 != v9)
  {
    unsigned int v51 = *v50 - 48;
    if (v51 >= 0xA) {
      goto LABEL_85;
    }
    unsigned int v44 = v51 + 10 * v44;
    ++v50;
    if (v44 >> 6 >= 0x177)
    {
      unsigned int v44 = 24000;
      break;
    }
  }
  if (v42 == 45) {
    int v18 = -v44;
  }
  else {
    int v18 = v44;
  }
  if (v11 == (unsigned __int8 *)v9) {
    unsigned int v11 = v15;
  }
  unint64_t v19 = v15;
  if (v15 == v13) {
    goto LABEL_33;
  }
LABEL_37:
  if (v19 != a2)
  {
LABEL_38:
    int v22 = v19 - 1;
    while (v22 != a2)
    {
      int v24 = *v22--;
      int v23 = v24;
      if (v24 != 48)
      {
        if (v23 == 46)
        {
          unint64_t v19 = v22 + 1;
          goto LABEL_38;
        }
        unsigned int v21 = v22 + 1;
        goto LABEL_45;
      }
    }
  }
  unsigned int v21 = a2;
LABEL_45:
  int v25 = v11 - v21;
  BOOL v26 = v11 > v13;
  BOOL v27 = v11 >= v21;
  BOOL v28 = v11 > v21;
  if (v27) {
    BOOL v26 = 0;
  }
  int v20 = v18 + v25 - v28 + v21 - v13 - v26;
  if (v13 == (unsigned __int8 *)v9) {
    goto LABEL_49;
  }
LABEL_48:
  if (((char)*v13 - 58) <= 0xFFFFFFF5) {
    goto LABEL_49;
  }
  if (v20 >= 51085) {
    goto LABEL_53;
  }
  int v32 = *(_DWORD **)a1;
  if (v20 < -51082 || 28738 * v20 + 28738 <= 8651 * (v32[1] - v32[2]))
  {
    a1[20] = a1[20] & 0xF8 | 2;
    int v39 = v32[2];
    unsigned int v40 = (llvm::APInt *)(a1 + 8);
    if ((v39 - 64) <= 0xFFFFFF7F) {
      unsigned int v40 = *(llvm::APInt **)v40;
    }
    llvm::APInt::tcSet(v40, 0, (v39 + 64) >> 6);
    unsigned int v31 = llvm::detail::IEEEFloat::normalize((uint64_t)a1, a4, 1);
    goto LABEL_74;
  }
  if (42039 * v20 - 42039 >= 12655 * *v32)
  {
LABEL_53:
    unsigned int v31 = llvm::detail::IEEEFloat::handleOverflow((_DWORD **)a1, a4);
LABEL_74:
    unsigned int v30 = v31;
LABEL_75:
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = v30;
    return;
  }
  int v33 = (llvm::APInt *)operator new[](((((196 * ((int)v21 - (int)v13) + 196) / 0x3Bu + 64) >> 3) & 0x1FFFFF8) + 8);
  unsigned int v34 = 0;
LABEL_58:
  unint64_t v35 = 0;
  unint64_t v36 = 1;
  while (1)
  {
    int v37 = *v6;
    if (v37 == 46)
    {
      if (++v6 == (unsigned __int8 *)v9)
      {
        uint64_t v6 = (unsigned __int8 *)v9;
LABEL_67:
        llvm::APInt::tcMultiplyPart(v33, (unint64_t *)v33, v36, v35, v34, v34 + 1, 0);
        if (*((void *)v33 + v34)) {
          ++v34;
        }
        if (v6 > v21)
        {
          a1[20] = a1[20] & 0xF8 | 2;
          unsigned int v30 = llvm::detail::IEEEFloat::roundSignificandWithExponent();
          operator delete[](v33);
          goto LABEL_75;
        }
        goto LABEL_58;
      }
      LOBYTE(v37) = *v6;
    }
    unsigned int v38 = (char)v37 - 48;
    if (v38 > 9) {
      break;
    }
    ++v6;
    v36 *= 10;
    unint64_t v35 = 10 * v35 + v38;
    if (v6 > v21 || v36 >= 0x1999999999999999) {
      goto LABEL_67;
    }
  }
  operator delete[](v33);
LABEL_87:
  unsigned int v17 = "Invalid character in significand";
LABEL_88:
  int v52 = v17;
  __int16 v53 = 259;
  uint64_t v45 = llvm::inconvertibleErrorCode((llvm *)a1);
  uint64_t v47 = v46;
  unsigned int v48 = operator new(0x38uLL);
  uint64_t v49 = llvm::StringError::StringError((uint64_t)v48, (llvm::Twine *)&v52, v45, v47);
  *(unsigned char *)(a5 + 8) |= 1u;
  *(void *)a5 = v49;
}

uint64_t llvm::detail::IEEEFloat::convertFromStringSpecials(llvm::detail::IEEEFloat *a1, unsigned __int8 *a2, unint64_t a3)
{
  if (a3 < 3) {
    return 0;
  }
  if (a3 == 8)
  {
    if (*(void *)a2 == 0x5954494E49464E49)
    {
LABEL_32:
      int v12 = *(_DWORD **)a1;
      if (*(_DWORD *)(*(void *)a1 + 16) != 1)
      {
        *((unsigned char *)a1 + 20) &= 0xF0u;
        *((_DWORD *)a1 + 4) = *v12 + 1;
        int v15 = v12[2];
        int v16 = (llvm::detail::IEEEFloat *)((char *)a1 + 8);
        if ((v15 - 64) <= 0xFFFFFF7F) {
          int v16 = *(llvm::APInt **)v16;
        }
        llvm::APInt::tcSet(v16, 0, (v15 + 64) >> 6);
        return 1;
      }
      int v13 = 0;
      int v14 = 0;
LABEL_63:
      llvm::detail::IEEEFloat::makeNaN(a1, v13, v14, 0);
      return 1;
    }
LABEL_15:
    int v8 = *a2;
    if (v8 != 45)
    {
      LODWORD(v3) = 0;
      if ((v8 | 0x20) == 0x73) {
        goto LABEL_29;
      }
LABEL_39:
      int v11 = 0;
      goto LABEL_40;
    }
    ++a2;
    if (a3 == 9)
    {
      if (*(void *)a2 != 0x5954494E49464E49) {
        goto LABEL_38;
      }
    }
    else if (a3 != 4 {
           || (*(_WORD *)a2 == 28265 ? (BOOL v9 = a2[2] == 102) : (BOOL v9 = 0),
    }
               !v9 && (*(_WORD *)a2 == 28233 ? (BOOL v10 = a2[2] == 102) : (BOOL v10 = 0), !v10)))
    {
LABEL_38:
      --a3;
      LODWORD(v3) = 1;
      if ((*a2 | 0x20) == 0x73) {
        goto LABEL_29;
      }
      goto LABEL_39;
    }
    uint64_t v3 = 1;
    llvm::detail::IEEEFloat::makeInf(a1, 1);
    return v3;
  }
  if (a3 == 4)
  {
    if (*(_DWORD *)a2 == 1718503723) {
      goto LABEL_32;
    }
    goto LABEL_15;
  }
  if (a3 != 3) {
    goto LABEL_15;
  }
  if (*(_WORD *)a2 == 28265 && a2[2] == 102) {
    goto LABEL_32;
  }
  uint64_t v3 = 0;
  int v7 = *a2;
  if (v7 == 45) {
    return v3;
  }
  a3 = 3;
  if ((v7 | 0x20) != 0x73) {
    goto LABEL_39;
  }
LABEL_29:
  if (a3 < 4) {
    return 0;
  }
  ++a2;
  --a3;
  int v11 = 1;
LABEL_40:
  if ((*(_WORD *)a2 != 24942 || a2[2] != 110) && (*(_WORD *)a2 != 24910 || a2[2] != 78)) {
    return 0;
  }
  uint64_t v19 = 3;
  if (a3 < 3) {
    uint64_t v19 = a3;
  }
  int v20 = &a2[v19];
  unint64_t v21 = a3 - v19;
  BOOL v27 = &a2[v19];
  unint64_t v28 = a3 - v19;
  if (a3 == v19)
  {
    int v13 = v11;
    int v14 = v3;
    goto LABEL_63;
  }
  int v22 = *v20;
  if (v22 == 40)
  {
    if (v21 >= 3)
    {
      unint64_t v23 = v21 - 1;
      if (v20[v21 - 1] == 41)
      {
        if (v23 >= v21) {
          unint64_t v23 = v21;
        }
        unint64_t v21 = v23 - 1;
        BOOL v27 = v20 + 1;
        unint64_t v28 = v23 - 1;
        int v22 = *++v20;
        goto LABEL_58;
      }
    }
    return 0;
  }
LABEL_58:
  if (v22 == 48)
  {
    if (v21 >= 2 && __tolower((char)v20[1]) == 120)
    {
      BOOL v27 = v20 + 2;
      unint64_t v28 = v21 - 2;
      unsigned int v24 = 16;
    }
    else
    {
      unsigned int v24 = 8;
    }
  }
  else
  {
    unsigned int v24 = 10;
  }
  unsigned int v26 = 1;
  __p = 0;
  if (llvm::StringRef::getAsInteger((llvm::StringRef *)&v27, v24, (llvm::APInt *)&__p))
  {
    if (v26 >= 0x41 && __p) {
      operator delete[](__p);
    }
    return 0;
  }
  llvm::detail::IEEEFloat::makeNaN(a1, v11, v3, (const llvm::APInt *)&__p);
  if (v26 >= 0x41 && __p) {
    operator delete[](__p);
  }
  return 1;
}

void llvm::detail::IEEEFloat::makeInf(llvm::detail::IEEEFloat *this, int a2)
{
  int v2 = *(_DWORD **)this;
  if (*(_DWORD *)(*(void *)this + 16) == 1)
  {
    llvm::detail::IEEEFloat::makeNaN(this, 0, a2, 0);
  }
  else
  {
    if (a2) {
      char v3 = 8;
    }
    else {
      char v3 = 0;
    }
    *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xF0 | v3;
    *((_DWORD *)this + 4) = *v2 + 1;
    int v4 = v2[2];
    uint64_t v5 = (llvm::detail::IEEEFloat *)((char *)this + 8);
    if ((v4 - 64) <= 0xFFFFFF7F) {
      uint64_t v5 = *(llvm::APInt **)v5;
    }
    llvm::APInt::tcSet(v5, 0, (v4 + 64) >> 6);
  }
}

void llvm::detail::IEEEFloat::convertFromString(llvm *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (!a3)
  {
    BOOL v10 = "Invalid string length";
LABEL_5:
    v18[0] = v10;
    __int16 v19 = 259;
    uint64_t v11 = llvm::inconvertibleErrorCode(a1);
    uint64_t v13 = v12;
    int v14 = operator new(0x38uLL);
    uint64_t v15 = llvm::StringError::StringError((uint64_t)v14, (llvm::Twine *)v18, v11, v13);
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v15;
    return;
  }
  unint64_t v7 = a3;
  int v8 = a2;
  BOOL v9 = a1;
  a1 = (llvm *)llvm::detail::IEEEFloat::convertFromStringSpecials(a1, a2, a3);
  if (a1)
  {
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = 0;
    return;
  }
  *((unsigned char *)v9 + 20) = *((unsigned char *)v9 + 20) & 0xF7 | (8 * (*v8 == 45));
  int v16 = *v8;
  if (v16 != 45 && v16 != 43) {
    goto LABEL_10;
  }
  if (!--v7)
  {
    BOOL v10 = "String has no digits";
    goto LABEL_5;
  }
  ++v8;
LABEL_10:
  if (v7 >= 2 && *v8 == 48 && (v8[1] | 0x20) == 0x78)
  {
    if (v7 == 2)
    {
      v18[0] = "Invalid string";
      __int16 v19 = 259;
      llvm::createError((llvm *)&v17, (llvm::Twine *)v18);
      *(unsigned char *)(a5 + 8) |= 1u;
      *(void *)a5 = v17;
    }
    else
    {
      llvm::detail::IEEEFloat::convertFromHexadecimalString((uint64_t)v9, v8 + 2, v7 - 2, a4, a5);
    }
  }
  else
  {
    llvm::detail::IEEEFloat::convertFromDecimalString(v9, v8, v7, a4, a5);
  }
}

unint64_t llvm::detail::hash_value(llvm::detail *this, const llvm::detail::IEEEFloat *a2)
{
  unsigned int v2 = *((unsigned __int8 *)this + 20);
  int v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    char v18 = v2 & 7;
    int v5 = (v2 >> 3) & 1;
    if (v3 == 1) {
      LOBYTE(v5) = 0;
    }
    char v17 = v5;
    return llvm::hash_combine<unsigned char,unsigned char,unsigned int>(&v18, &v17, (int *)(*(void *)this + 8));
  }
  else
  {
    char v16 = v2 & 7;
    BOOL v15 = (v2 & 8) != 0;
    uint64_t v7 = *(void *)this;
    BOOL v10 = (void *)*((void *)this + 1);
    int v8 = (void *)((char *)this + 8);
    BOOL v9 = v10;
    uint64_t v11 = (int *)(v8 + 1);
    LODWORD(v10) = *(_DWORD *)(v7 + 8);
    uint64_t v13 = (int *)(v7 + 8);
    int v12 = (int)v10;
    if ((v10 - 64) < 0xFFFFFF80) {
      int v8 = v9;
    }
    unint64_t v14 = llvm::hashing::detail::hash_combine_range_impl<char const>(v8, (uint64_t)&v8[(v12 + 64) >> 6]);
    return llvm::hash_combine<unsigned char,unsigned char,unsigned int,int,llvm::hash_code>(&v16, (char *)&v15, v13, v11, (uint64_t *)&v14);
  }
}

unint64_t llvm::hash_combine<unsigned char,unsigned char,unsigned int>(unsigned char *a1, char *a2, int *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  {
    BOOL v9 = a2;
    BOOL v10 = a1;
    a2 = v9;
    a1 = v10;
    if (v7)
    {
      unint64_t v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v8 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v8;
      a2 = v9;
      a1 = v10;
    }
  }
  uint64_t v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  LOBYTE(v13[0]) = *a1;
  unint64_t v11 = 0;
  int v4 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v13, (uint64_t *)&v11, (unsigned char *)v13 + 1, (unint64_t)v14, *a2);
  unint64_t v12 = v11;
  int v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v13, (uint64_t *)&v12, v4, (unint64_t)v14, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v5, (char *)v14);
}

unint64_t llvm::hash_combine<unsigned char,unsigned char,unsigned int,int,llvm::hash_code>(unsigned char *a1, char *a2, int *a3, int *a4, uint64_t *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  {
    uint64_t v15 = a2;
    uint64_t v16 = a1;
    a2 = v15;
    a1 = v16;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      a2 = v15;
      a1 = v16;
    }
  }
  uint64_t v24 = llvm::hashing::detail::get_execution_seed(void)::seed;
  LOBYTE(v21[0]) = *a1;
  unint64_t v17 = 0;
  unint64_t v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v21, (uint64_t *)&v17, (unsigned char *)v21 + 1, (unint64_t)v22, *a2);
  unint64_t v18 = v17;
  BOOL v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v21, (uint64_t *)&v18, v8, (unint64_t)v22, *a3);
  unint64_t v19 = v18;
  BOOL v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v21, (uint64_t *)&v19, v9, (unint64_t)v22, *a4);
  unint64_t v20 = v19;
  unint64_t v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v21, (uint64_t *)&v20, v10, (unint64_t)v22, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v21, v20, v11, (char *)v22);
}

uint64_t llvm::detail::IEEEFloat::convertF80LongDoubleAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      uint64_t v11 = 0;
      unint64_t v7 = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        uint64_t v13 = *(void *)this;
        unint64_t v12 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v13 + 8) - 64) <= 0xFFFFFF7F) {
          unint64_t v12 = (unint64_t *)*v12;
        }
        unint64_t v7 = *v12;
      }
      else
      {
        unint64_t v7 = 0x8000000000000000;
      }
      uint64_t v11 = 0x7FFFLL;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 0x3FFF;
    uint64_t v10 = *(void *)this;
    BOOL v9 = (unint64_t *)((char *)this + 8);
    if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F) {
      BOOL v9 = (unint64_t *)*v9;
    }
    unint64_t v7 = *v9;
    if (v8 == 1) {
      unint64_t v8 = v7 >> 63;
    }
    uint64_t v11 = v8 & 0x7FFF;
  }
  v15[0] = v7;
  v15[1] = v11 & 0xFFFFFFFFFFFF7FFFLL | (((v4 >> 3) & 1) << 15);
  return llvm::APInt::APInt(a2, 0x50u, v15, 2u);
}

void llvm::detail::IEEEFloat::convertPPCDoubleDoubleAPFloatToAPInt(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = this;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(long long **)this;
  uint64_t v5 = *(void *)(*(void *)this + 16);
  long long v53 = *(_OWORD *)*(void *)this;
  uint64_t v54 = v5;
  DWORD1(v53) = -1022;
  uint64_t v49 = v4;
  int v6 = *((_DWORD *)v4 + 2);
  unsigned int v7 = v6 + 64;
  if ((v6 + 64) >= 0x80)
  {
    this = (llvm::detail::IEEEFloat *)operator new[]((v7 >> 3) & 0x1FFFFFF8);
    unsigned int v50 = this;
  }
  char v8 = *((unsigned char *)v2 + 20);
  int v9 = v8 & 7;
  char v52 = v8 & 0xF;
  int v51 = *((_DWORD *)v2 + 4);
  BOOL v11 = (v8 & 6) != 0 && v9 != 3;
  if (v9 == 1 || v11)
  {
    if ((v6 - 64) >= 0xFFFFFF80) {
      this = (llvm::detail::IEEEFloat *)&v50;
    }
    unint64_t v14 = (unint64_t *)*((void *)v2 + 1);
    uint64_t v13 = (unint64_t *)((char *)v2 + 8);
    unint64_t v12 = v14;
    if ((v6 - 64) >= 0xFFFFFF80) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = v12;
    }
    llvm::APInt::tcAssign((uint64_t)this, v15, (const unint64_t *)(v7 >> 6));
  }
  char v55 = 0;
  llvm::detail::IEEEFloat::convert((uint64_t)&v49, (uint64_t)&v53, 1, &v55);
  uint64_t v16 = v49;
  uint64_t v45 = v49;
  unsigned int v17 = *((_DWORD *)v49 + 2) + 64;
  if (v17 >= 0x80) {
    uint64_t v46 = operator new[]((v17 >> 3) & 0x1FFFFFF8);
  }
  int v18 = v52 & 7;
  unsigned __int8 v48 = v48 & 0xF0 | v52 & 0xF;
  int v47 = v51;
  BOOL v20 = (v52 & 6) != 0 && v18 != 3;
  if (v18 == 1 || v20)
  {
    int v21 = *((_DWORD *)v16 + 2);
    if ((v21 - 64) >= 0xFFFFFF80) {
      int v22 = &v46;
    }
    else {
      int v22 = v46;
    }
    if ((v21 - 64) >= 0xFFFFFF80) {
      uint64_t v23 = (unint64_t *)&v50;
    }
    else {
      uint64_t v23 = (unint64_t *)v50;
    }
    llvm::APInt::tcAssign((uint64_t)v22, v23, (const unint64_t *)((v21 + 64) >> 6));
  }
  llvm::detail::IEEEFloat::convert((uint64_t)&v45, (uint64_t)&llvm::semIEEEdouble, 1, &v55);
  int v24 = v48 & 7;
  if ((v48 & 6) == 0 || v24 == 3)
  {
    if (v24 == 3)
    {
      unint64_t v26 = 0;
      LOWORD(v25) = 0;
    }
    else
    {
      if ((v48 & 7) != 0)
      {
        if ((*((_DWORD *)v45 + 2) - 64) >= 0xFFFFFF80) {
          BOOL v27 = &v46;
        }
        else {
          BOOL v27 = (void **)v46;
        }
        unint64_t v26 = (unint64_t)*v27;
      }
      else
      {
        unint64_t v26 = 0;
      }
      LOWORD(v25) = 2047;
    }
  }
  else
  {
    LOWORD(v25) = v47 + 1023;
    if ((*((_DWORD *)v45 + 2) - 64) <= 0xFFFFFF7F)
    {
      unint64_t v26 = *(void *)v46;
      if (v47 != -1022) {
        goto LABEL_50;
      }
      goto LABEL_43;
    }
    unint64_t v26 = (unint64_t)v46;
    if (v47 == -1022) {
LABEL_43:
    }
      uint64_t v25 = (v26 >> 52) & 1;
  }
LABEL_50:
  unint64_t v56 = ((unint64_t)v48 << 60) & 0x8000000000000000 | v26 & 0xFFFFFFFFFFFFFLL | ((unint64_t)(v25 & 0x7FF) << 52);
  if ((v48 & 6) == 0 || v24 == 3 || !v55)
  {
    unint64_t v57 = 0;
    goto LABEL_96;
  }
  p_p = (void *)llvm::detail::IEEEFloat::convert((uint64_t)&v45, (uint64_t)&v53, 1, &v55);
  unint64_t v41 = v49;
  int v29 = *((_DWORD *)v49 + 2);
  unsigned int v30 = v29 + 64;
  if ((v29 + 64) >= 0x80)
  {
    p_p = operator new[]((v30 >> 3) & 0x1FFFFFF8);
    __p = p_p;
  }
  int v31 = v52 & 7;
  unsigned __int8 v44 = v52 & 0xF;
  int v43 = v51;
  BOOL v33 = (v52 & 6) != 0 && v31 != 3;
  if (v31 != 1 && !v33)
  {
    if (llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v41, (const llvm::detail::IEEEFloat *)&v45, 1) != 2)goto LABEL_64; {
LABEL_71:
    }
    int v36 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v41, (const llvm::detail::IEEEFloat *)&v45, 1);
    llvm::detail::IEEEFloat::normalize((uint64_t)&v41, 1, v36);
    int v34 = v44;
    if ((v44 & 7) != 3) {
      goto LABEL_77;
    }
    goto LABEL_72;
  }
  if ((v29 - 64) < 0xFFFFFF80)
  {
    unint64_t v35 = (unint64_t *)v50;
  }
  else
  {
    p_p = &__p;
    unint64_t v35 = (unint64_t *)&v50;
  }
  llvm::APInt::tcAssign((uint64_t)p_p, v35, (const unint64_t *)(v30 >> 6));
  if (llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v41, (const llvm::detail::IEEEFloat *)&v45, 1) == 2)goto LABEL_71; {
LABEL_64:
  }
  int v34 = v44;
  if ((v44 & 7) != 3) {
    goto LABEL_77;
  }
LABEL_72:
  if ((v48 & 7) != 3 || ((v48 ^ v34) & 8) == 0)
  {
    LOBYTE(v34) = v34 & 0xF7;
    unsigned __int8 v44 = v34;
  }
  if (*((_DWORD *)v41 + 5) == 2) {
    unsigned __int8 v44 = v34 & 0xF7;
  }
LABEL_77:
  llvm::detail::IEEEFloat::convert((uint64_t)&v41, (uint64_t)&llvm::semIEEEdouble, 1, &v55);
  int v37 = v44 & 7;
  if ((v44 & 6) == 0 || v37 == 3)
  {
    if (v37 == 3)
    {
      unint64_t v39 = 0;
      LOWORD(v38) = 0;
    }
    else
    {
      if ((v44 & 7) != 0)
      {
        if ((*((_DWORD *)v41 + 2) - 64) >= 0xFFFFFF80) {
          unsigned int v40 = &__p;
        }
        else {
          unsigned int v40 = (void **)__p;
        }
        unint64_t v39 = (unint64_t)*v40;
      }
      else
      {
        unint64_t v39 = 0;
      }
      LOWORD(v38) = 2047;
    }
  }
  else
  {
    LOWORD(v38) = v43 + 1023;
    if ((*((_DWORD *)v41 + 2) - 64) <= 0xFFFFFF7F)
    {
      unint64_t v39 = *(void *)__p;
      if (v43 != -1022) {
        goto LABEL_93;
      }
      goto LABEL_86;
    }
    unint64_t v39 = (unint64_t)__p;
    if (v43 == -1022) {
LABEL_86:
    }
      uint64_t v38 = (v39 >> 52) & 1;
  }
LABEL_93:
  unint64_t v57 = ((unint64_t)v44 << 60) & 0x8000000000000000 | v39 & 0xFFFFFFFFFFFFFLL | ((unint64_t)(v38 & 0x7FF) << 52);
  if ((*((_DWORD *)v41 + 2) - 64) <= 0xFFFFFF7F && __p) {
    operator delete[](__p);
  }
LABEL_96:
  llvm::APInt::APInt(a2, 0x80u, &v56, 2u);
  if ((*((_DWORD *)v45 + 2) - 64) <= 0xFFFFFF7F && v46) {
    operator delete[](v46);
  }
  if ((*((_DWORD *)v49 + 2) - 64) <= 0xFFFFFF7F)
  {
    if (v50) {
      operator delete[](v50);
    }
  }
}

uint64_t llvm::detail::IEEEFloat::convertQuadrupleAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      unsigned int v7 = 0;
      uint64_t v8 = 0;
      LOWORD(v9) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        uint64_t v12 = *(void *)this;
        BOOL v11 = (void *)((char *)this + 8);
        if ((*(_DWORD *)(v12 + 8) - 64) <= 0xFFFFFF7F) {
          BOOL v11 = (void *)*v11;
        }
        unsigned int v7 = (void *)*v11;
        uint64_t v8 = v11[1];
      }
      else
      {
        unsigned int v7 = 0;
        uint64_t v8 = 0;
      }
      LOWORD(v9) = 0x7FFF;
    }
  }
  else
  {
    LODWORD(v9) = *((_DWORD *)this + 4) + 0x3FFF;
    uint64_t v10 = (void *)((char *)this + 8);
    if ((*(_DWORD *)(*(void *)this + 8) - 64) <= 0xFFFFFF7F)
    {
      uint64_t v10 = (void *)*v10;
      unsigned int v7 = (void *)*v10;
      uint64_t v8 = v10[1];
      if (v9 != 1) {
        goto LABEL_19;
      }
      goto LABEL_13;
    }
    unsigned int v7 = (void *)*((void *)this + 1);
    uint64_t v8 = *((void *)this + 2);
    if (v9 == 1) {
LABEL_13:
    }
      uint64_t v9 = HIWORD(v10[1]) & 1;
  }
LABEL_19:
  v14[0] = v7;
  v14[1] = (v4 << 60) & 0x8000000000000000 | v8 & 0xFFFFFFFFFFFFLL | ((unint64_t)(v9 & 0x7FFF) << 48);
  return llvm::APInt::APInt(a2, 0x80u, v14, 2u);
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E5M2FNUZAPFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(this + 20);
  int v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOBYTE(v5) = 0;
      LOBYTE(v6) = 0;
    }
    else
    {
      uint64_t v7 = *(void *)this;
      this += 8;
      if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F) {
        this = *(void *)this;
      }
      LOBYTE(v6) = 0;
      unint64_t v5 = *(void *)this;
    }
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)(this + 16) + 16;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) <= 0xFFFFFF7F)
    {
      unint64_t v5 = **(void **)(this + 8);
      if (*(_DWORD *)(this + 16) != -15) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    unint64_t v5 = *(void *)(this + 8);
    if (*(_DWORD *)(this + 16) == -15) {
LABEL_15:
    }
      uint64_t v6 = (v5 >> 2) & 1;
  }
LABEL_16:
  *(_DWORD *)(a2 + 8) = 8;
  *(void *)a2 = (16 * v2) & 0x80 | v5 & 3 | (4 * (v6 & 0x1F));
  return this;
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3FNAPFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(this + 20);
  int v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOBYTE(v5) = 0;
      LOBYTE(v6) = 0;
    }
    else
    {
      uint64_t v7 = *(void *)this;
      this += 8;
      if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F) {
        this = *(void *)this;
      }
      unint64_t v5 = *(void *)this;
      LOBYTE(v6) = 15;
    }
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)(this + 16) + 7;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) <= 0xFFFFFF7F)
    {
      unint64_t v5 = **(void **)(this + 8);
      if (*(_DWORD *)(this + 16) != -6) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    unint64_t v5 = *(void *)(this + 8);
    if (*(_DWORD *)(this + 16) == -6) {
LABEL_15:
    }
      uint64_t v6 = (v5 >> 3) & 1;
  }
LABEL_16:
  *(_DWORD *)(a2 + 8) = 8;
  *(void *)a2 = (16 * v2) & 0x80 | v5 & 7 | (8 * (v6 & 0xF));
  return this;
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3APFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(this + 20);
  int v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOBYTE(v6) = 0;
      LOBYTE(v3) = 0;
    }
    else
    {
      if ((v2 & 7) != 0)
      {
        uint64_t v5 = *(void *)this;
        this += 8;
        if ((*(_DWORD *)(v5 + 8) - 64) <= 0xFFFFFF7F) {
          this = *(void *)this;
        }
        int v3 = *(_DWORD *)this;
      }
      LOBYTE(v6) = 15;
    }
  }
  else
  {
    int v6 = *(_DWORD *)(this + 16) + 7;
    uint64_t v7 = (void *)(this + 8);
    if ((*(_DWORD *)(*(void *)this + 8) - 64) <= 0xFFFFFF7F) {
      uint64_t v7 = (void *)*v7;
    }
    int v3 = *(_DWORD *)v7;
    if (*(_DWORD *)(this + 16) == -6) {
      LOBYTE(v6) = (v3 & 8) != 0;
    }
  }
  *(_DWORD *)(a2 + 8) = 8;
  *(void *)a2 = (16 * v2) & 0x80 | (8 * (v6 & 0xF)) | v3 & 7u;
  return this;
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3FNUZAPFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(this + 20);
  int v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOBYTE(v5) = 0;
      LOBYTE(v6) = 0;
    }
    else
    {
      uint64_t v7 = *(void *)this;
      this += 8;
      if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F) {
        this = *(void *)this;
      }
      LOBYTE(v6) = 0;
      unint64_t v5 = *(void *)this;
    }
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)(this + 16) + 8;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) <= 0xFFFFFF7F)
    {
      unint64_t v5 = **(void **)(this + 8);
      if (*(_DWORD *)(this + 16) != -7) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    unint64_t v5 = *(void *)(this + 8);
    if (*(_DWORD *)(this + 16) == -7) {
LABEL_15:
    }
      uint64_t v6 = (v5 >> 3) & 1;
  }
LABEL_16:
  *(_DWORD *)(a2 + 8) = 8;
  *(void *)a2 = (16 * v2) & 0x80 | v5 & 7 | (8 * (v6 & 0xF));
  return this;
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3B11FNUZAPFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(this + 20);
  int v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOBYTE(v5) = 0;
      LOBYTE(v6) = 0;
    }
    else
    {
      uint64_t v7 = *(void *)this;
      this += 8;
      if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F) {
        this = *(void *)this;
      }
      LOBYTE(v6) = 0;
      unint64_t v5 = *(void *)this;
    }
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)(this + 16) + 11;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) <= 0xFFFFFF7F)
    {
      unint64_t v5 = **(void **)(this + 8);
      if (*(_DWORD *)(this + 16) != -10) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    unint64_t v5 = *(void *)(this + 8);
    if (*(_DWORD *)(this + 16) == -10) {
LABEL_15:
    }
      uint64_t v6 = (v5 >> 3) & 1;
  }
LABEL_16:
  *(_DWORD *)(a2 + 8) = 8;
  *(void *)a2 = (16 * v2) & 0x80 | v5 & 7 | (8 * (v6 & 0xF));
  return this;
}

uint64_t llvm::detail::IEEEFloat::convertFloatTF32APFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(this + 20);
  int v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOWORD(v5) = 0;
      LOBYTE(v6) = 0;
    }
    else
    {
      if ((v2 & 7) != 0)
      {
        uint64_t v7 = *(void *)this;
        this += 8;
        if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F) {
          this = *(void *)this;
        }
        unint64_t v5 = *(void *)this;
      }
      else
      {
        LOWORD(v5) = 0;
      }
      LOBYTE(v6) = -1;
    }
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)(this + 16) + 127;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) <= 0xFFFFFF7F)
    {
      unint64_t v5 = **(void **)(this + 8);
      if (*(_DWORD *)(this + 16) != -126) {
        goto LABEL_19;
      }
      goto LABEL_13;
    }
    unint64_t v5 = *(void *)(this + 8);
    if (*(_DWORD *)(this + 16) == -126) {
LABEL_13:
    }
      uint64_t v6 = (v5 >> 10) & 1;
  }
LABEL_19:
  *(_DWORD *)(a2 + 8) = 19;
  *(void *)a2 = (v2 << 15) & 0x40000 | v5 & 0x3FF | ((unint64_t)v6 << 10);
  return this;
}

void llvm::detail::IEEEFloat::bitcastToAPInt(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(void **)this;
  if (*(_UNKNOWN **)this == &llvm::semIEEEhalf)
  {
    int v3 = *((unsigned __int8 *)this + 20);
    int v4 = v3 & 7;
    if ((v3 & 6) == 0 || v4 == 3)
    {
      if (v4 == 3)
      {
        LOWORD(v6) = 0;
        LOBYTE(v11) = 0;
      }
      else
      {
        if ((v3 & 7) != 0) {
          unint64_t v6 = *((void *)this + 1);
        }
        else {
          LOWORD(v6) = 0;
        }
        LOBYTE(v11) = 31;
      }
    }
    else
    {
      LODWORD(v11) = *((_DWORD *)this + 4) + 15;
      unint64_t v6 = *((void *)this + 1);
      if (*((_DWORD *)this + 4) == -14) {
        uint64_t v11 = (v6 >> 10) & 1;
      }
    }
    *(_DWORD *)(a2 + 8) = 16;
    *(void *)a2 = (v3 << 12) & 0x8000 | v6 & 0x3FF | ((unint64_t)(v11 & 0x1F) << 10);
  }
  else if (v2 == &llvm::semBFloat)
  {
    int v7 = *((unsigned __int8 *)this + 20);
    int v8 = v7 & 7;
    if ((v7 & 6) == 0 || v8 == 3)
    {
      if (v8 == 3)
      {
        LOBYTE(v10) = 0;
        LOBYTE(v16) = 0;
      }
      else
      {
        if ((v7 & 7) != 0) {
          unint64_t v10 = *((void *)this + 1);
        }
        else {
          LOBYTE(v10) = 0;
        }
        LOBYTE(v16) = -1;
      }
    }
    else
    {
      LODWORD(v16) = *((_DWORD *)this + 4) + 127;
      unint64_t v10 = *((void *)this + 1);
      if (*((_DWORD *)this + 4) == -126) {
        uint64_t v16 = (v10 >> 7) & 1;
      }
    }
    *(_DWORD *)(a2 + 8) = 16;
    *(void *)a2 = (v7 << 12) & 0x8000 | v10 & 0x7F | ((unint64_t)v16 << 7);
  }
  else if (v2 == &llvm::semIEEEsingle)
  {
    int v12 = *((unsigned __int8 *)this + 20);
    int v13 = v12 & 7;
    if ((v12 & 6) == 0 || v13 == 3)
    {
      if (v13 == 3)
      {
        LODWORD(v15) = 0;
        LOBYTE(v14) = 0;
      }
      else
      {
        if ((v12 & 7) != 0) {
          unint64_t v15 = *((void *)this + 1);
        }
        else {
          LODWORD(v15) = 0;
        }
        LOBYTE(v14) = -1;
      }
    }
    else
    {
      LODWORD(v14) = *((_DWORD *)this + 4) + 127;
      unint64_t v15 = *((void *)this + 1);
      if (*((_DWORD *)this + 4) == -126) {
        uint64_t v14 = (v15 >> 23) & 1;
      }
    }
    *(_DWORD *)(a2 + 8) = 32;
    *(void *)a2 = (v12 << 28) & 0x80000000 | v15 & 0x7FFFFF | ((unint64_t)v14 << 23);
  }
  else if (v2 == &llvm::semIEEEdouble)
  {
    uint64_t v17 = *((unsigned __int8 *)this + 20);
    int v18 = v17 & 7;
    if ((v17 & 6) == 0 || v18 == 3)
    {
      if (v18 == 3)
      {
        unint64_t v20 = 0;
        LOWORD(v19) = 0;
      }
      else
      {
        if ((v17 & 7) != 0) {
          unint64_t v20 = *((void *)this + 1);
        }
        else {
          unint64_t v20 = 0;
        }
        LOWORD(v19) = 2047;
      }
    }
    else
    {
      LODWORD(v19) = *((_DWORD *)this + 4) + 1023;
      unint64_t v20 = *((void *)this + 1);
      if (*((_DWORD *)this + 4) == -1022) {
        uint64_t v19 = (v20 >> 52) & 1;
      }
    }
    *(_DWORD *)(a2 + 8) = 64;
    *(void *)a2 = (v17 << 60) & 0x8000000000000000 | v20 & 0xFFFFFFFFFFFFFLL | ((unint64_t)(v19 & 0x7FF) << 52);
  }
  else if (v2 == &llvm::semIEEEquad)
  {
    llvm::detail::IEEEFloat::convertQuadrupleAPFloatToAPInt(this, a2);
  }
  else if (v2 == &llvm::semPPCDoubleDoubleLegacy)
  {
    llvm::detail::IEEEFloat::convertPPCDoubleDoubleAPFloatToAPInt(this, a2);
  }
  else if (v2 == &llvm::semFloat8E5M2)
  {
    int v21 = *((unsigned __int8 *)this + 20);
    int v22 = v21 & 7;
    if ((v21 & 6) == 0 || v22 == 3)
    {
      if (v22 == 3)
      {
        LOBYTE(v24) = 0;
        LOBYTE(v23) = 0;
      }
      else
      {
        if ((v21 & 7) != 0) {
          unint64_t v24 = *((void *)this + 1);
        }
        else {
          LOBYTE(v24) = 0;
        }
        LOBYTE(v23) = 31;
      }
    }
    else
    {
      LODWORD(v23) = *((_DWORD *)this + 4) + 15;
      unint64_t v24 = *((void *)this + 1);
      if (*((_DWORD *)this + 4) == -14) {
        uint64_t v23 = (v24 >> 2) & 1;
      }
    }
    *(_DWORD *)(a2 + 8) = 8;
    *(void *)a2 = (16 * v21) & 0x80 | v24 & 3 | (4 * (v23 & 0x1F));
  }
  else if (v2 == &llvm::semFloat8E5M2FNUZ)
  {
    llvm::detail::IEEEFloat::convertFloat8E5M2FNUZAPFloatToAPInt((uint64_t)this, a2);
  }
  else if (v2 == &llvm::semFloat8E4M3FN)
  {
    llvm::detail::IEEEFloat::convertFloat8E4M3FNAPFloatToAPInt((uint64_t)this, a2);
  }
  else if (v2 == &llvm::semFloat8E4M3)
  {
    llvm::detail::IEEEFloat::convertFloat8E4M3APFloatToAPInt((uint64_t)this, a2);
  }
  else if (v2 == &llvm::semFloat8E4M3FNUZ)
  {
    llvm::detail::IEEEFloat::convertFloat8E4M3FNUZAPFloatToAPInt((uint64_t)this, a2);
  }
  else if (v2 == &llvm::semFloat8E4M3B11FNUZ)
  {
    llvm::detail::IEEEFloat::convertFloat8E4M3B11FNUZAPFloatToAPInt((uint64_t)this, a2);
  }
  else if (v2 == &llvm::semFloatTF32)
  {
    llvm::detail::IEEEFloat::convertFloatTF32APFloatToAPInt((uint64_t)this, a2);
  }
  else
  {
    llvm::detail::IEEEFloat::convertF80LongDoubleAPFloatToAPInt(this, a2);
  }
}

void llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  if (*((_DWORD *)a2 + 2) >= 0x41u) {
    int v3 = *a2;
  }
  else {
    int v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = *((void *)v3 + 1);
  uint64_t v6 = v5 & 0x7FFF;
  *(void *)this = &llvm::semX87DoubleExtended;
  int v7 = (llvm::APInt *)operator new[](0x10uLL);
  *((void *)this + 1) = v7;
  char v8 = *((unsigned char *)this + 20);
  unsigned int v9 = (v5 >> 12) & 8;
  if (v6 | v4)
  {
    if (v4 != 0x8000000000000000 || v6 != 0x7FFF)
    {
      char v11 = v8 & 0xF7 | v9;
      BOOL v12 = v4 != 0x8000000000000000 && v6 == 0x7FFF;
      if (!v12 && (v4 < 0 || ((v5 & 0x7FFF) != 0 ? (BOOL v13 = v6 == 0x7FFF) : (BOOL v13 = 1), v13)))
      {
        *((unsigned char *)this + 20) = v11 & 0xF8 | 2;
        *((_DWORD *)this + 4) = v6 - 0x3FFF;
        *(void *)int v7 = v4;
        *((void *)v7 + 1) = 0;
        if ((v5 & 0x7FFF) == 0) {
          *((_DWORD *)this + 4) = -16382;
        }
      }
      else
      {
        *((unsigned char *)this + 20) = v11 & 0xF8 | 1;
        *((_DWORD *)this + 4) = 0x4000;
        *(void *)int v7 = v4;
        *((void *)v7 + 1) = 0;
      }
      return;
    }
    *((unsigned char *)this + 20) = v8 & 0xF0 | v9;
    int v14 = 0x4000;
  }
  else
  {
    *((unsigned char *)this + 20) = v9 | v8 & 0xF0 | 3;
    int v14 = -16383;
  }
  *((_DWORD *)this + 4) = v14;

  llvm::APInt::tcSet(v7, 0, 2u);
}

void llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  if (*((_DWORD *)a2 + 2) >= 0x41u) {
    int v3 = *a2;
  }
  else {
    int v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(const llvm::APInt **)v3;
  uint64_t v5 = (const llvm::APInt *)*((void *)v3 + 1);
  LODWORD(__p) = 64;
  char v11 = v4;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(this, &v11);
  llvm::detail::IEEEFloat::convert((uint64_t)this, (uint64_t)&llvm::semPPCDoubleDoubleLegacy, 1, &v14);
  if ((*((unsigned char *)this + 20) & 6) != 0 && (*((unsigned char *)this + 20) & 7) != 3)
  {
    int v10 = 64;
    unsigned int v9 = v5;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v11, &v9);
    llvm::detail::IEEEFloat::convert((uint64_t)&v11, (uint64_t)&llvm::semPPCDoubleDoubleLegacy, 1, &v14);
    if (llvm::detail::IEEEFloat::addOrSubtractSpecials(this, (const llvm::detail::IEEEFloat *)&v11, 0) == 2)
    {
      int v7 = llvm::detail::IEEEFloat::addOrSubtractSignificand(this, (const llvm::detail::IEEEFloat *)&v11, 0);
      llvm::detail::IEEEFloat::normalize((uint64_t)this, 1, v7);
    }
    int v8 = *((unsigned __int8 *)this + 20);
    if ((v8 & 7) == 3)
    {
      if ((v13 & 7) != 3 || ((v13 ^ v8) & 8) != 0)
      {
        LOBYTE(v8) = v8 & 0xF7;
        *((unsigned char *)this + 20) = v8;
      }
      if (*(_DWORD *)(*(void *)this + 20) == 2) {
        *((unsigned char *)this + 20) = v8 & 0xF7;
      }
    }
    if ((*((_DWORD *)v11 + 2) - 64) <= 0xFFFFFF7F)
    {
      if (__p) {
        operator delete[](__p);
      }
    }
  }
}

void llvm::detail::IEEEFloat::initFromDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    int v3 = *a2;
  }
  else {
    int v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 0xFFFFFFFFFFFFFLL;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 52) & 0x7FF;
  *(void *)this = &llvm::semIEEEdouble;
  char v7 = *((unsigned char *)this + 20);
  uint64_t v8 = (v5 >> 60) & 8;
  if (v6 == 2047 && v4 == 0)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | v8;
    *((_DWORD *)this + 4) = 1024;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
  else if (v6 != 2047 || v4 == 0)
  {
    if (v6 | v4)
    {
      *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 60) & 8 | 2;
      *((_DWORD *)this + 4) = v6 - 1023;
      *((void *)this + 1) = v4;
      if (v6) {
        *((void *)this + 1) = v4 | 0x10000000000000;
      }
      else {
        *((_DWORD *)this + 4) = -1022;
      }
    }
    else
    {
      *((unsigned char *)this + 20) = v7 & 0xF0 | v8 | 3;
      *((_DWORD *)this + 4) = -1023;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
  }
  else
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 60) & 8 | 1;
    *((_DWORD *)this + 4) = 1024;
    *((void *)this + 1) = v4;
  }
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *a1, void *a2, const llvm::APInt **a3)
{
  return a1;
}

void llvm::detail::IEEEFloat::initFromQuadrupleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v3 = *((unsigned int *)a2 + 2);
  uint64_t v4 = *a2;
  if (v3 < 0x41) {
    uint64_t v4 = (const llvm::APInt *)a2;
  }
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *((void *)v4 + 1) & 0xFFFFFFFFFFFFLL;
  unint64_t v7 = *((void *)v4 + ((v3 + 63) >> 6) - 1);
  *(void *)this = &llvm::semIEEEquad;
  uint64_t v8 = (llvm::APInt *)operator new[](0x10uLL);
  *((void *)this + 1) = v8;
  char v9 = *((unsigned char *)this + 20);
  if (v5) {
    uint64_t v10 = v5;
  }
  else {
    uint64_t v10 = v6;
  }
  BOOL v11 = (v5 | v6) == 0;
  char v12 = (v7 >> 60) & 8;
  uint64_t v13 = HIWORD(v7) & 0x7FFF;
  if (v13 != 0x7FFF || (v5 | v6) != 0)
  {
    if (v13 != 0x7FFF) {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      *((unsigned char *)this + 20) = v9 & 0xF0 | (v7 >> 60) & 8 | 1;
      *((_DWORD *)this + 4) = 0x4000;
      *(void *)uint64_t v8 = v5;
      *((void *)v8 + 1) = v6;
      return;
    }
    if (v10 | v13)
    {
      *((unsigned char *)this + 20) = v9 & 0xF0 | (v7 >> 60) & 8 | 2;
      *((_DWORD *)this + 4) = v13 - 0x3FFF;
      *(void *)uint64_t v8 = v5;
      *((void *)v8 + 1) = v6;
      if (v13) {
        *((void *)v8 + 1) |= 0x1000000000000uLL;
      }
      else {
        *((_DWORD *)this + 4) = -16382;
      }
      return;
    }
    *((unsigned char *)this + 20) = v12 | v9 & 0xF0 | 3;
    int v15 = -16383;
  }
  else
  {
    *((unsigned char *)this + 20) = v9 & 0xF0 | v12;
    int v15 = 0x4000;
  }
  *((_DWORD *)this + 4) = v15;

  llvm::APInt::tcSet(v8, 0, 2u);
}

void llvm::detail::IEEEFloat::initFromFloatAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    unint64_t v3 = *a2;
  }
  else {
    unint64_t v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 0x7FFFFFLL;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 23);
  *(void *)this = &llvm::semIEEEsingle;
  char v7 = *((unsigned char *)this + 20);
  unsigned int v8 = (v5 >> 28) & 8;
  if (v6 == 255 && v4 == 0)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | v8;
    *((_DWORD *)this + 4) = 128;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
  else if (v6 != 255 || v4 == 0)
  {
    if (v6 | v4)
    {
      *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 28) & 8 | 2;
      *((_DWORD *)this + 4) = v6 - 127;
      *((void *)this + 1) = v4;
      if ((v5 >> 23)) {
        *((void *)this + 1) = v4 | 0x800000;
      }
      else {
        *((_DWORD *)this + 4) = -126;
      }
    }
    else
    {
      *((unsigned char *)this + 20) = v7 & 0xF0 | v8 | 3;
      *((_DWORD *)this + 4) = -127;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
  }
  else
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 28) & 8 | 1;
    *((_DWORD *)this + 4) = 128;
    *((void *)this + 1) = v4;
  }
}

void llvm::detail::IEEEFloat::initFromBFloatAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    unint64_t v3 = *a2;
  }
  else {
    unint64_t v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 0x7FLL;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 7);
  *(void *)this = &llvm::semBFloat;
  char v7 = *((unsigned char *)this + 20);
  unsigned int v8 = (v5 >> 12) & 8;
  if (v6 == 255 && v4 == 0)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | v8;
    *((_DWORD *)this + 4) = 128;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
  else if (v6 != 255 || v4 == 0)
  {
    if (v6 | v4)
    {
      *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 12) & 8 | 2;
      *((_DWORD *)this + 4) = v6 - 127;
      *((void *)this + 1) = v4;
      if ((v5 >> 7)) {
        *((void *)this + 1) = v4 | 0x80;
      }
      else {
        *((_DWORD *)this + 4) = -126;
      }
    }
    else
    {
      *((unsigned char *)this + 20) = v7 & 0xF0 | v8 | 3;
      *((_DWORD *)this + 4) = -127;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
  }
  else
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 12) & 8 | 1;
    *((_DWORD *)this + 4) = 128;
    *((void *)this + 1) = v4;
  }
}

void llvm::detail::IEEEFloat::initFromHalfAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    unint64_t v3 = *a2;
  }
  else {
    unint64_t v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 0x3FFLL;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 10) & 0x1F;
  *(void *)this = &llvm::semIEEEhalf;
  char v7 = *((unsigned char *)this + 20);
  unsigned int v8 = (v5 >> 12) & 8;
  if (v6 == 31 && v4 == 0)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | v8;
    *((_DWORD *)this + 4) = 16;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
  else if (v6 != 31 || v4 == 0)
  {
    if (v6 | v4)
    {
      *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 12) & 8 | 2;
      *((_DWORD *)this + 4) = v6 - 15;
      *((void *)this + 1) = v4;
      if (v6) {
        *((void *)this + 1) = v4 | 0x400;
      }
      else {
        *((_DWORD *)this + 4) = -14;
      }
    }
    else
    {
      *((unsigned char *)this + 20) = v7 & 0xF0 | v8 | 3;
      *((_DWORD *)this + 4) = -15;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
  }
  else
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 12) & 8 | 1;
    *((_DWORD *)this + 4) = 16;
    *((void *)this + 1) = v4;
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E5M2APInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    unint64_t v3 = *a2;
  }
  else {
    unint64_t v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 3;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 2) & 0x1F;
  *(void *)this = &llvm::semFloat8E5M2;
  char v7 = *((unsigned char *)this + 20);
  unsigned int v8 = (v5 >> 4) & 8;
  if (v6 == 31 && v4 == 0)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | v8;
    *((_DWORD *)this + 4) = 16;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
  else if (v6 != 31 || v4 == 0)
  {
    if (v6 | v4)
    {
      *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 2;
      *((_DWORD *)this + 4) = v6 - 15;
      *((void *)this + 1) = v4;
      if (v6) {
        *((void *)this + 1) = v4 | 4;
      }
      else {
        *((_DWORD *)this + 4) = -14;
      }
    }
    else
    {
      *((unsigned char *)this + 20) = v7 & 0xF0 | v8 | 3;
      *((_DWORD *)this + 4) = -15;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
  }
  else
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 1;
    *((_DWORD *)this + 4) = 16;
    *((void *)this + 1) = v4;
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E5M2FNUZAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    unint64_t v3 = *a2;
  }
  else {
    unint64_t v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 3;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 2) & 0x1F;
  *(void *)this = &llvm::semFloat8E5M2FNUZ;
  char v7 = *((unsigned char *)this + 20);
  if (v6 | v4)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 2;
    *((_DWORD *)this + 4) = v6 - 16;
    *((void *)this + 1) = v4;
    if (v6) {
      *((void *)this + 1) = v4 | 4;
    }
    else {
      *((_DWORD *)this + 4) = -15;
    }
  }
  else if (((v5 >> 4) & 8) != 0)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 1;
    *((_DWORD *)this + 4) = -16;
    *((void *)this + 1) = 0;
  }
  else
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | 3;
    *((_DWORD *)this + 4) = -16;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3FNAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    unint64_t v3 = *a2;
  }
  else {
    unint64_t v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 7;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 3) & 0xF;
  *(void *)this = &llvm::semFloat8E4M3FN;
  char v7 = *((unsigned char *)this + 20);
  if (v6 == 15 && v4 == 7)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 1;
    *((_DWORD *)this + 4) = 8;
    *((void *)this + 1) = 7;
  }
  else if (v6 | v4)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 2;
    *((_DWORD *)this + 4) = v6 - 7;
    *((void *)this + 1) = v4;
    if (v6) {
      *((void *)this + 1) = v4 | 8;
    }
    else {
      *((_DWORD *)this + 4) = -6;
    }
  }
  else
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 3;
    *((_DWORD *)this + 4) = -7;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3APInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  if (*((_DWORD *)a2 + 2) >= 0x41u) {
    unint64_t v2 = *a2;
  }
  else {
    unint64_t v2 = (const llvm::APInt *)a2;
  }
  uint64_t v3 = *(void *)v2;
  unsigned int v4 = (v3 >> 3) & 0xF;
  *(void *)this = &llvm::semFloat8E4M3;
  unsigned int v5 = (v3 >> 4) & 8;
  char v6 = *((unsigned char *)this + 20) & 0xF0;
  if (v4 | v3 & 7)
  {
    if ((v3 & 7) == 0 && v4 == 15)
    {
      *((unsigned char *)this + 20) = v6 | v5;
      *((_DWORD *)this + 4) = 8;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
    else
    {
      char v8 = v6 | v5;
      if ((v3 & 7) != 0 && v4 == 15)
      {
        *((unsigned char *)this + 20) = v8 | 1;
        *((_DWORD *)this + 4) = 8;
        *((void *)this + 1) = v3 & 7;
      }
      else
      {
        *((unsigned char *)this + 20) = v8 | 2;
        *((_DWORD *)this + 4) = v4 - 7;
        uint64_t v10 = v3 & 7;
        *((void *)this + 1) = v10;
        if (v4) {
          *((void *)this + 1) = v10 | 8;
        }
        else {
          *((_DWORD *)this + 4) = -6;
        }
      }
    }
  }
  else
  {
    *((unsigned char *)this + 20) = v5 | v6 | 3;
    *((_DWORD *)this + 4) = -7;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3FNUZAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    uint64_t v3 = *a2;
  }
  else {
    uint64_t v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 7;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 3) & 0xF;
  *(void *)this = &llvm::semFloat8E4M3FNUZ;
  char v7 = *((unsigned char *)this + 20);
  if (v6 | v4)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 2;
    *((_DWORD *)this + 4) = v6 - 8;
    *((void *)this + 1) = v4;
    if (v6) {
      *((void *)this + 1) = v4 | 8;
    }
    else {
      *((_DWORD *)this + 4) = -7;
    }
  }
  else if (((v5 >> 4) & 8) != 0)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 1;
    *((_DWORD *)this + 4) = -8;
    *((void *)this + 1) = 0;
  }
  else
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | 3;
    *((_DWORD *)this + 4) = -8;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3B11FNUZAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    uint64_t v3 = *a2;
  }
  else {
    uint64_t v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 7;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 3) & 0xF;
  *(void *)this = &llvm::semFloat8E4M3B11FNUZ;
  char v7 = *((unsigned char *)this + 20);
  if (v6 | v4)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 2;
    *((_DWORD *)this + 4) = v6 - 11;
    *((void *)this + 1) = v4;
    if (v6) {
      *((void *)this + 1) = v4 | 8;
    }
    else {
      *((_DWORD *)this + 4) = -10;
    }
  }
  else if (((v5 >> 4) & 8) != 0)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 1;
    *((_DWORD *)this + 4) = -11;
    *((void *)this + 1) = 0;
  }
  else
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | 3;
    *((_DWORD *)this + 4) = -11;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
}

void llvm::detail::IEEEFloat::initFromFloatTF32APInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    uint64_t v3 = *a2;
  }
  else {
    uint64_t v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 0x3FFLL;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 10);
  *(void *)this = &llvm::semFloatTF32;
  char v7 = *((unsigned char *)this + 20);
  unsigned int v8 = (v5 >> 15) & 8;
  if (v6 == 255 && v4 == 0)
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | v8;
    *((_DWORD *)this + 4) = 128;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
  else if (v6 != 255 || v4 == 0)
  {
    if (v6 | v4)
    {
      *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 15) & 8 | 2;
      *((_DWORD *)this + 4) = v6 - 127;
      *((void *)this + 1) = v4;
      if ((v5 >> 10)) {
        *((void *)this + 1) = v4 | 0x400;
      }
      else {
        *((_DWORD *)this + 4) = -126;
      }
    }
    else
    {
      *((unsigned char *)this + 20) = v7 & 0xF0 | v8 | 3;
      *((_DWORD *)this + 4) = -127;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
  }
  else
  {
    *((unsigned char *)this + 20) = v7 & 0xF0 | (v5 >> 15) & 8 | 1;
    *((_DWORD *)this + 4) = 128;
    *((void *)this + 1) = v4;
  }
}

void llvm::detail::IEEEFloat::initFromAPInt(llvm::detail::IEEEFloat *a1, void *a2, const llvm::APInt **a3)
{
  if (a2 == &llvm::semIEEEhalf)
  {
    llvm::detail::IEEEFloat::initFromHalfAPInt(a1, a3);
  }
  else if (a2 == &llvm::semBFloat)
  {
    llvm::detail::IEEEFloat::initFromBFloatAPInt(a1, a3);
  }
  else if (a2 == &llvm::semIEEEsingle)
  {
    llvm::detail::IEEEFloat::initFromFloatAPInt(a1, a3);
  }
  else if (a2 == &llvm::semIEEEdouble)
  {
    llvm::detail::IEEEFloat::initFromDoubleAPInt(a1, a3);
  }
  else if (a2 == &llvm::semX87DoubleExtended)
  {
    llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt(a1, a3);
  }
  else if (a2 == &llvm::semIEEEquad)
  {
    llvm::detail::IEEEFloat::initFromQuadrupleAPInt(a1, a3);
  }
  else if (a2 == &llvm::semPPCDoubleDoubleLegacy)
  {
    llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E5M2)
  {
    llvm::detail::IEEEFloat::initFromFloat8E5M2APInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E5M2FNUZ)
  {
    llvm::detail::IEEEFloat::initFromFloat8E5M2FNUZAPInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E4M3FN)
  {
    llvm::detail::IEEEFloat::initFromFloat8E4M3FNAPInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E4M3)
  {
    llvm::detail::IEEEFloat::initFromFloat8E4M3APInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E4M3FNUZ)
  {
    llvm::detail::IEEEFloat::initFromFloat8E4M3FNUZAPInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E4M3B11FNUZ)
  {
    llvm::detail::IEEEFloat::initFromFloat8E4M3B11FNUZAPInt(a1, a3);
  }
  else
  {
    llvm::detail::IEEEFloat::initFromFloatTF32APInt(a1, a3);
  }
}

void *llvm::detail::IEEEFloat::makeLargest(llvm::detail::IEEEFloat *this, int a2)
{
  if (a2) {
    char v3 = 10;
  }
  else {
    char v3 = 2;
  }
  *((unsigned char *)this + 20) = v3 | *((unsigned char *)this + 20) & 0xF0;
  uint64_t v4 = *(void *)this;
  *((_DWORD *)this + 4) = **(_DWORD **)this;
  int v5 = *(_DWORD *)(v4 + 8);
  uint64_t v6 = (void *)((char *)this + 8);
  if ((v5 - 64) <= 0xFFFFFF7F) {
    uint64_t v6 = (void *)*v6;
  }
  unsigned int v7 = v5 + 64;
  uint64_t result = memset(v6, 255, 8 * (((v5 + 64) >> 6) - 1));
  uint64_t v9 = *(void *)this;
  if ((v7 & 0xFFFFFFC0) - *(_DWORD *)(*(void *)this + 8) >= 0x40) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> ((v7 & 0xC0) - *(unsigned char *)(*(void *)this + 8));
  }
  v6[(v7 >> 6) - 1] = v10;
  if (*(_DWORD *)(v9 + 16) == 1 && *(_DWORD *)(v9 + 20) == 1) {
    *v6 &= ~1uLL;
  }
  return result;
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, float a2)
{
  int v5 = 32;
  uint64_t v4 = (const llvm::APInt *)LODWORD(a2);
  llvm::detail::IEEEFloat::initFromFloatAPInt(this, &v4);
  return this;
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, double a2)
{
  int v5 = 64;
  uint64_t v4 = *(const llvm::APInt **)&a2;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(this, &v4);
  return this;
}

void llvm::detail::IEEEFloat::toString(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, int a5)
{
  v122[32] = *MEMORY[0x1E4F143B8];
  int v9 = *(unsigned char *)(a1 + 20) & 7;
  if (v9 == 3)
  {
    if ((*(unsigned char *)(a1 + 20) & 8) != 0)
    {
      uint64_t v13 = a2[1];
      if (v13 + 1 > (unint64_t)a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v13 + 1, 1);
        uint64_t v13 = a2[1];
      }
      *(unsigned char *)(*a2 + v13) = 45;
      ++a2[1];
    }
    uint64_t v14 = a2[1];
    if (a4)
    {
      if (v14 + 1 > (unint64_t)a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v14 + 1, 1);
        uint64_t v14 = a2[1];
      }
      *(unsigned char *)(*a2 + v14) = 48;
      ++a2[1];
    }
    else
    {
      unint64_t v32 = a2[2];
      if (!a5)
      {
        if (v32 < v14 + 3)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v14 + 3, 1);
          uint64_t v14 = a2[1];
        }
        uint64_t v42 = *a2 + v14;
        *(unsigned char *)(v42 + 2) = 48;
        *(_WORD *)uint64_t v42 = 11824;
        uint64_t v10 = a2[1] + 3;
        a2[1] = v10;
        if (a3 >= 2)
        {
          uint64_t v43 = a3 - 1;
          if (v10 + v43 > (unint64_t)a2[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v10 + v43, 1);
            uint64_t v10 = a2[1];
          }
          memset((void *)(*a2 + v10), 48, a3 - 1);
          uint64_t v10 = a2[1] + v43;
          a2[1] = v10;
        }
        if (a2[2] < (unint64_t)(v10 + 4))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v10 + 4, 1);
          uint64_t v10 = a2[1];
        }
        uint64_t v30 = *a2;
        int v31 = 808463205;
        goto LABEL_72;
      }
      if (v32 < v14 + 6)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v14 + 6, 1);
        uint64_t v14 = a2[1];
      }
      uint64_t v33 = *a2 + v14;
      *(_WORD *)(v33 + 4) = 12331;
      *(_DWORD *)uint64_t v33 = 1160785456;
      a2[1] += 6;
    }
  }
  else
  {
    if (v9 != 1)
    {
      if ((*(unsigned char *)(a1 + 20) & 7) == 0)
      {
        uint64_t v10 = a2[1];
        unint64_t v11 = a2[2];
        unint64_t v12 = v10 + 4;
        if ((*(unsigned char *)(a1 + 20) & 8) == 0)
        {
          if (v11 < v10 + 4)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v12, 1);
            uint64_t v10 = a2[1];
          }
          *(_DWORD *)(*a2 + v10) = 1718503723;
          goto LABEL_73;
        }
        if (v11 < v10 + 4)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v12, 1);
          uint64_t v10 = a2[1];
        }
        uint64_t v30 = *a2;
        int v31 = 1718503725;
LABEL_72:
        *(_DWORD *)(v30 + v10) = v31;
LABEL_73:
        a2[1] += 4;
        return;
      }
      if ((*(unsigned char *)(a1 + 20) & 8) != 0)
      {
        uint64_t v18 = a2[1];
        if (v18 + 1 > (unint64_t)a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v18 + 1, 1);
          uint64_t v18 = a2[1];
        }
        *(unsigned char *)(*a2 + v18) = 45;
        ++a2[1];
      }
      int v19 = *(_DWORD *)(*(void *)a1 + 8);
      unint64_t v20 = (void *)(a1 + 8);
      if ((v19 - 64) <= 0xFFFFFF7F) {
        unint64_t v20 = (void *)*v20;
      }
      int v21 = *(_DWORD *)(a1 + 16);
      llvm::APInt::APInt((uint64_t)&__p, *(_DWORD *)(*(void *)a1 + 8), v20, (v19 + 63) >> 6);
      if (a3)
      {
        unsigned int v25 = v117;
        if (v117 <= 0x40) {
          goto LABEL_27;
        }
      }
      else
      {
        a3 = 59 * *(_DWORD *)(*(void *)a1 + 8) / 0xC4u + 2;
        unsigned int v25 = v117;
        if (v117 <= 0x40)
        {
LABEL_27:
          unsigned int v26 = __clz(__rbit64((unint64_t)__p));
          if (v25 >= v26) {
            unsigned int v27 = v26;
          }
          else {
            unsigned int v27 = v25;
          }
          if (v25 <= v26)
          {
            __p = 0;
            unsigned int v36 = v21 - v19 + v27;
            signed int v29 = v36 + 1;
            if (v36 == -1) {
              goto LABEL_82;
            }
          }
          else
          {
            __p = (void *)((unint64_t)__p >> v27);
            unsigned int v28 = v21 - v19 + v27;
            signed int v29 = v28 + 1;
            if (v28 == -1) {
              goto LABEL_82;
            }
          }
LABEL_44:
          if (v29 < 1)
          {
            unsigned int v39 = *(_DWORD *)(*(void *)a1 + 8) + (-137 * v29 + 136) / 59;
            llvm::APInt::zext((const void **)&__p, v39, (uint64_t)&__dst);
            if (v117 >= 0x41 && __p) {
              operator delete[](__p);
            }
            int v40 = -v29;
            __p = __dst;
            unsigned int v117 = v121;
            LODWORD(v121) = v39;
            if (v39 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 5, 0);
            }
            else
            {
              unint64_t v41 = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)v39) & 5);
              if (!v39) {
                unint64_t v41 = 0;
              }
              __dst = v41;
            }
            while (1)
            {
              if (v40) {
                llvm::APInt::operator*=((uint64_t)&__p, (const unint64_t **)&__dst);
              }
              if (v40 < 2) {
                break;
              }
              v40 >>= 1;
              llvm::APInt::operator*=((uint64_t)&__dst, (const unint64_t **)&__dst);
            }
            if (v121 >= 0x41 && __dst) {
              operator delete[](__dst);
            }
          }
          else
          {
            llvm::APInt::zext((const void **)&__p, *(_DWORD *)(*(void *)a1 + 8) + v29, (uint64_t)&__dst);
            if (v117 >= 0x41 && __p) {
              operator delete[](__p);
            }
            __p = __dst;
            unsigned int v117 = v121;
            if (v121 > 0x40)
            {
              llvm::APInt::shlSlowCase((const void **)&__p, v29);
              signed int v29 = 0;
            }
            else
            {
              uint64_t v37 = (void)__dst << v29;
              if (v121 == v29) {
                uint64_t v37 = 0;
              }
              if (v121) {
                unint64_t v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v121;
              }
              else {
                unint64_t v38 = 0;
              }
              __p = (void *)(v37 & v38);
              signed int v29 = 0;
            }
          }
LABEL_82:
          unsigned int v44 = v117;
          if (v117 > 0x40) {
            int v45 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
          }
          else {
            int v45 = v117 + __clz((unint64_t)__p) - 64;
          }
          unsigned int v46 = (196 * a3 + 58) / 0x3B;
          if (v44 - v45 <= v46) {
            goto LABEL_114;
          }
          unsigned int v47 = 59 * (v44 - v45 - v46);
          if (v47 < 0xC4) {
            goto LABEL_114;
          }
          unsigned int v48 = v47 / 0xC4;
          v29 += v47 / 0xC4;
          LODWORD(v121) = v44;
          if (v44 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 1, 0);
            unsigned int v44 = v117;
            LODWORD(v112) = v117;
            if (v117 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v111, 10, 0);
              while (1)
              {
LABEL_95:
                if (v48) {
                  llvm::APInt::operator*=((uint64_t)&__dst, (const unint64_t **)&v111);
                }
                if (v48 < 2) {
                  break;
                }
                v48 >>= 1;
                llvm::APInt::operator*=((uint64_t)&v111, (const unint64_t **)&v111);
              }
              llvm::APInt::udiv((const void **)&__p, (size_t)&__dst, (llvm::APInt *)&v118);
              if (v117 >= 0x41 && __p) {
                operator delete[](__p);
              }
              __p = v118;
              unsigned int v50 = v119;
              unsigned int v117 = v119;
              if (v119 > 0x40) {
                int v51 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
              }
              else {
                int v51 = v119 + __clz((unint64_t)v118) - 64;
              }
              llvm::APInt::trunc((char *)&__p, v50 - v51, (uint64_t)&v118);
              if (v117 >= 0x41 && __p) {
                operator delete[](__p);
              }
              __p = v118;
              unsigned int v117 = v119;
              if (v112 >= 0x41 && v111) {
                operator delete[](v111);
              }
              if (v121 >= 0x41 && __dst) {
                operator delete[](__dst);
              }
              unsigned int v44 = v117;
LABEL_114:
              __dst = v122;
              long long v121 = xmmword_1811012D0;
              if (v44 > 3)
              {
                unsigned int v119 = v44;
                if (v44 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v118, 10, 0);
                  unsigned int v115 = v44;
                  llvm::APInt::initSlowCase((llvm::APInt *)&v114, 0, 0);
                  unsigned int v52 = v117;
                  if (v117 < 0x41) {
                    goto LABEL_128;
                  }
LABEL_125:
                  if (v52 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) > 0x40
                    || *(void *)__p)
                  {
                    while (1)
                    {
                      llvm::APInt::udivrem((llvm::APInt *)&__p, (const llvm::APInt *)&v118, &__p, (llvm::APInt *)&v114, v22, v23, v24);
                      long long v53 = (unsigned int *)(v115 >= 0x41 ? v114 : &v114);
                      uint64_t v54 = *v53;
                      if (v54) {
                        break;
                      }
                      ++v29;
                      unsigned int v52 = v117;
                      if (v117 >= 0x41) {
                        goto LABEL_125;
                      }
LABEL_128:
                      if (!__p) {
                        goto LABEL_147;
                      }
                    }
                    char v55 = v54 + 48;
                    uint64_t v56 = v121;
                    if ((unint64_t)(v121 + 1) > *((void *)&v121 + 1))
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v122, v121 + 1, 1);
                      uint64_t v56 = v121;
                    }
                    *((unsigned char *)__dst + v56) = v55;
                    *(void *)&long long v121 = v121 + 1;
                    unsigned int v57 = v117;
                    if (v117 < 0x41) {
                      goto LABEL_139;
                    }
                    while (v57 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) > 0x40
                         || *(void *)__p)
                    {
                      while (1)
                      {
                        llvm::APInt::udivrem((llvm::APInt *)&__p, (const llvm::APInt *)&v118, &__p, (llvm::APInt *)&v114, v22, v23, v24);
                        if (v115 >= 0x41) {
                          uint64_t v58 = (char *)v114;
                        }
                        else {
                          uint64_t v58 = (char *)&v114;
                        }
                        char v59 = *v58;
                        uint64_t v60 = v121;
                        if ((unint64_t)(v121 + 1) > *((void *)&v121 + 1))
                        {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v122, v121 + 1, 1);
                          uint64_t v60 = v121;
                        }
                        *((unsigned char *)__dst + v60) = v59 + 48;
                        *(void *)&long long v121 = v121 + 1;
                        unsigned int v57 = v117;
                        if (v117 >= 0x41) {
                          break;
                        }
LABEL_139:
                        if (!__p) {
                          goto LABEL_147;
                        }
                      }
                    }
                  }
LABEL_147:
                  LODWORD(v61) = v121;
                  uint64_t v62 = v121 - a3;
                  if (v121 <= a3)
                  {
LABEL_171:
                    if (a4)
                    {
                      if (v29 < 0)
                      {
                        int v76 = v29 + v61;
                        if (((v29 + v61 - 1) & 0x80000000) == 0 || 1 - v76 <= a4)
                        {
                          if (v76 < 1)
                          {
                            llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 48);
                            llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 46);
                            if (v76)
                            {
                              uint64_t v107 = a2[1];
                              do
                              {
                                if (v107 + 1 > (unint64_t)a2[2])
                                {
                                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v107 + 1, 1);
                                  uint64_t v107 = a2[1];
                                }
                                *(unsigned char *)(*a2 + v107) = 48;
                                uint64_t v107 = a2[1] + 1;
                                a2[1] = v107;
                                BOOL v70 = __CFADD__(v76++, 1);
                              }
                              while (!v70);
                              int v76 = 0;
                            }
                          }
                          else
                          {
                            uint64_t v103 = a2[1];
                            unsigned int v104 = v61 - 1;
                            uint64_t v105 = (v29 + v61);
                            do
                            {
                              char v106 = *((unsigned char *)__dst + v104);
                              if (v103 + 1 > (unint64_t)a2[2])
                              {
                                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v103 + 1, 1);
                                uint64_t v103 = a2[1];
                              }
                              *(unsigned char *)(*a2 + v103) = v106;
                              uint64_t v103 = a2[1] + 1;
                              a2[1] = v103;
                              --v104;
                              --v105;
                            }
                            while (v105);
                            llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 46);
                          }
                          if (v76 != v61)
                          {
                            uint64_t v108 = a2[1];
                            unsigned int v109 = ~v76 + v61;
                            do
                            {
                              char v110 = *((unsigned char *)__dst + v109);
                              if (v108 + 1 > (unint64_t)a2[2])
                              {
                                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v108 + 1, 1);
                                uint64_t v108 = a2[1];
                              }
                              *(unsigned char *)(*a2 + v108) = v110;
                              uint64_t v108 = a2[1] + 1;
                              a2[1] = v108;
                              --v109;
                            }
                            while (v109 != -1);
                          }
                          goto LABEL_227;
                        }
                      }
                      else if (v29 <= a4 && v29 + (int)v61 <= a3)
                      {
                        if (v61)
                        {
                          uint64_t v72 = v61;
                          uint64_t v73 = a2[1];
                          unsigned int v74 = v61 - 1;
                          do
                          {
                            char v75 = *((unsigned char *)__dst + v74);
                            if (v73 + 1 > (unint64_t)a2[2])
                            {
                              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v73 + 1, 1);
                              uint64_t v73 = a2[1];
                            }
                            *(unsigned char *)(*a2 + v73) = v75;
                            uint64_t v73 = a2[1] + 1;
                            a2[1] = v73;
                            --v74;
                            --v72;
                          }
                          while (v72);
                        }
                        if (v29)
                        {
                          uint64_t v100 = a2[1];
                          do
                          {
                            if (v100 + 1 > (unint64_t)a2[2])
                            {
                              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v100 + 1, 1);
                              uint64_t v100 = a2[1];
                            }
                            *(unsigned char *)(*a2 + v100) = 48;
                            uint64_t v100 = a2[1] + 1;
                            a2[1] = v100;
                            --v29;
                          }
                          while (v29);
                        }
LABEL_227:
                        if (v115 >= 0x41 && v114) {
                          operator delete[](v114);
                        }
                        if (v119 >= 0x41 && v118) {
                          operator delete[](v118);
                        }
                        if (__dst != v122) {
                          free(__dst);
                        }
                        if (v117 >= 0x41 && __p) {
                          operator delete[](__p);
                        }
                        return;
                      }
                    }
                    unsigned int v77 = v61 - 1;
                    char v78 = *((unsigned char *)__dst + (v61 - 1));
                    uint64_t v79 = a2[1];
                    if (v79 + 1 > (unint64_t)a2[2])
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v79 + 1, 1);
                      uint64_t v79 = a2[1];
                    }
                    *(unsigned char *)(*a2 + v79) = v78;
                    uint64_t v80 = a2[1];
                    unint64_t v81 = a2[2];
                    uint64_t v82 = v80 + 1;
                    a2[1] = v80 + 1;
                    if (v80 + 2 > v81)
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v80 + 2, 1);
                      uint64_t v82 = a2[1];
                    }
                    *(unsigned char *)(*a2 + v82) = 46;
                    uint64_t v83 = a2[1];
                    uint64_t v84 = v83 + 1;
                    a2[1] = v83 + 1;
                    if v61 == 1 && (a5)
                    {
                      if (v83 + 2 > (unint64_t)a2[2])
                      {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v83 + 2, 1);
                        uint64_t v84 = a2[1];
                      }
                      *(unsigned char *)(*a2 + v84) = 48;
                      uint64_t v84 = a2[1] + 1;
                      a2[1] = v84;
                    }
                    else if (v61 != 1)
                    {
                      unsigned int v101 = v61 - 2;
                      do
                      {
                        char v102 = *((unsigned char *)__dst + v101);
                        if (v84 + 1 > (unint64_t)a2[2])
                        {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v84 + 1, 1);
                          uint64_t v84 = a2[1];
                        }
                        *(unsigned char *)(*a2 + v84) = v102;
                        uint64_t v84 = a2[1] + 1;
                        a2[1] = v84;
                        --v101;
                      }
                      while (v101 != -1);
                    }
                    if (a5)
                    {
                      char v85 = 69;
LABEL_201:
                      int v87 = v77 + v29;
                      if (v84 + 1 > (unint64_t)a2[2])
                      {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v84 + 1, 1);
                        uint64_t v84 = a2[1];
                      }
                      *(unsigned char *)(*a2 + v84) = v85;
                      uint64_t v88 = a2[1];
                      unint64_t v89 = a2[2];
                      uint64_t v90 = v88 + 1;
                      a2[1] = v88 + 1;
                      if (v87 < 0) {
                        char v91 = 45;
                      }
                      else {
                        char v91 = 43;
                      }
                      if (v88 + 2 > v89)
                      {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v88 + 2, 1);
                        uint64_t v90 = a2[1];
                      }
                      unint64_t v92 = 0;
                      *(unsigned char *)(*a2 + v90) = v91;
                      ++a2[1];
                      if (v87 >= 0) {
                        unsigned int v93 = v87;
                      }
                      else {
                        unsigned int v93 = -v87;
                      }
                      unsigned int v111 = &v113;
                      long long v112 = xmmword_181126D30;
                      do
                      {
                        if (v92 + 1 > *((void *)&v112 + 1))
                        {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v111, &v113, v92 + 1, 1);
                          unint64_t v92 = v112;
                        }
                        *((unsigned char *)v111 + v92) = (v93 % 0xA) | 0x30;
                        uint64_t v94 = v112;
                        unint64_t v92 = v112 + 1;
                        *(void *)&long long v112 = v112 + 1;
                        BOOL v95 = v93 > 9;
                        v93 /= 0xAu;
                      }
                      while (v95);
                      if ((a5 & 1) == 0 && v92 <= 1)
                      {
                        if ((unint64_t)(v94 + 2) > *((void *)&v112 + 1))
                        {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v111, &v113, v94 + 2, 1);
                          unint64_t v92 = v112;
                        }
                        *((unsigned char *)v111 + v92) = 48;
                        LODWORD(v92) = v112 + 1;
                        *(void *)&long long v112 = v112 + 1;
                      }
                      uint64_t v96 = v92;
                      if (v92)
                      {
                        uint64_t v97 = a2[1];
                        unsigned int v98 = v92 - 1;
                        do
                        {
                          char v99 = *((unsigned char *)v111 + v98);
                          if (v97 + 1 > (unint64_t)a2[2])
                          {
                            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v97 + 1, 1);
                            uint64_t v97 = a2[1];
                          }
                          *(unsigned char *)(*a2 + v97) = v99;
                          uint64_t v97 = a2[1] + 1;
                          a2[1] = v97;
                          --v98;
                          --v96;
                        }
                        while (v96);
                      }
                      if (v111 != &v113) {
                        free(v111);
                      }
                      goto LABEL_227;
                    }
                    if (a3 <= v77)
                    {
LABEL_200:
                      char v85 = 101;
                      goto LABEL_201;
                    }
                    size_t v86 = a3 - v61 + 1;
                    if (v84 + v86 > a2[2])
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v84 + v86, 1);
                      uint64_t v84 = a2[1];
                      if (!v86) {
                        goto LABEL_199;
                      }
                    }
                    else if (!v86)
                    {
LABEL_199:
                      v84 += v86;
                      a2[1] = v84;
                      goto LABEL_200;
                    }
                    memset((void *)(*a2 + v84), 48, v86);
                    uint64_t v84 = a2[1];
                    goto LABEL_199;
                  }
                  unsigned int v63 = __dst;
                  if (*((char *)__dst + (v62 - 1)) >= 53)
                  {
                    if (a3)
                    {
                      int v68 = -a3;
                      while (1)
                      {
                        uint64_t v62 = (v121 + v68);
                        int v69 = *((unsigned __int8 *)__dst + v62);
                        if (v69 != 57) {
                          break;
                        }
                        BOOL v70 = __CFADD__(v68++, 1);
                        if (v70) {
                          goto LABEL_164;
                        }
                      }
                      *((unsigned char *)__dst + v62) = v69 + 1;
                    }
                    if (v62 == v61)
                    {
LABEL_164:
                      uint64_t v71 = 0;
                      *(void *)&long long v121 = 0;
                      if (!*((void *)&v121 + 1))
                      {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v122, 1uLL, 1);
                        uint64_t v71 = v121;
                      }
                      *((unsigned char *)__dst + v71) = 49;
                      LODWORD(v62) = v61;
                      int64_t v61 = v121 + 1;
                      goto LABEL_170;
                    }
                    unsigned int v63 = __dst;
                    int v65 = (char *)__dst + v62;
                    size_t v66 = v121 - v62;
                    if ((void)v121 == v62) {
                      goto LABEL_155;
                    }
                  }
                  else
                  {
                    if (v62 < v121)
                    {
                      unsigned int v64 = a3;
                      while (*((unsigned char *)__dst + v62) == 48)
                      {
                        ++v62;
                        if (!--v64)
                        {
                          LODWORD(v62) = v121;
                          break;
                        }
                      }
                    }
                    int v65 = (char *)__dst + v62;
                    size_t v66 = v121 - v62;
                    if ((void)v121 == v62)
                    {
LABEL_155:
                      uint64_t v67 = v63;
LABEL_169:
                      int64_t v61 = &v63[v66] - v67;
LABEL_170:
                      v29 += v62;
                      *(void *)&long long v121 = v61;
                      goto LABEL_171;
                    }
                  }
                  memmove(v63, v65, v66);
                  uint64_t v67 = __dst;
                  goto LABEL_169;
                }
              }
              else
              {
                unsigned int v44 = 4;
                llvm::APInt::zext((const void **)&__p, 4u, (uint64_t)&v111);
                if (v117 >= 0x41 && __p) {
                  operator delete[](__p);
                }
                __p = v111;
                unsigned int v117 = v112;
                unsigned int v119 = 4;
              }
              uint64_t v118 = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)v44) & 0xA);
              unsigned int v115 = v44;
              uint64_t v114 = 0;
              unsigned int v52 = v117;
              if (v117 < 0x41) {
                goto LABEL_128;
              }
              goto LABEL_125;
            }
          }
          else
          {
            __dst = (void *)(v44 != 0);
            LODWORD(v112) = v44;
          }
          uint64_t v49 = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)v44) & 0xA);
          if (!v44) {
            uint64_t v49 = 0;
          }
          unsigned int v111 = v49;
          goto LABEL_95;
        }
      }
      unsigned int v34 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&__p);
      llvm::APInt::lshrSlowCase(&__p, v34);
      unsigned int v35 = v21 - v19 + v34;
      signed int v29 = v35 + 1;
      if (v35 == -1) {
        goto LABEL_82;
      }
      goto LABEL_44;
    }
    uint64_t v15 = a2[1];
    if (a2[2] < (unint64_t)(v15 + 3))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v15 + 3, 1);
      uint64_t v15 = a2[1];
    }
    uint64_t v16 = *a2 + v15;
    *(unsigned char *)(v16 + 2) = 78;
    *(_WORD *)uint64_t v16 = 24910;
    a2[1] += 3;
  }
}

void llvm::SmallVectorTemplateBase<char,true>::push_back(void *a1, char a2)
{
  uint64_t v4 = a1[1];
  if ((unint64_t)(v4 + 1) > a1[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v4 + 1, 1);
    uint64_t v4 = a1[1];
  }
  *(unsigned char *)(*a1 + v4) = a2;
  ++a1[1];
}

void *llvm::detail::DoubleAPFloat::DoubleAPFloat(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v3 = operator new[](0x50uLL);
  *(_OWORD *)char v3 = xmmword_181126D40;
  v3[3] = &llvm::semIEEEdouble;
  *((unsigned char *)v3 + 44) = 3;
  *((_DWORD *)v3 + 10) = -1023;
  llvm::APInt::tcSet((llvm::APInt *)(v3 + 4), 0, 1u);
  v3[7] = &llvm::semIEEEdouble;
  *((unsigned char *)v3 + 76) = *((unsigned char *)v3 + 76) & 0xF0 | 3;
  *((_DWORD *)v3 + 18) = -1023;
  llvm::APInt::tcSet((llvm::APInt *)(v3 + 8), 0, 1u);
  a1[1] = v3 + 2;
  return a1;
}

void *llvm::detail::DoubleAPFloat::DoubleAPFloat(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  int v5 = operator new[](0x50uLL);
  *(_OWORD *)int v5 = xmmword_181126D40;
  v5[3] = &llvm::semIEEEdouble;
  *((unsigned char *)v5 + 44) = 2;
  uint64_t v6 = v5 + 4;
  llvm::APInt::tcSet((llvm::APInt *)(v5 + 4), 0, 1u);
  *((_DWORD *)v5 + 10) = 52;
  if ((*(_DWORD *)(v5[3] + 8) - 64) <= 0xFFFFFF7F) {
    uint64_t v6 = (void *)*v6;
  }
  *uint64_t v6 = a3;
  llvm::detail::IEEEFloat::normalize((uint64_t)(v5 + 3), 1, 0);
  v5[7] = &llvm::semIEEEdouble;
  *((unsigned char *)v5 + 76) = *((unsigned char *)v5 + 76) & 0xF0 | 3;
  *((_DWORD *)v5 + 18) = -1023;
  llvm::APInt::tcSet((llvm::APInt *)(v5 + 8), 0, 1u);
  a1[1] = v5 + 2;
  return a1;
}

{
  _OWORD *v5;
  _OWORD *v6;
  llvm::detail::IEEEFloat *v7;
  llvm::detail::IEEEFloat *v8;
  const llvm::APInt **v9;
  const llvm::APInt *v10;
  const llvm::APInt **v11;
  const llvm::APInt *v12;
  const llvm::APInt *v14;
  int v15;
  const llvm::APInt *v16;
  int v17;

  *a1 = a2;
  int v5 = operator new[](0x50uLL);
  uint64_t v6 = v5 + 1;
  unsigned int v7 = (llvm::detail::IEEEFloat *)((char *)v5 + 24);
  *int v5 = xmmword_181126D40;
  unsigned int v8 = (llvm::detail::IEEEFloat *)((char *)v5 + 56);
  if (*(_DWORD *)(a3 + 8) >= 0x41u) {
    int v9 = *(const llvm::APInt ***)a3;
  }
  else {
    int v9 = (const llvm::APInt **)a3;
  }
  uint64_t v10 = *v9;
  uint64_t v17 = 64;
  uint64_t v16 = v10;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v7, &v16);
  if (*(_DWORD *)(a3 + 8) >= 0x41u) {
    unint64_t v11 = *(const llvm::APInt ***)a3;
  }
  else {
    unint64_t v11 = (const llvm::APInt **)a3;
  }
  unint64_t v12 = v11[1];
  uint64_t v15 = 64;
  uint64_t v14 = v12;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v8, &v14);
  a1[1] = v6;
  return a1;
}

llvm::detail::DoubleAPFloat *llvm::detail::DoubleAPFloat::DoubleAPFloat(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  *(void *)this = *(void *)a2;
  uint64_t v3 = *((void *)a2 + 1);
  if (v3)
  {
    int v5 = operator new[](0x50uLL);
    uint64_t v6 = v5 + 1;
    *int v5 = xmmword_181126D40;
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)((char *)v5 + 24), (const llvm::detail::IEEEFloat *)(v3 + 8));
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)((char *)v5 + 56), (const llvm::detail::IEEEFloat *)(*((void *)a2 + 1) + 40));
  }
  else
  {
    uint64_t v6 = 0;
  }
  *((void *)this + 1) = v6;
  return this;
}

void *llvm::detail::DoubleAPFloat::DoubleAPFloat(void *result, void *a2)
{
  *uint64_t result = *a2;
  uint64_t v2 = a2[1];
  a2[1] = 0;
  result[1] = v2;
  *a2 = &llvm::semBogus;
  return result;
}

uint64_t *llvm::detail::DoubleAPFloat::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  if (*a1 == *a2)
  {
    uint64_t v9 = a2[1];
    if (v9)
    {
      uint64_t v10 = a1[1];
      unint64_t v12 = (llvm::detail::DoubleAPFloat *)(v10 + 8);
      uint64_t v11 = *(void *)(v10 + 8);
      uint64_t v14 = (const llvm::detail::IEEEFloat *)(v9 + 8);
      uint64_t v13 = *(void **)(v9 + 8);
      if ((_UNKNOWN *)v11 == &llvm::semPPCDoubleDouble)
      {
        if (v13 == &llvm::semPPCDoubleDouble)
        {
          llvm::detail::DoubleAPFloat::operator=(v12, v9 + 8);
          goto LABEL_23;
        }
        if (v10 == v9)
        {
LABEL_23:
          uint64_t v17 = v2[1];
          uint64_t v18 = a1[1];
          unint64_t v20 = (uint64_t *)(v18 + 40);
          int v19 = *(_DWORD **)(v18 + 40);
          uint64_t v2 = (uint64_t *)(v17 + 40);
          int v21 = *(void **)(v17 + 40);
          BOOL v22 = v21 == &llvm::semPPCDoubleDouble;
          BOOL v4 = v19 == (_DWORD *)&llvm::semPPCDoubleDouble;
          if (v19 != (_DWORD *)&llvm::semPPCDoubleDouble)
          {
            int v5 = a1;
            if (v21 != &llvm::semPPCDoubleDouble)
            {
LABEL_50:
              llvm::detail::IEEEFloat::operator=(v20, v2);
              goto LABEL_11;
            }
LABEL_25:
            if (v18 == v17) {
              goto LABEL_11;
            }
            if ((v19[2] - 64) <= 0xFFFFFF7F)
            {
              uint64_t v23 = *(void **)(v18 + 48);
              if (v23) {
                operator delete[](v23);
              }
            }
            goto LABEL_33;
          }
          if (v21 != &llvm::semPPCDoubleDouble)
          {
            int v5 = a1;
LABEL_31:
            if (v18 == v17)
            {
              BOOL v4 = v22;
              goto LABEL_11;
            }
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v20);
            BOOL v4 = v22;
LABEL_33:
            llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v20, (const llvm::detail::IEEEFloat *)v2);
            goto LABEL_11;
          }
          while (1)
          {
            int v5 = v20;
            uint64_t v24 = v2[1];
            if (!v24)
            {
              BOOL v4 = 1;
              if (v20 != v2) {
                goto LABEL_3;
              }
              goto LABEL_11;
            }
            uint64_t v25 = v20[1];
            unsigned int v27 = (llvm::detail::DoubleAPFloat *)(v25 + 8);
            uint64_t v26 = *(void *)(v25 + 8);
            signed int v29 = (const llvm::detail::IEEEFloat *)(v24 + 8);
            unsigned int v28 = *(void **)(v24 + 8);
            if ((_UNKNOWN *)v26 == &llvm::semPPCDoubleDouble)
            {
              if (v28 != &llvm::semPPCDoubleDouble)
              {
                if (v25 == v24) {
                  goto LABEL_48;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v27);
                goto LABEL_46;
              }
              llvm::detail::DoubleAPFloat::operator=(v27, v24 + 8);
            }
            else
            {
              if (v28 != &llvm::semPPCDoubleDouble)
              {
                llvm::detail::IEEEFloat::operator=((uint64_t *)v27, (uint64_t *)(v24 + 8));
                goto LABEL_48;
              }
              if (v25 != v24)
              {
                if ((*(_DWORD *)(v26 + 8) - 64) <= 0xFFFFFF7F)
                {
                  uint64_t v30 = *(void **)(v25 + 16);
                  if (v30) {
                    operator delete[](v30);
                  }
                }
LABEL_46:
                llvm::APFloat::Storage::Storage(v27, v29);
              }
            }
LABEL_48:
            uint64_t v17 = v2[1];
            uint64_t v18 = v5[1];
            unint64_t v20 = (uint64_t *)(v18 + 40);
            int v19 = *(_DWORD **)(v18 + 40);
            uint64_t v2 = (uint64_t *)(v17 + 40);
            int v31 = *(void **)(v17 + 40);
            if (v19 != (_DWORD *)&llvm::semPPCDoubleDouble)
            {
              if (v31 == &llvm::semPPCDoubleDouble) {
                goto LABEL_25;
              }
              goto LABEL_50;
            }
            if (v31 != &llvm::semPPCDoubleDouble) {
              goto LABEL_31;
            }
          }
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v12);
      }
      else
      {
        if (v13 != &llvm::semPPCDoubleDouble)
        {
          llvm::detail::IEEEFloat::operator=((uint64_t *)v12, (uint64_t *)(v9 + 8));
          goto LABEL_23;
        }
        if (v10 == v9) {
          goto LABEL_23;
        }
        if ((*(_DWORD *)(v11 + 8) - 64) <= 0xFFFFFF7F)
        {
          uint64_t v16 = *(void **)(v10 + 16);
          if (v16) {
            operator delete[](v16);
          }
        }
      }
      llvm::APFloat::Storage::Storage(v12, v14);
      goto LABEL_23;
    }
  }
  BOOL v4 = 0;
  int v5 = a1;
  if (a1 != a2)
  {
LABEL_3:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v5);
    *int v5 = *v2;
    uint64_t v6 = v2[1];
    if (v6)
    {
      unsigned int v7 = operator new[](0x50uLL);
      unsigned int v8 = v7 + 1;
      *unsigned int v7 = xmmword_181126D40;
      llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)((char *)v7 + 24), (const llvm::detail::IEEEFloat *)(v6 + 8));
      llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)((char *)v7 + 56), (const llvm::detail::IEEEFloat *)(v2[1] + 40));
    }
    else
    {
      unsigned int v8 = 0;
    }
    v5[1] = (uint64_t)v8;
  }
LABEL_11:
  if (v4) {
    return a1;
  }
  else {
    return v5;
  }
}

llvm::detail::DoubleAPFloat *llvm::APFloat::operator=(llvm::detail::DoubleAPFloat *this, uint64_t *a2)
{
  BOOL v4 = (llvm::detail::DoubleAPFloat *)((char *)this + 8);
  uint64_t v3 = *((void *)this + 1);
  uint64_t v6 = (const llvm::detail::IEEEFloat *)(a2 + 1);
  int v5 = (void *)a2[1];
  if ((_UNKNOWN *)v3 != &llvm::semPPCDoubleDouble)
  {
    if (v5 != &llvm::semPPCDoubleDouble)
    {
      llvm::detail::IEEEFloat::operator=((uint64_t *)this + 1, a2 + 1);
      return this;
    }
    if (this == (llvm::detail::DoubleAPFloat *)a2) {
      return this;
    }
    if ((*(_DWORD *)(v3 + 8) - 64) <= 0xFFFFFF7F)
    {
      unsigned int v8 = (void *)*((void *)this + 2);
      if (v8) {
        operator delete[](v8);
      }
    }
    goto LABEL_12;
  }
  if (v5 != &llvm::semPPCDoubleDouble)
  {
    if (this == (llvm::detail::DoubleAPFloat *)a2) {
      return this;
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)this + 8));
LABEL_12:
    llvm::APFloat::Storage::Storage(v4, v6);
    return this;
  }
  llvm::detail::DoubleAPFloat::operator=((uint64_t *)this + 1, a2 + 1);
  return this;
}

uint64_t llvm::detail::DoubleAPFloat::addImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  int v11 = llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v193, (const llvm::detail::IEEEFloat *)(a2 + 8));
  unint64_t v12 = (const llvm::detail::IEEEFloat *)(a4 + 8);
  if ((_UNKNOWN *)v193 == &llvm::semPPCDoubleDouble)
  {
    uint64_t v13 = llvm::detail::DoubleAPFloat::addWithSpecial(v11, (int)&v193, (int)a4 + 8, (llvm::detail::DoubleAPFloat *)&v193);
    goto LABEL_20;
  }
  uint64_t v13 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v193, (const llvm::detail::IEEEFloat *)(a4 + 8), 0);
  if (v13 == 2)
  {
    int v14 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v193, (const llvm::detail::IEEEFloat *)(a4 + 8), 0);
    uint64_t v13 = llvm::detail::IEEEFloat::normalize((uint64_t)&v193, a6, v14);
  }
  unsigned __int8 v15 = v195;
  if ((v195 & 7) != 3)
  {
LABEL_20:
    if ((_UNKNOWN *)v193 == &llvm::semPPCDoubleDouble) {
      goto LABEL_21;
    }
    goto LABEL_9;
  }
  int v16 = *(unsigned __int8 *)(a4 + 28);
  if ((v16 & 7) == 3 && ((v16 ^ v195) & 8) == 0)
  {
    uint64_t v17 = (void *)v193;
    if (*(_DWORD *)(v193 + 20) != 2) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
  unsigned __int8 v15 = v195 & 0xF7 | (8 * (a6 == 3));
  unsigned __int8 v195 = v15;
  uint64_t v17 = (void *)v193;
  if (*(_DWORD *)(v193 + 20) == 2)
  {
LABEL_26:
    unsigned __int8 v195 = v15 & 0xF7;
    if ((_UNKNOWN *)v193 == &llvm::semPPCDoubleDouble) {
      goto LABEL_21;
    }
LABEL_9:
    unsigned __int8 v18 = v195;
    if ((v195 & 6) != 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_8:
  if (v17 != &llvm::semPPCDoubleDouble) {
    goto LABEL_9;
  }
LABEL_21:
  unsigned __int8 v18 = *((unsigned char *)v194 + 28);
  if ((v18 & 6) != 0)
  {
LABEL_10:
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v189, v10);
    uint64_t v181 = a1;
    if ((_UNKNOWN *)v189 == &llvm::semPPCDoubleDouble)
    {
      BOOL v22 = v10;
      int v24 = llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v189);
      int v179 = llvm::detail::DoubleAPFloat::addWithSpecial(v24, (int)&v189, (int)&v193, (llvm::detail::DoubleAPFloat *)&v189);
      llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v189);
    }
    else
    {
      int v19 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v189, (const llvm::detail::IEEEFloat *)&v193, 1);
      if (v19 == 2)
      {
        int v20 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v189, (const llvm::detail::IEEEFloat *)&v193, 1);
        int v19 = llvm::detail::IEEEFloat::normalize((uint64_t)&v189, a6, v20);
      }
      unsigned __int8 v21 = v191;
      int v179 = v19;
      if ((v191 & 7) == 3)
      {
        if ((v195 & 7) != 3 || ((v195 ^ v191) & 8) == 0)
        {
          unsigned __int8 v21 = v191 & 0xF7 | (8 * (a6 == 3));
          unsigned __int8 v191 = v21;
        }
        BOOL v22 = v10;
        if (*(_DWORD *)(v189 + 20) == 2) {
          unsigned __int8 v191 = v21 & 0xF7;
        }
      }
      else
      {
        BOOL v22 = v10;
      }
    }
    int v25 = llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v186, (const llvm::detail::IEEEFloat *)&v189);
    if (v186 == (_DWORD *)&llvm::semPPCDoubleDouble)
    {
      int v26 = llvm::detail::DoubleAPFloat::addWithSpecial(v25, (int)&v186, (int)a4 + 8, (llvm::detail::DoubleAPFloat *)&v186);
      int v177 = v26;
      if ((_UNKNOWN *)v189 != &llvm::semPPCDoubleDouble) {
        goto LABEL_40;
      }
    }
    else
    {
      int v26 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v186, (const llvm::detail::IEEEFloat *)(a4 + 8), 0);
      if (v26 == 2)
      {
        int v27 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v186, (const llvm::detail::IEEEFloat *)(a4 + 8), 0);
        int v26 = llvm::detail::IEEEFloat::normalize((uint64_t)&v186, a6, v27);
      }
      unsigned __int8 v28 = v188;
      if ((v188 & 7) == 3)
      {
        int v29 = *(unsigned __int8 *)(a4 + 28);
        if ((v29 & 7) != 3 || ((v29 ^ v188) & 8) != 0)
        {
          unsigned __int8 v28 = v188 & 0xF7 | (8 * (a6 == 3));
          unsigned __int8 v188 = v28;
        }
        if (v186[5] == 2) {
          unsigned __int8 v188 = v28 & 0xF7;
        }
      }
      int v177 = v26;
      if ((_UNKNOWN *)v189 != &llvm::semPPCDoubleDouble)
      {
LABEL_40:
        int v30 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v189, (const llvm::detail::IEEEFloat *)&v193, 0);
        if (v30 == 2)
        {
          int v31 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v189, (const llvm::detail::IEEEFloat *)&v193, 0);
          int v30 = llvm::detail::IEEEFloat::normalize((uint64_t)&v189, a6, v31);
        }
        unsigned __int8 v32 = v191;
        if ((v191 & 7) == 3)
        {
          if ((v195 & 7) != 3 || ((v195 ^ v191) & 8) != 0)
          {
            unsigned __int8 v32 = v191 & 0xF7 | (8 * (a6 == 3));
            unsigned __int8 v191 = v32;
            uint64_t v33 = (void *)v189;
            if (*(_DWORD *)(v189 + 20) != 2)
            {
LABEL_46:
              if (v33 != &llvm::semPPCDoubleDouble) {
                goto LABEL_47;
              }
              goto LABEL_71;
            }
          }
          else
          {
            uint64_t v33 = (void *)v189;
            if (*(_DWORD *)(v189 + 20) != 2) {
              goto LABEL_46;
            }
          }
          unsigned __int8 v191 = v32 & 0xF7;
        }
LABEL_70:
        if ((_UNKNOWN *)v189 != &llvm::semPPCDoubleDouble)
        {
LABEL_47:
          int v34 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v189, v22, 1);
          int v35 = v34;
          if (v34 == 2)
          {
            int v36 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v189, v22, 1);
            int v34 = llvm::detail::IEEEFloat::normalize((uint64_t)&v189, a6, v36);
            int v35 = v34;
          }
          unsigned __int8 v37 = v191;
          uint64_t v38 = a3;
          if ((v191 & 7) == 3)
          {
            int v39 = *(unsigned __int8 *)(a2 + 28);
            if ((v39 & 7) == 3 && ((v39 ^ v191) & 8) != 0)
            {
              uint64_t v40 = v189;
              if (*(_DWORD *)(v189 + 20) != 2) {
                goto LABEL_53;
              }
            }
            else
            {
              unsigned __int8 v37 = v191 & 0xF7 | (8 * (a6 == 3));
              unsigned __int8 v191 = v37;
              uint64_t v40 = v189;
              if (*(_DWORD *)(v189 + 20) != 2)
              {
LABEL_53:
                if ((_UNKNOWN *)v40 != &llvm::semPPCDoubleDouble)
                {
LABEL_54:
                  if (*(_DWORD *)(v40 + 20) != 2 || (v191 & 5 | 2) != 3) {
                    v191 ^= 8u;
                  }
                  if (v186 != (_DWORD *)&llvm::semPPCDoubleDouble)
                  {
LABEL_58:
                    int v41 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v186, (const llvm::detail::IEEEFloat *)&v189, 0);
                    int v42 = v41;
                    if (v41 == 2)
                    {
                      int v43 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v186, (const llvm::detail::IEEEFloat *)&v189, 0);
                      int v41 = llvm::detail::IEEEFloat::normalize((uint64_t)&v186, a6, v43);
                      int v42 = v41;
                    }
                    unsigned __int8 v44 = v188;
                    if ((v188 & 7) == 3)
                    {
                      if ((v191 & 7) != 3 || ((v191 ^ v188) & 8) != 0)
                      {
                        unsigned __int8 v44 = v188 & 0xF7 | (8 * (a6 == 3));
                        unsigned __int8 v188 = v44;
                      }
                      if (v186[5] != 2)
                      {
                        unsigned int v46 = v13;
                        unsigned int v47 = (const llvm::detail::IEEEFloat *)(v38 + 8);
                        if (v186 != (_DWORD *)&llvm::semPPCDoubleDouble)
                        {
LABEL_76:
                          int v48 = a6;
                          int v49 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v186, v47, 0);
                          int v50 = v49;
                          if (v49 == 2)
                          {
                            int v51 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v186, v47, 0);
                            int v49 = llvm::detail::IEEEFloat::normalize((uint64_t)&v186, v48, v51);
                            int v50 = v49;
                          }
                          unsigned __int8 v52 = v188;
                          if ((v188 & 7) == 3)
                          {
                            int v53 = *(unsigned __int8 *)(v38 + 28);
                            if ((v53 & 7) != 3 || ((v53 ^ v188) & 8) != 0)
                            {
                              unsigned __int8 v52 = v188 & 0xF7 | (8 * (v48 == 3));
                              unsigned __int8 v188 = v52;
                              uint64_t v54 = v186;
                              if (v186[5] != 2)
                              {
LABEL_82:
                                char v55 = (const llvm::detail::IEEEFloat *)(a5 + 8);
                                if (v54 != &llvm::semPPCDoubleDouble) {
                                  goto LABEL_83;
                                }
                                goto LABEL_114;
                              }
                            }
                            else
                            {
                              uint64_t v54 = v186;
                              if (v186[5] != 2) {
                                goto LABEL_82;
                              }
                            }
                            unsigned __int8 v188 = v52 & 0xF7;
                          }
LABEL_113:
                          char v55 = (const llvm::detail::IEEEFloat *)(a5 + 8);
                          if (v186 != (_DWORD *)&llvm::semPPCDoubleDouble)
                          {
LABEL_83:
                            int v56 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v186, v55, 0);
                            if (v56 == 2)
                            {
                              int v57 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v186, v55, 0);
                              int v56 = llvm::detail::IEEEFloat::normalize((uint64_t)&v186, v48, v57);
                            }
                            unsigned __int8 v58 = v188;
                            if ((v188 & 7) == 3)
                            {
                              int v59 = a5[28];
                              if ((v59 & 7) != 3 || ((v59 ^ v188) & 8) != 0)
                              {
                                unsigned __int8 v58 = v188 & 0xF7 | (8 * (v48 == 3));
                                unsigned __int8 v188 = v58;
                              }
                              uint64_t v60 = v186;
                              if (v186[5] != 2)
                              {
LABEL_116:
                                uint64_t v71 = v179 | v177 | v30 | v35 | v42 | v50 | v56 | v46;
                                if (v60 == &llvm::semPPCDoubleDouble)
                                {
                                  unsigned __int8 v72 = *((unsigned char *)__p + 28);
                                  uint64_t v73 = v181;
                                  if ((v72 & 7) != 3) {
                                    goto LABEL_123;
                                  }
                                }
                                else
                                {
                                  unsigned __int8 v72 = v188;
                                  uint64_t v73 = v181;
                                  if ((v188 & 7) != 3) {
                                    goto LABEL_123;
                                  }
                                }
                                if ((v72 & 8) == 0)
                                {
                                  llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(*(void *)(v73 + 8) + 8), (llvm::APFloatBase *)&v193);
                                  llvm::APFloat::makeZero((llvm::APFloat **)(*(void *)(v73 + 8) + 32), 0);
                                  uint64_t v13 = 0;
                                  int v74 = 0;
                                  char v75 = v186;
                                  if (v186 == (_DWORD *)&llvm::semPPCDoubleDouble) {
                                    goto LABEL_180;
                                  }
                                  goto LABEL_161;
                                }
LABEL_123:
                                uint64_t v76 = *(void *)(v73 + 8);
                                char v78 = (uint64_t *)(v76 + 8);
                                uint64_t v77 = *(void *)(v76 + 8);
                                if ((_UNKNOWN *)v77 == &llvm::semPPCDoubleDouble)
                                {
                                  if ((_UNKNOWN *)v193 == &llvm::semPPCDoubleDouble)
                                  {
                                    int v56 = llvm::detail::DoubleAPFloat::operator=(v78, &v193);
                                    uint64_t v79 = *(void *)(v73 + 8);
                                    uint64_t v80 = (llvm::detail::DoubleAPFloat *)(v79 + 8);
                                    if (*(_UNKNOWN **)(v79 + 8) == &llvm::semPPCDoubleDouble) {
                                      goto LABEL_148;
                                    }
                                    goto LABEL_136;
                                  }
                                  if ((char *)v76 != &v192)
                                  {
                                    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v78);
LABEL_134:
                                    int v56 = llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v78, (const llvm::detail::IEEEFloat *)&v193);
                                  }
                                }
                                else
                                {
                                  if ((_UNKNOWN *)v193 != &llvm::semPPCDoubleDouble)
                                  {
                                    int v56 = llvm::detail::IEEEFloat::operator=(v78, &v193);
                                    uint64_t v79 = *(void *)(v73 + 8);
                                    uint64_t v80 = (llvm::detail::DoubleAPFloat *)(v79 + 8);
                                    if (*(_UNKNOWN **)(v79 + 8) == &llvm::semPPCDoubleDouble)
                                    {
LABEL_148:
                                      uint64_t v13 = llvm::detail::DoubleAPFloat::addWithSpecial(v56, (int)v80, (int)&v186, v80) | v71;
                                      uint64_t v85 = *(void *)(v73 + 8);
                                      if (*(_UNKNOWN **)(v85 + 8) == &llvm::semPPCDoubleDouble) {
                                        goto LABEL_149;
                                      }
                                      goto LABEL_145;
                                    }
LABEL_136:
                                    int v82 = llvm::detail::IEEEFloat::addOrSubtractSpecials(v80, (const llvm::detail::IEEEFloat *)&v186, 0);
                                    if (v82 == 2)
                                    {
                                      int v83 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v80, (const llvm::detail::IEEEFloat *)&v186, 0);
                                      int v82 = llvm::detail::IEEEFloat::normalize((uint64_t)v80, v48, v83);
                                    }
                                    int v84 = *(unsigned __int8 *)(v79 + 28);
                                    if ((v84 & 7) == 3)
                                    {
                                      if ((v188 & 7) != 3 || ((v188 ^ v84) & 8) != 0)
                                      {
                                        LOBYTE(v84) = v84 & 0xF7 | (8 * (v48 == 3));
                                        *(unsigned char *)(v79 + 28) = v84;
                                      }
                                      if (*(_DWORD *)(*(void *)v80 + 20) == 2) {
                                        *(unsigned char *)(v79 + 28) = v84 & 0xF7;
                                      }
                                    }
                                    uint64_t v13 = v82 | v71;
                                    uint64_t v85 = *(void *)(v73 + 8);
                                    if (*(_UNKNOWN **)(v85 + 8) == &llvm::semPPCDoubleDouble)
                                    {
LABEL_149:
                                      int v86 = *(unsigned char *)(*(void *)(v85 + 16) + 28) & 7;
                                      if (v86 == 1) {
                                        goto LABEL_160;
                                      }
LABEL_150:
                                      if (v86)
                                      {
                                        unsigned int v87 = v13;
                                        llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(v85 + 40), (llvm::APFloatBase *)&v193);
                                        uint64_t v88 = *(unsigned __int8 **)(v73 + 8);
                                        unint64_t v89 = (llvm::detail::DoubleAPFloat *)(v88 + 40);
                                        if (*((_UNKNOWN **)v88 + 5) == &llvm::semPPCDoubleDouble)
                                        {
                                          int v96 = llvm::detail::DoubleAPFloat::changeSign(v89);
                                          int v91 = llvm::detail::DoubleAPFloat::addWithSpecial(v96, (int)v89, (int)v88 + 8, v89);
                                          int v90 = llvm::detail::DoubleAPFloat::changeSign(v89);
                                        }
                                        else
                                        {
                                          int v90 = llvm::detail::IEEEFloat::addOrSubtractSpecials(v89, (const llvm::detail::IEEEFloat *)(v88 + 8), 1);
                                          int v91 = v90;
                                          if (v90 == 2)
                                          {
                                            int v92 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v89, (const llvm::detail::IEEEFloat *)(v88 + 8), 1);
                                            int v90 = llvm::detail::IEEEFloat::normalize((uint64_t)v89, v48, v92);
                                            int v91 = v90;
                                          }
                                          int v93 = v88[60];
                                          if ((v93 & 7) == 3)
                                          {
                                            int v94 = v88[28];
                                            if ((v94 & 7) != 3 || ((v94 ^ v93) & 8) == 0)
                                            {
                                              LOBYTE(v93) = v93 & 0xF7 | (8 * (v48 == 3));
                                              v88[60] = v93;
                                            }
                                            if (*(_DWORD *)(*(void *)v89 + 20) == 2) {
                                              v88[60] = v93 & 0xF7;
                                            }
                                          }
                                        }
                                        uint64_t v13 = *(void *)(v73 + 8);
                                        uint64_t v97 = (llvm::detail::DoubleAPFloat *)(v13 + 40);
                                        if (*(_UNKNOWN **)(v13 + 40) == &llvm::semPPCDoubleDouble)
                                        {
                                          int v98 = llvm::detail::DoubleAPFloat::addWithSpecial(v90, (int)v97, (int)&v186, v97);
                                        }
                                        else
                                        {
                                          int v98 = llvm::detail::IEEEFloat::addOrSubtractSpecials(v97, (const llvm::detail::IEEEFloat *)&v186, 0);
                                          if (v98 == 2)
                                          {
                                            int v99 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v97, (const llvm::detail::IEEEFloat *)&v186, 0);
                                            int v98 = llvm::detail::IEEEFloat::normalize((uint64_t)v97, v48, v99);
                                          }
                                          int v100 = *(unsigned __int8 *)(v13 + 60);
                                          if ((v100 & 7) == 3)
                                          {
                                            if ((v188 & 7) != 3 || ((v188 ^ v100) & 8) != 0)
                                            {
                                              LOBYTE(v100) = v100 & 0xF7 | (8 * (v48 == 3));
                                              *(unsigned char *)(v13 + 60) = v100;
                                            }
                                            if (*(_DWORD *)(*(void *)v97 + 20) == 2) {
                                              *(unsigned char *)(v13 + 60) = v100 & 0xF7;
                                            }
                                          }
                                        }
                                        uint64_t v71 = v91 | v98 | v87;
                                        int v74 = 1;
                                        char v75 = v186;
                                        if (v186 == (_DWORD *)&llvm::semPPCDoubleDouble)
                                        {
LABEL_180:
                                          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v186);
                                          uint64_t v95 = v189;
                                          if ((_UNKNOWN *)v189 == &llvm::semPPCDoubleDouble)
                                          {
LABEL_181:
                                            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v189);
                                            goto LABEL_182;
                                          }
LABEL_165:
                                          if ((*(_DWORD *)(v95 + 8) - 64) <= 0xFFFFFF7F && v190) {
                                            operator delete[](v190);
                                          }
LABEL_182:
                                          if (!v74) {
                                            goto LABEL_184;
                                          }
                                          goto LABEL_183;
                                        }
LABEL_161:
                                        if ((v75[2] - 64) <= 0xFFFFFF7F && __p) {
                                          operator delete[](__p);
                                        }
                                        uint64_t v95 = v189;
                                        if ((_UNKNOWN *)v189 == &llvm::semPPCDoubleDouble) {
                                          goto LABEL_181;
                                        }
                                        goto LABEL_165;
                                      }
LABEL_160:
                                      llvm::APFloat::makeZero((llvm::APFloat **)(v85 + 32), 0);
                                      int v74 = 0;
                                      uint64_t v71 = v13;
                                      char v75 = v186;
                                      if (v186 == (_DWORD *)&llvm::semPPCDoubleDouble) {
                                        goto LABEL_180;
                                      }
                                      goto LABEL_161;
                                    }
LABEL_145:
                                    int v86 = *(unsigned char *)(v85 + 28) & 7;
                                    if (v86 == 1) {
                                      goto LABEL_160;
                                    }
                                    goto LABEL_150;
                                  }
                                  if ((char *)v76 != &v192)
                                  {
                                    if ((*(_DWORD *)(v77 + 8) - 64) <= 0xFFFFFF7F)
                                    {
                                      unint64_t v81 = *(void **)(v76 + 16);
                                      if (v81) {
                                        operator delete[](v81);
                                      }
                                    }
                                    goto LABEL_134;
                                  }
                                }
                                uint64_t v79 = *(void *)(v73 + 8);
                                uint64_t v80 = (llvm::detail::DoubleAPFloat *)(v79 + 8);
                                if (*(_UNKNOWN **)(v79 + 8) == &llvm::semPPCDoubleDouble) {
                                  goto LABEL_148;
                                }
                                goto LABEL_136;
                              }
                              unsigned __int8 v188 = v58 & 0xF7;
                            }
LABEL_115:
                            uint64_t v60 = v186;
                            goto LABEL_116;
                          }
LABEL_114:
                          int v56 = llvm::detail::DoubleAPFloat::addWithSpecial(v49, (int)&v186, (int)v55, (llvm::detail::DoubleAPFloat *)&v186);
                          goto LABEL_115;
                        }
LABEL_112:
                        int v48 = a6;
                        int v49 = llvm::detail::DoubleAPFloat::addWithSpecial(v41, (int)&v186, (int)v47, (llvm::detail::DoubleAPFloat *)&v186);
                        int v50 = v49;
                        goto LABEL_113;
                      }
                      unsigned __int8 v188 = v44 & 0xF7;
                    }
LABEL_75:
                    unsigned int v46 = v13;
                    unsigned int v47 = (const llvm::detail::IEEEFloat *)(v38 + 8);
                    if (v186 != (_DWORD *)&llvm::semPPCDoubleDouble) {
                      goto LABEL_76;
                    }
                    goto LABEL_112;
                  }
LABEL_74:
                  int v41 = llvm::detail::DoubleAPFloat::addWithSpecial(v34, (int)&v186, (int)&v189, (llvm::detail::DoubleAPFloat *)&v186);
                  int v42 = v41;
                  goto LABEL_75;
                }
LABEL_73:
                int v34 = llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v189);
                if (v186 != (_DWORD *)&llvm::semPPCDoubleDouble) {
                  goto LABEL_58;
                }
                goto LABEL_74;
              }
            }
            unsigned __int8 v191 = v37 & 0xF7;
            uint64_t v40 = v189;
            if ((_UNKNOWN *)v189 != &llvm::semPPCDoubleDouble) {
              goto LABEL_54;
            }
            goto LABEL_73;
          }
LABEL_72:
          uint64_t v40 = v189;
          if ((_UNKNOWN *)v189 != &llvm::semPPCDoubleDouble) {
            goto LABEL_54;
          }
          goto LABEL_73;
        }
LABEL_71:
        int v45 = llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v189);
        int v35 = llvm::detail::DoubleAPFloat::addWithSpecial(v45, (int)&v189, (int)v22, (llvm::detail::DoubleAPFloat *)&v189);
        int v34 = llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v189);
        uint64_t v38 = a3;
        goto LABEL_72;
      }
    }
    int v30 = llvm::detail::DoubleAPFloat::addWithSpecial(v26, (int)&v189, (int)&v193, (llvm::detail::DoubleAPFloat *)&v189);
    goto LABEL_70;
  }
LABEL_22:
  if ((v18 & 7) == 0)
  {
    if (*(_UNKNOWN **)v10 == &llvm::semPPCDoubleDouble)
    {
      int v63 = llvm::detail::DoubleAPFloat::compareAbsoluteValue(v10, (const llvm::detail::DoubleAPFloat *)(a4 + 8));
      int v67 = v63;
      int v69 = (uint64_t *)(a5 + 8);
      int v68 = (void *)*((void *)a5 + 1);
      uint64_t v70 = v193;
      if ((_UNKNOWN *)v193 != &llvm::semPPCDoubleDouble) {
        goto LABEL_109;
      }
    }
    else
    {
      int v61 = *(_DWORD *)(a2 + 24);
      int v62 = *(_DWORD *)(a4 + 24);
      int v63 = v61 - v62;
      if (v61 == v62)
      {
        int v64 = *(_DWORD *)(*(void *)v10 + 8);
        if ((v64 - 64) >= 0xFFFFFF80) {
          int v65 = (llvm::APInt *)(a2 + 16);
        }
        else {
          int v65 = *(llvm::APInt **)(a2 + 16);
        }
        if ((*(_DWORD *)(*(void *)(a4 + 8) + 8) - 64) >= 0xFFFFFF80) {
          size_t v66 = (const unint64_t *)(a4 + 16);
        }
        else {
          size_t v66 = *(const unint64_t **)(a4 + 16);
        }
        int v63 = llvm::APInt::tcCompare(v65, v66, (const unint64_t *)((v64 + 64) >> 6));
      }
      if (v63 <= 0) {
        int v67 = v63 >= 0;
      }
      else {
        int v67 = 2;
      }
      int v69 = (uint64_t *)(a5 + 8);
      int v68 = (void *)*((void *)a5 + 1);
      uint64_t v70 = v193;
      if ((_UNKNOWN *)v193 != &llvm::semPPCDoubleDouble)
      {
LABEL_109:
        if (v68 != &llvm::semPPCDoubleDouble)
        {
          int v63 = llvm::detail::IEEEFloat::operator=(&v193, v69);
          goto LABEL_198;
        }
        if (&v192 != a5)
        {
          if ((*(_DWORD *)(v70 + 8) - 64) <= 0xFFFFFF7F && v194) {
            operator delete[](v194);
          }
LABEL_196:
          int v63 = llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v193, (const llvm::detail::IEEEFloat *)v69);
          goto LABEL_198;
        }
        goto LABEL_198;
      }
    }
    if (v68 != &llvm::semPPCDoubleDouble)
    {
      if (&v192 == a5) {
        goto LABEL_198;
      }
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v193);
      goto LABEL_196;
    }
    int v63 = llvm::detail::DoubleAPFloat::operator=(&v193, v69);
LABEL_198:
    uint64_t v178 = a4;
    uint64_t v180 = a2;
    unsigned int v101 = (const llvm::detail::IEEEFloat *)(a3 + 8);
    int v176 = a6;
    if ((_UNKNOWN *)v193 == &llvm::semPPCDoubleDouble)
    {
      int v102 = llvm::detail::DoubleAPFloat::addWithSpecial(v63, (int)&v193, (int)a3 + 8, (llvm::detail::DoubleAPFloat *)&v193);
      int v103 = v102;
      uint64_t v107 = (void *)v193;
      if (v67 == 2) {
        goto LABEL_208;
      }
    }
    else
    {
      int v102 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v193, (const llvm::detail::IEEEFloat *)(a3 + 8), 0);
      int v103 = v102;
      if (v102 == 2)
      {
        int v104 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v193, v101, 0);
        int v102 = llvm::detail::IEEEFloat::normalize((uint64_t)&v193, v176, v104);
        int v103 = v102;
      }
      unsigned __int8 v105 = v195;
      if ((v195 & 7) == 3)
      {
        int v106 = *(unsigned __int8 *)(a3 + 28);
        if ((v106 & 7) != 3 || ((v106 ^ v195) & 8) != 0)
        {
          unsigned __int8 v105 = v195 & 0xF7 | (8 * (v176 == 3));
          unsigned __int8 v195 = v105;
        }
        if (*(_DWORD *)(v193 + 20) == 2) {
          unsigned __int8 v195 = v105 & 0xF7;
        }
      }
      uint64_t v107 = (void *)v193;
      if (v67 == 2)
      {
LABEL_208:
        if (v107 == &llvm::semPPCDoubleDouble)
        {
          int v108 = llvm::detail::DoubleAPFloat::addWithSpecial(v102, (int)&v193, (int)v12, (llvm::detail::DoubleAPFloat *)&v193);
          int v109 = v108;
        }
        else
        {
          int v108 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v193, v12, 0);
          int v109 = v108;
          if (v108 == 2)
          {
            int v110 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v193, v12, 0);
            int v108 = llvm::detail::IEEEFloat::normalize((uint64_t)&v193, v176, v110);
            int v109 = v108;
          }
          unsigned __int8 v111 = v195;
          if ((v195 & 7) == 3)
          {
            int v112 = *(unsigned __int8 *)(v178 + 28);
            if ((v112 & 7) != 3 || ((v112 ^ v195) & 8) != 0)
            {
              unsigned __int8 v111 = v195 & 0xF7 | (8 * (v176 == 3));
              unsigned __int8 v195 = v111;
              uint64_t v113 = (void *)v193;
              if (*(_DWORD *)(v193 + 20) != 2)
              {
LABEL_215:
                if (v113 != &llvm::semPPCDoubleDouble) {
                  goto LABEL_216;
                }
                goto LABEL_240;
              }
            }
            else
            {
              uint64_t v113 = (void *)v193;
              if (*(_DWORD *)(v193 + 20) != 2) {
                goto LABEL_215;
              }
            }
            unsigned __int8 v195 = v111 & 0xF7;
            if ((_UNKNOWN *)v193 == &llvm::semPPCDoubleDouble)
            {
LABEL_240:
              int v123 = (int)v10;
LABEL_244:
              int v114 = llvm::detail::DoubleAPFloat::addWithSpecial(v108, (int)&v193, v123, (llvm::detail::DoubleAPFloat *)&v193);
              goto LABEL_245;
            }
LABEL_216:
            int v114 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v193, v10, 0);
            if (v114 == 2)
            {
              int v115 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v193, v10, 0);
              int v114 = llvm::detail::IEEEFloat::normalize((uint64_t)&v193, v176, v115);
            }
            int v116 = v195;
            if ((v195 & 7) == 3)
            {
              int v117 = *(unsigned __int8 *)(v180 + 28);
              if ((v117 & 7) != 3) {
                goto LABEL_235;
              }
              goto LABEL_234;
            }
            goto LABEL_245;
          }
        }
        if ((_UNKNOWN *)v193 == &llvm::semPPCDoubleDouble) {
          goto LABEL_240;
        }
        goto LABEL_216;
      }
    }
    if (v107 == &llvm::semPPCDoubleDouble)
    {
      int v108 = llvm::detail::DoubleAPFloat::addWithSpecial(v102, (int)&v193, (int)v10, (llvm::detail::DoubleAPFloat *)&v193);
      int v109 = v108;
    }
    else
    {
      int v108 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v193, v10, 0);
      int v109 = v108;
      if (v108 == 2)
      {
        int v118 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v193, v10, 0);
        int v108 = llvm::detail::IEEEFloat::normalize((uint64_t)&v193, v176, v118);
        int v109 = v108;
      }
      unsigned __int8 v119 = v195;
      if ((v195 & 7) == 3)
      {
        int v120 = *(unsigned __int8 *)(v180 + 28);
        if ((v120 & 7) != 3 || ((v120 ^ v195) & 8) != 0)
        {
          unsigned __int8 v119 = v195 & 0xF7 | (8 * (v176 == 3));
          unsigned __int8 v195 = v119;
          long long v121 = (void *)v193;
          if (*(_DWORD *)(v193 + 20) != 2)
          {
LABEL_229:
            if (v121 != &llvm::semPPCDoubleDouble) {
              goto LABEL_230;
            }
LABEL_243:
            int v123 = (int)v12;
            goto LABEL_244;
          }
        }
        else
        {
          long long v121 = (void *)v193;
          if (*(_DWORD *)(v193 + 20) != 2) {
            goto LABEL_229;
          }
        }
        unsigned __int8 v195 = v119 & 0xF7;
        if ((_UNKNOWN *)v193 == &llvm::semPPCDoubleDouble) {
          goto LABEL_243;
        }
LABEL_230:
        int v114 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v193, v12, 0);
        if (v114 == 2)
        {
          int v122 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v193, v12, 0);
          int v114 = llvm::detail::IEEEFloat::normalize((uint64_t)&v193, v176, v122);
        }
        int v116 = v195;
        if ((v195 & 7) == 3)
        {
          int v117 = *(unsigned __int8 *)(v178 + 28);
          if ((v117 & 7) != 3)
          {
LABEL_235:
            LOBYTE(v116) = v116 & 0xF7 | (8 * (v176 == 3));
            unsigned __int8 v195 = v116;
LABEL_236:
            if (*(_DWORD *)(v193 + 20) == 2) {
              unsigned __int8 v195 = v116 & 0xF7;
            }
            goto LABEL_245;
          }
LABEL_234:
          if (((v117 ^ v116) & 8) == 0) {
            goto LABEL_236;
          }
          goto LABEL_235;
        }
LABEL_245:
        unsigned int v183 = v114 | v109 | v103;
        if ((_UNKNOWN *)v193 == &llvm::semPPCDoubleDouble)
        {
          int v124 = *((unsigned char *)v194 + 28) & 7;
          int v125 = v176;
          if (v124 == 1) {
            goto LABEL_253;
          }
        }
        else
        {
          int v124 = v195 & 7;
          int v125 = v176;
          if (v124 == 1)
          {
LABEL_253:
            llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(*(void *)(a1 + 8) + 8), (llvm::APFloatBase *)&v193);
            llvm::APFloat::makeZero((llvm::APFloat **)(*(void *)(a1 + 8) + 32), 0);
            uint64_t v13 = v183;
            uint64_t v23 = v193;
            if ((_UNKNOWN *)v193 != &llvm::semPPCDoubleDouble) {
              goto LABEL_185;
            }
            goto LABEL_254;
          }
        }
        if (!v124) {
          goto LABEL_253;
        }
        uint64_t v126 = *(void *)(a1 + 8);
        int64_t v128 = (llvm::detail::DoubleAPFloat *)(v126 + 8);
        uint64_t v127 = *(void *)(v126 + 8);
        if ((_UNKNOWN *)v127 == &llvm::semPPCDoubleDouble)
        {
          if ((_UNKNOWN *)v193 != &llvm::semPPCDoubleDouble)
          {
            if ((char *)v126 == &v192) {
              goto LABEL_271;
            }
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v128);
            goto LABEL_269;
          }
          llvm::detail::DoubleAPFloat::operator=((uint64_t *)v128, &v193);
        }
        else
        {
          if ((_UNKNOWN *)v193 != &llvm::semPPCDoubleDouble)
          {
            llvm::detail::IEEEFloat::operator=((uint64_t *)v128, &v193);
            goto LABEL_271;
          }
          if ((char *)v126 != &v192)
          {
            if ((*(_DWORD *)(v127 + 8) - 64) <= 0xFFFFFF7F)
            {
              int64_t v130 = *(void **)(v126 + 16);
              if (v130) {
                operator delete[](v130);
              }
            }
LABEL_269:
            llvm::APFloat::Storage::Storage(v128, (const llvm::detail::IEEEFloat *)&v193);
          }
        }
LABEL_271:
        int v131 = llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v189, v101);
        if ((_UNKNOWN *)v189 == &llvm::semPPCDoubleDouble)
        {
          int v136 = v125;
          int v132 = llvm::detail::DoubleAPFloat::addWithSpecial(v131, (int)&v189, (int)v69, (llvm::detail::DoubleAPFloat *)&v189);
        }
        else
        {
          int v132 = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v189, (const llvm::detail::IEEEFloat *)v69, 0);
          if (v132 == 2)
          {
            int v133 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v189, (const llvm::detail::IEEEFloat *)v69, 0);
            int v132 = llvm::detail::IEEEFloat::normalize((uint64_t)&v189, v125, v133);
          }
          unsigned __int8 v134 = v191;
          if ((v191 & 7) == 3)
          {
            int v135 = a5[28];
            if ((v135 & 7) != 3 || ((v135 ^ v191) & 8) != 0)
            {
              unsigned __int8 v134 = v191 & 0xF7 | (8 * (v125 == 3));
              unsigned __int8 v191 = v134;
            }
            int v136 = v125;
            if (*(_DWORD *)(v189 + 20) == 2) {
              unsigned __int8 v191 = v134 & 0xF7;
            }
          }
          else
          {
            int v136 = v125;
          }
        }
        uint64_t v137 = *(void *)(a1 + 8);
        uint64_t v138 = v137 + 32;
        float64x2_t v140 = (llvm::detail::DoubleAPFloat *)(v137 + 40);
        uint64_t v139 = *(void *)(v137 + 40);
        int v185 = v132;
        if (v67 == 2)
        {
          long long v141 = *(void **)v10;
          if ((_UNKNOWN *)v139 == &llvm::semPPCDoubleDouble)
          {
            if (v141 != &llvm::semPPCDoubleDouble)
            {
              if (v138 == v180) {
                goto LABEL_306;
              }
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(v140);
              goto LABEL_299;
            }
            llvm::detail::DoubleAPFloat::operator=((uint64_t *)v140, (uint64_t *)v10);
          }
          else
          {
            if (v141 != &llvm::semPPCDoubleDouble)
            {
              llvm::detail::IEEEFloat::operator=((uint64_t *)v140, (uint64_t *)v10);
              goto LABEL_306;
            }
            if (v138 != v180)
            {
              if ((*(_DWORD *)(v139 + 8) - 64) <= 0xFFFFFF7F)
              {
                __int16 v143 = *(void **)(v137 + 48);
                if (v143) {
                  operator delete[](v143);
                }
              }
LABEL_299:
              llvm::APFloat::Storage::Storage(v140, v10);
            }
          }
LABEL_306:
          uint64_t v145 = *(void *)(a1 + 8);
          uint64_t v146 = (llvm::detail::DoubleAPFloat *)(v145 + 40);
          if (*(_UNKNOWN **)(v145 + 40) == &llvm::semPPCDoubleDouble)
          {
            int v151 = llvm::detail::DoubleAPFloat::changeSign(v146);
            int v148 = llvm::detail::DoubleAPFloat::addWithSpecial(v151, (int)v146, (int)&v193, v146);
            int v147 = llvm::detail::DoubleAPFloat::changeSign(v146);
          }
          else
          {
            int v147 = llvm::detail::IEEEFloat::addOrSubtractSpecials(v146, (const llvm::detail::IEEEFloat *)&v193, 1);
            int v148 = v147;
            if (v147 == 2)
            {
              int v149 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v146, (const llvm::detail::IEEEFloat *)&v193, 1);
              int v147 = llvm::detail::IEEEFloat::normalize((uint64_t)v146, v136, v149);
              int v148 = v147;
            }
            int v150 = *(unsigned __int8 *)(v145 + 60);
            if ((v150 & 7) == 3)
            {
              if ((v195 & 7) != 3 || ((v195 ^ v150) & 8) == 0)
              {
                LOBYTE(v150) = v150 & 0xF7 | (8 * (v136 == 3));
                *(unsigned char *)(v145 + 60) = v150;
              }
              if (*(_DWORD *)(*(void *)v146 + 20) == 2) {
                *(unsigned char *)(v145 + 60) = v150 & 0xF7;
              }
            }
          }
          uint64_t v152 = *(void *)(a1 + 8);
          int64x2_t v153 = (llvm::detail::DoubleAPFloat *)(v152 + 40);
          if (*(_UNKNOWN **)(v152 + 40) == &llvm::semPPCDoubleDouble)
          {
            int v154 = llvm::detail::DoubleAPFloat::addWithSpecial(v147, (int)v153, (int)v12, v153);
          }
          else
          {
            int v154 = llvm::detail::IEEEFloat::addOrSubtractSpecials(v153, v12, 0);
            if (v154 == 2)
            {
              int v155 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v153, v12, 0);
              int v154 = llvm::detail::IEEEFloat::normalize((uint64_t)v153, v136, v155);
            }
            int v156 = *(unsigned __int8 *)(v152 + 60);
            if ((v156 & 7) == 3)
            {
              int v157 = *(unsigned __int8 *)(v178 + 28);
              if ((v157 & 7) != 3 || ((v157 ^ v156) & 8) != 0)
              {
                LOBYTE(v156) = v156 & 0xF7 | (8 * (v136 == 3));
                *(unsigned char *)(v152 + 60) = v156;
              }
              if (*(_DWORD *)(*(void *)v153 + 20) == 2) {
                *(unsigned char *)(v152 + 60) = v156 & 0xF7;
              }
            }
          }
          int v158 = v154 | v148;
          uint64_t v159 = *(void *)(a1 + 8);
          int32x2_t v160 = (llvm::detail::IEEEFloat *)(v159 + 40);
          if (*(_UNKNOWN **)(v159 + 40) != &llvm::semPPCDoubleDouble)
          {
LABEL_327:
            int v161 = llvm::detail::IEEEFloat::addOrSubtractSpecials(v160, (const llvm::detail::IEEEFloat *)&v189, 0);
            if (v161 == 2)
            {
              int v162 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v160, (const llvm::detail::IEEEFloat *)&v189, 0);
              int v161 = llvm::detail::IEEEFloat::normalize((uint64_t)v160, v136, v162);
            }
            int v163 = *(unsigned __int8 *)(v159 + 60);
            if ((v163 & 7) == 3)
            {
              if ((v191 & 7) != 3 || ((v191 ^ v163) & 8) != 0)
              {
                LOBYTE(v163) = v163 & 0xF7 | (8 * (v136 == 3));
                *(unsigned char *)(v159 + 60) = v163;
              }
              if (*(_DWORD *)(*(void *)v160 + 20) == 2) {
                *(unsigned char *)(v159 + 60) = v163 & 0xF7;
              }
            }
            goto LABEL_358;
          }
LABEL_357:
          int v161 = llvm::detail::DoubleAPFloat::addWithSpecial(v154, (int)v160, (int)&v189, v160);
LABEL_358:
          uint64_t v71 = v185 | v158 | v161 | v183;
          if ((_UNKNOWN *)v189 == &llvm::semPPCDoubleDouble)
          {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v189);
          }
          else if ((*(_DWORD *)(v189 + 8) - 64) <= 0xFFFFFF7F && v190)
          {
            operator delete[](v190);
          }
LABEL_183:
          uint64_t v13 = v71;
LABEL_184:
          uint64_t v23 = v193;
          if ((_UNKNOWN *)v193 != &llvm::semPPCDoubleDouble) {
            goto LABEL_185;
          }
LABEL_254:
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v193);
          return v13;
        }
        uint64_t v142 = *(void **)v12;
        if ((_UNKNOWN *)v139 == &llvm::semPPCDoubleDouble)
        {
          if (v142 != &llvm::semPPCDoubleDouble)
          {
            if (v138 == v178) {
              goto LABEL_336;
            }
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v140);
            goto LABEL_304;
          }
          llvm::detail::DoubleAPFloat::operator=((uint64_t *)v140, (uint64_t *)v12);
        }
        else
        {
          if (v142 != &llvm::semPPCDoubleDouble)
          {
            llvm::detail::IEEEFloat::operator=((uint64_t *)v140, (uint64_t *)v12);
            goto LABEL_336;
          }
          if (v138 != v178)
          {
            if ((*(_DWORD *)(v139 + 8) - 64) <= 0xFFFFFF7F)
            {
              int64x2_t v144 = *(void **)(v137 + 48);
              if (v144) {
                operator delete[](v144);
              }
            }
LABEL_304:
            llvm::APFloat::Storage::Storage(v140, v12);
          }
        }
LABEL_336:
        uint64_t v164 = *(void *)(a1 + 8);
        int32x2_t v165 = (llvm::detail::DoubleAPFloat *)(v164 + 40);
        if (*(_UNKNOWN **)(v164 + 40) == &llvm::semPPCDoubleDouble)
        {
          int v170 = llvm::detail::DoubleAPFloat::changeSign(v165);
          int v167 = llvm::detail::DoubleAPFloat::addWithSpecial(v170, (int)v165, (int)&v193, v165);
          int v166 = llvm::detail::DoubleAPFloat::changeSign(v165);
        }
        else
        {
          int v166 = llvm::detail::IEEEFloat::addOrSubtractSpecials(v165, (const llvm::detail::IEEEFloat *)&v193, 1);
          int v167 = v166;
          if (v166 == 2)
          {
            int v168 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v165, (const llvm::detail::IEEEFloat *)&v193, 1);
            int v166 = llvm::detail::IEEEFloat::normalize((uint64_t)v165, v136, v168);
            int v167 = v166;
          }
          int v169 = *(unsigned __int8 *)(v164 + 60);
          if ((v169 & 7) == 3)
          {
            if ((v195 & 7) != 3 || ((v195 ^ v169) & 8) == 0)
            {
              LOBYTE(v169) = v169 & 0xF7 | (8 * (v136 == 3));
              *(unsigned char *)(v164 + 60) = v169;
            }
            if (*(_DWORD *)(*(void *)v165 + 20) == 2) {
              *(unsigned char *)(v164 + 60) = v169 & 0xF7;
            }
          }
        }
        uint64_t v171 = *(void *)(a1 + 8);
        uint64_t v172 = (llvm::detail::DoubleAPFloat *)(v171 + 40);
        if (*(_UNKNOWN **)(v171 + 40) == &llvm::semPPCDoubleDouble)
        {
          int v154 = llvm::detail::DoubleAPFloat::addWithSpecial(v166, (int)v172, (int)v10, v172);
        }
        else
        {
          int v154 = llvm::detail::IEEEFloat::addOrSubtractSpecials(v172, v10, 0);
          if (v154 == 2)
          {
            int v173 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v172, v10, 0);
            int v154 = llvm::detail::IEEEFloat::normalize((uint64_t)v172, v136, v173);
          }
          int v174 = *(unsigned __int8 *)(v171 + 60);
          if ((v174 & 7) == 3)
          {
            int v175 = *(unsigned __int8 *)(v180 + 28);
            if ((v175 & 7) != 3 || ((v175 ^ v174) & 8) != 0)
            {
              LOBYTE(v174) = v174 & 0xF7 | (8 * (v136 == 3));
              *(unsigned char *)(v171 + 60) = v174;
            }
            if (*(_DWORD *)(*(void *)v172 + 20) == 2) {
              *(unsigned char *)(v171 + 60) = v174 & 0xF7;
            }
          }
        }
        int v158 = v154 | v167;
        uint64_t v159 = *(void *)(a1 + 8);
        int32x2_t v160 = (llvm::detail::IEEEFloat *)(v159 + 40);
        if (*(_UNKNOWN **)(v159 + 40) != &llvm::semPPCDoubleDouble) {
          goto LABEL_327;
        }
        goto LABEL_357;
      }
    }
    if ((_UNKNOWN *)v193 == &llvm::semPPCDoubleDouble) {
      goto LABEL_243;
    }
    goto LABEL_230;
  }
  llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(*(void *)(a1 + 8) + 8), (llvm::APFloatBase *)&v193);
  llvm::APFloat::makeZero((llvm::APFloat **)(*(void *)(a1 + 8) + 32), 0);
  uint64_t v23 = v193;
  if ((_UNKNOWN *)v193 == &llvm::semPPCDoubleDouble) {
    goto LABEL_254;
  }
LABEL_185:
  if ((*(_DWORD *)(v23 + 8) - 64) <= 0xFFFFFF7F && v194) {
    operator delete[](v194);
  }
  return v13;
}

uint64_t llvm::APFloat::add(llvm::detail::IEEEFloat *this, uint64_t a2, int a3)
{
  BOOL v4 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  int v5 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  if (*((_UNKNOWN **)this + 1) == &llvm::semPPCDoubleDouble)
  {
    return llvm::detail::DoubleAPFloat::addWithSpecial((int)this, (uint64_t *)this + 1, (uint64_t *)(a2 + 8), (llvm::detail::IEEEFloat *)((char *)this + 8), a3);
  }
  else
  {
    uint64_t result = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)((char *)this + 8), (const llvm::detail::IEEEFloat *)(a2 + 8), 0);
    if (result == 2)
    {
      int v9 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v4, v5, 0);
      uint64_t result = llvm::detail::IEEEFloat::normalize((uint64_t)v4, a3, v9);
    }
    int v10 = *((unsigned __int8 *)this + 28);
    if ((v10 & 7) == 3)
    {
      int v11 = *(unsigned __int8 *)(a2 + 28);
      if ((v11 & 7) != 3 || ((v11 ^ v10) & 8) != 0)
      {
        LOBYTE(v10) = v10 & 0xF7 | (8 * (a3 == 3));
        *((unsigned char *)this + 28) = v10;
      }
      if (*(_DWORD *)(*(void *)v4 + 20) == 2) {
        *((unsigned char *)this + 28) = v10 & 0xF7;
      }
    }
  }
  return result;
}

void llvm::APFloat::makeZero(llvm::APFloat **this, BOOL a2)
{
  uint64_t v2 = (llvm::APFloat *)this;
  uint64_t i = this[1];
  if (i == (llvm::APFloat *)&llvm::semPPCDoubleDouble)
  {
    llvm::APFloat::makeZero(this[2], a2);
    int v5 = (llvm::APFloat **)*((void *)v2 + 2);
    for (uint64_t i = v5[5]; i == (llvm::APFloat *)&llvm::semPPCDoubleDouble; uint64_t i = v5[5])
    {
      llvm::APFloat::makeZero(v5[6], 0);
      int v5 = (llvm::APFloat **)v5[6];
    }
    char v4 = 0;
    uint64_t v2 = (llvm::APFloat *)(v5 + 4);
  }
  else if (a2)
  {
    char v4 = 8;
  }
  else
  {
    char v4 = 0;
  }
  char v6 = *((unsigned char *)v2 + 28) & 0xF0;
  *((unsigned char *)v2 + 28) = v6 | v4 | 3;
  if (*((_DWORD *)i + 5) == 2) {
    *((unsigned char *)v2 + 28) = v6 | 3;
  }
  int v8 = *((_DWORD *)i + 1);
  int v7 = *((_DWORD *)i + 2);
  *((_DWORD *)v2 + 6) = v8 - 1;
  int v9 = (llvm::APFloat *)((char *)v2 + 16);
  if ((v7 - 64) <= 0xFFFFFF7F) {
    int v9 = *(llvm::APInt **)v9;
  }

  llvm::APInt::tcSet(v9, 0, (v7 + 64) >> 6);
}

uint64_t llvm::APFloat::subtract(llvm::detail::IEEEFloat *this, uint64_t a2, int a3)
{
  char v4 = (uint64_t *)((char *)this + 8);
  int v5 = (uint64_t *)(a2 + 8);
  if (*((_UNKNOWN **)this + 1) == &llvm::semPPCDoubleDouble)
  {
    int v12 = llvm::detail::DoubleAPFloat::changeSign((llvm::detail::IEEEFloat *)((char *)this + 8));
    uint64_t v13 = llvm::detail::DoubleAPFloat::addWithSpecial(v12, v4, v5, (llvm::detail::DoubleAPFloat *)v4, a3);
    llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)v4);
    return v13;
  }
  else
  {
    uint64_t result = llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)((char *)this + 8), (const llvm::detail::IEEEFloat *)(a2 + 8), 1);
    if (result == 2)
    {
      int v9 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)v4, (const llvm::detail::IEEEFloat *)v5, 1);
      uint64_t result = llvm::detail::IEEEFloat::normalize((uint64_t)v4, a3, v9);
    }
    int v10 = *((unsigned __int8 *)this + 28);
    if ((v10 & 7) == 3)
    {
      int v11 = *(unsigned __int8 *)(a2 + 28);
      if ((v11 & 7) != 3 || ((v11 ^ v10) & 8) == 0)
      {
        LOBYTE(v10) = v10 & 0xF7 | (8 * (a3 == 3));
        *((unsigned char *)this + 28) = v10;
      }
      if (*(_DWORD *)(*v4 + 20) == 2) {
        *((unsigned char *)this + 28) = v10 & 0xF7;
      }
    }
  }
  return result;
}

llvm::detail::DoubleAPFloat *llvm::APFloat::changeSign(llvm::detail::DoubleAPFloat *this)
{
  uint64_t v1 = *((void *)this + 1);
  if ((_UNKNOWN *)v1 == &llvm::semPPCDoubleDouble) {
    return llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)((char *)this + 8));
  }
  char v2 = *((unsigned char *)this + 28);
  if (*(_DWORD *)(v1 + 20) != 2 || (v2 & 5 | 2) != 3) {
    *((unsigned char *)this + 28) = v2 ^ 8;
  }
  return this;
}

uint64_t llvm::detail::DoubleAPFloat::addWithSpecial(int a1, uint64_t *a2, uint64_t *a3, llvm::detail::DoubleAPFloat *this, int a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a2[1];
  int v10 = (const llvm::detail::IEEEFloat *)(v9 + 8);
  int v11 = *(void **)(v9 + 8);
  if (v11 == &llvm::semPPCDoubleDouble)
  {
    if ((*(unsigned char *)(*(void *)(v9 + 16) + 28) & 7) == 1) {
      goto LABEL_41;
    }
  }
  else if ((*(unsigned char *)(v9 + 28) & 7) == 1)
  {
    goto LABEL_41;
  }
  uint64_t v12 = a3[1];
  uint64_t v13 = *(void **)(v12 + 8);
  if (v13 == &llvm::semPPCDoubleDouble)
  {
    if ((*(unsigned char *)(*(void *)(v12 + 16) + 28) & 7) == 1) {
      goto LABEL_42;
    }
  }
  else if ((*(unsigned char *)(a3[1] + 28) & 7) == 1)
  {
    goto LABEL_42;
  }
  if (v11 == &llvm::semPPCDoubleDouble)
  {
    if ((*(unsigned char *)(*(void *)(v9 + 16) + 28) & 7) == 3) {
      goto LABEL_42;
    }
  }
  else if ((*(unsigned char *)(v9 + 28) & 7) == 3)
  {
    goto LABEL_42;
  }
  if (v13 == &llvm::semPPCDoubleDouble)
  {
    if ((*(unsigned char *)(*(void *)(v12 + 16) + 28) & 7) != 3) {
      goto LABEL_17;
    }
LABEL_41:
    int v20 = (uint64_t *)this;
    unsigned __int8 v21 = a2;
LABEL_43:
    llvm::detail::DoubleAPFloat::operator=(v20, v21);
    return 0;
  }
  if ((*(unsigned char *)(v12 + 28) & 7) == 3) {
    goto LABEL_41;
  }
LABEL_17:
  uint64_t v14 = v9;
  if (v11 == &llvm::semPPCDoubleDouble) {
    uint64_t v14 = *(void *)(v9 + 16);
  }
  if ((*(unsigned char *)(v14 + 28) & 7) != 0) {
    goto LABEL_31;
  }
  uint64_t v15 = a3[1];
  if (v13 == &llvm::semPPCDoubleDouble) {
    uint64_t v15 = *(void *)(v12 + 16);
  }
  if ((*(unsigned char *)(v15 + 28) & 7) != 0) {
    goto LABEL_31;
  }
  if (v11 != &llvm::semPPCDoubleDouble)
  {
    unsigned int v16 = *(unsigned __int8 *)(v9 + 28);
    uint64_t v17 = a3[1];
    if (v13 != &llvm::semPPCDoubleDouble) {
      goto LABEL_25;
    }
LABEL_30:
    if (((v16 >> 3) & 1) != (*(unsigned char *)(*(void *)(v12 + 16) + 28) & 8) >> 3) {
      goto LABEL_26;
    }
    goto LABEL_31;
  }
  unsigned int v16 = *(unsigned __int8 *)(*(void *)(v9 + 16) + 28);
  uint64_t v17 = a3[1];
  if (v13 == &llvm::semPPCDoubleDouble) {
    goto LABEL_30;
  }
LABEL_25:
  if (((v16 >> 3) & 1) != (*(unsigned char *)(v17 + 28) & 8) >> 3)
  {
LABEL_26:
    uint64_t v18 = *((void *)this + 1);
    if (*(_UNKNOWN **)(v18 + 8) == &llvm::semPPCDoubleDouble) {
      uint64_t v18 = *(void *)(v18 + 16);
    }
    llvm::detail::DoubleAPFloat::makeNaN(this, 0, (*(unsigned char *)(v18 + 28) & 8) != 0, 0);
    return 1;
  }
LABEL_31:
  if (v11 == &llvm::semPPCDoubleDouble) {
    uint64_t v9 = *(void *)(v9 + 16);
  }
  if ((*(unsigned char *)(v9 + 28) & 7) == 0) {
    goto LABEL_41;
  }
  if (v13 == &llvm::semPPCDoubleDouble) {
    uint64_t v12 = *(void *)(v12 + 16);
  }
  if ((*(unsigned char *)(v12 + 28) & 7) == 0)
  {
LABEL_42:
    int v20 = (uint64_t *)this;
    unsigned __int8 v21 = a3;
    goto LABEL_43;
  }
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v33, v10);
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v30, (const llvm::detail::IEEEFloat *)(a2[1] + 40));
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v27, (const llvm::detail::IEEEFloat *)(a3[1] + 8));
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v24, (const llvm::detail::IEEEFloat *)(a3[1] + 40));
  uint64_t v19 = llvm::detail::DoubleAPFloat::addImpl((uint64_t)this, (uint64_t)v32, (uint64_t)v29, (uint64_t)v26, v23, a5);
  if ((_UNKNOWN *)v24 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v24);
  }
  else if ((*(_DWORD *)(v24 + 8) - 64) <= 0xFFFFFF7F && __p)
  {
    operator delete[](__p);
  }
  if ((_UNKNOWN *)v27 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v27);
  }
  else if ((*(_DWORD *)(v27 + 8) - 64) <= 0xFFFFFF7F && v28)
  {
    operator delete[](v28);
  }
  if ((_UNKNOWN *)v30 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v30);
  }
  else if ((*(_DWORD *)(v30 + 8) - 64) <= 0xFFFFFF7F && v31)
  {
    operator delete[](v31);
  }
  if ((_UNKNOWN *)v33 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v33);
  }
  else if ((*(_DWORD *)(v33 + 8) - 64) <= 0xFFFFFF7F && v34)
  {
    operator delete[](v34);
  }
  return v19;
}

void llvm::detail::DoubleAPFloat::makeNaN(llvm::detail::DoubleAPFloat *this, char a2, char a3, const llvm::APInt *a4)
{
  uint64_t v5 = *((void *)this + 1);
  int v7 = *(void **)(v5 + 8);
  char v6 = (llvm::detail::DoubleAPFloat *)(v5 + 8);
  if (v7 == &llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::makeNaN(v6, a2, a3, a4);
  }
  else {
    llvm::detail::IEEEFloat::makeNaN(v6, a2, a3, a4);
  }
  int v8 = (llvm::APFloat **)(*((void *)this + 1) + 32);

  llvm::APFloat::makeZero(v8, 0);
}

uint64_t llvm::detail::DoubleAPFloat::add(uint64_t *a1, uint64_t *a2, int a3)
{
  return llvm::detail::DoubleAPFloat::addWithSpecial((int)a1, a1, a2, (llvm::detail::DoubleAPFloat *)a1, a3);
}

uint64_t llvm::detail::DoubleAPFloat::subtract(llvm::detail::DoubleAPFloat *a1, uint64_t *a2, int a3)
{
  int v6 = llvm::detail::DoubleAPFloat::changeSign(a1);
  uint64_t v7 = llvm::detail::DoubleAPFloat::addWithSpecial(v6, (uint64_t *)a1, a2, a1, a3);
  llvm::detail::DoubleAPFloat::changeSign(a1);
  return v7;
}

llvm::detail::DoubleAPFloat *llvm::detail::DoubleAPFloat::changeSign(llvm::detail::DoubleAPFloat *this)
{
  do
  {
    uint64_t v5 = *((void *)this + 1);
    uint64_t result = (llvm::detail::DoubleAPFloat *)(v5 + 8);
    uint64_t v6 = *(void *)(v5 + 8);
    if ((_UNKNOWN *)v6 == &llvm::semPPCDoubleDouble)
    {
      uint64_t result = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::changeSign(result);
    }
    else
    {
      int v7 = *(_DWORD *)(v6 + 20);
      char v8 = *(unsigned char *)(v5 + 28);
      if (v7 != 2 || (v8 & 5 | 2) != 3) {
        *(unsigned char *)(v5 + 28) = v8 ^ 8;
      }
    }
    uint64_t v3 = *((void *)this + 1);
    this = (llvm::detail::DoubleAPFloat *)(v3 + 40);
    uint64_t v4 = *(void *)(v3 + 40);
  }
  while ((_UNKNOWN *)v4 == &llvm::semPPCDoubleDouble);
  int v10 = *(_DWORD *)(v4 + 20);
  char v11 = *(unsigned char *)(v3 + 60);
  if (v10 != 2 || (v11 & 5 | 2) != 3) {
    *(unsigned char *)(v3 + 60) = v11 ^ 8;
  }
  return result;
}

uint64_t llvm::detail::DoubleAPFloat::multiply(llvm::detail::DoubleAPFloat *this, uint64_t *a2, uint64_t a3)
{
  v43[3] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 1);
  int v7 = (const llvm::detail::IEEEFloat *)(v6 + 8);
  char v8 = *(void **)(v6 + 8);
  if (v8 == &llvm::semPPCDoubleDouble)
  {
    if ((*(unsigned char *)(*(void *)(v6 + 16) + 28) & 7) == 1) {
      goto LABEL_35;
    }
  }
  else if ((*(unsigned char *)(*((void *)this + 1) + 28) & 7) == 1)
  {
    goto LABEL_35;
  }
  uint64_t v9 = a2[1];
  int v10 = *(void **)(v9 + 8);
  if (v10 == &llvm::semPPCDoubleDouble)
  {
    if ((*(unsigned char *)(*(void *)(v9 + 16) + 28) & 7) == 1)
    {
LABEL_36:
      uint64_t v17 = a2;
      goto LABEL_37;
    }
  }
  else if ((*(unsigned char *)(a2[1] + 28) & 7) == 1)
  {
    goto LABEL_36;
  }
  if (v8 == &llvm::semPPCDoubleDouble)
  {
    if ((*(unsigned char *)(*(void *)(v6 + 16) + 28) & 7) != 3) {
      goto LABEL_16;
    }
  }
  else if ((*(unsigned char *)(v6 + 28) & 7) != 3)
  {
    goto LABEL_16;
  }
  uint64_t v11 = a2[1];
  if (v10 == &llvm::semPPCDoubleDouble) {
    uint64_t v11 = *(void *)(v9 + 16);
  }
  if ((*(unsigned char *)(v11 + 28) & 7) == 0) {
    goto LABEL_23;
  }
LABEL_16:
  if (v8 == &llvm::semPPCDoubleDouble)
  {
    if ((*(unsigned char *)(*(void *)(v6 + 16) + 28) & 7) != 0) {
      goto LABEL_24;
    }
  }
  else if ((*(unsigned char *)(v6 + 28) & 7) != 0)
  {
    goto LABEL_24;
  }
  uint64_t v12 = a2[1];
  if (v10 == &llvm::semPPCDoubleDouble) {
    uint64_t v12 = *(void *)(v9 + 16);
  }
  if ((*(unsigned char *)(v12 + 28) & 7) == 3)
  {
LABEL_23:
    llvm::detail::DoubleAPFloat::makeNaN(this, 0, 0, 0);
    return 0;
  }
LABEL_24:
  if (v8 == &llvm::semPPCDoubleDouble)
  {
    int v13 = *(unsigned char *)(*(void *)(v6 + 16) + 28) & 7;
    if (v13 != 3) {
      goto LABEL_28;
    }
LABEL_35:
    uint64_t v17 = (uint64_t *)this;
LABEL_37:
    llvm::detail::DoubleAPFloat::operator=((uint64_t *)this, v17);
    return 0;
  }
  int v13 = *(unsigned char *)(v6 + 28) & 7;
  if (v13 == 3) {
    goto LABEL_35;
  }
LABEL_28:
  if (!v13) {
    goto LABEL_35;
  }
  if (v10 == &llvm::semPPCDoubleDouble) {
    uint64_t v9 = *(void *)(v9 + 16);
  }
  int v14 = *(unsigned char *)(v9 + 28) & 7;
  if (v14 == 3 || !v14) {
    goto LABEL_36;
  }
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v43, v7);
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v41, (const llvm::detail::IEEEFloat *)(*((void *)this + 1) + 40));
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v39, (const llvm::detail::IEEEFloat *)(a2[1] + 8));
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v37, (const llvm::detail::IEEEFloat *)(a2[1] + 40));
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v34, (const llvm::detail::IEEEFloat *)v43);
  uint64_t v15 = llvm::APFloat::multiply((llvm::detail::DoubleAPFloat *)&v33, (uint64_t)v38, a3);
  if ((_UNKNOWN *)v34[0] == &llvm::semPPCDoubleDouble) {
    char v16 = *(unsigned char *)(v34[1] + 28);
  }
  else {
    char v16 = v35;
  }
  if ((v16 & 6) != 0 && (v16 & 7) != 3)
  {
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v32, (const llvm::detail::IEEEFloat *)v43);
    llvm::APFloat::changeSign((llvm::detail::DoubleAPFloat *)&v33);
    int v25 = llvm::APFloat::fusedMultiplyAdd((uint64_t)v31, (uint64_t)v38, (uint64_t)&v33, a3);
    llvm::APFloat::changeSign((llvm::detail::DoubleAPFloat *)&v33);
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v29, (const llvm::detail::IEEEFloat *)v43);
    int v19 = llvm::APFloat::multiply((llvm::detail::DoubleAPFloat *)&v28, (uint64_t)v36, a3);
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v27, (const llvm::detail::IEEEFloat *)v41);
    int v20 = llvm::APFloat::multiply((llvm::detail::DoubleAPFloat *)v26, (uint64_t)v38, a3);
    int v21 = llvm::APFloat::add((llvm::detail::IEEEFloat *)&v28, (uint64_t)v26, a3);
    int v22 = llvm::APFloat::add((llvm::detail::IEEEFloat *)v31, (uint64_t)&v28, a3);
    llvm::APFloat::~APFloat((llvm::APFloat *)v26);
    llvm::APFloat::~APFloat((llvm::APFloat *)&v28);
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v29, (const llvm::detail::IEEEFloat *)v34);
    uint64_t v15 = v25 | v19 | v20 | v21 | v22 | llvm::APFloat::add((llvm::detail::IEEEFloat *)&v28, (uint64_t)v31, a3) | v15;
    llvm::APFloat::operator=(*((llvm::detail::DoubleAPFloat **)this + 1), &v28);
    if ((_UNKNOWN *)v29[0] == &llvm::semPPCDoubleDouble) {
      char v23 = *(unsigned char *)(v29[1] + 28);
    }
    else {
      char v23 = v30;
    }
    if ((v23 & 7u) < 2)
    {
      llvm::APFloat::makeZero((llvm::APFloat **)(*((void *)this + 1) + 32), 0);
    }
    else
    {
      int v24 = llvm::APFloat::subtract((llvm::detail::IEEEFloat *)&v33, (uint64_t)&v28, a3);
      uint64_t v15 = v24 | llvm::APFloat::add((llvm::detail::IEEEFloat *)&v33, (uint64_t)v31, a3) | v15;
      llvm::APFloat::operator=((llvm::detail::DoubleAPFloat *)(*((void *)this + 1) + 32), &v33);
    }
    llvm::APFloat::~APFloat((llvm::APFloat *)&v28);
    llvm::APFloat::~APFloat((llvm::APFloat *)v31);
  }
  else
  {
    llvm::APFloat::operator=(*((llvm::detail::DoubleAPFloat **)this + 1), &v33);
    llvm::APFloat::makeZero((llvm::APFloat **)(*((void *)this + 1) + 32), 0);
  }
  llvm::APFloat::~APFloat((llvm::APFloat *)&v33);
  llvm::APFloat::~APFloat((llvm::APFloat *)v36);
  llvm::APFloat::~APFloat((llvm::APFloat *)v38);
  llvm::APFloat::~APFloat((llvm::APFloat *)v40);
  llvm::APFloat::~APFloat((llvm::APFloat *)v42);
  return v15;
}

uint64_t llvm::APFloat::multiply(llvm::detail::DoubleAPFloat *this, uint64_t a2, int a3)
{
  uint64_t v4 = (unint64_t **)((char *)this + 8);
  uint64_t v5 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  if (*((_UNKNOWN **)this + 1) == &llvm::semPPCDoubleDouble)
  {
    uint64_t v9 = (llvm::detail::DoubleAPFloat *)((char *)this + 8);
    return llvm::detail::DoubleAPFloat::multiply(v9);
  }
  else
  {
    *((unsigned char *)this + 28) ^= *(unsigned char *)(a2 + 28) & 8;
    uint64_t result = llvm::detail::IEEEFloat::multiplySpecials((llvm::detail::DoubleAPFloat *)((char *)this + 8), (const llvm::detail::IEEEFloat *)(a2 + 8));
    char v8 = *((unsigned char *)this + 28);
    if ((v8 & 7) == 3)
    {
      if (*((_DWORD *)*v4 + 5) == 2) {
        *((unsigned char *)this + 28) = v8 & 0xF7;
      }
    }
    else if ((*((unsigned char *)this + 28) & 6) != 0)
    {
      int v10 = llvm::detail::IEEEFloat::multiplySignificand(v4, v5);
      LODWORD(result) = llvm::detail::IEEEFloat::normalize((uint64_t)v4, a3, v10);
      if (v10) {
        return result | 0x10;
      }
      else {
        return result;
      }
    }
  }
  return result;
}

uint64_t llvm::APFloat::fusedMultiplyAdd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  uint64_t v6 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  int v7 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
  if (v5 == &llvm::semPPCDoubleDouble) {
    return llvm::detail::DoubleAPFloat::fusedMultiplyAdd(v4, v6, v7, a4);
  }
  else {
    return llvm::detail::IEEEFloat::fusedMultiplyAdd(v4, v6, (unint64_t *)v7, a4);
  }
}

uint64_t llvm::detail::DoubleAPFloat::divide(llvm::detail::DoubleAPFloat *a1, llvm::detail::DoubleAPFloat *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&__p);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v27, (const llvm::APInt **)&__p);
  if (v24 >= 0x41 && __p) {
    operator delete[](__p);
  }
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (llvm::APInt *)&v21);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v24, (const llvm::APInt **)&v21);
  if ((_UNKNOWN *)v27 == &llvm::semPPCDoubleDouble)
  {
    uint64_t v6 = llvm::detail::DoubleAPFloat::divide(&v27, &v24, a3);
  }
  else
  {
    v29 ^= v26 & 8;
    uint64_t v6 = llvm::detail::IEEEFloat::divideSpecials((llvm::detail::IEEEFloat *)&v27, (const llvm::detail::IEEEFloat *)&v24);
    if ((v29 & 7) == 3)
    {
      if (*(_DWORD *)(v27 + 20) == 2) {
        v29 &= ~8u;
      }
    }
    else if ((v29 & 6) != 0)
    {
      int v7 = llvm::detail::IEEEFloat::divideSignificand((llvm::detail::IEEEFloat *)&v27, (const llvm::detail::IEEEFloat *)&v24);
      unsigned int v8 = llvm::detail::IEEEFloat::normalize((uint64_t)&v27, a3, v7);
      if (v7) {
        uint64_t v6 = v8 | 0x10;
      }
      else {
        uint64_t v6 = v8;
      }
    }
  }
  if ((_UNKNOWN *)v24 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v24);
  }
  else if ((*(_DWORD *)(v24 + 8) - 64) <= 0xFFFFFF7F && v25)
  {
    operator delete[](v25);
  }
  if (v22 >= 0x41 && v21) {
    operator delete[](v21);
  }
  if ((_UNKNOWN *)v27 == &llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v27, (llvm::APInt *)&v18);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&v27, (uint64_t)&v18);
  }
  *(void *)&long long v20 = &llvm::semPPCDoubleDouble;
  uint64_t v9 = operator new[](0x50uLL);
  int v10 = v9 + 1;
  uint64_t v11 = (llvm::detail::IEEEFloat *)((char *)v9 + 24);
  *uint64_t v9 = xmmword_181126D40;
  uint64_t v12 = (llvm::detail::IEEEFloat *)((char *)v9 + 56);
  if (v19 >= 0x41) {
    int v13 = (void **)v18;
  }
  else {
    int v13 = &v18;
  }
  int v14 = *v13;
  LODWORD(v24) = 64;
  __p = v14;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v11, (const llvm::APInt **)&__p);
  if (v19 >= 0x41) {
    uint64_t v15 = v18;
  }
  else {
    uint64_t v15 = &v18;
  }
  char v16 = (void *)v15[1];
  unsigned int v22 = 64;
  int v21 = v16;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v12, (const llvm::APInt **)&v21);
  *((void *)&v20 + 1) = v10;
  if (&v20 != (long long *)a1)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
    *(_OWORD *)a1 = v20;
    *(void *)&long long v20 = &llvm::semBogus;
    *((void *)&v20 + 1) = 0;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v20);
  if (v19 >= 0x41 && v18) {
    operator delete[](v18);
  }
  if ((_UNKNOWN *)v27 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v27);
  }
  else if ((*(_DWORD *)(v27 + 8) - 64) <= 0xFFFFFF7F && v28)
  {
    operator delete[](v28);
  }
  return v6;
}

llvm::APInt *llvm::detail::DoubleAPFloat::bitcastToAPInt@<X0>(llvm::detail::DoubleAPFloat *this@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *(void **)(v4 + 8);
  uint64_t v5 = (llvm::detail::DoubleAPFloat *)(v4 + 8);
  if (v6 == &llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt((uint64_t *)&v14, v5);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt(v5, (uint64_t)&v14);
  }
  int v7 = (unint64_t *)&v14;
  if (v15 >= 0x41) {
    int v7 = (unint64_t *)v14;
  }
  unint64_t v16 = *v7;
  uint64_t v8 = *((void *)this + 1);
  int v10 = *(void **)(v8 + 40);
  uint64_t v9 = (llvm::detail::IEEEFloat *)(v8 + 40);
  if (v10 != &llvm::semPPCDoubleDouble)
  {
    llvm::detail::IEEEFloat::bitcastToAPInt(v9, (uint64_t)&__p);
    if (v13 <= 0x40) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t v17 = *(void **)__p;
    operator delete[](__p);
    if (v15 < 0x41) {
      return llvm::APInt::APInt(a2, 0x80u, 2u, &v16);
    }
    goto LABEL_12;
  }
  llvm::detail::DoubleAPFloat::bitcastToAPInt((uint64_t *)&__p, v9);
  if (v13 > 0x40) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v17 = __p;
  if (v15 < 0x41) {
    return llvm::APInt::APInt(a2, 0x80u, 2u, &v16);
  }
LABEL_12:
  if (v14) {
    operator delete[](v14);
  }
  return llvm::APInt::APInt(a2, 0x80u, 2u, &v16);
}

uint64_t llvm::detail::DoubleAPFloat::remainder(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(this, (llvm::APInt *)&__p);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v23, (const llvm::APInt **)&__p);
  if (v21 >= 0x41 && __p) {
    operator delete[](__p);
  }
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (llvm::APInt *)&v18);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v21, (const llvm::APInt **)&v18);
  if (v23 == (long long *)&llvm::semPPCDoubleDouble)
  {
    uint64_t v4 = llvm::detail::DoubleAPFloat::remainder((llvm::detail::DoubleAPFloat *)&v23, (const llvm::detail::DoubleAPFloat *)&v21);
    uint64_t v5 = v21;
    if (v21 != (unint64_t *)&llvm::semPPCDoubleDouble) {
      goto LABEL_6;
    }
LABEL_10:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v21);
    goto LABEL_11;
  }
  uint64_t v4 = llvm::detail::IEEEFloat::remainder(&v23, &v21);
  uint64_t v5 = v21;
  if (v21 == (unint64_t *)&llvm::semPPCDoubleDouble) {
    goto LABEL_10;
  }
LABEL_6:
  if ((*((_DWORD *)v5 + 2) - 64) <= 0xFFFFFF7F && v22) {
    operator delete[](v22);
  }
LABEL_11:
  if (v19 >= 0x41 && v18) {
    operator delete[](v18);
  }
  if (v23 == (long long *)&llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v23, (llvm::APInt *)&v15);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&v23, (uint64_t)&v15);
  }
  *(void *)&long long v17 = &llvm::semPPCDoubleDouble;
  uint64_t v6 = operator new[](0x50uLL);
  int v7 = v6 + 1;
  uint64_t v8 = (llvm::detail::IEEEFloat *)((char *)v6 + 24);
  *uint64_t v6 = xmmword_181126D40;
  uint64_t v9 = (llvm::detail::IEEEFloat *)((char *)v6 + 56);
  if (v16 >= 0x41) {
    int v10 = (void **)v15;
  }
  else {
    int v10 = &v15;
  }
  uint64_t v11 = *v10;
  LODWORD(v21) = 64;
  __p = v11;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v8, (const llvm::APInt **)&__p);
  if (v16 >= 0x41) {
    uint64_t v12 = v15;
  }
  else {
    uint64_t v12 = &v15;
  }
  unsigned int v13 = (void *)v12[1];
  unsigned int v19 = 64;
  uint64_t v18 = v13;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v9, (const llvm::APInt **)&v18);
  *((void *)&v17 + 1) = v7;
  if (&v17 != (long long *)this)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(this);
    *(_OWORD *)this = v17;
    *(void *)&long long v17 = &llvm::semBogus;
    *((void *)&v17 + 1) = 0;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v17);
  if (v16 >= 0x41 && v15) {
    operator delete[](v15);
  }
  if (v23 == (long long *)&llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v23);
  }
  else if ((*((_DWORD *)v23 + 2) - 64) <= 0xFFFFFF7F && v24)
  {
    operator delete[](v24);
  }
  return v4;
}

uint64_t llvm::detail::DoubleAPFloat::fusedMultiplyAdd(llvm::detail::DoubleAPFloat *a1, llvm::detail::DoubleAPFloat *a2, llvm::detail::DoubleAPFloat *a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&__p);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v28, (const llvm::APInt **)&__p);
  if (v26 >= 0x41 && __p) {
    operator delete[](__p);
  }
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (llvm::APInt *)v21);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v26, (const llvm::APInt **)v21);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a3, (llvm::APInt *)&v19);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v23, (const llvm::APInt **)&v19);
  if ((_UNKNOWN *)v28 == &llvm::semPPCDoubleDouble)
  {
    uint64_t v8 = llvm::detail::DoubleAPFloat::fusedMultiplyAdd(&v28, &v26, &v23, a4);
    uint64_t v9 = v23;
    if (v23 != (_DWORD *)&llvm::semPPCDoubleDouble) {
      goto LABEL_6;
    }
LABEL_10:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v23);
    goto LABEL_11;
  }
  uint64_t v8 = llvm::detail::IEEEFloat::fusedMultiplyAdd((llvm::detail::IEEEFloat *)&v28, (llvm::detail::IEEEFloat *)&v26, (unint64_t *)&v23, a4);
  uint64_t v9 = v23;
  if (v23 == (_DWORD *)&llvm::semPPCDoubleDouble) {
    goto LABEL_10;
  }
LABEL_6:
  if ((v9[2] - 64) <= 0xFFFFFF7F && v24) {
    operator delete[](v24);
  }
LABEL_11:
  if (v20 >= 0x41 && v19) {
    operator delete[](v19);
  }
  if ((_UNKNOWN *)v26 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v26);
  }
  else if ((*(_DWORD *)(v26 + 8) - 64) <= 0xFFFFFF7F && v27)
  {
    operator delete[](v27);
  }
  if (LODWORD(v21[1]) >= 0x41 && v21[0]) {
    operator delete[](v21[0]);
  }
  if ((_UNKNOWN *)v28 == &llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v28, (llvm::APInt *)&v19);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&v28, (uint64_t)&v19);
  }
  v21[0] = &llvm::semPPCDoubleDouble;
  int v10 = operator new[](0x50uLL);
  uint64_t v11 = v10 + 1;
  uint64_t v12 = (llvm::detail::IEEEFloat *)((char *)v10 + 24);
  *int v10 = xmmword_181126D40;
  unsigned int v13 = (llvm::detail::IEEEFloat *)((char *)v10 + 56);
  if (v20 >= 0x41) {
    int v14 = (void **)v19;
  }
  else {
    int v14 = &v19;
  }
  unsigned int v15 = *v14;
  LODWORD(v26) = 64;
  __p = v15;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v12, (const llvm::APInt **)&__p);
  if (v20 >= 0x41) {
    unsigned int v16 = v19;
  }
  else {
    unsigned int v16 = &v19;
  }
  long long v17 = (const llvm::APInt *)*((void *)v16 + 1);
  LODWORD(v23) = 64;
  unsigned int v22 = v17;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v13, &v22);
  v21[1] = v11;
  if (v21 != (void **)a1)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
    *(_OWORD *)a1 = *(_OWORD *)v21;
    v21[0] = &llvm::semBogus;
    v21[1] = 0;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v21);
  if (v20 >= 0x41 && v19) {
    operator delete[](v19);
  }
  if ((_UNKNOWN *)v28 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v28);
  }
  else if ((*(_DWORD *)(v28 + 8) - 64) <= 0xFFFFFF7F && v29)
  {
    operator delete[](v29);
  }
  return v8;
}

uint64_t llvm::detail::DoubleAPFloat::compareAbsoluteValue(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t v4 = (_DWORD *)*((void *)this + 1);
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = *((void *)v4 + 1);
  if ((_UNKNOWN *)v6 == &llvm::semPPCDoubleDouble)
  {
    uint64_t result = llvm::detail::DoubleAPFloat::compareAbsoluteValue((llvm::detail::DoubleAPFloat *)(v4 + 2), (const llvm::detail::DoubleAPFloat *)(v5 + 8));
    if (result != 1) {
      return result;
    }
  }
  else
  {
    int v7 = v4[6];
    int v8 = *(_DWORD *)(v5 + 24);
    int v9 = v7 - v8;
    if (v7 == v8)
    {
      int v11 = *(_DWORD *)(v6 + 8);
      uint64_t v12 = (llvm::APInt *)(v4 + 4);
      if ((v11 - 64) <= 0xFFFFFF7F) {
        uint64_t v12 = *(llvm::APInt **)v12;
      }
      unsigned int v15 = *(const unint64_t **)(v5 + 16);
      unsigned int v13 = (const unint64_t *)(v5 + 16);
      int v14 = v15;
      if ((*(_DWORD *)(*(v13 - 1) + 8) - 64) >= 0xFFFFFF80) {
        unsigned int v16 = v13;
      }
      else {
        unsigned int v16 = v14;
      }
      int v9 = llvm::APInt::tcCompare(v12, v16, (const unint64_t *)((v11 + 64) >> 6));
      if (v9 > 0) {
        return 2;
      }
    }
    else if (v9 > 0)
    {
      return 2;
    }
    uint64_t result = v9 >= 0;
    if (result != 1) {
      return result;
    }
  }
  long long v17 = (_DWORD *)*((void *)this + 1);
  uint64_t v18 = *((void *)a2 + 1);
  uint64_t v19 = *((void *)v17 + 5);
  if ((_UNKNOWN *)v19 == &llvm::semPPCDoubleDouble)
  {
    uint64_t result = llvm::detail::DoubleAPFloat::compareAbsoluteValue((llvm::detail::DoubleAPFloat *)(v17 + 10), (const llvm::detail::DoubleAPFloat *)(v18 + 40));
    if ((result & 0xFFFFFFFD) != 0) {
      return result;
    }
LABEL_29:
    uint64_t v29 = *((void *)this + 1);
    uint64_t v30 = v29;
    if (*(_UNKNOWN **)(v29 + 8) == &llvm::semPPCDoubleDouble) {
      uint64_t v30 = *(void *)(v29 + 16);
    }
    int v31 = *(unsigned __int8 *)(v30 + 28);
    if (*(_UNKNOWN **)(v29 + 40) == &llvm::semPPCDoubleDouble) {
      uint64_t v32 = *(void *)(v29 + 48);
    }
    else {
      uint64_t v32 = v29 + 32;
    }
    unsigned int v33 = v31 ^ *(unsigned __int8 *)(v32 + 28);
    uint64_t v34 = *((void *)a2 + 1);
    uint64_t v35 = v34;
    if (*(_UNKNOWN **)(v34 + 8) == &llvm::semPPCDoubleDouble) {
      uint64_t v35 = *(void *)(v34 + 16);
    }
    int v36 = (v33 >> 3) & 1;
    int v37 = *(unsigned __int8 *)(v35 + 28);
    if (*(_UNKNOWN **)(v34 + 40) == &llvm::semPPCDoubleDouble)
    {
      unsigned int v38 = ((v37 ^ *(unsigned __int8 *)(*(void *)(v34 + 48) + 28)) >> 3) & 1;
      int v39 = v36 ^ 1;
      if ((v36 ^ 1)) {
        goto LABEL_42;
      }
    }
    else
    {
      unsigned int v38 = ((v37 ^ *(unsigned __int8 *)(v34 + 60)) >> 3) & 1;
      int v39 = v36 ^ 1;
      if ((v36 ^ 1))
      {
LABEL_42:
        if (v39 & v38) {
          return 2;
        }
        if (v36 | v38) == 1 && (v36 & v38) {
          return (2 - result);
        }
        return result;
      }
    }
    if (!v38) {
      return 0;
    }
    goto LABEL_42;
  }
  int v20 = v17[14];
  int v21 = *(_DWORD *)(v18 + 56);
  int v22 = v20 - v21;
  if (v20 == v21)
  {
    int v23 = *(_DWORD *)(v19 + 8);
    uint64_t v24 = (llvm::APInt *)(v17 + 12);
    if ((v23 - 64) <= 0xFFFFFF7F) {
      uint64_t v24 = *(llvm::APInt **)v24;
    }
    uint64_t v27 = *(const unint64_t **)(v18 + 48);
    uint64_t v25 = (const unint64_t *)(v18 + 48);
    uint64_t v26 = v27;
    if ((*(_DWORD *)(*(v25 - 1) + 8) - 64) >= 0xFFFFFF80) {
      uint64_t v28 = v25;
    }
    else {
      uint64_t v28 = v26;
    }
    int v22 = llvm::APInt::tcCompare(v24, v28, (const unint64_t *)((v23 + 64) >> 6));
  }
  if (v22 <= 0) {
    uint64_t result = v22 >= 0;
  }
  else {
    uint64_t result = 2;
  }
  if ((result & 0xFFFFFFFD) == 0) {
    goto LABEL_29;
  }
  return result;
}

void llvm::detail::DoubleAPFloat::makeLargest(llvm::detail::DoubleAPFloat *this, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v5 = 64;
  uint64_t v4 = 0x7FEFFFFFFFFFFFFFLL;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v6, (const llvm::APInt **)&v4);
  llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(*((void *)this + 1) + 8), (llvm::APFloatBase *)&v6);
  if ((_UNKNOWN *)v6 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v6);
  }
  else if ((*(_DWORD *)(v6 + 8) - 64) <= 0xFFFFFF7F && __p)
  {
    operator delete[](__p);
  }
  int v5 = 64;
  uint64_t v4 = 0x7C8FFFFFFFFFFFFELL;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v6, (const llvm::APInt **)&v4);
  llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(*((void *)this + 1) + 40), (llvm::APFloatBase *)&v6);
  if ((_UNKNOWN *)v6 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v6);
  }
  else if ((*(_DWORD *)(v6 + 8) - 64) <= 0xFFFFFF7F && __p)
  {
    operator delete[](__p);
  }
  if (a2) {
    llvm::detail::DoubleAPFloat::changeSign(this);
  }
}

uint64_t llvm::detail::DoubleAPFloat::compare(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  do
  {
    uint64_t v4 = *((void *)this + 1);
    uint64_t v6 = *(void **)(v4 + 8);
    int v5 = (llvm::detail::DoubleAPFloat *)(v4 + 8);
    int v7 = (const llvm::detail::DoubleAPFloat *)(*((void *)a2 + 1) + 8);
    if (v6 == &llvm::semPPCDoubleDouble)
    {
      uint64_t result = llvm::detail::DoubleAPFloat::compare(v5, v7);
      if (result != 1) {
        return result;
      }
    }
    else
    {
      uint64_t result = llvm::detail::IEEEFloat::compare(v5, v7);
      if (result != 1) {
        return result;
      }
    }
    uint64_t v9 = *((void *)this + 1);
    uint64_t v10 = *((void *)a2 + 1);
    int v11 = *(void **)(v9 + 40);
    this = (llvm::detail::DoubleAPFloat *)(v9 + 40);
    a2 = (const llvm::detail::DoubleAPFloat *)(v10 + 40);
  }
  while (v11 == &llvm::semPPCDoubleDouble);

  return llvm::detail::IEEEFloat::compare(this, (const llvm::detail::IEEEFloat *)(v10 + 40));
}

uint64_t llvm::detail::DoubleAPFloat::bitwiseIsEqual(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t result = llvm::APFloat::bitwiseIsEqual(*((void *)this + 1), *((void *)a2 + 1));
  if (result)
  {
    uint64_t v5 = *((void *)this + 1) + 32;
    uint64_t v6 = *((void *)a2 + 1) + 32;
    return llvm::APFloat::bitwiseIsEqual(v5, v6);
  }
  return result;
}

uint64_t llvm::APFloat::bitwiseIsEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)(a2 + 8)) {
    return 0;
  }
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  while ((_UNKNOWN *)v2 == &llvm::semPPCDoubleDouble)
  {
    uint64_t result = llvm::APFloat::bitwiseIsEqual(*(void *)(v5 + 16), *(void *)(v4 + 16));
    if (!result) {
      return result;
    }
    uint64_t v6 = *(void *)(v5 + 16);
    uint64_t v5 = v6 + 32;
    uint64_t v7 = *(void *)(v4 + 16);
    uint64_t v4 = v7 + 32;
    uint64_t v2 = *(void *)(v6 + 40);
    if (v2 != *(void *)(v7 + 40)) {
      return 0;
    }
  }
  if (v5 == v4) {
    return 1;
  }
  int v8 = *(unsigned __int8 *)(v5 + 28);
  int v9 = *(unsigned __int8 *)(v4 + 28);
  if ((v8 & 7) != (v9 & 7) || ((v9 ^ v8) & 8) != 0) {
    return 0;
  }
  uint64_t result = 1;
  if ((v8 & 7) == 0 || (v8 & 7) == 3) {
    return result;
  }
  if ((v8 & 6) != 0 && *(_DWORD *)(v5 + 24) != *(_DWORD *)(v4 + 24)) {
    return 0;
  }
  int v10 = *(_DWORD *)(v2 + 8);
  unsigned int v11 = v10 - 64;
  uint64_t v12 = (void *)(v5 + 16);
  if ((v10 - 64) <= 0xFFFFFF7F) {
    uint64_t v12 = (void *)*v12;
  }
  unsigned int v13 = v10 + 64;
  unsigned int v16 = *(const void **)(v4 + 16);
  unsigned int v15 = (const void *)(v4 + 16);
  int v14 = v16;
  if (v11 >= 0xFFFFFF80) {
    long long v17 = v15;
  }
  else {
    long long v17 = v14;
  }
  return memcmp(v12, v17, (v13 >> 3) & 0x1FFFFFF8) == 0;
}

unint64_t llvm::detail::hash_value(llvm::detail *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v5 = *(void **)(v3 + 8);
    uint64_t v4 = (llvm::detail *)(v3 + 8);
    if (v5 == &llvm::semPPCDoubleDouble)
    {
      unint64_t v7 = llvm::detail::hash_value(v4, a2);
      uint64_t v15 = *((void *)this + 1);
      unsigned int v16 = *(void **)(v15 + 40);
      int v9 = (llvm::detail *)(v15 + 40);
      if (v16 != &llvm::semPPCDoubleDouble)
      {
LABEL_4:
        unint64_t v11 = llvm::detail::hash_value(v9, v6);
        {
LABEL_11:
          {
            unint64_t v18 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v18 = 0xFF51AFD7ED558CCDLL;
            }
            llvm::hashing::detail::get_execution_seed(void)::seed = v18;
          }
        }
LABEL_10:
        uint64_t v17 = __ROR8__(v11 + 16, 16);
        return (0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69
                * (v17 ^ ((0x9DDFEA08EB382D69 * (v7 ^ llvm::hashing::detail::get_execution_seed(void)::seed ^ v17)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ llvm::hashing::detail::get_execution_seed(void)::seed ^ v17)))) ^ ((0x9DDFEA08EB382D69 * (v17 ^ ((0x9DDFEA08EB382D69 * (v7 ^ llvm::hashing::detail::get_execution_seed(void)::seed ^ v17)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ llvm::hashing::detail::get_execution_seed(void)::seed ^ v17)))) >> 47))) ^ v11;
      }
    }
    else
    {
      unint64_t v7 = llvm::detail::hash_value(v4, a2);
      uint64_t v8 = *((void *)this + 1);
      int v10 = *(void **)(v8 + 40);
      int v9 = (llvm::detail *)(v8 + 40);
      if (v10 != &llvm::semPPCDoubleDouble) {
        goto LABEL_4;
      }
    }
    unint64_t v11 = llvm::detail::hash_value(v9, v6);
    goto LABEL_10;
  }
  {
    unint64_t v19 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v19 = 0xFF51AFD7ED558CCDLL;
    }
    llvm::hashing::detail::get_execution_seed(void)::seed = v19;
  }
  uint64_t v12 = llvm::hashing::detail::get_execution_seed(void)::seed ^ HIDWORD(*(void *)this);
  unint64_t v13 = 0x9DDFEA08EB382D69 * ((8 * *(void *)this + 8) ^ v12);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) >> 47));
}

unint64_t llvm::hash_value(llvm *this, const llvm::APFloat *a2)
{
  uint64_t v3 = (void *)*((void *)this + 1);
  uint64_t v2 = (llvm *)((char *)this + 8);
  if (v3 == &llvm::semPPCDoubleDouble) {
    return llvm::detail::hash_value(v2, a2);
  }
  else {
    return llvm::detail::hash_value(v2, a2);
  }
}

void llvm::detail::DoubleAPFloat::convertFromString(llvm::detail::DoubleAPFloat *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = &llvm::semPPCDoubleDoubleLegacy;
  uint64_t v26 = operator new[](0x10uLL);
  char v28 = 3;
  int v27 = -970;
  llvm::APInt::tcSet((llvm::APInt *)v26, 0, 2u);
  llvm::detail::IEEEFloat::convertFromString((llvm *)&v25, a2, a3, a4, a5);
  if (v25 == (_DWORD *)&llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v25, (llvm::APInt *)&__p);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&v25, (uint64_t)&__p);
  }
  *(void *)&long long v20 = &llvm::semPPCDoubleDouble;
  int v10 = operator new[](0x50uLL);
  unint64_t v11 = v10 + 1;
  uint64_t v12 = (llvm::detail::IEEEFloat *)((char *)v10 + 24);
  *int v10 = xmmword_181126D40;
  unint64_t v13 = (llvm::detail::IEEEFloat *)((char *)v10 + 56);
  if (v19 >= 0x41) {
    p_p = (const llvm::APInt **)__p;
  }
  else {
    p_p = (const llvm::APInt **)&__p;
  }
  uint64_t v15 = *p_p;
  int v24 = 64;
  int v23 = v15;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v12, &v23);
  if (v19 >= 0x41) {
    unsigned int v16 = __p;
  }
  else {
    unsigned int v16 = &__p;
  }
  uint64_t v17 = (const llvm::APInt *)*((void *)v16 + 1);
  int v22 = 64;
  int v21 = v17;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v13, &v21);
  *((void *)&v20 + 1) = v11;
  if (&v20 != (long long *)a1)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
    *(_OWORD *)a1 = v20;
    *(void *)&long long v20 = &llvm::semBogus;
    *((void *)&v20 + 1) = 0;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v20);
  if (v19 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v25 == (_DWORD *)&llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v25);
  }
  else if ((v25[2] - 64) <= 0xFFFFFF7F)
  {
    if (v26) {
      operator delete[](v26);
    }
  }
}

void llvm::APFloat::convertFromString(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v6 == &llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::convertFromString(v5, a2, a3, a4, a5);
  }
  else {
    llvm::detail::IEEEFloat::convertFromString(v5, a2, a3, a4, a5);
  }
}

uint64_t llvm::detail::DoubleAPFloat::convertToInteger(llvm::detail::DoubleAPFloat *a1, llvm::APInt *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&v16);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v18, (const llvm::APInt **)&v16);
  if (v18 == (_DWORD *)&llvm::semPPCDoubleDouble)
  {
    uint64_t v13 = llvm::detail::DoubleAPFloat::convertToInteger(&v18, a2, a3, a4, a5, a6, a7);
    int v14 = v18;
    if (v18 != (_DWORD *)&llvm::semPPCDoubleDouble) {
      goto LABEL_3;
    }
LABEL_7:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v18);
    goto LABEL_8;
  }
  uint64_t v13 = llvm::detail::IEEEFloat::convertToInteger((uint64_t)&v18, a2, a3, a4, a5, a6, a7);
  int v14 = v18;
  if (v18 == (_DWORD *)&llvm::semPPCDoubleDouble) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v14[2] - 64) <= 0xFFFFFF7F && __p) {
    operator delete[](__p);
  }
LABEL_8:
  if (v17 >= 0x41 && v16) {
    operator delete[](v16);
  }
  return v13;
}

uint64_t llvm::detail::DoubleAPFloat::convertFromAPInt(llvm::detail::DoubleAPFloat *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = &llvm::semPPCDoubleDoubleLegacy;
  uint64_t v26 = operator new[](0x10uLL);
  char v28 = 3;
  int v27 = -970;
  llvm::APInt::tcSet((llvm::APInt *)v26, 0, 2u);
  uint64_t v8 = llvm::detail::IEEEFloat::convertFromAPInt((uint64_t)&v25, a2, a3, a4);
  if (v25 == (_DWORD *)&llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v25, (llvm::APInt *)&__p);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&v25, (uint64_t)&__p);
  }
  *(void *)&long long v20 = &llvm::semPPCDoubleDouble;
  int v9 = operator new[](0x50uLL);
  int v10 = v9 + 1;
  unint64_t v11 = (llvm::detail::IEEEFloat *)((char *)v9 + 24);
  *int v9 = xmmword_181126D40;
  uint64_t v12 = (llvm::detail::IEEEFloat *)((char *)v9 + 56);
  if (v19 >= 0x41) {
    p_p = (const llvm::APInt **)__p;
  }
  else {
    p_p = (const llvm::APInt **)&__p;
  }
  int v14 = *p_p;
  int v24 = 64;
  int v23 = v14;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v11, &v23);
  if (v19 >= 0x41) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = &__p;
  }
  unsigned int v16 = (const llvm::APInt *)*((void *)v15 + 1);
  int v22 = 64;
  int v21 = v16;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v12, &v21);
  *((void *)&v20 + 1) = v10;
  if (&v20 != (long long *)a1)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
    *(_OWORD *)a1 = v20;
    *(void *)&long long v20 = &llvm::semBogus;
    *((void *)&v20 + 1) = 0;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v20);
  if (v19 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v25 == (_DWORD *)&llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v25);
  }
  else if ((v25[2] - 64) <= 0xFFFFFF7F && v26)
  {
    operator delete[](v26);
  }
  return v8;
}

void llvm::detail::DoubleAPFloat::toString(llvm::detail::DoubleAPFloat *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&v10);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v12, (const llvm::APInt **)&v10);
  if (v12 == (_DWORD *)&llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::toString(&v12, a2, a3, a4, a5);
    int v9 = v12;
    if (v12 != (_DWORD *)&llvm::semPPCDoubleDouble) {
      goto LABEL_3;
    }
LABEL_7:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v12);
    goto LABEL_8;
  }
  llvm::detail::IEEEFloat::toString((uint64_t)&v12, a2, a3, a4, a5);
  int v9 = v12;
  if (v12 == (_DWORD *)&llvm::semPPCDoubleDouble) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v9[2] - 64) <= 0xFFFFFF7F && __p) {
    operator delete[](__p);
  }
LABEL_8:
  if (v11 >= 0x41)
  {
    if (v10) {
      operator delete[](v10);
    }
  }
}

uint64_t llvm::APFloat::Storage::Storage(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a3 == &llvm::semPPCDoubleDouble)
  {
    uint64_t v6 = *a2;
    unint64_t v7 = (void *)a2[1];
    int v8 = *((_DWORD *)a2 + 4);
    char v9 = *((unsigned char *)a2 + 20);
    *a2 = (uint64_t)&llvm::semBogus;
    uint64_t v16 = v6;
    __p = v7;
    LODWORD(v18) = v8;
    BYTE4(v18) = v9 & 0xF;
    llvm::APFloat::Storage::Storage(&v21, &v16);
    if ((*(_DWORD *)(v16 + 8) - 64) <= 0xFFFFFF7F && __p) {
      operator delete[](__p);
    }
    __p = &llvm::semIEEEdouble;
    char v20 = 3;
    int v19 = -1023;
    llvm::APInt::tcSet((llvm::APInt *)&v18, 0, 1u);
    *(void *)a1 = &llvm::semPPCDoubleDouble;
    int v10 = operator new[](0x50uLL);
    *(_OWORD *)int v10 = xmmword_181126D40;
    unsigned int v11 = v21;
    if (v21 == &llvm::semPPCDoubleDouble)
    {
      uint64_t v15 = v22;
      unint64_t v10[3] = v21;
      v10[4] = v15;
      uint64_t v13 = __p;
      if (__p != &llvm::semPPCDoubleDouble) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v12 = v22;
      *((_DWORD *)v10 + 10) = v23;
      *((unsigned char *)v10 + 44) = v24 & 0xF;
      unint64_t v10[3] = v11;
      v10[4] = v12;
      uint64_t v13 = __p;
      if (__p != &llvm::semPPCDoubleDouble)
      {
LABEL_9:
        uint64_t v14 = v18;
        *((_DWORD *)v10 + 18) = v19;
        *((unsigned char *)v10 + 76) = v20 & 0xF;
LABEL_12:
        v10[7] = v13;
        v10[8] = v14;
        *(void *)(a1 + 8) = v10 + 2;
        return a1;
      }
    }
    uint64_t v14 = v18;
    goto LABEL_12;
  }
  *(void *)a1 = &llvm::semBogus;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  char v4 = *(unsigned char *)(a1 + 20) & 0xF8 | *((unsigned char *)a2 + 20) & 7;
  *(unsigned char *)(a1 + 20) = v4;
  *(unsigned char *)(a1 + 20) = v4 & 0xF7 | *((unsigned char *)a2 + 20) & 8;
  *a2 = (uint64_t)&llvm::semBogus;
  return a1;
}

llvm::APFloatBase *llvm::APFloat::APFloat(llvm::APFloatBase *a1, void *a2, unsigned __int8 *a3, unint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = llvm::APFloat::APFloat(a1, a2);
  char v9 = (void *)*((void *)v7 + 1);
  int v8 = (llvm::APFloatBase *)((char *)v7 + 8);
  if (v9 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::convertFromString(v8, a3, a4, 1, (uint64_t)&v15);
    char v10 = v16;
    if ((v16 & 1) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    llvm::detail::IEEEFloat::convertFromString(v8, a3, a4, 1, (uint64_t)&v15);
    char v10 = v16;
    if ((v16 & 1) == 0)
    {
LABEL_3:
      unsigned int v11 = 0;
      goto LABEL_6;
    }
  }
  unsigned int v11 = v15;
  uint64_t v15 = 0;
LABEL_6:
  uint64_t v13 = v11;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v13, &v14);
  if (v13) {
    (*(void (**)(void *))(*v13 + 8))(v13);
  }
  if ((v10 & 1) != 0 && v15) {
    (*(void (**)(void *))(*v15 + 8))(v15);
  }
  return a1;
}

uint64_t llvm::APFloat::convert(uint64_t a1, void *a2, int a3, unsigned char *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (llvm::APFloatBase *)(a1 + 8);
  char v4 = *(void **)(a1 + 8);
  if (v4 == a2)
  {
    uint64_t v9 = 0;
    *a4 = 0;
    return v9;
  }
  if (v4 == &llvm::semPPCDoubleDouble)
  {
    uint64_t v9 = llvm::detail::IEEEFloat::convert(*(void *)(a1 + 16) + 8, (uint64_t)a2, a3, a4);
    unsigned int v11 = *(const llvm::APInt **)(a1 + 8);
    uint64_t v12 = v5;
    if (v11 == (const llvm::APInt *)&llvm::semPPCDoubleDouble)
    {
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v14 = *(const llvm::APInt **)(v13 + 8);
      uint64_t v12 = (llvm::APFloatBase *)(v13 + 8);
      unsigned int v11 = v14;
    }
    uint64_t v15 = (void *)*((void *)v12 + 1);
    int v16 = *((_DWORD *)v12 + 4);
    char v17 = *((unsigned char *)v12 + 20) & 0xF;
    *(void *)uint64_t v12 = &llvm::semBogus;
    int v31 = v11;
    __p = v15;
    int v33 = v16;
    char v34 = v17;
    llvm::APFloat::Storage::Storage((uint64_t)&v35, (uint64_t *)&v31, a2);
    if ((*((_DWORD *)v31 + 2) - 64) <= 0xFFFFFF7F && __p) {
      operator delete[](__p);
    }
    llvm::APFloat::Storage::operator=(v5, (llvm::APFloatBase *)&v35);
    if (v35 != (_DWORD *)&llvm::semPPCDoubleDouble)
    {
      if ((v35[2] - 64) > 0xFFFFFF7F) {
        return v9;
      }
      uint64_t v18 = v36;
      if (!v36) {
        return v9;
      }
      goto LABEL_32;
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v35);
    return v9;
  }
  if (a2 == &llvm::semPPCDoubleDouble)
  {
    uint64_t v9 = llvm::detail::IEEEFloat::convert(a1 + 8, (uint64_t)&llvm::semPPCDoubleDoubleLegacy, a3, a4);
    llvm::detail::IEEEFloat::bitcastToAPInt(v5, (uint64_t)&v27);
    uint64_t v35 = &llvm::semPPCDoubleDouble;
    int v19 = operator new[](0x50uLL);
    char v20 = v19 + 1;
    int v21 = (llvm::detail::IEEEFloat *)((char *)v19 + 24);
    _OWORD *v19 = xmmword_181126D40;
    uint64_t v22 = (llvm::detail::IEEEFloat *)((char *)v19 + 56);
    if (v28 >= 0x41) {
      int v23 = (const llvm::APInt **)v27;
    }
    else {
      int v23 = (const llvm::APInt **)&v27;
    }
    char v24 = *v23;
    LODWORD(__p) = 64;
    int v31 = v24;
    llvm::detail::IEEEFloat::initFromDoubleAPInt(v21, &v31);
    if (v28 >= 0x41) {
      uint64_t v25 = v27;
    }
    else {
      uint64_t v25 = &v27;
    }
    uint64_t v26 = (const llvm::APInt *)*((void *)v25 + 1);
    int v30 = 64;
    uint64_t v29 = v26;
    llvm::detail::IEEEFloat::initFromDoubleAPInt(v22, &v29);
    int v36 = v20;
    llvm::APFloat::Storage::operator=(v5, (llvm::APFloatBase *)&v35);
    if (v35 == (_DWORD *)&llvm::semPPCDoubleDouble)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v35);
    }
    else if ((v35[2] - 64) <= 0xFFFFFF7F && v36)
    {
      operator delete[](v36);
    }
    if (v28 < 0x41) {
      return v9;
    }
    uint64_t v18 = v27;
    if (!v27) {
      return v9;
    }
LABEL_32:
    operator delete[](v18);
    return v9;
  }
  uint64_t v7 = a1 + 8;

  return llvm::detail::IEEEFloat::convert(v7, (uint64_t)a2, a3, a4);
}

uint64_t llvm::APFloat::convertToInteger(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v23[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  int v21 = v23;
  uint64_t v22 = 0x400000000;
  if (v8)
  {
    unint64_t v9 = (unint64_t)(v8 + 63) >> 6;
    if (v8 < 0x101)
    {
      uint64_t v10 = 0;
      unsigned int v11 = (llvm::APInt *)v23;
      unint64_t v12 = (unint64_t)(v8 + 63) >> 6;
      if (!v9) {
        goto LABEL_9;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, (unint64_t)(v8 + 63) >> 6, 8);
      uint64_t v10 = v22;
      unsigned int v11 = (llvm::APInt *)v21;
      unint64_t v12 = v9 - v22;
      if (v9 == v22)
      {
LABEL_9:
        LODWORD(v22) = (unint64_t)(v8 + 63) >> 6;
        int v13 = *(unsigned __int8 *)(a2 + 12);
        int v16 = *(void **)(a1 + 8);
        uint64_t v14 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
        if (v16 != &llvm::semPPCDoubleDouble) {
          goto LABEL_10;
        }
        goto LABEL_6;
      }
    }
    bzero((char *)v11 + 8 * v10, 8 * v12);
    goto LABEL_9;
  }
  unint64_t v9 = 0;
  unsigned int v11 = (llvm::APInt *)v23;
  int v13 = *(unsigned __int8 *)(a2 + 12);
  uint64_t v14 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (*(_UNKNOWN **)(a1 + 8) != &llvm::semPPCDoubleDouble)
  {
LABEL_10:
    uint64_t v15 = llvm::detail::IEEEFloat::convertToInteger((uint64_t)v14, v11, v9, v8, v13 == 0, a3, a4);
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v15 = llvm::detail::DoubleAPFloat::convertToInteger(v14, v11, v9, v8, v13 == 0, a3, a4);
LABEL_11:
  uint64_t v17 = v15;
  llvm::APInt::APInt((uint64_t)&v19, v8, v21, v22);
  if (*(_DWORD *)(a2 + 8) >= 0x41u && *(void *)a2) {
    operator delete[](*(void **)a2);
  }
  *(void *)a2 = v19;
  *(_DWORD *)(a2 + 8) = v20;
  int v20 = 0;
  if (v21 != v23) {
    free(v21);
  }
  return v17;
}

double llvm::APFloat::convertToDouble(void **this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (this[1] == &llvm::semIEEEdouble)
  {
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)(this + 1), (uint64_t)&v9);
    if (v10 <= 0x40)
    {
      uint64_t v2 = v9;
      return *(double *)&v2;
    }
    char v4 = v9;
    uint64_t v2 = *(void **)v9;
LABEL_16:
    operator delete[](v4);
    return *(double *)&v2;
  }
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v10, (const llvm::detail::IEEEFloat *)(this + 1));
  llvm::APFloat::convert((uint64_t)&v9, &llvm::semIEEEdouble, 1, &v6);
  if (v10 == (_DWORD *)&llvm::semPPCDoubleDouble) {
    uint64_t v1 = (llvm::detail::IEEEFloat *)(v11 + 8);
  }
  else {
    uint64_t v1 = (llvm::detail::IEEEFloat *)&v10;
  }
  llvm::detail::IEEEFloat::bitcastToAPInt(v1, (uint64_t)&__p);
  if (v8 > 0x40)
  {
    uint64_t v2 = *(void **)__p;
    operator delete[](__p);
    uint64_t v3 = v10;
    if (v10 != (_DWORD *)&llvm::semPPCDoubleDouble) {
      goto LABEL_7;
    }
LABEL_13:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v10);
    return *(double *)&v2;
  }
  uint64_t v2 = __p;
  uint64_t v3 = v10;
  if (v10 == (_DWORD *)&llvm::semPPCDoubleDouble) {
    goto LABEL_13;
  }
LABEL_7:
  if ((v3[2] - 64) <= 0xFFFFFF7F)
  {
    char v4 = (void *)v11;
    if (v11) {
      goto LABEL_16;
    }
  }
  return *(double *)&v2;
}

float llvm::APFloat::convertToFloat(void **this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (this[1] == &llvm::semIEEEsingle)
  {
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)(this + 1), (uint64_t)&v9);
    if (v10 <= 0x40)
    {
      LODWORD(v2) = v9;
      return *(float *)&v2;
    }
    char v4 = v9;
    uint64_t v2 = *(void *)v9;
LABEL_16:
    operator delete[](v4);
    return *(float *)&v2;
  }
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v10, (const llvm::detail::IEEEFloat *)(this + 1));
  llvm::APFloat::convert((uint64_t)&v9, &llvm::semIEEEsingle, 1, &v6);
  if (v10 == (_DWORD *)&llvm::semPPCDoubleDouble) {
    uint64_t v1 = (llvm::detail::IEEEFloat *)(v11 + 8);
  }
  else {
    uint64_t v1 = (llvm::detail::IEEEFloat *)&v10;
  }
  llvm::detail::IEEEFloat::bitcastToAPInt(v1, (uint64_t)&__p);
  if (v8 > 0x40)
  {
    uint64_t v2 = *(void *)__p;
    operator delete[](__p);
    uint64_t v3 = v10;
    if (v10 != (_DWORD *)&llvm::semPPCDoubleDouble) {
      goto LABEL_7;
    }
LABEL_13:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v10);
    return *(float *)&v2;
  }
  LODWORD(v2) = __p;
  uint64_t v3 = v10;
  if (v10 == (_DWORD *)&llvm::semPPCDoubleDouble) {
    goto LABEL_13;
  }
LABEL_7:
  if ((v3[2] - 64) <= 0xFFFFFF7F)
  {
    char v4 = (void *)v11;
    if (v11) {
      goto LABEL_16;
    }
  }
  return *(float *)&v2;
}

llvm::detail::IEEEFloat *llvm::APFloat::Storage::Storage(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2)
{
  if (*(_UNKNOWN **)a2 != &llvm::semPPCDoubleDouble) {
    return llvm::detail::IEEEFloat::IEEEFloat(a1, a2);
  }
  *(void *)a1 = &llvm::semPPCDoubleDouble;
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    char v6 = operator new[](0x50uLL);
    uint64_t v7 = v6 + 1;
    *char v6 = xmmword_181126D40;
    llvm::APFloat::Storage::Storage((char *)v6 + 24, v5 + 8);
    llvm::APFloat::Storage::Storage((char *)v6 + 56, *((void *)a2 + 1) + 40);
  }
  else
  {
    uint64_t v7 = 0;
  }
  *((void *)a1 + 1) = v7;
  return a1;
}

void llvm::APInt::initSlowCase(llvm::APInt *this, uint64_t a2, int a3)
{
  uint64_t v5 = this;
  uint64_t v6 = *((unsigned int *)this + 2);
  unint64_t v7 = (unint64_t)(v6 + 63) >> 6;
  unsigned int v8 = operator new[](8 * v7);
  bzero(v8, 8 * v7);
  *(void *)uint64_t v5 = v8;
  *unsigned int v8 = a2;
  if (a2 < 0 && a3 && v6 >= 0x41)
  {
    uint64_t v9 = 8;
    do
    {
      *(void *)(*(void *)v5 + v9) = -1;
      v9 += 8;
    }
    while (8 * v7 != v9);
  }
  if (v6)
  {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (v6 >= 0x41) {
      uint64_t v5 = (llvm::APInt *)(*(void *)v5 + 8 * (v7 - 1));
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  *(void *)v5 &= v10;
}

void *llvm::APInt::initSlowCase(llvm::APInt *this, const void **a2)
{
  size_t v4 = (((unint64_t)*((unsigned int *)this + 2) + 63) >> 3) & 0x3FFFFFF8;
  uint64_t v5 = operator new[](v4);
  *(void *)this = v5;
  uint64_t v6 = *a2;

  return memcpy(v5, v6, v4);
}

uint64_t llvm::APInt::APInt(uint64_t a1, unsigned int a2, void *a3, unsigned int a4)
{
  char v5 = a2;
  *(_DWORD *)(a1 + 8) = a2;
  if (a2 > 0x40)
  {
    unint64_t v11 = ((unint64_t)a2 + 63) >> 6;
    uint64_t v12 = (char *)operator new[](8 * v11);
    bzero(v12, 8 * v11);
    *(void *)a1 = v12;
    if (v11 >= a4) {
      int v13 = a4;
    }
    else {
      int v13 = v11;
    }
    memcpy(v12, a3, (8 * v13));
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -v5;
    uint64_t v9 = (unint64_t *)&v12[8 * (v11 - 1)];
    unint64_t v7 = *v9;
  }
  else
  {
    unint64_t v7 = *a3;
    *(void *)a1 = *a3;
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2) {
      unint64_t v8 = 0;
    }
    uint64_t v9 = (unint64_t *)a1;
  }
  *uint64_t v9 = v8 & v7;
  return a1;
}

llvm::APInt *llvm::APInt::APInt(llvm::APInt *this, unsigned int a2, unsigned int a3, const unint64_t *a4)
{
  char v5 = a2;
  *((_DWORD *)this + 2) = a2;
  if (a2 > 0x40)
  {
    unint64_t v11 = ((unint64_t)a2 + 63) >> 6;
    unint64_t v12 = 8 * v11;
    int v13 = (char *)operator new[](8 * v11);
    uint64_t v14 = v13;
    *(void *)this = v13;
    if (v11 >= a3) {
      int v15 = a3;
    }
    else {
      int v15 = v11;
    }
    size_t v16 = (8 * v15);
    if (v12 >= v16) {
      size_t v17 = v12 - v16;
    }
    else {
      size_t v17 = 0;
    }
    bzero(&v13[v16], v17);
    memcpy(v14, a4, v16);
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -v5;
    uint64_t v9 = (llvm::APInt *)&v14[8 * (v11 - 1)];
    uint64_t v7 = *(void *)v9;
  }
  else
  {
    uint64_t v7 = *a4;
    *(void *)this = *a4;
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2) {
      unint64_t v8 = 0;
    }
    uint64_t v9 = this;
  }
  *(void *)uint64_t v9 = v8 & v7;
  return this;
}

void llvm::APInt::assignSlowCase(llvm::APInt *this, const llvm::APInt *a2)
{
  if (this == a2) {
    return;
  }
  uint64_t v4 = *((unsigned int *)a2 + 2);
  uint64_t v5 = *((unsigned int *)this + 2);
  unint64_t v6 = (unint64_t)(v4 + 63) >> 6;
  if (((unint64_t)(v5 + 63) >> 6) == v6)
  {
    *((_DWORD *)this + 2) = v4;
    if (v4 > 0x40) {
      goto LABEL_12;
    }
LABEL_9:
    *(void *)this = *(void *)a2;
    return;
  }
  if (v5 >= 0x41)
  {
    uint64_t v7 = *(void **)this;
    if (*(void *)this) {
      operator delete[](v7);
    }
  }
  *((_DWORD *)this + 2) = v4;
  if (v4 < 0x41) {
    goto LABEL_9;
  }
  *(void *)this = operator new[](8 * v6);
LABEL_12:
  unint64_t v8 = *(void **)this;
  uint64_t v9 = *(const void **)a2;

  memcpy(v8, v9, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
}

uint64_t **llvm::APInt::operator++(uint64_t **result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if (v1 >= 0x41)
  {
    uint64_t v4 = *result;
    unint64_t v5 = (unint64_t)(v1 + 63) >> 6;
    uint64_t v6 = **result;
    **uint64_t result = v6 + 1;
    if (v6 == -1)
    {
      uint64_t v7 = v4[1];
      v4[1] = v7 + 1;
      if (v7 == -1)
      {
        unint64_t v8 = v4 + 2;
        unint64_t v9 = v5 - 2;
        do
        {
          if (!v9) {
            break;
          }
          --v9;
        }
        while (__CFADD__((*v8++)++, 1));
      }
    }
    unint64_t v11 = &(*result)[(v5 - 1)];
    *v11 &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
  }
  else
  {
    uint64_t v2 = (uint64_t)*result + 1;
    *uint64_t result = (uint64_t *)v2;
    if (v1) {
      unint64_t v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
    }
    else {
      unint64_t v3 = 0;
    }
    *uint64_t result = (uint64_t *)(v2 & v3);
  }
  return result;
}

uint64_t llvm::APInt::operator+=(uint64_t result, void **a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2 > 0x40)
  {
    BOOL v3 = 0;
    uint64_t v4 = *(void **)result;
    unint64_t v5 = *a2;
    unint64_t v6 = (unint64_t)(v2 + 63) >> 6;
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v8 = v7 + *v4;
      BOOL v9 = __CFADD__(v7, *v4);
      BOOL v10 = (unint64_t)(v8 + 1) <= *v4;
      if (v3)
      {
        ++v8;
        BOOL v3 = v10;
      }
      else
      {
        BOOL v3 = v9;
      }
      *v4++ = v8;
      --v6;
    }
    while (v6);
    LODWORD(v2) = *(_DWORD *)(result + 8);
  }
  else
  {
    *(void *)result += *a2;
  }
  if (v2)
  {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    if (v2 >= 0x41)
    {
      unint64_t v12 = (void *)(*(void *)result + 8 * ((((unint64_t)v2 + 63) >> 6) - 1));
      *v12 &= v11;
    }
    else
    {
      *(void *)result &= v11;
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
  }
  return result;
}

unint64_t llvm::APInt::tcAdd(llvm::APInt *this, unint64_t *a2, unint64_t a3, unsigned int a4)
{
  if (a4)
  {
    uint64_t v4 = a4;
    do
    {
      unint64_t v5 = *(void *)this;
      uint64_t v7 = *a2++;
      uint64_t v6 = v7;
      uint64_t v8 = v7 + *(void *)this;
      BOOL v9 = __CFADD__(v7, *(void *)this);
      uint64_t v10 = v5 + v6;
      BOOL v11 = v10 + 1 <= v5;
      if (a3) {
        uint64_t v12 = v10 + 1;
      }
      else {
        uint64_t v12 = v8;
      }
      if (a3) {
        a3 = v11;
      }
      else {
        a3 = v9;
      }
      *(void *)this = v12;
      this = (llvm::APInt *)((char *)this + 8);
      --v4;
    }
    while (v4);
  }
  return a3;
}

BOOL llvm::APInt::tcAddPart(llvm::APInt *this, unint64_t *a2, unsigned int a3)
{
  if (!a3) {
    return 1;
  }
  BOOL v3 = __CFADD__(*(void *)this, a2);
  *(void *)this += a2;
  if (!v3) {
    return 0;
  }
  BOOL v4 = a3 < 2;
  if (a3 == 1) {
    return v4;
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = v5 + 1;
  if (v5 != -1) {
    return v4;
  }
  uint64_t v6 = 2;
  do
  {
    unint64_t v7 = v6;
    if (a3 == v6) {
      break;
    }
    uint64_t v8 = *((void *)this + v6++);
    *((void *)this + v7) = v8 + 1;
  }
  while (v8 == -1);
  return v7 >= a3;
}

uint64_t llvm::APInt::operator-=(uint64_t result, void **a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2 > 0x40)
  {
    uint64_t v3 = 0;
    BOOL v4 = *(unint64_t **)result;
    uint64_t v5 = *a2;
    unint64_t v6 = (unint64_t)(v2 + 63) >> 6;
    do
    {
      unint64_t v7 = *v5++;
      unint64_t v8 = *v4 - v7;
      BOOL v9 = *v4 < v7;
      unint64_t v10 = *v4 + ~v7;
      if (v3)
      {
        uint64_t v3 = v10 >= *v4;
      }
      else
      {
        unint64_t v10 = v8;
        uint64_t v3 = v9;
      }
      *v4++ = v10;
      --v6;
    }
    while (v6);
    LODWORD(v2) = *(_DWORD *)(result + 8);
  }
  else
  {
    *(void *)result -= *a2;
  }
  if (v2)
  {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    if (v2 >= 0x41)
    {
      uint64_t v12 = (void *)(*(void *)result + 8 * ((((unint64_t)v2 + 63) >> 6) - 1));
      *v12 &= v11;
    }
    else
    {
      *(void *)result &= v11;
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
  }
  return result;
}

unint64_t llvm::APInt::tcSubtract(llvm::APInt *this, unint64_t *a2, unint64_t a3, unsigned int a4)
{
  if (a4)
  {
    uint64_t v4 = a4;
    do
    {
      unint64_t v5 = *a2++;
      unint64_t v6 = *(void *)this - v5;
      BOOL v7 = *(void *)this < v5;
      unint64_t v8 = *(void *)this + ~v5;
      if (a3)
      {
        a3 = v8 >= *(void *)this;
      }
      else
      {
        unint64_t v8 = v6;
        a3 = v7;
      }
      *(void *)this = v8;
      this = (llvm::APInt *)((char *)this + 8);
      --v4;
    }
    while (v4);
  }
  return a3;
}

unint64_t **llvm::APInt::operator-=(unint64_t **result, unint64_t a2)
{
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2 >= 0x41)
  {
    unint64_t v5 = *result;
    unint64_t v6 = (unint64_t)(v2 + 63) >> 6;
    unint64_t v7 = **result;
    **uint64_t result = v7 - a2;
    if (v7 < a2)
    {
      unint64_t v8 = v6 - 2;
      BOOL v9 = v5 + 1;
      do
      {
        unint64_t v10 = v8;
        if ((*v9++)-- != 0) {
          break;
        }
        --v8;
      }
      while (v10);
    }
    uint64_t v12 = (uint64_t *)&(*result)[(v6 - 1)];
    *v12 &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  }
  else
  {
    uint64_t v3 = (unint64_t *)((char *)*result - a2);
    *uint64_t result = v3;
    if (v2) {
      unint64_t v4 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    }
    else {
      unint64_t v4 = 0;
    }
    *uint64_t result = (unint64_t *)((unint64_t)v3 & v4);
  }
  return result;
}

uint64_t llvm::APInt::operator*@<X0>(uint64_t result@<X0>, const unint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = (unint64_t **)result;
  uint64_t v6 = *(unsigned int *)(result + 8);
  if (v6 > 0x40)
  {
    unint64_t v9 = (unint64_t)(v6 + 63) >> 6;
    unint64_t v8 = (llvm::APInt *)operator new[](8 * v9);
    uint64_t result = llvm::APInt::tcMultiply(v8, *v4, *a2, (const unint64_t *)v9);
    *((void *)v8 + (v9 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
  }
  else
  {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!v6) {
      unint64_t v7 = 0;
    }
    unint64_t v8 = (llvm::APInt *)(((void)*a2 * *(void *)result) & v7);
  }
  *(_DWORD *)(a3 + 8) = v6;
  *(void *)a3 = v8;
  return result;
}

llvm::APInt *llvm::APInt::APInt(llvm::APInt *this, unsigned int a2, uint64_t a3, int a4)
{
  char v5 = a2;
  *((_DWORD *)this + 2) = a2;
  if (a2 > 0x40)
  {
    unint64_t v9 = ((unint64_t)a2 + 63) >> 6;
    unint64_t v10 = operator new[](8 * v9);
    bzero(v10, 8 * v9);
    *(void *)this = v10;
    *unint64_t v10 = a3;
    if (a3 < 0 && a4)
    {
      uint64_t v11 = 8;
      do
      {
        *(void *)(*(void *)this + v11) = -1;
        v11 += 8;
      }
      while (8 * v9 != v11);
      unint64_t v10 = *(void **)this;
    }
    v10[(v9 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -v5;
  }
  else
  {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2) {
      unint64_t v7 = 0;
    }
    *(void *)this = v7 & a3;
  }
  return this;
}

uint64_t llvm::APInt::tcMultiply(llvm::APInt *this, unint64_t *a2, const unint64_t *a3, const unint64_t *a4)
{
  unsigned int v4 = a4;
  unint64_t v7 = this;
  *(void *)this = 0;
  if (a4 >= 2)
  {
    bzero((char *)this + 8, 8 * (a4 - 2) + 8);
LABEL_4:
    uint64_t v8 = 0;
    LODWORD(result) = 0;
    for (unsigned int i = v4; ; --i)
    {
      unint64_t v12 = v4 - (unint64_t)i;
      if (v4 >= (unint64_t)i) {
        uint64_t v13 = i;
      }
      else {
        uint64_t v13 = v4;
      }
      unint64_t v14 = a3[v8];
      if (v4 >= v4 - v8) {
        unsigned int v15 = v4 - v8;
      }
      else {
        unsigned int v15 = v4;
      }
      if (!v15) {
        goto LABEL_32;
      }
      if (v14)
      {
        unint64_t v16 = 0;
        unsigned int v17 = a3[v8];
        uint64_t v18 = a2;
        uint64_t v19 = v7;
        do
        {
          unint64_t v21 = *v18++;
          unint64_t v20 = v21;
          if (v21)
          {
            unint64_t v22 = v20 * (unint64_t)v17;
            unint64_t v23 = HIDWORD(v20);
            unint64_t v24 = v20 * (unint64_t)HIDWORD(v14);
            unint64_t v25 = HIDWORD(v24) + HIDWORD(v20) * (unint64_t)HIDWORD(v14);
            unint64_t v26 = v20 * v14;
            BOOL v27 = __CFADD__(v26, v16);
            v16 += v26;
            uint64_t v28 = v27;
            if (v26 >= v22 + (v24 << 32)) {
              unint64_t v20 = (__PAIR128__(v28, v22)
            }
                   + __PAIR128__(v25 + ((v23 * (unint64_t)v17) >> 32), v24 << 32)) >> 64;
            else {
              unint64_t v20 = ((__PAIR128__(v28, v22)
            }
                    + __PAIR128__(v25 + ((v23 * (unint64_t)v17) >> 32), v24 << 32)) >> 64)
                  + 1;
          }
          if (__CFADD__(v16, *(void *)v19)) {
            ++v20;
          }
          *(void *)v19 += v16;
          uint64_t v19 = (llvm::APInt *)((char *)v19 + 8);
          unint64_t v16 = v20;
          --v13;
        }
        while (v13);
      }
      else
      {
        uint64_t v29 = 0;
        unint64_t v30 = 0;
        uint64_t v31 = 8 * v13;
        do
        {
          uint64_t v32 = *(void *)((char *)v7 + v29);
          unint64_t v20 = __CFADD__(v30, v32);
          *(void *)((char *)v7 + v29) = v32 + v30;
          v29 += 8;
          unint64_t v30 = v20;
        }
        while (v31 != v29);
      }
      if (!v20)
      {
LABEL_32:
        int v11 = 0;
        if (v4 - v8 >= v4 || !v14) {
          goto LABEL_6;
        }
        int v33 = &a2[i];
        while (!*v33++)
        {
          if (!--v12)
          {
            int v11 = 0;
            goto LABEL_6;
          }
        }
      }
      int v11 = 1;
LABEL_6:
      uint64_t result = v11 | result;
      ++v8;
      unint64_t v7 = (llvm::APInt *)((char *)v7 + 8);
      if (v8 == v4) {
        return result;
      }
    }
  }
  if (a4) {
    goto LABEL_4;
  }
  return 0;
}

uint64_t llvm::APInt::andAssignSlowCase(uint64_t this, const llvm::APInt *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 8);
  if (v2)
  {
    unint64_t v3 = *(void *)this;
    unint64_t v4 = *(void *)a2;
    unint64_t v5 = (unint64_t)(v2 + 63) >> 6;
    if (v2 < 0x141 || (v3 < v4 + 8 * v5 ? (BOOL v6 = v4 >= v3 + 8 * v5) : (BOOL v6 = 1), !v6))
    {
      unint64_t v7 = 0;
LABEL_13:
      unint64_t v12 = v5 - v7;
      uint64_t v13 = 8 * v7;
      unint64_t v14 = (void *)(v3 + v13);
      unsigned int v15 = (uint64_t *)(v4 + v13);
      do
      {
        uint64_t v16 = *v15++;
        *v14++ &= v16;
        --v12;
      }
      while (v12);
      return this;
    }
    unint64_t v7 = ((unint64_t)(v2 + 63) >> 6) & 0x7FFFFFC;
    uint64_t v8 = (int8x16_t *)(v4 + 16);
    unint64_t v9 = (int8x16_t *)(v3 + 16);
    unint64_t v10 = v7;
    do
    {
      int8x16_t v11 = vandq_s8(*v9, *v8);
      v9[-1] = vandq_s8(v9[-1], v8[-1]);
      *unint64_t v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v5 != v7) {
      goto LABEL_13;
    }
  }
  return this;
}

uint64_t llvm::APInt::orAssignSlowCase(uint64_t this, const llvm::APInt *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 8);
  if (v2)
  {
    unint64_t v3 = *(void *)this;
    unint64_t v4 = *(void *)a2;
    unint64_t v5 = (unint64_t)(v2 + 63) >> 6;
    if (v2 < 0x141 || (v3 < v4 + 8 * v5 ? (BOOL v6 = v4 >= v3 + 8 * v5) : (BOOL v6 = 1), !v6))
    {
      unint64_t v7 = 0;
LABEL_13:
      unint64_t v12 = v5 - v7;
      uint64_t v13 = 8 * v7;
      unint64_t v14 = (void *)(v3 + v13);
      unsigned int v15 = (uint64_t *)(v4 + v13);
      do
      {
        uint64_t v16 = *v15++;
        *v14++ |= v16;
        --v12;
      }
      while (v12);
      return this;
    }
    unint64_t v7 = ((unint64_t)(v2 + 63) >> 6) & 0x7FFFFFC;
    uint64_t v8 = (int8x16_t *)(v4 + 16);
    unint64_t v9 = (int8x16_t *)(v3 + 16);
    unint64_t v10 = v7;
    do
    {
      int8x16_t v11 = vorrq_s8(*v9, *v8);
      v9[-1] = vorrq_s8(v9[-1], v8[-1]);
      *unint64_t v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v5 != v7) {
      goto LABEL_13;
    }
  }
  return this;
}

uint64_t llvm::APInt::xorAssignSlowCase(uint64_t this, const llvm::APInt *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 8);
  if (v2)
  {
    unint64_t v3 = *(void *)this;
    unint64_t v4 = *(void *)a2;
    unint64_t v5 = (unint64_t)(v2 + 63) >> 6;
    if (v2 < 0x141 || (v3 < v4 + 8 * v5 ? (BOOL v6 = v4 >= v3 + 8 * v5) : (BOOL v6 = 1), !v6))
    {
      unint64_t v7 = 0;
LABEL_13:
      unint64_t v12 = v5 - v7;
      uint64_t v13 = 8 * v7;
      unint64_t v14 = (void *)(v3 + v13);
      unsigned int v15 = (uint64_t *)(v4 + v13);
      do
      {
        uint64_t v16 = *v15++;
        *v14++ ^= v16;
        --v12;
      }
      while (v12);
      return this;
    }
    unint64_t v7 = ((unint64_t)(v2 + 63) >> 6) & 0x7FFFFFC;
    uint64_t v8 = (int8x16_t *)(v4 + 16);
    unint64_t v9 = (int8x16_t *)(v3 + 16);
    unint64_t v10 = v7;
    do
    {
      int8x16_t v11 = veorq_s8(*v9, *v8);
      v9[-1] = veorq_s8(v9[-1], v8[-1]);
      *unint64_t v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v5 != v7) {
      goto LABEL_13;
    }
  }
  return this;
}

uint64_t llvm::APInt::operator*=(uint64_t a1, const unint64_t **a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 > 0x40)
  {
    unint64_t v7 = (unint64_t)(v4 + 63) >> 6;
    BOOL v6 = (llvm::APInt *)operator new[](8 * v7);
    uint64_t v8 = *(unint64_t **)a1;
    llvm::APInt::tcMultiply(v6, *(unint64_t **)a1, *a2, (const unint64_t *)v7);
    *((void *)v6 + (v7 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
    if (v8) {
      operator delete[](v8);
    }
  }
  else
  {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
    if (!v4) {
      unint64_t v5 = 0;
    }
    BOOL v6 = (llvm::APInt *)(((void)*a2 * *(void *)a1) & v5);
  }
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v4;
  return a1;
}

uint64_t llvm::APInt::tcMultiplyPart(llvm::APInt *this, unint64_t *a2, unint64_t a3, unint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  if (a5 >= a6) {
    uint64_t v7 = a6;
  }
  else {
    uint64_t v7 = a5;
  }
  if (v7)
  {
    if (a3)
    {
      unint64_t v8 = HIDWORD(a3);
      unint64_t v9 = this;
      unint64_t v10 = a2;
      if (a7)
      {
        do
        {
          unint64_t v12 = *v10++;
          unint64_t v11 = v12;
          if (v12)
          {
            unint64_t v13 = v11 * a3 + a4;
            unint64_t v11 = (__PAIR128__(((HIDWORD(v11) * (unint64_t)a3) >> 32)+ __CFADD__(v11 * (unint64_t)a3, (v11 * (unint64_t)v8) << 32)+ ((v11 * (unint64_t)v8) >> 32)+ HIDWORD(v11) * (unint64_t)v8, v11 * a3)+ __PAIR128__(v11 * a3 < v11 * (unint64_t)a3+ ((v11 * (unint64_t)v8) << 32), a4)) >> 64;
            a4 = v13;
          }
          if (__CFADD__(a4, *(void *)v9)) {
            ++v11;
          }
          *(void *)v9 += a4;
          unint64_t v9 = (llvm::APInt *)((char *)v9 + 8);
          a4 = v11;
          --v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v14 = *v10++;
          unint64_t v11 = v14;
          if (v14)
          {
            unint64_t v15 = v11 * a3 + a4;
            unint64_t v11 = (__PAIR128__(((HIDWORD(v11) * (unint64_t)a3) >> 32)+ __CFADD__(v11 * (unint64_t)a3, (v11 * (unint64_t)v8) << 32)+ ((v11 * (unint64_t)v8) >> 32)+ HIDWORD(v11) * (unint64_t)v8, v11 * a3)+ __PAIR128__(v11 * a3 < v11 * (unint64_t)a3+ ((v11 * (unint64_t)v8) << 32), a4)) >> 64;
            a4 = v15;
          }
          *(void *)unint64_t v9 = a4;
          unint64_t v9 = (llvm::APInt *)((char *)v9 + 8);
          a4 = v11;
          --v7;
        }
        while (v7);
      }
LABEL_24:
      if (a5 < a6) {
        goto LABEL_25;
      }
      goto LABEL_35;
    }
    if (a7)
    {
      uint64_t v16 = this;
      do
      {
        unint64_t v11 = __CFADD__(a4, *(void *)v16);
        *(void *)v16 += a4;
        uint64_t v16 = (llvm::APInt *)((char *)v16 + 8);
        a4 = v11;
        --v7;
      }
      while (v7);
      goto LABEL_24;
    }
    *(void *)this = a4;
    if (v7 != 1)
    {
      if (v7 < 5)
      {
        uint64_t v18 = 1;
LABEL_32:
        unint64_t v22 = (void *)((char *)this + 8 * v18);
        uint64_t v23 = v7 - v18;
        do
        {
          *v22++ = 0;
          --v23;
        }
        while (v23);
        goto LABEL_34;
      }
      unint64_t v19 = (v7 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v18 = v19 | 1;
      unint64_t v20 = (_OWORD *)((char *)this + 24);
      unint64_t v21 = v19;
      do
      {
        *(v20 - 1) = 0uLL;
        _OWORD *v20 = 0uLL;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v7 - 1 != v19) {
        goto LABEL_32;
      }
    }
LABEL_34:
    unint64_t v11 = 0;
    if (a5 < a6) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  unint64_t v11 = a4;
  if (a5 < a6)
  {
LABEL_25:
    *((void *)this + a5) = v11;
    return 0;
  }
LABEL_35:
  if (!v11)
  {
    uint64_t v24 = 0;
    if (!a3 || a6 >= a5) {
      return v24;
    }
    unint64_t v25 = &a2[a6];
    unint64_t v26 = a5 - (unint64_t)a6;
    while (!*v25++)
    {
      if (!--v26) {
        return 0;
      }
    }
  }
  return 1;
}

BOOL llvm::APInt::equalSlowCase(const void **this, const void **a2)
{
  return memcmp(*this, *a2, (((unint64_t)*((unsigned int *)this + 2) + 63) >> 3) & 0x3FFFFFF8) == 0;
}

uint64_t llvm::APInt::compare(llvm::APInt *this, const llvm::APInt *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    unint64_t v4 = ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v4) {
        return 0;
      }
      unint64_t v5 = *(void *)(*(void *)this - 8 + v4);
      unint64_t v6 = *(void *)(*(void *)a2 - 8 + v4);
      v4 -= 8;
    }
    while (v5 == v6);
    if (v5 > v6) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else if (*(void *)this < *(void *)a2)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return *(void *)this > *(void *)a2;
  }
}

uint64_t llvm::APInt::tcCompare(llvm::APInt *this, const unint64_t *a2, const unint64_t *a3)
{
  uint64_t v3 = a3;
  do
  {
    if (!(v3 * 8)) {
      return 0;
    }
    unint64_t v4 = *(void *)((char *)this + v3 * 8 - 8);
    unint64_t v5 = a2[--v3];
  }
  while (v4 == v5);
  if (v4 > v5) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t llvm::APInt::compareSigned(llvm::APInt *this, const llvm::APInt *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    uint64_t v9 = *(void *)(*(void *)this + 8 * ((v2 - 1) >> 6)) & (1 << (v2 - 1));
    unsigned int v10 = *((_DWORD *)a2 + 2);
    unsigned int v11 = v10 - 1;
    if (v10 >= 0x41) {
      unint64_t v12 = (const llvm::APInt *)(*(void *)a2 + 8 * (v11 >> 6));
    }
    else {
      unint64_t v12 = a2;
    }
    if ((v9 != 0) == ((*(void *)v12 >> v11) & 1))
    {
      unint64_t v13 = ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v13) {
          return 0;
        }
        unint64_t v14 = *(void *)(*(void *)this - 8 + v13);
        unint64_t v15 = *(void *)(*(void *)a2 - 8 + v13);
        v13 -= 8;
      }
      while (v14 == v15);
      if (v14 > v15) {
        return 1;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
    else if (v9)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t v3 = -v2;
    uint64_t v4 = (uint64_t)(*(void *)this << v3) >> v3;
    uint64_t v5 = (uint64_t)(*(void *)a2 << v3) >> v3;
    BOOL v6 = v4 < v5;
    BOOL v7 = v4 > v5;
    if (v6) {
      return 0xFFFFFFFFLL;
    }
    else {
      return v7;
    }
  }
}

void *llvm::APInt::setBitsSlowCase(void *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a2 >> 6;
  uint64_t v4 = a3 >> 6;
  uint64_t v5 = -1 << a2;
  if ((a3 & 0x3F) != 0)
  {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(a3 & 0x3F);
    if (v4 == v3) {
      v5 &= v6;
    }
    else {
      *(void *)(*this + 8 * (a3 >> 6)) |= v6;
    }
  }
  *(void *)(*this + 8 * (a2 >> 6)) |= v5;
  uint64_t v7 = v3 + 1;
  if (v7 < v4)
  {
    do
      *(void *)(*this + 8 * v7++) = -1;
    while (v4 != v7);
  }
  return this;
}

uint64_t llvm::APInt::flipAllBitsSlowCase(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 8);
  if (!v1)
  {
    unint64_t v5 = 0;
LABEL_5:
    *(void *)this &= v5;
    return this;
  }
  uint64_t v2 = *(int8x16_t **)this;
  unint64_t v3 = (unint64_t)(v1 + 63) >> 6;
  if (v1 < 0xC1)
  {
    unint64_t v4 = 0;
LABEL_9:
    unint64_t v9 = v3 - v4;
    unsigned int v10 = &v2->i64[v4];
    do
    {
      *unsigned int v10 = ~*v10;
      ++v10;
      --v9;
    }
    while (v9);
    goto LABEL_11;
  }
  unint64_t v4 = ((unint64_t)(v1 + 63) >> 6) & 0x7FFFFFC;
  unint64_t v6 = v2 + 1;
  unint64_t v7 = v4;
  do
  {
    int8x16_t v8 = vmvnq_s8(*v6);
    v6[-1] = vmvnq_s8(v6[-1]);
    *unint64_t v6 = v8;
    v6 += 2;
    v7 -= 4;
  }
  while (v7);
  if (v3 != v4) {
    goto LABEL_9;
  }
LABEL_11:
  unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
  if (v1 < 0x41) {
    goto LABEL_5;
  }
  this = *(void *)this + 8 * (v3 - 1);
  *(void *)this &= v5;
  return this;
}

void llvm::APInt::zext(const void **this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4 = this;
  if (a2 > 0x40)
  {
    uint64_t v8 = *((unsigned int *)this + 2);
    if (v8 == a2)
    {
      *(_DWORD *)(a3 + 8) = a2;
      size_t v9 = (((unint64_t)a2 + 63) >> 3) & 0x3FFFFFF8;
      unsigned int v10 = operator new[](v9);
      *(void *)a3 = v10;
      unsigned int v11 = *v4;
      memcpy(v10, v11, v9);
    }
    else
    {
      unint64_t v12 = ((unint64_t)a2 + 63) >> 6;
      unint64_t v13 = (char *)operator new[](8 * v12);
      unint64_t v14 = v13;
      *(_DWORD *)(a3 + 8) = a2;
      *(void *)a3 = v13;
      if (v8 >= 0x41) {
        unint64_t v4 = (const void **)*v4;
      }
      unint64_t v15 = (unint64_t)(v8 + 63) >> 6;
      memcpy(v13, v4, 8 * v15);
      bzero(&v14[8 * v15], (8 * (v12 - v15)));
    }
  }
  else
  {
    unint64_t v6 = (unint64_t)*this;
    *(_DWORD *)(a3 + 8) = a2;
    unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2) {
      unint64_t v7 = 0;
    }
    *(void *)a3 = v6 & v7;
  }
}

void llvm::APInt::extractBits(unint64_t *__sz@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((unsigned int *)__sz + 2);
  if (v7 <= 0x40)
  {
    unint64_t v8 = *__sz >> a3;
    *(_DWORD *)(a4 + 8) = a2;
    if (a2 <= 0x40)
    {
LABEL_3:
      unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      if (!a2) {
        unint64_t v9 = 0;
      }
      *(void *)a4 = v8 & v9;
      return;
    }
LABEL_8:
    unint64_t v14 = ((unint64_t)a2 + 63) >> 6;
    unint64_t v15 = operator new[](8 * v14);
    bzero(v15, 8 * v14);
    *(void *)a4 = v15;
    void *v15 = v8;
    v15[(v14 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    return;
  }
  char v10 = a3 & 0x3F;
  uint64_t v11 = a3 >> 6;
  unsigned int v12 = (a2 + a3 - 1) >> 6;
  int v13 = v12 - v11;
  if (v12 == v11)
  {
    unint64_t v8 = *(void *)(*__sz + 8 * v11) >> v10;
    *(_DWORD *)(a4 + 8) = a2;
    if (a2 <= 0x40) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if ((a3 & 0x3F) != 0)
  {
    unint64_t v16 = a2 + 63;
    unint64_t v17 = v16 >> 6;
    if (a2 >= 0x41)
    {
      uint64_t v18 = (uint64_t *)operator new[](8 * v17);
      bzero(v18, 8 * v17);
      uint64_t *v18 = 0;
      v18[(v17 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      unint64_t v33 = (unint64_t)v18;
      if (!a2) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v18 = (uint64_t *)&v33;
      unint64_t v33 = 0;
      if (!a2) {
        goto LABEL_23;
      }
    }
    unint64_t v24 = *__sz;
    unint64_t v25 = v16 >> 6;
    do
    {
      if (v11 + 1 < (unint64_t)(v7 + 63) >> 6) {
        uint64_t v26 = *(void *)(v24 + 8 * v11 + 8);
      }
      else {
        uint64_t v26 = 0;
      }
      *v18++ = (v26 << (64 - v10)) | (*(void *)(v24 + 8 * v11++) >> v10);
      --v25;
    }
    while (v25);
LABEL_23:
    unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (a2 > 0x40)
    {
      uint64_t v29 = (void *)v33;
      *(void *)(v33 + 8 * (v17 - 1)) &= v27;
      *(_DWORD *)(a4 + 8) = a2;
      unint64_t v30 = operator new[]((v16 >> 3) & 0x3FFFFFF8);
      *(void *)a4 = v30;
      memcpy(v30, v29, (v16 >> 3) & 0x3FFFFFF8);
      operator delete[](v29);
    }
    else
    {
      if (!a2) {
        unint64_t v27 = 0;
      }
      unint64_t v28 = v33 & v27;
      *(_DWORD *)(a4 + 8) = a2;
      *(void *)a4 = v28;
    }
    return;
  }
  unint64_t v19 = (void **)(*__sz + 8 * v11);
  *(_DWORD *)(a4 + 8) = a2;
  if (a2 > 0x40)
  {
    unint64_t v31 = ((unint64_t)a2 + 63) >> 6;
    unint64_t v20 = (char *)operator new[](8 * v31);
    bzero(v20, 8 * v31);
    if (v31 >= v13 + 1) {
      int v32 = v13 + 1;
    }
    else {
      int v32 = v31;
    }
    memcpy(v20, v19, (8 * v32));
    unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    uint64_t v23 = (unint64_t *)&v20[8 * (v31 - 1)];
    unint64_t v22 = *v23;
  }
  else
  {
    unint64_t v20 = (char *)*v19;
    unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2) {
      unint64_t v21 = 0;
    }
    unint64_t v22 = (unint64_t)*v19;
    uint64_t v23 = (unint64_t *)a4;
  }
  *(void *)a4 = v20;
  *uint64_t v23 = v21 & v22;
}

unint64_t llvm::hash_value(llvm *this, const llvm::APInt *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((unsigned int *)this + 2);
  if (v3 > 0x40)
  {
    unint64_t v5 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(void **)this, *(void *)this + (((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8));
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    unint64_t v6 = 0x1E8EB8000uLL;
    {
      unint64_t v12 = v5;
      unint64_t v6 = 0x1E8EB8000uLL;
      int v10 = v9;
      unint64_t v5 = v12;
      if (v10)
      {
        unint64_t v11 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v11 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v11;
        unint64_t v6 = 0x1E8EB8000;
        unint64_t v5 = v12;
      }
    }
    uint64_t v21 = *(void *)(v6 + 3024);
    LODWORD(v13) = *((_DWORD *)this + 2);
    unint64_t v4 = (char *)((unint64_t)&v13 | 0xC);
    *(void *)((char *)&v13 + 4) = v5;
  }
  else
  {
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    {
      unint64_t v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v8 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v8;
    }
    uint64_t v21 = llvm::hashing::detail::get_execution_seed(void)::seed;
    LODWORD(v13) = *((_DWORD *)this + 2);
    unint64_t v4 = (char *)((unint64_t)&v13 | 0xC);
    *(void *)((char *)&v13 + 4) = *(void *)this;
  }
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v13, 0, v4, (char *)&v17);
}

unint64_t llvm::DenseMapInfo<llvm::APInt,void>::getHashValue(llvm *a1, const llvm::APInt *a2)
{
  return llvm::hash_value(a1, a2);
}

uint64_t llvm::APInt::countLeadingZerosSlowCase(llvm::APInt *this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  unint64_t v2 = (unint64_t)(v1 + 63) >> 6;
  if (v2)
  {
    int v3 = 0;
    int v4 = v2 << 6;
    int v5 = v2 + 1;
    while (1)
    {
      unint64_t v6 = *(void *)(*(void *)this + 8 * (v5 - 2));
      if (v6) {
        break;
      }
      v3 += 64;
      if (--v5 <= 1)
      {
        if ((v1 & 0x3F) != 0) {
          int v7 = v1 | 0xFFFFFFC0;
        }
        else {
          int v7 = 0;
        }
        return (v4 + v7);
      }
    }
    int v10 = __clz(v6) + v3;
    if ((v1 & 0x3F) != 0) {
      int v11 = v1 | 0xFFFFFFC0;
    }
    else {
      int v11 = 0;
    }
    return (v10 + v11);
  }
  else if ((v1 & 0x3F) != 0)
  {
    return (v1 | 0xFFFFFFC0);
  }
  else
  {
    return 0;
  }
}

unint64_t llvm::APInt::countLeadingOnesSlowCase(llvm::APInt *this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  char v2 = 64 - (v1 & 0x3F);
  int v3 = *((_DWORD *)this + 2) & 0x3F;
  if ((v1 & 0x3F) == 0)
  {
    int v3 = 64;
    char v2 = 0;
  }
  unint64_t v4 = (unint64_t)(v1 + 63) >> 6;
  uint64_t v5 = *(void *)this;
  unint64_t result = __clz(~(*(void *)(*(void *)this + 8 * v4 - 8) << v2));
  if (v3 == result && v4 >= 2)
  {
    unint64_t result = (v3 + (v4 << 6) - 64);
    int v8 = v4 - 1;
    while (1)
    {
      uint64_t v9 = *(void *)(v5 + 8 * --v8);
      if (v9 != -1) {
        break;
      }
      v3 += 64;
      if (v8 <= 0) {
        return result;
      }
    }
    return __clz(~v9) + v3;
  }
  return result;
}

uint64_t llvm::APInt::countTrailingZerosSlowCase(unint64_t **this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  unint64_t v2 = (unint64_t)(v1 + 63) >> 6;
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = *this;
  unsigned int v5 = v2 << 6;
  unint64_t v6 = v2 << 6;
  while (!*v4)
  {
    ++v4;
    v3 += 64;
    if (v6 == v3)
    {
      if (v1 >= v5) {
        return v5;
      }
      else {
        return v1;
      }
    }
  }
  unsigned int v8 = __clz(__rbit64(*v4)) + v3;
  if (v1 >= v8) {
    return v8;
  }
  else {
    return v1;
  }
}

uint64_t llvm::APInt::countTrailingOnesSlowCase(llvm::APInt *this)
{
  unint64_t v1 = ((unint64_t)*((unsigned int *)this + 2) + 63) >> 6;
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(void **)this;
  uint64_t result = (v1 << 6);
  unint64_t v5 = v1 << 6;
  while (*v3 == -1)
  {
    ++v3;
    v2 += 64;
    if (v5 == v2) {
      return result;
    }
  }
  return __clz(__rbit64(~*v3)) + v2;
}

void llvm::APIntOps::GreatestCommonDivisor(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = (_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7 > 0x40)
  {
    unint64_t v8 = *(void *)a1;
    unint64_t v11 = v7 + 63;
    unint64_t v9 = *(void *)a2;
    if (!memcmp(*(const void **)a1, *(const void **)a2, ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_25;
    }
    int v12 = 0;
    uint64_t v13 = (v11 >> 6) + 1;
    while (1)
    {
      unint64_t v14 = *(void *)(v8 + 8 * (v13 - 2));
      if (v14) {
        break;
      }
      v12 += 64;
      if ((unint64_t)--v13 <= 1)
      {
        int v15 = v7 | 0xFFFFFFC0;
        if ((v7 & 0x3F) == 0) {
          int v15 = 0;
        }
        if (((v11 >> 6) << 6) + v15 != v7) {
          goto LABEL_4;
        }
        goto LABEL_14;
      }
    }
    int v16 = __clz(v14) + v12;
    int v17 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v17 = 0;
    }
    if (v16 + v17 != v7) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
  unint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)a2;
  if (*(void *)a1 == *(void *)a2) {
    goto LABEL_25;
  }
  if (!v8)
  {
LABEL_14:
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
    unint64_t v8 = v9;
    unint64_t v6 = (_DWORD *)(a2 + 8);
    goto LABEL_183;
  }
LABEL_4:
  uint64_t v10 = *(unsigned int *)(a2 + 8);
  if (v10 <= 0x40)
  {
    if (!v9) {
      goto LABEL_25;
    }
    goto LABEL_29;
  }
  int v18 = 0;
  unint64_t v19 = (unint64_t)(v10 + 63) >> 6;
  int v20 = v19 << 6;
  unint64_t v21 = v19 + 1;
  while (1)
  {
    unint64_t v22 = *(void *)(v9 + 8 * (v21 - 2));
    if (v22) {
      break;
    }
    v18 += 64;
    if (--v21 <= 1)
    {
      int v23 = v10 | 0xFFFFFFC0;
      if ((v10 & 0x3F) == 0) {
        int v23 = 0;
      }
      if (v20 + v23 == v10) {
        goto LABEL_25;
      }
LABEL_29:
      if (v7 <= 0x40)
      {
        unsigned int v26 = __clz(__rbit64(v8));
        if (v7 >= v26) {
          unsigned int v27 = v26;
        }
        else {
          unsigned int v27 = v7;
        }
        if (v10 > 0x40) {
          goto LABEL_34;
        }
LABEL_51:
        unsigned int v40 = __clz(__rbit64(v9));
        if (v10 >= v40) {
          unsigned int v33 = v40;
        }
        else {
          unsigned int v33 = *(_DWORD *)(a2 + 8);
        }
        unsigned int v34 = v27 - v33;
        if (v27 <= v33) {
          goto LABEL_55;
        }
LABEL_41:
        unsigned int v27 = v33;
        if (v7 <= 0x40)
        {
          if (v7 == v34) {
            *(void *)a1 = 0;
          }
          else {
            *(void *)a1 = v8 >> v34;
          }
          goto LABEL_98;
        }
        unint64_t v44 = (unint64_t)(v7 + 63) >> 6;
        if (v34 >> 6 >= v44) {
          unsigned int v45 = (unint64_t)(v7 + 63) >> 6;
        }
        else {
          unsigned int v45 = v34 >> 6;
        }
        uint64_t v46 = v44 - v45;
        char v47 = v34 & 0x3F;
        if ((v34 & 0x3F) != 0)
        {
          if (v34 >> 6 < v44)
          {
            uint64_t v48 = *(void *)(v8 + 8 * v45) >> v47;
            *(void *)unint64_t v8 = v48;
            if (v46 != 1)
            {
              uint64_t v49 = 1 - v46;
              int v50 = (void *)(v8 + 8);
              unsigned int v51 = v45 + 1;
              do
              {
                uint64_t v52 = 8 * v51;
                *(v50 - 1) = (*(void *)(v8 + v52) << (64 - v47)) | v48;
                uint64_t v48 = *(void *)(v8 + v52) >> v47;
                *v50++ = v48;
                ++v51;
                BOOL v53 = __CFADD__(v49++, 1);
              }
              while (!v53);
            }
          }
        }
        else
        {
          memmove((void *)v8, (const void *)(v8 + 8 * v45), (8 * v46));
        }
        size_t v63 = 8 * v45;
        int v64 = (void *)(v8 + 8 * v46);
LABEL_95:
        bzero(v64, v63);
        goto LABEL_98;
      }
      uint64_t v35 = 0;
      unint64_t v36 = (unint64_t)(v7 + 63) >> 6;
      unsigned int v37 = v36 << 6;
      unint64_t v38 = v36 << 6;
      int v39 = (unint64_t *)v8;
      do
      {
        if (*v39)
        {
          unsigned int v43 = __clz(__rbit64(*v39)) + v35;
          if (v7 >= v43) {
            unsigned int v27 = v43;
          }
          else {
            unsigned int v27 = v7;
          }
          if (v10 <= 0x40) {
            goto LABEL_51;
          }
          goto LABEL_34;
        }
        ++v39;
        v35 += 64;
      }
      while (v38 != v35);
      if (v7 >= v37) {
        unsigned int v27 = v37;
      }
      else {
        unsigned int v27 = v7;
      }
      if (v10 <= 0x40) {
        goto LABEL_51;
      }
LABEL_34:
      uint64_t v28 = 0;
      unint64_t v29 = (unint64_t)(v10 + 63) >> 6;
      unsigned int v30 = v29 << 6;
      unint64_t v31 = v29 << 6;
      int v32 = (unint64_t *)v9;
      do
      {
        if (*v32)
        {
          unsigned int v42 = __clz(__rbit64(*v32)) + v28;
          if (v10 >= v42) {
            unsigned int v33 = v42;
          }
          else {
            unsigned int v33 = *(_DWORD *)(a2 + 8);
          }
          unsigned int v34 = v27 - v33;
          if (v27 <= v33) {
            goto LABEL_55;
          }
          goto LABEL_41;
        }
        ++v32;
        v28 += 64;
      }
      while (v31 != v28);
      if (v10 >= v30) {
        unsigned int v33 = v30;
      }
      else {
        unsigned int v33 = *(_DWORD *)(a2 + 8);
      }
      unsigned int v34 = v27 - v33;
      if (v27 > v33) {
        goto LABEL_41;
      }
LABEL_55:
      unsigned int v41 = v33 - v27;
      if (v33 <= v27) {
        goto LABEL_98;
      }
      if (v10 > 0x40)
      {
        unint64_t v54 = (unint64_t)(v10 + 63) >> 6;
        if (v41 >> 6 >= v54) {
          unsigned int v55 = (unint64_t)(v10 + 63) >> 6;
        }
        else {
          unsigned int v55 = v41 >> 6;
        }
        uint64_t v56 = v54 - v55;
        char v57 = v41 & 0x3F;
        if ((v41 & 0x3F) != 0)
        {
          if (v41 >> 6 < v54)
          {
            uint64_t v58 = *(void *)(v9 + 8 * v55) >> v57;
            *(void *)unint64_t v9 = v58;
            if (v56 != 1)
            {
              uint64_t v59 = 1 - v56;
              uint64_t v60 = (void *)(v9 + 8);
              unsigned int v61 = v55 + 1;
              do
              {
                uint64_t v62 = 8 * v61;
                *(v60 - 1) = (*(void *)(v9 + v62) << (64 - v57)) | v58;
                uint64_t v58 = *(void *)(v9 + v62) >> v57;
                *v60++ = v58;
                ++v61;
                BOOL v53 = __CFADD__(v59++, 1);
              }
              while (!v53);
            }
          }
        }
        else
        {
          memmove((void *)v9, (const void *)(v9 + 8 * v55), (8 * v56));
        }
        size_t v63 = 8 * v55;
        int v64 = (void *)(v9 + 8 * v56);
        goto LABEL_95;
      }
      if (v10 == v41) {
        *(void *)a2 = 0;
      }
      else {
        *(void *)a2 = v9 >> v41;
      }
LABEL_98:
      while (2)
      {
        while (1)
        {
          uint64_t v65 = *v6;
          if (v65 > 0x40) {
            break;
          }
          unint64_t v8 = *(void *)a1;
          size_t v66 = *(unint64_t **)a2;
          if (*(void *)a1 == *(void *)a2) {
            goto LABEL_182;
          }
          if (*(void *)a1 <= *(void *)a2) {
            goto LABEL_116;
          }
          *(void *)a1 -= *(void *)a2;
          if (v65)
          {
LABEL_102:
            unint64_t v67 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v65;
            if (v65 >= 0x41) {
              int v68 = (void *)(*(void *)a1
            }
                             + 8 * ((((unint64_t)v65 + 63) >> 6) - 1));
            else {
              int v68 = (void *)a1;
            }
          }
          else
          {
LABEL_115:
            unint64_t v67 = 0;
            int v68 = (void *)a1;
          }
          *v68 &= v67;
          uint64_t v96 = *(unsigned int *)(a1 + 8);
          if (v96 > 0x40)
          {
            int v99 = 0;
            uint64_t v100 = 0;
            unint64_t v101 = (unint64_t)(v96 + 63) >> 6;
            int v94 = *(void **)a1;
            while (!v94[v100])
            {
              ++v100;
              v99 -= 64;
              if (v101 == v100)
              {
                if (v96 >= v101 << 6) {
                  LODWORD(v96) = v101 << 6;
                }
                unsigned int v102 = v96 - v27;
                if (!v102) {
                  goto LABEL_98;
                }
                goto LABEL_168;
              }
            }
            unsigned int v113 = __clz(__rbit64(v94[v100])) - v99;
            if (v96 >= v113) {
              LODWORD(v96) = v113;
            }
            unsigned int v102 = v96 - v27;
            if (!v102) {
              continue;
            }
LABEL_168:
            unsigned int v114 = v102 >> 6;
            if (v102 >> 6 >= v101) {
              int v105 = v101;
            }
            else {
              int v105 = v102 >> 6;
            }
            uint64_t v106 = (v101 - v105);
            int v115 = v102 & 0x3F;
            if (!v115) {
              goto LABEL_178;
            }
            if (v114 < v101)
            {
              uint64_t v116 = v94[v105] >> v115;
              *int v94 = v116;
              if (v106 != 1)
              {
                uint64_t v117 = 1 - v106;
                int v118 = v94 + 1;
                unsigned int v119 = v105 + 1;
                do
                {
                  uint64_t v120 = v119;
                  *(v118 - 1) = (v94[v120] << (64 - v115)) | v116;
                  uint64_t v116 = v94[v120] >> v115;
                  *v118++ = v116;
                  ++v119;
                  BOOL v53 = __CFADD__(v117++, 1);
                }
                while (!v53);
              }
            }
LABEL_179:
            bzero(&v94[v106], (8 * v105));
            continue;
          }
          unsigned int v97 = __clz(__rbit64(*(void *)a1));
          if (v96 < v97) {
            unsigned int v97 = *(_DWORD *)(a1 + 8);
          }
          unsigned int v98 = v97 - v27;
          if (v96 == v98) {
            *(void *)a1 = 0;
          }
          else {
            *(void *)a1 >>= v98;
          }
        }
        unint64_t v8 = *(void *)a1;
        unint64_t v69 = v65 + 63;
        size_t v66 = *(unint64_t **)a2;
        if (!memcmp(*(const void **)a1, *(const void **)a2, ((unint64_t)(v65 + 63) >> 3) & 0x3FFFFFF8))
        {
LABEL_182:
          *(_DWORD *)(a3 + 8) = v65;
          goto LABEL_183;
        }
        unint64_t v70 = v69 >> 6;
        uint64_t v71 = v69 >> 6;
        while (v71 * 8)
        {
          unint64_t v72 = *(void *)(v8 + v71 * 8 - 8);
          unint64_t v73 = v66[--v71];
          if (v72 != v73)
          {
            if (v72 <= v73) {
              break;
            }
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = *v66++;
              unint64_t v76 = *(void *)v8 - v75;
              BOOL v77 = *(void *)v8 < v75;
              unint64_t v78 = *(void *)v8 + ~v75;
              if (v74)
              {
                uint64_t v74 = v78 >= *(void *)v8;
              }
              else
              {
                unint64_t v78 = v76;
                uint64_t v74 = v77;
              }
              *(void *)unint64_t v8 = v78;
              v8 += 8;
              --v70;
            }
            while (v70);
            LODWORD(v65) = *v6;
            if (*v6) {
              goto LABEL_102;
            }
            goto LABEL_115;
          }
        }
LABEL_116:
        uint64_t v79 = *(unsigned int *)(a2 + 8);
        if (v79 > 0x40)
        {
          uint64_t v80 = 0;
          unint64_t v81 = (unint64_t)(v79 + 63) >> 6;
          do
          {
            unint64_t v82 = *(void *)v8;
            v8 += 8;
            unint64_t v83 = *v66 - v82;
            BOOL v84 = *v66 < v82;
            unint64_t v85 = *v66 + ~v82;
            if (v80)
            {
              uint64_t v80 = v85 >= *v66;
            }
            else
            {
              unint64_t v85 = v83;
              uint64_t v80 = v84;
            }
            *v66++ = v85;
            --v81;
          }
          while (v81);
          LODWORD(v79) = *(_DWORD *)(a2 + 8);
        }
        else
        {
          *(void *)a2 = (char *)v66 - v8;
        }
        if (v79)
        {
          unint64_t v86 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v79;
          if (v79 >= 0x41)
          {
            int v90 = (void *)(*(void *)a2 + 8 * ((((unint64_t)v79 + 63) >> 6) - 1));
            *v90 &= v86;
            uint64_t v87 = *(unsigned int *)(a2 + 8);
            if (v87 > 0x40)
            {
LABEL_132:
              int v91 = 0;
              uint64_t v92 = 0;
              unint64_t v93 = (unint64_t)(v87 + 63) >> 6;
              int v94 = *(void **)a2;
              while (!v94[v92])
              {
                ++v92;
                v91 -= 64;
                if (v93 == v92)
                {
                  if (v87 >= v93 << 6) {
                    LODWORD(v87) = v93 << 6;
                  }
                  unsigned int v95 = v87 - v27;
                  if (!v95) {
                    goto LABEL_98;
                  }
                  goto LABEL_155;
                }
              }
              unsigned int v103 = __clz(__rbit64(v94[v92])) - v91;
              if (v87 >= v103) {
                LODWORD(v87) = v103;
              }
              unsigned int v95 = v87 - v27;
              if (!v95) {
                continue;
              }
LABEL_155:
              unsigned int v104 = v95 >> 6;
              if (v95 >> 6 >= v93) {
                int v105 = v93;
              }
              else {
                int v105 = v95 >> 6;
              }
              uint64_t v106 = (v93 - v105);
              int v107 = v95 & 0x3F;
              if (v107)
              {
                if (v104 < v93)
                {
                  uint64_t v108 = v94[v105] >> v107;
                  *int v94 = v108;
                  if (v106 != 1)
                  {
                    uint64_t v109 = 1 - v106;
                    int v110 = v94 + 1;
                    unsigned int v111 = v105 + 1;
                    do
                    {
                      uint64_t v112 = v111;
                      *(v110 - 1) = (v94[v112] << (64 - v107)) | v108;
                      uint64_t v108 = v94[v112] >> v107;
                      *v110++ = v108;
                      ++v111;
                      BOOL v53 = __CFADD__(v109++, 1);
                    }
                    while (!v53);
                  }
                }
              }
              else
              {
LABEL_178:
                memmove(v94, &v94[v105], (8 * v106));
              }
              goto LABEL_179;
            }
          }
          else
          {
LABEL_126:
            *(void *)a2 &= v86;
            uint64_t v87 = *(unsigned int *)(a2 + 8);
            if (v87 > 0x40) {
              goto LABEL_132;
            }
          }
          unsigned int v88 = __clz(__rbit64(*(void *)a2));
          if (v87 < v88) {
            unsigned int v88 = v87;
          }
          unsigned int v89 = v88 - v27;
          if (v87 == v89) {
            *(void *)a2 = 0;
          }
          else {
            *(void *)a2 >>= v89;
          }
          continue;
        }
        break;
      }
      unint64_t v86 = 0;
      goto LABEL_126;
    }
  }
  int v24 = __clz(v22) + v18;
  int v25 = v10 | 0xFFFFFFC0;
  if ((v10 & 0x3F) == 0) {
    int v25 = 0;
  }
  if (v24 + v25 != v10) {
    goto LABEL_29;
  }
LABEL_25:
  *(_DWORD *)(a3 + 8) = v7;
LABEL_183:
  *(void *)a3 = v8;
  *unint64_t v6 = 0;
}

char *llvm::APInt::trunc@<X0>(char *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4 = (const void **)this;
  unsigned int v6 = *((_DWORD *)this + 2);
  if (a2 > 0x40)
  {
    if (v6 == a2)
    {
      *(_DWORD *)(a3 + 8) = a2;
      size_t v9 = (((unint64_t)a2 + 63) >> 3) & 0x3FFFFFF8;
      uint64_t v10 = operator new[](v9);
      *(void *)a3 = v10;
      unint64_t v11 = *v4;
      return (char *)memcpy(v10, v11, v9);
    }
    else
    {
      this = (char *)operator new[]((((unint64_t)a2 + 63) >> 3) & 0x3FFFFFF8);
      uint64_t v12 = 0;
      *(_DWORD *)(a3 + 8) = a2;
      *(void *)a3 = this;
      uint64_t v13 = a2 >> 6;
      unint64_t v14 = (char *)*v4;
      if (a2 < 0x100) {
        goto LABEL_17;
      }
      if ((unint64_t)(this - v14) < 0x20) {
        goto LABEL_17;
      }
      uint64_t v12 = v13 & 0x3FFFFFC;
      int v15 = (long long *)(v14 + 16);
      int v16 = this + 16;
      uint64_t v17 = v12;
      do
      {
        long long v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        _OWORD *v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      if (v12 != v13)
      {
LABEL_17:
        unint64_t v19 = &v14[8 * v12];
        int v20 = &this[8 * v12];
        uint64_t v21 = v13 - v12;
        do
        {
          uint64_t v22 = *(void *)v19;
          v19 += 8;
          *(void *)int v20 = v22;
          v20 += 8;
          --v21;
        }
        while (v21);
      }
      int v23 = -a2 & 0x3F;
      if (v23) {
        *(void *)&this[8 * v13] = *((void *)*v4 + v13) & (0xFFFFFFFFFFFFFFFFLL >> v23);
      }
    }
  }
  else
  {
    if (v6 >= 0x41) {
      unint64_t v4 = *(const void ***)this;
    }
    unint64_t v7 = (unint64_t)*v4;
    *(_DWORD *)(a3 + 8) = a2;
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2) {
      unint64_t v8 = 0;
    }
    *(void *)a3 = v7 & v8;
  }
  return this;
}

const void **llvm::APInt::sext@<X0>(const void **this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4 = this;
  if (a2 > 0x40)
  {
    uint64_t v8 = *((unsigned int *)this + 2);
    if (v8 == a2)
    {
      *(_DWORD *)(a3 + 8) = a2;
      size_t v9 = (((unint64_t)a2 + 63) >> 3) & 0x3FFFFFF8;
      uint64_t v10 = operator new[](v9);
      *(void *)a3 = v10;
      unint64_t v11 = *v4;
      return (const void **)memcpy(v10, v11, v9);
    }
    else
    {
      unint64_t v12 = ((unint64_t)a2 + 63) >> 6;
      uint64_t v13 = operator new[](8 * v12);
      unint64_t v14 = v13;
      *(_DWORD *)(a3 + 8) = a2;
      *(void *)a3 = v13;
      int v15 = v4;
      if (v8 >= 0x41) {
        int v15 = *v4;
      }
      unint64_t v16 = (unint64_t)(v8 + 63) >> 6;
      memcpy(v13, v15, 8 * v16);
      v14[(v16 - 1)] = (uint64_t)(v14[(v16 - 1)] << -(char)v8) >> -(char)v8;
      unsigned int v17 = v8 - 1;
      if (v8 >= 0x41) {
        unint64_t v4 = (const void **)((char *)*v4 + 8 * (v17 >> 6));
      }
      if (((unint64_t)*v4 >> v17)) {
        int v18 = -1;
      }
      else {
        int v18 = 0;
      }
      this = (const void **)memset(&v14[v16], v18, (8 * (v12 - v16)));
      v14[(v12 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    }
  }
  else
  {
    uint64_t v6 = (uint64_t)((void)*this << -*((unsigned char *)this + 8)) >> -*((unsigned char *)this + 8);
    *(_DWORD *)(a3 + 8) = a2;
    unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2) {
      unint64_t v7 = 0;
    }
    *(void *)a3 = v6 & v7;
  }
  return this;
}

void llvm::APInt::zextOrTrunc(const void **this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4 = this;
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 >= a2)
  {
    if (v6 <= a2)
    {
      *(_DWORD *)(a3 + 8) = v6;
      if (v6 > 0x40)
      {
        unint64_t v12 = operator new[](((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
        *(void *)a3 = v12;
        uint64_t v13 = *v4;
        memcpy(v12, v13, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(void *)a3 = *this;
      }
    }
    else
    {
      llvm::APInt::trunc((char *)this, a2, a3);
    }
  }
  else if (a2 > 0x40)
  {
    unint64_t v8 = ((unint64_t)a2 + 63) >> 6;
    size_t v9 = (char *)operator new[](8 * v8);
    uint64_t v10 = v9;
    *(_DWORD *)(a3 + 8) = a2;
    *(void *)a3 = v9;
    if (v6 >= 0x41) {
      unint64_t v4 = (const void **)*v4;
    }
    unint64_t v11 = (unint64_t)(v6 + 63) >> 6;
    memcpy(v9, v4, 8 * v11);
    bzero(&v10[8 * v11], (8 * (v8 - v11)));
  }
  else
  {
    unint64_t v7 = (unint64_t)*this;
    *(_DWORD *)(a3 + 8) = a2;
    *(void *)a3 = v7 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2);
  }
}

char *llvm::APInt::sextOrTrunc@<X0>(char *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (const void **)this;
  uint64_t v5 = *((unsigned int *)this + 2);
  if (v5 >= a2)
  {
    if (v5 <= a2)
    {
      *(_DWORD *)(a3 + 8) = v5;
      if (v5 > 0x40)
      {
        size_t v6 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
        unint64_t v7 = operator new[](v6);
        *(void *)a3 = v7;
        unint64_t v8 = *v3;
        return (char *)memcpy(v7, v8, v6);
      }
      else
      {
        *(void *)a3 = *(void *)this;
      }
    }
    else
    {
      return llvm::APInt::trunc(this, a2, a3);
    }
  }
  else
  {
    return (char *)llvm::APInt::sext((const void **)this, a2, a3);
  }
  return this;
}

unsigned int *llvm::APInt::ashrInPlace(unsigned int *this, unint64_t **a2)
{
  unint64_t v2 = this[2];
  uint64_t v3 = *((unsigned int *)a2 + 2);
  if (v3 < 0x41)
  {
    unint64_t v4 = *a2;
    unsigned int v5 = this[2];
    if ((unint64_t)v4 > v2) {
      goto LABEL_14;
    }
LABEL_13:
    unsigned int v5 = v4;
    goto LABEL_14;
  }
  int v6 = 0;
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  unint64_t v8 = *a2;
  int v9 = v7 << 6;
  unint64_t v10 = v7 + 1;
  while (1)
  {
    unint64_t v11 = v8[(v10 - 2)];
    if (v11) {
      break;
    }
    v6 += 64;
    if (--v10 <= 1) {
      goto LABEL_9;
    }
  }
  int v9 = __clz(v11) + v6;
LABEL_9:
  int v12 = v3 | 0xFFFFFFC0;
  if ((v3 & 0x3F) == 0) {
    int v12 = 0;
  }
  unsigned int v5 = this[2];
  if ((v3 - v12 - v9) <= 0x40)
  {
    unint64_t v4 = (unint64_t *)*v8;
    unsigned int v5 = this[2];
    if (*v8 <= v2) {
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v2 > 0x40) {
    return llvm::APInt::ashrSlowCase(this, v5);
  }
  char v13 = v5;
  if (v2 == v5) {
    char v13 = 63;
  }
  uint64_t v14 = (uint64_t)(*(void *)this << -(char)v2) >> -(char)v2 >> v13;
  if (v2) {
    unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  }
  else {
    unint64_t v15 = 0;
  }
  *(void *)this = v14 & v15;
  return this;
}

unsigned int *llvm::APInt::ashrSlowCase(unsigned int *this, unsigned int a2)
{
  if (a2)
  {
    unint64_t v2 = this;
    uint64_t v3 = this[2];
    unsigned int v4 = v3 - 1;
    unsigned int v5 = this;
    if (v3 >= 0x41) {
      unsigned int v5 = (void *)(*(void *)this + 8 * (v4 >> 6));
    }
    uint64_t v6 = *v5 & (1 << v4);
    unsigned int v7 = a2 >> 6;
    unint64_t v8 = (unint64_t)(v3 + 63) >> 6;
    unsigned int v9 = v8 - (a2 >> 6);
    if (v8 != a2 >> 6)
    {
      uint64_t v10 = (v8 - 1);
      *(void *)(*(void *)this + 8 * v10) = (uint64_t)(*(void *)(*(void *)this
                                                                                   + 8 * v10) << -(char)v3) >> -(char)v3;
      char v11 = a2 & 0x3F;
      if ((a2 & 0x3F) != 0)
      {
        uint64_t v12 = v9 - 1;
        if (v9 == 1)
        {
          uint64_t v12 = 0;
        }
        else
        {
          uint64_t v13 = 0;
          do
          {
            *(void *)(*(void *)this + 8 * v13) = (*(void *)(*(void *)this
                                                                + 8 * ((a2 >> 6) + v13 + 1)) << (64 - v11)) | (*(void *)(*(void *)this + 8 * ((a2 >> 6) + v13)) >> v11);
            ++v13;
          }
          while (v12 != v13);
        }
        uint64_t v14 = 8 * v12;
        *(void *)(*(void *)this + v14) = *(void *)(*(void *)this + 8 * v10) >> v11;
        *(void *)(*(void *)this + v14) = (uint64_t)(*(void *)(*(void *)this + v14) << v11) >> v11;
      }
      else
      {
        memmove(*(void **)this, (const void *)(*(void *)this + 8 * v7), 8 * v9);
      }
    }
    if (v6) {
      int v15 = -1;
    }
    else {
      int v15 = 0;
    }
    this = (unsigned int *)memset((void *)(*(void *)v2 + 8 * v9), v15, 8 * v7);
    uint64_t v16 = v2[2];
    if (v16)
    {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
      if (v16 >= 0x41) {
        unint64_t v2 = (unsigned int *)(*(void *)v2 + 8 * (((unint64_t)(v16 + 63) >> 6) - 1));
      }
    }
    else
    {
      unint64_t v17 = 0;
    }
    *(void *)v2 &= v17;
  }
  return this;
}

void llvm::APInt::lshrInPlace(llvm::APInt *this, const llvm::APInt *a2)
{
  unint64_t v2 = *((unsigned int *)this + 2);
  uint64_t v3 = *((unsigned int *)a2 + 2);
  if (v3 < 0x41)
  {
    unsigned int v4 = *(void **)a2;
    unsigned int v5 = *((_DWORD *)this + 2);
    if (*(void *)a2 > v2) {
      goto LABEL_14;
    }
LABEL_13:
    unsigned int v5 = v4;
    goto LABEL_14;
  }
  int v6 = 0;
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  unint64_t v8 = *(void **)a2;
  int v9 = v7 << 6;
  unint64_t v10 = v7 + 1;
  while (1)
  {
    unint64_t v11 = v8[(v10 - 2)];
    if (v11) {
      break;
    }
    v6 += 64;
    if (--v10 <= 1) {
      goto LABEL_9;
    }
  }
  int v9 = __clz(v11) + v6;
LABEL_9:
  int v12 = v3 | 0xFFFFFFC0;
  if ((v3 & 0x3F) == 0) {
    int v12 = 0;
  }
  unsigned int v13 = v3 - v12 - v9;
  unsigned int v5 = *((_DWORD *)this + 2);
  if (v13 <= 0x40)
  {
    unsigned int v4 = (void *)*v8;
    unsigned int v5 = *((_DWORD *)this + 2);
    if ((unint64_t)v4 <= v2) {
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v2 > 0x40)
  {
    if (v5)
    {
      uint64_t v14 = *(void **)this;
      unint64_t v15 = (v2 + 63) >> 6;
      if (v5 >> 6 >= v15) {
        int v16 = v15;
      }
      else {
        int v16 = v5 >> 6;
      }
      uint64_t v17 = (v15 - v16);
      char v18 = v5 & 0x3F;
      if ((v5 & 0x3F) != 0)
      {
        if (v5 >> 6 < v15)
        {
          uint64_t v19 = v14[v16] >> v5;
          void *v14 = v19;
          if (v17 != 1)
          {
            char v20 = v5 & 0x3F;
            char v21 = 64 - v18;
            uint64_t v22 = 1 - v17;
            int v23 = v14 + 1;
            unsigned int v24 = v16 + 1;
            do
            {
              uint64_t v25 = v24;
              *(v23 - 1) = (v14[v25] << v21) | v19;
              uint64_t v19 = v14[v25] >> v20;
              *v23++ = v19;
              ++v24;
            }
            while (!__CFADD__(v22++, 1));
          }
        }
      }
      else
      {
        memmove(*(void **)this, &v14[v16], (8 * v17));
      }
      bzero(&v14[v17], (8 * v16));
    }
  }
  else if (v2 == v5)
  {
    *(void *)this = 0;
  }
  else
  {
    *(void *)this >>= v5;
  }
}

void llvm::APInt::lshrSlowCase(void **this, unsigned int a2)
{
  if (a2)
  {
    unint64_t v2 = *this;
    unint64_t v3 = ((unint64_t)*((unsigned int *)this + 2) + 63) >> 6;
    if (a2 >> 6 >= v3) {
      int v4 = ((unint64_t)*((unsigned int *)this + 2) + 63) >> 6;
    }
    else {
      int v4 = a2 >> 6;
    }
    uint64_t v5 = (v3 - v4);
    char v6 = a2 & 0x3F;
    if ((a2 & 0x3F) != 0)
    {
      if (a2 >> 6 < v3)
      {
        uint64_t v7 = v2[v4] >> v6;
        void *v2 = v7;
        if (v5 != 1)
        {
          unsigned int v8 = v4 + 1;
          int v9 = v2 + 1;
          uint64_t v10 = 1 - v5;
          do
          {
            uint64_t v11 = v8;
            *(v9 - 1) = (v2[v11] << (64 - v6)) | v7;
            uint64_t v7 = v2[v11] >> v6;
            *v9++ = v7;
            ++v8;
          }
          while (!__CFADD__(v10++, 1));
        }
      }
    }
    else
    {
      memmove(*this, &v2[v4], (8 * v5));
    }
    bzero(&v2[v5], (8 * v4));
  }
}

void llvm::APInt::tcShiftRight(llvm::APInt *this, unint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    if (a3 >> 6 >= a2) {
      unsigned int v4 = a2;
    }
    else {
      unsigned int v4 = a3 >> 6;
    }
    uint64_t v5 = a2 - v4;
    char v6 = a3 & 0x3F;
    if ((a3 & 0x3F) != 0)
    {
      if (a3 >> 6 < a2)
      {
        uint64_t v7 = *((void *)this + v4) >> v6;
        *(void *)this = v7;
        if (v5 != 1)
        {
          uint64_t v8 = 1 - v5;
          unsigned int v9 = v4 + 1;
          uint64_t v10 = (void *)((char *)this + 8);
          do
          {
            uint64_t v11 = 8 * v9;
            *(v10 - 1) = (*(void *)((char *)this + v11) << (64 - v6)) | v7;
            uint64_t v7 = *(void *)((char *)this + v11) >> v6;
            *v10++ = v7;
            ++v9;
          }
          while (!__CFADD__(v8++, 1));
        }
      }
    }
    else
    {
      memmove(this, (char *)this + 8 * v4, (8 * v5));
    }
    bzero((char *)this + 8 * v5, 8 * v4);
  }
}

uint64_t llvm::APInt::operator<<=(uint64_t this, uint64_t a2)
{
  uint64_t v2 = this;
  unint64_t v3 = *(unsigned int *)(this + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4 < 0x41)
  {
    uint64_t v5 = *(unint64_t **)a2;
    unsigned int v6 = *(_DWORD *)(this + 8);
    if ((unint64_t)v5 > v3) {
      goto LABEL_14;
    }
LABEL_13:
    unsigned int v6 = v5;
    goto LABEL_14;
  }
  int v7 = 0;
  unint64_t v8 = (unint64_t)(v4 + 63) >> 6;
  unsigned int v9 = *(unint64_t **)a2;
  int v10 = v8 << 6;
  unint64_t v11 = v8 + 1;
  while (1)
  {
    unint64_t v12 = v9[(v11 - 2)];
    if (v12) {
      break;
    }
    v7 += 64;
    if (--v11 <= 1) {
      goto LABEL_9;
    }
  }
  int v10 = __clz(v12) + v7;
LABEL_9:
  int v13 = v4 | 0xFFFFFFC0;
  if ((v4 & 0x3F) == 0) {
    int v13 = 0;
  }
  unsigned int v6 = *(_DWORD *)(this + 8);
  if ((v4 - v13 - v10) <= 0x40)
  {
    uint64_t v5 = (unint64_t *)*v9;
    unsigned int v6 = *(_DWORD *)(this + 8);
    if (*v9 <= v3) {
      goto LABEL_13;
    }
  }
LABEL_14:
  if (v3 > 0x40)
  {
    llvm::APInt::shlSlowCase((const void **)this, v6);
    return v2;
  }
  else
  {
    if (v3 == v6) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = *(void *)this << v6;
    }
    if (v3) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
    }
    else {
      unint64_t v15 = 0;
    }
    *(void *)this = v14 & v15;
  }
  return this;
}

void llvm::APInt::shlSlowCase(const void **this, unsigned int a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *((unsigned int *)this + 2);
  if (a2)
  {
    uint64_t v4 = *this;
    unint64_t v5 = (unint64_t)(v3 + 63) >> 6;
    if (a2 >> 6 >= v5) {
      unsigned int v6 = (unint64_t)(v3 + 63) >> 6;
    }
    else {
      unsigned int v6 = a2 >> 6;
    }
    char v7 = a2 & 0x3F;
    if ((a2 & 0x3F) != 0)
    {
      if (a2 >> 6 < v5)
      {
        unint64_t v8 = v5 - 1;
        unint64_t v9 = v4[v5 - 1 - v6] << (a2 & 0x3F);
        int v10 = &v4[(v5 - 1)];
        *int v10 = v9;
        if ((int)v5 - 1 > v6)
        {
          unint64_t v11 = &v4[(v5 - 1) - 1 + (uint64_t)-v6];
          unint64_t v12 = &v4[(v5 - 2)];
          do
          {
            unint64_t v13 = *v11--;
            *int v10 = (v13 >> (64 - v7)) | v9;
            unint64_t v9 = v4[v8 - v6 - 1] << v7;
            int v10 = &v4[(v8 - 1)];
            *v12-- = v9;
            --v8;
          }
          while (v6 < v8);
        }
      }
    }
    else
    {
      memmove(&v4[v6], *this, 8 * (v5 - v6));
    }
    bzero(v4, 8 * v6);
    LODWORD(v3) = *((_DWORD *)v2 + 2);
  }
  if (v3)
  {
    unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
    if (v3 >= 0x41) {
      uint64_t v2 = (const void **)((char *)*v2 + 8 * (((unint64_t)v3 + 63) >> 6) - 8);
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  void *v2 = (const void *)((unint64_t)*v2 & v14);
}

void llvm::APInt::tcShiftLeft(llvm::APInt *this, unint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = this;
    if (a3 >> 6 >= a2) {
      unsigned int v4 = a2;
    }
    else {
      unsigned int v4 = a3 >> 6;
    }
    char v5 = a3 & 0x3F;
    if ((a3 & 0x3F) != 0)
    {
      if (a3 >> 6 < a2)
      {
        uint64_t v6 = a2 - 1;
        uint64_t v7 = *((void *)this + v6 - v4) << v5;
        unint64_t v8 = (uint64_t *)((char *)this + 8 * v6);
        *unint64_t v8 = v7;
        if (v6 > v4)
        {
          unint64_t v9 = (void *)((char *)this + 8 * (a2 - 2));
          do
          {
            uint64_t v10 = 8 * (v6 - v4 - 1);
            *unint64_t v8 = (*(void *)((char *)this + v10) >> (64 - v5)) | v7;
            --v6;
            uint64_t v7 = *(void *)((char *)this + v10) << v5;
            unint64_t v8 = (uint64_t *)((char *)this + 8 * v6);
            *v9-- = v7;
          }
          while (v4 < v6);
        }
      }
      size_t v11 = 8 * v4;
    }
    else
    {
      memmove((char *)this + 8 * v4, this, 8 * (a2 - v4));
      size_t v11 = 8 * v4;
      this = v3;
    }
    bzero(this, v11);
  }
}

void llvm::APInt::udiv(const void **this@<X0>, size_t __sz@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 <= 0x40)
  {
    unint64_t v7 = (unint64_t)*this / *(void *)__sz;
    *((_DWORD *)a3 + 2) = v6;
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!v6) {
      unint64_t v8 = 0;
    }
    *(void *)a3 = v7 & v8;
    return;
  }
  int v9 = 0;
  unint64_t v10 = v6 + 63;
  unint64_t v11 = (unint64_t)(v6 + 63) >> 6;
  unint64_t v12 = *this;
  int v13 = v11 << 6;
  unint64_t v14 = v11 + 1;
  while (1)
  {
    unint64_t v15 = v12[(v14 - 2)];
    if (v15) {
      break;
    }
    v9 += 64;
    if (--v14 <= 1) {
      goto LABEL_10;
    }
  }
  int v13 = __clz(v15) + v9;
LABEL_10:
  int v16 = v6 | 0xFFFFFFC0;
  if ((v6 & 0x3F) == 0) {
    int v16 = 0;
  }
  uint64_t v17 = (const unint64_t *)(((unint64_t)(v6 - v16 - v13) + 63) >> 6);
  uint64_t v18 = *(unsigned int *)(__sz + 8);
  if (v18 > 0x40)
  {
    int v24 = 0;
    unint64_t v25 = (unint64_t)(v18 + 63) >> 6;
    uint64_t v19 = *(void **)__sz;
    int v26 = v25 << 6;
    unint64_t v27 = v25 + 1;
    while (1)
    {
      unint64_t v28 = v19[(v27 - 2)];
      if (v28) {
        break;
      }
      v24 += 64;
      if (--v27 <= 1)
      {
        int v29 = v18 | 0xFFFFFFC0;
        if ((v18 & 0x3F) == 0) {
          int v29 = 0;
        }
        int v20 = v26 + v29;
        if (v17) {
          goto LABEL_14;
        }
        goto LABEL_24;
      }
    }
    int v36 = __clz(v28) + v24;
    int v37 = v18 | 0xFFFFFFC0;
    if ((v18 & 0x3F) == 0) {
      int v37 = 0;
    }
    int v20 = v36 + v37;
    if (v17) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
  uint64_t v19 = *(void **)__sz;
  int v20 = v18 + __clz(*(void *)__sz) - 64;
  if (!v17)
  {
LABEL_24:
    *((_DWORD *)a3 + 2) = v6;
    unsigned int v30 = operator new[](8 * v11);
    bzero(v30, 8 * v11);
    *(void *)a3 = v30;
    void *v30 = 0;
    v30[(v11 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    return;
  }
LABEL_14:
  uint64_t v21 = (v18 - v20);
  if (v21 == 1)
  {
    *((_DWORD *)a3 + 2) = v6;
    size_t v22 = (v10 >> 3) & 0x3FFFFFF8;
    int v23 = operator new[](v22);
    *(void *)a3 = v23;
    memcpy(v23, v12, v22);
    return;
  }
  unint64_t v31 = (const unint64_t *)((unint64_t)(v21 + 63) >> 6);
  if (v17 < v31)
  {
LABEL_39:
    *((_DWORD *)a3 + 2) = v6;
    unint64_t v38 = operator new[](8 * v11);
    bzero(v38, 8 * v11);
    *(void *)a3 = v38;
    void *v38 = 0;
LABEL_40:
    v38[(v11 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    return;
  }
  uint64_t v32 = v11;
  while (v32 * 8)
  {
    unint64_t v33 = v12[v32 - 1];
    unint64_t v34 = v19[--v32];
    if (v33 != v34)
    {
      if (v33 <= v34) {
        goto LABEL_39;
      }
      break;
    }
  }
  if (!memcmp(*this, v19, (v10 >> 3) & 0x3FFFFFF8))
  {
    *((_DWORD *)a3 + 2) = v6;
    unint64_t v38 = operator new[](8 * v11);
    bzero(v38, 8 * v11);
    *(void *)a3 = v38;
    void *v38 = 1;
    goto LABEL_40;
  }
  if (v17 == 1)
  {
    uint64_t v35 = *v12 / *v19;
    llvm::APInt::APInt(a3, v6, v35, 0);
  }
  else
  {
    llvm::APInt::APInt(a3, v6, 0, 0);
    unsigned int v40 = (llvm::APInt *)*this;
    unsigned int v41 = *(int32x4_t **)__sz;
    unsigned int v42 = *(int8x16_t **)a3;
    llvm::APInt::divide(v40, v17, v41, v31, v42, 0, v39);
  }
}

void llvm::APInt::udivrem(llvm::APInt *__sz, const llvm::APInt *a2, void **a3, llvm::APInt *a4, llvm::APInt *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v11 = *((unsigned int *)__sz + 2);
  if (v11 <= 0x40)
  {
    unint64_t v12 = *(void *)__sz % *(void *)a2;
    if (v11) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = (void *)((*(void *)__sz / *(void *)a2) & v13);
    if (*((_DWORD *)a3 + 2) >= 0x41u && *a3) {
      operator delete[](*a3);
    }
    *a3 = v14;
    *((_DWORD *)a3 + 2) = v11;
    unint64_t v15 = (void *)(v12 & v13);
    if (*((_DWORD *)a4 + 2) < 0x41u) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  int v16 = 0;
  unint64_t v17 = (unint64_t)(v11 + 63) >> 6;
  int v18 = v17 << 6;
  unint64_t v19 = v17 + 1;
  while (1)
  {
    unint64_t v20 = *(void *)(*(void *)__sz + 8 * (v19 - 2));
    if (v20) {
      break;
    }
    v16 += 64;
    if (--v19 <= 1) {
      goto LABEL_15;
    }
  }
  int v18 = __clz(v20) + v16;
LABEL_15:
  int v21 = v11 | 0xFFFFFFC0;
  if ((v11 & 0x3F) == 0) {
    int v21 = 0;
  }
  unint64_t v22 = ((unint64_t)(v11 - v21 - v18) + 63) >> 6;
  uint64_t v23 = *((unsigned int *)a2 + 2);
  if (v23 > 0x40)
  {
    int v30 = 0;
    unint64_t v31 = (unint64_t)(v23 + 63) >> 6;
    int v32 = v31 << 6;
    unint64_t v33 = v31 + 1;
    while (1)
    {
      unint64_t v34 = *(void *)(*(void *)a2 + 8 * (v33 - 2));
      if (v34) {
        break;
      }
      v30 += 64;
      if (--v33 <= 1)
      {
        int v35 = v23 | 0xFFFFFFC0;
        if ((v23 & 0x3F) == 0) {
          int v35 = 0;
        }
        int v24 = v32 + v35;
        if (v22) {
          goto LABEL_19;
        }
        goto LABEL_29;
      }
    }
    int v39 = __clz(v34) + v30;
    int v40 = v23 | 0xFFFFFFC0;
    if ((v23 & 0x3F) == 0) {
      int v40 = 0;
    }
    int v24 = v39 + v40;
    if (v22) {
      goto LABEL_19;
    }
    goto LABEL_29;
  }
  int v24 = v23 + __clz(*(void *)a2) - 64;
  if (!v22)
  {
LABEL_29:
    size_t v36 = 8 * v17;
    int v37 = operator new[](8 * v17);
    bzero(v37, 8 * v17);
    void *v37 = 0;
LABEL_30:
    unint64_t v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    v37[(v17 - 1)] &= v38;
    if (*((_DWORD *)a3 + 2) >= 0x41u && *a3) {
      operator delete[](*a3);
    }
    *a3 = v37;
    *((_DWORD *)a3 + 2) = v11;
    unint64_t v15 = operator new[](v36);
    bzero(v15, v36);
    void *v15 = 0;
    v15[(v17 - 1)] &= v38;
    if (*((_DWORD *)a4 + 2) < 0x41u) {
      goto LABEL_36;
    }
LABEL_34:
    if (*(void *)a4) {
      operator delete[](*(void **)a4);
    }
LABEL_36:
    *(void *)a4 = v15;
    *((_DWORD *)a4 + 2) = v11;
    return;
  }
LABEL_19:
  uint64_t v25 = (v23 - v24);
  unint64_t v26 = (unint64_t)(v25 + 63) >> 6;
  unsigned int v27 = *((_DWORD *)__sz + 2);
  if (v25 == 1)
  {
    if (a3 != (void **)__sz)
    {
      uint64_t v28 = *((unsigned int *)a3 + 2);
      if (((unint64_t)(v28 + 63) >> 6) == v17)
      {
        *((_DWORD *)a3 + 2) = v11;
        int v29 = *a3;
      }
      else
      {
        if (v28 >= 0x41 && *a3) {
          operator delete[](*a3);
        }
        *((_DWORD *)a3 + 2) = v11;
        int v29 = operator new[](8 * v17);
        *a3 = v29;
      }
      memcpy(v29, *(const void **)__sz, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    }
    unsigned int v41 = operator new[](8 * v17);
    bzero(v41, 8 * v17);
    *unsigned int v41 = 0;
    v41[(v17 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    if (*((_DWORD *)a4 + 2) >= 0x41u && *(void *)a4) {
      operator delete[](*(void **)a4);
    }
    *(void *)a4 = v41;
    *((_DWORD *)a4 + 2) = v11;
    unsigned int v27 = *((_DWORD *)__sz + 2);
  }
  if (v22 < v26)
  {
LABEL_51:
    uint64_t v42 = *((unsigned int *)a4 + 2);
    if (v42 <= 0x40 && v27 <= 0x40)
    {
      *(void *)a4 = *(void *)__sz;
      *((_DWORD *)a4 + 2) = *((_DWORD *)__sz + 2);
      goto LABEL_91;
    }
    if (a4 == __sz)
    {
LABEL_91:
      unsigned int v61 = operator new[](8 * v17);
      bzero(v61, 8 * v17);
      *unsigned int v61 = 0;
      v61[(v17 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
      if (*((_DWORD *)a3 + 2) >= 0x41u && *a3) {
        operator delete[](*a3);
      }
      *a3 = v61;
      *((_DWORD *)a3 + 2) = v11;
      return;
    }
    unint64_t v43 = v27 + 63;
    if (((unint64_t)(v42 + 63) >> 6) == (v43 >> 6))
    {
      *((_DWORD *)a4 + 2) = v27;
      if (v27 >= 0x41)
      {
        unint64_t v44 = *(void **)a4;
LABEL_90:
        memcpy(v44, *(const void **)__sz, (v43 >> 3) & 0x3FFFFFF8);
        goto LABEL_91;
      }
    }
    else
    {
      if (v42 >= 0x41 && *(void *)a4) {
        operator delete[](*(void **)a4);
      }
      *((_DWORD *)a4 + 2) = v27;
      if (v27 >= 0x41)
      {
        unint64_t v44 = operator new[](8 * (v43 >> 6));
        *(void *)a4 = v44;
        goto LABEL_90;
      }
    }
    *(void *)a4 = *(void *)__sz;
    goto LABEL_91;
  }
  if (v27 > 0x40)
  {
    unsigned int v45 = *(char **)__sz;
    uint64_t v46 = *(char **)a2;
    unint64_t v47 = ((unint64_t)v27 + 63) >> 3;
    unint64_t v48 = v47 & 0x3FFFFFF8;
    while (v48)
    {
      unint64_t v49 = *(void *)&v45[v48 - 8];
      unint64_t v50 = *(void *)&v46[v48 - 8];
      v48 -= 8;
      if (v49 != v50)
      {
        if (v49 <= v50) {
          goto LABEL_51;
        }
        break;
      }
    }
    if (!memcmp(v45, v46, v47 & 0x3FFFFFF8))
    {
LABEL_57:
      size_t v36 = 8 * v17;
      int v37 = operator new[](8 * v17);
      bzero(v37, 8 * v17);
      void *v37 = 1;
      goto LABEL_30;
    }
  }
  else
  {
    if (*(void *)__sz < *(void *)a2) {
      goto LABEL_51;
    }
    if (*(void *)__sz == *(void *)a2) {
      goto LABEL_57;
    }
  }
  uint64_t v51 = *((unsigned int *)a3 + 2);
  if (((unint64_t)(v51 + 63) >> 6) == v17)
  {
    *((_DWORD *)a3 + 2) = v11;
    uint64_t v52 = *((unsigned int *)a4 + 2);
    if (((unint64_t)(v52 + 63) >> 6) != v17) {
      goto LABEL_69;
    }
  }
  else
  {
    if (v51 >= 0x41 && *a3) {
      operator delete[](*a3);
    }
    *((_DWORD *)a3 + 2) = v11;
    *a3 = operator new[](8 * v17);
    uint64_t v52 = *((unsigned int *)a4 + 2);
    if (((unint64_t)(v52 + 63) >> 6) != v17)
    {
LABEL_69:
      if (v52 >= 0x41 && *(void *)a4) {
        operator delete[](*(void **)a4);
      }
      *((_DWORD *)a4 + 2) = v11;
      *(void *)a4 = operator new[](8 * v17);
      BOOL v53 = *(llvm::APInt **)__sz;
      if (v22 != 1) {
        goto LABEL_73;
      }
LABEL_84:
      uint64_t v56 = *(void *)v53;
      unint64_t v57 = **(void **)a2;
      uint64_t v58 = *((unsigned int *)a3 + 2);
      unint64_t v59 = *(void *)v53 / v57;
      if (v58 > 0x40)
      {
        *(void *)*a3 = v59;
        bzero((char *)*a3 + 8, (((unint64_t)(v58 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        if (v58) {
          unint64_t v60 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v58;
        }
        else {
          unint64_t v60 = 0;
        }
        *a3 = (void *)(v60 & v59);
      }
      uint64_t v62 = v56 - v59 * v57;
      uint64_t v63 = *((unsigned int *)a4 + 2);
      if (v63 <= 0x40)
      {
        if (v63) {
          unint64_t v64 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v63;
        }
        else {
          unint64_t v64 = 0;
        }
        *(void *)a4 = v64 & v62;
        return;
      }
      **(void **)a4 = v62;
      unint64_t v54 = (void *)(*(void *)a4 + 8);
      size_t v55 = (((unint64_t)(v63 + 63) >> 3) - 8) & 0xFFFFFFF8;
      goto LABEL_102;
    }
  }
  *((_DWORD *)a4 + 2) = v11;
  BOOL v53 = *(llvm::APInt **)__sz;
  if (v22 == 1) {
    goto LABEL_84;
  }
LABEL_73:
  llvm::APInt::divide(v53, (const unint64_t *)v22, *(int32x4_t **)a2, (const unint64_t *)v26, (int8x16_t *)*a3, *(unint64_t **)a4, a7);
  bzero((char *)*a3 + 8 * v22, (8 * (v17 - v22)));
  unint64_t v54 = (void *)(*(void *)a4 + 8 * v26);
  size_t v55 = (8 * (v17 - v26));
LABEL_102:

  bzero(v54, v55);
}

void llvm::APInt::divide(llvm::APInt *this, const unint64_t *a2, int32x4_t *a3, const unint64_t *a4, int8x16_t *a5, unint64_t *a6, unint64_t *a7)
{
  int v162 = a5;
  uint64_t v159 = this;
  int32x2_t v160 = a3;
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  unsigned int v161 = a4;
  uint64_t v8 = (2 * a4);
  uint64_t v9 = (2 * a2);
  if (a6) {
    int v10 = 4;
  }
  else {
    int v10 = 3;
  }
  unsigned int v11 = (v10 * v8 + 2 * (v9 - v8)) | 1;
  unsigned int v12 = a2;
  uint64_t v13 = (2 * a2) | 1u;
  size_t v14 = 4 * v13;
  if (v11 > 0x80)
  {
    unint64_t v20 = (uint32x4_t *)operator new[](4 * v13);
    unint64_t v15 = (uint32x4_t *)operator new[](4 * v8);
    unint64_t v17 = operator new[](4 * v9);
    unint64_t v19 = a6;
    if (a6)
    {
      int v21 = operator new[](4 * v8);
      bzero(v20, v14);
      unsigned int v22 = v161;
      unsigned int v23 = v12;
      if (!v12) {
        goto LABEL_18;
      }
    }
    else
    {
      int v21 = 0;
      bzero(v20, v14);
      unsigned int v22 = v161;
      unsigned int v23 = v12;
      if (!v12) {
        goto LABEL_18;
      }
    }
LABEL_14:
    if (v23 >= 0x10)
    {
      uint64_t v24 = 0;
      uint64_t v49 = 8 * v23 - 8;
      if ((char *)v20->i64 + v49 + 4 >= (char *)v20->i64 + 4 && &v20->i8[v49] >= (__int8 *)v20)
      {
        uint64_t v50 = 0;
        uint64_t v24 = v23 & 0xFFFFFFF8;
        uint64_t v51 = (int32x4_t *)((char *)v159 + 32);
        do
        {
          int32x4_t v53 = v51[-2];
          int32x4_t v52 = v51[-1];
          int32x4_t v55 = *v51;
          int32x4_t v54 = v51[1];
          v51 += 4;
          v171.val[0] = (float32x4_t)vuzp1q_s32(v53, v52);
          v171.val[1] = (float32x4_t)vuzp2q_s32(v53, v52);
          v165.val[0] = (float32x4_t)vuzp1q_s32(v55, v54);
          uint64_t v56 = (float *)&v20->i32[v50 & 0xFFFFFFF0];
          vst2q_f32(v56, v171);
          v165.val[1] = (float32x4_t)vuzp2q_s32(v55, v54);
          unint64_t v57 = (float *)&v20[2].i32[v50 & 0xFFFFFFF0];
          vst2q_f32(v57, v165);
          v50 += 16;
        }
        while (((2 * v23) & 0x1FFFFFFF0) != v50);
        if (v24 == v23) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    int v25 = 2 * v24;
    uint64_t v26 = v23 - v24;
    unsigned int v27 = (uint64_t *)((char *)v159 + 8 * v24);
    do
    {
      uint64_t v28 = *v27++;
      v20->i32[v25] = v28;
      v20->i32[v25 + 1] = HIDWORD(v28);
      v25 += 2;
      --v26;
    }
    while (v26);
    goto LABEL_18;
  }
  unint64_t v15 = (uint32x4_t *)&v163[v13];
  int v16 = v8 + v13;
  unint64_t v17 = &v163[v16];
  int v18 = &v163[(v16 + v9)];
  unint64_t v19 = a6;
  unint64_t v20 = (uint32x4_t *)v163;
  if (a6) {
    int v21 = v18;
  }
  else {
    int v21 = 0;
  }
  bzero(v163, v14);
  unsigned int v22 = v161;
  unsigned int v23 = v12;
  if (v12) {
    goto LABEL_14;
  }
LABEL_18:
  v20->i32[v9] = 0;
  bzero(v15, 4 * v8);
  if (!v22) {
    goto LABEL_23;
  }
  if (v22 < 0x10)
  {
    uint64_t v29 = 0;
LABEL_21:
    int v30 = 2 * v29;
    uint64_t v31 = v22 - v29;
    int v32 = &v160->i64[v29];
    do
    {
      uint64_t v33 = *v32++;
      v15->i32[v30] = v33;
      v15->i32[v30 + 1] = HIDWORD(v33);
      v30 += 2;
      --v31;
    }
    while (v31);
    goto LABEL_23;
  }
  uint64_t v29 = 0;
  uint64_t v58 = 8 * v22 - 8;
  if ((char *)v15->i64 + v58 + 4 < (char *)v15->i64 + 4) {
    goto LABEL_21;
  }
  if (&v15->i8[v58] < (__int8 *)v15) {
    goto LABEL_21;
  }
  uint64_t v59 = 0;
  uint64_t v29 = v22 & 0xFFFFFFF8;
  unint64_t v60 = v160 + 2;
  do
  {
    int32x4_t v62 = v60[-2];
    int32x4_t v61 = v60[-1];
    int32x4_t v64 = *v60;
    int32x4_t v63 = v60[1];
    v60 += 4;
    v172.val[0] = (float32x4_t)vuzp1q_s32(v62, v61);
    v172.val[1] = (float32x4_t)vuzp2q_s32(v62, v61);
    v166.val[0] = (float32x4_t)vuzp1q_s32(v64, v63);
    uint64_t v65 = (float *)&v15->i32[v59 & 0xFFFFFFF0];
    vst2q_f32(v65, v172);
    v166.val[1] = (float32x4_t)vuzp2q_s32(v64, v63);
    size_t v66 = (float *)&v15[2].i32[v59 & 0xFFFFFFF0];
    vst2q_f32(v66, v166);
    v59 += 16;
  }
  while (((2 * v22) & 0x1FFFFFFF0) != v59);
  if (v29 != v22) {
    goto LABEL_21;
  }
LABEL_23:
  bzero(v17, 4 * v9);
  if (v19) {
    bzero(v21, 4 * v8);
  }
  if (v8)
  {
    unint64_t v34 = v162;
    while (!v15[-1].i32[v8 + 3])
    {
      if (!--v8)
      {
        unsigned int v35 = v9;
        if (v9) {
          goto LABEL_34;
        }
        goto LABEL_38;
      }
    }
    LODWORD(v9) = v9 - v8;
    unsigned int v35 = v8 + v9;
    if (!(v8 + v9)) {
      goto LABEL_38;
    }
  }
  else
  {
    unint64_t v34 = v162;
    unsigned int v35 = v9 - v8;
    if (v9 == v8) {
      goto LABEL_38;
    }
  }
LABEL_34:
  uint64_t v36 = v35;
  while (!v20[-1].i32[v36 + 3])
  {
    LODWORD(v9) = v9 - 1;
    if (!(--v36 * 4))
    {
      LODWORD(v9) = -(int)v8;
      break;
    }
  }
LABEL_38:
  uint64_t v37 = (v8 - 1);
  if (v8 != 1)
  {
    unsigned int v44 = __clz(v15->u32[v37]);
    uint64_t v45 = (v9 + v8);
    if (!v44)
    {
      __int32 v48 = 0;
      goto LABEL_83;
    }
    if (!v45)
    {
      __int32 v48 = 0;
      goto LABEL_74;
    }
    unsigned int v46 = 32 - v44;
    if (v45 >= 8)
    {
      uint64_t v47 = v45 & 0xFFFFFFF8;
      uint32x4_t v67 = (uint32x4_t)vdupq_n_s32(v44);
      int v68 = v20 + 1;
      int8x16_t v69 = 0uLL;
      uint32x4_t v70 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v46));
      uint64_t v71 = v47;
      do
      {
        uint32x4_t v72 = v68[-1];
        int8x16_t v73 = (int8x16_t)vshlq_u32(v72, v70);
        int8x16_t v74 = vextq_s8(v69, v73, 0xCuLL);
        int8x16_t v69 = (int8x16_t)vshlq_u32(*v68, v70);
        int8x16_t v75 = vorrq_s8((int8x16_t)vshlq_u32(*v68, v67), vextq_s8(v73, v69, 0xCuLL));
        v68[-1] = (uint32x4_t)vorrq_s8((int8x16_t)vshlq_u32(v72, v67), v74);
        *int v68 = (uint32x4_t)v75;
        v68 += 2;
        v71 -= 8;
      }
      while (v71);
      __int32 v48 = v69.i32[3];
      if (v47 == v45)
      {
LABEL_74:
        if (!v8) {
          goto LABEL_83;
        }
        unsigned int v79 = 32 - v44;
        if (v8 >= 8)
        {
          uint64_t v80 = v8 & 0xFFFFFFF8;
          uint32x4_t v82 = (uint32x4_t)vdupq_n_s32(v44);
          unint64_t v83 = v15 + 1;
          int8x16_t v84 = 0uLL;
          uint32x4_t v85 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v79));
          uint64_t v86 = v80;
          do
          {
            uint32x4_t v87 = v83[-1];
            int8x16_t v88 = (int8x16_t)vshlq_u32(v87, v85);
            int8x16_t v89 = vextq_s8(v84, v88, 0xCuLL);
            int8x16_t v84 = (int8x16_t)vshlq_u32(*v83, v85);
            int8x16_t v90 = vorrq_s8((int8x16_t)vshlq_u32(*v83, v82), vextq_s8(v88, v84, 0xCuLL));
            v83[-1] = (uint32x4_t)vorrq_s8((int8x16_t)vshlq_u32(v87, v82), v89);
            *unint64_t v83 = (uint32x4_t)v90;
            v83 += 2;
            v86 -= 8;
          }
          while (v86);
          if (v80 == v8)
          {
LABEL_83:
            v20->i32[v45] = v48;
            uint64_t v94 = (v8 - 2);
            uint64_t v95 = (int)v9;
            do
            {
              uint64_t v97 = (v8 + v95);
              unint64_t v98 = v20->u32[(v97 - 1)] | ((unint64_t)v20->u32[v97] << 32);
              unint64_t v99 = v15->u32[v37];
              unint64_t v100 = v98 / v99;
              unint64_t v101 = v98 % v99;
              if (v98 / v99 == 0x100000000
                || (unint64_t v102 = v98 / v99, v100 * v15->u32[v94] > (v20->u32[(v97 - 2)] | (v101 << 32))))
              {
                unint64_t v102 = v100 - 1;
                unint64_t v103 = v101 + v99;
                if (!HIDWORD(v103)
                  && (v100 == 0x100000001 || v102 * v15->u32[v94] > (v20->u32[(v97 - 2)] | (v103 << 32))))
                {
                  unint64_t v102 = v100 - 2;
                }
              }
              if (v8)
              {
                uint64_t v104 = 0;
                uint64_t v105 = 0;
                do
                {
                  unint64_t v106 = v102 * v15->u32[v104];
                  uint64_t v107 = (v95 + v104);
                  unint64_t v108 = v20->u32[v107] - (v105 + v106);
                  v20->i32[v107] = v108;
                  unint64_t v109 = HIDWORD(v106) - HIDWORD(v108);
                  uint64_t v105 = v109;
                  ++v104;
                }
                while (v8 != v104);
                uint64_t v110 = v97;
                unint64_t v111 = v20->u32[v110];
                v20->i32[v110] = v111 - v109;
                v17[v95] = v102;
                if (v109 > v111)
                {
                  uint64_t v112 = 0;
                  LOBYTE(v113) = 0;
                  v17[v95] = v102 - 1;
                  do
                  {
                    while (1)
                    {
                      unsigned int v114 = v15->u32[v112];
                      unsigned int v115 = v20->u32[(v95 + v112)];
                      unsigned __int32 v116 = v114 >= v115 ? v20->i32[(v95 + v112)] : v15->i32[v112];
                      unsigned __int32 v117 = v114 + (v113 & 1) + v115;
                      v20->i32[(v95 + v112)] = v117;
                      if (v117 < v116) {
                        break;
                      }
                      int v113 = v113 & (v117 == v116);
                      if (v8 == ++v112) {
                        goto LABEL_103;
                      }
                    }
                    int v113 = 1;
                    ++v112;
                  }
                  while (v8 != v112);
LABEL_103:
                  v20->i32[v110] += v113;
                }
              }
              else
              {
                v17[v95] = v102;
              }
              BOOL v96 = v95-- <= 0;
            }
            while (!v96);
            if (v21)
            {
              if (v44)
              {
                if ((v37 & 0x80000000) == 0)
                {
                  unsigned __int32 v118 = 0;
                  do
                  {
                    unsigned __int32 v119 = v20->u32[v37];
                    int v120 = (v119 >> v44) | v118;
                    unsigned __int32 v118 = v119 << (32 - v44);
                    v21[v37] = v120;
                    BOOL v96 = v37-- <= 0;
                  }
                  while (!v96);
                }
              }
              else if ((v37 & 0x80000000) == 0)
              {
                if (v37 < 0x1F) {
                  goto LABEL_114;
                }
                uint64_t v151 = 4 * v37;
                if (v21 > &v21[v37]) {
                  goto LABEL_114;
                }
                if (v20 > (uint32x4_t *)&v20->i8[v151]) {
                  goto LABEL_114;
                }
                if ((unint64_t)((char *)v20 - (char *)v21) < 0x20) {
                  goto LABEL_114;
                }
                uint64_t v152 = v37 + 1;
                uint64_t v153 = (v37 + 1) & 0x1FFFFFFF8;
                v37 -= v153;
                uint64_t v154 = v151 - 12;
                int v155 = &v21[(unint64_t)v151 / 4 - 3];
                int v156 = &v20->i8[v154];
                uint64_t v157 = v153;
                do
                {
                  long long v158 = *(_OWORD *)v156;
                  *(v155 - 1) = *((_OWORD *)v156 - 1);
                  *int v155 = v158;
                  v155 -= 2;
                  v156 -= 32;
                  v157 -= 8;
                }
                while (v157);
                if (v152 != v153)
                {
LABEL_114:
                  do
                  {
                    v21[v37] = v20->i32[v37];
                    BOOL v96 = v37-- <= 0;
                  }
                  while (!v96);
                }
              }
            }
            goto LABEL_115;
          }
          __int32 v81 = v84.i32[3];
        }
        else
        {
          uint64_t v80 = 0;
          __int32 v81 = 0;
        }
        uint64_t v91 = v8 - v80;
        uint64_t v92 = &v15->i32[v80];
        do
        {
          unsigned int v93 = *v92 >> v79;
          *uint64_t v92 = (*v92 << v44) | v81;
          ++v92;
          __int32 v81 = v93;
          --v91;
        }
        while (v91);
        goto LABEL_83;
      }
    }
    else
    {
      uint64_t v47 = 0;
      __int32 v48 = 0;
    }
    uint64_t v76 = v45 - v47;
    BOOL v77 = &v20->i32[v47];
    __int32 v78 = v48;
    do
    {
      __int32 v48 = *v77 >> v46;
      *BOOL v77 = (*v77 << v44) | v78;
      ++v77;
      __int32 v78 = v48;
      --v76;
    }
    while (v76);
    goto LABEL_74;
  }
  uint64_t v38 = 0;
  if ((v9 & 0x80000000) == 0)
  {
    unint64_t v39 = v15->u32[0];
    for (uint64_t i = v9; i != -1; --i)
    {
      uint64_t v41 = v38;
      uint64_t v38 = v20->u32[i];
      unint64_t v42 = v38 | (v41 << 32);
      if (v42)
      {
        if (v42 >= v39)
        {
          if (v42 == v39)
          {
            uint64_t v38 = 0;
            v17[i] = 1;
          }
          else
          {
            unint64_t v43 = v42 / v39;
            v17[i] = v43;
            uint64_t v38 = (v38 - v39 * v43);
          }
          continue;
        }
      }
      else
      {
        uint64_t v38 = 0;
      }
      v17[i] = 0;
    }
  }
  if (v21) {
    *int v21 = v38;
  }
LABEL_115:
  if (v34 && v23)
  {
    if (v23 < 8)
    {
      uint64_t v121 = 0;
LABEL_122:
      int v135 = 2 * v121;
      uint64_t v136 = v23 - v121;
      uint64_t v137 = (unint64_t *)v34 + v121;
      do
      {
        *v137++ = v17[v135] | ((unint64_t)v17[v135 + 1] << 32);
        v135 += 2;
        --v136;
      }
      while (v136);
      goto LABEL_124;
    }
    uint64_t v122 = 0;
    uint64_t v121 = v23 & 0xFFFFFFF8;
    int v123 = v34 + 2;
    do
    {
      int v124 = (const float *)&v17[v122 & 0xFFFFFFF0];
      float32x4x2_t v167 = vld2q_f32(v124);
      int v125 = (const float *)&v17[(v122 & 0xFFFFFFF0) + 8];
      float32x4x2_t v169 = vld2q_f32(v125);
      __asm { SHLL2           V4.2D, V1.4S, #0x20 ; ' ' }
      int8x16_t v131 = (int8x16_t)vshll_n_s32(*(int32x2_t *)v167.val[1].f32, 0x20uLL);
      __asm { SHLL2           V6.2D, V3.4S, #0x20 ; ' ' }
      v133.i64[0] = v167.val[0].u32[2];
      v133.i64[1] = v167.val[0].u32[3];
      int8x16_t v134 = v133;
      v133.i64[0] = v167.val[0].u32[0];
      v133.i64[1] = v167.val[0].u32[1];
      v167.val[0] = (float32x4_t)v133;
      v133.i64[0] = v169.val[0].u32[2];
      v133.i64[1] = v169.val[0].u32[3];
      v167.val[1] = (float32x4_t)v133;
      v133.i64[0] = v169.val[0].u32[0];
      v133.i64[1] = v169.val[0].u32[1];
      v123[-2] = vorrq_s8(v131, (int8x16_t)v167.val[0]);
      v123[-1] = vorrq_s8(_Q4, v134);
      int8x16_t *v123 = vorrq_s8((int8x16_t)vshll_n_s32(*(int32x2_t *)v169.val[1].f32, 0x20uLL), v133);
      v123[1] = vorrq_s8(_Q6, (int8x16_t)v167.val[1]);
      v123 += 4;
      v122 += 16;
    }
    while (((2 * v23) & 0x1FFFFFFF0) != v122);
    if (v121 != v23) {
      goto LABEL_122;
    }
  }
LABEL_124:
  if (v19 && v22)
  {
    if (v22 < 8)
    {
      uint64_t v138 = 0;
LABEL_131:
      int v148 = 2 * v138;
      uint64_t v149 = v22 - v138;
      int v150 = &v19[v138];
      do
      {
        *v150++ = v21[v148] | ((unint64_t)v21[v148 + 1] << 32);
        v148 += 2;
        --v149;
      }
      while (v149);
      goto LABEL_133;
    }
    uint64_t v139 = 0;
    uint64_t v138 = v22 & 0xFFFFFFF8;
    float64x2_t v140 = (int8x16_t *)(v19 + 4);
    do
    {
      long long v141 = (const float *)&v21[v139 & 0xFFFFFFF0];
      float32x4x2_t v168 = vld2q_f32(v141);
      uint64_t v142 = (const float *)&v21[(v139 & 0xFFFFFFF0) + 8];
      float32x4x2_t v170 = vld2q_f32(v142);
      __asm { SHLL2           V4.2D, V1.4S, #0x20 ; ' ' }
      int8x16_t v144 = (int8x16_t)vshll_n_s32(*(int32x2_t *)v168.val[1].f32, 0x20uLL);
      __asm { SHLL2           V6.2D, V3.4S, #0x20 ; ' ' }
      v146.i64[0] = v168.val[0].u32[2];
      v146.i64[1] = v168.val[0].u32[3];
      int8x16_t v147 = v146;
      v146.i64[0] = v168.val[0].u32[0];
      v146.i64[1] = v168.val[0].u32[1];
      v168.val[0] = (float32x4_t)v146;
      v146.i64[0] = v170.val[0].u32[2];
      v146.i64[1] = v170.val[0].u32[3];
      v168.val[1] = (float32x4_t)v146;
      v146.i64[0] = v170.val[0].u32[0];
      v146.i64[1] = v170.val[0].u32[1];
      v140[-2] = vorrq_s8(v144, (int8x16_t)v168.val[0]);
      v140[-1] = vorrq_s8(_Q4, v147);
      *float64x2_t v140 = vorrq_s8((int8x16_t)vshll_n_s32(*(int32x2_t *)v170.val[1].f32, 0x20uLL), v146);
      v140[1] = vorrq_s8(_Q6, (int8x16_t)v168.val[1]);
      v140 += 4;
      v139 += 16;
    }
    while (((2 * v22) & 0x1FFFFFFF0) != v139);
    if (v138 != v22) {
      goto LABEL_131;
    }
  }
LABEL_133:
  if (v20 != (uint32x4_t *)v163)
  {
    operator delete[](v20);
    operator delete[](v15);
    operator delete[](v17);
    if (v21) {
      operator delete[](v21);
    }
  }
}

void llvm::APInt::sdiv(const void **this@<X0>, size_t __sz@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  unsigned int v7 = v6 - 1;
  uint64_t v8 = this;
  if (v6 >= 0x41) {
    uint64_t v8 = (const void **)((char *)*this + 8 * (v7 >> 6));
  }
  unint64_t v9 = (unint64_t)*v8;
  uint64_t v10 = *(unsigned int *)(__sz + 8);
  unsigned int v11 = v10 - 1;
  if (((v9 >> v7) & 1) == 0)
  {
    if (v10 > 0x40)
    {
      uint64_t v24 = *(const void **)__sz;
      if ((*(void *)(*(void *)__sz + 8 * (v11 >> 6)) >> v11))
      {
        unsigned int v32 = *(_DWORD *)(__sz + 8);
        size_t v25 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
        uint64_t v31 = operator new[](v25);
        memcpy(v31, v24, v25);
        goto LABEL_33;
      }
    }
    else
    {
      size_t v14 = *(void **)__sz;
      if ((*(void *)__sz >> v11))
      {
        unsigned int v32 = *(_DWORD *)(__sz + 8);
        uint64_t v31 = v14;
LABEL_33:
        llvm::APInt::negate((llvm::APInt *)&v31);
        unsigned int v26 = v32;
        unsigned int v46 = v32;
        unsigned int v27 = v31;
        uint64_t v45 = v31;
        unsigned int v32 = 0;
        llvm::APInt::udiv(this, (size_t)&v45, (llvm::APInt *)&v33);
        llvm::APInt::negate((llvm::APInt *)&v33);
        *((_DWORD *)a3 + 2) = v34;
        *(void *)a3 = v33;
        int v34 = 0;
        if (v26 >= 0x41 && v27) {
          operator delete[](v27);
        }
        if (v32 >= 0x41)
        {
          unsigned int v23 = v31;
          if (v31) {
            goto LABEL_48;
          }
        }
        return;
      }
    }
    llvm::APInt::udiv(this, __sz, a3);
    return;
  }
  if (v10 >= 0x41) {
    unsigned int v12 = (void *)(*(void *)__sz + 8 * (v11 >> 6));
  }
  else {
    unsigned int v12 = (void *)__sz;
  }
  if ((*v12 >> v11))
  {
    unsigned int v44 = *((_DWORD *)this + 2);
    if (v6 > 0x40)
    {
      size_t v16 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
      uint64_t v13 = operator new[](v16);
      memcpy(v13, *this, v16);
    }
    else
    {
      uint64_t v13 = (void *)*this;
    }
    unint64_t v43 = v13;
    llvm::APInt::negate((llvm::APInt *)&v43);
    unsigned int v17 = v44;
    unsigned int v46 = v44;
    int v18 = v43;
    uint64_t v45 = v43;
    unsigned int v44 = 0;
    uint64_t v19 = *(unsigned int *)(__sz + 8);
    unsigned int v40 = v19;
    if (v19 > 0x40)
    {
      size_t v20 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
      __p = operator new[](v20);
      memcpy(__p, *(const void **)__sz, v20);
    }
    else
    {
      __p = *(void **)__sz;
    }
    llvm::APInt::negate((llvm::APInt *)&__p);
    unsigned int v21 = v40;
    unsigned int v42 = v40;
    unsigned int v22 = __p;
    uint64_t v41 = __p;
    unsigned int v40 = 0;
    llvm::APInt::udiv((const void **)&v45, (size_t)&v41, a3);
    if (v21 >= 0x41 && v22) {
      operator delete[](v22);
    }
    if (v40 >= 0x41 && __p) {
      operator delete[](__p);
    }
    if (v17 >= 0x41 && v18) {
      operator delete[](v18);
    }
    if (v44 < 0x41) {
      return;
    }
    unsigned int v23 = v43;
    if (!v43) {
      return;
    }
LABEL_48:
    operator delete[](v23);
    return;
  }
  unsigned int v36 = *((_DWORD *)this + 2);
  if (v6 > 0x40)
  {
    size_t v28 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
    unint64_t v15 = operator new[](v28);
    memcpy(v15, *this, v28);
  }
  else
  {
    unint64_t v15 = (void *)*this;
  }
  unsigned int v35 = v15;
  llvm::APInt::negate((llvm::APInt *)&v35);
  unsigned int v29 = v36;
  unsigned int v46 = v36;
  int v30 = v35;
  uint64_t v45 = v35;
  unsigned int v36 = 0;
  llvm::APInt::udiv((const void **)&v45, __sz, (llvm::APInt *)&v37);
  llvm::APInt::negate((llvm::APInt *)&v37);
  *((_DWORD *)a3 + 2) = v38;
  *(void *)a3 = v37;
  int v38 = 0;
  if (v29 >= 0x41 && v30) {
    operator delete[](v30);
  }
  if (v36 >= 0x41)
  {
    unsigned int v23 = v35;
    if (v35) {
      goto LABEL_48;
    }
  }
}

void llvm::APInt::urem(const void **this@<X0>, size_t __sz@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  if (v6 <= 0x40)
  {
    unint64_t v7 = (unint64_t)*this % *(void *)__sz;
    *((_DWORD *)a3 + 2) = v6;
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!v6) {
      unint64_t v8 = 0;
    }
    *(void *)a3 = v7 & v8;
    return;
  }
  int v9 = 0;
  unint64_t v10 = v6 + 63;
  unint64_t v11 = (unint64_t)(v6 + 63) >> 6;
  unsigned int v12 = *this;
  int v13 = v11 << 6;
  unint64_t v14 = v11 + 1;
  while (1)
  {
    unint64_t v15 = v12[(v14 - 2)];
    if (v15) {
      break;
    }
    v9 += 64;
    if (--v14 <= 1) {
      goto LABEL_10;
    }
  }
  int v13 = __clz(v15) + v9;
LABEL_10:
  int v16 = v6 | 0xFFFFFFC0;
  if ((v6 & 0x3F) == 0) {
    int v16 = 0;
  }
  unsigned int v17 = (const unint64_t *)(((unint64_t)(v6 - v16 - v13) + 63) >> 6);
  uint64_t v18 = *(unsigned int *)(__sz + 8);
  if (v18 > 0x40)
  {
    int v21 = 0;
    unint64_t v22 = (unint64_t)(v18 + 63) >> 6;
    uint64_t v19 = *(void **)__sz;
    int v23 = v22 << 6;
    unint64_t v24 = v22 + 1;
    while (1)
    {
      unint64_t v25 = v19[(v24 - 2)];
      if (v25) {
        break;
      }
      v21 += 64;
      if (--v24 <= 1)
      {
        int v26 = v18 | 0xFFFFFFC0;
        if ((v18 & 0x3F) == 0) {
          int v26 = 0;
        }
        int v20 = v23 + v26;
        if (v17) {
          goto LABEL_25;
        }
        goto LABEL_26;
      }
    }
    int v27 = __clz(v25) + v21;
    int v28 = v18 | 0xFFFFFFC0;
    if ((v18 & 0x3F) == 0) {
      int v28 = 0;
    }
    int v20 = v27 + v28;
    if (!v17) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v19 = *(void **)__sz;
    int v20 = v18 + __clz(*(void *)__sz) - 64;
    if (!v17) {
      goto LABEL_26;
    }
  }
LABEL_25:
  uint64_t v29 = (v18 - v20);
  if (v29 == 1)
  {
LABEL_26:
    *((_DWORD *)a3 + 2) = v6;
    int v30 = operator new[](8 * v11);
    bzero(v30, 8 * v11);
    *(void *)a3 = v30;
    void *v30 = 0;
    v30[(v11 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    return;
  }
  uint64_t v31 = (const unint64_t *)((unint64_t)(v29 + 63) >> 6);
  if (v17 < v31)
  {
LABEL_37:
    *((_DWORD *)a3 + 2) = v6;
    size_t v36 = (v10 >> 3) & 0x3FFFFFF8;
    uint64_t v37 = operator new[](v36);
    *(void *)a3 = v37;
    memcpy(v37, v12, v36);
  }
  else
  {
    uint64_t v32 = v11;
    while (v32 * 8)
    {
      unint64_t v33 = v12[v32 - 1];
      unint64_t v34 = v19[--v32];
      if (v33 != v34)
      {
        if (v33 <= v34) {
          goto LABEL_37;
        }
        break;
      }
    }
    if (!memcmp(*this, v19, (v10 >> 3) & 0x3FFFFFF8))
    {
      *((_DWORD *)a3 + 2) = v6;
      int v38 = operator new[](8 * v11);
      bzero(v38, 8 * v11);
      *(void *)a3 = v38;
      void *v38 = 0;
      v38[(v11 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    }
    else if (v17 == 1)
    {
      uint64_t v35 = *v12 % *v19;
      llvm::APInt::APInt(a3, v6, v35, 0);
    }
    else
    {
      llvm::APInt::APInt(a3, v6, 0, 0);
      unsigned int v40 = (llvm::APInt *)*this;
      uint64_t v41 = *(int32x4_t **)__sz;
      unsigned int v42 = *(unint64_t **)a3;
      llvm::APInt::divide(v40, v17, v41, v31, 0, v42, v39);
    }
  }
}

void llvm::APInt::srem(const void **this@<X0>, size_t __sz@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v6 = *((unsigned int *)this + 2);
  unsigned int v7 = v6 - 1;
  unint64_t v8 = this;
  if (v6 >= 0x41) {
    unint64_t v8 = (const void **)((char *)*this + 8 * (v7 >> 6));
  }
  unint64_t v9 = (unint64_t)*v8;
  uint64_t v10 = *(unsigned int *)(__sz + 8);
  unsigned int v11 = v10 - 1;
  if (((v9 >> v7) & 1) == 0)
  {
    if (v10 > 0x40)
    {
      unint64_t v24 = *(const void **)__sz;
      if ((*(void *)(*(void *)__sz + 8 * (v11 >> 6)) >> v11))
      {
        unsigned int v32 = *(_DWORD *)(__sz + 8);
        size_t v25 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
        uint64_t v31 = operator new[](v25);
        memcpy(v31, v24, v25);
        goto LABEL_33;
      }
    }
    else
    {
      unint64_t v14 = *(void **)__sz;
      if ((*(void *)__sz >> v11))
      {
        unsigned int v32 = *(_DWORD *)(__sz + 8);
        uint64_t v31 = v14;
LABEL_33:
        llvm::APInt::negate((llvm::APInt *)&v31);
        unsigned int v26 = v32;
        unsigned int v44 = v32;
        int v27 = v31;
        unint64_t v43 = v31;
        unsigned int v32 = 0;
        llvm::APInt::urem(this, (size_t)&v43, a3);
        if (v26 >= 0x41 && v27) {
          operator delete[](v27);
        }
        if (v32 >= 0x41)
        {
          int v23 = v31;
          if (v31) {
            goto LABEL_48;
          }
        }
        return;
      }
    }
    llvm::APInt::urem(this, __sz, a3);
    return;
  }
  if (v10 >= 0x41) {
    unsigned int v12 = (void *)(*(void *)__sz + 8 * (v11 >> 6));
  }
  else {
    unsigned int v12 = (void *)__sz;
  }
  if ((*v12 >> v11))
  {
    unsigned int v42 = *((_DWORD *)this + 2);
    if (v6 > 0x40)
    {
      size_t v16 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
      int v13 = operator new[](v16);
      memcpy(v13, *this, v16);
    }
    else
    {
      int v13 = (void *)*this;
    }
    uint64_t v41 = v13;
    llvm::APInt::negate((llvm::APInt *)&v41);
    unsigned int v17 = v42;
    unsigned int v44 = v42;
    uint64_t v18 = v41;
    unint64_t v43 = v41;
    unsigned int v42 = 0;
    uint64_t v19 = *(unsigned int *)(__sz + 8);
    unsigned int v38 = v19;
    if (v19 > 0x40)
    {
      size_t v20 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
      __p = operator new[](v20);
      memcpy(__p, *(const void **)__sz, v20);
    }
    else
    {
      __p = *(void **)__sz;
    }
    llvm::APInt::negate((llvm::APInt *)&__p);
    unsigned int v21 = v38;
    unsigned int v40 = v38;
    unint64_t v22 = __p;
    unint64_t v39 = __p;
    unsigned int v38 = 0;
    llvm::APInt::urem((const void **)&v43, (size_t)&v39, (llvm::APInt *)&v45);
    llvm::APInt::negate((llvm::APInt *)&v45);
    *((_DWORD *)a3 + 2) = v46;
    *(void *)a3 = v45;
    int v46 = 0;
    if (v21 >= 0x41 && v22) {
      operator delete[](v22);
    }
    if (v38 >= 0x41 && __p) {
      operator delete[](__p);
    }
    if (v17 >= 0x41 && v18) {
      operator delete[](v18);
    }
    if (v42 < 0x41) {
      return;
    }
    int v23 = v41;
    if (!v41) {
      return;
    }
LABEL_48:
    operator delete[](v23);
    return;
  }
  unsigned int v34 = *((_DWORD *)this + 2);
  if (v6 > 0x40)
  {
    size_t v28 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
    unint64_t v15 = operator new[](v28);
    memcpy(v15, *this, v28);
  }
  else
  {
    unint64_t v15 = (void *)*this;
  }
  unint64_t v33 = v15;
  llvm::APInt::negate((llvm::APInt *)&v33);
  unsigned int v29 = v34;
  unsigned int v44 = v34;
  int v30 = v33;
  unint64_t v43 = v33;
  unsigned int v34 = 0;
  llvm::APInt::urem((const void **)&v43, __sz, (llvm::APInt *)&v35);
  llvm::APInt::negate((llvm::APInt *)&v35);
  *((_DWORD *)a3 + 2) = v36;
  *(void *)a3 = v35;
  int v36 = 0;
  if (v29 >= 0x41 && v30) {
    operator delete[](v30);
  }
  if (v34 >= 0x41)
  {
    int v23 = v33;
    if (v33) {
      goto LABEL_48;
    }
  }
}

void llvm::APInt::udivrem(size_t __sz, unint64_t a2, uint64_t a3, llvm::APInt *a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  v39.i64[0] = a2;
  uint64_t v11 = *(unsigned int *)(__sz + 8);
  if (v11 > 0x40)
  {
    int v15 = 0;
    unint64_t v16 = v11 + 63;
    unint64_t v17 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v18 = *(unint64_t **)__sz;
    int v19 = v17 << 6;
    unint64_t v20 = v17 + 1;
    while (1)
    {
      unint64_t v21 = v18[(v20 - 2)];
      if (v21) {
        break;
      }
      v15 += 64;
      if (--v20 <= 1)
      {
        int v22 = v17 << 6;
        goto LABEL_13;
      }
    }
    int v22 = __clz(v21) + v15;
LABEL_13:
    int v23 = v11 | 0xFFFFFFC0;
    if ((v11 & 0x3F) == 0) {
      int v23 = 0;
    }
    unint64_t v24 = ((unint64_t)(v11 - v23 - v22) + 63) >> 6;
    if (!v24)
    {
      int v27 = operator new[](8 * v17);
      bzero(v27, 8 * v17);
      void *v27 = 0;
LABEL_21:
      v27[(v17 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
      if (*(_DWORD *)(a3 + 8) >= 0x41u && *(void *)a3) {
        operator delete[](*(void **)a3);
      }
      *(void *)a3 = v27;
      *(_DWORD *)(a3 + 8) = v11;
      *(void *)a4 = 0;
      return;
    }
    if (a2 == 1)
    {
      if (a3 != __sz)
      {
        uint64_t v25 = *(unsigned int *)(a3 + 8);
        if (((unint64_t)(v25 + 63) >> 6) == v17)
        {
          *(_DWORD *)(a3 + 8) = v11;
          unsigned int v26 = *(void **)a3;
        }
        else
        {
          if (v25 >= 0x41 && *(void *)a3) {
            operator delete[](*(void **)a3);
          }
          *(_DWORD *)(a3 + 8) = v11;
          unsigned int v26 = operator new[](8 * v17);
          *(void *)a3 = v26;
        }
        memcpy(v26, *(const void **)__sz, (v16 >> 3) & 0x3FFFFFF8);
      }
      *(void *)a4 = 0;
      return;
    }
    int v28 = 0;
    unint64_t v29 = v17 + 1;
    do
    {
      unint64_t v30 = v18[(v29 - 2)];
      if (v30)
      {
        if (v11 - v23 - (__clz(v30) + v28) <= 0x40) {
          goto LABEL_31;
        }
        goto LABEL_34;
      }
      v28 += 64;
      --v29;
    }
    while (v29 > 1);
    if ((v11 - v23 - v19) > 0x40) {
      goto LABEL_34;
    }
LABEL_31:
    if (*v18 < a2)
    {
      *(void *)a4 = *v18;
      unint64_t v14 = operator new[](8 * v17);
      bzero(v14, 8 * v17);
      void *v14 = 0;
      v14[(v17 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
      if (*(_DWORD *)(a3 + 8) >= 0x41u) {
        goto LABEL_5;
      }
      goto LABEL_7;
    }
LABEL_34:
    int v31 = 0;
    unint64_t v32 = v17 + 1;
    while (1)
    {
      unint64_t v33 = v18[(v32 - 2)];
      if (v33) {
        break;
      }
      v31 += 64;
      if (--v32 <= 1)
      {
        if ((v11 - v23 - v19) > 0x40) {
          goto LABEL_42;
        }
        goto LABEL_40;
      }
    }
    if (v11 - v23 - (__clz(v33) + v31) > 0x40) {
      goto LABEL_42;
    }
LABEL_40:
    if (*v18 == a2)
    {
      int v27 = operator new[](8 * v17);
      bzero(v27, 8 * v17);
      void *v27 = 1;
      goto LABEL_21;
    }
LABEL_42:
    uint64_t v34 = *(unsigned int *)(a3 + 8);
    if (((unint64_t)(v34 + 63) >> 6) == v17)
    {
      *(_DWORD *)(a3 + 8) = v11;
      uint64_t v35 = *(llvm::APInt **)__sz;
      if (v24 != 1)
      {
LABEL_44:
        llvm::APInt::divide(v35, (const unint64_t *)v24, &v39, (const unint64_t *)1, *(int8x16_t **)a3, (unint64_t *)a4, a7);
        int v36 = (void *)(*(void *)a3 + 8 * v24);
        bzero(v36, (8 * (v17 - v24)));
        return;
      }
    }
    else
    {
      if (v34 >= 0x41 && *(void *)a3) {
        operator delete[](*(void **)a3);
      }
      *(_DWORD *)(a3 + 8) = v11;
      *(void *)a3 = operator new[](8 * v17);
      uint64_t v35 = *(llvm::APInt **)__sz;
      if (v24 != 1) {
        goto LABEL_44;
      }
    }
    uint64_t v37 = *(void *)v35;
    unint64_t v38 = *(void *)v35 / a2;
    **(void **)a3 = v38;
    bzero((void *)(*(void *)a3 + 8), ((v16 >> 3) - 8) & 0xFFFFFFF8);
    *(void *)a4 = v37 - v38 * a2;
    return;
  }
  unint64_t v12 = *(void *)__sz / a2;
  *(void *)a4 = *(void *)__sz % a2;
  unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if (!v11) {
    unint64_t v13 = 0;
  }
  unint64_t v14 = (void *)(v12 & v13);
  if (*(_DWORD *)(a3 + 8) >= 0x41u)
  {
LABEL_5:
    if (*(void *)a3) {
      operator delete[](*(void **)a3);
    }
  }
LABEL_7:
  *(void *)a3 = v14;
  *(_DWORD *)(a3 + 8) = v11;
}

const void **llvm::APInt::sadd_ov@<X0>(const void **this@<X0>, const llvm::APInt *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = this;
  uint64_t v8 = *((unsigned int *)this + 2);
  if (v8 >= 0x41)
  {
    unint64_t v13 = (char *)operator new[](((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    unint64_t v9 = (unint64_t)*v6;
    this = (const void **)memcpy(v13, (const void *)v9, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v10 = *(void *)a2;
    unint64_t v18 = (unint64_t)(v8 + 63) >> 6;
    do
    {
      unint64_t v19 = *(void *)&v13[v16];
      uint64_t v20 = *(void *)(v10 + v16);
      BOOL v21 = __CFADD__(v20, v19);
      uint64_t v22 = v20 + v19;
      unsigned int v23 = v21;
      BOOL v24 = v22 + 1 <= v19;
      if (v17)
      {
        ++v22;
        uint64_t v17 = v24;
      }
      else
      {
        uint64_t v17 = v23;
      }
      *(void *)&v13[v16] = v22;
      v16 += 8;
    }
    while (8 * v18 != v16);
    *(void *)&v13[8 * (v18 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    *(_DWORD *)(a4 + 8) = v8;
    *(void *)a4 = v13;
    unsigned int v14 = v8 - 1;
    unint64_t v15 = *(void *)(v9 + 8 * ((v8 - 1) >> 6));
  }
  else
  {
    unint64_t v9 = (unint64_t)*this;
    uint64_t v10 = *(void *)a2;
    unint64_t v11 = (unint64_t)*this + *(void *)a2;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!v8) {
      unint64_t v12 = 0;
    }
    unint64_t v13 = (char *)(v11 & v12);
    *(_DWORD *)(a4 + 8) = v8;
    *(void *)a4 = v11 & v12;
    unsigned int v14 = v8 - 1;
    unint64_t v15 = v9;
  }
  uint64_t v25 = 1 << v14;
  BOOL v26 = (v15 & (1 << v14)) == 0;
  unsigned int v27 = *((_DWORD *)a2 + 2);
  int v28 = (const llvm::APInt *)(v10 + 8 * ((v27 - 1) >> 6));
  if (v27 < 0x41) {
    int v28 = a2;
  }
  if ((v26 ^ (((*(void *)v28 >> (v27 - 1)) & 1) == 0)))
  {
    BOOL v29 = 0;
  }
  else
  {
    uint64_t v30 = v14 >> 6;
    int v31 = &v13[8 * v30];
    if (v8 < 0x41) {
      int v31 = (char *)a4;
    }
    uint64_t v32 = *(void *)v31 & v25;
    if (v8 >= 0x41) {
      unint64_t v9 = *(void *)(v9 + 8 * v30);
    }
    BOOL v29 = (v32 == 0) ^ ((v9 & v25) == 0);
  }
  *a3 = v29;
  return this;
}

const void **llvm::APInt::uadd_ov@<X0>(const void **this@<X0>, uint64_t **a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = this;
  uint64_t v8 = *((unsigned int *)this + 2);
  if (v8 >= 0x41)
  {
    unint64_t v13 = (char *)operator new[](((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    this = (const void **)memcpy(v13, *v6, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    BOOL v14 = 0;
    unint64_t v15 = *a2;
    unint64_t v16 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v17 = v13;
    unint64_t v18 = *a2;
    unint64_t v19 = v16;
    do
    {
      uint64_t v20 = *v18++;
      uint64_t v21 = v20 + *v17;
      BOOL v22 = __CFADD__(v20, *v17);
      BOOL v23 = (unint64_t)(v21 + 1) <= *v17;
      if (v14)
      {
        ++v21;
        BOOL v14 = v23;
      }
      else
      {
        BOOL v14 = v22;
      }
      *v17++ = v21;
      --v19;
    }
    while (v19);
    *(void *)&v13[8 * (v16 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    *(_DWORD *)(a4 + 8) = v8;
    *(void *)a4 = v13;
    BOOL v24 = v15 - 1;
    uint64_t v25 = v16;
    while (v25 * 8)
    {
      unint64_t v26 = *(void *)&v13[v25 * 8 - 8];
      unint64_t v27 = v24[v25--];
      if (v26 != v27)
      {
        BOOL v12 = v26 <= v27;
        goto LABEL_18;
      }
    }
    BOOL v12 = 0;
  }
  else
  {
    unint64_t v9 = *a2;
    unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!v8) {
      unint64_t v10 = 0;
    }
    unint64_t v11 = ((unint64_t)*this + (void)*a2) & v10;
    *(_DWORD *)(a4 + 8) = v8;
    *(void *)a4 = v11;
    BOOL v12 = v11 < (unint64_t)v9;
  }
LABEL_18:
  *a3 = v12;
  return this;
}

const void **llvm::APInt::ssub_ov@<X0>(const void **this@<X0>, const llvm::APInt *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = this;
  uint64_t v8 = *((unsigned int *)this + 2);
  if (v8 >= 0x41)
  {
    unint64_t v13 = (char *)operator new[](((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    unint64_t v9 = (unint64_t)*v6;
    this = (const void **)memcpy(v13, (const void *)v9, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    uint64_t v16 = 0;
    BOOL v17 = 0;
    uint64_t v10 = *(void *)a2;
    unint64_t v18 = (unint64_t)(v8 + 63) >> 6;
    do
    {
      unint64_t v19 = *(void *)&v13[v16];
      unint64_t v20 = *(void *)(v10 + v16);
      unint64_t v21 = v19 - v20;
      BOOL v22 = v19 < v20;
      unint64_t v23 = v19 + ~v20;
      BOOL v24 = v23 >= v19;
      if (v17)
      {
        BOOL v17 = v24;
      }
      else
      {
        unint64_t v23 = v21;
        BOOL v17 = v22;
      }
      *(void *)&v13[v16] = v23;
      v16 += 8;
    }
    while (8 * v18 != v16);
    *(void *)&v13[8 * (v18 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    *(_DWORD *)(a4 + 8) = v8;
    *(void *)a4 = v13;
    unsigned int v14 = v8 - 1;
    unint64_t v15 = *(void *)(v9 + 8 * ((v8 - 1) >> 6));
  }
  else
  {
    unint64_t v9 = (unint64_t)*this;
    uint64_t v10 = *(void *)a2;
    unint64_t v11 = (unint64_t)*this - *(void *)a2;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!v8) {
      unint64_t v12 = 0;
    }
    unint64_t v13 = (char *)(v11 & v12);
    *(_DWORD *)(a4 + 8) = v8;
    *(void *)a4 = v11 & v12;
    unsigned int v14 = v8 - 1;
    unint64_t v15 = v9;
  }
  uint64_t v25 = 1 << v14;
  BOOL v26 = (v15 & (1 << v14)) == 0;
  unsigned int v27 = *((_DWORD *)a2 + 2);
  int v28 = (const llvm::APInt *)(v10 + 8 * ((v27 - 1) >> 6));
  if (v27 < 0x41) {
    int v28 = a2;
  }
  if (v26 == (((*(void *)v28 >> (v27 - 1)) & 1) == 0))
  {
    BOOL v32 = 0;
  }
  else
  {
    uint64_t v29 = v14 >> 6;
    uint64_t v30 = &v13[8 * v29];
    if (v8 < 0x41) {
      uint64_t v30 = (char *)a4;
    }
    uint64_t v31 = *(void *)v30 & v25;
    if (v8 >= 0x41) {
      unint64_t v9 = *(void *)(v9 + 8 * v29);
    }
    BOOL v32 = (v31 == 0) ^ ((v9 & v25) == 0);
  }
  *a3 = v32;
  return this;
}

const void **llvm::APInt::usub_ov@<X0>(const void **this@<X0>, unint64_t **a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = this;
  uint64_t v8 = *((unsigned int *)this + 2);
  if (v8 >= 0x41)
  {
    unint64_t v13 = (char *)operator new[](((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    unsigned int v14 = (char *)*v6;
    this = (const void **)memcpy(v13, v14, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    uint64_t v15 = 0;
    uint64_t v16 = *a2;
    unint64_t v17 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v18 = (unint64_t *)v13;
    unint64_t v19 = v17;
    do
    {
      unint64_t v20 = *v16++;
      unint64_t v21 = *v18 - v20;
      BOOL v22 = *v18 < v20;
      unint64_t v23 = *v18 + ~v20;
      if (v15)
      {
        uint64_t v15 = v23 >= *v18;
      }
      else
      {
        unint64_t v23 = v21;
        uint64_t v15 = v22;
      }
      *v18++ = v23;
      --v19;
    }
    while (v19);
    *(void *)&v13[8 * (v17 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    *(_DWORD *)(a4 + 8) = v8;
    *(void *)a4 = v13;
    uint64_t v24 = 8 * v17;
    while (v24)
    {
      unint64_t v25 = *(void *)&v13[v24 - 8];
      unint64_t v26 = *(void *)&v14[v24 - 8];
      v24 -= 8;
      BOOL v12 = v25 > v26;
      if (v25 != v26) {
        goto LABEL_13;
      }
    }
  }
  else
  {
    unint64_t v9 = *this;
    unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!v8) {
      unint64_t v10 = 0;
    }
    unint64_t v11 = ((unsigned char *)*this - (unsigned char *)*a2) & v10;
    *(_DWORD *)(a4 + 8) = v8;
    *(void *)a4 = v11;
    BOOL v12 = v11 > (unint64_t)v9;
LABEL_13:
    LOBYTE(v24) = v12;
  }
  *a3 = v24;
  return this;
}

void llvm::APInt::sdiv_ov(const void **this@<X0>, size_t __sz@<X1>, BOOL *x2_0@<X2>, llvm::APInt *a3@<X8>)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 > 0x40)
  {
    int v5 = v4 - 1;
    uint64_t v6 = (unint64_t *)*this;
    if ((*((void *)*this + ((v4 - 1) >> 6)) >> (v4 - 1)))
    {
      uint64_t v7 = 0;
      unint64_t v8 = (unint64_t)(v4 + 63) >> 6;
      unsigned int v9 = v8 << 6;
      unint64_t v10 = v8 << 6;
      while (!*v6)
      {
        ++v6;
        v7 += 64;
        if (v10 == v7)
        {
          if (v4 >= v9) {
            LODWORD(v4) = v9;
          }
          if (v4 != v5) {
            goto LABEL_18;
          }
          goto LABEL_11;
        }
      }
      unsigned int v12 = __clz(__rbit64(*v6)) + v7;
      if (v4 >= v12) {
        LODWORD(v4) = v12;
      }
      if (v4 == v5) {
        goto LABEL_11;
      }
    }
    goto LABEL_18;
  }
  if (*this != (const void *)(1 << (v4 - 1)))
  {
LABEL_18:
    *x2_0 = 0;
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v11 = *(unsigned int *)(__sz + 8);
  if (v11)
  {
    if (v11 > 0x40)
    {
      uint64_t v13 = 0;
      unint64_t v14 = (unint64_t)(v11 + 63) >> 6;
      uint64_t v15 = *(void **)__sz;
      int v16 = v14 << 6;
      unint64_t v17 = v14 << 6;
      while (*v15 == -1)
      {
        ++v15;
        v13 += 64;
        if (v17 == v13)
        {
          *x2_0 = v16 == v11;
          goto LABEL_14;
        }
      }
      *x2_0 = __clz(__rbit64(~*v15)) + v13 == v11;
    }
    else
    {
      *x2_0 = *(void *)__sz == 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    }
  }
  else
  {
    *x2_0 = 1;
  }
LABEL_14:
  llvm::APInt::sdiv(this, __sz, a3);
}

void llvm::APInt::smul_ov(unint64_t **this@<X0>, size_t __sz@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((unsigned int *)this + 2);
  if (v8 <= 0x40)
  {
    unsigned int v9 = *(const unint64_t **)__sz;
    uint64_t v10 = *(void *)__sz * (void)*this;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!v8) {
      unint64_t v11 = 0;
    }
    *(_DWORD *)(a4 + 8) = v8;
    *(void *)a4 = v10 & v11;
    uint64_t v12 = *(unsigned int *)(__sz + 8);
    if (v12 >= 0x41) {
      goto LABEL_5;
    }
LABEL_10:
    if (v9) {
      goto LABEL_17;
    }
LABEL_25:
    *a3 = 0;
    return;
  }
  unint64_t v18 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v19 = (llvm::APInt *)operator new[](8 * v18);
  unsigned int v9 = *(const unint64_t **)__sz;
  llvm::APInt::tcMultiply(v19, *this, *(const unint64_t **)__sz, (const unint64_t *)v18);
  *((void *)v19 + (v18 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
  *(_DWORD *)(a4 + 8) = v8;
  *(void *)a4 = v19;
  uint64_t v12 = *(unsigned int *)(__sz + 8);
  if (v12 < 0x41) {
    goto LABEL_10;
  }
LABEL_5:
  int v13 = 0;
  unint64_t v14 = (unint64_t)(v12 + 63) >> 6;
  int v15 = v14 << 6;
  unint64_t v16 = v14 + 1;
  while (1)
  {
    unint64_t v17 = v9[(v16 - 2)];
    if (v17) {
      break;
    }
    v13 += 64;
    if (--v16 <= 1) {
      goto LABEL_13;
    }
  }
  int v15 = __clz(v17) + v13;
LABEL_13:
  int v20 = v12 | 0xFFFFFFC0;
  if ((v12 & 0x3F) == 0) {
    int v20 = 0;
  }
  if ((v12 - v20 - v15) <= 0x40 && !*v9) {
    goto LABEL_25;
  }
LABEL_17:
  llvm::APInt::sdiv((const void **)a4, __sz, (llvm::APInt *)&__s1);
  unsigned int v21 = v40;
  if (v40 <= 0x40)
  {
    BOOL v22 = __s1;
    unint64_t v23 = *this;
    if (__s1 != *this)
    {
      *a3 = 1;
      return;
    }
LABEL_22:
    uint64_t v24 = *((unsigned int *)this + 2);
    unsigned int v25 = v24 - 1;
    if (v24 > 0x40)
    {
      if ((v23[v25 >> 6] >> v25))
      {
        uint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(v24 + 63) >> 6;
        unsigned int v28 = v27 << 6;
        unint64_t v29 = v27 << 6;
        while (!*v23)
        {
          ++v23;
          v26 += 64;
          if (v29 == v26)
          {
            if (v24 >= v28) {
              LODWORD(v24) = v28;
            }
            if (v24 != v25) {
              goto LABEL_39;
            }
            goto LABEL_33;
          }
        }
        unsigned int v32 = __clz(__rbit64(*v23)) + v26;
        if (v24 >= v32) {
          LODWORD(v24) = v32;
        }
        if (v24 == v25) {
          goto LABEL_33;
        }
      }
    }
    else if (v23 == (unint64_t *)(1 << v25))
    {
LABEL_33:
      uint64_t v30 = *(unsigned int *)(__sz + 8);
      if (v30)
      {
        if (v30 > 0x40)
        {
          uint64_t v34 = 0;
          unint64_t v35 = (unint64_t)(v30 + 63) >> 6;
          int v36 = *(const unint64_t **)__sz;
          int v37 = v35 << 6;
          unint64_t v38 = v35 << 6;
          while (*v36 == -1)
          {
            ++v36;
            v34 += 64;
            if (v38 == v34) {
              goto LABEL_46;
            }
          }
          int v37 = __clz(__rbit64(~*v36)) + v34;
LABEL_46:
          BOOL v31 = v37 == v30;
        }
        else
        {
          BOOL v31 = *(void *)__sz == 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
        }
        BOOL v33 = v31;
      }
      else
      {
        BOOL v33 = 1;
      }
LABEL_50:
      *a3 = v33;
      if (v21 < 0x41) {
        return;
      }
      goto LABEL_51;
    }
LABEL_39:
    BOOL v33 = 0;
    goto LABEL_50;
  }
  BOOL v22 = __s1;
  unint64_t v23 = *this;
  if (!memcmp(__s1, *this, (((unint64_t)v40 + 63) >> 3) & 0x3FFFFFF8)) {
    goto LABEL_22;
  }
  *a3 = 1;
LABEL_51:
  if (v22) {
    operator delete[](v22);
  }
}

void llvm::APInt::umul_ov(llvm::APInt *this@<X0>, const unint64_t **a2@<X1>, BOOL *a3@<X2>, uint64_t *a4@<X8>)
{
  int v5 = (unint64_t *)this;
  uint64_t v7 = *((unsigned int *)this + 2);
  if (v7 > 0x40)
  {
    int v17 = 0;
    unint64_t v18 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v8 = *(void *)this;
    int v19 = v18 << 6;
    unint64_t v20 = v18 + 1;
    while (1)
    {
      unint64_t v21 = *(void *)(v8 + 8 * (v20 - 2));
      if (v21) {
        break;
      }
      v17 += 64;
      if (--v20 <= 1) {
        goto LABEL_21;
      }
    }
    int v19 = __clz(v21) + v17;
LABEL_21:
    int v25 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v25 = 0;
    }
    int v9 = v19 + v25;
    uint64_t v10 = *((unsigned int *)a2 + 2);
    if (v10 > 0x40)
    {
LABEL_3:
      int v11 = 0;
      unint64_t v12 = (unint64_t)(v10 + 63) >> 6;
      int v13 = *a2;
      int v14 = v12 << 6;
      unint64_t v15 = v12 + 1;
      while (1)
      {
        unint64_t v16 = v13[(v15 - 2)];
        if (v16) {
          break;
        }
        v11 += 64;
        if (--v15 <= 1) {
          goto LABEL_12;
        }
      }
      int v14 = __clz(v16) + v11;
LABEL_12:
      if ((v10 & 0x3F) != 0) {
        int v22 = v10 | 0xFFFFFFC0;
      }
      else {
        int v22 = 0;
      }
      if (v9 + v14 + v22 + 2 <= v7) {
        goto LABEL_16;
      }
      goto LABEL_25;
    }
  }
  else
  {
    unint64_t v8 = *(void *)this;
    int v9 = v7 + __clz(*(void *)this) - 64;
    uint64_t v10 = *((unsigned int *)a2 + 2);
    if (v10 > 0x40) {
      goto LABEL_3;
    }
  }
  int v13 = *a2;
  if (v9 + v10 + __clz((unint64_t)*a2) - 64 + 2 <= v7)
  {
LABEL_16:
    *a3 = 1;
    if (v7 > 0x40)
    {
      unint64_t v31 = (unint64_t)(v7 + 63) >> 6;
      uint64_t v24 = (llvm::APInt *)operator new[](8 * v31);
      llvm::APInt::tcMultiply(v24, (unint64_t *)*v5, *a2, (const unint64_t *)v31);
      *((void *)v24 + (v31 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    }
    else
    {
      unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
      if (!v7) {
        unint64_t v23 = 0;
      }
      uint64_t v24 = (llvm::APInt *)(((void)*a2 * *(void *)this) & v23);
    }
    *((_DWORD *)a4 + 2) = v7;
    *a4 = (uint64_t)v24;
    return;
  }
LABEL_25:
  if (v7 > 0x40)
  {
    int32x4_t v62 = a3;
    unint64_t v32 = v7 + 63;
    BOOL v33 = operator new[](((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    memcpy(v33, (const void *)v8, ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    unint64_t v34 = 0;
    unint64_t v35 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v36 = *v33 >> 1;
    *BOOL v33 = v36;
    uint64_t v37 = 8 * v35;
    do
    {
      unint64_t v38 = &v33[v34 / 8];
      unint64_t v39 = v33[v34 / 8 + 1];
      uint64_t v40 = v36 | (v39 << 63);
      uint64_t v36 = v39 >> 1;
      uint64_t *v38 = v40;
      v38[1] = v39 >> 1;
      v34 += 8;
    }
    while (v37 - 8 != v34);
    uint64_t v30 = (llvm::APInt *)operator new[](8 * (v32 >> 6));
    llvm::APInt::tcMultiply(v30, v33, v13, (const unint64_t *)(v32 >> 6));
    unint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    *((void *)v30 + (v35 - 1)) &= v41;
    *((_DWORD *)a4 + 2) = v7;
    *a4 = (uint64_t)v30;
    operator delete[](v33);
    a3 = v62;
    *int32x4_t v62 = (*((void *)v30 + ((v7 - 1) >> 6)) >> (v7 - 1)) & 1;
    unsigned int v42 = (uint64_t *)((char *)v30 + v37 - 8);
    uint64_t v43 = 2 * *v42;
    *unsigned int v42 = v43;
    unint64_t v44 = v35 - 2;
    do
    {
      *unsigned int v42 = v43 | (*((void *)v30 + v44) >> 63);
      unsigned int v42 = (uint64_t *)((char *)v30 + 8 * v44);
      uint64_t v43 = 2 * *v42;
      *unsigned int v42 = v43;
    }
    while ((unint64_t)v44--);
    *((void *)v30 + (v35 - 1)) &= v41;
    if (*((_DWORD *)v5 + 2) < 0x41u) {
      goto LABEL_42;
    }
LABEL_41:
    int v5 = (unint64_t *)*v5;
    goto LABEL_42;
  }
  unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> ((v7 - 1) & 0x3F ^ 0x3F);
  if (!v7) {
    unint64_t v26 = 0;
  }
  unint64_t v27 = v8 >> 1;
  if (v7 == 1) {
    unint64_t v27 = 0;
  }
  unint64_t v28 = ((void)v13 * v27) & v26;
  *((_DWORD *)a4 + 2) = v7;
  *a3 = (v28 >> (v7 - 1)) & 1;
  uint64_t v29 = 2 * v28;
  if (v7 == 1) {
    uint64_t v29 = 0;
  }
  uint64_t v30 = (llvm::APInt *)(v29 & v26);
  *a4 = v29 & v26;
  if (*((_DWORD *)this + 2) >= 0x41u) {
    goto LABEL_41;
  }
LABEL_42:
  if (*(unsigned char *)v5)
  {
    if (v7 >= 0x41)
    {
      BOOL v49 = 0;
      uint64_t v50 = *a2;
      unint64_t v51 = (unint64_t)(v7 + 63) >> 6;
      unint64_t v52 = v51;
      do
      {
        uint64_t v53 = *v50++;
        uint64_t v54 = v53 + *(void *)v30;
        BOOL v55 = __CFADD__(v53, *(void *)v30);
        BOOL v56 = (unint64_t)(v54 + 1) <= *(void *)v30;
        if (v49)
        {
          ++v54;
          BOOL v49 = v56;
        }
        else
        {
          BOOL v49 = v55;
        }
        *(void *)uint64_t v30 = v54;
        uint64_t v30 = (llvm::APInt *)((char *)v30 + 8);
        --v52;
      }
      while (v52);
      uint64_t v57 = *a4;
      *(void *)(v57 + 8 * (v51 - 1)) = *(void *)(*a4 + 8 * (v51 - 1)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7);
      uint64_t v58 = v51;
      uint64_t v59 = v57 - 8;
      while (v58 * 8)
      {
        unint64_t v60 = *(void *)(v59 + v58 * 8);
        unint64_t v61 = (*a2)[--v58];
        if (v60 != v61)
        {
          if (v60 > v61) {
            return;
          }
          goto LABEL_60;
        }
      }
    }
    else
    {
      int v46 = *a2;
      unint64_t v47 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
      if (!v7) {
        unint64_t v47 = 0;
      }
      unint64_t v48 = ((unint64_t)*a2 + (void)v30) & v47;
      *a4 = v48;
      if (v48 < (unint64_t)v46) {
LABEL_60:
      }
        *a3 = 1;
    }
  }
}

void llvm::APInt::toString(uint64_t a1, void *a2, unsigned int a3, char a4, int a5, int a6)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    uint64_t v10 = "";
    uint64_t v11 = *(unsigned int *)(a1 + 8);
    if (v11 > 0x40) {
      goto LABEL_3;
    }
LABEL_11:
    unint64_t v19 = *(void *)a1;
    if (!*(void *)a1) {
      goto LABEL_36;
    }
    if (a6) {
      uint64_t v20 = 36;
    }
    else {
      uint64_t v20 = 0;
    }
    if (a4)
    {
      unint64_t v19 = (uint64_t)(v19 << -(char)v11) >> -(char)v11;
      if ((v19 & 0x8000000000000000) != 0)
      {
        uint64_t v21 = a2[1];
        if ((unint64_t)(v21 + 1) > a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v21 + 1, 1);
          uint64_t v21 = a2[1];
        }
        *(unsigned char *)(*a2 + v21) = 45;
        ++a2[1];
        unint64_t v19 = -(uint64_t)v19;
      }
    }
    char v22 = *v10;
    if (*v10)
    {
      uint64_t v23 = a2[1];
      uint64_t v24 = (unsigned __int8 *)(v10 + 1);
      do
      {
        if ((unint64_t)(v23 + 1) > a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v23 + 1, 1);
          uint64_t v23 = a2[1];
        }
        *(unsigned char *)(*a2 + v23) = v22;
        uint64_t v23 = a2[1] + 1;
        a2[1] = v23;
        int v25 = *v24++;
        char v22 = v25;
      }
      while (v25);
    }
    if (v19)
    {
      uint64_t v26 = 64;
      do
      {
        *((unsigned char *)&__p + v26--) = llvm::APInt::toString(llvm::SmallVectorImpl<char> &,unsigned int,BOOL,BOOL,BOOL)const::BothDigits[v20 + v19 % a3];
        BOOL v27 = v19 >= a3;
        v19 /= a3;
      }
      while (v27);
      uint64_t v28 = v26 + 1;
      size_t v29 = 64 - v26;
      unint64_t v30 = a2[1];
      unint64_t v31 = v30 + 64 - v26;
      if (a2[2] >= v31) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v28 = 65;
      size_t v29 = 0;
      unint64_t v30 = a2[1];
      unint64_t v31 = v30;
      if (a2[2] >= v30) {
        goto LABEL_30;
      }
    }
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v31, 1);
    unint64_t v30 = a2[1];
LABEL_30:
    if (v28 != 65)
    {
      memcpy((void *)(*a2 + v30), (char *)&__p + v28, v29);
      unint64_t v30 = a2[1];
    }
    a2[1] = v30 + v29;
    return;
  }
  HIDWORD(v9) = a3;
  LODWORD(v9) = a3 - 2;
  uint64_t v10 = off_1E4FC0288[(int)(v9 >> 1)];
  uint64_t v11 = *(unsigned int *)(a1 + 8);
  if (v11 <= 0x40) {
    goto LABEL_11;
  }
LABEL_3:
  int v12 = 0;
  unint64_t v13 = (unint64_t)(v11 + 63) >> 6;
  int v14 = *(void **)a1;
  int v15 = v13 << 6;
  unint64_t v16 = v13 + 1;
  do
  {
    unint64_t v17 = v14[(v16 - 2)];
    if (v17)
    {
      int v32 = __clz(v17) + v12;
      int v33 = v11 | 0xFFFFFFC0;
      if ((v11 & 0x3F) == 0) {
        int v33 = 0;
      }
      if (v32 + v33 == v11) {
        goto LABEL_36;
      }
LABEL_42:
      if (a6) {
        uint64_t v38 = 36;
      }
      else {
        uint64_t v38 = 0;
      }
      unsigned int v82 = v11;
      __p = operator new[](((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
      memcpy(__p, v14, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
      if (a4 & 1) != 0 && ((v14[(v11 - 1) >> 6] >> (v11 - 1)))
      {
        llvm::APInt::negate((llvm::APInt *)&__p);
        uint64_t v42 = a2[1];
        if ((unint64_t)(v42 + 1) > a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v42 + 1, 1);
          uint64_t v42 = a2[1];
        }
        *(unsigned char *)(*a2 + v42) = 45;
        ++a2[1];
      }
      uint64_t v43 = &llvm::APInt::toString(llvm::SmallVectorImpl<char> &,unsigned int,BOOL,BOOL,BOOL)const::BothDigits[v38];
      char v44 = *v10;
      if (*v10)
      {
        uint64_t v45 = a2[1];
        int v46 = (unsigned __int8 *)(v10 + 1);
        do
        {
          if ((unint64_t)(v45 + 1) > a2[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v45 + 1, 1);
            uint64_t v45 = a2[1];
          }
          *(unsigned char *)(*a2 + v45) = v44;
          uint64_t v45 = a2[1] + 1;
          a2[1] = v45;
          int v47 = *v46++;
          char v44 = v47;
        }
        while (v47);
      }
      else
      {
        uint64_t v45 = a2[1];
      }
      if (a3 == 2 || a3 == 8)
      {
        if (a3 == 8) {
          int v48 = 3;
        }
        else {
          int v48 = 1;
        }
      }
      else
      {
        if (a3 != 16)
        {
          uint64_t v68 = v45;
          uint64_t v51 = v82;
          if (v82 > 0x40) {
            goto LABEL_108;
          }
          while (__p)
          {
            while (1)
            {
              uint64_t v80 = 0;
              llvm::APInt::udivrem((size_t)&__p, a3, (uint64_t)&__p, (llvm::APInt *)&v80, v39, v40, v41);
              char v78 = v43[v80];
              uint64_t v79 = a2[1];
              if ((unint64_t)(v79 + 1) > a2[2])
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v79 + 1, 1);
                uint64_t v79 = a2[1];
              }
              *(unsigned char *)(*a2 + v79) = v78;
              uint64_t v68 = a2[1] + 1;
              a2[1] = v68;
              uint64_t v51 = v82;
              if (v82 <= 0x40) {
                break;
              }
LABEL_108:
              int v72 = 0;
              unint64_t v73 = (unint64_t)(v51 + 63) >> 6;
              int v74 = v73 << 6;
              unint64_t v75 = v73 + 1;
              while (1)
              {
                unint64_t v76 = *((void *)__p + (v75 - 2));
                if (v76) {
                  break;
                }
                v72 += 64;
                if (--v75 <= 1) {
                  goto LABEL_113;
                }
              }
              int v74 = __clz(v76) + v72;
LABEL_113:
              int v77 = v51 | 0xFFFFFFC0;
              if ((v51 & 0x3F) == 0) {
                int v77 = 0;
              }
              if (v74 + v77 == v51) {
                goto LABEL_95;
              }
            }
          }
          goto LABEL_95;
        }
        int v48 = 4;
      }
      int v49 = v48;
      char v50 = 64 - v48;
      LODWORD(v51) = v82;
      while (v51 < 0x41)
      {
        LODWORD(v52) = __p;
        if (!__p) {
          goto LABEL_94;
        }
LABEL_86:
        char v61 = v43[v52 & (a3 - 1)];
        uint64_t v62 = a2[1];
        if ((unint64_t)(v62 + 1) > a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v62 + 1, 1);
          uint64_t v62 = a2[1];
        }
        *(unsigned char *)(*a2 + v62) = v61;
        ++a2[1];
        uint64_t v51 = v82;
        if (v82 > 0x40)
        {
          int32x4_t v63 = (char *)__p;
          uint64_t v64 = *(void *)__p >> v49;
          *(void *)__p = v64;
          uint64_t v65 = (unint64_t *)(v63 + 8);
          unint64_t v66 = ((unint64_t)(v51 + 63) >> 6) - 1;
          do
          {
            unint64_t v67 = *v65;
            *(v65 - 1) = (*v65 << v50) | v64;
            uint64_t v64 = v67 >> v49;
            *v65++ = v67 >> v49;
            --v66;
          }
          while (v66);
        }
        else if (v82 == v49)
        {
          __p = 0;
        }
        else
        {
          __p = (void *)((unint64_t)__p >> v49);
        }
      }
      int v53 = 0;
      unint64_t v54 = ((unint64_t)v51 + 63) >> 6;
      int v55 = v54 << 6;
      unint64_t v56 = v54 + 1;
      while (1)
      {
        unint64_t v57 = *((void *)__p + (v56 - 2));
        if (v57) {
          break;
        }
        v53 += 64;
        if (--v56 <= 1)
        {
          int v58 = v51 | 0xFFFFFFC0;
          if ((v51 & 0x3F) == 0) {
            int v58 = 0;
          }
          if (v55 + v58 == v51) {
            goto LABEL_94;
          }
LABEL_85:
          uint64_t v52 = *(void *)__p;
          goto LABEL_86;
        }
      }
      int v59 = __clz(v57) + v53;
      int v60 = v51 | 0xFFFFFFC0;
      if ((v51 & 0x3F) == 0) {
        int v60 = 0;
      }
      if (v59 + v60 != v51) {
        goto LABEL_85;
      }
LABEL_94:
      uint64_t v68 = a2[1];
LABEL_95:
      if (v45 != v68)
      {
        int8x16_t v69 = (unsigned char *)(*a2 + v68 - 1);
        if ((unint64_t)v69 > *a2 + (unint64_t)v45)
        {
          unint64_t v70 = v45 + *a2 + 1;
          do
          {
            char v71 = *(unsigned char *)(v70 - 1);
            *(unsigned char *)(v70 - 1) = *v69;
            *v69-- = v71;
            BOOL v27 = v70++ >= (unint64_t)v69;
          }
          while (!v27);
          LODWORD(v51) = v82;
        }
      }
      if (v51 >= 0x41)
      {
        if (__p) {
          operator delete[](__p);
        }
      }
      return;
    }
    v12 += 64;
    --v16;
  }
  while (v16 > 1);
  int v18 = v11 | 0xFFFFFFC0;
  if ((v11 & 0x3F) == 0) {
    int v18 = 0;
  }
  if (v15 + v18 != v11) {
    goto LABEL_42;
  }
LABEL_36:
  char v34 = *v10;
  if (*v10)
  {
    uint64_t v35 = a2[1];
    uint64_t v36 = (unsigned __int8 *)(v10 + 1);
    do
    {
      if ((unint64_t)(v35 + 1) > a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v35 + 1, 1);
        uint64_t v35 = a2[1];
      }
      *(unsigned char *)(*a2 + v35) = v34;
      uint64_t v35 = a2[1] + 1;
      a2[1] = v35;
      int v37 = *v36++;
      char v34 = v37;
    }
    while (v37);
  }
  else
  {
    uint64_t v35 = a2[1];
  }
  if ((unint64_t)(v35 + 1) > a2[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v35 + 1, 1);
    uint64_t v35 = a2[1];
  }
  *(unsigned char *)(*a2 + v35) = 48;
  ++a2[1];
}

void llvm::APInt::print(llvm::APInt *this, llvm::raw_ostream *a2, char a3)
{
  v6[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = v6;
  long long v5 = xmmword_1810FE310;
  llvm::APInt::toString((uint64_t)this, &v4, 0xAu, a3, 0, 1);
  llvm::raw_ostream::write(a2, (const char *)v4, v5);
  if (v4 != v6) {
    free(v4);
  }
}

void llvm::APInt::tcSet(llvm::APInt *this, unint64_t *a2, unsigned int a3)
{
  *(void *)this = a2;
  if (a3 >= 2) {
    bzero((char *)this + 8, 8 * (a3 - 2) + 8);
  }
}

uint64_t llvm::APInt::tcAssign(uint64_t this, unint64_t *a2, const unint64_t *a3)
{
  if (a3)
  {
    uint64_t v3 = 0;
    if (a3 < 4) {
      goto LABEL_7;
    }
    if ((unint64_t)(this - (void)a2) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v3 = a3 & 0xFFFFFFFC;
    uint64_t v4 = a2 + 2;
    long long v5 = (_OWORD *)(this + 16);
    uint64_t v6 = v3;
    do
    {
      long long v7 = *(_OWORD *)v4;
      *(v5 - 1) = *((_OWORD *)v4 - 1);
      *long long v5 = v7;
      v4 += 4;
      v5 += 2;
      v6 -= 4;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      unint64_t v8 = &a2[v3];
      unint64_t v9 = (void *)(this + 8 * v3);
      uint64_t v10 = a3 - v3;
      do
      {
        uint64_t v11 = *v8++;
        *v9++ = v11;
        --v10;
      }
      while (v10);
    }
  }
  return this;
}

BOOL llvm::APInt::tcIsZero(llvm::APInt *this, const unint64_t *a2)
{
  if (!a2) {
    return 1;
  }
  if (*(void *)this) {
    return 0;
  }
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    if (a2 == v3) {
      break;
    }
  }
  while (!*((void *)this + v3++));
  return v4 >= a2;
}

uint64_t llvm::APInt::tcExtractBit(llvm::APInt *this, const unint64_t *a2)
{
  return (*((void *)this + (a2 >> 6)) >> (char)a2) & 1;
}

uint64_t llvm::APInt::tcSetBit(uint64_t this, unint64_t *a2)
{
  *(void *)(this + 8 * (a2 >> 6)) |= 1 << (char)a2;
  return this;
}

uint64_t llvm::APInt::tcClearBit(uint64_t this, unint64_t *a2)
{
  *(void *)(this + 8 * (a2 >> 6)) &= ~(1 << (char)a2);
  return this;
}

uint64_t llvm::APInt::tcLSB(llvm::APInt *this, const unint64_t *a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = 0;
  while (1)
  {
    unint64_t v4 = *(void *)this;
    this = (llvm::APInt *)((char *)this + 8);
    unint64_t v3 = v4;
    if (v4) {
      break;
    }
    v2 -= 64;
    if (!(((unint64_t)a2 << 6) + v2)) {
      return 0xFFFFFFFFLL;
    }
  }
  return __clz(__rbit64(v3)) - v2;
}

uint64_t llvm::APInt::tcMSB(llvm::APInt *this, const unint64_t *a2)
{
  int v2 = 64 - (a2 << 6);
  unsigned int v3 = a2 - 1;
  while (1)
  {
    unint64_t v4 = *((void *)this + v3);
    if (v4) {
      break;
    }
    v2 += 64;
    if (--v3 == -1) {
      return 0xFFFFFFFFLL;
    }
  }
  return (__clz(v4) - v2) ^ 0x3F;
}

void llvm::APInt::tcExtract(llvm::APInt *this, unint64_t *a2, uint64_t a3, const unint64_t *a4, unsigned int a5)
{
  unsigned int v5 = a4 + 63;
  uint64_t v6 = (a4 + 63) >> 6;
  uint64_t v7 = a5 >> 6;
  if (a4 == 0 || a4 >= 0xFFFFFFC1)
  {
    int v8 = a5 & 0x3F;
    goto LABEL_12;
  }
  if (v5 < 0x200 || (uint64_t v9 = 8 * v7 + a3, (unint64_t)this - v9 < 0x20))
  {
    uint64_t v10 = 0;
LABEL_6:
    uint64_t v11 = v6 - v10;
    uint64_t v12 = 8 * v10;
    unint64_t v13 = (void *)((char *)this + 8 * v10);
    int v14 = (uint64_t *)(a3 + v12 + 8 * v7);
    do
    {
      uint64_t v15 = *v14++;
      *v13++ = v15;
      --v11;
    }
    while (v11);
    goto LABEL_8;
  }
  uint64_t v10 = v6 & 0x3FFFFFC;
  int v25 = (long long *)(v9 + 16);
  uint64_t v26 = (_OWORD *)((char *)this + 16);
  uint64_t v27 = v10;
  do
  {
    long long v28 = *v25;
    *(v26 - 1) = *(v25 - 1);
    _OWORD *v26 = v28;
    v25 += 2;
    v26 += 2;
    v27 -= 4;
  }
  while (v27);
  if (v10 != v6) {
    goto LABEL_6;
  }
LABEL_8:
  int v8 = a5 & 0x3F;
  if ((a5 & 0x3F) != 0)
  {
    uint64_t v16 = *(void *)this >> v8;
    *(void *)this = v16;
    if (v6 != 1)
    {
      uint64_t v17 = 0;
      do
      {
        int v18 = (uint64_t *)((char *)this + 8 * v17);
        uint64_t v19 = v17 + 1;
        uint64_t v20 = 8 * (v17 + 1);
        uint64_t *v18 = (*(void *)((char *)this + v20) << (64 - v8)) | v16;
        uint64_t v16 = *(void *)((char *)this + v20) >> v8;
        v18[1] = v16;
        uint64_t v17 = v19;
      }
      while (v6 - 1 != v19);
    }
  }
LABEL_12:
  unsigned int v21 = (v5 & 0xFFFFFFC0) - v8;
  if (v21 >= a4)
  {
    if (v21 <= a4 || (a4 & 0x3F) == 0) {
      goto LABEL_18;
    }
    uint64_t v23 = 8 * (v6 - 1);
    unint64_t v24 = *(void *)((unsigned char *)this + v23) & (0xFFFFFFFFFFFFFFFFLL >> -(a4 & 0x3F));
  }
  else
  {
    unint64_t v22 = (*(void *)(a3 + 8 * (v7 + v6)) & (0xFFFFFFFFFFFFFFFFLL >> (v21
                                                                                     - a4))) << v21;
    uint64_t v23 = 8 * (v6 - 1);
    unint64_t v24 = v22 | *(void *)((char *)this + v23);
  }
  *(void *)((char *)this + v23) = v24;
LABEL_18:
  if (v6 < a2) {
    bzero((char *)this + ((v5 >> 3) & 0x1FFFFFF8), 8 * (~v6 + a2) + 8);
  }
}

int8x16_t *llvm::APInt::tcNegate(int8x16_t *this, unint64_t *a2)
{
  if (!a2) {
    return this;
  }
  if (a2 < 4)
  {
    uint64_t v2 = 0;
LABEL_7:
    uint64_t v6 = a2 - v2;
    uint64_t v7 = &this->i64[v2];
    do
    {
      *uint64_t v7 = ~*v7;
      ++v7;
      --v6;
    }
    while (v6);
    goto LABEL_9;
  }
  uint64_t v2 = a2 & 0xFFFFFFFC;
  unsigned int v3 = this + 1;
  uint64_t v4 = v2;
  do
  {
    int8x16_t v5 = vmvnq_s8(*v3);
    v3[-1] = vmvnq_s8(v3[-1]);
    int8x16_t *v3 = v5;
    v3 += 2;
    v4 -= 4;
  }
  while (v4);
  if (v2 != a2) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v8 = this->i64[0] + 1;
  this->i64[0] = v8;
  if (a2 != 1 && !v8)
  {
    uint64_t v9 = this->i64[1];
    this->i64[1] = v9 + 1;
    if (v9 == -1)
    {
      uint64_t v10 = this + 1;
      uint64_t v11 = a2 - 2;
      do
      {
        if (!v11) {
          break;
        }
        --v11;
        BOOL v12 = __CFADD__(v10->i64[0]++, 1);
        uint64_t v10 = (int8x16_t *)((char *)v10 + 8);
      }
      while (v12);
    }
  }
  return this;
}

void llvm::APInt::tcFullMultiply(llvm::APInt *this, unint64_t *a2, unint64_t *a3, const unint64_t *a4, const unint64_t *a5)
{
  do
  {
    uint64_t v8 = a5;
    a5 = a4;
    uint64_t v9 = a3;
    a3 = a2;
    a2 = v9;
    a4 = v8;
  }
  while (a5 > v8);
  *(void *)this = 0;
  if (v8 >= 2) {
    bzero((char *)this + 8, 8 * (v8 - 2) + 8);
  }
  if (a5)
  {
    if (v8 < (int)v8 + 1) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = (v8 + 1);
    }
    if (v10)
    {
      uint64_t v11 = 0;
      BOOL v12 = this;
      uint64_t v13 = a5;
      do
      {
        unint64_t v14 = a3[v11];
        if (v14)
        {
          unint64_t v15 = 0;
          unsigned int v16 = a3[v11];
          uint64_t v17 = v9;
          int v18 = v12;
          uint64_t v19 = v10;
          do
          {
            unint64_t v21 = *v17++;
            unint64_t v20 = v21;
            if (v21)
            {
              unint64_t v22 = v20 * (unint64_t)v16;
              unint64_t v23 = HIDWORD(v20);
              unint64_t v24 = v20 * (unint64_t)HIDWORD(v14);
              unint64_t v25 = HIDWORD(v24) + HIDWORD(v20) * (unint64_t)HIDWORD(v14);
              unint64_t v26 = v20 * v14;
              BOOL v27 = __CFADD__(v26, v15);
              v15 += v26;
              uint64_t v28 = v27;
              if (v26 >= v22 + (v24 << 32)) {
                unint64_t v20 = (__PAIR128__(v28, v22)
              }
                     + __PAIR128__(v25 + ((v23 * (unint64_t)v16) >> 32), v24 << 32)) >> 64;
              else {
                unint64_t v20 = ((__PAIR128__(v28, v22)
              }
                      + __PAIR128__(v25 + ((v23 * (unint64_t)v16) >> 32), v24 << 32)) >> 64)
                    + 1;
            }
            if (__CFADD__(v15, *(void *)v18)) {
              ++v20;
            }
            *(void *)v18 += v15;
            int v18 = (llvm::APInt *)((char *)v18 + 8);
            unint64_t v15 = v20;
            --v19;
          }
          while (v19);
        }
        else
        {
          unint64_t v29 = 0;
          do
          {
            uint64_t v30 = *(void *)((char *)v12 + v14);
            unint64_t v20 = __CFADD__(v29, v30);
            *(void *)((char *)v12 + v14) = v30 + v29;
            v14 += 8;
            unint64_t v29 = v20;
          }
          while (8 * v10 != v14);
        }
        if (v8 != -1) {
          *((void *)this + v11 + v8) = v20;
        }
        ++v11;
        BOOL v12 = (llvm::APInt *)((char *)v12 + 8);
      }
      while (v11 != v13);
    }
    else if (v8 != -1)
    {
      bzero((char *)this + 8 * v8, 8 * a5);
    }
  }
}

void *llvm::StoreIntToMemory(llvm **this, const llvm::APInt *__dst, size_t __n)
{
  if (*((_DWORD *)this + 2) >= 0x41u) {
    uint64_t v4 = *this;
  }
  else {
    uint64_t v4 = (llvm *)this;
  }
  return memcpy(__dst, v4, __n);
}

void *llvm::LoadIntFromMemory(llvm *this, llvm::APInt *a2, size_t __n)
{
  if (*((_DWORD *)this + 2) >= 0x41u) {
    this = *(llvm **)this;
  }
  return memcpy(this, a2, __n);
}

void llvm::decodeBase64(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  int8x16_t v5 = (unsigned char *)*a3;
  a3[1] = *a3;
  if (!a2)
  {
    *a4 = 0;
    return;
  }
  if ((a2 & 3) != 0)
  {
    *(void *)&v6.__val_ = std::generic_category();
    v6.__cat_ = (const std::error_category *)"Base64 encoded strings must be a multiple of 4 bytes in length";
    llvm::createStringError((llvm *)0x5C, v6, a4);
    return;
  }
  unint64_t v9 = 0;
  unint64_t v10 = a2 - 2;
  unint64_t v91 = a2 - 1;
  unint64_t v89 = a2 - 2;
  do
  {
    while (1)
    {
      unint64_t v94 = v9;
      unsigned __int8 v93 = *(unsigned char *)(a1 + v9);
      if (v93 > 0x7Au)
      {
LABEL_142:
        uint64_t v86 = std::generic_category();
        llvm::createStringError<char,unsigned long long>(92, (uint64_t)v86, (uint64_t)"Invalid Base64 character %#2.2x at index %llu", (char *)&v93, (uint64_t *)&v94, a4);
        return;
      }
      int v11 = decodeBase64Byte(unsigned char)::DecodeTable[v93];
      if (v93 != 61 || v11 == 64)
      {
        if (v11 == 64) {
          goto LABEL_142;
        }
      }
      else if (v9 < v10 || v9 == v10 && *(unsigned char *)(a1 + v91) != 61)
      {
        goto LABEL_142;
      }
      unint64_t v12 = v9 | 1;
      unint64_t v94 = v9 | 1;
      unsigned __int8 v93 = *(unsigned char *)(a1 + (v9 | 1));
      if (v93 > 0x7Au) {
        goto LABEL_142;
      }
      unsigned int v13 = decodeBase64Byte(unsigned char)::DecodeTable[v93];
      if (v93 != 61 || v13 == 64)
      {
        if (v13 == 64) {
          goto LABEL_142;
        }
      }
      else if (v12 < v10 || v12 == v10 && *(unsigned char *)(a1 + v91) != 61)
      {
        goto LABEL_142;
      }
      unint64_t v14 = v9 | 2;
      unint64_t v94 = v9 | 2;
      unsigned __int8 v93 = *(unsigned char *)(a1 + (v9 | 2));
      if (v93 > 0x7Au) {
        goto LABEL_142;
      }
      unsigned int v15 = decodeBase64Byte(unsigned char)::DecodeTable[v93];
      if (v93 != 61 || v15 == 64)
      {
        if (v15 == 64) {
          goto LABEL_142;
        }
      }
      else if (v14 < v10 || v14 == v10 && *(unsigned char *)(a1 + v91) != 61)
      {
        goto LABEL_142;
      }
      unint64_t v16 = v9 | 3;
      unint64_t v94 = v9 | 3;
      unsigned __int8 v93 = *(unsigned char *)(a1 + (v9 | 3));
      if (v93 > 0x7Au) {
        goto LABEL_142;
      }
      int v17 = decodeBase64Byte(unsigned char)::DecodeTable[v93];
      if (v93 != 61 || v17 == 64)
      {
        if (v17 == 64) {
          goto LABEL_142;
        }
      }
      else if (v16 < v10 || v16 == v10 && *(unsigned char *)(a1 + v91) != 61)
      {
        goto LABEL_142;
      }
      int v18 = (4 * v11) | (v13 >> 4) & 3;
      unint64_t v19 = a3[2];
      char v92 = decodeBase64Byte(unsigned char)::DecodeTable[v93];
      if ((unint64_t)v5 >= v19) {
        break;
      }
      *int8x16_t v5 = v18;
      unint64_t v20 = v5 + 1;
      a3[1] = (unint64_t)(v5 + 1);
      int v21 = (16 * v13) | (v15 >> 2) & 0xF;
      unint64_t v22 = a3[2];
      if ((unint64_t)(v5 + 1) < v22) {
        goto LABEL_43;
      }
LABEL_66:
      unint64_t v36 = *a3;
      unint64_t v37 = (unint64_t)&v20[-*a3];
      unint64_t v38 = v37 + 1;
      if ((uint64_t)(v37 + 1) < 0) {
        goto LABEL_147;
      }
      char v39 = v15;
      unint64_t v40 = v22 - v36;
      if (2 * v40 > v38) {
        unint64_t v38 = 2 * v40;
      }
      if (v40 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v41 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v41 = v38;
      }
      if (v41)
      {
        unint64_t v42 = (unint64_t)operator new(v41);
        uint64_t v43 = (char *)(v42 + v37);
        char v44 = (char *)(v42 + v41);
        *(unsigned char *)(v42 + v37) = v21;
        unint64_t v23 = (unsigned char *)(v42 + v37 + 1);
        if (v20 == (char *)v36) {
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v42 = 0;
        uint64_t v43 = &v20[-*a3];
        char v44 = 0;
        *(unsigned char *)unint64_t v37 = v21;
        unint64_t v23 = (unsigned char *)(v37 + 1);
        if (v20 == (char *)v36)
        {
LABEL_84:
          *a3 = (unint64_t)v43;
          a3[1] = (unint64_t)v23;
          a3[2] = (unint64_t)v44;
LABEL_85:
          operator delete(v20);
          goto LABEL_86;
        }
      }
      if (v37 < 8
        || v42 + v37 + v36 - (void)v20 > v42 + v37 - 1
        || v36 > (unint64_t)(v20 - 1)
        || v36 - v42 < 0x20)
      {
        uint64_t v45 = v20;
        goto LABEL_79;
      }
      if (v37 >= 0x20)
      {
        unint64_t v60 = v37 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v70 = (_OWORD *)(v42 + v37 - 16);
        char v71 = (long long *)(v20 - 16);
        unint64_t v72 = v37 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v73 = *v71;
          *(v70 - 1) = *(v71 - 1);
          *unint64_t v70 = v73;
          v70 -= 2;
          v71 -= 2;
          v72 -= 32;
        }
        while (v72);
        if (v37 == v60) {
          goto LABEL_81;
        }
        if ((v37 & 0x18) == 0)
        {
          v43 -= v60;
          uint64_t v45 = &v20[-v60];
LABEL_79:
          int v46 = v43 - 1;
          do
          {
            char v47 = *--v45;
            *v46-- = v47;
          }
          while (v45 != (char *)v36);
          goto LABEL_81;
        }
      }
      else
      {
        unint64_t v60 = 0;
      }
      uint64_t v45 = &v20[-(v37 & 0xFFFFFFFFFFFFFFF8)];
      v43 -= v37 & 0xFFFFFFFFFFFFFFF8;
      int v74 = &v20[-v60 - v36 - 8 + v42];
      unint64_t v75 = (uint64_t *)&v20[-v60 - 8];
      unint64_t v76 = v60 - (v37 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v77 = *v75--;
        *(void *)int v74 = v77;
        v74 -= 8;
        v76 += 8;
      }
      while (v76);
      if (v37 != (v37 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_79;
      }
LABEL_81:
      unint64_t v20 = (char *)*a3;
      *a3 = v42;
      a3[1] = (unint64_t)v23;
      a3[2] = (unint64_t)v44;
      if (v20) {
        goto LABEL_85;
      }
LABEL_86:
      a3[1] = (unint64_t)v23;
      char v24 = v92 & 0x3F | (v39 << 6);
      unint64_t v25 = a3[2];
      if ((unint64_t)v23 >= v25) {
        goto LABEL_87;
      }
LABEL_8:
      *unint64_t v23 = v24;
      int8x16_t v5 = v23 + 1;
      unint64_t v10 = v89;
      a3[1] = (unint64_t)(v23 + 1);
      v9 += 4;
      if (v9 >= a2) {
        goto LABEL_143;
      }
    }
    unint64_t v26 = *a3;
    unint64_t v27 = (unint64_t)&v5[-*a3];
    unint64_t v28 = v27 + 1;
    if ((uint64_t)(v27 + 1) < 0) {
      goto LABEL_147;
    }
    unsigned int v88 = v15;
    unint64_t v29 = v19 - v26;
    if (2 * v29 > v28) {
      unint64_t v28 = 2 * v29;
    }
    if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v30 = v28;
    }
    if (!v30)
    {
      unint64_t v31 = 0;
      int v32 = &v5[-*a3];
      *(unsigned char *)unint64_t v27 = v18;
      unint64_t v20 = (char *)(v27 + 1);
      if (v5 == (unsigned char *)v26) {
        goto LABEL_63;
      }
LABEL_55:
      if (v27 < 8
        || &v31[v27 + v26 - (void)v5] > &v31[v27 - 1]
        || v26 > (unint64_t)(v5 - 1)
        || v26 - (unint64_t)v31 < 0x20)
      {
        int v33 = v5;
        goto LABEL_60;
      }
      if (v27 >= 0x20)
      {
        unint64_t v59 = v27 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v62 = &v31[v27 - 16];
        int32x4_t v63 = (long long *)(v5 - 16);
        unint64_t v64 = v27 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v65 = *v63;
          *((_OWORD *)v62 - 1) = *(v63 - 1);
          *(_OWORD *)uint64_t v62 = v65;
          v62 -= 32;
          v63 -= 2;
          v64 -= 32;
        }
        while (v64);
        if (v27 == v59) {
          goto LABEL_62;
        }
        if ((v27 & 0x18) == 0)
        {
          v32 -= v59;
          int v33 = &v5[-v59];
LABEL_60:
          char v34 = v32 - 1;
          do
          {
            char v35 = *--v33;
            *v34-- = v35;
          }
          while (v33 != (unsigned char *)v26);
LABEL_62:
          int8x16_t v5 = (unsigned char *)*a3;
          int v32 = v31;
          goto LABEL_63;
        }
      }
      else
      {
        unint64_t v59 = 0;
      }
      int v33 = &v5[-(v27 & 0xFFFFFFFFFFFFFFF8)];
      v32 -= v27 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v66 = &v5[-v59 - v26 - 8 + (void)v31];
      unint64_t v67 = (uint64_t *)&v5[-v59 - 8];
      unint64_t v68 = v59 - (v27 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v69 = *v67--;
        *v66-- = v69;
        v68 += 8;
      }
      while (v68);
      if (v27 == (v27 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_62;
      }
      goto LABEL_60;
    }
    unint64_t v31 = (char *)operator new(v30);
    int v32 = &v31[v27];
    v31[v27] = v18;
    unint64_t v20 = &v31[v27 + 1];
    if (v5 != (unsigned char *)v26) {
      goto LABEL_55;
    }
LABEL_63:
    *a3 = (unint64_t)v32;
    a3[1] = (unint64_t)v20;
    a3[2] = (unint64_t)&v31[v30];
    if (v5) {
      operator delete(v5);
    }
    LOBYTE(v15) = v88;
    LOBYTE(v17) = v92;
    a3[1] = (unint64_t)v20;
    int v21 = (16 * v13) | (v88 >> 2) & 0xF;
    unint64_t v22 = a3[2];
    if ((unint64_t)v20 >= v22) {
      goto LABEL_66;
    }
LABEL_43:
    char *v20 = v21;
    unint64_t v23 = v20 + 1;
    a3[1] = (unint64_t)(v20 + 1);
    char v24 = v17 & 0x3F | ((_BYTE)v15 << 6);
    unint64_t v25 = a3[2];
    if ((unint64_t)(v20 + 1) < v25) {
      goto LABEL_8;
    }
LABEL_87:
    unint64_t v48 = *a3;
    unint64_t v49 = (unint64_t)&v23[-*a3];
    unint64_t v50 = v49 + 1;
    if ((uint64_t)(v49 + 1) < 0) {
LABEL_147:
    }
      abort();
    unint64_t v51 = v25 - v48;
    if (2 * v51 > v50) {
      unint64_t v50 = 2 * v51;
    }
    if (v51 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v52 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v52 = v50;
    }
    if (!v52)
    {
      unint64_t v53 = 0;
      unint64_t v54 = &v23[-*a3];
      int v55 = 0;
      *(unsigned char *)unint64_t v49 = v24;
      int8x16_t v5 = (unsigned char *)(v49 + 1);
      if (v23 == (unsigned char *)v48) {
        goto LABEL_98;
      }
LABEL_95:
      if (v49 < 8)
      {
        unint64_t v56 = v23;
        unint64_t v10 = v89;
        goto LABEL_103;
      }
      unint64_t v10 = v89;
      if (v53 + v49 + v48 - (void)v23 > v53 + v49 - 1 || v48 > (unint64_t)(v23 - 1) || v48 - v53 < 0x20)
      {
        unint64_t v56 = v23;
        goto LABEL_103;
      }
      if (v49 >= 0x20)
      {
        unint64_t v61 = v49 & 0xFFFFFFFFFFFFFFE0;
        char v78 = (_OWORD *)(v53 + v49 - 16);
        uint64_t v79 = (long long *)(v23 - 16);
        unint64_t v80 = v49 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v81 = *v79;
          *(v78 - 1) = *(v79 - 1);
          *char v78 = v81;
          v78 -= 2;
          v79 -= 2;
          v80 -= 32;
        }
        while (v80);
        if (v49 == v61) {
          goto LABEL_105;
        }
        if ((v49 & 0x18) == 0)
        {
          v54 -= v61;
          unint64_t v56 = &v23[-v61];
LABEL_103:
          unint64_t v57 = v54 - 1;
          do
          {
            char v58 = *--v56;
            *v57-- = v58;
          }
          while (v56 != (unsigned char *)v48);
          goto LABEL_105;
        }
      }
      else
      {
        unint64_t v61 = 0;
      }
      unint64_t v56 = &v23[-(v49 & 0xFFFFFFFFFFFFFFF8)];
      v54 -= v49 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v82 = &v23[-v61 - v48 - 8 + v53];
      uint64_t v83 = (uint64_t *)&v23[-v61 - 8];
      unint64_t v84 = v61 - (v49 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v85 = *v83--;
        *v82-- = v85;
        v84 += 8;
      }
      while (v84);
      if (v49 != (v49 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_103;
      }
LABEL_105:
      unint64_t v23 = (unsigned char *)*a3;
      *a3 = v53;
      a3[1] = (unint64_t)v5;
      a3[2] = (unint64_t)v55;
      if (!v23) {
        goto LABEL_107;
      }
      goto LABEL_106;
    }
    unint64_t v53 = (unint64_t)operator new(v52);
    unint64_t v54 = (char *)(v53 + v49);
    int v55 = (char *)(v53 + v52);
    *(unsigned char *)(v53 + v49) = v24;
    int8x16_t v5 = (unsigned char *)(v53 + v49 + 1);
    if (v23 != (unsigned char *)v48) {
      goto LABEL_95;
    }
LABEL_98:
    *a3 = (unint64_t)v54;
    a3[1] = (unint64_t)v5;
    a3[2] = (unint64_t)v55;
    unint64_t v10 = v89;
LABEL_106:
    operator delete(v23);
LABEL_107:
    a3[1] = (unint64_t)v5;
    v9 += 4;
  }
  while (v9 < a2);
LABEL_143:
  if (*(unsigned char *)(a1 + v91) == 61)
  {
    a3[1] = (unint64_t)(v5 - 1);
    if (*(unsigned char *)(a1 + v10) == 61) {
      a3[1] = (unint64_t)(v5 - 2);
    }
  }
  *a4 = 0;
}

void llvm::createStringError<char,unsigned long long>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v24 = 0;
  int v15 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  int v21 = 1;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  unint64_t v14 = &unk_1EC9A38B8;
  unint64_t v22 = __p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v14, 0, 0, 0);
  v25[0] = &unk_1EC9A18D0;
  v25[1] = a3;
  char v26 = *a4;
  uint64_t v27 = *a5;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v14, (uint64_t)v25);
  unint64_t v12 = v22;
  unsigned int v13 = operator new(0x38uLL);
  __int16 v28 = 260;
  v25[0] = v12;
  *a6 = llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)v25, a1, a2);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v14);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
}

uint64_t llvm::format_object<char,unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(char *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  v16[0] = 0;
  uint64_t AsUnsignedInteger = llvm::getAsUnsignedInteger(a5, a6, 0, v16);
  if ((AsUnsignedInteger & 1) != 0 || HIDWORD(v16[0]))
  {
    __int16 v15 = 1283;
    v14[0] = "'";
    void v14[2] = a5;
    _OWORD v14[3] = a6;
    v16[0] = (unint64_t)v14;
    void v16[2] = (unint64_t)"' value invalid for uint argument!";
    __int16 v17 = 770;
    unsigned int v13 = (llvm::raw_ostream *)llvm::errs((llvm *)AsUnsignedInteger);
    llvm::cl::Option::error((void *)a1, (llvm::Twine *)v16, 0, 0, v13);
    return 1;
  }
  else
  {
    LODWORD(v14[0]) = v16[0];
    *(_DWORD *)(a1 + 128) = v16[0];
    *(_WORD *)(a1 + 12) = a2;
    uint64_t v11 = *(void *)(a1 + 184);
    if (v11)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v14);
      return 0;
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      return llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::getValueExpectedFlagDefault();
    }
  }
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::getOptionWidth(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 == 1) {
    uint64_t v3 = 7;
  }
  else {
    uint64_t v3 = v2 + 7;
  }
  (*(void (**)(void))(*(void *)(a1 + 152) + 16))();
  if (v4)
  {
    uint64_t v5 = 6;
    if ((*(_WORD *)(a1 + 10) & 0x400) == 0) {
      uint64_t v5 = 3;
    }
    uint64_t v6 = *(void *)(a1 + 56);
    if (!v6) {
      uint64_t v6 = v4;
    }
    v3 += v5 + v6;
  }
  return v3;
}

uint64_t llvm::cl::basic_parser_impl::getOptionWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3 == 1) {
    uint64_t v4 = 7;
  }
  else {
    uint64_t v4 = v3 + 7;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (v5)
  {
    uint64_t v6 = 6;
    if ((*(_WORD *)(a2 + 10) & 0x400) == 0) {
      uint64_t v6 = 3;
    }
    uint64_t v7 = *(void *)(a2 + 56);
    if (!v7) {
      uint64_t v7 = v5;
    }
    v4 += v6 + v7;
  }
  return v4;
}

llvm::raw_ostream *llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *llvm::cl::basic_parser_impl::printOptionInfo(llvm::cl::basic_parser_impl *this, const llvm::cl::Option *a2, unsigned int a3)
{
  uint64_t v6 = (llvm::raw_ostream *)llvm::outs(this);
  long long v45 = *((_OWORD *)a2 + 1);
  uint64_t v46 = 2;
  uint64_t v7 = (llvm *)(*(uint64_t (**)(llvm::cl::basic_parser_impl *))(*(void *)this + 16))(this);
  if (!v8) {
    goto LABEL_48;
  }
  unint64_t v9 = v7;
  size_t v10 = v8;
  unsigned int v11 = *((unsigned __int16 *)a2 + 5);
  if ((v11 & 0x400) != 0)
  {
    uint64_t v16 = (llvm::raw_ostream *)llvm::outs(v7);
    __int16 v17 = v16;
    uint64_t v18 = (_WORD *)*((void *)v16 + 4);
    if (*((void *)v16 + 3) - (void)v18 > 1uLL)
    {
      _WORD *v18 = 15392;
      char v19 = (void *)(*((void *)v16 + 4) + 2);
      *((void *)v17 + 4) = v19;
    }
    else
    {
      __int16 v17 = llvm::raw_ostream::write(v16, " <", 2uLL);
      char v19 = (void *)*((void *)v17 + 4);
    }
    uint64_t v20 = *((void *)a2 + 7);
    if (v20) {
      int v21 = (llvm *)*((void *)a2 + 6);
    }
    else {
      int v21 = v9;
    }
    if (v20) {
      size_t v10 = *((void *)a2 + 7);
    }
    if (v10 <= *((void *)v17 + 3) - (void)v19)
    {
      memcpy(v19, v21, v10);
      uint64_t v23 = *((void *)v17 + 3);
      unint64_t v22 = (_DWORD *)(*((void *)v17 + 4) + v10);
      *((void *)v17 + 4) = v22;
      if ((unint64_t)(v23 - (void)v22) > 3) {
        goto LABEL_17;
      }
    }
    else
    {
      __int16 v17 = llvm::raw_ostream::write(v17, (const char *)v21, v10);
      unint64_t v22 = (_DWORD *)*((void *)v17 + 4);
      if (*((void *)v17 + 3) - (void)v22 > 3uLL)
      {
LABEL_17:
        _DWORD *v22 = 774778430;
        *((void *)v17 + 4) += 4;
        goto LABEL_48;
      }
    }
    llvm::raw_ostream::write(v17, ">...", 4uLL);
    goto LABEL_48;
  }
  int v12 = (v11 >> 3) & 3;
  if (!v12)
  {
    uint64_t v24 = (llvm *)(*(uint64_t (**)(const llvm::cl::Option *))(*(void *)a2 + 8))(a2);
    int v25 = (int)v24;
    unsigned int v13 = (llvm::raw_ostream *)llvm::outs(v24);
    if (v25 == 1) {
      goto LABEL_5;
    }
LABEL_21:
    if (*((void *)a2 + 3) == 1) {
      char v26 = " <";
    }
    else {
      char v26 = "=<";
    }
    uint64_t v27 = (_WORD *)*((void *)v13 + 4);
    if (*((void *)v13 + 3) - (void)v27 > 1uLL)
    {
      _WORD *v27 = *(_WORD *)v26;
      __int16 v28 = (void *)(*((void *)v13 + 4) + 2);
      *((void *)v13 + 4) = v28;
    }
    else
    {
      unsigned int v13 = llvm::raw_ostream::write(v13, v26, 2uLL);
      __int16 v28 = (void *)*((void *)v13 + 4);
    }
    uint64_t v32 = *((void *)a2 + 7);
    if (v32) {
      int v33 = (llvm *)*((void *)a2 + 6);
    }
    else {
      int v33 = v9;
    }
    if (v32) {
      size_t v10 = *((void *)a2 + 7);
    }
    if (v10 <= *((void *)v13 + 3) - (void)v28)
    {
      memcpy(v28, v33, v10);
      unint64_t v36 = *((void *)v13 + 3);
      char v34 = (unsigned char *)(*((void *)v13 + 4) + v10);
      *((void *)v13 + 4) = v34;
      if ((unint64_t)v34 >= v36) {
        goto LABEL_43;
      }
    }
    else
    {
      unsigned int v13 = llvm::raw_ostream::write(v13, (const char *)v33, v10);
      char v34 = (unsigned char *)*((void *)v13 + 4);
      if ((unint64_t)v34 >= *((void *)v13 + 3))
      {
LABEL_43:
        llvm::raw_ostream::write(v13, 62);
        goto LABEL_48;
      }
    }
    *((void *)v13 + 4) = v34 + 1;
    *char v34 = 62;
    goto LABEL_48;
  }
  unsigned int v13 = (llvm::raw_ostream *)llvm::outs(v7);
  if (v12 != 1) {
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v14 = *((void *)v13 + 4);
  if ((unint64_t)(*((void *)v13 + 3) - v14) > 2)
  {
    *(unsigned char *)(v14 + 2) = 60;
    *(_WORD *)uint64_t v14 = 15707;
    __int16 v15 = (void *)(*((void *)v13 + 4) + 3);
    *((void *)v13 + 4) = v15;
  }
  else
  {
    unsigned int v13 = llvm::raw_ostream::write(v13, "[=<", 3uLL);
    __int16 v15 = (void *)*((void *)v13 + 4);
  }
  uint64_t v29 = *((void *)a2 + 7);
  if (v29) {
    size_t v30 = (llvm *)*((void *)a2 + 6);
  }
  else {
    size_t v30 = v9;
  }
  if (v29) {
    size_t v10 = *((void *)a2 + 7);
  }
  if (v10 <= *((void *)v13 + 3) - (void)v15)
  {
    memcpy(v15, v30, v10);
    uint64_t v35 = *((void *)v13 + 3);
    unint64_t v31 = (_WORD *)(*((void *)v13 + 4) + v10);
    *((void *)v13 + 4) = v31;
    if ((unint64_t)(v35 - (void)v31) > 1) {
      goto LABEL_34;
    }
  }
  else
  {
    unsigned int v13 = llvm::raw_ostream::write(v13, (const char *)v30, v10);
    unint64_t v31 = (_WORD *)*((void *)v13 + 4);
    if (*((void *)v13 + 3) - (void)v31 > 1uLL)
    {
LABEL_34:
      *unint64_t v31 = 23870;
      *((void *)v13 + 4) += 2;
      goto LABEL_48;
    }
  }
  llvm::raw_ostream::write(v13, ">]", 2uLL);
LABEL_48:
  uint64_t v38 = *((void *)a2 + 4);
  uint64_t v37 = *((void *)a2 + 5);
  uint64_t v39 = *((void *)a2 + 3);
  if (v39 == 1) {
    int v40 = 7;
  }
  else {
    int v40 = v39 + 7;
  }
  (*(void (**)(llvm::cl::basic_parser_impl *))(*(void *)this + 16))(this);
  if (v41)
  {
    int v42 = 6;
    if ((*((_WORD *)a2 + 5) & 0x400) == 0) {
      int v42 = 3;
    }
    uint64_t v43 = *((void *)a2 + 7);
    if (!v43) {
      LODWORD(v43) = v41;
    }
    v40 += v42 + v43;
  }

  return llvm::cl::Option::printHelpStr(v38, v37, a3, v40);
}

void llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::printOptionValue(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) != 0 || !*(unsigned char *)(a1 + 148) || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a1 + 128))
  {
    unsigned int v3 = *(_DWORD *)(a1 + 128);
    int v5 = *(_DWORD *)(a1 + 144);
    char v6 = *(unsigned char *)(a1 + 148);
    uint64_t v4 = &unk_1EC9A3B00;
    llvm::cl::parser<unsigned int>::printOptionDiff((llvm *)a1, a1, v3, (uint64_t)&v4, a2);
  }
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void llvm::cl::Option::addArgument(llvm::cl::Option *this)
{
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  *((_WORD *)this + 5) |= 0x4000u;
  }
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, void *__src, size_t __len)
{
  memset(&__p, 0, sizeof(__p));
  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_13;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_18;
  }
  if (__len >= 0x17)
  {
    size_t v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v11 = __len | 7;
    }
    size_t v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_11:
    memmove(p_dst, __src, __len);
    p_dst->__r_.__value_.__s.__data_[__len] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len) {
    goto LABEL_11;
  }
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_13;
  }
LABEL_12:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_13:
  std::string __p = __dst;
  std::string::operator=((std::string *)(a1 + 128), &__p);
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v13 = *(void *)(a1 + 224);
  if (!v13)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_18:
    abort();
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 48))(v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 == 1) {
    uint64_t v3 = 7;
  }
  else {
    uint64_t v3 = v2 + 7;
  }
  (*(void (**)(void))(*(void *)(a1 + 192) + 16))();
  if (v4)
  {
    uint64_t v5 = 6;
    if ((*(_WORD *)(a1 + 10) & 0x400) == 0) {
      uint64_t v5 = 3;
    }
    uint64_t v6 = *(void *)(a1 + 56);
    if (!v6) {
      uint64_t v6 = v4;
    }
    v3 += v5 + v6;
  }
  return v3;
}

llvm::raw_ostream *llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 192), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::printOptionValue(llvm::raw_ostream *result, int a2, char a3)
{
  uint64_t v4 = (uint64_t)result;
  if ((a3 & 1) == 0 && *((unsigned char *)result + 184))
  {
    uint64_t v5 = *((unsigned __int8 *)result + 183);
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = *((unsigned __int8 *)result + 183);
    }
    else {
      uint64_t v6 = *((void *)result + 21);
    }
    uint64_t v7 = *((unsigned __int8 *)result + 151);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *((void *)result + 17);
    }
    if (v6 == v7)
    {
      unint64_t v9 = (const void **)((char *)result + 160);
      if (v8 >= 0) {
        size_t v10 = (unsigned __int8 *)result + 128;
      }
      else {
        size_t v10 = (unsigned __int8 *)*((void *)result + 16);
      }
      if ((v5 & 0x80) != 0)
      {
        uint64_t result = (llvm::raw_ostream *)memcmp(*v9, v10, *((void *)result + 21));
        if (!result) {
          return result;
        }
      }
      else
      {
        if (!*((unsigned char *)result + 183)) {
          return result;
        }
        while (*(unsigned __int8 *)v9 == *v10)
        {
          unint64_t v9 = (const void **)((char *)v9 + 1);
          ++v10;
          if (!--v5) {
            return result;
          }
        }
      }
    }
  }
  int v11 = *(char *)(v4 + 151);
  if (v11 >= 0) {
    size_t v12 = (const void *)(v4 + 128);
  }
  else {
    size_t v12 = *(const void **)(v4 + 128);
  }
  if (v11 >= 0) {
    size_t v13 = *(unsigned __int8 *)(v4 + 151);
  }
  else {
    size_t v13 = *(void *)(v4 + 136);
  }

  return llvm::cl::parser<std::string>::printOptionDiff(result, v4, v12, v13, v4 + 152, a2);
}

void llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::setDefault(uint64_t a1)
{
  uint64_t v2 = (std::string *)(a1 + 128);
  if (*(unsigned char *)(a1 + 184))
  {
    std::string::operator=(v2, (const std::string *)(a1 + 160));
  }
  else
  {
    memset(&__str, 0, sizeof(__str));
    std::string::operator=(v2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, _DWORD *a5, size_t a6)
{
  char v18 = 0;
  uint64_t v8 = llvm::cl::parser<BOOL>::parse(a1, (void *)a1, a3, a4, a5, a6, &v18);
  if (v8) {
    return v8;
  }
  *(unsigned char *)(a1 + 128) = v18;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, char *))(*(void *)v9 + 48))(v9, &v18);
    return v8;
  }
  int v11 = std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::parser<BOOL>::parse(v11, v12, v13, v14, v15, v16, v17);
}

uint64_t llvm::cl::parser<BOOL>::parse(int a1, void *a2, int a3, int a4, _DWORD *__s1, size_t __n, unsigned char *a7)
{
  switch(__n)
  {
    case 0uLL:
      goto LABEL_8;
    case 1uLL:
      if (!memcmp(__s1, "1", __n)) {
        goto LABEL_8;
      }
      if (!memcmp(__s1, "0", __n)) {
        goto LABEL_19;
      }
      goto LABEL_18;
    case 4uLL:
      if (*__s1 != 1702195828 && *__s1 != 1163219540 && *__s1 != 1702195796) {
        goto LABEL_18;
      }
LABEL_8:
      uint64_t result = 0;
      *a7 = 1;
      break;
    case 5uLL:
      if (memcmp(__s1, "false", __n))
      {
        if ((*__s1 != 1397506374 || *((unsigned char *)__s1 + 4) != 69) && (*__s1 != 1936482630 || *((unsigned char *)__s1 + 4) != 101)) {
          goto LABEL_18;
        }
      }
LABEL_19:
      uint64_t result = 0;
      *a7 = 0;
      break;
    default:
LABEL_18:
      __int16 v19 = 1283;
      v18[0] = (uint64_t)"'";
      v18[2] = (uint64_t)__s1;
      v18[3] = __n;
      size_t v16 = "' is invalid value for BOOLean argument! Try 0 or 1";
      __int16 v17 = 259;
      int v14 = llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
      __int16 v15 = (llvm::raw_ostream *)llvm::errs((llvm *)v14);
      llvm::cl::Option::error(a2, (llvm::Twine *)v20, 0, 0, v15);
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 == 1) {
    uint64_t v3 = 7;
  }
  else {
    uint64_t v3 = v2 + 7;
  }
  (*(void (**)(void))(*(void *)(a1 + 152) + 16))();
  if (v4)
  {
    uint64_t v5 = 6;
    if ((*(_WORD *)(a1 + 10) & 0x400) == 0) {
      uint64_t v5 = 3;
    }
    uint64_t v6 = *(void *)(a1 + 56);
    if (!v6) {
      uint64_t v6 = v4;
    }
    v3 += v5 + v6;
  }
  return v3;
}

llvm::raw_ostream *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::printOptionValue(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) != 0 || !*(unsigned char *)(a1 + 145) || *(unsigned __int8 *)(a1 + 144) != *(unsigned __int8 *)(a1 + 128))
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 128);
    __int16 v5 = *(_WORD *)(a1 + 144);
    uint64_t v4 = &unk_1EC9A3AE0;
    llvm::cl::parser<BOOL>::printOptionDiff((llvm *)a1, a1, v3, (uint64_t)&v4, a2);
  }
}

unsigned char *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::setDefault(unsigned char *result)
{
  char v1 = result[145];
  if (v1) {
    char v1 = result[144];
  }
  result[128] = v1;
  return result;
}

void llvm::cl::AddLiteralOption(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  if (atomic_load_explicit(qword_1EB215BF8, memory_order_acquire))
  {
    uint64_t v6 = qword_1EB215BF8[0];
    LODWORD(v7) = *(_DWORD *)(a1 + 108);
    if (v7 == *(_DWORD *)(a1 + 112))
    {
LABEL_3:
      if (!atomic_load_explicit(llvm::cl::TopLevelSubCommand, memory_order_acquire)) {
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
      }
      uint64_t v8 = llvm::cl::TopLevelSubCommand[0];
      return;
    }
  }
  else
  {
    uint64_t v6 = qword_1EB215BF8[0];
    LODWORD(v7) = *(_DWORD *)(a1 + 108);
    if (v7 == *(_DWORD *)(a1 + 112)) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(void *)(a1 + 96);
  if (v9 == *(void *)(a1 + 88)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = *(unsigned int *)(a1 + 104);
  }
  if (v7)
  {
    uint64_t v10 = 8 * v7;
    for (uint64_t i = *(uint64_t **)(a1 + 96); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v10 -= 8;
      if (!v10) {
        return;
      }
    }
  }
  else
  {
    uint64_t i = *(uint64_t **)(a1 + 96);
  }
  size_t v12 = (uint64_t *)(v9 + 8 * v7);
  if (i != v12)
  {
    uint64_t v13 = *i;
LABEL_20:
    while (++i != v12)
    {
      uint64_t v13 = *i;
      if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
      {
        if (i != v12) {
          goto LABEL_20;
        }
        return;
      }
    }
  }
}

void anonymous namespace'::CommandLineParser::addOption(_anonymous_namespace_::CommandLineParser *this, llvm::cl::Option *a2, char a3)
{
  if ((a3 & 1) == 0 && (*((_WORD *)a2 + 5) & 0x2000) != 0)
  {
    uint64_t v11 = *((unsigned int *)this + 18);
    if (v11 >= *((_DWORD *)this + 19))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 64, (char *)this + 80, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)this + 18);
    }
    *(void *)(*((void *)this + 8) + 8 * v11) = a2;
    ++*((_DWORD *)this + 18);
  }
  else if (*((_DWORD *)a2 + 27) == *((_DWORD *)a2 + 28))
  {
    if (!atomic_load_explicit(llvm::cl::TopLevelSubCommand, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    }
    uint64_t v5 = llvm::cl::TopLevelSubCommand[0];
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 12);
    uint64_t v7 = 104;
    if (v6 == *((void *)a2 + 11)) {
      uint64_t v7 = 108;
    }
    uint64_t v8 = *(unsigned int *)((char *)a2 + v7);
    if (v8)
    {
      uint64_t v9 = 8 * v8;
      for (uint64_t i = (uint64_t *)*((void *)a2 + 12); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v9 -= 8;
        if (!v9) {
          return;
        }
      }
    }
    else
    {
      uint64_t i = (uint64_t *)*((void *)a2 + 12);
    }
    size_t v12 = (uint64_t *)(v6 + 8 * v8);
    while (i != v12)
    {
      uint64_t v13 = *i++;
      if (i == v12) {
        break;
      }
      while ((unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (++i == v12) {
          return;
        }
      }
    }
  }
}

void llvm::cl::Option::setArgStr(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  if ((*(_WORD *)(a1 + 10) & 0x4000) == 0) {
    goto LABEL_7;
  }
  if (atomic_load_explicit(qword_1EB215BF8, memory_order_acquire))
  {
    atomic_ullong v6 = qword_1EB215BF8[0];
    if (*(_DWORD *)(a1 + 108) == *(_DWORD *)(a1 + 112))
    {
LABEL_4:
      if (!atomic_load_explicit(llvm::cl::TopLevelSubCommand, memory_order_acquire)) {
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
      }
      goto LABEL_7;
    }
  }
  else
  {
    atomic_ullong v6 = qword_1EB215BF8[0];
    if (*(_DWORD *)(a1 + 108) == *(_DWORD *)(a1 + 112)) {
      goto LABEL_4;
    }
  }
  if (atomic_load_explicit(llvm::cl::AllSubCommands, memory_order_acquire))
  {
    uint64_t v7 = (const void *)llvm::cl::AllSubCommands[0];
    uint64_t v8 = *(uint64_t **)(a1 + 96);
    if (v8 != *(uint64_t **)(a1 + 88)) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v13 = *(unsigned int *)(a1 + 108);
    size_t v12 = (const void **)&v8[v13];
    if (v13)
    {
      unint64_t v14 = 0;
      uint64_t v15 = 8 * v13;
      while ((const void *)v8[v14 / 8] != v7)
      {
        v14 += 8;
        if (v15 == v14) {
          goto LABEL_25;
        }
      }
      size_t v12 = (const void **)&v8[v14 / 8];
    }
LABEL_25:
    uint64_t v10 = v8;
    goto LABEL_26;
  }
  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  uint64_t v7 = (const void *)llvm::cl::AllSubCommands[0];
  uint64_t v8 = *(uint64_t **)(a1 + 96);
  if (v8 == *(uint64_t **)(a1 + 88)) {
    goto LABEL_18;
  }
LABEL_13:
  BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)(a1 + 88), v7);
  uint64_t v8 = *(uint64_t **)(a1 + 88);
  uint64_t v10 = *(uint64_t **)(a1 + 96);
  if (*BucketFor == v7)
  {
    size_t v12 = BucketFor;
  }
  else
  {
    uint64_t v11 = 104;
    if (v10 == v8) {
      uint64_t v11 = 108;
    }
    size_t v12 = (const void **)&v10[*(unsigned int *)(a1 + v11)];
  }
LABEL_26:
  BOOL v16 = v10 == v8;
  uint64_t v17 = 104;
  if (v16) {
    uint64_t v17 = 108;
  }
  uint64_t v18 = *(unsigned int *)(a1 + v17);
  if (v12 == (const void **)&v10[v18])
  {
    if (v18)
    {
      while ((unint64_t)*v10 >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (++v10 == (uint64_t *)v12) {
          goto LABEL_7;
        }
      }
    }
    if (v10 != (uint64_t *)v12)
    {
      uint64_t v24 = *v10;
LABEL_42:
      while (++v10 != (uint64_t *)v12)
      {
        uint64_t v24 = *v10;
        if ((unint64_t)*v10 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v10 != (uint64_t *)v12) {
            goto LABEL_42;
          }
          break;
        }
      }
    }
  }
  else
  {
    uint64_t v19 = *(void *)(v6 + 280);
    uint64_t v20 = 288;
    if (v19 == *(void *)(v6 + 272)) {
      uint64_t v20 = 292;
    }
    uint64_t v21 = *(unsigned int *)(v6 + v20);
    if (v21)
    {
      uint64_t v22 = 8 * v21;
      uint64_t v23 = *(uint64_t **)(v6 + 280);
      while ((unint64_t)*v23 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v23;
        v22 -= 8;
        if (!v22) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      uint64_t v23 = *(uint64_t **)(v6 + 280);
    }
    int v25 = (uint64_t *)(v19 + 8 * v21);
    if (v23 != v25)
    {
      uint64_t v26 = *v23;
LABEL_50:
      while (++v23 != v25)
      {
        uint64_t v26 = *v23;
        if ((unint64_t)*v23 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v23 != v25) {
            goto LABEL_50;
          }
          break;
        }
      }
    }
  }
LABEL_7:
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  if (a3 == (const unsigned __int8 *)1) {
    *(_WORD *)(a1 + 10) |= 0x1000u;
  }
}

void llvm::cl::Option::addCategory(llvm::cl::Option *this, llvm::cl::OptionCategory *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_45, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_45))
  {
    qword_1EB215C28 = (uint64_t)"General options";
    unk_1EB215C30 = 15;
    qword_1EB215C38 = (uint64_t)"";
    unk_1EB215C40 = 0;
    if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
    atomic_ullong v9 = qword_1EB215BF8[0];
    }
    uint64_t v10 = *(void *)(qword_1EB215BF8[0] + 120);
    if (v10 != *(void *)(qword_1EB215BF8[0] + 112)) {
      goto LABEL_20;
    }
    uint64_t v14 = *(unsigned int *)(qword_1EB215BF8[0] + 132);
    if (v14)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = *(void **)(qword_1EB215BF8[0] + 120);
      while ((uint64_t *)*v17 != &qword_1EB215C28)
      {
        if (*v17 == -2) {
          uint64_t v15 = v17;
        }
        ++v17;
        v16 -= 8;
        if (!v16)
        {
          if (!v15) {
            goto LABEL_44;
          }
          void *v15 = &qword_1EB215C28;
          --*(_DWORD *)(v9 + 136);
          goto LABEL_21;
        }
      }
      goto LABEL_21;
    }
LABEL_44:
    if (v14 < *(_DWORD *)(qword_1EB215BF8[0] + 128))
    {
      *(_DWORD *)(qword_1EB215BF8[0] + 132) = v14 + 1;
      *(void *)(v10 + 8 * v14) = &qword_1EB215C28;
    }
    else
    {
LABEL_20:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(qword_1EB215BF8[0] + 112), &qword_1EB215C28);
    }
LABEL_21:
    __cxa_guard_release(&_MergedGlobals_45);
  }
  if (a2 == (llvm::cl::OptionCategory *)&qword_1EB215C28) {
    goto LABEL_5;
  }
  uint64_t v4 = (uint64_t *)**((void **)this + 8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_45, memory_order_acquire) & 1) == 0)
  {
    uint64_t v22 = v4;
    int v11 = __cxa_guard_acquire(&_MergedGlobals_45);
    uint64_t v4 = v22;
    if (v11)
    {
      qword_1EB215C28 = (uint64_t)"General options";
      unk_1EB215C30 = 15;
      qword_1EB215C38 = (uint64_t)"";
      unk_1EB215C40 = 0;
      if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
      atomic_ullong v12 = qword_1EB215BF8[0];
      }
      uint64_t v13 = *(void *)(qword_1EB215BF8[0] + 120);
      if (v13 != *(void *)(qword_1EB215BF8[0] + 112)) {
        goto LABEL_26;
      }
      uint64_t v18 = *(unsigned int *)(qword_1EB215BF8[0] + 132);
      if (v18)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 8 * v18;
        uint64_t v21 = *(void **)(qword_1EB215BF8[0] + 120);
        while ((uint64_t *)*v21 != &qword_1EB215C28)
        {
          if (*v21 == -2) {
            uint64_t v19 = v21;
          }
          ++v21;
          v20 -= 8;
          if (!v20)
          {
            if (!v19) {
              goto LABEL_46;
            }
            void *v19 = &qword_1EB215C28;
            --*(_DWORD *)(v12 + 136);
            goto LABEL_27;
          }
        }
        goto LABEL_27;
      }
LABEL_46:
      if (v18 < *(_DWORD *)(qword_1EB215BF8[0] + 128))
      {
        *(_DWORD *)(qword_1EB215BF8[0] + 132) = v18 + 1;
        *(void *)(v13 + 8 * v18) = &qword_1EB215C28;
      }
      else
      {
LABEL_26:
        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(qword_1EB215BF8[0] + 112), &qword_1EB215C28);
      }
LABEL_27:
      __cxa_guard_release(&_MergedGlobals_45);
      uint64_t v4 = v22;
    }
  }
  if (v4 == &qword_1EB215C28)
  {
    **((void **)this + 8) = a2;
    return;
  }
LABEL_5:
  uint64_t v5 = (llvm::cl::OptionCategory **)*((void *)this + 8);
  uint64_t v6 = *((unsigned int *)this + 18);
  uint64_t v7 = v5;
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    uint64_t v7 = (llvm::cl::OptionCategory **)*((void *)this + 8);
    while (*v7 != a2)
    {
      ++v7;
      v8 -= 8;
      if (!v8)
      {
        uint64_t v7 = &v5[v6];
        break;
      }
    }
  }
  if (v6 == v7 - v5)
  {
    if (v6 >= *((_DWORD *)this + 19))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 64, (char *)this + 80, v6 + 1, 8);
      uint64_t v6 = *((unsigned int *)this + 18);
      uint64_t v5 = (llvm::cl::OptionCategory **)*((void *)this + 8);
    }
    v5[v6] = a2;
    ++*((_DWORD *)this + 18);
  }
}

uint64_t *llvm::cl::getGeneralCategory(llvm::cl *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_45, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&_MergedGlobals_45))
  {
    return &qword_1EB215C28;
  }
  llvm::cl::OptionCategory::OptionCategory(&qword_1EB215C28, (uint64_t)"General options", 15, (uint64_t)"", 0);
  __cxa_guard_release(&_MergedGlobals_45);
  return &qword_1EB215C28;
}

const void **llvm::cl::OptionCategory::registerCategory(llvm::cl::OptionCategory *this)
{
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  atomic_ullong v2 = qword_1EB215BF8[0];
  }
  uint64_t result = (const void **)(qword_1EB215BF8[0] + 112);
  uint64_t v4 = *(void *)(qword_1EB215BF8[0] + 120);
  if (v4 != *(void *)(qword_1EB215BF8[0] + 112))
  {
LABEL_4:
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, this);
  }
  uint64_t v5 = *(unsigned int *)(qword_1EB215BF8[0] + 132);
  if (!v5)
  {
LABEL_16:
    if (v5 < *(_DWORD *)(qword_1EB215BF8[0] + 128))
    {
      *(_DWORD *)(qword_1EB215BF8[0] + 132) = v5 + 1;
      *(void *)(v4 + 8 * v5) = this;
      return result;
    }
    goto LABEL_4;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 8 * v5;
  uint64_t v8 = *(void **)(qword_1EB215BF8[0] + 120);
  while ((llvm::cl::OptionCategory *)*v8 != this)
  {
    if (*v8 == -2) {
      uint64_t v6 = v8;
    }
    ++v8;
    v7 -= 8;
    if (!v7)
    {
      if (!v6) {
        goto LABEL_16;
      }
      *uint64_t v6 = this;
      --*(_DWORD *)(v2 + 136);
      return result;
    }
  }
  return result;
}

void anonymous namespace'::CommandLineParser::registerSubCommand(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 280);
  if (v4 != *(void *)(a1 + 272)) {
    goto LABEL_2;
  }
  uint64_t v13 = *(unsigned int *)(a1 + 292);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v13;
    uint64_t v16 = *(void **)(a1 + 280);
    while ((void *)*v16 != a2)
    {
      if (*v16 == -2) {
        uint64_t v14 = v16;
      }
      ++v16;
      v15 -= 8;
      if (!v15)
      {
        if (!v14) {
          goto LABEL_46;
        }
        void *v14 = a2;
        --*(_DWORD *)(a1 + 296);
        break;
      }
    }
  }
  else
  {
LABEL_46:
    if (v13 >= *(_DWORD *)(a1 + 288))
    {
LABEL_2:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 272), a2);
      goto LABEL_3;
    }
    *(_DWORD *)(a1 + 292) = v13 + 1;
    *(void *)(v4 + 8 * v13) = a2;
  }
LABEL_3:
  if (!atomic_load_explicit(llvm::cl::AllSubCommands, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  if ((void *)llvm::cl::AllSubCommands[0] != a2)
  {
    if (atomic_load_explicit(llvm::cl::AllSubCommands, memory_order_acquire))
    {
      uint64_t v5 = *(uint64_t **)(llvm::cl::AllSubCommands[0] + 128);
      uint64_t v6 = *(unsigned int *)(llvm::cl::AllSubCommands[0] + 136);
      if (v6) {
        goto LABEL_8;
      }
    }
    else
    {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
      uint64_t v5 = *(uint64_t **)(llvm::cl::AllSubCommands[0] + 128);
      uint64_t v6 = *(unsigned int *)(llvm::cl::AllSubCommands[0] + 136);
      if (v6)
      {
LABEL_8:
        uint64_t v7 = v5;
        if (*v5) {
          BOOL v8 = *v5 == -8;
        }
        else {
          BOOL v8 = 1;
        }
        if (v8)
        {
          do
          {
            uint64_t v10 = v7[1];
            ++v7;
            uint64_t v9 = v10;
            if (v10) {
              BOOL v11 = v9 == -8;
            }
            else {
              BOOL v11 = 1;
            }
          }
          while (v11);
        }
        atomic_ullong v12 = &v5[v6];
        if (v7 == v12) {
          return;
        }
LABEL_29:
        uint64_t v17 = *v7;
        do
        {
          uint64_t v18 = *(void *)(v17 + 8);
          __int16 v19 = *(_WORD *)(v18 + 10);
          if ((v19 & 7) == 4
            || ((v20 = v19 & 0x180, int v21 = v19 & 0x800, v20 != 128) ? (v22 = v21 == 0) : (v22 = 0),
                !v22 || *(void *)(v18 + 24)))
          {
          }
          else
          {
          }
          do
          {
            uint64_t v23 = v7[1];
            ++v7;
            uint64_t v17 = v23;
            if (v23) {
              BOOL v24 = v17 == -8;
            }
            else {
              BOOL v24 = 1;
            }
          }
          while (v24);
        }
        while (v7 != v12);
        return;
      }
    }
    uint64_t v7 = v5;
    atomic_ullong v12 = &v5[v6];
    if (v5 == v12) {
      return;
    }
    goto LABEL_29;
  }
}

uint64_t llvm::cl::ProvidePositionalOption(uint64_t a1, char *a2, size_t a3, unsigned int a4)
{
  unsigned int v5 = a4;
  return ProvideOption((unsigned __int16 *)a1, *(void *)(a1 + 16), *(void *)(a1 + 24), a2, a3, 0, 0, &v5);
}

uint64_t ProvideOption(unsigned __int16 *a1, uint64_t a2, uint64_t a3, char *a4, size_t a5, int a6, uint64_t a7, unsigned int *a8)
{
  int v16 = a1[7];
  uint64_t result = (a1[5] >> 3) & 3;
  if (!result)
  {
    uint64_t result = (*(uint64_t (**)(unsigned __int16 *))(*(void *)a1 + 8))(a1);
    if (result != 3) {
      goto LABEL_3;
    }
LABEL_11:
    if (!v16)
    {
      if (a4)
      {
        v34[0] = "does not allow a value! '";
        void v34[2] = a4;
        void v34[3] = a5;
        __int16 v35 = 1283;
        v36[0] = v34;
        v36[2] = "' specified.";
        __int16 v21 = 770;
LABEL_40:
        __int16 v37 = v21;
        uint64_t v32 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
        llvm::cl::Option::error(a1, (llvm::Twine *)v36, 0, 0, v32);
        return 1;
      }
      goto LABEL_44;
    }
    __int16 v19 = "multi-valued option specified with ValueDisallowed modifier!";
LABEL_39:
    v36[0] = v19;
    __int16 v21 = 259;
    goto LABEL_40;
  }
  if (result == 3) {
    goto LABEL_11;
  }
LABEL_3:
  if (result != 2 || a4)
  {
    if (v16) {
      goto LABEL_6;
    }
    goto LABEL_44;
  }
  uint64_t v20 = (int)*a8 + 1;
  if ((int)v20 >= a6 || (~a1[5] & 0x180) == 0)
  {
    __int16 v19 = "requires a value!";
    goto LABEL_39;
  }
  *a8 = v20;
  a4 = *(char **)(a7 + 8 * v20);
  if (a4)
  {
    uint64_t result = strlen(*(const char **)(a7 + 8 * v20));
    a5 = result;
    if (v16)
    {
LABEL_6:
      if (a4)
      {
        uint64_t result = CommaSeparateAndAddOccurrence(a1, *a8, a2, a3, a4, a5, 0);
        if (result) {
          return 1;
        }
        --v16;
        uint64_t v18 = 1;
        if (!v16) {
          return 0;
        }
        goto LABEL_23;
      }
LABEL_22:
      uint64_t v18 = 0;
LABEL_23:
      uint64_t v22 = (int)*a8;
      uint64_t v23 = v22 + 1;
      if ((int)v22 + 1 < a6)
      {
        *a8 = v23;
        BOOL v24 = *(char **)(a7 + 8 * v23);
        if (v24) {
          size_t v25 = strlen(*(const char **)(a7 + 8 * v23));
        }
        else {
          size_t v25 = 0;
        }
        uint64_t result = CommaSeparateAndAddOccurrence(a1, v23, a2, a3, v24, v25, v18);
        if (result) {
          return 1;
        }
        if (v16 == 1) {
          return 0;
        }
        int v26 = v16 - 2;
        while (1)
        {
          int v27 = v26;
          uint64_t v28 = (int)*a8;
          uint64_t v29 = v28 + 1;
          if ((int)v28 + 1 >= a6) {
            break;
          }
          *a8 = v29;
          size_t v30 = *(char **)(a7 + 8 * v29);
          if (v30) {
            size_t v31 = strlen(*(const char **)(a7 + 8 * v29));
          }
          else {
            size_t v31 = 0;
          }
          uint64_t result = CommaSeparateAndAddOccurrence(a1, v29, a2, a3, v30, v31, 1);
          if ((result & 1) == 0)
          {
            int v26 = v27 - 1;
            if (v27) {
              continue;
            }
          }
          return result;
        }
      }
      __int16 v19 = "not enough values!";
      goto LABEL_39;
    }
  }
  else
  {
    if (v16) {
      goto LABEL_22;
    }
    a5 = 0;
    a4 = 0;
  }
LABEL_44:
  uint64_t v33 = *a8;

  return CommaSeparateAndAddOccurrence(a1, v33, a2, a3, a4, a5, 0);
}

void llvm::cl::TokenizeGNUCommandLine(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4, int a5)
{
  v40[16] = *MEMORY[0x1E4F143B8];
  uint64_t v38 = v40;
  long long v39 = xmmword_1811019F0;
  if (!a2) {
    goto LABEL_57;
  }
  uint64_t v10 = 0;
  __int16 v37 = (void *)(a4 + 16);
  while (1)
  {
    if ((void)v39)
    {
      unsigned int v11 = *(unsigned __int8 *)(a1 + v10);
      goto LABEL_5;
    }
    if (v10 == a2) {
      goto LABEL_57;
    }
    if (a5) {
      break;
    }
    while (1)
    {
      unsigned int v11 = *(unsigned __int8 *)(a1 + v10);
      if (v11 > 0x20 || ((1 << v11) & 0x100002600) == 0) {
        break;
      }
      if (a2 == ++v10) {
        goto LABEL_52;
      }
    }
LABEL_5:
    uint64_t v12 = v10 + 1;
    if (v10 + 1 < a2 && v11 == 92)
    {
      char v13 = *(unsigned char *)(a1 + v12);
      uint64_t v14 = v39;
      if ((unint64_t)(v39 + 1) > *((void *)&v39 + 1))
      {
        uint64_t v29 = a3;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v38, v40, v39 + 1, 1);
        a3 = v29;
        uint64_t v14 = v39;
      }
      *((unsigned char *)v38 + v14) = v13;
      uint64_t v15 = v39 + 1;
      goto LABEL_50;
    }
    if (v11 > 0x27) {
      goto LABEL_46;
    }
    if (((1 << v11) & 0x100002600) == 0)
    {
      if (((1 << v11) & 0x8400000000) != 0)
      {
        if (v12 == a2) {
          goto LABEL_52;
        }
        while (1)
        {
          int v23 = *(unsigned __int8 *)(a1 + v12);
          if (v23 == v11) {
            goto LABEL_51;
          }
          if (v12 + 1 == a2) {
            uint64_t v24 = v12;
          }
          else {
            uint64_t v24 = v12 + 1;
          }
          if (v23 == 92) {
            uint64_t v12 = v24;
          }
          char v25 = *(unsigned char *)(a1 + v12);
          uint64_t v26 = v39;
          if ((unint64_t)(v39 + 1) > *((void *)&v39 + 1))
          {
            __int16 v35 = a3;
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v38, v40, v39 + 1, 1);
            a3 = v35;
            uint64_t v26 = v39;
          }
          *((unsigned char *)v38 + v26) = v25;
          size_t v27 = v39 + 1;
          *(void *)&long long v39 = v39 + 1;
          if (++v12 == a2) {
            goto LABEL_53;
          }
        }
      }
LABEL_46:
      uint64_t v28 = v39;
      if ((unint64_t)(v39 + 1) > *((void *)&v39 + 1))
      {
        size_t v31 = a3;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v38, v40, v39 + 1, 1);
        a3 = v31;
        uint64_t v28 = v39;
      }
      *((unsigned char *)v38 + v28) = v11;
      uint64_t v15 = v39 + 1;
      goto LABEL_49;
    }
    if ((void)v39)
    {
      __int16 v19 = a3;
      uint64_t v20 = llvm::StringSaver::save(a3, v38, v39);
      unint64_t v21 = *(unsigned int *)(a4 + 8);
      if (v21 >= *(unsigned int *)(a4 + 12))
      {
        unint64_t v36 = v20;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v37, v21 + 1, 8);
        uint64_t v20 = v36;
        unint64_t v21 = *(unsigned int *)(a4 + 8);
      }
      *(void *)(*(void *)a4 + 8 * v21) = v20;
      ++*(_DWORD *)(a4 + 8);
      a3 = v19;
    }
    uint64_t v15 = 0;
    if (a5 && v11 == 10)
    {
      unint64_t v22 = *(unsigned int *)(a4 + 8);
      if (v22 >= *(unsigned int *)(a4 + 12))
      {
        size_t v30 = a3;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v37, v22 + 1, 8);
        a3 = v30;
        unint64_t v22 = *(unsigned int *)(a4 + 8);
      }
      uint64_t v15 = 0;
      *(void *)(*(void *)a4 + 8 * v22) = 0;
      ++*(_DWORD *)(a4 + 8);
    }
LABEL_49:
    uint64_t v12 = v10;
LABEL_50:
    *(void *)&long long v39 = v15;
LABEL_51:
    uint64_t v10 = v12 + 1;
    if (v12 + 1 == a2) {
      goto LABEL_52;
    }
  }
  do
  {
    unsigned int v11 = *(unsigned __int8 *)(a1 + v10);
    switch(*(unsigned char *)(a1 + v10))
    {
      case 9:
      case 0xD:
      case 0x20:
        break;
      case 0xA:
        unint64_t v17 = *(unsigned int *)(a4 + 8);
        if (v17 >= *(unsigned int *)(a4 + 12))
        {
          uint64_t v18 = a3;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v37, v17 + 1, 8);
          a3 = v18;
          unint64_t v17 = *(unsigned int *)(a4 + 8);
        }
        *(void *)(*(void *)a4 + 8 * v17) = 0;
        ++*(_DWORD *)(a4 + 8);
        break;
      default:
        goto LABEL_5;
    }
    ++v10;
  }
  while (a2 != v10);
LABEL_52:
  size_t v27 = v39;
LABEL_53:
  uint64_t v32 = v38;
  if (v27)
  {
    uint64_t v33 = llvm::StringSaver::save(a3, v38, v27);
    uint64_t v34 = *(unsigned int *)(a4 + 8);
    if (v34 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v37, v34 + 1, 8);
      LODWORD(v34) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v34) = v33;
    ++*(_DWORD *)(a4 + 8);
LABEL_57:
    uint64_t v32 = v38;
  }
  if (v32 != v40) {
    free(v32);
  }
}

void llvm::cl::ExpansionContext::expandResponseFile(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 16);
  __int16 v71 = 261;
  unint64_t v68 = (void **)a2;
  *(void *)&long long v69 = a3;
  llvm::vfs::FileSystem::getBufferForFile(v10, (uint64_t)&v68, -1, 1, 0, 0, (uint64_t)&v66);
  if (v67)
  {
    long long v13 = v66;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v66;
    v56[0] = "cannot not open file '";
    unint64_t v57 = a2;
    unint64_t v58 = a3;
    __int16 v59 = 1283;
    uint64_t v62 = v56;
    *((void *)&v63 + 1) = "': ";
    __int16 v65 = 770;
    std::error_code::message(&v52, (const std::error_code *)&v51);
    unint64_t v68 = &v62;
    *((void *)&v69 + 1) = &v52;
    __int16 v71 = 1026;
    llvm::Twine::str((llvm::Twine *)&v68, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v14.__cat_ = (const std::error_category *)&__p;
    }
    else {
      v14.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
    }
    *(void *)&v14.__val_ = *((void *)&v13 + 1);
    llvm::createStringError((llvm *)v13, v14, a5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_100;
      }
    }
    else if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_100;
    }
    uint64_t v46 = (void *)v52.__r_.__value_.__r.__words[0];
    goto LABEL_99;
  }
  unsigned int v11 = *(std::string **)(v66 + 8);
  std::string::size_type size = *(void *)(v66 + 16) - (void)v11;
  memset(&v51, 0, sizeof(v51));
  if (llvm::hasUTF16ByteOrderMark((unsigned __int8 *)v11, size))
  {
    if (!llvm::convertUTF16ToUTF8String((char *)v11, size, &v51))
    {
      *(void *)&v73.__val_ = std::generic_category();
      v73.__cat_ = (const std::error_category *)"Could not convert UTF16 to UTF8";
      llvm::createStringError((llvm *)0x5C, v73, a5);
LABEL_97:
      if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_100;
      }
LABEL_98:
      uint64_t v46 = (void *)v51.__r_.__value_.__r.__words[0];
LABEL_99:
      operator delete(v46);
      goto LABEL_100;
    }
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v11 = &v51;
    }
    else {
      unsigned int v11 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v51.__r_.__value_.__l.__size_;
    }
  }
  else if (size >= 3 {
         && v11->__r_.__value_.__s.__data_[0] == 239
  }
         && v11->__r_.__value_.__s.__data_[1] == 187
         && v11->__r_.__value_.__s.__data_[2] == 191)
  {
    unsigned int v11 = (std::string *)((char *)v11 + 3);
    size -= 3;
  }
  (*(void (**)(std::string *, std::string::size_type, uint64_t, uint64_t, void))(a1 + 8))(v11, size, a1, a4, *(unsigned __int8 *)(a1 + 57));
  if (!*(unsigned char *)(a1 + 56) && !*(unsigned char *)(a1 + 58))
  {
    *a5 = 0;
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_100;
    }
    goto LABEL_98;
  }
  unint64_t v49 = a5;
  uint64_t v15 = llvm::sys::path::parent_path((unsigned __int8 *)a2, a3, 0);
  uint64_t v17 = *(unsigned int *)(a4 + 8);
  if (v17)
  {
    uint64_t v18 = v15;
    size_t v19 = v16;
    uint64_t v20 = *(uint64_t **)a4;
    uint64_t v50 = *(void *)a4 + 8 * v17;
    do
    {
      uint64_t v21 = *v20;
      if (*v20)
      {
        if (!*(unsigned char *)(a1 + 58)) {
          goto LABEL_57;
        }
        uint64_t v60 = *v20;
        size_t v61 = strlen((const char *)v21);
        unint64_t v68 = (void **)v70;
        long long v69 = xmmword_1811019F0;
        uint64_t v22 = llvm::StringRef::find(&v60, "<CFGDIR>", 8uLL, 0);
        if (v22 != -1)
        {
          uint64_t v23 = v22;
          unint64_t v24 = 0;
          while (1)
          {
            unint64_t v25 = v61 >= v24 ? v24 : v61;
            uint64_t v26 = (const void *)(v60 + v25);
            unint64_t v27 = v61 - v25 >= v23 - v24 ? v23 - v24 : v61 - v25;
            if (!(void)v69) {
              break;
            }
            __int16 v65 = 261;
            uint64_t v62 = (void *)(v60 + v25);
            *(void *)&long long v63 = v27;
            __int16 v59 = 257;
            __int16 v55 = 257;
            __int16 v53 = 257;
            llvm::sys::path::append(&v68, (void **)&v62, v56, (const char **)&__p.__r_.__value_.__l.__data_, &v52);
            uint64_t v28 = v69;
            unint64_t v29 = v69 + v19;
            if (*((void *)&v69 + 1) < (unint64_t)v69 + v19) {
              goto LABEL_40;
            }
LABEL_41:
            if (v19)
            {
              memcpy((char *)v68 + v28, v18, v19);
              uint64_t v28 = v69;
            }
            *(void *)&long long v69 = v28 + v19;
            unint64_t v24 = v23 + 8;
            uint64_t v23 = llvm::StringRef::find(&v60, "<CFGDIR>", 8uLL, v23 + 8);
            if (v23 == -1) {
              goto LABEL_50;
            }
          }
          *(void *)&long long v69 = 0;
          if (*((void *)&v69 + 1) < v27)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v68, v70, v27, 1);
            uint64_t v30 = v69;
            goto LABEL_46;
          }
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          if (v27)
          {
LABEL_46:
            memcpy((char *)v68 + v30, v26, v27);
            uint64_t v31 = v69;
          }
          uint64_t v28 = v31 + v27;
          *(void *)&long long v69 = v31 + v27;
          unint64_t v29 = v31 + v27 + v19;
          if (*((void *)&v69 + 1) >= v29) {
            goto LABEL_41;
          }
LABEL_40:
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v68, v70, v29, 1);
          uint64_t v28 = v69;
          goto LABEL_41;
        }
        unint64_t v24 = 0;
LABEL_50:
        size_t v32 = v69;
        if ((void)v69)
        {
          if (v61 > v24)
          {
            __int16 v65 = 261;
            uint64_t v62 = (void *)(v60 + v24);
            *(void *)&long long v63 = v61 - v24;
            __int16 v59 = 257;
            __int16 v55 = 257;
            __int16 v53 = 257;
            llvm::sys::path::append(&v68, (void **)&v62, v56, (const char **)&__p.__r_.__value_.__l.__data_, &v52);
            size_t v32 = v69;
          }
          uint64_t *v20 = (uint64_t)llvm::StringSaver::save((uint64_t **)a1, v68, v32);
        }
        if (v68 != (void **)v70) {
          free(v68);
        }
        uint64_t v21 = *v20;
        if (*v20)
        {
LABEL_57:
          size_t v33 = strlen((const char *)v21);
          if (v33)
          {
            if (*(unsigned char *)v21 == 64)
            {
              uint64_t v34 = (char *)(v21 + 1);
              __int16 v71 = 261;
              unint64_t v35 = v33 - 1;
              unint64_t v68 = (void **)v34;
              *(void *)&long long v69 = v33 - 1;
              if (llvm::sys::path::is_relative((const char **)&v68, 0))
              {
                unint64_t v68 = (void **)v70;
                v70[0] = 64;
                uint64_t v36 = 1;
                long long v69 = xmmword_181126FB0;
                unint64_t v37 = v19 + 1;
                if (v19 + 1 <= 0x80) {
                  goto LABEL_62;
                }
                goto LABEL_61;
              }
            }
            else if (v33 >= 9 && *(void *)v21 == 0x6769666E6F632D2DLL && *(unsigned char *)(v21 + 8) == 61)
            {
              unint64_t v68 = (void **)v70;
              uint64_t v34 = (char *)(v21 + 9);
              v70[0] = 64;
              unint64_t v35 = v33 - 9;
              long long v69 = xmmword_181126FB0;
              __int16 v65 = 261;
              uint64_t v62 = v34;
              *(void *)&long long v63 = v33 - 9;
              if (llvm::sys::path::has_parent_path((const char **)&v62, 0))
              {
                uint64_t v36 = v69;
                unint64_t v37 = v69 + v19;
                if (*((void *)&v69 + 1) >= (unint64_t)v69 + v19)
                {
LABEL_62:
                  if (v19)
                  {
                    memcpy((char *)v68 + v36, v18, v19);
                    uint64_t v36 = v69;
                  }
                  *(void *)&long long v69 = v36 + v19;
                  __int16 v65 = 261;
                  uint64_t v62 = v34;
                  *(void *)&long long v63 = v35;
                  __int16 v59 = 257;
                  __int16 v55 = 257;
                  __int16 v53 = 257;
                  llvm::sys::path::append(&v68, (void **)&v62, v56, (const char **)&__p.__r_.__value_.__l.__data_, &v52);
                  goto LABEL_65;
                }
LABEL_61:
                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v68, v70, v37, 1);
                uint64_t v36 = v69;
                goto LABEL_62;
              }
              uint64_t v62 = &v64;
              long long v63 = xmmword_1811019F0;
              char ConfigFile = llvm::cl::ExpansionContext::findConfigFile(a1, v34, v35, &v62);
              if (ConfigFile)
              {
                uint64_t v43 = v62;
                size_t v42 = v63;
                uint64_t v44 = v69;
                if (*((void *)&v69 + 1) < (void)v69 + (void)v63)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v68, v70, v69 + v63, 1);
                  uint64_t v44 = v69;
                }
                if (v42)
                {
                  memcpy((char *)v68 + v44, v43, v42);
                  uint64_t v44 = v69;
                }
                *(void *)&long long v69 = v44 + v42;
              }
              else
              {
                unint64_t v48 = std::generic_category();
                __int16 v59 = 1283;
                v56[0] = "cannot not find configuration file: ";
                unint64_t v57 = v34;
                unint64_t v58 = v35;
                llvm::Twine::str((llvm::Twine *)v56, &__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v45.__cat_ = (const std::error_category *)&__p;
                }
                else {
                  v45.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
                }
                *(void *)&v45.__val_ = v48;
                llvm::createStringError((llvm *)2, v45, v49);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              if (v62 != &v64) {
                free(v62);
              }
              if (ConfigFile)
              {
LABEL_65:
                uint64_t *v20 = (uint64_t)llvm::StringSaver::save((uint64_t **)a1, v68, v69);
                int v38 = 1;
                long long v39 = (char *)v68;
                if (v68 == (void **)v70) {
                  goto LABEL_25;
                }
              }
              else
              {
                int v38 = 0;
                long long v39 = (char *)v68;
                if (v68 == (void **)v70)
                {
LABEL_25:
                  if (!v38) {
                    goto LABEL_97;
                  }
                  goto LABEL_26;
                }
              }
              free(v39);
              goto LABEL_25;
            }
          }
        }
      }
LABEL_26:
      ++v20;
    }
    while (v20 != (uint64_t *)v50);
  }
  *unint64_t v49 = 0;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_98;
  }
LABEL_100:
  if ((v67 & 1) == 0)
  {
    uint64_t v47 = v66;
    *(void *)&long long v66 = 0;
    if (v47) {
      (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
    }
  }
}

uint64_t llvm::cl::ExpansionContext::findConfigFile(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  __src = v53;
  __uint64_t n = xmmword_1811019F0;
  __int16 v57 = 261;
  unint64_t v54 = a2;
  unint64_t v55 = a3;
  if (llvm::sys::path::has_parent_path((const char **)&v54, 0))
  {
    uint64_t v8 = 0;
    *(void *)&__uint64_t n = 0;
    if (*((void *)&__n + 1) < a3)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v53, a3, 1);
      uint64_t v8 = __n;
    }
    if (a3)
    {
      memcpy((char *)__src + v8, a2, a3);
      uint64_t v8 = __n;
    }
    *(void *)&__uint64_t n = v8 + a3;
    __int16 v57 = 261;
    unint64_t v54 = a2;
    unint64_t v55 = a3;
    if (llvm::sys::path::is_relative((const char **)&v54, 0)
      && (*(unsigned int (**)(void, void **))(**(void **)(a1 + 16) + 88))(*(void *)(a1 + 16), &__src))
    {
      goto LABEL_46;
    }
    unint64_t v48 = v50;
    long long v49 = xmmword_1811019F0;
    uint64_t v9 = __n;
    if (!(void)__n)
    {
      unint64_t v24 = v50;
      goto LABEL_37;
    }
    if ((unint64_t)__n < 0x81)
    {
      unsigned int v11 = v50;
      size_t v10 = __n;
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v48, v50, __n, 1);
      size_t v10 = __n;
      if (!(void)__n)
      {
LABEL_36:
        *(void *)&long long v49 = v9;
        unint64_t v24 = v48;
LABEL_37:
        uint64_t v28 = *(void *)(a1 + 16);
        __int16 v44 = 261;
        size_t v42 = v24;
        uint64_t v43 = v9;
        (*(void (**)(void **__return_ptr))(*(void *)v28 + 16))(&v54);
        if (v59)
        {
          BOOL v29 = 0;
        }
        else
        {
          BOOL v29 = v58 == 2;
          if (v56 < 0) {
            operator delete(v54);
          }
        }
        if (v48 != v50) {
          free(v48);
        }
        if (v29)
        {
          uint64_t v31 = __src;
          unint64_t v30 = __n;
          a4[1] = 0;
          if (a4[2] >= v30)
          {
            uint64_t v32 = 0;
            uint64_t v34 = 0;
            if (!v30)
            {
LABEL_50:
              a4[1] = v34 + v30;
              uint64_t v14 = 1;
LABEL_51:
              size_t v33 = __src;
              if (__src == v53) {
                return v14;
              }
LABEL_52:
              free(v33);
              return v14;
            }
          }
          else
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a4, a4 + 3, v30, 1);
            uint64_t v32 = a4[1];
          }
          memcpy((void *)(*a4 + v32), v31, v30);
          uint64_t v34 = a4[1];
          goto LABEL_50;
        }
LABEL_46:
        uint64_t v14 = 0;
        size_t v33 = __src;
        if (__src == v53) {
          return v14;
        }
        goto LABEL_52;
      }
      unsigned int v11 = v48;
    }
    memcpy(v11, __src, v10);
    goto LABEL_36;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  if (!v12) {
    goto LABEL_46;
  }
  unint64_t v37 = a4;
  long long v13 = (unint64_t *)(*(void *)(a1 + 40) + 8);
  uint64_t v14 = 16 * v12;
  while (1)
  {
    unint64_t v15 = *v13;
    if (*v13) {
      break;
    }
LABEL_15:
    v13 += 2;
    v14 -= 16;
    if (!v14) {
      goto LABEL_51;
    }
  }
  uint64_t v16 = 0;
  uint64_t v17 = (const void *)*(v13 - 1);
  *(void *)&__uint64_t n = 0;
  if (*((void *)&__n + 1) < v15)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v53, v15, 1);
    uint64_t v16 = __n;
  }
  memcpy((char *)__src + v16, v17, v15);
  *(void *)&__uint64_t n = __n + v15;
  __int16 v57 = 261;
  unint64_t v54 = a2;
  unint64_t v55 = a3;
  __int16 v44 = 257;
  __int16 v41 = 257;
  __int16 v39 = 257;
  llvm::sys::path::append(&__src, &v54, &v42, &v40, &v38);
  llvm::sys::path::native(&__src, 0);
  std::string __dst = v47;
  long long v46 = xmmword_1811019F0;
  uint64_t v18 = v47;
  uint64_t v19 = __n;
  if ((void)__n)
  {
    uint64_t v20 = v47;
    size_t v21 = __n;
    if ((unint64_t)__n >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v47, __n, 1);
      size_t v21 = __n;
      if (!(void)__n)
      {
LABEL_24:
        *(void *)&long long v46 = v19;
        uint64_t v18 = __dst;
        goto LABEL_25;
      }
      uint64_t v20 = __dst;
    }
    memcpy(v20, __src, v21);
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v22 = *(void *)(a1 + 16);
  __int16 v44 = 261;
  size_t v42 = v18;
  uint64_t v43 = v19;
  (*(void (**)(void **__return_ptr))(*(void *)v22 + 16))(&v54);
  if (v59)
  {
    BOOL v23 = 0;
  }
  else
  {
    BOOL v23 = v58 == 2;
    if (v56 < 0) {
      operator delete(v54);
    }
  }
  if (__dst != v47) {
    free(__dst);
  }
  if (!v23) {
    goto LABEL_15;
  }
  uint64_t v26 = __src;
  unint64_t v25 = __n;
  v37[1] = 0;
  if (v37[2] < v25)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v37, v37 + 3, v25, 1);
    uint64_t v27 = v37[1];
    goto LABEL_55;
  }
  uint64_t v27 = 0;
  uint64_t v36 = 0;
  if (v25)
  {
LABEL_55:
    memcpy((void *)(*v37 + v27), v26, v25);
    uint64_t v36 = v37[1];
  }
  v37[1] = v36 + v25;
  uint64_t v14 = 1;
  size_t v33 = __src;
  if (__src != v53) {
    goto LABEL_52;
  }
  return v14;
}

void llvm::cl::ExpansionContext::expandResponseFiles(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t v97 = v99;
  uint64_t v98 = 0x300000000;
  HIBYTE(v95) = 0;
  LOBYTE(__p) = 0;
  v96[0] = *(unsigned int *)(a2 + 8);
  llvm::SmallVectorTemplateBase<llvm::cl::ExpansionContext::expandResponseFiles(llvm::SmallVectorImpl<char const*> &)::ResponseFileRecord,false>::push_back((uint64_t)&v97, (__n128 *)&__p);
  if ((SHIBYTE(v95) & 0x80000000) == 0)
  {
    if (!*(_DWORD *)(a2 + 8)) {
      goto LABEL_150;
    }
    goto LABEL_5;
  }
  operator delete(__p);
  if (*(_DWORD *)(a2 + 8))
  {
LABEL_5:
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    while (1)
    {
      uint64_t v8 = v97;
      LODWORD(v9) = v98;
      if (*((void *)v97 + 4 * v98 - 1) == v6)
      {
        do
        {
          uint64_t v9 = (v9 - 1);
          LODWORD(v98) = v9;
          size_t v10 = (void **)&v8[4 * v9];
          if (*((char *)v10 + 23) < 0)
          {
            operator delete(*v10);
            uint64_t v8 = v97;
            uint64_t v9 = v98;
          }
        }
        while (v8[4 * v9 - 1] == v6);
      }
      unsigned int v11 = *(unsigned char **)(*(void *)a2 + 8 * v6);
      if (!v11 || *v11 != 64)
      {
        ++v7;
        goto LABEL_7;
      }
      std::string __p = v96;
      long long v95 = xmmword_1811019F0;
      __int16 v103 = 257;
      int v13 = v11[1];
      uint64_t v12 = v11 + 1;
      if (v13)
      {
        __dst.n128_u64[0] = (unint64_t)v12;
        LOBYTE(v103) = 3;
        if (!llvm::sys::path::is_relative((const char **)&__dst, 0)) {
          goto LABEL_17;
        }
      }
      else
      {
        LOBYTE(v103) = 1;
        if (!llvm::sys::path::is_relative((const char **)&__dst, 0))
        {
LABEL_17:
          uint64_t v14 = *(void *)(a1 + 16);
          __int16 v103 = 257;
          if (*v12) {
            goto LABEL_18;
          }
          goto LABEL_54;
        }
      }
      unint64_t v16 = *(void *)(a1 + 32);
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(const void **)(a1 + 24);
        *(void *)&long long v95 = 0;
        if (*((void *)&v95 + 1) < v16)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, v96, v16, 1);
          uint64_t v17 = v95;
        }
        memcpy((char *)__p + v17, v18, v16);
        *(void *)&long long v95 = v95 + v16;
        goto LABEL_48;
      }
      (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 48))(&v88);
      char v19 = v89;
      if ((v89 & 1) == 0) {
        break;
      }
      if (*v12)
      {
        __dst.n128_u64[0] = (unint64_t)"cannot get absolute path for: ";
        unint64_t v101 = v12;
        char v23 = 3;
      }
      else
      {
        __dst.n128_u64[0] = (unint64_t)"cannot get absolute path for: ";
        char v23 = 1;
      }
      long long v25 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
      LOBYTE(v103) = 3;
      HIBYTE(v103) = v23;
      llvm::Twine::str((llvm::Twine *)&__dst, &v77);
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v26.__cat_ = (const std::error_category *)&v77;
      }
      else {
        v26.__cat_ = (const std::error_category *)v77.__r_.__value_.__r.__words[0];
      }
      *(void *)&v26.__val_ = *((void *)&v25 + 1);
      llvm::createStringError((llvm *)v25, v26, a3);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
LABEL_44:
      if ((v89 & 1) == 0 && SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (v19)
      {
        int v37 = 1;
        goto LABEL_145;
      }
LABEL_48:
      __int16 v103 = 257;
      if (*v12)
      {
        __dst.n128_u64[0] = (unint64_t)v12;
        char v27 = 3;
      }
      else
      {
        char v27 = 1;
      }
      LOBYTE(v103) = v27;
      WORD4(v89) = 257;
      WORD4(v78) = 257;
      __int16 v86 = 257;
      llvm::sys::path::append(&__p, &__dst, &v88, (const char **)&v77.__r_.__value_.__l.__data_, &__src);
      uint64_t v28 = v95;
      if ((unint64_t)(v95 + 1) > *((void *)&v95 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, v96, v95 + 1, 1);
        uint64_t v28 = v95;
      }
      *((unsigned char *)__p + v28) = 0;
      uint64_t v12 = (char *)__p;
      uint64_t v14 = *(void *)(a1 + 16);
      __int16 v103 = 257;
      if (*(unsigned char *)__p)
      {
LABEL_18:
        __dst.n128_u64[0] = (unint64_t)v12;
        char v15 = 3;
        goto LABEL_55;
      }
LABEL_54:
      char v15 = 1;
LABEL_55:
      LOBYTE(v103) = v15;
      (*(void (**)(std::string *__return_ptr))(*(void *)v14 + 16))(&v88);
      char v29 = v93;
      if ((v93 & 1) == 0)
      {
        if (llvm::vfs::Status::exists((llvm::vfs::Status *)&v88))
        {
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v77, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
          }
          else {
            std::string v77 = v88;
          }
          long long v78 = v89;
          long long v79 = v90;
          long long v80 = v91;
          __int16 v81 = v92;
          uint64_t v82 = a1;
          size_t v42 = (char *)v97;
          uint64_t v43 = 32 * v98 - 32;
          __int16 v44 = (char *)v97 + 32;
          while (v43)
          {
            uint64_t v45 = *(void *)(v82 + 16);
            __int16 v86 = 260;
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
            (*(void (**)(__n128 *__return_ptr))(*(void *)v45 + 16))(&__dst);
            char v46 = v104;
            if (v104)
            {
              unint64_t v76 = __dst.n128_u64[1];
              unint64_t v3 = __dst.n128_u64[0];
            }
            else
            {
              unint64_t v3 = v3 & 0xFFFFFFFFFFFFFF00 | llvm::vfs::Status::equivalent((uint64_t)&v77, (uint64_t)&__dst);
              if ((v104 & 1) == 0 && SHIBYTE(v101) < 0) {
                operator delete((void *)__dst.n128_u64[0]);
              }
            }
            if (v46)
            {
              __dst.n128_u64[0] = (unint64_t)"cannot open file: ";
              unint64_t v101 = v42 + 32;
              __int16 v103 = 1027;
              llvm::Twine::str((llvm::Twine *)&__dst, &__src);
              if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v52.__cat_ = (const std::error_category *)&__src;
              }
              else {
                v52.__cat_ = (const std::error_category *)__src.__r_.__value_.__r.__words[0];
              }
              *(void *)&v52.__val_ = v76;
              llvm::createStringError((llvm *)v3, v52, a3);
              if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              {
                long long v49 = (void *)__src.__r_.__value_.__r.__words[0];
LABEL_115:
                operator delete(v49);
              }
LABEL_116:
              int v37 = 1;
              goto LABEL_140;
            }
            v42 += 32;
            v43 -= 32;
            v44 += 32;
            if ((_BYTE)v3)
            {
              uint64_t v47 = std::system_category();
              __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"recursive expansion of: '";
              __src.__r_.__value_.__r.__words[2] = (std::string::size_type)v42;
              __int16 v86 = 1027;
              __dst.n128_u64[0] = (unint64_t)&__src;
              unint64_t v101 = "'";
              __int16 v103 = 770;
              llvm::Twine::str((llvm::Twine *)&__dst, &v87);
              if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v48.__cat_ = (const std::error_category *)&v87;
              }
              else {
                v48.__cat_ = (const std::error_category *)v87.__r_.__value_.__r.__words[0];
              }
              *(void *)&v48.__val_ = v47;
              llvm::createStringError(0, v48, a3);
              if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
              {
                long long v49 = (void *)v87.__r_.__value_.__r.__words[0];
                goto LABEL_115;
              }
              goto LABEL_116;
            }
          }
          __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src.__r_.__value_.__r.__words[2];
          __src.__r_.__value_.__l.__size_ = 0;
          size_t v50 = strlen(v12);
          llvm::cl::ExpansionContext::expandResponseFile(a1, v12, v50, (uint64_t)&__src, a3);
          if (*a3)
          {
            int v37 = 1;
            std::string v51 = (void *)__src.__r_.__value_.__r.__words[0];
            if ((std::string::size_type *)__src.__r_.__value_.__l.__data_ == &__src.__r_.__value_.__r.__words[2]) {
              goto LABEL_140;
            }
LABEL_139:
            free(v51);
LABEL_140:
            if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v77.__r_.__value_.__l.__data_);
            }
            goto LABEL_142;
          }
          uint64_t v53 = v98;
          if (v98)
          {
            unint64_t v54 = (char *)v97;
            uint64_t v55 = LODWORD(__src.__r_.__value_.__r.__words[1]) - 1;
            uint64_t v56 = (v98 - 1) & 0x7FFFFFFFFFFFFFFLL;
            if (v56)
            {
              uint64_t v57 = v56 + 1;
              uint64_t v58 = (v56 + 1) & 0xFFFFFFFFFFFFFFELL;
              char v59 = (char *)v97 + 32 * v58;
              uint64_t v60 = (uint64_t *)((char *)v97 + 56);
              uint64_t v61 = v58;
              do
              {
                uint64_t v62 = v55 + *v60;
                *(v60 - 4) += v55;
                uint64_t *v60 = v62;
                v60 += 8;
                v61 -= 2;
              }
              while (v61);
              if (v57 == v58) {
                goto LABEL_126;
              }
            }
            else
            {
              char v59 = (char *)v97;
            }
            long long v63 = &v54[32 * v53];
            do
            {
              *((void *)v59 + 3) += v55;
              v59 += 32;
            }
            while (v59 != v63);
          }
LABEL_126:
          size_t v64 = strlen(v12);
          if (v64 >= 0x7FFFFFFFFFFFFFF8) {
            abort();
          }
          size_t v65 = v64;
          if (v64 >= 0x17)
          {
            uint64_t v67 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v64 | 7) != 0x17) {
              uint64_t v67 = v64 | 7;
            }
            uint64_t v68 = v67 + 1;
            p_dst = (__n128 *)operator new(v67 + 1);
            __dst.n128_u64[1] = v65;
            unint64_t v101 = (const char *)(v68 | 0x8000000000000000);
            __dst.n128_u64[0] = (unint64_t)p_dst;
          }
          else
          {
            HIBYTE(v101) = v64;
            p_dst = &__dst;
            if (!v64)
            {
LABEL_134:
              p_dst->n128_u8[v65] = 0;
              uint64_t v102 = v6 + LODWORD(__src.__r_.__value_.__r.__words[1]);
              llvm::SmallVectorTemplateBase<llvm::cl::ExpansionContext::expandResponseFiles(llvm::SmallVectorImpl<char const*> &)::ResponseFileRecord,false>::push_back((uint64_t)&v97, &__dst);
              if (SHIBYTE(v101) < 0) {
                operator delete((void *)__dst.n128_u64[0]);
              }
              uint64_t v69 = *(void *)a2;
              uint64_t v70 = *(void *)a2 + 8 * v6;
              uint64_t v71 = *(unsigned int *)(a2 + 8);
              uint64_t v72 = *(void *)a2 + 8 * v71;
              if (v72 != v70 + 8)
              {
                memmove((void *)v70, (const void *)(v70 + 8), v72 - (v70 + 8));
                LODWORD(v71) = *(_DWORD *)(a2 + 8);
                uint64_t v69 = *(void *)a2;
              }
              *(_DWORD *)(a2 + 8) = v71 - 1;
              llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>(a2, v69 + 8 * v6, __src.__r_.__value_.__l.__data_, (char *)(__src.__r_.__value_.__r.__words[0] + 8 * LODWORD(__src.__r_.__value_.__r.__words[1])));
              int v37 = 0;
              std::string v51 = (void *)__src.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)__src.__r_.__value_.__l.__data_ != &__src.__r_.__value_.__r.__words[2]) {
                goto LABEL_139;
              }
              goto LABEL_140;
            }
          }
          memmove(p_dst, v12, v65);
          goto LABEL_134;
        }
        char v29 = v93;
      }
      if (v29)
      {
        int data = (int)v88.__r_.__value_.__l.__data_;
        std::string::size_type size = (const std::error_category *)v88.__r_.__value_.__l.__size_;
        std::error_code v84 = *(std::error_code *)&v88.__r_.__value_.__l.__data_;
        if (*(unsigned char *)(a1 + 58)) {
          goto LABEL_64;
        }
      }
      else
      {
        std::string::size_type size = std::system_category();
        int data = 0;
        *(void *)&v84.__val_ = 0;
        v84.__cat_ = size;
        if (*(unsigned char *)(a1 + 58)) {
          goto LABEL_64;
        }
      }
      if (data)
      {
        uint64_t v36 = std::generic_category();
        std::string::size_type size = v84.__cat_;
        int data = v84.__val_;
        if (v84.__cat_ != v36 || v84.__val_ != 2)
        {
LABEL_64:
          if (data)
          {
            uint64_t v32 = *(void *)&v84.__val_;
            if (*v12) {
              goto LABEL_66;
            }
LABEL_72:
            p_src = (std::string *)"cannot not open file '";
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"cannot not open file '";
            char v34 = 1;
            char v35 = 3;
          }
          else
          {
            std::string::size_type size = std::generic_category();
            *(void *)&v84.__val_ = 2;
            v84.__cat_ = size;
            uint64_t v32 = 2;
            if (!*v12) {
              goto LABEL_72;
            }
LABEL_66:
            p_src = &__src;
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"cannot not open file '";
            __src.__r_.__value_.__r.__words[2] = (std::string::size_type)v12;
            char v34 = 3;
            char v35 = 2;
          }
          LOBYTE(v86) = 3;
          HIBYTE(v86) = v34;
          v77.__r_.__value_.__r.__words[0] = (std::string::size_type)p_src;
          v77.__r_.__value_.__r.__words[2] = (std::string::size_type)"': ";
          BYTE8(v78) = v35;
          BYTE9(v78) = 3;
          std::error_code::message(&v83, &v84);
          char v38 = BYTE8(v78);
          if (BYTE8(v78))
          {
            if (BYTE8(v78) == 1)
            {
              __dst.n128_u64[0] = (unint64_t)&v83;
              char v39 = 1;
              char v38 = 4;
            }
            else
            {
              if (BYTE9(v78) != 1) {
                char v38 = 2;
              }
              int v40 = &v77;
              if (BYTE9(v78) == 1) {
                int v40 = (std::string *)v77.__r_.__value_.__r.__words[0];
              }
              __dst.n128_u64[0] = (unint64_t)v40;
              __dst.n128_u64[1] = v77.__r_.__value_.__l.__size_;
              unint64_t v101 = (const char *)&v83;
              char v39 = 4;
            }
          }
          else
          {
            char v39 = 1;
          }
          LOBYTE(v103) = v38;
          HIBYTE(v103) = v39;
          llvm::Twine::str((llvm::Twine *)&__dst, &v87);
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v41.__cat_ = (const std::error_category *)&v87;
          }
          else {
            v41.__cat_ = (const std::error_category *)v87.__r_.__value_.__r.__words[0];
          }
          *(void *)&v41.__val_ = size;
          llvm::createStringError((llvm *)v32, v41, a3);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v87.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_87;
            }
          }
          else if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_87:
            int v37 = 1;
            goto LABEL_142;
          }
          operator delete(v83.__r_.__value_.__l.__data_);
          goto LABEL_87;
        }
      }
      ++v7;
      int v37 = 3;
LABEL_142:
      if ((v93 & 1) == 0 && SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
LABEL_145:
      if (__p != v96) {
        free(__p);
      }
      if (v37 && v37 != 3) {
        goto LABEL_151;
      }
LABEL_7:
      uint64_t v6 = v7;
      if (*(_DWORD *)(a2 + 8) == v7) {
        goto LABEL_150;
      }
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = &v88;
    }
    else {
      uint64_t v20 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = v88.__r_.__value_.__l.__size_;
    }
    *(void *)&long long v95 = 0;
    if (*((void *)&v95 + 1) >= v21)
    {
      uint64_t v22 = 0;
      uint64_t v24 = 0;
      if (!v21)
      {
LABEL_37:
        *(void *)&long long v95 = v24 + v21;
        goto LABEL_44;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, v96, v21, 1);
      uint64_t v22 = v95;
    }
    memcpy((char *)__p + v22, v20, v21);
    uint64_t v24 = v95;
    goto LABEL_37;
  }
LABEL_150:
  *a3 = 0;
LABEL_151:
  std::error_code v73 = (char *)v97;
  if (v98)
  {
    uint64_t v74 = 32 * v98;
    do
    {
      if (v73[v74 - 9] < 0) {
        operator delete(*(void **)&v73[v74 - 32]);
      }
      v74 -= 32;
    }
    while (v74);
    std::error_code v73 = (char *)v97;
  }
  if (v73 != v99) {
    free(v73);
  }
}

__n128 llvm::SmallVectorTemplateBase<llvm::cl::ExpansionContext::expandResponseFiles(llvm::SmallVectorImpl<char const*> &)::ResponseFileRecord,false>::push_back(uint64_t a1, __n128 *a2)
{
  atomic_ullong v2 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unsigned int v5 = *(__n128 **)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v8 = v4 + 1;
    uint64_t v9 = &v5[2 * v4];
    if (v5 <= a2 && v9 > a2)
    {
      uint64_t v21 = (char *)a2 - (char *)v5;
      unint64_t v33 = 0;
      uint64_t v22 = (__n128 *)(a1 + 16);
      char v23 = (__n128 *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v8, 32, &v33);
      unsigned int v5 = v23;
      uint64_t v24 = *(__n128 **)a1;
      uint64_t v25 = *(unsigned int *)(a1 + 8);
      if (v25)
      {
        std::error_code v26 = &v24[2 * v25];
        char v27 = v23;
        do
        {
          __n128 v28 = *v24;
          v27[1].n128_u64[0] = v24[1].n128_u64[0];
          __n128 *v27 = v28;
          v24->n128_u64[1] = 0;
          v24[1].n128_u64[0] = 0;
          v24->n128_u64[0] = 0;
          v27[1].n128_u64[1] = v24[1].n128_u64[1];
          v24 += 2;
          v27 += 2;
        }
        while (v24 != v26);
        uint64_t v24 = *(__n128 **)a1;
        uint64_t v29 = *(unsigned int *)(a1 + 8);
        if (v29)
        {
          uint64_t v30 = 2 * v29;
          do
          {
            if (v24[v30 - 1].n128_i8[7] < 0) {
              operator delete((void *)v24[v30 - 2].n128_u64[0]);
            }
            v30 -= 2;
          }
          while (v30 * 16);
          uint64_t v24 = *(__n128 **)a1;
        }
      }
      uint64_t v31 = v21 >> 5;
      int v32 = v33;
      if (v24 != v22) {
        free(v24);
      }
      *(void *)a1 = v5;
      *(_DWORD *)(a1 + 12) = v32;
      atomic_ullong v2 = &v5[2 * v31];
    }
    else
    {
      unint64_t v33 = 0;
      unsigned int v11 = (__n128 *)(a1 + 16);
      uint64_t v12 = (__n128 *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v8, 32, &v33);
      unsigned int v5 = v12;
      int v13 = *(__n128 **)a1;
      uint64_t v14 = *(unsigned int *)(a1 + 8);
      if (v14)
      {
        char v15 = &v13[2 * v14];
        unint64_t v16 = v12;
        do
        {
          __n128 v17 = *v13;
          v16[1].n128_u64[0] = v13[1].n128_u64[0];
          __n128 *v16 = v17;
          v13->n128_u64[1] = 0;
          v13[1].n128_u64[0] = 0;
          v13->n128_u64[0] = 0;
          v16[1].n128_u64[1] = v13[1].n128_u64[1];
          v13 += 2;
          v16 += 2;
        }
        while (v13 != v15);
        int v13 = *(__n128 **)a1;
        uint64_t v18 = *(unsigned int *)(a1 + 8);
        if (v18)
        {
          uint64_t v19 = 2 * v18;
          do
          {
            if (v13[v19 - 1].n128_i8[7] < 0) {
              operator delete((void *)v13[v19 - 2].n128_u64[0]);
            }
            v19 -= 2;
          }
          while (v19 * 16);
          int v13 = *(__n128 **)a1;
        }
      }
      int v20 = v33;
      if (v13 != v11) {
        free(v13);
      }
      *(void *)a1 = v5;
      *(_DWORD *)(a1 + 12) = v20;
    }
  }
  uint64_t v6 = &v5[2 * *(unsigned int *)(a1 + 8)];
  __n128 result = *v2;
  v6[1].n128_u64[0] = v2[1].n128_u64[0];
  *uint64_t v6 = result;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  v2->n128_u64[0] = 0;
  v6[1].n128_u64[1] = v2[1].n128_u64[1];
  ++*(_DWORD *)(a1 + 8);
  return result;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, const char *a2)
{
  size_t v2 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    size_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    size_t v3 = v2;
  }
  return llvm::raw_ostream::write(a1, a2, v3);
}

BOOL llvm::cl::ParseCommandLineOptions(llvm *a1, void *a2, uint64_t a3, uint64_t a4, llvm::raw_ostream *a5, const char *a6, int a7)
{
  int v11 = (int)a1;
  uint64_t v325 = *MEMORY[0x1E4F143B8];
  initCommonOptions(a1);
  uint64_t v306 = v308;
  int v13 = v302;
  v299[0] = 0;
  v299[1] = 0;
  std::string v300 = v302;
  uint64_t v301 = 0x400000000;
  uint64_t v303 = v305;
  uint64_t v304 = 0;
  v305[0] = 0;
  v305[1] = 1;
  int64_t v281 = v299;
  v308[0] = *a2;
  uint64_t v307 = 0x1400000001;
  if (!a6)
  {
    int v17 = 1;
    if (v11 < 2) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  size_t v14 = strlen(a6);
  llvm::sys::Process::GetEnv(a6, v14, (uint64_t)&__p);
  if (v323)
  {
    char v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    unint64_t v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    llvm::cl::TokenizeGNUCommandLine((uint64_t)v15, v16, &v281, (uint64_t)&v306, 0);
    if (v323)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  int v17 = v307;
  if (v11 >= 2)
  {
LABEL_15:
    uint64_t v18 = a2 + 1;
    uint64_t v19 = v11 - 1;
    do
    {
      uint64_t v20 = *v18;
      if (v17 >= HIDWORD(v307))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v308, v17 + 1, 8);
        int v17 = v307;
      }
      *((void *)v306 + v17) = v20;
      int v17 = v307 + 1;
      LODWORD(v307) = v307 + 1;
      ++v18;
      --v19;
    }
    while (v19);
  }
LABEL_19:
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  atomic_ullong v21 = qword_1EB215BF8[0];
  }
  uint64_t v22 = v306;
  *(void *)(qword_1EB215BF8[0] + 24) = a3;
  *(void *)(v21 + 32) = a4;
  atomic_ullong v275 = v21;
  int64_t v273 = a5;
  if (!a5) {
    int64_t v273 = (llvm::raw_ostream *)llvm::errs(v12);
  }
  float32x4_t v319 = v321;
  uint64_t v320 = 0x1400000000;
  if ((unint64_t)(8 * v17) >= 0xA1)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v321, v17, 8);
    unsigned int v23 = v320;
    if (!v17) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  unsigned int v23 = 0;
  if (v17)
  {
LABEL_27:
    memcpy((char *)v319 + 8 * v23, v22, 8 * v17);
    unsigned int v23 = v320;
  }
LABEL_28:
  LODWORD(v320) = v23 + v17;
  v312[1] = 0;
  v312[0] = 0;
  int8x16_t v313 = v315;
  uint64_t v314 = 0x400000000;
  v316 = v318;
  uint64_t v317 = 0;
  v318[0] = 0;
  v318[1] = 1;
  v288[0] = v312;
  v288[1] = llvm::cl::TokenizeGNUCommandLine;
  llvm::vfs::getRealFileSystem(&__p);
  std::string::size_type v24 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0]
    && atomic_fetch_add((atomic_uint *volatile)(__p.__r_.__value_.__r.__words[0] + 8), 0xFFFFFFFF) == 1)
  {
    (*(void (**)(std::string::size_type))(*(void *)v24 + 8))(v24);
  }
  v288[2] = v24;
  long long v289 = 0u;
  memset(v290, 0, sizeof(v290));
  llvm::cl::ExpansionContext::expandResponseFiles((uint64_t)v288, (uint64_t)&v319, &v309);
  atomic_ullong v27 = v275;
  if (v309)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v309;
    uint64_t v309 = 0;
    llvm::toString(&__dst, &__p, v25, v26);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v30 = llvm::raw_ostream::write(v273, (const char *)p_p, size);
    uint64_t v31 = (unsigned char *)*((void *)v30 + 4);
    if ((unint64_t)v31 >= *((void *)v30 + 3))
    {
      llvm::raw_ostream::write(v30, 10);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_44:
      }
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      *((void *)v30 + 4) = v31 + 1;
      *uint64_t v31 = 10;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_44;
      }
    }
    if (__dst.__r_.__value_.__r.__words[0]) {
      (*(void (**)(std::string::size_type))(*(void *)__dst.__r_.__value_.__l.__data_ + 8))(__dst.__r_.__value_.__r.__words[0]);
    }
    if (v309) {
      (*(void (**)(void *))(*(void *)v309 + 8))(v309);
    }
    BOOL v33 = 0;
    goto LABEL_432;
  }
  int v279 = v320;
  unint64_t v268 = v319;
  if (*(void *)v319) {
    int v32 = (unsigned __int8 *)strlen(*(const char **)v319);
  }
  else {
    int v32 = 0;
  }
  std::string::size_type OptionPred = llvm::sys::path::filename(*(unsigned __int8 **)v319, v32, 0);
  if (v35 > 0x7FFFFFFFFFFFFFF7) {
LABEL_510:
  }
    abort();
  uint64_t v36 = (const void *)OptionPred;
  std::string::size_type v37 = v35;
  if (v35 >= 0x17)
  {
    uint64_t v40 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v40 = v35 | 7;
    }
    uint64_t v41 = v40 + 1;
    size_t v42 = (const void *)OptionPred;
    uint64_t v43 = (std::string *)operator new(v40 + 1);
    uint64_t v36 = v42;
    char v38 = v43;
    __p.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    __p.__r_.__value_.__l.__size_ = v37;
LABEL_61:
    std::string::size_type OptionPred = (std::string::size_type)memmove(v38, v36, v37);
    v38->__r_.__value_.__s.__data_[v37] = 0;
    if ((*(char *)(v275 + 23) & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_62;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v35;
  char v38 = &__p;
  if (v35) {
    goto LABEL_61;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  if ((*(char *)(v275 + 23) & 0x80000000) == 0) {
    goto LABEL_55;
  }
LABEL_62:
  operator delete(*(void **)v275);
LABEL_55:
  *(std::string *)atomic_ullong v275 = __p;
  if (atomic_load_explicit(llvm::cl::TopLevelSubCommand, memory_order_acquire))
  {
    uint64_t v39 = llvm::cl::TopLevelSubCommand[0];
    if (v279 < 2) {
      goto LABEL_65;
    }
  }
  else
  {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    uint64_t v39 = llvm::cl::TopLevelSubCommand[0];
    if (v279 < 2) {
      goto LABEL_65;
    }
  }
  __int16 v44 = (unsigned char *)*((void *)v268 + 1);
  if (*v44 != 45)
  {
    std::string::size_type OptionPred = strlen(*((const char **)v268 + 1));
    if (OptionPred)
    {
      size_t v192 = OptionPred;
      uint64_t v193 = *(void *)(v275 + 280);
      uint64_t v194 = 288;
      if (v193 == *(void *)(v275 + 272)) {
        uint64_t v194 = 292;
      }
      uint64_t v195 = *(unsigned int *)(v275 + v194);
      if (v195)
      {
        uint64_t v196 = 8 * v195;
        uint64_t v197 = *(atomic_ullong **)(v275 + 280);
        while ((unint64_t)*v197 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v197;
          v196 -= 8;
          if (!v196) {
            goto LABEL_494;
          }
        }
      }
      else
      {
        uint64_t v197 = *(atomic_ullong **)(v275 + 280);
      }
      unint64_t v245 = (atomic_ullong *)(v193 + 8 * v195);
      if (v197 != v245)
      {
        atomic_ullong v246 = *v197;
        unint64_t v247 = (llvm::ManagedStaticBase *)llvm::cl::AllSubCommands;
        BOOL v248 = &qword_1EB215F30[26];
LABEL_482:
        if (!atomic_load_explicit((atomic_ullong *volatile)v247, memory_order_acquire))
        {
          unint64_t v249 = v248;
          BOOL v250 = v247;
          llvm::ManagedStaticBase::RegisterManagedStatic(v247, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
          unint64_t v247 = v250;
          BOOL v248 = v249;
          int v13 = v302;
        }
        if (v246 != v248[471])
        {
          uint64_t v251 = *(void *)(v246 + 8);
          if (v251 && v251 == v192)
          {
            BOOL v253 = v248;
            unint64_t v254 = v247;
            std::string::size_type OptionPred = memcmp(*(const void **)v246, v44, v192);
            unint64_t v247 = v254;
            int v13 = v302;
            BOOL v248 = v253;
            if (!OptionPred)
            {
LABEL_497:
              if (!atomic_load_explicit(llvm::cl::TopLevelSubCommand, memory_order_acquire)) {
                llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
              }
              uint64_t v39 = v246;
              if (v246 == llvm::cl::TopLevelSubCommand[0]) {
                signed int v45 = 1;
              }
              else {
                signed int v45 = 2;
              }
              atomic_ullong v27 = v275;
              if (atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
                goto LABEL_67;
              }
              goto LABEL_66;
            }
          }
        }
        while (++v197 != v245)
        {
          atomic_ullong v246 = *v197;
          if ((unint64_t)*v197 < 0xFFFFFFFFFFFFFFFELL)
          {
            if (v197 != v245) {
              goto LABEL_482;
            }
            break;
          }
        }
      }
    }
LABEL_494:
    if (!atomic_load_explicit(llvm::cl::TopLevelSubCommand, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    }
    atomic_ullong v246 = llvm::cl::TopLevelSubCommand[0];
    goto LABEL_497;
  }
LABEL_65:
  signed int v45 = 1;
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
LABEL_66:
  }
LABEL_67:
  *(void *)(qword_1EB215BF8[0] + 336) = v39;
  uint64_t v46 = *(unsigned int *)(v27 + 72);
  uint64_t v47 = (const char **)v268;
  if (v46)
  {
    std::error_code v48 = *(llvm::cl::Option ***)(v27 + 64);
    uint64_t v49 = 8 * v46;
    do
    {
      size_t v50 = *v48++;
      v49 -= 8;
    }
    while (v49);
  }
  uint64_t v51 = *(unsigned int *)(v39 + 40);
  uint64_t v280 = v39;
  if (!v51)
  {
    int v269 = 0;
    char v265 = 0;
    unsigned int v278 = 0;
    goto LABEL_107;
  }
  uint64_t v52 = 0;
  unsigned int v278 = 0;
  char v53 = 0;
  int v54 = 0;
  uint64_t v55 = 8 * v51;
  do
  {
    uint64_t v56 = *(void *)(*(void *)(v39 + 32) + v52);
    if ((*(_WORD *)(v56 + 10) & 6) == 2)
    {
      ++v278;
      goto LABEL_73;
    }
    if (*(void *)(v39 + 152))
    {
      unsigned int v57 = *(_DWORD *)(v39 + 40);
      if (v57 >= 2) {
        int v54 = 1;
      }
      if (!a5 && v57 >= 2)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"error - this positional option will never be matched,"
                                                                   " because it does not Require a value, and a cl::Consu"
                                                                   "meAfter option is active!";
        __int16 v324 = 259;
        uint64_t v58 = (llvm::raw_ostream *)llvm::errs((llvm *)OptionPred);
        std::string::size_type OptionPred = llvm::cl::Option::error((void *)v56, (llvm::Twine *)&__p, 0, 0, v58);
LABEL_81:
        int v54 = 1;
      }
    }
    else if ((v53 & 1) != 0 && !*(void *)(v56 + 24))
    {
      if (!a5)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"error - option can never match, because another posit"
                                                                   "ional argument will match an unbounded number of valu"
                                                                   "es, and this option does not require a value!";
        __int16 v324 = 259;
        char v59 = (llvm::raw_ostream *)llvm::errs((llvm *)OptionPred);
        llvm::cl::Option::error((void *)v56, (llvm::Twine *)&__p, 0, 0, v59);
      }
      int v60 = *(char *)(v275 + 23);
      if (v60 >= 0) {
        uint64_t v61 = (const char *)v275;
      }
      else {
        uint64_t v61 = *(const char **)v275;
      }
      if (v60 >= 0) {
        size_t v62 = *(unsigned __int8 *)(v275 + 23);
      }
      else {
        size_t v62 = *(void *)(v275 + 8);
      }
      long long v63 = llvm::raw_ostream::write(v273, v61, v62);
      size_t v64 = v63;
      size_t v65 = (void *)*((void *)v63 + 4);
      if (*((void *)v63 + 3) - (void)v65 > 0x1CuLL)
      {
        qmemcpy(v65, ": CommandLine Error: Option '", 29);
        long long v66 = (_DWORD *)(*((void *)v63 + 4) + 29);
        *((void *)v64 + 4) = v66;
        uint64_t v67 = *(const void **)(v56 + 16);
        size_t v68 = *(void *)(v56 + 24);
        if (v68 > *((void *)v64 + 3) - (void)v66) {
          goto LABEL_99;
        }
LABEL_94:
        if (v68)
        {
          memcpy(v66, v67, v68);
          long long v66 = (_DWORD *)(*((void *)v64 + 4) + v68);
          *((void *)v64 + 4) = v66;
        }
        uint64_t v39 = v280;
        if (*((void *)v64 + 3) - (void)v66 <= 0x13uLL) {
          goto LABEL_97;
        }
LABEL_100:
        v66[4] = 169963637;
        *(_OWORD *)long long v66 = *(_OWORD *)"' is all messed up!\n";
        *((void *)v64 + 4) += 20;
      }
      else
      {
        size_t v64 = llvm::raw_ostream::write(v63, ": CommandLine Error: Option '", 0x1DuLL);
        long long v66 = (_DWORD *)*((void *)v64 + 4);
        uint64_t v67 = *(const void **)(v56 + 16);
        size_t v68 = *(void *)(v56 + 24);
        if (v68 <= *((void *)v64 + 3) - (void)v66) {
          goto LABEL_94;
        }
LABEL_99:
        size_t v64 = llvm::raw_ostream::write(v64, (const char *)v67, v68);
        long long v66 = (_DWORD *)*((void *)v64 + 4);
        uint64_t v39 = v280;
        if (*((void *)v64 + 3) - (void)v66 > 0x13uLL) {
          goto LABEL_100;
        }
LABEL_97:
        llvm::raw_ostream::write(v64, "' is all messed up!\n", 0x14uLL);
      }
      std::string::size_type OptionPred = (std::string::size_type)llvm::raw_ostream::operator<<(v273, *(unsigned int *)(v39 + 40));
      goto LABEL_81;
    }
LABEL_73:
    v53 |= (*(_WORD *)(v56 + 10) & 5) == 1;
    v52 += 8;
  }
  while (v55 != v52);
  int v269 = v54;
  BOOL v69 = (v53 & 1) != 0 || *(void *)(v39 + 152) != 0;
  char v265 = v69;
  int v13 = v302;
  atomic_ullong v27 = v275;
  uint64_t v47 = (const char **)v268;
LABEL_107:
  uint64_t v309 = v311;
  uint64_t v310 = 0x400000000;
  int v287 = v45;
  if (v45 >= v279)
  {
    unsigned int v175 = 0;
    unsigned int v176 = v278;
    if (!v278) {
      goto LABEL_357;
    }
LABEL_347:
    int v177 = *(char *)(v27 + 23);
    if (v177 >= 0) {
      uint64_t v178 = (const char *)v27;
    }
    else {
      uint64_t v178 = *(const char **)v27;
    }
    if (v177 >= 0) {
      size_t v179 = *(unsigned __int8 *)(v27 + 23);
    }
    else {
      size_t v179 = *(void *)(v27 + 8);
    }
    uint64_t v180 = llvm::raw_ostream::write(v273, v178, v179);
    uint64_t v181 = (void *)*((void *)v180 + 4);
    if (*((void *)v180 + 3) - (void)v181 > 0x39uLL)
    {
      qmemcpy(v181, ": Not enough positional command line arguments specified!\n", 58);
      uint64_t v198 = *((void *)v180 + 3);
      uint64_t v182 = (void *)(*((void *)v180 + 4) + 58);
      *((void *)v180 + 4) = v182;
      if ((unint64_t)(v198 - (void)v182) > 0x15) {
        goto LABEL_355;
      }
    }
    else
    {
      uint64_t v180 = llvm::raw_ostream::write(v180, ": Not enough positional command line arguments specified!\n", 0x3AuLL);
      uint64_t v182 = (void *)*((void *)v180 + 4);
      if (*((void *)v180 + 3) - (void)v182 > 0x15uLL)
      {
LABEL_355:
        qmemcpy(v182, "Must specify at least ", 22);
        *((void *)v180 + 4) += 22;
        goto LABEL_376;
      }
    }
    uint64_t v180 = llvm::raw_ostream::write(v180, "Must specify at least ", 0x16uLL);
LABEL_376:
    unint64_t v199 = llvm::raw_ostream::operator<<(v180, v176);
    long long v200 = v199;
    uint64_t v201 = *((void *)v199 + 4);
    if ((unint64_t)(*((void *)v199 + 3) - v201) > 0x13)
    {
      *(_DWORD *)(v201 + 16) = 1953391981;
      *(_OWORD *)uint64_t v201 = *(_OWORD *)" positional argument";
      std::string::size_type OptionPred = *((void *)v199 + 4) + 20;
      *((void *)v200 + 4) = OptionPred;
      size_t v202 = v176 > 1;
      if (*((void *)v200 + 3) - OptionPred >= v202)
      {
LABEL_378:
        if (v176 >= 2)
        {
          memcpy((void *)OptionPred, "s", v202);
          std::string::size_type OptionPred = *((void *)v200 + 4) + v202;
          *((void *)v200 + 4) = OptionPred;
        }
        if (*((void *)v200 + 3) - OptionPred <= 6)
        {
LABEL_381:
          std::string::size_type OptionPred = (std::string::size_type)llvm::raw_ostream::write(v200, ": See: ", 7uLL);
          long long v200 = (llvm::raw_ostream *)OptionPred;
          uint64_t v203 = *v47;
          if (*v47) {
            goto LABEL_382;
          }
          goto LABEL_402;
        }
LABEL_398:
        *(_DWORD *)(OptionPred + 3) = 540697957;
        *(_DWORD *)std::string::size_type OptionPred = 1699946554;
        *((void *)v200 + 4) += 7;
        uint64_t v203 = *v47;
        if (*v47) {
          goto LABEL_382;
        }
LABEL_402:
        short float v212 = (void *)*((void *)v200 + 4);
        if (*((void *)v200 + 3) - (void)v212 > 7uLL)
        {
          *short float v212 = 0xA706C65682D2D20;
          *((void *)v200 + 4) += 8;
        }
        else
        {
          std::string::size_type OptionPred = (std::string::size_type)llvm::raw_ostream::write(v200, " --help\n", 8uLL);
        }
        char v188 = 1;
        goto LABEL_406;
      }
    }
    else
    {
      long long v200 = llvm::raw_ostream::write(v199, " positional argument", 0x14uLL);
      std::string::size_type OptionPred = *((void *)v200 + 4);
      size_t v202 = v176 > 1;
      if (*((void *)v200 + 3) - OptionPred >= v202) {
        goto LABEL_378;
      }
    }
    if (v176 <= 1) {
      uint64_t v211 = "";
    }
    else {
      uint64_t v211 = "s";
    }
    long long v200 = llvm::raw_ostream::write(v200, v211, v202);
    std::string::size_type OptionPred = *((void *)v200 + 4);
    if (*((void *)v200 + 3) - OptionPred <= 6) {
      goto LABEL_381;
    }
    goto LABEL_398;
  }
  int64_t v277 = 0;
  char v274 = 0;
  uint64_t v264 = v39 + 128;
  uint64_t v70 = &__p.__r_.__value_.__s.__data_[16];
  BOOL v263 = v47 + 1;
  while (2)
  {
    memset(&v286, 0, sizeof(v286));
    int64_t v284 = 0;
    int64_t v285 = 0;
    int64_t v282 = (int8x16_t *)"";
    int64_t v283 = 0;
    uint64_t v71 = (char *)v47[v45];
    if (*v71 == 45)
    {
      int v72 = v71[1];
      if (!((v71[1] == 0) | v274 & 1))
      {
        if (v72 == 45 && !v71[2])
        {
          int v74 = 9;
          char v274 = 1;
          if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_115;
          }
          goto LABEL_114;
        }
        if (v277 && (v277[5] & 0x400) != 0)
        {
          unint64_t v101 = (const unsigned __int8 *)strlen(v71 + 1);
          int64_t v282 = (int8x16_t *)(v71 + 1);
          int64_t v283 = v101;
          BOOL v102 = v72 != 45 || v101 == 0;
          char v103 = v102;
          if (!v102)
          {
            int64_t v282 = (int8x16_t *)(v71 + 2);
            int64_t v283 = v101 - 1;
          }
          if (!OptionPred || (long long v91 = (unsigned __int16 *)OptionPred, (*(_WORD *)(OptionPred + 10) & 0x180) != 0x80))
          {
            char v104 = (char *)v47[v287];
            if (v104) {
              size_t v105 = strlen(v47[v287]);
            }
            else {
              size_t v105 = 0;
            }
            LODWORD(__p.__r_.__value_.__l.__data_) = v287;
            std::string::size_type OptionPred = ProvideOption(v277, *((void *)v277 + 2), *((void *)v277 + 3), v104, v105, 0, 0, (unsigned int *)&__p);
            char v274 = 0;
            int v74 = 9;
            if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_115;
            }
            goto LABEL_114;
          }
          goto LABEL_150;
        }
        std::string v88 = (const unsigned __int8 *)strlen(v71 + 1);
        int64_t v282 = (int8x16_t *)(v71 + 1);
        int64_t v283 = v88;
        BOOL v89 = v72 != 45 || v88 == 0;
        int v90 = v89;
        if (!v89)
        {
          int64_t v282 = (int8x16_t *)(v71 + 2);
          int64_t v283 = v88 - 1;
        }
        if (OptionPred) {
          goto LABEL_149;
        }
        if (atomic_load_explicit(llvm::cl::TopLevelSubCommand, memory_order_acquire))
        {
          if (v39 == llvm::cl::TopLevelSubCommand[0]) {
            goto LABEL_200;
          }
        }
        else
        {
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
          if (v39 == llvm::cl::TopLevelSubCommand[0])
          {
LABEL_200:
            if ((v90 | a7 ^ 1) != 1 || v283 == (const unsigned __int8 *)1) {
              goto LABEL_257;
            }
            unint64_t v109 = v70;
            uint64_t v110 = v13;
            __dst.__r_.__value_.__r.__words[0] = 0;
            std::string::size_type OptionPred = getOptionPred(v282, v283, (const unsigned __int8 **)&__dst, (uint64_t (*)(void))isPrefixedOrGrouping, v264);
            if (!OptionPred) {
              goto LABEL_256;
            }
            long long v91 = (unsigned __int16 *)OptionPred;
            while (1)
            {
              uint64_t v112 = v282;
              unint64_t v111 = v283;
              if ((unint64_t)v283 >= __dst.__r_.__value_.__r.__words[0]) {
                int v113 = &v283[-__dst.__r_.__value_.__r.__words[0]];
              }
              else {
                int v113 = 0;
              }
              if ((unint64_t)v283 >= __dst.__r_.__value_.__r.__words[0]) {
                unsigned int v114 = (const unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
              }
              else {
                unsigned int v114 = v283;
              }
              int64_t v283 = v114;
              if (__dst.__r_.__value_.__r.__words[0] >= (unint64_t)v111)
              {
                unsigned int v115 = 0;
                goto LABEL_254;
              }
              unsigned int v115 = (int8x16_t *)((char *)v282 + __dst.__r_.__value_.__r.__words[0]);
              unsigned int v116 = v91[5];
              int v117 = (v116 >> 7) & 3;
              if (v117 == 3) {
                goto LABEL_254;
              }
              if (v117 == 2) {
                break;
              }
              if (v115->i8[0] == 61) {
                goto LABEL_253;
              }
              unsigned __int32 v118 = (llvm *)((v116 >> 3) & 3);
              if (!v118) {
                unsigned __int32 v118 = (llvm *)(*(uint64_t (**)(unsigned __int16 *))(*(void *)v91 + 8))(v91);
              }
              if (v118 == 2)
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"may not occur within a group!";
                __int16 v324 = 259;
                int64_t v128 = (llvm::raw_ostream *)llvm::errs(v118);
                llvm::cl::Option::error(v91, (llvm::Twine *)&__p, 0, 0, v128);
                int v269 = 1;
LABEL_256:
                int v13 = v110;
                uint64_t v39 = v280;
                uint64_t v47 = (const char **)v268;
                uint64_t v70 = v109;
LABEL_257:
                uint64_t v93 = *(unsigned int *)(v39 + 88);
                if (v93) {
                  goto LABEL_335;
                }
                int64_t v297 = v282;
                int64_t v298 = v283;
                unint64_t v266 = v13;
                if (!v283) {
                  goto LABEL_333;
                }
                __p.__r_.__value_.__s.__data_[0] = 61;
                unint64_t v129 = llvm::StringRef::find((uint64_t *)&v297, (char *)&__p, 1uLL, 0);
                if (v129 == -1)
                {
                  BOOL v270 = 0;
                  std::string::size_type v267 = 0;
                  unint64_t v259 = v298;
                  unint64_t v260 = v297;
                }
                else
                {
                  int64_t v130 = v129 >= (unint64_t)v298 ? v298 : (const unsigned __int8 *)v129;
                  unint64_t v259 = v130;
                  unint64_t v260 = v297;
                  uint64_t v131 = (unint64_t)v298 >= v129 + 1 ? v129 + 1 : (uint64_t)v298;
                  std::string::size_type v267 = (std::string::size_type)v297->u64 + v131;
                  BOOL v270 = &v298[-v131];
                }
                int v132 = *(void **)(v39 + 128);
                uint64_t v133 = *(unsigned int *)(v39 + 136);
                if (v133)
                {
                  int8x16_t v134 = *(uint64_t **)(v39 + 128);
                  if (*v132) {
                    BOOL v135 = *v132 == -8;
                  }
                  else {
                    BOOL v135 = 1;
                  }
                  if (v135)
                  {
                    do
                    {
                      uint64_t v137 = v134[1];
                      ++v134;
                      uint64_t v136 = v137;
                      if (v137) {
                        BOOL v138 = v136 == -8;
                      }
                      else {
                        BOOL v138 = 1;
                      }
                    }
                    while (v138);
                  }
                }
                else
                {
                  int8x16_t v134 = *(uint64_t **)(v39 + 128);
                }
                uint64_t v139 = &v132[v133];
                if (v134 == v139)
                {
LABEL_333:
                  uint64_t v92 = 0;
LABEL_334:
                  int v13 = v266;
                  uint64_t v93 = *(unsigned int *)(v39 + 88);
                  if (!v93) {
                    goto LABEL_158;
                  }
                  goto LABEL_335;
                }
                uint64_t v92 = 0;
                unsigned int v140 = 0;
                uint64_t v141 = *v134;
                BOOL v261 = v139;
                std::string::pointer v262 = v70;
                while (2)
                {
                  uint64_t v142 = *(void *)(v141 + 8);
                  if ((*(_WORD *)(v142 + 10) & 0x60) == 0x40) {
                    goto LABEL_327;
                  }
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
                  __p.__r_.__value_.__l.__size_ = 0x1000000000;
                  (*(void (**)(uint64_t, std::string *))(*(void *)v142 + 72))(v142, &__p);
                  uint64_t v143 = *(void *)(v142 + 24);
                  if (v143)
                  {
                    uint64_t v144 = v142;
                    uint64_t v145 = *(void *)(v142 + 16);
                    uint64_t v146 = LODWORD(__p.__r_.__value_.__r.__words[1]);
                    if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(__p.__r_.__value_.__r.__words[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v70, LODWORD(__p.__r_.__value_.__r.__words[1]) + 1, 16);
                      uint64_t v146 = LODWORD(__p.__r_.__value_.__r.__words[1]);
                    }
                    int8x16_t v147 = (void *)(__p.__r_.__value_.__r.__words[0] + 16 * v146);
                    *int8x16_t v147 = v145;
                    v147[1] = v143;
                    ++LODWORD(__p.__r_.__value_.__r.__words[1]);
                    uint64_t v142 = v144;
                  }
                  int v148 = (*(unsigned __int16 *)(v142 + 10) >> 3) & 3;
                  if (v148)
                  {
                    uint64_t v149 = LODWORD(__p.__r_.__value_.__r.__words[1]);
                    if (!LODWORD(__p.__r_.__value_.__r.__words[1])) {
                      goto LABEL_324;
                    }
                  }
                  else
                  {
                    int v148 = (*(uint64_t (**)(uint64_t))(*(void *)v142 + 8))(v142);
                    uint64_t v149 = LODWORD(__p.__r_.__value_.__r.__words[1]);
                    if (!LODWORD(__p.__r_.__value_.__r.__words[1])) {
                      goto LABEL_324;
                    }
                  }
                  uint64_t v272 = v142;
                  std::string::size_type v150 = __p.__r_.__value_.__r.__words[0];
                  if (v148 == 3) {
                    unint64_t v151 = (unint64_t)v298;
                  }
                  else {
                    unint64_t v151 = (unint64_t)v259;
                  }
                  if (v148 == 3) {
                    uint64_t v152 = (unsigned __int8 *)v297;
                  }
                  else {
                    uint64_t v152 = (unsigned __int8 *)v260;
                  }
                  if (v148 != 3 && v270 != 0)
                  {
                    uint64_t v162 = 16 * v149;
                    do
                    {
                      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v150;
                      unsigned int v164 = llvm::StringRef::edit_distance((uint64_t)&__dst, v152, v151, 1, v140);
                      unsigned int v165 = v164;
                      if (!v92 || v164 < v140)
                      {
                        uint64_t v163 = *(void *)(v150 + 8);
                        v291[0] = *(void *)v150;
                        v291[1] = v163;
                        v291[2] = "=";
                        __int16 v292 = 773;
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v291;
                        __dst.__r_.__value_.__r.__words[2] = v267;
                        int64_t v294 = v270;
                        __int16 v295 = 1282;
                        llvm::Twine::str((llvm::Twine *)&__dst, &v296);
                        if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v286.__r_.__value_.__l.__data_);
                        }
                        std::string v286 = v296;
                        unsigned int v140 = v165;
                        uint64_t v92 = v272;
                      }
                      v150 += 16;
                      v162 -= 16;
                    }
                    while (v162);
LABEL_324:
                    uint64_t v70 = v262;
                    if (__p.__r_.__value_.__l.__data_ != v262) {
                      free(__p.__r_.__value_.__l.__data_);
                    }
                    atomic_ullong v27 = v275;
                    uint64_t v39 = v280;
                    uint64_t v47 = (const char **)v268;
                    uint64_t v139 = v261;
                    do
                    {
LABEL_327:
                      uint64_t v166 = v134[1];
                      ++v134;
                      uint64_t v141 = v166;
                      if (v166) {
                        BOOL v167 = v141 == -8;
                      }
                      else {
                        BOOL v167 = 1;
                      }
                    }
                    while (v167);
                    if (v134 == v139) {
                      goto LABEL_334;
                    }
                    continue;
                  }
                  break;
                }
                uint64_t v154 = 16 * v149;
                while (2)
                {
                  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v150;
                  unsigned int v155 = llvm::StringRef::edit_distance((uint64_t)&__dst, v152, v151, 1, v140);
                  unsigned int v156 = v155;
                  if (v92 && v155 >= v140) {
                    goto LABEL_305;
                  }
                  std::string::size_type v157 = *(void *)(v150 + 8);
                  if (v157 > 0x7FFFFFFFFFFFFFF7) {
                    goto LABEL_510;
                  }
                  long long v158 = *(const void **)v150;
                  if (v157 >= 0x17)
                  {
                    uint64_t v160 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v157 | 7) != 0x17) {
                      uint64_t v160 = v157 | 7;
                    }
                    uint64_t v161 = v160 + 1;
                    p_dst = (std::string *)operator new(v160 + 1);
                    __dst.__r_.__value_.__l.__size_ = v157;
                    __dst.__r_.__value_.__r.__words[2] = v161 | 0x8000000000000000;
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                  }
                  else
                  {
                    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(v150 + 8);
                    p_dst = &__dst;
                    if (!v157)
                    {
                      __dst.__r_.__value_.__s.__data_[0] = 0;
                      if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_304;
                      }
LABEL_316:
                      operator delete(v286.__r_.__value_.__l.__data_);
LABEL_304:
                      std::string v286 = __dst;
                      unsigned int v140 = v156;
                      uint64_t v92 = v272;
LABEL_305:
                      v150 += 16;
                      v154 -= 16;
                      if (!v154) {
                        goto LABEL_324;
                      }
                      continue;
                    }
                  }
                  break;
                }
                memmove(p_dst, v158, v157);
                p_dst->__r_.__value_.__s.__data_[v157] = 0;
                if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_316;
                }
                goto LABEL_304;
              }
              LODWORD(__p.__r_.__value_.__l.__data_) = 0;
              v269 |= ProvideOption(v91, (uint64_t)v112, (uint64_t)v114, 0, 0, 0, 0, (unsigned int *)&__p);
              int64_t v282 = v115;
              int64_t v283 = v113;
              std::string::size_type OptionPred = getOptionPred(v115, v113, (const unsigned __int8 **)&__dst, (uint64_t (*)(void))isGrouping, v264);
              long long v91 = (unsigned __int16 *)OptionPred;
              if (!OptionPred) {
                goto LABEL_256;
              }
            }
            if (v115->i8[0] == 61)
            {
LABEL_253:
              unsigned int v115 = (int8x16_t *)((char *)v115 + 1);
              --v113;
            }
LABEL_254:
            int64_t v284 = v115;
            int64_t v285 = v113;
            int v13 = v110;
            uint64_t v39 = v280;
            uint64_t v47 = (const char **)v268;
            uint64_t v70 = v109;
LABEL_150:
            if ((v91[5] & 0x180) == 0x80)
            {
              char v274 = 0;
              if ((v91[5] & 0x400) != 0 && v285)
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"This argument does not take a value.\n"
                                                                           "\tInstead, it consumes any positional argumen"
                                                                           "ts until the next recognized option.";
                __int16 v324 = 259;
                std::string::size_type OptionPred = llvm::cl::Option::error(v91, (llvm::Twine *)&__p, 0, 0, v273);
                char v274 = 0;
                int v74 = 0;
                int v269 = 1;
                int64_t v277 = v91;
                if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_115;
                }
              }
              else
              {
                int64_t v277 = v91;
                int v74 = 0;
                if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_115;
                }
              }
            }
            else
            {
              std::string::size_type OptionPred = ProvideOption(v91, (uint64_t)v282, (uint64_t)v283, v284->i8, (size_t)v285, v279, (uint64_t)v47, (unsigned int *)&v287);
              char v274 = 0;
              int v74 = 0;
              v269 |= OptionPred;
              if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_115;
              }
            }
            goto LABEL_114;
          }
        }
        if (!atomic_load_explicit(llvm::cl::TopLevelSubCommand, memory_order_acquire)) {
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
        }
        if (OptionPred)
        {
LABEL_149:
          long long v91 = (unsigned __int16 *)OptionPred;
          goto LABEL_150;
        }
        goto LABEL_200;
      }
    }
    if (!v277)
    {
      if (*(_DWORD *)(v39 + 40))
      {
        std::string::size_type OptionPred = strlen(v47[v45]);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v47[v45];
        __p.__r_.__value_.__l.__size_ = OptionPred;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = v45;
        unint64_t v75 = (char *)v309;
        if (v310 >= HIDWORD(v310))
        {
          unint64_t v173 = v310 + 1;
          if (v309 <= &__p && (char *)v309 + 24 * v310 > (char *)&__p)
          {
            int64_t v174 = (char *)&__p - (unsigned char *)v309;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v309, v311, v173, 24);
            unint64_t v75 = (char *)v309;
            unint64_t v76 = (std::string *)((char *)v309 + v174);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v309, v311, v173, 24);
            unint64_t v76 = &__p;
            unint64_t v75 = (char *)v309;
          }
        }
        else
        {
          unint64_t v76 = &__p;
        }
        std::string v77 = &v75[24 * v310];
        long long v78 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        *((void *)v77 + 2) = *((void *)&v76->__r_.__value_.__l + 2);
        *(_OWORD *)std::string v77 = v78;
        unsigned int v79 = v310 + 1;
        LODWORD(v310) = v79;
        if (v79 >= v278 && *(void *)(v280 + 152))
        {
          int v80 = v45 + 1;
          if (v45 + 1 < v279)
          {
            __int16 v81 = (const char **)&v263[v45];
            do
            {
              if (*v81) {
                std::string::size_type OptionPred = strlen(*v81);
              }
              else {
                std::string::size_type OptionPred = 0;
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*v81;
              __p.__r_.__value_.__l.__size_ = OptionPred;
              LODWORD(__p.__r_.__value_.__r.__words[2]) = v80;
              uint64_t v82 = (char *)v309;
              if (v79 >= HIDWORD(v310))
              {
                unint64_t v86 = v79 + 1;
                if (v309 <= &__p && (char *)v309 + 24 * v79 > (char *)&__p)
                {
                  int64_t v87 = (char *)&__p - (unsigned char *)v309;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v309, v311, v86, 24);
                  uint64_t v82 = (char *)v309;
                  std::string v83 = (std::string *)((char *)v309 + v87);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v309, v311, v86, 24);
                  std::string v83 = &__p;
                  uint64_t v82 = (char *)v309;
                }
              }
              else
              {
                std::string v83 = &__p;
              }
              std::error_code v84 = &v82[24 * v310];
              long long v85 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
              *((void *)v84 + 2) = *((void *)&v83->__r_.__value_.__l + 2);
              *(_OWORD *)std::error_code v84 = v85;
              unsigned int v79 = v310 + 1;
              LODWORD(v310) = v310 + 1;
              ++v80;
              ++v81;
            }
            while (v279 != v80);
            int v80 = v279;
          }
          int64_t v277 = 0;
          int v287 = v80;
          int v74 = 7;
          uint64_t v39 = v280;
          if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_115;
          }
        }
        else
        {
          int64_t v277 = 0;
          int v74 = 9;
          uint64_t v39 = v280;
          if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_115;
          }
        }
LABEL_114:
        operator delete(v286.__r_.__value_.__l.__data_);
        goto LABEL_115;
      }
      uint64_t v92 = 0;
      uint64_t v93 = *(unsigned int *)(v39 + 88);
      if (!v93)
      {
LABEL_158:
        int v94 = *(char *)(v27 + 23);
        if (v94 >= 0) {
          long long v95 = (const char *)v27;
        }
        else {
          long long v95 = *(const char **)v27;
        }
        if (v94 >= 0) {
          size_t v96 = *(unsigned __int8 *)(v27 + 23);
        }
        else {
          size_t v96 = *(void *)(v27 + 8);
        }
        std::string::size_type OptionPred = (std::string::size_type)llvm::raw_ostream::write(v273, v95, v96);
        uint64_t v97 = (llvm::raw_ostream *)OptionPred;
        uint64_t v98 = *(void **)(OptionPred + 32);
        if (*(void *)(OptionPred + 24) - (void)v98 > 0x20uLL)
        {
          qmemcpy(v98, ": Unknown command line argument '", 33);
          *(void *)(OptionPred + 32) += 33;
          unint64_t v99 = v47[v287];
          if (v99)
          {
LABEL_166:
            size_t v100 = strlen(v99);
            std::string::size_type OptionPred = *((void *)v97 + 4);
            if (v100 <= *((void *)v97 + 3) - OptionPred)
            {
              if (v100)
              {
                std::string::size_type OptionPred = (std::string::size_type)memcpy((void *)OptionPred, v99, v100);
                *((void *)v97 + 4) += v100;
              }
            }
            else
            {
              std::string::size_type OptionPred = (std::string::size_type)llvm::raw_ostream::write(v97, v99, v100);
              uint64_t v97 = (llvm::raw_ostream *)OptionPred;
            }
            uint64_t v39 = v280;
            uint64_t v106 = *((void *)v97 + 4);
            if ((unint64_t)(*((void *)v97 + 3) - v106) > 9)
            {
LABEL_225:
              *(_WORD *)(v106 + 8) = 10016;
              *(void *)uint64_t v106 = *(void *)"'.  Try: '";
              *((void *)v97 + 4) += 10;
              uint64_t v107 = *v47;
              if (!*v47)
              {
LABEL_226:
                uint64_t v119 = *((void *)v97 + 4);
                if ((unint64_t)(*((void *)v97 + 3) - v119) <= 8) {
                  goto LABEL_227;
                }
                goto LABEL_233;
              }
LABEL_194:
              size_t v108 = strlen(v107);
              std::string::size_type OptionPred = *((void *)v97 + 4);
              if (v108 <= *((void *)v97 + 3) - OptionPred)
              {
                if (v108)
                {
                  std::string::size_type OptionPred = (std::string::size_type)memcpy((void *)OptionPred, v107, v108);
                  *((void *)v97 + 4) += v108;
                }
              }
              else
              {
                std::string::size_type OptionPred = (std::string::size_type)llvm::raw_ostream::write(v97, v107, v108);
                uint64_t v97 = (llvm::raw_ostream *)OptionPred;
              }
              uint64_t v39 = v280;
              uint64_t v119 = *((void *)v97 + 4);
              if ((unint64_t)(*((void *)v97 + 3) - v119) <= 8)
              {
LABEL_227:
                std::string::size_type OptionPred = (std::string::size_type)llvm::raw_ostream::write(v97, " --help'\n", 9uLL);
                if (!v92) {
                  goto LABEL_228;
                }
                goto LABEL_234;
              }
LABEL_233:
              *(unsigned char *)(v119 + 8) = 10;
              *(void *)uint64_t v119 = *(void *)" --help'\n";
              *((void *)v97 + 4) += 9;
              if (!v92)
              {
LABEL_228:
                int v74 = 9;
                int v269 = 1;
                if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_115;
                }
                goto LABEL_114;
              }
LABEL_234:
              int v120 = *(char *)(v27 + 23);
              if (v120 >= 0) {
                uint64_t v121 = (const char *)v27;
              }
              else {
                uint64_t v121 = *(const char **)v27;
              }
              if (v120 >= 0) {
                size_t v122 = *(unsigned __int8 *)(v27 + 23);
              }
              else {
                size_t v122 = *(void *)(v27 + 8);
              }
              int v123 = llvm::raw_ostream::write(v273, v121, v122);
              int v124 = (_OWORD *)*((void *)v123 + 4);
              if (*((void *)v123 + 3) - (void)v124 > 0xFuLL)
              {
                *int v124 = *(_OWORD *)": Did you mean '";
                *((void *)v123 + 4) += 16;
              }
              else
              {
                int v123 = llvm::raw_ostream::write(v123, ": Did you mean '", 0x10uLL);
              }
              std::string::size_type v125 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
              uint64_t v126 = (std::string *)v286.__r_.__value_.__r.__words[0];
              if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v125 = v286.__r_.__value_.__l.__size_;
              }
              else {
                uint64_t v126 = &v286;
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v126;
              *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v125;
              uint64_t v127 = *(void *)(OptionPred + 32);
              if ((unint64_t)(*(void *)(OptionPred + 24) - v127) > 2)
              {
                *(unsigned char *)(v127 + 2) = 10;
                *(_WORD *)uint64_t v127 = 16167;
                *(void *)(OptionPred + 32) += 3;
                int v74 = 9;
                int v269 = 1;
                if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_115;
                }
              }
              else
              {
                std::string::size_type OptionPred = (std::string::size_type)llvm::raw_ostream::write((llvm::raw_ostream *)OptionPred, "'?\n", 3uLL);
                int v74 = 9;
                int v269 = 1;
                if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_115;
                }
              }
              goto LABEL_114;
            }
LABEL_193:
            std::string::size_type OptionPred = (std::string::size_type)llvm::raw_ostream::write(v97, "'.  Try: '", 0xAuLL);
            uint64_t v97 = (llvm::raw_ostream *)OptionPred;
            uint64_t v107 = *v47;
            if (!*v47) {
              goto LABEL_226;
            }
            goto LABEL_194;
          }
        }
        else
        {
          std::string::size_type OptionPred = (std::string::size_type)llvm::raw_ostream::write((llvm::raw_ostream *)OptionPred, ": Unknown command line argument '", 0x21uLL);
          uint64_t v97 = (llvm::raw_ostream *)OptionPred;
          unint64_t v99 = v47[v287];
          if (v99) {
            goto LABEL_166;
          }
        }
        uint64_t v106 = *((void *)v97 + 4);
        if ((unint64_t)(*((void *)v97 + 3) - v106) > 9) {
          goto LABEL_225;
        }
        goto LABEL_193;
      }
LABEL_335:
      float32x4x2_t v168 = *(void **)(v39 + 80);
      uint64_t v169 = v287;
      uint64_t v170 = 8 * v93;
      do
      {
        float32x4x2_t v172 = v47[v169];
        if (v172) {
          size_t v171 = strlen(v47[v169]);
        }
        else {
          size_t v171 = 0;
        }
        std::string::size_type OptionPred = (*(uint64_t (**)(void, uint64_t, const char *, void, const char *, size_t, void))(*(void *)*v168 + 80))(*v168, v169, "", 0, v172, v171, 0);
        ++v168;
        v170 -= 8;
      }
      while (v170);
      int v74 = 9;
      atomic_ullong v27 = v275;
      uint64_t v39 = v280;
      if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_115;
      }
      goto LABEL_114;
    }
    size_t v73 = strlen(v47[v45]);
    LODWORD(__p.__r_.__value_.__l.__data_) = v45;
    std::string::size_type OptionPred = ProvideOption(v277, *((void *)v277 + 2), *((void *)v277 + 3), v71, v73, 0, 0, (unsigned int *)&__p);
    int v74 = 9;
    if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_114;
    }
LABEL_115:
    if (v74 == 9 || !v74)
    {
      signed int v45 = v287 + 1;
      int v287 = v45;
      if (v45 < v279) {
        continue;
      }
    }
    break;
  }
  unsigned int v175 = v310;
  unsigned int v176 = v278;
  if (v310 < v278) {
    goto LABEL_347;
  }
LABEL_357:
  uint64_t v183 = *(unsigned int *)(v39 + 40);
  char v184 = v265;
  if (v175 <= v183) {
    char v184 = 1;
  }
  if ((v184 & 1) == 0)
  {
    int v205 = *(char *)(v27 + 23);
    if (v205 >= 0) {
      uint64_t v206 = (const char *)v27;
    }
    else {
      uint64_t v206 = *(const char **)v27;
    }
    if (v205 >= 0) {
      size_t v207 = *(unsigned __int8 *)(v27 + 23);
    }
    else {
      size_t v207 = *(void *)(v27 + 8);
    }
    v208 = llvm::raw_ostream::write(v273, v206, v207);
    uint64_t v209 = (void *)*((void *)v208 + 4);
    if (*((void *)v208 + 3) - (void)v209 > 0x2AuLL)
    {
      qmemcpy(v209, ": Too many positional arguments specified!\n", 43);
      uint64_t v228 = *((void *)v208 + 3);
      uint64_t v210 = *((void *)v208 + 4) + 43;
      *((void *)v208 + 4) = v210;
      if ((unint64_t)(v228 - v210) > 0x13) {
        goto LABEL_392;
      }
    }
    else
    {
      v208 = llvm::raw_ostream::write(v208, ": Too many positional arguments specified!\n", 0x2BuLL);
      uint64_t v210 = *((void *)v208 + 4);
      if ((unint64_t)(*((void *)v208 + 3) - v210) > 0x13)
      {
LABEL_392:
        *(_DWORD *)(v210 + 16) = 544502639;
        *(_OWORD *)uint64_t v210 = *(_OWORD *)"Can specify at most ";
        *((void *)v208 + 4) += 20;
        goto LABEL_456;
      }
    }
    v208 = llvm::raw_ostream::write(v208, "Can specify at most ", 0x14uLL);
LABEL_456:
    std::string::size_type OptionPred = (std::string::size_type)llvm::raw_ostream::operator<<(v208, *(unsigned int *)(v39 + 40));
    long long v200 = (llvm::raw_ostream *)OptionPred;
    uint64_t v229 = *(void **)(OptionPred + 32);
    if (*(void *)(OptionPred + 24) - (void)v229 > 0x1BuLL)
    {
      qmemcpy(v229, " positional arguments: See: ", 28);
      *(void *)(OptionPred + 32) += 28;
      uint64_t v203 = *v47;
      if (!*v47) {
        goto LABEL_402;
      }
    }
    else
    {
      std::string::size_type OptionPred = (std::string::size_type)llvm::raw_ostream::write((llvm::raw_ostream *)OptionPred, " positional arguments: See: ", 0x1CuLL);
      long long v200 = (llvm::raw_ostream *)OptionPred;
      uint64_t v203 = *v47;
      if (!*v47) {
        goto LABEL_402;
      }
    }
LABEL_382:
    size_t v204 = strlen(v203);
    std::string::size_type OptionPred = *((void *)v200 + 4);
    if (v204 <= *((void *)v200 + 3) - OptionPred)
    {
      if (v204)
      {
        std::string::size_type OptionPred = (std::string::size_type)memcpy((void *)OptionPred, v203, v204);
        *((void *)v200 + 4) += v204;
      }
    }
    else
    {
      std::string::size_type OptionPred = (std::string::size_type)llvm::raw_ostream::write(v200, v203, v204);
      long long v200 = (llvm::raw_ostream *)OptionPred;
    }
    goto LABEL_402;
  }
  if (*(void *)(v39 + 152))
  {
    if (v183)
    {
      uint64_t v185 = 0;
      unsigned int v186 = 0;
      uint64_t v187 = 8 * v183;
      char v188 = v269;
      do
      {
        std::string::size_type OptionPred = *(void *)(*(void *)(v280 + 32) + v185);
        if ((*(_WORD *)(OptionPred + 10) & 6) == 2)
        {
          uint64_t v189 = (char *)v309 + 24 * v186;
          unint64_t v190 = *(char **)v189;
          size_t v191 = *((void *)v189 + 1);
          LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v189 + 4);
          std::string::size_type OptionPred = ProvideOption((unsigned __int16 *)OptionPred, *(void *)(OptionPred + 16), *(void *)(OptionPred + 24), v190, v191, 0, 0, (unsigned int *)&__p);
          v188 |= OptionPred;
          ++v186;
        }
        v185 += 8;
      }
      while (v187 != v185);
      uint64_t v39 = v280;
      unsigned int v175 = v310;
      if (*(_DWORD *)(v280 + 40) == 1 && v186 == 0)
      {
        if (!v310) {
          goto LABEL_406;
        }
        uint64_t v231 = **(void **)(v280 + 32);
        unint64_t v232 = *(char **)v309;
        size_t v233 = *((void *)v309 + 1);
        LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v309 + 4);
        std::string::size_type OptionPred = ProvideOption((unsigned __int16 *)v231, *(void *)(v231 + 16), *(void *)(v231 + 24), v232, v233, 0, 0, (unsigned int *)&__p);
        v188 |= OptionPred;
        unsigned int v186 = 1;
        unsigned int v175 = v310;
      }
    }
    else
    {
      unsigned int v186 = 0;
      char v188 = v269;
    }
    if (v175 != v186)
    {
      do
      {
        uint64_t v255 = *(void *)(v39 + 152);
        unint64_t v256 = (char *)v309 + 24 * v186;
        BOOL v257 = *(char **)v256;
        size_t v258 = *((void *)v256 + 1);
        LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v256 + 4);
        std::string::size_type OptionPred = ProvideOption((unsigned __int16 *)v255, *(void *)(v255 + 16), *(void *)(v255 + 24), v257, v258, 0, 0, (unsigned int *)&__p);
        v188 |= OptionPred;
        ++v186;
      }
      while (v186 != v310);
    }
  }
  else
  {
    if (v183)
    {
      uint64_t v234 = 0;
      unsigned int v235 = 0;
      do
      {
        std::string::size_type OptionPred = *(void *)(*(void *)(v280 + 32) + 8 * v234);
        if ((*(_WORD *)(OptionPred + 10) & 6) == 2)
        {
          BOOL v236 = (char *)v309 + 24 * v235;
          unint64_t v237 = *(char **)v236;
          size_t v238 = *((void *)v236 + 1);
          LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v236 + 4);
          ProvideOption((unsigned __int16 *)OptionPred, *(void *)(OptionPred + 16), *(void *)(OptionPred + 24), v237, v238, 0, 0, (unsigned int *)&__p);
          ++v235;
          --v176;
          std::string::size_type OptionPred = *(void *)(*(void *)(v280 + 32) + 8 * v234);
        }
        if (v175 - v235 > v176 && (*(_WORD *)(OptionPred + 10) & 7) != 2)
        {
          unsigned int v239 = v175 - 1 - v235;
          do
          {
            uint64_t v240 = *(void *)(*(void *)(v280 + 32) + 8 * v234);
            __int16 v241 = *(_WORD *)(v240 + 10);
            unint64_t v242 = (char *)v309 + 24 * v235;
            unint64_t v243 = *(char **)v242;
            size_t v244 = *((void *)v242 + 1);
            LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v242 + 4);
            std::string::size_type OptionPred = ProvideOption((unsigned __int16 *)v240, *(void *)(v240 + 16), *(void *)(v240 + 24), v243, v244, 0, 0, (unsigned int *)&__p);
            ++v235;
            if (v239 <= v176) {
              break;
            }
            --v239;
          }
          while ((v241 & 7) != 0);
        }
        ++v234;
      }
      while (v234 != v183);
      uint64_t v39 = v280;
    }
    char v188 = v269;
  }
LABEL_406:
  v213 = *(uint64_t **)(v39 + 128);
  uint64_t v214 = *(unsigned int *)(v39 + 136);
  if (v214)
  {
    uint64_t v215 = *(uint64_t **)(v39 + 128);
    if (*v213) {
      BOOL v216 = *v213 == -8;
    }
    else {
      BOOL v216 = 1;
    }
    if (v216)
    {
      do
      {
        uint64_t v218 = v215[1];
        ++v215;
        uint64_t v217 = v218;
        if (v218) {
          BOOL v219 = v217 == -8;
        }
        else {
          BOOL v219 = 1;
        }
      }
      while (v219);
    }
    char v220 = v188;
    uint64_t v221 = &v213[v214];
    if (v215 == v221) {
      goto LABEL_428;
    }
    goto LABEL_419;
  }
  uint64_t v215 = *(uint64_t **)(v39 + 128);
  char v220 = v188;
  uint64_t v221 = &v213[v214];
  if (v213 != v221)
  {
LABEL_419:
    uint64_t v222 = *v215;
    do
    {
      uint64_t v223 = *(void *)(v222 + 8);
      if ((*(_WORD *)(v223 + 10) & 6) == 2 && !*(_WORD *)(v223 + 8))
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"must be specified at least once!";
        __int16 v324 = 259;
        unint64_t v224 = (llvm::raw_ostream *)llvm::errs((llvm *)OptionPred);
        std::string::size_type OptionPred = llvm::cl::Option::error((void *)v223, (llvm::Twine *)&__p, 0, 0, v224);
        char v220 = 1;
      }
      do
      {
        uint64_t v225 = v215[1];
        ++v215;
        uint64_t v222 = v225;
        if (v225) {
          BOOL v226 = v222 == -8;
        }
        else {
          BOOL v226 = 1;
        }
      }
      while (v226);
    }
    while (v215 != v221);
  }
LABEL_428:
  *(void *)(v275 + 48) = *(void *)(v275 + 40);
  BOOL v33 = v220 == 0;
  if (!a5 && v220) {
    exit(1);
  }
  if (v309 != v311) {
    free(v309);
  }
LABEL_432:
  if (v314) {
    llvm::deallocate_buffer(*(llvm **)v313, (void *)0x1000);
  }
  if (v317) {
    llvm::deallocate_buffer(*(llvm **)v316, *((void **)v316 + 1));
  }
  if (v316 != v318) {
    free(v316);
  }
  if (v313 != v315) {
    free(v313);
  }
  if (v319 != v321) {
    free(v319);
  }
  if (v301) {
    llvm::deallocate_buffer(*(llvm **)v300, (void *)0x1000);
  }
  if (v304) {
    llvm::deallocate_buffer(*(llvm **)v303, *((void **)v303 + 1));
  }
  if (v303 != v305) {
    free(v303);
  }
  if (v300 != v13) {
    free(v300);
  }
  if (v306 != v308) {
    free(v306);
  }
  return v33;
}

void initCommonOptions(llvm *a1)
{
  if (!atomic_load_explicit(qword_1EB215C10, memory_order_acquire)) {
  llvm::initDebugCounterOptions(a1);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v1);
  llvm::initSignalsOptions(v2);
  llvm::initStatisticOptions(v3);
  llvm::initTimerOptions(v4);
  llvm::initTypeSizeOptions(v5);
  llvm::initWithColorOptions(v6);
  mlir::GenericProgramPoint::~GenericProgramPoint(v7);

  llvm::initRandomSeedOptions(v8);
}

uint64_t llvm::cl::Option::error(void *a1, llvm::Twine *a2, uint64_t a3, uint64_t a4, llvm::raw_ostream *this)
{
  unsigned int v5 = this;
  if (a3)
  {
    uint64_t v7 = a4;
    uint64_t v8 = a3;
    if (a4)
    {
LABEL_3:
      if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
      int v9 = *(char *)(qword_1EB215BF8[0] + 23);
      }
      if (v9 >= 0) {
        size_t v10 = (const char *)qword_1EB215BF8[0];
      }
      else {
        size_t v10 = *(const char **)qword_1EB215BF8[0];
      }
      if (v9 >= 0) {
        size_t v11 = *(unsigned __int8 *)(qword_1EB215BF8[0] + 23);
      }
      else {
        size_t v11 = *(void *)(qword_1EB215BF8[0] + 8);
      }
      uint64_t v12 = llvm::raw_ostream::write(v5, v10, v11);
      uint64_t v13 = *((void *)v12 + 4);
      if ((unint64_t)(*((void *)v12 + 3) - v13) > 9)
      {
        *(_WORD *)(v13 + 8) = 8293;
        *(void *)uint64_t v13 = *(void *)": for the ";
        *((void *)v12 + 4) += 10;
      }
      else
      {
        uint64_t v12 = llvm::raw_ostream::write(v12, ": for the ", 0xAuLL);
      }
      v20[0] = v8;
      v20[1] = v7;
      unint64_t v20[2] = 0;
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v8 = a1[2];
    uint64_t v7 = a1[3];
    if (v7) {
      goto LABEL_3;
    }
  }
  size_t v14 = (const void *)a1[4];
  size_t v15 = a1[5];
  unint64_t v16 = (void *)*((void *)this + 4);
  if (v15 <= *((void *)this + 3) - (void)v16)
  {
    if (v15)
    {
      memcpy(v16, v14, v15);
      *((void *)v5 + 4) += v15;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)v14, v15);
  }
LABEL_18:
  uint64_t v17 = *((void *)v5 + 4);
  if ((unint64_t)(*((void *)v5 + 3) - v17) > 8)
  {
    *(unsigned char *)(v17 + 8) = 32;
    *(void *)uint64_t v17 = *(void *)" option: ";
    *((void *)v5 + 4) += 9;
    llvm::Twine::print(a2, v5);
    uint64_t v18 = (unsigned char *)*((void *)v5 + 4);
    if (*((unsigned char **)v5 + 3) != v18) {
      goto LABEL_20;
    }
  }
  else
  {
    unsigned int v5 = llvm::raw_ostream::write(v5, " option: ", 9uLL);
    llvm::Twine::print(a2, v5);
    uint64_t v18 = (unsigned char *)*((void *)v5 + 4);
    if (*((unsigned char **)v5 + 3) != v18)
    {
LABEL_20:
      unsigned char *v18 = 10;
      ++*((void *)v5 + 4);
      return 1;
    }
  }
  llvm::raw_ostream::write(v5, "\n", 1uLL);
  return 1;
}

llvm::raw_ostream *anonymous namespace'::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  size_t v15 = v17;
  long long v16 = xmmword_1810FF9F0;
  uint64_t v6 = 0;
  if (v5)
  {
    do
    {
      if ((unint64_t)(v6 + 1) > *((void *)&v16 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v15, v17, v6 + 1, 1);
        uint64_t v6 = v16;
      }
      *((unsigned char *)v15 + v6) = 32;
      uint64_t v6 = v16 + 1;
      *(void *)&long long v16 = v16 + 1;
      --v5;
    }
    while (v5);
    unint64_t v7 = *((void *)&v16 + 1);
  }
  else
  {
    unint64_t v7 = 8;
  }
  if (v4 <= 1) {
    uint64_t v8 = "-";
  }
  else {
    uint64_t v8 = "--";
  }
  if (v4 <= 1) {
    size_t v9 = 1;
  }
  else {
    size_t v9 = 2;
  }
  if (v7 < v9 + v6)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v15, v17, v9 + v6, 1);
    uint64_t v6 = v16;
  }
  memcpy((char *)v15 + v6, v8, v9);
  *(void *)&long long v16 = v16 + v9;
  size_t v10 = llvm::raw_ostream::write(a1, (const char *)v15, v16);
  size_t v11 = *(const void **)a2;
  size_t v12 = *(void *)(a2 + 8);
  uint64_t v13 = (void *)*((void *)v10 + 4);
  if (v12 <= *((void *)v10 + 3) - (void)v13)
  {
    if (v12)
    {
      memcpy(v13, v11, v12);
      *((void *)v10 + 4) += v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v10, (const char *)v11, v12);
  }
  if (v15 != v17) {
    free(v15);
  }
  return a1;
}

uint64_t llvm::cl::Option::addOccurrence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0) {
    ++*(_WORD *)(a1 + 8);
  }
  return (**(uint64_t (***)(uint64_t))a1)(a1);
}

uint64_t llvm::cl::alias::getOptionWidth(llvm::cl::alias *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1 == 1) {
    return 7;
  }
  else {
    return v1 + 7;
  }
}

llvm::raw_ostream *llvm::cl::Option::printHelpStr(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  *(void *)&long long v29 = a1;
  *((void *)&v29 + 1) = a2;
  char v30 = 10;
  uint64_t v6 = (llvm *)llvm::StringRef::find((uint64_t *)&v29, &v30, 1uLL, 0);
  if (v6 == (llvm *)-1)
  {
    atomic_ullong v27 = 0;
    unint64_t v28 = 0;
    long long v24 = v29;
  }
  else
  {
    if ((unint64_t)v6 >= *((void *)&v29 + 1)) {
      unint64_t v7 = (llvm *)*((void *)&v29 + 1);
    }
    else {
      unint64_t v7 = v6;
    }
    if (*((void *)&v29 + 1) >= (unint64_t)v6 + 1) {
      uint64_t v8 = (char *)v6 + 1;
    }
    else {
      uint64_t v8 = (char *)*((void *)&v29 + 1);
    }
    *(void *)&long long v24 = v29;
    *((void *)&v24 + 1) = v7;
    atomic_ullong v27 = &v8[v29];
    unint64_t v28 = *((void *)&v29 + 1) - (void)v8;
  }
  size_t v9 = (llvm::raw_ostream *)llvm::outs(v6);
  size_t v10 = llvm::raw_ostream::indent(v9, a3 - a4);
  size_t v11 = v10;
  uint64_t v12 = *((void *)v10 + 4);
  if ((unint64_t)(*((void *)v10 + 3) - v12) <= 2)
  {
    size_t v11 = llvm::raw_ostream::write(v10, " - ", 3uLL);
    __n128 result = (llvm::raw_ostream *)*((void *)v11 + 4);
    size_t v15 = *((void *)&v24 + 1);
    size_t v14 = (const char *)v24;
    if (*((void *)&v24 + 1) <= *((void *)v11 + 3) - (void)result) {
      goto LABEL_12;
    }
LABEL_18:
    size_t v11 = llvm::raw_ostream::write(v11, v14, v15);
    __n128 result = (llvm::raw_ostream *)*((void *)v11 + 4);
    if (*((llvm::raw_ostream **)v11 + 3) != result) {
      goto LABEL_15;
    }
    goto LABEL_19;
  }
  *(unsigned char *)(v12 + 2) = 32;
  *(_WORD *)uint64_t v12 = 11552;
  __n128 result = (llvm::raw_ostream *)(*((void *)v10 + 4) + 3);
  *((void *)v11 + 4) = result;
  size_t v15 = *((void *)&v24 + 1);
  size_t v14 = (const char *)v24;
  if (*((void *)&v24 + 1) > *((void *)v11 + 3) - (void)result) {
    goto LABEL_18;
  }
LABEL_12:
  if (v15)
  {
    memcpy(result, v14, v15);
    __n128 result = (llvm::raw_ostream *)(*((void *)v11 + 4) + v15);
    *((void *)v11 + 4) = result;
  }
  if (*((llvm::raw_ostream **)v11 + 3) != result)
  {
LABEL_15:
    *(unsigned char *)__n128 result = 10;
    ++*((void *)v11 + 4);
    if (v28) {
      goto LABEL_22;
    }
    return result;
  }
LABEL_19:
  for (__n128 result = llvm::raw_ostream::write(v11, "\n", 1uLL); v28; __n128 result = llvm::raw_ostream::write(v23, "\n", 1uLL))
  {
LABEL_22:
    while (1)
    {
      char v30 = 10;
      long long v16 = (llvm *)llvm::StringRef::find((uint64_t *)&v27, &v30, 1uLL, 0);
      if (v16 == (llvm *)-1)
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        uint64_t v17 = (uint64_t)v27;
        uint64_t v18 = (llvm *)v28;
      }
      else
      {
        uint64_t v17 = (uint64_t)v27;
        uint64_t v18 = (unint64_t)v16 >= v28 ? (llvm *)v28 : v16;
        uint64_t v19 = v28 >= (unint64_t)v16 + 1 ? (uint64_t)v16 + 1 : v28;
        uint64_t v20 = (uint64_t)&v27[v19];
        unint64_t v21 = v28 - v19;
      }
      int64x2_t v25 = (const void *)v17;
      size_t v26 = (size_t)v18;
      atomic_ullong v27 = (char *)v20;
      unint64_t v28 = v21;
      uint64_t v22 = (llvm::raw_ostream *)llvm::outs(v16);
      unsigned int v23 = llvm::raw_ostream::indent(v22, a3);
      __n128 result = (llvm::raw_ostream *)*((void *)v23 + 4);
      if (v26 <= *((void *)v23 + 3) - (void)result)
      {
        if (v26)
        {
          memcpy(result, v25, v26);
          __n128 result = (llvm::raw_ostream *)(*((void *)v23 + 4) + v26);
          *((void *)v23 + 4) = result;
        }
      }
      else
      {
        unsigned int v23 = llvm::raw_ostream::write(v23, (const char *)v25, v26);
        __n128 result = (llvm::raw_ostream *)*((void *)v23 + 4);
      }
      if (*((llvm::raw_ostream **)v23 + 3) == result) {
        break;
      }
      *(unsigned char *)__n128 result = 10;
      ++*((void *)v23 + 4);
      if (!v28) {
        return result;
      }
    }
  }
  return result;
}

llvm::raw_ostream *llvm::cl::Option::printEnumValHelpStr(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)&long long v32 = a1;
  *((void *)&v32 + 1) = a2;
  char v33 = 10;
  uint64_t v6 = (llvm *)llvm::StringRef::find((uint64_t *)&v32, &v33, 1uLL, 0);
  if (v6 == (llvm *)-1)
  {
    char v30 = 0;
    unint64_t v31 = 0;
    long long v27 = v32;
  }
  else
  {
    if ((unint64_t)v6 >= *((void *)&v32 + 1)) {
      unint64_t v7 = (llvm *)*((void *)&v32 + 1);
    }
    else {
      unint64_t v7 = v6;
    }
    if (*((void *)&v32 + 1) >= (unint64_t)v6 + 1) {
      uint64_t v8 = (char *)v6 + 1;
    }
    else {
      uint64_t v8 = (char *)*((void *)&v32 + 1);
    }
    *(void *)&long long v27 = v32;
    *((void *)&v27 + 1) = v7;
    char v30 = &v8[v32];
    unint64_t v31 = *((void *)&v32 + 1) - (void)v8;
  }
  size_t v9 = (llvm::raw_ostream *)llvm::outs(v6);
  size_t v10 = llvm::raw_ostream::indent(v9, a3 - a4);
  size_t v11 = v10;
  uint64_t v12 = *((void *)v10 + 4);
  if ((unint64_t)(*((void *)v10 + 3) - v12) > 2)
  {
    *(unsigned char *)(v12 + 2) = 32;
    *(_WORD *)uint64_t v12 = 11552;
    uint64_t v17 = *((void *)v10 + 3);
    uint64_t v13 = (_WORD *)(*((void *)v10 + 4) + 3);
    *((void *)v10 + 4) = v13;
    if ((unint64_t)(v17 - (void)v13) > 1)
    {
LABEL_12:
      _WORD *v13 = 8224;
      __n128 result = (llvm::raw_ostream *)(*((void *)v11 + 4) + 2);
      *((void *)v11 + 4) = result;
      size_t v16 = *((void *)&v27 + 1);
      size_t v15 = (const char *)v27;
      if (*((void *)&v27 + 1) <= *((void *)v11 + 3) - (void)result) {
        goto LABEL_13;
      }
LABEL_20:
      size_t v11 = llvm::raw_ostream::write(v11, v15, v16);
      __n128 result = (llvm::raw_ostream *)*((void *)v11 + 4);
      if (*((llvm::raw_ostream **)v11 + 3) != result) {
        goto LABEL_16;
      }
      goto LABEL_21;
    }
  }
  else
  {
    size_t v11 = llvm::raw_ostream::write(v10, " - ", 3uLL);
    uint64_t v13 = (_WORD *)*((void *)v11 + 4);
    if (*((void *)v11 + 3) - (void)v13 > 1uLL) {
      goto LABEL_12;
    }
  }
  size_t v11 = llvm::raw_ostream::write(v11, "  ", 2uLL);
  __n128 result = (llvm::raw_ostream *)*((void *)v11 + 4);
  size_t v16 = *((void *)&v27 + 1);
  size_t v15 = (const char *)v27;
  if (*((void *)&v27 + 1) > *((void *)v11 + 3) - (void)result) {
    goto LABEL_20;
  }
LABEL_13:
  if (v16)
  {
    memcpy(result, v15, v16);
    __n128 result = (llvm::raw_ostream *)(*((void *)v11 + 4) + v16);
    *((void *)v11 + 4) = result;
  }
  if (*((llvm::raw_ostream **)v11 + 3) != result)
  {
LABEL_16:
    *(unsigned char *)__n128 result = 10;
    ++*((void *)v11 + 4);
    if (!v31) {
      return result;
    }
    goto LABEL_22;
  }
LABEL_21:
  __n128 result = llvm::raw_ostream::write(v11, "\n", 1uLL);
  if (!v31) {
    return result;
  }
LABEL_22:
  unsigned int v18 = a3 + 2;
  do
  {
    while (1)
    {
      char v33 = 10;
      uint64_t v19 = (llvm *)llvm::StringRef::find((uint64_t *)&v30, &v33, 1uLL, 0);
      if (v19 == (llvm *)-1)
      {
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        uint64_t v20 = (uint64_t)v30;
        unint64_t v21 = (llvm *)v31;
      }
      else
      {
        uint64_t v20 = (uint64_t)v30;
        unint64_t v21 = (unint64_t)v19 >= v31 ? (llvm *)v31 : v19;
        uint64_t v22 = v31 >= (unint64_t)v19 + 1 ? (uint64_t)v19 + 1 : v31;
        uint64_t v23 = (uint64_t)&v30[v22];
        unint64_t v24 = v31 - v22;
      }
      unint64_t v28 = (const void *)v20;
      size_t v29 = (size_t)v21;
      char v30 = (char *)v23;
      unint64_t v31 = v24;
      int64x2_t v25 = (llvm::raw_ostream *)llvm::outs(v19);
      size_t v26 = llvm::raw_ostream::indent(v25, v18);
      __n128 result = (llvm::raw_ostream *)*((void *)v26 + 4);
      if (v29 <= *((void *)v26 + 3) - (void)result)
      {
        if (v29)
        {
          memcpy(result, v28, v29);
          __n128 result = (llvm::raw_ostream *)(*((void *)v26 + 4) + v29);
          *((void *)v26 + 4) = result;
        }
      }
      else
      {
        size_t v26 = llvm::raw_ostream::write(v26, (const char *)v28, v29);
        __n128 result = (llvm::raw_ostream *)*((void *)v26 + 4);
      }
      if (*((llvm::raw_ostream **)v26 + 3) == result) {
        break;
      }
      *(unsigned char *)__n128 result = 10;
      ++*((void *)v26 + 4);
      if (!v31) {
        return result;
      }
    }
    __n128 result = llvm::raw_ostream::write(v26, "\n", 1uLL);
  }
  while (v31);
  return result;
}

llvm::raw_ostream *llvm::cl::alias::printOptionInfo(llvm::cl::alias *this, unsigned int a2)
{
  unint64_t v4 = (llvm::raw_ostream *)llvm::outs(this);
  long long v10 = *((_OWORD *)this + 1);
  uint64_t v11 = 2;
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = *((void *)this + 5);
  uint64_t v7 = *((void *)this + 3);
  if (v7 == 1) {
    int v8 = 7;
  }
  else {
    int v8 = v7 + 7;
  }

  return llvm::cl::Option::printHelpStr(v5, v6, a2, v8);
}

uint64_t llvm::cl::parser<llvm::cl::BOOLOrDefault>::parse(int a1, void *a2, int a3, int a4, _DWORD *__s1, size_t __n, _DWORD *a7)
{
  switch(__n)
  {
    case 0uLL:
      goto LABEL_8;
    case 1uLL:
      if (!memcmp(__s1, "1", __n)) {
        goto LABEL_8;
      }
      if (!memcmp(__s1, "0", __n)) {
        goto LABEL_19;
      }
      goto LABEL_18;
    case 4uLL:
      if (*__s1 != 1702195828 && *__s1 != 1163219540 && *__s1 != 1702195796) {
        goto LABEL_18;
      }
LABEL_8:
      uint64_t result = 0;
      *a7 = 1;
      break;
    case 5uLL:
      if (memcmp(__s1, "false", __n))
      {
        if ((*__s1 != 1397506374 || *((unsigned char *)__s1 + 4) != 69) && (*__s1 != 1936482630 || *((unsigned char *)__s1 + 4) != 101)) {
          goto LABEL_18;
        }
      }
LABEL_19:
      uint64_t result = 0;
      *a7 = 2;
      break;
    default:
LABEL_18:
      __int16 v19 = 1283;
      v18[0] = (uint64_t)"'";
      v18[2] = (uint64_t)__s1;
      v18[3] = __n;
      size_t v16 = "' is invalid value for BOOLean argument! Try 0 or 1";
      __int16 v17 = 259;
      size_t v14 = llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
      size_t v15 = (llvm::raw_ostream *)llvm::errs((llvm *)v14);
      llvm::cl::Option::error(a2, (llvm::Twine *)v20, 0, 0, v15);
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t llvm::cl::parser<long long>::parse(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, void *a7)
{
  v17[0] = 0;
  uint64_t AsSignedInteger = llvm::getAsSignedInteger(a5, a6, 0, v17);
  uint64_t v12 = AsSignedInteger;
  if (AsSignedInteger)
  {
    __int16 v16 = 1283;
    v15[0] = "'";
    v15[2] = a5;
    void v15[3] = a6;
    v17[0] = (unint64_t)v15;
    void v17[2] = (unint64_t)"' value invalid for llong argument!";
    __int16 v18 = 770;
    uint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)AsSignedInteger);
    llvm::cl::Option::error(a2, (llvm::Twine *)v17, 0, 0, v13);
  }
  else
  {
    *a7 = v17[0];
  }
  return v12;
}

uint64_t llvm::cl::parser<unsigned long long>::parse(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, void *a7)
{
  v17[0] = 0;
  uint64_t AsUnsignedInteger = llvm::getAsUnsignedInteger(a5, a6, 0, v17);
  uint64_t v12 = AsUnsignedInteger;
  if (AsUnsignedInteger)
  {
    __int16 v16 = 1283;
    v15[0] = "'";
    v15[2] = a5;
    void v15[3] = a6;
    v17[0] = (unint64_t)v15;
    void v17[2] = (unint64_t)"' value invalid for ullong argument!";
    __int16 v18 = 770;
    uint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)AsUnsignedInteger);
    llvm::cl::Option::error(a2, (llvm::Twine *)v17, 0, 0, v13);
  }
  else
  {
    *a7 = v17[0];
  }
  return v12;
}

unint64_t llvm::cl::generic_parser_base::getOptionWidth(llvm::cl::generic_parser_base *this, const llvm::cl::Option *a2)
{
  uint64_t v3 = *((void *)a2 + 3);
  if (v3)
  {
    if (v3 == 1) {
      unint64_t v5 = 15;
    }
    else {
      unint64_t v5 = v3 + 15;
    }
    int v6 = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(void *)this + 16))(this);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = 0;
      do
      {
        (*(void (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v8);
        uint64_t v10 = v9;
        (*(void (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 32))(this, v8);
        uint64_t v12 = v11;
        int v13 = (*((unsigned __int16 *)a2 + 5) >> 3) & 3;
        if (v13)
        {
          if (v13 != 1 || v10 != 0 || v11 != 0) {
            goto LABEL_24;
          }
        }
        else if ((*(unsigned int (**)(const llvm::cl::Option *))(*(void *)a2 + 8))(a2) != 1 {
               || v10 != 0
        }
               || v12 != 0)
        {
LABEL_24:
          unint64_t v18 = v10 + 8;
          if (!v10) {
            unint64_t v18 = 15;
          }
          if (v5 <= v18) {
            unint64_t v5 = v18;
          }
        }
        uint64_t v8 = (v8 + 1);
      }
      while (v7 != v8);
    }
  }
  else
  {
    int v19 = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(void *)this + 16))(this);
    if (v19)
    {
      int v20 = v19;
      uint64_t v21 = 0;
      unint64_t v5 = 0;
      do
      {
        (*(void (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v21);
        if (v5 <= v22 + 8) {
          unint64_t v5 = v22 + 8;
        }
        uint64_t v21 = (v21 + 1);
      }
      while (v20 != v21);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t llvm::cl::generic_parser_base::printOptionInfo(llvm::cl::generic_parser_base *this, const llvm::cl::Option *a2, unsigned int a3)
{
  if (!*((void *)a2 + 3))
  {
    if (!*((void *)a2 + 5)) {
      goto LABEL_12;
    }
    int v6 = (llvm::raw_ostream *)llvm::outs(this);
    int v7 = v6;
    uint64_t v8 = (_WORD *)*((void *)v6 + 4);
    if (*((void *)v6 + 3) - (void)v8 > 1uLL)
    {
      *uint64_t v8 = 8224;
      uint64_t v9 = (unsigned char *)(*((void *)v6 + 4) + 2);
      *((void *)v7 + 4) = v9;
      uint64_t v10 = (const void *)*((void *)a2 + 4);
      size_t v11 = *((void *)a2 + 5);
      if (v11 <= *((void *)v7 + 3) - (void)v9)
      {
LABEL_8:
        if (v11)
        {
          memcpy(v9, v10, v11);
          uint64_t v9 = (unsigned char *)(*((void *)v7 + 4) + v11);
          *((void *)v7 + 4) = v9;
        }
        if ((unint64_t)v9 < *((void *)v7 + 3)) {
          goto LABEL_11;
        }
        goto LABEL_22;
      }
    }
    else
    {
      int v7 = llvm::raw_ostream::write(v6, "  ", 2uLL);
      uint64_t v9 = (unsigned char *)*((void *)v7 + 4);
      uint64_t v10 = (const void *)*((void *)a2 + 4);
      size_t v11 = *((void *)a2 + 5);
      if (v11 <= *((void *)v7 + 3) - (void)v9) {
        goto LABEL_8;
      }
    }
    int v7 = llvm::raw_ostream::write(v7, (const char *)v10, v11);
    uint64_t v9 = (unsigned char *)*((void *)v7 + 4);
    if ((unint64_t)v9 < *((void *)v7 + 3))
    {
LABEL_11:
      *((void *)v7 + 4) = v9 + 1;
      *uint64_t v9 = 10;
LABEL_12:
      uint64_t result = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(void *)this + 16))(this);
      if (!result) {
        return result;
      }
      goto LABEL_23;
    }
LABEL_22:
    llvm::raw_ostream::write(v7, 10);
    uint64_t result = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(void *)this + 16))(this);
    if (!result) {
      return result;
    }
LABEL_23:
    int v16 = result;
    uint64_t v17 = 0;
    do
    {
      int v20 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v17);
      uint64_t v22 = v21;
      uint64_t v23 = (llvm::raw_ostream *)llvm::outs(v20);
      unint64_t v24 = (_DWORD *)*((void *)v23 + 4);
      if (*((void *)v23 + 3) - (void)v24 > 3uLL)
      {
        _DWORD *v24 = 538976288;
        *((void *)v23 + 4) += 4;
      }
      else
      {
        uint64_t v23 = llvm::raw_ostream::write(v23, "    ", 4uLL);
      }
      *(void *)&long long v54 = v20;
      *((void *)&v54 + 1) = v22;
      uint64_t v55 = 2;
      uint64_t v18 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 32))(this, v17);
      uint64_t result = (uint64_t)llvm::cl::Option::printHelpStr(v18, v19, a3, (int)v22 + 8);
      uint64_t v17 = (v17 + 1);
    }
    while (v16 != v17);
    return result;
  }
  unint64_t v5 = (llvm *)((*((unsigned __int16 *)a2 + 5) >> 3) & 3);
  if (v5)
  {
    if (v5 != 1) {
      goto LABEL_32;
    }
  }
  else
  {
    unint64_t v5 = (llvm *)(*(uint64_t (**)(const llvm::cl::Option *))(*(void *)a2 + 8))(a2);
    if (v5 != 1) {
      goto LABEL_32;
    }
  }
  unint64_t v5 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(void *)this + 16))(this);
  if (v5)
  {
    int v13 = (int)v5;
    uint64_t v14 = 0;
    while (1)
    {
      unint64_t v5 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v14);
      if (!v15) {
        break;
      }
      uint64_t v14 = (v14 + 1);
      if (v13 == v14) {
        goto LABEL_32;
      }
    }
    int64x2_t v25 = (llvm::raw_ostream *)llvm::outs(v5);
    long long v54 = *((_OWORD *)a2 + 1);
    uint64_t v55 = 2;
    uint64_t v26 = *((void *)a2 + 3);
    if (v26 == 1) {
      int v27 = 7;
    }
    else {
      int v27 = v26 + 7;
    }
    unint64_t v5 = llvm::cl::Option::printHelpStr(*((void *)a2 + 4), *((void *)a2 + 5), a3, v27);
  }
LABEL_32:
  unint64_t v28 = (llvm::raw_ostream *)llvm::outs(v5);
  long long v54 = *((_OWORD *)a2 + 1);
  uint64_t v55 = 2;
  char v30 = (void *)*((void *)v29 + 4);
  if (*((void *)v29 + 3) - (void)v30 > 7uLL)
  {
    void *v30 = 0x3E65756C61763C3DLL;
    *((void *)v29 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v29, "=<value>", 8uLL);
  }
  uint64_t v31 = *((void *)a2 + 3);
  if (v31 == 1) {
    int v32 = 15;
  }
  else {
    int v32 = v31 + 15;
  }
  llvm::cl::Option::printHelpStr(*((void *)a2 + 4), *((void *)a2 + 5), a3, v32);
  uint64_t result = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(void *)this + 16))(this);
  if (result)
  {
    int v33 = result;
    uint64_t v34 = 0;
    do
    {
      unint64_t v35 = (const char *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v34);
      size_t v37 = v36;
      uint64_t v39 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 32))(this, v34);
      uint64_t v40 = v38;
      uint64_t result = (*((unsigned __int16 *)a2 + 5) >> 3) & 3;
      if (result)
      {
        if (result == 1 && v37 == 0 && v38 == 0) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(const llvm::cl::Option *))(*(void *)a2 + 8))(a2);
        if (result == 1 && v37 == 0 && v40 == 0) {
          goto LABEL_41;
        }
      }
      signed int v45 = (llvm::raw_ostream *)llvm::outs((llvm *)result);
      uint64_t v46 = v45;
      uint64_t v47 = *((void *)v45 + 4);
      if ((unint64_t)(*((void *)v45 + 3) - v47) > 4)
      {
        *(unsigned char *)(v47 + 4) = 61;
        *(_DWORD *)uint64_t v47 = 538976288;
        std::error_code v48 = (void *)(*((void *)v45 + 4) + 5);
        *((void *)v46 + 4) = v48;
        int v49 = v37 + 8;
        if (v37 > *((void *)v46 + 3) - (void)v48)
        {
LABEL_64:
          size_t v50 = llvm::raw_ostream::write(v46, v35, v37);
          if (!v40) {
            goto LABEL_70;
          }
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v46 = llvm::raw_ostream::write(v45, "    =", 5uLL);
        std::error_code v48 = (void *)*((void *)v46 + 4);
        int v49 = v37 + 8;
        if (v37 > *((void *)v46 + 3) - (void)v48) {
          goto LABEL_64;
        }
      }
      if (v37)
      {
        size_t v50 = (llvm *)memcpy(v48, v35, v37);
        *((void *)v46 + 4) += v37;
        if (!v40) {
          goto LABEL_70;
        }
      }
      else
      {
        size_t v50 = (llvm *)llvm::outs((llvm *)v48);
        uint64_t v51 = (_DWORD *)*((void *)v50 + 4);
        if (*((void *)v50 + 3) - (void)v51 > 6uLL)
        {
          *(_DWORD *)((char *)v51 + 3) = 1048147056;
          _DWORD *v51 = 1886217532;
          *((void *)v50 + 4) += 7;
          int v49 = 15;
          if (!v40)
          {
LABEL_70:
            uint64_t result = (uint64_t)llvm::outs(v50);
            uint64_t v52 = *(unsigned char **)(result + 32);
            if ((unint64_t)v52 >= *(void *)(result + 24))
            {
              uint64_t result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, 10);
            }
            else
            {
              *(void *)(result + 32) = v52 + 1;
              unsigned char *v52 = 10;
            }
            goto LABEL_41;
          }
        }
        else
        {
          size_t v50 = llvm::raw_ostream::write(v50, "<empty>", 7uLL);
          int v49 = 15;
          if (!v40) {
            goto LABEL_70;
          }
        }
      }
LABEL_40:
      uint64_t result = (uint64_t)llvm::cl::Option::printEnumValHelpStr(v39, v40, a3, v49);
LABEL_41:
      uint64_t v34 = (v34 + 1);
    }
    while (v33 != v34);
  }
  return result;
}

llvm::raw_ostream *llvm::cl::generic_parser_base::printGenericOptionDiff(llvm::cl::generic_parser_base *this, const llvm::cl::Option *a2, const llvm::cl::GenericOptionValue *a3, const llvm::cl::GenericOptionValue *a4, int a5)
{
  uint64_t v10 = (llvm::raw_ostream *)llvm::outs(this);
  size_t v11 = (_WORD *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 1uLL)
  {
    *size_t v11 = 8224;
    *((void *)v10 + 4) += 2;
  }
  else
  {
    uint64_t v10 = llvm::raw_ostream::write(v10, "  ", 2uLL);
  }
  long long v44 = *((_OWORD *)a2 + 1);
  uint64_t v45 = 2;
  int v13 = (llvm::raw_ostream *)llvm::outs(v12);
  llvm::raw_ostream::indent(v13, a5 - *((_DWORD *)a2 + 6));
  uint64_t v14 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(void *)this + 16))(this);
  if (v14)
  {
    int v15 = (int)v14;
    uint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 48))(this, v16);
      uint64_t v14 = (llvm *)(**(uint64_t (***)(const llvm::cl::GenericOptionValue *, uint64_t))a3)(a3, v17);
      if (v14) {
        break;
      }
      uint64_t v16 = (v16 + 1);
      if (v15 == v16) {
        goto LABEL_8;
      }
    }
    uint64_t v23 = (llvm::raw_ostream *)llvm::outs(v14);
    unint64_t v24 = v23;
    int64x2_t v25 = (_WORD *)*((void *)v23 + 4);
    if (*((void *)v23 + 3) - (void)v25 > 1uLL)
    {
      *int64x2_t v25 = 8253;
      *((void *)v23 + 4) += 2;
    }
    else
    {
      unint64_t v24 = llvm::raw_ostream::write(v23, "= ", 2uLL);
    }
    int v27 = (const void *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v16);
    size_t v28 = v26;
    size_t v29 = (void *)*((void *)v24 + 4);
    if (v26 <= *((void *)v24 + 3) - (void)v29)
    {
      if (v26)
      {
        memcpy(v29, v27, v26);
        *((void *)v24 + 4) += v28;
      }
    }
    else
    {
      llvm::raw_ostream::write(v24, (const char *)v27, v26);
    }
    char v30 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v16);
    if (v31 <= 8) {
      unsigned int v32 = 8 - v31;
    }
    else {
      unsigned int v32 = 0;
    }
    int v33 = (llvm::raw_ostream *)llvm::outs(v30);
    uint64_t v34 = llvm::raw_ostream::indent(v33, v32);
    uint64_t v35 = *((void *)v34 + 4);
    if ((unint64_t)(*((void *)v34 + 3) - v35) > 0xA)
    {
      *(_DWORD *)(v35 + 7) = 540701804;
      *(void *)uint64_t v35 = *(void *)" (default: ";
      *((void *)v34 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v34, " (default: ", 0xBuLL);
    }
    uint64_t v36 = 0;
    while (1)
    {
      uint64_t v37 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 48))(this, v36);
      uint64_t v38 = (llvm *)(**(uint64_t (***)(const llvm::cl::GenericOptionValue *, uint64_t))a4)(a4, v37);
      if (v38) {
        break;
      }
      uint64_t v36 = (v36 + 1);
      if (v15 == v36) {
        goto LABEL_32;
      }
    }
    uint64_t v39 = (llvm::raw_ostream *)llvm::outs(v38);
    uint64_t v41 = (const void *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v36);
    size_t v42 = v40;
    uint64_t v38 = (llvm *)*((void *)v39 + 4);
    if (v40 <= *((void *)v39 + 3) - (void)v38)
    {
      if (v40)
      {
        uint64_t v38 = (llvm *)memcpy(v38, v41, v40);
        *((void *)v39 + 4) += v42;
      }
    }
    else
    {
      uint64_t v38 = llvm::raw_ostream::write(v39, (const char *)v41, v40);
    }
LABEL_32:
    uint64_t result = (llvm::raw_ostream *)llvm::outs(v38);
    uint64_t v43 = (_WORD *)*((void *)result + 4);
    if (*((void *)result + 3) - (void)v43 <= 1uLL)
    {
      int v20 = ")\n";
      size_t v21 = 2;
      goto LABEL_34;
    }
    *uint64_t v43 = 2601;
    uint64_t v22 = *((void *)result + 4) + 2;
LABEL_38:
    *((void *)result + 4) = v22;
    return result;
  }
LABEL_8:
  uint64_t result = (llvm::raw_ostream *)llvm::outs(v14);
  uint64_t v19 = (void *)*((void *)result + 4);
  if (*((void *)result + 3) - (void)v19 > 0x18uLL)
  {
    qmemcpy(v19, "= *unknown option value*\n", 25);
    uint64_t v22 = *((void *)result + 4) + 25;
    goto LABEL_38;
  }
  int v20 = "= *unknown option value*\n";
  size_t v21 = 25;
LABEL_34:

  return llvm::raw_ostream::write(result, v20, v21);
}

void llvm::cl::parser<BOOL>::printOptionDiff(llvm *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v9 = (llvm::raw_ostream *)llvm::outs(a1);
  long long v32 = *(_OWORD *)(a2 + 16);
  uint64_t v33 = 2;
  size_t v11 = (llvm::raw_ostream *)llvm::outs(v10);
  llvm::raw_ostream::indent(v11, a5 - *(_DWORD *)(a2 + 24));
  std::string __p = 0;
  unint64_t v41 = 0;
  uint64_t v42 = 0;
  DWORD2(v32) = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  int v38 = 1;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  *(void *)&long long v32 = &unk_1EC9A38B8;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v32, 0, 0, 0);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, a3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v32);
  int v13 = (llvm::raw_ostream *)llvm::outs(v12);
  uint64_t v14 = (_WORD *)*((void *)v13 + 4);
  if (*((void *)v13 + 3) - (void)v14 > 1uLL)
  {
    _WORD *v14 = 8253;
    *((void *)v13 + 4) += 2;
  }
  else
  {
    int v13 = llvm::raw_ostream::write(v13, "= ", 2uLL);
  }
  if (v42 >= 0) {
    int v15 = (const char *)&__p;
  }
  else {
    int v15 = (const char *)__p;
  }
  if (v42 >= 0) {
    size_t v16 = HIBYTE(v42);
  }
  else {
    size_t v16 = v41;
  }
  uint64_t v17 = llvm::raw_ostream::write(v13, v15, v16);
  if (SHIBYTE(v42) < 0)
  {
    int v18 = v41;
    if (v41 < 8) {
      goto LABEL_12;
    }
  }
  else
  {
    int v18 = HIBYTE(v42);
    if (HIBYTE(v42) <= 7u)
    {
LABEL_12:
      unsigned int v19 = 8 - v18;
      goto LABEL_15;
    }
  }
  unsigned int v19 = 0;
LABEL_15:
  int v20 = (llvm::raw_ostream *)llvm::outs(v17);
  size_t v21 = llvm::raw_ostream::indent(v20, v19);
  uint64_t v22 = *((void *)v21 + 4);
  if ((unint64_t)(*((void *)v21 + 3) - v22) <= 0xA)
  {
    uint64_t v23 = llvm::raw_ostream::write(v21, " (default: ", 0xBuLL);
    int v24 = *(unsigned __int8 *)(a4 + 9);
    int64x2_t v25 = (llvm *)llvm::outs(v23);
    if (v24) {
      goto LABEL_17;
    }
LABEL_21:
    uint64_t v30 = *((void *)v25 + 4);
    if ((unint64_t)(*((void *)v25 + 3) - v30) > 0xB)
    {
      *(_DWORD *)(v30 + 8) = 712273013;
      *(void *)uint64_t v30 = *(void *)"*no default*";
      *((void *)v25 + 4) += 12;
      int v27 = (llvm::raw_ostream *)llvm::outs(v25);
      size_t v28 = (_WORD *)*((void *)v27 + 4);
      if (*((void *)v27 + 3) - (void)v28 > 1uLL) {
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v31 = llvm::raw_ostream::write(v25, "*no default*", 0xCuLL);
      int v27 = (llvm::raw_ostream *)llvm::outs(v31);
      size_t v28 = (_WORD *)*((void *)v27 + 4);
      if (*((void *)v27 + 3) - (void)v28 > 1uLL) {
        goto LABEL_25;
      }
    }
LABEL_18:
    llvm::raw_ostream::write(v27, ")\n", 2uLL);
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_19;
  }
  *(_DWORD *)(v22 + 7) = 540701804;
  *(void *)uint64_t v22 = *(void *)" (default: ";
  *((void *)v21 + 4) += 11;
  int v29 = *(unsigned __int8 *)(a4 + 9);
  int64x2_t v25 = (llvm *)llvm::outs(v21);
  if (!v29) {
    goto LABEL_21;
  }
LABEL_17:
  size_t v26 = llvm::raw_ostream::operator<<(v25, *(unsigned __int8 *)(a4 + 8));
  int v27 = (llvm::raw_ostream *)llvm::outs(v26);
  size_t v28 = (_WORD *)*((void *)v27 + 4);
  if (*((void *)v27 + 3) - (void)v28 <= 1uLL) {
    goto LABEL_18;
  }
LABEL_25:
  _WORD *v28 = 2601;
  *((void *)v27 + 4) += 2;
  if (SHIBYTE(v42) < 0) {
LABEL_19:
  }
    operator delete(__p);
}

void llvm::cl::parser<llvm::cl::BOOLOrDefault>::printOptionDiff(llvm *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v9 = (llvm::raw_ostream *)llvm::outs(a1);
  long long v32 = *(_OWORD *)(a2 + 16);
  uint64_t v33 = 2;
  size_t v11 = (llvm::raw_ostream *)llvm::outs(v10);
  llvm::raw_ostream::indent(v11, a5 - *(_DWORD *)(a2 + 24));
  std::string __p = 0;
  unint64_t v41 = 0;
  uint64_t v42 = 0;
  DWORD2(v32) = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  int v38 = 1;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  *(void *)&long long v32 = &unk_1EC9A38B8;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v32, 0, 0, 0);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, a3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v32);
  int v13 = (llvm::raw_ostream *)llvm::outs(v12);
  uint64_t v14 = (_WORD *)*((void *)v13 + 4);
  if (*((void *)v13 + 3) - (void)v14 > 1uLL)
  {
    _WORD *v14 = 8253;
    *((void *)v13 + 4) += 2;
  }
  else
  {
    int v13 = llvm::raw_ostream::write(v13, "= ", 2uLL);
  }
  if (v42 >= 0) {
    int v15 = (const char *)&__p;
  }
  else {
    int v15 = (const char *)__p;
  }
  if (v42 >= 0) {
    size_t v16 = HIBYTE(v42);
  }
  else {
    size_t v16 = v41;
  }
  uint64_t v17 = llvm::raw_ostream::write(v13, v15, v16);
  if (SHIBYTE(v42) < 0)
  {
    int v18 = v41;
    if (v41 < 8) {
      goto LABEL_12;
    }
  }
  else
  {
    int v18 = HIBYTE(v42);
    if (HIBYTE(v42) <= 7u)
    {
LABEL_12:
      unsigned int v19 = 8 - v18;
      goto LABEL_15;
    }
  }
  unsigned int v19 = 0;
LABEL_15:
  int v20 = (llvm::raw_ostream *)llvm::outs(v17);
  size_t v21 = llvm::raw_ostream::indent(v20, v19);
  uint64_t v22 = *((void *)v21 + 4);
  if ((unint64_t)(*((void *)v21 + 3) - v22) <= 0xA)
  {
    uint64_t v23 = llvm::raw_ostream::write(v21, " (default: ", 0xBuLL);
    int v24 = *(unsigned __int8 *)(a4 + 12);
    int64x2_t v25 = (llvm *)llvm::outs(v23);
    if (v24) {
      goto LABEL_17;
    }
LABEL_21:
    uint64_t v30 = *((void *)v25 + 4);
    if ((unint64_t)(*((void *)v25 + 3) - v30) > 0xB)
    {
      *(_DWORD *)(v30 + 8) = 712273013;
      *(void *)uint64_t v30 = *(void *)"*no default*";
      *((void *)v25 + 4) += 12;
      int v27 = (llvm::raw_ostream *)llvm::outs(v25);
      size_t v28 = (_WORD *)*((void *)v27 + 4);
      if (*((void *)v27 + 3) - (void)v28 > 1uLL) {
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v31 = llvm::raw_ostream::write(v25, "*no default*", 0xCuLL);
      int v27 = (llvm::raw_ostream *)llvm::outs(v31);
      size_t v28 = (_WORD *)*((void *)v27 + 4);
      if (*((void *)v27 + 3) - (void)v28 > 1uLL) {
        goto LABEL_25;
      }
    }
LABEL_18:
    llvm::raw_ostream::write(v27, ")\n", 2uLL);
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_19;
  }
  *(_DWORD *)(v22 + 7) = 540701804;
  *(void *)uint64_t v22 = *(void *)" (default: ";
  *((void *)v21 + 4) += 11;
  int v29 = *(unsigned __int8 *)(a4 + 12);
  int64x2_t v25 = (llvm *)llvm::outs(v21);
  if (!v29) {
    goto LABEL_21;
  }
LABEL_17:
  size_t v26 = llvm::raw_ostream::operator<<(v25, *(int *)(a4 + 8));
  int v27 = (llvm::raw_ostream *)llvm::outs(v26);
  size_t v28 = (_WORD *)*((void *)v27 + 4);
  if (*((void *)v27 + 3) - (void)v28 <= 1uLL) {
    goto LABEL_18;
  }
LABEL_25:
  _WORD *v28 = 2601;
  *((void *)v27 + 4) += 2;
  if (SHIBYTE(v42) < 0) {
LABEL_19:
  }
    operator delete(__p);
}

void llvm::cl::parser<long long>::printOptionDiff(llvm *a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = (llvm::raw_ostream *)llvm::outs(a1);
  long long v32 = *(_OWORD *)(a2 + 16);
  uint64_t v33 = 2;
  size_t v11 = (llvm::raw_ostream *)llvm::outs(v10);
  llvm::raw_ostream::indent(v11, a5 - *(_DWORD *)(a2 + 24));
  std::string __p = 0;
  unint64_t v41 = 0;
  uint64_t v42 = 0;
  DWORD2(v32) = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  int v38 = 1;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  *(void *)&long long v32 = &unk_1EC9A38B8;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v32, 0, 0, 0);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, a3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v32);
  int v13 = (llvm::raw_ostream *)llvm::outs(v12);
  uint64_t v14 = (_WORD *)*((void *)v13 + 4);
  if (*((void *)v13 + 3) - (void)v14 > 1uLL)
  {
    _WORD *v14 = 8253;
    *((void *)v13 + 4) += 2;
  }
  else
  {
    int v13 = llvm::raw_ostream::write(v13, "= ", 2uLL);
  }
  if (v42 >= 0) {
    int v15 = (const char *)&__p;
  }
  else {
    int v15 = (const char *)__p;
  }
  if (v42 >= 0) {
    size_t v16 = HIBYTE(v42);
  }
  else {
    size_t v16 = v41;
  }
  uint64_t v17 = llvm::raw_ostream::write(v13, v15, v16);
  if (SHIBYTE(v42) < 0)
  {
    int v18 = v41;
    if (v41 < 8) {
      goto LABEL_12;
    }
  }
  else
  {
    int v18 = HIBYTE(v42);
    if (HIBYTE(v42) <= 7u)
    {
LABEL_12:
      unsigned int v19 = 8 - v18;
      goto LABEL_15;
    }
  }
  unsigned int v19 = 0;
LABEL_15:
  int v20 = (llvm::raw_ostream *)llvm::outs(v17);
  size_t v21 = llvm::raw_ostream::indent(v20, v19);
  uint64_t v22 = *((void *)v21 + 4);
  if ((unint64_t)(*((void *)v21 + 3) - v22) <= 0xA)
  {
    uint64_t v23 = llvm::raw_ostream::write(v21, " (default: ", 0xBuLL);
    int v24 = *(unsigned __int8 *)(a4 + 16);
    int64x2_t v25 = (llvm *)llvm::outs(v23);
    if (v24) {
      goto LABEL_17;
    }
LABEL_21:
    uint64_t v30 = *((void *)v25 + 4);
    if ((unint64_t)(*((void *)v25 + 3) - v30) > 0xB)
    {
      *(_DWORD *)(v30 + 8) = 712273013;
      *(void *)uint64_t v30 = *(void *)"*no default*";
      *((void *)v25 + 4) += 12;
      int v27 = (llvm::raw_ostream *)llvm::outs(v25);
      size_t v28 = (_WORD *)*((void *)v27 + 4);
      if (*((void *)v27 + 3) - (void)v28 > 1uLL) {
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v31 = llvm::raw_ostream::write(v25, "*no default*", 0xCuLL);
      int v27 = (llvm::raw_ostream *)llvm::outs(v31);
      size_t v28 = (_WORD *)*((void *)v27 + 4);
      if (*((void *)v27 + 3) - (void)v28 > 1uLL) {
        goto LABEL_25;
      }
    }
LABEL_18:
    llvm::raw_ostream::write(v27, ")\n", 2uLL);
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_19;
  }
  *(_DWORD *)(v22 + 7) = 540701804;
  *(void *)uint64_t v22 = *(void *)" (default: ";
  *((void *)v21 + 4) += 11;
  int v29 = *(unsigned __int8 *)(a4 + 16);
  int64x2_t v25 = (llvm *)llvm::outs(v21);
  if (!v29) {
    goto LABEL_21;
  }
LABEL_17:
  size_t v26 = llvm::raw_ostream::operator<<(v25, *(void *)(a4 + 8));
  int v27 = (llvm::raw_ostream *)llvm::outs(v26);
  size_t v28 = (_WORD *)*((void *)v27 + 4);
  if (*((void *)v27 + 3) - (void)v28 <= 1uLL) {
    goto LABEL_18;
  }
LABEL_25:
  _WORD *v28 = 2601;
  *((void *)v27 + 4) += 2;
  if (SHIBYTE(v42) < 0) {
LABEL_19:
  }
    operator delete(__p);
}

void llvm::cl::parser<unsigned int>::printOptionDiff(llvm *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v9 = (llvm::raw_ostream *)llvm::outs(a1);
  long long v32 = *(_OWORD *)(a2 + 16);
  uint64_t v33 = 2;
  size_t v11 = (llvm::raw_ostream *)llvm::outs(v10);
  llvm::raw_ostream::indent(v11, a5 - *(_DWORD *)(a2 + 24));
  std::string __p = 0;
  unint64_t v41 = 0;
  uint64_t v42 = 0;
  DWORD2(v32) = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  int v38 = 1;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  *(void *)&long long v32 = &unk_1EC9A38B8;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v32, 0, 0, 0);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, a3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v32);
  int v13 = (llvm::raw_ostream *)llvm::outs(v12);
  uint64_t v14 = (_WORD *)*((void *)v13 + 4);
  if (*((void *)v13 + 3) - (void)v14 > 1uLL)
  {
    _WORD *v14 = 8253;
    *((void *)v13 + 4) += 2;
  }
  else
  {
    int v13 = llvm::raw_ostream::write(v13, "= ", 2uLL);
  }
  if (v42 >= 0) {
    int v15 = (const char *)&__p;
  }
  else {
    int v15 = (const char *)__p;
  }
  if (v42 >= 0) {
    size_t v16 = HIBYTE(v42);
  }
  else {
    size_t v16 = v41;
  }
  uint64_t v17 = llvm::raw_ostream::write(v13, v15, v16);
  if (SHIBYTE(v42) < 0)
  {
    int v18 = v41;
    if (v41 < 8) {
      goto LABEL_12;
    }
  }
  else
  {
    int v18 = HIBYTE(v42);
    if (HIBYTE(v42) <= 7u)
    {
LABEL_12:
      unsigned int v19 = 8 - v18;
      goto LABEL_15;
    }
  }
  unsigned int v19 = 0;
LABEL_15:
  int v20 = (llvm::raw_ostream *)llvm::outs(v17);
  size_t v21 = llvm::raw_ostream::indent(v20, v19);
  uint64_t v22 = *((void *)v21 + 4);
  if ((unint64_t)(*((void *)v21 + 3) - v22) <= 0xA)
  {
    uint64_t v23 = llvm::raw_ostream::write(v21, " (default: ", 0xBuLL);
    int v24 = *(unsigned __int8 *)(a4 + 12);
    int64x2_t v25 = (llvm *)llvm::outs(v23);
    if (v24) {
      goto LABEL_17;
    }
LABEL_21:
    uint64_t v30 = *((void *)v25 + 4);
    if ((unint64_t)(*((void *)v25 + 3) - v30) > 0xB)
    {
      *(_DWORD *)(v30 + 8) = 712273013;
      *(void *)uint64_t v30 = *(void *)"*no default*";
      *((void *)v25 + 4) += 12;
      int v27 = (llvm::raw_ostream *)llvm::outs(v25);
      size_t v28 = (_WORD *)*((void *)v27 + 4);
      if (*((void *)v27 + 3) - (void)v28 > 1uLL) {
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v31 = llvm::raw_ostream::write(v25, "*no default*", 0xCuLL);
      int v27 = (llvm::raw_ostream *)llvm::outs(v31);
      size_t v28 = (_WORD *)*((void *)v27 + 4);
      if (*((void *)v27 + 3) - (void)v28 > 1uLL) {
        goto LABEL_25;
      }
    }
LABEL_18:
    llvm::raw_ostream::write(v27, ")\n", 2uLL);
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_19;
  }
  *(_DWORD *)(v22 + 7) = 540701804;
  *(void *)uint64_t v22 = *(void *)" (default: ";
  *((void *)v21 + 4) += 11;
  int v29 = *(unsigned __int8 *)(a4 + 12);
  int64x2_t v25 = (llvm *)llvm::outs(v21);
  if (!v29) {
    goto LABEL_21;
  }
LABEL_17:
  size_t v26 = llvm::raw_ostream::operator<<(v25, *(unsigned int *)(a4 + 8));
  int v27 = (llvm::raw_ostream *)llvm::outs(v26);
  size_t v28 = (_WORD *)*((void *)v27 + 4);
  if (*((void *)v27 + 3) - (void)v28 <= 1uLL) {
    goto LABEL_18;
  }
LABEL_25:
  _WORD *v28 = 2601;
  *((void *)v27 + 4) += 2;
  if (SHIBYTE(v42) < 0) {
LABEL_19:
  }
    operator delete(__p);
}

void llvm::cl::parser<unsigned long long>::printOptionDiff(llvm *a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = (llvm::raw_ostream *)llvm::outs(a1);
  long long v32 = *(_OWORD *)(a2 + 16);
  uint64_t v33 = 2;
  size_t v11 = (llvm::raw_ostream *)llvm::outs(v10);
  llvm::raw_ostream::indent(v11, a5 - *(_DWORD *)(a2 + 24));
  std::string __p = 0;
  unint64_t v41 = 0;
  uint64_t v42 = 0;
  DWORD2(v32) = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  int v38 = 1;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  *(void *)&long long v32 = &unk_1EC9A38B8;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v32, 0, 0, 0);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, a3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v32);
  int v13 = (llvm::raw_ostream *)llvm::outs(v12);
  uint64_t v14 = (_WORD *)*((void *)v13 + 4);
  if (*((void *)v13 + 3) - (void)v14 > 1uLL)
  {
    _WORD *v14 = 8253;
    *((void *)v13 + 4) += 2;
  }
  else
  {
    int v13 = llvm::raw_ostream::write(v13, "= ", 2uLL);
  }
  if (v42 >= 0) {
    int v15 = (const char *)&__p;
  }
  else {
    int v15 = (const char *)__p;
  }
  if (v42 >= 0) {
    size_t v16 = HIBYTE(v42);
  }
  else {
    size_t v16 = v41;
  }
  uint64_t v17 = llvm::raw_ostream::write(v13, v15, v16);
  if (SHIBYTE(v42) < 0)
  {
    int v18 = v41;
    if (v41 < 8) {
      goto LABEL_12;
    }
  }
  else
  {
    int v18 = HIBYTE(v42);
    if (HIBYTE(v42) <= 7u)
    {
LABEL_12:
      unsigned int v19 = 8 - v18;
      goto LABEL_15;
    }
  }
  unsigned int v19 = 0;
LABEL_15:
  int v20 = (llvm::raw_ostream *)llvm::outs(v17);
  size_t v21 = llvm::raw_ostream::indent(v20, v19);
  uint64_t v22 = *((void *)v21 + 4);
  if ((unint64_t)(*((void *)v21 + 3) - v22) <= 0xA)
  {
    uint64_t v23 = llvm::raw_ostream::write(v21, " (default: ", 0xBuLL);
    int v24 = *(unsigned __int8 *)(a4 + 16);
    int64x2_t v25 = (llvm *)llvm::outs(v23);
    if (v24) {
      goto LABEL_17;
    }
LABEL_21:
    uint64_t v30 = *((void *)v25 + 4);
    if ((unint64_t)(*((void *)v25 + 3) - v30) > 0xB)
    {
      *(_DWORD *)(v30 + 8) = 712273013;
      *(void *)uint64_t v30 = *(void *)"*no default*";
      *((void *)v25 + 4) += 12;
      int v27 = (llvm::raw_ostream *)llvm::outs(v25);
      size_t v28 = (_WORD *)*((void *)v27 + 4);
      if (*((void *)v27 + 3) - (void)v28 > 1uLL) {
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v31 = llvm::raw_ostream::write(v25, "*no default*", 0xCuLL);
      int v27 = (llvm::raw_ostream *)llvm::outs(v31);
      size_t v28 = (_WORD *)*((void *)v27 + 4);
      if (*((void *)v27 + 3) - (void)v28 > 1uLL) {
        goto LABEL_25;
      }
    }
LABEL_18:
    llvm::raw_ostream::write(v27, ")\n", 2uLL);
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_19;
  }
  *(_DWORD *)(v22 + 7) = 540701804;
  *(void *)uint64_t v22 = *(void *)" (default: ";
  *((void *)v21 + 4) += 11;
  int v29 = *(unsigned __int8 *)(a4 + 16);
  int64x2_t v25 = (llvm *)llvm::outs(v21);
  if (!v29) {
    goto LABEL_21;
  }
LABEL_17:
  size_t v26 = llvm::raw_ostream::operator<<(v25, *(void *)(a4 + 8));
  int v27 = (llvm::raw_ostream *)llvm::outs(v26);
  size_t v28 = (_WORD *)*((void *)v27 + 4);
  if (*((void *)v27 + 3) - (void)v28 <= 1uLL) {
    goto LABEL_18;
  }
LABEL_25:
  _WORD *v28 = 2601;
  *((void *)v27 + 4) += 2;
  if (SHIBYTE(v42) < 0) {
LABEL_19:
  }
    operator delete(__p);
}

llvm::raw_ostream *llvm::cl::parser<std::string>::printOptionDiff(llvm *a1, uint64_t a2, const void *a3, size_t a4, uint64_t a5, int a6)
{
  size_t v11 = (llvm::raw_ostream *)llvm::outs(a1);
  long long v38 = *(_OWORD *)(a2 + 16);
  uint64_t v39 = 2;
  int v13 = (llvm::raw_ostream *)llvm::outs(v12);
  uint64_t v14 = llvm::raw_ostream::indent(v13, a6 - *(_DWORD *)(a2 + 24));
  int v15 = (llvm::raw_ostream *)llvm::outs(v14);
  size_t v16 = v15;
  uint64_t v17 = (_WORD *)*((void *)v15 + 4);
  if (*((void *)v15 + 3) - (void)v17 > 1uLL)
  {
    _WORD *v17 = 8253;
    int v18 = (void *)(*((void *)v15 + 4) + 2);
    *((void *)v16 + 4) = v18;
    if (a4 <= *((void *)v16 + 3) - (void)v18) {
      goto LABEL_3;
    }
  }
  else
  {
    size_t v16 = llvm::raw_ostream::write(v15, "= ", 2uLL);
    int v18 = (void *)*((void *)v16 + 4);
    if (a4 <= *((void *)v16 + 3) - (void)v18)
    {
LABEL_3:
      if (a4)
      {
        int v18 = memcpy(v18, a3, a4);
        *((void *)v16 + 4) += a4;
        if (a4 > 7) {
          goto LABEL_5;
        }
      }
      goto LABEL_8;
    }
  }
  int v18 = llvm::raw_ostream::write(v16, (const char *)a3, a4);
  if (a4 > 7)
  {
LABEL_5:
    unsigned int v19 = 0;
    goto LABEL_9;
  }
LABEL_8:
  unsigned int v19 = 8 - a4;
LABEL_9:
  int v20 = (llvm::raw_ostream *)llvm::outs((llvm *)v18);
  size_t v21 = llvm::raw_ostream::indent(v20, v19);
  uint64_t v22 = *((void *)v21 + 4);
  if ((unint64_t)(*((void *)v21 + 3) - v22) > 0xA)
  {
    *(_DWORD *)(v22 + 7) = 540701804;
    *(void *)uint64_t v22 = *(void *)" (default: ";
    *((void *)v21 + 4) += 11;
    int v35 = *(unsigned __int8 *)(a5 + 32);
    int64x2_t v25 = (llvm::raw_ostream *)llvm::outs(v21);
    if (v35)
    {
LABEL_11:
      size_t v28 = *(const char **)(a5 + 8);
      uint64_t v27 = a5 + 8;
      size_t v26 = v28;
      int v29 = *(char *)(v27 + 23);
      if (v29 >= 0) {
        uint64_t v30 = (const char *)v27;
      }
      else {
        uint64_t v30 = v26;
      }
      if (v29 >= 0) {
        size_t v31 = *(unsigned __int8 *)(v27 + 23);
      }
      else {
        size_t v31 = *(void *)(v27 + 8);
      }
      long long v32 = llvm::raw_ostream::write(v25, v30, v31);
      uint64_t result = (llvm::raw_ostream *)llvm::outs(v32);
      uint64_t v34 = (_WORD *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v34 <= 1uLL) {
        goto LABEL_24;
      }
LABEL_22:
      *uint64_t v34 = 2601;
      *((void *)result + 4) += 2;
      return result;
    }
  }
  else
  {
    uint64_t v23 = llvm::raw_ostream::write(v21, " (default: ", 0xBuLL);
    int v24 = *(unsigned __int8 *)(a5 + 32);
    int64x2_t v25 = (llvm::raw_ostream *)llvm::outs(v23);
    if (v24) {
      goto LABEL_11;
    }
  }
  uint64_t v36 = *((void *)v25 + 4);
  if ((unint64_t)(*((void *)v25 + 3) - v36) > 0xB)
  {
    *(_DWORD *)(v36 + 8) = 712273013;
    *(void *)uint64_t v36 = *(void *)"*no default*";
    *((void *)v25 + 4) += 12;
    uint64_t result = (llvm::raw_ostream *)llvm::outs(v25);
    uint64_t v34 = (_WORD *)*((void *)result + 4);
    if (*((void *)result + 3) - (void)v34 > 1uLL) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v37 = llvm::raw_ostream::write(v25, "*no default*", 0xCuLL);
    uint64_t result = (llvm::raw_ostream *)llvm::outs(v37);
    uint64_t v34 = (_WORD *)*((void *)result + 4);
    if (*((void *)result + 3) - (void)v34 > 1uLL) {
      goto LABEL_22;
    }
  }
LABEL_24:

  return llvm::raw_ostream::write(result, ")\n", 2uLL);
}

double llvm::cl::basic_parser_impl::printOptionNoValue(llvm::cl::basic_parser_impl *this, const llvm::cl::Option *a2, int a3)
{
  unint64_t v5 = (llvm::raw_ostream *)llvm::outs(this);
  long long v12 = *((_OWORD *)a2 + 1);
  uint64_t v13 = 2;
  int v7 = (llvm::raw_ostream *)llvm::outs(v6);
  uint64_t v8 = llvm::raw_ostream::indent(v7, a3 - *((_DWORD *)a2 + 6));
  uint64_t v9 = (llvm::raw_ostream *)llvm::outs(v8);
  uint64_t v10 = (void *)*((void *)v9 + 4);
  if (*((void *)v9 + 3) - (void)v10 > 0x1DuLL)
  {
    qmemcpy(v10, "= *cannot print option value*\n", 30);
    double result = *(double *)"t option value*\n";
    *((void *)v9 + 4) += 30;
  }
  else
  {
    llvm::raw_ostream::write(v9, "= *cannot print option value*\n", 0x1EuLL);
  }
  return result;
}

void *llvm::cl::OptionCategory::OptionCategory(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  atomic_ullong v6 = qword_1EB215BF8[0];
  }
  uint64_t v7 = *(void *)(qword_1EB215BF8[0] + 120);
  if (v7 != *(void *)(qword_1EB215BF8[0] + 112)) {
    goto LABEL_4;
  }
  uint64_t v9 = *(unsigned int *)(qword_1EB215BF8[0] + 132);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 8 * v9;
    long long v12 = *(void **)(qword_1EB215BF8[0] + 120);
    while ((void *)*v12 != a1)
    {
      if (*v12 == -2) {
        uint64_t v10 = v12;
      }
      ++v12;
      v11 -= 8;
      if (!v11)
      {
        if (!v10) {
          goto LABEL_14;
        }
        *uint64_t v10 = a1;
        --*(_DWORD *)(v6 + 136);
        return a1;
      }
    }
    return a1;
  }
LABEL_14:
  if (v9 >= *(_DWORD *)(qword_1EB215BF8[0] + 128))
  {
LABEL_4:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(qword_1EB215BF8[0] + 112), a1);
    return a1;
  }
  *(_DWORD *)(qword_1EB215BF8[0] + 132) = v9 + 1;
  *(void *)(v7 + 8 * v9) = a1;
  return a1;
}

void anonymous namespace'::HelpPrinter::printHelp(_anonymous_namespace_::HelpPrinter *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  v131[256] = *MEMORY[0x1E4F143B8];
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  uint64_t v2 = *(void *)(qword_1EB215BF8[0] + 336);
  }
  unint64_t v129 = v131;
  uint64_t v130 = 0x8000000000;
  sortOpts(*(void **)(v2 + 128), *(_DWORD *)(v2 + 136), (uint64_t)&v129, *(unsigned __int8 *)(v1 + 8));
  __base = v128;
  size_t __nel = 0x8000000000;
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  int v124 = (uint64_t (***)(void, void **, llvm *))v1;
  }
  uint64_t v4 = *(void *)(qword_1EB215BF8[0] + 280);
  unint64_t v5 = (unsigned int *)(qword_1EB215BF8[0] + 288);
  if (v4 == *(void *)(qword_1EB215BF8[0] + 272)) {
    unint64_t v5 = (unsigned int *)(qword_1EB215BF8[0] + 292);
  }
  uint64_t v6 = *v5;
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    uint64_t v8 = *(uint64_t ***)(qword_1EB215BF8[0] + 280);
    while ((unint64_t)*v8 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v8;
      v7 -= 8;
      if (!v7) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v8 = *(uint64_t ***)(qword_1EB215BF8[0] + 280);
  }
  uint64_t v9 = (uint64_t **)(v4 + 8 * v6);
  if (v8 != v9)
  {
    uint64_t v10 = *v8;
LABEL_15:
    if (v10[1])
    {
      uint64_t v11 = *v10;
      uint64_t v12 = __nel;
      if (__nel >= (unint64_t)HIDWORD(__nel))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, v128, __nel + 1, 16);
        uint64_t v12 = __nel;
      }
      uint64_t v13 = (char *)__base + 16 * v12;
      void *v13 = v11;
      v13[1] = v10;
      LODWORD(__nel) = __nel + 1;
    }
    while (++v8 != v9)
    {
      uint64_t v10 = *v8;
      if ((unint64_t)*v8 < 0xFFFFFFFFFFFFFFFELL)
      {
        if (v8 != v9) {
          goto LABEL_15;
        }
        break;
      }
    }
  }
LABEL_22:
  if (__nel < 2)
  {
    if (atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
      goto LABEL_24;
    }
LABEL_27:
    if (!*(void *)(qword_1EB215BF8[0] + 32)) {
      goto LABEL_39;
    }
    goto LABEL_28;
  }
  qsort(__base, __nel, 0x10uLL, (int (__cdecl *)(const void *, const void *))SubNameCompare);
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
    goto LABEL_27;
  }
LABEL_24:
  if (!*(void *)(qword_1EB215BF8[0] + 32))
  {
LABEL_39:
    if (atomic_load_explicit(llvm::cl::TopLevelSubCommand, memory_order_acquire)) {
      goto LABEL_40;
    }
    goto LABEL_56;
  }
LABEL_28:
  uint64_t v14 = (llvm::raw_ostream *)llvm::outs(v3);
  int v15 = v14;
  uint64_t v16 = *((void *)v14 + 4);
  if ((unint64_t)(*((void *)v14 + 3) - v16) > 9)
  {
    *(_WORD *)(v16 + 8) = 8250;
    *(void *)uint64_t v16 = *(void *)"OVERVIEW: ";
    *((void *)v14 + 4) += 10;
    if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
      goto LABEL_34;
    }
LABEL_32:
    uint64_t v17 = *(const char **)(qword_1EB215BF8[0] + 24);
    size_t v18 = *(void *)(qword_1EB215BF8[0] + 32);
    uint64_t v3 = (llvm::raw_ostream *)*((void *)v15 + 4);
    if (v18 <= *((void *)v15 + 3) - (void)v3) {
      goto LABEL_35;
    }
LABEL_33:
    int v15 = llvm::raw_ostream::write(v15, v17, v18);
    uint64_t v3 = (llvm::raw_ostream *)*((void *)v15 + 4);
    goto LABEL_37;
  }
  int v15 = llvm::raw_ostream::write(v14, "OVERVIEW: ", 0xAuLL);
  if (atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
    goto LABEL_32;
  }
LABEL_34:
  uint64_t v17 = *(const char **)(qword_1EB215BF8[0] + 24);
  size_t v18 = *(void *)(qword_1EB215BF8[0] + 32);
  uint64_t v3 = (llvm::raw_ostream *)*((void *)v15 + 4);
  if (v18 > *((void *)v15 + 3) - (void)v3) {
    goto LABEL_33;
  }
LABEL_35:
  if (v18)
  {
    memcpy(v3, v17, v18);
    uint64_t v3 = (llvm::raw_ostream *)(*((void *)v15 + 4) + v18);
    *((void *)v15 + 4) = v3;
  }
LABEL_37:
  if (*((llvm::raw_ostream **)v15 + 3) != v3)
  {
    *(unsigned char *)uint64_t v3 = 10;
    ++*((void *)v15 + 4);
    goto LABEL_39;
  }
  uint64_t v3 = llvm::raw_ostream::write(v15, "\n", 1uLL);
  if (atomic_load_explicit(llvm::cl::TopLevelSubCommand, memory_order_acquire))
  {
LABEL_40:
    if (v2 != llvm::cl::TopLevelSubCommand[0]) {
      goto LABEL_41;
    }
LABEL_57:
    uint64_t v30 = (llvm::raw_ostream *)llvm::outs(v3);
    size_t v31 = v30;
    long long v32 = (_DWORD *)*((void *)v30 + 4);
    if (*((void *)v30 + 3) - (void)v32 > 6uLL)
    {
      *(_DWORD *)((char *)v32 + 3) = 540689735;
      *long long v32 = 1195463509;
      *((void *)v30 + 4) += 7;
      if (atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
        goto LABEL_86;
      }
    }
    else
    {
      size_t v31 = llvm::raw_ostream::write(v30, "USAGE: ", 7uLL);
      if (atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
        goto LABEL_86;
      }
    }
LABEL_86:
    int v43 = *(char *)(qword_1EB215BF8[0] + 23);
    if (v43 >= 0) {
      long long v44 = (const char *)qword_1EB215BF8[0];
    }
    else {
      long long v44 = *(const char **)qword_1EB215BF8[0];
    }
    if (v43 >= 0) {
      size_t v45 = *(unsigned __int8 *)(qword_1EB215BF8[0] + 23);
    }
    else {
      size_t v45 = *(void *)(qword_1EB215BF8[0] + 8);
    }
    uint64_t v46 = llvm::raw_ostream::write(v31, v44, v45);
    if (__nel >= 3)
    {
      uint64_t v47 = (llvm *)llvm::outs(v46);
      std::error_code v48 = (void *)*((void *)v47 + 4);
      if (*((void *)v47 + 3) - (void)v48 > 0xCuLL)
      {
        qmemcpy(v48, " [subcommand]", 13);
        *((void *)v47 + 4) += 13;
        uint64_t v39 = (llvm::raw_ostream *)llvm::outs(v47);
        uint64_t v49 = *((void *)v39 + 4);
        if ((unint64_t)(*((void *)v39 + 3) - v49) <= 9)
        {
LABEL_96:
          uint64_t v39 = llvm::raw_ostream::write(v39, " [options]", 0xAuLL);
          uint64_t v125 = v2;
          uint64_t v42 = *(unsigned int *)(v2 + 40);
          if (!v42) {
            goto LABEL_116;
          }
LABEL_100:
          uint64_t v50 = *(void *)(v125 + 32);
          uint64_t v51 = 8 * v42;
          while (1)
          {
            uint64_t v52 = *(void **)v50;
            if (!*(void *)(*(void *)v50 + 24)) {
              goto LABEL_108;
            }
            char v53 = (llvm::raw_ostream *)llvm::outs(v39);
            long long v54 = v53;
            uint64_t v55 = *((void *)v53 + 4);
            if ((unint64_t)(*((void *)v53 + 3) - v55) > 2)
            {
              *(unsigned char *)(v55 + 2) = 45;
              *(_WORD *)uint64_t v55 = 11552;
              uint64_t v39 = (llvm::raw_ostream *)(*((void *)v53 + 4) + 3);
              *((void *)v54 + 4) = v39;
              uint64_t v56 = (const void *)v52[2];
              size_t v57 = v52[3];
              if (v57 <= *((void *)v54 + 3) - (void)v39)
              {
LABEL_106:
                if (v57)
                {
                  uint64_t v39 = (llvm::raw_ostream *)memcpy(v39, v56, v57);
                  *((void *)v54 + 4) += v57;
                }
LABEL_108:
                uint64_t v58 = (llvm::raw_ostream *)llvm::outs(v39);
                char v59 = (unsigned char *)*((void *)v58 + 4);
                if (*((unsigned char **)v58 + 3) != v59) {
                  goto LABEL_109;
                }
                goto LABEL_113;
              }
            }
            else
            {
              long long v54 = llvm::raw_ostream::write(v53, " --", 3uLL);
              uint64_t v39 = (llvm::raw_ostream *)*((void *)v54 + 4);
              uint64_t v56 = (const void *)v52[2];
              size_t v57 = v52[3];
              if (v57 <= *((void *)v54 + 3) - (void)v39) {
                goto LABEL_106;
              }
            }
            size_t v62 = llvm::raw_ostream::write(v54, (const char *)v56, v57);
            uint64_t v58 = (llvm::raw_ostream *)llvm::outs(v62);
            char v59 = (unsigned char *)*((void *)v58 + 4);
            if (*((unsigned char **)v58 + 3) != v59)
            {
LABEL_109:
              unsigned char *v59 = 32;
              uint64_t v39 = (llvm::raw_ostream *)(*((void *)v58 + 4) + 1);
              *((void *)v58 + 4) = v39;
              int v60 = (const void *)v52[4];
              size_t v61 = v52[5];
              if (v61 <= *((void *)v58 + 3) - (void)v39) {
                goto LABEL_114;
              }
              goto LABEL_101;
            }
LABEL_113:
            uint64_t v58 = llvm::raw_ostream::write(v58, " ", 1uLL);
            uint64_t v39 = (llvm::raw_ostream *)*((void *)v58 + 4);
            int v60 = (const void *)v52[4];
            size_t v61 = v52[5];
            if (v61 <= *((void *)v58 + 3) - (void)v39)
            {
LABEL_114:
              if (v61)
              {
                uint64_t v39 = (llvm::raw_ostream *)memcpy(v39, v60, v61);
                *((void *)v58 + 4) += v61;
              }
              goto LABEL_102;
            }
LABEL_101:
            uint64_t v39 = llvm::raw_ostream::write(v58, (const char *)v60, v61);
LABEL_102:
            v50 += 8;
            v51 -= 8;
            if (!v51) {
              goto LABEL_116;
            }
          }
        }
LABEL_99:
        *(_WORD *)(v49 + 8) = 23923;
        *(void *)uint64_t v49 = *(void *)" [options]";
        *((void *)v39 + 4) += 10;
        uint64_t v125 = v2;
        uint64_t v42 = *(unsigned int *)(v2 + 40);
        if (!v42) {
          goto LABEL_116;
        }
        goto LABEL_100;
      }
      uint64_t v46 = llvm::raw_ostream::write(v47, " [subcommand]", 0xDuLL);
    }
    uint64_t v39 = (llvm::raw_ostream *)llvm::outs(v46);
    uint64_t v49 = *((void *)v39 + 4);
    if ((unint64_t)(*((void *)v39 + 3) - v49) <= 9) {
      goto LABEL_96;
    }
    goto LABEL_99;
  }
LABEL_56:
  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  if (v2 == llvm::cl::TopLevelSubCommand[0]) {
    goto LABEL_57;
  }
LABEL_41:
  if (!*(void *)(v2 + 24)) {
    goto LABEL_52;
  }
  unsigned int v19 = (llvm::raw_ostream *)llvm::outs(v3);
  int v20 = v19;
  uint64_t v21 = *((void *)v19 + 4);
  if ((unint64_t)(*((void *)v19 + 3) - v21) <= 0xB)
  {
    int v20 = llvm::raw_ostream::write(v19, "SUBCOMMAND '", 0xCuLL);
    uint64_t v22 = (unsigned char *)*((void *)v20 + 4);
    uint64_t v23 = *(const char **)v2;
    size_t v24 = *(void *)(v2 + 8);
    if (v24 <= *((void *)v20 + 3) - (void)v22) {
      goto LABEL_44;
    }
LABEL_61:
    int v20 = llvm::raw_ostream::write(v20, v23, v24);
    uint64_t v22 = (unsigned char *)*((void *)v20 + 4);
    if (*((void *)v20 + 3) - (void)v22 <= 2uLL) {
      goto LABEL_47;
    }
    goto LABEL_62;
  }
  *(_DWORD *)(v21 + 8) = 656426062;
  *(void *)uint64_t v21 = *(void *)"SUBCOMMAND '";
  uint64_t v22 = (unsigned char *)(*((void *)v19 + 4) + 12);
  *((void *)v20 + 4) = v22;
  uint64_t v23 = *(const char **)v2;
  size_t v24 = *(void *)(v2 + 8);
  if (v24 > *((void *)v20 + 3) - (void)v22) {
    goto LABEL_61;
  }
LABEL_44:
  if (v24)
  {
    memcpy(v22, v23, v24);
    uint64_t v22 = (unsigned char *)(*((void *)v20 + 4) + v24);
    *((void *)v20 + 4) = v22;
  }
  if (*((void *)v20 + 3) - (void)v22 <= 2uLL)
  {
LABEL_47:
    int v20 = llvm::raw_ostream::write(v20, "': ", 3uLL);
    int64x2_t v25 = (_WORD *)*((void *)v20 + 4);
    size_t v26 = *(const void **)(v2 + 16);
    size_t v27 = *(void *)(v2 + 24);
    if (v27 <= *((void *)v20 + 3) - (void)v25) {
      goto LABEL_48;
    }
    goto LABEL_63;
  }
LABEL_62:
  v22[2] = 32;
  *(_WORD *)uint64_t v22 = 14887;
  int64x2_t v25 = (_WORD *)(*((void *)v20 + 4) + 3);
  *((void *)v20 + 4) = v25;
  size_t v26 = *(const void **)(v2 + 16);
  size_t v27 = *(void *)(v2 + 24);
  if (v27 <= *((void *)v20 + 3) - (void)v25)
  {
LABEL_48:
    if (v27)
    {
      memcpy(v25, v26, v27);
      int64x2_t v25 = (_WORD *)(*((void *)v20 + 4) + v27);
      *((void *)v20 + 4) = v25;
    }
    if (*((void *)v20 + 3) - (void)v25 <= 1uLL) {
      goto LABEL_51;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v20 = llvm::raw_ostream::write(v20, (const char *)v26, v27);
  int64x2_t v25 = (_WORD *)*((void *)v20 + 4);
  if (*((void *)v20 + 3) - (void)v25 <= 1uLL)
  {
LABEL_51:
    uint64_t v3 = llvm::raw_ostream::write(v20, "\n\n", 2uLL);
LABEL_52:
    size_t v28 = (llvm::raw_ostream *)llvm::outs(v3);
    int v29 = (_DWORD *)*((void *)v28 + 4);
    if (*((void *)v28 + 3) - (void)v29 <= 6uLL) {
      goto LABEL_53;
    }
LABEL_65:
    *(_DWORD *)((char *)v29 + 3) = 540689735;
    _DWORD *v29 = 1195463509;
    *((void *)v28 + 4) += 7;
    if (atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
LABEL_64:
  *int64x2_t v25 = 2570;
  *((void *)v20 + 4) += 2;
  size_t v28 = (llvm::raw_ostream *)llvm::outs((llvm *)v25);
  int v29 = (_DWORD *)*((void *)v28 + 4);
  if (*((void *)v28 + 3) - (void)v29 > 6uLL) {
    goto LABEL_65;
  }
LABEL_53:
  size_t v28 = llvm::raw_ostream::write(v28, "USAGE: ", 7uLL);
  if (atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
    goto LABEL_67;
  }
LABEL_66:
LABEL_67:
  int v33 = *(char *)(qword_1EB215BF8[0] + 23);
  if (v33 >= 0) {
    uint64_t v34 = (const char *)qword_1EB215BF8[0];
  }
  else {
    uint64_t v34 = *(const char **)qword_1EB215BF8[0];
  }
  if (v33 >= 0) {
    size_t v35 = *(unsigned __int8 *)(qword_1EB215BF8[0] + 23);
  }
  else {
    size_t v35 = *(void *)(qword_1EB215BF8[0] + 8);
  }
  uint64_t v36 = llvm::raw_ostream::write(v28, v34, v35);
  uint64_t v37 = v36;
  long long v38 = (unsigned char *)*((void *)v36 + 4);
  if (*((unsigned char **)v36 + 3) == v38)
  {
    uint64_t v37 = llvm::raw_ostream::write(v36, " ", 1uLL);
    uint64_t v39 = (llvm::raw_ostream *)*((void *)v37 + 4);
    size_t v40 = *(const char **)v2;
    size_t v41 = *(void *)(v2 + 8);
    if (v41 > *((void *)v37 + 3) - (void)v39) {
      goto LABEL_75;
    }
  }
  else
  {
    unsigned char *v38 = 32;
    uint64_t v39 = (llvm::raw_ostream *)(*((void *)v36 + 4) + 1);
    *((void *)v37 + 4) = v39;
    size_t v40 = *(const char **)v2;
    size_t v41 = *(void *)(v2 + 8);
    if (v41 > *((void *)v37 + 3) - (void)v39)
    {
LABEL_75:
      uint64_t v37 = llvm::raw_ostream::write(v37, v40, v41);
      uint64_t v39 = (llvm::raw_ostream *)*((void *)v37 + 4);
      goto LABEL_79;
    }
  }
  if (v41)
  {
    memcpy(v39, v40, v41);
    uint64_t v39 = (llvm::raw_ostream *)(*((void *)v37 + 4) + v41);
    *((void *)v37 + 4) = v39;
  }
LABEL_79:
  if (*((void *)v37 + 3) - (void)v39 <= 9uLL)
  {
    uint64_t v39 = llvm::raw_ostream::write(v37, " [options]", 0xAuLL);
    uint64_t v125 = v2;
    uint64_t v42 = *(unsigned int *)(v2 + 40);
    if (!v42) {
      goto LABEL_116;
    }
    goto LABEL_100;
  }
  *((_WORD *)v39 + 4) = 23923;
  *(void *)uint64_t v39 = *(void *)" [options]";
  *((void *)v37 + 4) += 10;
  uint64_t v125 = v2;
  uint64_t v42 = *(unsigned int *)(v2 + 40);
  if (v42) {
    goto LABEL_100;
  }
LABEL_116:
  unint64_t v63 = 0x1EB215000;
  if (!*(void *)(v125 + 152)) {
    goto LABEL_123;
  }
  size_t v64 = (llvm::raw_ostream *)llvm::outs(v39);
  size_t v65 = v64;
  long long v66 = (unsigned char *)*((void *)v64 + 4);
  if (*((unsigned char **)v64 + 3) == v66)
  {
    size_t v65 = llvm::raw_ostream::write(v64, " ", 1uLL);
    uint64_t v39 = (llvm::raw_ostream *)*((void *)v65 + 4);
    uint64_t v70 = *(void *)(v125 + 152);
    size_t v68 = *(const char **)(v70 + 32);
    size_t v69 = *(void *)(v70 + 40);
    if (v69 > *((void *)v65 + 3) - (void)v39) {
      goto LABEL_119;
    }
  }
  else
  {
    *long long v66 = 32;
    uint64_t v39 = (llvm::raw_ostream *)(*((void *)v64 + 4) + 1);
    *((void *)v65 + 4) = v39;
    uint64_t v67 = *(void *)(v125 + 152);
    size_t v68 = *(const char **)(v67 + 32);
    size_t v69 = *(void *)(v67 + 40);
    if (v69 > *((void *)v65 + 3) - (void)v39)
    {
LABEL_119:
      uint64_t v39 = llvm::raw_ostream::write(v65, v68, v69);
      goto LABEL_123;
    }
  }
  if (v69)
  {
    uint64_t v39 = (llvm::raw_ostream *)memcpy(v39, v68, v69);
    *((void *)v65 + 4) += v69;
  }
LABEL_123:
  if (atomic_load_explicit(llvm::cl::TopLevelSubCommand, memory_order_acquire))
  {
    if (v125 != llvm::cl::TopLevelSubCommand[0]) {
      goto LABEL_175;
    }
  }
  else
  {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    if (v125 != llvm::cl::TopLevelSubCommand[0]) {
      goto LABEL_175;
    }
  }
  uint64_t v71 = __nel;
  if (!__nel)
  {
LABEL_175:
    size_t v108 = (llvm::raw_ostream *)llvm::outs(v39);
    unint64_t v109 = (_WORD *)*((void *)v108 + 4);
    if (*((void *)v108 + 3) - (void)v109 <= 1uLL) {
      goto LABEL_176;
    }
LABEL_184:
    *unint64_t v109 = 2570;
    *((void *)v108 + 4) += 2;
    uint64_t v110 = v130;
    if (v130) {
      goto LABEL_177;
    }
    goto LABEL_185;
  }
  int v72 = 0;
  size_t v73 = (const char **)__base;
  do
  {
    int v74 = *v73;
    v73 += 2;
    unint64_t v75 = (llvm *)strlen(v74);
    if (v72 <= v75) {
      int v72 = v75;
    }
    --v71;
  }
  while (v71);
  unint64_t v76 = (llvm::raw_ostream *)llvm::outs(v75);
  std::string v77 = (_WORD *)*((void *)v76 + 4);
  if (*((void *)v76 + 3) - (void)v77 <= 1uLL)
  {
    long long v78 = llvm::raw_ostream::write(v76, "\n\n", 2uLL);
    unsigned int v79 = (llvm::raw_ostream *)llvm::outs(v78);
    int v80 = (void *)*((void *)v79 + 4);
    if (*((void *)v79 + 3) - (void)v80 > 0xDuLL) {
      goto LABEL_134;
    }
LABEL_137:
    unsigned int v79 = llvm::raw_ostream::write(v79, "SUBCOMMANDS:\n\n", 0xEuLL);
    uint64_t v81 = __nel;
    if (!__nel) {
      goto LABEL_159;
    }
    goto LABEL_138;
  }
  *std::string v77 = 2570;
  *((void *)v76 + 4) += 2;
  unsigned int v79 = (llvm::raw_ostream *)llvm::outs(v76);
  int v80 = (void *)*((void *)v79 + 4);
  if (*((void *)v79 + 3) - (void)v80 <= 0xDuLL) {
    goto LABEL_137;
  }
LABEL_134:
  qmemcpy(v80, "SUBCOMMANDS:\n\n", 14);
  *((void *)v79 + 4) += 14;
  uint64_t v81 = __nel;
  if (__nel)
  {
LABEL_138:
    uint64_t v82 = 16 * v81;
    std::string v83 = (char *)__base + 8;
    while (1)
    {
      std::error_code v84 = (llvm::raw_ostream *)llvm::outs(v79);
      unint64_t v86 = v84;
      int64_t v87 = (_WORD *)*((void *)v84 + 4);
      if (*((void *)v84 + 3) - (void)v87 > 1uLL)
      {
        *int64_t v87 = 8224;
        *((void *)v84 + 4) += 2;
        std::string v88 = (const char *)*((void *)v83 - 1);
        if (!v88) {
          goto LABEL_152;
        }
      }
      else
      {
        std::error_code v84 = llvm::raw_ostream::write(v84, "  ", 2uLL);
        unint64_t v86 = v84;
        std::string v88 = (const char *)*((void *)v83 - 1);
        if (!v88) {
          goto LABEL_152;
        }
      }
      size_t v89 = strlen(v88);
      std::error_code v84 = (llvm::raw_ostream *)*((void *)v86 + 4);
      if (v89 <= *((void *)v86 + 3) - (void)v84)
      {
        if (v89)
        {
          std::error_code v84 = (llvm::raw_ostream *)memcpy(v84, v88, v89);
          *((void *)v86 + 4) += v89;
        }
      }
      else
      {
        std::error_code v84 = llvm::raw_ostream::write(v86, v88, v89);
      }
LABEL_152:
      if (*(void *)(*(void *)v83 + 24))
      {
        int v90 = (llvm::raw_ostream *)llvm::outs(v84);
        int v91 = strlen(*((const char **)v83 - 1));
        uint64_t v92 = llvm::raw_ostream::indent(v90, (int)v72 - v91);
        uint64_t v93 = (llvm::raw_ostream *)llvm::outs(v92);
        int v94 = v93;
        uint64_t v95 = *((void *)v93 + 4);
        if ((unint64_t)(*((void *)v93 + 3) - v95) > 2)
        {
          *(unsigned char *)(v95 + 2) = 32;
          *(_WORD *)uint64_t v95 = 11552;
          std::error_code v84 = (llvm::raw_ostream *)(*((void *)v93 + 4) + 3);
          *((void *)v94 + 4) = v84;
          size_t v96 = *(const void **)(*(void *)v83 + 16);
          size_t v97 = *(void *)(*(void *)v83 + 24);
          if (v97 <= *((void *)v94 + 3) - (void)v84)
          {
LABEL_157:
            if (v97)
            {
              std::error_code v84 = (llvm::raw_ostream *)memcpy(v84, v96, v97);
              *((void *)v94 + 4) += v97;
            }
            goto LABEL_140;
          }
        }
        else
        {
          int v94 = llvm::raw_ostream::write(v93, " - ", 3uLL);
          std::error_code v84 = (llvm::raw_ostream *)*((void *)v94 + 4);
          size_t v96 = *(const void **)(*(void *)v83 + 16);
          size_t v97 = *(void *)(*(void *)v83 + 24);
          if (v97 <= *((void *)v94 + 3) - (void)v84) {
            goto LABEL_157;
          }
        }
        std::error_code v84 = llvm::raw_ostream::write(v94, (const char *)v96, v97);
      }
LABEL_140:
      unsigned int v79 = (llvm::raw_ostream *)llvm::outs(v84);
      long long v85 = (unsigned char *)*((void *)v79 + 4);
      if (*((unsigned char **)v79 + 3) == v85)
      {
        unsigned int v79 = llvm::raw_ostream::write(v79, "\n", 1uLL);
        v83 += 16;
        v82 -= 16;
        if (!v82) {
          break;
        }
      }
      else
      {
        *long long v85 = 10;
        ++*((void *)v79 + 4);
        v83 += 16;
        v82 -= 16;
        if (!v82) {
          break;
        }
      }
    }
  }
LABEL_159:
  uint64_t v98 = (llvm::raw_ostream *)llvm::outs(v79);
  unint64_t v99 = (unsigned char *)*((void *)v98 + 4);
  if (*((unsigned char **)v98 + 3) == v99)
  {
    uint64_t v98 = llvm::raw_ostream::write(v98, "\n", 1uLL);
  }
  else
  {
    *unint64_t v99 = 10;
    ++*((void *)v98 + 4);
  }
  unint64_t v63 = 0x1EB215000uLL;
  size_t v100 = (llvm::raw_ostream *)llvm::outs(v98);
  unint64_t v101 = v100;
  BOOL v102 = (void *)*((void *)v100 + 4);
  if (*((void *)v100 + 3) - (void)v102 > 7uLL)
  {
    void *v102 = 0x2220657079542020;
    *((void *)v100 + 4) += 8;
    if (atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
      goto LABEL_167;
    }
  }
  else
  {
    unint64_t v101 = llvm::raw_ostream::write(v100, "  Type \"", 8uLL);
    if (atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
      goto LABEL_167;
    }
  }
LABEL_167:
  int v103 = *(char *)(qword_1EB215BF8[0] + 23);
  if (v103 >= 0) {
    char v104 = (const char *)qword_1EB215BF8[0];
  }
  else {
    char v104 = *(const char **)qword_1EB215BF8[0];
  }
  if (v103 >= 0) {
    size_t v105 = *(unsigned __int8 *)(qword_1EB215BF8[0] + 23);
  }
  else {
    size_t v105 = *(void *)(qword_1EB215BF8[0] + 8);
  }
  uint64_t v106 = llvm::raw_ostream::write(v101, v104, v105);
  uint64_t v107 = (void *)*((void *)v106 + 4);
  if (*((void *)v106 + 3) - (void)v107 <= 0x3EuLL)
  {
    uint64_t v39 = llvm::raw_ostream::write(v106, " <subcommand> --help\" to get more help on a specific subcommand", 0x3FuLL);
    goto LABEL_175;
  }
  qmemcpy(v107, " <subcommand> --help\" to get more help on a specific subcommand", 63);
  *((void *)v106 + 4) += 63;
  size_t v108 = (llvm::raw_ostream *)llvm::outs(v106);
  unint64_t v109 = (_WORD *)*((void *)v108 + 4);
  if (*((void *)v108 + 3) - (void)v109 > 1uLL) {
    goto LABEL_184;
  }
LABEL_176:
  size_t v108 = llvm::raw_ostream::write(v108, "\n\n", 2uLL);
  uint64_t v110 = v130;
  if (v130)
  {
LABEL_177:
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    uint64_t v113 = 16 * v110;
    do
    {
      unsigned int v114 = (llvm *)(*(uint64_t (**)(void))(**(void **)((char *)v129 + v111 + 8) + 40))(*(void *)((char *)v129 + v111 + 8));
      if (v112 <= v114) {
        uint64_t v112 = v114;
      }
      v111 += 16;
    }
    while (v113 != v111);
    unsigned int v115 = (llvm::raw_ostream *)llvm::outs(v114);
    uint64_t v116 = *((void *)v115 + 4);
    if ((unint64_t)(*((void *)v115 + 3) - v116) <= 8) {
      goto LABEL_182;
    }
    goto LABEL_186;
  }
LABEL_185:
  uint64_t v112 = 0;
  unsigned int v115 = (llvm::raw_ostream *)llvm::outs(v108);
  uint64_t v116 = *((void *)v115 + 4);
  if ((unint64_t)(*((void *)v115 + 3) - v116) <= 8)
  {
LABEL_182:
    llvm::raw_ostream::write(v115, "OPTIONS:\n", 9uLL);
    goto LABEL_187;
  }
LABEL_186:
  *(unsigned char *)(v116 + 8) = 10;
  *(void *)uint64_t v116 = *(void *)"OPTIONS:\n";
  *((void *)v115 + 4) += 9;
LABEL_187:
  int v117 = (llvm *)(**v124)(v124, &v129, v112);
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  uint64_t v118 = *(void *)(v63 + 3064);
  }
  uint64_t v119 = *(void *)(v118 + 40);
  for (uint64_t i = *(void *)(v118 + 48); v119 != i; v119 += 16)
  {
    while (1)
    {
      uint64_t v121 = (llvm::raw_ostream *)llvm::outs(v117);
      size_t v122 = *(const char **)v119;
      unint64_t v123 = *(void *)(v119 + 8);
      int v117 = (llvm *)*((void *)v121 + 4);
      if (v123 <= *((void *)v121 + 3) - (void)v117) {
        break;
      }
      int v117 = llvm::raw_ostream::write(v121, v122, *(void *)(v119 + 8));
      v119 += 16;
      if (v119 == i) {
        goto LABEL_196;
      }
    }
    if (v123)
    {
      int v117 = (llvm *)memcpy(v117, v122, *(void *)(v119 + 8));
      *((void *)v121 + 4) += v123;
    }
  }
LABEL_196:
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  *(void *)(*(void *)(v63 + 3064) + 48) = *(void *)(*(void *)(v63 + 3064) + 40);
  }
  if (__base != v128) {
    free(__base);
  }
  if (v129 != v131) {
    free(v129);
  }
}

llvm::raw_ostream *anonymous namespace'::VersionPrinter::print(llvm *a1)
{
  uint64_t v2 = (llvm::raw_ostream *)llvm::outs(a1);
  uint64_t v3 = v2;
  uint64_t v4 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v4 > 0x1AuLL)
  {
    qmemcpy(v4, "LLVM (http://llvm.org/):\n  ", 27);
    uint64_t v17 = *((void *)v2 + 3);
    unint64_t v5 = (_DWORD *)(*((void *)v2 + 4) + 27);
    *((void *)v2 + 4) = v5;
    if ((unint64_t)(v17 - (void)v5) > 3)
    {
LABEL_3:
      *unint64_t v5 = 1297501260;
      uint64_t v6 = *((void *)v3 + 4) + 4;
      *((void *)v3 + 4) = v6;
      double result = v3;
      if ((unint64_t)(*((void *)v3 + 3) - v6) > 8) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v2, "LLVM (http://llvm.org/):\n  ", 0x1BuLL);
    unint64_t v5 = (_DWORD *)*((void *)v3 + 4);
    if (*((void *)v3 + 3) - (void)v5 > 3uLL) {
      goto LABEL_3;
    }
  }
  double result = llvm::raw_ostream::write(v3, "LLVM", 4uLL);
  uint64_t v6 = *((void *)result + 4);
  if ((unint64_t)(*((void *)result + 3) - v6) > 8)
  {
LABEL_4:
    *(unsigned char *)(v6 + 8) = 32;
    *(void *)uint64_t v6 = *(void *)" version ";
    uint64_t v8 = *((void *)result + 3);
    uint64_t v9 = *((void *)result + 4) + 9;
    *((void *)result + 4) = v9;
    if ((unint64_t)(v8 - v9) > 8) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  double result = llvm::raw_ostream::write(result, " version ", 9uLL);
  uint64_t v9 = *((void *)result + 4);
  if ((unint64_t)(*((void *)result + 3) - v9) > 8)
  {
LABEL_5:
    *(unsigned char *)(v9 + 8) = 116;
    *(void *)uint64_t v9 = *(void *)"18.0.0git";
    uint64_t v10 = *((void *)result + 3);
    uint64_t v11 = *((void *)result + 4) + 9;
    *((void *)result + 4) = v11;
    if ((unint64_t)(v10 - v11) > 2) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  double result = llvm::raw_ostream::write(result, "18.0.0git", 9uLL);
  uint64_t v11 = *((void *)result + 4);
  if ((unint64_t)(*((void *)result + 3) - v11) > 2)
  {
LABEL_6:
    *(unsigned char *)(v11 + 2) = 32;
    *(_WORD *)uint64_t v11 = 8202;
    *((void *)result + 4) += 3;
    uint64_t v12 = (void *)*((void *)v3 + 4);
    if (*((void *)v3 + 3) - (void)v12 > 0xEuLL) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  double result = llvm::raw_ostream::write(result, "\n  ", 3uLL);
  uint64_t v12 = (void *)*((void *)v3 + 4);
  if (*((void *)v3 + 3) - (void)v12 > 0xEuLL)
  {
LABEL_7:
    qmemcpy(v12, "Optimized build", 15);
    uint64_t v13 = *((void *)v3 + 3);
    uint64_t v14 = (_WORD *)(*((void *)v3 + 4) + 15);
    *((void *)v3 + 4) = v14;
    if ((unint64_t)(v13 - (void)v14) > 1) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  double result = llvm::raw_ostream::write(v3, "Optimized build", 0xFuLL);
  uint64_t v14 = (_WORD *)*((void *)v3 + 4);
  if (*((void *)v3 + 3) - (void)v14 > 1uLL)
  {
LABEL_8:
    _WORD *v14 = 2606;
    *((void *)v3 + 4) += 2;
    uint64_t v16 = *(void *)a1;
    uint64_t v15 = *((void *)a1 + 1);
    if (v16 != v15) {
      goto LABEL_17;
    }
    return result;
  }
LABEL_16:
  double result = llvm::raw_ostream::write(v3, ".\n", 2uLL);
  uint64_t v16 = *(void *)a1;
  uint64_t v15 = *((void *)a1 + 1);
  if (v16 != v15)
  {
LABEL_17:
    while (1)
    {
      size_t v18 = llvm::outs(result);
      uint64_t v19 = *(void *)(v16 + 24);
      if (!v19) {
        break;
      }
      double result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v19 + 48))(v19, v18);
      v16 += 32;
      if (v16 == v15) {
        return result;
      }
    }
    uint64_t v20 = std::__throw_bad_function_call[abi:nn180100]();
    return (llvm::raw_ostream *)std::vector<std::function<void ()(llvm::raw_ostream &)>>::vector(v20);
  }
  return result;
}

void *std::vector<std::function<void ()(llvm::raw_ostream &)>>::vector(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0) {
      abort();
    }
    uint64_t v6 = v5 >> 5;
    uint64_t v7 = (char *)operator new(v5);
    uint64_t v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[32 * v6];
    do
    {
      uint64_t v9 = &v7[v8];
      uint64_t v10 = *(void *)(v3 + v8 + 24);
      if (v10)
      {
        if (v3 + v8 == v10)
        {
          *(void *)&v7[v8 + 24] = v9;
          (*(void (**)(void))(*(void *)(v3 + v8) + 24))();
        }
        else
        {
          *(void *)&v7[v8 + 24] = (*(uint64_t (**)(void, char *))(*(void *)v10 + 16))(*(void *)(v3 + v8 + 24), v9);
        }
      }
      else
      {
        *((void *)v9 + 3) = 0;
      }
      v8 += 32;
    }
    while (v3 + v8 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void *std::vector<std::function<void ()(llvm::raw_ostream &)>>::~vector[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      int64_t v5 = v3 - 4;
      uint64_t v6 = v3 - 4;
      do
      {
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v2;
        v6 -= 4;
      }
      while (!v7);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t llvm::cl::Option::getValueExpectedFlagDefault(llvm::cl::Option *this)
{
  return 1;
}

BOOL llvm::cl::OptionValueCopy<llvm::cl::BOOLOrDefault>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

uint64_t llvm::cl::parser<BOOL>::getValueName()
{
  return 0;
}

uint64_t llvm::cl::parser<llvm::cl::BOOLOrDefault>::getValueName()
{
  return 0;
}

const char *llvm::cl::parser<long long>::getValueName()
{
  return "long";
}

const char *llvm::cl::parser<unsigned int>::getValueName()
{
  return "uint";
}

const char *llvm::cl::parser<unsigned long long>::getValueName()
{
  return "ulong";
}

const char *llvm::cl::parser<std::string>::getValueName()
{
  return "string";
}

void *llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt(void *a1)
{
  *a1 = &unk_1EC9A3FD0;
  uint64_t v2 = a1 + 20;
  uint64_t v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    *a1 = &unk_1EC9A42A8;
    uint64_t v4 = (void *)a1[12];
    if (v4 != (void *)a1[11]) {
LABEL_5:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    *a1 = &unk_1EC9A42A8;
    uint64_t v4 = (void *)a1[12];
    if (v4 != (void *)a1[11]) {
      goto LABEL_5;
    }
  }
  int64_t v5 = (void *)a1[8];
  if (v5 != a1 + 10) {
    free(v5);
  }
  return a1;
}

void llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt(char *__p)
{
  *(void *)std::string __p = &unk_1EC9A3FD0;
  uint64_t v2 = __p + 160;
  uint64_t v3 = (char *)*((void *)__p + 23);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    *(void *)std::string __p = &unk_1EC9A42A8;
    uint64_t v4 = (void *)*((void *)__p + 12);
    if (v4 != *((void **)__p + 11)) {
LABEL_5:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    *(void *)std::string __p = &unk_1EC9A42A8;
    uint64_t v4 = (void *)*((void *)__p + 12);
    if (v4 != *((void **)__p + 11)) {
      goto LABEL_5;
    }
  }
  int64_t v5 = (char *)*((void *)__p + 8);
  if (v5 != __p + 80) {
    free(v5);
  }

  operator delete(__p);
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9A3E30;
  uint64_t v2 = a1 + 200;
  uint64_t v3 = *(void *)(a1 + 224);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    *(void *)(a1 + 152) = &unk_1EC9A3BA0;
    if ((*(char *)(a1 + 183) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    *(void *)(a1 + 152) = &unk_1EC9A3BA0;
    if ((*(char *)(a1 + 183) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 151) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  operator delete(*(void **)(a1 + 160));
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
LABEL_6:
    *(void *)a1 = &unk_1EC9A42A8;
    uint64_t v4 = *(void **)(a1 + 96);
    if (v4 == *(void **)(a1 + 88)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 128));
  *(void *)a1 = &unk_1EC9A42A8;
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4 != *(void **)(a1 + 88)) {
LABEL_7:
  }
    free(v4);
LABEL_8:
  int64_t v5 = *(void **)(a1 + 64);
  if (v5 != (void *)(a1 + 80)) {
    free(v5);
  }
  return a1;
}

void llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt(char *__p)
{
  *(void *)std::string __p = &unk_1EC9A3E30;
  uint64_t v2 = __p + 200;
  uint64_t v3 = (char *)*((void *)__p + 28);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    *((void *)__p + 19) = &unk_1EC9A3BA0;
    if ((__p[183] & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    *((void *)__p + 19) = &unk_1EC9A3BA0;
    if ((__p[183] & 0x80000000) == 0)
    {
LABEL_5:
      if ((__p[151] & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  operator delete(*((void **)__p + 20));
  if ((__p[151] & 0x80000000) == 0)
  {
LABEL_6:
    *(void *)std::string __p = &unk_1EC9A42A8;
    uint64_t v4 = (void *)*((void *)__p + 12);
    if (v4 == *((void **)__p + 11)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  operator delete(*((void **)__p + 16));
  *(void *)std::string __p = &unk_1EC9A42A8;
  uint64_t v4 = (void *)*((void *)__p + 12);
  if (v4 != *((void **)__p + 11)) {
LABEL_7:
  }
    free(v4);
LABEL_8:
  int64_t v5 = (char *)*((void *)__p + 8);
  if (v5 != __p + 80) {
    free(v5);
  }

  operator delete(__p);
}

void *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt(void *a1)
{
  *a1 = &unk_1EC9A3F00;
  uint64_t v2 = a1 + 20;
  uint64_t v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    *a1 = &unk_1EC9A42A8;
    uint64_t v4 = (void *)a1[12];
    if (v4 != (void *)a1[11]) {
LABEL_5:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    *a1 = &unk_1EC9A42A8;
    uint64_t v4 = (void *)a1[12];
    if (v4 != (void *)a1[11]) {
      goto LABEL_5;
    }
  }
  int64_t v5 = (void *)a1[8];
  if (v5 != a1 + 10) {
    free(v5);
  }
  return a1;
}

void llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt(char *__p)
{
  *(void *)std::string __p = &unk_1EC9A3F00;
  uint64_t v2 = __p + 160;
  uint64_t v3 = (char *)*((void *)__p + 23);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    *(void *)std::string __p = &unk_1EC9A42A8;
    uint64_t v4 = (void *)*((void *)__p + 12);
    if (v4 != *((void **)__p + 11)) {
LABEL_5:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    *(void *)std::string __p = &unk_1EC9A42A8;
    uint64_t v4 = (void *)*((void *)__p + 12);
    if (v4 != *((void **)__p + 11)) {
      goto LABEL_5;
    }
  }
  int64_t v5 = (char *)*((void *)__p + 8);
  if (v5 != __p + 80) {
    free(v5);
  }

  operator delete(__p);
}

uint64_t llvm::cl::alias::handleOccurrence(uint64_t a1, uint64_t a2)
{
  return (***(uint64_t (****)(void, uint64_t, void, void))(a1 + 128))(*(void *)(a1 + 128), a2, *(void *)(*(void *)(a1 + 128) + 16), *(void *)(*(void *)(a1 + 128) + 24));
}

uint64_t llvm::cl::alias::getValueExpectedFlagDefault(llvm::cl::alias *this)
{
  uint64_t v1 = (unsigned __int16 *)*((void *)this + 16);
  if (((v1[5] >> 3) & 3) != 0) {
    return (v1[5] >> 3) & 3;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)v1 + 8))();
  }
}

void llvm::cl::alias::~alias(llvm::cl::alias *this)
{
  *(void *)this = &unk_1EC9A42A8;
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2 != *((void **)this + 11)) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 8);
  if (v3 != (char *)this + 80) {
    free(v3);
  }
}

{
  void *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EC9A42A8;
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2 != *((void **)this + 11)) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 8);
  if (v3 != (char *)this + 80) {
    free(v3);
  }

  operator delete(this);
}

uint64_t llvm::cl::alias::setDefault(llvm::cl::alias *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 16) + 64))();
}

uint64_t llvm::cl::alias::addOccurrence(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 128) + 80))(*(void *)(a1 + 128), a2, *(void *)(*(void *)(a1 + 128) + 16), *(void *)(*(void *)(a1 + 128) + 24));
}

void anonymous namespace'::CommandLineParser::addLiteralOption(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4, const unsigned __int8 *a5)
{
  if (!*(void *)(a2 + 24))
  {
    uint64_t v22 = a2;
    uint64_t v10 = llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(a3 + 128, a4, a5, &v22);
    if ((v11 & 1) == 0)
    {
      size_t v18 = (llvm::raw_ostream *)llvm::errs((llvm *)v10);
      uint64_t v19 = llvm::raw_ostream::operator<<(v18, (const char *)a1);
      uint64_t v20 = llvm::raw_ostream::operator<<(v19, ": CommandLine Error: Option '");
      uint64_t v21 = llvm::raw_ostream::operator<<(v20, a4, (size_t)a5);
      llvm::raw_ostream::operator<<(v21, "' registered more than once!\n");
      llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const char *)1);
    }
    if (atomic_load_explicit(llvm::cl::AllSubCommands, memory_order_acquire))
    {
      if (llvm::cl::AllSubCommands[0] != a3) {
        return;
      }
    }
    else
    {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
      if (llvm::cl::AllSubCommands[0] != a3) {
        return;
      }
    }
    uint64_t v12 = *(void *)(a1 + 280);
    uint64_t v13 = 288;
    if (v12 == *(void *)(a1 + 272)) {
      uint64_t v13 = 292;
    }
    uint64_t v14 = *(unsigned int *)(a1 + v13);
    if (v14)
    {
      uint64_t v15 = 8 * v14;
      for (uint64_t i = *(void **)(a1 + 280); *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v15 -= 8;
        if (!v15) {
          return;
        }
      }
    }
    else
    {
      uint64_t i = *(void **)(a1 + 280);
    }
    uint64_t v17 = (void *)(v12 + 8 * v14);
LABEL_16:
    if (i != v17)
    {
      if (*i != a3) {
      while (++i != v17)
      }
      {
        if (*i < 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_16;
        }
      }
    }
  }
}

void anonymous namespace'::CommandLineParser::addOption(llvm *a1, uint64_t a2, uint64_t a3)
{
  int64_t v5 = a1;
  uint64_t v6 = *(const unsigned __int8 **)(a2 + 24);
  if (!v6) {
    goto LABEL_19;
  }
  if ((*(_WORD *)(a2 + 10) & 0x2000) != 0)
  {
    int Key = llvm::StringMapImpl::FindKey((uint64_t *)(a3 + 128), *(int8x16_t **)(a2 + 16), v6);
    if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a3 + 136)) {
      return;
    }
  }
  long long v31 = *(_OWORD *)(a2 + 16);
  uint64_t v32 = a2;
  a1 = (llvm *)llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(a3 + 128, (int8x16_t *)v31, *((const unsigned __int8 **)&v31 + 1), &v32);
  if (v8)
  {
LABEL_19:
    int v18 = 0;
    __int16 v19 = *(_WORD *)(a2 + 10);
    if ((v19 & 0x180) == 0x80) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
  uint64_t v9 = (llvm::raw_ostream *)llvm::errs(a1);
  int v10 = *((char *)v5 + 23);
  if (v10 >= 0) {
    char v11 = (const char *)v5;
  }
  else {
    char v11 = *(const char **)v5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)v5 + 23);
  }
  else {
    size_t v12 = *((void *)v5 + 1);
  }
  uint64_t v13 = llvm::raw_ostream::write(v9, v11, v12);
  uint64_t v14 = v13;
  uint64_t v15 = (void *)*((void *)v13 + 4);
  if (*((void *)v13 + 3) - (void)v15 <= 0x1CuLL)
  {
    uint64_t v14 = llvm::raw_ostream::write(v13, ": CommandLine Error: Option '", 0x1DuLL);
    a1 = (llvm *)*((void *)v14 + 4);
    uint64_t v16 = *(const char **)(a2 + 16);
    size_t v17 = *(void *)(a2 + 24);
    if (v17 <= *((void *)v14 + 3) - (void)a1) {
      goto LABEL_14;
    }
LABEL_34:
    uint64_t v14 = llvm::raw_ostream::write(v14, v16, v17);
    a1 = (llvm *)*((void *)v14 + 4);
    if (*((void *)v14 + 3) - (void)a1 <= 0x1CuLL) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
  qmemcpy(v15, ": CommandLine Error: Option '", 29);
  a1 = (llvm *)(*((void *)v13 + 4) + 29);
  *((void *)v14 + 4) = a1;
  uint64_t v16 = *(const char **)(a2 + 16);
  size_t v17 = *(void *)(a2 + 24);
  if (v17 > *((void *)v14 + 3) - (void)a1) {
    goto LABEL_34;
  }
LABEL_14:
  if (v17)
  {
    memcpy(a1, v16, v17);
    a1 = (llvm *)(*((void *)v14 + 4) + v17);
    *((void *)v14 + 4) = a1;
  }
  if (*((void *)v14 + 3) - (void)a1 > 0x1CuLL)
  {
LABEL_35:
    qmemcpy(a1, "' registered more than once!\n", 29);
    *((void *)v14 + 4) += 29;
    int v18 = 1;
    __int16 v19 = *(_WORD *)(a2 + 10);
    if ((v19 & 0x180) == 0x80) {
      goto LABEL_20;
    }
LABEL_36:
    if ((v19 & 0x800) != 0)
    {
      uint64_t v26 = *(unsigned int *)(a3 + 88);
      if (v26 >= *(_DWORD *)(a3 + 92))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 80, (void *)(a3 + 96), v26 + 1, 8);
        LODWORD(v26) = *(_DWORD *)(a3 + 88);
      }
      *(void *)(*(void *)(a3 + 80) + 8 * v26) = a2;
      ++*(_DWORD *)(a3 + 88);
      if ((v18 & 1) == 0) {
        goto LABEL_22;
      }
    }
    else if ((v19 & 7) == 4)
    {
      if (*(void *)(a3 + 152))
      {
        int v29 = "Cannot specify more than one option with cl::ConsumeAfter!";
        __int16 v30 = 259;
        size_t v28 = (llvm::raw_ostream *)llvm::errs(a1);
        llvm::cl::Option::error((void *)a2, (llvm::Twine *)&v29, 0, 0, v28);
        *(void *)(a3 + 152) = a2;
        llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const char *)1);
      }
      *(void *)(a3 + 152) = a2;
      if ((v18 & 1) == 0) {
        goto LABEL_22;
      }
    }
    else if (!v18)
    {
      goto LABEL_22;
    }
LABEL_44:
    llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const char *)1);
  }
LABEL_17:
  a1 = llvm::raw_ostream::write(v14, "' registered more than once!\n", 0x1DuLL);
  int v18 = 1;
  __int16 v19 = *(_WORD *)(a2 + 10);
  if ((v19 & 0x180) != 0x80) {
    goto LABEL_36;
  }
LABEL_20:
  uint64_t v20 = *(unsigned int *)(a3 + 40);
  if (v20 >= *(_DWORD *)(a3 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 32, (void *)(a3 + 48), v20 + 1, 8);
    *(void *)(*(void *)(a3 + 32) + 8 * (*(_DWORD *)(a3 + 40))++) = a2;
    if ((v18 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }
  *(void *)(*(void *)(a3 + 32) + 8 * v20) = a2;
  ++*(_DWORD *)(a3 + 40);
  if (v18) {
    goto LABEL_44;
  }
LABEL_22:
  if (atomic_load_explicit(llvm::cl::AllSubCommands, memory_order_acquire))
  {
    if (llvm::cl::AllSubCommands[0] != a3) {
      return;
    }
  }
  else
  {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    if (llvm::cl::AllSubCommands[0] != a3) {
      return;
    }
  }
  uint64_t v21 = *((void *)v5 + 35);
  uint64_t v22 = 288;
  if (v21 == *((void *)v5 + 34)) {
    uint64_t v22 = 292;
  }
  uint64_t v23 = *(unsigned int *)((char *)v5 + v22);
  if (v23)
  {
    uint64_t v24 = 8 * v23;
    for (uint64_t i = (void *)*((void *)v5 + 35); *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v24 -= 8;
      if (!v24) {
        return;
      }
    }
  }
  else
  {
    uint64_t i = (void *)*((void *)v5 + 35);
  }
  size_t v27 = (void *)(v21 + 8 * v23);
LABEL_47:
  if (i != v27)
  {
    if (*i != a3) {
    while (++i != v27)
    }
    {
      if (*i < 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_47;
      }
    }
  }
}

uint64_t anonymous namespace'::CommandLineParser::updateArgStr(const char *a1, uint64_t a2, int8x16_t *a3, const unsigned __int8 *a4, uint64_t a5)
{
  char v8 = (uint64_t *)(a5 + 128);
  uint64_t v17 = a2;
  uint64_t v9 = llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(a5 + 128, a3, a4, &v17);
  if ((v10 & 1) == 0)
  {
    uint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)v9);
    uint64_t v14 = llvm::raw_ostream::operator<<(v13, a1);
    uint64_t v15 = llvm::raw_ostream::operator<<(v14, ": CommandLine Error: Option '");
    uint64_t v16 = llvm::raw_ostream::operator<<(v15, *(const void **)(a2 + 16), *(void *)(a2 + 24));
    llvm::raw_ostream::operator<<(v16, "' registered more than once!\n");
    llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const char *)1);
  }
  uint64_t result = llvm::StringMapImpl::FindKey(v8, *(int8x16_t **)(a2 + 16), *(const unsigned __int8 **)(a2 + 24));
  if (result != -1 && (int)result != (unint64_t)*(unsigned int *)(a5 + 136))
  {
    size_t v12 = *(const unsigned __int8 ***)(*v8 + 8 * (int)result);
    llvm::StringMapImpl::RemoveKey((uint64_t)v8, v12);
    llvm::deallocate_buffer((llvm *)v12, (void *)(*v12 + 17));
  }
  return result;
}

uint64_t CommaSeparateAndAddOccurrence(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s, size_t __n, uint64_t a7)
{
  size_t v8 = __n;
  uint64_t v9 = __s;
  if ((a1[5] & 0x200) != 0 && __n && (uint64_t v14 = memchr(__s, 44, __n)) != 0 && (v15 = v14 - v9, v14 - v9 != -1))
  {
    while (1)
    {
      unint64_t v16 = v8 >= v15 ? v15 : v8;
      if ((*(uint64_t (**)(_WORD *, uint64_t, uint64_t, uint64_t, char *, unint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4, v9, v16, a7))return 1; {
      if (v8 >= v15 + 1)
      }
        size_t v17 = v15 + 1;
      else {
        size_t v17 = v8;
      }
      v9 += v17;
      v8 -= v17;
      if (v8)
      {
        int v18 = memchr(v9, 44, v8);
        unint64_t v15 = v18 - v9;
        if (v18 && v15 != -1) {
          continue;
        }
      }
      goto LABEL_18;
    }
  }
  else
  {
LABEL_18:
    uint64_t v20 = *(uint64_t (**)(_WORD *, uint64_t, uint64_t, uint64_t, char *, size_t, uint64_t))(*(void *)a1 + 80);
    return v20(a1, a2, a3, a4, v9, v8, a7);
  }
}

uint64_t anonymous namespace'::CommandLineParser::LookupLongOption(uint64_t a1, uint64_t a2, void *a3, int a4, char a5)
{
  int64_t v5 = *(const unsigned __int8 **)(a2 + 8);
  if (!v5) {
    return 0;
  }
  char v11 = *(int8x16_t **)a2;
  size_t v12 = memchr(*(void **)a2, 61, (size_t)v5);
  unint64_t v13 = v12 - (unsigned char *)v11;
  if (v12) {
    BOOL v14 = v13 == -1;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if ((unint64_t)v5 >= v13) {
      int v18 = (const unsigned __int8 *)(v12 - (unsigned char *)v11);
    }
    else {
      int v18 = v5;
    }
    int Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 128), v11, v18);
    uint64_t v20 = Key;
    if (Key == -1) {
      uint64_t v20 = *(unsigned int *)(a1 + 136);
    }
    if (v20 == *(_DWORD *)(a1 + 136)) {
      return 0;
    }
    uint64_t v21 = *(void *)(a1 + 128) + 8 * v20;
    if ((~*(unsigned __int16 *)(*(void *)(*(void *)v21 + 8) + 10) & 0x180) == 0) {
      return 0;
    }
    unint64_t v22 = *(void *)(a2 + 8);
    if (v22 >= v13 + 1) {
      unint64_t v23 = v13 + 1;
    }
    else {
      unint64_t v23 = *(void *)(a2 + 8);
    }
    *a3 = *(void *)a2 + v23;
    a3[1] = v22 - v23;
    unint64_t v24 = *(void *)(a2 + 8);
    if (v24 >= v13) {
      unint64_t v24 = v13;
    }
    *(void *)(a2 + 8) = v24;
    uint64_t result = *(void *)(*(void *)v21 + 8);
    if (result) {
      BOOL v25 = a4 == 0;
    }
    else {
      BOOL v25 = 1;
    }
    if (v25) {
      return result;
    }
    goto LABEL_31;
  }
  int v15 = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 128), v11, v5);
  if (v15 == -1 || v15 == (unint64_t)*(unsigned int *)(a1 + 136)) {
    return 0;
  }
  uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 128) + 8 * v15) + 8);
  if (result) {
    BOOL v17 = a4 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
LABEL_31:
    if ((a5 & 1) == 0 && (*(_WORD *)(result + 10) & 0x1000) == 0) {
      return 0;
    }
  }
  return result;
}

uint64_t isGrouping(const llvm::cl::Option *a1)
{
  return (*((unsigned __int16 *)a1 + 5) >> 12) & 1;
}

uint64_t getOptionPred(int8x16_t *a1, const unsigned __int8 *a2, const unsigned __int8 **a3, uint64_t (*a4)(void), uint64_t a5)
{
  size_t v8 = a2;
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)a5, a1, a2);
  uint64_t v11 = *(void *)a5;
  uint64_t v12 = Key;
  uint64_t v13 = *(unsigned int *)(a5 + 8);
  if (Key == -1) {
    uint64_t v12 = *(unsigned int *)(a5 + 8);
  }
  uint64_t v14 = v11 + 8 * v12;
  if (v12 != v13)
  {
    int v15 = a4(*(void *)(*(void *)v14 + 8));
    uint64_t v11 = *(void *)a5;
    uint64_t v13 = *(unsigned int *)(a5 + 8);
    if (!v15) {
      uint64_t v14 = *(void *)a5 + 8 * v13;
    }
  }
  uint64_t v16 = v11 + 8 * v13;
  if (v14 == v16 && (unint64_t)v8 >= 2)
  {
    do
    {
      if (v8 >= v8 - 1) {
        --v8;
      }
      int v20 = llvm::StringMapImpl::FindKey((uint64_t *)a5, a1, v8);
      uint64_t v21 = *(void *)a5;
      uint64_t v22 = v20;
      uint64_t v23 = *(unsigned int *)(a5 + 8);
      if (v20 == -1) {
        uint64_t v22 = *(unsigned int *)(a5 + 8);
      }
      uint64_t v14 = v21 + 8 * v22;
      if (v22 != v23)
      {
        int v24 = a4(*(void *)(*(void *)v14 + 8));
        uint64_t v21 = *(void *)a5;
        uint64_t v23 = *(unsigned int *)(a5 + 8);
        if (!v24) {
          uint64_t v14 = *(void *)a5 + 8 * v23;
        }
      }
      uint64_t v16 = v21 + 8 * v23;
    }
    while (v14 == v16 && (unint64_t)v8 > 1);
  }
  if (v14 == v16 || !a4(*(void *)(*(void *)v14 + 8))) {
    return 0;
  }
  *a3 = v8;
  return *(void *)(*(void *)v14 + 8);
}

BOOL isPrefixedOrGrouping(const llvm::cl::Option *a1)
{
  return (*((_WORD *)a1 + 5) & 0x1100) != 0;
}

void *llvm::object_creator<anonymous namespace'::CommandLineCommonOptions>::call()
{
  unint64_t v0 = operator new(0x660uLL);
  bzero(v0, 0x660uLL);
  *unint64_t v0 = &unk_1EC997680;
  v0[2] = &unk_1EC997680;
  *((unsigned char *)v0 + 24) = 1;
  v0[4] = &unk_1EC99AC80;
  *((unsigned char *)v0 + 56) = 1;
  v0[6] = &unk_1EC99AC80;
  v0[8] = v0;
  v0[9] = v0 + 4;
  v0[10] = v0 + 2;
  v0[11] = v0 + 6;
  v0[12] = "Generic Options";
  uint64_t v1 = v0 + 12;
  v0[13] = 15;
  v0[14] = "";
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  atomic_ullong v2 = qword_1EB215BF8[0];
  }
  uint64_t v3 = *(void *)(qword_1EB215BF8[0] + 120);
  if (v3 != *(void *)(qword_1EB215BF8[0] + 112)) {
    goto LABEL_4;
  }
  uint64_t v10 = *(unsigned int *)(qword_1EB215BF8[0] + 132);
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 8 * v10;
    uint64_t v13 = *(void **)(qword_1EB215BF8[0] + 120);
    while ((void *)*v13 != v1)
    {
      if (*v13 == -2) {
        uint64_t v11 = v13;
      }
      ++v13;
      v12 -= 8;
      if (!v12)
      {
        if (!v11) {
          goto LABEL_69;
        }
        *uint64_t v11 = v1;
        --*(_DWORD *)(v2 + 136);
        break;
      }
    }
  }
  else
  {
LABEL_69:
    if (v10 >= *(_DWORD *)(qword_1EB215BF8[0] + 128))
    {
LABEL_4:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(qword_1EB215BF8[0] + 112), v0 + 12);
      goto LABEL_5;
    }
    *(_DWORD *)(qword_1EB215BF8[0] + 132) = v10 + 1;
    *(void *)(v3 + 8 * v10) = v1;
  }
LABEL_5:
  *(void *)&v39[0] = v0;
  LODWORD(v34) = 1;
  int v38 = 3;
  uint64_t v37 = (llvm::cl::OptionCategory *)(v0 + 12);
  if (!atomic_load_explicit(llvm::cl::AllSubCommands, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  uint64_t v36 = (llvm::cl::OptionCategory *)llvm::cl::AllSubCommands[0];
  uint64_t v4 = llvm::cl::Option::Option((uint64_t)(v0 + 16), 0, 0);
  v0[32] = 0;
  v0[33] = &unk_1EC9A3A00;
  v0[16] = &unk_1EC9A3BC0;
  v0[34] = &unk_1EC9A4440;
  v0[35] = &unk_1EC9CE3F0;
  v0[38] = v0 + 35;
  llvm::cl::Option::setArgStr(v4, (int8x16_t *)"help-list", (const unsigned __int8 *)9);
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  *((_WORD *)v0 + 69) |= 0x4000u;
  }
  *(void *)&v39[0] = v0 + 2;
  LODWORD(v34) = 1;
  int v38 = 3;
  uint64_t v37 = (llvm::cl::OptionCategory *)(v0 + 12);
  if (!atomic_load_explicit(llvm::cl::AllSubCommands, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  uint64_t v36 = (llvm::cl::OptionCategory *)llvm::cl::AllSubCommands[0];
  uint64_t v5 = llvm::cl::Option::Option((uint64_t)(v0 + 39), 0, 0);
  v0[55] = 0;
  v0[56] = &unk_1EC9A3A00;
  v0[39] = &unk_1EC9A3BC0;
  v0[57] = &unk_1EC9A4440;
  v0[58] = &unk_1EC9CE3F0;
  v0[61] = v0 + 58;
  llvm::cl::Option::setArgStr(v5, (int8x16_t *)"help-list-hidden", (const unsigned __int8 *)0x10);
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  *((_WORD *)v0 + 161) |= 0x4000u;
  }
  if (!atomic_load_explicit(llvm::cl::AllSubCommands, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  uint64_t v6 = (const void *)llvm::cl::AllSubCommands[0];
  uint64_t v7 = llvm::cl::Option::Option((uint64_t)(v0 + 62), 0, 0);
  v0[78] = 0;
  v0[79] = &unk_1EC9A3A40;
  v0[62] = &unk_1EC9A3C90;
  v0[80] = &unk_1EC9A4440;
  v0[81] = &unk_1EC9CE4A0;
  v0[84] = v0 + 81;
  llvm::cl::Option::setArgStr(v7, (int8x16_t *)"help", (const unsigned __int8 *)4);
  v0[66] = "Display available options (--help-hidden for more)";
  v0[67] = 50;
  if (v0[78])
  {
    *(void *)&v39[0] = "cl::location(x) specified more than once!";
    __int16 v40 = 259;
    uint64_t v9 = (llvm::raw_ostream *)llvm::errs(v8);
    llvm::cl::Option::error(v0 + 62, (llvm::Twine *)v39, 0, 0, v9);
  }
  else
  {
    v0[78] = v0 + 8;
  }
  *((_WORD *)v0 + 253) |= 0x18u;
  llvm::cl::Option::addCategory((llvm::cl::Option *)(v0 + 62), (llvm::cl::OptionCategory *)(v0 + 12));
  uint64_t v14 = v0[74];
  if (v14 != v0[73]) {
    goto LABEL_27;
  }
  uint64_t v19 = *((unsigned int *)v0 + 151);
  if (v19)
  {
    int v20 = 0;
    uint64_t v21 = 8 * v19;
    uint64_t v22 = (void *)v0[74];
    while ((const void *)*v22 != v6)
    {
      if (*v22 == -2) {
        int v20 = v22;
      }
      ++v22;
      v21 -= 8;
      if (!v21)
      {
        if (!v20) {
          goto LABEL_71;
        }
        void *v20 = v6;
        --*((_DWORD *)v0 + 152);
        break;
      }
    }
  }
  else
  {
LABEL_71:
    if (v19 >= *((_DWORD *)v0 + 150))
    {
LABEL_27:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v0 + 73), v6);
      goto LABEL_28;
    }
    *((_DWORD *)v0 + 151) = v19 + 1;
    *(void *)(v14 + 8 * v19) = v6;
  }
LABEL_28:
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  *((_WORD *)v0 + 253) |= 0x4000u;
  }
  *(void *)&v39[0] = "Alias for --help";
  *((void *)&v39[0] + 1) = 16;
  uint64_t v37 = (llvm::cl::OptionCategory *)(v0 + 62);
  LODWORD(v36) = 16;
  llvm::cl::alias::alias<char [2],llvm::cl::desc,llvm::cl::aliasopt,llvm::cl::MiscFlags>((uint64_t)(v0 + 85), (int8x16_t *)"h", v39, (uint64_t *)&v37, &v36);
  if (!atomic_load_explicit(llvm::cl::AllSubCommands, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  int v15 = (const void *)llvm::cl::AllSubCommands[0];
  uint64_t v16 = llvm::cl::Option::Option((uint64_t)(v0 + 102), 0, 0);
  v0[118] = 0;
  v0[119] = &unk_1EC9A3A40;
  v0[102] = &unk_1EC9A3C90;
  v0[120] = &unk_1EC9A4440;
  v0[121] = &unk_1EC9CE4A0;
  v0[124] = v0 + 121;
  llvm::cl::Option::setArgStr(v16, (int8x16_t *)"help-hidden", (const unsigned __int8 *)0xB);
  v0[106] = "Display all available options";
  v0[107] = 29;
  if (v0[118])
  {
    *(void *)&v39[0] = "cl::location(x) specified more than once!";
    __int16 v40 = 259;
    int v18 = (llvm::raw_ostream *)llvm::errs(v17);
    llvm::cl::Option::error(v0 + 102, (llvm::Twine *)v39, 0, 0, v18);
  }
  else
  {
    v0[118] = v0 + 10;
  }
  *((_WORD *)v0 + 413) = *((_WORD *)v0 + 413) & 0xFF87 | 0x38;
  llvm::cl::Option::addCategory((llvm::cl::Option *)(v0 + 102), (llvm::cl::OptionCategory *)(v0 + 12));
  uint64_t v23 = v0[114];
  if (v23 != v0[113]) {
    goto LABEL_44;
  }
  uint64_t v29 = *((unsigned int *)v0 + 231);
  if (v29)
  {
    __int16 v30 = 0;
    uint64_t v31 = 8 * v29;
    uint64_t v32 = (void *)v0[114];
    while ((const void *)*v32 != v15)
    {
      if (*v32 == -2) {
        __int16 v30 = v32;
      }
      ++v32;
      v31 -= 8;
      if (!v31)
      {
        if (!v30) {
          goto LABEL_73;
        }
        void *v30 = v15;
        --*((_DWORD *)v0 + 232);
        break;
      }
    }
  }
  else
  {
LABEL_73:
    if (v29 >= *((_DWORD *)v0 + 230))
    {
LABEL_44:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v0 + 113), v15);
      goto LABEL_45;
    }
    *((_DWORD *)v0 + 231) = v29 + 1;
    *(void *)(v23 + 8 * v29) = v15;
  }
LABEL_45:
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  *((_WORD *)v0 + 413) |= 0x4000u;
  }
  *(void *)&v39[0] = "Print non-default options after command line parsing";
  *((void *)&v39[0] + 1) = 52;
  int v38 = 1;
  char v35 = 0;
  uint64_t v36 = (llvm::cl::OptionCategory *)(v0 + 12);
  uint64_t v37 = (llvm::cl::OptionCategory *)&v35;
  if (!atomic_load_explicit(llvm::cl::AllSubCommands, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  uint64_t v34 = (const void *)llvm::cl::AllSubCommands[0];
  uint64_t v24 = llvm::cl::Option::Option((uint64_t)(v0 + 125), 0, 0);
  *((unsigned char *)v0 + 1128) = 0;
  v0[143] = 0;
  v0[142] = &unk_1EC9A3AE0;
  v0[125] = &unk_1EC9A3F00;
  v0[144] = &unk_1EC9A4440;
  v0[145] = &unk_1EC9CE680;
  v0[148] = v0 + 145;
  llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [14],llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::cat,llvm::cl::sub>(v24, (int8x16_t *)"print-options", v39, &v38, (unsigned char **)&v37, &v36, &v34);
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  *((_WORD *)v0 + 505) |= 0x4000u;
  }
  *(void *)&v39[0] = "Print all option values after command line parsing";
  *((void *)&v39[0] + 1) = 50;
  int v38 = 1;
  char v35 = 0;
  uint64_t v36 = (llvm::cl::OptionCategory *)(v0 + 12);
  uint64_t v37 = (llvm::cl::OptionCategory *)&v35;
  if (!atomic_load_explicit(llvm::cl::AllSubCommands, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  uint64_t v34 = (const void *)llvm::cl::AllSubCommands[0];
  uint64_t v25 = llvm::cl::Option::Option((uint64_t)(v0 + 149), 0, 0);
  *((unsigned char *)v0 + 1320) = 0;
  v0[167] = 0;
  v0[166] = &unk_1EC9A3AE0;
  v0[149] = &unk_1EC9A3F00;
  v0[168] = &unk_1EC9A4440;
  v0[169] = &unk_1EC9CE680;
  v0[172] = v0 + 169;
  llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [14],llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::cat,llvm::cl::sub>(v25, (int8x16_t *)"print-all-options", v39, &v38, (unsigned char **)&v37, &v36, &v34);
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  *((_WORD *)v0 + 601) |= 0x4000u;
  }
  *((_OWORD *)v0 + 89) = 0u;
  *((_OWORD *)v0 + 88) = 0u;
  uint64_t v26 = llvm::cl::Option::Option((uint64_t)(v0 + 181), 0, 0);
  v0[197] = 0;
  v0[198] = &unk_1EC9A3A20;
  v0[181] = &unk_1EC9A3C28;
  v0[199] = &unk_1EC9A4440;
  v0[200] = &unk_1EC9CE448;
  v0[203] = v0 + 200;
  llvm::cl::Option::setArgStr(v26, (int8x16_t *)"version", (const unsigned __int8 *)7);
  v0[185] = "Display the version of this program";
  v0[186] = 35;
  if (v0[197])
  {
    *(void *)&v39[0] = "cl::location(x) specified more than once!";
    __int16 v40 = 259;
    size_t v28 = (llvm::raw_ostream *)llvm::errs(v27);
    llvm::cl::Option::error(v0 + 181, (llvm::Twine *)v39, 0, 0, v28);
  }
  else
  {
    v0[197] = v0 + 180;
  }
  *((_WORD *)v0 + 729) |= 0x18u;
  llvm::cl::Option::addCategory((llvm::cl::Option *)(v0 + 181), (llvm::cl::OptionCategory *)(v0 + 12));
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  *((_WORD *)v0 + 729) |= 0x4000u;
  }
  return v0;
}

void llvm::object_deleter<anonymous namespace'::CommandLineCommonOptions>::call(char *__p)
{
  if (!__p) {
    return;
  }
  *((void *)__p + 181) = &unk_1EC9A3C28;
  atomic_ullong v2 = __p + 1600;
  uint64_t v3 = (char *)*((void *)__p + 203);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    *((void *)__p + 181) = &unk_1EC9A42A8;
    uint64_t v4 = (void *)*((void *)__p + 193);
    if (v4 != *((void **)__p + 192)) {
LABEL_6:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    *((void *)__p + 181) = &unk_1EC9A42A8;
    uint64_t v4 = (void *)*((void *)__p + 193);
    if (v4 != *((void **)__p + 192)) {
      goto LABEL_6;
    }
  }
  uint64_t v5 = (char *)*((void *)__p + 189);
  if (v5 != __p + 1528) {
    free(v5);
  }
  uint64_t v6 = (void *)*((void *)__p + 177);
  if (v6)
  {
    uint64_t v7 = (void *)*((void *)__p + 178);
    size_t v8 = (void *)*((void *)__p + 177);
    if (v7 != v6)
    {
      uint64_t v9 = v7 - 4;
      uint64_t v10 = v7 - 4;
      do
      {
        uint64_t v12 = (void *)v10[3];
        if (v10 == v12)
        {
          (*(void (**)(void *))(*v10 + 32))(v10);
        }
        else if (v12)
        {
          (*(void (**)(void *))(*v12 + 40))(v12);
        }
        v9 -= 4;
        BOOL v11 = v10 == v6;
        v10 -= 4;
      }
      while (!v11);
      size_t v8 = (void *)*((void *)__p + 177);
    }
    *((void *)__p + 178) = v6;
    operator delete(v8);
  }
  uint64_t v13 = (char *)*((void *)__p + 176);
  if (v13 == __p + 1384)
  {
    (*(void (**)(char *))(*((void *)__p + 173) + 32))(__p + 1384);
  }
  else if (v13)
  {
    (*(void (**)(char *))(*(void *)v13 + 40))(v13);
  }
  *((void *)__p + 149) = &unk_1EC9A3F00;
  uint64_t v14 = (char *)*((void *)__p + 172);
  if (v14 == __p + 1352)
  {
    (*(void (**)(char *))(*((void *)__p + 169) + 32))(__p + 1352);
    *((void *)__p + 149) = &unk_1EC9A42A8;
    int v15 = (void *)*((void *)__p + 161);
    if (v15 != *((void **)__p + 160)) {
LABEL_30:
    }
      free(v15);
  }
  else
  {
    if (v14) {
      (*(void (**)(char *))(*(void *)v14 + 40))(v14);
    }
    *((void *)__p + 149) = &unk_1EC9A42A8;
    int v15 = (void *)*((void *)__p + 161);
    if (v15 != *((void **)__p + 160)) {
      goto LABEL_30;
    }
  }
  uint64_t v16 = (char *)*((void *)__p + 157);
  if (v16 != __p + 1272) {
    free(v16);
  }
  *((void *)__p + 125) = &unk_1EC9A3F00;
  BOOL v17 = (char *)*((void *)__p + 148);
  if (v17 == __p + 1160)
  {
    (*(void (**)(char *))(*((void *)__p + 145) + 32))(__p + 1160);
    *((void *)__p + 125) = &unk_1EC9A42A8;
    int v18 = (void *)*((void *)__p + 137);
    if (v18 != *((void **)__p + 136)) {
LABEL_37:
    }
      free(v18);
  }
  else
  {
    if (v17) {
      (*(void (**)(char *))(*(void *)v17 + 40))(v17);
    }
    *((void *)__p + 125) = &unk_1EC9A42A8;
    int v18 = (void *)*((void *)__p + 137);
    if (v18 != *((void **)__p + 136)) {
      goto LABEL_37;
    }
  }
  uint64_t v19 = (char *)*((void *)__p + 133);
  if (v19 != __p + 1080) {
    free(v19);
  }
  *((void *)__p + 102) = &unk_1EC9A3C90;
  int v20 = (char *)*((void *)__p + 124);
  if (v20 == __p + 968)
  {
    (*(void (**)(char *))(*((void *)__p + 121) + 32))(__p + 968);
    *((void *)__p + 102) = &unk_1EC9A42A8;
    uint64_t v21 = (void *)*((void *)__p + 114);
    if (v21 != *((void **)__p + 113)) {
LABEL_44:
    }
      free(v21);
  }
  else
  {
    if (v20) {
      (*(void (**)(char *))(*(void *)v20 + 40))(v20);
    }
    *((void *)__p + 102) = &unk_1EC9A42A8;
    uint64_t v21 = (void *)*((void *)__p + 114);
    if (v21 != *((void **)__p + 113)) {
      goto LABEL_44;
    }
  }
  uint64_t v22 = (char *)*((void *)__p + 110);
  if (v22 != __p + 896) {
    free(v22);
  }
  *((void *)__p + 85) = &unk_1EC9A42A8;
  uint64_t v23 = (void *)*((void *)__p + 97);
  if (v23 != *((void **)__p + 96)) {
    free(v23);
  }
  uint64_t v24 = (char *)*((void *)__p + 93);
  if (v24 != __p + 760) {
    free(v24);
  }
  *((void *)__p + 62) = &unk_1EC9A3C90;
  uint64_t v25 = (char *)*((void *)__p + 84);
  if (v25 == __p + 648)
  {
    (*(void (**)(char *))(*((void *)__p + 81) + 32))(__p + 648);
    *((void *)__p + 62) = &unk_1EC9A42A8;
    uint64_t v26 = (void *)*((void *)__p + 74);
    if (v26 != *((void **)__p + 73)) {
LABEL_55:
    }
      free(v26);
  }
  else
  {
    if (v25) {
      (*(void (**)(char *))(*(void *)v25 + 40))(v25);
    }
    *((void *)__p + 62) = &unk_1EC9A42A8;
    uint64_t v26 = (void *)*((void *)__p + 74);
    if (v26 != *((void **)__p + 73)) {
      goto LABEL_55;
    }
  }
  size_t v27 = (char *)*((void *)__p + 70);
  if (v27 != __p + 576) {
    free(v27);
  }
  *((void *)__p + 39) = &unk_1EC9A3BC0;
  size_t v28 = (char *)*((void *)__p + 61);
  if (v28 == __p + 464)
  {
    (*(void (**)(char *))(*((void *)__p + 58) + 32))(__p + 464);
    *((void *)__p + 39) = &unk_1EC9A42A8;
    uint64_t v29 = (void *)*((void *)__p + 51);
    if (v29 != *((void **)__p + 50)) {
LABEL_62:
    }
      free(v29);
  }
  else
  {
    if (v28) {
      (*(void (**)(char *))(*(void *)v28 + 40))(v28);
    }
    *((void *)__p + 39) = &unk_1EC9A42A8;
    uint64_t v29 = (void *)*((void *)__p + 51);
    if (v29 != *((void **)__p + 50)) {
      goto LABEL_62;
    }
  }
  __int16 v30 = (char *)*((void *)__p + 47);
  if (v30 != __p + 392) {
    free(v30);
  }
  *((void *)__p + 16) = &unk_1EC9A3BC0;
  uint64_t v31 = (char *)*((void *)__p + 38);
  if (v31 == __p + 280)
  {
    (*(void (**)(char *))(*((void *)__p + 35) + 32))(__p + 280);
    *((void *)__p + 16) = &unk_1EC9A42A8;
    uint64_t v32 = (void *)*((void *)__p + 28);
    if (v32 == *((void **)__p + 27)) {
      goto LABEL_70;
    }
  }
  else
  {
    if (v31) {
      (*(void (**)(char *))(*(void *)v31 + 40))(v31);
    }
    *((void *)__p + 16) = &unk_1EC9A42A8;
    uint64_t v32 = (void *)*((void *)__p + 28);
    if (v32 == *((void **)__p + 27)) {
      goto LABEL_70;
    }
  }
  free(v32);
LABEL_70:
  int v33 = (char *)*((void *)__p + 24);
  if (v33 != __p + 208) {
    free(v33);
  }

  operator delete(__p);
}

uint64_t anonymous namespace'::HelpPrinter::printOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 16 * v3;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)a2 + v6 + 8) + 48))(*(void *)(*(void *)a2 + v6 + 8), a3);
      v6 += 16;
    }
    while (v7 != v6);
  }
  return result;
}

void anonymous namespace'::CategorizedHelpPrinter::printOptions(llvm *a1, uint64_t a2, uint64_t a3)
{
  size_t v108 = a1;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  unsigned int v114 = 0;
  if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
  uint64_t v4 = *(void *)(qword_1EB215BF8[0] + 120);
  }
  uint64_t v5 = 128;
  if (v4 == *(void *)(qword_1EB215BF8[0] + 112)) {
    uint64_t v5 = 132;
  }
  uint64_t v6 = *(unsigned int *)(qword_1EB215BF8[0] + v5);
  uint64_t v106 = a3;
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    size_t v8 = *(uint64_t **)(qword_1EB215BF8[0] + 120);
    while ((unint64_t)*v8 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v8;
      v7 -= 8;
      if (!v7) {
        goto LABEL_43;
      }
    }
  }
  else
  {
    size_t v8 = *(uint64_t **)(qword_1EB215BF8[0] + 120);
  }
  uint64_t v9 = (uint64_t *)(v4 + 8 * v6);
  if (v8 != v9)
  {
    uint64_t v10 = 0;
    BOOL v11 = 0;
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = *v8;
      if (v11 < v12)
      {
        *(void *)BOOL v11 = v13;
        v11 += 8;
        goto LABEL_35;
      }
      int64_t v14 = v11 - v10;
      uint64_t v15 = (v11 - v10) >> 3;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61) {
LABEL_184:
      }
        abort();
      BOOL v17 = v10;
      if ((v12 - v10) >> 2 > v16) {
        unint64_t v16 = (v12 - v10) >> 2;
      }
      if ((unint64_t)(v12 - v10) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 61) {
LABEL_185:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        uint64_t v19 = v11;
        a1 = (llvm *)operator new(8 * v18);
        BOOL v11 = v19;
        uint64_t v10 = (char *)a1 + 8 * v15;
        *(void *)uint64_t v10 = v13;
        uint64_t v20 = (uint64_t)(v10 + 8);
        uint64_t v21 = v17;
        if (v19 == v17) {
          goto LABEL_32;
        }
      }
      else
      {
        a1 = 0;
        uint64_t v10 = (char *)(8 * v15);
        *(void *)(8 * v15) = v13;
        uint64_t v20 = 8 * v15 + 8;
        uint64_t v21 = v17;
        if (v11 == v17) {
          goto LABEL_32;
        }
      }
      unint64_t v22 = v11 - 8 - v21;
      if (v22 < 0x168
        || (char *)a1 + v14 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8 > (char *)a1 + v14 - 8
        || &v11[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8
        || (unint64_t)(v11 - ((char *)a1 + v14)) < 0x20)
      {
        uint64_t v23 = v11;
        uint64_t v21 = v17;
        do
        {
LABEL_31:
          uint64_t v24 = *((void *)v23 - 1);
          v23 -= 8;
          *((void *)v10 - 1) = v24;
          v10 -= 8;
        }
        while (v23 != v21);
        goto LABEL_32;
      }
      uint64_t v25 = (v22 >> 3) + 1;
      uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v23 = &v11[-v26];
      v10 -= v26;
      size_t v27 = (_OWORD *)((char *)a1 + 8 * v15 - 16);
      size_t v28 = v11 - 16;
      uint64_t v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        _OWORD *v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 4;
      }
      while (v29);
      uint64_t v21 = v17;
      if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_31;
      }
LABEL_32:
      uint64_t v12 = (char *)a1 + 8 * v18;
      if (v21) {
        operator delete(v21);
      }
      BOOL v11 = (char *)v20;
      do
      {
LABEL_35:
        if (++v8 == v9) {
          goto LABEL_44;
        }
      }
      while ((unint64_t)*v8 >= 0xFFFFFFFFFFFFFFFELL);
      if (v8 == v9) {
        goto LABEL_44;
      }
    }
  }
LABEL_43:
  BOOL v11 = 0;
  uint64_t v10 = 0;
LABEL_44:
  uint64_t v110 = v11;
  if (v11 - v10 >= 16) {
  size_t v105 = v10;
  }
  uint64_t v107 = *(unsigned int *)(a2 + 8);
  if (v107)
  {
    uint64_t v31 = 0;
    while (1)
    {
      uint64_t v111 = v31;
      uint64_t v32 = *(void *)(*(void *)a2 + 16 * v31 + 8);
      uint64_t v33 = *(unsigned int *)(v32 + 72);
      if (v33) {
        break;
      }
LABEL_48:
      uint64_t v31 = v111 + 1;
      if (v111 + 1 == v107) {
        goto LABEL_108;
      }
    }
    uint64_t v34 = *(uint64_t **)(v32 + 64);
    char v35 = &v34[v33];
    while (1)
    {
      int v37 = v114;
      if (!v114) {
        goto LABEL_94;
      }
      uint64_t v38 = ((*v34 >> 4) ^ (*v34 >> 9)) & (v114 - 1);
      uint64_t v39 = (uint64_t *)((char *)v112 + 32 * v38);
      uint64_t v40 = *v39;
      if (*v34 == *v39) {
        goto LABEL_70;
      }
      size_t v41 = 0;
      int v42 = 1;
      while (v40 != -4096)
      {
        if (v41) {
          BOOL v43 = 0;
        }
        else {
          BOOL v43 = v40 == -8192;
        }
        if (v43) {
          size_t v41 = v39;
        }
        int v44 = v38 + v42++;
        uint64_t v38 = v44 & (v114 - 1);
        uint64_t v39 = (uint64_t *)((char *)v112 + 32 * v38);
        uint64_t v40 = *v39;
        if (*v34 == *v39) {
          goto LABEL_70;
        }
      }
      if (v41) {
        uint64_t v39 = v41;
      }
      if (4 * (int)v113 + 4 < 3 * v114)
      {
        if (v114 + ~v113 - HIDWORD(v113) > v114 >> 3) {
          goto LABEL_66;
        }
      }
      else
      {
LABEL_94:
        int v37 = 2 * v114;
      }
      a1 = (llvm *)llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow((uint64_t)&v112, v37);
      uint64_t v45 = *v34;
      uint64_t v63 = ((*v34 >> 4) ^ (*v34 >> 9)) & (v114 - 1);
      uint64_t v39 = (uint64_t *)((char *)v112 + 32 * v63);
      uint64_t v64 = *v39;
      if (*v34 == *v39) {
        goto LABEL_67;
      }
      size_t v65 = 0;
      int v66 = 1;
      while (v64 != -4096)
      {
        if (v65) {
          BOOL v67 = 0;
        }
        else {
          BOOL v67 = v64 == -8192;
        }
        if (v67) {
          size_t v65 = v39;
        }
        int v68 = v63 + v66++;
        uint64_t v63 = v68 & (v114 - 1);
        uint64_t v39 = (uint64_t *)((char *)v112 + 32 * v63);
        uint64_t v64 = *v39;
        if (v45 == *v39) {
          goto LABEL_67;
        }
      }
      if (v65) {
        uint64_t v39 = v65;
      }
LABEL_66:
      uint64_t v45 = *v39;
LABEL_67:
      LODWORD(v113) = v113 + 1;
      if (v45 != -4096) {
        --HIDWORD(v113);
      }
      *uint64_t v39 = *v34;
      v39[1] = 0;
      _OWORD v39[2] = 0;
      v39[3] = 0;
LABEL_70:
      uint64_t v47 = (char *)v39[2];
      unint64_t v46 = v39[3];
      if ((unint64_t)v47 >= v46)
      {
        std::error_code v48 = (char *)v39[1];
        uint64_t v49 = (v47 - v48) >> 3;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61) {
          goto LABEL_184;
        }
        uint64_t v51 = v46 - (void)v48;
        if (v51 >> 2 > v50) {
          unint64_t v50 = v51 >> 2;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v50;
        }
        if (v52)
        {
          if (v52 >> 61) {
            goto LABEL_185;
          }
          a1 = (llvm *)operator new(8 * v52);
          char v53 = (void *)((char *)a1 + 8 * v49);
          *char v53 = v32;
          uint64_t v36 = (uint64_t)(v53 + 1);
          if (v47 == v48) {
            goto LABEL_89;
          }
LABEL_82:
          unint64_t v54 = v47 - 8 - v48;
          if (v54 < 0x58) {
            goto LABEL_188;
          }
          if ((unint64_t)(v48 - (char *)a1) < 0x20) {
            goto LABEL_188;
          }
          uint64_t v55 = (v54 >> 3) + 1;
          uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
          size_t v57 = &v47[-v56];
          char v53 = (void *)((char *)v53 - v56);
          uint64_t v58 = (_OWORD *)((char *)a1 + 8 * v49 - 16);
          char v59 = (long long *)(v47 - 16);
          uint64_t v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v61 = *v59;
            *(v58 - 1) = *(v59 - 1);
            _OWORD *v58 = v61;
            v58 -= 2;
            v59 -= 2;
            v60 -= 4;
          }
          while (v60);
          uint64_t v47 = v57;
          if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_188:
            do
            {
              uint64_t v62 = *((void *)v47 - 1);
              v47 -= 8;
              *--char v53 = v62;
            }
            while (v47 != v48);
          }
          uint64_t v47 = (char *)v39[1];
        }
        else
        {
          a1 = 0;
          char v53 = (void *)(8 * v49);
          *(void *)(8 * v49) = v32;
          uint64_t v36 = 8 * v49 + 8;
          if (v47 != v48) {
            goto LABEL_82;
          }
        }
LABEL_89:
        v39[1] = (uint64_t)v53;
        _OWORD v39[2] = v36;
        v39[3] = (uint64_t)a1 + 8 * v52;
        if (v47) {
          operator delete(v47);
        }
        goto LABEL_52;
      }
      *(void *)uint64_t v47 = v32;
      uint64_t v36 = (uint64_t)(v47 + 8);
LABEL_52:
      _OWORD v39[2] = v36;
      if (++v34 == v35) {
        goto LABEL_48;
      }
    }
  }
LABEL_108:
  if (v105 == v110)
  {
LABEL_176:
    if (v114)
    {
      BOOL v102 = (void *)((char *)v112 + 16);
      uint64_t v103 = 32 * v114;
      while (1)
      {
        if ((*(v102 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          char v104 = (void *)*(v102 - 1);
          if (v104)
          {
            void *v102 = v104;
            operator delete(v104);
          }
        }
        v102 += 4;
        v103 -= 32;
        if (!v103) {
          llvm::deallocate_buffer(v112, (void *)(32 * v114));
        }
      }
    }
    llvm::deallocate_buffer(v112, 0);
  }
  size_t v69 = v105;
  while (1)
  {
    uint64_t v70 = *(void *)v69;
    int v71 = v114;
    if (!v114) {
      goto LABEL_160;
    }
    uint64_t v72 = ((v70 >> 4) ^ (v70 >> 9)) & (v114 - 1);
    size_t v73 = (void *)((char *)v112 + 32 * v72);
    uint64_t v74 = *v73;
    if (v70 != *v73) {
      break;
    }
LABEL_128:
    uint64_t v81 = v73[1];
    uint64_t v80 = v73[2];
    if (!*((unsigned char *)v108 + 8) && v81 == v80) {
      goto LABEL_111;
    }
    uint64_t v82 = (llvm::raw_ostream *)llvm::outs(a1);
    std::string v83 = (unsigned char *)*((void *)v82 + 4);
    if (*((unsigned char **)v82 + 3) == v83)
    {
      uint64_t v82 = llvm::raw_ostream::write(v82, "\n", 1uLL);
    }
    else
    {
      *std::string v83 = 10;
      ++*((void *)v82 + 4);
    }
    std::error_code v84 = (llvm::raw_ostream *)llvm::outs(v82);
    long long v85 = *(const void **)v70;
    unint64_t v86 = *(void *)(v70 + 8);
    int64_t v87 = (llvm::raw_ostream *)*((void *)v84 + 4);
    if (v86 <= *((void *)v84 + 3) - (void)v87)
    {
      if (v86)
      {
        memcpy(v87, v85, *(void *)(v70 + 8));
        int64_t v87 = (llvm::raw_ostream *)(*((void *)v84 + 4) + v86);
        *((void *)v84 + 4) = v87;
      }
    }
    else
    {
      std::error_code v84 = llvm::raw_ostream::write(v84, (const char *)v85, *(void *)(v70 + 8));
      int64_t v87 = (llvm::raw_ostream *)*((void *)v84 + 4);
    }
    if (*((void *)v84 + 3) - (void)v87 > 1uLL)
    {
      *(_WORD *)int64_t v87 = 2618;
      *((void *)v84 + 4) += 2;
      if (!*(void *)(v70 + 24))
      {
LABEL_142:
        a1 = (llvm *)llvm::outs(v87);
        int v91 = (unsigned char *)*((void *)a1 + 4);
        if (*((unsigned char **)a1 + 3) == v91)
        {
          a1 = llvm::raw_ostream::write(a1, "\n", 1uLL);
          if (v81 != v80)
          {
LABEL_151:
            uint64_t v92 = (uint64_t *)v73[1];
            for (uint64_t i = (uint64_t *)v73[2];
                  v92 != i;
                  a1 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v94 + 48))(v94, v106))
            {
              uint64_t v94 = *v92++;
            }
            goto LABEL_111;
          }
        }
        else
        {
          *int v91 = 10;
          ++*((void *)a1 + 4);
          if (v81 != v80) {
            goto LABEL_151;
          }
        }
        goto LABEL_155;
      }
    }
    else
    {
      int64_t v87 = llvm::raw_ostream::write(v84, ":\n", 2uLL);
      if (!*(void *)(v70 + 24)) {
        goto LABEL_142;
      }
    }
    std::string v88 = (llvm::raw_ostream *)llvm::outs(v87);
    size_t v89 = *(const void **)(v70 + 16);
    unint64_t v90 = *(void *)(v70 + 24);
    a1 = (llvm *)*((void *)v88 + 4);
    if (v90 <= *((void *)v88 + 3) - (void)a1)
    {
      if (v90)
      {
        memcpy(a1, v89, *(void *)(v70 + 24));
        a1 = (llvm *)(*((void *)v88 + 4) + v90);
        *((void *)v88 + 4) = a1;
      }
    }
    else
    {
      std::string v88 = llvm::raw_ostream::write(v88, (const char *)v89, *(void *)(v70 + 24));
      a1 = (llvm *)*((void *)v88 + 4);
    }
    if (*((void *)v88 + 3) - (void)a1 > 1uLL)
    {
      *(_WORD *)a1 = 2570;
      *((void *)v88 + 4) += 2;
      if (v81 != v80) {
        goto LABEL_151;
      }
    }
    else
    {
      a1 = llvm::raw_ostream::write(v88, "\n\n", 2uLL);
      if (v81 != v80) {
        goto LABEL_151;
      }
    }
LABEL_155:
    a1 = (llvm *)llvm::outs(a1);
    uint64_t v95 = (void *)*((void *)a1 + 4);
    if (*((void *)a1 + 3) - (void)v95 > 0x26uLL)
    {
      qmemcpy(v95, "  This option category has no options.\n", 39);
      *((void *)a1 + 4) += 39;
    }
    else
    {
      a1 = llvm::raw_ostream::write(a1, "  This option category has no options.\n", 0x27uLL);
    }
LABEL_111:
    v69 += 8;
    if (v69 == v110) {
      goto LABEL_176;
    }
  }
  unint64_t v75 = 0;
  int v76 = 1;
  while (v74 != -4096)
  {
    if (v75) {
      BOOL v77 = 0;
    }
    else {
      BOOL v77 = v74 == -8192;
    }
    if (v77) {
      unint64_t v75 = v73;
    }
    int v78 = v72 + v76++;
    uint64_t v72 = v78 & (v114 - 1);
    size_t v73 = (void *)((char *)v112 + 32 * v72);
    uint64_t v74 = *v73;
    if (v70 == *v73) {
      goto LABEL_128;
    }
  }
  if (v75) {
    size_t v73 = v75;
  }
  if (4 * (int)v113 + 4 < 3 * v114)
  {
    if (v114 + ~v113 - HIDWORD(v113) > v114 >> 3) {
      goto LABEL_125;
    }
  }
  else
  {
LABEL_160:
    int v71 = 2 * v114;
  }
  a1 = (llvm *)llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow((uint64_t)&v112, v71);
  uint64_t v96 = (v114 - 1) & ((v70 >> 4) ^ (v70 >> 9));
  size_t v73 = (void *)((char *)v112 + 32 * v96);
  uint64_t v97 = *v73;
  if (v70 == *v73)
  {
LABEL_162:
    LODWORD(v113) = v113 + 1;
    if (v70 == -4096) {
      goto LABEL_127;
    }
    goto LABEL_126;
  }
  uint64_t v98 = 0;
  int v99 = 1;
  while (v97 != -4096)
  {
    if (v98) {
      BOOL v100 = 0;
    }
    else {
      BOOL v100 = v97 == -8192;
    }
    if (v100) {
      uint64_t v98 = v73;
    }
    int v101 = v96 + v99++;
    uint64_t v96 = v101 & (v114 - 1);
    size_t v73 = (void *)((char *)v112 + 32 * v96);
    uint64_t v97 = *v73;
    if (v70 == *v73) {
      goto LABEL_162;
    }
  }
  if (v98) {
    size_t v73 = v98;
  }
LABEL_125:
  uint64_t v79 = *v73;
  LODWORD(v113) = v113 + 1;
  if (v79 == -4096)
  {
LABEL_127:
    *size_t v73 = v70;
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = 0;
    goto LABEL_128;
  }
LABEL_126:
  --HIDWORD(v113);
  goto LABEL_127;
}

uint64_t anonymous namespace'::CategorizedHelpPrinter::OptionCategoryCompare(const void ***a1, const void ***a2)
{
  atomic_ullong v2 = (*a1)[1];
  uint64_t v3 = (*a2)[1];
  if (v3 >= v2) {
    size_t v4 = (size_t)(*a1)[1];
  }
  else {
    size_t v4 = (size_t)(*a2)[1];
  }
  if (v4)
  {
    int v5 = memcmp(**a1, **a2, v4);
    if (v5) {
      return (v5 >> 31) | 1u;
    }
  }
  if (v2 < v3) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 1;
  }
  if (v2 == v3) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t llvm::cl::Option::Option(uint64_t a1, char a2, char a3)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = a2 & 7 | (32 * (a3 & 3)) | *(_WORD *)(a1 + 10) & 0x8000;
  size_t v4 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v5 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_45, memory_order_acquire) & 1) == 0)
  {
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    int v8 = __cxa_guard_acquire(&_MergedGlobals_45);
    size_t v4 = v15;
    uint64_t v5 = v16;
    if (v8)
    {
      qword_1EB215C28 = (uint64_t)"General options";
      unk_1EB215C30 = 15;
      qword_1EB215C38 = (uint64_t)"";
      unk_1EB215C40 = 0;
      if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
      atomic_ullong v9 = qword_1EB215BF8[0];
      }
      uint64_t v10 = *(void *)(qword_1EB215BF8[0] + 120);
      if (v10 != *(void *)(qword_1EB215BF8[0] + 112)) {
        goto LABEL_9;
      }
      uint64_t v11 = *(unsigned int *)(qword_1EB215BF8[0] + 132);
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 8 * v11;
        int64_t v14 = *(void **)(qword_1EB215BF8[0] + 120);
        while ((uint64_t *)*v14 != &qword_1EB215C28)
        {
          if (*v14 == -2) {
            uint64_t v12 = v14;
          }
          ++v14;
          v13 -= 8;
          if (!v13)
          {
            if (!v12) {
              goto LABEL_19;
            }
            void *v12 = &qword_1EB215C28;
            --*(_DWORD *)(v9 + 136);
            goto LABEL_10;
          }
        }
        goto LABEL_10;
      }
LABEL_19:
      if (v11 < *(_DWORD *)(qword_1EB215BF8[0] + 128))
      {
        *(_DWORD *)(qword_1EB215BF8[0] + 132) = v11 + 1;
        *(void *)(v10 + 8 * v11) = &qword_1EB215C28;
      }
      else
      {
LABEL_9:
        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(qword_1EB215BF8[0] + 112), &qword_1EB215C28);
      }
LABEL_10:
      __cxa_guard_release(&_MergedGlobals_45);
      size_t v4 = v15;
      uint64_t v5 = v16;
    }
  }
  uint64_t v6 = *(unsigned int *)(a1 + 72);
  if (v6 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v4, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v6) = &qword_1EB215C28;
  ++*(_DWORD *)(a1 + 72);
  return a1;
}

uint64_t llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, _DWORD *a5, size_t a6)
{
  char v11 = 0;
  uint64_t v8 = llvm::cl::parser<BOOL>::parse(a1, (void *)a1, a3, a4, a5, a6, &v11);
  if (v8) {
    return v8;
  }
  if (v11)
  {
    exit(0);
  }
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 176);
  if (v9)
  {
    (*(void (**)(uint64_t, char *))(*(void *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
}

uint64_t llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

void *llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::~opt(void *a1)
{
  *a1 = &unk_1EC9A3BC0;
  atomic_ullong v2 = a1 + 19;
  uint64_t v3 = (void *)a1[22];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    *a1 = &unk_1EC9A42A8;
    size_t v4 = (void *)a1[12];
    if (v4 != (void *)a1[11]) {
LABEL_5:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    *a1 = &unk_1EC9A42A8;
    size_t v4 = (void *)a1[12];
    if (v4 != (void *)a1[11]) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = (void *)a1[8];
  if (v5 != a1 + 10) {
    free(v5);
  }
  return a1;
}

void llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::~opt(char *__p)
{
  *(void *)std::string __p = &unk_1EC9A3BC0;
  atomic_ullong v2 = __p + 152;
  uint64_t v3 = (char *)*((void *)__p + 22);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    *(void *)std::string __p = &unk_1EC9A42A8;
    size_t v4 = (void *)*((void *)__p + 12);
    if (v4 != *((void **)__p + 11)) {
LABEL_5:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    *(void *)std::string __p = &unk_1EC9A42A8;
    size_t v4 = (void *)*((void *)__p + 12);
    if (v4 != *((void **)__p + 11)) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = (char *)*((void *)__p + 8);
  if (v5 != __p + 80) {
    free(v5);
  }

  operator delete(__p);
}

uint64_t llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 == 1) {
    uint64_t v3 = 7;
  }
  else {
    uint64_t v3 = v2 + 7;
  }
  (*(void (**)(void))(*(void *)(a1 + 144) + 16))();
  if (v4)
  {
    uint64_t v5 = 6;
    if ((*(_WORD *)(a1 + 10) & 0x400) == 0) {
      uint64_t v5 = 3;
    }
    uint64_t v6 = *(void *)(a1 + 56);
    if (!v6) {
      uint64_t v6 = v4;
    }
    v3 += v5 + v6;
  }
  return v3;
}

llvm::raw_ostream *llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 144), a1, a2);
}

double llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::printOptionValue(llvm::cl::Option *a1, int a2)
{
  return llvm::cl::basic_parser_impl::printOptionNoValue(a1, a1, a2);
}

uint64_t llvm::cl::OptionValueBase<anonymous namespace'::HelpPrinter,true>::compare()
{
  return 0;
}

void *std::__function::__func<llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EC9CE3F0;
  return result;
}

void std::__function::__func<llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CE3F0;
}

uint64_t std::__function::__func<llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4llvm2cl3optIN12_GLOBAL__N_111HelpPrinterELb1ENS0_6parserIbEEEUlRKbE_E") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_111HelpPrinterELb1ENS0_6parserIbEEEUlRKbE_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4llvm2cl3optIN12_GLOBAL__N_111HelpPrinterELb1ENS0_6parserIbEEEUlRKbE_E")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_111HelpPrinterELb1ENS0_6parserIbEEEUlRKbE_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target_type()
{
}

const void **llvm::cl::apply<llvm::cl::opt<anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>,llvm::cl::desc,llvm::cl::LocationClass<anonymous namespace'::HelpPrinter>,llvm::cl::OptionHidden,llvm::cl::ValueExpected,llvm::cl::cat,llvm::cl::sub>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _WORD *a5, _WORD *a6, llvm::cl::OptionCategory **a7, const void **a8)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a3;
  if (*(void *)(a1 + 128))
  {
    unint64_t v22 = "cl::location(x) specified more than once!";
    __int16 v23 = 259;
    uint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    llvm::cl::Option::error((void *)a1, (llvm::Twine *)&v22, 0, 0, v13);
  }
  else
  {
    *(void *)(a1 + 128) = *a4;
  }
  __int16 v14 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a5 & 3));
  *(_WORD *)(a1 + 10) = v14;
  *(_WORD *)(a1 + 10) = (8 * (*a6 & 3)) | v14 & 0xFFE7;
  llvm::cl::Option::addCategory((llvm::cl::Option *)a1, *a7);
  uint64_t v15 = *a8;
  uint64_t v17 = *(void *)(a1 + 96);
  uint64_t result = (const void **)(a1 + 88);
  if (v17 != *(void *)(a1 + 88)) {
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, v15);
  }
  uint64_t v18 = *(unsigned int *)(a1 + 108);
  if (!v18)
  {
LABEL_15:
    if (v18 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v18 + 1;
      *(void *)(v17 + 8 * v18) = v15;
      return result;
    }
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, v15);
  }
  uint64_t v19 = 0;
  uint64_t v20 = 8 * v18;
  uint64_t v21 = *(void **)(a1 + 96);
  while ((const void *)*v21 != v15)
  {
    if (*v21 == -2) {
      uint64_t v19 = v21;
    }
    ++v21;
    v20 -= 8;
    if (!v20)
    {
      if (!v19) {
        goto LABEL_15;
      }
      void *v19 = v15;
      --*(_DWORD *)(a1 + 112);
      return result;
    }
  }
  return result;
}

_anonymous_namespace_::HelpPrinter **llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, _DWORD *a5, size_t a6)
{
  char v11 = 0;
  uint64_t v8 = (_anonymous_namespace_::HelpPrinter **)llvm::cl::parser<BOOL>::parse(a1, (void *)a1, a3, a4, a5, a6, &v11);
  if ((v8 & 1) == 0)
  {
    if (v11)
    {
      uint64_t v8 = *(_anonymous_namespace_::HelpPrinter ***)(a1 + 128);
      if (!atomic_load_explicit(qword_1EB215BF8, memory_order_acquire)) {
      if ((*(_DWORD *)(qword_1EB215BF8[0] + 132) - *(_DWORD *)(qword_1EB215BF8[0] + 136)) >= 2)
      }
      {
        if (!atomic_load_explicit(qword_1EB215C10, memory_order_acquire)) {
        *(_WORD *)(qword_1EB215C10[0] + 138) &= 0xFF9Fu;
        }
        exit(0);
      }
    }
    else
    {
      *(_WORD *)(a1 + 12) = a2;
      uint64_t v9 = *(void *)(a1 + 176);
      if (v9)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v9 + 48))(v9, &v11);
        return v8;
      }
      std::__throw_bad_function_call[abi:nn180100]();
    }
    exit(0);
  }
  return v8;
}

uint64_t llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

void *llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::~opt(void *a1)
{
  *a1 = &unk_1EC9A3C90;
  uint64_t v2 = a1 + 19;
  unint64_t v3 = (void *)a1[22];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    *a1 = &unk_1EC9A42A8;
    uint64_t v4 = (void *)a1[12];
    if (v4 != (void *)a1[11]) {
LABEL_5:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    *a1 = &unk_1EC9A42A8;
    uint64_t v4 = (void *)a1[12];
    if (v4 != (void *)a1[11]) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = (void *)a1[8];
  if (v5 != a1 + 10) {
    free(v5);
  }
  return a1;
}

void llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::~opt(char *__p)
{
  *(void *)std::string __p = &unk_1EC9A3C90;
  uint64_t v2 = __p + 152;
  unint64_t v3 = (char *)*((void *)__p + 22);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    *(void *)std::string __p = &unk_1EC9A42A8;
    uint64_t v4 = (void *)*((void *)__p + 12);
    if (v4 != *((void **)__p + 11)) {
LABEL_5:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    *(void *)std::string __p = &unk_1EC9A42A8;
    uint64_t v4 = (void *)*((void *)__p + 12);
    if (v4 != *((void **)__p + 11)) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = (char *)*((void *)__p + 8);
  if (v5 != __p + 80) {
    free(v5);
  }

  operator delete(__p);
}

uint64_t llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 == 1) {
    uint64_t v3 = 7;
  }
  else {
    uint64_t v3 = v2 + 7;
  }
  (*(void (**)(void))(*(void *)(a1 + 144) + 16))();
  if (v4)
  {
    uint64_t v5 = 6;
    if ((*(_WORD *)(a1 + 10) & 0x400) == 0) {
      uint64_t v5 = 3;
    }
    uint64_t v6 = *(void *)(a1 + 56);
    if (!v6) {
      uint64_t v6 = v4;
    }
    v3 += v5 + v6;
  }
  return v3;
}

llvm::raw_ostream *llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 144), a1, a2);
}

double llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::printOptionValue(llvm::cl::Option *a1, int a2)
{
  return llvm::cl::basic_parser_impl::printOptionNoValue(a1, a1, a2);
}

uint64_t llvm::cl::OptionValueBase<anonymous namespace'::HelpPrinterWrapper,true>::compare()
{
  return 0;
}

void *std::__function::__func<llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EC9CE4A0;
  return result;
}

void std::__function::__func<llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CE4A0;
}

uint64_t std::__function::__func<llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4llvm2cl3optIN12_GLOBAL__N_118HelpPrinterWrapperELb1ENS0_6parserIbEEEUlRKbE_E") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_118HelpPrinterWrapperELb1ENS0_6parserIbEEEUlRKbE_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4llvm2cl3optIN12_GLOBAL__N_118HelpPrinterWrapperELb1ENS0_6parserIbEEEUlRKbE_E")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_118HelpPrinterWrapperELb1ENS0_6parserIbEEEUlRKbE_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target_type()
{
}

uint64_t llvm::cl::alias::alias<char [2],llvm::cl::desc,llvm::cl::aliasopt,llvm::cl::MiscFlags>(uint64_t a1, int8x16_t *a2, _OWORD *a3, uint64_t *a4, _WORD *a5)
{
  uint64_t v10 = (void *)llvm::cl::Option::Option(a1, 0, 1);
  *uint64_t v10 = &unk_1EC9A4240;
  v10[16] = 0;
  char v11 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v11);
  *(_OWORD *)(a1 + 32) = *a3;
  uint64_t v13 = *a4;
  if (*(void *)(a1 + 128))
  {
    uint64_t v16 = "cl::alias must only have one cl::aliasopt(...) specified!";
    __int16 v17 = 259;
    __int16 v14 = (llvm::raw_ostream *)llvm::errs(v12);
    llvm::cl::Option::error((void *)a1, (llvm::Twine *)&v16, 0, 0, v14);
  }
  *(void *)(a1 + 128) = v13;
  *(_WORD *)(a1 + 10) |= (*a5 & 0x1F) << 9;
  llvm::cl::alias::done((llvm::cl::alias *)a1);
  return a1;
}

const void **llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [14],llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::cat,llvm::cl::sub>(uint64_t a1, int8x16_t *__s, _OWORD *a3, _WORD *a4, unsigned char **a5, llvm::cl::OptionCategory **a6, const void **a7)
{
  __int16 v14 = (const unsigned __int8 *)strlen(__s->i8);
  llvm::cl::Option::setArgStr(a1, __s, v14);
  *(_OWORD *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  uint64_t v15 = *a5;
  *(unsigned char *)(a1 + 128) = **a5;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v15;
  llvm::cl::Option::addCategory((llvm::cl::Option *)a1, *a6);
  uint64_t v16 = *a7;
  uint64_t v18 = *(void *)(a1 + 96);
  uint64_t result = (const void **)(a1 + 88);
  if (v18 != *(void *)(a1 + 88))
  {
LABEL_2:
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, v16);
  }
  uint64_t v19 = *(unsigned int *)(a1 + 108);
  if (!v19)
  {
LABEL_14:
    if (v19 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v19 + 1;
      *(void *)(v18 + 8 * v19) = v16;
      return result;
    }
    goto LABEL_2;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 8 * v19;
  unint64_t v22 = *(void **)(a1 + 96);
  while ((const void *)*v22 != v16)
  {
    if (*v22 == -2) {
      uint64_t v20 = v22;
    }
    ++v22;
    v21 -= 8;
    if (!v21)
    {
      if (!v20) {
        goto LABEL_14;
      }
      void *v20 = v16;
      --*(_DWORD *)(a1 + 112);
      return result;
    }
  }
  return result;
}

atomic_ullong *llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, _DWORD *a5, size_t a6)
{
  char v15 = 0;
  uint64_t v8 = llvm::cl::parser<BOOL>::parse(a1, (void *)a1, a3, a4, a5, a6, &v15);
  uint64_t v9 = (atomic_ullong *)v8;
  if ((v8 & 1) == 0)
  {
    if (v15)
    {
      uint64_t v9 = qword_1EB215C10;
      if (atomic_load_explicit(qword_1EB215C10, memory_order_acquire))
      {
        uint64_t v12 = *(void *)(qword_1EB215C10[0] + 1408);
        if (!atomic_load_explicit(qword_1EB215C10, memory_order_acquire)) {
          goto LABEL_12;
        }
        goto LABEL_8;
      }
    }
    else
    {
      *(_WORD *)(a1 + 12) = a2;
      uint64_t v10 = *(void *)(a1 + 176);
      if (v10)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v10 + 48))(v10, &v15);
        return v9;
      }
      std::__throw_bad_function_call[abi:nn180100]();
    }
    uint64_t v12 = *(void *)(*v9 + 1408);
    if (!atomic_load_explicit(v9, memory_order_acquire))
    {
LABEL_12:
      atomic_ullong v13 = qword_1EB215C10[0];
      if (v12)
      {
LABEL_13:
        uint64_t v14 = v13 + 1384;
        llvm::outs((llvm *)v8);
        std::function<void ()(llvm::raw_ostream &)>::operator()(v14);
        exit(0);
      }
LABEL_9:
      std::vector<std::function<void ()(llvm::raw_ostream &)>>::vector(v16, (uint64_t *)(v13 + 1416));
      std::vector<std::function<void ()(llvm::raw_ostream &)>>::~vector[abi:nn180100](v16);
      exit(0);
    }
LABEL_8:
    atomic_ullong v13 = qword_1EB215C10[0];
    if (v12) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  return v9;
}

uint64_t llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

void *llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::~opt(void *a1)
{
  *a1 = &unk_1EC9A3C28;
  uint64_t v2 = a1 + 19;
  unint64_t v3 = (void *)a1[22];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    *a1 = &unk_1EC9A42A8;
    uint64_t v4 = (void *)a1[12];
    if (v4 != (void *)a1[11]) {
LABEL_5:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    *a1 = &unk_1EC9A42A8;
    uint64_t v4 = (void *)a1[12];
    if (v4 != (void *)a1[11]) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = (void *)a1[8];
  if (v5 != a1 + 10) {
    free(v5);
  }
  return a1;
}

void llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::~opt(char *__p)
{
  *(void *)std::string __p = &unk_1EC9A3C28;
  uint64_t v2 = __p + 152;
  unint64_t v3 = (char *)*((void *)__p + 22);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    *(void *)std::string __p = &unk_1EC9A42A8;
    uint64_t v4 = (void *)*((void *)__p + 12);
    if (v4 != *((void **)__p + 11)) {
LABEL_5:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    *(void *)std::string __p = &unk_1EC9A42A8;
    uint64_t v4 = (void *)*((void *)__p + 12);
    if (v4 != *((void **)__p + 11)) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = (char *)*((void *)__p + 8);
  if (v5 != __p + 80) {
    free(v5);
  }

  operator delete(__p);
}

uint64_t llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 == 1) {
    uint64_t v3 = 7;
  }
  else {
    uint64_t v3 = v2 + 7;
  }
  (*(void (**)(void))(*(void *)(a1 + 144) + 16))();
  if (v4)
  {
    uint64_t v5 = 6;
    if ((*(_WORD *)(a1 + 10) & 0x400) == 0) {
      uint64_t v5 = 3;
    }
    uint64_t v6 = *(void *)(a1 + 56);
    if (!v6) {
      uint64_t v6 = v4;
    }
    v3 += v5 + v6;
  }
  return v3;
}

llvm::raw_ostream *llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 144), a1, a2);
}

double llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::printOptionValue(llvm::cl::Option *a1, int a2)
{
  return llvm::cl::basic_parser_impl::printOptionNoValue(a1, a1, a2);
}

uint64_t llvm::cl::OptionValueBase<anonymous namespace'::VersionPrinter,true>::compare()
{
  return 0;
}

void *std::__function::__func<llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EC9CE448;
  return result;
}

void std::__function::__func<llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CE448;
}

uint64_t std::__function::__func<llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4llvm2cl3optIN12_GLOBAL__N_114VersionPrinterELb1ENS0_6parserIbEEEUlRKbE_E") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_114VersionPrinterELb1ENS0_6parserIbEEEUlRKbE_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4llvm2cl3optIN12_GLOBAL__N_114VersionPrinterELb1ENS0_6parserIbEEEUlRKbE_E")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_114VersionPrinterELb1ENS0_6parserIbEEEUlRKbE_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target_type()
{
}

void std::function<void ()(llvm::raw_ostream &)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)v1 + 48);
    v2();
  }
  else
  {
    unint64_t v3 = (void *)std::__throw_bad_function_call[abi:nn180100]();
    sortOpts(v3, v4, v5, v6);
  }
}

void sortOpts(void *a1, int a2, uint64_t a3, int a4)
{
  long long v30 = (unsigned __int16 **)v34;
  uint64_t v31 = (unsigned __int16 **)v34;
  uint64_t v32 = 32;
  int v33 = 0;
  int v6 = a1;
  if (a2)
  {
    int v6 = a1;
    if (!*a1 || *a1 == -8)
    {
      do
      {
        uint64_t v9 = v6[1];
        ++v6;
        uint64_t v8 = v9;
        if (v9) {
          BOOL v10 = v8 == -8;
        }
        else {
          BOOL v10 = 1;
        }
      }
      while (v10);
    }
  }
  char v11 = &a1[a2];
  if (v6 != v11)
  {
    uint64_t v12 = *v6;
    while (1)
    {
      atomic_ullong v13 = *(unsigned __int16 **)(v12 + 8);
      int v14 = (v13[5] >> 5) & 3;
      int v15 = v14 == 1 ? a4 : 1;
      if (v14 != 2 && v15 != 0) {
        break;
      }
      do
      {
LABEL_26:
        uint64_t v23 = v6[1];
        ++v6;
        uint64_t v12 = v23;
        if (v23) {
          BOOL v24 = v12 == -8;
        }
        else {
          BOOL v24 = 1;
        }
      }
      while (v24);
      if (v6 == v11) {
        goto LABEL_43;
      }
    }
    if (v31 != v30) {
      goto LABEL_21;
    }
    uint64_t v25 = HIDWORD(v32);
    if (HIDWORD(v32))
    {
      uint64_t v26 = 0;
      uint64_t v27 = 8 * HIDWORD(v32);
      size_t v28 = v31;
      do
      {
        if (*v28 == v13)
        {
          int v18 = 0;
          goto LABEL_22;
        }
        if (*v28 == (unsigned __int16 *)-2) {
          uint64_t v26 = v28;
        }
        ++v28;
        v27 -= 8;
      }
      while (v27);
      if (!v26) {
        goto LABEL_40;
      }
      void *v26 = v13;
      --v33;
      int v18 = 1;
      goto LABEL_22;
    }
LABEL_40:
    if (HIDWORD(v32) < v32)
    {
      ++HIDWORD(v32);
      v31[v25] = v13;
      int v18 = 1;
    }
    else
    {
LABEL_21:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v30, v13);
      int v18 = v17;
    }
LABEL_22:
    if (v18)
    {
      uint64_t v19 = *v6;
      uint64_t v20 = *(void *)(*v6 + 8);
      unint64_t v21 = *(unsigned int *)(a3 + 8);
      if (v21 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v21 + 1, 16);
        unint64_t v21 = *(unsigned int *)(a3 + 8);
      }
      unint64_t v22 = (void *)(*(void *)a3 + 16 * v21);
      void *v22 = v19 + 16;
      v22[1] = v20;
      ++*(_DWORD *)(a3 + 8);
    }
    goto LABEL_26;
  }
LABEL_43:
  size_t v29 = *(unsigned int *)(a3 + 8);
  if (v29 >= 2) {
    qsort(*(void **)a3, v29, 0x10uLL, (int (__cdecl *)(const void *, const void *))OptNameCompare);
  }
  if (v31 != v30) {
    free(v31);
  }
}

uint64_t OptNameCompare(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t SubNameCompare(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

_OWORD *llvm::object_creator<anonymous namespace'::CommandLineParser>::call()
{
  unint64_t v0 = operator new(0x158uLL);
  *unint64_t v0 = 0u;
  v0[1] = 0u;
  v0[2] = 0u;
  v0[3] = 0u;
  *((void *)v0 + 8) = v0 + 5;
  *((void *)v0 + 9) = 0x400000000;
  *((void *)v0 + 14) = v0 + 9;
  *((void *)v0 + 15) = v0 + 9;
  *((void *)v0 + 16) = 16;
  *((_DWORD *)v0 + 34) = 0;
  *((void *)v0 + 34) = v0 + 19;
  *((void *)v0 + 35) = v0 + 19;
  *((void *)v0 + 36) = 4;
  *((_DWORD *)v0 + 74) = 0;
  *((void *)v0 + 42) = 0;
  if (!atomic_load_explicit(llvm::cl::TopLevelSubCommand, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  if (!atomic_load_explicit(llvm::cl::AllSubCommands, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  return v0;
}

void llvm::object_deleter<anonymous namespace'::CommandLineParser>::call(void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p[35];
    if (v2 != __p[34]) {
      free(v2);
    }
    unint64_t v3 = __p[15];
    if (v3 != __p[14]) {
      free(v3);
    }
    int v4 = (void **)__p[8];
    if (v4 != __p + 10) {
      free(v4);
    }
    uint64_t v5 = __p[5];
    if (v5)
    {
      __p[6] = v5;
      operator delete(v5);
    }
    if (*((char *)__p + 23) < 0)
    {
      operator delete(*__p);
      int v6 = __p;
    }
    else
    {
      int v6 = __p;
    }
    operator delete(v6);
  }
}

double llvm::object_creator<llvm::cl::SubCommand>::call()
{
  unint64_t v0 = operator new(0xA0uLL);
  double result = 0.0;
  v0[1] = 0u;
  v0[2] = 0u;
  *unint64_t v0 = 0u;
  v0[4] = 0u;
  v0[5] = 0u;
  v0[6] = 0u;
  v0[3] = 0u;
  v0[7] = 0u;
  *((void *)v0 + 4) = v0 + 3;
  *((_DWORD *)v0 + 11) = 4;
  *((void *)v0 + 10) = v0 + 6;
  *((_DWORD *)v0 + 23) = 4;
  *((void *)v0 + 16) = 0;
  *((void *)v0 + 17) = 0;
  *((void *)v0 + 18) = 0x1000000000;
  *((void *)v0 + 19) = 0;
  return result;
}

void llvm::object_deleter<llvm::cl::SubCommand>::call(uint64_t a1)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 140))
    {
      uint64_t v2 = *(unsigned int *)(a1 + 136);
      if (v2)
      {
        uint64_t v3 = 0;
        do
        {
          int v4 = *(llvm **)(*(void *)(a1 + 128) + v3);
          if (v4 != (llvm *)-8 && v4 != 0) {
            llvm::deallocate_buffer(v4, (void *)(*(void *)v4 + 17));
          }
          v3 += 8;
        }
        while (8 * v2 != v3);
      }
    }
    free(*(void **)(a1 + 128));
    int v6 = *(void **)(a1 + 80);
    if (v6 != (void *)(a1 + 96)) {
      free(v6);
    }
    unsigned int v7 = *(void **)(a1 + 32);
    if (v7 != (void *)(a1 + 48)) {
      free(v7);
    }
    operator delete((void *)a1);
  }
}

uint64_t llvm::ConvertUTF16toUTF8(unint64_t *a1, unint64_t a2, uint64_t *a3, unint64_t a4, int a5)
{
  uint64_t v5 = (unsigned __int16 *)*a1;
  unint64_t v6 = *a3;
  if (*a1 >= a2)
  {
    *a1 = (unint64_t)v5;
    *a3 = v6;
    return 0;
  }
  unsigned int v7 = (unsigned __int16 *)*a1;
  while (1)
  {
    unsigned int v10 = *v7++;
    unsigned int v9 = v10;
    int v11 = v10 & 0xFC00;
    if (v11 == 55296) {
      break;
    }
    if (!a5 && v11 == 56320)
    {
LABEL_28:
      *a1 = (unint64_t)v5;
      *a3 = v6;
      return 3;
    }
LABEL_15:
    if (v9 < 0x10000) {
      unsigned __int16 v13 = 3;
    }
    else {
      unsigned __int16 v13 = 4;
    }
    if (v9 < 0x800) {
      unsigned __int16 v13 = 2;
    }
    if (v9 < 0x80) {
      unsigned __int16 v13 = 1;
    }
    unint64_t v8 = v6 + v13;
    if (v8 > a4)
    {
      *a1 = (unint64_t)v5;
      *a3 = v6;
      return 2;
    }
    switch(v13)
    {
      case 1u:
        goto LABEL_5;
      case 2u:
        goto LABEL_4;
      case 3u:
        goto LABEL_3;
      case 4u:
        *(unsigned char *)--unint64_t v8 = v9 & 0x3F | 0x80;
        v9 >>= 6;
LABEL_3:
        *(unsigned char *)--unint64_t v8 = v9 & 0x3F | 0x80;
        v9 >>= 6;
LABEL_4:
        *(unsigned char *)--unint64_t v8 = v9 & 0x3F | 0x80;
        v9 >>= 6;
LABEL_5:
        *(unsigned char *)--unint64_t v8 = llvm::firstByteMark[v13] | v9;
        break;
      default:
        break;
    }
    unint64_t v6 = v8 + v13;
    uint64_t v5 = v7;
    if ((unint64_t)v7 >= a2)
    {
      *a1 = (unint64_t)v7;
      *a3 = v6;
      return 0;
    }
  }
  if ((unint64_t)v7 < a2)
  {
    int v12 = *v7;
    if ((v12 & 0xFC00) == 0xDC00)
    {
      unsigned int v9 = v12 + (v9 << 10) - 56613888;
      unsigned int v7 = v5 + 2;
    }
    else if (!a5)
    {
      goto LABEL_28;
    }
    goto LABEL_15;
  }
  *a1 = (unint64_t)v5;
  *a3 = v6;
  return 1;
}

BOOL llvm::hasUTF16ByteOrderMark(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 < 2) {
    return 0;
  }
  int v2 = *a1;
  if (v2 != 255)
  {
    if (v2 == 254) {
      return a1[1] == 255;
    }
    return 0;
  }
  return a1[1] == 254;
}

BOOL llvm::convertUTF16ToUTF8String(char *__src, uint64_t a2, std::string *this)
{
  if (a2) {
    return 0;
  }
  if (!a2) {
    return 1;
  }
  uint64_t v5 = __src;
  uint64_t v24 = 0;
  uint64_t v25 = __src;
  unint64_t v6 = &__src[a2];
  std::string __p = 0;
  uint64_t v23 = 0;
  int v7 = *(unsigned __int16 *)__src;
  if (v7 == 65534)
  {
    std::vector<unsigned short>::__insert_with_size[abi:nn180100]<unsigned short const*,unsigned short const*>((unint64_t *)&__p, 0, __src, v6, a2 >> 1);
    uint64_t v5 = (char *)__p;
    unint64_t v6 = v23;
    if (__p != v23)
    {
      unint64_t v8 = v23 - (unsigned char *)__p - 2;
      unsigned int v9 = (char *)__p;
      if (v8 < 0x1E) {
        goto LABEL_36;
      }
      uint64_t v10 = (v8 >> 1) + 1;
      unsigned int v9 = (char *)__p + 2 * (v10 & 0xFFFFFFFFFFFFFFF0);
      int v11 = (int8x16_t *)((char *)__p + 16);
      unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v13 = vrev16q_s8(*v11);
        v11[-1] = vrev16q_s8(v11[-1]);
        *int v11 = v13;
        v11 += 2;
        v12 -= 16;
      }
      while (v12);
      if (v10 != (v10 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_36:
        do
        {
          *(_WORD *)unsigned int v9 = bswap32(*(unsigned __int16 *)v9) >> 16;
          v9 += 2;
        }
        while (v9 != v6);
      }
    }
    uint64_t v25 = v5;
    int v7 = *(unsigned __int16 *)v5;
  }
  if (v7 == 65279) {
    uint64_t v25 = v5 + 2;
  }
  std::string::resize(this, (4 * a2) | 1, 0);
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    int v15 = this;
  }
  else {
    int v15 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  unint64_t v21 = v15;
  int v16 = llvm::ConvertUTF16toUTF8((unint64_t *)&v25, (unint64_t)v6, (uint64_t *)&v21, (unint64_t)v15 + size, 0);
  BOOL v17 = v16 == 0;
  if (v16)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      this->__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
    }
  }
  else
  {
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = this;
    }
    else {
      uint64_t v19 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    std::string::resize(this, (char *)v21 - (char *)v19, 0);
    std::string::push_back(this, 0);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v20 = this->__r_.__value_.__l.__size_ - 1;
      this->__r_.__value_.__l.__size_ = v20;
      this = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string::size_type v20 = HIBYTE(this->__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v20 & 0x7F;
    }
    this->__r_.__value_.__s.__data_[v20] = 0;
  }
  if (!__p) {
    return v17;
  }
  uint64_t v23 = (char *)__p;
  operator delete(__p);
  return v17;
}

char *std::vector<unsigned short>::__insert_with_size[abi:nn180100]<unsigned short const*,unsigned short const*>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  unint64_t v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
  if (a5 < 1) {
    return v8;
  }
  unint64_t v13 = a1[1];
  unint64_t v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v13) >> 1)
  {
    uint64_t v14 = a5 + ((uint64_t)(v13 - v6) >> 1);
    if (v14 < 0) {
      abort();
    }
    unint64_t v15 = v12 - v6;
    if (v15 > v14) {
      uint64_t v14 = v15;
    }
    if (v15 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 < 0) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      BOOL v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
      int v18 = (char *)operator new(2 * v16);
    }
    else
    {
      BOOL v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
      int v18 = 0;
    }
    size_t v40 = 2 * a5;
    uint64_t v59 = 2 * a5;
    size_t v41 = &v18[2 * (v7 >> 1)];
    int v42 = v18;
    memcpy(v41, __src, v40);
    BOOL v43 = v41;
    if ((void *)v6 != a2)
    {
      int v44 = v17;
      BOOL v43 = v41;
      if ((unint64_t)(v7 - 2) < 0x1E) {
        goto LABEL_51;
      }
      int v44 = v17;
      BOOL v43 = v41;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) + v6 - (unint64_t)&v42[v7 & 0xFFFFFFFFFFFFFFFELL] < 0x20) {
        goto LABEL_51;
      }
      unint64_t v45 = ((unint64_t)(v7 - 2) >> 1) + 1;
      unint64_t v46 = 2 * (v45 & 0xFFFFFFFFFFFFFFF0);
      int v44 = &v17[-v46];
      BOOL v43 = &v41[-v46];
      uint64_t v47 = 2 * (v7 >> 1) - 16;
      std::error_code v48 = &v42[v47];
      uint64_t v49 = (long long *)(v6 + v47);
      unint64_t v50 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v51 = *v49;
        *((_OWORD *)v48 - 1) = *(v49 - 1);
        *(_OWORD *)std::error_code v48 = v51;
        v48 -= 32;
        v49 -= 2;
        v50 -= 16;
      }
      while (v50);
      if (v45 != (v45 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_51:
        do
        {
          __int16 v52 = *((_WORD *)v44 - 1);
          v44 -= 2;
          *((_WORD *)v43 - 1) = v52;
          v43 -= 2;
        }
        while (v44 != (char *)v6);
      }
    }
    char v53 = &v42[2 * v16];
    size_t v54 = v13 - (void)v17;
    if (v54) {
      memmove(&v41[v59], v17, v54);
    }
    *a1 = (unint64_t)v43;
    a1[1] = (unint64_t)&v41[v59 + v54];
    a1[2] = (unint64_t)v53;
    if (v6) {
      operator delete((void *)v6);
    }
    return v41;
  }
  uint64_t v19 = v13 - (void)v8;
  uint64_t v20 = (uint64_t)(v13 - (void)v8) >> 1;
  if (v20 >= a5)
  {
    unint64_t v21 = &__src[2 * a5];
    unint64_t v23 = a1[1];
  }
  else
  {
    unint64_t v21 = &__src[2 * v20];
    int64_t v22 = a4 - v21;
    if (a4 != v21)
    {
      unint64_t v58 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFELL);
      memmove((void *)a1[1], &__src[2 * v20], a4 - v21);
      unint64_t v8 = (char *)v58;
    }
    unint64_t v23 = v13 + v22;
    a1[1] = v13 + v22;
    if (v19 < 1) {
      return v8;
    }
  }
  uint64_t v24 = &v8[2 * a5];
  size_t v25 = v23 - (void)v24;
  uint64_t v26 = (uint64_t)(v23 - (void)v24) >> 1;
  uint64_t v27 = (__int16 *)(v23 - 2 * a5);
  size_t v28 = (_WORD *)v23;
  if ((unint64_t)v27 < v13)
  {
    unint64_t v29 = (v7 & 0xFFFFFFFFFFFFFFFELL) + v25;
    long long v30 = (char *)(v29 + v6);
    unint64_t v31 = v29 + v6 + 2;
    if (v13 > v31) {
      unint64_t v31 = v13;
    }
    unint64_t v32 = v31 + ~v6 - v29;
    if (v32 < 0x1E)
    {
      size_t v28 = (_WORD *)v23;
    }
    else
    {
      unint64_t v33 = v23 - (void)v30;
      size_t v28 = (_WORD *)v23;
      if (v33 >= 0x20)
      {
        uint64_t v34 = (v32 >> 1) + 1;
        unint64_t v35 = 2 * (v34 & 0xFFFFFFFFFFFFFFF0);
        uint64_t v27 = (__int16 *)((char *)v27 + v35);
        size_t v28 = (_WORD *)(v23 + v35);
        uint64_t v36 = (_OWORD *)(v23 + 16);
        int v37 = (long long *)(2 * v26 + 2 * (v7 >> 1) + v6 + 16);
        unint64_t v38 = v34 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v39 = *v37;
          *(v36 - 1) = *(v37 - 1);
          *uint64_t v36 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 16;
        }
        while (v38);
        if (v34 == (v34 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_41;
        }
      }
    }
    do
    {
      __int16 v55 = *v27++;
      *v28++ = v55;
    }
    while ((unint64_t)v27 < v13);
  }
LABEL_41:
  a1[1] = (unint64_t)v28;
  if ((char *)v23 != v24)
  {
    uint64_t v56 = v8;
    memmove((void *)(v23 - 2 * v26), v8, v25);
    unint64_t v8 = v56;
  }
  if (v21 != __src)
  {
    size_t v41 = v8;
    memmove(v8, __src, v21 - __src);
    return v41;
  }
  return v8;
}

llvm::CrashRecoveryContext *llvm::CrashRecoveryContext::CrashRecoveryContext(llvm::CrashRecoveryContext *this)
{
  *((_DWORD *)this + 5) = 0;
  *((unsigned char *)this + 24) = 0;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  return this;
}

void llvm::CrashRecoveryContext::~CrashRecoveryContext(llvm::CrashRecoveryContext *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v4 = *IsRecoveringFromCrash;
  uint64_t *IsRecoveringFromCrash = (uint64_t)this;
  if (v2)
  {
    do
    {
      uint64_t v5 = *(void *)(v2 + 32);
      *(unsigned char *)(v2 + 16) = 1;
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t *IsRecoveringFromCrash = v4;
  uint64_t v6 = *(void *)this;
  if (*(void *)this)
  {
    if ((*(unsigned char *)(v6 + 208) & 2) == 0)
    {
      *uint64_t v7 = v8;
    }
    if (*(char *)(v6 + 239) < 0) {
      operator delete(*(void **)(v6 + 216));
    }
    operator delete((void *)v6);
  }
}

void llvm::CrashRecoveryContext::Enable(llvm::CrashRecoveryContext *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1EB215C50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_1EB215C50))
  {
    __cxa_guard_release(qword_1EB215C50);
  }
  if ((_MergedGlobals_46 & 1) == 0)
  {
    _MergedGlobals_46 = 1;
    v1.__sigaction_u.__sa_handler = (void (__cdecl *)(int))CrashRecoverySignalHandler;
    *(void *)&v1.sa_masuint64_t k = 0;
    sigaction(6, &v1, (sigaction *)&qword_1EB215C50[1]);
    sigaction(10, &v1, (sigaction *)&qword_1EB215C50[3]);
    sigaction(8, &v1, (sigaction *)&qword_1EB215C50[5]);
    sigaction(4, &v1, (sigaction *)&qword_1EB215C50[7]);
    sigaction(11, &v1, (sigaction *)&qword_1EB215C50[9]);
    sigaction(5, &v1, (sigaction *)&qword_1EB215C50[11]);
  }
}

void llvm::CrashRecoveryContext::Disable(llvm::CrashRecoveryContext *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1EB215C50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_1EB215C50))
  {
    __cxa_guard_release(qword_1EB215C50);
  }
  if (_MergedGlobals_46 == 1)
  {
    _MergedGlobals_46 = 0;
    sigaction(6, (const sigaction *)&qword_1EB215C50[1], 0);
    sigaction(10, (const sigaction *)&qword_1EB215C50[3], 0);
    sigaction(8, (const sigaction *)&qword_1EB215C50[5], 0);
    sigaction(4, (const sigaction *)&qword_1EB215C50[7], 0);
    sigaction(11, (const sigaction *)&qword_1EB215C50[9], 0);
    sigaction(5, (const sigaction *)&qword_1EB215C50[11], 0);
  }
}

uint64_t llvm::CrashRecoveryContext::RunSafely(void *a1, void (*a2)(uint64_t), uint64_t a3)
{
  if (_MergedGlobals_46 == 1)
  {
    uint64_t v6 = operator new(0xF0uLL);
    v6[1] = a1;
    char v7 = *((unsigned char *)v6 + 208);
    *((unsigned char *)v6 + 208) = v7 & 0xFE;
    *((unsigned char *)v6 + 208) = v7 & 0xF0;
    v6[28] = 0;
    v6[29] = 0;
    v6[27] = 0;
    *(void *)uint64_t v9 = *v8;
    *uint64_t v8 = v9;
    *a1 = v9;
    *(unsigned char *)(v9 + 208) |= 8u;
    if (setjmp((int *)(v9 + 16))) {
      return 0;
    }
  }
  a2(a3);
  return 1;
}

__int32 *anonymous namespace'::CrashRecoveryContextImpl::HandleCrash(_anonymous_namespace_::CrashRecoveryContextImpl *this, int a2, llvm::sys *a3)
{
  if ((*((unsigned char *)this + 208) & 4) != 0)
  {
    int v10 = 0;
    char v14 = 0;
    uint64_t v15 = 0;
    int v16 = 1;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    uint64_t v9 = &unk_1EC9A38B8;
    BOOL v17 = (char *)this + 216;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v9, 0, 0, 0);
    llvm::sys::PrintStackTrace((llvm::sys *)&v9, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v9);
  }
  *(void *)double result = v7;
  *((unsigned char *)this + 208) |= 1u;
  uint64_t v8 = *((void *)this + 1);
  if (*(unsigned char *)(v8 + 24))
  {
    double result = llvm::sys::CleanupOnSignal(a3);
    uint64_t v8 = *((void *)this + 1);
  }
  *(_DWORD *)(v8 + 20) = a2;
  if ((*((unsigned char *)this + 208) & 8) != 0) {
    longjmp((int *)this + 4, 1);
  }
  return result;
}

uint64_t llvm::CrashRecoveryContext::RunSafelyOnThread(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6 = a4 != 0;
  v14[0] = a2;
  v14[1] = a3;
  void v14[2] = a1;
  BOOL v15 = getpriority(3, 0) == 1;
  unsigned __int8 v16 = 0;
  uint64_t v7 = a4 | (unint64_t)(v6 << 32);
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = RunSafelyOnThread_Dispatch;
  v8[1] = v14;
  if (!v9)
  {
    operator delete(v8);
    llvm::llvm_thread_join_impl(0, v13);
    uint64_t v11 = *a1;
    if (!*a1) {
      return v16;
    }
    goto LABEL_3;
  }
  llvm::llvm_thread_join_impl(v9, v10);
  uint64_t v11 = *a1;
  if (*a1) {
LABEL_3:
  }
    *(unsigned char *)(v11 + 208) |= 2u;
  return v16;
}

uint64_t RunSafelyOnThread_Dispatch(void *a1)
{
  if (*((unsigned char *)a1 + 24)) {
    setpriority(3, 0, 4096);
  }
  uint64_t result = llvm::CrashRecoveryContext::RunSafely(*((void **)a1 + 2), *(void (**)(uint64_t))a1, *((void *)a1 + 1));
  *((unsigned char *)a1 + 25) = result;
  return result;
}

__int32 *CrashRecoverySignalHandler(int a1)
{
  uint64_t v3 = *(_anonymous_namespace_::CrashRecoveryContextImpl **)v2;
  if (*(void *)v2)
  {
    sigset_t v4 = 1 << (a1 - 1);
    if (a1 > 32) {
      sigset_t v4 = 0;
    }
    sigset_t v7 = v4;
    sigprocmask(2, &v7, 0);
    if (a1 == 13) {
      int v5 = 74;
    }
    else {
      int v5 = a1 + 128;
    }
  }
  else
  {
    llvm::CrashRecoveryContext::Disable(v2);
    return (__int32 *)raise(a1);
  }
}

uint64_t llvm::thread::ThreadProxy<std::tuple<void (*)(void *),anonymous namespace'::RunSafelyOnThreadInfo *>>(void *a1)
{
  return 0;
}

void llvm::initDebugCounterOptions(llvm *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_47, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&_MergedGlobals_47))
    {
      qword_1EB215CC8 = 0;
      dword_1EB215CD0 = 0;
      qword_1EB215CC0 = 0;
      qword_1EB215CE8 = 0;
      qword_1EB215CF0 = 0;
      qword_1EB215CE0 = 0;
      qword_1EB215CD8 = (uint64_t)&qword_1EB215CE0;
      qword_1EB215CF8 = 0;
      unk_1EB215D00 = 0;
      byte_1EB215D08 = 0;
      int v6 = 1;
      *(void *)&long long v5 = "Comma separated list of debug counter skip and count";
      *((void *)&v5 + 1) = 52;
      int v4 = 1;
      uint64_t v3 = &qword_1EB215CC0;
      llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::list<char [14],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>((uint64_t)&qword_1EB215D10, (int8x16_t *)"debug-counter", &v6, &v5, &v4, &v3);
      qword_1EB215D10 = (uint64_t)&unk_1EC998030;
      int v6 = 1;
      char v2 = 0;
      uint64_t v3 = (uint64_t *)&v2;
      int v4 = 0;
      *(void *)&long long v5 = "Print out debug counter info after all counters accumulated";
      *((void *)&v5 + 1) = 59;
      sigaction v1 = (llvm *)llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::NumOccurrencesFlag,llvm::cl::desc>((uint64_t)&unk_1EB215DF8, (int8x16_t *)"print-debug-counter", &v6, (unsigned char **)&v3, &v4, &v5);
      llvm::dbgs(v1);
      __cxa_guard_release(&_MergedGlobals_47);
    }
  }
}

void anonymous namespace'::DebugCounterOwner::~DebugCounterOwner(_anonymous_namespace_::DebugCounterOwner *this)
{
  *((void *)this + 39) = &unk_1EC9A3F00;
  char v2 = (char *)this + 472;
  uint64_t v3 = (char *)*((void *)this + 62);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    *((void *)this + 39) = &unk_1EC9A42A8;
    int v4 = (void *)*((void *)this + 51);
    if (v4 != *((void **)this + 50)) {
LABEL_5:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    *((void *)this + 39) = &unk_1EC9A42A8;
    int v4 = (void *)*((void *)this + 51);
    if (v4 != *((void **)this + 50)) {
      goto LABEL_5;
    }
  }
  long long v5 = (char *)*((void *)this + 47);
  if (v5 != (char *)this + 392) {
    free(v5);
  }
  llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list((void *)this + 10);
  uint64_t v6 = *((void *)this + 6);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 7);
    uint64_t v8 = (void *)*((void *)this + 6);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v6;
    operator delete(v8);
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  uint64_t v9 = *((unsigned int *)this + 4);
  int v10 = *(llvm **)this;
  if (v9)
  {
    uint64_t v11 = (char *)v10 + 40;
    uint64_t v12 = v9 << 6;
    do
    {
      if (*((_DWORD *)v11 - 10) <= 0xFFFFFFFD && v11[23] < 0) {
        operator delete(*(void **)v11);
      }
      v11 += 64;
      v12 -= 64;
    }
    while (v12);
    int v10 = *(llvm **)this;
    uint64_t v13 = (void *)((unint64_t)*((unsigned int *)this + 4) << 6);
  }
  else
  {
    uint64_t v13 = 0;
  }
  llvm::deallocate_buffer(v10, v13);
}

uint64_t sub_180C80F84()
{
  return v0;
}

llvm::raw_ostream *llvm::DebugCounter::push_back(llvm::raw_ostream *result, void **a2)
{
  unint64_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    unint64_t v2 = (unint64_t)a2[1];
  }
  if (v2)
  {
    uint64_t v5 = (uint64_t)result;
    if (v3 >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *a2;
    }
    std::string __p = v6;
    unint64_t v72 = v2;
    LOBYTE(v74) = 61;
    uint64_t v7 = (llvm *)llvm::StringRef::find((uint64_t *)&__p, (char *)&v74, 1uLL, 0);
    if (v7 != (llvm *)-1)
    {
      size_t v8 = (unint64_t)v7 >= v72 ? v72 : (size_t)v7;
      uint64_t v9 = v72 >= (unint64_t)v7 + 1 ? (uint64_t)v7 + 1 : v72;
      if (v72 > (unint64_t)v7 + 1)
      {
        size_t v10 = v72 - v9;
        uint64_t v11 = (char *)__p;
        uint64_t v12 = (char *)__p + v9;
        std::string __p = 0;
        uint64_t AsSignedInteger = (llvm *)llvm::getAsSignedInteger(v12, v72 - v9, 0, (unint64_t *)&__p);
        if (AsSignedInteger)
        {
          char v14 = (llvm::raw_ostream *)llvm::errs(AsSignedInteger);
          BOOL v15 = v14;
          uint64_t v16 = *((void *)v14 + 4);
          if ((unint64_t)(*((void *)v14 + 3) - v16) > 0x13)
          {
            *(_DWORD *)(v16 + 16) = 540701295;
            *(_OWORD *)uint64_t v16 = *(_OWORD *)"DebugCounter Error: ";
            BOOL v17 = (void *)(*((void *)v14 + 4) + 20);
            *((void *)v15 + 4) = v17;
            if (v10 <= *((void *)v15 + 3) - (void)v17)
            {
LABEL_18:
              uint64_t result = (llvm::raw_ostream *)memcpy(v17, v12, v10);
              uint64_t v18 = *((void *)v15 + 3);
              size_t v19 = *((void *)v15 + 4) + v10;
              *((void *)v15 + 4) = v19;
              if (v18 - v19 > 0x10)
              {
LABEL_19:
                *(unsigned char *)(v19 + 16) = 10;
                *(_OWORD *)size_t v19 = *(_OWORD *)" is not a number\n";
                uint64_t v20 = *((void *)v15 + 4) + 17;
LABEL_56:
                *((void *)v15 + 4) = v20;
                return result;
              }
              goto LABEL_51;
            }
          }
          else
          {
            BOOL v15 = llvm::raw_ostream::write(v14, "DebugCounter Error: ", 0x14uLL);
            BOOL v17 = (void *)*((void *)v15 + 4);
            if (v10 <= *((void *)v15 + 3) - (void)v17) {
              goto LABEL_18;
            }
          }
          uint64_t result = llvm::raw_ostream::write(v15, v12, v10);
          BOOL v15 = result;
          size_t v19 = *((void *)result + 4);
          if (*((void *)result + 3) - v19 > 0x10) {
            goto LABEL_19;
          }
LABEL_51:
          unint64_t v35 = " is not a number\n";
          uint64_t v36 = v15;
          size_t v37 = 17;
          return llvm::raw_ostream::write(v36, v35, v37);
        }
        if (v8 < 5)
        {
LABEL_43:
          unint64_t v33 = (llvm::raw_ostream *)llvm::errs(AsSignedInteger);
          BOOL v15 = v33;
          uint64_t v34 = *((void *)v33 + 4);
          if ((unint64_t)(*((void *)v33 + 3) - v34) > 0x13)
          {
            *(_DWORD *)(v34 + 16) = 540701295;
            *(_OWORD *)uint64_t v34 = *(_OWORD *)"DebugCounter Error: ";
            uint64_t result = (llvm::raw_ostream *)(*((void *)v33 + 4) + 20);
            *((void *)v15 + 4) = result;
            if (v8 <= *((void *)v15 + 3) - (void)result)
            {
LABEL_45:
              if (v8)
              {
                memcpy(result, v11, v8);
                uint64_t result = (llvm::raw_ostream *)(*((void *)v15 + 4) + v8);
                *((void *)v15 + 4) = result;
              }
              if (*((void *)v15 + 3) - (void)result <= 0x22uLL) {
                goto LABEL_48;
              }
              goto LABEL_55;
            }
          }
          else
          {
            BOOL v15 = llvm::raw_ostream::write(v33, "DebugCounter Error: ", 0x14uLL);
            uint64_t result = (llvm::raw_ostream *)*((void *)v15 + 4);
            if (v8 <= *((void *)v15 + 3) - (void)result) {
              goto LABEL_45;
            }
          }
          BOOL v15 = llvm::raw_ostream::write(v15, v11, v8);
          uint64_t result = (llvm::raw_ostream *)*((void *)v15 + 4);
          if (*((void *)v15 + 3) - (void)result <= 0x22uLL)
          {
LABEL_48:
            unint64_t v35 = " does not end with -skip or -count\n";
            uint64_t v36 = v15;
            size_t v37 = 35;
            return llvm::raw_ostream::write(v36, v35, v37);
          }
LABEL_55:
          qmemcpy(result, " does not end with -skip or -count\n", 35);
          uint64_t v20 = *((void *)v15 + 4) + 35;
          goto LABEL_56;
        }
        uint64_t v27 = __p;
        size_t v28 = &v11[v8];
        if (*(_DWORD *)&v11[v8 - 5] != 1768649517 || v11[v8 - 1] != 112)
        {
          if (v8 < 6) {
            goto LABEL_43;
          }
          int v30 = *(_DWORD *)(v28 - 6);
          int v31 = *((unsigned __int16 *)v28 - 1);
          if (v30 != 1970234157 || v31 != 29806) {
            goto LABEL_43;
          }
          if (v8 >= v8 - 6) {
            v8 -= 6;
          }
          if (v8 <= 0x7FFFFFFFFFFFFFF7)
          {
            if (v8 >= 0x17)
            {
              uint64_t v55 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v8 | 7) != 0x17) {
                uint64_t v55 = v8 | 7;
              }
              uint64_t v56 = v55 + 1;
              p_p = operator new(v55 + 1);
              unint64_t v72 = v8;
              unint64_t v73 = v56 | 0x8000000000000000;
              std::string __p = p_p;
            }
            else
            {
              HIBYTE(v73) = v8;
              p_p = &__p;
              if (!v8)
              {
LABEL_104:
                *((unsigned char *)p_p + v8) = 0;
                size_t v57 = (llvm *)llvm::UniqueVector<std::string>::idFor(v5 + 24, (uint64_t)&__p);
                int v58 = (int)v57;
                if (SHIBYTE(v73) < 0) {
                  operator delete(__p);
                }
                int v74 = v58;
                if (!v58)
                {
                  BOOL v67 = (llvm::raw_ostream *)llvm::errs(v57);
                  int v68 = llvm::raw_ostream::operator<<(v67, "DebugCounter Error: ");
                  size_t v69 = llvm::raw_ostream::operator<<(v68, v11, v8);
                  return llvm::raw_ostream::operator<<(v69, " is not a registered counter\n");
                }
                llvm::DebugCounter::enableAllCounters(v57);
                int v59 = *(_DWORD *)(v5 + 16);
                if (v59)
                {
                  unsigned int v60 = v59 - 1;
                  uint64_t v61 = (37 * v58) & v60;
                  uint64_t result = (llvm::raw_ostream *)(*(void *)v5 + (v61 << 6));
                  int v62 = *(_DWORD *)result;
                  if (v58 == *(_DWORD *)result)
                  {
LABEL_121:
                    *((void *)result + 3) = v27;
                    goto LABEL_122;
                  }
                  uint64_t v63 = 0;
                  int v64 = 1;
                  while (v62 != -1)
                  {
                    if (v63) {
                      BOOL v65 = 0;
                    }
                    else {
                      BOOL v65 = v62 == -2;
                    }
                    if (v65) {
                      uint64_t v63 = (int *)result;
                    }
                    int v66 = v61 + v64++;
                    uint64_t v61 = v66 & v60;
                    uint64_t result = (llvm::raw_ostream *)(*(void *)v5 + (v61 << 6));
                    int v62 = *(_DWORD *)result;
                    if (v58 == *(_DWORD *)result) {
                      goto LABEL_121;
                    }
                  }
                  if (v63) {
                    uint64_t v70 = v63;
                  }
                  else {
                    uint64_t v70 = (int *)result;
                  }
                }
                else
                {
                  uint64_t v70 = 0;
                }
                uint64_t result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::InsertIntoBucket<unsigned int const&>(v5, v70, &v74);
                goto LABEL_121;
              }
            }
            memmove(p_p, v11, v8);
            goto LABEL_104;
          }
LABEL_129:
          abort();
        }
        if (v8 >= v8 - 5) {
          v8 -= 5;
        }
        if (v8 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_129;
        }
        if (v8 >= 0x17)
        {
          uint64_t v39 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v8 | 7) != 0x17) {
            uint64_t v39 = v8 | 7;
          }
          uint64_t v40 = v39 + 1;
          unint64_t v38 = operator new(v39 + 1);
          unint64_t v72 = v8;
          unint64_t v73 = v40 | 0x8000000000000000;
          std::string __p = v38;
        }
        else
        {
          HIBYTE(v73) = v8;
          unint64_t v38 = &__p;
          if (!v8)
          {
LABEL_67:
            *((unsigned char *)v38 + v8) = 0;
            size_t v41 = (llvm *)llvm::UniqueVector<std::string>::idFor(v5 + 24, (uint64_t)&__p);
            int v42 = (int)v41;
            if (SHIBYTE(v73) < 0) {
              operator delete(__p);
            }
            int v74 = v42;
            if (!v42)
            {
              long long v51 = (llvm::raw_ostream *)llvm::errs(v41);
              BOOL v15 = v51;
              uint64_t v52 = *((void *)v51 + 4);
              if ((unint64_t)(*((void *)v51 + 3) - v52) > 0x13)
              {
                *(_DWORD *)(v52 + 16) = 540701295;
                *(_OWORD *)uint64_t v52 = *(_OWORD *)"DebugCounter Error: ";
                uint64_t result = (llvm::raw_ostream *)(*((void *)v51 + 4) + 20);
                *((void *)v15 + 4) = result;
              }
              else
              {
                BOOL v15 = llvm::raw_ostream::write(v51, "DebugCounter Error: ", 0x14uLL);
                uint64_t result = (llvm::raw_ostream *)*((void *)v15 + 4);
              }
              if (v8 <= *((void *)v15 + 3) - (void)result)
              {
                if (v8)
                {
                  memcpy(result, v11, v8);
                  uint64_t result = (llvm::raw_ostream *)(*((void *)v15 + 4) + v8);
                  *((void *)v15 + 4) = result;
                }
              }
              else
              {
                BOOL v15 = llvm::raw_ostream::write(v15, v11, v8);
                uint64_t result = (llvm::raw_ostream *)*((void *)v15 + 4);
              }
              if (*((void *)v15 + 3) - (void)result > 0x1CuLL)
              {
                qmemcpy(result, " is not a registered counter\n", 29);
                uint64_t v20 = *((void *)v15 + 4) + 29;
                goto LABEL_56;
              }
              unint64_t v35 = " is not a registered counter\n";
              uint64_t v36 = v15;
              size_t v37 = 29;
              return llvm::raw_ostream::write(v36, v35, v37);
            }
            llvm::DebugCounter::enableAllCounters(v41);
            int v43 = *(_DWORD *)(v5 + 16);
            if (v43)
            {
              unsigned int v44 = v43 - 1;
              uint64_t v45 = (37 * v42) & v44;
              uint64_t result = (llvm::raw_ostream *)(*(void *)v5 + (v45 << 6));
              int v46 = *(_DWORD *)result;
              if (v42 == *(_DWORD *)result)
              {
LABEL_91:
                *((void *)result + 2) = v27;
LABEL_122:
                *((unsigned char *)result + 32) = 1;
                return result;
              }
              uint64_t v47 = 0;
              int v48 = 1;
              while (v46 != -1)
              {
                if (v47) {
                  BOOL v49 = 0;
                }
                else {
                  BOOL v49 = v46 == -2;
                }
                if (v49) {
                  uint64_t v47 = (int *)result;
                }
                int v50 = v45 + v48++;
                uint64_t v45 = v50 & v44;
                uint64_t result = (llvm::raw_ostream *)(*(void *)v5 + (v45 << 6));
                int v46 = *(_DWORD *)result;
                if (v42 == *(_DWORD *)result) {
                  goto LABEL_91;
                }
              }
              if (v47) {
                size_t v54 = v47;
              }
              else {
                size_t v54 = (int *)result;
              }
            }
            else
            {
              size_t v54 = 0;
            }
            uint64_t result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::InsertIntoBucket<unsigned int const&>(v5, v54, &v74);
            goto LABEL_91;
          }
        }
        memmove(v38, v11, v8);
        goto LABEL_67;
      }
    }
    unint64_t v21 = (llvm::raw_ostream *)llvm::errs(v7);
    uint64_t v22 = *((void *)v21 + 4);
    if ((unint64_t)(*((void *)v21 + 3) - v22) > 0x13)
    {
      *(_DWORD *)(v22 + 16) = 540701295;
      *(_OWORD *)uint64_t v22 = *(_OWORD *)"DebugCounter Error: ";
      *((void *)v21 + 4) += 20;
    }
    else
    {
      unint64_t v21 = llvm::raw_ostream::write(v21, "DebugCounter Error: ", 0x14uLL);
    }
    int v23 = *((char *)a2 + 23);
    if (v23 >= 0) {
      uint64_t v24 = (const char *)a2;
    }
    else {
      uint64_t v24 = (const char *)*a2;
    }
    if (v23 >= 0) {
      size_t v25 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v25 = (size_t)a2[1];
    }
    uint64_t result = llvm::raw_ostream::write(v21, v24, v25);
    uint64_t v26 = (void *)*((void *)result + 4);
    if (*((void *)result + 3) - (void)v26 > 0x19uLL)
    {
      qmemcpy(v26, " does not have auint64_t n = in it\n", 26);
      *((void *)result + 4) += 26;
    }
    else
    {
      return llvm::raw_ostream::write(result, " does not have auint64_t n = in it\n", 0x1AuLL);
    }
  }
  return result;
}

void llvm::DebugCounter::enableAllCounters(llvm::DebugCounter *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_47, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_47))
  {
    qword_1EB215CC8 = 0;
    dword_1EB215CD0 = 0;
    qword_1EB215CC0 = 0;
    qword_1EB215CE8 = 0;
    qword_1EB215CF0 = 0;
    qword_1EB215CE0 = 0;
    qword_1EB215CD8 = (uint64_t)&qword_1EB215CE0;
    qword_1EB215CF8 = 0;
    unk_1EB215D00 = 0;
    byte_1EB215D08 = 0;
    int v6 = 1;
    *(void *)&long long v5 = "Comma separated list of debug counter skip and count";
    *((void *)&v5 + 1) = 52;
    int v4 = 1;
    int v3 = &qword_1EB215CC0;
    llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::list<char [14],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>((uint64_t)&qword_1EB215D10, (int8x16_t *)"debug-counter", &v6, &v5, &v4, &v3);
    qword_1EB215D10 = (uint64_t)&unk_1EC998030;
    int v6 = 1;
    char v2 = 0;
    int v3 = (uint64_t *)&v2;
    int v4 = 0;
    *(void *)&long long v5 = "Print out debug counter info after all counters accumulated";
    *((void *)&v5 + 1) = 59;
    sigaction v1 = (llvm *)llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::NumOccurrencesFlag,llvm::cl::desc>((uint64_t)&unk_1EB215DF8, (int8x16_t *)"print-debug-counter", &v6, (unsigned char **)&v3, &v4, &v5);
    llvm::dbgs(v1);
    __cxa_guard_release(&_MergedGlobals_47);
  }
  byte_1EB215D08 = 1;
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::list<char [14],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>(uint64_t a1, int8x16_t *a2, _WORD *a3, _OWORD *a4, _WORD *a5, void *a6)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 10) & 0x8000 | 1;
  uint64_t v12 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v15) = GeneralCategory;
  int v16 = *(_DWORD *)(a1 + 72) + 1;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)a1 = &unk_1EC9A4170;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 192) = &unk_1EC9A4410;
  *(void *)(a1 + 200) = &unk_1EC9CE850;
  *(void *)(a1 + 224) = a1 + 200;
  BOOL v17 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v17);
  __int16 v19 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a3 & 3));
  *(_WORD *)(a1 + 10) = v19;
  *(_OWORD *)(a1 + 32) = *a4;
  *(_WORD *)(a1 + 10) = ((*a5 & 0x1F) << 9) | v19;
  if (*(void *)(a1 + 128))
  {
    uint64_t v22 = "cl::location(x) specified more than once!";
    __int16 v23 = 259;
    uint64_t v20 = (llvm::raw_ostream *)llvm::errs(v18);
    llvm::cl::Option::error((void *)a1, (llvm::Twine *)&v22, 0, 0, v20);
  }
  else
  {
    *(void *)(a1 + 128) = *a6;
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, int a2, int a3, int a4, void *__src, size_t __len)
{
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v37 = 0;
  if (*(unsigned char *)(a1 + 160))
  {
    *(void *)(a1 + 176) = *(void *)(a1 + 168);
    *(unsigned char *)(a1 + 160) = 0;
  }
  if (!__src)
  {
    long long __dst = 0uLL;
    unint64_t v39 = 0;
    goto LABEL_15;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_40;
  }
  if (__len >= 0x17)
  {
    size_t v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v11 = __len | 7;
    }
    size_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = __len;
    unint64_t v39 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_13:
    memmove(p_dst, __src, __len);
    *((unsigned char *)p_dst + __len) = 0;
    if ((SHIBYTE(v37) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  HIBYTE(v39) = __len;
  p_dst = &__dst;
  if (__len) {
    goto LABEL_13;
  }
  LOBYTE(__dst) = 0;
  if ((SHIBYTE(v37) & 0x80000000) == 0) {
    goto LABEL_15;
  }
LABEL_14:
  operator delete(__p[0]);
LABEL_15:
  *(_OWORD *)std::string __p = __dst;
  unint64_t v37 = v39;
  llvm::DebugCounter::push_back(*(llvm::raw_ostream **)(a1 + 128), __p);
  *(_WORD *)(a1 + 12) = a2;
  char v14 = *(char **)(a1 + 176);
  unint64_t v13 = *(void *)(a1 + 184);
  if ((unint64_t)v14 < v13)
  {
    *(_DWORD *)char v14 = a2;
    uint64_t v15 = (uint64_t)(v14 + 4);
    goto LABEL_36;
  }
  int v16 = *(char **)(a1 + 168);
  uint64_t v17 = (v14 - v16) >> 2;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 62) {
LABEL_40:
  }
    abort();
  uint64_t v19 = v13 - (void)v16;
  if (v19 >> 1 > v18) {
    unint64_t v18 = v19 >> 1;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 62) {
      goto LABEL_42;
    }
    unint64_t v21 = operator new(4 * v20);
    uint64_t v22 = &v21[4 * v17];
    __int16 v23 = &v21[4 * v20];
    _DWORD *v22 = a2;
    uint64_t v15 = (uint64_t)(v22 + 1);
    int64_t v24 = v14 - v16;
    if (v14 == v16) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  unint64_t v21 = 0;
  uint64_t v22 = (_DWORD *)(4 * v17);
  __int16 v23 = 0;
  *(_DWORD *)(4 * v17) = a2;
  uint64_t v15 = 4 * v17 + 4;
  int64_t v24 = v14 - v16;
  if (v14 != v16)
  {
LABEL_28:
    unint64_t v25 = v24 - 4;
    if (v25 < 0x2C) {
      goto LABEL_45;
    }
    if ((unint64_t)(v16 - v21) < 0x20) {
      goto LABEL_45;
    }
    uint64_t v26 = (v25 >> 2) + 1;
    uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    size_t v28 = &v14[-v27];
    uint64_t v22 = (_DWORD *)((char *)v22 - v27);
    unint64_t v29 = &v21[4 * v17 - 16];
    int v30 = v14 - 16;
    uint64_t v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      _OWORD *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    char v14 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_45:
      do
      {
        int v33 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--uint64_t v22 = v33;
      }
      while (v14 != v16);
    }
  }
LABEL_34:
  *(void *)(a1 + 168) = v22;
  *(void *)(a1 + 176) = v15;
  *(void *)(a1 + 184) = v23;
  if (v16) {
    operator delete(v16);
  }
LABEL_36:
  *(void *)(a1 + 176) = v15;
  uint64_t v34 = *(void *)(a1 + 224);
  if (!v34)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_42:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v34 + 48))(v34, __p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

void anonymous namespace'::DebugCounterList::~DebugCounterList(_anonymous_namespace_::DebugCounterList *this)
{
  sigaction v1 = llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list(this);

  operator delete(v1);
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 192, a1);
}

void anonymous namespace'::DebugCounterList::printOptionInfo(_anonymous_namespace_::DebugCounterList *this, unsigned int a2)
{
  int v4 = (llvm::raw_ostream *)llvm::outs(this);
  long long v5 = v4;
  uint64_t v6 = *((void *)v4 + 4);
  if ((unint64_t)(*((void *)v4 + 3) - v6) <= 2)
  {
    long long v5 = llvm::raw_ostream::write(v4, "  -", 3uLL);
    uint64_t v7 = (void *)*((void *)v5 + 4);
    size_t v8 = (const char *)*((void *)this + 2);
    size_t v9 = *((void *)this + 3);
    if (v9 <= *((void *)v5 + 3) - (void)v7) {
      goto LABEL_3;
    }
LABEL_6:
    llvm::raw_ostream::write(v5, v8, v9);
    goto LABEL_7;
  }
  *(unsigned char *)(v6 + 2) = 45;
  *(_WORD *)uint64_t v6 = 8224;
  uint64_t v7 = (void *)(*((void *)v4 + 4) + 3);
  *((void *)v5 + 4) = v7;
  size_t v8 = (const char *)*((void *)this + 2);
  size_t v9 = *((void *)this + 3);
  if (v9 > *((void *)v5 + 3) - (void)v7) {
    goto LABEL_6;
  }
LABEL_3:
  if (v9)
  {
    memcpy(v7, v8, v9);
    *((void *)v5 + 4) += v9;
  }
LABEL_7:
  llvm::cl::Option::printHelpStr(*((void *)this + 4), *((void *)this + 5), a2, *((void *)this + 3) + 6);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_47, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_47))
  {
    qword_1EB215CC8 = 0;
    dword_1EB215CD0 = 0;
    qword_1EB215CC0 = 0;
    qword_1EB215CE8 = 0;
    qword_1EB215CF0 = 0;
    qword_1EB215CE0 = 0;
    qword_1EB215CD8 = (uint64_t)&qword_1EB215CE0;
    qword_1EB215CF8 = 0;
    unk_1EB215D00 = 0;
    byte_1EB215D08 = 0;
    int v34 = 1;
    int v35 = 1;
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)"Comma separated list of debug counter skip and count";
    v29.__r_.__value_.__l.__size_ = 52;
    int v33 = &qword_1EB215CC0;
    llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::list<char [14],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>((uint64_t)&qword_1EB215D10, (int8x16_t *)"debug-counter", &v35, &v29, &v34, &v33);
    qword_1EB215D10 = (uint64_t)&unk_1EC998030;
    int v34 = 0;
    int v35 = 1;
    char v32 = 0;
    int v33 = (uint64_t *)&v32;
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)"Print out debug counter info after all counters accumulated";
    v29.__r_.__value_.__l.__size_ = 59;
    size_t v28 = (llvm *)llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::NumOccurrencesFlag,llvm::cl::desc>((uint64_t)&unk_1EB215DF8, (int8x16_t *)"print-debug-counter", &v35, (unsigned char **)&v33, &v34, &v29);
    llvm::dbgs(v28);
    __cxa_guard_release(&_MergedGlobals_47);
  }
  uint64_t v10 = qword_1EB215CF0;
  uint64_t v11 = qword_1EB215CF8;
  while (v10 != v11)
  {
    int v12 = llvm::UniqueVector<std::string>::idFor((uint64_t)&qword_1EB215CD8, v10);
    llvm::DebugCounter::getCounterInfo((llvm::DebugCounter *)&qword_1EB215CC0, v12, &v29);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v14 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    }
    else {
      int v14 = v29.__r_.__value_.__r.__words[1];
    }
    uint64_t v15 = (llvm::raw_ostream *)llvm::outs(v13);
    uint64_t v16 = *((void *)v15 + 4);
    if ((unint64_t)(*((void *)v15 + 3) - v16) > 4)
    {
      *(unsigned char *)(v16 + 4) = 61;
      *(_DWORD *)uint64_t v16 = 538976288;
      *((void *)v15 + 4) += 5;
    }
    else
    {
      uint64_t v15 = llvm::raw_ostream::write(v15, "    =", 5uLL);
    }
    int v17 = a2 - v14;
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v18 = &v29;
    }
    else {
      unint64_t v18 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v29.__r_.__value_.__l.__size_;
    }
    unint64_t v20 = llvm::raw_ostream::write(v15, (const char *)v18, size);
    unint64_t v21 = (llvm::raw_ostream *)llvm::outs(v20);
    uint64_t v22 = llvm::raw_ostream::indent(v21, v17 - 8);
    uint64_t v23 = *((void *)v22 + 4);
    if ((unint64_t)(*((void *)v22 + 3) - v23) > 4)
    {
      *(unsigned char *)(v23 + 4) = 32;
      *(_DWORD *)uint64_t v23 = 538979616;
      *((void *)v22 + 4) += 5;
    }
    else
    {
      uint64_t v22 = llvm::raw_ostream::write(v22, " -   ", 5uLL);
    }
    if ((v31 & 0x80u) == 0) {
      int64_t v24 = __p;
    }
    else {
      int64_t v24 = (void **)__p[0];
    }
    if ((v31 & 0x80u) == 0) {
      size_t v25 = v31;
    }
    else {
      size_t v25 = (size_t)__p[1];
    }
    uint64_t v26 = llvm::raw_ostream::write(v22, (const char *)v24, v25);
    uint64_t v27 = (unsigned char *)*((void *)v26 + 4);
    if ((unint64_t)v27 >= *((void *)v26 + 3))
    {
      llvm::raw_ostream::write(v26, 10);
      if ((char)v31 < 0) {
LABEL_36:
      }
        operator delete(__p[0]);
    }
    else
    {
      *((void *)v26 + 4) = v27 + 1;
      unsigned char *v27 = 10;
      if ((char)v31 < 0) {
        goto LABEL_36;
      }
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    v10 += 24;
  }
}

llvm::raw_ostream *llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::setDefault(llvm::raw_ostream *result)
{
  *((void *)result + 22) = *((void *)result + 21);
  uint64_t v1 = *((void *)result + 17);
  uint64_t v2 = *((void *)result + 18);
  if (v1 != v2)
  {
    int v3 = result;
    do
    {
      uint64_t result = llvm::DebugCounter::push_back(*((llvm::raw_ostream **)v3 + 16), (void **)(v1 + 8));
      v1 += 40;
    }
    while (v1 != v2);
  }
  return result;
}

void llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list(void *a1)
{
  uint64_t v1 = llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list(a1);

  operator delete(v1);
}

llvm::raw_ostream *llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 192), a1, a2);
}

void *std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EC9CE850;
  return result;
}

void std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CE850;
}

uint64_t std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181127BBELL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181127BBELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181127BBELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181127BBELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::target_type()
{
}

void *llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list(void *a1)
{
  *a1 = &unk_1EC9A4170;
  uint64_t v2 = a1 + 25;
  uint64_t v3 = (void *)a1[28];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    int v4 = (void *)a1[21];
    if (v4)
    {
LABEL_5:
      a1[22] = v4;
      operator delete(v4);
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    int v4 = (void *)a1[21];
    if (v4) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = a1[17];
  if (v5)
  {
    uint64_t v6 = a1[18];
    uint64_t v7 = (void *)a1[17];
    if (v6 != v5)
    {
      uint64_t v8 = v6 - 40;
      uint64_t v9 = a1[18];
      do
      {
        *(void *)(v9 - 40) = &unk_1EC9A3BA0;
        v9 -= 40;
        if (*(char *)(v9 + 31) < 0) {
          operator delete(*(void **)(v6 - 32));
        }
        v8 -= 40;
        uint64_t v6 = v9;
      }
      while (v9 != v5);
      uint64_t v7 = (void *)a1[17];
    }
    a1[18] = v5;
    operator delete(v7);
  }
  *a1 = &unk_1EC9A42A8;
  uint64_t v10 = (void *)a1[12];
  if (v10 != (void *)a1[11]) {
    free(v10);
  }
  uint64_t v11 = (void *)a1[8];
  if (v11 != a1 + 10) {
    free(v11);
  }
  return a1;
}

double llvm::DebugCounter::getCounterInfo@<D0>(llvm::DebugCounter *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 6) + 24 * (a2 - 1);
  int v5 = *((_DWORD *)this + 4);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)this;
  unsigned int v7 = v5 - 1;
  uint64_t v8 = (v5 - 1) & (37 * a2);
  int v9 = *(_DWORD *)(*(void *)this + (v8 << 6));
  if (v9 != a2)
  {
    int v13 = 1;
    while (v9 != -1)
    {
      int v14 = v8 + v13++;
      uint64_t v8 = v14 & v7;
      int v9 = *(_DWORD *)(v6 + ((unint64_t)v8 << 6));
      if (v9 == a2) {
        goto LABEL_3;
      }
    }
LABEL_12:
    memset(&v17, 0, sizeof(v17));
    if ((*(char *)(v4 + 23) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v10 = v6 + (v8 << 6);
  uint64_t v11 = (const std::string::value_type **)(v10 + 40);
  if ((*(char *)(v10 + 63) & 0x80000000) == 0)
  {
    long long v12 = *(_OWORD *)v11;
    v17.__r_.__value_.__r.__words[2] = *(void *)(v10 + 56);
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    if (*(char *)(v4 + 23) < 0) {
      goto LABEL_7;
    }
LABEL_13:
    long long v15 = *(_OWORD *)v4;
    a3->__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v15;
    goto LABEL_14;
  }
  std::string::__init_copy_ctor_external(&v17, *v11, *(void *)(v10 + 48));
  if ((*(char *)(v4 + 23) & 0x80000000) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
LABEL_14:
  double result = *(double *)&v17.__r_.__value_.__l.__data_;
  a3[1] = v17;
  return result;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::NumOccurrencesFlag,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _WORD *a3, unsigned char **a4, _WORD *a5, _OWORD *a6)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  long long v12 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = &unk_1EC9A3AE0;
  *(void *)(a1 + 144) = 0;
  *(void *)a1 = &unk_1EC9A3F00;
  *(void *)(a1 + 152) = &unk_1EC9A4440;
  *(void *)(a1 + 160) = &unk_1EC9CE680;
  *(void *)(a1 + 184) = a1 + 160;
  uint64_t v16 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v16);
  __int16 v17 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a3 & 3));
  *(_WORD *)(a1 + 10) = v17;
  unint64_t v18 = *a4;
  *(unsigned char *)(a1 + 128) = **a4;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v18;
  *(_WORD *)(a1 + 10) = v17 & 0xFFF8 | *a5 & 7;
  *(_OWORD *)(a1 + 32) = *a6;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

uint64_t llvm::UniqueVector<std::string>::idFor(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  int v4 = *(char *)(a2 + 23);
  size_t v5 = v4 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
  uint64_t v6 = v4 >= 0 ? (const void *)a2 : *(const void **)a2;
  uint64_t v7 = a1 + 8;
  do
  {
    int v8 = *(char *)(v3 + 55);
    if (v8 >= 0) {
      size_t v9 = *(unsigned __int8 *)(v3 + 55);
    }
    else {
      size_t v9 = *(void *)(v3 + 40);
    }
    if (v8 >= 0) {
      uint64_t v10 = (const void *)(v3 + 32);
    }
    else {
      uint64_t v10 = *(const void **)(v3 + 32);
    }
    if (v5 >= v9) {
      size_t v11 = v9;
    }
    else {
      size_t v11 = v5;
    }
    int v12 = memcmp(v10, v6, v11);
    BOOL v13 = v9 < v5;
    if (v12) {
      BOOL v13 = v12 < 0;
    }
    BOOL v14 = !v13;
    if (v13) {
      uint64_t v15 = (uint64_t *)(v3 + 8);
    }
    else {
      uint64_t v15 = (uint64_t *)v3;
    }
    if (v14) {
      uint64_t v7 = v3;
    }
    uint64_t v3 = *v15;
  }
  while (*v15);
  if (v7 == v2) {
    return 0;
  }
  int v16 = *(char *)(v7 + 55);
  size_t v17 = v16 >= 0 ? *(unsigned __int8 *)(v7 + 55) : *(void *)(v7 + 40);
  unint64_t v18 = v16 >= 0 ? (const void *)(v7 + 32) : *(const void **)(v7 + 32);
  size_t v19 = v17 >= v5 ? v5 : v17;
  int v20 = memcmp(v6, v18, v19);
  BOOL v21 = v5 >= v17;
  if (v20) {
    BOOL v21 = v20 >= 0;
  }
  if (v21) {
    return *(unsigned int *)(v7 + 56);
  }
  else {
    return 0;
  }
}

int *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::InsertIntoBucket<unsigned int const&>(uint64_t a1, int *a2, int *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::grow(a1, v7);
  int v9 = *(_DWORD *)(a1 + 16);
  if (v9)
  {
    unsigned int v10 = v9 - 1;
    uint64_t v11 = (37 * *a3) & (v9 - 1);
    a2 = (int *)(*(void *)a1 + (v11 << 6));
    int v12 = *a2;
    if (*a3 != *a2)
    {
      BOOL v13 = 0;
      int v14 = 1;
      while (v12 != -1)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -2;
        }
        if (v15) {
          BOOL v13 = a2;
        }
        int v16 = v11 + v14++;
        uint64_t v11 = v16 & v10;
        a2 = (int *)(*(void *)a1 + (v11 << 6));
        int v12 = *a2;
        if (*a3 == *a2) {
          goto LABEL_3;
        }
      }
      if (v13) {
        a2 = v13;
      }
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a2 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  *(_OWORD *)(a2 + 6) = 0u;
  *(_OWORD *)(a2 + 2) = 0u;
  *((void *)a2 + 3) = -1;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 5) = 0;
  return a2;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = llvm::allocate_buffer((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  unsigned int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0x3FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0x3FFFFFFFFFFFFFFLL) + 1;
      unsigned int v10 = &result[16 * (v12 & 0x7FFFFFFFFFFFFFELL)];
      BOOL v13 = result + 16;
      uint64_t v14 = v12 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 16) = -1;
        _DWORD *v13 = -1;
        v13 += 32;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x7FFFFFFFFFFFFFELL))
      {
LABEL_10:
        BOOL v15 = &result[16 * v11];
        do
        {
          *unsigned int v10 = -1;
          v10 += 16;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      int v16 = v4;
      do
      {
        int v17 = *(_DWORD *)v16;
        if (*(_DWORD *)v16 <= 0xFFFFFFFD)
        {
          int v18 = *(_DWORD *)(a1 + 16);
          if (v18)
          {
            unsigned int v19 = v18 - 1;
            uint64_t v20 = (v18 - 1) & (37 * v17);
            BOOL v21 = (int *)(*(void *)a1 + (v20 << 6));
            int v22 = *v21;
            if (v17 != *v21)
            {
              uint64_t v23 = 0;
              int v24 = 1;
              while (v22 != -1)
              {
                if (v23) {
                  BOOL v25 = 0;
                }
                else {
                  BOOL v25 = v22 == -2;
                }
                if (v25) {
                  uint64_t v23 = v21;
                }
                int v26 = v20 + v24++;
                uint64_t v20 = v26 & v19;
                BOOL v21 = (int *)(*(void *)a1 + (v20 << 6));
                int v22 = *v21;
                if (v17 == *v21) {
                  goto LABEL_28;
                }
              }
              if (v23) {
                BOOL v21 = v23;
              }
            }
          }
          else
          {
            BOOL v21 = 0;
          }
LABEL_28:
          *BOOL v21 = v17;
          long long v27 = *(_OWORD *)((char *)v16 + 8);
          *(_OWORD *)((char *)v21 + 17) = *(_OWORD *)((char *)v16 + 17);
          *(_OWORD *)(v21 + 2) = v27;
          long long v28 = *(_OWORD *)((char *)v16 + 40);
          *((void *)v21 + 7) = *((void *)v16 + 7);
          *(_OWORD *)(v21 + 10) = v28;
          *((void *)v16 + 6) = 0;
          *((void *)v16 + 7) = 0;
          *((void *)v16 + 5) = 0;
          ++*(_DWORD *)(a1 + 8);
          if (*((char *)v16 + 63) < 0) {
            operator delete(*((void **)v16 + 5));
          }
        }
        int v16 = (llvm *)((char *)v16 + 64);
      }
      while (v16 != (llvm *)((char *)v4 + 64 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(v3 << 6));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v29 = *(unsigned int *)(a1 + 16);
  if (v29)
  {
    if (((v29 - 1) & 0x3FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_41;
    }
    uint64_t v30 = ((v29 - 1) & 0x3FFFFFFFFFFFFFFLL) + 1;
    unsigned int v10 = &result[16 * (v30 & 0x7FFFFFFFFFFFFFELL)];
    unsigned __int8 v31 = result + 16;
    uint64_t v32 = v30 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      *(v31 - 16) = -1;
      *unsigned __int8 v31 = -1;
      v31 += 32;
      v32 -= 2;
    }
    while (v32);
    if (v30 != (v30 & 0x7FFFFFFFFFFFFFELL))
    {
LABEL_41:
      int v33 = &result[16 * v29];
      do
      {
        *unsigned int v10 = -1;
        v10 += 16;
      }
      while (v10 != v33);
    }
  }
  return result;
}

void llvm::toString(void **a1@<X0>, std::string *a2@<X8>, int64x2_t a3@<Q3>, int8x16_t a4@<Q5>)
{
  v54[6] = *MEMORY[0x1E4F143B8];
  uint64_t v52 = v54;
  uint64_t v53 = 0x200000000;
  unint64_t v5 = *a1;
  *a1 = 0;
  if (v5)
  {
    if ((*(unsigned int (**)(void *, void *))(*v5 + 48))(v5, &llvm::ErrorList::ID))
    {
      unint64_t v6 = (uint64_t **)v5[1];
      int v7 = (uint64_t **)v5[2];
      if (v6 != v7)
      {
        unsigned int v8 = 0;
        do
        {
          BOOL v49 = v8;
          int v9 = *v6;
          *unint64_t v6 = 0;
          if ((*(unsigned int (**)(uint64_t *, void *))(*v9 + 48))(v9, &llvm::ErrorInfoBase::ID))
          {
            (*(void (**)(void **__return_ptr, uint64_t *))(*v9 + 24))(__p, v9);
            Address = llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress((uint64_t)&v52, (unint64_t)__p, 1);
            uint64_t v11 = (char *)v52 + 24 * v53;
            long long v12 = *(_OWORD *)Address;
            *((void *)v11 + 2) = *((void *)Address + 2);
            *(_OWORD *)uint64_t v11 = v12;
            *((void *)Address + 1) = 0;
            *((void *)Address + 2) = 0;
            *(void *)Address = 0;
            LODWORD(v53) = v53 + 1;
            if (v51 < 0) {
              operator delete(__p[0]);
            }
            int v48 = 0;
            (*(void (**)(uint64_t *))(*v9 + 8))(v9);
          }
          else
          {
            int v48 = v9;
          }
          llvm::ErrorList::join((uint64_t *)&v49, &v48, __p);
          unsigned int v8 = __p[0];
          __p[0] = 0;
          if (v48) {
            (*(void (**)(uint64_t *))(*v48 + 8))(v48);
          }
          if (v49) {
            (*(void (**)(void *))(*(void *)v49 + 8))(v49);
          }
          ++v6;
        }
        while (v6 != v7);
      }
    }
    else
    {
      if (!(*(unsigned int (**)(void *, void *))(*v5 + 48))(v5, &llvm::ErrorInfoBase::ID)) {
        goto LABEL_19;
      }
      (*(void (**)(void **__return_ptr, void *))(*v5 + 24))(__p, v5);
      BOOL v13 = llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress((uint64_t)&v52, (unint64_t)__p, 1);
      uint64_t v14 = (char *)v52 + 24 * v53;
      long long v15 = *(_OWORD *)v13;
      *((void *)v14 + 2) = *((void *)v13 + 2);
      *(_OWORD *)uint64_t v14 = v15;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
      *(void *)BOOL v13 = 0;
      LODWORD(v53) = v53 + 1;
      if (v51 < 0) {
        operator delete(__p[0]);
      }
    }
    (*(void (**)(void *))(*v5 + 8))(v5);
  }
LABEL_19:
  int v16 = (char *)v52;
  uint64_t v17 = v53;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if (v17)
  {
    std::string::size_type v18 = v17 - 1;
    unint64_t v19 = 24 * v17 - 24;
    uint64_t v20 = v16;
    if (v19 >= 0x60)
    {
      unint64_t v21 = v19 / 0x18 + 1;
      uint64_t v22 = v21 & 3;
      if ((v21 & 3) == 0) {
        uint64_t v22 = 4;
      }
      unint64_t v23 = v21 - v22;
      uint64_t v20 = &v16[24 * v23];
      int64x2_t v24 = 0uLL;
      int64x2_t v25 = (int64x2_t)(unint64_t)(v17 - 1);
      int v26 = (unsigned __int8 *)(v16 + 47);
      v27.i64[0] = 255;
      v27.i64[1] = 255;
      do
      {
        a3.i8[0] = *(v26 - 24);
        a3.i8[4] = *v26;
        a4.i8[0] = v26[24];
        a4.i8[4] = v26[48];
        long long v28 = (const double *)(v26 - 39);
        uint64_t v29 = (const double *)(v26 + 9);
        unsigned long long v30 = (unsigned __int128)vld3q_f64(v28);
        unsigned long long v31 = (unsigned __int128)vld3q_f64(v29);
        int32x2_t v32 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a3.i8, 0x18uLL), 0x18uLL));
        v33.i64[0] = v32.i32[0];
        v33.i64[1] = v32.i32[1];
        int8x16_t v34 = v33;
        int32x2_t v35 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a4.i8, 0x18uLL), 0x18uLL));
        v33.i64[0] = v35.i32[0];
        v33.i64[1] = v35.i32[1];
        int8x16_t v36 = v33;
        v33.i64[0] = a3.u32[0];
        v33.i64[1] = a3.u32[1];
        int8x16_t v37 = vbicq_s8(v33, v34);
        v33.i64[0] = a4.u32[0];
        v33.i64[1] = a4.u32[1];
        a3 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v30, v34), vandq_s8(v37, v27));
        a4 = vandq_s8((int8x16_t)v31, v36);
        int64x2_t v25 = vaddq_s64(a3, v25);
        int64x2_t v24 = vaddq_s64((int64x2_t)vorrq_s8(a4, vandq_s8(vbicq_s8(v33, v36), v27)), v24);
        v26 += 96;
        v23 -= 4;
      }
      while (v23);
      std::string::size_type v18 = vaddvq_s64(vaddq_s64(v24, v25));
    }
    do
    {
      uint64_t v38 = v20[23];
      if ((v38 & 0x80u) != 0) {
        uint64_t v38 = *((void *)v20 + 1);
      }
      v18 += v38;
      v20 += 24;
    }
    while (v20 != &v16[24 * v17]);
    std::string::reserve(a2, v18);
    int v39 = v16[23];
    if (v39 >= 0) {
      uint64_t v40 = v16;
    }
    else {
      uint64_t v40 = *(const std::string::value_type **)v16;
    }
    if (v39 >= 0) {
      std::string::size_type v41 = v16[23];
    }
    else {
      std::string::size_type v41 = *((void *)v16 + 1);
    }
    std::string::append(a2, v40, v41);
    if (v17 != 1)
    {
      int v42 = v16 + 24;
      do
      {
        std::string::append(a2, "\n", 1uLL);
        int v43 = v42[23];
        if (v43 >= 0) {
          unsigned int v44 = v42;
        }
        else {
          unsigned int v44 = *(const std::string::value_type **)v42;
        }
        if (v43 >= 0) {
          std::string::size_type v45 = v42[23];
        }
        else {
          std::string::size_type v45 = *((void *)v42 + 1);
        }
        std::string::append(a2, v44, v45);
        v42 += 24;
        v19 -= 24;
      }
      while (v19);
    }
  }
  int v46 = (char *)v52;
  if (v53)
  {
    uint64_t v47 = 24 * v53;
    do
    {
      if (v46[v47 - 1] < 0) {
        operator delete(*(void **)&v46[v47 - 24]);
      }
      v47 -= 24;
    }
    while (v47);
    int v46 = (char *)v52;
  }
  if (v46 != (char *)v54) {
    free(v46);
  }
}

uint64_t llvm::ErrorList::convertToErrorCode(llvm::ErrorList *this)
{
  {
    return 1;
  }
  return 1;
}

uint64_t llvm::inconvertibleErrorCode(llvm *this)
{
  {
    return 3;
  }
  return 3;
}

uint64_t llvm::FileError::convertToErrorCode(llvm::FileError *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 6) + 32))(*((void *)this + 6));
  {
    unint64_t v5 = v2;
    uint64_t v6 = result;
    uint64_t v2 = v5;
    uint64_t result = v6;
    if (v4)
    {
      uint64_t v2 = v5;
      uint64_t result = v6;
    }
  }
  if (v2 == &getErrorErrorCat(void)::ErrorErrorCat && result == 3)
  {
    {
      return 2;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

void *llvm::errorCodeToError@<X0>(llvm *this@<X0>, std::error_code a2@<0:X1, 8:X2>, void *a3@<X8>)
{
  if (this)
  {
    uint64_t v5 = *(void *)&a2.__val_;
    uint64_t result = operator new(0x18uLL);
    *uint64_t result = &unk_1EC9A4888;
    result[1] = this;
    result[2] = v5;
    *a3 = result;
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::errorToErrorCode(void **a1)
{
  v14.__val_ = 0;
  v14.__cat_ = std::system_category();
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if ((*(unsigned int (**)(void *, void *))(*v2 + 48))(v2, &llvm::ErrorList::ID))
    {
      uint64_t v3 = (uint64_t **)v2[1];
      int v4 = (uint64_t **)v2[2];
      if (v3 != v4)
      {
        std::string::size_type v5 = 0;
        do
        {
          v11.__r_.__value_.__r.__words[0] = v5;
          uint64_t v6 = *v3;
          void *v3 = 0;
          if ((*(unsigned int (**)(uint64_t *, void *))(*v6 + 48))(v6, &llvm::ErrorInfoBase::ID))
          {
            *(void *)&v14.__val_ = (*(uint64_t (**)(uint64_t *))(*v6 + 32))(v6);
            v14.__cat_ = v7;
            (*(void (**)(uint64_t *))(*v6 + 8))(v6);
            uint64_t v6 = 0;
          }
          long long v15 = v6;
          llvm::ErrorList::join((uint64_t *)&v11, &v15, v12);
          std::string::size_type v5 = v12[0];
          v12[0] = 0;
          if (v15) {
            (*(void (**)(uint64_t *))(*v15 + 8))(v15);
          }
          if (v11.__r_.__value_.__r.__words[0]) {
            (*(void (**)(std::string::size_type))(*(void *)v11.__r_.__value_.__l.__data_ + 8))(v11.__r_.__value_.__r.__words[0]);
          }
          ++v3;
        }
        while (v3 != v4);
      }
      goto LABEL_14;
    }
    if ((*(unsigned int (**)(void *, void *))(*v2 + 48))(v2, &llvm::ErrorInfoBase::ID))
    {
      *(void *)&v14.__val_ = (*(uint64_t (**)(void *))(*v2 + 32))(v2);
      v14.__cat_ = v8;
LABEL_14:
      (*(void (**)(void *))(*v2 + 8))(v2);
    }
  }
  {
  }
  if ((void (**)(_anonymous_namespace_::ErrorErrorCategory *__hidden))v14.__cat_ == &getErrorErrorCat(void)::ErrorErrorCat
    && v14.__val_ == 3)
  {
    std::error_code::message(&v11, &v14);
    __int16 v13 = 260;
    v12[0] = &v11;
    llvm::report_fatal_error((llvm::Twine *)v12, 1);
  }
  return *(void *)&v14.__val_;
}

uint64_t llvm::StringError::StringError(uint64_t a1, llvm::Twine *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1EC9A1808;
  llvm::Twine::str(a2, (std::string *)(a1 + 8));
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(unsigned char *)(a1 + 48) = 1;
  return a1;
}

void llvm::StringError::log(const std::error_code *this, llvm::raw_ostream *a2)
{
  if (LOBYTE(this[3].__val_))
  {
    int cat_high = SHIBYTE(this[1].__cat_);
    if (cat_high >= 0) {
      p_cat = (const char *)&this->__cat_;
    }
    else {
      p_cat = (const char *)this->__cat_;
    }
    if (cat_high >= 0) {
      size_t v6 = HIBYTE(this[1].__cat_);
    }
    else {
      size_t v6 = *(void *)&this[1].__val_;
    }
    llvm::raw_ostream::write(a2, p_cat, v6);
    return;
  }
  std::error_code::message(&v12, this + 2);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v7 = &v12;
  }
  else {
    int v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v12.__r_.__value_.__l.__size_;
  }
  llvm::raw_ostream::write(a2, (const char *)v7, size);
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    int v9 = SHIBYTE(this[1].__cat_);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_22:
    if (!*(void *)&this[1].__val_) {
      return;
    }
    goto LABEL_23;
  }
  operator delete(v12.__r_.__value_.__l.__data_);
  int v9 = SHIBYTE(this[1].__cat_);
  if (v9 < 0) {
    goto LABEL_22;
  }
LABEL_19:
  if (!(_BYTE)v9) {
    return;
  }
LABEL_23:
  std::operator+<char>();
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v10 = &v12;
  }
  else {
    unsigned int v10 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v11 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v11 = v12.__r_.__value_.__l.__size_;
  }
  llvm::raw_ostream::write(a2, (const char *)v10, v11);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

uint64_t llvm::StringError::convertToErrorCode(llvm::StringError *this)
{
  return *((void *)this + 4);
}

void llvm::createStringError(llvm *this@<X0>, std::error_code a2@<0:X1, 8:X2>, void *a3@<X8>)
{
  cat = a2.__cat_;
  uint64_t v5 = *(void *)&a2.__val_;
  unsigned int v8 = (char *)operator new(0x38uLL);
  int v9 = v8;
  char v13 = 1;
  if (LOBYTE(cat->__vftable))
  {
    size_t v11 = cat;
    char v10 = 3;
  }
  else
  {
    char v10 = 1;
  }
  char v12 = v10;
  *(void *)unsigned int v8 = &unk_1EC9A1808;
  llvm::Twine::str((llvm::Twine *)&v11, (std::string *)(v8 + 8));
  *((void *)v9 + 4) = this;
  *((void *)v9 + 5) = v5;
  v9[48] = 1;
  *a3 = v9;
}

void llvm::ErrorInfoBase::message(llvm::ErrorInfoBase *this@<X0>, std::string *a2@<X8>)
{
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  int v6 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  int v12 = 1;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = &unk_1EC9A38B8;
  char v13 = v14;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v5, 0, 0, 0);
  (*(void (**)(llvm::ErrorInfoBase *, void **))(*(void *)this + 16))(this, &v5);
  if ((*((char *)v13 + 23) & 0x80000000) == 0)
  {
    long long v4 = *(_OWORD *)v13;
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)v13[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(v14[0]);
    return;
  }
  std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v13, (std::string::size_type)v13[1]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
  if (SHIBYTE(v15) < 0) {
    goto LABEL_5;
  }
}

void llvm::ErrorList::~ErrorList(llvm::ErrorList *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 2);
    long long v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      long long v4 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 2);
    long long v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      long long v4 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }

  operator delete(this);
}

llvm::raw_ostream *llvm::ErrorList::log(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v4) > 0x10)
  {
    *(unsigned char *)(v4 + 16) = 10;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"Multiple errors:\n";
    *((void *)a2 + 4) += 17;
    uint64_t v5 = (void *)*((void *)this + 1);
    for (uint64_t i = (void *)*((void *)this + 2); v5 != i; ++v5)
    {
LABEL_7:
      while (1)
      {
        this = (llvm::raw_ostream *)(*(uint64_t (**)(void, llvm::raw_ostream *))(*(void *)*v5 + 16))(*v5, a2);
        uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
        if (*((unsigned char **)a2 + 3) == v7) {
          break;
        }
        *uint64_t v7 = 10;
        ++*((void *)a2 + 4);
        if (++v5 == i) {
          return this;
        }
      }
      this = llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
  }
  else
  {
    this = llvm::raw_ostream::write(a2, "Multiple errors:\n", 0x11uLL);
    uint64_t v5 = (void *)*((void *)v3 + 1);
    uint64_t i = (void *)*((void *)v3 + 2);
    if (v5 != i) {
      goto LABEL_7;
    }
  }
  return this;
}

void *llvm::ErrorInfo<llvm::ErrorList,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::ErrorList::ID;
}

BOOL llvm::ErrorInfo<llvm::ErrorList,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::ErrorList::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::ECError::log(llvm::ECError *this, llvm::raw_ostream *a2)
{
  std::error_code::message(&v5, (const std::error_code *)((char *)this + 8));
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v5;
  }
  else {
    uint64_t v3 = (std::string *)v5.__r_.__value_.__r.__words[0];
  }
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v5.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v5.__r_.__value_.__l.__size_;
  }
  llvm::raw_ostream::write(a2, (const char *)v3, size);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

uint64_t llvm::ECError::convertToErrorCode(llvm::ECError *this)
{
  return *((void *)this + 1);
}

void *llvm::ErrorInfo<llvm::ECError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::ECError::ID;
}

BOOL llvm::ErrorInfo<llvm::ECError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::FileError::~FileError(llvm::FileError *this)
{
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  llvm::FileError *v3;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0)
  {
    operator delete(*((void **)this + 1));
    uint64_t v3 = this;
  }
  else
  {
    uint64_t v3 = this;
  }
  operator delete(v3);
}

uint64_t llvm::FileError::log(llvm::FileError *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v4)
  {
    std::string v5 = llvm::raw_ostream::write(a2, "'", 1uLL);
  }
  else
  {
    *uint64_t v4 = 39;
    ++*((void *)a2 + 4);
    std::string v5 = a2;
  }
  int v6 = *((char *)this + 31);
  if (v6 >= 0) {
    uint64_t v7 = (char *)this + 8;
  }
  else {
    uint64_t v7 = (const char *)*((void *)this + 1);
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)this + 31);
  }
  else {
    size_t v8 = *((void *)this + 2);
  }
  uint64_t v9 = llvm::raw_ostream::write(v5, v7, v8);
  uint64_t v10 = *((void *)v9 + 4);
  if ((unint64_t)(*((void *)v9 + 3) - v10) > 2)
  {
    *(unsigned char *)(v10 + 2) = 32;
    *(_WORD *)uint64_t v10 = 14887;
    *((void *)v9 + 4) += 3;
    if (!*((unsigned char *)this + 40)) {
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v11 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v11) > 4)
    {
      *(unsigned char *)(v11 + 4) = 32;
      *(_DWORD *)uint64_t v11 = 1701734764;
      *((void *)a2 + 4) += 5;
      char v13 = llvm::raw_ostream::operator<<(a2, *((void *)this + 4));
      std::error_code v14 = (_WORD *)*((void *)v13 + 4);
      if (*((void *)v13 + 3) - (void)v14 > 1uLL) {
        goto LABEL_16;
      }
    }
    else
    {
      int v12 = llvm::raw_ostream::write(a2, "line ", 5uLL);
      char v13 = llvm::raw_ostream::operator<<(v12, *((void *)this + 4));
      std::error_code v14 = (_WORD *)*((void *)v13 + 4);
      if (*((void *)v13 + 3) - (void)v14 > 1uLL)
      {
LABEL_16:
        _WORD *v14 = 8250;
        *((void *)v13 + 4) += 2;
        goto LABEL_19;
      }
    }
    llvm::raw_ostream::write(v13, ": ", 2uLL);
    goto LABEL_19;
  }
  llvm::raw_ostream::write(v9, "': ", 3uLL);
  if (*((unsigned char *)this + 40)) {
    goto LABEL_14;
  }
LABEL_19:
  uint64_t v15 = *(uint64_t (**)(void))(**((void **)this + 6) + 16);

  return v15();
}

void *llvm::ErrorInfo<llvm::FileError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::FileError::ID;
}

BOOL llvm::ErrorInfo<llvm::FileError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::FileError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::StringError::~StringError(void **this)
{
  *this = &unk_1EC9A1808;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  llvm::StringError *v1;
  uint64_t vars8;

  uint64_t v1 = (llvm::StringError *)this;
  *this = &unk_1EC9A1808;
  if (*((char *)this + 31) < 0)
  {
    operator delete(this[1]);
    this = (void **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(this);
}

void *llvm::ErrorInfo<llvm::StringError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::StringError::ID;
}

BOOL llvm::ErrorInfo<llvm::StringError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::StringError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void anonymous namespace'::ErrorErrorCategory::~ErrorErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);

  operator delete(v1);
}

const char *anonymous namespace'::ErrorErrorCategory::name(_anonymous_namespace_::ErrorErrorCategory *this)
{
  return "Error";
}

void anonymous namespace'::ErrorErrorCategory::message(int a1@<W1>, uint64_t a2@<X8>)
{
  if (a1 == 3)
  {
    uint64_t v4 = (char *)operator new(0x80uLL);
    *(void *)a2 = v4;
    *(_OWORD *)(a2 + 8) = xmmword_181127C40;
    strcpy(v4, "Inconvertible error value. An error has occurred that could not be converted to a known std::error_code. Please file a bug.");
  }
  else if (a1 == 2)
  {
    strcpy((char *)a2, "A file error occurred.");
    *(unsigned char *)(a2 + 23) = 22;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 15;
    strcpy((char *)a2, "Multiple errors");
  }
}

char *llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v8 = *(void *)a1 + 24 * v4;
    if (*(void *)a1 <= a2 && v8 > a2)
    {
      uint64_t v21 = (uint64_t)(a2 - *(void *)a1) >> 3;
      unint64_t v34 = 0;
      uint64_t v22 = (void *)(a1 + 16);
      unint64_t v23 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v34);
      int64x2_t v24 = v23;
      int64x2_t v25 = *(void **)a1;
      uint64_t v26 = *(unsigned int *)(a1 + 8);
      if (v26)
      {
        uint64_t v27 = 24 * v26;
        long long v28 = v23;
        do
        {
          long long v29 = *(_OWORD *)v25;
          *((void *)v28 + 2) = v25[2];
          *(_OWORD *)long long v28 = v29;
          v28 += 24;
          v25[1] = 0;
          void v25[2] = 0;
          *int64x2_t v25 = 0;
          v25 += 3;
          v27 -= 24;
        }
        while (v27);
        int64x2_t v25 = *(void **)a1;
        uint64_t v30 = *(unsigned int *)(a1 + 8);
        if (v30)
        {
          uint64_t v31 = 3 * v30;
          do
          {
            if (SHIBYTE(v25[v31 - 1]) < 0) {
              operator delete((void *)v25[v31 - 3]);
            }
            v31 -= 3;
          }
          while (v31 * 8);
          int64x2_t v25 = *(void **)a1;
        }
      }
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * v21;
      int v33 = v34;
      if (v25 != v22) {
        free(v25);
      }
      *(void *)a1 = v24;
      *(_DWORD *)(a1 + 12) = v33;
      return &v24[24 * v32];
    }
    else
    {
      unint64_t v34 = 0;
      uint64_t v10 = (void *)(a1 + 16);
      uint64_t v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v34);
      int v12 = v11;
      char v13 = *(void **)a1;
      uint64_t v14 = *(unsigned int *)(a1 + 8);
      if (v14)
      {
        uint64_t v15 = 24 * v14;
        int v16 = v11;
        do
        {
          long long v17 = *(_OWORD *)v13;
          void v16[2] = v13[2];
          *(_OWORD *)int v16 = v17;
          v16 += 3;
          v13[1] = 0;
          v13[2] = 0;
          void *v13 = 0;
          v13 += 3;
          v15 -= 24;
        }
        while (v15);
        char v13 = *(void **)a1;
        uint64_t v18 = *(unsigned int *)(a1 + 8);
        if (v18)
        {
          uint64_t v19 = 3 * v18;
          do
          {
            if (SHIBYTE(v13[v19 - 1]) < 0) {
              operator delete((void *)v13[v19 - 3]);
            }
            v19 -= 3;
          }
          while (v19 * 8);
          char v13 = *(void **)a1;
        }
      }
      int v20 = v34;
      if (v13 != v10) {
        free(v13);
      }
      *(void *)a1 = v12;
      *(_DWORD *)(a1 + 12) = v20;
    }
  }
  return (char *)v3;
}

void llvm::report_fatal_error(llvm *this, const char *a2)
{
  char v2 = 1;
  char v5 = 1;
  if (*(unsigned char *)this)
  {
    unint64_t v3 = this;
    char v2 = 3;
  }
  char v4 = v2;
  llvm::report_fatal_error((llvm::Twine *)&v3, (uint64_t)a2);
}

void llvm::report_bad_alloc_error(llvm *this, const char *a2)
{
  std::mutex::lock(&stru_1EB215A78);
  char v5 = (void (*)(uint64_t, llvm *, const char *))qword_1E8EBF148;
  uint64_t v4 = unk_1E8EBF150;
  std::mutex::unlock(&stru_1EB215A78);
  if (!v5)
  {
    write(2, "LLVM ERROR: out of memory\n", 0x1AuLL);
    size_t v6 = strlen((const char *)this);
    write(2, this, v6);
    write(2, "\n", 1uLL);
    abort();
  }
  v5(v4, this, a2);
  __break(1u);
}

void llvm::llvm_unreachable_internal(llvm *this, const char *a2, const char *a3)
{
  unsigned int v3 = a3;
  if (this)
  {
    char v5 = (const char *)this;
    size_t v6 = (llvm::raw_ostream *)llvm::dbgs(this);
    size_t v7 = strlen(v5);
    unint64_t v8 = (unsigned char *)*((void *)v6 + 4);
    if (v7 <= *((void *)v6 + 3) - (void)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        unint64_t v8 = (unsigned char *)(*((void *)v6 + 4) + v7);
        *((void *)v6 + 4) = v8;
      }
    }
    else
    {
      size_t v6 = llvm::raw_ostream::write(v6, v5, v7);
      unint64_t v8 = (unsigned char *)*((void *)v6 + 4);
    }
    if (*((unsigned char **)v6 + 3) != v8)
    {
      *unint64_t v8 = 10;
      ++*((void *)v6 + 4);
      uint64_t v9 = (llvm::raw_ostream *)llvm::dbgs((llvm *)v8);
      uint64_t v10 = *((void *)v9 + 4);
      if ((unint64_t)(*((void *)v9 + 3) - v10) <= 0x13)
      {
LABEL_9:
        uint64_t v9 = llvm::raw_ostream::write(v9, "UNREACHABLE executed", 0x14uLL);
        if (!a2) {
          goto LABEL_10;
        }
        goto LABEL_13;
      }
LABEL_12:
      *(_DWORD *)(v10 + 16) = 1684370549;
      *(_OWORD *)uint64_t v10 = *(_OWORD *)"UNREACHABLE executed";
      *((void *)v9 + 4) += 20;
      if (!a2)
      {
LABEL_10:
        uint64_t v11 = (llvm::raw_ostream *)llvm::dbgs(v9);
        llvm::raw_ostream::operator<<(v11, "!\n");
        abort();
      }
LABEL_13:
      int v12 = (llvm::raw_ostream *)llvm::dbgs(v9);
      char v13 = v12;
      uint64_t v14 = (_DWORD *)*((void *)v12 + 4);
      if (*((void *)v12 + 3) - (void)v14 > 3uLL)
      {
        _DWORD *v14 = 544497952;
        uint64_t v15 = (unsigned char *)(*((void *)v12 + 4) + 4);
        *((void *)v12 + 4) = v15;
      }
      else
      {
        char v13 = llvm::raw_ostream::write(v12, " at ", 4uLL);
        uint64_t v15 = (unsigned char *)*((void *)v13 + 4);
      }
      size_t v16 = strlen(a2);
      size_t v17 = v16;
      if (v16 <= *((void *)v13 + 3) - (void)v15)
      {
        if (v16)
        {
          memcpy(v15, a2, v16);
          uint64_t v15 = (unsigned char *)(*((void *)v13 + 4) + v17);
          *((void *)v13 + 4) = v15;
        }
      }
      else
      {
        char v13 = llvm::raw_ostream::write(v13, a2, v16);
        uint64_t v15 = (unsigned char *)*((void *)v13 + 4);
      }
      if (*((unsigned char **)v13 + 3) == v15)
      {
        char v13 = llvm::raw_ostream::write(v13, ":", 1uLL);
      }
      else
      {
        unsigned char *v15 = 58;
        ++*((void *)v13 + 4);
      }
      uint64_t v18 = llvm::raw_ostream::operator<<(v13, v3);
      uint64_t v19 = (llvm::raw_ostream *)llvm::dbgs(v18);
      llvm::raw_ostream::operator<<(v19, "!\n");
      abort();
    }
    this = llvm::raw_ostream::write(v6, "\n", 1uLL);
  }
  uint64_t v9 = (llvm::raw_ostream *)llvm::dbgs(this);
  uint64_t v10 = *((void *)v9 + 4);
  if ((unint64_t)(*((void *)v9 + 3) - v10) <= 0x13) {
    goto LABEL_9;
  }
  goto LABEL_12;
}

uint64_t _GLOBAL__sub_I_ErrorHandling_cpp()
{
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA268];
  __cxa_atexit(MEMORY[0x1E4FBA268], &_MergedGlobals_42, &dword_180159000);

  return __cxa_atexit(v0, &stru_1EB215A78, &dword_180159000);
}

uint64_t llvm::formatv_object_base::parseReplacementItem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v54 = a1;
  *((void *)&v54 + 1) = a2;
  unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v54, "{}", 2, 0);
  if (first_not_of >= *((void *)&v54 + 1)) {
    unint64_t v5 = *((void *)&v54 + 1);
  }
  else {
    unint64_t v5 = first_not_of;
  }
  unint64_t v6 = *((void *)&v54 + 1) - v5;
  *(void *)&v56[0] = v54 + v5;
  *((void *)&v56[0] + 1) = *((void *)&v54 + 1) - v5;
  uint64_t last_not_of = llvm::StringRef::find_last_not_of(v56, "{}", 2, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < *((void *)&v56[0] + 1)) {
    uint64_t v8 = last_not_of + 1;
  }
  else {
    uint64_t v8 = *((void *)&v56[0] + 1);
  }
  unint64_t v9 = *((void *)&v56[0] + 1) - v6 + v8;
  if (*((void *)&v56[0] + 1) < v9) {
    unint64_t v9 = *((void *)&v56[0] + 1);
  }
  uint64_t v52 = *(void *)&v56[0];
  unint64_t v53 = v9;
  unint64_t v10 = llvm::StringRef::find_first_not_of(&v52, " \t\n\v\f\r", 6, 0);
  if (v10 >= v53) {
    unint64_t v11 = v53;
  }
  else {
    unint64_t v11 = v10;
  }
  unint64_t v12 = v53 - v11;
  *(void *)&v56[0] = v52 + v11;
  *((void *)&v56[0] + 1) = v53 - v11;
  uint64_t v13 = llvm::StringRef::find_last_not_of(v56, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(v13 + 1) < *((void *)&v56[0] + 1)) {
    uint64_t v15 = v13 + 1;
  }
  else {
    uint64_t v15 = *((void *)&v56[0] + 1);
  }
  unint64_t v16 = *((void *)&v56[0] + 1) - v12 + v15;
  if (*((void *)&v56[0] + 1) < v16) {
    unint64_t v16 = *((void *)&v56[0] + 1);
  }
  uint64_t v52 = *(void *)&v56[0];
  unint64_t v53 = v16;
  *(void *)&v56[0] = 0;
  uint64_t result = llvm::consumeUnsignedInteger((llvm *)&v52, 0, (unint64_t *)v56, v14);
  if (result)
  {
    memset(v56, 0, sizeof(v56));
    *(_OWORD *)(a3 + 8) = 0u;
    memset(v55, 0, sizeof(v55));
    *(void *)a3 = 0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_DWORD *)(a3 + 40) = 2;
    *(unsigned char *)(a3 + 44) = 0;
    *(_DWORD *)(a3 + 60) = 0;
    *(_OWORD *)(a3 + 45) = *(_OWORD *)v55;
    goto LABEL_71;
  }
  uint64_t v18 = *(void *)&v56[0];
  unint64_t v19 = llvm::StringRef::find_first_not_of(&v52, " \t\n\v\f\r", 6, 0);
  if (v19 >= v53) {
    unint64_t v20 = v53;
  }
  else {
    unint64_t v20 = v19;
  }
  unint64_t v21 = v53 - v20;
  *(void *)&v56[0] = v52 + v20;
  *((void *)&v56[0] + 1) = v53 - v20;
  uint64_t v22 = llvm::StringRef::find_last_not_of(v56, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(v22 + 1) < *((void *)&v56[0] + 1)) {
    uint64_t v24 = v22 + 1;
  }
  else {
    uint64_t v24 = *((void *)&v56[0] + 1);
  }
  unint64_t v25 = *((void *)&v56[0] + 1) - v21 + v24;
  if (*((void *)&v56[0] + 1) < v25) {
    unint64_t v25 = *((void *)&v56[0] + 1);
  }
  uint64_t v52 = *(void *)&v56[0];
  unint64_t v53 = v25;
  if (!v25 || **(unsigned char **)&v56[0] != 44)
  {
    uint64_t v33 = 0;
    char v27 = 32;
    int v28 = 2;
    goto LABEL_46;
  }
  uint64_t v26 = (char *)(*(void *)&v56[0] + 1);
  char v27 = 32;
  int v28 = 2;
  unint64_t v29 = v25 - 1;
  uint64_t v52 = *(void *)&v56[0] + 1;
  unint64_t v53 = v25 - 1;
  if (v25 == 1)
  {
    uint64_t v33 = 0;
    goto LABEL_46;
  }
  unint64_t v30 = v25 - 2;
  if (v30)
  {
    uint64_t v31 = *(void *)&v56[0] + 2;
    int v32 = *(char *)(*(void *)&v56[0] + 2);
    switch(v32)
    {
      case '+':
LABEL_38:
        char v27 = *v26;
        if (v29 >= 2) {
          uint64_t v34 = 2;
        }
        else {
          uint64_t v34 = v29;
        }
        uint64_t v31 = (uint64_t)&v26[v34];
        unint64_t v30 = v29 - v34;
        goto LABEL_42;
      case '-':
        int v28 = 0;
        goto LABEL_38;
      case '=':
        int v28 = 1;
        goto LABEL_38;
    }
    int v51 = *v26;
    switch(v51)
    {
      case '+':
LABEL_42:
        uint64_t v52 = v31;
        unint64_t v53 = v30;
        break;
      case '-':
        int v28 = 0;
        goto LABEL_42;
      case '=':
        int v28 = 1;
        goto LABEL_42;
    }
  }
  *(void *)&v56[0] = 0;
  if (llvm::consumeUnsignedInteger((llvm *)&v52, 0, (unint64_t *)v56, v23)) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = *(void *)&v56[0];
  }
LABEL_46:
  unint64_t v35 = llvm::StringRef::find_first_not_of(&v52, " \t\n\v\f\r", 6, 0);
  if (v35 >= v53) {
    unint64_t v36 = v53;
  }
  else {
    unint64_t v36 = v35;
  }
  unint64_t v37 = v53 - v36;
  *(void *)&v56[0] = v52 + v36;
  *((void *)&v56[0] + 1) = v53 - v36;
  uint64_t v38 = llvm::StringRef::find_last_not_of(v56, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(v38 + 1) < *((void *)&v56[0] + 1)) {
    uint64_t v39 = v38 + 1;
  }
  else {
    uint64_t v39 = *((void *)&v56[0] + 1);
  }
  unint64_t v40 = *((void *)&v56[0] + 1) - v37 + v39;
  if (*((void *)&v56[0] + 1) < v40) {
    unint64_t v40 = *((void *)&v56[0] + 1);
  }
  uint64_t v52 = *(void *)&v56[0];
  unint64_t v53 = v40;
  if (v40 && **(unsigned char **)&v56[0] == 58)
  {
    *(void *)uint64_t v55 = *(void *)&v56[0] + 1;
    *(void *)&v55[8] = v40 - 1;
    unint64_t v41 = llvm::StringRef::find_first_not_of(v55, " \t\n\v\f\r", 6, 0);
    if (v41 >= *(void *)&v55[8]) {
      unint64_t v42 = *(void *)&v55[8];
    }
    else {
      unint64_t v42 = v41;
    }
    unint64_t v43 = *(void *)&v55[8] - v42;
    *(void *)&v56[0] = *(void *)v55 + v42;
    *((void *)&v56[0] + 1) = *(void *)&v55[8] - v42;
    uint64_t v44 = llvm::StringRef::find_last_not_of(v56, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v45 = *(void *)&v56[0];
    if ((unint64_t)(v44 + 1) < *((void *)&v56[0] + 1)) {
      uint64_t v46 = v44 + 1;
    }
    else {
      uint64_t v46 = *((void *)&v56[0] + 1);
    }
    unint64_t v47 = *((void *)&v56[0] + 1) - v43 + v46;
    if (*((void *)&v56[0] + 1) >= v47) {
      unint64_t v48 = v47;
    }
    else {
      unint64_t v48 = *((void *)&v56[0] + 1);
    }
    uint64_t v52 = 0;
    unint64_t v53 = 0;
  }
  else
  {
    unint64_t v48 = 0;
    uint64_t v45 = 0;
  }
  unint64_t v49 = llvm::StringRef::find_first_not_of(&v52, " \t\n\v\f\r", 6, 0);
  if (v49 >= v53) {
    unint64_t v50 = v53;
  }
  else {
    unint64_t v50 = v49;
  }
  *(void *)&v56[0] = v52 + v50;
  *((void *)&v56[0] + 1) = v53 - v50;
  uint64_t result = llvm::StringRef::find_last_not_of(v56, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  *(_DWORD *)a3 = 1;
  *(_OWORD *)(a3 + 8) = v54;
  *(void *)(a3 + 24) = v18;
  *(void *)(a3 + 32) = v33;
  *(_DWORD *)(a3 + 40) = v28;
  *(unsigned char *)(a3 + 44) = v27;
  *(void *)(a3 + 48) = v45;
  *(void *)(a3 + 56) = v48;
LABEL_71:
  *(unsigned char *)(a3 + 64) = 1;
  return result;
}

double llvm::formatv_object_base::splitLiteralAndReplacement@<D0>(unsigned char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    size_t v5 = a2;
    while (2)
    {
      if (*a1 == 123)
      {
        uint64_t v6 = 1;
        do
        {
          if (v5 == v6)
          {
            unint64_t v8 = -1;
            if (v5 != -1) {
              unint64_t v8 = v5;
            }
            if (v8 >= 2) {
              goto LABEL_37;
            }
            goto LABEL_14;
          }
          int v7 = a1[v6++];
        }
        while (v7 == 123);
        unint64_t v8 = v6 - 1;
        if (v5 < v8) {
          unint64_t v8 = v5;
        }
        if (v8 >= 2)
        {
LABEL_37:
          unint64_t v20 = v8 >> 1;
          if (v5 < v8 >> 1) {
            unint64_t v20 = v5;
          }
          *(void *)(a3 + 24) = 0;
          *(void *)(a3 + 32) = 0;
          unint64_t v21 = v8 & 0xFFFFFFFFFFFFFFFELL;
          *(void *)&v24[11] = 0;
          if (v5 < v21) {
            unint64_t v21 = v5;
          }
          *(void *)&v24[3] = 0;
          *(_DWORD *)a3 = 2;
          *(void *)(a3 + 8) = a1;
          *(void *)(a3 + 16) = v20;
          *(_DWORD *)(a3 + 40) = 2;
          *(unsigned char *)(a3 + 44) = 0;
          double result = *(double *)v24;
          *(_OWORD *)(a3 + 45) = *(_OWORD *)v24;
          *(_DWORD *)(a3 + 60) = 0;
          *(void *)(a3 + 64) = &a1[v21];
          *(void *)(a3 + 72) = v5 - v21;
          return result;
        }
LABEL_14:
        unint64_t v9 = memchr(a1, 125, v5);
        if (!v9 || (v10 = v9, unint64_t v11 = v9 - a1, v9 - a1 == -1))
        {
          *(void *)(a3 + 24) = 0;
          *(void *)(a3 + 32) = 0;
          *(void *)&v24[11] = 0;
          *(void *)&v24[3] = 0;
          *(void *)(a3 + 64) = 0;
          *(void *)(a3 + 72) = 0;
          *(_DWORD *)a3 = 2;
          *(void *)(a3 + 8) = a1;
          *(void *)(a3 + 16) = v5;
          goto LABEL_31;
        }
        if (v5 < 2) {
          goto LABEL_20;
        }
        unint64_t v12 = memchr(a1 + 1, 123, v5 - 1);
        unint64_t v13 = v12 - a1;
        if (!v12) {
          unint64_t v13 = -1;
        }
        if (v13 >= v11)
        {
LABEL_20:
          if (v10 == a1) {
            unint64_t v14 = 1;
          }
          else {
            unint64_t v14 = v11;
          }
          if (v14 >= v5) {
            unint64_t v14 = v5;
          }
          uint64_t v15 = (uint64_t)(a1 + 1);
          uint64_t v16 = v14 - 1;
          if (v5 >= v11 + 1) {
            size_t v17 = v11 + 1;
          }
          else {
            size_t v17 = v5;
          }
          a1 += v17;
          v5 -= v17;
          llvm::formatv_object_base::parseReplacementItem(v15, v16, (uint64_t)v24);
          if (v27)
          {
            long long v22 = *(_OWORD *)&v24[16];
            *(_OWORD *)a3 = *(_OWORD *)v24;
            *(_OWORD *)(a3 + 16) = v22;
            double result = *(double *)&v25;
            long long v23 = v26;
            *(_OWORD *)(a3 + 32) = v25;
            *(_OWORD *)(a3 + 48) = v23;
            *(void *)(a3 + 64) = a1;
            *(void *)(a3 + 72) = v5;
            return result;
          }
          if (v5) {
            continue;
          }
          goto LABEL_30;
        }
        if (v5 < v13) {
          unint64_t v13 = v5;
        }
        *(void *)(a3 + 24) = 0;
        *(void *)(a3 + 32) = 0;
        *(void *)&v24[11] = 0;
      }
      else
      {
        unint64_t v19 = memchr(a1, 123, v5);
        unint64_t v13 = v19 - a1;
        *(void *)(a3 + 24) = 0;
        *(void *)(a3 + 32) = 0;
        if (!v19) {
          unint64_t v13 = -1;
        }
        *(void *)&v24[11] = 0;
        if (v5 < v13) {
          unint64_t v13 = v5;
        }
      }
      break;
    }
    *(void *)&v24[3] = 0;
    *(_DWORD *)a3 = 2;
    *(void *)(a3 + 8) = a1;
    *(void *)(a3 + 16) = v13;
    *(_DWORD *)(a3 + 40) = 2;
    *(unsigned char *)(a3 + 44) = 0;
    double result = *(double *)v24;
    *(_OWORD *)(a3 + 45) = *(_OWORD *)v24;
    *(_DWORD *)(a3 + 60) = *(_DWORD *)&v24[15];
    *(void *)(a3 + 64) = &a1[v13];
    *(void *)(a3 + 72) = v5 - v13;
    return result;
  }
LABEL_30:
  *(void *)&v24[11] = 0;
  *(void *)&v24[3] = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(_DWORD *)a3 = 2;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = a1;
  *(void *)(a3 + 16) = 0;
LABEL_31:
  *(_DWORD *)(a3 + 40) = 2;
  *(unsigned char *)(a3 + 44) = 0;
  double result = *(double *)v24;
  *(_OWORD *)(a3 + 45) = *(_OWORD *)v24;
  *(_DWORD *)(a3 + 60) = *(_DWORD *)&v24[15];
  return result;
}

double llvm::formatv_object_base::parseFormatString@<D0>(unsigned char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)(a3 + 16);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x200000000;
  *(_DWORD *)long long v23 = 0;
  *(void *)&long long v5 = 0;
  memset(&v23[8], 0, 32);
  *(_DWORD *)&v23[40] = 2;
  v23[44] = 0;
  long long v24 = 0uLL;
  if (a2)
  {
    size_t v6 = a2;
    do
    {
      llvm::formatv_object_base::splitLiteralAndReplacement(a1, v6, (uint64_t)v18);
      *(_OWORD *)long long v23 = v18[0];
      *(_OWORD *)&v23[16] = v18[1];
      *(void *)&long long v5 = v19;
      *(_OWORD *)&v23[32] = v19;
      long long v24 = v20;
      a1 = v21;
      size_t v6 = v22;
      if (!LODWORD(v18[0])) {
        continue;
      }
      uint64_t v13 = *(unsigned int *)(a3 + 8);
      unint64_t v8 = *(void *)a3;
      if (v13 >= *(_DWORD *)(a3 + 12))
      {
        unint64_t v14 = v13 + 1;
        BOOL v15 = v8 + (v13 << 6) > (unint64_t)v23;
        if (v8 <= (unint64_t)v23 && v15)
        {
          uint64_t v16 = &v23[-v8];
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v4, v14, 64);
          unint64_t v8 = *(void *)a3;
          unint64_t v9 = (long long *)&v16[*(void *)a3];
          goto LABEL_5;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v4, v14, 64);
        unint64_t v8 = *(void *)a3;
      }
      unint64_t v9 = (long long *)v23;
LABEL_5:
      unint64_t v10 = (_OWORD *)(v8 + ((unint64_t)*(unsigned int *)(a3 + 8) << 6));
      long long v5 = *v9;
      long long v11 = v9[1];
      long long v12 = v9[3];
      unint64_t v10[2] = v9[2];
      unint64_t v10[3] = v12;
      *unint64_t v10 = v5;
      v10[1] = v11;
      ++*(_DWORD *)(a3 + 8);
    }
    while (v6);
  }
  return *(double *)&v5;
}

void llvm::IntervalMapImpl::Path::replaceRoot(unsigned int *a1, uint64_t a2, int a3, uint64_t a4)
{
  long long v5 = *(void **)a1;
  *long long v5 = a2;
  *((_DWORD *)v5 + 2) = a3;
  *((_DWORD *)v5 + 3) = a4;
  size_t v6 = *(void **)a1;
  unint64_t v7 = *(void *)(**(void **)a1 + 8 * *(unsigned int *)(*(void *)a1 + 12)) & 0xFFFFFFFFFFFFFFC0;
  unint64_t v8 = (a4 & 0xFFFFFFFF00000000 | *(void *)(**(void **)a1 + 8 * *(unsigned int *)(*(void *)a1 + 12)) & 0x3FLL)
     + 1;
  uint64_t v9 = a1[2];
  unsigned int v10 = a1[3];
  if (v9 == 1)
  {
    if (v10 <= 1)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v9 + 1, 16);
      uint64_t v11 = a1[2];
      size_t v6 = *(void **)a1;
    }
    else
    {
      uint64_t v11 = 1;
    }
    long long v12 = &v6[2 * v11];
    unint64_t *v12 = v7;
    v12[1] = v8;
    ++a1[2];
  }
  else
  {
    if (v9 >= v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v9 + 1, 16);
      size_t v6 = *(void **)a1;
      uint64_t v9 = a1[2];
    }
    *(_OWORD *)&v6[2 * v9] = *(_OWORD *)&v6[2 * v9 - 2];
    uint64_t v13 = a1[2];
    uint64_t v14 = *(void *)a1 + 16 * v13 - 16;
    if ((void *)v14 != v6 + 2)
    {
      memmove(v6 + 4, v6 + 2, v14 - (void)(v6 + 2));
      LODWORD(v13) = a1[2];
    }
    a1[2] = v13 + 1;
    v6[2] = v7;
    v6[3] = v8;
  }
}

uint64_t llvm::IntervalMapImpl::Path::getLeftSibling(llvm::IntervalMapImpl::Path *this, int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *(void *)this;
  int v3 = -1;
  while (1)
  {
    uint64_t v4 = (a2 + v3);
    if (!(a2 + v3)) {
      break;
    }
    int v5 = *(_DWORD *)(v2 + 16 * v4 + 12);
    --v3;
    if (v5)
    {
      int v6 = a2 + v3 + 2;
      uint64_t result = *(void *)(*(void *)(v2 + 16 * v4) + 8 * (v5 - 1));
      if (v6 == a2) {
        return result;
      }
      goto LABEL_10;
    }
  }
  uint64_t result = 0;
  int v8 = *(_DWORD *)(v2 + 12);
  if (v8)
  {
    int v6 = 1;
    uint64_t result = *(void *)(*(void *)v2 + 8 * (v8 - 1));
    if (a2 != 1)
    {
LABEL_10:
      int v9 = a2 - v6;
      do
      {
        uint64_t result = *(void *)((result & 0xFFFFFFFFFFFFFFC0) + 8 * (result & 0x3F));
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

void llvm::IntervalMapImpl::Path::moveLeft(llvm::IntervalMapImpl::Path *this, unsigned int a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 && *(_DWORD *)(*(void *)this + 12) < *(_DWORD *)(*(void *)this + 8))
  {
    unsigned int v5 = a2;
    do
      --v5;
    while (!*(_DWORD *)(*(void *)this + 16 * v5 + 12));
  }
  else if ((int)v4 - 1 >= a2 || (uint64_t v6 = a2 + 1, v4 == v6))
  {
    unsigned int v5 = 0;
  }
  else
  {
    if (v4 <= v6)
    {
      int v7 = v6 - v4;
      uint64_t v8 = *((unsigned int *)this + 2);
      if (*((_DWORD *)this + 3) < v6)
      {
        uint64_t v16 = *((unsigned int *)this + 2);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, (char *)this + 16, a2 + 1, 16);
        uint64_t v4 = v16;
        uint64_t v6 = a2 + 1;
        uint64_t v8 = *((unsigned int *)this + 2);
      }
      bzero((void *)(*(void *)this + 16 * v8), 16 * (v6 - v4));
      LODWORD(v6) = *((_DWORD *)this + 2) + v7;
    }
    unsigned int v5 = 0;
    *((_DWORD *)this + 2) = v6;
  }
  uint64_t v9 = *(void *)this;
  uint64_t v10 = *(void *)this + 16 * v5;
  unsigned int v11 = *(_DWORD *)(v10 + 12) - 1;
  *(_DWORD *)(v10 + 12) = v11;
  uint64_t v12 = *(void *)(*(void *)v10 + 8 * v11);
  unsigned int v13 = v5 + 1;
  if (v5 + 1 != a2)
  {
    do
    {
      uint64_t v14 = *(void *)this + 16 * v13;
      *(void *)uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v14 + 8) = (v12 & 0x3F) + 1;
      *(_DWORD *)(v14 + 12) = v12 & 0x3F;
      uint64_t v12 = *(void *)((v12 & 0xFFFFFFFFFFFFFFC0) + 8 * (v12 & 0x3F));
      ++v13;
    }
    while (a2 != v13);
    uint64_t v9 = *(void *)this;
  }
  uint64_t v15 = v9 + 16 * a2;
  *(void *)uint64_t v15 = v12 & 0xFFFFFFFFFFFFFFC0;
  *(_DWORD *)(v15 + 8) = (v12 & 0x3F) + 1;
  *(_DWORD *)(v15 + 12) = v12 & 0x3F;
}

uint64_t llvm::IntervalMapImpl::Path::getRightSibling(llvm::IntervalMapImpl::Path *this, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2;
  int v3 = 1;
  unsigned int v4 = 0;
  uint64_t v5 = *(void *)this;
  uint64_t v6 = (int *)(*(void *)this + 16 * a2 - 4);
  while (--v2)
  {
    int v7 = *v6;
    int v8 = *(v6 - 1) - 1;
    v6 -= 4;
    if (v7 != v8)
    {
      int v3 = v2 + 1;
      unsigned int v4 = v2;
      goto LABEL_8;
    }
  }
  if (*(_DWORD *)(v5 + 12) == *(_DWORD *)(v5 + 8) - 1) {
    return 0;
  }
LABEL_8:
  uint64_t result = *(void *)(*(void *)(v5 + 16 * v4) + 8 * (*(_DWORD *)(v5 + 16 * v4 + 12) + 1));
  for (unsigned int i = a2 - v3; i; --i)
    uint64_t result = *(void *)(result & 0xFFFFFFFFFFFFFFC0);
  return result;
}

uint64_t *llvm::IntervalMapImpl::Path::moveRight(uint64_t *this, unsigned int a2)
{
  int v2 = 0;
  uint64_t v3 = *this;
  unsigned int v4 = a2 - 1;
  while (1)
  {
    int v5 = v2;
    uint64_t v6 = v4 + v2;
    if (!(v4 + v2)) {
      break;
    }
    int v8 = *(_DWORD *)(v3 + 16 * v6 + 8);
    int v7 = *(_DWORD *)(v3 + 16 * v6 + 12);
    --v2;
    if (v7 != v8 - 1)
    {
      unsigned int v9 = v7 + 1;
      *(_DWORD *)(v3 + 16 * v6 + 12) = v9;
      if (v9 == v8) {
        return this;
      }
      goto LABEL_7;
    }
  }
  uint64_t v6 = 0;
  int v10 = *(_DWORD *)(v3 + 8);
  unsigned int v9 = *(_DWORD *)(v3 + 12) + 1;
  *(_DWORD *)(v3 + 12) = v9;
  if (v9 == v10) {
    return this;
  }
LABEL_7:
  uint64_t v11 = *(void *)(*(void *)(v3 + 16 * v6) + 8 * v9);
  if (v5)
  {
    do
    {
      uint64_t v12 = *this + 16 * (a2 + v5);
      *(void *)uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v12 + 8) = (v11 & 0x3F) + 1;
      *(_DWORD *)(v12 + 12) = 0;
      uint64_t v11 = *(void *)(v11 & 0xFFFFFFFFFFFFFFC0);
    }
    while (!__CFADD__(v5++, 1));
    uint64_t v3 = *this;
  }
  uint64_t v14 = (unint64_t *)(v3 + 16 * a2);
  unint64_t *v14 = v11 & 0xFFFFFFFFFFFFFFC0;
  v14[1] = (v11 & 0x3F) + 1;
  return this;
}

unint64_t llvm::IntervalMapImpl::distribute(llvm::IntervalMapImpl *this, int a2, unsigned int a3, unsigned int a4, const unsigned int *a5, unsigned int *a6, int a7)
{
  if (!this) {
    return 0;
  }
  unint64_t v7 = 0;
  unsigned int v8 = 0;
  LODWORD(v9) = 0;
  uint64_t v10 = this;
  unsigned int v11 = (a7 + a2) / this;
  unint64_t v12 = (a7 + a2) % this;
  do
  {
    if (v7 >= v12) {
      unsigned int v13 = v11;
    }
    else {
      unsigned int v13 = v11 + 1;
    }
    a5[v7] = v13;
    unsigned int v14 = a6 - v8;
    v8 += v13;
    if (this == v10 && v8 > a6)
    {
      LODWORD(this) = v7;
      uint64_t v9 = v14;
    }
    else
    {
      uint64_t v9 = v9;
    }
    ++v7;
  }
  while (v10 != v7);
  if (a7) {
    --a5[this];
  }
  return this | (unint64_t)(v9 << 32);
}

void llvm::ManagedStaticBase::RegisterManagedStatic(llvm::ManagedStaticBase *this, void *(*a2)(void), void (*a3)(void *))
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB215EC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB215EC0))
  {
    MEMORY[0x1852FDB50](&stru_1EB215EC8);
    __cxa_atexit(MEMORY[0x1E4FBA230], &stru_1EB215EC8, &dword_180159000);
    __cxa_guard_release(&qword_1EB215EC0);
  }
  std::recursive_mutex::lock(&stru_1EB215EC8);
  if (!*(void *)this)
  {
    atomic_store((uint64_t)a2(), (unint64_t *)this);
    uint64_t v6 = _MergedGlobals_48;
    *((void *)this + 1) = a3;
    *((void *)this + 2) = v6;
    _MergedGlobals_48 = (uint64_t)this;
  }

  std::recursive_mutex::unlock(&stru_1EB215EC8);
}

void llvm::deallocate_buffer(llvm *this, void *a2)
{
}

char *llvm::MemoryBuffer::getMemBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  __int16 v10 = 261;
  v9[0] = a3;
  v9[1] = a4;
  uint64_t result = operator new(24, (uint64_t)v9);
  *(void *)uint64_t result = &unk_1EC997E88;
  *((void *)result + 1) = a1;
  *((void *)result + 2) = a1 + a2;
  *a5 = result;
  return result;
}

char *operator new(uint64_t a1, uint64_t a2)
{
  v13[32] = *MEMORY[0x1E4F143B8];
  unsigned int v11 = v13;
  long long v12 = xmmword_1811012D0;
  if (*(unsigned char *)(a2 + 33) == 1)
  {
    size_t v3 = 0;
    unsigned int v4 = 0;
    switch(*(unsigned char *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        unsigned int v4 = *(const void **)a2;
        if (*(void *)a2) {
          size_t v3 = strlen(*(const char **)a2);
        }
        else {
          size_t v3 = 0;
        }
        break;
      case 4:
        uint64_t v9 = *(const char **)a2;
        int v10 = *(char *)(*(void *)a2 + 23);
        if (v10 >= 0) {
          unsigned int v4 = *(const void **)a2;
        }
        else {
          unsigned int v4 = *(const void **)v9;
        }
        if (v10 >= 0) {
          size_t v3 = *(unsigned __int8 *)(*(void *)a2 + 23);
        }
        else {
          size_t v3 = *((void *)v9 + 1);
        }
        break;
      case 5:
      case 6:
        unsigned int v4 = *(const void **)a2;
        size_t v3 = *(void *)(a2 + 8);
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector(a2, (uint64_t)&v11);
    unsigned int v4 = v11;
    size_t v3 = v12;
  }
  int v5 = (char *)operator new(a1 + v3 + 9);
  uint64_t v6 = (size_t *)&v5[a1];
  *uint64_t v6 = v3;
  unint64_t v7 = v6 + 1;
  if (v3) {
    memcpy(v7, v4, v3);
  }
  *((unsigned char *)v7 + v3) = 0;
  if (v11 != v13) {
    free(v11);
  }
  return v5;
}

void llvm::MemoryBuffer::getMemBufferCopy(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, unsigned __int16 a4@<W3>, void *a5@<X8>)
{
  llvm::WritableMemoryBuffer::getNewUninitMemBuffer(a2, a3, a4, &v9);
  uint64_t v8 = v9;
  if (v9)
  {
    if (a2) {
      memmove(*(void **)(v9 + 8), a1, a2);
    }
    *a5 = v8;
  }
  else
  {
    std::generic_category();
    *a5 = 0;
  }
}

void llvm::MemoryBuffer::getFileOrSTDIN(const char ***a1@<X0>, int a2@<W1>, int a3@<W2>, unsigned __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  size_t v17 = v19;
  long long v18 = xmmword_1811012D0;
  if (*((unsigned char *)a1 + 33) == 1)
  {
    switch(*((unsigned char *)a1 + 32))
    {
      case 1:
        goto LABEL_14;
      case 3:
        unsigned int v11 = (const char *)*a1;
        if (!*a1) {
          goto LABEL_14;
        }
        size_t v10 = strlen((const char *)*a1);
        break;
      case 4:
        int v16 = *((char *)*a1 + 23);
        if (v16 >= 0) {
          unsigned int v11 = (const char *)*a1;
        }
        else {
          unsigned int v11 = **a1;
        }
        if (v16 >= 0) {
          size_t v10 = *((unsigned __int8 *)*a1 + 23);
        }
        else {
          size_t v10 = (size_t)(*a1)[1];
        }
        break;
      case 5:
      case 6:
        unsigned int v11 = (const char *)*a1;
        size_t v10 = (size_t)a1[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)a1, (uint64_t)&v17);
    unsigned int v11 = (const char *)v17;
    size_t v10 = v18;
  }
  if (v10 == 1 && *v11 == 45)
  {
    llvm::sys::ChangeStdinMode();
    mlir::Diagnostic::operator mlir::LogicalResult();
    getMemoryBufferForStream();
    char v12 = *(unsigned char *)(a5 + 16);
    if (v22)
    {
      uint64_t v15 = v21;
      *(void *)a5 = v20;
      *(void *)(a5 + 8) = v15;
      *(unsigned char *)(a5 + 16) = v12 | 1;
      unsigned int v14 = v17;
      if (v17 == v19) {
        return;
      }
    }
    else
    {
      uint64_t v13 = v20;
      *(unsigned char *)(a5 + 16) = v12 & 0xFE;
      *(void *)a5 = v13;
      unsigned int v14 = v17;
      if (v17 == v19) {
        return;
      }
    }
  }
  else
  {
LABEL_14:
    getFileAux<llvm::MemoryBuffer>(a5, (unsigned __int8 *)a1, 0xFFFFFFFFFFFFFFFFLL, 0, a2, a3, 0, a4);
    unsigned int v14 = v17;
    if (v17 == v19) {
      return;
    }
  }
  free(v14);
}

llvm::sys::fs *llvm::MemoryBuffer::getFile@<X0>(unsigned __int8 *a1@<X0>, int a2@<W1>, int a3@<W2>, char a4@<W3>, unsigned __int16 a5@<W4>, uint64_t a6@<X8>)
{
  return getFileAux<llvm::MemoryBuffer>(a6, a1, 0xFFFFFFFFFFFFFFFFLL, 0, a2, a3, a4, a5);
}

llvm::sys::fs *getFileAux<llvm::MemoryBuffer>(uint64_t a1, unsigned __int8 *a2, unint64_t a3, off_t a4, int a5, int a6, char a7, unsigned __int16 a8)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a5) {
    int v15 = 3;
  }
  else {
    int v15 = 0;
  }
  llvm::sys::fs::openNativeFileForRead(a2, v15, 0, (uint64_t)&v22);
  if (v23)
  {
    uint64_t v21 = v22;
    char v22 = 0;
    uint64_t v18 = llvm::errorToErrorCode((void **)&v21);
    *(unsigned char *)(a1 + 16) |= 1u;
    *(void *)a1 = v18;
    *(void *)(a1 + 8) = v19;
    uint64_t result = v21;
    if (v21) {
      uint64_t result = (llvm::sys::fs *)(*(uint64_t (**)(llvm::sys::fs *))(*(void *)v21 + 8))(v21);
    }
  }
  else
  {
    int v20 = (int)v22;
    getOpenFileImpl<llvm::MemoryBuffer>(a1, (llvm::sys::fs *)v22, (llvm::sys::fs::file_status *)a2, -1, a3, a4, a6, a7, a8);
    uint64_t result = (llvm::sys::fs *)llvm::sys::fs::closeFile((llvm::sys::fs *)&v20, v16);
  }
  if (v23)
  {
    uint64_t result = v22;
    char v22 = 0;
    if (result) {
      return (llvm::sys::fs *)(*(uint64_t (**)(llvm::sys::fs *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void llvm::WritableMemoryBuffer::getNewUninitMemBuffer(size_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 a3@<W2>, void *a4@<X8>)
{
  v21[32] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a3 & 0xFF00;
  char v7 = a3;
  uint64_t v19 = v21;
  long long v20 = xmmword_1811012D0;
  if (*(unsigned char *)(a2 + 33) == 1)
  {
    size_t v8 = 0;
    uint64_t v9 = 0;
    switch(*(unsigned char *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        uint64_t v9 = *(const void **)a2;
        if (*(void *)a2) {
          size_t v8 = strlen(*(const char **)a2);
        }
        else {
          size_t v8 = 0;
        }
        break;
      case 4:
        size_t v17 = *(const char **)a2;
        int v18 = *(char *)(*(void *)a2 + 23);
        if (v18 >= 0) {
          uint64_t v9 = *(const void **)a2;
        }
        else {
          uint64_t v9 = *(const void **)v17;
        }
        if (v18 >= 0) {
          size_t v8 = *(unsigned __int8 *)(*(void *)a2 + 23);
        }
        else {
          size_t v8 = *((void *)v17 + 1);
        }
        break;
      case 5:
      case 6:
        uint64_t v9 = *(const void **)a2;
        size_t v8 = *(void *)(a2 + 8);
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector(a2, (uint64_t)&v19);
    uint64_t v9 = v19;
    size_t v8 = v20;
  }
  size_t v10 = v8 + 33;
  if (v6) {
    uint64_t v11 = 1 << v7;
  }
  else {
    uint64_t v11 = 16;
  }
  size_t v12 = a1 + v11 + v10 + 1;
  if (v12 <= a1)
  {
    unsigned int v14 = 0;
  }
  else
  {
    uint64_t v13 = operator new(v12, MEMORY[0x1E4FBA2D0]);
    unsigned int v14 = v13;
    if (v13)
    {
      v13[3] = v8;
      int v15 = (char *)(v13 + 4);
      if (v8) {
        memcpy(v13 + 4, v9, v8);
      }
      v15[v8] = 0;
      uint64_t v16 = ((unint64_t)v14 + v10 + v11 - 1) & -v11;
      *(unsigned char *)(v16 + a1) = 0;
      void *v14 = &unk_1EC997EC0;
      v14[1] = v16;
      void v14[2] = v16 + a1;
    }
  }
  *a4 = v14;
  if (v19 != v21) {
    free(v19);
  }
}

void llvm::MemoryBuffer::getOpenFile(llvm::sys::fs *a1@<X0>, llvm::sys::fs::file_status *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, unsigned __int16 a6@<W5>, uint64_t a7@<X8>)
{
}

void getOpenFileImpl<llvm::MemoryBuffer>(uint64_t a1, llvm::sys::fs *this, llvm::sys::fs::file_status *a3, __darwin_time_t a4, unint64_t tv_sec, off_t a6, int a7, char a8, uint64_t a9)
{
  v43.st_ctimespec.tv_nsec = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB215F18, memory_order_acquire) & 1) == 0)
  {
    __darwin_time_t v38 = a4;
    uint64_t v39 = (llvm::sys::Process *)__cxa_guard_acquire(&qword_1EB215F18);
    a4 = v38;
    if (v39)
    {
      dword_1EB215F0C = llvm::sys::Process::getPageSizeEstimate(v39);
      __cxa_guard_release(&qword_1EB215F18);
      a4 = v38;
    }
  }
  if (tv_sec == -1 && (tv_sec = a4, a4 == -1))
  {
    memset(&v43, 0, 44);
    *(uint64_t *)((char *)&v43.st_atimespec.tv_nsec + 4) = 0xFFFFLL;
    WORD2(v43.st_mtimespec.tv_sec) = 0;
    v43.st_mtimespec.tv_nsec = 0;
    uint64_t v25 = llvm::sys::fs::status(this, &v43, a3);
    if (v25)
    {
      *(unsigned char *)(a1 + 16) |= 1u;
      *(void *)a1 = v25;
      *(void *)(a1 + 8) = v26;
      return;
    }
    if (LODWORD(v43.st_atimespec.tv_nsec) != 2 && LODWORD(v43.st_atimespec.tv_nsec) != 5)
    {
      getMemoryBufferForStream();
      char v35 = *(unsigned char *)(a1 + 16);
      if (v42)
      {
        char v36 = v35 | 1;
        uint64_t v37 = v41[0];
        *(void *)(a1 + 8) = v41[1];
      }
      else
      {
        char v36 = v35 & 0xFE;
        uint64_t v37 = v41[0];
      }
      *(unsigned char *)(a1 + 16) = v36;
      *(void *)a1 = v37;
      return;
    }
    tv_sec = v43.st_atimespec.tv_sec;
    a4 = v43.st_atimespec.tv_sec;
    unint64_t v16 = dword_1EB215F0C;
    if (a7)
    {
LABEL_5:
      if (a8) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    unint64_t v16 = dword_1EB215F0C;
    if (a7) {
      goto LABEL_5;
    }
  }
  BOOL v17 = tv_sec >= 0x4000 && tv_sec >= v16;
  char v18 = !v17;
  if (v17 && a7)
  {
    if (a4 == -1)
    {
      memset(&v43, 0, 44);
      *(uint64_t *)((char *)&v43.st_atimespec.tv_nsec + 4) = 0xFFFFLL;
      WORD2(v43.st_mtimespec.tv_sec) = 0;
      v43.st_mtimespec.tv_nsec = 0;
      if (llvm::sys::fs::status(this, &v43, a3)) {
        goto LABEL_27;
      }
      a4 = v43.st_atimespec.tv_sec;
      if (tv_sec + a6 != v43.st_atimespec.tv_sec) {
        goto LABEL_27;
      }
LABEL_17:
      if ((a4 & ((int)v16 - 1)) == 0) {
        goto LABEL_27;
      }
LABEL_20:
      v43.st_dev = 0;
      v43.st_ino = (__darwin_ino64_t)std::system_category();
      uint64_t v19 = operator new(48, (uint64_t)a3);
      *(void *)uint64_t v19 = &unk_1EC99A6E8;
      PageSizeEstimate = (llvm::sys::Process *)llvm::sys::Process::getPageSizeEstimate((llvm::sys::Process *)v19);
      size_t v21 = (((int)PageSizeEstimate - 1) & (unint64_t)a6) + tv_sec;
      int v22 = llvm::sys::Process::getPageSizeEstimate(PageSizeEstimate);
      llvm::sys::fs::mapped_file_region::mapped_file_region((uint64_t)(v19 + 24), (int)this, 0, v21, -v22 & (unint64_t)a6, &v43);
      if (!v43.st_dev)
      {
        uint64_t Loc = (llvm::sys::Process *)mlir::Token::getLoc((mlir::Token *)(v19 + 24));
        uint64_t v24 = (char *)Loc + ((int)(llvm::sys::Process::getPageSizeEstimate(Loc) - 1) & (unint64_t)a6);
        *((void *)v19 + 1) = v24;
        *((void *)v19 + 2) = &v24[tv_sec];
        if (!v43.st_dev)
        {
          *(unsigned char *)(a1 + 16) &= ~1u;
          *(void *)a1 = v19;
          return;
        }
      }
      (*(void (**)(char *))(*(void *)v19 + 8))(v19);
      goto LABEL_27;
    }
    if (tv_sec + a6 == a4) {
      goto LABEL_17;
    }
  }
  else if ((v18 & 1) == 0)
  {
    goto LABEL_20;
  }
LABEL_27:
  llvm::WritableMemoryBuffer::getNewUninitMemBuffer(tv_sec, (uint64_t)a3, a9, v41);
  if (!v41[0])
  {
    uint64_t v34 = std::generic_category();
    *(unsigned char *)(a1 + 16) |= 1u;
    *(void *)a1 = 12;
    *(void *)(a1 + 8) = v34;
    return;
  }
  char v27 = *(char **)(v41[0] + 8);
  unint64_t v28 = *(void *)(v41[0] + 16) - (void)v27;
  do
  {
    if (!v28) {
      goto LABEL_44;
    }
    llvm::sys::fs::readNativeFileSlice((int)this, v27, v28, a6, (uint64_t)&v43);
    if (v43.st_ino)
    {
      unint64_t v30 = *(void **)&v43.st_dev;
      *(void *)&v43.st_dev = 0;
      unint64_t v40 = v30;
      uint64_t v31 = llvm::errorToErrorCode(&v40);
      *(unsigned char *)(a1 + 16) |= 1u;
      *(void *)a1 = v31;
      *(void *)(a1 + 8) = v32;
      if (v40)
      {
        (*(void (**)(void *))(*v40 + 8))(v40);
        int v29 = 1;
        if ((v43.st_ino & 1) == 0) {
          continue;
        }
      }
      else
      {
        int v29 = 1;
        if ((v43.st_ino & 1) == 0) {
          continue;
        }
      }
    }
    else if (*(void *)&v43.st_dev)
    {
      int v29 = 0;
      v28 -= *(void *)&v43.st_dev;
      v27 += *(void *)&v43.st_dev;
      a6 += *(void *)&v43.st_dev;
      if ((v43.st_ino & 1) == 0) {
        continue;
      }
    }
    else
    {
      bzero(v27, v28);
      int v29 = 3;
      if ((v43.st_ino & 1) == 0) {
        continue;
      }
    }
    uint64_t v33 = *(void *)&v43.st_dev;
    *(void *)&v43.st_dev = 0;
    if (v33) {
      (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
    }
  }
  while (!v29);
  if (v29 == 3)
  {
LABEL_44:
    *(unsigned char *)(a1 + 16) &= ~1u;
    *(void *)a1 = v41[0];
    return;
  }
  if (v41[0]) {
    (*(void (**)(void))(*(void *)v41[0] + 8))(v41[0]);
  }
}

void getMemoryBufferForStream()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  v16[2048] = *MEMORY[0x1E4F143B8];
  unsigned int v14 = v16;
  long long v15 = xmmword_181127DD0;
  llvm::sys::fs::readNativeFileToEOF(v4, &v14, 0x4000uLL, &v13);
  if (v13)
  {
    size_t v12 = (void *)v13;
    uint64_t v13 = 0;
    uint64_t v5 = llvm::errorToErrorCode(&v12);
    *(unsigned char *)(v3 + 16) |= 1u;
    *(void *)uint64_t v3 = v5;
    *(void *)(v3 + 8) = v6;
    if (v12) {
      (*(void (**)(void *))(*v12 + 8))(v12);
    }
    if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      char v7 = v14;
      if (v14 == v16) {
        return;
      }
      goto LABEL_12;
    }
LABEL_11:
    char v7 = v14;
    if (v14 == v16) {
      return;
    }
    goto LABEL_12;
  }
  size_t v8 = v14;
  size_t v9 = v15;
  llvm::WritableMemoryBuffer::getNewUninitMemBuffer(v15, v2, 0, &v13);
  uint64_t v10 = v13;
  if (v13)
  {
    if (v9) {
      memmove(*(void **)(v13 + 8), v8, v9);
    }
    *(unsigned char *)(v3 + 16) &= ~1u;
    *(void *)uint64_t v3 = v10;
    goto LABEL_11;
  }
  uint64_t v11 = std::generic_category();
  *(unsigned char *)(v3 + 16) |= 1u;
  *(void *)uint64_t v3 = 12;
  *(void *)(v3 + 8) = v11;
  char v7 = v14;
  if (v14 == v16) {
    return;
  }
LABEL_12:
  free(v7);
}

uint64_t anonymous namespace'::MemoryBufferMem<llvm::MemoryBuffer>::getBufferIdentifier(uint64_t a1)
{
  return a1 + 32;
}

uint64_t anonymous namespace'::MemoryBufferMem<llvm::MemoryBuffer>::getBufferKind()
{
  return 0;
}

uint64_t llvm::sys::Process::getPageSizeEstimate(llvm::sys::Process *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  llvm::sys::Process::getPageSize((uint64_t)&v6);
  if ((v7 & 1) == 0) {
    return v6;
  }
  uint64_t v2 = v6;
  uint64_t v6 = 0;
  int v4 = v2;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v4, &v5);
  if (v4) {
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  if (v7)
  {
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    if (v3) {
      (*(void (**)(void *))(*v3 + 8))(v3);
    }
  }
  return 4096;
}

uint64_t anonymous namespace'::MemoryBufferMem<llvm::WritableMemoryBuffer>::getBufferIdentifier(uint64_t a1)
{
  return a1 + 32;
}

uint64_t anonymous namespace'::MemoryBufferMem<llvm::WritableMemoryBuffer>::getBufferKind()
{
  return 0;
}

void *anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::~MemoryBufferMMapFile(void *a1)
{
  *a1 = &unk_1EC99A6E8;
  llvm::sys::fs::mapped_file_region::unmapImpl((llvm::sys::fs::mapped_file_region *)(a1 + 3));
  return a1;
}

void anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::~MemoryBufferMMapFile(void *a1)
{
  *a1 = &unk_1EC99A6E8;
  llvm::sys::fs::mapped_file_region::unmapImpl((llvm::sys::fs::mapped_file_region *)(a1 + 3));

  operator delete(a1);
}

uint64_t anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::getBufferIdentifier(uint64_t a1)
{
  return a1 + 56;
}

void *anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::dontNeedIfMmap(uint64_t a1)
{
  return llvm::sys::fs::mapped_file_region::dontNeedImpl((llvm::sys::fs::mapped_file_region *)(a1 + 24));
}

uint64_t anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::getBufferKind()
{
  return 1;
}

llvm::MemoryBufferRef *llvm::MemoryBufferRef::MemoryBufferRef(llvm::MemoryBufferRef *this, const llvm::MemoryBuffer *a2)
{
  uint64_t v3 = *((void *)a2 + 1);
  uint64_t v4 = *((void *)a2 + 2) - v3;
  *(void *)this = v3;
  *((void *)this + 1) = v4;
  *((void *)this + 2) = (*(uint64_t (**)(const llvm::MemoryBuffer *))(*(void *)a2 + 16))(a2);
  *((void *)this + 3) = v5;
  return this;
}

llvm::raw_ostream *llvm::write_integer(llvm::raw_ostream *a1, unsigned int a2, size_t a3, int a4)
{
  return write_unsigned_impl<unsigned int>(a1, a2, a3, a4, 0);
}

{
  int v4;

  if ((a2 & 0x80000000) != 0)
  {
    a2 = -a2;
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  return write_unsigned_impl<unsigned int>(a1, a2, a3, a4, v4);
}

llvm::raw_ostream *llvm::write_integer(llvm::raw_ostream *a1, unint64_t a2, size_t a3, int a4)
{
  return write_unsigned<unsigned long>(a1, a2, a3, a4, 0);
}

{
  int v4;

  if ((a2 & 0x8000000000000000) != 0)
  {
    a2 = -(uint64_t)a2;
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  return write_unsigned<unsigned long>(a1, a2, a3, a4, v4);
}

llvm::raw_ostream *write_unsigned<unsigned long>(llvm::raw_ostream *this, unint64_t a2, size_t a3, int a4, int a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!HIDWORD(a2))
  {
    return write_unsigned_impl<unsigned int>(this, a2, a3, a4, a5);
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  do
  {
    v22[v10-- + 127] = (a2 % 0xA) | 0x30;
    v9 += 0x100000000;
    BOOL v11 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v11);
  size_t v12 = v9 >> 32;
  if (!a5)
  {
LABEL_10:
    if (a4 != 1) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  uint64_t v13 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v13 < *((void *)this + 3))
  {
    *((void *)this + 4) = v13 + 1;
    unsigned char *v13 = 45;
    goto LABEL_10;
  }
  llvm::raw_ostream::write(this, 45);
  if (a4 != 1)
  {
LABEL_11:
    if (v12 < a3)
    {
      size_t v14 = v12;
      do
      {
        while (1)
        {
          long long v15 = (unsigned char *)*((void *)this + 4);
          if ((unint64_t)v15 >= *((void *)this + 3)) {
            break;
          }
          *((void *)this + 4) = v15 + 1;
          unsigned char *v15 = 48;
          if (++v14 >= a3) {
            goto LABEL_16;
          }
        }
        llvm::raw_ostream::write(this, 48);
        ++v14;
      }
      while (v14 < a3);
    }
  }
LABEL_16:
  unint64_t v16 = (char *)&v23 - v12;
  if (a4 != 1) {
    return llvm::raw_ostream::write(this, v16, v12);
  }
  unint64_t v17 = (v12 - 1) % 3;
  size_t v18 = v12 - (v17 + 1);
  if (v12 >= v17 + 1) {
    size_t v19 = v17 + 1;
  }
  else {
    size_t v19 = v12;
  }
  uint64_t result = llvm::raw_ostream::write(this, v16, v19);
  if (v18)
  {
    unint64_t v20 = -3 * ((-(int)v10 - 1) / 3uLL);
    do
    {
      size_t v21 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v21 < *((void *)this + 3))
      {
        *((void *)this + 4) = v21 + 1;
        *size_t v21 = 44;
      }
      else
      {
        llvm::raw_ostream::write(this, 44);
      }
      uint64_t result = llvm::raw_ostream::write(this, (const char *)&v23 + v20, 3uLL);
      v20 += 3;
    }
    while (v20);
  }
  return result;
}

llvm::raw_ostream *llvm::write_hex(llvm::raw_ostream *a1, unint64_t a2, int a3, unint64_t a4, char a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    if (a4 > 0x7F) {
      LODWORD(a4) = 128;
    }
  }
  else
  {
    LODWORD(a4) = 0;
  }
  unsigned int v5 = (67 - __clz(a2)) >> 2;
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  *(void *)&long long v6 = 0x3030303030303030;
  *((void *)&v6 + 1) = 0x3030303030303030;
  v11[6] = v6;
  v11[7] = v6;
  void v11[4] = v6;
  v11[5] = v6;
  LODWORD(v7) = v5 + 2 * ((a3 & 0xFFFFFFFE) == 2);
  unint64_t v11[2] = v6;
  uint64_t v11[3] = v6;
  if (v7 <= a4) {
    size_t v7 = a4;
  }
  else {
    size_t v7 = v7;
  }
  v11[0] = v6;
  v11[1] = v6;
  if ((a3 & 0xFFFFFFFE) == 2) {
    BYTE1(v11[0]) = 120;
  }
  if (a2)
  {
    uint64_t v8 = (char *)&v11[-1] + v7 + 15;
    do
    {
      *v8-- = llvm::hexdigit(unsigned int,BOOL)::LUT[a2 & 0xF] | (32 * ((a3 & 0xFFFFFFFD) != 0));
      BOOL v9 = a2 > 0xF;
      a2 >>= 4;
    }
    while (v9);
  }
  return llvm::raw_ostream::write(a1, (const char *)v11, v7);
}

void llvm::write_double(llvm::raw_ostream *this, unsigned int a2, unint64_t a3, char a4, double a5)
{
  v38[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 2;
  if (a2 < 2) {
    uint64_t v6 = 6;
  }
  if (a4) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = v6;
  }
  if (fabs(a5) != INFINITY)
  {
    char v36 = (char *)v38;
    long long v37 = xmmword_1810FF9F0;
    if (a2 == 1) {
      char v13 = 69;
    }
    else {
      char v13 = 102;
    }
    int v27 = 0;
    if (a2) {
      char v14 = v13;
    }
    else {
      char v14 = 101;
    }
    char v31 = 0;
    uint64_t v32 = 0;
    int v33 = 1;
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = &unk_1EC9A3930;
    uint64_t v34 = (const char **)&v36;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v26, 0, 0, 0);
    if ((unint64_t)(v29 - (void)v30) > 1)
    {
      *v30++ = 11813;
      unint64_t v16 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v26, v7);
      unint64_t v17 = (char *)*((void *)v16 + 4);
      if ((unint64_t)v17 >= *((void *)v16 + 3))
      {
LABEL_25:
        llvm::raw_ostream::write(v16, v14);
        if (a2 != 3)
        {
LABEL_26:
          uint64_t v18 = v37;
          if ((unint64_t)(v37 + 1) > *((void *)&v37 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v36, v38, v37 + 1, 1);
            uint64_t v18 = v37;
          }
          v36[v18] = 0;
          snprintf(__str, 0x20uLL, v36, *(void *)&a5, &unk_1EC9A18F0, v36, *(void *)&a5);
          size_t v19 = strlen(__str);
          unint64_t v20 = (void *)*((void *)this + 4);
          if (v19 > *((void *)this + 3) - (void)v20)
          {
            llvm::raw_ostream::write(this, __str, v19);
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v26);
            size_t v21 = v36;
            if (v36 == (char *)v38) {
              return;
            }
            goto LABEL_46;
          }
          if (v19)
          {
            memcpy(v20, __str, v19);
            *((void *)this + 4) += v19;
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v26);
            size_t v21 = v36;
            if (v36 == (char *)v38) {
              return;
            }
            goto LABEL_46;
          }
          goto LABEL_45;
        }
LABEL_34:
        double v22 = a5 * 100.0;
        uint64_t v23 = v37;
        if ((unint64_t)(v37 + 1) > *((void *)&v37 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v36, v38, v37 + 1, 1);
          uint64_t v23 = v37;
        }
        v36[v23] = 0;
        snprintf(__str, 0x20uLL, v36, *(void *)&v22, &unk_1EC9A18F0, v36, *(void *)&v22);
        size_t v24 = strlen(__str);
        uint64_t v25 = (unsigned char *)*((void *)this + 4);
        if (v24 <= *((void *)this + 3) - (void)v25)
        {
          if (v24)
          {
            memcpy(v25, __str, v24);
            uint64_t v25 = (unsigned char *)(*((void *)this + 4) + v24);
            *((void *)this + 4) = v25;
          }
        }
        else
        {
          llvm::raw_ostream::write(this, __str, v24);
          uint64_t v25 = (unsigned char *)*((void *)this + 4);
        }
        if ((unint64_t)v25 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 37);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v26);
          size_t v21 = v36;
          if (v36 == (char *)v38) {
            return;
          }
LABEL_46:
          free(v21);
          return;
        }
        *((void *)this + 4) = v25 + 1;
        *uint64_t v25 = 37;
LABEL_45:
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v26);
        size_t v21 = v36;
        if (v36 == (char *)v38) {
          return;
        }
        goto LABEL_46;
      }
    }
    else
    {
      long long v15 = llvm::raw_ostream::write((llvm::raw_ostream *)&v26, "%.", 2uLL);
      unint64_t v16 = llvm::raw_ostream::operator<<(v15, v7);
      unint64_t v17 = (char *)*((void *)v16 + 4);
      if ((unint64_t)v17 >= *((void *)v16 + 3)) {
        goto LABEL_25;
      }
    }
    *((void *)v16 + 4) = v17 + 1;
    char *v17 = v14;
    if (a2 != 3) {
      goto LABEL_26;
    }
    goto LABEL_34;
  }
  if (a5 >= 0.0) {
    BOOL v9 = "INF";
  }
  else {
    BOOL v9 = "-INF";
  }
  if (a5 >= 0.0) {
    size_t v10 = 3;
  }
  else {
    size_t v10 = 4;
  }
  BOOL v11 = (void *)*((void *)this + 4);
  if (v10 <= *((void *)this + 3) - (void)v11)
  {
    memcpy(v11, v9, v10);
    *((void *)this + 4) += v10;
  }
  else
  {
    llvm::raw_ostream::write(this, v9, v10);
  }
}

BOOL llvm::isPrefixedHexStyle(int a1)
{
  return (a1 & 0xFFFFFFFE) == 2;
}

llvm::raw_ostream *write_unsigned_impl<unsigned int>(llvm::raw_ostream *this, unsigned int a2, size_t a3, int a4, int a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  do
  {
    v22[v9-- + 127] = (a2 % 0xA) | 0x30;
    v8 += 0x100000000;
    BOOL v10 = a2 > 9;
    a2 /= 0xAu;
  }
  while (v10);
  size_t v11 = v8 >> 32;
  if (!a5)
  {
LABEL_6:
    if (a4 == 1) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  uint64_t v12 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v12 < *((void *)this + 3))
  {
    *((void *)this + 4) = v12 + 1;
    unsigned char *v12 = 45;
    goto LABEL_6;
  }
  llvm::raw_ostream::write(this, 45);
  if (a4 == 1) {
    goto LABEL_14;
  }
LABEL_9:
  if (v11 < a3)
  {
    size_t v13 = v11;
    do
    {
      while (1)
      {
        char v14 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v14 >= *((void *)this + 3)) {
          break;
        }
        *((void *)this + 4) = v14 + 1;
        unsigned char *v14 = 48;
        if (++v13 >= a3) {
          goto LABEL_14;
        }
      }
      llvm::raw_ostream::write(this, 48);
      ++v13;
    }
    while (v13 < a3);
  }
LABEL_14:
  long long v15 = (char *)&v23 - v11;
  if (a4 != 1) {
    return llvm::raw_ostream::write(this, v15, v11);
  }
  unint64_t v16 = (v11 - 1) % 3;
  size_t v17 = v11 - (v16 + 1);
  if (v11 >= v16 + 1) {
    size_t v18 = v16 + 1;
  }
  else {
    size_t v18 = v11;
  }
  uint64_t result = llvm::raw_ostream::write(this, v15, v18);
  if (v17)
  {
    unint64_t v20 = -3 * ((-(int)v9 - 1) / 3uLL);
    do
    {
      size_t v21 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v21 < *((void *)this + 3))
      {
        *((void *)this + 4) = v21 + 1;
        *size_t v21 = 44;
      }
      else
      {
        llvm::raw_ostream::write(this, 44);
      }
      uint64_t result = llvm::raw_ostream::write(this, (const char *)&v23 + v20, 3uLL);
      v20 += 3;
    }
    while (v20);
  }
  return result;
}

llvm::PrettyStackTraceEntry *llvm::PrettyStackTraceEntry::PrettyStackTraceEntry(llvm::PrettyStackTraceEntry *this)
{
  *(void *)this = &unk_1EC9A39B0;
  int v2 = GlobalSigInfoGenerationCounter;
  uint64_t v3 = (llvm *)ThreadLocalSigInfoGenerationCounter();
  if (*(_DWORD *)v3) {
    BOOL v4 = *(_DWORD *)v3 == v2;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    unsigned int v5 = v3;
    uint64_t v6 = (llvm::raw_ostream *)llvm::errs(v3);
    PrintCurStackTrace(v6);
    *unsigned int v5 = v2;
  }
  unint64_t v7 = (void *)PrettyStackTraceHead();
  *((void *)this + 1) = *v7;
  *unint64_t v7 = this;
  return this;
}

void llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry(llvm::PrettyStackTraceEntry *this)
{
  *(void *)this = &unk_1EC9A39B0;
  uint64_t v1 = (void *)PrettyStackTraceHead();
  void *v1 = v2;
  int v3 = GlobalSigInfoGenerationCounter;
  BOOL v4 = (llvm *)ThreadLocalSigInfoGenerationCounter();
  if (*(_DWORD *)v4) {
    BOOL v5 = *(_DWORD *)v4 == v3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = v4;
    unint64_t v7 = (llvm::raw_ostream *)llvm::errs(v4);
    PrintCurStackTrace(v7);
    *uint64_t v6 = v3;
  }
}

llvm::PrettyStackTraceFormat *llvm::PrettyStackTraceFormat::PrettyStackTraceFormat(llvm::PrettyStackTraceFormat *this, const char *a2, ...)
{
  va_start(va, a2);
  *(void *)this = &unk_1EC9A39B0;
  int v4 = GlobalSigInfoGenerationCounter;
  BOOL v5 = (llvm *)ThreadLocalSigInfoGenerationCounter();
  if (*(_DWORD *)v5) {
    BOOL v6 = *(_DWORD *)v5 == v4;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    unint64_t v7 = v5;
    uint64_t v8 = (llvm::raw_ostream *)llvm::errs(v5);
    PrintCurStackTrace(v8);
    *unint64_t v7 = v4;
  }
  uint64_t v9 = (void *)PrettyStackTraceHead();
  *((void *)this + 1) = *v9;
  *uint64_t v9 = this;
  *((void *)this + 2) = (char *)this + 40;
  BOOL v10 = (char **)((char *)this + 16);
  *(void *)this = &unk_1EC9A39D8;
  *(_OWORD *)((char *)this + 24) = xmmword_1810FE500;
  int v11 = vsnprintf(0, 0, a2, va);
  if ((v11 & 0x80000000) == 0)
  {
    unint64_t v12 = (v11 + 1);
    unint64_t v13 = *((void *)this + 3);
    if (v13 != v12)
    {
      if (v13 <= v12)
      {
        if (*((void *)this + 4) < v12)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)this + 16, (char *)this + 40, v12, 1);
          unint64_t v13 = *((void *)this + 3);
        }
        if (v12 != v13) {
          bzero(&(*v10)[v13], v12 - v13);
        }
      }
      *((void *)this + 3) = v12;
    }
    vsnprintf(*v10, v12, a2, va);
  }
  return this;
}

llvm::raw_ostream *llvm::PrettyStackTraceFormat::print(llvm::PrettyStackTraceFormat *this, llvm::raw_ostream *a2)
{
  uint64_t result = llvm::raw_ostream::write(a2, *((const char **)this + 2), *((void *)this + 3));
  int v3 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v3)
  {
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    unsigned char *v3 = 10;
    ++*((void *)result + 4);
  }
  return result;
}

void llvm::PrettyStackTraceFormat::~PrettyStackTraceFormat(llvm::PrettyStackTraceFormat *this)
{
  *(void *)this = &unk_1EC9A39D8;
  uint64_t v2 = (char *)*((void *)this + 2);
  if (v2 != (char *)this + 40) {
    free(v2);
  }
  *(void *)this = &unk_1EC9A39B0;
  int v3 = (void *)PrettyStackTraceHead();
  void *v3 = v4;
  int v5 = GlobalSigInfoGenerationCounter;
  BOOL v6 = (llvm *)ThreadLocalSigInfoGenerationCounter();
  if (*(_DWORD *)v6) {
    BOOL v7 = *(_DWORD *)v6 == v5;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = (llvm::raw_ostream *)llvm::errs(v6);
    PrintCurStackTrace(v9);
    *uint64_t v8 = v5;
  }
}

{
  char *v2;
  void *v3;
  uint64_t v4;
  int v5;
  llvm *v6;
  BOOL v7;
  _DWORD *v8;
  llvm::raw_ostream *v9;
  uint64_t vars8;

  *(void *)this = &unk_1EC9A39D8;
  uint64_t v2 = (char *)*((void *)this + 2);
  if (v2 != (char *)this + 40) {
    free(v2);
  }
  *(void *)this = &unk_1EC9A39B0;
  int v3 = (void *)PrettyStackTraceHead();
  void *v3 = v4;
  int v5 = GlobalSigInfoGenerationCounter;
  BOOL v6 = (llvm *)ThreadLocalSigInfoGenerationCounter();
  if (*(_DWORD *)v6) {
    BOOL v7 = *(_DWORD *)v6 == v5;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = (llvm::raw_ostream *)llvm::errs(v6);
    PrintCurStackTrace(v9);
    *uint64_t v8 = v5;
  }

  operator delete(this);
}

void PrintCurStackTrace(llvm::raw_ostream *a1)
{
  uint64_t v2 = (void *)PrettyStackTraceHead();
  if (*v2)
  {
    int v3 = v2;
    uint64_t v4 = *((void *)a1 + 4);
    if ((unint64_t)(*((void *)a1 + 3) - v4) > 0xB)
    {
      *(_DWORD *)(v4 + 8) = 171602029;
      *(void *)uint64_t v4 = *(void *)"Stack dump:\n";
      *((void *)a1 + 4) += 12;
      int v5 = (void *)*v2;
      void *v2 = 0;
      if (!v5) {
        goto LABEL_15;
      }
    }
    else
    {
      llvm::raw_ostream::write(a1, "Stack dump:\n", 0xCuLL);
      int v5 = (void *)*v3;
      void *v3 = 0;
      if (!v5)
      {
LABEL_15:
        void *v3 = v5;
        if (*((void *)a1 + 4) != *((void *)a1 + 2)) {
          llvm::raw_ostream::flush_nonempty(a1);
        }
        return;
      }
    }
    BOOL v6 = 0;
    BOOL v7 = v5;
    do
    {
      uint64_t v8 = v6;
      BOOL v6 = v7;
      BOOL v7 = (void *)v7[1];
      v6[1] = v8;
    }
    while (v7);
    unsigned int v9 = 0;
    BOOL v10 = v6;
    do
    {
      int v11 = llvm::raw_ostream::operator<<(a1, v9);
      unint64_t v12 = (_WORD *)*((void *)v11 + 4);
      if (*((void *)v11 + 3) - (void)v12 > 1uLL)
      {
        _WORD *v12 = 2350;
        *((void *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, ".\t", 2uLL);
      }
      llvm::sys::Watchdog::Watchdog((llvm::sys::Watchdog *)&v15, 5u);
      (*(void (**)(void *, llvm::raw_ostream *))(*v10 + 16))(v10, a1);
      llvm::sys::Watchdog::~Watchdog((llvm::sys::Watchdog *)&v15);
      BOOL v10 = (void *)v10[1];
      ++v9;
    }
    while (v10);
    unint64_t v13 = 0;
    do
    {
      char v14 = v6;
      BOOL v6 = (void *)v6[1];
      v14[1] = v13;
      unint64_t v13 = v14;
    }
    while (v6);
    goto LABEL_15;
  }
}

void llvm::initRandomSeedOptions(llvm *this)
{
  if (!atomic_load_explicit(Seed, memory_order_acquire)) {
}
  }

uint64_t anonymous namespace'::CreateSeed::call(_anonymous_namespace_::CreateSeed *this)
{
  uint64_t v1 = operator new(0xC8uLL);
  *(void *)&long long v7 = "seed";
  *((void *)&v7 + 1) = 4;
  int v6 = 1;
  *(void *)&long long v5 = "Seed for the random number generator";
  *((void *)&v5 + 1) = 36;
  int v3 = 0;
  uint64_t v4 = &v3;
  return llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::opt<char [9],llvm::cl::value_desc,llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)v1, (int8x16_t *)"rng-seed", &v7, &v6, &v5, &v4);
}

uint64_t llvm::object_deleter<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>>::call(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::opt<char [9],llvm::cl::value_desc,llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, int8x16_t *a2, _OWORD *a3, _WORD *a4, _OWORD *a5, int **a6)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  unint64_t v12 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 136) = &unk_1EC9A3B40;
  *(void *)a1 = &unk_1EC9A40A0;
  *(void *)(a1 + 160) = &unk_1EC9A44D0;
  *(void *)(a1 + 168) = &unk_1EC9CE7B0;
  *(void *)(a1 + 192) = a1 + 168;
  unint64_t v16 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v16);
  *(_OWORD *)(a1 + 48) = *a3;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a5;
  uint64_t v17 = **a6;
  *(void *)(a1 + 128) = v17;
  *(unsigned char *)(a1 + 152) = 1;
  *(void *)(a1 + 144) = v17;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::Regex::Regex(uint64_t a1, char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = operator new(0x20uLL);
  *uint64_t v8 = 0u;
  v8[1] = 0u;
  *(void *)a1 = v8;
  *((void *)v8 + 2) = &a2[a3];
  *(_DWORD *)(a1 + 8) = llvm_regcomp((uint64_t)v8, a2, ((4 * a4) & 8 | (2 * (a4 & 1)) | (a4 >> 2) & 1) ^ 0x21);
  return a1;
}

void llvm::Regex::~Regex(void **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    llvm_regfree((uint64_t)v2);
    if (*this) {
      operator delete(*this);
    }
  }
}

uint64_t llvm::Regex::match(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v36[16] = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    if (*(_DWORD *)(a1 + 8)) {
      return 0;
    }
    goto LABEL_12;
  }
  if ((*(char *)(a5 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a5 + 23)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (*(void *)(a5 + 8)) {
LABEL_4:
  }
    MEMORY[0x1852FD9E0](a5, "");
LABEL_5:
  int v10 = *(_DWORD *)(a1 + 8);
  if (v10)
  {
    uint64_t v11 = *(void *)a1;
    size_t v12 = llvm_regerror(*(_DWORD *)(a1 + 8), *(void *)a1, 0, 0);
    std::string::resize((std::string *)a5, v12 - 1, 0);
    if (*(char *)(a5 + 23) >= 0) {
      uint64_t v13 = (unsigned char *)a5;
    }
    else {
      uint64_t v13 = *(unsigned char **)a5;
    }
    llvm_regerror(v10, v11, v13, v12);
    return 0;
  }
LABEL_12:
  if (a4) {
    unsigned int v15 = *(_DWORD *)(*(void *)a1 + 8) + 1;
  }
  else {
    unsigned int v15 = 0;
  }
  uint64_t v34 = v36;
  uint64_t v35 = 0x800000000;
  if (v15 <= 1) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 < 9)
  {
    uint64_t v17 = 0;
    size_t v18 = v36;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v16, 16);
    uint64_t v17 = v35;
    if (v35 == v16) {
      goto LABEL_25;
    }
    size_t v18 = v34;
  }
  bzero(&v18[2 * v17], 16 * (v16 - v17));
LABEL_25:
  LODWORD(v35) = v16;
  size_t v19 = v34;
  *(void *)uint64_t v34 = 0;
  v19[1] = a3;
  int v20 = llvm_regexec(*(void *)a1, a2, v15, v19, 4);
  if (v20)
  {
    if (v20 == 1 || !a5)
    {
      uint64_t v14 = 0;
      uint64_t v25 = v34;
      if (v34 == v36) {
        return v14;
      }
    }
    else
    {
      int v21 = *(_DWORD *)(a1 + 8);
      uint64_t v22 = *(void *)a1;
      size_t v23 = llvm_regerror(v21, *(void *)a1, 0, 0);
      std::string::resize((std::string *)a5, v23 - 1, 0);
      if (*(char *)(a5 + 23) >= 0) {
        size_t v24 = (unsigned char *)a5;
      }
      else {
        size_t v24 = *(unsigned char **)a5;
      }
      llvm_regerror(v21, v22, v24, v23);
      uint64_t v14 = 0;
      uint64_t v25 = v34;
      if (v34 == v36) {
        return v14;
      }
    }
LABEL_34:
    free(v25);
    return v14;
  }
  if (a4)
  {
    *(_DWORD *)(a4 + 8) = 0;
    if (v15)
    {
      uint64_t v27 = 0;
      unsigned int v28 = 0;
      uint64_t v29 = 16 * v15;
      do
      {
        while (1)
        {
          uint64_t v30 = *(void *)((char *)v34 + v27);
          if (v30 == -1) {
            break;
          }
          uint64_t v31 = *(void *)((char *)v34 + v27 + 8);
          if (v28 >= *(_DWORD *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v28 + 1, 16);
            unsigned int v28 = *(_DWORD *)(a4 + 8);
          }
          uint64_t v32 = (void *)(*(void *)a4 + 16 * v28);
          *uint64_t v32 = &a2[v30];
          v32[1] = v31 - v30;
          v27 += 16;
          unsigned int v28 = *(_DWORD *)(a4 + 8) + 1;
          *(_DWORD *)(a4 + 8) = v28;
          if (v29 == v27) {
            goto LABEL_47;
          }
        }
        if (v28 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v28 + 1, 16);
          unsigned int v28 = *(_DWORD *)(a4 + 8);
        }
        int v33 = (void *)(*(void *)a4 + 16 * v28);
        *int v33 = 0;
        v33[1] = 0;
        v27 += 16;
        unsigned int v28 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v28;
      }
      while (v29 != v27);
    }
  }
LABEL_47:
  uint64_t v14 = 1;
  uint64_t v25 = v34;
  if (v34 != v36) {
    goto LABEL_34;
  }
  return v14;
}

double llvm::SHA1::init(llvm::SHA1 *this)
{
  *((_OWORD *)this + 4) = xmmword_181127ED0;
  *(void *)&double result = 3285377520;
  *((void *)this + 10) = 3285377520;
  *((unsigned char *)this + 88) = 0;
  return result;
}

_DWORD *llvm::SHA1::hashBlock(_DWORD *this)
{
  int v1 = this[16];
  int v2 = this[17];
  HIDWORD(v4) = v1;
  LODWORD(v4) = v1;
  int v3 = v4 >> 27;
  HIDWORD(v4) = v2;
  LODWORD(v4) = v2;
  int v5 = v4 >> 2;
  int v6 = this[18];
  int v277 = this[19];
  int v278 = this[20];
  int v7 = this[1];
  int v8 = v3 + v278 + *this + (v6 & v2 | v277 & ~v2) + 1518500249;
  HIDWORD(v4) = v8;
  LODWORD(v4) = v8;
  int v9 = v277 + v7 + (v5 & v1 | v6 & ~v1) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v1;
  LODWORD(v4) = v1;
  int v10 = v4 >> 2;
  HIDWORD(v4) = v9;
  LODWORD(v4) = v9;
  int v11 = this[2];
  int v12 = this[3];
  int v13 = v6 + v11 + (v10 & v8 | v5 & ~v8) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v8;
  LODWORD(v4) = v8;
  int v14 = v4 >> 2;
  HIDWORD(v4) = v13;
  LODWORD(v4) = v13;
  int v15 = v5 + v12 + (v14 & v9 | v10 & ~v9) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v9;
  LODWORD(v4) = v9;
  int v16 = v4 >> 2;
  HIDWORD(v4) = v15;
  LODWORD(v4) = v15;
  int v18 = this[4];
  int v17 = this[5];
  int v19 = v10 + v18 + (v16 & v13 | v14 & ~v13) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v13;
  LODWORD(v4) = v13;
  int v20 = v4 >> 2;
  HIDWORD(v4) = v19;
  LODWORD(v4) = v19;
  int v21 = v14 + v17 + (v20 & v15 | v16 & ~v15) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v15;
  LODWORD(v4) = v15;
  int v22 = v4 >> 2;
  HIDWORD(v4) = v21;
  LODWORD(v4) = v21;
  int v24 = this[6];
  int v23 = this[7];
  int v25 = v24 + v16 + (v22 & v19 | v20 & ~v19) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v19;
  LODWORD(v4) = v19;
  int v26 = v4 >> 2;
  HIDWORD(v4) = v25;
  LODWORD(v4) = v25;
  int v27 = v23 + v20 + (v26 & v21 | v22 & ~v21) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v21;
  LODWORD(v4) = v21;
  int v28 = v4 >> 2;
  HIDWORD(v4) = v27;
  LODWORD(v4) = v27;
  int v29 = this[8];
  int v30 = this[9];
  int v31 = v29 + v22 + (v28 & v25 | v26 & ~v25) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v25;
  LODWORD(v4) = v25;
  int v32 = v4 >> 2;
  HIDWORD(v4) = v31;
  LODWORD(v4) = v31;
  int v33 = v30 + v26 + (v32 & v27 | v28 & ~v27) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v27;
  LODWORD(v4) = v27;
  int v34 = v4 >> 2;
  HIDWORD(v4) = v33;
  LODWORD(v4) = v33;
  int v36 = this[10];
  int v35 = this[11];
  int v37 = v36 + v28 + (v34 & v31 | v32 & ~v31) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v31;
  LODWORD(v4) = v31;
  int v38 = v4 >> 2;
  HIDWORD(v4) = v37;
  LODWORD(v4) = v37;
  int v39 = v35 + v32 + (v38 & v33 | v34 & ~v33) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v33;
  LODWORD(v4) = v33;
  int v40 = v4 >> 2;
  HIDWORD(v4) = v39;
  LODWORD(v4) = v39;
  int v41 = this[12];
  int v42 = this[13];
  int v43 = v41 + v34 + (v40 & v37 | v38 & ~v37) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v37;
  LODWORD(v4) = v37;
  int v44 = v4 >> 2;
  HIDWORD(v4) = v43;
  LODWORD(v4) = v43;
  int v45 = v42 + v38 + (v44 & v39 | v40 & ~v39) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v39;
  LODWORD(v4) = v39;
  int v46 = v4 >> 2;
  HIDWORD(v4) = v45;
  LODWORD(v4) = v45;
  int v47 = this[14];
  int v48 = this[15];
  int v49 = v47 + v40 + (v46 & v43 | v44 & ~v43) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v43;
  LODWORD(v4) = v43;
  int v50 = v4 >> 2;
  HIDWORD(v4) = v49;
  LODWORD(v4) = v49;
  int v51 = v48 + v44 + (v50 & v45 | v46 & ~v45) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v45;
  LODWORD(v4) = v45;
  int v52 = v4 >> 2;
  HIDWORD(v4) = v11 ^ *this ^ v29 ^ v42;
  LODWORD(v4) = HIDWORD(v4);
  int v53 = v4 >> 31;
  HIDWORD(v4) = v51;
  LODWORD(v4) = v51;
  int v54 = v53 + v46 + (v52 & v49 | v50 & ~v49) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v49;
  LODWORD(v4) = v49;
  int v55 = v4 >> 2;
  HIDWORD(v4) = v12 ^ v7 ^ v30 ^ v47;
  LODWORD(v4) = HIDWORD(v4);
  int v56 = v4 >> 31;
  HIDWORD(v4) = v54;
  LODWORD(v4) = v54;
  int v57 = v4 >> 27;
  HIDWORD(v4) = v51;
  LODWORD(v4) = v51;
  int v58 = v4 >> 2;
  int v59 = v56 + v50 + (v55 & v51 | v52 & ~v51) + 1518500249 + v57;
  HIDWORD(v4) = v18 ^ v11 ^ v36 ^ v48;
  LODWORD(v4) = HIDWORD(v4);
  int v60 = v4 >> 31;
  HIDWORD(v4) = v59;
  LODWORD(v4) = v59;
  int v61 = v60 + v52 + (v58 & v54 | v55 & ~v54) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v54;
  LODWORD(v4) = v54;
  int v62 = v4 >> 2;
  HIDWORD(v4) = v17 ^ v12 ^ v35 ^ v53;
  LODWORD(v4) = HIDWORD(v4);
  int v63 = v4 >> 31;
  HIDWORD(v4) = v61;
  LODWORD(v4) = v61;
  int v64 = v63 + v55 + (v62 & v59 | v58 & ~v59) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v59;
  LODWORD(v4) = v59;
  int v65 = v4 >> 2;
  HIDWORD(v4) = v24 ^ v18 ^ v41 ^ v56;
  LODWORD(v4) = HIDWORD(v4);
  int v66 = v4 >> 31;
  HIDWORD(v4) = v64;
  LODWORD(v4) = v64;
  int v67 = v4 >> 27;
  HIDWORD(v4) = v61;
  LODWORD(v4) = v61;
  int v68 = v4 >> 2;
  int v69 = v66 + v58 + (v65 ^ v62 ^ v61) + 1859775393 + v67;
  HIDWORD(v4) = v23 ^ v17 ^ v42 ^ v60;
  LODWORD(v4) = HIDWORD(v4);
  int v70 = v4 >> 31;
  HIDWORD(v4) = v69;
  LODWORD(v4) = v69;
  int v71 = v70 + v62 + (v68 ^ v65 ^ v64) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v64;
  LODWORD(v4) = v64;
  int v72 = v4 >> 2;
  HIDWORD(v4) = v29 ^ v24 ^ v47 ^ v63;
  LODWORD(v4) = HIDWORD(v4);
  int v73 = v4 >> 31;
  HIDWORD(v4) = v71;
  LODWORD(v4) = v71;
  int v74 = v4 >> 27;
  int v75 = v73 + v65 + (v72 ^ v68 ^ v69) + 1859775393;
  HIDWORD(v4) = v69;
  LODWORD(v4) = v69;
  int v76 = v4 >> 2;
  int v77 = v75 + v74;
  HIDWORD(v4) = v30 ^ v23 ^ v48 ^ v66;
  LODWORD(v4) = HIDWORD(v4);
  int v78 = v4 >> 31;
  HIDWORD(v4) = v77;
  LODWORD(v4) = v77;
  int v79 = v78 + v68 + (v76 ^ v72 ^ v71) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v71;
  LODWORD(v4) = v71;
  int v80 = v4 >> 2;
  HIDWORD(v4) = v36 ^ v29 ^ v53 ^ v70;
  LODWORD(v4) = HIDWORD(v4);
  int v81 = v4 >> 31;
  HIDWORD(v4) = v79;
  LODWORD(v4) = v79;
  int v82 = v4 >> 27;
  int v83 = v81 + v72 + (v80 ^ v76 ^ v77) + 1859775393;
  HIDWORD(v4) = v77;
  LODWORD(v4) = v77;
  int v84 = v4 >> 2;
  int v85 = v83 + v82;
  HIDWORD(v4) = v35 ^ v30 ^ v56 ^ v73;
  LODWORD(v4) = HIDWORD(v4);
  int v86 = v4 >> 31;
  HIDWORD(v4) = v85;
  LODWORD(v4) = v85;
  int v87 = v86 + v76 + (v84 ^ v80 ^ v79) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v79;
  LODWORD(v4) = v79;
  int v88 = v4 >> 2;
  HIDWORD(v4) = v41 ^ v36 ^ v60 ^ v78;
  LODWORD(v4) = HIDWORD(v4);
  int v89 = v4 >> 31;
  HIDWORD(v4) = v87;
  LODWORD(v4) = v87;
  int v90 = v4 >> 27;
  int v91 = v89 + v80 + (v88 ^ v84 ^ v85) + 1859775393;
  HIDWORD(v4) = v85;
  LODWORD(v4) = v85;
  int v92 = v4 >> 2;
  int v93 = v91 + v90;
  HIDWORD(v4) = v42 ^ v35 ^ v63 ^ v81;
  LODWORD(v4) = HIDWORD(v4);
  int v94 = v4 >> 31;
  HIDWORD(v4) = v93;
  LODWORD(v4) = v93;
  int v95 = v94 + v84 + (v92 ^ v88 ^ v87) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v87;
  LODWORD(v4) = v87;
  int v96 = v4 >> 2;
  HIDWORD(v4) = v47 ^ v41 ^ v66 ^ v86;
  LODWORD(v4) = HIDWORD(v4);
  int v97 = v4 >> 31;
  HIDWORD(v4) = v95;
  LODWORD(v4) = v95;
  int v98 = v4 >> 27;
  int v99 = v97 + v88 + (v96 ^ v92 ^ v93) + 1859775393;
  HIDWORD(v4) = v93;
  LODWORD(v4) = v93;
  int v100 = v4 >> 2;
  int v101 = v99 + v98;
  HIDWORD(v4) = v48 ^ v42 ^ v70 ^ v89;
  LODWORD(v4) = HIDWORD(v4);
  int v102 = v4 >> 31;
  HIDWORD(v4) = v99 + v98;
  LODWORD(v4) = v99 + v98;
  int v103 = v102 + v92 + (v100 ^ v96 ^ v95) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v95;
  LODWORD(v4) = v95;
  int v104 = v4 >> 2;
  HIDWORD(v4) = v53 ^ v47 ^ v73 ^ v94;
  LODWORD(v4) = HIDWORD(v4);
  int v105 = v4 >> 31;
  HIDWORD(v4) = v103;
  LODWORD(v4) = v103;
  int v106 = v4 >> 27;
  HIDWORD(v4) = v101;
  LODWORD(v4) = v101;
  int v107 = v4 >> 2;
  int v108 = v105 + v96 + (v104 ^ v100 ^ v101) + 1859775393 + v106;
  HIDWORD(v4) = v56 ^ v48 ^ v78 ^ v97;
  LODWORD(v4) = HIDWORD(v4);
  int v109 = v4 >> 31;
  HIDWORD(v4) = v108;
  LODWORD(v4) = v108;
  int v110 = v109 + v100 + (v107 ^ v104 ^ v103) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v103;
  LODWORD(v4) = v103;
  int v111 = v4 >> 2;
  HIDWORD(v4) = v60 ^ v53 ^ v81 ^ v102;
  LODWORD(v4) = HIDWORD(v4);
  int v112 = v4 >> 31;
  HIDWORD(v4) = v110;
  LODWORD(v4) = v110;
  int v113 = v4 >> 27;
  int v114 = v112 + v104 + (v111 ^ v107 ^ v108) + 1859775393;
  HIDWORD(v4) = v108;
  LODWORD(v4) = v108;
  int v115 = v4 >> 2;
  int v116 = v114 + v113;
  HIDWORD(v4) = v63 ^ v56 ^ v86 ^ v105;
  LODWORD(v4) = HIDWORD(v4);
  int v117 = v4 >> 31;
  HIDWORD(v4) = v116;
  LODWORD(v4) = v116;
  int v118 = v117 + v107 + (v115 ^ v111 ^ v110) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v110;
  LODWORD(v4) = v110;
  int v119 = v4 >> 2;
  HIDWORD(v4) = v66 ^ v60 ^ v89 ^ v109;
  LODWORD(v4) = HIDWORD(v4);
  int v120 = v4 >> 31;
  HIDWORD(v4) = v118;
  LODWORD(v4) = v118;
  int v121 = v4 >> 27;
  int v122 = v120 + v111 + (v119 ^ v115 ^ v116) + 1859775393;
  HIDWORD(v4) = v116;
  LODWORD(v4) = v116;
  int v123 = v4 >> 2;
  int v124 = v122 + v121;
  HIDWORD(v4) = v70 ^ v63 ^ v94 ^ v112;
  LODWORD(v4) = HIDWORD(v4);
  int v125 = v4 >> 31;
  HIDWORD(v4) = v124;
  LODWORD(v4) = v124;
  int v126 = v125 + v115 + (v123 ^ v119 ^ v118) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v118;
  LODWORD(v4) = v118;
  int v127 = v4 >> 2;
  HIDWORD(v4) = v73 ^ v66 ^ v97 ^ v117;
  LODWORD(v4) = HIDWORD(v4);
  int v128 = v4 >> 31;
  HIDWORD(v4) = v126;
  LODWORD(v4) = v126;
  int v129 = v4 >> 27;
  int v130 = v128 + v119 + (v127 ^ v123 ^ v124) + 1859775393;
  HIDWORD(v4) = v124;
  LODWORD(v4) = v124;
  int v131 = v4 >> 2;
  int v132 = v130 + v129;
  HIDWORD(v4) = v78 ^ v70 ^ v102 ^ v120;
  LODWORD(v4) = HIDWORD(v4);
  int v133 = v4 >> 31;
  HIDWORD(v4) = v132;
  LODWORD(v4) = v132;
  int v134 = v133 + v123 + (v131 ^ v127 ^ v126) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v126;
  LODWORD(v4) = v126;
  int v135 = v4 >> 2;
  HIDWORD(v4) = v81 ^ v73 ^ v105 ^ v125;
  LODWORD(v4) = HIDWORD(v4);
  int v136 = v4 >> 31;
  HIDWORD(v4) = v134;
  LODWORD(v4) = v134;
  int v137 = v4 >> 27;
  int v138 = v136 + v127 + (v135 ^ v131 ^ v132) + 1859775393;
  HIDWORD(v4) = v132;
  LODWORD(v4) = v132;
  int v139 = v4 >> 2;
  int v140 = v138 + v137;
  HIDWORD(v4) = v86 ^ v78 ^ v109 ^ v128;
  LODWORD(v4) = HIDWORD(v4);
  int v141 = v4 >> 31;
  HIDWORD(v4) = v140;
  LODWORD(v4) = v140;
  int v142 = v141 + v131 + (v139 ^ v135 ^ v134) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v134;
  LODWORD(v4) = v134;
  int v143 = v4 >> 2;
  HIDWORD(v4) = v89 ^ v81 ^ v112 ^ v133;
  LODWORD(v4) = HIDWORD(v4);
  int v144 = v4 >> 31;
  HIDWORD(v4) = v142;
  LODWORD(v4) = v142;
  int v145 = v144 + v135 + ((v140 | v143) & v139 | v140 & v143) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v140;
  LODWORD(v4) = v140;
  int v146 = v4 >> 2;
  HIDWORD(v4) = v94 ^ v86 ^ v117 ^ v136;
  LODWORD(v4) = HIDWORD(v4);
  int v147 = v4 >> 31;
  HIDWORD(v4) = v145;
  LODWORD(v4) = v145;
  int v148 = v147 + v139 + ((v142 | v146) & v143 | v142 & v146) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v142;
  LODWORD(v4) = v142;
  int v149 = v4 >> 2;
  HIDWORD(v4) = v97 ^ v89 ^ v120 ^ v141;
  LODWORD(v4) = HIDWORD(v4);
  int v150 = v4 >> 31;
  HIDWORD(v4) = v148;
  LODWORD(v4) = v148;
  int v151 = v150 + v143 + ((v145 | v149) & v146 | v145 & v149) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v145;
  LODWORD(v4) = v145;
  int v152 = v4 >> 2;
  HIDWORD(v4) = v102 ^ v94 ^ v125 ^ v144;
  LODWORD(v4) = HIDWORD(v4);
  int v153 = v4 >> 31;
  HIDWORD(v4) = v151;
  LODWORD(v4) = v151;
  int v154 = v4 >> 27;
  int v155 = v153 + v146 + ((v148 | v152) & v149 | v148 & v152) - 1894007588;
  HIDWORD(v4) = v148;
  LODWORD(v4) = v148;
  int v156 = v4 >> 2;
  int v157 = v155 + v154;
  HIDWORD(v4) = v105 ^ v97 ^ v128 ^ v147;
  LODWORD(v4) = HIDWORD(v4);
  int v158 = v4 >> 31;
  HIDWORD(v4) = v157;
  LODWORD(v4) = v157;
  int v159 = v158 + v149 + ((v151 | v156) & v152 | v151 & v156) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v151;
  LODWORD(v4) = v151;
  int v160 = v4 >> 2;
  HIDWORD(v4) = v109 ^ v102 ^ v133 ^ v150;
  LODWORD(v4) = HIDWORD(v4);
  int v161 = v4 >> 31;
  HIDWORD(v4) = v159;
  LODWORD(v4) = v159;
  int v162 = v161 + v152 + ((v157 | v160) & v156 | v157 & v160) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v157;
  LODWORD(v4) = v157;
  int v163 = v4 >> 2;
  HIDWORD(v4) = v112 ^ v105 ^ v136 ^ v153;
  LODWORD(v4) = HIDWORD(v4);
  int v164 = v4 >> 31;
  HIDWORD(v4) = v162;
  LODWORD(v4) = v162;
  int v165 = v164 + v156 + ((v159 | v163) & v160 | v159 & v163) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v159;
  LODWORD(v4) = v159;
  int v166 = v4 >> 2;
  HIDWORD(v4) = v117 ^ v109 ^ v141 ^ v158;
  LODWORD(v4) = HIDWORD(v4);
  int v167 = v4 >> 31;
  HIDWORD(v4) = v165;
  LODWORD(v4) = v165;
  int v168 = v167 + v160 + ((v162 | v166) & v163 | v162 & v166) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v162;
  LODWORD(v4) = v162;
  int v169 = v4 >> 2;
  HIDWORD(v4) = v120 ^ v112 ^ v144 ^ v161;
  LODWORD(v4) = HIDWORD(v4);
  int v170 = v4 >> 31;
  HIDWORD(v4) = v168;
  LODWORD(v4) = v168;
  int v171 = v170 + v163 + ((v165 | v169) & v166 | v165 & v169) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v165;
  LODWORD(v4) = v165;
  int v172 = v4 >> 2;
  HIDWORD(v4) = v125 ^ v117 ^ v147 ^ v164;
  LODWORD(v4) = HIDWORD(v4);
  int v173 = v4 >> 31;
  HIDWORD(v4) = v171;
  LODWORD(v4) = v171;
  int v174 = v4 >> 27;
  int v175 = v173 + v166 + ((v168 | v172) & v169 | v168 & v172) - 1894007588;
  HIDWORD(v4) = v168;
  LODWORD(v4) = v168;
  int v176 = v4 >> 2;
  int v177 = v175 + v174;
  HIDWORD(v4) = v128 ^ v120 ^ v150 ^ v167;
  LODWORD(v4) = HIDWORD(v4);
  int v178 = v4 >> 31;
  HIDWORD(v4) = v177;
  LODWORD(v4) = v177;
  int v179 = v178 + v169 + ((v171 | v176) & v172 | v171 & v176) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v171;
  LODWORD(v4) = v171;
  int v180 = v4 >> 2;
  HIDWORD(v4) = v133 ^ v125 ^ v153 ^ v170;
  LODWORD(v4) = HIDWORD(v4);
  int v181 = v4 >> 31;
  HIDWORD(v4) = v179;
  LODWORD(v4) = v179;
  int v182 = v181 + v172 + ((v177 | v180) & v176 | v177 & v180) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v177;
  LODWORD(v4) = v177;
  int v183 = v4 >> 2;
  HIDWORD(v4) = v136 ^ v128 ^ v158 ^ v173;
  LODWORD(v4) = HIDWORD(v4);
  int v184 = v4 >> 31;
  HIDWORD(v4) = v182;
  LODWORD(v4) = v182;
  int v185 = v184 + v176 + ((v179 | v183) & v180 | v179 & v183) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v179;
  LODWORD(v4) = v179;
  int v186 = v4 >> 2;
  HIDWORD(v4) = v141 ^ v133 ^ v161 ^ v178;
  LODWORD(v4) = HIDWORD(v4);
  int v187 = v4 >> 31;
  HIDWORD(v4) = v185;
  LODWORD(v4) = v185;
  int v188 = v187 + v180 + ((v182 | v186) & v183 | v182 & v186) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v182;
  LODWORD(v4) = v182;
  int v189 = v4 >> 2;
  HIDWORD(v4) = v144 ^ v136 ^ v164 ^ v181;
  LODWORD(v4) = HIDWORD(v4);
  int v190 = v4 >> 31;
  HIDWORD(v4) = v188;
  LODWORD(v4) = v188;
  int v191 = v190 + v183 + ((v185 | v189) & v186 | v185 & v189) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v185;
  LODWORD(v4) = v185;
  int v192 = v4 >> 2;
  HIDWORD(v4) = v147 ^ v141 ^ v167 ^ v184;
  LODWORD(v4) = HIDWORD(v4);
  int v193 = v4 >> 31;
  HIDWORD(v4) = v191;
  LODWORD(v4) = v191;
  int v194 = v4 >> 27;
  int v195 = v193 + v186 + ((v188 | v192) & v189 | v188 & v192) - 1894007588;
  HIDWORD(v4) = v188;
  LODWORD(v4) = v188;
  int v196 = v4 >> 2;
  int v197 = v195 + v194;
  HIDWORD(v4) = v150 ^ v144 ^ v170 ^ v187;
  LODWORD(v4) = HIDWORD(v4);
  int v198 = v4 >> 31;
  HIDWORD(v4) = v195 + v194;
  LODWORD(v4) = v195 + v194;
  int v199 = v198 + v189 + ((v191 | v196) & v192 | v191 & v196) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v191;
  LODWORD(v4) = v191;
  int v200 = v4 >> 2;
  int v201 = ((v195 + v194) | v200) & v196 | (v195 + v194) & v200;
  HIDWORD(v4) = v153 ^ v147 ^ v173 ^ v190;
  LODWORD(v4) = HIDWORD(v4);
  int v202 = v4 >> 31;
  HIDWORD(v4) = v199;
  LODWORD(v4) = v199;
  int v203 = v202 + v192 + v201 - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v197;
  LODWORD(v4) = v197;
  int v204 = v4 >> 2;
  HIDWORD(v4) = v158 ^ v150 ^ v178 ^ v193;
  LODWORD(v4) = HIDWORD(v4);
  int v205 = v4 >> 31;
  HIDWORD(v4) = v203;
  LODWORD(v4) = v203;
  int v206 = v205 + v196 + ((v199 | v204) & v200 | v199 & v204) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v199;
  LODWORD(v4) = v199;
  int v207 = v4 >> 2;
  HIDWORD(v4) = v161 ^ v153 ^ v181 ^ v198;
  LODWORD(v4) = HIDWORD(v4);
  int v208 = v4 >> 31;
  HIDWORD(v4) = v206;
  LODWORD(v4) = v206;
  int v209 = v208 + v200 + ((v203 | v207) & v204 | v203 & v207) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v203;
  LODWORD(v4) = v203;
  int v210 = v4 >> 2;
  HIDWORD(v4) = v164 ^ v158 ^ v184 ^ v202;
  LODWORD(v4) = HIDWORD(v4);
  int v211 = v4 >> 31;
  HIDWORD(v4) = v209;
  LODWORD(v4) = v209;
  int v212 = v4 >> 27;
  HIDWORD(v4) = v206;
  LODWORD(v4) = v206;
  int v213 = v4 >> 2;
  int v214 = v211 + v204 + (v210 ^ v207 ^ v206) - 899497514 + v212;
  HIDWORD(v4) = v167 ^ v161 ^ v187 ^ v205;
  LODWORD(v4) = HIDWORD(v4);
  int v215 = v4 >> 31;
  HIDWORD(v4) = v214;
  LODWORD(v4) = v214;
  int v216 = v215 + v207 + (v213 ^ v210 ^ v209) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v209;
  LODWORD(v4) = v209;
  int v217 = v4 >> 2;
  HIDWORD(v4) = v170 ^ v164 ^ v190 ^ v208;
  LODWORD(v4) = HIDWORD(v4);
  int v218 = v4 >> 31;
  HIDWORD(v4) = v216;
  LODWORD(v4) = v216;
  int v219 = v4 >> 27;
  int v220 = v218 + v210 + (v217 ^ v213 ^ v214) - 899497514;
  HIDWORD(v4) = v214;
  LODWORD(v4) = v214;
  int v221 = v4 >> 2;
  int v222 = v220 + v219;
  HIDWORD(v4) = v173 ^ v167 ^ v193 ^ v211;
  LODWORD(v4) = HIDWORD(v4);
  int v223 = v4 >> 31;
  HIDWORD(v4) = v222;
  LODWORD(v4) = v222;
  int v224 = v223 + v213 + (v221 ^ v217 ^ v216) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v216;
  LODWORD(v4) = v216;
  int v225 = v4 >> 2;
  HIDWORD(v4) = v178 ^ v170 ^ v198 ^ v215;
  LODWORD(v4) = HIDWORD(v4);
  int v226 = v4 >> 31;
  HIDWORD(v4) = v224;
  LODWORD(v4) = v224;
  int v227 = v4 >> 27;
  HIDWORD(v4) = v222;
  LODWORD(v4) = v222;
  int v228 = v4 >> 2;
  int v229 = v226 + v217 + (v225 ^ v221 ^ v222) - 899497514 + v227;
  HIDWORD(v4) = v181 ^ v173 ^ v202 ^ v218;
  LODWORD(v4) = HIDWORD(v4);
  int v230 = v4 >> 31;
  *this = v226;
  this[1] = v230;
  HIDWORD(v4) = v229;
  LODWORD(v4) = v229;
  int v231 = v230 + v221 + (v228 ^ v225 ^ v224) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v224;
  LODWORD(v4) = v224;
  int v232 = v4 >> 2;
  HIDWORD(v4) = v184 ^ v178 ^ v205 ^ v223;
  LODWORD(v4) = HIDWORD(v4);
  int v233 = v4 >> 31;
  HIDWORD(v4) = v231;
  LODWORD(v4) = v231;
  int v234 = v233 + v225 + (v232 ^ v228 ^ v229) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v229;
  LODWORD(v4) = v229;
  int v235 = v4 >> 2;
  HIDWORD(v4) = v187 ^ v181 ^ v208 ^ v226;
  LODWORD(v4) = HIDWORD(v4);
  int v236 = v4 >> 31;
  this[2] = v233;
  this[3] = v236;
  HIDWORD(v4) = v234;
  LODWORD(v4) = v234;
  int v237 = v236 + v228 + (v235 ^ v232 ^ v231) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v231;
  LODWORD(v4) = v231;
  int v238 = v4 >> 2;
  HIDWORD(v4) = v190 ^ v184 ^ v211 ^ v230;
  LODWORD(v4) = HIDWORD(v4);
  int v239 = v4 >> 31;
  HIDWORD(v4) = v237;
  LODWORD(v4) = v237;
  int v240 = v239 + v232 + (v238 ^ v235 ^ v234) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v234;
  LODWORD(v4) = v234;
  int v241 = v4 >> 2;
  HIDWORD(v4) = v193 ^ v187 ^ v215 ^ v233;
  LODWORD(v4) = HIDWORD(v4);
  int v242 = v4 >> 31;
  this[4] = v239;
  this[5] = v242;
  HIDWORD(v4) = v240;
  LODWORD(v4) = v240;
  int v243 = v242 + v235 + (v241 ^ v238 ^ v237) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v237;
  LODWORD(v4) = v237;
  int v244 = v4 >> 2;
  HIDWORD(v4) = v198 ^ v190 ^ v218 ^ v236;
  LODWORD(v4) = HIDWORD(v4);
  int v245 = v4 >> 31;
  HIDWORD(v4) = v243;
  LODWORD(v4) = v243;
  int v246 = v4 >> 27;
  int v247 = v245 + v238 + (v244 ^ v241 ^ v240) - 899497514;
  HIDWORD(v4) = v240;
  LODWORD(v4) = v240;
  int v248 = v4 >> 2;
  int v249 = v247 + v246;
  HIDWORD(v4) = v202 ^ v193 ^ v223 ^ v239;
  LODWORD(v4) = HIDWORD(v4);
  int v250 = v4 >> 31;
  this[6] = v245;
  this[7] = v250;
  HIDWORD(v4) = v249;
  LODWORD(v4) = v249;
  int v251 = v250 + v241 + (v248 ^ v244 ^ v243) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v243;
  LODWORD(v4) = v243;
  int v252 = v4 >> 2;
  HIDWORD(v4) = v205 ^ v198 ^ v226 ^ v242;
  LODWORD(v4) = HIDWORD(v4);
  int v253 = v4 >> 31;
  HIDWORD(v4) = v251;
  LODWORD(v4) = v251;
  int v254 = v253 + v244 + (v252 ^ v248 ^ v249) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v249;
  LODWORD(v4) = v249;
  int v255 = v4 >> 2;
  HIDWORD(v4) = v208 ^ v202 ^ v230 ^ v245;
  LODWORD(v4) = HIDWORD(v4);
  int v256 = v4 >> 31;
  this[8] = v253;
  this[9] = v256;
  HIDWORD(v4) = v254;
  LODWORD(v4) = v254;
  int v257 = v256 + v248 + (v255 ^ v252 ^ v251) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v251;
  LODWORD(v4) = v251;
  int v258 = v4 >> 2;
  HIDWORD(v4) = v211 ^ v205 ^ v233 ^ v250;
  LODWORD(v4) = HIDWORD(v4);
  int v259 = v4 >> 31;
  HIDWORD(v4) = v257;
  LODWORD(v4) = v257;
  int v260 = v259 + v252 + (v258 ^ v255 ^ v254) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v254;
  LODWORD(v4) = v254;
  int v261 = v4 >> 2;
  HIDWORD(v4) = v215 ^ v208 ^ v236 ^ v253;
  LODWORD(v4) = HIDWORD(v4);
  int v262 = v4 >> 31;
  this[10] = v259;
  this[11] = v262;
  HIDWORD(v4) = v260;
  LODWORD(v4) = v260;
  int v263 = v262 + v255 + (v261 ^ v258 ^ v257) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v257;
  LODWORD(v4) = v257;
  int v264 = v4 >> 2;
  HIDWORD(v4) = v218 ^ v211 ^ v239 ^ v256;
  LODWORD(v4) = HIDWORD(v4);
  int v265 = v4 >> 31;
  HIDWORD(v4) = v263;
  LODWORD(v4) = v263;
  int v266 = v4 >> 27;
  int v267 = v265 + v258 + (v264 ^ v261 ^ v260) - 899497514;
  HIDWORD(v4) = v260;
  LODWORD(v4) = v260;
  int v268 = v4 >> 2;
  int v269 = v267 + v266;
  HIDWORD(v4) = v223 ^ v215 ^ v242 ^ v259;
  LODWORD(v4) = HIDWORD(v4);
  int v270 = v4 >> 31;
  this[12] = v265;
  this[13] = v270;
  HIDWORD(v4) = v269;
  LODWORD(v4) = v269;
  int v271 = v270 + v261 + (v268 ^ v264 ^ v263) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v263;
  LODWORD(v4) = v263;
  int v272 = v4 >> 2;
  HIDWORD(v4) = v226 ^ v218 ^ v245 ^ v262;
  LODWORD(v4) = HIDWORD(v4);
  int v273 = v4 >> 31;
  HIDWORD(v4) = v271;
  LODWORD(v4) = v271;
  int v274 = v273 + v264 + (v272 ^ v268 ^ v269) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v269;
  LODWORD(v4) = v269;
  int v275 = v4 >> 2;
  HIDWORD(v4) = v230 ^ v223 ^ v250 ^ v265;
  LODWORD(v4) = HIDWORD(v4);
  int v276 = v4 >> 31;
  this[14] = v273;
  this[15] = v276;
  HIDWORD(v4) = v274;
  LODWORD(v4) = v274;
  this[16] = v1 + v276 + v268 + (v275 ^ v272 ^ v271) - 899497514 + (v4 >> 27);
  this[17] = v274 + v2;
  HIDWORD(v4) = v271;
  LODWORD(v4) = v271;
  this[18] = (v4 >> 2) + v6;
  this[19] = v275 + v277;
  this[20] = v272 + v278;
  return this;
}

_DWORD *llvm::SHA1::update(_DWORD *this, unsigned int *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  unint64_t v4 = a2;
  uint64_t v5 = (uint64_t)this;
  this[21] += a3;
  uint64_t v6 = *((unsigned __int8 *)this + 88);
  if (*((unsigned char *)this + 88))
  {
    if (64 - v6 >= a3) {
      unint64_t v7 = a3;
    }
    else {
      unint64_t v7 = 64 - v6;
    }
    if (v7)
    {
      int v8 = a2;
      unint64_t v9 = v7;
      do
      {
        char v10 = *(unsigned char *)v8;
        int v8 = (unsigned int *)((char *)v8 + 1);
        *(unsigned char *)(v5 + (v6 ^ 3)) = v10;
        LODWORD(v6) = (*(unsigned char *)(v5 + 88))++ + 1;
        if (v6 == 64)
        {
          this = llvm::SHA1::hashBlock((_DWORD *)v5);
          LOBYTE(v6) = 0;
          *(unsigned char *)(v5 + 88) = 0;
        }
        --v9;
      }
      while (v9);
    }
    v3 -= v7;
    unint64_t v4 = (unsigned int *)((char *)v4 + v7);
  }
  if (v3 >= 0x40)
  {
    do
    {
      *(_DWORD *)uint64_t v5 = bswap32(*v4);
      *(_DWORD *)(v5 + 4) = bswap32(v4[1]);
      *(_DWORD *)(v5 + 8) = bswap32(v4[2]);
      *(_DWORD *)(v5 + 12) = bswap32(v4[3]);
      *(_DWORD *)(v5 + 16) = bswap32(v4[4]);
      *(_DWORD *)(v5 + 20) = bswap32(v4[5]);
      *(_DWORD *)(v5 + 24) = bswap32(v4[6]);
      *(_DWORD *)(v5 + 28) = bswap32(v4[7]);
      *(_DWORD *)(v5 + 32) = bswap32(v4[8]);
      *(_DWORD *)(v5 + 36) = bswap32(v4[9]);
      *(_DWORD *)(v5 + 40) = bswap32(v4[10]);
      *(_DWORD *)(v5 + 44) = bswap32(v4[11]);
      *(_DWORD *)(v5 + 48) = bswap32(v4[12]);
      *(_DWORD *)(v5 + 52) = bswap32(v4[13]);
      *(_DWORD *)(v5 + 56) = bswap32(v4[14]);
      *(_DWORD *)(v5 + 60) = bswap32(v4[15]);
      this = llvm::SHA1::hashBlock((_DWORD *)v5);
      v3 -= 64;
      v4 += 16;
    }
    while (v3 > 0x3F);
  }
  if (v3)
  {
    LOBYTE(v11) = *(unsigned char *)(v5 + 88);
    do
    {
      *(unsigned char *)(v5 + (v11 ^ 3)) = *(unsigned char *)v4;
      int v11 = (*(unsigned char *)(v5 + 88))++ + 1;
      if (v11 == 64)
      {
        this = llvm::SHA1::hashBlock((_DWORD *)v5);
        LOBYTE(v11) = 0;
        *(unsigned char *)(v5 + 88) = 0;
      }
      unint64_t v4 = (unsigned int *)((char *)v4 + 1);
      --v3;
    }
    while (v3);
  }
  return this;
}

_DWORD *llvm::SHA1::pad(_DWORD *this)
{
  uint64_t v1 = (uint64_t)this;
  *((unsigned char *)this + (*((unsigned __int8 *)this + 88) ^ 3)) = 0x80;
  int v2 = *((unsigned __int8 *)this + 88);
  LOBYTE(v3) = v2 + 1;
  *((unsigned char *)this + 88) = v2 + 1;
  if (v2 != 55)
  {
    if (v2 == 63)
    {
      this = llvm::SHA1::hashBlock(this);
      LOBYTE(v3) = 0;
      *(unsigned char *)(v1 + 88) = 0;
    }
    do
    {
      *(unsigned char *)(v1 + (v3 ^ 3)) = 0;
      int v3 = (*(unsigned char *)(v1 + 88))++ + 1;
      if (v3 == 64)
      {
        this = llvm::SHA1::hashBlock((_DWORD *)v1);
        LOBYTE(v3) = 0;
        *(unsigned char *)(v1 + 88) = 0;
      }
    }
    while (v3 != 56);
  }
  *(unsigned char *)(v1 + 59) = 0;
  *(_WORD *)(v1 + 57) = 0;
  *(unsigned char *)(v1 + 56) = *(_DWORD *)(v1 + 84) >> 29;
  *(unsigned char *)(v1 + 88) = 60;
  *(unsigned char *)(v1 + 63) = *(_DWORD *)(v1 + 84) >> 21;
  int v4 = (*(unsigned char *)(v1 + 88))++ + 1;
  if (v4 == 64)
  {
    this = llvm::SHA1::hashBlock((_DWORD *)v1);
    LOBYTE(v4) = 0;
    *(unsigned char *)(v1 + 88) = 0;
  }
  *(unsigned char *)(v1 + (v4 ^ 3)) = *(_DWORD *)(v1 + 84) >> 13;
  int v5 = (*(unsigned char *)(v1 + 88))++ + 1;
  if (v5 == 64)
  {
    this = llvm::SHA1::hashBlock((_DWORD *)v1);
    LOBYTE(v5) = 0;
    *(unsigned char *)(v1 + 88) = 0;
  }
  *(unsigned char *)(v1 + (v5 ^ 3)) = *(_DWORD *)(v1 + 84) >> 5;
  int v6 = (*(unsigned char *)(v1 + 88))++ + 1;
  if (v6 == 64)
  {
    this = llvm::SHA1::hashBlock((_DWORD *)v1);
    LOBYTE(v6) = 0;
    *(unsigned char *)(v1 + 88) = 0;
  }
  *(unsigned char *)(v1 + (v6 ^ 3)) = 8 * *(unsigned char *)(v1 + 84);
  int v7 = (*(unsigned char *)(v1 + 88))++ + 1;
  if (v7 == 64)
  {
    this = llvm::SHA1::hashBlock((_DWORD *)v1);
    *(unsigned char *)(v1 + 88) = 0;
  }
  return this;
}

__n128 llvm::SHA1::result@<Q0>(llvm::SHA1 *this@<X0>, int8x16_t *a2@<X8>)
{
  long long v8 = *((_OWORD *)this + 2);
  long long v9 = *((_OWORD *)this + 3);
  *(_OWORD *)char v10 = *((_OWORD *)this + 4);
  *(_OWORD *)&v10[12] = *(_OWORD *)((char *)this + 76);
  __n128 v6 = *(__n128 *)this;
  long long v7 = *((_OWORD *)this + 1);
  llvm::SHA1::pad(this);
  unsigned int v4 = bswap32(*((_DWORD *)this + 20));
  *a2 = vrev32q_s8(*((int8x16_t *)this + 4));
  a2[1].i32[0] = v4;
  *((_OWORD *)this + 2) = v8;
  *((_OWORD *)this + 3) = v9;
  *((_OWORD *)this + 4) = *(_OWORD *)v10;
  *(_OWORD *)((char *)this + 76) = *(_OWORD *)&v10[12];
  __n128 result = v6;
  *(__n128 *)this = v6;
  *((_OWORD *)this + 1) = v7;
  return result;
}

void *llvm::SmallPtrSetImplBase::shrink_and_clear(void **this)
{
  free(this[1]);
  unsigned int v2 = *((_DWORD *)this + 5) - *((_DWORD *)this + 6);
  int v3 = 1 << (33 - __clz(v2 - 1));
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  if (v2 <= 0x10) {
    unsigned int v4 = 32;
  }
  else {
    unsigned int v4 = v3;
  }
  *((_DWORD *)this + 4) = v4;
  size_t v5 = 8 * v4;
  __n128 v6 = malloc(v5);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  this[1] = v6;

  return memset(v6, 255, v5);
}

const void **llvm::SmallPtrSetImplBase::insert_imp_big(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v4 = *((_DWORD *)this + 5);
  unsigned int v5 = *((_DWORD *)this + 4);
  if (3 * v5 <= 4 * (v4 - *((_DWORD *)this + 6)))
  {
    if (v5 >= 0x40) {
      v5 *= 2;
    }
    else {
      unsigned int v5 = 128;
    }
  }
  else if (v5 - v4 >= v5 >> 3)
  {
    goto LABEL_3;
  }
  llvm::SmallPtrSetImplBase::Grow(this, v5);
LABEL_3:
  int v6 = *((_DWORD *)this + 4) - 1;
  uint64_t v7 = *((void *)this + 1);
  unsigned int v8 = v6 & ((a2 >> 4) ^ (a2 >> 9));
  __n128 result = (const void **)(v7 + 8 * v8);
  char v10 = *result;
  if (*result == (const void *)-1)
  {
    int v11 = 0;
LABEL_5:
    if (v11) {
      __n128 result = v11;
    }
    if (*result != a2)
    {
      if (*result == (const void *)-2) {
        --*((_DWORD *)this + 6);
      }
      else {
        ++*((_DWORD *)this + 5);
      }
      *__n128 result = a2;
    }
  }
  else
  {
    int v11 = 0;
    int v12 = 1;
    while (v10 != a2)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == (const void *)-2;
      }
      if (v13) {
        int v11 = result;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v6;
      __n128 result = (const void **)(v7 + 8 * v8);
      char v10 = *result;
      if (*result == (const void *)-1) {
        goto LABEL_5;
      }
    }
  }
  return result;
}

void llvm::SmallPtrSetImplBase::Grow(llvm::SmallPtrSetImplBase *this, unsigned int a2)
{
  unsigned int v5 = *(uint64_t **)this;
  int v4 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = 16;
  if (v4 == *(uint64_t **)this) {
    uint64_t v6 = 20;
  }
  uint64_t v7 = *(unsigned int *)((char *)this + v6);
  size_t v8 = 8 * a2;
  long long v9 = malloc(v8);
  if (!v9 && (a2 || (long long v9 = malloc(1uLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  *((void *)this + 1) = v9;
  *((_DWORD *)this + 4) = a2;
  memset(v9, 255, v8);
  if (v7)
  {
    unsigned int v10 = a2 - 1;
    int v11 = v4;
    do
    {
      uint64_t v14 = *v11;
      if ((unint64_t)*v11 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v15 = *((void *)this + 1);
        unsigned int v16 = ((v14 >> 4) ^ (v14 >> 9)) & v10;
        BOOL v13 = (void *)(v15 + 8 * v16);
        uint64_t v17 = *v13;
        if (*v13 == -1)
        {
          int v12 = 0;
LABEL_9:
          if (v12) {
            BOOL v13 = v12;
          }
        }
        else
        {
          int v12 = 0;
          int v18 = 1;
          while (v17 != v14)
          {
            if (v12) {
              BOOL v19 = 0;
            }
            else {
              BOOL v19 = v17 == -2;
            }
            if (v19) {
              int v12 = v13;
            }
            unsigned int v20 = v16 + v18++;
            unsigned int v16 = v20 & v10;
            BOOL v13 = (void *)(v15 + 8 * (v20 & v10));
            uint64_t v17 = *v13;
            if (*v13 == -1) {
              goto LABEL_9;
            }
          }
        }
        void *v13 = v14;
      }
      ++v11;
    }
    while (v11 != &v4[v7]);
  }
  if (v4 != v5) {
    free(v4);
  }
  *(void *)((char *)this + 20) = (*((_DWORD *)this + 5) - *((_DWORD *)this + 6));
}

const void **llvm::SmallPtrSetImplBase::FindBucketFor(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v2 = *((_DWORD *)this + 4) - 1;
  uint64_t v3 = *((void *)this + 1);
  unsigned int v4 = ((a2 >> 4) ^ (a2 >> 9)) & v2;
  __n128 result = (const void **)(v3 + 8 * v4);
  uint64_t v6 = *result;
  if (*result == (const void *)-1)
  {
    uint64_t v7 = 0;
LABEL_3:
    if (v7) {
      return v7;
    }
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 1;
    while (v6 != a2)
    {
      if (v7) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = v6 == (const void *)-2;
      }
      if (v9) {
        uint64_t v7 = result;
      }
      unsigned int v10 = v4 + v8++;
      unsigned int v4 = v10 & v2;
      __n128 result = (const void **)(v3 + 8 * v4);
      uint64_t v6 = *result;
      if (*result == (const void *)-1) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

llvm::SmallPtrSetImplBase *llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(llvm::SmallPtrSetImplBase *this, const void **a2, const llvm::SmallPtrSetImplBase *a3)
{
  *(void *)this = a2;
  unsigned int v5 = *(const void **)a3;
  if (*((void *)a3 + 1) == *(void *)a3)
  {
    uint64_t v7 = a2;
    *((void *)this + 1) = a2;
    *((_DWORD *)this + 4) = *((_DWORD *)a3 + 4);
    int v8 = (const void *)*((void *)a3 + 1);
    unsigned int v10 = *((_DWORD *)a3 + 4);
    int v9 = *((_DWORD *)a3 + 5);
    if (v8 == v5) {
      unsigned int v10 = *((_DWORD *)a3 + 5);
    }
    if (v10) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v6 = *((unsigned int *)a3 + 4);
    uint64_t v7 = (const void **)malloc(8 * v6);
    if (!v7 && (v6 || (uint64_t v7 = (const void **)malloc(1uLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    *((void *)this + 1) = v7;
    *((_DWORD *)this + 4) = v6;
    int v8 = (const void *)*((void *)a3 + 1);
    unsigned int v10 = *((_DWORD *)a3 + 4);
    int v9 = *((_DWORD *)a3 + 5);
    if (v8 == v5) {
      unsigned int v10 = *((_DWORD *)a3 + 5);
    }
    if (v10)
    {
LABEL_8:
      memmove(v7, v8, 8 * v10);
      int v9 = *((_DWORD *)a3 + 5);
    }
  }
  int v11 = *((_DWORD *)a3 + 6);
  *((_DWORD *)this + 5) = v9;
  *((_DWORD *)this + 6) = v11;
  return this;
}

uint64_t llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(uint64_t a1, void *__dst, int a3, uint64_t *a4)
{
  *(void *)a1 = __dst;
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  if (v7 == *a4)
  {
    *(void *)(a1 + 8) = __dst;
    uint64_t v9 = *((unsigned int *)a4 + 5);
    if (v9) {
      memmove(__dst, (const void *)a4[1], 8 * v9);
    }
  }
  else
  {
    *(void *)(a1 + 8) = v7;
    a4[1] = v8;
  }
  *(void *)(a1 + 16) = a4[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a4 + 6);
  *((_DWORD *)a4 + 5) = 0;
  *((_DWORD *)a4 + 6) = 0;
  *((_DWORD *)a4 + 4) = a3;
  return a1;
}

void *llvm::SmallPtrSetImplBase::CopyFrom(llvm::SmallPtrSetImplBase *this, const llvm::SmallPtrSetImplBase *a2)
{
  __n128 result = (void *)*((void *)this + 1);
  uint64_t v6 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (result == *(void **)this)
  {
    if (v5 != v6)
    {
      uint64_t v7 = *((unsigned int *)a2 + 4);
      if (*((_DWORD *)this + 4) == v7) {
        goto LABEL_14;
      }
      __n128 result = malloc(8 * v7);
      if (!result)
      {
LABEL_9:
        if (v7 || (__n128 result = malloc(1uLL)) == 0) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
      }
    }
  }
  else
  {
    if (v5 != v6)
    {
      uint64_t v7 = *((unsigned int *)a2 + 4);
      if (*((_DWORD *)this + 4) == v7) {
        goto LABEL_14;
      }
      __n128 result = realloc(result, 8 * v7);
      if (result) {
        goto LABEL_13;
      }
      goto LABEL_9;
    }
    free(result);
    __n128 result = *(void **)this;
  }
LABEL_13:
  *((void *)this + 1) = result;
LABEL_14:
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  uint64_t v8 = (const void *)*((void *)a2 + 1);
  int v9 = *((_DWORD *)a2 + 5);
  if (v8 == *(const void **)a2) {
    unsigned int v10 = *((_DWORD *)a2 + 5);
  }
  else {
    unsigned int v10 = *((_DWORD *)a2 + 4);
  }
  if (v10)
  {
    __n128 result = memmove(result, v8, 8 * v10);
    int v9 = *((_DWORD *)a2 + 5);
  }
  int v11 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 5) = v9;
  *((_DWORD *)this + 6) = v11;
  return result;
}

double llvm::SmallPtrSetImplBase::MoveFrom(uint64_t a1, int a2, double *a3)
{
  uint64_t v6 = *(void **)(a1 + 8);
  if (v6 != *(void **)a1) {
    free(v6);
  }
  double v8 = *a3;
  uint64_t v7 = *((void *)a3 + 1);
  if (v7 == *(void *)a3)
  {
    int v9 = *(void **)a1;
    *(void *)(a1 + 8) = *(void *)a1;
    uint64_t v10 = *((unsigned int *)a3 + 5);
    if (v10) {
      memmove(v9, *((const void **)a3 + 1), 8 * v10);
    }
  }
  else
  {
    *(void *)(a1 + 8) = v7;
    a3[1] = v8;
  }
  double result = a3[2];
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 5) = 0;
  *((_DWORD *)a3 + 6) = 0;
  *((_DWORD *)a3 + 4) = a2;
  return result;
}

void *llvm::SmallVectorBase<unsigned int>::mallocForGrow(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  if (HIDWORD(a3))
  {
    report_size_overflow(a3);
    goto LABEL_18;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 == -1)
  {
LABEL_18:
    report_at_maximum_capacity(0xFFFFFFFFuLL);
    goto LABEL_19;
  }
  unint64_t v7 = (2 * v5) | 1;
  uint64_t v8 = 0xFFFFFFFFLL;
  if (v7 < 0xFFFFFFFF) {
    uint64_t v8 = v7;
  }
  if (v7 >= a3) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = a3;
  }
  *a5 = v9;
  size_t v10 = v9 * a4;
  int v11 = malloc(v9 * a4);
  if (!v11)
  {
    if (v10) {
      goto LABEL_19;
    }
    int v11 = malloc(1uLL);
    if (!v11) {
      goto LABEL_19;
    }
  }
  if (v11 != a2) {
    return v11;
  }
  BOOL v13 = malloc(v10);
  if (!v13 && (v10 || (BOOL v13 = malloc(1uLL)) == 0)) {
LABEL_19:
  }
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  free(a2);
  return v13;
}

void llvm::SmallVectorBase<unsigned int>::grow_pod(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (HIDWORD(a3))
  {
    report_size_overflow(a3);
    goto LABEL_30;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 == -1)
  {
LABEL_30:
    report_at_maximum_capacity(0xFFFFFFFFuLL);
    goto LABEL_31;
  }
  unint64_t v8 = (2 * v5) | 1;
  uint64_t v9 = 0xFFFFFFFFLL;
  if (v8 < 0xFFFFFFFF) {
    uint64_t v9 = v8;
  }
  if (v8 >= a3) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = a3;
  }
  int v11 = *(void **)a1;
  size_t v12 = v10 * a4;
  if (*(void **)a1 == a2)
  {
    BOOL v13 = malloc(v10 * a4);
    if (v13 || !v12 && (BOOL v13 = malloc(1uLL)) != 0)
    {
      if (v13 == a2)
      {
        BOOL v13 = malloc(v12);
        if (!v13)
        {
          if (v12) {
            goto LABEL_31;
          }
          BOOL v13 = malloc(1uLL);
          if (!v13) {
            goto LABEL_31;
          }
        }
        free(a2);
      }
      memcpy(v13, a2, *(unsigned int *)(a1 + 8) * a4);
      goto LABEL_28;
    }
LABEL_31:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  BOOL v13 = realloc(v11, v10 * a4);
  if (!v13)
  {
    if (v12) {
      goto LABEL_31;
    }
    BOOL v13 = malloc(1uLL);
    if (!v13) {
      goto LABEL_31;
    }
  }
  if (v13 != a2) {
    goto LABEL_28;
  }
  uint64_t v14 = *(unsigned int *)(a1 + 8);
  BOOL v13 = malloc(v12);
  if (!v13)
  {
    if (v12) {
      goto LABEL_31;
    }
    BOOL v13 = malloc(1uLL);
    if (!v13) {
      goto LABEL_31;
    }
  }
  if (v14) {
    memcpy(v13, a2, v14 * a4);
  }
  free(a2);
LABEL_28:
  *(void *)a1 = v13;
  *(_DWORD *)(a1 + 12) = v10;
}

void llvm::SmallVectorBase<unsigned long long>::grow_pod(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == -1)
  {
    report_at_maximum_capacity(0xFFFFFFFFFFFFFFFFLL);
    goto LABEL_27;
  }
  unint64_t v8 = (2 * v4) | 1;
  if (v8 <= a3) {
    unint64_t v9 = a3;
  }
  else {
    unint64_t v9 = v8;
  }
  unint64_t v10 = *(void **)a1;
  size_t v11 = v9 * a4;
  if (v10 == a2)
  {
    size_t v12 = malloc(v9 * a4);
    if (v12 || !v11 && (size_t v12 = malloc(1uLL)) != 0)
    {
      if (v12 == a2)
      {
        size_t v12 = malloc(v11);
        if (!v12)
        {
          if (v11) {
            goto LABEL_27;
          }
          size_t v12 = malloc(1uLL);
          if (!v12) {
            goto LABEL_27;
          }
        }
        free(a2);
      }
      memcpy(v12, a2, *(void *)(a1 + 8) * a4);
      goto LABEL_25;
    }
LABEL_27:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  size_t v12 = realloc(v10, v9 * a4);
  if (!v12)
  {
    if (v11) {
      goto LABEL_27;
    }
    size_t v12 = malloc(1uLL);
    if (!v12) {
      goto LABEL_27;
    }
  }
  if (v12 != a2) {
    goto LABEL_25;
  }
  uint64_t v13 = *(void *)(a1 + 8);
  size_t v12 = malloc(v11);
  if (!v12)
  {
    if (v11) {
      goto LABEL_27;
    }
    size_t v12 = malloc(1uLL);
    if (!v12) {
      goto LABEL_27;
    }
  }
  if (v13) {
    memcpy(v12, a2, v13 * a4);
  }
  free(a2);
LABEL_25:
  *(void *)a1 = v12;
  *(void *)(a1 + 16) = v9;
}

uint64_t report_size_overflow(unint64_t a1)
{
  std::to_string(&v7, a1);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("SmallVector unable to grow. Requested capacity (", &v7, &v8);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v8, ") is larger than maximum value for size type (", &v9);
  std::to_string(&v6, 0xFFFFFFFFuLL);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v9, (const std::string::value_type *)&v6, &v4);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v4, ")", &v10);
  std::string::~string(&v4);
  std::string::~string(&v6);
  std::string::~string(&v9);
  std::string::~string(&v8);
  std::string::~string(&v7);
  __int16 v5 = 260;
  v4.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  unint64_t v2 = llvm::report_fatal_error((llvm *)&v4, (const llvm::Twine *)1, v1);
  return report_at_maximum_capacity(v2);
}

double report_at_maximum_capacity(unint64_t a1)
{
  std::to_string(&v6, a1);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("SmallVector capacity unable to grow. Already at maximum size ", &v6, &v8);
  std::string::~string(&v6);
  __int16 v7 = 260;
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  unint64_t v2 = (std::string *)llvm::report_fatal_error((llvm *)&v6, (const llvm::Twine *)1, v1);
  *(void *)&double result = std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v2, v3, v4).n128_u64[0];
  return result;
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *a1@<X0>, const std::string::value_type *a2@<X1>, std::string *a3@<X8>)
{
  std::string v4 = (__n128 *)std::string::append(a1, a2);
  __n128 result = *v4;
  *a3 = *(std::string *)v4->n128_u8;
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  return result;
}

{
  std::string::size_type v4;
  std::string::size_type v5;
  __n128 *v6;
  __n128 result;

  std::string v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    __int16 v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    __int16 v5 = v4;
  }
  std::string v6 = (__n128 *)std::string::append(a1, a2, v5);
  __n128 result = *v6;
  *a3 = *(std::string *)v6->n128_u8;
  v6->n128_u64[0] = 0;
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  return result;
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string::value_type *__s@<X0>, std::string *this@<X1>, std::string *a3@<X8>)
{
  std::string v4 = (__n128 *)std::string::insert(this, 0, __s);
  __n128 result = *v4;
  *a3 = *(std::string *)v4->n128_u8;
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  return result;
}

double llvm::SourceMgr::SourceMgr(llvm::SourceMgr *this)
{
  *((void *)this + 8) = 0;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void llvm::SourceMgr::~SourceMgr(llvm::SourceMgr *this)
{
  unint64_t v2 = (atomic_uint *)*((void *)this + 8);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 4);
    __int16 v5 = (void *)*((void *)this + 3);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 24;
      }
      while (v4 != v3);
      __int16 v5 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v3;
    operator delete(v5);
  }
  if (*(void *)this)
  {
    std::vector<llvm::SourceMgr::SrcBuffer>::__base_destruct_at_end[abi:nn180100](this, *(void *)this);
    operator delete(*(void **)this);
  }
}

uint64_t llvm::SourceMgr::AddIncludeFile(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  llvm::SourceMgr::OpenIncludeFile(a1, a2, a4, (uint64_t)&v11);
  if (v12) {
    return 0;
  }
  unint64_t v10 = v11;
  unint64_t v11 = 0;
  uint64_t v6 = llvm::SourceMgr::AddNewSourceBuffer((uint64_t)a1, &v10, a3);
  unint64_t v7 = v10;
  unint64_t v10 = 0;
  if (v7) {
    (*(void (**)(unint64_t))(*(void *)v7 + 8))(v7);
  }
  if ((v12 & 1) == 0)
  {
    unint64_t v8 = v11;
    unint64_t v11 = 0;
    if (v8) {
      (*(void (**)(unint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  return v6;
}

void llvm::SourceMgr::OpenIncludeFile(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v7 = *(char *)(a2 + 23);
  BOOL v8 = v7 < 0;
  std::string v9 = *(const void **)a2;
  if (v7 >= 0) {
    std::string v9 = (const void *)a2;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  if (v8) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  uint64_t v11 = a1[8];
  v50[4] = 261;
  *(void *)std::string __src = v9;
  *(void *)&__src[8] = v10;
  if (v11) {
    llvm::vfs::FileSystem::getBufferForFile(v11, (uint64_t)__src, -1, 1, 0, 0, a4);
  }
  else {
    llvm::MemoryBuffer::getFile(__src, 0, 1, 0, 0, a4);
  }
  int v12 = *(char *)(a2 + 23);
  if (v12 >= 0) {
    uint64_t v13 = (const void *)a2;
  }
  else {
    uint64_t v13 = *(const void **)a2;
  }
  if (v12 >= 0) {
    unint64_t v14 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v14 = *(void *)(a2 + 8);
  }
  *(void *)std::string __src = v50;
  *(_OWORD *)&__src[8] = xmmword_181101A40;
  if (v14 < 0x41)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    if (!v14) {
      goto LABEL_18;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__src, v50, v14, 1);
    uint64_t v15 = *(void *)&__src[8];
  }
  memcpy((void *)(*(void *)__src + v15), v13, v14);
  uint64_t v16 = *(void *)&__src[8];
LABEL_18:
  *(void *)&__src[8] = v16 + v14;
  uint64_t v17 = -1431655765 * ((a1[4] - a1[3]) >> 3);
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 24 * v17;
    do
    {
      if ((*(unsigned char *)(a4 + 16) & 1) == 0) {
        break;
      }
      uint64_t v20 = a1[3] + v18;
      int v21 = *(char *)(v20 + 23);
      if (v21 >= 0) {
        int v22 = (const void *)(a1[3] + v18);
      }
      else {
        int v22 = *(const void **)v20;
      }
      if (v21 >= 0) {
        unint64_t v23 = *(unsigned __int8 *)(v20 + 23);
      }
      else {
        unint64_t v23 = *(void *)(v20 + 8);
      }
      *(void *)&__src[8] = 0;
      if (*(void *)&__src[16] >= v23)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        if (!v23) {
          goto LABEL_32;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__src, v50, v23, 1);
        uint64_t v24 = *(void *)&__src[8];
      }
      memcpy((void *)(*(void *)__src + v24), v22, v23);
      uint64_t v25 = *(void *)&__src[8];
LABEL_32:
      *(void *)&__src[8] = v25 + v23;
      __int16 v45 = 260;
      *(void *)&long long __dst = a2;
      __int16 v48 = 257;
      __int16 v42 = 257;
      __int16 v40 = 257;
      llvm::sys::path::append(__src, (void **)&__dst, v46, &v41, &v39);
      uint64_t v26 = a1[8];
      if (v26)
      {
        __int16 v45 = 261;
        long long __dst = *(_OWORD *)__src;
        llvm::vfs::FileSystem::getBufferForFile(v26, (uint64_t)&__dst, -1, 1, 0, 0, (uint64_t)v46);
        if (v46 == (void **)a4) {
          goto LABEL_40;
        }
      }
      else
      {
        __int16 v45 = 261;
        long long __dst = *(_OWORD *)__src;
        llvm::MemoryBuffer::getFile((unsigned __int8 *)&__dst, 0, 1, 0, 0, (uint64_t)v46);
        if (v46 == (void **)a4)
        {
LABEL_40:
          if ((v47 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_20;
        }
      }
      char v27 = *(unsigned char *)(a4 + 16);
      if ((v27 & 1) == 0)
      {
        int v28 = *(void **)a4;
        *(void *)a4 = 0;
        if (v28)
        {
          (*(void (**)(void *))(*v28 + 8))(v28);
          char v27 = *(unsigned char *)(a4 + 16);
        }
      }
      if ((v47 & 1) == 0)
      {
        *(unsigned char *)(a4 + 16) = v27 & 0xFE;
        int v29 = v46[0];
        v46[0] = 0;
        *(void *)a4 = v29;
LABEL_43:
        int v31 = v46[0];
        v46[0] = 0;
        if (v31) {
          (*(void (**)(void *))(*v31 + 8))(v31);
        }
        goto LABEL_20;
      }
      *(unsigned char *)(a4 + 16) = v27 | 1;
      int v30 = v46[1];
      *(void **)a4 = v46[0];
      *(void *)(a4 + 8) = v30;
LABEL_20:
      v18 += 24;
    }
    while (v19 != v18);
  }
  int v32 = *(_WORD **)__src;
  if ((*(unsigned char *)(a4 + 16) & 1) == 0)
  {
    size_t v33 = *(void *)&__src[8];
    if (*(void *)&__src[8] >= 0x7FFFFFFFFFFFFFF8uLL) {
      abort();
    }
    if (*(void *)&__src[8] >= 0x17uLL)
    {
      uint64_t v36 = (*(void *)&__src[8] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((*(void *)&__src[8] | 7) != 0x17) {
        uint64_t v36 = *(void *)&__src[8] | 7;
      }
      uint64_t v37 = v36 + 1;
      p_dst = (long long *)operator new(v36 + 1);
      *((void *)&__dst + 1) = v33;
      unint64_t v44 = v37 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
      uint64_t v35 = a3;
    }
    else
    {
      HIBYTE(v44) = __src[8];
      p_dst = &__dst;
      uint64_t v35 = a3;
      if (!*(void *)&__src[8])
      {
        LOBYTE(__dst) = 0;
        if ((*(char *)(a3 + 23) & 0x80000000) == 0)
        {
LABEL_50:
          *(_OWORD *)uint64_t v35 = __dst;
          *(void *)(v35 + 16) = v44;
          int v32 = *(_WORD **)__src;
          goto LABEL_51;
        }
LABEL_58:
        operator delete(*(void **)v35);
        goto LABEL_50;
      }
    }
    memmove(p_dst, v32, v33);
    *((unsigned char *)p_dst + v33) = 0;
    if ((*(char *)(v35 + 23) & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_58;
  }
LABEL_51:
  if (v32 != v50) {
    free(v32);
  }
}

uint64_t llvm::SourceMgr::AddNewSourceBuffer(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v4 = *a2;
  *a2 = 0;
  __n128 v13 = (__n128)v4;
  unint64_t v14 = a3;
  __int16 v5 = *(unint64_t **)(a1 + 8);
  if ((unint64_t)v5 < *(void *)(a1 + 16))
  {
    *__int16 v5 = v4;
    v5[1] = 0;
    v5[2] = a3;
    uint64_t v6 = (__n128 *)(v5 + 3);
    *(void *)(a1 + 8) = v5 + 3;
    int v7 = *(__n128 **)a1;
    return -1431655765 * ((unint64_t)((char *)v6 - (char *)v7) >> 3);
  }
  uint64_t v6 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>((__n128 **)a1, &v13);
  std::string v9 = (void **)v13.n128_u64[1];
  BOOL v8 = (void *)v13.n128_u64[0];
  *(void *)(a1 + 8) = v6;
  int v7 = *(__n128 **)a1;
  if (v9)
  {
    unint64_t v10 = v8[2] - v8[1];
    if (v10 > 0xFF && v10 >> 16)
    {
      uint64_t v11 = *v9;
      if (!*v9) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v11 = *v9;
      if (!*v9)
      {
LABEL_10:
        operator delete(v9);
        v13.n128_u64[1] = 0;
        BOOL v8 = (void *)v13.n128_u64[0];
        goto LABEL_11;
      }
    }
    v9[1] = v11;
    operator delete(v11);
    goto LABEL_10;
  }
LABEL_11:
  v13.n128_u64[0] = 0;
  if (v8) {
    (*(void (**)(void *))(*v8 + 8))(v8);
  }
  return -1431655765 * ((unint64_t)((char *)v6 - (char *)v7) >> 3);
}

uint64_t llvm::SourceMgr::SrcBuffer::getLineNumber(llvm::SourceMgr::SrcBuffer *this, const char *a2)
{
  uint64_t v6 = *(void *)this;
  unint64_t v4 = (unint64_t **)((char *)this + 8);
  uint64_t v5 = v6;
  unint64_t v7 = *(void *)(v6 + 16) - *(void *)(v6 + 8);
  if (v7 <= 0xFF)
  {
    Offset = GetOrCreateOffsetCache<unsigned char>(v4, v5);
    unint64_t v17 = Offset[1] - *Offset;
    if (v17)
    {
      unint64_t v18 = *Offset;
      do
      {
        unint64_t v19 = v17 >> 1;
        uint64_t v20 = (unsigned __int8 *)(v18 + (v17 >> 1));
        unsigned int v22 = *v20;
        int v21 = v20 + 1;
        v17 += ~(v17 >> 1);
        if (v22 < ((_BYTE)a2 - *(_DWORD *)(*(void *)this + 8))) {
          unint64_t v18 = (unint64_t)v21;
        }
        else {
          unint64_t v17 = v19;
        }
      }
      while (v17);
      return v18 - *Offset + 1;
    }
    else
    {
      return 1;
    }
  }
  else if (v7 >> 16)
  {
    if (HIDWORD(v7))
    {
      BOOL v8 = (unint64_t **)GetOrCreateOffsetCache<unsigned long long>(v4, v5);
      std::string v9 = v8[1];
      if (v9 != *v8)
      {
        unint64_t v10 = v9 - *v8;
        std::string v9 = *v8;
        do
        {
          unint64_t v11 = v10 >> 1;
          int v12 = &v9[v10 >> 1];
          unint64_t v14 = *v12;
          __n128 v13 = v12 + 1;
          v10 += ~(v10 >> 1);
          if (v14 < (unint64_t)&a2[-*(void *)(*(void *)this + 8)]) {
            std::string v9 = v13;
          }
          else {
            unint64_t v10 = v11;
          }
        }
        while (v10);
      }
      return ((unint64_t)((char *)v9 - (char *)*v8) >> 3) + 1;
    }
    else
    {
      int v30 = GetOrCreateOffsetCache<unsigned int>(v4, v5);
      int v31 = (_DWORD *)v30[1];
      if (v31 != (_DWORD *)*v30)
      {
        unint64_t v32 = ((uint64_t)v31 - *v30) >> 2;
        int v31 = (_DWORD *)*v30;
        do
        {
          unint64_t v33 = v32 >> 1;
          int v34 = &v31[v32 >> 1];
          unsigned int v36 = *v34;
          uint64_t v35 = v34 + 1;
          v32 += ~(v32 >> 1);
          if (v36 < (int)a2 - *(_DWORD *)(*(void *)this + 8)) {
            int v31 = v35;
          }
          else {
            unint64_t v32 = v33;
          }
        }
        while (v32);
      }
      return (((unint64_t)v31 - *v30) >> 2) + 1;
    }
  }
  else
  {
    unint64_t v23 = (unsigned __int16 **)GetOrCreateOffsetCache<unsigned short>(v4, v5);
    uint64_t v24 = v23[1];
    if (v24 != *v23)
    {
      unint64_t v25 = v24 - *v23;
      uint64_t v24 = *v23;
      do
      {
        unint64_t v26 = v25 >> 1;
        char v27 = &v24[v25 >> 1];
        unsigned int v29 = *v27;
        int v28 = v27 + 1;
        v25 += ~(v25 >> 1);
        if (v29 < (unsigned __int16)((_WORD)a2 - *(_DWORD *)(*(void *)this + 8))) {
          uint64_t v24 = v28;
        }
        else {
          unint64_t v25 = v26;
        }
      }
      while (v25);
    }
    return ((unint64_t)((char *)v24 - (char *)*v23) >> 1) + 1;
  }
}

unint64_t llvm::SourceMgr::SrcBuffer::getPointerForLineNumber(unint64_t **this, unsigned int a2)
{
  uint64_t v4 = (uint64_t)*this;
  unint64_t v5 = (*this)[2] - (*this)[1];
  if (v5 <= 0xFF)
  {
    Offset = GetOrCreateOffsetCache<unsigned char>(this + 1, v4);
    unsigned int v13 = a2 - 1;
    if (!a2) {
      unsigned int v13 = 0;
    }
    unint64_t result = (*this)[1];
    if (a2 >= 2)
    {
      uint64_t v15 = Offset;
      unint64_t v14 = *Offset;
      if (v15[1] - v14 >= v13) {
        result += *(unsigned __int8 *)(v14 + v13 - 1) + 1;
      }
      else {
        return 0;
      }
    }
  }
  else
  {
    if (a2) {
      unint64_t v6 = a2 - 1;
    }
    else {
      unint64_t v6 = 0;
    }
    unint64_t v7 = this + 1;
    if (v5 >> 16)
    {
      if (HIDWORD(v5))
      {
        BOOL v8 = GetOrCreateOffsetCache<unsigned long long>(v7, v4);
        unint64_t result = (*this)[1];
        if (a2 >= 2)
        {
          unint64_t v11 = v8;
          uint64_t v10 = *v8;
          if (v6 <= (v11[1] - v10) >> 3) {
            result += *(void *)(v10 + 8 * (v6 - 1)) + 1;
          }
          else {
            return 0;
          }
        }
      }
      else
      {
        unint64_t v19 = GetOrCreateOffsetCache<unsigned int>(v7, v4);
        unint64_t result = (*this)[1];
        if (a2 >= 2)
        {
          int v21 = v19;
          uint64_t v20 = *v19;
          if (v6 <= (v21[1] - v20) >> 2) {
            result += *(unsigned int *)(v20 + 4 * (v6 - 1)) + 1;
          }
          else {
            return 0;
          }
        }
      }
    }
    else
    {
      uint64_t v16 = GetOrCreateOffsetCache<unsigned short>(v7, v4);
      unint64_t result = (*this)[1];
      if (a2 >= 2)
      {
        unint64_t v18 = v16;
        uint64_t v17 = *v16;
        if (v6 <= (v18[1] - v17) >> 1) {
          result += *(unsigned __int16 *)(v17 + 2 * (v6 - 1)) + 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

__n128 llvm::SourceMgr::SrcBuffer::SrcBuffer(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a2->n128_u64[0] = 0;
  *a1 = result;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  return result;
}

void llvm::SourceMgr::SrcBuffer::~SrcBuffer(llvm::SourceMgr::SrcBuffer *this)
{
  unint64_t v2 = (void **)*((void *)this + 1);
  if (!v2) {
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(*(void *)this + 16) - *(void *)(*(void *)this + 8);
  if (v3 > 0xFF && v3 >> 16)
  {
    uint64_t v4 = *v2;
    if (!*v2) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
LABEL_7:
    v2[1] = v4;
    operator delete(v4);
  }
LABEL_8:
  operator delete(v2);
  *((void *)this + 1) = 0;
LABEL_9:
  uint64_t v5 = *(void *)this;
  *(void *)this = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
}

unint64_t llvm::SourceMgr::FindLocForLineAndColumn(llvm::SourceMgr *this, int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5 = (unint64_t **)(*(void *)this + 24 * (a2 - 1));
  unint64_t result = llvm::SourceMgr::SrcBuffer::getPointerForLineNumber(v5, a3);
  if (result && a4 >= 2)
  {
    uint64_t v7 = a4 - 1;
    uint64_t v8 = result + v7;
    if (result + v7 <= (*v5)[2])
    {
      v10[0] = result;
      v10[1] = v7;
      uint64_t first_of = llvm::StringRef::find_first_of(v10, "\n\r", 2, 0);
      unint64_t result = 0;
      if (first_of == -1) {
        return v8;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::SourceMgr::PrintIncludeStack(llvm::raw_ostream *result, const char *a2, llvm::raw_ostream *a3)
{
  if (a2)
  {
    unint64_t v3 = a3;
    uint64_t v5 = result;
    uint64_t v6 = -1431655765 * ((*((void *)result + 1) - *(void *)result) >> 3);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)result;
      while (*(void *)(*(void *)v8 + 8) > (unint64_t)a2
           || *(void *)(*(void *)v8 + 16) < (unint64_t)a2)
      {
        ++v7;
        v8 += 24;
        if (v6 == v7) {
          goto LABEL_8;
        }
      }
      int v9 = v7 + 1;
    }
    else
    {
LABEL_8:
      int v9 = 0;
    }
    llvm::SourceMgr::PrintIncludeStack(result, *(void *)(*(void *)result + 24 * (v9 - 1) + 16), a3);
    uint64_t v10 = (void *)*((void *)v3 + 4);
    if (*((void *)v3 + 3) - (void)v10 > 0xDuLL)
    {
      qmemcpy(v10, "Included from ", 14);
      *((void *)v3 + 4) += 14;
    }
    else
    {
      unint64_t v3 = llvm::raw_ostream::write(v3, "Included from ", 0xEuLL);
    }
    uint64_t v11 = *(void *)(*(void *)v5 + 24 * (v9 - 1));
    unsigned int v13 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
    size_t v14 = v12;
    uint64_t v15 = (unsigned char *)*((void *)v3 + 4);
    if (v12 <= *((void *)v3 + 3) - (void)v15)
    {
      if (v12)
      {
        memcpy(v15, v13, v12);
        uint64_t v15 = (unsigned char *)(*((void *)v3 + 4) + v14);
        *((void *)v3 + 4) = v15;
      }
    }
    else
    {
      unint64_t v3 = llvm::raw_ostream::write(v3, (const char *)v13, v12);
      uint64_t v15 = (unsigned char *)*((void *)v3 + 4);
    }
    if (*((unsigned char **)v3 + 3) == v15)
    {
      unint64_t v3 = llvm::raw_ostream::write(v3, ":", 1uLL);
      uint64_t v16 = *(void *)v5;
      if (!v9) {
        goto LABEL_20;
      }
    }
    else
    {
      unsigned char *v15 = 58;
      ++*((void *)v3 + 4);
      uint64_t v16 = *(void *)v5;
      if (!v9)
      {
LABEL_20:
        uint64_t v17 = -1431655765 * ((unint64_t)(*((void *)v5 + 1) - v16) >> 3);
        if (v17)
        {
          uint64_t v18 = 0;
          uint64_t v19 = v16;
          while (*(void *)(*(void *)v19 + 8) > (unint64_t)a2
               || *(void *)(*(void *)v19 + 16) < (unint64_t)a2)
          {
            ++v18;
            v19 += 24;
            if (v17 == v18) {
              goto LABEL_26;
            }
          }
          int v9 = v18 + 1;
        }
        else
        {
LABEL_26:
          int v9 = 0;
        }
      }
    }
    uint64_t v20 = (llvm::SourceMgr::SrcBuffer *)(v16 + 24 * (v9 - 1));
    unsigned int LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v20, a2);
    v23[0] = *(void *)(*(void *)v20 + 8);
    v23[1] = &a2[-v23[0]];
    llvm::StringRef::find_last_of(v23, "\n\r", 2, 0xFFFFFFFFFFFFFFFFLL);
    unint64_t result = llvm::raw_ostream::operator<<(v3, LineNumber);
    unsigned int v22 = (_WORD *)*((void *)result + 4);
    if (*((void *)result + 3) - (void)v22 > 1uLL)
    {
      _WORD *v22 = 2618;
      *((void *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, ":\n", 2uLL);
    }
  }
  return result;
}

void llvm::SourceMgr::GetMessage(uint64_t *a1@<X0>, const char *a2@<X1>, int a3@<W2>, llvm::Twine *a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X5>, long long *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v60[4] = *MEMORY[0x1E4F143B8];
  int v58 = v60;
  uint64_t v59 = 0x400000000;
  if (a2)
  {
    uint64_t v13 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 3);
    int v52 = a4;
    if (v13)
    {
      uint64_t v14 = 0;
      uint64_t v15 = *a1;
      while (*(void *)(*(void *)v15 + 8) > (unint64_t)a2
           || *(void *)(*(void *)v15 + 16) < (unint64_t)a2)
      {
        ++v14;
        v15 += 24;
        if (v13 == v14) {
          goto LABEL_8;
        }
      }
      int v16 = v14 + 1;
    }
    else
    {
LABEL_8:
      int v16 = 0;
    }
    uint64_t v17 = *(void **)(*a1 + 24 * (v16 - 1));
    uint64_t v18 = (*(uint64_t (**)(void *))(*v17 + 16))(v17);
    size_t v20 = v19;
    int v21 = (char *)v17[1];
    unsigned int v22 = a2;
    while (v22 != v21)
    {
      int v24 = *(unsigned __int8 *)--v22;
      int v23 = v24;
      if (v24 == 13 || v23 == 10)
      {
        int v21 = (char *)(v22 + 1);
        break;
      }
    }
    unint64_t v26 = (unsigned __int8 *)v17[2];
    char v27 = a2;
    if (v26 != (unsigned __int8 *)a2)
    {
      while (1)
      {
        int v28 = *(unsigned __int8 *)v27;
        if (v28 == 10 || v28 == 13) {
          break;
        }
        if (++v27 == (const char *)v26)
        {
          char v27 = (const char *)v26;
          break;
        }
      }
    }
    if (a6)
    {
      int v30 = &a5[2 * a6];
      do
      {
        unint64_t v32 = *a5;
        unint64_t v31 = a5[1];
        if (*a5) {
          BOOL v33 = v32 > (unint64_t)v27;
        }
        else {
          BOOL v33 = 1;
        }
        if (!v33 && v31 >= (unint64_t)v21)
        {
          if (v32 >= (unint64_t)v21) {
            int v35 = *a5;
          }
          else {
            int v35 = (int)v21;
          }
          if (v31 <= (unint64_t)v27) {
            int v36 = a5[1];
          }
          else {
            int v36 = (int)v27;
          }
          uint64_t v37 = v59;
          if (v59 >= (unint64_t)HIDWORD(v59))
          {
            uint64_t v50 = v18;
            size_t v51 = v20;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v59 + 1, 8);
            uint64_t v18 = v50;
            size_t v20 = v51;
            uint64_t v37 = v59;
          }
          *((void *)v58 + v37) = (v35 - v21) | ((unint64_t)(v36 - v21) << 32);
          LODWORD(v59) = v59 + 1;
        }
        a5 += 2;
      }
      while (a5 != v30);
    }
    size_t v38 = v27 - v21;
    uint64_t v39 = *a1;
    if (!v16)
    {
      uint64_t v40 = -1431655765 * ((unint64_t)(a1[1] - v39) >> 3);
      if (v40)
      {
        uint64_t v41 = 0;
        uint64_t v42 = *a1;
        while (*(void *)(*(void *)v42 + 8) > (unint64_t)a2
             || *(void *)(*(void *)v42 + 16) < (unint64_t)a2)
        {
          ++v41;
          v42 += 24;
          if (v40 == v41) {
            goto LABEL_52;
          }
        }
        int v16 = v41 + 1;
      }
      else
      {
LABEL_52:
        int v16 = 0;
      }
    }
    char v47 = (llvm::SourceMgr::SrcBuffer *)(v39 + 24 * (v16 - 1));
    size_t v45 = v20;
    int v46 = (char *)v18;
    int LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v47, a2);
    __p.__r_.__value_.__r.__words[0] = *(void *)(*(void *)v47 + 8);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&a2[-__p.__r_.__value_.__r.__words[0]];
    int v44 = ~llvm::StringRef::find_last_of(&__p, "\n\r", 2, 0xFFFFFFFFFFFFFFFFLL)
        + a2
        - LODWORD(__p.__r_.__value_.__l.__data_);
    a4 = v52;
  }
  else
  {
    size_t v38 = 0;
    int v21 = 0;
    int LineNumber = 0;
    int v44 = -1;
    size_t v45 = 9;
    int v46 = "<unknown>";
  }
  llvm::Twine::str(a4, &__p);
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  llvm::SMDiagnostic::SMDiagnostic(a9, (uint64_t)a1, (uint64_t)a2, v46, v45, LineNumber, v44, a3, p_p, size, v21, v38, v58, v59, a7, a8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v58 != v60) {
    free(v58);
  }
}

void llvm::SMDiagnostic::print(llvm::SMDiagnostic *this, const char *a2, llvm::raw_ostream *a3, int a4, int a5)
{
  char v6 = a4;
  uint64_t v7 = a3;
  if (a4) {
    int v10 = 0;
  }
  else {
    int v10 = 2;
  }
  __b.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  LODWORD(__b.__r_.__value_.__r.__words[1]) = v10;
  llvm::WithColor::changeColor(&__b, 8, 1, 0);
  if (!a2 || !*a2)
  {
LABEL_12:
    int v16 = (char *)this + 16;
    size_t v17 = *((unsigned __int8 *)this + 39);
    if ((*((char *)this + 39) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  std::string::size_type v11 = __b.__r_.__value_.__r.__words[0];
  size_t v12 = strlen(a2);
  uint64_t v13 = *(void **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (v12 <= *(void *)(__b.__r_.__value_.__r.__words[0] + 24) - (void)v13)
  {
    if (v12)
    {
      memcpy(v13, a2, v12);
      *(void *)(v11 + 32) += v12;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, a2, v12);
  }
  std::string::size_type v14 = __b.__r_.__value_.__r.__words[0];
  uint64_t v15 = *(_WORD **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (*(void *)(__b.__r_.__value_.__r.__words[0] + 24) - (void)v15 <= 1uLL)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, ": ", 2uLL);
    goto LABEL_12;
  }
  _WORD *v15 = 8250;
  *(void *)(v14 + 32) += 2;
  int v16 = (char *)this + 16;
  size_t v17 = *((unsigned __int8 *)this + 39);
  if ((*((char *)this + 39) & 0x80000000) == 0)
  {
LABEL_13:
    if (!v17) {
      goto LABEL_41;
    }
    if (v17 != 1 || *v16 != 45) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
LABEL_18:
  uint64_t v18 = *((void *)this + 3);
  if (!v18) {
    goto LABEL_41;
  }
  if (v18 != 1 || **(unsigned char **)v16 != 45)
  {
LABEL_24:
    if ((v17 & 0x80u) == 0) {
      int v21 = v16;
    }
    else {
      int v21 = (const char *)*((void *)this + 2);
    }
    if ((v17 & 0x80u) == 0) {
      size_t v22 = v17;
    }
    else {
      size_t v22 = *((void *)this + 3);
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, v21, v22);
    if (*((_DWORD *)this + 10) == -1) {
      goto LABEL_39;
    }
    goto LABEL_31;
  }
LABEL_21:
  std::string::size_type v19 = __b.__r_.__value_.__r.__words[0];
  size_t v20 = *(_DWORD **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (*(void *)(__b.__r_.__value_.__r.__words[0] + 24) - (void)v20 > 6uLL)
  {
    *(_DWORD *)((char *)v20 + 3) = 1047423332;
    _DWORD *v20 = 1685353276;
    *(void *)(v19 + 32) += 7;
    if (*((_DWORD *)this + 10) == -1) {
      goto LABEL_39;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, "<stdin>", 7uLL);
    if (*((_DWORD *)this + 10) == -1) {
      goto LABEL_39;
    }
  }
LABEL_31:
  int v23 = *(unsigned char **)(__b.__r_.__value_.__r.__words[0] + 32);
  if ((unint64_t)v23 >= *(void *)(__b.__r_.__value_.__r.__words[0] + 24))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 58);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, *((int *)this + 10));
    if (*((_DWORD *)this + 11) == -1) {
      goto LABEL_39;
    }
  }
  else
  {
    *(void *)(__b.__r_.__value_.__r.__words[0] + 32) = v23 + 1;
    *int v23 = 58;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, *((int *)this + 10));
    if (*((_DWORD *)this + 11) == -1) {
      goto LABEL_39;
    }
  }
  int v24 = *(unsigned char **)(__b.__r_.__value_.__r.__words[0] + 32);
  if ((unint64_t)v24 >= *(void *)(__b.__r_.__value_.__r.__words[0] + 24))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 58);
  }
  else
  {
    *(void *)(__b.__r_.__value_.__r.__words[0] + 32) = v24 + 1;
    unsigned char *v24 = 58;
  }
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, *((int *)this + 11) + 1);
LABEL_39:
  std::string::size_type v25 = __b.__r_.__value_.__r.__words[0];
  unint64_t v26 = *(_WORD **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (*(void *)(__b.__r_.__value_.__r.__words[0] + 24) - (void)v26 <= 1uLL)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, ": ", 2uLL);
LABEL_41:
    llvm::WithColor::~WithColor((llvm::WithColor *)&__b);
    if (!a5) {
      goto LABEL_49;
    }
    goto LABEL_44;
  }
  _WORD *v26 = 8250;
  *(void *)(v25 + 32) += 2;
  llvm::WithColor::~WithColor((llvm::WithColor *)&__b);
  if (!a5) {
    goto LABEL_49;
  }
LABEL_44:
  switch(*((_DWORD *)this + 12))
  {
    case 0:
      llvm::WithColor::error(v7, "", 0, v6 ^ 1);
      break;
    case 1:
      llvm::WithColor::warning(v7, "", 0, v6 ^ 1);
      break;
    case 2:
      llvm::WithColor::remark(v7, "", 0, v6 ^ 1);
      break;
    case 3:
      llvm::WithColor::note(v7, "", 0, v6 ^ 1);
      break;
    default:
      break;
  }
LABEL_49:
  __b.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  LODWORD(__b.__r_.__value_.__r.__words[1]) = v10;
  llvm::WithColor::changeColor(&__b, 8, 1, 0);
  int v27 = *((char *)this + 79);
  if (v27 >= 0) {
    int v28 = (char *)this + 56;
  }
  else {
    int v28 = (const char *)*((void *)this + 7);
  }
  if (v27 >= 0) {
    size_t v29 = *((unsigned __int8 *)this + 79);
  }
  else {
    size_t v29 = *((void *)this + 8);
  }
  llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, v28, v29);
  int v30 = *(unsigned char **)(__b.__r_.__value_.__r.__words[0] + 32);
  if ((unint64_t)v30 >= *(void *)(__b.__r_.__value_.__r.__words[0] + 24))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 10);
    llvm::WithColor::~WithColor((llvm::WithColor *)&__b);
    if (*((_DWORD *)this + 10) == -1) {
      return;
    }
  }
  else
  {
    *(void *)(__b.__r_.__value_.__r.__words[0] + 32) = v30 + 1;
    unsigned char *v30 = 10;
    llvm::WithColor::~WithColor((llvm::WithColor *)&__b);
    if (*((_DWORD *)this + 10) == -1) {
      return;
    }
  }
  if (*((_DWORD *)this + 11) == -1) {
    return;
  }
  unint64_t v31 = (void *)((char *)this + 80);
  int v32 = *((char *)this + 103);
  if (v32 >= 0) {
    BOOL v33 = (char *)this + 80;
  }
  else {
    BOOL v33 = (char *)*((void *)this + 10);
  }
  if (v32 >= 0) {
    unint64_t v34 = *((unsigned __int8 *)this + 103);
  }
  else {
    unint64_t v34 = *((void *)this + 11);
  }
  if (!v34)
  {
    size_t v36 = 1;
    *((unsigned char *)&__b.__r_.__value_.__s + 23) = 1;
    p_b = &__b;
    goto LABEL_81;
  }
  for (uint64_t i = 0; i != v34; ++i)
  {
    if (v33[i] < 0)
    {
      printSourceLine(v7, (uint64_t)v33, v34);
      return;
    }
  }
  size_t v36 = v34 + 1;
  if (v34 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v36 >= 0x17)
  {
    uint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v38 = v36 | 7;
    }
    uint64_t v39 = v38 + 1;
    p_b = (std::string *)operator new(v38 + 1);
    __b.__r_.__value_.__l.__size_ = v34 + 1;
    __b.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    goto LABEL_81;
  }
  *((unsigned char *)&__b.__r_.__value_.__s + 23) = v34 + 1;
  p_b = &__b;
  if (v34 != -1) {
LABEL_81:
  }
    memset(p_b, 32, v36);
  p_b->__r_.__value_.__s.__data_[v36] = 0;
  uint64_t v40 = (unsigned int *)*((void *)this + 13);
  for (uint64_t j = (unsigned int *)*((void *)this + 14); v40 != j; v40 += 2)
  {
    uint64_t v42 = (std::string *)__b.__r_.__value_.__r.__words[0];
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v42 = &__b;
    }
    std::string::size_type size = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __b.__r_.__value_.__l.__size_;
    }
    if (size >= v40[1]) {
      std::string::size_type size = v40[1];
    }
    int64_t v44 = size - *v40;
    if (v44 >= 1) {
      memset((char *)v42 + *v40, 126, v44);
    }
  }
  memset(&v163, 0, sizeof(v163));
  uint64_t v45 = *((unsigned int *)this + 34);
  if (*((char *)this + 103) < 0)
  {
    uint64_t v46 = *((void *)this + 11);
    uint64_t v47 = *((int *)this + 11);
    if (v45) {
      goto LABEL_95;
    }
  }
  else
  {
    uint64_t v46 = *((unsigned __int8 *)this + 103);
    uint64_t v47 = *((int *)this + 11);
    if (v45)
    {
LABEL_95:
      unint64_t v160 = v34;
      int v161 = v10;
      int v162 = v7;
      std::string::size_type v48 = 0;
      unint64_t v49 = *((void *)this + 1) - v47;
      unint64_t v50 = v49 + v46;
      uint64_t v51 = *((void *)this + 16) + 24;
      uint64_t v52 = 40 * v45;
      do
      {
        int v53 = *(llvm::raw_ostream **)(v51 - 8);
        int v54 = *(char *)(v51 + 15);
        BOOL v55 = v54 < 0;
        if (v54 >= 0) {
          int v53 = (llvm::raw_ostream *)(v51 - 8);
        }
        size_t v56 = *(unsigned __int8 *)(v51 + 15);
        if (v55) {
          size_t v56 = *(void *)v51;
        }
        int v165 = v53;
        size_t v166 = v56;
        if (llvm::StringRef::find_first_of(&v165, "\n\r\t", 3, 0) == -1)
        {
          unint64_t v57 = *(void *)(v51 - 24);
          unint64_t v58 = *(void *)(v51 - 16);
          if (v50 >= v57 && v49 <= v58)
          {
            if (v49 <= v57) {
              std::string::size_type v60 = (v57 - v49);
            }
            else {
              std::string::size_type v60 = 0;
            }
            if (v48 > v60) {
              uint64_t v61 = (v48 + 1);
            }
            else {
              uint64_t v61 = v60;
            }
            size_t v62 = *(unsigned __int8 *)(v51 + 15);
            char v63 = v62;
            size_t v64 = *(void *)v51;
            if ((v62 & 0x80u) == 0) {
              int v65 = *(unsigned __int8 *)(v51 + 15);
            }
            else {
              int v65 = *(void *)v51;
            }
            std::string::size_type v48 = (v61 + v65);
            std::string::size_type v66 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v66 = v163.__r_.__value_.__l.__size_;
            }
            if (v66 < v48)
            {
              std::string::resize(&v163, v48, 32);
              size_t v62 = *(unsigned __int8 *)(v51 + 15);
              size_t v64 = *(void *)v51;
              char v63 = *(unsigned char *)(v51 + 15);
            }
            if (v63 >= 0) {
              size_t v67 = v62;
            }
            else {
              size_t v67 = v64;
            }
            if (v67)
            {
              int v68 = &v163;
              if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int v68 = (std::string *)v163.__r_.__value_.__r.__words[0];
              }
              if (v63 >= 0) {
                int v69 = (const void *)(v51 - 8);
              }
              else {
                int v69 = *(const void **)(v51 - 8);
              }
              memmove((char *)v68 + v61, v69, v67);
            }
            if (v50 <= v58) {
              int v70 = v50;
            }
            else {
              int v70 = v58;
            }
            uint64_t v71 = (v70 - v49);
            int v72 = &__b;
            if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v72 = (std::string *)__b.__r_.__value_.__r.__words[0];
            }
            if ((uint64_t)(v71 - v60) >= 1) {
              memset((char *)v72 + v60, 126, v71 - v60);
            }
          }
        }
        v51 += 40;
        v52 -= 40;
      }
      while (v52);
      LODWORD(v47) = *((_DWORD *)this + 11);
      unint64_t v31 = (void *)((char *)this + 80);
      uint64_t v7 = v162;
      int v10 = v161;
      unint64_t v34 = v160;
      if (v160 >= v47) {
        goto LABEL_137;
      }
LABEL_142:
      int v75 = &__b;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v75 = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      int v74 = (char *)v75 + v34;
      goto LABEL_145;
    }
  }
  if (v34 < v47) {
    goto LABEL_142;
  }
LABEL_137:
  int v73 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v73 = (std::string *)__b.__r_.__value_.__r.__words[0];
  }
  int v74 = (char *)v73 + (int)v47;
LABEL_145:
  *int v74 = 94;
  std::string::size_type v76 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
  int v77 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type v76 = __b.__r_.__value_.__l.__size_;
    int v77 = (std::string *)__b.__r_.__value_.__r.__words[0];
  }
  int v78 = (char *)&v77[-1].__r_.__value_.__r.__words[2] + 7;
  while (v76)
  {
    int v79 = v78[v76--];
    if (v79 != 32)
    {
      std::string::size_type v80 = v76 + 1;
      goto LABEL_152;
    }
  }
  std::string::size_type v80 = 0;
LABEL_152:
  std::string::erase(&__b, v80, 0xFFFFFFFFFFFFFFFFLL);
  char v81 = *((unsigned char *)this + 103);
  if (v81 >= 0) {
    uint64_t v82 = (uint64_t)v31;
  }
  else {
    uint64_t v82 = *((void *)this + 10);
  }
  if (v81 >= 0) {
    unint64_t v83 = *((unsigned __int8 *)this + 103);
  }
  else {
    unint64_t v83 = *((void *)this + 11);
  }
  printSourceLine(v7, v82, v83);
  int v165 = v7;
  LODWORD(v166) = v10;
  llvm::WithColor::changeColor(&v165, 2, 1, 0);
  unsigned int v84 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unsigned int v84 = __b.__r_.__value_.__r.__words[1];
  }
  uint64_t v85 = v84;
  if (v84)
  {
    unint64_t v86 = 0;
    int v87 = 0;
    do
    {
      unint64_t v88 = *((unsigned __int8 *)this + 103);
      if (*((char *)this + 103) < 0)
      {
        if (*((void *)this + 11) <= v86) {
          goto LABEL_178;
        }
      }
      else if (v88 <= v86)
      {
        goto LABEL_178;
      }
      if ((v88 & 0x80) != 0)
      {
        if (*(unsigned char *)(*v31 + v86) != 9)
        {
LABEL_178:
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v93 = &__b;
          }
          else {
            int v93 = (std::string *)__b.__r_.__value_.__r.__words[0];
          }
          char v94 = v93->__r_.__value_.__s.__data_[v86];
          int v95 = (char *)*((void *)v165 + 4);
          if ((unint64_t)v95 >= *((void *)v165 + 3))
          {
            llvm::raw_ostream::write(v165, v94);
          }
          else
          {
            *((void *)v165 + 4) = v95 + 1;
            char *v95 = v94;
          }
          ++v87;
          goto LABEL_164;
        }
      }
      else if (*((unsigned char *)v31 + v86) != 9)
      {
        goto LABEL_178;
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v89 = &__b;
      }
      else {
        int v89 = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      char v90 = v89->__r_.__value_.__s.__data_[v86];
      int v91 = (char *)*((void *)v165 + 4);
      if ((unint64_t)v91 >= *((void *)v165 + 3))
      {
        llvm::raw_ostream::write(v165, v90);
        int v92 = v87 + 1;
        if (((v87 + 1) & 7) == 0) {
          goto LABEL_230;
        }
      }
      else
      {
        *((void *)v165 + 4) = v91 + 1;
        *int v91 = v90;
        int v92 = v87 + 1;
        if (((v87 + 1) & 7) == 0) {
          goto LABEL_230;
        }
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v96 = &__b;
      }
      else {
        int v96 = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      char v97 = v96->__r_.__value_.__s.__data_[v86];
      int v98 = (char *)*((void *)v165 + 4);
      if ((unint64_t)v98 >= *((void *)v165 + 3))
      {
        llvm::raw_ostream::write(v165, v97);
        int v92 = v87 + 2;
        if (((v87 + 2) & 7) == 0) {
          goto LABEL_230;
        }
      }
      else
      {
        *((void *)v165 + 4) = v98 + 1;
        char *v98 = v97;
        int v92 = v87 + 2;
        if (((v87 + 2) & 7) == 0) {
          goto LABEL_230;
        }
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v99 = &__b;
      }
      else {
        int v99 = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      char v100 = v99->__r_.__value_.__s.__data_[v86];
      int v101 = (char *)*((void *)v165 + 4);
      if ((unint64_t)v101 >= *((void *)v165 + 3))
      {
        llvm::raw_ostream::write(v165, v100);
        int v92 = v87 + 3;
        if (((v87 + 3) & 7) == 0) {
          goto LABEL_230;
        }
      }
      else
      {
        *((void *)v165 + 4) = v101 + 1;
        *int v101 = v100;
        int v92 = v87 + 3;
        if (((v87 + 3) & 7) == 0) {
          goto LABEL_230;
        }
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v102 = &__b;
      }
      else {
        int v102 = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      char v103 = v102->__r_.__value_.__s.__data_[v86];
      int v104 = (char *)*((void *)v165 + 4);
      if ((unint64_t)v104 >= *((void *)v165 + 3))
      {
        llvm::raw_ostream::write(v165, v103);
        int v92 = v87 + 4;
        if (((v87 + 4) & 7) == 0) {
          goto LABEL_230;
        }
      }
      else
      {
        *((void *)v165 + 4) = v104 + 1;
        *int v104 = v103;
        int v92 = v87 + 4;
        if (((v87 + 4) & 7) == 0) {
          goto LABEL_230;
        }
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v105 = &__b;
      }
      else {
        int v105 = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      char v106 = v105->__r_.__value_.__s.__data_[v86];
      int v107 = (char *)*((void *)v165 + 4);
      if ((unint64_t)v107 >= *((void *)v165 + 3))
      {
        llvm::raw_ostream::write(v165, v106);
        int v92 = v87 + 5;
        if (((v87 + 5) & 7) == 0) {
          goto LABEL_230;
        }
      }
      else
      {
        *((void *)v165 + 4) = v107 + 1;
        *int v107 = v106;
        int v92 = v87 + 5;
        if (((v87 + 5) & 7) == 0) {
          goto LABEL_230;
        }
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v108 = &__b;
      }
      else {
        int v108 = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      char v109 = v108->__r_.__value_.__s.__data_[v86];
      int v110 = (char *)*((void *)v165 + 4);
      if ((unint64_t)v110 >= *((void *)v165 + 3))
      {
        llvm::raw_ostream::write(v165, v109);
        int v92 = v87 + 6;
        if (((v87 + 6) & 7) != 0)
        {
LABEL_219:
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v111 = &__b;
          }
          else {
            int v111 = (std::string *)__b.__r_.__value_.__r.__words[0];
          }
          char v112 = v111->__r_.__value_.__s.__data_[v86];
          int v113 = (char *)*((void *)v165 + 4);
          if ((unint64_t)v113 >= *((void *)v165 + 3))
          {
            llvm::raw_ostream::write(v165, v112);
            int v92 = v87 + 7;
            if (((v87 + 7) & 7) != 0)
            {
LABEL_224:
              if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v114 = &__b;
              }
              else {
                int v114 = (std::string *)__b.__r_.__value_.__r.__words[0];
              }
              char v115 = v114->__r_.__value_.__s.__data_[v86];
              int v116 = (char *)*((void *)v165 + 4);
              if ((unint64_t)v116 >= *((void *)v165 + 3))
              {
                llvm::raw_ostream::write(v165, v115);
              }
              else
              {
                *((void *)v165 + 4) = v116 + 1;
                char *v116 = v115;
              }
              v87 += 8;
              goto LABEL_164;
            }
          }
          else
          {
            *((void *)v165 + 4) = v113 + 1;
            *int v113 = v112;
            int v92 = v87 + 7;
            if (((v87 + 7) & 7) != 0) {
              goto LABEL_224;
            }
          }
        }
      }
      else
      {
        *((void *)v165 + 4) = v110 + 1;
        *int v110 = v109;
        int v92 = v87 + 6;
        if (((v87 + 6) & 7) != 0) {
          goto LABEL_219;
        }
      }
LABEL_230:
      int v87 = v92;
LABEL_164:
      ++v86;
    }
    while (v85 != v86);
  }
  int v117 = (unsigned char *)*((void *)v165 + 4);
  if ((unint64_t)v117 >= *((void *)v165 + 3))
  {
    llvm::raw_ostream::write(v165, 10);
    llvm::WithColor::~WithColor((llvm::WithColor *)&v165);
    unsigned __int8 v118 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_235:
      std::string::size_type v119 = v118;
      if (!v118) {
        goto LABEL_360;
      }
      goto LABEL_239;
    }
  }
  else
  {
    *((void *)v165 + 4) = v117 + 1;
    unsigned char *v117 = 10;
    llvm::WithColor::~WithColor((llvm::WithColor *)&v165);
    unsigned __int8 v118 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_235;
    }
  }
  std::string::size_type v119 = v163.__r_.__value_.__l.__size_;
  if (!v163.__r_.__value_.__l.__size_) {
    goto LABEL_359;
  }
LABEL_239:
  uint64_t v120 = 0;
  std::string::size_type v121 = 0;
  do
  {
    std::string::size_type v123 = *((unsigned __int8 *)this + 103);
    if (*((char *)this + 103) < 0)
    {
      if (v121 >= *((void *)this + 11))
      {
LABEL_249:
        LOBYTE(v124) = *((unsigned char *)&v163.__r_.__value_.__s + 23);
        int v125 = (std::string *)v163.__r_.__value_.__r.__words[0];
        goto LABEL_250;
      }
    }
    else if (v121 >= v123)
    {
      goto LABEL_249;
    }
    if ((v123 & 0x80) != 0)
    {
      int v124 = SHIBYTE(v163.__r_.__value_.__r.__words[2]);
      int v125 = (std::string *)v163.__r_.__value_.__r.__words[0];
      if (*(unsigned char *)(*v31 + v121) == 9)
      {
LABEL_255:
        if (v124 >= 0) {
          int v125 = &v163;
        }
        char v128 = v125->__r_.__value_.__s.__data_[v121];
        int v129 = (char *)*((void *)v7 + 4);
        if ((unint64_t)v129 >= *((void *)v7 + 3))
        {
          llvm::raw_ostream::write(v7, v128);
        }
        else
        {
          *((void *)v7 + 4) = v129 + 1;
          char *v129 = v128;
        }
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v130 = &v163;
        }
        else {
          int v130 = (std::string *)v163.__r_.__value_.__r.__words[0];
        }
        if (v130->__r_.__value_.__s.__data_[v121] != 32) {
          ++v121;
        }
        uint64_t v122 = v120 + 1;
        if (((v120 + 1) & 7) != 0 && v121 != v119)
        {
          if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v131 = &v163;
          }
          else {
            int v131 = (std::string *)v163.__r_.__value_.__r.__words[0];
          }
          char v132 = v131->__r_.__value_.__s.__data_[v121];
          int v133 = (char *)*((void *)v7 + 4);
          if ((unint64_t)v133 >= *((void *)v7 + 3))
          {
            llvm::raw_ostream::write(v7, v132);
          }
          else
          {
            *((void *)v7 + 4) = v133 + 1;
            *int v133 = v132;
          }
          if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v134 = &v163;
          }
          else {
            int v134 = (std::string *)v163.__r_.__value_.__r.__words[0];
          }
          if (v134->__r_.__value_.__s.__data_[v121] != 32) {
            ++v121;
          }
          uint64_t v122 = v120 + 2;
          if (((v120 + 2) & 7) != 0 && v121 != v119)
          {
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v135 = &v163;
            }
            else {
              int v135 = (std::string *)v163.__r_.__value_.__r.__words[0];
            }
            char v136 = v135->__r_.__value_.__s.__data_[v121];
            int v137 = (char *)*((void *)v7 + 4);
            if ((unint64_t)v137 >= *((void *)v7 + 3))
            {
              llvm::raw_ostream::write(v7, v136);
            }
            else
            {
              *((void *)v7 + 4) = v137 + 1;
              char *v137 = v136;
            }
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v138 = &v163;
            }
            else {
              int v138 = (std::string *)v163.__r_.__value_.__r.__words[0];
            }
            if (v138->__r_.__value_.__s.__data_[v121] != 32) {
              ++v121;
            }
            uint64_t v122 = v120 + 3;
            if (((v120 + 3) & 7) != 0 && v121 != v119)
            {
              if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v139 = &v163;
              }
              else {
                int v139 = (std::string *)v163.__r_.__value_.__r.__words[0];
              }
              char v140 = v139->__r_.__value_.__s.__data_[v121];
              int v141 = (char *)*((void *)v7 + 4);
              if ((unint64_t)v141 >= *((void *)v7 + 3))
              {
                llvm::raw_ostream::write(v7, v140);
              }
              else
              {
                *((void *)v7 + 4) = v141 + 1;
                *int v141 = v140;
              }
              if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v142 = &v163;
              }
              else {
                int v142 = (std::string *)v163.__r_.__value_.__r.__words[0];
              }
              if (v142->__r_.__value_.__s.__data_[v121] != 32) {
                ++v121;
              }
              uint64_t v122 = v120 + 4;
              if (((v120 + 4) & 7) != 0 && v121 != v119)
              {
                if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v143 = &v163;
                }
                else {
                  int v143 = (std::string *)v163.__r_.__value_.__r.__words[0];
                }
                char v144 = v143->__r_.__value_.__s.__data_[v121];
                int v145 = (char *)*((void *)v7 + 4);
                if ((unint64_t)v145 >= *((void *)v7 + 3))
                {
                  llvm::raw_ostream::write(v7, v144);
                }
                else
                {
                  *((void *)v7 + 4) = v145 + 1;
                  *int v145 = v144;
                }
                if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v146 = &v163;
                }
                else {
                  int v146 = (std::string *)v163.__r_.__value_.__r.__words[0];
                }
                if (v146->__r_.__value_.__s.__data_[v121] != 32) {
                  ++v121;
                }
                uint64_t v122 = v120 + 5;
                if (((v120 + 5) & 7) != 0 && v121 != v119)
                {
                  if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    int v147 = &v163;
                  }
                  else {
                    int v147 = (std::string *)v163.__r_.__value_.__r.__words[0];
                  }
                  char v148 = v147->__r_.__value_.__s.__data_[v121];
                  int v149 = (char *)*((void *)v7 + 4);
                  if ((unint64_t)v149 >= *((void *)v7 + 3))
                  {
                    llvm::raw_ostream::write(v7, v148);
                  }
                  else
                  {
                    *((void *)v7 + 4) = v149 + 1;
                    char *v149 = v148;
                  }
                  if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    int v150 = &v163;
                  }
                  else {
                    int v150 = (std::string *)v163.__r_.__value_.__r.__words[0];
                  }
                  if (v150->__r_.__value_.__s.__data_[v121] != 32) {
                    ++v121;
                  }
                  uint64_t v122 = v120 + 6;
                  if (((v120 + 6) & 7) != 0 && v121 != v119)
                  {
                    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      int v151 = &v163;
                    }
                    else {
                      int v151 = (std::string *)v163.__r_.__value_.__r.__words[0];
                    }
                    char v152 = v151->__r_.__value_.__s.__data_[v121];
                    int v153 = (char *)*((void *)v7 + 4);
                    if ((unint64_t)v153 >= *((void *)v7 + 3))
                    {
                      llvm::raw_ostream::write(v7, v152);
                    }
                    else
                    {
                      *((void *)v7 + 4) = v153 + 1;
                      char *v153 = v152;
                    }
                    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      int v154 = &v163;
                    }
                    else {
                      int v154 = (std::string *)v163.__r_.__value_.__r.__words[0];
                    }
                    if (v154->__r_.__value_.__s.__data_[v121] != 32) {
                      ++v121;
                    }
                    uint64_t v122 = v120 + 7;
                    if (((v120 + 7) & 7) != 0 && v121 != v119)
                    {
                      if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        int v155 = &v163;
                      }
                      else {
                        int v155 = (std::string *)v163.__r_.__value_.__r.__words[0];
                      }
                      char v156 = v155->__r_.__value_.__s.__data_[v121];
                      int v157 = (char *)*((void *)v7 + 4);
                      if ((unint64_t)v157 >= *((void *)v7 + 3))
                      {
                        llvm::raw_ostream::write(v7, v156);
                      }
                      else
                      {
                        *((void *)v7 + 4) = v157 + 1;
                        *int v157 = v156;
                      }
                      if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        int v158 = &v163;
                      }
                      else {
                        int v158 = (std::string *)v163.__r_.__value_.__r.__words[0];
                      }
                      if (v158->__r_.__value_.__s.__data_[v121] != 32) {
                        ++v121;
                      }
                      uint64_t v122 = v120 + 8;
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_242;
      }
    }
    else
    {
      int v124 = SHIBYTE(v163.__r_.__value_.__r.__words[2]);
      int v125 = (std::string *)v163.__r_.__value_.__r.__words[0];
      if (*((unsigned char *)v31 + v121) == 9) {
        goto LABEL_255;
      }
    }
LABEL_250:
    if ((v124 & 0x80u) == 0) {
      int v125 = &v163;
    }
    char v126 = v125->__r_.__value_.__s.__data_[v121];
    int v127 = (char *)*((void *)v7 + 4);
    if ((unint64_t)v127 >= *((void *)v7 + 3))
    {
      llvm::raw_ostream::write(v7, v126);
    }
    else
    {
      *((void *)v7 + 4) = v127 + 1;
      *int v127 = v126;
    }
    uint64_t v122 = v120 + 1;
LABEL_242:
    ++v121;
    uint64_t v120 = v122;
  }
  while (v121 < v119);
  int v159 = (unsigned char *)*((void *)v7 + 4);
  if ((unint64_t)v159 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 10);
    if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_360;
    }
  }
  else
  {
    *((void *)v7 + 4) = v159 + 1;
    *int v159 = 10;
LABEL_359:
    if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_360:
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_361;
      }
      return;
    }
  }
  operator delete(v163.__r_.__value_.__l.__data_);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
LABEL_361:
  }
    operator delete(__b.__r_.__value_.__l.__data_);
}

void llvm::SourceMgr::PrintMessage(uint64_t *a1, llvm::raw_ostream *a2, const char *a3, int a4, llvm::Twine *a5, unint64_t *a6, uint64_t a7, uint64_t a8, long long *a9, uint64_t a10, BOOL a11)
{
  v32[20] = *MEMORY[0x1E4F143B8];
  llvm::SourceMgr::GetMessage(a1, a3, a4, a5, a6, a7, a9, a10, (uint64_t)v20);
  uint64_t v13 = (void (*)(unsigned char *, uint64_t))a1[6];
  if (v13)
  {
    v13(v20, a1[7]);
    std::string::size_type v14 = (char *)v30;
    uint64_t v15 = v31;
    if (!v31) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  if (v21)
  {
    uint64_t v16 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 3);
    if (v16)
    {
      uint64_t v17 = 0;
      uint64_t v18 = *a1;
      while (*(void *)(*(void *)v18 + 8) > v21 || *(void *)(*(void *)v18 + 16) < v21)
      {
        ++v17;
        v18 += 24;
        if (v16 == v17) {
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      uint64_t v17 = 0xFFFFFFFFLL;
    }
    llvm::SourceMgr::PrintIncludeStack((llvm::raw_ostream *)a1, *(const char **)(*a1 + 24 * v17 + 16), a2);
  }
  llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v20, 0, a2, a11, 1);
  std::string::size_type v14 = (char *)v30;
  uint64_t v15 = v31;
  if (v31)
  {
LABEL_14:
    uint64_t v19 = 40 * v15;
    do
    {
      if (v14[v19 - 1] < 0) {
        operator delete(*(void **)&v14[v19 - 24]);
      }
      v19 -= 40;
    }
    while (v19);
    std::string::size_type v14 = (char *)v30;
  }
LABEL_19:
  if (v14 != (char *)v32) {
    free(v14);
  }
  if (__p)
  {
    size_t v29 = __p;
    operator delete(__p);
  }
  if (v27 < 0)
  {
    operator delete(v26);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_25:
      if ((v23 & 0x80000000) == 0) {
        return;
      }
LABEL_29:
      operator delete(v22);
      return;
    }
  }
  else if ((v25 & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v24);
  if (v23 < 0) {
    goto LABEL_29;
  }
}

uint64_t llvm::SMDiagnostic::SMDiagnostic(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, size_t __len, int a6, int a7, int a8, void *__srca, size_t __lena, void *a11, size_t __sz, const void *a13, uint64_t a14, long long *a15, uint64_t a16)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (__len > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_32;
  }
  if (__len >= 0x17)
  {
    size_t v23 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v23 = __len | 7;
    }
    size_t v24 = v23 + 1;
    size_t v22 = operator new(v23 + 1);
    *(void *)(a1 + 24) = __len;
    *(void *)(a1 + 32) = v24 | 0x8000000000000000;
    *(void *)(a1 + 16) = v22;
    goto LABEL_8;
  }
  size_t v22 = (void *)(a1 + 16);
  *(unsigned char *)(a1 + 39) = __len;
  if (__len) {
LABEL_8:
  }
    memmove(v22, __src, __len);
  *((unsigned char *)v22 + __len) = 0;
  *(_DWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 44) = a7;
  *(_DWORD *)(a1 + 48) = a8;
  if (__lena > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_32;
  }
  if (__lena >= 0x17)
  {
    size_t v26 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__lena | 7) != 0x17) {
      size_t v26 = __lena | 7;
    }
    size_t v27 = v26 + 1;
    char v25 = operator new(v26 + 1);
    *(void *)(a1 + 64) = __lena;
    *(void *)(a1 + 72) = v27 | 0x8000000000000000;
    *(void *)(a1 + 56) = v25;
    goto LABEL_16;
  }
  char v25 = (void *)(a1 + 56);
  *(unsigned char *)(a1 + 79) = __lena;
  if (__lena) {
LABEL_16:
  }
    memmove(v25, __srca, __lena);
  *((unsigned char *)v25 + __lena) = 0;
  if (__sz > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_32;
  }
  if (__sz >= 0x17)
  {
    size_t v29 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      size_t v29 = __sz | 7;
    }
    size_t v30 = v29 + 1;
    int v28 = operator new(v29 + 1);
    *(void *)(a1 + 88) = __sz;
    *(void *)(a1 + 96) = v30 | 0x8000000000000000;
    *(void *)(a1 + 80) = v28;
LABEL_25:
    memmove(v28, a11, __sz);
    v28[__sz] = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    if (!a14) {
      goto LABEL_28;
    }
LABEL_26:
    if ((a14 & 0x8000000000000000) == 0)
    {
      unsigned int v31 = (char *)operator new(8 * a14);
      *(void *)(a1 + 104) = v31;
      int v32 = &v31[8 * a14];
      *(void *)(a1 + 120) = v32;
      memcpy(v31, a13, 8 * a14);
      *(void *)(a1 + 112) = v32;
      goto LABEL_28;
    }
LABEL_32:
    abort();
  }
  int v28 = (unsigned char *)(a1 + 80);
  *(unsigned char *)(a1 + 103) = __sz;
  if (__sz) {
    goto LABEL_25;
  }
  unsigned char *v28 = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  if (a14) {
    goto LABEL_26;
  }
LABEL_28:
  *(void *)(a1 + 128) = a1 + 144;
  *(void *)(a1 + 136) = 0x400000000;
  llvm::SmallVectorImpl<llvm::SMFixIt>::append<llvm::SMFixIt const*,void>(a1 + 128, a15, (long long *)((char *)a15 + 40 * a16));
  unint64_t v33 = *(unsigned int *)(a1 + 136);
  unint64_t v34 = 126 - 2 * __clz(v33);
  if (v33) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,false>(*(void *)(a1 + 128), (long long *)(*(void *)(a1 + 128) + 40 * v33), (uint64_t)&v37, v35, 1);
  return a1;
}

llvm::raw_ostream *printSourceLine(llvm::raw_ostream *result, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = result;
  if (!a3) {
    goto LABEL_60;
  }
  unsigned int v6 = 0;
  int v7 = 0;
  while (1)
  {
    unint64_t v8 = v6;
    if (a3 <= v6) {
      break;
    }
    int v9 = (char *)memchr((void *)(a2 + v6), 9, a3 - v6);
    int v10 = &v9[-a2];
    if (!v9 || v10 + 1 == 0) {
      break;
    }
    if (a3 >= v8) {
      unint64_t v12 = v8;
    }
    else {
      unint64_t v12 = a3;
    }
    if (v12 <= (unint64_t)v10) {
      uint64_t v13 = &v9[-a2];
    }
    else {
      uint64_t v13 = (char *)v8;
    }
    if ((unint64_t)v13 >= a3) {
      uint64_t v13 = (char *)a3;
    }
    std::string::size_type v14 = (const void *)(a2 + v12);
    uint64_t v15 = &v13[-v12];
    unint64_t result = (llvm::raw_ostream *)*((void *)v4 + 4);
    if ((unint64_t)&v13[-v12] <= *((void *)v4 + 3) - (void)result)
    {
      if (v13 != (char *)v12)
      {
        unint64_t result = (llvm::raw_ostream *)memcpy(result, v14, (size_t)&v13[-v12]);
        *((void *)v4 + 4) += v15;
      }
    }
    else
    {
      unint64_t result = llvm::raw_ostream::write(v4, (const char *)v14, (size_t)&v13[-v12]);
    }
    uint64_t v16 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v16 >= *((void *)v4 + 3))
    {
      unint64_t result = llvm::raw_ostream::write(v4, 32);
      int v17 = v7 - v8 + v10;
      int v7 = v17 + 1;
      if (((v17 + 1) & 7) == 0) {
        goto LABEL_5;
      }
    }
    else
    {
      *((void *)v4 + 4) = v16 + 1;
      unsigned char *v16 = 32;
      int v17 = v7 - v8 + v10;
      int v7 = v17 + 1;
      if (((v17 + 1) & 7) == 0) {
        goto LABEL_5;
      }
    }
    uint64_t v18 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v18 >= *((void *)v4 + 3))
    {
      unint64_t result = llvm::raw_ostream::write(v4, 32);
      int v7 = v17 + 2;
      if (((v17 + 2) & 7) == 0) {
        goto LABEL_5;
      }
    }
    else
    {
      *((void *)v4 + 4) = v18 + 1;
      unsigned char *v18 = 32;
      int v7 = v17 + 2;
      if (((v17 + 2) & 7) == 0) {
        goto LABEL_5;
      }
    }
    uint64_t v19 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v19 >= *((void *)v4 + 3))
    {
      unint64_t result = llvm::raw_ostream::write(v4, 32);
      int v7 = v17 + 3;
      if (((v17 + 3) & 7) == 0) {
        goto LABEL_5;
      }
    }
    else
    {
      *((void *)v4 + 4) = v19 + 1;
      unsigned char *v19 = 32;
      int v7 = v17 + 3;
      if (((v17 + 3) & 7) == 0) {
        goto LABEL_5;
      }
    }
    size_t v20 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v20 >= *((void *)v4 + 3))
    {
      unint64_t result = llvm::raw_ostream::write(v4, 32);
      int v7 = v17 + 4;
      if (((v17 + 4) & 7) == 0) {
        goto LABEL_5;
      }
    }
    else
    {
      *((void *)v4 + 4) = v20 + 1;
      unsigned char *v20 = 32;
      int v7 = v17 + 4;
      if (((v17 + 4) & 7) == 0) {
        goto LABEL_5;
      }
    }
    unint64_t v21 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v21 >= *((void *)v4 + 3))
    {
      unint64_t result = llvm::raw_ostream::write(v4, 32);
      int v7 = v17 + 5;
      if (((v17 + 5) & 7) == 0) {
        goto LABEL_5;
      }
    }
    else
    {
      *((void *)v4 + 4) = v21 + 1;
      *unint64_t v21 = 32;
      int v7 = v17 + 5;
      if (((v17 + 5) & 7) == 0) {
        goto LABEL_5;
      }
    }
    size_t v22 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v22 >= *((void *)v4 + 3))
    {
      unint64_t result = llvm::raw_ostream::write(v4, 32);
      int v7 = v17 + 6;
      if (((v17 + 6) & 7) == 0) {
        goto LABEL_5;
      }
    }
    else
    {
      *((void *)v4 + 4) = v22 + 1;
      unsigned char *v22 = 32;
      int v7 = v17 + 6;
      if (((v17 + 6) & 7) == 0) {
        goto LABEL_5;
      }
    }
    size_t v23 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v23 >= *((void *)v4 + 3))
    {
      unint64_t result = llvm::raw_ostream::write(v4, 32);
      int v7 = v17 + 7;
      if (((v17 + 7) & 7) != 0)
      {
LABEL_51:
        size_t v24 = (unsigned char *)*((void *)v4 + 4);
        if ((unint64_t)v24 >= *((void *)v4 + 3))
        {
          unint64_t result = llvm::raw_ostream::write(v4, 32);
        }
        else
        {
          *((void *)v4 + 4) = v24 + 1;
          unsigned char *v24 = 32;
        }
        int v7 = v17 + 8;
      }
    }
    else
    {
      *((void *)v4 + 4) = v23 + 1;
      *size_t v23 = 32;
      int v7 = v17 + 7;
      if (((v17 + 7) & 7) != 0) {
        goto LABEL_51;
      }
    }
LABEL_5:
    unsigned int v6 = v10 + 1;
    if (v10 + 1 == a3) {
      goto LABEL_60;
    }
  }
  if (a3 >= v8) {
    unint64_t v25 = v8;
  }
  else {
    unint64_t v25 = a3;
  }
  size_t v26 = (const void *)(a2 + v25);
  size_t v27 = a3 - v25;
  unint64_t result = (llvm::raw_ostream *)*((void *)v4 + 4);
  if (a3 - v25 <= *((void *)v4 + 3) - (void)result)
  {
    if (a3 > v8)
    {
      unint64_t result = (llvm::raw_ostream *)memcpy(result, v26, v27);
      *((void *)v4 + 4) += v27;
    }
  }
  else
  {
    unint64_t result = llvm::raw_ostream::write(v4, (const char *)v26, v27);
  }
LABEL_60:
  int v28 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v28 >= *((void *)v4 + 3))
  {
    return llvm::raw_ostream::write(v4, 10);
  }
  else
  {
    *((void *)v4 + 4) = v28 + 1;
    unsigned char *v28 = 10;
  }
  return result;
}

void *std::vector<llvm::SourceMgr::SrcBuffer>::__base_destruct_at_end[abi:nn180100](void *result, uint64_t a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[1];
  if (v4 != a2)
  {
    while (1)
    {
      uint64_t v5 = *(void ***)(v4 - 16);
      if (v5) {
        break;
      }
LABEL_12:
      unint64_t result = *(void **)(v4 - 24);
      *(void *)(v4 - 24) = 0;
      if (result) {
        unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      v4 -= 24;
      if (v4 == a2) {
        goto LABEL_2;
      }
    }
    unint64_t v6 = *(void *)(*(void *)(v4 - 24) + 16) - *(void *)(*(void *)(v4 - 24) + 8);
    if (v6 > 0xFF && v6 >> 16)
    {
      int v7 = *v5;
      if (!*v5) {
        goto LABEL_11;
      }
    }
    else
    {
      int v7 = *v5;
      if (!*v5)
      {
LABEL_11:
        operator delete(v5);
        *(void *)(v4 - 16) = 0;
        goto LABEL_12;
      }
    }
    v5[1] = v7;
    operator delete(v7);
    goto LABEL_11;
  }
LABEL_2:
  v3[1] = a2;
  return result;
}

unint64_t *GetOrCreateOffsetCache<unsigned char>(unint64_t **a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  if (!*a1)
  {
    unint64_t v2 = (unint64_t *)operator new(0x18uLL);
    v2[1] = 0;
    v2[2] = 0;
    unint64_t *v2 = 0;
    uint64_t v5 = *(void *)(a2 + 8);
    unint64_t v6 = *(void *)(a2 + 16) - v5;
    if (v6)
    {
      int v7 = 0;
      uint64_t v8 = 0;
      if (v6 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = *(void *)(a2 + 16) - v5;
      }
      while (1)
      {
        if (*(unsigned char *)(v5 + v8) != 10) {
          goto LABEL_8;
        }
        unint64_t v11 = v2[2];
        if ((unint64_t)v7 >= v11) {
          break;
        }
        *int v7 = v8;
        uint64_t v10 = (uint64_t)(v7 + 1);
LABEL_7:
        v2[1] = v10;
        int v7 = (unsigned char *)v10;
LABEL_8:
        if (++v8 == v9) {
          goto LABEL_42;
        }
      }
      unint64_t v12 = *v2;
      unint64_t v13 = (unint64_t)&v7[-*v2];
      unint64_t v14 = v13 + 1;
      if ((uint64_t)(v13 + 1) < 0) {
        abort();
      }
      unint64_t v15 = v11 - v12;
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16)
      {
        int v17 = operator new(v16);
        uint64_t v18 = (char *)v17 + v13;
        *((unsigned char *)v17 + v13) = v8;
        uint64_t v10 = (uint64_t)v17 + v13 + 1;
        if (v7 == (unsigned char *)v12)
        {
LABEL_29:
          unint64_t *v2 = (unint64_t)v18;
          v2[1] = v10;
          v2[2] = (unint64_t)v17 + v16;
          if (v7) {
            operator delete(v7);
          }
          goto LABEL_7;
        }
      }
      else
      {
        int v17 = 0;
        uint64_t v18 = &v7[-*v2];
        *(unsigned char *)unint64_t v13 = v8;
        uint64_t v10 = v13 + 1;
        if (v7 == (unsigned char *)v12) {
          goto LABEL_29;
        }
      }
      if (v13 < 8
        || (char *)v17 + v13 + v12 - (void)v7 > (char *)v17 + v13 - 1
        || v12 > (unint64_t)(v7 - 1)
        || v12 - (unint64_t)v17 < 0x20)
      {
        uint64_t v19 = v7;
        goto LABEL_26;
      }
      if (v13 >= 0x20)
      {
        unint64_t v22 = v13 & 0xFFFFFFFFFFFFFFE0;
        size_t v23 = (char *)v17 + v13 - 16;
        size_t v24 = (long long *)(v7 - 16);
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *size_t v23 = v26;
          v23 -= 2;
          v24 -= 2;
          v25 -= 32;
        }
        while (v25);
        if (v13 == v22) {
          goto LABEL_28;
        }
        if ((v13 & 0x18) == 0)
        {
          v18 -= v22;
          uint64_t v19 = &v7[-v22];
LABEL_26:
          size_t v20 = v18 - 1;
          do
          {
            char v21 = *--v19;
            *v20-- = v21;
          }
          while (v19 != (unsigned char *)v12);
LABEL_28:
          int v7 = (unsigned char *)*v2;
          uint64_t v18 = (char *)v17;
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v22 = 0;
      }
      uint64_t v19 = &v7[-(v13 & 0xFFFFFFFFFFFFFFF8)];
      v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
      size_t v27 = &v7[-v22 - v12 - 8 + (void)v17];
      int v28 = (uint64_t *)&v7[-v22 - 8];
      unint64_t v29 = v22 - (v13 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v30 = *v28--;
        *v27-- = v30;
        v29 += 8;
      }
      while (v29);
      if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_28;
      }
      goto LABEL_26;
    }
LABEL_42:
    *a1 = v2;
  }
  return v2;
}

void *GetOrCreateOffsetCache<unsigned short>(void **a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  if (!*a1)
  {
    unint64_t v2 = operator new(0x18uLL);
    v2[1] = 0;
    v2[2] = 0;
    void *v2 = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    unint64_t v5 = *(void *)(a2 + 16) - v4;
    if (v5)
    {
      unint64_t v6 = 0;
      int v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      if (v5 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = *(void *)(a2 + 16) - v4;
      }
      uint64_t v29 = v10;
      while (1)
      {
        if (*(unsigned char *)(v4 + v9) != 10) {
          goto LABEL_9;
        }
        if (v8 >= v7) {
          break;
        }
        *(_WORD *)uint64_t v8 = v9;
        uint64_t v11 = (uint64_t)(v8 + 2);
LABEL_8:
        v2[1] = v11;
        uint64_t v8 = (char *)v11;
LABEL_9:
        if (++v9 == v10) {
          goto LABEL_40;
        }
      }
      uint64_t v12 = v8 - v6;
      if (v8 - v6 <= -3) {
        abort();
      }
      uint64_t v13 = v12 >> 1;
      if (v7 - v6 <= (unint64_t)((v12 >> 1) + 1)) {
        uint64_t v14 = v13 + 1;
      }
      else {
        uint64_t v14 = v7 - v6;
      }
      if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v15 = v14;
      }
      if (v15)
      {
        if (v15 < 0) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        size_t v16 = operator new(2 * v15);
        int v17 = &v16[2 * v13];
        *(_WORD *)int v17 = v9;
        uint64_t v11 = (uint64_t)(v17 + 2);
        if (v8 == v6) {
          goto LABEL_27;
        }
      }
      else
      {
        size_t v16 = 0;
        int v17 = (char *)(2 * v13);
        *(_WORD *)(2 * v13) = v9;
        uint64_t v11 = 2 * v13 + 2;
        if (v8 == v6) {
          goto LABEL_27;
        }
      }
      unint64_t v18 = v8 - 2 - v6;
      if (v18 >= 0x5E)
      {
        if (&v16[(v12 & 0xFFFFFFFFFFFFFFFELL) - 2 - (v18 & 0xFFFFFFFFFFFFFFFELL)] > &v16[(v12 & 0xFFFFFFFFFFFFFFFELL)
                                                                                        - 2])
        {
          uint64_t v19 = v8;
        }
        else if (&v8[-(v18 & 0xFFFFFFFFFFFFFFFELL) - 2] > v8 - 2)
        {
          uint64_t v19 = v8;
        }
        else if (v8 - v16 - (v12 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
        {
          uint64_t v21 = (v18 >> 1) + 1;
          unint64_t v22 = 2 * (v21 & 0xFFFFFFFFFFFFFFF0);
          uint64_t v19 = &v8[-v22];
          v17 -= v22;
          size_t v23 = &v16[2 * v13 - 16];
          size_t v24 = v8 - 16;
          unint64_t v25 = v21 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *size_t v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 16;
          }
          while (v25);
          if (v21 == (v21 & 0xFFFFFFFFFFFFFFF0)) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v19 = v8;
        }
      }
      else
      {
        uint64_t v19 = v8;
      }
      do
      {
        __int16 v20 = *((_WORD *)v19 - 1);
        v19 -= 2;
        *((_WORD *)v17 - 1) = v20;
        v17 -= 2;
      }
      while (v19 != v6);
LABEL_27:
      int v7 = &v16[2 * v15];
      void *v2 = v17;
      v2[1] = v11;
      v2[2] = v7;
      if (v6) {
        operator delete(v6);
      }
      unint64_t v6 = v17;
      uint64_t v10 = v29;
      goto LABEL_8;
    }
LABEL_40:
    *a1 = v2;
  }
  return v2;
}

void *GetOrCreateOffsetCache<unsigned int>(void **a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  if (!*a1)
  {
    unint64_t v2 = operator new(0x18uLL);
    v2[1] = 0;
    v2[2] = 0;
    void *v2 = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    unint64_t v5 = *(void *)(a2 + 16) - v4;
    if (v5)
    {
      unint64_t v6 = 0;
      int v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      if (v5 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = *(void *)(a2 + 16) - v4;
      }
      uint64_t v28 = v10;
      while (1)
      {
        if (*(unsigned char *)(v4 + v9) != 10) {
          goto LABEL_9;
        }
        if (v8 >= v7) {
          break;
        }
        *(_DWORD *)uint64_t v8 = v9;
        uint64_t v11 = (uint64_t)(v8 + 4);
LABEL_8:
        v2[1] = v11;
        uint64_t v8 = (char *)v11;
LABEL_9:
        if (++v9 == v10) {
          goto LABEL_39;
        }
      }
      uint64_t v12 = (v8 - v6) >> 2;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        abort();
      }
      if ((v7 - v6) >> 1 > v13) {
        unint64_t v13 = (v7 - v6) >> 1;
      }
      if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14)
      {
        if (v14 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v15 = operator new(4 * v14);
        size_t v16 = &v15[4 * v12];
        *(_DWORD *)size_t v16 = v9;
        uint64_t v11 = (uint64_t)(v16 + 4);
        if (v8 == v6) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v15 = 0;
        size_t v16 = (char *)(4 * v12);
        *(_DWORD *)(4 * v12) = v9;
        uint64_t v11 = 4 * v12 + 4;
        if (v8 == v6) {
          goto LABEL_26;
        }
      }
      unint64_t v17 = v8 - 4 - v6;
      if (v17 >= 0xBC)
      {
        if (&v15[v8 - v6 - 4 - (v17 & 0xFFFFFFFFFFFFFFFCLL)] > &v15[v8 - v6 - 4])
        {
          unint64_t v18 = v8;
        }
        else if (&v8[-(v17 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v8 - 4)
        {
          unint64_t v18 = v8;
        }
        else if ((unint64_t)(v6 - v15) >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v18 = &v8[-v21];
          v16 -= v21;
          unint64_t v22 = &v15[4 * v12 - 16];
          size_t v23 = v8 - 16;
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *(_OWORD *)v23;
            *(v22 - 1) = *((_OWORD *)v23 - 1);
            _OWORD *v22 = v25;
            v22 -= 2;
            v23 -= 32;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_26;
          }
        }
        else
        {
          unint64_t v18 = v8;
        }
      }
      else
      {
        unint64_t v18 = v8;
      }
      do
      {
        int v19 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v16 - 1) = v19;
        v16 -= 4;
      }
      while (v18 != v6);
LABEL_26:
      int v7 = &v15[4 * v14];
      void *v2 = v16;
      v2[1] = v11;
      v2[2] = v7;
      if (v6) {
        operator delete(v6);
      }
      unint64_t v6 = v16;
      uint64_t v10 = v28;
      goto LABEL_8;
    }
LABEL_39:
    *a1 = v2;
  }
  return v2;
}

void *GetOrCreateOffsetCache<unsigned long long>(void **a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  if (!*a1)
  {
    unint64_t v2 = operator new(0x18uLL);
    v2[1] = 0;
    v2[2] = 0;
    void *v2 = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    unint64_t v5 = *(void *)(a2 + 16) - v4;
    if (v5)
    {
      unint64_t v6 = 0;
      int v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      if (v5 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = *(void *)(a2 + 16) - v4;
      }
      uint64_t v28 = v10;
      while (1)
      {
        if (*(unsigned char *)(v4 + v9) != 10) {
          goto LABEL_9;
        }
        if (v8 >= v7) {
          break;
        }
        *(void *)uint64_t v8 = v9;
        uint64_t v11 = (uint64_t)(v8 + 8);
LABEL_8:
        v2[1] = v11;
        uint64_t v8 = (char *)v11;
LABEL_9:
        if (++v9 == v10) {
          goto LABEL_39;
        }
      }
      uint64_t v12 = (v8 - v6) >> 3;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        abort();
      }
      if ((v7 - v6) >> 2 > v13) {
        unint64_t v13 = (v7 - v6) >> 2;
      }
      if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14)
      {
        if (v14 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v15 = operator new(8 * v14);
        size_t v16 = &v15[8 * v12];
        *(void *)size_t v16 = v9;
        uint64_t v11 = (uint64_t)(v16 + 8);
        if (v8 == v6) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v15 = 0;
        size_t v16 = (char *)(8 * v12);
        *(void *)(8 * v12) = v9;
        uint64_t v11 = 8 * v12 + 8;
        if (v8 == v6) {
          goto LABEL_26;
        }
      }
      unint64_t v17 = v8 - 8 - v6;
      if (v17 >= 0x168)
      {
        if (&v15[v8 - v6 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v15[v8 - v6 - 8])
        {
          unint64_t v18 = v8;
        }
        else if (&v8[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
        {
          unint64_t v18 = v8;
        }
        else if ((unint64_t)(v6 - v15) >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v18 = &v8[-v21];
          v16 -= v21;
          unint64_t v22 = &v15[8 * v12 - 16];
          size_t v23 = v8 - 16;
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *(_OWORD *)v23;
            *(v22 - 1) = *((_OWORD *)v23 - 1);
            _OWORD *v22 = v25;
            v22 -= 2;
            v23 -= 32;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_26;
          }
        }
        else
        {
          unint64_t v18 = v8;
        }
      }
      else
      {
        unint64_t v18 = v8;
      }
      do
      {
        uint64_t v19 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v19;
        v16 -= 8;
      }
      while (v18 != v6);
LABEL_26:
      int v7 = &v15[8 * v14];
      void *v2 = v16;
      v2[1] = v11;
      v2[2] = v7;
      if (v6) {
        operator delete(v6);
      }
      unint64_t v6 = v16;
      uint64_t v10 = v28;
      goto LABEL_8;
    }
LABEL_39:
    *a1 = v2;
  }
  return v2;
}

void llvm::SmallVectorImpl<llvm::SMFixIt>::append<llvm::SMFixIt const*,void>(uint64_t a1, long long *a2, long long *a3)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 3);
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v6 + v7 <= *(unsigned int *)(a1 + 12))
  {
    uint64_t v10 = *(char **)a1;
    if (a2 == a3) {
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v24 = 0;
    uint64_t v8 = (char *)(a1 + 16);
    uint64_t v9 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v6 + v7, 40, &v24);
    uint64_t v10 = v9;
    uint64_t v11 = *(char **)a1;
    unsigned int v12 = *(_DWORD *)(a1 + 8);
    if (v12)
    {
      unint64_t v13 = &v11[40 * v12];
      unint64_t v14 = v9;
      do
      {
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v11;
        long long v15 = *((_OWORD *)v11 + 1);
        *((void *)v14 + 4) = *((void *)v11 + 4);
        *((_OWORD *)v14 + 1) = v15;
        *((void *)v11 + 3) = 0;
        *((void *)v11 + 4) = 0;
        *((void *)v11 + 2) = 0;
        v11 += 40;
        v14 += 40;
      }
      while (v11 != v13);
      uint64_t v11 = *(char **)a1;
      uint64_t v16 = *(unsigned int *)(a1 + 8);
      if (v16)
      {
        uint64_t v17 = 40 * v16;
        do
        {
          if (v11[v17 - 1] < 0) {
            operator delete(*(void **)&v11[v17 - 24]);
          }
          v17 -= 40;
        }
        while (v17);
        uint64_t v11 = *(char **)a1;
      }
    }
    int v18 = v24;
    if (v11 != v8) {
      free(v11);
    }
    *(void *)a1 = v10;
    *(_DWORD *)(a1 + 12) = v18;
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
    if (a2 == a3) {
      goto LABEL_21;
    }
  }
  uint64_t v19 = (std::string *)&v10[40 * v7 + 16];
  uint64_t v20 = a2 + 1;
  do
  {
    while (1)
    {
      *(_OWORD *)&v19[-1].__r_.__value_.__r.__words[1] = *(v20 - 1);
      if ((*((char *)v20 + 23) & 0x80000000) == 0) {
        break;
      }
      std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v20, *((void *)v20 + 1));
      uint64_t v21 = v20 - 1;
      uint64_t v19 = (std::string *)((char *)v19 + 40);
      uint64_t v20 = (long long *)((char *)v20 + 40);
      if ((long long *)((char *)v21 + 40) == a3) {
        goto LABEL_20;
      }
    }
    long long v22 = *v20;
    v19->__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v22;
    uint64_t v19 = (std::string *)((char *)v19 + 40);
    size_t v23 = v20 - 1;
    uint64_t v20 = (long long *)((char *)v20 + 40);
  }
  while ((long long *)((char *)v23 + 40) != a3);
LABEL_20:
  LODWORD(v7) = *(_DWORD *)(a1 + 8);
LABEL_21:
  *(_DWORD *)(a1 + 8) = v7 + v6;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v67 = v2;
    uint64_t v68 = v3;
    uint64_t v4 = a2;
    uint64_t v5 = a1;
    uint64_t v6 = a1 + 40;
    if (a1 + 40 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v65;
      uint64_t v9 = a1;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = v6;
        unint64_t v12 = *(void *)(v10 + 40);
        BOOL v13 = v12 >= *(void *)v10;
        if (v12 == *(void *)v10
          && (v14 = *(void *)(v10 + 48), v15 = *(void *)(v10 + 8), BOOL v13 = v14 >= v15, v14 == v15))
        {
          int v44 = *(char *)(v10 + 39);
          int v45 = *(char *)(v10 + 79);
          if (v45 >= 0) {
            size_t v46 = *(unsigned __int8 *)(v10 + 79);
          }
          else {
            size_t v46 = *(void *)(v10 + 64);
          }
          if (v45 >= 0) {
            char v47 = (const void *)(v10 + 56);
          }
          else {
            char v47 = *(const void **)(v10 + 56);
          }
          if (v44 >= 0) {
            size_t v48 = *(unsigned __int8 *)(v10 + 39);
          }
          else {
            size_t v48 = *(void *)(v10 + 24);
          }
          if (v44 >= 0) {
            int v49 = (const void *)(v10 + 16);
          }
          else {
            int v49 = *(const void **)(v10 + 16);
          }
          if (v48 >= v46) {
            size_t v50 = v46;
          }
          else {
            size_t v50 = v48;
          }
          int v51 = memcmp(v47, v49, v50);
          BOOL v52 = v46 < v48;
          if (v51) {
            BOOL v52 = v51 < 0;
          }
          if (!v52) {
            goto LABEL_6;
          }
        }
        else if (v13)
        {
          goto LABEL_6;
        }
        long long v64 = *(_OWORD *)v9;
        v8[2] = *(void *)(v10 + 72);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)(v10 + 56);
        *(void *)(v10 + 56) = 0;
        *(void *)(v10 + 64) = 0;
        *(void *)(v10 + 72) = 0;
        unint64_t v16 = *((void *)&v64 + 1);
        if ((v66 & 0x80u) == 0) {
          size_t v17 = v66;
        }
        else {
          size_t v17 = v65[1];
        }
        if ((v66 & 0x80u) == 0) {
          int v18 = v8;
        }
        else {
          int v18 = (void *)v65[0];
        }
        long long v62 = v18;
        size_t v63 = v17;
        int v19 = *(char *)(v9 + 39);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        uint64_t v20 = (void **)(v9 + 16);
        if (v19 < 0) {
          operator delete(*v20);
        }
        uint64_t v21 = v10 + 16;
        *(_OWORD *)uint64_t v20 = *(_OWORD *)(v10 + 16);
        *(void *)(v9 + 32) = *(void *)(v10 + 32);
        *(unsigned char *)(v10 + 39) = 0;
        *(unsigned char *)(v10 + 16) = 0;
        if (v10 == v5)
        {
          uint64_t v10 = v5;
        }
        else
        {
          unint64_t v22 = *(void *)(v10 - 40);
          BOOL v23 = (unint64_t)v64 >= v22;
          if ((void)v64 == v22
            && (v24 = *(void *)(v10 - 32), BOOL v23 = *((void *)&v64 + 1) >= v24, *((void *)&v64 + 1) == v24))
          {
            size_t v53 = *(unsigned __int8 *)(v10 - 1);
            int v54 = (char)v53;
            if ((v53 & 0x80u) != 0) {
              size_t v53 = *(void *)(v10 - 16);
            }
            if (v54 >= 0) {
              size_t v55 = (const void *)(v10 - 24);
            }
            else {
              size_t v55 = *(const void **)(v10 - 24);
            }
            size_t v59 = v53;
            if (v53 >= v63) {
              size_t v56 = v63;
            }
            else {
              size_t v56 = v53;
            }
            int v57 = memcmp(v62, v55, v56);
            BOOL v58 = v63 < v59;
            if (v57) {
              BOOL v58 = v57 < 0;
            }
            if (v58)
            {
LABEL_22:
              uint64_t v25 = v7;
              uint64_t v61 = v9;
              while (1)
              {
                uint64_t v26 = v5 + v25;
                long long v27 = *(_OWORD *)(v5 + v25 - 24);
                *(_OWORD *)uint64_t v26 = *(_OWORD *)(v5 + v25 - 40);
                *(_OWORD *)(v26 + 16) = v27;
                *(void *)(v26 + 32) = *(void *)(v5 + v25 - 8);
                *(unsigned char *)(v26 - 1) = 0;
                *(unsigned char *)(v26 - 24) = 0;
                if (v25 == 40) {
                  break;
                }
                unint64_t v28 = *(void *)(v26 - 80);
                BOOL v29 = (unint64_t)v64 >= v28;
                if ((void)v64 == v28
                  && (v30 = v5 + v25, unint64_t v31 = *(void *)(v5 + v25 - 72), v29 = v16 >= v31, v16 == v31))
                {
                  size_t v34 = *(const void **)(v30 - 64);
                  uint64_t v32 = v30 - 64;
                  unint64_t v33 = v34;
                  int v35 = *(char *)(v32 + 23);
                  unint64_t v36 = v16;
                  char v37 = v8;
                  uint64_t v38 = v4;
                  if (v35 >= 0) {
                    size_t v39 = *(unsigned __int8 *)(v32 + 23);
                  }
                  else {
                    size_t v39 = *(void *)(v32 + 8);
                  }
                  if (v35 >= 0) {
                    BOOL v40 = (const void *)v32;
                  }
                  else {
                    BOOL v40 = v33;
                  }
                  if (v39 >= v63) {
                    size_t v41 = v63;
                  }
                  else {
                    size_t v41 = v39;
                  }
                  int v42 = memcmp(v62, v40, v41);
                  BOOL v13 = v63 >= v39;
                  uint64_t v4 = v38;
                  uint64_t v8 = v37;
                  unint64_t v16 = v36;
                  uint64_t v5 = a1;
                  uint64_t v9 = v61;
                  BOOL v43 = !v13;
                  if (v42) {
                    BOOL v43 = v42 < 0;
                  }
                  if (!v43)
                  {
LABEL_43:
                    uint64_t v10 = v5 + v25 - 40;
                    uint64_t v21 = v26 - 24;
                    goto LABEL_5;
                  }
                }
                else if (v29)
                {
                  goto LABEL_43;
                }
                v25 -= 40;
              }
              uint64_t v10 = v5;
              uint64_t v21 = v26 - 24;
            }
          }
          else if (!v23)
          {
            goto LABEL_22;
          }
        }
LABEL_5:
        *(_OWORD *)uint64_t v10 = v64;
        long long v11 = *(_OWORD *)v8;
        *(void *)(v21 + 16) = v8[2];
        *(_OWORD *)uint64_t v21 = v11;
LABEL_6:
        uint64_t v6 = v9 + 40;
        v7 += 40;
      }
      while (v9 + 40 != v4);
    }
  }
}

void std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(long long *a1, long long *a2)
{
  if (a1 != a2)
  {
    uint64_t v52 = v2;
    uint64_t v53 = v3;
    uint64_t v4 = a2;
    uint64_t v5 = a1;
    uint64_t v6 = (long long *)((char *)a1 + 40);
    if ((long long *)((char *)a1 + 40) != a2)
    {
      uint64_t v7 = a1 + 1;
      do
      {
        uint64_t v9 = v5;
        uint64_t v5 = v6;
        unint64_t v11 = *((void *)v9 + 5);
        BOOL v12 = v11 >= *(void *)v9;
        if (v11 == *(void *)v9
          && (v13 = *((void *)v9 + 6), v14 = *((void *)v9 + 1), BOOL v12 = v13 >= v14, v13 == v14))
        {
          int v33 = *((char *)v9 + 39);
          int v34 = *((char *)v9 + 79);
          if (v34 >= 0) {
            size_t v35 = *((unsigned __int8 *)v9 + 79);
          }
          else {
            size_t v35 = *((void *)v9 + 8);
          }
          if (v34 >= 0) {
            unint64_t v36 = (char *)v9 + 56;
          }
          else {
            unint64_t v36 = (const void *)*((void *)v9 + 7);
          }
          if (v33 >= 0) {
            size_t v37 = *((unsigned __int8 *)v9 + 39);
          }
          else {
            size_t v37 = *((void *)v9 + 3);
          }
          if (v33 >= 0) {
            uint64_t v38 = v9 + 1;
          }
          else {
            uint64_t v38 = (const void *)*((void *)v9 + 2);
          }
          if (v37 >= v35) {
            size_t v39 = v35;
          }
          else {
            size_t v39 = v37;
          }
          int v40 = memcmp(v36, v38, v39);
          BOOL v41 = v35 < v37;
          if (v40) {
            BOOL v41 = v40 < 0;
          }
          if (!v41) {
            goto LABEL_6;
          }
        }
        else if (v12)
        {
          goto LABEL_6;
        }
        long long v49 = *v5;
        uint64_t v51 = *((void *)v9 + 9);
        long long v50 = *(long long *)((char *)v9 + 56);
        *((void *)v9 + 7) = 0;
        *((void *)v9 + 8) = 0;
        *((void *)v9 + 9) = 0;
        if (v51 >= 0) {
          size_t v15 = HIBYTE(v51);
        }
        else {
          size_t v15 = *((void *)&v50 + 1);
        }
        if (v51 >= 0) {
          unint64_t v16 = &v50;
        }
        else {
          unint64_t v16 = (long long *)v50;
        }
        int v17 = *((char *)v5 + 39);
        *uint64_t v5 = *v9;
        int v18 = (void **)(v5 + 1);
        if (v17 < 0) {
          operator delete(*v18);
        }
        uint64_t v8 = v9 + 1;
        *(_OWORD *)int v18 = v9[1];
        *((void *)v5 + 4) = *((void *)v9 + 4);
        *((unsigned char *)v9 + 39) = 0;
        *((unsigned char *)v9 + 16) = 0;
        unint64_t v19 = *((void *)v9 - 5);
        BOOL v20 = (unint64_t)v49 >= v19;
        if ((void)v49 == v19
          && (unint64_t v21 = *((void *)v9 - 4), v20 = *((void *)&v49 + 1) >= v21, *((void *)&v49 + 1) == v21))
        {
          int v42 = *((char *)v9 - 1);
          if (v42 >= 0) {
            size_t v43 = *((unsigned __int8 *)v9 - 1);
          }
          else {
            size_t v43 = *((void *)v9 - 2);
          }
          if (v42 >= 0) {
            int v44 = (char *)v9 - 24;
          }
          else {
            int v44 = (char *)*((void *)v9 - 3);
          }
          if (v43 >= v15) {
            size_t v45 = v15;
          }
          else {
            size_t v45 = v43;
          }
          int v46 = memcmp(v16, v44, v45);
          BOOL v47 = v15 < v43;
          if (v46) {
            BOOL v47 = v46 < 0;
          }
          if (v47)
          {
LABEL_21:
            for (uint64_t i = v7; ; uint64_t i = (long long *)((char *)i - 40))
            {
              long long v23 = *(long long *)((char *)i - 40);
              *(i - 1) = *(long long *)((char *)i - 56);
              *uint64_t i = v23;
              *((void *)i + 2) = *((void *)i - 3);
              *((unsigned char *)i - 17) = 0;
              *((unsigned char *)i - 40) = 0;
              unint64_t v24 = *((void *)i - 12);
              BOOL v25 = (unint64_t)v49 >= v24;
              if ((void)v49 == v24
                && (v26 = *((void *)i - 11), BOOL v25 = *((void *)&v49 + 1) >= v26, *((void *)&v49 + 1) == v26))
              {
                int v27 = *((char *)i - 57);
                if (v27 >= 0) {
                  size_t v28 = *((unsigned __int8 *)i - 57);
                }
                else {
                  size_t v28 = *((void *)i - 9);
                }
                if (v27 >= 0) {
                  BOOL v29 = i - 5;
                }
                else {
                  BOOL v29 = (long long *)*((void *)i - 10);
                }
                if (v28 >= v15) {
                  size_t v30 = v15;
                }
                else {
                  size_t v30 = v28;
                }
                int v31 = memcmp(v16, v29, v30);
                BOOL v32 = v15 < v28;
                if (v31) {
                  BOOL v32 = v31 < 0;
                }
                if (!v32)
                {
LABEL_4:
                  uint64_t v8 = (long long *)((char *)i - 40);
                  uint64_t v9 = (long long *)((char *)i - 56);
                  break;
                }
              }
              else if (v25)
              {
                goto LABEL_4;
              }
            }
          }
        }
        else if (!v20)
        {
          goto LABEL_21;
        }
        *uint64_t v9 = v49;
        long long v10 = v50;
        *((void *)v8 + 2) = v51;
        *uint64_t v8 = v10;
        uint64_t v4 = a2;
LABEL_6:
        uint64_t v6 = (long long *)((char *)v5 + 40);
        uint64_t v7 = (long long *)((char *)v7 + 40);
      }
      while ((long long *)((char *)v5 + 40) != v4);
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(long long *a1, uint64_t *a2, long long *a3)
{
  unint64_t v6 = *a2;
  if (*a2 == *(void *)a1)
  {
    unint64_t v11 = a2[1];
    unint64_t v12 = *((void *)a1 + 1);
    if (v11 == v12)
    {
      int v37 = *((char *)a1 + 39);
      int v38 = *((char *)a2 + 39);
      if (v38 >= 0) {
        size_t v39 = *((unsigned __int8 *)a2 + 39);
      }
      else {
        size_t v39 = a2[3];
      }
      if (v38 >= 0) {
        int v40 = a2 + 2;
      }
      else {
        int v40 = (const void *)a2[2];
      }
      if (v37 >= 0) {
        size_t v41 = *((unsigned __int8 *)a1 + 39);
      }
      else {
        size_t v41 = *((void *)a1 + 3);
      }
      if (v37 >= 0) {
        int v42 = a1 + 1;
      }
      else {
        int v42 = (const void *)*((void *)a1 + 2);
      }
      if (v41 >= v39) {
        size_t v43 = v39;
      }
      else {
        size_t v43 = v41;
      }
      int v44 = memcmp(v40, v42, v43);
      BOOL v45 = v39 < v41;
      if (v44) {
        BOOL v45 = v44 < 0;
      }
      if (!v45) {
        goto LABEL_8;
      }
    }
    else if (v11 >= v12)
    {
      goto LABEL_8;
    }
LABEL_3:
    if (*(void *)a3 == v6)
    {
      unint64_t v25 = *((void *)a3 + 1);
      unint64_t v26 = a2[1];
      if (v25 == v26)
      {
        int v55 = *((char *)a2 + 39);
        int v56 = *((char *)a3 + 39);
        if (v56 >= 0) {
          size_t v57 = *((unsigned __int8 *)a3 + 39);
        }
        else {
          size_t v57 = *((void *)a3 + 3);
        }
        if (v56 >= 0) {
          BOOL v58 = a3 + 1;
        }
        else {
          BOOL v58 = (const void *)*((void *)a3 + 2);
        }
        if (v55 >= 0) {
          size_t v59 = *((unsigned __int8 *)a2 + 39);
        }
        else {
          size_t v59 = a2[3];
        }
        if (v55 >= 0) {
          long long v60 = a2 + 2;
        }
        else {
          long long v60 = (const void *)a2[2];
        }
        if (v59 >= v57) {
          size_t v61 = v57;
        }
        else {
          size_t v61 = v59;
        }
        int v62 = memcmp(v58, v60, v61);
        BOOL v63 = v57 < v59;
        if (v62) {
          BOOL v63 = v62 < 0;
        }
        if (v63) {
          goto LABEL_5;
        }
      }
      else if (v25 < v26)
      {
        goto LABEL_5;
      }
    }
    else if (*(void *)a3 < v6)
    {
LABEL_5:
      long long v81 = *a1;
      uint64_t v7 = *((void *)a1 + 2);
      *(void *)&long long v86 = *((void *)a1 + 3);
      *(void *)((char *)&v86 + 7) = *(void *)((char *)a1 + 31);
      char v8 = *((unsigned char *)a1 + 39);
      *((void *)a1 + 3) = 0;
      *((void *)a1 + 4) = 0;
      *((void *)a1 + 2) = 0;
      *a1 = *a3;
      uint64_t v9 = *((void *)a3 + 4);
      a1[1] = a3[1];
      *((void *)a1 + 4) = v9;
      *a3 = v81;
      *((void *)a3 + 2) = v7;
      *((void *)a3 + 3) = v86;
      *(void *)((char *)a3 + 31) = *(void *)((char *)&v86 + 7);
      uint64_t result = 1;
      *((unsigned char *)a3 + 39) = v8;
      return result;
    }
    long long v84 = *a1;
    int v27 = (const void *)*((void *)a1 + 2);
    *(void *)&long long v89 = *((void *)a1 + 3);
    *(void *)((char *)&v89 + 7) = *(void *)((char *)a1 + 31);
    size_t v28 = *((unsigned __int8 *)a1 + 39);
    char v29 = v28;
    *((void *)a1 + 2) = 0;
    *((void *)a1 + 3) = 0;
    *((void *)a1 + 4) = 0;
    *a1 = *(_OWORD *)a2;
    size_t v30 = a2 + 2;
    uint64_t v31 = a2[4];
    a1[1] = *((_OWORD *)a2 + 1);
    *((void *)a1 + 4) = v31;
    *(_OWORD *)a2 = v84;
    a2[2] = (uint64_t)v27;
    a2[3] = v89;
    BOOL v32 = (size_t *)(a2 + 3);
    *(uint64_t *)((char *)a2 + 31) = *(void *)((char *)&v89 + 7);
    *((unsigned char *)a2 + 39) = v28;
    BOOL v33 = *(void *)a3 >= (unint64_t)*a2;
    if (*(void *)a3 == *a2 && (v34 = *((void *)a3 + 1), v35 = a2[1], BOOL v33 = v34 >= v35, v34 == v35))
    {
      int v73 = *((char *)a3 + 39);
      if (v73 >= 0) {
        size_t v74 = *((unsigned __int8 *)a3 + 39);
      }
      else {
        size_t v74 = *((void *)a3 + 3);
      }
      if (v73 >= 0) {
        int v75 = a3 + 1;
      }
      else {
        int v75 = (const void *)*((void *)a3 + 2);
      }
      if ((v28 & 0x80u) == 0) {
        size_t v76 = v28;
      }
      else {
        size_t v76 = *v32;
      }
      if ((v28 & 0x80u) == 0) {
        int v77 = a2 + 2;
      }
      else {
        int v77 = v27;
      }
      if (v76 >= v74) {
        size_t v78 = v74;
      }
      else {
        size_t v78 = v76;
      }
      int v79 = memcmp(v75, v77, v78);
      BOOL v80 = v74 < v76;
      if (v79) {
        BOOL v80 = v79 < 0;
      }
      if (v80) {
        goto LABEL_20;
      }
    }
    else if (!v33)
    {
LABEL_20:
      long long v85 = *(_OWORD *)a2;
      *(void *)&long long v90 = *v32;
      *(void *)((char *)&v90 + 7) = *(uint64_t *)((char *)a2 + 31);
      a2[3] = 0;
      a2[4] = 0;
      void *v30 = 0;
      *(_OWORD *)a2 = *a3;
      uint64_t v36 = *((void *)a3 + 4);
      *(_OWORD *)size_t v30 = a3[1];
      a2[4] = v36;
      *a3 = v85;
      *((void *)a3 + 2) = v27;
      *((void *)a3 + 3) = v90;
      *(void *)((char *)a3 + 31) = *(void *)((char *)&v90 + 7);
      uint64_t result = 2;
      *((unsigned char *)a3 + 39) = v29;
      return result;
    }
    return 1;
  }
  if ((unint64_t)*a2 < *(void *)a1) {
    goto LABEL_3;
  }
LABEL_8:
  BOOL v13 = *(void *)a3 >= v6;
  if (*(void *)a3 != v6 || (v14 = *((void *)a3 + 1), v15 = a2[1], BOOL v13 = v14 >= v15, v14 != v15))
  {
    if (!v13) {
      goto LABEL_11;
    }
    return 0;
  }
  int v46 = *((char *)a2 + 39);
  int v47 = *((char *)a3 + 39);
  if (v47 >= 0) {
    size_t v48 = *((unsigned __int8 *)a3 + 39);
  }
  else {
    size_t v48 = *((void *)a3 + 3);
  }
  if (v47 >= 0) {
    long long v49 = a3 + 1;
  }
  else {
    long long v49 = (const void *)*((void *)a3 + 2);
  }
  if (v46 >= 0) {
    size_t v50 = *((unsigned __int8 *)a2 + 39);
  }
  else {
    size_t v50 = a2[3];
  }
  if (v46 >= 0) {
    uint64_t v51 = a2 + 2;
  }
  else {
    uint64_t v51 = (const void *)a2[2];
  }
  if (v50 >= v48) {
    size_t v52 = v48;
  }
  else {
    size_t v52 = v50;
  }
  int v53 = memcmp(v49, v51, v52);
  BOOL v54 = v48 < v50;
  if (v53) {
    BOOL v54 = v53 < 0;
  }
  if (!v54) {
    return 0;
  }
LABEL_11:
  long long v82 = *(_OWORD *)a2;
  uint64_t v16 = a2[2];
  *(void *)&long long v87 = a2[3];
  *(void *)((char *)&v87 + 7) = *(uint64_t *)((char *)a2 + 31);
  char v17 = *((unsigned char *)a2 + 39);
  a2[2] = 0;
  a2[4] = 0;
  a2[3] = 0;
  *(_OWORD *)a2 = *a3;
  uint64_t v18 = *((void *)a3 + 4);
  *((_OWORD *)a2 + 1) = a3[1];
  a2[4] = v18;
  *a3 = v82;
  *((void *)a3 + 2) = v16;
  *((void *)a3 + 3) = v87;
  *(void *)((char *)a3 + 31) = *(void *)((char *)&v87 + 7);
  *((unsigned char *)a3 + 39) = v17;
  BOOL v19 = (unint64_t)*a2 >= *(void *)a1;
  if (*a2 == *(void *)a1 && (v20 = a2[1], unint64_t v21 = *((void *)a1 + 1), v19 = v20 >= v21, v20 == v21))
  {
    int v64 = *((char *)a1 + 39);
    int v65 = *((char *)a2 + 39);
    if (v65 >= 0) {
      size_t v66 = *((unsigned __int8 *)a2 + 39);
    }
    else {
      size_t v66 = a2[3];
    }
    if (v65 >= 0) {
      uint64_t v67 = a2 + 2;
    }
    else {
      uint64_t v67 = (const void *)a2[2];
    }
    if (v64 >= 0) {
      size_t v68 = *((unsigned __int8 *)a1 + 39);
    }
    else {
      size_t v68 = *((void *)a1 + 3);
    }
    if (v64 >= 0) {
      int v69 = a1 + 1;
    }
    else {
      int v69 = (const void *)*((void *)a1 + 2);
    }
    if (v68 >= v66) {
      size_t v70 = v66;
    }
    else {
      size_t v70 = v68;
    }
    int v71 = memcmp(v67, v69, v70);
    BOOL v72 = v66 < v68;
    if (v71) {
      BOOL v72 = v71 < 0;
    }
    if (v72) {
      goto LABEL_14;
    }
  }
  else if (!v19)
  {
LABEL_14:
    long long v83 = *a1;
    uint64_t v22 = *((void *)a1 + 2);
    *(void *)&long long v88 = *((void *)a1 + 3);
    *(void *)((char *)&v88 + 7) = *(void *)((char *)a1 + 31);
    char v23 = *((unsigned char *)a1 + 39);
    *((void *)a1 + 3) = 0;
    *((void *)a1 + 4) = 0;
    *((void *)a1 + 2) = 0;
    *a1 = *(_OWORD *)a2;
    uint64_t v24 = a2[4];
    a1[1] = *((_OWORD *)a2 + 1);
    *((void *)a1 + 4) = v24;
    *(_OWORD *)a2 = v83;
    a2[2] = v22;
    a2[3] = v88;
    *(uint64_t *)((char *)a2 + 31) = *(void *)((char *)&v88 + 7);
    uint64_t result = 2;
    *((unsigned char *)a2 + 39) = v23;
    return result;
  }
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,llvm::SMFixIt *,std::__less<void,void> &>(long long *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  v82[2] = *MEMORY[0x1E4F143B8];
  long long v78 = *a1;
  long long v79 = a1[1];
  uint64_t v80 = *((void *)a1 + 4);
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 2) = 0;
  unint64_t v4 = *(void *)(a2 - 40);
  if ((void)v78 == v4)
  {
    unint64_t v5 = *((void *)&v78 + 1);
    unint64_t v6 = *(void *)(a2 - 32);
    if (*((void *)&v78 + 1) == v6)
    {
      int v18 = *(char *)(a2 - 1);
      if (v80 >= 0) {
        size_t v19 = HIBYTE(v80);
      }
      else {
        size_t v19 = *((void *)&v79 + 1);
      }
      if (v80 >= 0) {
        unint64_t v20 = &v79;
      }
      else {
        unint64_t v20 = (long long *)v79;
      }
      if (v18 >= 0) {
        size_t v21 = *(unsigned __int8 *)(a2 - 1);
      }
      else {
        size_t v21 = *(void *)(a2 - 16);
      }
      if (v18 >= 0) {
        uint64_t v22 = (const void *)(a2 - 24);
      }
      else {
        uint64_t v22 = *(const void **)(a2 - 24);
      }
      if (v21 >= v19) {
        size_t v23 = v19;
      }
      else {
        size_t v23 = v21;
      }
      int v24 = memcmp(v20, v22, v23);
      BOOL v25 = v19 < v21;
      if (v24) {
        BOOL v25 = v24 < 0;
      }
      if (v25) {
        goto LABEL_6;
      }
    }
    else if (*((void *)&v78 + 1) < v6)
    {
      goto LABEL_6;
    }
  }
  else if ((unint64_t)v78 < v4)
  {
    unint64_t v5 = *((void *)&v78 + 1);
LABEL_6:
    if (v80 >= 0) {
      size_t v7 = HIBYTE(v80);
    }
    else {
      size_t v7 = *((void *)&v79 + 1);
    }
    if (v80 >= 0) {
      char v8 = &v79;
    }
    else {
      char v8 = (long long *)v79;
    }
    for (unint64_t i = (unint64_t)a1 + 40; ; i += 40)
    {
      BOOL v10 = (unint64_t)v78 >= *(void *)i;
      if ((void)v78 == *(void *)i && (unint64_t v11 = *(void *)(i + 8), v10 = v5 >= v11, v5 == v11))
      {
        int v12 = *(char *)(i + 39);
        if (v12 >= 0) {
          size_t v13 = *(unsigned __int8 *)(i + 39);
        }
        else {
          size_t v13 = *(void *)(i + 24);
        }
        if (v12 >= 0) {
          unint64_t v14 = (const void *)(i + 16);
        }
        else {
          unint64_t v14 = *(const void **)(i + 16);
        }
        if (v13 >= v7) {
          size_t v15 = v7;
        }
        else {
          size_t v15 = v13;
        }
        int v16 = memcmp(v8, v14, v15);
        BOOL v17 = v7 < v13;
        if (v16) {
          BOOL v17 = v16 < 0;
        }
        if (v17) {
          goto LABEL_73;
        }
      }
      else if (!v10)
      {
        goto LABEL_73;
      }
    }
  }
  unint64_t i = (unint64_t)a1 + 40;
  if ((unint64_t)a1 + 40 < v2)
  {
    if (v80 >= 0) {
      size_t v26 = HIBYTE(v80);
    }
    else {
      size_t v26 = *((void *)&v79 + 1);
    }
    if (v80 >= 0) {
      int v27 = &v79;
    }
    else {
      int v27 = (long long *)v79;
    }
    do
    {
      BOOL v28 = (unint64_t)v78 >= *(void *)i;
      if ((void)v78 == *(void *)i
        && (v29 = *(void *)(i + 8), BOOL v28 = *((void *)&v78 + 1) >= v29, *((void *)&v78 + 1) == v29))
      {
        int v30 = *(char *)(i + 39);
        if (v30 >= 0) {
          size_t v31 = *(unsigned __int8 *)(i + 39);
        }
        else {
          size_t v31 = *(void *)(i + 24);
        }
        if (v30 >= 0) {
          BOOL v32 = (const void *)(i + 16);
        }
        else {
          BOOL v32 = *(const void **)(i + 16);
        }
        if (v31 >= v26) {
          size_t v33 = v26;
        }
        else {
          size_t v33 = v31;
        }
        int v34 = memcmp(v27, v32, v33);
        BOOL v35 = v26 < v31;
        if (v34) {
          BOOL v35 = v34 < 0;
        }
        if (v35) {
          break;
        }
      }
      else if (!v28)
      {
        break;
      }
      i += 40;
    }
    while (i < v2);
  }
LABEL_73:
  if (i < v2)
  {
    if (v80 >= 0) {
      size_t v36 = HIBYTE(v80);
    }
    else {
      size_t v36 = *((void *)&v79 + 1);
    }
    if (v80 >= 0) {
      int v37 = &v79;
    }
    else {
      int v37 = (long long *)v79;
    }
    for (v2 -= 40; ; v2 -= 40)
    {
      BOOL v39 = (unint64_t)v78 >= v4;
      if ((void)v78 == v4
        && (v40 = *(void *)(v2 + 8), BOOL v39 = *((void *)&v78 + 1) >= v40, *((void *)&v78 + 1) == v40))
      {
        int v41 = *(char *)(v2 + 39);
        if (v41 >= 0) {
          size_t v42 = *(unsigned __int8 *)(v2 + 39);
        }
        else {
          size_t v42 = *(void *)(v2 + 24);
        }
        if (v41 >= 0) {
          size_t v43 = (const void *)(v2 + 16);
        }
        else {
          size_t v43 = *(const void **)(v2 + 16);
        }
        if (v42 >= v36) {
          size_t v44 = v36;
        }
        else {
          size_t v44 = v42;
        }
        int v45 = memcmp(v37, v43, v44);
        BOOL v46 = v36 < v42;
        if (v45) {
          BOOL v46 = v45 < 0;
        }
        if (!v46) {
          break;
        }
      }
      else if (v39)
      {
        break;
      }
      unint64_t v38 = *(void *)(v2 - 40);
      unint64_t v4 = v38;
    }
  }
LABEL_140:
  while (i < v2)
  {
    long long v81 = *(_OWORD *)i;
    uint64_t v47 = *(void *)(i + 16);
    v82[0] = *(void *)(i + 24);
    *(void *)((char *)v82 + 7) = *(void *)(i + 31);
    char v48 = *(unsigned char *)(i + 39);
    *(void *)(i + 24) = 0;
    *(void *)(i + 32) = 0;
    *(void *)(i + 16) = 0;
    *(_OWORD *)unint64_t i = *(_OWORD *)v2;
    long long v49 = *(_OWORD *)(v2 + 16);
    *(void *)(i + 32) = *(void *)(v2 + 32);
    *(_OWORD *)(i + 16) = v49;
    *(_OWORD *)unint64_t v2 = v81;
    *(void *)(v2 + 31) = *(void *)((char *)v82 + 7);
    uint64_t v50 = v82[0];
    *(void *)(v2 + 16) = v47;
    *(void *)(v2 + 24) = v50;
    *(unsigned char *)(v2 + 39) = v48;
    if (v80 >= 0) {
      size_t v51 = HIBYTE(v80);
    }
    else {
      size_t v51 = *((void *)&v79 + 1);
    }
    if (v80 >= 0) {
      size_t v52 = &v79;
    }
    else {
      size_t v52 = (long long *)v79;
    }
    do
    {
      while (1)
      {
        while (1)
        {
          unint64_t v53 = *(void *)(i + 40);
          i += 40;
          BOOL v54 = (unint64_t)v78 >= v53;
          if ((void)v78 == v53) {
            break;
          }
          if (!v54) {
            goto LABEL_124;
          }
        }
        unint64_t v55 = *(void *)(i + 8);
        if (*((void *)&v78 + 1) == v55) {
          break;
        }
        if (*((void *)&v78 + 1) < v55) {
          goto LABEL_124;
        }
      }
      int v56 = *(char *)(i + 39);
      if (v56 >= 0) {
        size_t v57 = *(unsigned __int8 *)(i + 39);
      }
      else {
        size_t v57 = *(void *)(i + 24);
      }
      if (v56 >= 0) {
        BOOL v58 = (const void *)(i + 16);
      }
      else {
        BOOL v58 = *(const void **)(i + 16);
      }
      if (v57 >= v51) {
        size_t v59 = v51;
      }
      else {
        size_t v59 = v57;
      }
      int v60 = memcmp(v52, v58, v59);
      BOOL v61 = v51 < v57;
      if (v60) {
        BOOL v61 = v60 < 0;
      }
    }
    while (!v61);
    do
    {
      while (1)
      {
LABEL_124:
        while (1)
        {
          unint64_t v62 = *(void *)(v2 - 40);
          v2 -= 40;
          BOOL v63 = (unint64_t)v78 >= v62;
          if ((void)v78 == v62) {
            break;
          }
          if (v63) {
            goto LABEL_140;
          }
        }
        unint64_t v64 = *(void *)(v2 + 8);
        if (*((void *)&v78 + 1) == v64) {
          break;
        }
        if (*((void *)&v78 + 1) >= v64) {
          goto LABEL_140;
        }
      }
      int v65 = *(char *)(v2 + 39);
      if (v65 >= 0) {
        size_t v66 = *(unsigned __int8 *)(v2 + 39);
      }
      else {
        size_t v66 = *(void *)(v2 + 24);
      }
      if (v65 >= 0) {
        uint64_t v67 = (const void *)(v2 + 16);
      }
      else {
        uint64_t v67 = *(const void **)(v2 + 16);
      }
      if (v66 >= v51) {
        size_t v68 = v51;
      }
      else {
        size_t v68 = v66;
      }
      int v69 = memcmp(v52, v67, v68);
      BOOL v70 = v51 < v66;
      if (v69) {
        BOOL v70 = v69 < 0;
      }
    }
    while (v70);
  }
  int v71 = (long long *)(i - 40);
  if ((long long *)(i - 40) == a1)
  {
    int v75 = *(char *)(i - 1);
    *int v71 = v78;
    unint64_t v73 = i - 24;
    if (v75 < 0) {
      operator delete(*(void **)v73);
    }
  }
  else
  {
    BOOL v72 = a1 + 1;
    *a1 = *v71;
    if (*((char *)a1 + 39) < 0) {
      operator delete(*(void **)v72);
    }
    unint64_t v73 = i - 24;
    long long v74 = *(_OWORD *)(i - 24);
    *((void *)v72 + 2) = *(void *)(i - 8);
    *BOOL v72 = v74;
    *(unsigned char *)(i - 1) = 0;
    *(unsigned char *)(i - 24) = 0;
    *int v71 = v78;
  }
  long long v76 = v79;
  *(void *)(v73 + 16) = v80;
  *(_OWORD *)unint64_t v73 = v76;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,llvm::SMFixIt *,std::__less<void,void> &>(long long *a1, unint64_t a2)
{
  uint64_t v4 = 0;
  v76[2] = *MEMORY[0x1E4F143B8];
  int v71 = a1 + 1;
  uint64_t v74 = *((void *)a1 + 4);
  unint64_t v5 = v74;
  long long v72 = *a1;
  long long v73 = a1[1];
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 4) = 0;
  size_t v6 = HIBYTE(v5);
  if ((v6 & 0x80u) == 0) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = *((void *)&v73 + 1);
  }
  if ((v6 & 0x80u) == 0) {
    char v8 = &v73;
  }
  else {
    char v8 = (long long *)v73;
  }
  while (1)
  {
    unint64_t v9 = *(void *)((char *)a1 + v4 + 40);
    BOOL v10 = v9 >= (unint64_t)v72;
    if (v9 == (void)v72)
    {
      unint64_t v11 = *(void *)((char *)a1 + v4 + 48);
      BOOL v10 = v11 >= *((void *)&v72 + 1);
      if (v11 == *((void *)&v72 + 1)) {
        break;
      }
    }
    if (v10) {
      goto LABEL_23;
    }
LABEL_8:
    v4 += 40;
  }
  int v12 = *((char *)a1 + v4 + 79);
  if (v12 >= 0) {
    size_t v13 = *((unsigned __int8 *)a1 + v4 + 79);
  }
  else {
    size_t v13 = *(void *)((char *)a1 + v4 + 64);
  }
  if (v12 >= 0) {
    unint64_t v14 = (char *)a1 + v4 + 56;
  }
  else {
    unint64_t v14 = *(char **)((char *)a1 + v4 + 56);
  }
  if (v7 >= v13) {
    size_t v15 = v13;
  }
  else {
    size_t v15 = v7;
  }
  int v16 = memcmp(v14, v8, v15);
  BOOL v17 = v13 < v7;
  if (v16) {
    BOOL v17 = v16 < 0;
  }
  if (v17) {
    goto LABEL_8;
  }
LABEL_23:
  unint64_t v18 = (unint64_t)a1 + v4 + 40;
  if (v4)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          unint64_t v19 = *(void *)(a2 - 40);
          a2 -= 40;
          BOOL v20 = v19 >= (unint64_t)v72;
          if (v19 == (void)v72) {
            break;
          }
          if (!v20) {
            goto LABEL_67;
          }
        }
        unint64_t v21 = *(void *)(a2 + 8);
        if (v21 == *((void *)&v72 + 1)) {
          break;
        }
        if (v21 < *((void *)&v72 + 1)) {
          goto LABEL_67;
        }
      }
      int v22 = *(char *)(a2 + 39);
      if (v22 >= 0) {
        size_t v23 = *(unsigned __int8 *)(a2 + 39);
      }
      else {
        size_t v23 = *(void *)(a2 + 24);
      }
      if (v22 >= 0) {
        int v24 = (const void *)(a2 + 16);
      }
      else {
        int v24 = *(const void **)(a2 + 16);
      }
      if (v7 >= v23) {
        size_t v25 = v23;
      }
      else {
        size_t v25 = v7;
      }
      int v26 = memcmp(v24, v8, v25);
      BOOL v27 = v23 < v7;
      if (v26) {
        BOOL v27 = v26 < 0;
      }
    }
    while (!v27);
  }
  else if (v18 < a2)
  {
    do
    {
      while (1)
      {
        unint64_t v29 = *(void *)(a2 - 40);
        a2 -= 40;
        BOOL v30 = v29 >= (unint64_t)v72;
        if (v29 == (void)v72)
        {
          unint64_t v31 = *(void *)(a2 + 8);
          BOOL v30 = v31 >= *((void *)&v72 + 1);
          if (v31 == *((void *)&v72 + 1)) {
            break;
          }
        }
        if (!v30 || v18 >= a2) {
          goto LABEL_67;
        }
      }
      int v32 = *(char *)(a2 + 39);
      if (v32 >= 0) {
        size_t v33 = *(unsigned __int8 *)(a2 + 39);
      }
      else {
        size_t v33 = *(void *)(a2 + 24);
      }
      if (v32 >= 0) {
        int v34 = (const void *)(a2 + 16);
      }
      else {
        int v34 = *(const void **)(a2 + 16);
      }
      if (v7 >= v33) {
        size_t v35 = v33;
      }
      else {
        size_t v35 = v7;
      }
      int v36 = memcmp(v34, v8, v35);
      BOOL v37 = v33 >= v7;
      if (v36) {
        BOOL v37 = v36 >= 0;
      }
    }
    while (v37 && v18 < a2);
  }
LABEL_67:
  unint64_t v39 = v18;
  if (v18 < a2)
  {
    unint64_t v40 = a2;
    do
    {
      long long v75 = *(_OWORD *)v39;
      uint64_t v41 = *(void *)(v39 + 16);
      v76[0] = *(void *)(v39 + 24);
      *(void *)((char *)v76 + 7) = *(void *)(v39 + 31);
      char v42 = *(unsigned char *)(v39 + 39);
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0;
      *(void *)(v39 + 16) = 0;
      *(_OWORD *)unint64_t v39 = *(_OWORD *)v40;
      long long v43 = *(_OWORD *)(v40 + 16);
      *(void *)(v39 + 32) = *(void *)(v40 + 32);
      *(_OWORD *)(v39 + 16) = v43;
      *(_OWORD *)unint64_t v40 = v75;
      *(void *)(v40 + 31) = *(void *)((char *)v76 + 7);
      uint64_t v44 = v76[0];
      *(void *)(v40 + 16) = v41;
      *(void *)(v40 + 24) = v44;
      *(unsigned char *)(v40 + 39) = v42;
      if (v74 >= 0) {
        size_t v45 = HIBYTE(v74);
      }
      else {
        size_t v45 = *((void *)&v73 + 1);
      }
      if (v74 >= 0) {
        BOOL v46 = &v73;
      }
      else {
        BOOL v46 = (long long *)v73;
      }
      do
      {
        while (1)
        {
          while (1)
          {
            unint64_t v47 = *(void *)(v39 + 40);
            v39 += 40;
            BOOL v48 = v47 >= (unint64_t)v72;
            if (v47 == (void)v72) {
              break;
            }
            if (v48) {
              goto LABEL_96;
            }
          }
          unint64_t v49 = *(void *)(v39 + 8);
          if (v49 == *((void *)&v72 + 1)) {
            break;
          }
          if (v49 >= *((void *)&v72 + 1)) {
            goto LABEL_96;
          }
        }
        int v50 = *(char *)(v39 + 39);
        if (v50 >= 0) {
          size_t v51 = *(unsigned __int8 *)(v39 + 39);
        }
        else {
          size_t v51 = *(void *)(v39 + 24);
        }
        if (v50 >= 0) {
          size_t v52 = (const void *)(v39 + 16);
        }
        else {
          size_t v52 = *(const void **)(v39 + 16);
        }
        if (v45 >= v51) {
          size_t v53 = v51;
        }
        else {
          size_t v53 = v45;
        }
        int v54 = memcmp(v52, v46, v53);
        BOOL v55 = v51 < v45;
        if (v54) {
          BOOL v55 = v54 < 0;
        }
      }
      while (v55);
      do
      {
        while (1)
        {
LABEL_96:
          while (1)
          {
            unint64_t v56 = *(void *)(v40 - 40);
            v40 -= 40;
            BOOL v57 = v56 >= (unint64_t)v72;
            if (v56 == (void)v72) {
              break;
            }
            if (!v57) {
              goto LABEL_69;
            }
          }
          unint64_t v58 = *(void *)(v40 + 8);
          if (v58 == *((void *)&v72 + 1)) {
            break;
          }
          if (v58 < *((void *)&v72 + 1)) {
            goto LABEL_69;
          }
        }
        int v59 = *(char *)(v40 + 39);
        if (v59 >= 0) {
          size_t v60 = *(unsigned __int8 *)(v40 + 39);
        }
        else {
          size_t v60 = *(void *)(v40 + 24);
        }
        if (v59 >= 0) {
          BOOL v61 = (const void *)(v40 + 16);
        }
        else {
          BOOL v61 = *(const void **)(v40 + 16);
        }
        if (v45 >= v60) {
          size_t v62 = v60;
        }
        else {
          size_t v62 = v45;
        }
        int v63 = memcmp(v61, v46, v62);
        BOOL v64 = v60 < v45;
        if (v63) {
          BOOL v64 = v63 < 0;
        }
      }
      while (!v64);
LABEL_69:
      ;
    }
    while (v39 < v40);
  }
  int v65 = (long long *)(v39 - 40);
  if ((long long *)(v39 - 40) == a1)
  {
    int v68 = *(char *)(v39 - 1);
    *int v65 = v72;
    unint64_t v66 = v39 - 24;
    if (v68 < 0) {
      operator delete(*(void **)v66);
    }
  }
  else
  {
    *a1 = *v65;
    if (*((char *)a1 + 39) < 0) {
      operator delete(*(void **)v71);
    }
    unint64_t v66 = v39 - 24;
    long long v67 = *(_OWORD *)(v39 - 24);
    *((void *)v71 + 2) = *(void *)(v39 - 8);
    *int v71 = v67;
    *(unsigned char *)(v39 - 1) = 0;
    *(unsigned char *)(v39 - 24) = 0;
    *int v65 = v72;
  }
  long long v69 = v73;
  *(void *)(v66 + 16) = v74;
  *(_OWORD *)unint64_t v66 = v69;
  return v39 - 40;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  v63[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      size_t v7 = (_OWORD *)(a2 - 40);
      unint64_t v6 = *(void *)(a2 - 40);
      BOOL v8 = v6 >= *(void *)a1;
      if (v6 == *(void *)a1 && (unint64_t v9 = *(void *)(a2 - 32), v10 = *(void *)(a1 + 8), v8 = v9 >= v10, v9 == v10))
      {
        int v47 = *(char *)(a1 + 39);
        int v48 = *(char *)(a2 - 1);
        if (v48 >= 0) {
          size_t v49 = *(unsigned __int8 *)(a2 - 1);
        }
        else {
          size_t v49 = *(void *)(a2 - 16);
        }
        if (v48 >= 0) {
          int v50 = (const void *)(a2 - 24);
        }
        else {
          int v50 = *(const void **)(a2 - 24);
        }
        if (v47 >= 0) {
          size_t v51 = *(unsigned __int8 *)(a1 + 39);
        }
        else {
          size_t v51 = *(void *)(a1 + 24);
        }
        if (v47 >= 0) {
          size_t v52 = (const void *)(a1 + 16);
        }
        else {
          size_t v52 = *(const void **)(a1 + 16);
        }
        if (v51 >= v49) {
          size_t v53 = v49;
        }
        else {
          size_t v53 = v51;
        }
        int v54 = memcmp(v50, v52, v53);
        BOOL v55 = v49 < v51;
        if (v54) {
          BOOL v55 = v54 < 0;
        }
        if (!v55) {
          return 1;
        }
      }
      else if (v8)
      {
        return result;
      }
      long long v59 = *(_OWORD *)a1;
      uint64_t v11 = *(void *)(a1 + 16);
      v63[0] = *(void *)(a1 + 24);
      *(void *)((char *)v63 + 7) = *(void *)(a1 + 31);
      char v12 = *(unsigned char *)(a1 + 39);
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 16) = 0;
      *(_OWORD *)a1 = *v7;
      uint64_t v13 = *(void *)(v2 - 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v2 - 24);
      *(void *)(a1 + 32) = v13;
      *size_t v7 = v59;
      uint64_t v14 = v63[0];
      *(void *)(v2 - 24) = v11;
      *(void *)(v2 - 16) = v14;
      *(void *)(v2 - 9) = *(void *)((char *)v63 + 7);
      BOOL result = 1;
      *(unsigned char *)(v2 - 1) = v12;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)a1, (uint64_t *)(a1 + 40), (long long *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, (long long *)(a1 + 40), (long long *)(a1 + 80), (long long *)(a2 - 40));
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v15 = a1 + 80;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)a1, (uint64_t *)(a1 + 40), (long long *)(a1 + 80));
      uint64_t v16 = a1 + 120;
      if (a1 + 120 == v2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      uint64_t v56 = v2;
      break;
  }
  while (1)
  {
    BOOL v20 = *(void *)v16 >= *(void *)v15;
    if (*(void *)v16 == *(void *)v15)
    {
      unint64_t v21 = *(void *)(v16 + 8);
      unint64_t v22 = *(void *)(v15 + 8);
      BOOL v20 = v21 >= v22;
      if (v21 == v22) {
        break;
      }
    }
    if (!v20) {
      goto LABEL_14;
    }
LABEL_10:
    uint64_t v15 = v16;
    v17 += 40;
    v16 += 40;
    if (v16 == v2) {
      return 1;
    }
  }
  int v38 = *(char *)(v15 + 39);
  int v39 = *(char *)(v16 + 39);
  if (v39 >= 0) {
    size_t v40 = *(unsigned __int8 *)(v16 + 39);
  }
  else {
    size_t v40 = *(void *)(v16 + 24);
  }
  if (v39 >= 0) {
    uint64_t v41 = (const void *)(v16 + 16);
  }
  else {
    uint64_t v41 = *(const void **)(v16 + 16);
  }
  if (v38 >= 0) {
    size_t v42 = *(unsigned __int8 *)(v15 + 39);
  }
  else {
    size_t v42 = *(void *)(v15 + 24);
  }
  if (v38 >= 0) {
    long long v43 = (const void *)(v15 + 16);
  }
  else {
    long long v43 = *(const void **)(v15 + 16);
  }
  if (v42 >= v40) {
    size_t v44 = v40;
  }
  else {
    size_t v44 = v42;
  }
  int v45 = memcmp(v41, v43, v44);
  BOOL v46 = v40 < v42;
  if (v45) {
    BOOL v46 = v45 < 0;
  }
  if (!v46) {
    goto LABEL_10;
  }
LABEL_14:
  long long v23 = *(_OWORD *)(v16 + 16);
  long long v60 = *(_OWORD *)v16;
  uint64_t v62 = *(void *)(v16 + 32);
  long long v61 = v23;
  *(void *)(v16 + 16) = 0;
  *(void *)(v16 + 24) = 0;
  *(void *)(v16 + 32) = 0;
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v15;
  uint64_t v24 = v15 + 16;
  *(void *)(v16 + 32) = *(void *)(v15 + 32);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)(v15 + 16);
  *(unsigned char *)(v15 + 39) = 0;
  *(unsigned char *)(v15 + 16) = 0;
  if (v15 == a1)
  {
    uint64_t v15 = a1;
  }
  else
  {
    int v58 = v18;
    uint64_t v57 = v17;
    do
    {
      unint64_t v26 = *(void *)(a1 + v17 + 40);
      BOOL v27 = (unint64_t)v60 >= v26;
      if ((void)v60 == v26
        && (v28 = *(void *)(a1 + v17 + 48), BOOL v27 = *((void *)&v60 + 1) >= v28, *((void *)&v60 + 1) == v28))
      {
        uint64_t v29 = a1 + v17;
        int v30 = *(char *)(a1 + v17 + 79);
        if (v62 >= 0) {
          size_t v31 = HIBYTE(v62);
        }
        else {
          size_t v31 = *((void *)&v61 + 1);
        }
        if (v62 >= 0) {
          int v32 = &v61;
        }
        else {
          int v32 = (long long *)v61;
        }
        if (v30 >= 0) {
          size_t v33 = *(unsigned __int8 *)(a1 + v17 + 79);
        }
        else {
          size_t v33 = *(void *)(a1 + v17 + 64);
        }
        if (v30 >= 0) {
          int v34 = (const void *)(a1 + v17 + 56);
        }
        else {
          int v34 = *(const void **)(a1 + v17 + 56);
        }
        if (v33 >= v31) {
          size_t v35 = v31;
        }
        else {
          size_t v35 = v33;
        }
        int v36 = memcmp(v32, v34, v35);
        BOOL v37 = v31 < v33;
        if (v36) {
          BOOL v37 = v36 < 0;
        }
        if (!v37)
        {
          uint64_t v24 = v29 + 96;
          uint64_t v15 = v29 + 80;
          goto LABEL_40;
        }
      }
      else if (v27)
      {
        goto LABEL_40;
      }
      uint64_t v24 = v15 - 24;
      v15 -= 40;
      *(_OWORD *)(a1 + v17 + 80) = *(_OWORD *)(a1 + v17 + 40);
      uint64_t v25 = a1 + v17;
      *(_OWORD *)(v25 + 96) = *(_OWORD *)(a1 + v17 + 56);
      *(void *)(v25 + 112) = *(void *)(a1 + v17 + 72);
      *(unsigned char *)(v25 + 79) = 0;
      *(unsigned char *)(v25 + 56) = 0;
      v17 -= 40;
    }
    while (v17 != -80);
    uint64_t v24 = a1 + 16;
    uint64_t v15 = a1;
LABEL_40:
    uint64_t v2 = v56;
    uint64_t v17 = v57;
    int v18 = v58;
  }
  *(_OWORD *)uint64_t v15 = v60;
  long long v19 = v61;
  *(void *)(v24 + 16) = v62;
  *(_OWORD *)uint64_t v24 = v19;
  if (++v18 != 8) {
    goto LABEL_10;
  }
  return v16 + 40 == v2;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, long long *a2, long long *a3, long long *a4)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)a1, (uint64_t *)a2, a3);
  BOOL v9 = *(void *)a4 >= *(void *)a3;
  if (*(void *)a4 == *(void *)a3
    && (v10 = *((void *)a4 + 1), v11 = *((void *)a3 + 1), BOOL v9 = v10 >= v11, v10 == v11))
  {
    int v27 = *((char *)a3 + 39);
    int v28 = *((char *)a4 + 39);
    if (v28 >= 0) {
      size_t v29 = *((unsigned __int8 *)a4 + 39);
    }
    else {
      size_t v29 = *((void *)a4 + 3);
    }
    if (v28 >= 0) {
      int v30 = a4 + 1;
    }
    else {
      int v30 = (const void *)*((void *)a4 + 2);
    }
    if (v27 >= 0) {
      size_t v31 = *((unsigned __int8 *)a3 + 39);
    }
    else {
      size_t v31 = *((void *)a3 + 3);
    }
    if (v27 >= 0) {
      int v32 = a3 + 1;
    }
    else {
      int v32 = (const void *)*((void *)a3 + 2);
    }
    if (v31 >= v29) {
      size_t v33 = v29;
    }
    else {
      size_t v33 = v31;
    }
    uint64_t result = memcmp(v30, v32, v33);
    BOOL v34 = v29 < v31;
    if (result) {
      BOOL v34 = (int)result < 0;
    }
    if (!v34) {
      return result;
    }
  }
  else if (v9)
  {
    return result;
  }
  long long v51 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  *(void *)&long long v54 = *((void *)a3 + 3);
  *(void *)((char *)&v54 + 7) = *(void *)((char *)a3 + 31);
  char v13 = *((unsigned char *)a3 + 39);
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 3) = 0;
  *a3 = *a4;
  uint64_t v14 = *((void *)a4 + 4);
  a3[1] = a4[1];
  *((void *)a3 + 4) = v14;
  *a4 = v51;
  *((void *)a4 + 2) = v12;
  *((void *)a4 + 3) = v54;
  *(void *)((char *)a4 + 31) = *(void *)((char *)&v54 + 7);
  *((unsigned char *)a4 + 39) = v13;
  BOOL v15 = *(void *)a3 >= *(void *)a2;
  if (*(void *)a3 == *(void *)a2
    && (v16 = *((void *)a3 + 1), unint64_t v17 = *((void *)a2 + 1), v15 = v16 >= v17, v16 == v17))
  {
    int v35 = *((char *)a2 + 39);
    int v36 = *((char *)a3 + 39);
    if (v36 >= 0) {
      size_t v37 = *((unsigned __int8 *)a3 + 39);
    }
    else {
      size_t v37 = *((void *)a3 + 3);
    }
    if (v36 >= 0) {
      int v38 = a3 + 1;
    }
    else {
      int v38 = (const void *)*((void *)a3 + 2);
    }
    if (v35 >= 0) {
      size_t v39 = *((unsigned __int8 *)a2 + 39);
    }
    else {
      size_t v39 = *((void *)a2 + 3);
    }
    if (v35 >= 0) {
      size_t v40 = a2 + 1;
    }
    else {
      size_t v40 = (const void *)*((void *)a2 + 2);
    }
    if (v39 >= v37) {
      size_t v41 = v37;
    }
    else {
      size_t v41 = v39;
    }
    uint64_t result = memcmp(v38, v40, v41);
    BOOL v42 = v37 < v39;
    if (result) {
      BOOL v42 = (int)result < 0;
    }
    if (!v42) {
      return result;
    }
  }
  else if (v15)
  {
    return result;
  }
  long long v52 = *a2;
  uint64_t v18 = *((void *)a2 + 2);
  *(void *)&long long v55 = *((void *)a2 + 3);
  *(void *)((char *)&v55 + 7) = *(void *)((char *)a2 + 31);
  char v19 = *((unsigned char *)a2 + 39);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 3) = 0;
  *a2 = *a3;
  uint64_t v20 = *((void *)a3 + 4);
  a2[1] = a3[1];
  *((void *)a2 + 4) = v20;
  *a3 = v52;
  *((void *)a3 + 2) = v18;
  *((void *)a3 + 3) = v55;
  *(void *)((char *)a3 + 31) = *(void *)((char *)&v55 + 7);
  *((unsigned char *)a3 + 39) = v19;
  BOOL v21 = *(void *)a2 >= *(void *)a1;
  if (*(void *)a2 != *(void *)a1
    || (v22 = *((void *)a2 + 1), unint64_t v23 = *(void *)(a1 + 8), v21 = v22 >= v23, v22 != v23))
  {
    if (v21) {
      return result;
    }
    goto LABEL_10;
  }
  int v43 = *(char *)(a1 + 39);
  int v44 = *((char *)a2 + 39);
  if (v44 >= 0) {
    size_t v45 = *((unsigned __int8 *)a2 + 39);
  }
  else {
    size_t v45 = *((void *)a2 + 3);
  }
  if (v44 >= 0) {
    BOOL v46 = a2 + 1;
  }
  else {
    BOOL v46 = (const void *)*((void *)a2 + 2);
  }
  if (v43 >= 0) {
    size_t v47 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    size_t v47 = *(void *)(a1 + 24);
  }
  if (v43 >= 0) {
    int v48 = (const void *)(a1 + 16);
  }
  else {
    int v48 = *(const void **)(a1 + 16);
  }
  if (v47 >= v45) {
    size_t v49 = v45;
  }
  else {
    size_t v49 = v47;
  }
  uint64_t result = memcmp(v46, v48, v49);
  BOOL v50 = v45 < v47;
  if (result) {
    BOOL v50 = (int)result < 0;
  }
  if (v50)
  {
LABEL_10:
    long long v53 = *(_OWORD *)a1;
    uint64_t v24 = *(void *)(a1 + 16);
    *(void *)&long long v56 = *(void *)(a1 + 24);
    *(void *)((char *)&v56 + 7) = *(void *)(a1 + 31);
    char v25 = *(unsigned char *)(a1 + 39);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *a2;
    uint64_t v26 = *((void *)a2 + 4);
    *(_OWORD *)(a1 + 16) = a2[1];
    *(void *)(a1 + 32) = v26;
    *a2 = v53;
    *((void *)a2 + 2) = v24;
    *((void *)a2 + 3) = v56;
    *(void *)((char *)a2 + 31) = *(void *)((char *)&v56 + 7);
    *((unsigned char *)a2 + 39) = v25;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, (long long *)a2, (long long *)a3, (long long *)a4);
  BOOL v11 = *(void *)a5 >= *(void *)a4;
  if (*(void *)a5 == *(void *)a4
    && (v12 = *(void *)(a5 + 8), v13 = *(void *)(a4 + 8), BOOL v11 = v12 >= v13, v12 == v13))
  {
    int v35 = *(char *)(a4 + 39);
    int v36 = *(char *)(a5 + 39);
    if (v36 >= 0) {
      size_t v37 = *(unsigned __int8 *)(a5 + 39);
    }
    else {
      size_t v37 = *(void *)(a5 + 24);
    }
    if (v36 >= 0) {
      int v38 = (const void *)(a5 + 16);
    }
    else {
      int v38 = *(const void **)(a5 + 16);
    }
    if (v35 >= 0) {
      size_t v39 = *(unsigned __int8 *)(a4 + 39);
    }
    else {
      size_t v39 = *(void *)(a4 + 24);
    }
    if (v35 >= 0) {
      size_t v40 = (const void *)(a4 + 16);
    }
    else {
      size_t v40 = *(const void **)(a4 + 16);
    }
    if (v39 >= v37) {
      size_t v41 = v37;
    }
    else {
      size_t v41 = v39;
    }
    uint64_t result = memcmp(v38, v40, v41);
    BOOL v42 = v37 < v39;
    if (result) {
      BOOL v42 = (int)result < 0;
    }
    if (!v42) {
      return result;
    }
  }
  else if (v11)
  {
    return result;
  }
  long long v67 = *(_OWORD *)a4;
  uint64_t v14 = *(void *)(a4 + 16);
  *(void *)&long long v71 = *(void *)(a4 + 24);
  *(void *)((char *)&v71 + 7) = *(void *)(a4 + 31);
  char v15 = *(unsigned char *)(a4 + 39);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 24) = 0;
  *(_OWORD *)a4 = *(_OWORD *)a5;
  uint64_t v16 = *(void *)(a5 + 32);
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a5 + 16);
  *(void *)(a4 + 32) = v16;
  *(_OWORD *)a5 = v67;
  *(void *)(a5 + 16) = v14;
  *(void *)(a5 + 24) = v71;
  *(void *)(a5 + 31) = *(void *)((char *)&v71 + 7);
  *(unsigned char *)(a5 + 39) = v15;
  BOOL v17 = *(void *)a4 >= *(void *)a3;
  if (*(void *)a4 == *(void *)a3
    && (v18 = *(void *)(a4 + 8), v19 = *(void *)(a3 + 8), BOOL v17 = v18 >= v19, v18 == v19))
  {
    int v43 = *(char *)(a3 + 39);
    int v44 = *(char *)(a4 + 39);
    if (v44 >= 0) {
      size_t v45 = *(unsigned __int8 *)(a4 + 39);
    }
    else {
      size_t v45 = *(void *)(a4 + 24);
    }
    if (v44 >= 0) {
      BOOL v46 = (const void *)(a4 + 16);
    }
    else {
      BOOL v46 = *(const void **)(a4 + 16);
    }
    if (v43 >= 0) {
      size_t v47 = *(unsigned __int8 *)(a3 + 39);
    }
    else {
      size_t v47 = *(void *)(a3 + 24);
    }
    if (v43 >= 0) {
      int v48 = (const void *)(a3 + 16);
    }
    else {
      int v48 = *(const void **)(a3 + 16);
    }
    if (v47 >= v45) {
      size_t v49 = v45;
    }
    else {
      size_t v49 = v47;
    }
    uint64_t result = memcmp(v46, v48, v49);
    BOOL v50 = v45 < v47;
    if (result) {
      BOOL v50 = (int)result < 0;
    }
    if (!v50) {
      return result;
    }
  }
  else if (v17)
  {
    return result;
  }
  long long v68 = *(_OWORD *)a3;
  uint64_t v20 = *(void *)(a3 + 16);
  *(void *)&long long v72 = *(void *)(a3 + 24);
  *(void *)((char *)&v72 + 7) = *(void *)(a3 + 31);
  char v21 = *(unsigned char *)(a3 + 39);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 24) = 0;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  uint64_t v22 = *(void *)(a4 + 32);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
  *(void *)(a3 + 32) = v22;
  *(_OWORD *)a4 = v68;
  *(void *)(a4 + 16) = v20;
  *(void *)(a4 + 24) = v72;
  *(void *)(a4 + 31) = *(void *)((char *)&v72 + 7);
  *(unsigned char *)(a4 + 39) = v21;
  BOOL v23 = *(void *)a3 >= *(void *)a2;
  if (*(void *)a3 == *(void *)a2
    && (v24 = *(void *)(a3 + 8), v25 = *(void *)(a2 + 8), BOOL v23 = v24 >= v25, v24 == v25))
  {
    int v51 = *(char *)(a2 + 39);
    int v52 = *(char *)(a3 + 39);
    if (v52 >= 0) {
      size_t v53 = *(unsigned __int8 *)(a3 + 39);
    }
    else {
      size_t v53 = *(void *)(a3 + 24);
    }
    if (v52 >= 0) {
      long long v54 = (const void *)(a3 + 16);
    }
    else {
      long long v54 = *(const void **)(a3 + 16);
    }
    if (v51 >= 0) {
      size_t v55 = *(unsigned __int8 *)(a2 + 39);
    }
    else {
      size_t v55 = *(void *)(a2 + 24);
    }
    if (v51 >= 0) {
      long long v56 = (const void *)(a2 + 16);
    }
    else {
      long long v56 = *(const void **)(a2 + 16);
    }
    if (v55 >= v53) {
      size_t v57 = v53;
    }
    else {
      size_t v57 = v55;
    }
    uint64_t result = memcmp(v54, v56, v57);
    BOOL v58 = v53 < v55;
    if (result) {
      BOOL v58 = (int)result < 0;
    }
    if (!v58) {
      return result;
    }
  }
  else if (v23)
  {
    return result;
  }
  long long v69 = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 16);
  *(void *)&long long v73 = *(void *)(a2 + 24);
  *(void *)((char *)&v73 + 7) = *(void *)(a2 + 31);
  char v27 = *(unsigned char *)(a2 + 39);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  uint64_t v28 = *(void *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = v28;
  *(_OWORD *)a3 = v69;
  *(void *)(a3 + 16) = v26;
  *(void *)(a3 + 24) = v73;
  *(void *)(a3 + 31) = *(void *)((char *)&v73 + 7);
  *(unsigned char *)(a3 + 39) = v27;
  BOOL v29 = *(void *)a2 >= *(void *)a1;
  if (*(void *)a2 != *(void *)a1
    || (v30 = *(void *)(a2 + 8), unint64_t v31 = *(void *)(a1 + 8), v29 = v30 >= v31, v30 != v31))
  {
    if (v29) {
      return result;
    }
    goto LABEL_13;
  }
  int v59 = *(char *)(a1 + 39);
  int v60 = *(char *)(a2 + 39);
  if (v60 >= 0) {
    size_t v61 = *(unsigned __int8 *)(a2 + 39);
  }
  else {
    size_t v61 = *(void *)(a2 + 24);
  }
  if (v60 >= 0) {
    uint64_t v62 = (const void *)(a2 + 16);
  }
  else {
    uint64_t v62 = *(const void **)(a2 + 16);
  }
  if (v59 >= 0) {
    size_t v63 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    size_t v63 = *(void *)(a1 + 24);
  }
  if (v59 >= 0) {
    BOOL v64 = (const void *)(a1 + 16);
  }
  else {
    BOOL v64 = *(const void **)(a1 + 16);
  }
  if (v63 >= v61) {
    size_t v65 = v61;
  }
  else {
    size_t v65 = v63;
  }
  uint64_t result = memcmp(v62, v64, v65);
  BOOL v66 = v61 < v63;
  if (result) {
    BOOL v66 = (int)result < 0;
  }
  if (v66)
  {
LABEL_13:
    long long v70 = *(_OWORD *)a1;
    uint64_t v32 = *(void *)(a1 + 16);
    *(void *)&long long v74 = *(void *)(a1 + 24);
    *(void *)((char *)&v74 + 7) = *(void *)(a1 + 31);
    char v33 = *(unsigned char *)(a1 + 39);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v34 = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = v34;
    *(_OWORD *)a2 = v70;
    *(void *)(a2 + 16) = v32;
    *(void *)(a2 + 24) = v74;
    *(void *)(a2 + 31) = *(void *)((char *)&v74 + 7);
    *(unsigned char *)(a2 + 39) = v33;
  }
  return result;
}

long long *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,llvm::SMFixIt *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 == a2) {
    return a3;
  }
  uint64_t v8 = (uint64_t)a2 - a1;
  uint64_t v9 = ((uint64_t)a2 - a1) / 40;
  if ((uint64_t)a2 - a1 >= 41)
  {
    unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
    unint64_t v11 = v10 + 1;
    unint64_t v12 = (__n128 *)(a1 + 40 * v10);
    do
    {
      std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a4, v9, v12);
      unint64_t v12 = (__n128 *)((char *)v12 - 40);
      --v11;
    }
    while (v11);
  }
  unint64_t v13 = a2;
  if (a2 == a3) {
    goto LABEL_34;
  }
  uint64_t v40 = v8;
  uint64_t v14 = a2;
  do
  {
    BOOL v18 = *(void *)v14 >= *(void *)a1;
    if (*(void *)v14 == *(void *)a1
      && (unint64_t v19 = *((void *)v14 + 1), v20 = *(void *)(a1 + 8), v18 = v19 >= v20, v19 == v20))
    {
      int v21 = *(char *)(a1 + 39);
      int v22 = *((char *)v14 + 39);
      if (v22 >= 0) {
        size_t v23 = *((unsigned __int8 *)v14 + 39);
      }
      else {
        size_t v23 = *((void *)v14 + 3);
      }
      if (v22 >= 0) {
        unint64_t v24 = v14 + 1;
      }
      else {
        unint64_t v24 = (const void *)*((void *)v14 + 2);
      }
      if (v21 >= 0) {
        size_t v25 = *(unsigned __int8 *)(a1 + 39);
      }
      else {
        size_t v25 = *(void *)(a1 + 24);
      }
      if (v21 >= 0) {
        uint64_t v26 = (const void *)(a1 + 16);
      }
      else {
        uint64_t v26 = *(const void **)(a1 + 16);
      }
      if (v25 >= v23) {
        size_t v27 = v23;
      }
      else {
        size_t v27 = v25;
      }
      int v28 = memcmp(v24, v26, v27);
      BOOL v29 = v23 < v25;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (v29)
      {
LABEL_7:
        long long v42 = *v14;
        uint64_t v15 = *((void *)v14 + 2);
        *(void *)&long long v44 = *((void *)v14 + 3);
        *(void *)((char *)&v44 + 7) = *(void *)((char *)v14 + 31);
        char v16 = *((unsigned char *)v14 + 39);
        *((void *)v14 + 3) = 0;
        *((void *)v14 + 4) = 0;
        *((void *)v14 + 2) = 0;
        long long *v14 = *(_OWORD *)a1;
        uint64_t v17 = *(void *)(a1 + 32);
        v14[1] = *(_OWORD *)(a1 + 16);
        *((void *)v14 + 4) = v17;
        *(_OWORD *)a1 = v42;
        *(void *)(a1 + 16) = v15;
        *(void *)(a1 + 24) = v44;
        *(void *)(a1 + 31) = *(void *)((char *)&v44 + 7);
        *(unsigned char *)(a1 + 39) = v16;
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a4, v9, (__n128 *)a1);
      }
    }
    else if (!v18)
    {
      goto LABEL_7;
    }
    uint64_t v14 = (long long *)((char *)v14 + 40);
  }
  while (v14 != a3);
  unint64_t v13 = a3;
  uint64_t v8 = v40;
LABEL_34:
  if (v8 < 41) {
    return v13;
  }
  size_t v41 = v13;
  int64_t v30 = v8 / 0x28uLL;
  uint64_t v31 = (uint64_t)a2 - 40;
  do
  {
    while (1)
    {
      __n128 v43 = *(__n128 *)a1;
      uint64_t v34 = *(void *)(a1 + 16);
      *(void *)size_t v45 = *(void *)(a1 + 24);
      *(void *)&v45[7] = *(void *)(a1 + 31);
      char v35 = *(unsigned char *)(a1 + 39);
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 16) = 0;
      uint64_t v36 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a4, v30);
      uint64_t v37 = v36;
      uint64_t v38 = v36 + 16;
      if (v31 == v36) {
        break;
      }
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v31;
      if (*(char *)(v36 + 39) < 0) {
        operator delete(*(void **)v38);
      }
      long long v32 = *(_OWORD *)(v31 + 16);
      *(void *)(v38 + 16) = *(void *)(v31 + 32);
      *(_OWORD *)uint64_t v38 = v32;
      *(__n128 *)uint64_t v31 = v43;
      *(void *)(v31 + 16) = v34;
      *(void *)(v31 + 24) = *(void *)v45;
      *(void *)(v31 + 31) = *(void *)&v45[7];
      *(unsigned char *)(v31 + 39) = v35;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, v37 + 40, a4, 0xCCCCCCCCCCCCCCCDLL * ((v37 + 40 - a1) >> 3));
      v31 -= 40;
      BOOL v33 = v30-- <= 2;
      if (v33) {
        return v41;
      }
    }
    *(__n128 *)uint64_t v36 = v43;
    if (*(char *)(v36 + 39) < 0) {
      operator delete(*(void **)v38);
    }
    *(void *)(v37 + 16) = v34;
    *(void *)(v37 + 24) = *(void *)v45;
    *(void *)(v37 + 31) = *(void *)&v45[7];
    *(unsigned char *)(v37 + 39) = v35;
    v31 -= 40;
    BOOL v33 = v30-- <= 2;
  }
  while (!v33);
  return v41;
}

__n128 std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v85 = v4;
  uint64_t v86 = v5;
  int64_t v9 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) < (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3))) {
    return result;
  }
  int64_t v11 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
  unint64_t v12 = (__n128 *)(a1 + 40 * v11);
  int64_t v13 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
  if (v13 >= a3) {
    goto LABEL_8;
  }
  unint64_t v14 = v12[2].n128_u64[1];
  BOOL v15 = v12->n128_u64[0] >= v14;
  if (v12->n128_u64[0] == v14 && (v16 = v12->n128_u64[1], unint64_t v17 = v12[3].n128_u64[0], v15 = v16 >= v17, v16 == v17))
  {
    uint64_t v66 = a1 + 40 * v11;
    int v67 = v12[4].n128_i8[15];
    int v68 = v12[2].n128_i8[7];
    long long v70 = *(const void **)(v66 + 16);
    size_t v71 = *(void *)(v66 + 24);
    long long v69 = (const void *)(v66 + 16);
    if (v68 >= 0) {
      size_t v72 = v12[2].n128_u8[7];
    }
    else {
      size_t v72 = v71;
    }
    if (v68 >= 0) {
      long long v73 = v69;
    }
    else {
      long long v73 = v70;
    }
    if (v67 >= 0) {
      size_t v74 = v12[4].n128_u8[15];
    }
    else {
      size_t v74 = v12[4].n128_u64[0];
    }
    if (v67 >= 0) {
      long long v75 = &v12[3].n128_i8[8];
    }
    else {
      long long v75 = (__int8 *)v12[3].n128_u64[1];
    }
    if (v74 >= v72) {
      size_t v76 = v72;
    }
    else {
      size_t v76 = v74;
    }
    int v77 = memcmp(v73, v75, v76);
    BOOL v78 = v72 < v74;
    if (v77) {
      BOOL v78 = v77 < 0;
    }
    if (!v78) {
      goto LABEL_8;
    }
  }
  else if (v15)
  {
    goto LABEL_8;
  }
  unint64_t v12 = (__n128 *)((char *)v12 + 40);
  int64_t v11 = v13;
LABEL_8:
  BOOL v18 = v12->n128_u64[0] >= a4->n128_u64[0];
  if (v12->n128_u64[0] == a4->n128_u64[0]
    && (unint64_t v19 = v12->n128_u64[1], v20 = a4->n128_u64[1], v18 = v19 >= v20, v19 == v20))
  {
    int v56 = a4[2].n128_i8[7];
    int v57 = v12[2].n128_i8[7];
    if (v57 >= 0) {
      size_t v58 = v12[2].n128_u8[7];
    }
    else {
      size_t v58 = v12[1].n128_u64[1];
    }
    if (v57 >= 0) {
      int v59 = v12 + 1;
    }
    else {
      int v59 = (__n128 *)v12[1].n128_u64[0];
    }
    if (v56 >= 0) {
      size_t v60 = a4[2].n128_u8[7];
    }
    else {
      size_t v60 = a4[1].n128_u64[1];
    }
    if (v56 >= 0) {
      size_t v61 = a4 + 1;
    }
    else {
      size_t v61 = (__n128 *)a4[1].n128_u64[0];
    }
    if (v60 >= v58) {
      size_t v62 = v58;
    }
    else {
      size_t v62 = v60;
    }
    int v63 = memcmp(v59, v61, v62);
    BOOL v65 = v58 < v60;
    if (v63) {
      BOOL v65 = v63 < 0;
    }
    if (v65) {
      return result;
    }
  }
  else if (!v18)
  {
    return result;
  }
  __n128 v82 = *a4;
  __n128 v83 = a4[1];
  int64_t v84 = a4[2].n128_i64[0];
  a4[1].n128_u64[0] = 0;
  a4[1].n128_u64[1] = 0;
  a4[2].n128_u64[0] = 0;
  unint64_t v22 = v82.n128_u64[1];
  unint64_t v21 = v82.n128_u64[0];
  *a4 = *v12;
  size_t v23 = v12 + 1;
  unint64_t v24 = v12[2].n128_u64[0];
  a4[1] = v12[1];
  a4[2].n128_u64[0] = v24;
  v12[2].n128_u8[7] = 0;
  v12[1].n128_u8[0] = 0;
  if (v9 < v11) {
    goto LABEL_87;
  }
  if (v84 >= 0) {
    unint64_t v25 = HIBYTE(v84);
  }
  else {
    unint64_t v25 = v83.n128_u64[1];
  }
  if (v84 >= 0) {
    uint64_t v26 = &v83;
  }
  else {
    uint64_t v26 = (__n128 *)v83.n128_u64[0];
  }
  uint64_t v80 = v26;
  size_t v81 = v25;
  int64_t v79 = v9;
  while (1)
  {
    BOOL v29 = v12;
    uint64_t v30 = 2 * v11;
    int64_t v11 = (2 * v11) | 1;
    unint64_t v12 = (__n128 *)(a1 + 40 * v11);
    int64_t v31 = v30 + 2;
    if (v30 + 2 >= a3) {
      goto LABEL_21;
    }
    unint64_t v32 = v12[2].n128_u64[1];
    BOOL v33 = v12->n128_u64[0] >= v32;
    if (v12->n128_u64[0] != v32 || (v34 = v12->n128_u64[1], v35 = v12[3].n128_u64[0], BOOL v33 = v34 >= v35, v34 != v35))
    {
      if (v33) {
        goto LABEL_21;
      }
LABEL_20:
      unint64_t v12 = (__n128 *)((char *)v12 + 40);
      int64_t v11 = v31;
      goto LABEL_21;
    }
    uint64_t v43 = a1 + 40 * v11;
    int v44 = v12[4].n128_i8[15];
    int v45 = v12[2].n128_i8[7];
    size_t v47 = *(const void **)(v43 + 16);
    size_t v48 = *(void *)(v43 + 24);
    BOOL v46 = (const void *)(v43 + 16);
    if (v45 >= 0) {
      size_t v49 = v12[2].n128_u8[7];
    }
    else {
      size_t v49 = v48;
    }
    if (v45 >= 0) {
      BOOL v50 = v46;
    }
    else {
      BOOL v50 = v47;
    }
    if (v44 >= 0) {
      size_t v51 = v12[4].n128_u8[15];
    }
    else {
      size_t v51 = v12[4].n128_u64[0];
    }
    if (v44 >= 0) {
      int v52 = &v12[3].n128_i8[8];
    }
    else {
      int v52 = (__int8 *)v12[3].n128_u64[1];
    }
    if (v51 >= v49) {
      size_t v53 = v49;
    }
    else {
      size_t v53 = v51;
    }
    int v54 = memcmp(v50, v52, v53);
    unint64_t v22 = v82.n128_u64[1];
    unint64_t v21 = v82.n128_u64[0];
    BOOL v15 = v49 >= v51;
    int64_t v9 = v79;
    BOOL v55 = !v15;
    if (v54) {
      BOOL v55 = v54 < 0;
    }
    if (v55) {
      goto LABEL_20;
    }
LABEL_21:
    BOOL v27 = v12->n128_u64[0] >= v21;
    if (v12->n128_u64[0] == v21)
    {
      unint64_t v36 = v12->n128_u64[1];
      BOOL v27 = v36 >= v22;
      if (v36 == v22) {
        break;
      }
    }
    if (!v27) {
      goto LABEL_86;
    }
LABEL_24:
    __n128 *v29 = *v12;
    size_t v23 = v12 + 1;
    __n128 v28 = v12[1];
    v29[2].n128_u64[0] = v12[2].n128_u64[0];
    v29[1] = v28;
    v12[2].n128_u8[7] = 0;
    v12[1].n128_u8[0] = 0;
    if (v9 < v11) {
      goto LABEL_87;
    }
  }
  int v37 = v12[2].n128_i8[7];
  if (v37 >= 0) {
    size_t v38 = v12[2].n128_u8[7];
  }
  else {
    size_t v38 = v12[1].n128_u64[1];
  }
  if (v37 >= 0) {
    size_t v39 = v12 + 1;
  }
  else {
    size_t v39 = (__n128 *)v12[1].n128_u64[0];
  }
  if (v81 >= v38) {
    size_t v40 = v38;
  }
  else {
    size_t v40 = v81;
  }
  int v41 = memcmp(v39, v80, v40);
  unint64_t v22 = v82.n128_u64[1];
  unint64_t v21 = v82.n128_u64[0];
  BOOL v42 = v38 < v81;
  if (v41) {
    BOOL v42 = v41 < 0;
  }
  if (!v42) {
    goto LABEL_24;
  }
LABEL_86:
  unint64_t v12 = v29;
LABEL_87:
  __n128 *v12 = v82;
  __n128 result = v83;
  v23[1].n128_u64[0] = v84;
  *size_t v23 = result;
  return result;
}

uint64_t std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v11 = v5 + 1;
    uint64_t v8 = a1 + 40 * (v5 + 1);
    uint64_t v12 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v13 = v12 + 2;
    if (v12 + 2 < a3)
    {
      unint64_t v14 = *(void *)(v8 + 40);
      BOOL v15 = *(void *)v8 >= v14;
      if (*(void *)v8 == v14 && (v16 = *(void *)(v8 + 8), unint64_t v17 = *(void *)(v8 + 48), v15 = v16 >= v17, v16 == v17))
      {
        uint64_t v18 = a1 + 40 * v11;
        int v19 = *(char *)(v8 + 79);
        int v20 = *(char *)(v8 + 39);
        unint64_t v22 = *(const void **)(v18 + 16);
        size_t v23 = *(void *)(v18 + 24);
        unint64_t v21 = (const void *)(v18 + 16);
        if (v20 >= 0) {
          size_t v24 = *(unsigned __int8 *)(v8 + 39);
        }
        else {
          size_t v24 = v23;
        }
        if (v20 >= 0) {
          unint64_t v25 = v21;
        }
        else {
          unint64_t v25 = v22;
        }
        if (v19 >= 0) {
          size_t v26 = *(unsigned __int8 *)(v8 + 79);
        }
        else {
          size_t v26 = *(void *)(v8 + 64);
        }
        if (v19 >= 0) {
          BOOL v27 = (const void *)(v8 + 56);
        }
        else {
          BOOL v27 = *(const void **)(v8 + 56);
        }
        if (v26 >= v24) {
          size_t v28 = v24;
        }
        else {
          size_t v28 = v26;
        }
        int v29 = memcmp(v25, v27, v28);
        BOOL v30 = v24 < v26;
        if (v29) {
          BOOL v30 = v29 < 0;
        }
        if (v30)
        {
LABEL_4:
          v8 += 40;
          uint64_t v5 = v13;
        }
      }
      else if (!v15)
      {
        goto LABEL_4;
      }
    }
    *(_OWORD *)a1 = *(_OWORD *)v8;
    int64_t v9 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*v9);
    }
    long long v10 = *(_OWORD *)(v8 + 16);
    *(void *)(a1 + 32) = *(void *)(v8 + 32);
    *(_OWORD *)int64_t v9 = v10;
    *(unsigned char *)(v8 + 39) = 0;
    *(unsigned char *)(v8 + 16) = 0;
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  uint64_t v6 = result;
  unint64_t v7 = v4 >> 1;
  uint64_t v8 = result + 40 * (v4 >> 1);
  long long v10 = (long long *)(a2 - 40);
  unint64_t v9 = *(void *)(a2 - 40);
  BOOL v11 = *(void *)v8 >= v9;
  if (*(void *)v8 == v9 && (v12 = *(void *)(v8 + 8), v13 = *(void *)(a2 - 32), BOOL v11 = v12 >= v13, v12 == v13))
  {
    uint64_t v42 = result + 40 * v7;
    int v43 = *(char *)(a2 - 1);
    int v44 = *(char *)(v8 + 39);
    BOOL v46 = *(const void **)(v42 + 16);
    size_t v47 = *(void *)(v42 + 24);
    int v45 = (const void *)(v42 + 16);
    if (v44 >= 0) {
      size_t v48 = *(unsigned __int8 *)(v8 + 39);
    }
    else {
      size_t v48 = v47;
    }
    if (v44 >= 0) {
      size_t v49 = v45;
    }
    else {
      size_t v49 = v46;
    }
    if (v43 >= 0) {
      size_t v50 = *(unsigned __int8 *)(a2 - 1);
    }
    else {
      size_t v50 = *(void *)(a2 - 16);
    }
    if (v43 >= 0) {
      size_t v51 = (const void *)(a2 - 24);
    }
    else {
      size_t v51 = *(const void **)(a2 - 24);
    }
    if (v50 >= v48) {
      size_t v52 = v48;
    }
    else {
      size_t v52 = v50;
    }
    __n128 result = memcmp(v49, v51, v52);
    BOOL v53 = v48 < v50;
    if (result) {
      BOOL v53 = (int)result < 0;
    }
    if (!v53) {
      return result;
    }
  }
  else if (v11)
  {
    return result;
  }
  long long v14 = *v10;
  unint64_t v58 = *(void *)(a2 - 8);
  unint64_t v15 = v58;
  long long v56 = v14;
  long long v57 = *(_OWORD *)(a2 - 24);
  *(void *)(a2 - 24) = 0;
  *(void *)(a2 - 16) = 0;
  *(void *)(a2 - 8) = 0;
  unint64_t v17 = *((void *)&v14 + 1);
  unint64_t v16 = v14;
  size_t v18 = HIBYTE(v15);
  if ((v18 & 0x80u) == 0) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = *((void *)&v57 + 1);
  }
  if ((v18 & 0x80u) == 0) {
    int v20 = &v57;
  }
  else {
    int v20 = (long long *)v57;
  }
  __s2 = v20;
  size_t v55 = v19;
  *long long v10 = *(_OWORD *)v8;
  uint64_t v21 = v6 + 40 * v7;
  uint64_t v22 = v21 + 16;
  uint64_t v23 = *(void *)(v21 + 32);
  *(_OWORD *)(a2 - 24) = *(_OWORD *)(v21 + 16);
  *(void *)(a2 - 8) = v23;
  *(unsigned char *)(v8 + 39) = 0;
  *(unsigned char *)(v21 + 16) = 0;
  if (v4 >= 2)
  {
    do
    {
      uint64_t v27 = v8;
      unint64_t v28 = v7 - 1;
      unint64_t v7 = (v7 - 1) >> 1;
      uint64_t v8 = v6 + 40 * v7;
      BOOL v29 = *(void *)v8 >= v16;
      if (*(void *)v8 == v16 && (v30 = *(void *)(v8 + 8), BOOL v29 = v30 >= v17, v30 == v17))
      {
        uint64_t v31 = v6 + 40 * v7;
        int v32 = *(char *)(v8 + 39);
        unint64_t v34 = *(const void **)(v31 + 16);
        size_t v35 = *(void *)(v31 + 24);
        BOOL v33 = (const void *)(v31 + 16);
        if (v32 >= 0) {
          size_t v36 = *(unsigned __int8 *)(v8 + 39);
        }
        else {
          size_t v36 = v35;
        }
        if (v32 >= 0) {
          int v37 = v33;
        }
        else {
          int v37 = v34;
        }
        if (v55 >= v36) {
          size_t v38 = v36;
        }
        else {
          size_t v38 = v55;
        }
        unint64_t v39 = v16;
        __n128 result = memcmp(v37, __s2, v38);
        unint64_t v16 = v39;
        BOOL v40 = v36 < v55;
        if (result) {
          BOOL v40 = (int)result < 0;
        }
        if (!v40)
        {
LABEL_29:
          uint64_t v8 = v27;
          break;
        }
      }
      else if (v29)
      {
        goto LABEL_29;
      }
      uint64_t v24 = v6 + 40 * v7;
      uint64_t v22 = v24 + 16;
      uint64_t v25 = *(void *)(v24 + 32);
      long long v26 = *(_OWORD *)(v24 + 16);
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v8;
      *(_OWORD *)(v27 + 16) = v26;
      *(void *)(v27 + 32) = v25;
      *(unsigned char *)(v8 + 39) = 0;
      *(unsigned char *)(v24 + 16) = 0;
    }
    while (v28 > 1);
  }
  *(_OWORD *)uint64_t v8 = v56;
  long long v41 = v57;
  *(void *)(v22 + 16) = v58;
  *(_OWORD *)uint64_t v22 = v41;
  return result;
}

void llvm::initStatisticOptions(llvm *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB215F28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB215F28))
  {
    *(void *)&long long v3 = "Enable statistics output from program (available with Asserts)";
    *((void *)&v3 + 1) = 62;
    uint64_t v2 = &_MergedGlobals_50;
    int v1 = 1;
    llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [6],llvm::cl::desc,llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden>((uint64_t)&qword_1EB215F30[7], (int8x16_t *)"stats", &v3, &v2, &v1);
    __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_1EB215F30[7], &dword_180159000);
    __cxa_guard_release(&qword_1EB215F28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1EB215F30, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(qword_1EB215F30))
    {
      *(void *)&long long v3 = "Display statistics as json data";
      *((void *)&v3 + 1) = 31;
      uint64_t v2 = &unk_1EB215F21;
      int v1 = 1;
      llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [6],llvm::cl::desc,llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden>((uint64_t)&qword_1EB215F30[31], (int8x16_t *)"stats-json", &v3, &v2, &v1);
      __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_1EB215F30[31], &dword_180159000);
      __cxa_guard_release(qword_1EB215F30);
    }
  }
}

void *llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt(void *a1)
{
  *a1 = &unk_1EC9A3F68;
  uint64_t v2 = a1 + 20;
  long long v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    *a1 = &unk_1EC9A42A8;
    unint64_t v4 = (void *)a1[12];
    if (v4 != (void *)a1[11]) {
LABEL_5:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    *a1 = &unk_1EC9A42A8;
    unint64_t v4 = (void *)a1[12];
    if (v4 != (void *)a1[11]) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = (void *)a1[8];
  if (v5 != a1 + 10) {
    free(v5);
  }
  return a1;
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, _DWORD *a5, size_t a6)
{
  char v11 = 0;
  uint64_t v8 = llvm::cl::parser<BOOL>::parse((int)a1 + 152, (void *)a1, a3, a4, a5, a6, &v11);
  if (v8) {
    return v8;
  }
  **(unsigned char **)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, char *))(*(void *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

void llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt(char *__p)
{
  *(void *)std::string __p = &unk_1EC9A3F68;
  uint64_t v2 = __p + 160;
  long long v3 = (char *)*((void *)__p + 23);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    *(void *)std::string __p = &unk_1EC9A42A8;
    unint64_t v4 = (void *)*((void *)__p + 12);
    if (v4 != *((void **)__p + 11)) {
LABEL_5:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    *(void *)std::string __p = &unk_1EC9A42A8;
    unint64_t v4 = (void *)*((void *)__p + 12);
    if (v4 != *((void **)__p + 11)) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = (char *)*((void *)__p + 8);
  if (v5 != __p + 80) {
    free(v5);
  }

  operator delete(__p);
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::printOptionValue(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) != 0 || !*(unsigned char *)(a1 + 145) || *(unsigned __int8 *)(a1 + 144) != **(unsigned __int8 **)(a1 + 128))
  {
    unsigned int v3 = **(unsigned __int8 **)(a1 + 128);
    __int16 v5 = *(_WORD *)(a1 + 144);
    unint64_t v4 = &unk_1EC9A3AE0;
    llvm::cl::parser<BOOL>::printOptionDiff((llvm *)(a1 + 152), a1, v3, (uint64_t)&v4, a2);
  }
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::setDefault(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 145);
  if (v1) {
    char v1 = *(unsigned char *)(result + 144);
  }
  **(unsigned char **)(result + 128) = v1;
  return result;
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [6],llvm::cl::desc,llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden>(uint64_t a1, int8x16_t *a2, _OWORD *a3, unsigned char **a4, _WORD *a5)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  long long v10 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(unsigned char *)(a1 + 145) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = &unk_1EC9A3AE0;
  *(void *)a1 = &unk_1EC9A3F68;
  *(void *)(a1 + 152) = &unk_1EC9A4440;
  *(void *)(a1 + 160) = &unk_1EC9CE6C8;
  *(void *)(a1 + 184) = a1 + 160;
  long long v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  *(_OWORD *)(a1 + 32) = *a3;
  if (*(void *)(a1 + 128))
  {
    size_t v19 = "cl::location(x) specified more than once!";
    __int16 v20 = 259;
    unint64_t v16 = (llvm::raw_ostream *)llvm::errs(v15);
    llvm::cl::Option::error((void *)a1, (llvm::Twine *)&v19, 0, 0, v16);
  }
  else
  {
    unint64_t v17 = *a4;
    *(void *)(a1 + 128) = *a4;
    *(unsigned char *)(a1 + 145) = 1;
    *(unsigned char *)(a1 + 144) = *v17;
  }
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void *std::__function::__func<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EC9CE6C8;
  return result;
}

void std::__function::__func<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CE6C8;
}

uint64_t std::__function::__func<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000181128866) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000181128866 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000181128866)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000181128866 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target_type()
{
}

unint64_t llvm::SplitString(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v23 = a1;
  unint64_t v24 = a2;
  unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v23, a4, a5, 0);
  unint64_t result = llvm::StringRef::find_first_of(&v23, a4, a5, first_not_of);
  if (v24 >= first_not_of) {
    unint64_t v10 = first_not_of;
  }
  else {
    unint64_t v10 = v24;
  }
  if (v10 <= result) {
    unint64_t v11 = result;
  }
  else {
    unint64_t v11 = first_not_of;
  }
  if (v11 >= v24) {
    unint64_t v11 = v24;
  }
  unint64_t v12 = v11 - v10;
  if (v11 != v10)
  {
    uint64_t v13 = v23 + v10;
    if (v24 >= result) {
      unint64_t v14 = result;
    }
    else {
      unint64_t v14 = v24;
    }
    uint64_t v15 = v23 + v14;
    unint64_t v16 = v24 - v14;
    do
    {
      unint64_t v17 = *(unsigned int *)(a3 + 8);
      if (v17 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v17 + 1, 16);
        unint64_t v17 = *(unsigned int *)(a3 + 8);
      }
      size_t v18 = (void *)(*(void *)a3 + 16 * v17);
      void *v18 = v13;
      v18[1] = v12;
      ++*(_DWORD *)(a3 + 8);
      uint64_t v23 = v15;
      unint64_t v24 = v16;
      unint64_t v19 = llvm::StringRef::find_first_not_of(&v23, a4, a5, 0);
      unint64_t result = llvm::StringRef::find_first_of(&v23, a4, a5, v19);
      if (v24 >= v19) {
        unint64_t v20 = v19;
      }
      else {
        unint64_t v20 = v24;
      }
      if (v20 <= result) {
        unint64_t v21 = result;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21 >= v24) {
        unint64_t v21 = v24;
      }
      uint64_t v13 = v23 + v20;
      if (v24 >= result) {
        unint64_t v22 = result;
      }
      else {
        unint64_t v22 = v24;
      }
      uint64_t v15 = v23 + v22;
      unint64_t v16 = v24 - v22;
      unint64_t v12 = v21 - v20;
    }
    while (v21 != v20);
  }
  return result;
}

llvm::raw_ostream *llvm::printEscapedString(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    __int16 v5 = (char *)result;
    do
    {
      unint64_t v7 = *v5;
      if (v7 == 92)
      {
        uint64_t v8 = (unsigned char *)*((void *)a3 + 4);
        if ((unint64_t)v8 >= *((void *)a3 + 3))
        {
          unint64_t result = llvm::raw_ostream::write(a3, 92);
          uint64_t v9 = (unsigned char *)*((void *)result + 4);
          if ((unint64_t)v9 < *((void *)result + 3))
          {
LABEL_19:
            *((void *)result + 4) = v9 + 1;
            *uint64_t v9 = 92;
            goto LABEL_5;
          }
        }
        else
        {
          *((void *)a3 + 4) = v8 + 1;
          *uint64_t v8 = 92;
          unint64_t result = a3;
          uint64_t v9 = (unsigned char *)*((void *)a3 + 4);
          if ((unint64_t)v9 < *((void *)a3 + 3)) {
            goto LABEL_19;
          }
        }
        char v6 = 92;
        goto LABEL_4;
      }
      unint64_t v11 = *((void *)a3 + 3);
      unint64_t v10 = (unsigned char *)*((void *)a3 + 4);
      if (v7 == 34 || (v7 - 32) > 0x5Eu)
      {
        if ((unint64_t)v10 >= v11)
        {
          unint64_t result = llvm::raw_ostream::write(a3, 92);
          char v12 = llvm::hexdigit(unsigned int,BOOL)::LUT[v7 >> 4];
          uint64_t v13 = (char *)*((void *)result + 4);
          if ((unint64_t)v13 < *((void *)result + 3))
          {
LABEL_21:
            *((void *)result + 4) = v13 + 1;
            char *v13 = v12;
            char v6 = llvm::hexdigit(unsigned int,BOOL)::LUT[v7 & 0xF];
            unint64_t v14 = (char *)*((void *)result + 4);
            if ((unint64_t)v14 < *((void *)result + 3))
            {
LABEL_22:
              *((void *)result + 4) = v14 + 1;
              char *v14 = v6;
              goto LABEL_5;
            }
            goto LABEL_4;
          }
        }
        else
        {
          *((void *)a3 + 4) = v10 + 1;
          *unint64_t v10 = 92;
          unint64_t result = a3;
          char v12 = llvm::hexdigit(unsigned int,BOOL)::LUT[v7 >> 4];
          uint64_t v13 = (char *)*((void *)a3 + 4);
          if ((unint64_t)v13 < *((void *)a3 + 3)) {
            goto LABEL_21;
          }
        }
        unint64_t result = llvm::raw_ostream::write(result, v12);
        char v6 = llvm::hexdigit(unsigned int,BOOL)::LUT[v7 & 0xF];
        unint64_t v14 = (char *)*((void *)result + 4);
        if ((unint64_t)v14 < *((void *)result + 3)) {
          goto LABEL_22;
        }
      }
      else
      {
        if ((unint64_t)v10 < v11)
        {
          *((void *)a3 + 4) = v10 + 1;
          *unint64_t v10 = v7;
          goto LABEL_5;
        }
        unint64_t result = a3;
        char v6 = *v5;
      }
LABEL_4:
      unint64_t result = llvm::raw_ostream::write(result, v6);
LABEL_5:
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t llvm::StringMapImpl::StringMapImpl(uint64_t this, int a2, int a3)
{
  uint64_t v3 = this;
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = a3;
  if (a2)
  {
    unint64_t v4 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    unint64_t v6 = v5 | (v5 >> 8) | ((v5 | (v5 >> 8)) >> 16);
    *(_DWORD *)(this + 16) = 0;
    unint64_t v7 = calloc(v6 + 2, 0xCuLL);
    if (!v7) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v7[(v6 + 1)] = 2;
    *(void *)uint64_t v3 = v7;
    *(_DWORD *)(v3 + 8) = v6 + 1;
    return v3;
  }
  else
  {
    *(void *)this = 0;
    *(void *)(this + 8) = 0;
    *(_DWORD *)(this + 16) = 0;
  }
  return this;
}

void *llvm::StringMapImpl::init(llvm::StringMapImpl *this, unsigned int a2)
{
  if (a2) {
    unsigned int v3 = a2;
  }
  else {
    unsigned int v3 = 16;
  }
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  unint64_t result = calloc(v3 + 1, 0xCuLL);
  if (!result && (v3 != -1 || (unint64_t result = malloc(1uLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  result[v3] = 2;
  *(void *)this = result;
  *((_DWORD *)this + 2) = v3;
  return result;
}

void *createTable(int a1)
{
  int v2 = a1 + 1;
  unint64_t result = calloc((a1 + 1), 0xCuLL);
  if (!result && (v2 || (unint64_t result = malloc(1uLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  result[a1] = 2;
  return result;
}

uint64_t llvm::StringMapImpl::LookupBucketFor(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  if (!*((_DWORD *)a1 + 2))
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    unint64_t v6 = calloc(0x11uLL, 0xCuLL);
    if (!v6) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v6[16] = 2;
    *a1 = (uint64_t)v6;
    *((_DWORD *)a1 + 2) = 16;
  }
  uint64_t v7 = llvm::xxh3_64bits(a2, (unint64_t)a3, a3);
  uint64_t v8 = *((unsigned int *)a1 + 2);
  int v9 = v8 - 1;
  uint64_t result = (v8 - 1) & v7;
  uint64_t v11 = *a1;
  uint64_t v12 = *a1 + 8 * v8 + 8;
  uint64_t v13 = 0xFFFFFFFFLL;
  if (a3)
  {
    int v14 = 1;
    uint64_t v15 = *(const unsigned __int8 ***)(v11 + 8 * result);
    for (uint64_t i = result; v15; uint64_t i = result)
    {
      if (v15 == (const unsigned __int8 **)-8)
      {
        if (v13 == -1) {
          uint64_t v13 = result;
        }
        else {
          uint64_t v13 = v13;
        }
      }
      else if (*(_DWORD *)(v12 + 4 * i) == v7 && a3 == *v15)
      {
        unsigned int v28 = result;
        uint64_t v26 = v12;
        uint64_t v27 = v7;
        uint64_t v22 = v11;
        uint64_t v23 = v13;
        int v24 = v14;
        int v25 = v9;
        int v20 = memcmp(a2, (char *)v15 + *((unsigned int *)a1 + 5), (size_t)a3);
        int v14 = v24;
        int v9 = v25;
        uint64_t v11 = v22;
        uint64_t v13 = v23;
        uint64_t v12 = v26;
        uint64_t v7 = v27;
        int v21 = v20;
        uint64_t result = v28;
        if (!v21) {
          return result;
        }
      }
      LODWORD(result) = v9 & (result + v14++);
      uint64_t v15 = *(const unsigned __int8 ***)(v11 + 8 * result);
    }
  }
  else
  {
    int v18 = 1;
    unint64_t v19 = *(void **)(v11 + 8 * result);
    for (uint64_t i = result; v19; uint64_t i = result)
    {
      if (v19 == (void *)-8)
      {
        if (v13 == -1) {
          LODWORD(v13) = result;
        }
      }
      else if (*(_DWORD *)(v12 + 4 * i) == v7 && !*v19)
      {
        return result;
      }
      uint64_t result = v9 & (result + v18++);
      unint64_t v19 = *(void **)(v11 + 8 * result);
    }
  }
  uint64_t v17 = (int)v13;
  if (v13 == -1)
  {
    uint64_t v17 = i;
    uint64_t result = result;
  }
  else
  {
    uint64_t result = v13;
  }
  *(_DWORD *)(v12 + 4 * v17) = v7;
  return result;
}