uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::mps::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseIntElementsAttr &,mlir::mps::TensorDataLayoutAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyleAttr &,mlir::IntegerAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::mps::TensorDataLayoutAttr &)::$_9>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t);
  uint64_t vars8;

  v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  v6 = *(void *)(a2 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseIntElementsAttr &,mlir::mps::TensorDataLayoutAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyleAttr &,mlir::IntegerAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::mps::TensorDataLayoutAttr &)::$_0>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::mps::Conv2DOp type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseIntElementsAttr &,mlir::mps::TensorDataLayoutAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyleAttr &,mlir::IntegerAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::mps::TensorDataLayoutAttr &)::$_1>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp1");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseIntElementsAttr &,mlir::mps::TensorDataLayoutAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyleAttr &,mlir::IntegerAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::mps::TensorDataLayoutAttr &)::$_2>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp2 is not ::mlir::mps::PermuteOp type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseIntElementsAttr &,mlir::mps::TensorDataLayoutAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyleAttr &,mlir::IntegerAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::mps::TensorDataLayoutAttr &)::$_3>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'mps.conv_2d' to have attribute 'groups' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseIntElementsAttr &,mlir::mps::TensorDataLayoutAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyleAttr &,mlir::IntegerAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::mps::TensorDataLayoutAttr &)::$_4>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'mps.conv_2d' to have attribute 'strides' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseIntElementsAttr &,mlir::mps::TensorDataLayoutAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyleAttr &,mlir::IntegerAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::mps::TensorDataLayoutAttr &)::$_5>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'mps.conv_2d' to have attribute 'dilation_rates' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseIntElementsAttr &,mlir::mps::TensorDataLayoutAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyleAttr &,mlir::IntegerAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::mps::TensorDataLayoutAttr &)::$_6>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'mps.conv_2d' to have attribute 'explicit_padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseIntElementsAttr &,mlir::mps::TensorDataLayoutAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyleAttr &,mlir::IntegerAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::mps::TensorDataLayoutAttr &)::$_7>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'mps.conv_2d' to have attribute 'padding_style' of type '::mlir::mps::PaddingStyleAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseIntElementsAttr &,mlir::mps::TensorDataLayoutAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyleAttr &,mlir::IntegerAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::mps::TensorDataLayoutAttr &)::$_8>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'mps.conv_2d' to have attribute 'data_layout' of type '::mlir::mps::TensorDataLayoutAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseIntElementsAttr &,mlir::mps::TensorDataLayoutAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyleAttr &,mlir::IntegerAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::mps::TensorDataLayoutAttr &)::$_9>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'mps.conv_2d' to have attribute 'weights_layout' of type '::mlir::mps::TensorDataLayoutAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_NCHW_ConvBias_NHWC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'data_layout' failed to satisfy constraint: 'is NCHW'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_NCHW_ConvBias_NHWC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'to_nchw' failed to satisfy constraint: 'NHWC to NCHW'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_NCHW_ConvBias_NHWC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'to_nhwc' failed to satisfy constraint: 'NCHW to NHWC'");
}

void mlir::mps::anonymous namespace'::MPS_NCHW_Conv_NHWC::~MPS_NCHW_Conv_NHWC(mlir::mps::_anonymous_namespace_::MPS_NCHW_Conv_NHWC *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::mps::anonymous namespace'::MPS_NCHW_Conv_NHWC::matchAndRewrite(mlir::mps::_anonymous_namespace_::MPS_NCHW_Conv_NHWC *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v37[4] = *MEMORY[0x1E4F143B8];
  int v5 = *((_DWORD *)a2 + 11);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  if ((v5 & 0x800000) != 0)
  {
    uint64_t v6 = *((void *)a2 + 9);
    uint64_t v7 = *((unsigned int *)a2 + 17);
    v30[0] = v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    v30[0] = 0;
  }
  v30[1] = v7;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  v27[0] = v6;
  v27[1] = v7;
  v25[1] = v7;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  v25[0] = v6;
  v35 = v37;
  v37[0] = a2;
  uint64_t v36 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::PermuteOp,void>::id) {
    v8 = a2;
  }
  else {
    v8 = 0;
  }
  v23 = v8;
  v34[0] = *(void **)(mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)&v23, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v34);
  if (DefiningOp)
  {
    uint64_t v10 = DefiningOp;
    {
      int v11 = v36;
      if (v36 >= HIDWORD(v36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v36 + 1, 8);
        int v11 = v36;
      }
      v35[v11] = v10;
      LODWORD(v36) = v36 + 1;
      uint64_t ODSOperands = mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)&v23, 1u);
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v32))
      {
        uint64_t v13 = *((void *)a3 + 2);
        if (v13 && mlir::RewriterBase::Listener::classof(v13))
        {
          uint64_t v14 = *((void *)a2 + 3);
LABEL_26:
          uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v13 + 64))(v13, v14, v15, v34);
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v19 = *(void *)(v25[0] + 24);
        *(_OWORD *)v34 = xmmword_18110B740;
        {
          uint64_t v20 = *(void *)(ODSOperands + 24);
          *(_OWORD *)v34 = xmmword_18110B750;
          {
            v21 = *(void **)(v35[1] + 24);
            v34[0] = *(void **)(*v35 + 24);
            v34[1] = v21;
            v34[2] = *(void **)(v35[2] + 24);
            mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v34, (mlir::MLIRContext *)3, 0);
          }
          uint64_t v13 = *((void *)a3 + 2);
          if (v13 && mlir::RewriterBase::Listener::classof(v13))
          {
            uint64_t v14 = *((void *)a2 + 3);
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v13 = *((void *)a3 + 2);
          if (v13 && mlir::RewriterBase::Listener::classof(v13))
          {
            uint64_t v14 = *((void *)a2 + 3);
            goto LABEL_26;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v16 = *((void *)a3 + 2);
    if (!v16) {
      goto LABEL_29;
    }
    v17 = v23;
    if (mlir::RewriterBase::Listener::classof(v16))
    {
LABEL_27:
      uint64_t v16 = v18;
      goto LABEL_29;
    }
  }
  uint64_t v16 = 0;
LABEL_29:
  if (v35 != v37) {
    free(v35);
  }
  return v16;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::Conv2DOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.conv_2d", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"mps.conv_2d";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v11);
  mlir::ValueRange::ValueRange(v22, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::ValueRange::ValueRange(v21, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v23, v22[0], v22[1], v21[0], v21[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v14;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_NCHW_Conv_NHWC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_NCHW_Conv_NHWC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'data_layout' failed to satisfy constraint: 'is NCHW'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_NCHW_Conv_NHWC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'to_nchw' failed to satisfy constraint: 'NHWC to NCHW'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_NCHW_Conv_NHWC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'to_nhwc' failed to satisfy constraint: 'NCHW to NHWC'");
}

void mlir::mps::anonymous namespace'::MPS_ReorderDequantPad::~MPS_ReorderDequantPad(mlir::mps::_anonymous_namespace_::MPS_ReorderDequantPad *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::mps::anonymous namespace'::MPS_ReorderDequantPad::matchAndRewrite(mlir::mps::_anonymous_namespace_::MPS_ReorderDequantPad *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v33[4] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0;
  uint64_t v31 = v33;
  v33[0] = a2;
  uint64_t v32 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::PadOp,void>::id) {
    int v5 = a2;
  }
  else {
    int v5 = 0;
  }
  v27 = v5;
  v29[0] = *(void **)(mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)&v27, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v29);
  if (DefiningOp)
  {
    uint64_t v7 = DefiningOp;
    v8 = *(void **)(*(void *)(DefiningOp + 48) + 16);
    BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
    if (v8 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id) {
      uint64_t v10 = (void *)DefiningOp;
    }
    else {
      uint64_t v10 = 0;
    }
    v29[0] = v10;
    if (v9)
    {
      mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)v29, 0);
      mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)v29, 1u);
      mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)v29, 2u);
      mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)v29, 3u);
      if (!*(unsigned char *)(v7 + 47) || (uint64_t InherentAttr = mlir::Operation::getInherentAttr(v7, (uint64_t)"dtype", 5), !v17)) {
        uint64_t InherentAttr = mlir::DictionaryAttr::get(v7 + 56, "dtype", 5uLL);
      }
      if (InherentAttr
        && *(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
      {
        if (!*(unsigned char *)(v7 + 47) || (mlir::Operation::getInherentAttr(v7, (uint64_t)"axis", 4), !v18)) {
          mlir::DictionaryAttr::get(v7 + 56, "axis", 4uLL);
        }
        int v19 = v32;
        if (v32 >= HIDWORD(v32))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 8);
          int v19 = v32;
        }
        v31[v19] = v7;
        LODWORD(v32) = v32 + 1;
        mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)&v27, 1u);
        mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)&v27, 2u);
        if (!*((unsigned char *)a2 + 47)
          || (uint64_t v20 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"paddingMode", 11), !v21))
        {
          uint64_t v20 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "paddingMode", 0xBuLL);
        }
        if (v20
          && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id)
        {
          uint64_t v28 = v20;
          if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v28) == 3)
          {
            v25 = *(void **)(v31[1] + 24);
            v29[0] = *(void **)(*v31 + 24);
            v29[1] = v25;
            mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v29, (mlir::MLIRContext *)2, 0);
          }
          uint64_t v22 = *((void *)a3 + 2);
          if (!v22 || !mlir::RewriterBase::Listener::classof(v22)) {
            goto LABEL_44;
          }
          uint64_t v23 = *((void *)a2 + 3);
        }
        else
        {
          uint64_t v22 = *((void *)a3 + 2);
          if (!v22 || !mlir::RewriterBase::Listener::classof(v22)) {
            goto LABEL_44;
          }
          uint64_t v23 = *((void *)a2 + 3);
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v22 + 64))(v22, v23, v24, v29);
        goto LABEL_24;
      }
      uint64_t v11 = *((void *)a3 + 2);
      if (!v11) {
        goto LABEL_45;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v12 = *(void *)(v7 + 24);
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v11 = *((void *)a3 + 2);
      if (!v11) {
        goto LABEL_45;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v12 = *(void *)(v7 + 24);
LABEL_23:
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v11 + 64))(v11, v12, v13, &v30);
        goto LABEL_24;
      }
    }
  }
  else
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_45;
    }
    uint64_t v14 = v27;
    if (mlir::RewriterBase::Listener::classof(v11))
    {
LABEL_24:
      uint64_t v11 = v15;
      goto LABEL_45;
    }
  }
LABEL_44:
  uint64_t v11 = 0;
LABEL_45:
  if (v31 != v33) {
    free(v31);
  }
  return v11;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::PadOp,mlir::Value &,mlir::Value &,mlir::Value &,mlir::mps::PaddingModeAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.pad", (const unsigned __int8 *)7, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    unint64_t v21[2] = (uint64_t)"mps.pad";
    v21[3] = 7;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::mps::PadOp::build(a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  uint64_t v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::PadOp,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::DequantizeOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.dequantize", (const unsigned __int8 *)0xE, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"mps.dequantize";
    v19[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v11);
  mlir::ValueRange::ValueRange(v22, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::ValueRange::ValueRange(v21, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v23, v22[0], v22[1], v21[0], v21[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v14;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_ReorderDequantPad::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_ReorderDequantPad::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::mps::DequantizeOp type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_ReorderDequantPad::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'mps.dequantize' to have attribute 'dtype' of type '::mlir::TypeAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_ReorderDequantPad::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'mps.pad' to have attribute 'paddingMode' of type '::mlir::mps::PaddingModeAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_ReorderDequantPad::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'paddingMode' failed to satisfy constraint: 'is clamp to edge padding mode'");
}

void mlir::mps::anonymous namespace'::MPS_ReshapeReshape::~MPS_ReshapeReshape(mlir::mps::_anonymous_namespace_::MPS_ReshapeReshape *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::mps::anonymous namespace'::MPS_ReshapeReshape::matchAndRewrite(mlir::mps::_anonymous_namespace_::MPS_ReshapeReshape *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  __int16 v22 = v24;
  v24[0] = a2;
  uint64_t v23 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id) {
    int v5 = a2;
  }
  else {
    int v5 = 0;
  }
  int v19 = v5;
  v20[0] = *(void **)(mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)&v19, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v20);
  if (!DefiningOp)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_26;
    }
    uint64_t v13 = v19;
    if (mlir::RewriterBase::Listener::classof(v11))
    {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  uint64_t v7 = DefiningOp;
  v8 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id;
  if (v8 == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id) {
    uint64_t v10 = (void *)DefiningOp;
  }
  else {
    uint64_t v10 = 0;
  }
  v20[0] = v10;
  if (v9)
  {
    mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)v20, 0);
    mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)v20, 1u);
    if (!*(unsigned char *)(v7 + 47) || (mlir::Operation::getInherentAttr(v7, (uint64_t)"zero_is_copy", 12), !v14)) {
      mlir::DictionaryAttr::get(v7 + 56, "zero_is_copy", 0xCuLL);
    }
    int v15 = v23;
    if (v23 >= HIDWORD(v23))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v24, v23 + 1, 8);
      int v15 = v23;
    }
    v22[v15] = v7;
    LODWORD(v23) = v23 + 1;
    mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)&v19, 1u);
    if (!*((unsigned char *)a2 + 47) || (mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"zero_is_copy", 12), !v16)) {
      mlir::DictionaryAttr::get((uint64_t)a2 + 56, "zero_is_copy", 0xCuLL);
    }
    char v17 = *(void **)(v22[1] + 24);
    v20[0] = *(void **)(*v22 + 24);
    v20[1] = v17;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v20, (mlir::MLIRContext *)2, 0);
  }
  uint64_t v11 = *((void *)a3 + 2);
  if (v11)
  {
    if (mlir::RewriterBase::Listener::classof(v11))
    {
LABEL_15:
      uint64_t v11 = v12;
      goto LABEL_26;
    }
LABEL_16:
    uint64_t v11 = 0;
  }
LABEL_26:
  if (v22 != v24) {
    free(v22);
  }
  return v11;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReshapeOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reshape", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"mps.reshape";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v11);
  mlir::ValueRange::ValueRange(v22, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::ValueRange::ValueRange(v21, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v23, v22[0], v22[1], v21[0], v21[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v14;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_ReshapeReshape::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_ReshapeReshape::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::mps::ReshapeOp type");
}

void mlir::mps::anonymous namespace'::MPS_SelectCondCast::~MPS_SelectCondCast(mlir::mps::_anonymous_namespace_::MPS_SelectCondCast *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::mps::anonymous namespace'::MPS_SelectCondCast::matchAndRewrite(mlir::mps::_anonymous_namespace_::MPS_SelectCondCast *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = v30;
  v30[0] = a2;
  uint64_t v29 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::SelectOp,void>::id) {
    int v5 = a2;
  }
  else {
    int v5 = 0;
  }
  uint64_t v24 = v5;
  unint64_t v6 = *(void *)(*(void *)(mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)&v24, 0) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v25[0] = "operand 0 of op 'mps.select' failed to satisfy constraint: 'tensor of 1-bit signless integer values'";
  v25[1] = (void *)100;
  uint64_t v7 = *(void *)v6;
  v8 = *(void **)(*(void *)v6 + 136);
  if (v8 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v8 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_34;
  }
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v7 + 16);
  if (!v11) {
    goto LABEL_17;
  }
  char v12 = *(void **)(v7 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    int v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      char v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_17:
  }
    uint64_t v18 = 0;
  v27[0] = v6;
  v27[1] = v18;
  OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v27);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1))
  {
LABEL_34:
    v27[0] = v25;
    uint64_t v19 = *((void *)a3 + 2);
    if (!v19 {
      || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
    }
    {
      goto LABEL_26;
    }
  }
  mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)&v24, 0);
  uint64_t ODSOperands = mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)&v24, 1u);
  mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)&v24, 2u);
  v25[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  if (!mlir::Type::isInteger((mlir::Type *)v25, 1))
  {
    v25[0] = *(void **)(*v28 + 24);
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v25, (mlir::MLIRContext *)1, 0);
  }
  uint64_t v21 = *((void *)a3 + 2);
  if (v21 && mlir::RewriterBase::Listener::classof(v21)) {
  else
  }
LABEL_26:
    uint64_t v22 = 0;
  if (v28 != v30) {
    free(v28);
  }
  return v22;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::__mlir_ods_local_type_constraint_RuntimeCanonicalizationPatterns0(mlir::PatternRewriter &,mlir::Operation *,mlir::Type,llvm::StringRef)::$_0>(const void ****a1, uint64_t a2)
{
  v2 = *a1;
  __int16 v8 = 261;
  v4 = *v2;
  v3 = v2[1];
  v7[0] = v4;
  v7[1] = v3;
  uint64_t v5 = mlir::Diagnostic::operator<<(a2, v7);
  return mlir::Diagnostic::operator<<(v5, ": tensor of 1-bit signless integer values");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_SelectCondCast::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'true_value' failed to satisfy constraint: 'is not BOOLean type'");
}

void mlir::mps::anonymous namespace'::MPS_SquareOfAbsolute::~MPS_SquareOfAbsolute(mlir::mps::_anonymous_namespace_::MPS_SquareOfAbsolute *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::mps::anonymous namespace'::MPS_SquareOfAbsolute::matchAndRewrite(mlir::mps::_anonymous_namespace_::MPS_SquareOfAbsolute *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  v21[0] = a2;
  uint64_t v20 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::SquareOp,void>::id) {
    v4 = a2;
  }
  else {
    v4 = 0;
  }
  uint64_t v16 = v4;
  v17[0] = *(void **)(mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)&v16, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v17);
  if (!DefiningOp)
  {
    uint64_t v10 = *((void *)a3 + 2);
    if (!v10) {
      goto LABEL_20;
    }
    char v12 = v16;
    if (mlir::RewriterBase::Listener::classof(v10))
    {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  uint64_t v6 = DefiningOp;
  uint64_t v7 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v8 = v7 == &mlir::detail::TypeIDResolver<mlir::mps::AbsoluteOp,void>::id;
  if (v7 == &mlir::detail::TypeIDResolver<mlir::mps::AbsoluteOp,void>::id) {
    BOOL v9 = (void *)DefiningOp;
  }
  else {
    BOOL v9 = 0;
  }
  v17[0] = v9;
  if (v8)
  {
    mlir::mps::AbsoluteOp::getODSOperands((mlir::mps::AbsoluteOp *)v17, 0);
    int v13 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 8);
      int v13 = v20;
    }
    v19[v13] = v6;
    LODWORD(v20) = v20 + 1;
    unint64_t v14 = *(void **)(v19[1] + 24);
    v17[0] = *(void **)(*v19 + 24);
    v17[1] = v14;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v17, (mlir::MLIRContext *)2, 0);
  }
  uint64_t v10 = *((void *)a3 + 2);
  if (v10)
  {
    if (mlir::RewriterBase::Listener::classof(v10))
    {
LABEL_15:
      uint64_t v10 = v11;
      goto LABEL_20;
    }
LABEL_16:
    uint64_t v10 = 0;
  }
LABEL_20:
  if (v19 != v21) {
    free(v19);
  }
  return v10;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::SquareOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.square", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"mps.square";
    v17[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::ValueRange::ValueRange(v19, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)a1, (uint64_t)v20, v19[0], v19[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::SquareOp,void>::id) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v12;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_SquareOfAbsolute::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::mps::anonymous namespace'::MPS_SquareOfAbsolute::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::mps::AbsoluteOp type");
}

void *mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionArgMaxOp>::~CanonicalizeReduction(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionArgMaxOp>::~CanonicalizeReduction(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionArgMaxOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionArgMaxOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionArgMaxOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionArgMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 47)
    && (uint64_t InherentAttr = (mlir::Operation::CloneOptions *)mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9),
        v4))
  {
    if (!InherentAttr)
    {
LABEL_7:
      char v5 = mlir::Operation::CloneOptions::all(InherentAttr);
      mlir::Operation::clone(a2, v5);
    }
  }
  else
  {
    uint64_t InherentAttr = (mlir::Operation::CloneOptions *)mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
    if (!InherentAttr) {
      goto LABEL_7;
    }
  }
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
    goto LABEL_7;
  }
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::OpResult>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  v17[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.squeeze", (const unsigned __int8 *)0xB, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"mps.squeeze";
    v15[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::mps::SqueezeOp::build((uint64_t)a1, (uint64_t)v17, a3, 1, 0, 0);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::SqueezeOp,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

void *mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionArgMinOp>::~CanonicalizeReduction(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionArgMinOp>::~CanonicalizeReduction(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionArgMinOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionArgMinOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionArgMinOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionArgMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 47)
    && (uint64_t InherentAttr = (mlir::Operation::CloneOptions *)mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9),
        v4))
  {
    if (!InherentAttr)
    {
LABEL_7:
      char v5 = mlir::Operation::CloneOptions::all(InherentAttr);
      mlir::Operation::clone(a2, v5);
    }
  }
  else
  {
    uint64_t InherentAttr = (mlir::Operation::CloneOptions *)mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
    if (!InherentAttr) {
      goto LABEL_7;
    }
  }
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
    goto LABEL_7;
  }
  return 0;
}

void *mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionMaxOp>::~CanonicalizeReduction(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionMaxOp>::~CanonicalizeReduction(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 47)
    && (uint64_t InherentAttr = (mlir::Operation::CloneOptions *)mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9),
        v4))
  {
    if (!InherentAttr)
    {
LABEL_7:
      char v5 = mlir::Operation::CloneOptions::all(InherentAttr);
      mlir::Operation::clone(a2, v5);
    }
  }
  else
  {
    uint64_t InherentAttr = (mlir::Operation::CloneOptions *)mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
    if (!InherentAttr) {
      goto LABEL_7;
    }
  }
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
    goto LABEL_7;
  }
  return 0;
}

void *mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionMinOp>::~CanonicalizeReduction(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionMinOp>::~CanonicalizeReduction(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 47)
    && (uint64_t InherentAttr = (mlir::Operation::CloneOptions *)mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9),
        v4))
  {
    if (!InherentAttr)
    {
LABEL_7:
      char v5 = mlir::Operation::CloneOptions::all(InherentAttr);
      mlir::Operation::clone(a2, v5);
    }
  }
  else
  {
    uint64_t InherentAttr = (mlir::Operation::CloneOptions *)mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
    if (!InherentAttr) {
      goto LABEL_7;
    }
  }
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
    goto LABEL_7;
  }
  return 0;
}

void *mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionProdOp>::~CanonicalizeReduction(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionProdOp>::~CanonicalizeReduction(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionProdOp>::matchAndRewrite(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 47)
    && (uint64_t InherentAttr = (mlir::Operation::CloneOptions *)mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9),
        v4))
  {
    if (!InherentAttr)
    {
LABEL_7:
      char v5 = mlir::Operation::CloneOptions::all(InherentAttr);
      mlir::Operation::clone(a2, v5);
    }
  }
  else
  {
    uint64_t InherentAttr = (mlir::Operation::CloneOptions *)mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
    if (!InherentAttr) {
      goto LABEL_7;
    }
  }
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
    goto LABEL_7;
  }
  return 0;
}

void *mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionSumOp>::~CanonicalizeReduction(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionSumOp>::~CanonicalizeReduction(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeReduction<mlir::mps::ReductionSumOp>::matchAndRewrite(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 47)
    && (uint64_t InherentAttr = (mlir::Operation::CloneOptions *)mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9),
        v4))
  {
    if (!InherentAttr)
    {
LABEL_7:
      char v5 = mlir::Operation::CloneOptions::all(InherentAttr);
      mlir::Operation::clone(a2, v5);
    }
  }
  else
  {
    uint64_t InherentAttr = (mlir::Operation::CloneOptions *)mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
    if (!InherentAttr) {
      goto LABEL_7;
    }
  }
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
    goto LABEL_7;
  }
  return 0;
}

void *mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionArgMaxOp>::~CanonicalizeReductionAxes(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionArgMaxOp>::~CanonicalizeReductionAxes(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionArgMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::UnitAttr **a3)
{
  v348[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9);
    if (v6)
    {
      if (!InherentAttr) {
        return 0;
      }
      goto LABEL_6;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
  if (InherentAttr)
  {
LABEL_6:
    if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
      return 0;
    }
    v316 = a3;
    uint64_t v9 = *(void *)(*(void *)(a2 + 72) + 24);
    char v10 = (uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v10) {
      goto LABEL_18;
    }
    uint64_t v11 = *v10;
    unint64_t v12 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v13 = *(unsigned int *)(v11 + 16);
    if (!v13) {
      goto LABEL_18;
    }
    __int16 v14 = *(void **)(v11 + 8);
    int v15 = &v14[2 * v13];
    do
    {
      unint64_t v16 = v13 >> 1;
      unint64_t v17 = &v14[2 * (v13 >> 1)];
      unint64_t v19 = *v17;
      __int16 v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12) {
        __int16 v14 = v18;
      }
      else {
        unint64_t v13 = v16;
      }
    }
    while (v13);
    if (v14 != v15 && *v14 == v12) {
      uint64_t v20 = v14[1];
    }
    else {
LABEL_18:
    }
      uint64_t v20 = 0;
    v341[0] = v10;
    v341[1] = v20;
    uint64_t v21 = (void *)(*(void *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v21;
    unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v24 = *(unsigned int *)(v22 + 16);
    if (!v24) {
      goto LABEL_28;
    }
    v25 = *(void **)(v22 + 8);
    uint64_t v26 = &v25[2 * v24];
    do
    {
      unint64_t v27 = v24 >> 1;
      uint64_t v28 = &v25[2 * (v24 >> 1)];
      unint64_t v30 = *v28;
      uint64_t v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23) {
        v25 = v29;
      }
      else {
        unint64_t v24 = v27;
      }
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
    {
      uint64_t v38 = v25[1];
      v339 = v21;
      uint64_t v340 = v38;
      if (!v10) {
        return 0;
      }
    }
    else
    {
LABEL_28:
      v339 = v21;
      uint64_t v340 = 0;
      if (!v10) {
        return 0;
      }
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v341)) {
      return 0;
    }
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
    if (v32)
    {
      uint64_t v33 = 8 * v32;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v33 -= 8;
        if (!v33) {
          goto LABEL_34;
        }
      }
      return 0;
    }
LABEL_34:
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      uint64_t v330 = *(void *)(a2 + 72);
      unint64_t v34 = *(unsigned int *)(a2 + 68);
    }
    else
    {
      uint64_t v330 = 0;
      unint64_t v34 = 0;
    }
    __p = 0;
    unint64_t v337 = 0;
    v338 = 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
    uint64_t v317 = a2;
    if (v35)
    {
      if (v35 >> 61) {
        goto LABEL_425;
      }
      uint64_t v36 = 8 * v35;
      v37 = (char *)operator new(8 * v35);
      __p = &v37[v337 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v337 = (unint64_t)__p;
      v338 = &v37[v36];
    }
    if (v34 >= 2)
    {
      uint64_t v39 = *(void *)(v330 + 56);
      v346 = v348;
      uint64_t v347 = 0x400000000;
      char matched = mlir::matchConstantWithIntVector<long long>(v39, (uint64_t)&v346);
      if (matched)
      {
        v334 = 0;
        size_t v335 = 0;
        v333 = &v334;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
        if (v347)
        {
          uint64_t v42 = v41;
          v43 = (mlir **)v346;
          v44 = (mlir **)&v346[v347];
          do
          {
            uint64_t NegativeAxis = mlir::getNegativeAxis(*v43, v42);
            uint64_t v47 = NegativeAxis;
            v48 = v334;
            v49 = &v334;
            v50 = &v334;
            if (v334)
            {
              while (1)
              {
                while (1)
                {
                  v50 = (uint64_t **)v48;
                  uint64_t v51 = v48[4];
                  if (NegativeAxis >= v51) {
                    break;
                  }
                  v48 = *v50;
                  v49 = v50;
                  if (!*v50) {
                    goto LABEL_56;
                  }
                }
                if (v51 >= NegativeAxis) {
                  break;
                }
                v48 = v50[1];
                if (!v48)
                {
                  v49 = v50 + 1;
                  goto LABEL_56;
                }
              }
            }
            else
            {
LABEL_56:
              v52 = (uint64_t *)operator new(0x28uLL);
              v52[4] = v47;
              uint64_t *v52 = 0;
              v52[1] = 0;
              v52[2] = (uint64_t)v50;
              *v49 = v52;
              if (*v333)
              {
                v333 = (uint64_t **)*v333;
                v45 = *v49;
              }
              else
              {
                v45 = v52;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v334, v45);
              ++v335;
            }
            ++v43;
          }
          while (v43 != v44);
        }
        if (v335)
        {
          if (v335 >> 61) {
            goto LABEL_425;
          }
          size_t v76 = v335;
          v77 = operator new(8 * v335);
          v78 = (char *)&v77[v76];
          bzero(v77, v76 * 8);
        }
        else
        {
          v78 = 0;
          v77 = 0;
        }
        if (__p)
        {
          unint64_t v337 = (unint64_t)__p;
          operator delete(__p);
        }
        __p = v77;
        unint64_t v337 = (unint64_t)v78;
        v338 = v78;
        v79 = (uint64_t *)v333;
        if (v333 != &v334)
        {
          do
          {
            void *v77 = v79[4];
            v82 = (uint64_t *)v79[1];
            if (v82)
            {
              do
              {
                v83 = (uint64_t **)v82;
                v82 = (uint64_t *)*v82;
              }
              while (v82);
            }
            else
            {
              do
              {
                v83 = (uint64_t **)v79[2];
                BOOL v84 = *v83 == v79;
                v79 = (uint64_t *)v83;
              }
              while (!v84);
            }
            ++v77;
            v79 = (uint64_t *)v83;
          }
          while (v83 != &v334);
        }
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v333, v334);
      }
      if (v346 != v348) {
        free(v346);
      }
      if (!matched) {
        goto LABEL_420;
      }
      goto LABEL_100;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
    if (!v53)
    {
LABEL_100:
      v80 = __p;
      if ((void *)v337 == __p)
      {
        v346 = *(uint64_t **)(*(void *)(v317 + 72) + 24);
        uint64_t v7 = 1;
        mlir::ValueRange::ValueRange(v345, (uint64_t)&v346, 1uLL);
        (*((void (**)(mlir::UnitAttr **, uint64_t, unint64_t, unint64_t))*v316 + 3))(v316, v317, v345[0], v345[1]);
        goto LABEL_422;
      }
      uint64_t v81 = v317;
      if (*(uint64_t *)__p > -5)
      {
        uint64_t v7 = 1;
        goto LABEL_423;
      }
      v332 = *(uint64_t **)(v330 + 24);
      v318 = (mlir::Builder *)(v316 + 1);
LABEL_113:
      if (__p != (void *)v337)
      {
        v85 = v332;
        v342 = v332;
        v346 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v332[1] & 0xFFFFFFFFFFFFFFF8));
        uint64_t v347 = v86;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
        uint64_t v88 = v87;
        v90 = (char *)__p;
        v89 = (char *)v337;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
        if (v91)
        {
          if (v91 >> 61) {
            goto LABEL_425;
          }
          v92 = v89;
          uint64_t v93 = 8 * v91;
          v94 = (char *)operator new(8 * v91);
          v331 = &v94[v93];
          v89 = v92;
        }
        else
        {
          v331 = 0;
          v94 = 0;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
        uint64_t v321 = v88;
        if (v95)
        {
          if (v95 >> 61) {
            goto LABEL_425;
          }
          uint64_t v96 = 8 * v95;
          v97 = (char *)operator new(8 * v95);
          v324 = &v97[v96];
          v98 = v89 - 8;
          uint64_t v99 = *((void *)v89 - 1);
          if (v99 != -1)
          {
            v100 = v97;
            v101 = v97;
            uint64_t v88 = v321;
LABEL_130:
            v333 = (uint64_t **)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v85[1] & 0xFFFFFFFFFFFFFFF8));
            v334 = v102;
            uint64_t v103 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v333);
            uint64_t PositiveAxis = mlir::getPositiveAxis(-1, v88);
            uint64_t v105 = PositiveAxis;
            v320 = v90;
            v325 = v100;
            if (v94 >= v331)
            {
              unint64_t v107 = (v331 - v94) >> 2;
              if (v107 <= 1) {
                unint64_t v107 = 1;
              }
              unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              if ((unint64_t)(v331 - v94) < 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = v107;
              }
              if (v108 >> 61) {
                goto LABEL_426;
              }
              uint64_t v109 = 8 * v108;
              v110 = (char *)operator new(8 * v108);
              *(void *)v110 = *(void *)(v103 + 8 * v105);
              v106 = v110 + 8;
              v331 = &v110[v109];
              if (v94) {
                operator delete(v94);
              }
              v94 = v110;
              v90 = v320;
            }
            else
            {
              *(void *)v94 = *(void *)(v103 + 8 * PositiveAxis);
              v106 = v94 + 8;
            }
            BOOL v111 = v99 == -2;
            if (v88 < 2)
            {
              uint64_t v112 = 1;
LABEL_142:
              if (v106 < v331)
              {
                *(void *)v106 = v112;
                v113 = v106 + 8;
                v114 = v325;
                if (!v111)
                {
LABEL_283:
                  if (v94 != v113)
                  {
                    v207 = v113 - 8;
                    if (v113 - 8 > v94)
                    {
                      v208 = v94 + 8;
                      do
                      {
                        uint64_t v209 = *((void *)v208 - 1);
                        *((void *)v208 - 1) = *(void *)v207;
                        *(void *)v207 = v209;
                        v207 -= 8;
                        BOOL v210 = v208 >= v207;
                        v208 += 8;
                      }
                      while (!v210);
                    }
                  }
                  if (v101 != v114)
                  {
                    v211 = v114 - 8;
                    if (v114 - 8 > v101)
                    {
                      v212 = v101 + 8;
                      do
                      {
                        uint64_t v213 = *((void *)v212 - 1);
                        *((void *)v212 - 1) = *(void *)v211;
                        *(void *)v211 = v213;
                        v211 -= 8;
                        BOOL v210 = v212 >= v211;
                        v212 += 8;
                      }
                      while (!v210);
                    }
                  }
                  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v342);
                  v333 = (uint64_t **)v332;
                  v344 = (mlir::GenericProgramPoint *)((v113 - v94) >> 3);
                  uint64_t IntegerType = mlir::Builder::getIntegerType(v318, 0x40u, 1);
                  v216 = (void *)mlir::RankedTensorType::get((uint64_t)&v344, 1, IntegerType, 0);
                  v217 = v216;
                  if (!v216) {
                    goto LABEL_302;
                  }
                  uint64_t v218 = *v216;
                  unint64_t v219 = mlir::TypeID::get<mlir::ShapedType>();
                  unint64_t v220 = *(unsigned int *)(v218 + 16);
                  if (!v220) {
                    goto LABEL_302;
                  }
                  v221 = *(void **)(v218 + 8);
                  v222 = &v221[2 * v220];
                  do
                  {
                    unint64_t v223 = v220 >> 1;
                    v224 = &v221[2 * (v220 >> 1)];
                    unint64_t v226 = *v224;
                    v225 = v224 + 2;
                    v220 += ~(v220 >> 1);
                    if (v226 < v219) {
                      v221 = v225;
                    }
                    else {
                      unint64_t v220 = v223;
                    }
                  }
                  while (v220);
                  if (v221 != v222 && *v221 == v219) {
                    uint64_t v227 = v221[1];
                  }
                  else {
LABEL_302:
                  }
                    uint64_t v227 = 0;
                  v343 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v217, v227, v94, v113 - v94, 8, 1, 1);
                  v344 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, Loc, &v343);
                  v332 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v318, Loc, (uint64_t *)&v333, &v344)- 16);
                  std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v101, v114, (v114 - v101) >> 3);
                  if (v101) {
                    operator delete(v101);
                  }
                  if (v94) {
                    operator delete(v94);
                  }
                  v342 = v332;
                  v346 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v332[1] & 0xFFFFFFFFFFFFFFF8));
                  uint64_t v347 = v228;
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
                  if (v229)
                  {
                    if (v229 >> 61) {
                      goto LABEL_425;
                    }
                    uint64_t v230 = 8 * v229;
                    v231 = (char *)operator new(8 * v229);
                    v232 = &v231[v230];
                  }
                  else
                  {
                    v231 = 0;
                    v232 = 0;
                  }
                  uint64_t v233 = ((uint64_t)(v337 - (void)__p) >> 3) - 1;
                  if ((uint64_t)(v337 - (void)__p) < 1)
                  {
                    uint64_t v236 = ((uint64_t)(v337 - (void)__p) >> 3) - 1;
                    v234 = (uint64_t *)v231;
                    goto LABEL_359;
                  }
                  v234 = (uint64_t *)v231;
                  while (1)
                  {
                    uint64_t v237 = *((void *)__p + v233);
                    if (v237 < -4)
                    {
                      v235 = v231;
                      uint64_t v236 = v233;
LABEL_346:
                      if (v235 != (char *)v234)
                      {
                        uint64_t v253 = mlir::Value::getLoc((mlir::Value *)&v342);
                        v333 = (uint64_t **)v342;
                        v344 = (mlir::GenericProgramPoint *)((v235 - (char *)v234) >> 3);
                        uint64_t v254 = mlir::Builder::getIntegerType(v318, 0x40u, 1);
                        v255 = (void *)mlir::RankedTensorType::get((uint64_t)&v344, 1, v254, 0);
                        v256 = v255;
                        if (!v255) {
                          goto LABEL_356;
                        }
                        uint64_t v257 = *v255;
                        unint64_t v258 = mlir::TypeID::get<mlir::ShapedType>();
                        unint64_t v259 = *(unsigned int *)(v257 + 16);
                        if (!v259) {
                          goto LABEL_356;
                        }
                        v260 = *(void **)(v257 + 8);
                        v261 = &v260[2 * v259];
                        do
                        {
                          unint64_t v262 = v259 >> 1;
                          v263 = &v260[2 * (v259 >> 1)];
                          unint64_t v265 = *v263;
                          v264 = v263 + 2;
                          v259 += ~(v259 >> 1);
                          if (v265 < v258) {
                            v260 = v264;
                          }
                          else {
                            unint64_t v259 = v262;
                          }
                        }
                        while (v259);
                        if (v260 != v261 && *v260 == v258) {
                          uint64_t v266 = v260[1];
                        }
                        else {
LABEL_356:
                        }
                          uint64_t v266 = 0;
                        char v267 = 1;
                        v343 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v256, v266, v234, v235 - (char *)v234, 8, 1, 1);
                        v344 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, v253, &v343)- 16);
                        LOBYTE(v343) = 1;
                        v268 = mlir::OpBuilder::create<mlir::mps::ReductionArgMaxOp,mlir::Value &,mlir::Value &,BOOL>((mlir::UnitAttr **)v318, v253, (uint64_t *)&v333, (uint64_t *)&v344, (unsigned __int8 *)&v343);
                        if (mlir::mps::inferTypes(v268, v269))
                        {
                          v332 = (uint64_t *)((char *)v268 - 16);
                          goto LABEL_359;
                        }
LABEL_406:
                        if (v234) {
                          operator delete(v234);
                        }
                        uint64_t v81 = v317;
                        if ((v267 & 1) == 0) {
                          goto LABEL_113;
                        }
                        uint64_t v7 = 0;
LABEL_422:
                        v80 = __p;
                        if (!__p) {
                          return v7;
                        }
LABEL_423:
                        unint64_t v337 = (unint64_t)v80;
                        operator delete(v80);
                        return v7;
                      }
LABEL_359:
                      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
                      if (v270)
                      {
                        if (!(v270 >> 61))
                        {
                          uint64_t v271 = 8 * v270;
                          v272 = (char *)operator new(8 * v270);
                          v273 = &v272[v271];
                          v274 = v272;
                          if ((v236 & 0x8000000000000000) == 0) {
                            goto LABEL_367;
                          }
LABEL_403:
                          std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v274, v272, (v272 - v274) >> 3);
                          if (v274) {
                            operator delete(v274);
                          }
                          char v267 = 0;
                          goto LABEL_406;
                        }
LABEL_425:
                        abort();
                      }
                      v272 = 0;
                      v273 = 0;
                      v274 = 0;
                      if (v236 < 0) {
                        goto LABEL_403;
                      }
LABEL_367:
                      while (2)
                      {
                        uint64_t v275 = *((void *)__p + v236);
                        if (v272 < v273)
                        {
                          *(void *)v272 = v275;
                          v272 += 8;
                        }
                        else
                        {
                          uint64_t v276 = (v272 - v274) >> 3;
                          unint64_t v277 = v276 + 1;
                          if ((unint64_t)(v276 + 1) >> 61) {
                            goto LABEL_425;
                          }
                          if ((v273 - v274) >> 2 > v277) {
                            unint64_t v277 = (v273 - v274) >> 2;
                          }
                          if ((unint64_t)(v273 - v274) >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v278 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v278 = v277;
                          }
                          if (v278)
                          {
                            if (v278 >> 61) {
                              goto LABEL_426;
                            }
                            v279 = operator new(8 * v278);
                          }
                          else
                          {
                            v279 = 0;
                          }
                          v280 = &v279[8 * v276];
                          *(void *)v280 = v275;
                          v281 = v280 + 8;
                          if (v272 != v274)
                          {
                            unint64_t v282 = v272 - v274 - 8;
                            if (v282 < 0x168)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            unint64_t v285 = (v272 - 8 - v274) & 0xFFFFFFFFFFFFFFF8;
                            if (&v279[v272 - v274 - 8 - v285] > &v279[v272 - v274 - 8])
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if (&v272[-v285 - 8] > v272 - 8)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if ((unint64_t)(v274 - v279) < 0x20)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            uint64_t v286 = (v282 >> 3) + 1;
                            uint64_t v287 = 8 * (v286 & 0x3FFFFFFFFFFFFFFCLL);
                            v283 = &v272[-v287];
                            v280 -= v287;
                            v288 = &v279[8 * v276 - 16];
                            v289 = v272 - 16;
                            uint64_t v290 = v286 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v291 = *(_OWORD *)v289;
                              *(v288 - 1) = *((_OWORD *)v289 - 1);
                              _OWORD *v288 = v291;
                              v288 -= 2;
                              v289 -= 32;
                              v290 -= 4;
                            }
                            while (v290);
                            if (v286 != (v286 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_381:
                                uint64_t v284 = *((void *)v283 - 1);
                                v283 -= 8;
                                *((void *)v280 - 1) = v284;
                                v280 -= 8;
                              }
                              while (v283 != v274);
                            }
                          }
                          v273 = &v279[8 * v278];
                          if (v274) {
                            operator delete(v274);
                          }
                          v274 = v280;
                          v272 = v281;
                        }
                        BOOL v293 = v236-- <= 0;
                        if (v293)
                        {
                          v292 = v272 - 8;
                          BOOL v293 = v274 != v272 && v292 > v274;
                          if (v293)
                          {
                            v294 = v274 + 8;
                            do
                            {
                              uint64_t v295 = *((void *)v294 - 1);
                              *((void *)v294 - 1) = *(void *)v292;
                              *(void *)v292 = v295;
                              v292 -= 8;
                              BOOL v210 = v294 >= v292;
                              v294 += 8;
                            }
                            while (!v210);
                          }
                          goto LABEL_403;
                        }
                        continue;
                      }
                    }
                    if (v231 >= v232) {
                      break;
                    }
                    *(void *)v231 = v237;
                    v235 = v231 + 8;
LABEL_314:
                    uint64_t v236 = v233 - 1;
                    v231 = v235;
                    BOOL v293 = v233-- <= 0;
                    if (v293) {
                      goto LABEL_346;
                    }
                  }
                  uint64_t v238 = (v231 - (char *)v234) >> 3;
                  unint64_t v239 = v238 + 1;
                  if ((unint64_t)(v238 + 1) >> 61) {
                    goto LABEL_425;
                  }
                  if ((v232 - (char *)v234) >> 2 > v239) {
                    unint64_t v239 = (v232 - (char *)v234) >> 2;
                  }
                  if ((unint64_t)(v232 - (char *)v234) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v240 = v239;
                  }
                  if (v240)
                  {
                    if (v240 >> 61) {
                      goto LABEL_426;
                    }
                    v241 = operator new(8 * v240);
                  }
                  else
                  {
                    v241 = 0;
                  }
                  v242 = (uint64_t *)&v241[8 * v238];
                  uint64_t *v242 = v237;
                  v235 = (char *)(v242 + 1);
                  if (v231 != (char *)v234)
                  {
                    unint64_t v243 = v231 - (char *)v234 - 8;
                    if (v243 >= 0x168)
                    {
                      unint64_t v246 = (v231 - 8 - (char *)v234) & 0xFFFFFFFFFFFFFFF8;
                      if (&v241[v231 - (char *)v234 - 8 - v246] > &v241[v231 - (char *)v234 - 8])
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if (&v231[-v246 - 8] > v231 - 8)
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if ((unint64_t)((char *)v234 - v241) >= 0x20)
                      {
                        uint64_t v247 = (v243 >> 3) + 1;
                        uint64_t v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
                        v244 = (uint64_t *)&v231[-v248];
                        v242 = (uint64_t *)((char *)v242 - v248);
                        v249 = &v241[8 * v238 - 16];
                        v250 = (long long *)(v231 - 16);
                        uint64_t v251 = v247 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v252 = *v250;
                          *(v249 - 1) = *(v250 - 1);
                          _OWORD *v249 = v252;
                          v249 -= 2;
                          v250 -= 2;
                          v251 -= 4;
                        }
                        while (v251);
                        if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL)) {
                          goto LABEL_331;
                        }
                      }
                      else
                      {
                        v244 = (uint64_t *)v231;
                      }
                    }
                    else
                    {
                      v244 = (uint64_t *)v231;
                    }
                    do
                    {
                      uint64_t v245 = *--v244;
                      *--v242 = v245;
                    }
                    while (v244 != v234);
                  }
LABEL_331:
                  v232 = &v241[8 * v240];
                  if (v234) {
                    operator delete(v234);
                  }
                  v234 = v242;
                  goto LABEL_314;
                }
LABEL_260:
                uint64_t v191 = mlir::getNegativeAxis(0, (v113 - v94) >> 3);
                uint64_t v192 = v191;
                if (v114 < v324)
                {
                  *(void *)v114 = v191;
                  v114 += 8;
                  goto LABEL_283;
                }
                int64_t v193 = v114 - v101;
                v194 = v101;
                uint64_t v195 = (v114 - v101) >> 3;
                unint64_t v196 = v195 + 1;
                if ((unint64_t)(v195 + 1) >> 61) {
                  goto LABEL_425;
                }
                v197 = v114;
                v198 = v194;
                unint64_t v199 = v324 - v194;
                unint64_t v200 = (v324 - v194) >> 2;
                if (v200 > v196) {
                  unint64_t v196 = v200;
                }
                if (v199 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
                }
                if (v196)
                {
                  if (v196 >> 61) {
                    goto LABEL_426;
                  }
                  v201 = (char *)operator new(8 * v196);
                }
                else
                {
                  v201 = 0;
                }
                v202 = &v201[8 * v195];
                *(void *)v202 = v192;
                v114 = v202 + 8;
                if (v197 == v198)
                {
                  v205 = v198;
                }
                else
                {
                  unint64_t v203 = v197 - v198 - 8;
                  if (v203 >= 0x58 && (unint64_t)(v197 - v201 - v193) >= 0x20)
                  {
                    uint64_t v302 = (v203 >> 3) + 1;
                    uint64_t v303 = 8 * (v302 & 0x3FFFFFFFFFFFFFFCLL);
                    v204 = &v197[-v303];
                    v202 -= v303;
                    v304 = &v201[8 * v195 - 16];
                    v305 = v197 - 16;
                    uint64_t v306 = v302 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v307 = *(_OWORD *)v305;
                      *((_OWORD *)v304 - 1) = *((_OWORD *)v305 - 1);
                      *(_OWORD *)v304 = v307;
                      v304 -= 32;
                      v305 -= 32;
                      v306 -= 4;
                    }
                    while (v306);
                    v205 = v198;
                    if (v302 == (v302 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_280;
                    }
                  }
                  else
                  {
                    v204 = v197;
                    v205 = v198;
                  }
                  do
                  {
                    uint64_t v206 = *((void *)v204 - 1);
                    v204 -= 8;
                    *((void *)v202 - 1) = v206;
                    v202 -= 8;
                  }
                  while (v204 != v205);
                }
LABEL_280:
                if (v205) {
                  operator delete(v205);
                }
                v101 = v202;
                goto LABEL_283;
              }
              v183 = v101;
              uint64_t v184 = (v106 - v94) >> 3;
              unint64_t v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61) {
                goto LABEL_425;
              }
              if ((v331 - v94) >> 2 > v185) {
                unint64_t v185 = (v331 - v94) >> 2;
              }
              if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
              }
              if (v185)
              {
                if (v185 >> 61) {
                  goto LABEL_426;
                }
                v186 = operator new(8 * v185);
              }
              else
              {
                v186 = 0;
              }
              v187 = (uint64_t *)&v186[8 * v184];
              uint64_t *v187 = v112;
              v113 = (char *)(v187 + 1);
              if (v106 == v94)
              {
                v101 = v183;
                v114 = v325;
                if (!v94)
                {
LABEL_259:
                  v94 = (char *)v187;
                  if (!v111) {
                    goto LABEL_283;
                  }
                  goto LABEL_260;
                }
LABEL_258:
                operator delete(v94);
                goto LABEL_259;
              }
              unint64_t v188 = v106 - v94 - 8;
              if (v188 >= 0x58 && (unint64_t)(v94 - v186) >= 0x20)
              {
                uint64_t v296 = (v188 >> 3) + 1;
                uint64_t v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
                v189 = &v106[-v297];
                v187 = (uint64_t *)((char *)v187 - v297);
                v298 = &v186[8 * v184 - 16];
                v299 = v106 - 16;
                uint64_t v300 = v296 & 0x3FFFFFFFFFFFFFFCLL;
                v114 = v325;
                do
                {
                  long long v301 = *(_OWORD *)v299;
                  *(v298 - 1) = *((_OWORD *)v299 - 1);
                  _OWORD *v298 = v301;
                  v298 -= 2;
                  v299 -= 32;
                  v300 -= 4;
                }
                while (v300);
                v101 = v183;
                if (v296 == (v296 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_257:
                  if (!v94) {
                    goto LABEL_259;
                  }
                  goto LABEL_258;
                }
              }
              else
              {
                v189 = v106;
                v101 = v183;
                v114 = v325;
              }
              do
              {
                uint64_t v190 = *((void *)v189 - 1);
                v189 -= 8;
                *--v187 = v190;
              }
              while (v189 != v94);
              goto LABEL_257;
            }
            uint64_t v115 = v99;
            uint64_t v328 = v103;
            uint64_t v329 = -v88;
            uint64_t v116 = -2;
            uint64_t v112 = 1;
            while (1)
            {
              if (!v111)
              {
                if (v115 == v116)
                {
                  v119 = v331;
                  if (v106 < v331)
                  {
                    *(void *)v106 = v112;
                    v120 = v106 + 8;
LABEL_184:
                    v331 = v119;
                    uint64_t v112 = *(void *)(v328 + 8 * mlir::getPositiveAxis(v115, v88));
                    if (v89 - 8 == v90)
                    {
                      uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
                      BOOL v111 = 1;
                      v106 = v120;
                      v89 = v90;
                    }
                    else
                    {
                      uint64_t v115 = *((void *)v89 - 2);
                      BOOL v111 = 1;
                      v106 = v120;
                      v89 -= 8;
                    }
                    uint64_t v103 = v328;
                    goto LABEL_146;
                  }
                  uint64_t v327 = v115;
                  uint64_t v124 = (v106 - v94) >> 3;
                  unint64_t v125 = v124 + 1;
                  if ((unint64_t)(v124 + 1) >> 61) {
                    goto LABEL_425;
                  }
                  if ((v331 - v94) >> 2 > v125) {
                    unint64_t v125 = (v331 - v94) >> 2;
                  }
                  if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v126 = v125;
                  }
                  v322 = v89;
                  if (v126)
                  {
                    if (v126 >> 61) {
                      goto LABEL_426;
                    }
                    v127 = operator new(8 * v126);
                  }
                  else
                  {
                    v127 = 0;
                  }
                  v133 = (uint64_t *)&v127[8 * v124];
                  uint64_t *v133 = v112;
                  v120 = (char *)(v133 + 1);
                  if (v106 != v94)
                  {
                    unint64_t v134 = v106 - v94 - 8;
                    if (v134 < 0x168
                      || (unint64_t v162 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8,
                          &v127[v106 - v94 - 8 - v162] > &v127[v106 - v94 - 8])
                      || &v106[-v162 - 8] > v106 - 8
                      || (unint64_t)(v94 - v127) < 0x20)
                    {
                      v135 = v106;
                      v90 = v320;
                      uint64_t v88 = v321;
                    }
                    else
                    {
                      uint64_t v163 = (v134 >> 3) + 1;
                      uint64_t v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                      v135 = &v106[-v164];
                      v133 = (uint64_t *)((char *)v133 - v164);
                      v165 = &v127[8 * v124 - 16];
                      v166 = v106 - 16;
                      uint64_t v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                      uint64_t v88 = v321;
                      do
                      {
                        long long v168 = *(_OWORD *)v166;
                        *(v165 - 1) = *((_OWORD *)v166 - 1);
                        _OWORD *v165 = v168;
                        v165 -= 2;
                        v166 -= 32;
                        v167 -= 4;
                      }
                      while (v167);
                      v90 = v320;
                      if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_181:
                        v119 = &v127[8 * v126];
                        if (v94) {
                          goto LABEL_182;
                        }
                        goto LABEL_183;
                      }
                    }
                    do
                    {
                      uint64_t v136 = *((void *)v135 - 1);
                      v135 -= 8;
                      *--v133 = v136;
                    }
                    while (v135 != v94);
                    goto LABEL_181;
                  }
                  v90 = v320;
                  uint64_t v88 = v321;
                  v119 = &v127[8 * v126];
                  if (v94) {
LABEL_182:
                  }
                    operator delete(v94);
LABEL_183:
                  v94 = (char *)v133;
                  v89 = v322;
                  uint64_t v115 = v327;
                  goto LABEL_184;
                }
                uint64_t v117 = v115;
                uint64_t v118 = mlir::getPositiveAxis(v116, v88);
                uint64_t v115 = v117;
                BOOL v111 = 0;
                v112 *= *(void *)(v103 + 8 * v118);
                goto LABEL_146;
              }
              if (v115 == v116)
              {
                v112 *= *(void *)(v103 + 8 * mlir::getPositiveAxis(v115, v88));
                if (v89 - 8 == v90)
                {
                  uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
                  BOOL v111 = 1;
                  v89 = v90;
                }
                else
                {
                  uint64_t v115 = *((void *)v89 - 2);
                  BOOL v111 = 1;
                  v89 -= 8;
                }
                goto LABEL_146;
              }
              v121 = v331;
              uint64_t v326 = v115;
              if (v106 >= v331) {
                break;
              }
              *(void *)v106 = v112;
              v122 = v106 + 8;
              v123 = (uint64_t *)v325;
LABEL_196:
              uint64_t v112 = *(void *)(v103 + 8 * mlir::getPositiveAxis(v116, v88));
              uint64_t v142 = mlir::getNegativeAxis(0, (v122 - v94) >> 3);
              v143 = v122;
              uint64_t v144 = v142;
              v331 = v121;
              if (v123 >= (uint64_t *)v324)
              {
                v319 = v143;
                v145 = v101;
                uint64_t v146 = (char *)v123 - v101;
                uint64_t v147 = v146 >> 3;
                unint64_t v148 = (v146 >> 3) + 1;
                if (v148 >> 61) {
                  goto LABEL_425;
                }
                v149 = v123;
                v150 = (uint64_t *)v145;
                unint64_t v151 = v324 - v145;
                unint64_t v152 = (v324 - v145) >> 2;
                if (v152 > v148) {
                  unint64_t v148 = v152;
                }
                if (v151 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v153 = v148;
                }
                v323 = v89;
                if (v153)
                {
                  if (v153 >> 61) {
                    goto LABEL_426;
                  }
                  v154 = (char *)operator new(8 * v153);
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[8 * v147];
                *(void *)v155 = v144;
                v156 = v155 + 8;
                if (v149 == v150)
                {
                  v90 = v320;
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                  goto LABEL_218;
                }
                unint64_t v157 = (char *)v149 - (char *)v150 - 8;
                v90 = v320;
                if (v157 < 0x168
                  || (unint64_t v176 = ((char *)(v149 - 1) - (char *)v150) & 0xFFFFFFFFFFFFFFF8,
                      &v154[v146 - 8 - v176] > &v154[v146 - 8])
                  || (uint64_t *)((char *)v149 - v176 - 8) > v149 - 1
                  || (unint64_t)((char *)v149 - v154 - v146) < 0x20)
                {
                  v158 = v149;
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                }
                else
                {
                  uint64_t v177 = (v157 >> 3) + 1;
                  uint64_t v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                  v158 = &v149[v178 / 0xFFFFFFFFFFFFFFF8];
                  v155 -= v178;
                  v179 = &v154[8 * v147 - 16];
                  v180 = v149 - 2;
                  uint64_t v181 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v182 = *(_OWORD *)v180;
                    *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
                    *(_OWORD *)v179 = v182;
                    v179 -= 32;
                    v180 -= 4;
                    v181 -= 4;
                  }
                  while (v181);
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                  if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_218:
                    v324 = &v154[8 * v153];
                    if (v150)
                    {
                      v160 = v150;
                      v161 = v156;
                      operator delete(v160);
                      BOOL v111 = 0;
                      v101 = v155;
                      v325 = v161;
                    }
                    else
                    {
                      BOOL v111 = 0;
                      v101 = v155;
                      v325 = v156;
                    }
                    v106 = v319;
                    v89 = v323;
                    uint64_t v115 = v326;
                    goto LABEL_146;
                  }
                }
                do
                {
                  uint64_t v159 = *--v158;
                  *((void *)v155 - 1) = v159;
                  v155 -= 8;
                }
                while (v158 != v150);
                goto LABEL_218;
              }
              BOOL v111 = 0;
              uint64_t *v123 = v142;
              v325 = (char *)(v123 + 1);
              v106 = v143;
              v90 = v320;
              uint64_t v115 = v326;
LABEL_146:
              BOOL v293 = v116-- <= v329;
              if (v293) {
                goto LABEL_142;
              }
            }
            uint64_t v128 = (v106 - v94) >> 3;
            unint64_t v129 = v128 + 1;
            if ((unint64_t)(v128 + 1) >> 61) {
              goto LABEL_425;
            }
            if ((v331 - v94) >> 2 > v129) {
              unint64_t v129 = (v331 - v94) >> 2;
            }
            if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v130 = v129;
            }
            if (v130)
            {
              if (v130 >> 61) {
                goto LABEL_426;
              }
              v131 = v89;
              v132 = operator new(8 * v130);
            }
            else
            {
              v131 = v89;
              v132 = 0;
            }
            v137 = (uint64_t *)&v132[8 * v128];
            uint64_t *v137 = v112;
            v138 = (char *)(v137 + 1);
            if (v106 == v94)
            {
              uint64_t v88 = v321;
              v123 = (uint64_t *)v325;
              v122 = (char *)(v137 + 1);
              v121 = &v132[8 * v130];
              if (!v94) {
                goto LABEL_195;
              }
              goto LABEL_194;
            }
            unint64_t v139 = v106 - v94 - 8;
            if (v139 < 0x168
              || (unint64_t v169 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8, &v132[v106 - v94 - 8 - v169] > &v132[v106 - v94 - 8])
              || &v106[-v169 - 8] > v106 - 8
              || (unint64_t)(v94 - v132) < 0x20)
            {
              v140 = v106;
              uint64_t v88 = v321;
              v123 = (uint64_t *)v325;
              v122 = (char *)(v137 + 1);
            }
            else
            {
              uint64_t v170 = (v139 >> 3) + 1;
              uint64_t v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
              v140 = &v106[-v171];
              v137 = (uint64_t *)((char *)v137 - v171);
              v172 = &v132[8 * v128 - 16];
              v173 = v106 - 16;
              uint64_t v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v88 = v321;
              do
              {
                long long v175 = *(_OWORD *)v173;
                *(v172 - 1) = *((_OWORD *)v173 - 1);
                _OWORD *v172 = v175;
                v172 -= 2;
                v173 -= 32;
                v174 -= 4;
              }
              while (v174);
              v123 = (uint64_t *)v325;
              v122 = v138;
              if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_193:
                v121 = &v132[8 * v130];
                if (!v94)
                {
LABEL_195:
                  v94 = (char *)v137;
                  v89 = v131;
                  uint64_t v103 = v328;
                  goto LABEL_196;
                }
LABEL_194:
                operator delete(v94);
                goto LABEL_195;
              }
            }
            do
            {
              uint64_t v141 = *((void *)v140 - 1);
              v140 -= 8;
              *--v137 = v141;
            }
            while (v140 != v94);
            goto LABEL_193;
          }
          uint64_t v88 = v321;
        }
        else
        {
          v98 = v89 - 8;
          uint64_t v99 = *((void *)v89 - 1);
          if (v99 != -1)
          {
            v101 = 0;
            v100 = 0;
            v324 = 0;
            goto LABEL_130;
          }
          v97 = (char *)operator new(8uLL);
          v324 = v97 + 8;
        }
        *(void *)v97 = -1;
        v100 = v97 + 8;
        if (v98 == v90)
        {
          uint64_t v99 = 0x7FFFFFFFFFFFFFFFLL;
          v89 = v90;
        }
        else
        {
          uint64_t v99 = *((void *)v89 - 2);
          v89 = v98;
        }
        v101 = v97;
        goto LABEL_130;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      v346 = v308;
      uint64_t v309 = mlir::Builder::getIntegerType(v318, 0x40u, 1);
      v333 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)&v346, 1, v309, 0);
      v310 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      uint64_t v311 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v346, v310, (unsigned char *)(v311 + 8 * v312));
      uint64_t v313 = *(void *)(v81 + 24);
      v314 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v333);
      v343 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v314, v315, v346, 8 * v347, 8, 1, 1);
      v344 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, v313, &v343);
      mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(v316, v81, (uint64_t *)&v332, &v344);
      if (v346 != v348) {
        free(v346);
      }
LABEL_420:
      uint64_t v7 = 1;
      goto LABEL_422;
    }
    uint64_t v54 = v53;
    v55 = (char *)v337;
    while (1)
    {
      uint64_t v57 = -v54;
      if (v55 >= v338) {
        break;
      }
      *(void *)v55 = v57;
      v56 = v55 + 8;
LABEL_61:
      unint64_t v337 = (unint64_t)v56;
      v55 = v56;
      if (!--v54) {
        goto LABEL_100;
      }
    }
    v58 = (char *)__p;
    int64_t v59 = v55 - (unsigned char *)__p;
    uint64_t v60 = (v55 - (unsigned char *)__p) >> 3;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61) {
      goto LABEL_425;
    }
    uint64_t v62 = v338 - (unsigned char *)__p;
    if ((v338 - (unsigned char *)__p) >> 2 > v61) {
      unint64_t v61 = v62 >> 2;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      if (v63 >> 61) {
LABEL_426:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      v64 = operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[8 * v60];
    *(void *)v65 = v57;
    v56 = v65 + 8;
    if (v55 == v58) {
      goto LABEL_77;
    }
    unint64_t v66 = v55 - v58 - 8;
    if (v66 < 0x168)
    {
      v67 = v55;
      goto LABEL_76;
    }
    unint64_t v69 = (v55 - 8 - v58) & 0xFFFFFFFFFFFFFFF8;
    if (&v64[v59 - 8 - v69] > &v64[v59 - 8])
    {
      v67 = v55;
    }
    else
    {
      if (&v55[-v69 - 8] <= v55 - 8)
      {
        if ((unint64_t)(v55 - v64 - v59) < 0x20)
        {
          v67 = v55;
          goto LABEL_76;
        }
        uint64_t v70 = (v66 >> 3) + 1;
        uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v55[-v71];
        v65 -= v71;
        v72 = &v64[8 * v60 - 16];
        v73 = v55 - 16;
        uint64_t v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          _OWORD *v72 = v75;
          v72 -= 2;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_76;
        }
LABEL_77:
        __p = v65;
        v338 = &v64[8 * v63];
        if (v58) {
          operator delete(v58);
        }
        goto LABEL_61;
      }
      v67 = v55;
    }
    do
    {
LABEL_76:
      uint64_t v68 = *((void *)v67 - 1);
      v67 -= 8;
      *((void *)v65 - 1) = v68;
      v65 -= 8;
    }
    while (v67 != v58);
    goto LABEL_77;
  }
  return 0;
}

BOOL mlir::ShapedType::hasStaticShape(mlir::ShapedType *this)
{
  if (!mlir::CallOpInterface::getArgOperands(this)) {
    return 0;
  }
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr(this);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = 8 * v3 - 8;
  do
  {
    uint64_t v5 = *ArgAttrsAttr++;
    BOOL v6 = v5 != 0x8000000000000000;
    BOOL v7 = v5 == 0x8000000000000000 || v4 == 0;
    v4 -= 8;
  }
  while (!v7);
  return v6;
}

void *llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(void *a1, unsigned char *a2, unsigned char *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  int64_t v6 = a3 - a2;
  if ((unint64_t)(a3 - a2) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v6 >> 3, 8);
    unsigned int v7 = *((_DWORD *)a1 + 2);
    if (a2 == a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unsigned int v7 = 0;
  if (a2 != a3)
  {
LABEL_5:
    memcpy((void *)(*a1 + 8 * v7), a2, v6);
    unsigned int v7 = *((_DWORD *)a1 + 2);
  }
LABEL_6:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v6 >> 3);
  return a1;
}

mlir::GenericProgramPoint *mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int64_t v6 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a1 + 1, *(void *)(a2 + 24), a3, a4);
  (*((void (**)(mlir::UnitAttr **, uint64_t, mlir::GenericProgramPoint *))*a1 + 4))(a1, a2, v6);
  return v6;
}

void *std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(void *result, char *__src, char *a3, size_t __sz)
{
  int64_t v6 = __src;
  unsigned int v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unsigned int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      abort();
    uint64_t v13 = v12;
    result = operator new(8 * v12);
    uint64_t v9 = (char *)result;
    *unsigned int v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      result = memcpy(result, v6, v14);
    }
    int v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  int v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    unint64_t v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  __int16 v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    unint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *int v15 = &v9[v14];
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReductionArgMaxOp,mlir::Value &,mlir::Value &,BOOL>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_argmax", (const unsigned __int8 *)0x14, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    unint64_t v19[2] = (uint64_t)"mps.reduction_argmax";
    v19[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::mps::ReductionArgMaxOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  uint64_t v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionArgMaxOp,void>::id) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void *mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionArgMinOp>::~CanonicalizeReductionAxes(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionArgMinOp>::~CanonicalizeReductionAxes(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionArgMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::UnitAttr **a3)
{
  v348[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9);
    if (v6)
    {
      if (!InherentAttr) {
        return 0;
      }
      goto LABEL_6;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
  if (InherentAttr)
  {
LABEL_6:
    if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
      return 0;
    }
    v316 = a3;
    uint64_t v9 = *(void *)(*(void *)(a2 + 72) + 24);
    uint64_t v10 = (uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v10) {
      goto LABEL_18;
    }
    uint64_t v11 = *v10;
    unint64_t v12 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v13 = *(unsigned int *)(v11 + 16);
    if (!v13) {
      goto LABEL_18;
    }
    size_t v14 = *(void **)(v11 + 8);
    int v15 = &v14[2 * v13];
    do
    {
      unint64_t v16 = v13 >> 1;
      unint64_t v17 = &v14[2 * (v13 >> 1)];
      unint64_t v19 = *v17;
      __int16 v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12) {
        size_t v14 = v18;
      }
      else {
        unint64_t v13 = v16;
      }
    }
    while (v13);
    if (v14 != v15 && *v14 == v12) {
      uint64_t v20 = v14[1];
    }
    else {
LABEL_18:
    }
      uint64_t v20 = 0;
    v341[0] = v10;
    v341[1] = v20;
    uint64_t v21 = (void *)(*(void *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v21;
    unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v24 = *(unsigned int *)(v22 + 16);
    if (!v24) {
      goto LABEL_28;
    }
    v25 = *(void **)(v22 + 8);
    uint64_t v26 = &v25[2 * v24];
    do
    {
      unint64_t v27 = v24 >> 1;
      uint64_t v28 = &v25[2 * (v24 >> 1)];
      unint64_t v30 = *v28;
      uint64_t v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23) {
        v25 = v29;
      }
      else {
        unint64_t v24 = v27;
      }
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
    {
      uint64_t v38 = v25[1];
      v339 = v21;
      uint64_t v340 = v38;
      if (!v10) {
        return 0;
      }
    }
    else
    {
LABEL_28:
      v339 = v21;
      uint64_t v340 = 0;
      if (!v10) {
        return 0;
      }
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v341)) {
      return 0;
    }
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
    if (v32)
    {
      uint64_t v33 = 8 * v32;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v33 -= 8;
        if (!v33) {
          goto LABEL_34;
        }
      }
      return 0;
    }
LABEL_34:
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      uint64_t v330 = *(void *)(a2 + 72);
      unint64_t v34 = *(unsigned int *)(a2 + 68);
    }
    else
    {
      uint64_t v330 = 0;
      unint64_t v34 = 0;
    }
    __p = 0;
    unint64_t v337 = 0;
    v338 = 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
    uint64_t v317 = a2;
    if (v35)
    {
      if (v35 >> 61) {
        goto LABEL_425;
      }
      uint64_t v36 = 8 * v35;
      v37 = (char *)operator new(8 * v35);
      __p = &v37[v337 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v337 = (unint64_t)__p;
      v338 = &v37[v36];
    }
    if (v34 >= 2)
    {
      uint64_t v39 = *(void *)(v330 + 56);
      v346 = v348;
      uint64_t v347 = 0x400000000;
      char matched = mlir::matchConstantWithIntVector<long long>(v39, (uint64_t)&v346);
      if (matched)
      {
        v334 = 0;
        size_t v335 = 0;
        v333 = &v334;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
        if (v347)
        {
          uint64_t v42 = v41;
          v43 = (mlir **)v346;
          v44 = (mlir **)&v346[v347];
          do
          {
            uint64_t NegativeAxis = mlir::getNegativeAxis(*v43, v42);
            uint64_t v47 = NegativeAxis;
            v48 = v334;
            v49 = &v334;
            v50 = &v334;
            if (v334)
            {
              while (1)
              {
                while (1)
                {
                  v50 = (uint64_t **)v48;
                  uint64_t v51 = v48[4];
                  if (NegativeAxis >= v51) {
                    break;
                  }
                  v48 = *v50;
                  v49 = v50;
                  if (!*v50) {
                    goto LABEL_56;
                  }
                }
                if (v51 >= NegativeAxis) {
                  break;
                }
                v48 = v50[1];
                if (!v48)
                {
                  v49 = v50 + 1;
                  goto LABEL_56;
                }
              }
            }
            else
            {
LABEL_56:
              v52 = (uint64_t *)operator new(0x28uLL);
              v52[4] = v47;
              uint64_t *v52 = 0;
              v52[1] = 0;
              v52[2] = (uint64_t)v50;
              *v49 = v52;
              if (*v333)
              {
                v333 = (uint64_t **)*v333;
                v45 = *v49;
              }
              else
              {
                v45 = v52;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v334, v45);
              ++v335;
            }
            ++v43;
          }
          while (v43 != v44);
        }
        if (v335)
        {
          if (v335 >> 61) {
            goto LABEL_425;
          }
          size_t v76 = v335;
          v77 = operator new(8 * v335);
          v78 = (char *)&v77[v76];
          bzero(v77, v76 * 8);
        }
        else
        {
          v78 = 0;
          v77 = 0;
        }
        if (__p)
        {
          unint64_t v337 = (unint64_t)__p;
          operator delete(__p);
        }
        __p = v77;
        unint64_t v337 = (unint64_t)v78;
        v338 = v78;
        v79 = (uint64_t *)v333;
        if (v333 != &v334)
        {
          do
          {
            void *v77 = v79[4];
            v82 = (uint64_t *)v79[1];
            if (v82)
            {
              do
              {
                v83 = (uint64_t **)v82;
                v82 = (uint64_t *)*v82;
              }
              while (v82);
            }
            else
            {
              do
              {
                v83 = (uint64_t **)v79[2];
                BOOL v84 = *v83 == v79;
                v79 = (uint64_t *)v83;
              }
              while (!v84);
            }
            ++v77;
            v79 = (uint64_t *)v83;
          }
          while (v83 != &v334);
        }
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v333, v334);
      }
      if (v346 != v348) {
        free(v346);
      }
      if (!matched) {
        goto LABEL_420;
      }
      goto LABEL_100;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
    if (!v53)
    {
LABEL_100:
      v80 = __p;
      if ((void *)v337 == __p)
      {
        v346 = *(uint64_t **)(*(void *)(v317 + 72) + 24);
        uint64_t v7 = 1;
        mlir::ValueRange::ValueRange(v345, (uint64_t)&v346, 1uLL);
        (*((void (**)(mlir::UnitAttr **, uint64_t, unint64_t, unint64_t))*v316 + 3))(v316, v317, v345[0], v345[1]);
        goto LABEL_422;
      }
      uint64_t v81 = v317;
      if (*(uint64_t *)__p > -5)
      {
        uint64_t v7 = 1;
        goto LABEL_423;
      }
      v332 = *(uint64_t **)(v330 + 24);
      v318 = (mlir::Builder *)(v316 + 1);
LABEL_113:
      if (__p != (void *)v337)
      {
        v85 = v332;
        v342 = v332;
        v346 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v332[1] & 0xFFFFFFFFFFFFFFF8));
        uint64_t v347 = v86;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
        uint64_t v88 = v87;
        v90 = (char *)__p;
        v89 = (char *)v337;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
        if (v91)
        {
          if (v91 >> 61) {
            goto LABEL_425;
          }
          v92 = v89;
          uint64_t v93 = 8 * v91;
          v94 = (char *)operator new(8 * v91);
          v331 = &v94[v93];
          v89 = v92;
        }
        else
        {
          v331 = 0;
          v94 = 0;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
        uint64_t v321 = v88;
        if (v95)
        {
          if (v95 >> 61) {
            goto LABEL_425;
          }
          uint64_t v96 = 8 * v95;
          v97 = (char *)operator new(8 * v95);
          v324 = &v97[v96];
          v98 = v89 - 8;
          uint64_t v99 = *((void *)v89 - 1);
          if (v99 != -1)
          {
            v100 = v97;
            v101 = v97;
            uint64_t v88 = v321;
LABEL_130:
            v333 = (uint64_t **)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v85[1] & 0xFFFFFFFFFFFFFFF8));
            v334 = v102;
            uint64_t v103 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v333);
            uint64_t PositiveAxis = mlir::getPositiveAxis(-1, v88);
            uint64_t v105 = PositiveAxis;
            v320 = v90;
            v325 = v100;
            if (v94 >= v331)
            {
              unint64_t v107 = (v331 - v94) >> 2;
              if (v107 <= 1) {
                unint64_t v107 = 1;
              }
              unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              if ((unint64_t)(v331 - v94) < 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = v107;
              }
              if (v108 >> 61) {
                goto LABEL_426;
              }
              uint64_t v109 = 8 * v108;
              v110 = (char *)operator new(8 * v108);
              *(void *)v110 = *(void *)(v103 + 8 * v105);
              v106 = v110 + 8;
              v331 = &v110[v109];
              if (v94) {
                operator delete(v94);
              }
              v94 = v110;
              v90 = v320;
            }
            else
            {
              *(void *)v94 = *(void *)(v103 + 8 * PositiveAxis);
              v106 = v94 + 8;
            }
            BOOL v111 = v99 == -2;
            if (v88 < 2)
            {
              uint64_t v112 = 1;
LABEL_142:
              if (v106 < v331)
              {
                *(void *)v106 = v112;
                v113 = v106 + 8;
                v114 = v325;
                if (!v111)
                {
LABEL_283:
                  if (v94 != v113)
                  {
                    v207 = v113 - 8;
                    if (v113 - 8 > v94)
                    {
                      v208 = v94 + 8;
                      do
                      {
                        uint64_t v209 = *((void *)v208 - 1);
                        *((void *)v208 - 1) = *(void *)v207;
                        *(void *)v207 = v209;
                        v207 -= 8;
                        BOOL v210 = v208 >= v207;
                        v208 += 8;
                      }
                      while (!v210);
                    }
                  }
                  if (v101 != v114)
                  {
                    v211 = v114 - 8;
                    if (v114 - 8 > v101)
                    {
                      v212 = v101 + 8;
                      do
                      {
                        uint64_t v213 = *((void *)v212 - 1);
                        *((void *)v212 - 1) = *(void *)v211;
                        *(void *)v211 = v213;
                        v211 -= 8;
                        BOOL v210 = v212 >= v211;
                        v212 += 8;
                      }
                      while (!v210);
                    }
                  }
                  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v342);
                  v333 = (uint64_t **)v332;
                  v344 = (mlir::GenericProgramPoint *)((v113 - v94) >> 3);
                  uint64_t IntegerType = mlir::Builder::getIntegerType(v318, 0x40u, 1);
                  v216 = (void *)mlir::RankedTensorType::get((uint64_t)&v344, 1, IntegerType, 0);
                  v217 = v216;
                  if (!v216) {
                    goto LABEL_302;
                  }
                  uint64_t v218 = *v216;
                  unint64_t v219 = mlir::TypeID::get<mlir::ShapedType>();
                  unint64_t v220 = *(unsigned int *)(v218 + 16);
                  if (!v220) {
                    goto LABEL_302;
                  }
                  v221 = *(void **)(v218 + 8);
                  v222 = &v221[2 * v220];
                  do
                  {
                    unint64_t v223 = v220 >> 1;
                    v224 = &v221[2 * (v220 >> 1)];
                    unint64_t v226 = *v224;
                    v225 = v224 + 2;
                    v220 += ~(v220 >> 1);
                    if (v226 < v219) {
                      v221 = v225;
                    }
                    else {
                      unint64_t v220 = v223;
                    }
                  }
                  while (v220);
                  if (v221 != v222 && *v221 == v219) {
                    uint64_t v227 = v221[1];
                  }
                  else {
LABEL_302:
                  }
                    uint64_t v227 = 0;
                  v343 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v217, v227, v94, v113 - v94, 8, 1, 1);
                  v344 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, Loc, &v343);
                  v332 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v318, Loc, (uint64_t *)&v333, &v344)- 16);
                  std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v101, v114, (v114 - v101) >> 3);
                  if (v101) {
                    operator delete(v101);
                  }
                  if (v94) {
                    operator delete(v94);
                  }
                  v342 = v332;
                  v346 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v332[1] & 0xFFFFFFFFFFFFFFF8));
                  uint64_t v347 = v228;
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
                  if (v229)
                  {
                    if (v229 >> 61) {
                      goto LABEL_425;
                    }
                    uint64_t v230 = 8 * v229;
                    v231 = (char *)operator new(8 * v229);
                    v232 = &v231[v230];
                  }
                  else
                  {
                    v231 = 0;
                    v232 = 0;
                  }
                  uint64_t v233 = ((uint64_t)(v337 - (void)__p) >> 3) - 1;
                  if ((uint64_t)(v337 - (void)__p) < 1)
                  {
                    uint64_t v236 = ((uint64_t)(v337 - (void)__p) >> 3) - 1;
                    v234 = (uint64_t *)v231;
                    goto LABEL_359;
                  }
                  v234 = (uint64_t *)v231;
                  while (1)
                  {
                    uint64_t v237 = *((void *)__p + v233);
                    if (v237 < -4)
                    {
                      v235 = v231;
                      uint64_t v236 = v233;
LABEL_346:
                      if (v235 != (char *)v234)
                      {
                        uint64_t v253 = mlir::Value::getLoc((mlir::Value *)&v342);
                        v333 = (uint64_t **)v342;
                        v344 = (mlir::GenericProgramPoint *)((v235 - (char *)v234) >> 3);
                        uint64_t v254 = mlir::Builder::getIntegerType(v318, 0x40u, 1);
                        v255 = (void *)mlir::RankedTensorType::get((uint64_t)&v344, 1, v254, 0);
                        v256 = v255;
                        if (!v255) {
                          goto LABEL_356;
                        }
                        uint64_t v257 = *v255;
                        unint64_t v258 = mlir::TypeID::get<mlir::ShapedType>();
                        unint64_t v259 = *(unsigned int *)(v257 + 16);
                        if (!v259) {
                          goto LABEL_356;
                        }
                        v260 = *(void **)(v257 + 8);
                        v261 = &v260[2 * v259];
                        do
                        {
                          unint64_t v262 = v259 >> 1;
                          v263 = &v260[2 * (v259 >> 1)];
                          unint64_t v265 = *v263;
                          v264 = v263 + 2;
                          v259 += ~(v259 >> 1);
                          if (v265 < v258) {
                            v260 = v264;
                          }
                          else {
                            unint64_t v259 = v262;
                          }
                        }
                        while (v259);
                        if (v260 != v261 && *v260 == v258) {
                          uint64_t v266 = v260[1];
                        }
                        else {
LABEL_356:
                        }
                          uint64_t v266 = 0;
                        char v267 = 1;
                        v343 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v256, v266, v234, v235 - (char *)v234, 8, 1, 1);
                        v344 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, v253, &v343)- 16);
                        LOBYTE(v343) = 1;
                        v268 = mlir::OpBuilder::create<mlir::mps::ReductionArgMinOp,mlir::Value &,mlir::Value &,BOOL>((mlir::UnitAttr **)v318, v253, (uint64_t *)&v333, (uint64_t *)&v344, (unsigned __int8 *)&v343);
                        if (mlir::mps::inferTypes(v268, v269))
                        {
                          v332 = (uint64_t *)((char *)v268 - 16);
                          goto LABEL_359;
                        }
LABEL_406:
                        if (v234) {
                          operator delete(v234);
                        }
                        uint64_t v81 = v317;
                        if ((v267 & 1) == 0) {
                          goto LABEL_113;
                        }
                        uint64_t v7 = 0;
LABEL_422:
                        v80 = __p;
                        if (!__p) {
                          return v7;
                        }
LABEL_423:
                        unint64_t v337 = (unint64_t)v80;
                        operator delete(v80);
                        return v7;
                      }
LABEL_359:
                      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
                      if (v270)
                      {
                        if (!(v270 >> 61))
                        {
                          uint64_t v271 = 8 * v270;
                          v272 = (char *)operator new(8 * v270);
                          v273 = &v272[v271];
                          v274 = v272;
                          if ((v236 & 0x8000000000000000) == 0) {
                            goto LABEL_367;
                          }
LABEL_403:
                          std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v274, v272, (v272 - v274) >> 3);
                          if (v274) {
                            operator delete(v274);
                          }
                          char v267 = 0;
                          goto LABEL_406;
                        }
LABEL_425:
                        abort();
                      }
                      v272 = 0;
                      v273 = 0;
                      v274 = 0;
                      if (v236 < 0) {
                        goto LABEL_403;
                      }
LABEL_367:
                      while (2)
                      {
                        uint64_t v275 = *((void *)__p + v236);
                        if (v272 < v273)
                        {
                          *(void *)v272 = v275;
                          v272 += 8;
                        }
                        else
                        {
                          uint64_t v276 = (v272 - v274) >> 3;
                          unint64_t v277 = v276 + 1;
                          if ((unint64_t)(v276 + 1) >> 61) {
                            goto LABEL_425;
                          }
                          if ((v273 - v274) >> 2 > v277) {
                            unint64_t v277 = (v273 - v274) >> 2;
                          }
                          if ((unint64_t)(v273 - v274) >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v278 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v278 = v277;
                          }
                          if (v278)
                          {
                            if (v278 >> 61) {
                              goto LABEL_426;
                            }
                            v279 = operator new(8 * v278);
                          }
                          else
                          {
                            v279 = 0;
                          }
                          v280 = &v279[8 * v276];
                          *(void *)v280 = v275;
                          v281 = v280 + 8;
                          if (v272 != v274)
                          {
                            unint64_t v282 = v272 - v274 - 8;
                            if (v282 < 0x168)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            unint64_t v285 = (v272 - 8 - v274) & 0xFFFFFFFFFFFFFFF8;
                            if (&v279[v272 - v274 - 8 - v285] > &v279[v272 - v274 - 8])
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if (&v272[-v285 - 8] > v272 - 8)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if ((unint64_t)(v274 - v279) < 0x20)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            uint64_t v286 = (v282 >> 3) + 1;
                            uint64_t v287 = 8 * (v286 & 0x3FFFFFFFFFFFFFFCLL);
                            v283 = &v272[-v287];
                            v280 -= v287;
                            v288 = &v279[8 * v276 - 16];
                            v289 = v272 - 16;
                            uint64_t v290 = v286 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v291 = *(_OWORD *)v289;
                              *(v288 - 1) = *((_OWORD *)v289 - 1);
                              _OWORD *v288 = v291;
                              v288 -= 2;
                              v289 -= 32;
                              v290 -= 4;
                            }
                            while (v290);
                            if (v286 != (v286 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_381:
                                uint64_t v284 = *((void *)v283 - 1);
                                v283 -= 8;
                                *((void *)v280 - 1) = v284;
                                v280 -= 8;
                              }
                              while (v283 != v274);
                            }
                          }
                          v273 = &v279[8 * v278];
                          if (v274) {
                            operator delete(v274);
                          }
                          v274 = v280;
                          v272 = v281;
                        }
                        BOOL v293 = v236-- <= 0;
                        if (v293)
                        {
                          v292 = v272 - 8;
                          BOOL v293 = v274 != v272 && v292 > v274;
                          if (v293)
                          {
                            v294 = v274 + 8;
                            do
                            {
                              uint64_t v295 = *((void *)v294 - 1);
                              *((void *)v294 - 1) = *(void *)v292;
                              *(void *)v292 = v295;
                              v292 -= 8;
                              BOOL v210 = v294 >= v292;
                              v294 += 8;
                            }
                            while (!v210);
                          }
                          goto LABEL_403;
                        }
                        continue;
                      }
                    }
                    if (v231 >= v232) {
                      break;
                    }
                    *(void *)v231 = v237;
                    v235 = v231 + 8;
LABEL_314:
                    uint64_t v236 = v233 - 1;
                    v231 = v235;
                    BOOL v293 = v233-- <= 0;
                    if (v293) {
                      goto LABEL_346;
                    }
                  }
                  uint64_t v238 = (v231 - (char *)v234) >> 3;
                  unint64_t v239 = v238 + 1;
                  if ((unint64_t)(v238 + 1) >> 61) {
                    goto LABEL_425;
                  }
                  if ((v232 - (char *)v234) >> 2 > v239) {
                    unint64_t v239 = (v232 - (char *)v234) >> 2;
                  }
                  if ((unint64_t)(v232 - (char *)v234) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v240 = v239;
                  }
                  if (v240)
                  {
                    if (v240 >> 61) {
                      goto LABEL_426;
                    }
                    v241 = operator new(8 * v240);
                  }
                  else
                  {
                    v241 = 0;
                  }
                  v242 = (uint64_t *)&v241[8 * v238];
                  uint64_t *v242 = v237;
                  v235 = (char *)(v242 + 1);
                  if (v231 != (char *)v234)
                  {
                    unint64_t v243 = v231 - (char *)v234 - 8;
                    if (v243 >= 0x168)
                    {
                      unint64_t v246 = (v231 - 8 - (char *)v234) & 0xFFFFFFFFFFFFFFF8;
                      if (&v241[v231 - (char *)v234 - 8 - v246] > &v241[v231 - (char *)v234 - 8])
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if (&v231[-v246 - 8] > v231 - 8)
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if ((unint64_t)((char *)v234 - v241) >= 0x20)
                      {
                        uint64_t v247 = (v243 >> 3) + 1;
                        uint64_t v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
                        v244 = (uint64_t *)&v231[-v248];
                        v242 = (uint64_t *)((char *)v242 - v248);
                        v249 = &v241[8 * v238 - 16];
                        v250 = (long long *)(v231 - 16);
                        uint64_t v251 = v247 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v252 = *v250;
                          *(v249 - 1) = *(v250 - 1);
                          _OWORD *v249 = v252;
                          v249 -= 2;
                          v250 -= 2;
                          v251 -= 4;
                        }
                        while (v251);
                        if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL)) {
                          goto LABEL_331;
                        }
                      }
                      else
                      {
                        v244 = (uint64_t *)v231;
                      }
                    }
                    else
                    {
                      v244 = (uint64_t *)v231;
                    }
                    do
                    {
                      uint64_t v245 = *--v244;
                      *--v242 = v245;
                    }
                    while (v244 != v234);
                  }
LABEL_331:
                  v232 = &v241[8 * v240];
                  if (v234) {
                    operator delete(v234);
                  }
                  v234 = v242;
                  goto LABEL_314;
                }
LABEL_260:
                uint64_t v191 = mlir::getNegativeAxis(0, (v113 - v94) >> 3);
                uint64_t v192 = v191;
                if (v114 < v324)
                {
                  *(void *)v114 = v191;
                  v114 += 8;
                  goto LABEL_283;
                }
                int64_t v193 = v114 - v101;
                v194 = v101;
                uint64_t v195 = (v114 - v101) >> 3;
                unint64_t v196 = v195 + 1;
                if ((unint64_t)(v195 + 1) >> 61) {
                  goto LABEL_425;
                }
                v197 = v114;
                v198 = v194;
                unint64_t v199 = v324 - v194;
                unint64_t v200 = (v324 - v194) >> 2;
                if (v200 > v196) {
                  unint64_t v196 = v200;
                }
                if (v199 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
                }
                if (v196)
                {
                  if (v196 >> 61) {
                    goto LABEL_426;
                  }
                  v201 = (char *)operator new(8 * v196);
                }
                else
                {
                  v201 = 0;
                }
                v202 = &v201[8 * v195];
                *(void *)v202 = v192;
                v114 = v202 + 8;
                if (v197 == v198)
                {
                  v205 = v198;
                }
                else
                {
                  unint64_t v203 = v197 - v198 - 8;
                  if (v203 >= 0x58 && (unint64_t)(v197 - v201 - v193) >= 0x20)
                  {
                    uint64_t v302 = (v203 >> 3) + 1;
                    uint64_t v303 = 8 * (v302 & 0x3FFFFFFFFFFFFFFCLL);
                    v204 = &v197[-v303];
                    v202 -= v303;
                    v304 = &v201[8 * v195 - 16];
                    v305 = v197 - 16;
                    uint64_t v306 = v302 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v307 = *(_OWORD *)v305;
                      *((_OWORD *)v304 - 1) = *((_OWORD *)v305 - 1);
                      *(_OWORD *)v304 = v307;
                      v304 -= 32;
                      v305 -= 32;
                      v306 -= 4;
                    }
                    while (v306);
                    v205 = v198;
                    if (v302 == (v302 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_280;
                    }
                  }
                  else
                  {
                    v204 = v197;
                    v205 = v198;
                  }
                  do
                  {
                    uint64_t v206 = *((void *)v204 - 1);
                    v204 -= 8;
                    *((void *)v202 - 1) = v206;
                    v202 -= 8;
                  }
                  while (v204 != v205);
                }
LABEL_280:
                if (v205) {
                  operator delete(v205);
                }
                v101 = v202;
                goto LABEL_283;
              }
              v183 = v101;
              uint64_t v184 = (v106 - v94) >> 3;
              unint64_t v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61) {
                goto LABEL_425;
              }
              if ((v331 - v94) >> 2 > v185) {
                unint64_t v185 = (v331 - v94) >> 2;
              }
              if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
              }
              if (v185)
              {
                if (v185 >> 61) {
                  goto LABEL_426;
                }
                v186 = operator new(8 * v185);
              }
              else
              {
                v186 = 0;
              }
              v187 = (uint64_t *)&v186[8 * v184];
              uint64_t *v187 = v112;
              v113 = (char *)(v187 + 1);
              if (v106 == v94)
              {
                v101 = v183;
                v114 = v325;
                if (!v94)
                {
LABEL_259:
                  v94 = (char *)v187;
                  if (!v111) {
                    goto LABEL_283;
                  }
                  goto LABEL_260;
                }
LABEL_258:
                operator delete(v94);
                goto LABEL_259;
              }
              unint64_t v188 = v106 - v94 - 8;
              if (v188 >= 0x58 && (unint64_t)(v94 - v186) >= 0x20)
              {
                uint64_t v296 = (v188 >> 3) + 1;
                uint64_t v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
                v189 = &v106[-v297];
                v187 = (uint64_t *)((char *)v187 - v297);
                v298 = &v186[8 * v184 - 16];
                v299 = v106 - 16;
                uint64_t v300 = v296 & 0x3FFFFFFFFFFFFFFCLL;
                v114 = v325;
                do
                {
                  long long v301 = *(_OWORD *)v299;
                  *(v298 - 1) = *((_OWORD *)v299 - 1);
                  _OWORD *v298 = v301;
                  v298 -= 2;
                  v299 -= 32;
                  v300 -= 4;
                }
                while (v300);
                v101 = v183;
                if (v296 == (v296 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_257:
                  if (!v94) {
                    goto LABEL_259;
                  }
                  goto LABEL_258;
                }
              }
              else
              {
                v189 = v106;
                v101 = v183;
                v114 = v325;
              }
              do
              {
                uint64_t v190 = *((void *)v189 - 1);
                v189 -= 8;
                *--v187 = v190;
              }
              while (v189 != v94);
              goto LABEL_257;
            }
            uint64_t v115 = v99;
            uint64_t v328 = v103;
            uint64_t v329 = -v88;
            uint64_t v116 = -2;
            uint64_t v112 = 1;
            while (1)
            {
              if (!v111)
              {
                if (v115 == v116)
                {
                  v119 = v331;
                  if (v106 < v331)
                  {
                    *(void *)v106 = v112;
                    v120 = v106 + 8;
LABEL_184:
                    v331 = v119;
                    uint64_t v112 = *(void *)(v328 + 8 * mlir::getPositiveAxis(v115, v88));
                    if (v89 - 8 == v90)
                    {
                      uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
                      BOOL v111 = 1;
                      v106 = v120;
                      v89 = v90;
                    }
                    else
                    {
                      uint64_t v115 = *((void *)v89 - 2);
                      BOOL v111 = 1;
                      v106 = v120;
                      v89 -= 8;
                    }
                    uint64_t v103 = v328;
                    goto LABEL_146;
                  }
                  uint64_t v327 = v115;
                  uint64_t v124 = (v106 - v94) >> 3;
                  unint64_t v125 = v124 + 1;
                  if ((unint64_t)(v124 + 1) >> 61) {
                    goto LABEL_425;
                  }
                  if ((v331 - v94) >> 2 > v125) {
                    unint64_t v125 = (v331 - v94) >> 2;
                  }
                  if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v126 = v125;
                  }
                  v322 = v89;
                  if (v126)
                  {
                    if (v126 >> 61) {
                      goto LABEL_426;
                    }
                    v127 = operator new(8 * v126);
                  }
                  else
                  {
                    v127 = 0;
                  }
                  v133 = (uint64_t *)&v127[8 * v124];
                  uint64_t *v133 = v112;
                  v120 = (char *)(v133 + 1);
                  if (v106 != v94)
                  {
                    unint64_t v134 = v106 - v94 - 8;
                    if (v134 < 0x168
                      || (unint64_t v162 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8,
                          &v127[v106 - v94 - 8 - v162] > &v127[v106 - v94 - 8])
                      || &v106[-v162 - 8] > v106 - 8
                      || (unint64_t)(v94 - v127) < 0x20)
                    {
                      v135 = v106;
                      v90 = v320;
                      uint64_t v88 = v321;
                    }
                    else
                    {
                      uint64_t v163 = (v134 >> 3) + 1;
                      uint64_t v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                      v135 = &v106[-v164];
                      v133 = (uint64_t *)((char *)v133 - v164);
                      v165 = &v127[8 * v124 - 16];
                      v166 = v106 - 16;
                      uint64_t v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                      uint64_t v88 = v321;
                      do
                      {
                        long long v168 = *(_OWORD *)v166;
                        *(v165 - 1) = *((_OWORD *)v166 - 1);
                        _OWORD *v165 = v168;
                        v165 -= 2;
                        v166 -= 32;
                        v167 -= 4;
                      }
                      while (v167);
                      v90 = v320;
                      if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_181:
                        v119 = &v127[8 * v126];
                        if (v94) {
                          goto LABEL_182;
                        }
                        goto LABEL_183;
                      }
                    }
                    do
                    {
                      uint64_t v136 = *((void *)v135 - 1);
                      v135 -= 8;
                      *--v133 = v136;
                    }
                    while (v135 != v94);
                    goto LABEL_181;
                  }
                  v90 = v320;
                  uint64_t v88 = v321;
                  v119 = &v127[8 * v126];
                  if (v94) {
LABEL_182:
                  }
                    operator delete(v94);
LABEL_183:
                  v94 = (char *)v133;
                  v89 = v322;
                  uint64_t v115 = v327;
                  goto LABEL_184;
                }
                uint64_t v117 = v115;
                uint64_t v118 = mlir::getPositiveAxis(v116, v88);
                uint64_t v115 = v117;
                BOOL v111 = 0;
                v112 *= *(void *)(v103 + 8 * v118);
                goto LABEL_146;
              }
              if (v115 == v116)
              {
                v112 *= *(void *)(v103 + 8 * mlir::getPositiveAxis(v115, v88));
                if (v89 - 8 == v90)
                {
                  uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
                  BOOL v111 = 1;
                  v89 = v90;
                }
                else
                {
                  uint64_t v115 = *((void *)v89 - 2);
                  BOOL v111 = 1;
                  v89 -= 8;
                }
                goto LABEL_146;
              }
              v121 = v331;
              uint64_t v326 = v115;
              if (v106 >= v331) {
                break;
              }
              *(void *)v106 = v112;
              v122 = v106 + 8;
              v123 = (uint64_t *)v325;
LABEL_196:
              uint64_t v112 = *(void *)(v103 + 8 * mlir::getPositiveAxis(v116, v88));
              uint64_t v142 = mlir::getNegativeAxis(0, (v122 - v94) >> 3);
              v143 = v122;
              uint64_t v144 = v142;
              v331 = v121;
              if (v123 >= (uint64_t *)v324)
              {
                v319 = v143;
                v145 = v101;
                uint64_t v146 = (char *)v123 - v101;
                uint64_t v147 = v146 >> 3;
                unint64_t v148 = (v146 >> 3) + 1;
                if (v148 >> 61) {
                  goto LABEL_425;
                }
                v149 = v123;
                v150 = (uint64_t *)v145;
                unint64_t v151 = v324 - v145;
                unint64_t v152 = (v324 - v145) >> 2;
                if (v152 > v148) {
                  unint64_t v148 = v152;
                }
                if (v151 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v153 = v148;
                }
                v323 = v89;
                if (v153)
                {
                  if (v153 >> 61) {
                    goto LABEL_426;
                  }
                  v154 = (char *)operator new(8 * v153);
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[8 * v147];
                *(void *)v155 = v144;
                v156 = v155 + 8;
                if (v149 == v150)
                {
                  v90 = v320;
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                  goto LABEL_218;
                }
                unint64_t v157 = (char *)v149 - (char *)v150 - 8;
                v90 = v320;
                if (v157 < 0x168
                  || (unint64_t v176 = ((char *)(v149 - 1) - (char *)v150) & 0xFFFFFFFFFFFFFFF8,
                      &v154[v146 - 8 - v176] > &v154[v146 - 8])
                  || (uint64_t *)((char *)v149 - v176 - 8) > v149 - 1
                  || (unint64_t)((char *)v149 - v154 - v146) < 0x20)
                {
                  v158 = v149;
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                }
                else
                {
                  uint64_t v177 = (v157 >> 3) + 1;
                  uint64_t v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                  v158 = &v149[v178 / 0xFFFFFFFFFFFFFFF8];
                  v155 -= v178;
                  v179 = &v154[8 * v147 - 16];
                  v180 = v149 - 2;
                  uint64_t v181 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v182 = *(_OWORD *)v180;
                    *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
                    *(_OWORD *)v179 = v182;
                    v179 -= 32;
                    v180 -= 4;
                    v181 -= 4;
                  }
                  while (v181);
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                  if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_218:
                    v324 = &v154[8 * v153];
                    if (v150)
                    {
                      v160 = v150;
                      v161 = v156;
                      operator delete(v160);
                      BOOL v111 = 0;
                      v101 = v155;
                      v325 = v161;
                    }
                    else
                    {
                      BOOL v111 = 0;
                      v101 = v155;
                      v325 = v156;
                    }
                    v106 = v319;
                    v89 = v323;
                    uint64_t v115 = v326;
                    goto LABEL_146;
                  }
                }
                do
                {
                  uint64_t v159 = *--v158;
                  *((void *)v155 - 1) = v159;
                  v155 -= 8;
                }
                while (v158 != v150);
                goto LABEL_218;
              }
              BOOL v111 = 0;
              uint64_t *v123 = v142;
              v325 = (char *)(v123 + 1);
              v106 = v143;
              v90 = v320;
              uint64_t v115 = v326;
LABEL_146:
              BOOL v293 = v116-- <= v329;
              if (v293) {
                goto LABEL_142;
              }
            }
            uint64_t v128 = (v106 - v94) >> 3;
            unint64_t v129 = v128 + 1;
            if ((unint64_t)(v128 + 1) >> 61) {
              goto LABEL_425;
            }
            if ((v331 - v94) >> 2 > v129) {
              unint64_t v129 = (v331 - v94) >> 2;
            }
            if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v130 = v129;
            }
            if (v130)
            {
              if (v130 >> 61) {
                goto LABEL_426;
              }
              v131 = v89;
              v132 = operator new(8 * v130);
            }
            else
            {
              v131 = v89;
              v132 = 0;
            }
            v137 = (uint64_t *)&v132[8 * v128];
            uint64_t *v137 = v112;
            v138 = (char *)(v137 + 1);
            if (v106 == v94)
            {
              uint64_t v88 = v321;
              v123 = (uint64_t *)v325;
              v122 = (char *)(v137 + 1);
              v121 = &v132[8 * v130];
              if (!v94) {
                goto LABEL_195;
              }
              goto LABEL_194;
            }
            unint64_t v139 = v106 - v94 - 8;
            if (v139 < 0x168
              || (unint64_t v169 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8, &v132[v106 - v94 - 8 - v169] > &v132[v106 - v94 - 8])
              || &v106[-v169 - 8] > v106 - 8
              || (unint64_t)(v94 - v132) < 0x20)
            {
              v140 = v106;
              uint64_t v88 = v321;
              v123 = (uint64_t *)v325;
              v122 = (char *)(v137 + 1);
            }
            else
            {
              uint64_t v170 = (v139 >> 3) + 1;
              uint64_t v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
              v140 = &v106[-v171];
              v137 = (uint64_t *)((char *)v137 - v171);
              v172 = &v132[8 * v128 - 16];
              v173 = v106 - 16;
              uint64_t v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v88 = v321;
              do
              {
                long long v175 = *(_OWORD *)v173;
                *(v172 - 1) = *((_OWORD *)v173 - 1);
                _OWORD *v172 = v175;
                v172 -= 2;
                v173 -= 32;
                v174 -= 4;
              }
              while (v174);
              v123 = (uint64_t *)v325;
              v122 = v138;
              if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_193:
                v121 = &v132[8 * v130];
                if (!v94)
                {
LABEL_195:
                  v94 = (char *)v137;
                  v89 = v131;
                  uint64_t v103 = v328;
                  goto LABEL_196;
                }
LABEL_194:
                operator delete(v94);
                goto LABEL_195;
              }
            }
            do
            {
              uint64_t v141 = *((void *)v140 - 1);
              v140 -= 8;
              *--v137 = v141;
            }
            while (v140 != v94);
            goto LABEL_193;
          }
          uint64_t v88 = v321;
        }
        else
        {
          v98 = v89 - 8;
          uint64_t v99 = *((void *)v89 - 1);
          if (v99 != -1)
          {
            v101 = 0;
            v100 = 0;
            v324 = 0;
            goto LABEL_130;
          }
          v97 = (char *)operator new(8uLL);
          v324 = v97 + 8;
        }
        *(void *)v97 = -1;
        v100 = v97 + 8;
        if (v98 == v90)
        {
          uint64_t v99 = 0x7FFFFFFFFFFFFFFFLL;
          v89 = v90;
        }
        else
        {
          uint64_t v99 = *((void *)v89 - 2);
          v89 = v98;
        }
        v101 = v97;
        goto LABEL_130;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      v346 = v308;
      uint64_t v309 = mlir::Builder::getIntegerType(v318, 0x40u, 1);
      v333 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)&v346, 1, v309, 0);
      v310 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      uint64_t v311 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v346, v310, (unsigned char *)(v311 + 8 * v312));
      uint64_t v313 = *(void *)(v81 + 24);
      v314 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v333);
      v343 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v314, v315, v346, 8 * v347, 8, 1, 1);
      v344 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, v313, &v343);
      mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(v316, v81, (uint64_t *)&v332, &v344);
      if (v346 != v348) {
        free(v346);
      }
LABEL_420:
      uint64_t v7 = 1;
      goto LABEL_422;
    }
    uint64_t v54 = v53;
    v55 = (char *)v337;
    while (1)
    {
      uint64_t v57 = -v54;
      if (v55 >= v338) {
        break;
      }
      *(void *)v55 = v57;
      v56 = v55 + 8;
LABEL_61:
      unint64_t v337 = (unint64_t)v56;
      v55 = v56;
      if (!--v54) {
        goto LABEL_100;
      }
    }
    v58 = (char *)__p;
    int64_t v59 = v55 - (unsigned char *)__p;
    uint64_t v60 = (v55 - (unsigned char *)__p) >> 3;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61) {
      goto LABEL_425;
    }
    uint64_t v62 = v338 - (unsigned char *)__p;
    if ((v338 - (unsigned char *)__p) >> 2 > v61) {
      unint64_t v61 = v62 >> 2;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      if (v63 >> 61) {
LABEL_426:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      v64 = operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[8 * v60];
    *(void *)v65 = v57;
    v56 = v65 + 8;
    if (v55 == v58) {
      goto LABEL_77;
    }
    unint64_t v66 = v55 - v58 - 8;
    if (v66 < 0x168)
    {
      v67 = v55;
      goto LABEL_76;
    }
    unint64_t v69 = (v55 - 8 - v58) & 0xFFFFFFFFFFFFFFF8;
    if (&v64[v59 - 8 - v69] > &v64[v59 - 8])
    {
      v67 = v55;
    }
    else
    {
      if (&v55[-v69 - 8] <= v55 - 8)
      {
        if ((unint64_t)(v55 - v64 - v59) < 0x20)
        {
          v67 = v55;
          goto LABEL_76;
        }
        uint64_t v70 = (v66 >> 3) + 1;
        uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v55[-v71];
        v65 -= v71;
        v72 = &v64[8 * v60 - 16];
        v73 = v55 - 16;
        uint64_t v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          _OWORD *v72 = v75;
          v72 -= 2;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_76;
        }
LABEL_77:
        __p = v65;
        v338 = &v64[8 * v63];
        if (v58) {
          operator delete(v58);
        }
        goto LABEL_61;
      }
      v67 = v55;
    }
    do
    {
LABEL_76:
      uint64_t v68 = *((void *)v67 - 1);
      v67 -= 8;
      *((void *)v65 - 1) = v68;
      v65 -= 8;
    }
    while (v67 != v58);
    goto LABEL_77;
  }
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReductionArgMinOp,mlir::Value &,mlir::Value &,BOOL>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_argmin", (const unsigned __int8 *)0x14, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    unint64_t v19[2] = (uint64_t)"mps.reduction_argmin";
    v19[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::mps::ReductionArgMinOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  unint64_t v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionArgMinOp,void>::id) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void *mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionMaxOp>::~CanonicalizeReductionAxes(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionMaxOp>::~CanonicalizeReductionAxes(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::UnitAttr **a3)
{
  v349[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9);
    if (v6)
    {
      if (!InherentAttr) {
        return 0;
      }
      goto LABEL_6;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
  if (InherentAttr)
  {
LABEL_6:
    if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
      return 0;
    }
    v316 = a3;
    uint64_t v9 = *(void *)(*(void *)(a2 + 72) + 24);
    uint64_t v10 = (uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v10) {
      goto LABEL_18;
    }
    uint64_t v11 = *v10;
    unint64_t v12 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v13 = *(unsigned int *)(v11 + 16);
    if (!v13) {
      goto LABEL_18;
    }
    size_t v14 = *(void **)(v11 + 8);
    int v15 = &v14[2 * v13];
    do
    {
      unint64_t v16 = v13 >> 1;
      unint64_t v17 = &v14[2 * (v13 >> 1)];
      unint64_t v19 = *v17;
      __int16 v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12) {
        size_t v14 = v18;
      }
      else {
        unint64_t v13 = v16;
      }
    }
    while (v13);
    if (v14 != v15 && *v14 == v12) {
      uint64_t v20 = v14[1];
    }
    else {
LABEL_18:
    }
      uint64_t v20 = 0;
    v341[0] = v10;
    v341[1] = v20;
    uint64_t v21 = (void *)(*(void *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v21;
    unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v24 = *(unsigned int *)(v22 + 16);
    if (!v24) {
      goto LABEL_28;
    }
    v25 = *(void **)(v22 + 8);
    uint64_t v26 = &v25[2 * v24];
    do
    {
      unint64_t v27 = v24 >> 1;
      uint64_t v28 = &v25[2 * (v24 >> 1)];
      unint64_t v30 = *v28;
      uint64_t v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23) {
        v25 = v29;
      }
      else {
        unint64_t v24 = v27;
      }
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
    {
      uint64_t v38 = v25[1];
      v339 = v21;
      uint64_t v340 = v38;
      if (!v10) {
        return 0;
      }
    }
    else
    {
LABEL_28:
      v339 = v21;
      uint64_t v340 = 0;
      if (!v10) {
        return 0;
      }
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v341)) {
      return 0;
    }
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
    if (v32)
    {
      uint64_t v33 = 8 * v32;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v33 -= 8;
        if (!v33) {
          goto LABEL_34;
        }
      }
      return 0;
    }
LABEL_34:
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      uint64_t v330 = *(void *)(a2 + 72);
      unint64_t v34 = *(unsigned int *)(a2 + 68);
    }
    else
    {
      uint64_t v330 = 0;
      unint64_t v34 = 0;
    }
    __p = 0;
    unint64_t v337 = 0;
    v338 = 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
    uint64_t v317 = a2;
    if (v35)
    {
      if (v35 >> 61) {
        goto LABEL_425;
      }
      uint64_t v36 = 8 * v35;
      v37 = (char *)operator new(8 * v35);
      __p = &v37[v337 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v337 = (unint64_t)__p;
      v338 = &v37[v36];
    }
    if (v34 >= 2)
    {
      uint64_t v39 = *(void *)(v330 + 56);
      uint64_t v347 = v349;
      uint64_t v348 = 0x400000000;
      char matched = mlir::matchConstantWithIntVector<long long>(v39, (uint64_t)&v347);
      if (matched)
      {
        v334 = 0;
        size_t v335 = 0;
        v333 = &v334;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
        if (v348)
        {
          uint64_t v42 = v41;
          v43 = (mlir **)v347;
          v44 = (mlir **)&v347[v348];
          do
          {
            uint64_t NegativeAxis = mlir::getNegativeAxis(*v43, v42);
            uint64_t v47 = NegativeAxis;
            v48 = v334;
            v49 = &v334;
            v50 = &v334;
            if (v334)
            {
              while (1)
              {
                while (1)
                {
                  v50 = (uint64_t **)v48;
                  uint64_t v51 = v48[4];
                  if (NegativeAxis >= v51) {
                    break;
                  }
                  v48 = *v50;
                  v49 = v50;
                  if (!*v50) {
                    goto LABEL_56;
                  }
                }
                if (v51 >= NegativeAxis) {
                  break;
                }
                v48 = v50[1];
                if (!v48)
                {
                  v49 = v50 + 1;
                  goto LABEL_56;
                }
              }
            }
            else
            {
LABEL_56:
              v52 = (uint64_t *)operator new(0x28uLL);
              v52[4] = v47;
              uint64_t *v52 = 0;
              v52[1] = 0;
              v52[2] = (uint64_t)v50;
              *v49 = v52;
              if (*v333)
              {
                v333 = (uint64_t **)*v333;
                v45 = *v49;
              }
              else
              {
                v45 = v52;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v334, v45);
              ++v335;
            }
            ++v43;
          }
          while (v43 != v44);
        }
        if (v335)
        {
          if (v335 >> 61) {
            goto LABEL_425;
          }
          size_t v76 = v335;
          v77 = operator new(8 * v335);
          v78 = (char *)&v77[v76];
          bzero(v77, v76 * 8);
        }
        else
        {
          v78 = 0;
          v77 = 0;
        }
        if (__p)
        {
          unint64_t v337 = (unint64_t)__p;
          operator delete(__p);
        }
        __p = v77;
        unint64_t v337 = (unint64_t)v78;
        v338 = v78;
        v79 = (uint64_t *)v333;
        if (v333 != &v334)
        {
          do
          {
            void *v77 = v79[4];
            v82 = (uint64_t *)v79[1];
            if (v82)
            {
              do
              {
                v83 = (uint64_t **)v82;
                v82 = (uint64_t *)*v82;
              }
              while (v82);
            }
            else
            {
              do
              {
                v83 = (uint64_t **)v79[2];
                BOOL v84 = *v83 == v79;
                v79 = (uint64_t *)v83;
              }
              while (!v84);
            }
            ++v77;
            v79 = (uint64_t *)v83;
          }
          while (v83 != &v334);
        }
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v333, v334);
      }
      if (v347 != v349) {
        free(v347);
      }
      if (!matched) {
        goto LABEL_420;
      }
      goto LABEL_100;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
    if (!v53)
    {
LABEL_100:
      v80 = __p;
      if ((void *)v337 == __p)
      {
        uint64_t v347 = *(uint64_t **)(*(void *)(v317 + 72) + 24);
        uint64_t v7 = 1;
        mlir::ValueRange::ValueRange(v346, (uint64_t)&v347, 1uLL);
        (*((void (**)(mlir::UnitAttr **, uint64_t, unint64_t, unint64_t))*v316 + 3))(v316, v317, v346[0], v346[1]);
        goto LABEL_422;
      }
      uint64_t v81 = v317;
      if (*(uint64_t *)__p > -5)
      {
        uint64_t v7 = 1;
        goto LABEL_423;
      }
      v332 = *(uint64_t **)(v330 + 24);
      v318 = (mlir::Builder *)(v316 + 1);
LABEL_113:
      if (__p != (void *)v337)
      {
        v85 = v332;
        v342 = v332;
        uint64_t v347 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v332[1] & 0xFFFFFFFFFFFFFFF8));
        uint64_t v348 = v86;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        uint64_t v88 = v87;
        v90 = (char *)__p;
        v89 = (char *)v337;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        if (v91)
        {
          if (v91 >> 61) {
            goto LABEL_425;
          }
          v92 = v89;
          uint64_t v93 = 8 * v91;
          v94 = (char *)operator new(8 * v91);
          v331 = &v94[v93];
          v89 = v92;
        }
        else
        {
          v331 = 0;
          v94 = 0;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        uint64_t v321 = v88;
        if (v95)
        {
          if (v95 >> 61) {
            goto LABEL_425;
          }
          uint64_t v96 = 8 * v95;
          v97 = (char *)operator new(8 * v95);
          v324 = &v97[v96];
          v98 = v89 - 8;
          uint64_t v99 = *((void *)v89 - 1);
          if (v99 != -1)
          {
            v100 = v97;
            v101 = v97;
            uint64_t v88 = v321;
LABEL_130:
            v333 = (uint64_t **)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v85[1] & 0xFFFFFFFFFFFFFFF8));
            v334 = v102;
            uint64_t v103 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v333);
            uint64_t PositiveAxis = mlir::getPositiveAxis(-1, v88);
            uint64_t v105 = PositiveAxis;
            v320 = v90;
            v325 = v100;
            if (v94 >= v331)
            {
              unint64_t v107 = (v331 - v94) >> 2;
              if (v107 <= 1) {
                unint64_t v107 = 1;
              }
              unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              if ((unint64_t)(v331 - v94) < 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = v107;
              }
              if (v108 >> 61) {
                goto LABEL_426;
              }
              uint64_t v109 = 8 * v108;
              v110 = (char *)operator new(8 * v108);
              *(void *)v110 = *(void *)(v103 + 8 * v105);
              v106 = v110 + 8;
              v331 = &v110[v109];
              if (v94) {
                operator delete(v94);
              }
              v94 = v110;
              v90 = v320;
            }
            else
            {
              *(void *)v94 = *(void *)(v103 + 8 * PositiveAxis);
              v106 = v94 + 8;
            }
            BOOL v111 = v99 == -2;
            if (v88 < 2)
            {
              uint64_t v112 = 1;
LABEL_142:
              if (v106 < v331)
              {
                *(void *)v106 = v112;
                v113 = v106 + 8;
                v114 = v325;
                if (!v111)
                {
LABEL_283:
                  if (v94 != v113)
                  {
                    v207 = v113 - 8;
                    if (v113 - 8 > v94)
                    {
                      v208 = v94 + 8;
                      do
                      {
                        uint64_t v209 = *((void *)v208 - 1);
                        *((void *)v208 - 1) = *(void *)v207;
                        *(void *)v207 = v209;
                        v207 -= 8;
                        BOOL v210 = v208 >= v207;
                        v208 += 8;
                      }
                      while (!v210);
                    }
                  }
                  if (v101 != v114)
                  {
                    v211 = v114 - 8;
                    if (v114 - 8 > v101)
                    {
                      v212 = v101 + 8;
                      do
                      {
                        uint64_t v213 = *((void *)v212 - 1);
                        *((void *)v212 - 1) = *(void *)v211;
                        *(void *)v211 = v213;
                        v211 -= 8;
                        BOOL v210 = v212 >= v211;
                        v212 += 8;
                      }
                      while (!v210);
                    }
                  }
                  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v342);
                  v333 = (uint64_t **)v332;
                  v345 = (mlir::GenericProgramPoint *)((v113 - v94) >> 3);
                  uint64_t IntegerType = mlir::Builder::getIntegerType(v318, 0x40u, 1);
                  v216 = (void *)mlir::RankedTensorType::get((uint64_t)&v345, 1, IntegerType, 0);
                  v217 = v216;
                  if (!v216) {
                    goto LABEL_302;
                  }
                  uint64_t v218 = *v216;
                  unint64_t v219 = mlir::TypeID::get<mlir::ShapedType>();
                  unint64_t v220 = *(unsigned int *)(v218 + 16);
                  if (!v220) {
                    goto LABEL_302;
                  }
                  v221 = *(void **)(v218 + 8);
                  v222 = &v221[2 * v220];
                  do
                  {
                    unint64_t v223 = v220 >> 1;
                    v224 = &v221[2 * (v220 >> 1)];
                    unint64_t v226 = *v224;
                    v225 = v224 + 2;
                    v220 += ~(v220 >> 1);
                    if (v226 < v219) {
                      v221 = v225;
                    }
                    else {
                      unint64_t v220 = v223;
                    }
                  }
                  while (v220);
                  if (v221 != v222 && *v221 == v219) {
                    uint64_t v227 = v221[1];
                  }
                  else {
LABEL_302:
                  }
                    uint64_t v227 = 0;
                  v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v217, v227, v94, v113 - v94, 8, 1, 1);
                  v345 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, Loc, &v344);
                  v332 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v318, Loc, (uint64_t *)&v333, &v345)- 16);
                  std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v101, v114, (v114 - v101) >> 3);
                  if (v101) {
                    operator delete(v101);
                  }
                  if (v94) {
                    operator delete(v94);
                  }
                  v342 = v332;
                  uint64_t v347 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v332[1] & 0xFFFFFFFFFFFFFFF8));
                  uint64_t v348 = v228;
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
                  if (v229)
                  {
                    if (v229 >> 61) {
                      goto LABEL_425;
                    }
                    uint64_t v230 = 8 * v229;
                    v231 = (char *)operator new(8 * v229);
                    v232 = &v231[v230];
                  }
                  else
                  {
                    v231 = 0;
                    v232 = 0;
                  }
                  uint64_t v233 = ((uint64_t)(v337 - (void)__p) >> 3) - 1;
                  if ((uint64_t)(v337 - (void)__p) < 1)
                  {
                    uint64_t v236 = ((uint64_t)(v337 - (void)__p) >> 3) - 1;
                    v234 = (uint64_t *)v231;
                    goto LABEL_359;
                  }
                  v234 = (uint64_t *)v231;
                  while (1)
                  {
                    uint64_t v237 = *((void *)__p + v233);
                    if (v237 < -4)
                    {
                      v235 = v231;
                      uint64_t v236 = v233;
LABEL_346:
                      if (v235 != (char *)v234)
                      {
                        uint64_t v253 = mlir::Value::getLoc((mlir::Value *)&v342);
                        v333 = (uint64_t **)v342;
                        v345 = (mlir::GenericProgramPoint *)((v235 - (char *)v234) >> 3);
                        uint64_t v254 = mlir::Builder::getIntegerType(v318, 0x40u, 1);
                        v255 = (void *)mlir::RankedTensorType::get((uint64_t)&v345, 1, v254, 0);
                        v256 = v255;
                        if (!v255) {
                          goto LABEL_356;
                        }
                        uint64_t v257 = *v255;
                        unint64_t v258 = mlir::TypeID::get<mlir::ShapedType>();
                        unint64_t v259 = *(unsigned int *)(v257 + 16);
                        if (!v259) {
                          goto LABEL_356;
                        }
                        v260 = *(void **)(v257 + 8);
                        v261 = &v260[2 * v259];
                        do
                        {
                          unint64_t v262 = v259 >> 1;
                          v263 = &v260[2 * (v259 >> 1)];
                          unint64_t v265 = *v263;
                          v264 = v263 + 2;
                          v259 += ~(v259 >> 1);
                          if (v265 < v258) {
                            v260 = v264;
                          }
                          else {
                            unint64_t v259 = v262;
                          }
                        }
                        while (v259);
                        if (v260 != v261 && *v260 == v258) {
                          uint64_t v266 = v260[1];
                        }
                        else {
LABEL_356:
                        }
                          uint64_t v266 = 0;
                        char v267 = 1;
                        v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v256, v266, v234, v235 - (char *)v234, 8, 1, 1);
                        v345 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, v253, &v344)- 16);
                        LOBYTE(v344) = 1;
                        unsigned __int8 v343 = 0;
                        v268 = mlir::OpBuilder::create<mlir::mps::ReductionMaxOp,mlir::Value &,mlir::Value &,BOOL,BOOL>((mlir::UnitAttr **)v318, v253, (uint64_t *)&v333, (uint64_t *)&v345, (unsigned __int8 *)&v344, &v343);
                        if (mlir::mps::inferTypes(v268, v269))
                        {
                          v332 = (uint64_t *)((char *)v268 - 16);
                          goto LABEL_359;
                        }
LABEL_406:
                        if (v234) {
                          operator delete(v234);
                        }
                        uint64_t v81 = v317;
                        if ((v267 & 1) == 0) {
                          goto LABEL_113;
                        }
                        uint64_t v7 = 0;
LABEL_422:
                        v80 = __p;
                        if (!__p) {
                          return v7;
                        }
LABEL_423:
                        unint64_t v337 = (unint64_t)v80;
                        operator delete(v80);
                        return v7;
                      }
LABEL_359:
                      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
                      if (v270)
                      {
                        if (!(v270 >> 61))
                        {
                          uint64_t v271 = 8 * v270;
                          v272 = (char *)operator new(8 * v270);
                          v273 = &v272[v271];
                          v274 = v272;
                          if ((v236 & 0x8000000000000000) == 0) {
                            goto LABEL_367;
                          }
LABEL_403:
                          std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v274, v272, (v272 - v274) >> 3);
                          if (v274) {
                            operator delete(v274);
                          }
                          char v267 = 0;
                          goto LABEL_406;
                        }
LABEL_425:
                        abort();
                      }
                      v272 = 0;
                      v273 = 0;
                      v274 = 0;
                      if (v236 < 0) {
                        goto LABEL_403;
                      }
LABEL_367:
                      while (2)
                      {
                        uint64_t v275 = *((void *)__p + v236);
                        if (v272 < v273)
                        {
                          *(void *)v272 = v275;
                          v272 += 8;
                        }
                        else
                        {
                          uint64_t v276 = (v272 - v274) >> 3;
                          unint64_t v277 = v276 + 1;
                          if ((unint64_t)(v276 + 1) >> 61) {
                            goto LABEL_425;
                          }
                          if ((v273 - v274) >> 2 > v277) {
                            unint64_t v277 = (v273 - v274) >> 2;
                          }
                          if ((unint64_t)(v273 - v274) >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v278 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v278 = v277;
                          }
                          if (v278)
                          {
                            if (v278 >> 61) {
                              goto LABEL_426;
                            }
                            v279 = operator new(8 * v278);
                          }
                          else
                          {
                            v279 = 0;
                          }
                          v280 = &v279[8 * v276];
                          *(void *)v280 = v275;
                          v281 = v280 + 8;
                          if (v272 != v274)
                          {
                            unint64_t v282 = v272 - v274 - 8;
                            if (v282 < 0x168)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            unint64_t v285 = (v272 - 8 - v274) & 0xFFFFFFFFFFFFFFF8;
                            if (&v279[v272 - v274 - 8 - v285] > &v279[v272 - v274 - 8])
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if (&v272[-v285 - 8] > v272 - 8)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if ((unint64_t)(v274 - v279) < 0x20)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            uint64_t v286 = (v282 >> 3) + 1;
                            uint64_t v287 = 8 * (v286 & 0x3FFFFFFFFFFFFFFCLL);
                            v283 = &v272[-v287];
                            v280 -= v287;
                            v288 = &v279[8 * v276 - 16];
                            v289 = v272 - 16;
                            uint64_t v290 = v286 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v291 = *(_OWORD *)v289;
                              *(v288 - 1) = *((_OWORD *)v289 - 1);
                              _OWORD *v288 = v291;
                              v288 -= 2;
                              v289 -= 32;
                              v290 -= 4;
                            }
                            while (v290);
                            if (v286 != (v286 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_381:
                                uint64_t v284 = *((void *)v283 - 1);
                                v283 -= 8;
                                *((void *)v280 - 1) = v284;
                                v280 -= 8;
                              }
                              while (v283 != v274);
                            }
                          }
                          v273 = &v279[8 * v278];
                          if (v274) {
                            operator delete(v274);
                          }
                          v274 = v280;
                          v272 = v281;
                        }
                        BOOL v293 = v236-- <= 0;
                        if (v293)
                        {
                          v292 = v272 - 8;
                          BOOL v293 = v274 != v272 && v292 > v274;
                          if (v293)
                          {
                            v294 = v274 + 8;
                            do
                            {
                              uint64_t v295 = *((void *)v294 - 1);
                              *((void *)v294 - 1) = *(void *)v292;
                              *(void *)v292 = v295;
                              v292 -= 8;
                              BOOL v210 = v294 >= v292;
                              v294 += 8;
                            }
                            while (!v210);
                          }
                          goto LABEL_403;
                        }
                        continue;
                      }
                    }
                    if (v231 >= v232) {
                      break;
                    }
                    *(void *)v231 = v237;
                    v235 = v231 + 8;
LABEL_314:
                    uint64_t v236 = v233 - 1;
                    v231 = v235;
                    BOOL v293 = v233-- <= 0;
                    if (v293) {
                      goto LABEL_346;
                    }
                  }
                  uint64_t v238 = (v231 - (char *)v234) >> 3;
                  unint64_t v239 = v238 + 1;
                  if ((unint64_t)(v238 + 1) >> 61) {
                    goto LABEL_425;
                  }
                  if ((v232 - (char *)v234) >> 2 > v239) {
                    unint64_t v239 = (v232 - (char *)v234) >> 2;
                  }
                  if ((unint64_t)(v232 - (char *)v234) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v240 = v239;
                  }
                  if (v240)
                  {
                    if (v240 >> 61) {
                      goto LABEL_426;
                    }
                    v241 = operator new(8 * v240);
                  }
                  else
                  {
                    v241 = 0;
                  }
                  v242 = (uint64_t *)&v241[8 * v238];
                  uint64_t *v242 = v237;
                  v235 = (char *)(v242 + 1);
                  if (v231 != (char *)v234)
                  {
                    unint64_t v243 = v231 - (char *)v234 - 8;
                    if (v243 >= 0x168)
                    {
                      unint64_t v246 = (v231 - 8 - (char *)v234) & 0xFFFFFFFFFFFFFFF8;
                      if (&v241[v231 - (char *)v234 - 8 - v246] > &v241[v231 - (char *)v234 - 8])
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if (&v231[-v246 - 8] > v231 - 8)
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if ((unint64_t)((char *)v234 - v241) >= 0x20)
                      {
                        uint64_t v247 = (v243 >> 3) + 1;
                        uint64_t v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
                        v244 = (uint64_t *)&v231[-v248];
                        v242 = (uint64_t *)((char *)v242 - v248);
                        v249 = &v241[8 * v238 - 16];
                        v250 = (long long *)(v231 - 16);
                        uint64_t v251 = v247 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v252 = *v250;
                          *(v249 - 1) = *(v250 - 1);
                          _OWORD *v249 = v252;
                          v249 -= 2;
                          v250 -= 2;
                          v251 -= 4;
                        }
                        while (v251);
                        if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL)) {
                          goto LABEL_331;
                        }
                      }
                      else
                      {
                        v244 = (uint64_t *)v231;
                      }
                    }
                    else
                    {
                      v244 = (uint64_t *)v231;
                    }
                    do
                    {
                      uint64_t v245 = *--v244;
                      *--v242 = v245;
                    }
                    while (v244 != v234);
                  }
LABEL_331:
                  v232 = &v241[8 * v240];
                  if (v234) {
                    operator delete(v234);
                  }
                  v234 = v242;
                  goto LABEL_314;
                }
LABEL_260:
                uint64_t v191 = mlir::getNegativeAxis(0, (v113 - v94) >> 3);
                uint64_t v192 = v191;
                if (v114 < v324)
                {
                  *(void *)v114 = v191;
                  v114 += 8;
                  goto LABEL_283;
                }
                int64_t v193 = v114 - v101;
                v194 = v101;
                uint64_t v195 = (v114 - v101) >> 3;
                unint64_t v196 = v195 + 1;
                if ((unint64_t)(v195 + 1) >> 61) {
                  goto LABEL_425;
                }
                v197 = v114;
                v198 = v194;
                unint64_t v199 = v324 - v194;
                unint64_t v200 = (v324 - v194) >> 2;
                if (v200 > v196) {
                  unint64_t v196 = v200;
                }
                if (v199 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
                }
                if (v196)
                {
                  if (v196 >> 61) {
                    goto LABEL_426;
                  }
                  v201 = (char *)operator new(8 * v196);
                }
                else
                {
                  v201 = 0;
                }
                v202 = &v201[8 * v195];
                *(void *)v202 = v192;
                v114 = v202 + 8;
                if (v197 == v198)
                {
                  v205 = v198;
                }
                else
                {
                  unint64_t v203 = v197 - v198 - 8;
                  if (v203 >= 0x58 && (unint64_t)(v197 - v201 - v193) >= 0x20)
                  {
                    uint64_t v302 = (v203 >> 3) + 1;
                    uint64_t v303 = 8 * (v302 & 0x3FFFFFFFFFFFFFFCLL);
                    v204 = &v197[-v303];
                    v202 -= v303;
                    v304 = &v201[8 * v195 - 16];
                    v305 = v197 - 16;
                    uint64_t v306 = v302 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v307 = *(_OWORD *)v305;
                      *((_OWORD *)v304 - 1) = *((_OWORD *)v305 - 1);
                      *(_OWORD *)v304 = v307;
                      v304 -= 32;
                      v305 -= 32;
                      v306 -= 4;
                    }
                    while (v306);
                    v205 = v198;
                    if (v302 == (v302 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_280;
                    }
                  }
                  else
                  {
                    v204 = v197;
                    v205 = v198;
                  }
                  do
                  {
                    uint64_t v206 = *((void *)v204 - 1);
                    v204 -= 8;
                    *((void *)v202 - 1) = v206;
                    v202 -= 8;
                  }
                  while (v204 != v205);
                }
LABEL_280:
                if (v205) {
                  operator delete(v205);
                }
                v101 = v202;
                goto LABEL_283;
              }
              v183 = v101;
              uint64_t v184 = (v106 - v94) >> 3;
              unint64_t v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61) {
                goto LABEL_425;
              }
              if ((v331 - v94) >> 2 > v185) {
                unint64_t v185 = (v331 - v94) >> 2;
              }
              if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
              }
              if (v185)
              {
                if (v185 >> 61) {
                  goto LABEL_426;
                }
                v186 = operator new(8 * v185);
              }
              else
              {
                v186 = 0;
              }
              v187 = (uint64_t *)&v186[8 * v184];
              uint64_t *v187 = v112;
              v113 = (char *)(v187 + 1);
              if (v106 == v94)
              {
                v101 = v183;
                v114 = v325;
                if (!v94)
                {
LABEL_259:
                  v94 = (char *)v187;
                  if (!v111) {
                    goto LABEL_283;
                  }
                  goto LABEL_260;
                }
LABEL_258:
                operator delete(v94);
                goto LABEL_259;
              }
              unint64_t v188 = v106 - v94 - 8;
              if (v188 >= 0x58 && (unint64_t)(v94 - v186) >= 0x20)
              {
                uint64_t v296 = (v188 >> 3) + 1;
                uint64_t v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
                v189 = &v106[-v297];
                v187 = (uint64_t *)((char *)v187 - v297);
                v298 = &v186[8 * v184 - 16];
                v299 = v106 - 16;
                uint64_t v300 = v296 & 0x3FFFFFFFFFFFFFFCLL;
                v114 = v325;
                do
                {
                  long long v301 = *(_OWORD *)v299;
                  *(v298 - 1) = *((_OWORD *)v299 - 1);
                  _OWORD *v298 = v301;
                  v298 -= 2;
                  v299 -= 32;
                  v300 -= 4;
                }
                while (v300);
                v101 = v183;
                if (v296 == (v296 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_257:
                  if (!v94) {
                    goto LABEL_259;
                  }
                  goto LABEL_258;
                }
              }
              else
              {
                v189 = v106;
                v101 = v183;
                v114 = v325;
              }
              do
              {
                uint64_t v190 = *((void *)v189 - 1);
                v189 -= 8;
                *--v187 = v190;
              }
              while (v189 != v94);
              goto LABEL_257;
            }
            uint64_t v115 = v99;
            uint64_t v328 = v103;
            uint64_t v329 = -v88;
            uint64_t v116 = -2;
            uint64_t v112 = 1;
            while (1)
            {
              if (!v111)
              {
                if (v115 == v116)
                {
                  v119 = v331;
                  if (v106 < v331)
                  {
                    *(void *)v106 = v112;
                    v120 = v106 + 8;
LABEL_184:
                    v331 = v119;
                    uint64_t v112 = *(void *)(v328 + 8 * mlir::getPositiveAxis(v115, v88));
                    if (v89 - 8 == v90)
                    {
                      uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
                      BOOL v111 = 1;
                      v106 = v120;
                      v89 = v90;
                    }
                    else
                    {
                      uint64_t v115 = *((void *)v89 - 2);
                      BOOL v111 = 1;
                      v106 = v120;
                      v89 -= 8;
                    }
                    uint64_t v103 = v328;
                    goto LABEL_146;
                  }
                  uint64_t v327 = v115;
                  uint64_t v124 = (v106 - v94) >> 3;
                  unint64_t v125 = v124 + 1;
                  if ((unint64_t)(v124 + 1) >> 61) {
                    goto LABEL_425;
                  }
                  if ((v331 - v94) >> 2 > v125) {
                    unint64_t v125 = (v331 - v94) >> 2;
                  }
                  if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v126 = v125;
                  }
                  v322 = v89;
                  if (v126)
                  {
                    if (v126 >> 61) {
                      goto LABEL_426;
                    }
                    v127 = operator new(8 * v126);
                  }
                  else
                  {
                    v127 = 0;
                  }
                  v133 = (uint64_t *)&v127[8 * v124];
                  uint64_t *v133 = v112;
                  v120 = (char *)(v133 + 1);
                  if (v106 != v94)
                  {
                    unint64_t v134 = v106 - v94 - 8;
                    if (v134 < 0x168
                      || (unint64_t v162 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8,
                          &v127[v106 - v94 - 8 - v162] > &v127[v106 - v94 - 8])
                      || &v106[-v162 - 8] > v106 - 8
                      || (unint64_t)(v94 - v127) < 0x20)
                    {
                      v135 = v106;
                      v90 = v320;
                      uint64_t v88 = v321;
                    }
                    else
                    {
                      uint64_t v163 = (v134 >> 3) + 1;
                      uint64_t v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                      v135 = &v106[-v164];
                      v133 = (uint64_t *)((char *)v133 - v164);
                      v165 = &v127[8 * v124 - 16];
                      v166 = v106 - 16;
                      uint64_t v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                      uint64_t v88 = v321;
                      do
                      {
                        long long v168 = *(_OWORD *)v166;
                        *(v165 - 1) = *((_OWORD *)v166 - 1);
                        _OWORD *v165 = v168;
                        v165 -= 2;
                        v166 -= 32;
                        v167 -= 4;
                      }
                      while (v167);
                      v90 = v320;
                      if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_181:
                        v119 = &v127[8 * v126];
                        if (v94) {
                          goto LABEL_182;
                        }
                        goto LABEL_183;
                      }
                    }
                    do
                    {
                      uint64_t v136 = *((void *)v135 - 1);
                      v135 -= 8;
                      *--v133 = v136;
                    }
                    while (v135 != v94);
                    goto LABEL_181;
                  }
                  v90 = v320;
                  uint64_t v88 = v321;
                  v119 = &v127[8 * v126];
                  if (v94) {
LABEL_182:
                  }
                    operator delete(v94);
LABEL_183:
                  v94 = (char *)v133;
                  v89 = v322;
                  uint64_t v115 = v327;
                  goto LABEL_184;
                }
                uint64_t v117 = v115;
                uint64_t v118 = mlir::getPositiveAxis(v116, v88);
                uint64_t v115 = v117;
                BOOL v111 = 0;
                v112 *= *(void *)(v103 + 8 * v118);
                goto LABEL_146;
              }
              if (v115 == v116)
              {
                v112 *= *(void *)(v103 + 8 * mlir::getPositiveAxis(v115, v88));
                if (v89 - 8 == v90)
                {
                  uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
                  BOOL v111 = 1;
                  v89 = v90;
                }
                else
                {
                  uint64_t v115 = *((void *)v89 - 2);
                  BOOL v111 = 1;
                  v89 -= 8;
                }
                goto LABEL_146;
              }
              v121 = v331;
              uint64_t v326 = v115;
              if (v106 >= v331) {
                break;
              }
              *(void *)v106 = v112;
              v122 = v106 + 8;
              v123 = (uint64_t *)v325;
LABEL_196:
              uint64_t v112 = *(void *)(v103 + 8 * mlir::getPositiveAxis(v116, v88));
              uint64_t v142 = mlir::getNegativeAxis(0, (v122 - v94) >> 3);
              v143 = v122;
              uint64_t v144 = v142;
              v331 = v121;
              if (v123 >= (uint64_t *)v324)
              {
                v319 = v143;
                v145 = v101;
                uint64_t v146 = (char *)v123 - v101;
                uint64_t v147 = v146 >> 3;
                unint64_t v148 = (v146 >> 3) + 1;
                if (v148 >> 61) {
                  goto LABEL_425;
                }
                v149 = v123;
                v150 = (uint64_t *)v145;
                unint64_t v151 = v324 - v145;
                unint64_t v152 = (v324 - v145) >> 2;
                if (v152 > v148) {
                  unint64_t v148 = v152;
                }
                if (v151 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v153 = v148;
                }
                v323 = v89;
                if (v153)
                {
                  if (v153 >> 61) {
                    goto LABEL_426;
                  }
                  v154 = (char *)operator new(8 * v153);
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[8 * v147];
                *(void *)v155 = v144;
                v156 = v155 + 8;
                if (v149 == v150)
                {
                  v90 = v320;
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                  goto LABEL_218;
                }
                unint64_t v157 = (char *)v149 - (char *)v150 - 8;
                v90 = v320;
                if (v157 < 0x168
                  || (unint64_t v176 = ((char *)(v149 - 1) - (char *)v150) & 0xFFFFFFFFFFFFFFF8,
                      &v154[v146 - 8 - v176] > &v154[v146 - 8])
                  || (uint64_t *)((char *)v149 - v176 - 8) > v149 - 1
                  || (unint64_t)((char *)v149 - v154 - v146) < 0x20)
                {
                  v158 = v149;
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                }
                else
                {
                  uint64_t v177 = (v157 >> 3) + 1;
                  uint64_t v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                  v158 = &v149[v178 / 0xFFFFFFFFFFFFFFF8];
                  v155 -= v178;
                  v179 = &v154[8 * v147 - 16];
                  v180 = v149 - 2;
                  uint64_t v181 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v182 = *(_OWORD *)v180;
                    *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
                    *(_OWORD *)v179 = v182;
                    v179 -= 32;
                    v180 -= 4;
                    v181 -= 4;
                  }
                  while (v181);
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                  if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_218:
                    v324 = &v154[8 * v153];
                    if (v150)
                    {
                      v160 = v150;
                      v161 = v156;
                      operator delete(v160);
                      BOOL v111 = 0;
                      v101 = v155;
                      v325 = v161;
                    }
                    else
                    {
                      BOOL v111 = 0;
                      v101 = v155;
                      v325 = v156;
                    }
                    v106 = v319;
                    v89 = v323;
                    uint64_t v115 = v326;
                    goto LABEL_146;
                  }
                }
                do
                {
                  uint64_t v159 = *--v158;
                  *((void *)v155 - 1) = v159;
                  v155 -= 8;
                }
                while (v158 != v150);
                goto LABEL_218;
              }
              BOOL v111 = 0;
              uint64_t *v123 = v142;
              v325 = (char *)(v123 + 1);
              v106 = v143;
              v90 = v320;
              uint64_t v115 = v326;
LABEL_146:
              BOOL v293 = v116-- <= v329;
              if (v293) {
                goto LABEL_142;
              }
            }
            uint64_t v128 = (v106 - v94) >> 3;
            unint64_t v129 = v128 + 1;
            if ((unint64_t)(v128 + 1) >> 61) {
              goto LABEL_425;
            }
            if ((v331 - v94) >> 2 > v129) {
              unint64_t v129 = (v331 - v94) >> 2;
            }
            if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v130 = v129;
            }
            if (v130)
            {
              if (v130 >> 61) {
                goto LABEL_426;
              }
              v131 = v89;
              v132 = operator new(8 * v130);
            }
            else
            {
              v131 = v89;
              v132 = 0;
            }
            v137 = (uint64_t *)&v132[8 * v128];
            uint64_t *v137 = v112;
            v138 = (char *)(v137 + 1);
            if (v106 == v94)
            {
              uint64_t v88 = v321;
              v123 = (uint64_t *)v325;
              v122 = (char *)(v137 + 1);
              v121 = &v132[8 * v130];
              if (!v94) {
                goto LABEL_195;
              }
              goto LABEL_194;
            }
            unint64_t v139 = v106 - v94 - 8;
            if (v139 < 0x168
              || (unint64_t v169 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8, &v132[v106 - v94 - 8 - v169] > &v132[v106 - v94 - 8])
              || &v106[-v169 - 8] > v106 - 8
              || (unint64_t)(v94 - v132) < 0x20)
            {
              v140 = v106;
              uint64_t v88 = v321;
              v123 = (uint64_t *)v325;
              v122 = (char *)(v137 + 1);
            }
            else
            {
              uint64_t v170 = (v139 >> 3) + 1;
              uint64_t v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
              v140 = &v106[-v171];
              v137 = (uint64_t *)((char *)v137 - v171);
              v172 = &v132[8 * v128 - 16];
              v173 = v106 - 16;
              uint64_t v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v88 = v321;
              do
              {
                long long v175 = *(_OWORD *)v173;
                *(v172 - 1) = *((_OWORD *)v173 - 1);
                _OWORD *v172 = v175;
                v172 -= 2;
                v173 -= 32;
                v174 -= 4;
              }
              while (v174);
              v123 = (uint64_t *)v325;
              v122 = v138;
              if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_193:
                v121 = &v132[8 * v130];
                if (!v94)
                {
LABEL_195:
                  v94 = (char *)v137;
                  v89 = v131;
                  uint64_t v103 = v328;
                  goto LABEL_196;
                }
LABEL_194:
                operator delete(v94);
                goto LABEL_195;
              }
            }
            do
            {
              uint64_t v141 = *((void *)v140 - 1);
              v140 -= 8;
              *--v137 = v141;
            }
            while (v140 != v94);
            goto LABEL_193;
          }
          uint64_t v88 = v321;
        }
        else
        {
          v98 = v89 - 8;
          uint64_t v99 = *((void *)v89 - 1);
          if (v99 != -1)
          {
            v101 = 0;
            v100 = 0;
            v324 = 0;
            goto LABEL_130;
          }
          v97 = (char *)operator new(8uLL);
          v324 = v97 + 8;
        }
        *(void *)v97 = -1;
        v100 = v97 + 8;
        if (v98 == v90)
        {
          uint64_t v99 = 0x7FFFFFFFFFFFFFFFLL;
          v89 = v90;
        }
        else
        {
          uint64_t v99 = *((void *)v89 - 2);
          v89 = v98;
        }
        v101 = v97;
        goto LABEL_130;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      uint64_t v347 = v308;
      uint64_t v309 = mlir::Builder::getIntegerType(v318, 0x40u, 1);
      v333 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)&v347, 1, v309, 0);
      v310 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      uint64_t v311 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v347, v310, (unsigned char *)(v311 + 8 * v312));
      uint64_t v313 = *(void *)(v81 + 24);
      v314 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v333);
      v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v314, v315, v347, 8 * v348, 8, 1, 1);
      v345 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, v313, &v344);
      mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(v316, v81, (uint64_t *)&v332, &v345);
      if (v347 != v349) {
        free(v347);
      }
LABEL_420:
      uint64_t v7 = 1;
      goto LABEL_422;
    }
    uint64_t v54 = v53;
    v55 = (char *)v337;
    while (1)
    {
      uint64_t v57 = -v54;
      if (v55 >= v338) {
        break;
      }
      *(void *)v55 = v57;
      v56 = v55 + 8;
LABEL_61:
      unint64_t v337 = (unint64_t)v56;
      v55 = v56;
      if (!--v54) {
        goto LABEL_100;
      }
    }
    v58 = (char *)__p;
    int64_t v59 = v55 - (unsigned char *)__p;
    uint64_t v60 = (v55 - (unsigned char *)__p) >> 3;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61) {
      goto LABEL_425;
    }
    uint64_t v62 = v338 - (unsigned char *)__p;
    if ((v338 - (unsigned char *)__p) >> 2 > v61) {
      unint64_t v61 = v62 >> 2;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      if (v63 >> 61) {
LABEL_426:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      v64 = operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[8 * v60];
    *(void *)v65 = v57;
    v56 = v65 + 8;
    if (v55 == v58) {
      goto LABEL_77;
    }
    unint64_t v66 = v55 - v58 - 8;
    if (v66 < 0x168)
    {
      v67 = v55;
      goto LABEL_76;
    }
    unint64_t v69 = (v55 - 8 - v58) & 0xFFFFFFFFFFFFFFF8;
    if (&v64[v59 - 8 - v69] > &v64[v59 - 8])
    {
      v67 = v55;
    }
    else
    {
      if (&v55[-v69 - 8] <= v55 - 8)
      {
        if ((unint64_t)(v55 - v64 - v59) < 0x20)
        {
          v67 = v55;
          goto LABEL_76;
        }
        uint64_t v70 = (v66 >> 3) + 1;
        uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v55[-v71];
        v65 -= v71;
        v72 = &v64[8 * v60 - 16];
        v73 = v55 - 16;
        uint64_t v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          _OWORD *v72 = v75;
          v72 -= 2;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_76;
        }
LABEL_77:
        __p = v65;
        v338 = &v64[8 * v63];
        if (v58) {
          operator delete(v58);
        }
        goto LABEL_61;
      }
      v67 = v55;
    }
    do
    {
LABEL_76:
      uint64_t v68 = *((void *)v67 - 1);
      v67 -= 8;
      *((void *)v65 - 1) = v68;
      v65 -= 8;
    }
    while (v67 != v58);
    goto LABEL_77;
  }
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReductionMaxOp,mlir::Value &,mlir::Value &,BOOL,BOOL>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_max", (const unsigned __int8 *)0x11, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    unint64_t v21[2] = (uint64_t)"mps.reduction_max";
    v21[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::mps::ReductionMaxOp::build(a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  int v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMaxOp,void>::id) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void *mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionMinOp>::~CanonicalizeReductionAxes(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionMinOp>::~CanonicalizeReductionAxes(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::UnitAttr **a3)
{
  v349[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9);
    if (v6)
    {
      if (!InherentAttr) {
        return 0;
      }
      goto LABEL_6;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
  if (InherentAttr)
  {
LABEL_6:
    if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
      return 0;
    }
    v316 = a3;
    uint64_t v9 = *(void *)(*(void *)(a2 + 72) + 24);
    uint64_t v10 = (uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v10) {
      goto LABEL_18;
    }
    uint64_t v11 = *v10;
    unint64_t v12 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v13 = *(unsigned int *)(v11 + 16);
    if (!v13) {
      goto LABEL_18;
    }
    char v14 = *(void **)(v11 + 8);
    int v15 = &v14[2 * v13];
    do
    {
      unint64_t v16 = v13 >> 1;
      unint64_t v17 = &v14[2 * (v13 >> 1)];
      unint64_t v19 = *v17;
      uint64_t v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12) {
        char v14 = v18;
      }
      else {
        unint64_t v13 = v16;
      }
    }
    while (v13);
    if (v14 != v15 && *v14 == v12) {
      uint64_t v20 = v14[1];
    }
    else {
LABEL_18:
    }
      uint64_t v20 = 0;
    v341[0] = v10;
    v341[1] = v20;
    uint64_t v21 = (void *)(*(void *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v21;
    unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v24 = *(unsigned int *)(v22 + 16);
    if (!v24) {
      goto LABEL_28;
    }
    v25 = *(void **)(v22 + 8);
    uint64_t v26 = &v25[2 * v24];
    do
    {
      unint64_t v27 = v24 >> 1;
      uint64_t v28 = &v25[2 * (v24 >> 1)];
      unint64_t v30 = *v28;
      uint64_t v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23) {
        v25 = v29;
      }
      else {
        unint64_t v24 = v27;
      }
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
    {
      uint64_t v38 = v25[1];
      v339 = v21;
      uint64_t v340 = v38;
      if (!v10) {
        return 0;
      }
    }
    else
    {
LABEL_28:
      v339 = v21;
      uint64_t v340 = 0;
      if (!v10) {
        return 0;
      }
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v341)) {
      return 0;
    }
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
    if (v32)
    {
      uint64_t v33 = 8 * v32;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v33 -= 8;
        if (!v33) {
          goto LABEL_34;
        }
      }
      return 0;
    }
LABEL_34:
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      uint64_t v330 = *(void *)(a2 + 72);
      unint64_t v34 = *(unsigned int *)(a2 + 68);
    }
    else
    {
      uint64_t v330 = 0;
      unint64_t v34 = 0;
    }
    __p = 0;
    unint64_t v337 = 0;
    v338 = 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
    uint64_t v317 = a2;
    if (v35)
    {
      if (v35 >> 61) {
        goto LABEL_425;
      }
      uint64_t v36 = 8 * v35;
      v37 = (char *)operator new(8 * v35);
      __p = &v37[v337 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v337 = (unint64_t)__p;
      v338 = &v37[v36];
    }
    if (v34 >= 2)
    {
      uint64_t v39 = *(void *)(v330 + 56);
      uint64_t v347 = v349;
      uint64_t v348 = 0x400000000;
      char matched = mlir::matchConstantWithIntVector<long long>(v39, (uint64_t)&v347);
      if (matched)
      {
        v334 = 0;
        size_t v335 = 0;
        v333 = &v334;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
        if (v348)
        {
          uint64_t v42 = v41;
          v43 = (mlir **)v347;
          v44 = (mlir **)&v347[v348];
          do
          {
            uint64_t NegativeAxis = mlir::getNegativeAxis(*v43, v42);
            uint64_t v47 = NegativeAxis;
            v48 = v334;
            v49 = &v334;
            v50 = &v334;
            if (v334)
            {
              while (1)
              {
                while (1)
                {
                  v50 = (uint64_t **)v48;
                  uint64_t v51 = v48[4];
                  if (NegativeAxis >= v51) {
                    break;
                  }
                  v48 = *v50;
                  v49 = v50;
                  if (!*v50) {
                    goto LABEL_56;
                  }
                }
                if (v51 >= NegativeAxis) {
                  break;
                }
                v48 = v50[1];
                if (!v48)
                {
                  v49 = v50 + 1;
                  goto LABEL_56;
                }
              }
            }
            else
            {
LABEL_56:
              v52 = (uint64_t *)operator new(0x28uLL);
              v52[4] = v47;
              uint64_t *v52 = 0;
              v52[1] = 0;
              v52[2] = (uint64_t)v50;
              *v49 = v52;
              if (*v333)
              {
                v333 = (uint64_t **)*v333;
                v45 = *v49;
              }
              else
              {
                v45 = v52;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v334, v45);
              ++v335;
            }
            ++v43;
          }
          while (v43 != v44);
        }
        if (v335)
        {
          if (v335 >> 61) {
            goto LABEL_425;
          }
          size_t v76 = v335;
          v77 = operator new(8 * v335);
          v78 = (char *)&v77[v76];
          bzero(v77, v76 * 8);
        }
        else
        {
          v78 = 0;
          v77 = 0;
        }
        if (__p)
        {
          unint64_t v337 = (unint64_t)__p;
          operator delete(__p);
        }
        __p = v77;
        unint64_t v337 = (unint64_t)v78;
        v338 = v78;
        v79 = (uint64_t *)v333;
        if (v333 != &v334)
        {
          do
          {
            void *v77 = v79[4];
            v82 = (uint64_t *)v79[1];
            if (v82)
            {
              do
              {
                v83 = (uint64_t **)v82;
                v82 = (uint64_t *)*v82;
              }
              while (v82);
            }
            else
            {
              do
              {
                v83 = (uint64_t **)v79[2];
                BOOL v84 = *v83 == v79;
                v79 = (uint64_t *)v83;
              }
              while (!v84);
            }
            ++v77;
            v79 = (uint64_t *)v83;
          }
          while (v83 != &v334);
        }
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v333, v334);
      }
      if (v347 != v349) {
        free(v347);
      }
      if (!matched) {
        goto LABEL_420;
      }
      goto LABEL_100;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
    if (!v53)
    {
LABEL_100:
      v80 = __p;
      if ((void *)v337 == __p)
      {
        uint64_t v347 = *(uint64_t **)(*(void *)(v317 + 72) + 24);
        uint64_t v7 = 1;
        mlir::ValueRange::ValueRange(v346, (uint64_t)&v347, 1uLL);
        (*((void (**)(mlir::UnitAttr **, uint64_t, unint64_t, unint64_t))*v316 + 3))(v316, v317, v346[0], v346[1]);
        goto LABEL_422;
      }
      uint64_t v81 = v317;
      if (*(uint64_t *)__p > -5)
      {
        uint64_t v7 = 1;
        goto LABEL_423;
      }
      v332 = *(uint64_t **)(v330 + 24);
      v318 = (mlir::Builder *)(v316 + 1);
LABEL_113:
      if (__p != (void *)v337)
      {
        v85 = v332;
        v342 = v332;
        uint64_t v347 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v332[1] & 0xFFFFFFFFFFFFFFF8));
        uint64_t v348 = v86;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        uint64_t v88 = v87;
        v90 = (char *)__p;
        v89 = (char *)v337;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        if (v91)
        {
          if (v91 >> 61) {
            goto LABEL_425;
          }
          v92 = v89;
          uint64_t v93 = 8 * v91;
          v94 = (char *)operator new(8 * v91);
          v331 = &v94[v93];
          v89 = v92;
        }
        else
        {
          v331 = 0;
          v94 = 0;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        uint64_t v321 = v88;
        if (v95)
        {
          if (v95 >> 61) {
            goto LABEL_425;
          }
          uint64_t v96 = 8 * v95;
          v97 = (char *)operator new(8 * v95);
          v324 = &v97[v96];
          v98 = v89 - 8;
          uint64_t v99 = *((void *)v89 - 1);
          if (v99 != -1)
          {
            v100 = v97;
            v101 = v97;
            uint64_t v88 = v321;
LABEL_130:
            v333 = (uint64_t **)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v85[1] & 0xFFFFFFFFFFFFFFF8));
            v334 = v102;
            uint64_t v103 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v333);
            uint64_t PositiveAxis = mlir::getPositiveAxis(-1, v88);
            uint64_t v105 = PositiveAxis;
            v320 = v90;
            v325 = v100;
            if (v94 >= v331)
            {
              unint64_t v107 = (v331 - v94) >> 2;
              if (v107 <= 1) {
                unint64_t v107 = 1;
              }
              unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              if ((unint64_t)(v331 - v94) < 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = v107;
              }
              if (v108 >> 61) {
                goto LABEL_426;
              }
              uint64_t v109 = 8 * v108;
              v110 = (char *)operator new(8 * v108);
              *(void *)v110 = *(void *)(v103 + 8 * v105);
              v106 = v110 + 8;
              v331 = &v110[v109];
              if (v94) {
                operator delete(v94);
              }
              v94 = v110;
              v90 = v320;
            }
            else
            {
              *(void *)v94 = *(void *)(v103 + 8 * PositiveAxis);
              v106 = v94 + 8;
            }
            BOOL v111 = v99 == -2;
            if (v88 < 2)
            {
              uint64_t v112 = 1;
LABEL_142:
              if (v106 < v331)
              {
                *(void *)v106 = v112;
                v113 = v106 + 8;
                v114 = v325;
                if (!v111)
                {
LABEL_283:
                  if (v94 != v113)
                  {
                    v207 = v113 - 8;
                    if (v113 - 8 > v94)
                    {
                      v208 = v94 + 8;
                      do
                      {
                        uint64_t v209 = *((void *)v208 - 1);
                        *((void *)v208 - 1) = *(void *)v207;
                        *(void *)v207 = v209;
                        v207 -= 8;
                        BOOL v210 = v208 >= v207;
                        v208 += 8;
                      }
                      while (!v210);
                    }
                  }
                  if (v101 != v114)
                  {
                    v211 = v114 - 8;
                    if (v114 - 8 > v101)
                    {
                      v212 = v101 + 8;
                      do
                      {
                        uint64_t v213 = *((void *)v212 - 1);
                        *((void *)v212 - 1) = *(void *)v211;
                        *(void *)v211 = v213;
                        v211 -= 8;
                        BOOL v210 = v212 >= v211;
                        v212 += 8;
                      }
                      while (!v210);
                    }
                  }
                  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v342);
                  v333 = (uint64_t **)v332;
                  v345 = (mlir::GenericProgramPoint *)((v113 - v94) >> 3);
                  uint64_t IntegerType = mlir::Builder::getIntegerType(v318, 0x40u, 1);
                  v216 = (void *)mlir::RankedTensorType::get((uint64_t)&v345, 1, IntegerType, 0);
                  v217 = v216;
                  if (!v216) {
                    goto LABEL_302;
                  }
                  uint64_t v218 = *v216;
                  unint64_t v219 = mlir::TypeID::get<mlir::ShapedType>();
                  unint64_t v220 = *(unsigned int *)(v218 + 16);
                  if (!v220) {
                    goto LABEL_302;
                  }
                  v221 = *(void **)(v218 + 8);
                  v222 = &v221[2 * v220];
                  do
                  {
                    unint64_t v223 = v220 >> 1;
                    v224 = &v221[2 * (v220 >> 1)];
                    unint64_t v226 = *v224;
                    v225 = v224 + 2;
                    v220 += ~(v220 >> 1);
                    if (v226 < v219) {
                      v221 = v225;
                    }
                    else {
                      unint64_t v220 = v223;
                    }
                  }
                  while (v220);
                  if (v221 != v222 && *v221 == v219) {
                    uint64_t v227 = v221[1];
                  }
                  else {
LABEL_302:
                  }
                    uint64_t v227 = 0;
                  v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v217, v227, v94, v113 - v94, 8, 1, 1);
                  v345 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, Loc, &v344);
                  v332 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v318, Loc, (uint64_t *)&v333, &v345)- 16);
                  std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v101, v114, (v114 - v101) >> 3);
                  if (v101) {
                    operator delete(v101);
                  }
                  if (v94) {
                    operator delete(v94);
                  }
                  v342 = v332;
                  uint64_t v347 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v332[1] & 0xFFFFFFFFFFFFFFF8));
                  uint64_t v348 = v228;
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
                  if (v229)
                  {
                    if (v229 >> 61) {
                      goto LABEL_425;
                    }
                    uint64_t v230 = 8 * v229;
                    v231 = (char *)operator new(8 * v229);
                    v232 = &v231[v230];
                  }
                  else
                  {
                    v231 = 0;
                    v232 = 0;
                  }
                  uint64_t v233 = ((uint64_t)(v337 - (void)__p) >> 3) - 1;
                  if ((uint64_t)(v337 - (void)__p) < 1)
                  {
                    uint64_t v236 = ((uint64_t)(v337 - (void)__p) >> 3) - 1;
                    v234 = (uint64_t *)v231;
                    goto LABEL_359;
                  }
                  v234 = (uint64_t *)v231;
                  while (1)
                  {
                    uint64_t v237 = *((void *)__p + v233);
                    if (v237 < -4)
                    {
                      v235 = v231;
                      uint64_t v236 = v233;
LABEL_346:
                      if (v235 != (char *)v234)
                      {
                        uint64_t v253 = mlir::Value::getLoc((mlir::Value *)&v342);
                        v333 = (uint64_t **)v342;
                        v345 = (mlir::GenericProgramPoint *)((v235 - (char *)v234) >> 3);
                        uint64_t v254 = mlir::Builder::getIntegerType(v318, 0x40u, 1);
                        v255 = (void *)mlir::RankedTensorType::get((uint64_t)&v345, 1, v254, 0);
                        v256 = v255;
                        if (!v255) {
                          goto LABEL_356;
                        }
                        uint64_t v257 = *v255;
                        unint64_t v258 = mlir::TypeID::get<mlir::ShapedType>();
                        unint64_t v259 = *(unsigned int *)(v257 + 16);
                        if (!v259) {
                          goto LABEL_356;
                        }
                        v260 = *(void **)(v257 + 8);
                        v261 = &v260[2 * v259];
                        do
                        {
                          unint64_t v262 = v259 >> 1;
                          v263 = &v260[2 * (v259 >> 1)];
                          unint64_t v265 = *v263;
                          v264 = v263 + 2;
                          v259 += ~(v259 >> 1);
                          if (v265 < v258) {
                            v260 = v264;
                          }
                          else {
                            unint64_t v259 = v262;
                          }
                        }
                        while (v259);
                        if (v260 != v261 && *v260 == v258) {
                          uint64_t v266 = v260[1];
                        }
                        else {
LABEL_356:
                        }
                          uint64_t v266 = 0;
                        char v267 = 1;
                        v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v256, v266, v234, v235 - (char *)v234, 8, 1, 1);
                        v345 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, v253, &v344)- 16);
                        LOBYTE(v344) = 1;
                        unsigned __int8 v343 = 0;
                        v268 = mlir::OpBuilder::create<mlir::mps::ReductionMinOp,mlir::Value &,mlir::Value &,BOOL,BOOL>((mlir::UnitAttr **)v318, v253, (uint64_t *)&v333, (uint64_t *)&v345, (unsigned __int8 *)&v344, &v343);
                        if (mlir::mps::inferTypes(v268, v269))
                        {
                          v332 = (uint64_t *)((char *)v268 - 16);
                          goto LABEL_359;
                        }
LABEL_406:
                        if (v234) {
                          operator delete(v234);
                        }
                        uint64_t v81 = v317;
                        if ((v267 & 1) == 0) {
                          goto LABEL_113;
                        }
                        uint64_t v7 = 0;
LABEL_422:
                        v80 = __p;
                        if (!__p) {
                          return v7;
                        }
LABEL_423:
                        unint64_t v337 = (unint64_t)v80;
                        operator delete(v80);
                        return v7;
                      }
LABEL_359:
                      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
                      if (v270)
                      {
                        if (!(v270 >> 61))
                        {
                          uint64_t v271 = 8 * v270;
                          v272 = (char *)operator new(8 * v270);
                          v273 = &v272[v271];
                          v274 = v272;
                          if ((v236 & 0x8000000000000000) == 0) {
                            goto LABEL_367;
                          }
LABEL_403:
                          std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v274, v272, (v272 - v274) >> 3);
                          if (v274) {
                            operator delete(v274);
                          }
                          char v267 = 0;
                          goto LABEL_406;
                        }
LABEL_425:
                        abort();
                      }
                      v272 = 0;
                      v273 = 0;
                      v274 = 0;
                      if (v236 < 0) {
                        goto LABEL_403;
                      }
LABEL_367:
                      while (2)
                      {
                        uint64_t v275 = *((void *)__p + v236);
                        if (v272 < v273)
                        {
                          *(void *)v272 = v275;
                          v272 += 8;
                        }
                        else
                        {
                          uint64_t v276 = (v272 - v274) >> 3;
                          unint64_t v277 = v276 + 1;
                          if ((unint64_t)(v276 + 1) >> 61) {
                            goto LABEL_425;
                          }
                          if ((v273 - v274) >> 2 > v277) {
                            unint64_t v277 = (v273 - v274) >> 2;
                          }
                          if ((unint64_t)(v273 - v274) >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v278 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v278 = v277;
                          }
                          if (v278)
                          {
                            if (v278 >> 61) {
                              goto LABEL_426;
                            }
                            v279 = operator new(8 * v278);
                          }
                          else
                          {
                            v279 = 0;
                          }
                          v280 = &v279[8 * v276];
                          *(void *)v280 = v275;
                          v281 = v280 + 8;
                          if (v272 != v274)
                          {
                            unint64_t v282 = v272 - v274 - 8;
                            if (v282 < 0x168)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            unint64_t v285 = (v272 - 8 - v274) & 0xFFFFFFFFFFFFFFF8;
                            if (&v279[v272 - v274 - 8 - v285] > &v279[v272 - v274 - 8])
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if (&v272[-v285 - 8] > v272 - 8)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if ((unint64_t)(v274 - v279) < 0x20)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            uint64_t v286 = (v282 >> 3) + 1;
                            uint64_t v287 = 8 * (v286 & 0x3FFFFFFFFFFFFFFCLL);
                            v283 = &v272[-v287];
                            v280 -= v287;
                            v288 = &v279[8 * v276 - 16];
                            v289 = v272 - 16;
                            uint64_t v290 = v286 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v291 = *(_OWORD *)v289;
                              *(v288 - 1) = *((_OWORD *)v289 - 1);
                              _OWORD *v288 = v291;
                              v288 -= 2;
                              v289 -= 32;
                              v290 -= 4;
                            }
                            while (v290);
                            if (v286 != (v286 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_381:
                                uint64_t v284 = *((void *)v283 - 1);
                                v283 -= 8;
                                *((void *)v280 - 1) = v284;
                                v280 -= 8;
                              }
                              while (v283 != v274);
                            }
                          }
                          v273 = &v279[8 * v278];
                          if (v274) {
                            operator delete(v274);
                          }
                          v274 = v280;
                          v272 = v281;
                        }
                        BOOL v293 = v236-- <= 0;
                        if (v293)
                        {
                          v292 = v272 - 8;
                          BOOL v293 = v274 != v272 && v292 > v274;
                          if (v293)
                          {
                            v294 = v274 + 8;
                            do
                            {
                              uint64_t v295 = *((void *)v294 - 1);
                              *((void *)v294 - 1) = *(void *)v292;
                              *(void *)v292 = v295;
                              v292 -= 8;
                              BOOL v210 = v294 >= v292;
                              v294 += 8;
                            }
                            while (!v210);
                          }
                          goto LABEL_403;
                        }
                        continue;
                      }
                    }
                    if (v231 >= v232) {
                      break;
                    }
                    *(void *)v231 = v237;
                    v235 = v231 + 8;
LABEL_314:
                    uint64_t v236 = v233 - 1;
                    v231 = v235;
                    BOOL v293 = v233-- <= 0;
                    if (v293) {
                      goto LABEL_346;
                    }
                  }
                  uint64_t v238 = (v231 - (char *)v234) >> 3;
                  unint64_t v239 = v238 + 1;
                  if ((unint64_t)(v238 + 1) >> 61) {
                    goto LABEL_425;
                  }
                  if ((v232 - (char *)v234) >> 2 > v239) {
                    unint64_t v239 = (v232 - (char *)v234) >> 2;
                  }
                  if ((unint64_t)(v232 - (char *)v234) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v240 = v239;
                  }
                  if (v240)
                  {
                    if (v240 >> 61) {
                      goto LABEL_426;
                    }
                    v241 = operator new(8 * v240);
                  }
                  else
                  {
                    v241 = 0;
                  }
                  v242 = (uint64_t *)&v241[8 * v238];
                  uint64_t *v242 = v237;
                  v235 = (char *)(v242 + 1);
                  if (v231 != (char *)v234)
                  {
                    unint64_t v243 = v231 - (char *)v234 - 8;
                    if (v243 >= 0x168)
                    {
                      unint64_t v246 = (v231 - 8 - (char *)v234) & 0xFFFFFFFFFFFFFFF8;
                      if (&v241[v231 - (char *)v234 - 8 - v246] > &v241[v231 - (char *)v234 - 8])
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if (&v231[-v246 - 8] > v231 - 8)
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if ((unint64_t)((char *)v234 - v241) >= 0x20)
                      {
                        uint64_t v247 = (v243 >> 3) + 1;
                        uint64_t v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
                        v244 = (uint64_t *)&v231[-v248];
                        v242 = (uint64_t *)((char *)v242 - v248);
                        v249 = &v241[8 * v238 - 16];
                        v250 = (long long *)(v231 - 16);
                        uint64_t v251 = v247 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v252 = *v250;
                          *(v249 - 1) = *(v250 - 1);
                          _OWORD *v249 = v252;
                          v249 -= 2;
                          v250 -= 2;
                          v251 -= 4;
                        }
                        while (v251);
                        if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL)) {
                          goto LABEL_331;
                        }
                      }
                      else
                      {
                        v244 = (uint64_t *)v231;
                      }
                    }
                    else
                    {
                      v244 = (uint64_t *)v231;
                    }
                    do
                    {
                      uint64_t v245 = *--v244;
                      *--v242 = v245;
                    }
                    while (v244 != v234);
                  }
LABEL_331:
                  v232 = &v241[8 * v240];
                  if (v234) {
                    operator delete(v234);
                  }
                  v234 = v242;
                  goto LABEL_314;
                }
LABEL_260:
                uint64_t v191 = mlir::getNegativeAxis(0, (v113 - v94) >> 3);
                uint64_t v192 = v191;
                if (v114 < v324)
                {
                  *(void *)v114 = v191;
                  v114 += 8;
                  goto LABEL_283;
                }
                int64_t v193 = v114 - v101;
                v194 = v101;
                uint64_t v195 = (v114 - v101) >> 3;
                unint64_t v196 = v195 + 1;
                if ((unint64_t)(v195 + 1) >> 61) {
                  goto LABEL_425;
                }
                v197 = v114;
                v198 = v194;
                unint64_t v199 = v324 - v194;
                unint64_t v200 = (v324 - v194) >> 2;
                if (v200 > v196) {
                  unint64_t v196 = v200;
                }
                if (v199 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
                }
                if (v196)
                {
                  if (v196 >> 61) {
                    goto LABEL_426;
                  }
                  v201 = (char *)operator new(8 * v196);
                }
                else
                {
                  v201 = 0;
                }
                v202 = &v201[8 * v195];
                *(void *)v202 = v192;
                v114 = v202 + 8;
                if (v197 == v198)
                {
                  v205 = v198;
                }
                else
                {
                  unint64_t v203 = v197 - v198 - 8;
                  if (v203 >= 0x58 && (unint64_t)(v197 - v201 - v193) >= 0x20)
                  {
                    uint64_t v302 = (v203 >> 3) + 1;
                    uint64_t v303 = 8 * (v302 & 0x3FFFFFFFFFFFFFFCLL);
                    v204 = &v197[-v303];
                    v202 -= v303;
                    v304 = &v201[8 * v195 - 16];
                    v305 = v197 - 16;
                    uint64_t v306 = v302 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v307 = *(_OWORD *)v305;
                      *((_OWORD *)v304 - 1) = *((_OWORD *)v305 - 1);
                      *(_OWORD *)v304 = v307;
                      v304 -= 32;
                      v305 -= 32;
                      v306 -= 4;
                    }
                    while (v306);
                    v205 = v198;
                    if (v302 == (v302 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_280;
                    }
                  }
                  else
                  {
                    v204 = v197;
                    v205 = v198;
                  }
                  do
                  {
                    uint64_t v206 = *((void *)v204 - 1);
                    v204 -= 8;
                    *((void *)v202 - 1) = v206;
                    v202 -= 8;
                  }
                  while (v204 != v205);
                }
LABEL_280:
                if (v205) {
                  operator delete(v205);
                }
                v101 = v202;
                goto LABEL_283;
              }
              v183 = v101;
              uint64_t v184 = (v106 - v94) >> 3;
              unint64_t v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61) {
                goto LABEL_425;
              }
              if ((v331 - v94) >> 2 > v185) {
                unint64_t v185 = (v331 - v94) >> 2;
              }
              if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
              }
              if (v185)
              {
                if (v185 >> 61) {
                  goto LABEL_426;
                }
                v186 = operator new(8 * v185);
              }
              else
              {
                v186 = 0;
              }
              v187 = (uint64_t *)&v186[8 * v184];
              uint64_t *v187 = v112;
              v113 = (char *)(v187 + 1);
              if (v106 == v94)
              {
                v101 = v183;
                v114 = v325;
                if (!v94)
                {
LABEL_259:
                  v94 = (char *)v187;
                  if (!v111) {
                    goto LABEL_283;
                  }
                  goto LABEL_260;
                }
LABEL_258:
                operator delete(v94);
                goto LABEL_259;
              }
              unint64_t v188 = v106 - v94 - 8;
              if (v188 >= 0x58 && (unint64_t)(v94 - v186) >= 0x20)
              {
                uint64_t v296 = (v188 >> 3) + 1;
                uint64_t v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
                v189 = &v106[-v297];
                v187 = (uint64_t *)((char *)v187 - v297);
                v298 = &v186[8 * v184 - 16];
                v299 = v106 - 16;
                uint64_t v300 = v296 & 0x3FFFFFFFFFFFFFFCLL;
                v114 = v325;
                do
                {
                  long long v301 = *(_OWORD *)v299;
                  *(v298 - 1) = *((_OWORD *)v299 - 1);
                  _OWORD *v298 = v301;
                  v298 -= 2;
                  v299 -= 32;
                  v300 -= 4;
                }
                while (v300);
                v101 = v183;
                if (v296 == (v296 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_257:
                  if (!v94) {
                    goto LABEL_259;
                  }
                  goto LABEL_258;
                }
              }
              else
              {
                v189 = v106;
                v101 = v183;
                v114 = v325;
              }
              do
              {
                uint64_t v190 = *((void *)v189 - 1);
                v189 -= 8;
                *--v187 = v190;
              }
              while (v189 != v94);
              goto LABEL_257;
            }
            uint64_t v115 = v99;
            uint64_t v328 = v103;
            uint64_t v329 = -v88;
            uint64_t v116 = -2;
            uint64_t v112 = 1;
            while (1)
            {
              if (!v111)
              {
                if (v115 == v116)
                {
                  v119 = v331;
                  if (v106 < v331)
                  {
                    *(void *)v106 = v112;
                    v120 = v106 + 8;
LABEL_184:
                    v331 = v119;
                    uint64_t v112 = *(void *)(v328 + 8 * mlir::getPositiveAxis(v115, v88));
                    if (v89 - 8 == v90)
                    {
                      uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
                      BOOL v111 = 1;
                      v106 = v120;
                      v89 = v90;
                    }
                    else
                    {
                      uint64_t v115 = *((void *)v89 - 2);
                      BOOL v111 = 1;
                      v106 = v120;
                      v89 -= 8;
                    }
                    uint64_t v103 = v328;
                    goto LABEL_146;
                  }
                  uint64_t v327 = v115;
                  uint64_t v124 = (v106 - v94) >> 3;
                  unint64_t v125 = v124 + 1;
                  if ((unint64_t)(v124 + 1) >> 61) {
                    goto LABEL_425;
                  }
                  if ((v331 - v94) >> 2 > v125) {
                    unint64_t v125 = (v331 - v94) >> 2;
                  }
                  if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v126 = v125;
                  }
                  v322 = v89;
                  if (v126)
                  {
                    if (v126 >> 61) {
                      goto LABEL_426;
                    }
                    v127 = operator new(8 * v126);
                  }
                  else
                  {
                    v127 = 0;
                  }
                  v133 = (uint64_t *)&v127[8 * v124];
                  uint64_t *v133 = v112;
                  v120 = (char *)(v133 + 1);
                  if (v106 != v94)
                  {
                    unint64_t v134 = v106 - v94 - 8;
                    if (v134 < 0x168
                      || (unint64_t v162 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8,
                          &v127[v106 - v94 - 8 - v162] > &v127[v106 - v94 - 8])
                      || &v106[-v162 - 8] > v106 - 8
                      || (unint64_t)(v94 - v127) < 0x20)
                    {
                      v135 = v106;
                      v90 = v320;
                      uint64_t v88 = v321;
                    }
                    else
                    {
                      uint64_t v163 = (v134 >> 3) + 1;
                      uint64_t v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                      v135 = &v106[-v164];
                      v133 = (uint64_t *)((char *)v133 - v164);
                      v165 = &v127[8 * v124 - 16];
                      v166 = v106 - 16;
                      uint64_t v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                      uint64_t v88 = v321;
                      do
                      {
                        long long v168 = *(_OWORD *)v166;
                        *(v165 - 1) = *((_OWORD *)v166 - 1);
                        _OWORD *v165 = v168;
                        v165 -= 2;
                        v166 -= 32;
                        v167 -= 4;
                      }
                      while (v167);
                      v90 = v320;
                      if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_181:
                        v119 = &v127[8 * v126];
                        if (v94) {
                          goto LABEL_182;
                        }
                        goto LABEL_183;
                      }
                    }
                    do
                    {
                      uint64_t v136 = *((void *)v135 - 1);
                      v135 -= 8;
                      *--v133 = v136;
                    }
                    while (v135 != v94);
                    goto LABEL_181;
                  }
                  v90 = v320;
                  uint64_t v88 = v321;
                  v119 = &v127[8 * v126];
                  if (v94) {
LABEL_182:
                  }
                    operator delete(v94);
LABEL_183:
                  v94 = (char *)v133;
                  v89 = v322;
                  uint64_t v115 = v327;
                  goto LABEL_184;
                }
                uint64_t v117 = v115;
                uint64_t v118 = mlir::getPositiveAxis(v116, v88);
                uint64_t v115 = v117;
                BOOL v111 = 0;
                v112 *= *(void *)(v103 + 8 * v118);
                goto LABEL_146;
              }
              if (v115 == v116)
              {
                v112 *= *(void *)(v103 + 8 * mlir::getPositiveAxis(v115, v88));
                if (v89 - 8 == v90)
                {
                  uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
                  BOOL v111 = 1;
                  v89 = v90;
                }
                else
                {
                  uint64_t v115 = *((void *)v89 - 2);
                  BOOL v111 = 1;
                  v89 -= 8;
                }
                goto LABEL_146;
              }
              v121 = v331;
              uint64_t v326 = v115;
              if (v106 >= v331) {
                break;
              }
              *(void *)v106 = v112;
              v122 = v106 + 8;
              v123 = (uint64_t *)v325;
LABEL_196:
              uint64_t v112 = *(void *)(v103 + 8 * mlir::getPositiveAxis(v116, v88));
              uint64_t v142 = mlir::getNegativeAxis(0, (v122 - v94) >> 3);
              v143 = v122;
              uint64_t v144 = v142;
              v331 = v121;
              if (v123 >= (uint64_t *)v324)
              {
                v319 = v143;
                v145 = v101;
                uint64_t v146 = (char *)v123 - v101;
                uint64_t v147 = v146 >> 3;
                unint64_t v148 = (v146 >> 3) + 1;
                if (v148 >> 61) {
                  goto LABEL_425;
                }
                v149 = v123;
                v150 = (uint64_t *)v145;
                unint64_t v151 = v324 - v145;
                unint64_t v152 = (v324 - v145) >> 2;
                if (v152 > v148) {
                  unint64_t v148 = v152;
                }
                if (v151 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v153 = v148;
                }
                v323 = v89;
                if (v153)
                {
                  if (v153 >> 61) {
                    goto LABEL_426;
                  }
                  v154 = (char *)operator new(8 * v153);
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[8 * v147];
                *(void *)v155 = v144;
                v156 = v155 + 8;
                if (v149 == v150)
                {
                  v90 = v320;
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                  goto LABEL_218;
                }
                unint64_t v157 = (char *)v149 - (char *)v150 - 8;
                v90 = v320;
                if (v157 < 0x168
                  || (unint64_t v176 = ((char *)(v149 - 1) - (char *)v150) & 0xFFFFFFFFFFFFFFF8,
                      &v154[v146 - 8 - v176] > &v154[v146 - 8])
                  || (uint64_t *)((char *)v149 - v176 - 8) > v149 - 1
                  || (unint64_t)((char *)v149 - v154 - v146) < 0x20)
                {
                  v158 = v149;
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                }
                else
                {
                  uint64_t v177 = (v157 >> 3) + 1;
                  uint64_t v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                  v158 = &v149[v178 / 0xFFFFFFFFFFFFFFF8];
                  v155 -= v178;
                  v179 = &v154[8 * v147 - 16];
                  v180 = v149 - 2;
                  uint64_t v181 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v182 = *(_OWORD *)v180;
                    *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
                    *(_OWORD *)v179 = v182;
                    v179 -= 32;
                    v180 -= 4;
                    v181 -= 4;
                  }
                  while (v181);
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                  if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_218:
                    v324 = &v154[8 * v153];
                    if (v150)
                    {
                      v160 = v150;
                      v161 = v156;
                      operator delete(v160);
                      BOOL v111 = 0;
                      v101 = v155;
                      v325 = v161;
                    }
                    else
                    {
                      BOOL v111 = 0;
                      v101 = v155;
                      v325 = v156;
                    }
                    v106 = v319;
                    v89 = v323;
                    uint64_t v115 = v326;
                    goto LABEL_146;
                  }
                }
                do
                {
                  uint64_t v159 = *--v158;
                  *((void *)v155 - 1) = v159;
                  v155 -= 8;
                }
                while (v158 != v150);
                goto LABEL_218;
              }
              BOOL v111 = 0;
              uint64_t *v123 = v142;
              v325 = (char *)(v123 + 1);
              v106 = v143;
              v90 = v320;
              uint64_t v115 = v326;
LABEL_146:
              BOOL v293 = v116-- <= v329;
              if (v293) {
                goto LABEL_142;
              }
            }
            uint64_t v128 = (v106 - v94) >> 3;
            unint64_t v129 = v128 + 1;
            if ((unint64_t)(v128 + 1) >> 61) {
              goto LABEL_425;
            }
            if ((v331 - v94) >> 2 > v129) {
              unint64_t v129 = (v331 - v94) >> 2;
            }
            if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v130 = v129;
            }
            if (v130)
            {
              if (v130 >> 61) {
                goto LABEL_426;
              }
              v131 = v89;
              v132 = operator new(8 * v130);
            }
            else
            {
              v131 = v89;
              v132 = 0;
            }
            v137 = (uint64_t *)&v132[8 * v128];
            uint64_t *v137 = v112;
            v138 = (char *)(v137 + 1);
            if (v106 == v94)
            {
              uint64_t v88 = v321;
              v123 = (uint64_t *)v325;
              v122 = (char *)(v137 + 1);
              v121 = &v132[8 * v130];
              if (!v94) {
                goto LABEL_195;
              }
              goto LABEL_194;
            }
            unint64_t v139 = v106 - v94 - 8;
            if (v139 < 0x168
              || (unint64_t v169 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8, &v132[v106 - v94 - 8 - v169] > &v132[v106 - v94 - 8])
              || &v106[-v169 - 8] > v106 - 8
              || (unint64_t)(v94 - v132) < 0x20)
            {
              v140 = v106;
              uint64_t v88 = v321;
              v123 = (uint64_t *)v325;
              v122 = (char *)(v137 + 1);
            }
            else
            {
              uint64_t v170 = (v139 >> 3) + 1;
              uint64_t v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
              v140 = &v106[-v171];
              v137 = (uint64_t *)((char *)v137 - v171);
              v172 = &v132[8 * v128 - 16];
              v173 = v106 - 16;
              uint64_t v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v88 = v321;
              do
              {
                long long v175 = *(_OWORD *)v173;
                *(v172 - 1) = *((_OWORD *)v173 - 1);
                _OWORD *v172 = v175;
                v172 -= 2;
                v173 -= 32;
                v174 -= 4;
              }
              while (v174);
              v123 = (uint64_t *)v325;
              v122 = v138;
              if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_193:
                v121 = &v132[8 * v130];
                if (!v94)
                {
LABEL_195:
                  v94 = (char *)v137;
                  v89 = v131;
                  uint64_t v103 = v328;
                  goto LABEL_196;
                }
LABEL_194:
                operator delete(v94);
                goto LABEL_195;
              }
            }
            do
            {
              uint64_t v141 = *((void *)v140 - 1);
              v140 -= 8;
              *--v137 = v141;
            }
            while (v140 != v94);
            goto LABEL_193;
          }
          uint64_t v88 = v321;
        }
        else
        {
          v98 = v89 - 8;
          uint64_t v99 = *((void *)v89 - 1);
          if (v99 != -1)
          {
            v101 = 0;
            v100 = 0;
            v324 = 0;
            goto LABEL_130;
          }
          v97 = (char *)operator new(8uLL);
          v324 = v97 + 8;
        }
        *(void *)v97 = -1;
        v100 = v97 + 8;
        if (v98 == v90)
        {
          uint64_t v99 = 0x7FFFFFFFFFFFFFFFLL;
          v89 = v90;
        }
        else
        {
          uint64_t v99 = *((void *)v89 - 2);
          v89 = v98;
        }
        v101 = v97;
        goto LABEL_130;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      uint64_t v347 = v308;
      uint64_t v309 = mlir::Builder::getIntegerType(v318, 0x40u, 1);
      v333 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)&v347, 1, v309, 0);
      v310 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      uint64_t v311 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v347, v310, (unsigned char *)(v311 + 8 * v312));
      uint64_t v313 = *(void *)(v81 + 24);
      v314 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v333);
      v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v314, v315, v347, 8 * v348, 8, 1, 1);
      v345 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, v313, &v344);
      mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(v316, v81, (uint64_t *)&v332, &v345);
      if (v347 != v349) {
        free(v347);
      }
LABEL_420:
      uint64_t v7 = 1;
      goto LABEL_422;
    }
    uint64_t v54 = v53;
    v55 = (char *)v337;
    while (1)
    {
      uint64_t v57 = -v54;
      if (v55 >= v338) {
        break;
      }
      *(void *)v55 = v57;
      v56 = v55 + 8;
LABEL_61:
      unint64_t v337 = (unint64_t)v56;
      v55 = v56;
      if (!--v54) {
        goto LABEL_100;
      }
    }
    v58 = (char *)__p;
    int64_t v59 = v55 - (unsigned char *)__p;
    uint64_t v60 = (v55 - (unsigned char *)__p) >> 3;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61) {
      goto LABEL_425;
    }
    uint64_t v62 = v338 - (unsigned char *)__p;
    if ((v338 - (unsigned char *)__p) >> 2 > v61) {
      unint64_t v61 = v62 >> 2;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      if (v63 >> 61) {
LABEL_426:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      v64 = operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[8 * v60];
    *(void *)v65 = v57;
    v56 = v65 + 8;
    if (v55 == v58) {
      goto LABEL_77;
    }
    unint64_t v66 = v55 - v58 - 8;
    if (v66 < 0x168)
    {
      v67 = v55;
      goto LABEL_76;
    }
    unint64_t v69 = (v55 - 8 - v58) & 0xFFFFFFFFFFFFFFF8;
    if (&v64[v59 - 8 - v69] > &v64[v59 - 8])
    {
      v67 = v55;
    }
    else
    {
      if (&v55[-v69 - 8] <= v55 - 8)
      {
        if ((unint64_t)(v55 - v64 - v59) < 0x20)
        {
          v67 = v55;
          goto LABEL_76;
        }
        uint64_t v70 = (v66 >> 3) + 1;
        uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v55[-v71];
        v65 -= v71;
        v72 = &v64[8 * v60 - 16];
        v73 = v55 - 16;
        uint64_t v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          _OWORD *v72 = v75;
          v72 -= 2;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_76;
        }
LABEL_77:
        __p = v65;
        v338 = &v64[8 * v63];
        if (v58) {
          operator delete(v58);
        }
        goto LABEL_61;
      }
      v67 = v55;
    }
    do
    {
LABEL_76:
      uint64_t v68 = *((void *)v67 - 1);
      v67 -= 8;
      *((void *)v65 - 1) = v68;
      v65 -= 8;
    }
    while (v67 != v58);
    goto LABEL_77;
  }
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReductionMinOp,mlir::Value &,mlir::Value &,BOOL,BOOL>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  v23[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_min", (const unsigned __int8 *)0x11, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    unint64_t v21[2] = (uint64_t)"mps.reduction_min";
    v21[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::mps::ReductionMinOp::build(a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  int v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMinOp,void>::id) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void *mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionProdOp>::~CanonicalizeReductionAxes(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionProdOp>::~CanonicalizeReductionAxes(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionProdOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::UnitAttr **a3)
{
  v348[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9);
    if (v6)
    {
      if (!InherentAttr) {
        return 0;
      }
      goto LABEL_6;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
  if (InherentAttr)
  {
LABEL_6:
    if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
      return 0;
    }
    v316 = a3;
    uint64_t v9 = *(void *)(*(void *)(a2 + 72) + 24);
    uint64_t v10 = (uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v10) {
      goto LABEL_18;
    }
    uint64_t v11 = *v10;
    unint64_t v12 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v13 = *(unsigned int *)(v11 + 16);
    if (!v13) {
      goto LABEL_18;
    }
    char v14 = *(void **)(v11 + 8);
    int v15 = &v14[2 * v13];
    do
    {
      unint64_t v16 = v13 >> 1;
      unint64_t v17 = &v14[2 * (v13 >> 1)];
      unint64_t v19 = *v17;
      uint64_t v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12) {
        char v14 = v18;
      }
      else {
        unint64_t v13 = v16;
      }
    }
    while (v13);
    if (v14 != v15 && *v14 == v12) {
      uint64_t v20 = v14[1];
    }
    else {
LABEL_18:
    }
      uint64_t v20 = 0;
    v341[0] = v10;
    v341[1] = v20;
    uint64_t v21 = (void *)(*(void *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v21;
    unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v24 = *(unsigned int *)(v22 + 16);
    if (!v24) {
      goto LABEL_28;
    }
    v25 = *(void **)(v22 + 8);
    uint64_t v26 = &v25[2 * v24];
    do
    {
      unint64_t v27 = v24 >> 1;
      uint64_t v28 = &v25[2 * (v24 >> 1)];
      unint64_t v30 = *v28;
      uint64_t v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23) {
        v25 = v29;
      }
      else {
        unint64_t v24 = v27;
      }
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
    {
      uint64_t v38 = v25[1];
      v339 = v21;
      uint64_t v340 = v38;
      if (!v10) {
        return 0;
      }
    }
    else
    {
LABEL_28:
      v339 = v21;
      uint64_t v340 = 0;
      if (!v10) {
        return 0;
      }
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v341)) {
      return 0;
    }
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
    if (v32)
    {
      uint64_t v33 = 8 * v32;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v33 -= 8;
        if (!v33) {
          goto LABEL_34;
        }
      }
      return 0;
    }
LABEL_34:
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      uint64_t v330 = *(void *)(a2 + 72);
      unint64_t v34 = *(unsigned int *)(a2 + 68);
    }
    else
    {
      uint64_t v330 = 0;
      unint64_t v34 = 0;
    }
    __p = 0;
    unint64_t v337 = 0;
    v338 = 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
    uint64_t v317 = a2;
    if (v35)
    {
      if (v35 >> 61) {
        goto LABEL_425;
      }
      uint64_t v36 = 8 * v35;
      v37 = (char *)operator new(8 * v35);
      __p = &v37[v337 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v337 = (unint64_t)__p;
      v338 = &v37[v36];
    }
    if (v34 >= 2)
    {
      uint64_t v39 = *(void *)(v330 + 56);
      v346 = v348;
      uint64_t v347 = 0x400000000;
      char matched = mlir::matchConstantWithIntVector<long long>(v39, (uint64_t)&v346);
      if (matched)
      {
        v334 = 0;
        size_t v335 = 0;
        v333 = &v334;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
        if (v347)
        {
          uint64_t v42 = v41;
          v43 = (mlir **)v346;
          v44 = (mlir **)&v346[v347];
          do
          {
            uint64_t NegativeAxis = mlir::getNegativeAxis(*v43, v42);
            uint64_t v47 = NegativeAxis;
            v48 = v334;
            v49 = &v334;
            v50 = &v334;
            if (v334)
            {
              while (1)
              {
                while (1)
                {
                  v50 = (uint64_t **)v48;
                  uint64_t v51 = v48[4];
                  if (NegativeAxis >= v51) {
                    break;
                  }
                  v48 = *v50;
                  v49 = v50;
                  if (!*v50) {
                    goto LABEL_56;
                  }
                }
                if (v51 >= NegativeAxis) {
                  break;
                }
                v48 = v50[1];
                if (!v48)
                {
                  v49 = v50 + 1;
                  goto LABEL_56;
                }
              }
            }
            else
            {
LABEL_56:
              v52 = (uint64_t *)operator new(0x28uLL);
              v52[4] = v47;
              uint64_t *v52 = 0;
              v52[1] = 0;
              v52[2] = (uint64_t)v50;
              *v49 = v52;
              if (*v333)
              {
                v333 = (uint64_t **)*v333;
                v45 = *v49;
              }
              else
              {
                v45 = v52;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v334, v45);
              ++v335;
            }
            ++v43;
          }
          while (v43 != v44);
        }
        if (v335)
        {
          if (v335 >> 61) {
            goto LABEL_425;
          }
          size_t v76 = v335;
          v77 = operator new(8 * v335);
          v78 = (char *)&v77[v76];
          bzero(v77, v76 * 8);
        }
        else
        {
          v78 = 0;
          v77 = 0;
        }
        if (__p)
        {
          unint64_t v337 = (unint64_t)__p;
          operator delete(__p);
        }
        __p = v77;
        unint64_t v337 = (unint64_t)v78;
        v338 = v78;
        v79 = (uint64_t *)v333;
        if (v333 != &v334)
        {
          do
          {
            void *v77 = v79[4];
            v82 = (uint64_t *)v79[1];
            if (v82)
            {
              do
              {
                v83 = (uint64_t **)v82;
                v82 = (uint64_t *)*v82;
              }
              while (v82);
            }
            else
            {
              do
              {
                v83 = (uint64_t **)v79[2];
                BOOL v84 = *v83 == v79;
                v79 = (uint64_t *)v83;
              }
              while (!v84);
            }
            ++v77;
            v79 = (uint64_t *)v83;
          }
          while (v83 != &v334);
        }
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v333, v334);
      }
      if (v346 != v348) {
        free(v346);
      }
      if (!matched) {
        goto LABEL_420;
      }
      goto LABEL_100;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
    if (!v53)
    {
LABEL_100:
      v80 = __p;
      if ((void *)v337 == __p)
      {
        v346 = *(uint64_t **)(*(void *)(v317 + 72) + 24);
        uint64_t v7 = 1;
        mlir::ValueRange::ValueRange(v345, (uint64_t)&v346, 1uLL);
        (*((void (**)(mlir::UnitAttr **, uint64_t, unint64_t, unint64_t))*v316 + 3))(v316, v317, v345[0], v345[1]);
        goto LABEL_422;
      }
      uint64_t v81 = v317;
      if (*(uint64_t *)__p > -5)
      {
        uint64_t v7 = 1;
        goto LABEL_423;
      }
      v332 = *(uint64_t **)(v330 + 24);
      v318 = (mlir::Builder *)(v316 + 1);
LABEL_113:
      if (__p != (void *)v337)
      {
        v85 = v332;
        v342 = v332;
        v346 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v332[1] & 0xFFFFFFFFFFFFFFF8));
        uint64_t v347 = v86;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
        uint64_t v88 = v87;
        v90 = (char *)__p;
        v89 = (char *)v337;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
        if (v91)
        {
          if (v91 >> 61) {
            goto LABEL_425;
          }
          v92 = v89;
          uint64_t v93 = 8 * v91;
          v94 = (char *)operator new(8 * v91);
          v331 = &v94[v93];
          v89 = v92;
        }
        else
        {
          v331 = 0;
          v94 = 0;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
        uint64_t v321 = v88;
        if (v95)
        {
          if (v95 >> 61) {
            goto LABEL_425;
          }
          uint64_t v96 = 8 * v95;
          v97 = (char *)operator new(8 * v95);
          v324 = &v97[v96];
          v98 = v89 - 8;
          uint64_t v99 = *((void *)v89 - 1);
          if (v99 != -1)
          {
            v100 = v97;
            v101 = v97;
            uint64_t v88 = v321;
LABEL_130:
            v333 = (uint64_t **)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v85[1] & 0xFFFFFFFFFFFFFFF8));
            v334 = v102;
            uint64_t v103 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v333);
            uint64_t PositiveAxis = mlir::getPositiveAxis(-1, v88);
            uint64_t v105 = PositiveAxis;
            v320 = v90;
            v325 = v100;
            if (v94 >= v331)
            {
              unint64_t v107 = (v331 - v94) >> 2;
              if (v107 <= 1) {
                unint64_t v107 = 1;
              }
              unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              if ((unint64_t)(v331 - v94) < 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = v107;
              }
              if (v108 >> 61) {
                goto LABEL_426;
              }
              uint64_t v109 = 8 * v108;
              v110 = (char *)operator new(8 * v108);
              *(void *)v110 = *(void *)(v103 + 8 * v105);
              v106 = v110 + 8;
              v331 = &v110[v109];
              if (v94) {
                operator delete(v94);
              }
              v94 = v110;
              v90 = v320;
            }
            else
            {
              *(void *)v94 = *(void *)(v103 + 8 * PositiveAxis);
              v106 = v94 + 8;
            }
            BOOL v111 = v99 == -2;
            if (v88 < 2)
            {
              uint64_t v112 = 1;
LABEL_142:
              if (v106 < v331)
              {
                *(void *)v106 = v112;
                v113 = v106 + 8;
                v114 = v325;
                if (!v111)
                {
LABEL_283:
                  if (v94 != v113)
                  {
                    v207 = v113 - 8;
                    if (v113 - 8 > v94)
                    {
                      v208 = v94 + 8;
                      do
                      {
                        uint64_t v209 = *((void *)v208 - 1);
                        *((void *)v208 - 1) = *(void *)v207;
                        *(void *)v207 = v209;
                        v207 -= 8;
                        BOOL v210 = v208 >= v207;
                        v208 += 8;
                      }
                      while (!v210);
                    }
                  }
                  if (v101 != v114)
                  {
                    v211 = v114 - 8;
                    if (v114 - 8 > v101)
                    {
                      v212 = v101 + 8;
                      do
                      {
                        uint64_t v213 = *((void *)v212 - 1);
                        *((void *)v212 - 1) = *(void *)v211;
                        *(void *)v211 = v213;
                        v211 -= 8;
                        BOOL v210 = v212 >= v211;
                        v212 += 8;
                      }
                      while (!v210);
                    }
                  }
                  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v342);
                  v333 = (uint64_t **)v332;
                  v344 = (mlir::GenericProgramPoint *)((v113 - v94) >> 3);
                  uint64_t IntegerType = mlir::Builder::getIntegerType(v318, 0x40u, 1);
                  v216 = (void *)mlir::RankedTensorType::get((uint64_t)&v344, 1, IntegerType, 0);
                  v217 = v216;
                  if (!v216) {
                    goto LABEL_302;
                  }
                  uint64_t v218 = *v216;
                  unint64_t v219 = mlir::TypeID::get<mlir::ShapedType>();
                  unint64_t v220 = *(unsigned int *)(v218 + 16);
                  if (!v220) {
                    goto LABEL_302;
                  }
                  v221 = *(void **)(v218 + 8);
                  v222 = &v221[2 * v220];
                  do
                  {
                    unint64_t v223 = v220 >> 1;
                    v224 = &v221[2 * (v220 >> 1)];
                    unint64_t v226 = *v224;
                    v225 = v224 + 2;
                    v220 += ~(v220 >> 1);
                    if (v226 < v219) {
                      v221 = v225;
                    }
                    else {
                      unint64_t v220 = v223;
                    }
                  }
                  while (v220);
                  if (v221 != v222 && *v221 == v219) {
                    uint64_t v227 = v221[1];
                  }
                  else {
LABEL_302:
                  }
                    uint64_t v227 = 0;
                  unsigned __int8 v343 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v217, v227, v94, v113 - v94, 8, 1, 1);
                  v344 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, Loc, &v343);
                  v332 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v318, Loc, (uint64_t *)&v333, &v344)- 16);
                  std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v101, v114, (v114 - v101) >> 3);
                  if (v101) {
                    operator delete(v101);
                  }
                  if (v94) {
                    operator delete(v94);
                  }
                  v342 = v332;
                  v346 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v332[1] & 0xFFFFFFFFFFFFFFF8));
                  uint64_t v347 = v228;
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
                  if (v229)
                  {
                    if (v229 >> 61) {
                      goto LABEL_425;
                    }
                    uint64_t v230 = 8 * v229;
                    v231 = (char *)operator new(8 * v229);
                    v232 = &v231[v230];
                  }
                  else
                  {
                    v231 = 0;
                    v232 = 0;
                  }
                  uint64_t v233 = ((uint64_t)(v337 - (void)__p) >> 3) - 1;
                  if ((uint64_t)(v337 - (void)__p) < 1)
                  {
                    uint64_t v236 = ((uint64_t)(v337 - (void)__p) >> 3) - 1;
                    v234 = (uint64_t *)v231;
                    goto LABEL_359;
                  }
                  v234 = (uint64_t *)v231;
                  while (1)
                  {
                    uint64_t v237 = *((void *)__p + v233);
                    if (v237 < -4)
                    {
                      v235 = v231;
                      uint64_t v236 = v233;
LABEL_346:
                      if (v235 != (char *)v234)
                      {
                        uint64_t v253 = mlir::Value::getLoc((mlir::Value *)&v342);
                        v333 = (uint64_t **)v342;
                        v344 = (mlir::GenericProgramPoint *)((v235 - (char *)v234) >> 3);
                        uint64_t v254 = mlir::Builder::getIntegerType(v318, 0x40u, 1);
                        v255 = (void *)mlir::RankedTensorType::get((uint64_t)&v344, 1, v254, 0);
                        v256 = v255;
                        if (!v255) {
                          goto LABEL_356;
                        }
                        uint64_t v257 = *v255;
                        unint64_t v258 = mlir::TypeID::get<mlir::ShapedType>();
                        unint64_t v259 = *(unsigned int *)(v257 + 16);
                        if (!v259) {
                          goto LABEL_356;
                        }
                        v260 = *(void **)(v257 + 8);
                        v261 = &v260[2 * v259];
                        do
                        {
                          unint64_t v262 = v259 >> 1;
                          v263 = &v260[2 * (v259 >> 1)];
                          unint64_t v265 = *v263;
                          v264 = v263 + 2;
                          v259 += ~(v259 >> 1);
                          if (v265 < v258) {
                            v260 = v264;
                          }
                          else {
                            unint64_t v259 = v262;
                          }
                        }
                        while (v259);
                        if (v260 != v261 && *v260 == v258) {
                          uint64_t v266 = v260[1];
                        }
                        else {
LABEL_356:
                        }
                          uint64_t v266 = 0;
                        char v267 = 1;
                        unsigned __int8 v343 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v256, v266, v234, v235 - (char *)v234, 8, 1, 1);
                        v344 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, v253, &v343)- 16);
                        LOBYTE(v343) = 1;
                        v268 = mlir::OpBuilder::create<mlir::mps::ReductionProdOp,mlir::Value &,mlir::Value &,BOOL>((mlir::UnitAttr **)v318, v253, (uint64_t *)&v333, (uint64_t *)&v344, (unsigned __int8 *)&v343);
                        if (mlir::mps::inferTypes(v268, v269))
                        {
                          v332 = (uint64_t *)((char *)v268 - 16);
                          goto LABEL_359;
                        }
LABEL_406:
                        if (v234) {
                          operator delete(v234);
                        }
                        uint64_t v81 = v317;
                        if ((v267 & 1) == 0) {
                          goto LABEL_113;
                        }
                        uint64_t v7 = 0;
LABEL_422:
                        v80 = __p;
                        if (!__p) {
                          return v7;
                        }
LABEL_423:
                        unint64_t v337 = (unint64_t)v80;
                        operator delete(v80);
                        return v7;
                      }
LABEL_359:
                      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
                      if (v270)
                      {
                        if (!(v270 >> 61))
                        {
                          uint64_t v271 = 8 * v270;
                          v272 = (char *)operator new(8 * v270);
                          v273 = &v272[v271];
                          v274 = v272;
                          if ((v236 & 0x8000000000000000) == 0) {
                            goto LABEL_367;
                          }
LABEL_403:
                          std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v274, v272, (v272 - v274) >> 3);
                          if (v274) {
                            operator delete(v274);
                          }
                          char v267 = 0;
                          goto LABEL_406;
                        }
LABEL_425:
                        abort();
                      }
                      v272 = 0;
                      v273 = 0;
                      v274 = 0;
                      if (v236 < 0) {
                        goto LABEL_403;
                      }
LABEL_367:
                      while (2)
                      {
                        uint64_t v275 = *((void *)__p + v236);
                        if (v272 < v273)
                        {
                          *(void *)v272 = v275;
                          v272 += 8;
                        }
                        else
                        {
                          uint64_t v276 = (v272 - v274) >> 3;
                          unint64_t v277 = v276 + 1;
                          if ((unint64_t)(v276 + 1) >> 61) {
                            goto LABEL_425;
                          }
                          if ((v273 - v274) >> 2 > v277) {
                            unint64_t v277 = (v273 - v274) >> 2;
                          }
                          if ((unint64_t)(v273 - v274) >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v278 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v278 = v277;
                          }
                          if (v278)
                          {
                            if (v278 >> 61) {
                              goto LABEL_426;
                            }
                            v279 = operator new(8 * v278);
                          }
                          else
                          {
                            v279 = 0;
                          }
                          v280 = &v279[8 * v276];
                          *(void *)v280 = v275;
                          v281 = v280 + 8;
                          if (v272 != v274)
                          {
                            unint64_t v282 = v272 - v274 - 8;
                            if (v282 < 0x168)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            unint64_t v285 = (v272 - 8 - v274) & 0xFFFFFFFFFFFFFFF8;
                            if (&v279[v272 - v274 - 8 - v285] > &v279[v272 - v274 - 8])
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if (&v272[-v285 - 8] > v272 - 8)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if ((unint64_t)(v274 - v279) < 0x20)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            uint64_t v286 = (v282 >> 3) + 1;
                            uint64_t v287 = 8 * (v286 & 0x3FFFFFFFFFFFFFFCLL);
                            v283 = &v272[-v287];
                            v280 -= v287;
                            v288 = &v279[8 * v276 - 16];
                            v289 = v272 - 16;
                            uint64_t v290 = v286 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v291 = *(_OWORD *)v289;
                              *(v288 - 1) = *((_OWORD *)v289 - 1);
                              _OWORD *v288 = v291;
                              v288 -= 2;
                              v289 -= 32;
                              v290 -= 4;
                            }
                            while (v290);
                            if (v286 != (v286 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_381:
                                uint64_t v284 = *((void *)v283 - 1);
                                v283 -= 8;
                                *((void *)v280 - 1) = v284;
                                v280 -= 8;
                              }
                              while (v283 != v274);
                            }
                          }
                          v273 = &v279[8 * v278];
                          if (v274) {
                            operator delete(v274);
                          }
                          v274 = v280;
                          v272 = v281;
                        }
                        BOOL v293 = v236-- <= 0;
                        if (v293)
                        {
                          v292 = v272 - 8;
                          BOOL v293 = v274 != v272 && v292 > v274;
                          if (v293)
                          {
                            v294 = v274 + 8;
                            do
                            {
                              uint64_t v295 = *((void *)v294 - 1);
                              *((void *)v294 - 1) = *(void *)v292;
                              *(void *)v292 = v295;
                              v292 -= 8;
                              BOOL v210 = v294 >= v292;
                              v294 += 8;
                            }
                            while (!v210);
                          }
                          goto LABEL_403;
                        }
                        continue;
                      }
                    }
                    if (v231 >= v232) {
                      break;
                    }
                    *(void *)v231 = v237;
                    v235 = v231 + 8;
LABEL_314:
                    uint64_t v236 = v233 - 1;
                    v231 = v235;
                    BOOL v293 = v233-- <= 0;
                    if (v293) {
                      goto LABEL_346;
                    }
                  }
                  uint64_t v238 = (v231 - (char *)v234) >> 3;
                  unint64_t v239 = v238 + 1;
                  if ((unint64_t)(v238 + 1) >> 61) {
                    goto LABEL_425;
                  }
                  if ((v232 - (char *)v234) >> 2 > v239) {
                    unint64_t v239 = (v232 - (char *)v234) >> 2;
                  }
                  if ((unint64_t)(v232 - (char *)v234) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v240 = v239;
                  }
                  if (v240)
                  {
                    if (v240 >> 61) {
                      goto LABEL_426;
                    }
                    v241 = operator new(8 * v240);
                  }
                  else
                  {
                    v241 = 0;
                  }
                  v242 = (uint64_t *)&v241[8 * v238];
                  uint64_t *v242 = v237;
                  v235 = (char *)(v242 + 1);
                  if (v231 != (char *)v234)
                  {
                    unint64_t v243 = v231 - (char *)v234 - 8;
                    if (v243 >= 0x168)
                    {
                      unint64_t v246 = (v231 - 8 - (char *)v234) & 0xFFFFFFFFFFFFFFF8;
                      if (&v241[v231 - (char *)v234 - 8 - v246] > &v241[v231 - (char *)v234 - 8])
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if (&v231[-v246 - 8] > v231 - 8)
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if ((unint64_t)((char *)v234 - v241) >= 0x20)
                      {
                        uint64_t v247 = (v243 >> 3) + 1;
                        uint64_t v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
                        v244 = (uint64_t *)&v231[-v248];
                        v242 = (uint64_t *)((char *)v242 - v248);
                        v249 = &v241[8 * v238 - 16];
                        v250 = (long long *)(v231 - 16);
                        uint64_t v251 = v247 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v252 = *v250;
                          *(v249 - 1) = *(v250 - 1);
                          _OWORD *v249 = v252;
                          v249 -= 2;
                          v250 -= 2;
                          v251 -= 4;
                        }
                        while (v251);
                        if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL)) {
                          goto LABEL_331;
                        }
                      }
                      else
                      {
                        v244 = (uint64_t *)v231;
                      }
                    }
                    else
                    {
                      v244 = (uint64_t *)v231;
                    }
                    do
                    {
                      uint64_t v245 = *--v244;
                      *--v242 = v245;
                    }
                    while (v244 != v234);
                  }
LABEL_331:
                  v232 = &v241[8 * v240];
                  if (v234) {
                    operator delete(v234);
                  }
                  v234 = v242;
                  goto LABEL_314;
                }
LABEL_260:
                uint64_t v191 = mlir::getNegativeAxis(0, (v113 - v94) >> 3);
                uint64_t v192 = v191;
                if (v114 < v324)
                {
                  *(void *)v114 = v191;
                  v114 += 8;
                  goto LABEL_283;
                }
                int64_t v193 = v114 - v101;
                v194 = v101;
                uint64_t v195 = (v114 - v101) >> 3;
                unint64_t v196 = v195 + 1;
                if ((unint64_t)(v195 + 1) >> 61) {
                  goto LABEL_425;
                }
                v197 = v114;
                v198 = v194;
                unint64_t v199 = v324 - v194;
                unint64_t v200 = (v324 - v194) >> 2;
                if (v200 > v196) {
                  unint64_t v196 = v200;
                }
                if (v199 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
                }
                if (v196)
                {
                  if (v196 >> 61) {
                    goto LABEL_426;
                  }
                  v201 = (char *)operator new(8 * v196);
                }
                else
                {
                  v201 = 0;
                }
                v202 = &v201[8 * v195];
                *(void *)v202 = v192;
                v114 = v202 + 8;
                if (v197 == v198)
                {
                  v205 = v198;
                }
                else
                {
                  unint64_t v203 = v197 - v198 - 8;
                  if (v203 >= 0x58 && (unint64_t)(v197 - v201 - v193) >= 0x20)
                  {
                    uint64_t v302 = (v203 >> 3) + 1;
                    uint64_t v303 = 8 * (v302 & 0x3FFFFFFFFFFFFFFCLL);
                    v204 = &v197[-v303];
                    v202 -= v303;
                    v304 = &v201[8 * v195 - 16];
                    v305 = v197 - 16;
                    uint64_t v306 = v302 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v307 = *(_OWORD *)v305;
                      *((_OWORD *)v304 - 1) = *((_OWORD *)v305 - 1);
                      *(_OWORD *)v304 = v307;
                      v304 -= 32;
                      v305 -= 32;
                      v306 -= 4;
                    }
                    while (v306);
                    v205 = v198;
                    if (v302 == (v302 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_280;
                    }
                  }
                  else
                  {
                    v204 = v197;
                    v205 = v198;
                  }
                  do
                  {
                    uint64_t v206 = *((void *)v204 - 1);
                    v204 -= 8;
                    *((void *)v202 - 1) = v206;
                    v202 -= 8;
                  }
                  while (v204 != v205);
                }
LABEL_280:
                if (v205) {
                  operator delete(v205);
                }
                v101 = v202;
                goto LABEL_283;
              }
              v183 = v101;
              uint64_t v184 = (v106 - v94) >> 3;
              unint64_t v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61) {
                goto LABEL_425;
              }
              if ((v331 - v94) >> 2 > v185) {
                unint64_t v185 = (v331 - v94) >> 2;
              }
              if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
              }
              if (v185)
              {
                if (v185 >> 61) {
                  goto LABEL_426;
                }
                v186 = operator new(8 * v185);
              }
              else
              {
                v186 = 0;
              }
              v187 = (uint64_t *)&v186[8 * v184];
              uint64_t *v187 = v112;
              v113 = (char *)(v187 + 1);
              if (v106 == v94)
              {
                v101 = v183;
                v114 = v325;
                if (!v94)
                {
LABEL_259:
                  v94 = (char *)v187;
                  if (!v111) {
                    goto LABEL_283;
                  }
                  goto LABEL_260;
                }
LABEL_258:
                operator delete(v94);
                goto LABEL_259;
              }
              unint64_t v188 = v106 - v94 - 8;
              if (v188 >= 0x58 && (unint64_t)(v94 - v186) >= 0x20)
              {
                uint64_t v296 = (v188 >> 3) + 1;
                uint64_t v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
                v189 = &v106[-v297];
                v187 = (uint64_t *)((char *)v187 - v297);
                v298 = &v186[8 * v184 - 16];
                v299 = v106 - 16;
                uint64_t v300 = v296 & 0x3FFFFFFFFFFFFFFCLL;
                v114 = v325;
                do
                {
                  long long v301 = *(_OWORD *)v299;
                  *(v298 - 1) = *((_OWORD *)v299 - 1);
                  _OWORD *v298 = v301;
                  v298 -= 2;
                  v299 -= 32;
                  v300 -= 4;
                }
                while (v300);
                v101 = v183;
                if (v296 == (v296 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_257:
                  if (!v94) {
                    goto LABEL_259;
                  }
                  goto LABEL_258;
                }
              }
              else
              {
                v189 = v106;
                v101 = v183;
                v114 = v325;
              }
              do
              {
                uint64_t v190 = *((void *)v189 - 1);
                v189 -= 8;
                *--v187 = v190;
              }
              while (v189 != v94);
              goto LABEL_257;
            }
            uint64_t v115 = v99;
            uint64_t v328 = v103;
            uint64_t v329 = -v88;
            uint64_t v116 = -2;
            uint64_t v112 = 1;
            while (1)
            {
              if (!v111)
              {
                if (v115 == v116)
                {
                  v119 = v331;
                  if (v106 < v331)
                  {
                    *(void *)v106 = v112;
                    v120 = v106 + 8;
LABEL_184:
                    v331 = v119;
                    uint64_t v112 = *(void *)(v328 + 8 * mlir::getPositiveAxis(v115, v88));
                    if (v89 - 8 == v90)
                    {
                      uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
                      BOOL v111 = 1;
                      v106 = v120;
                      v89 = v90;
                    }
                    else
                    {
                      uint64_t v115 = *((void *)v89 - 2);
                      BOOL v111 = 1;
                      v106 = v120;
                      v89 -= 8;
                    }
                    uint64_t v103 = v328;
                    goto LABEL_146;
                  }
                  uint64_t v327 = v115;
                  uint64_t v124 = (v106 - v94) >> 3;
                  unint64_t v125 = v124 + 1;
                  if ((unint64_t)(v124 + 1) >> 61) {
                    goto LABEL_425;
                  }
                  if ((v331 - v94) >> 2 > v125) {
                    unint64_t v125 = (v331 - v94) >> 2;
                  }
                  if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v126 = v125;
                  }
                  v322 = v89;
                  if (v126)
                  {
                    if (v126 >> 61) {
                      goto LABEL_426;
                    }
                    v127 = operator new(8 * v126);
                  }
                  else
                  {
                    v127 = 0;
                  }
                  v133 = (uint64_t *)&v127[8 * v124];
                  uint64_t *v133 = v112;
                  v120 = (char *)(v133 + 1);
                  if (v106 != v94)
                  {
                    unint64_t v134 = v106 - v94 - 8;
                    if (v134 < 0x168
                      || (unint64_t v162 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8,
                          &v127[v106 - v94 - 8 - v162] > &v127[v106 - v94 - 8])
                      || &v106[-v162 - 8] > v106 - 8
                      || (unint64_t)(v94 - v127) < 0x20)
                    {
                      v135 = v106;
                      v90 = v320;
                      uint64_t v88 = v321;
                    }
                    else
                    {
                      uint64_t v163 = (v134 >> 3) + 1;
                      uint64_t v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                      v135 = &v106[-v164];
                      v133 = (uint64_t *)((char *)v133 - v164);
                      v165 = &v127[8 * v124 - 16];
                      v166 = v106 - 16;
                      uint64_t v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                      uint64_t v88 = v321;
                      do
                      {
                        long long v168 = *(_OWORD *)v166;
                        *(v165 - 1) = *((_OWORD *)v166 - 1);
                        _OWORD *v165 = v168;
                        v165 -= 2;
                        v166 -= 32;
                        v167 -= 4;
                      }
                      while (v167);
                      v90 = v320;
                      if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_181:
                        v119 = &v127[8 * v126];
                        if (v94) {
                          goto LABEL_182;
                        }
                        goto LABEL_183;
                      }
                    }
                    do
                    {
                      uint64_t v136 = *((void *)v135 - 1);
                      v135 -= 8;
                      *--v133 = v136;
                    }
                    while (v135 != v94);
                    goto LABEL_181;
                  }
                  v90 = v320;
                  uint64_t v88 = v321;
                  v119 = &v127[8 * v126];
                  if (v94) {
LABEL_182:
                  }
                    operator delete(v94);
LABEL_183:
                  v94 = (char *)v133;
                  v89 = v322;
                  uint64_t v115 = v327;
                  goto LABEL_184;
                }
                uint64_t v117 = v115;
                uint64_t v118 = mlir::getPositiveAxis(v116, v88);
                uint64_t v115 = v117;
                BOOL v111 = 0;
                v112 *= *(void *)(v103 + 8 * v118);
                goto LABEL_146;
              }
              if (v115 == v116)
              {
                v112 *= *(void *)(v103 + 8 * mlir::getPositiveAxis(v115, v88));
                if (v89 - 8 == v90)
                {
                  uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
                  BOOL v111 = 1;
                  v89 = v90;
                }
                else
                {
                  uint64_t v115 = *((void *)v89 - 2);
                  BOOL v111 = 1;
                  v89 -= 8;
                }
                goto LABEL_146;
              }
              v121 = v331;
              uint64_t v326 = v115;
              if (v106 >= v331) {
                break;
              }
              *(void *)v106 = v112;
              v122 = v106 + 8;
              v123 = (uint64_t *)v325;
LABEL_196:
              uint64_t v112 = *(void *)(v103 + 8 * mlir::getPositiveAxis(v116, v88));
              uint64_t v142 = mlir::getNegativeAxis(0, (v122 - v94) >> 3);
              v143 = v122;
              uint64_t v144 = v142;
              v331 = v121;
              if (v123 >= (uint64_t *)v324)
              {
                v319 = v143;
                v145 = v101;
                uint64_t v146 = (char *)v123 - v101;
                uint64_t v147 = v146 >> 3;
                unint64_t v148 = (v146 >> 3) + 1;
                if (v148 >> 61) {
                  goto LABEL_425;
                }
                v149 = v123;
                v150 = (uint64_t *)v145;
                unint64_t v151 = v324 - v145;
                unint64_t v152 = (v324 - v145) >> 2;
                if (v152 > v148) {
                  unint64_t v148 = v152;
                }
                if (v151 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v153 = v148;
                }
                v323 = v89;
                if (v153)
                {
                  if (v153 >> 61) {
                    goto LABEL_426;
                  }
                  v154 = (char *)operator new(8 * v153);
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[8 * v147];
                *(void *)v155 = v144;
                v156 = v155 + 8;
                if (v149 == v150)
                {
                  v90 = v320;
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                  goto LABEL_218;
                }
                unint64_t v157 = (char *)v149 - (char *)v150 - 8;
                v90 = v320;
                if (v157 < 0x168
                  || (unint64_t v176 = ((char *)(v149 - 1) - (char *)v150) & 0xFFFFFFFFFFFFFFF8,
                      &v154[v146 - 8 - v176] > &v154[v146 - 8])
                  || (uint64_t *)((char *)v149 - v176 - 8) > v149 - 1
                  || (unint64_t)((char *)v149 - v154 - v146) < 0x20)
                {
                  v158 = v149;
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                }
                else
                {
                  uint64_t v177 = (v157 >> 3) + 1;
                  uint64_t v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                  v158 = &v149[v178 / 0xFFFFFFFFFFFFFFF8];
                  v155 -= v178;
                  v179 = &v154[8 * v147 - 16];
                  v180 = v149 - 2;
                  uint64_t v181 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v182 = *(_OWORD *)v180;
                    *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
                    *(_OWORD *)v179 = v182;
                    v179 -= 32;
                    v180 -= 4;
                    v181 -= 4;
                  }
                  while (v181);
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                  if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_218:
                    v324 = &v154[8 * v153];
                    if (v150)
                    {
                      v160 = v150;
                      v161 = v156;
                      operator delete(v160);
                      BOOL v111 = 0;
                      v101 = v155;
                      v325 = v161;
                    }
                    else
                    {
                      BOOL v111 = 0;
                      v101 = v155;
                      v325 = v156;
                    }
                    v106 = v319;
                    v89 = v323;
                    uint64_t v115 = v326;
                    goto LABEL_146;
                  }
                }
                do
                {
                  uint64_t v159 = *--v158;
                  *((void *)v155 - 1) = v159;
                  v155 -= 8;
                }
                while (v158 != v150);
                goto LABEL_218;
              }
              BOOL v111 = 0;
              uint64_t *v123 = v142;
              v325 = (char *)(v123 + 1);
              v106 = v143;
              v90 = v320;
              uint64_t v115 = v326;
LABEL_146:
              BOOL v293 = v116-- <= v329;
              if (v293) {
                goto LABEL_142;
              }
            }
            uint64_t v128 = (v106 - v94) >> 3;
            unint64_t v129 = v128 + 1;
            if ((unint64_t)(v128 + 1) >> 61) {
              goto LABEL_425;
            }
            if ((v331 - v94) >> 2 > v129) {
              unint64_t v129 = (v331 - v94) >> 2;
            }
            if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v130 = v129;
            }
            if (v130)
            {
              if (v130 >> 61) {
                goto LABEL_426;
              }
              v131 = v89;
              v132 = operator new(8 * v130);
            }
            else
            {
              v131 = v89;
              v132 = 0;
            }
            v137 = (uint64_t *)&v132[8 * v128];
            uint64_t *v137 = v112;
            v138 = (char *)(v137 + 1);
            if (v106 == v94)
            {
              uint64_t v88 = v321;
              v123 = (uint64_t *)v325;
              v122 = (char *)(v137 + 1);
              v121 = &v132[8 * v130];
              if (!v94) {
                goto LABEL_195;
              }
              goto LABEL_194;
            }
            unint64_t v139 = v106 - v94 - 8;
            if (v139 < 0x168
              || (unint64_t v169 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8, &v132[v106 - v94 - 8 - v169] > &v132[v106 - v94 - 8])
              || &v106[-v169 - 8] > v106 - 8
              || (unint64_t)(v94 - v132) < 0x20)
            {
              v140 = v106;
              uint64_t v88 = v321;
              v123 = (uint64_t *)v325;
              v122 = (char *)(v137 + 1);
            }
            else
            {
              uint64_t v170 = (v139 >> 3) + 1;
              uint64_t v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
              v140 = &v106[-v171];
              v137 = (uint64_t *)((char *)v137 - v171);
              v172 = &v132[8 * v128 - 16];
              v173 = v106 - 16;
              uint64_t v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v88 = v321;
              do
              {
                long long v175 = *(_OWORD *)v173;
                *(v172 - 1) = *((_OWORD *)v173 - 1);
                _OWORD *v172 = v175;
                v172 -= 2;
                v173 -= 32;
                v174 -= 4;
              }
              while (v174);
              v123 = (uint64_t *)v325;
              v122 = v138;
              if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_193:
                v121 = &v132[8 * v130];
                if (!v94)
                {
LABEL_195:
                  v94 = (char *)v137;
                  v89 = v131;
                  uint64_t v103 = v328;
                  goto LABEL_196;
                }
LABEL_194:
                operator delete(v94);
                goto LABEL_195;
              }
            }
            do
            {
              uint64_t v141 = *((void *)v140 - 1);
              v140 -= 8;
              *--v137 = v141;
            }
            while (v140 != v94);
            goto LABEL_193;
          }
          uint64_t v88 = v321;
        }
        else
        {
          v98 = v89 - 8;
          uint64_t v99 = *((void *)v89 - 1);
          if (v99 != -1)
          {
            v101 = 0;
            v100 = 0;
            v324 = 0;
            goto LABEL_130;
          }
          v97 = (char *)operator new(8uLL);
          v324 = v97 + 8;
        }
        *(void *)v97 = -1;
        v100 = v97 + 8;
        if (v98 == v90)
        {
          uint64_t v99 = 0x7FFFFFFFFFFFFFFFLL;
          v89 = v90;
        }
        else
        {
          uint64_t v99 = *((void *)v89 - 2);
          v89 = v98;
        }
        v101 = v97;
        goto LABEL_130;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      v346 = v308;
      uint64_t v309 = mlir::Builder::getIntegerType(v318, 0x40u, 1);
      v333 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)&v346, 1, v309, 0);
      v310 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      uint64_t v311 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v346, v310, (unsigned char *)(v311 + 8 * v312));
      uint64_t v313 = *(void *)(v81 + 24);
      v314 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v333);
      unsigned __int8 v343 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v314, v315, v346, 8 * v347, 8, 1, 1);
      v344 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, v313, &v343);
      mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(v316, v81, (uint64_t *)&v332, &v344);
      if (v346 != v348) {
        free(v346);
      }
LABEL_420:
      uint64_t v7 = 1;
      goto LABEL_422;
    }
    uint64_t v54 = v53;
    v55 = (char *)v337;
    while (1)
    {
      uint64_t v57 = -v54;
      if (v55 >= v338) {
        break;
      }
      *(void *)v55 = v57;
      v56 = v55 + 8;
LABEL_61:
      unint64_t v337 = (unint64_t)v56;
      v55 = v56;
      if (!--v54) {
        goto LABEL_100;
      }
    }
    v58 = (char *)__p;
    int64_t v59 = v55 - (unsigned char *)__p;
    uint64_t v60 = (v55 - (unsigned char *)__p) >> 3;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61) {
      goto LABEL_425;
    }
    uint64_t v62 = v338 - (unsigned char *)__p;
    if ((v338 - (unsigned char *)__p) >> 2 > v61) {
      unint64_t v61 = v62 >> 2;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      if (v63 >> 61) {
LABEL_426:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      v64 = operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[8 * v60];
    *(void *)v65 = v57;
    v56 = v65 + 8;
    if (v55 == v58) {
      goto LABEL_77;
    }
    unint64_t v66 = v55 - v58 - 8;
    if (v66 < 0x168)
    {
      v67 = v55;
      goto LABEL_76;
    }
    unint64_t v69 = (v55 - 8 - v58) & 0xFFFFFFFFFFFFFFF8;
    if (&v64[v59 - 8 - v69] > &v64[v59 - 8])
    {
      v67 = v55;
    }
    else
    {
      if (&v55[-v69 - 8] <= v55 - 8)
      {
        if ((unint64_t)(v55 - v64 - v59) < 0x20)
        {
          v67 = v55;
          goto LABEL_76;
        }
        uint64_t v70 = (v66 >> 3) + 1;
        uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v55[-v71];
        v65 -= v71;
        v72 = &v64[8 * v60 - 16];
        v73 = v55 - 16;
        uint64_t v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          _OWORD *v72 = v75;
          v72 -= 2;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_76;
        }
LABEL_77:
        __p = v65;
        v338 = &v64[8 * v63];
        if (v58) {
          operator delete(v58);
        }
        goto LABEL_61;
      }
      v67 = v55;
    }
    do
    {
LABEL_76:
      uint64_t v68 = *((void *)v67 - 1);
      v67 -= 8;
      *((void *)v65 - 1) = v68;
      v65 -= 8;
    }
    while (v67 != v58);
    goto LABEL_77;
  }
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReductionProdOp,mlir::Value &,mlir::Value &,BOOL>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_prod", (const unsigned __int8 *)0x12, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    unint64_t v19[2] = (uint64_t)"mps.reduction_prod";
    v19[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::mps::ReductionProdOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  unint64_t v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionProdOp,void>::id) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void *mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionSumOp>::~CanonicalizeReductionAxes(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionSumOp>::~CanonicalizeReductionAxes(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionSumOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::UnitAttr **a3)
{
  v348[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9);
    if (v6)
    {
      if (!InherentAttr) {
        return 0;
      }
      goto LABEL_6;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
  if (InherentAttr)
  {
LABEL_6:
    if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
      return 0;
    }
    v316 = a3;
    uint64_t v9 = *(void *)(*(void *)(a2 + 72) + 24);
    uint64_t v10 = (uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v10) {
      goto LABEL_18;
    }
    uint64_t v11 = *v10;
    unint64_t v12 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v13 = *(unsigned int *)(v11 + 16);
    if (!v13) {
      goto LABEL_18;
    }
    char v14 = *(void **)(v11 + 8);
    int v15 = &v14[2 * v13];
    do
    {
      unint64_t v16 = v13 >> 1;
      unint64_t v17 = &v14[2 * (v13 >> 1)];
      unint64_t v19 = *v17;
      __int16 v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12) {
        char v14 = v18;
      }
      else {
        unint64_t v13 = v16;
      }
    }
    while (v13);
    if (v14 != v15 && *v14 == v12) {
      uint64_t v20 = v14[1];
    }
    else {
LABEL_18:
    }
      uint64_t v20 = 0;
    v341[0] = v10;
    v341[1] = v20;
    uint64_t v21 = (void *)(*(void *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v21;
    unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v24 = *(unsigned int *)(v22 + 16);
    if (!v24) {
      goto LABEL_28;
    }
    v25 = *(void **)(v22 + 8);
    uint64_t v26 = &v25[2 * v24];
    do
    {
      unint64_t v27 = v24 >> 1;
      uint64_t v28 = &v25[2 * (v24 >> 1)];
      unint64_t v30 = *v28;
      uint64_t v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23) {
        v25 = v29;
      }
      else {
        unint64_t v24 = v27;
      }
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
    {
      uint64_t v38 = v25[1];
      v339 = v21;
      uint64_t v340 = v38;
      if (!v10) {
        return 0;
      }
    }
    else
    {
LABEL_28:
      v339 = v21;
      uint64_t v340 = 0;
      if (!v10) {
        return 0;
      }
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v341)) {
      return 0;
    }
    ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
    if (v32)
    {
      uint64_t v33 = 8 * v32;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v33 -= 8;
        if (!v33) {
          goto LABEL_34;
        }
      }
      return 0;
    }
LABEL_34:
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      uint64_t v330 = *(void *)(a2 + 72);
      unint64_t v34 = *(unsigned int *)(a2 + 68);
    }
    else
    {
      uint64_t v330 = 0;
      unint64_t v34 = 0;
    }
    __p = 0;
    unint64_t v337 = 0;
    v338 = 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
    uint64_t v317 = a2;
    if (v35)
    {
      if (v35 >> 61) {
        goto LABEL_425;
      }
      uint64_t v36 = 8 * v35;
      v37 = (char *)operator new(8 * v35);
      __p = &v37[v337 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v337 = (unint64_t)__p;
      v338 = &v37[v36];
    }
    if (v34 >= 2)
    {
      uint64_t v39 = *(void *)(v330 + 56);
      v346 = v348;
      uint64_t v347 = 0x400000000;
      char matched = mlir::matchConstantWithIntVector<long long>(v39, (uint64_t)&v346);
      if (matched)
      {
        v334 = 0;
        size_t v335 = 0;
        v333 = &v334;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
        if (v347)
        {
          uint64_t v42 = v41;
          v43 = (mlir **)v346;
          v44 = (mlir **)&v346[v347];
          do
          {
            uint64_t NegativeAxis = mlir::getNegativeAxis(*v43, v42);
            uint64_t v47 = NegativeAxis;
            v48 = v334;
            v49 = &v334;
            v50 = &v334;
            if (v334)
            {
              while (1)
              {
                while (1)
                {
                  v50 = (uint64_t **)v48;
                  uint64_t v51 = v48[4];
                  if (NegativeAxis >= v51) {
                    break;
                  }
                  v48 = *v50;
                  v49 = v50;
                  if (!*v50) {
                    goto LABEL_56;
                  }
                }
                if (v51 >= NegativeAxis) {
                  break;
                }
                v48 = v50[1];
                if (!v48)
                {
                  v49 = v50 + 1;
                  goto LABEL_56;
                }
              }
            }
            else
            {
LABEL_56:
              v52 = (uint64_t *)operator new(0x28uLL);
              v52[4] = v47;
              uint64_t *v52 = 0;
              v52[1] = 0;
              v52[2] = (uint64_t)v50;
              *v49 = v52;
              if (*v333)
              {
                v333 = (uint64_t **)*v333;
                v45 = *v49;
              }
              else
              {
                v45 = v52;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v334, v45);
              ++v335;
            }
            ++v43;
          }
          while (v43 != v44);
        }
        if (v335)
        {
          if (v335 >> 61) {
            goto LABEL_425;
          }
          size_t v76 = v335;
          v77 = operator new(8 * v335);
          v78 = (char *)&v77[v76];
          bzero(v77, v76 * 8);
        }
        else
        {
          v78 = 0;
          v77 = 0;
        }
        if (__p)
        {
          unint64_t v337 = (unint64_t)__p;
          operator delete(__p);
        }
        __p = v77;
        unint64_t v337 = (unint64_t)v78;
        v338 = v78;
        v79 = (uint64_t *)v333;
        if (v333 != &v334)
        {
          do
          {
            void *v77 = v79[4];
            v82 = (uint64_t *)v79[1];
            if (v82)
            {
              do
              {
                v83 = (uint64_t **)v82;
                v82 = (uint64_t *)*v82;
              }
              while (v82);
            }
            else
            {
              do
              {
                v83 = (uint64_t **)v79[2];
                BOOL v84 = *v83 == v79;
                v79 = (uint64_t *)v83;
              }
              while (!v84);
            }
            ++v77;
            v79 = (uint64_t *)v83;
          }
          while (v83 != &v334);
        }
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v333, v334);
      }
      if (v346 != v348) {
        free(v346);
      }
      if (!matched) {
        goto LABEL_420;
      }
      goto LABEL_100;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v339);
    if (!v53)
    {
LABEL_100:
      v80 = __p;
      if ((void *)v337 == __p)
      {
        v346 = *(uint64_t **)(*(void *)(v317 + 72) + 24);
        uint64_t v7 = 1;
        mlir::ValueRange::ValueRange(v345, (uint64_t)&v346, 1uLL);
        (*((void (**)(mlir::UnitAttr **, uint64_t, unint64_t, unint64_t))*v316 + 3))(v316, v317, v345[0], v345[1]);
        goto LABEL_422;
      }
      uint64_t v81 = v317;
      if (*(uint64_t *)__p > -5)
      {
        uint64_t v7 = 1;
        goto LABEL_423;
      }
      v332 = *(uint64_t **)(v330 + 24);
      v318 = (mlir::Builder *)(v316 + 1);
LABEL_113:
      if (__p != (void *)v337)
      {
        v85 = v332;
        v342 = v332;
        v346 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v332[1] & 0xFFFFFFFFFFFFFFF8));
        uint64_t v347 = v86;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
        uint64_t v88 = v87;
        v90 = (char *)__p;
        v89 = (char *)v337;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
        if (v91)
        {
          if (v91 >> 61) {
            goto LABEL_425;
          }
          v92 = v89;
          uint64_t v93 = 8 * v91;
          v94 = (char *)operator new(8 * v91);
          v331 = &v94[v93];
          v89 = v92;
        }
        else
        {
          v331 = 0;
          v94 = 0;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
        uint64_t v321 = v88;
        if (v95)
        {
          if (v95 >> 61) {
            goto LABEL_425;
          }
          uint64_t v96 = 8 * v95;
          v97 = (char *)operator new(8 * v95);
          v324 = &v97[v96];
          v98 = v89 - 8;
          uint64_t v99 = *((void *)v89 - 1);
          if (v99 != -1)
          {
            v100 = v97;
            v101 = v97;
            uint64_t v88 = v321;
LABEL_130:
            v333 = (uint64_t **)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v85[1] & 0xFFFFFFFFFFFFFFF8));
            v334 = v102;
            uint64_t v103 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v333);
            uint64_t PositiveAxis = mlir::getPositiveAxis(-1, v88);
            uint64_t v105 = PositiveAxis;
            v320 = v90;
            v325 = v100;
            if (v94 >= v331)
            {
              unint64_t v107 = (v331 - v94) >> 2;
              if (v107 <= 1) {
                unint64_t v107 = 1;
              }
              unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              if ((unint64_t)(v331 - v94) < 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = v107;
              }
              if (v108 >> 61) {
                goto LABEL_426;
              }
              uint64_t v109 = 8 * v108;
              v110 = (char *)operator new(8 * v108);
              *(void *)v110 = *(void *)(v103 + 8 * v105);
              v106 = v110 + 8;
              v331 = &v110[v109];
              if (v94) {
                operator delete(v94);
              }
              v94 = v110;
              v90 = v320;
            }
            else
            {
              *(void *)v94 = *(void *)(v103 + 8 * PositiveAxis);
              v106 = v94 + 8;
            }
            BOOL v111 = v99 == -2;
            if (v88 < 2)
            {
              uint64_t v112 = 1;
LABEL_142:
              if (v106 < v331)
              {
                *(void *)v106 = v112;
                v113 = v106 + 8;
                v114 = v325;
                if (!v111)
                {
LABEL_283:
                  if (v94 != v113)
                  {
                    v207 = v113 - 8;
                    if (v113 - 8 > v94)
                    {
                      v208 = v94 + 8;
                      do
                      {
                        uint64_t v209 = *((void *)v208 - 1);
                        *((void *)v208 - 1) = *(void *)v207;
                        *(void *)v207 = v209;
                        v207 -= 8;
                        BOOL v210 = v208 >= v207;
                        v208 += 8;
                      }
                      while (!v210);
                    }
                  }
                  if (v101 != v114)
                  {
                    v211 = v114 - 8;
                    if (v114 - 8 > v101)
                    {
                      v212 = v101 + 8;
                      do
                      {
                        uint64_t v213 = *((void *)v212 - 1);
                        *((void *)v212 - 1) = *(void *)v211;
                        *(void *)v211 = v213;
                        v211 -= 8;
                        BOOL v210 = v212 >= v211;
                        v212 += 8;
                      }
                      while (!v210);
                    }
                  }
                  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v342);
                  v333 = (uint64_t **)v332;
                  v344 = (mlir::GenericProgramPoint *)((v113 - v94) >> 3);
                  uint64_t IntegerType = mlir::Builder::getIntegerType(v318, 0x40u, 1);
                  v216 = (void *)mlir::RankedTensorType::get((uint64_t)&v344, 1, IntegerType, 0);
                  v217 = v216;
                  if (!v216) {
                    goto LABEL_302;
                  }
                  uint64_t v218 = *v216;
                  unint64_t v219 = mlir::TypeID::get<mlir::ShapedType>();
                  unint64_t v220 = *(unsigned int *)(v218 + 16);
                  if (!v220) {
                    goto LABEL_302;
                  }
                  v221 = *(void **)(v218 + 8);
                  v222 = &v221[2 * v220];
                  do
                  {
                    unint64_t v223 = v220 >> 1;
                    v224 = &v221[2 * (v220 >> 1)];
                    unint64_t v226 = *v224;
                    v225 = v224 + 2;
                    v220 += ~(v220 >> 1);
                    if (v226 < v219) {
                      v221 = v225;
                    }
                    else {
                      unint64_t v220 = v223;
                    }
                  }
                  while (v220);
                  if (v221 != v222 && *v221 == v219) {
                    uint64_t v227 = v221[1];
                  }
                  else {
LABEL_302:
                  }
                    uint64_t v227 = 0;
                  unsigned __int8 v343 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v217, v227, v94, v113 - v94, 8, 1, 1);
                  v344 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, Loc, &v343);
                  v332 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v318, Loc, (uint64_t *)&v333, &v344)- 16);
                  std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v101, v114, (v114 - v101) >> 3);
                  if (v101) {
                    operator delete(v101);
                  }
                  if (v94) {
                    operator delete(v94);
                  }
                  v342 = v332;
                  v346 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v332[1] & 0xFFFFFFFFFFFFFFF8));
                  uint64_t v347 = v228;
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
                  if (v229)
                  {
                    if (v229 >> 61) {
                      goto LABEL_425;
                    }
                    uint64_t v230 = 8 * v229;
                    v231 = (char *)operator new(8 * v229);
                    v232 = &v231[v230];
                  }
                  else
                  {
                    v231 = 0;
                    v232 = 0;
                  }
                  uint64_t v233 = ((uint64_t)(v337 - (void)__p) >> 3) - 1;
                  if ((uint64_t)(v337 - (void)__p) < 1)
                  {
                    uint64_t v236 = ((uint64_t)(v337 - (void)__p) >> 3) - 1;
                    v234 = (uint64_t *)v231;
                    goto LABEL_359;
                  }
                  v234 = (uint64_t *)v231;
                  while (1)
                  {
                    uint64_t v237 = *((void *)__p + v233);
                    if (v237 < -4)
                    {
                      v235 = v231;
                      uint64_t v236 = v233;
LABEL_346:
                      if (v235 != (char *)v234)
                      {
                        uint64_t v253 = mlir::Value::getLoc((mlir::Value *)&v342);
                        v333 = (uint64_t **)v342;
                        v344 = (mlir::GenericProgramPoint *)((v235 - (char *)v234) >> 3);
                        uint64_t v254 = mlir::Builder::getIntegerType(v318, 0x40u, 1);
                        v255 = (void *)mlir::RankedTensorType::get((uint64_t)&v344, 1, v254, 0);
                        v256 = v255;
                        if (!v255) {
                          goto LABEL_356;
                        }
                        uint64_t v257 = *v255;
                        unint64_t v258 = mlir::TypeID::get<mlir::ShapedType>();
                        unint64_t v259 = *(unsigned int *)(v257 + 16);
                        if (!v259) {
                          goto LABEL_356;
                        }
                        v260 = *(void **)(v257 + 8);
                        v261 = &v260[2 * v259];
                        do
                        {
                          unint64_t v262 = v259 >> 1;
                          v263 = &v260[2 * (v259 >> 1)];
                          unint64_t v265 = *v263;
                          v264 = v263 + 2;
                          v259 += ~(v259 >> 1);
                          if (v265 < v258) {
                            v260 = v264;
                          }
                          else {
                            unint64_t v259 = v262;
                          }
                        }
                        while (v259);
                        if (v260 != v261 && *v260 == v258) {
                          uint64_t v266 = v260[1];
                        }
                        else {
LABEL_356:
                        }
                          uint64_t v266 = 0;
                        char v267 = 1;
                        unsigned __int8 v343 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v256, v266, v234, v235 - (char *)v234, 8, 1, 1);
                        v344 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, v253, &v343)- 16);
                        LOBYTE(v343) = 1;
                        v268 = mlir::OpBuilder::create<mlir::mps::ReductionSumOp,mlir::Value &,mlir::Value &,BOOL &>((mlir::UnitAttr **)v318, v253, (uint64_t *)&v333, (uint64_t *)&v344, (unsigned __int8 *)&v343);
                        if (mlir::mps::inferTypes(v268, v269))
                        {
                          v332 = (uint64_t *)((char *)v268 - 16);
                          goto LABEL_359;
                        }
LABEL_406:
                        if (v234) {
                          operator delete(v234);
                        }
                        uint64_t v81 = v317;
                        if ((v267 & 1) == 0) {
                          goto LABEL_113;
                        }
                        uint64_t v7 = 0;
LABEL_422:
                        v80 = __p;
                        if (!__p) {
                          return v7;
                        }
LABEL_423:
                        unint64_t v337 = (unint64_t)v80;
                        operator delete(v80);
                        return v7;
                      }
LABEL_359:
                      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v346);
                      if (v270)
                      {
                        if (!(v270 >> 61))
                        {
                          uint64_t v271 = 8 * v270;
                          v272 = (char *)operator new(8 * v270);
                          v273 = &v272[v271];
                          v274 = v272;
                          if ((v236 & 0x8000000000000000) == 0) {
                            goto LABEL_367;
                          }
LABEL_403:
                          std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v274, v272, (v272 - v274) >> 3);
                          if (v274) {
                            operator delete(v274);
                          }
                          char v267 = 0;
                          goto LABEL_406;
                        }
LABEL_425:
                        abort();
                      }
                      v272 = 0;
                      v273 = 0;
                      v274 = 0;
                      if (v236 < 0) {
                        goto LABEL_403;
                      }
LABEL_367:
                      while (2)
                      {
                        uint64_t v275 = *((void *)__p + v236);
                        if (v272 < v273)
                        {
                          *(void *)v272 = v275;
                          v272 += 8;
                        }
                        else
                        {
                          uint64_t v276 = (v272 - v274) >> 3;
                          unint64_t v277 = v276 + 1;
                          if ((unint64_t)(v276 + 1) >> 61) {
                            goto LABEL_425;
                          }
                          if ((v273 - v274) >> 2 > v277) {
                            unint64_t v277 = (v273 - v274) >> 2;
                          }
                          if ((unint64_t)(v273 - v274) >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v278 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v278 = v277;
                          }
                          if (v278)
                          {
                            if (v278 >> 61) {
                              goto LABEL_426;
                            }
                            v279 = operator new(8 * v278);
                          }
                          else
                          {
                            v279 = 0;
                          }
                          v280 = &v279[8 * v276];
                          *(void *)v280 = v275;
                          v281 = v280 + 8;
                          if (v272 != v274)
                          {
                            unint64_t v282 = v272 - v274 - 8;
                            if (v282 < 0x168)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            unint64_t v285 = (v272 - 8 - v274) & 0xFFFFFFFFFFFFFFF8;
                            if (&v279[v272 - v274 - 8 - v285] > &v279[v272 - v274 - 8])
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if (&v272[-v285 - 8] > v272 - 8)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if ((unint64_t)(v274 - v279) < 0x20)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            uint64_t v286 = (v282 >> 3) + 1;
                            uint64_t v287 = 8 * (v286 & 0x3FFFFFFFFFFFFFFCLL);
                            v283 = &v272[-v287];
                            v280 -= v287;
                            v288 = &v279[8 * v276 - 16];
                            v289 = v272 - 16;
                            uint64_t v290 = v286 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v291 = *(_OWORD *)v289;
                              *(v288 - 1) = *((_OWORD *)v289 - 1);
                              _OWORD *v288 = v291;
                              v288 -= 2;
                              v289 -= 32;
                              v290 -= 4;
                            }
                            while (v290);
                            if (v286 != (v286 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_381:
                                uint64_t v284 = *((void *)v283 - 1);
                                v283 -= 8;
                                *((void *)v280 - 1) = v284;
                                v280 -= 8;
                              }
                              while (v283 != v274);
                            }
                          }
                          v273 = &v279[8 * v278];
                          if (v274) {
                            operator delete(v274);
                          }
                          v274 = v280;
                          v272 = v281;
                        }
                        BOOL v293 = v236-- <= 0;
                        if (v293)
                        {
                          v292 = v272 - 8;
                          BOOL v293 = v274 != v272 && v292 > v274;
                          if (v293)
                          {
                            v294 = v274 + 8;
                            do
                            {
                              uint64_t v295 = *((void *)v294 - 1);
                              *((void *)v294 - 1) = *(void *)v292;
                              *(void *)v292 = v295;
                              v292 -= 8;
                              BOOL v210 = v294 >= v292;
                              v294 += 8;
                            }
                            while (!v210);
                          }
                          goto LABEL_403;
                        }
                        continue;
                      }
                    }
                    if (v231 >= v232) {
                      break;
                    }
                    *(void *)v231 = v237;
                    v235 = v231 + 8;
LABEL_314:
                    uint64_t v236 = v233 - 1;
                    v231 = v235;
                    BOOL v293 = v233-- <= 0;
                    if (v293) {
                      goto LABEL_346;
                    }
                  }
                  uint64_t v238 = (v231 - (char *)v234) >> 3;
                  unint64_t v239 = v238 + 1;
                  if ((unint64_t)(v238 + 1) >> 61) {
                    goto LABEL_425;
                  }
                  if ((v232 - (char *)v234) >> 2 > v239) {
                    unint64_t v239 = (v232 - (char *)v234) >> 2;
                  }
                  if ((unint64_t)(v232 - (char *)v234) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v240 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v240 = v239;
                  }
                  if (v240)
                  {
                    if (v240 >> 61) {
                      goto LABEL_426;
                    }
                    v241 = operator new(8 * v240);
                  }
                  else
                  {
                    v241 = 0;
                  }
                  v242 = (uint64_t *)&v241[8 * v238];
                  uint64_t *v242 = v237;
                  v235 = (char *)(v242 + 1);
                  if (v231 != (char *)v234)
                  {
                    unint64_t v243 = v231 - (char *)v234 - 8;
                    if (v243 >= 0x168)
                    {
                      unint64_t v246 = (v231 - 8 - (char *)v234) & 0xFFFFFFFFFFFFFFF8;
                      if (&v241[v231 - (char *)v234 - 8 - v246] > &v241[v231 - (char *)v234 - 8])
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if (&v231[-v246 - 8] > v231 - 8)
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if ((unint64_t)((char *)v234 - v241) >= 0x20)
                      {
                        uint64_t v247 = (v243 >> 3) + 1;
                        uint64_t v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
                        v244 = (uint64_t *)&v231[-v248];
                        v242 = (uint64_t *)((char *)v242 - v248);
                        v249 = &v241[8 * v238 - 16];
                        v250 = (long long *)(v231 - 16);
                        uint64_t v251 = v247 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v252 = *v250;
                          *(v249 - 1) = *(v250 - 1);
                          _OWORD *v249 = v252;
                          v249 -= 2;
                          v250 -= 2;
                          v251 -= 4;
                        }
                        while (v251);
                        if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL)) {
                          goto LABEL_331;
                        }
                      }
                      else
                      {
                        v244 = (uint64_t *)v231;
                      }
                    }
                    else
                    {
                      v244 = (uint64_t *)v231;
                    }
                    do
                    {
                      uint64_t v245 = *--v244;
                      *--v242 = v245;
                    }
                    while (v244 != v234);
                  }
LABEL_331:
                  v232 = &v241[8 * v240];
                  if (v234) {
                    operator delete(v234);
                  }
                  v234 = v242;
                  goto LABEL_314;
                }
LABEL_260:
                uint64_t v191 = mlir::getNegativeAxis(0, (v113 - v94) >> 3);
                uint64_t v192 = v191;
                if (v114 < v324)
                {
                  *(void *)v114 = v191;
                  v114 += 8;
                  goto LABEL_283;
                }
                int64_t v193 = v114 - v101;
                v194 = v101;
                uint64_t v195 = (v114 - v101) >> 3;
                unint64_t v196 = v195 + 1;
                if ((unint64_t)(v195 + 1) >> 61) {
                  goto LABEL_425;
                }
                v197 = v114;
                v198 = v194;
                unint64_t v199 = v324 - v194;
                unint64_t v200 = (v324 - v194) >> 2;
                if (v200 > v196) {
                  unint64_t v196 = v200;
                }
                if (v199 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
                }
                if (v196)
                {
                  if (v196 >> 61) {
                    goto LABEL_426;
                  }
                  v201 = (char *)operator new(8 * v196);
                }
                else
                {
                  v201 = 0;
                }
                v202 = &v201[8 * v195];
                *(void *)v202 = v192;
                v114 = v202 + 8;
                if (v197 == v198)
                {
                  v205 = v198;
                }
                else
                {
                  unint64_t v203 = v197 - v198 - 8;
                  if (v203 >= 0x58 && (unint64_t)(v197 - v201 - v193) >= 0x20)
                  {
                    uint64_t v302 = (v203 >> 3) + 1;
                    uint64_t v303 = 8 * (v302 & 0x3FFFFFFFFFFFFFFCLL);
                    v204 = &v197[-v303];
                    v202 -= v303;
                    v304 = &v201[8 * v195 - 16];
                    v305 = v197 - 16;
                    uint64_t v306 = v302 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v307 = *(_OWORD *)v305;
                      *((_OWORD *)v304 - 1) = *((_OWORD *)v305 - 1);
                      *(_OWORD *)v304 = v307;
                      v304 -= 32;
                      v305 -= 32;
                      v306 -= 4;
                    }
                    while (v306);
                    v205 = v198;
                    if (v302 == (v302 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_280;
                    }
                  }
                  else
                  {
                    v204 = v197;
                    v205 = v198;
                  }
                  do
                  {
                    uint64_t v206 = *((void *)v204 - 1);
                    v204 -= 8;
                    *((void *)v202 - 1) = v206;
                    v202 -= 8;
                  }
                  while (v204 != v205);
                }
LABEL_280:
                if (v205) {
                  operator delete(v205);
                }
                v101 = v202;
                goto LABEL_283;
              }
              v183 = v101;
              uint64_t v184 = (v106 - v94) >> 3;
              unint64_t v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61) {
                goto LABEL_425;
              }
              if ((v331 - v94) >> 2 > v185) {
                unint64_t v185 = (v331 - v94) >> 2;
              }
              if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
              }
              if (v185)
              {
                if (v185 >> 61) {
                  goto LABEL_426;
                }
                v186 = operator new(8 * v185);
              }
              else
              {
                v186 = 0;
              }
              v187 = (uint64_t *)&v186[8 * v184];
              uint64_t *v187 = v112;
              v113 = (char *)(v187 + 1);
              if (v106 == v94)
              {
                v101 = v183;
                v114 = v325;
                if (!v94)
                {
LABEL_259:
                  v94 = (char *)v187;
                  if (!v111) {
                    goto LABEL_283;
                  }
                  goto LABEL_260;
                }
LABEL_258:
                operator delete(v94);
                goto LABEL_259;
              }
              unint64_t v188 = v106 - v94 - 8;
              if (v188 >= 0x58 && (unint64_t)(v94 - v186) >= 0x20)
              {
                uint64_t v296 = (v188 >> 3) + 1;
                uint64_t v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
                v189 = &v106[-v297];
                v187 = (uint64_t *)((char *)v187 - v297);
                v298 = &v186[8 * v184 - 16];
                v299 = v106 - 16;
                uint64_t v300 = v296 & 0x3FFFFFFFFFFFFFFCLL;
                v114 = v325;
                do
                {
                  long long v301 = *(_OWORD *)v299;
                  *(v298 - 1) = *((_OWORD *)v299 - 1);
                  _OWORD *v298 = v301;
                  v298 -= 2;
                  v299 -= 32;
                  v300 -= 4;
                }
                while (v300);
                v101 = v183;
                if (v296 == (v296 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_257:
                  if (!v94) {
                    goto LABEL_259;
                  }
                  goto LABEL_258;
                }
              }
              else
              {
                v189 = v106;
                v101 = v183;
                v114 = v325;
              }
              do
              {
                uint64_t v190 = *((void *)v189 - 1);
                v189 -= 8;
                *--v187 = v190;
              }
              while (v189 != v94);
              goto LABEL_257;
            }
            uint64_t v115 = v99;
            uint64_t v328 = v103;
            uint64_t v329 = -v88;
            uint64_t v116 = -2;
            uint64_t v112 = 1;
            while (1)
            {
              if (!v111)
              {
                if (v115 == v116)
                {
                  v119 = v331;
                  if (v106 < v331)
                  {
                    *(void *)v106 = v112;
                    v120 = v106 + 8;
LABEL_184:
                    v331 = v119;
                    uint64_t v112 = *(void *)(v328 + 8 * mlir::getPositiveAxis(v115, v88));
                    if (v89 - 8 == v90)
                    {
                      uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
                      BOOL v111 = 1;
                      v106 = v120;
                      v89 = v90;
                    }
                    else
                    {
                      uint64_t v115 = *((void *)v89 - 2);
                      BOOL v111 = 1;
                      v106 = v120;
                      v89 -= 8;
                    }
                    uint64_t v103 = v328;
                    goto LABEL_146;
                  }
                  uint64_t v327 = v115;
                  uint64_t v124 = (v106 - v94) >> 3;
                  unint64_t v125 = v124 + 1;
                  if ((unint64_t)(v124 + 1) >> 61) {
                    goto LABEL_425;
                  }
                  if ((v331 - v94) >> 2 > v125) {
                    unint64_t v125 = (v331 - v94) >> 2;
                  }
                  if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v126 = v125;
                  }
                  v322 = v89;
                  if (v126)
                  {
                    if (v126 >> 61) {
                      goto LABEL_426;
                    }
                    v127 = operator new(8 * v126);
                  }
                  else
                  {
                    v127 = 0;
                  }
                  v133 = (uint64_t *)&v127[8 * v124];
                  uint64_t *v133 = v112;
                  v120 = (char *)(v133 + 1);
                  if (v106 != v94)
                  {
                    unint64_t v134 = v106 - v94 - 8;
                    if (v134 < 0x168
                      || (unint64_t v162 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8,
                          &v127[v106 - v94 - 8 - v162] > &v127[v106 - v94 - 8])
                      || &v106[-v162 - 8] > v106 - 8
                      || (unint64_t)(v94 - v127) < 0x20)
                    {
                      v135 = v106;
                      v90 = v320;
                      uint64_t v88 = v321;
                    }
                    else
                    {
                      uint64_t v163 = (v134 >> 3) + 1;
                      uint64_t v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                      v135 = &v106[-v164];
                      v133 = (uint64_t *)((char *)v133 - v164);
                      v165 = &v127[8 * v124 - 16];
                      v166 = v106 - 16;
                      uint64_t v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                      uint64_t v88 = v321;
                      do
                      {
                        long long v168 = *(_OWORD *)v166;
                        *(v165 - 1) = *((_OWORD *)v166 - 1);
                        _OWORD *v165 = v168;
                        v165 -= 2;
                        v166 -= 32;
                        v167 -= 4;
                      }
                      while (v167);
                      v90 = v320;
                      if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_181:
                        v119 = &v127[8 * v126];
                        if (v94) {
                          goto LABEL_182;
                        }
                        goto LABEL_183;
                      }
                    }
                    do
                    {
                      uint64_t v136 = *((void *)v135 - 1);
                      v135 -= 8;
                      *--v133 = v136;
                    }
                    while (v135 != v94);
                    goto LABEL_181;
                  }
                  v90 = v320;
                  uint64_t v88 = v321;
                  v119 = &v127[8 * v126];
                  if (v94) {
LABEL_182:
                  }
                    operator delete(v94);
LABEL_183:
                  v94 = (char *)v133;
                  v89 = v322;
                  uint64_t v115 = v327;
                  goto LABEL_184;
                }
                uint64_t v117 = v115;
                uint64_t v118 = mlir::getPositiveAxis(v116, v88);
                uint64_t v115 = v117;
                BOOL v111 = 0;
                v112 *= *(void *)(v103 + 8 * v118);
                goto LABEL_146;
              }
              if (v115 == v116)
              {
                v112 *= *(void *)(v103 + 8 * mlir::getPositiveAxis(v115, v88));
                if (v89 - 8 == v90)
                {
                  uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
                  BOOL v111 = 1;
                  v89 = v90;
                }
                else
                {
                  uint64_t v115 = *((void *)v89 - 2);
                  BOOL v111 = 1;
                  v89 -= 8;
                }
                goto LABEL_146;
              }
              v121 = v331;
              uint64_t v326 = v115;
              if (v106 >= v331) {
                break;
              }
              *(void *)v106 = v112;
              v122 = v106 + 8;
              v123 = (uint64_t *)v325;
LABEL_196:
              uint64_t v112 = *(void *)(v103 + 8 * mlir::getPositiveAxis(v116, v88));
              uint64_t v142 = mlir::getNegativeAxis(0, (v122 - v94) >> 3);
              v143 = v122;
              uint64_t v144 = v142;
              v331 = v121;
              if (v123 >= (uint64_t *)v324)
              {
                v319 = v143;
                v145 = v101;
                uint64_t v146 = (char *)v123 - v101;
                uint64_t v147 = v146 >> 3;
                unint64_t v148 = (v146 >> 3) + 1;
                if (v148 >> 61) {
                  goto LABEL_425;
                }
                v149 = v123;
                v150 = (uint64_t *)v145;
                unint64_t v151 = v324 - v145;
                unint64_t v152 = (v324 - v145) >> 2;
                if (v152 > v148) {
                  unint64_t v148 = v152;
                }
                if (v151 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v153 = v148;
                }
                v323 = v89;
                if (v153)
                {
                  if (v153 >> 61) {
                    goto LABEL_426;
                  }
                  v154 = (char *)operator new(8 * v153);
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[8 * v147];
                *(void *)v155 = v144;
                v156 = v155 + 8;
                if (v149 == v150)
                {
                  v90 = v320;
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                  goto LABEL_218;
                }
                unint64_t v157 = (char *)v149 - (char *)v150 - 8;
                v90 = v320;
                if (v157 < 0x168
                  || (unint64_t v176 = ((char *)(v149 - 1) - (char *)v150) & 0xFFFFFFFFFFFFFFF8,
                      &v154[v146 - 8 - v176] > &v154[v146 - 8])
                  || (uint64_t *)((char *)v149 - v176 - 8) > v149 - 1
                  || (unint64_t)((char *)v149 - v154 - v146) < 0x20)
                {
                  v158 = v149;
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                }
                else
                {
                  uint64_t v177 = (v157 >> 3) + 1;
                  uint64_t v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                  v158 = &v149[v178 / 0xFFFFFFFFFFFFFFF8];
                  v155 -= v178;
                  v179 = &v154[8 * v147 - 16];
                  v180 = v149 - 2;
                  uint64_t v181 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v182 = *(_OWORD *)v180;
                    *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
                    *(_OWORD *)v179 = v182;
                    v179 -= 32;
                    v180 -= 4;
                    v181 -= 4;
                  }
                  while (v181);
                  uint64_t v88 = v321;
                  uint64_t v103 = v328;
                  if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_218:
                    v324 = &v154[8 * v153];
                    if (v150)
                    {
                      v160 = v150;
                      v161 = v156;
                      operator delete(v160);
                      BOOL v111 = 0;
                      v101 = v155;
                      v325 = v161;
                    }
                    else
                    {
                      BOOL v111 = 0;
                      v101 = v155;
                      v325 = v156;
                    }
                    v106 = v319;
                    v89 = v323;
                    uint64_t v115 = v326;
                    goto LABEL_146;
                  }
                }
                do
                {
                  uint64_t v159 = *--v158;
                  *((void *)v155 - 1) = v159;
                  v155 -= 8;
                }
                while (v158 != v150);
                goto LABEL_218;
              }
              BOOL v111 = 0;
              uint64_t *v123 = v142;
              v325 = (char *)(v123 + 1);
              v106 = v143;
              v90 = v320;
              uint64_t v115 = v326;
LABEL_146:
              BOOL v293 = v116-- <= v329;
              if (v293) {
                goto LABEL_142;
              }
            }
            uint64_t v128 = (v106 - v94) >> 3;
            unint64_t v129 = v128 + 1;
            if ((unint64_t)(v128 + 1) >> 61) {
              goto LABEL_425;
            }
            if ((v331 - v94) >> 2 > v129) {
              unint64_t v129 = (v331 - v94) >> 2;
            }
            if ((unint64_t)(v331 - v94) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v130 = v129;
            }
            if (v130)
            {
              if (v130 >> 61) {
                goto LABEL_426;
              }
              v131 = v89;
              v132 = operator new(8 * v130);
            }
            else
            {
              v131 = v89;
              v132 = 0;
            }
            v137 = (uint64_t *)&v132[8 * v128];
            uint64_t *v137 = v112;
            v138 = (char *)(v137 + 1);
            if (v106 == v94)
            {
              uint64_t v88 = v321;
              v123 = (uint64_t *)v325;
              v122 = (char *)(v137 + 1);
              v121 = &v132[8 * v130];
              if (!v94) {
                goto LABEL_195;
              }
              goto LABEL_194;
            }
            unint64_t v139 = v106 - v94 - 8;
            if (v139 < 0x168
              || (unint64_t v169 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8, &v132[v106 - v94 - 8 - v169] > &v132[v106 - v94 - 8])
              || &v106[-v169 - 8] > v106 - 8
              || (unint64_t)(v94 - v132) < 0x20)
            {
              v140 = v106;
              uint64_t v88 = v321;
              v123 = (uint64_t *)v325;
              v122 = (char *)(v137 + 1);
            }
            else
            {
              uint64_t v170 = (v139 >> 3) + 1;
              uint64_t v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
              v140 = &v106[-v171];
              v137 = (uint64_t *)((char *)v137 - v171);
              v172 = &v132[8 * v128 - 16];
              v173 = v106 - 16;
              uint64_t v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v88 = v321;
              do
              {
                long long v175 = *(_OWORD *)v173;
                *(v172 - 1) = *((_OWORD *)v173 - 1);
                _OWORD *v172 = v175;
                v172 -= 2;
                v173 -= 32;
                v174 -= 4;
              }
              while (v174);
              v123 = (uint64_t *)v325;
              v122 = v138;
              if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_193:
                v121 = &v132[8 * v130];
                if (!v94)
                {
LABEL_195:
                  v94 = (char *)v137;
                  v89 = v131;
                  uint64_t v103 = v328;
                  goto LABEL_196;
                }
LABEL_194:
                operator delete(v94);
                goto LABEL_195;
              }
            }
            do
            {
              uint64_t v141 = *((void *)v140 - 1);
              v140 -= 8;
              *--v137 = v141;
            }
            while (v140 != v94);
            goto LABEL_193;
          }
          uint64_t v88 = v321;
        }
        else
        {
          v98 = v89 - 8;
          uint64_t v99 = *((void *)v89 - 1);
          if (v99 != -1)
          {
            v101 = 0;
            v100 = 0;
            v324 = 0;
            goto LABEL_130;
          }
          v97 = (char *)operator new(8uLL);
          v324 = v97 + 8;
        }
        *(void *)v97 = -1;
        v100 = v97 + 8;
        if (v98 == v90)
        {
          uint64_t v99 = 0x7FFFFFFFFFFFFFFFLL;
          v89 = v90;
        }
        else
        {
          uint64_t v99 = *((void *)v89 - 2);
          v89 = v98;
        }
        v101 = v97;
        goto LABEL_130;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      v346 = v308;
      uint64_t v309 = mlir::Builder::getIntegerType(v318, 0x40u, 1);
      v333 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)&v346, 1, v309, 0);
      v310 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      uint64_t v311 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v341);
      llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v346, v310, (unsigned char *)(v311 + 8 * v312));
      uint64_t v313 = *(void *)(v81 + 24);
      v314 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v333);
      unsigned __int8 v343 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v314, v315, v346, 8 * v347, 8, 1, 1);
      v344 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v318, v313, &v343);
      mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(v316, v81, (uint64_t *)&v332, &v344);
      if (v346 != v348) {
        free(v346);
      }
LABEL_420:
      uint64_t v7 = 1;
      goto LABEL_422;
    }
    uint64_t v54 = v53;
    v55 = (char *)v337;
    while (1)
    {
      uint64_t v57 = -v54;
      if (v55 >= v338) {
        break;
      }
      *(void *)v55 = v57;
      v56 = v55 + 8;
LABEL_61:
      unint64_t v337 = (unint64_t)v56;
      v55 = v56;
      if (!--v54) {
        goto LABEL_100;
      }
    }
    v58 = (char *)__p;
    int64_t v59 = v55 - (unsigned char *)__p;
    uint64_t v60 = (v55 - (unsigned char *)__p) >> 3;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61) {
      goto LABEL_425;
    }
    uint64_t v62 = v338 - (unsigned char *)__p;
    if ((v338 - (unsigned char *)__p) >> 2 > v61) {
      unint64_t v61 = v62 >> 2;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      if (v63 >> 61) {
LABEL_426:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      v64 = operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[8 * v60];
    *(void *)v65 = v57;
    v56 = v65 + 8;
    if (v55 == v58) {
      goto LABEL_77;
    }
    unint64_t v66 = v55 - v58 - 8;
    if (v66 < 0x168)
    {
      v67 = v55;
      goto LABEL_76;
    }
    unint64_t v69 = (v55 - 8 - v58) & 0xFFFFFFFFFFFFFFF8;
    if (&v64[v59 - 8 - v69] > &v64[v59 - 8])
    {
      v67 = v55;
    }
    else
    {
      if (&v55[-v69 - 8] <= v55 - 8)
      {
        if ((unint64_t)(v55 - v64 - v59) < 0x20)
        {
          v67 = v55;
          goto LABEL_76;
        }
        uint64_t v70 = (v66 >> 3) + 1;
        uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v55[-v71];
        v65 -= v71;
        v72 = &v64[8 * v60 - 16];
        v73 = v55 - 16;
        uint64_t v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          _OWORD *v72 = v75;
          v72 -= 2;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_76;
        }
LABEL_77:
        __p = v65;
        v338 = &v64[8 * v63];
        if (v58) {
          operator delete(v58);
        }
        goto LABEL_61;
      }
      v67 = v55;
    }
    do
    {
LABEL_76:
      uint64_t v68 = *((void *)v67 - 1);
      v67 -= 8;
      *((void *)v65 - 1) = v68;
      v65 -= 8;
    }
    while (v67 != v58);
    goto LABEL_77;
  }
  return 0;
}

void mlir::mps::anonymous namespace'::CanonicalizeMatMulTranspose::~CanonicalizeMatMulTranspose(mlir::mps::_anonymous_namespace_::CanonicalizeMatMulTranspose *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

BOOL mlir::mps::anonymous namespace'::CanonicalizeMatMulTranspose::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a2;
  if (mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&v13)
    || (BOOL result = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v13)))
  {
    uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v13);
    uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v13);
    if (mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&v13))
    {
      uint64_t v5 = *(void *)(v13 + 24);
      unsigned int v9 = -2;
      unsigned int v10 = -1;
      uint64_t Input = (uint64_t)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 8), v5, &Input, &v10, &v9)- 16;
    }
    if (mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v13))
    {
      uint64_t v6 = *(void *)(v13 + 24);
      unsigned int v9 = -2;
      unsigned int v10 = -1;
      uint64_t Filter = (uint64_t)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 8), v6, &Filter, &v10, &v9)- 16;
    }
    uint64_t v7 = v13;
    uint64_t v8 = mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value &,mlir::Value &>((mlir::BoolAttr **)(a3 + 8), *(void *)(v13 + 24), &Input, &Filter);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a3 + 32))(a3, v7, v8);
    return 1;
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value &,mlir::Value &>(mlir::BoolAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.matmul", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"mps.matmul";
    v17[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::MatMulOp::build(a1, (uint64_t)v19, *a3, *a4, 0, 0);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::mps::anonymous namespace'::CanonicalizeMatMul1D::~CanonicalizeMatMul1D(mlir::mps::_anonymous_namespace_::CanonicalizeMatMul1D *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeMatMul1D::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::Float32Type **a3)
{
  v60[2] = *(uint64_t **)MEMORY[0x1E4F143B8];
  uint64_t v58 = a2;
  uint64_t v4 = (uint64_t *)(*(void *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    unint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v57[0] = v4;
  v57[1] = v14;
  int v15 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v58) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v15) {
    goto LABEL_20;
  }
  uint64_t v16 = *v15;
  unint64_t v17 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v18 = *(unsigned int *)(v16 + 16);
  if (!v18) {
    goto LABEL_20;
  }
  unint64_t v19 = *(void **)(v16 + 8);
  uint64_t v20 = &v19[2 * v18];
  do
  {
    unint64_t v21 = v18 >> 1;
    uint64_t v22 = &v19[2 * (v18 >> 1)];
    unint64_t v24 = *v22;
    unint64_t v23 = v22 + 2;
    v18 += ~(v18 >> 1);
    if (v24 < v17) {
      unint64_t v19 = v23;
    }
    else {
      unint64_t v18 = v21;
    }
  }
  while (v18);
  if (v19 != v20 && *v19 == v17) {
    uint64_t v25 = v19[1];
  }
  else {
LABEL_20:
  }
    uint64_t v25 = 0;
  v56[0] = v15;
  v56[1] = v25;
  uint64_t v26 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v58) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v26) {
    goto LABEL_30;
  }
  uint64_t v27 = *v26;
  unint64_t v28 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v29 = *(unsigned int *)(v27 + 16);
  if (!v29) {
    goto LABEL_30;
  }
  unint64_t v30 = *(void **)(v27 + 8);
  uint64_t v31 = &v30[2 * v29];
  do
  {
    unint64_t v32 = v29 >> 1;
    uint64_t v33 = &v30[2 * (v29 >> 1)];
    unint64_t v35 = *v33;
    unint64_t v34 = v33 + 2;
    v29 += ~(v29 >> 1);
    if (v35 < v28) {
      unint64_t v30 = v34;
    }
    else {
      unint64_t v29 = v32;
    }
  }
  while (v29);
  if (v30 != v31 && *v30 == v28) {
    uint64_t v36 = v30[1];
  }
  else {
LABEL_30:
  }
    uint64_t v36 = 0;
  v55[0] = v26;
  v55[1] = v36;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v57)) {
    return 0;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v56)) {
    return 0;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v55)) {
    return 0;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
  if (v37) {
    return 0;
  }
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v56);
  if (OperandRange != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v55)) {
    return 0;
  }
  uint64_t v39 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v57);
  if (v39 != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v56)) {
    return 0;
  }
  uint64_t v42 = *(void *)(v58 + 24);
  v60[0] = (uint64_t *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v58);
  uint64_t Filter = (mlir::GenericProgramPoint *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v58);
  v52[0] = mlir::OpBuilder::create<mlir::mps::MultiplyOp,mlir::Value,mlir::Value&>(a3 + 1, v42, (uint64_t *)v60, (uint64_t *)&Filter);
  v43 = (uint64_t *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v52);
  uint64_t v54 = (uint64_t)v43;
  v60[0] = (uint64_t *)(v43[1] & 0xFFFFFFFFFFFFFFF8);
  v52[0] = mlir::Type::cast<mlir::ShapedType>(v60);
  v52[1] = v44;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
  if (v45)
  {
    uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
    if (*(void *)(ArgAttrsAttr + 8 * v47 - 8) == 1)
    {
      uint64_t v48 = *(void *)(v58 + 24);
      v60[0] = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
      v60[1] = v49;
      uint64_t Filter = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,llvm::ArrayRef<long long>>((mlir::Builder *)(a3 + 1), v48, &v54, (uint64_t)v60);
      uint64_t v50 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Filter);
    }
    else
    {
      v60[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ReductionSumOp,mlir::Value &>(a3 + 1, *(void *)(v58 + 24), (uint64_t)&v54);
      uint64_t v50 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v60);
    }
    v43 = (uint64_t *)v50;
    uint64_t v54 = v50;
  }
  uint64_t v51 = v58;
  v60[0] = v43;
  uint64_t v40 = 1;
  mlir::ValueRange::ValueRange(v59, (uint64_t)v60, 1uLL);
  (*((void (**)(mlir::Float32Type **, uint64_t, unint64_t, unint64_t))*a3 + 3))(a3, v51, v59[0], v59[1]);
  return v40;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReductionSumOp,mlir::Value &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3)
{
  v17[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_sum", (const unsigned __int8 *)0x11, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"mps.reduction_sum";
    v15[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::mps::ReductionSumOp::build(a1, (uint64_t)v17, a3, 1, 0, 0);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionSumOp,void>::id) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

void *mlir::mps::anonymous namespace'::CanonicalizeConvToDepthwise<mlir::mps::Conv2DOp>::~CanonicalizeConvToDepthwise(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeConvToDepthwise<mlir::mps::Conv2DOp>::~CanonicalizeConvToDepthwise(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeConvToDepthwise<mlir::mps::Conv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v111[4] = *MEMORY[0x1E4F143B8];
  uint64_t v90 = 0;
  uint64_t v91 = a2;
  uint64_t v4 = *(void *)(a2 + 24);
  v89 = 0;
  uint64_t v5 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v91) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = *(void **)(v6 + 8);
  unint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    unint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      uint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  v89 = v5;
  uint64_t v90 = v15;
  __int16 v16 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v91) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16) {
    goto LABEL_20;
  }
  uint64_t v17 = *v16;
  unint64_t v18 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v19 = *(unsigned int *)(v17 + 16);
  if (!v19) {
    goto LABEL_20;
  }
  uint64_t v20 = *(void **)(v17 + 8);
  unint64_t v21 = &v20[2 * v19];
  do
  {
    unint64_t v22 = v19 >> 1;
    unint64_t v23 = &v20[2 * (v19 >> 1)];
    unint64_t v25 = *v23;
    unint64_t v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18) {
      uint64_t v20 = v24;
    }
    else {
      unint64_t v19 = v22;
    }
  }
  while (v19);
  if (v20 != v21 && *v20 == v18) {
    uint64_t v26 = v20[1];
  }
  else {
LABEL_20:
  }
    uint64_t v26 = 0;
  v88[0] = v16;
  v88[1] = v26;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v89)
    && (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v88) & 1) != 0)
  {
    uint64_t ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
    uint64_t v29 = v27;
    uint64_t v109 = v111;
    uint64_t v110 = 0x400000000;
    size_t v30 = 8 * v27;
    if ((unint64_t)(8 * v27) < 0x21)
    {
      int v31 = 0;
      if (!v27) {
        goto LABEL_32;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v111, (8 * v27) >> 3, 8);
      int v31 = v110;
      if (!v29)
      {
LABEL_32:
        LODWORD(v110) = v31 + (v30 >> 3);
        int StorageType = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v91);
        if (StorageType)
        {
          if (StorageType != 1)
          {
            v43 = "failed: unsupported data layout";
            goto LABEL_48;
          }
          uint64_t v36 = -1;
          uint64_t v37 = 3;
        }
        else
        {
          uint64_t v36 = -3;
          uint64_t v37 = 1;
        }
        uint64_t v87 = v36;
        uint64_t v38 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v89) + 8 * v37);
        int WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v91);
        if (WeightsLayout == 2)
        {
          uint64_t v42 = 0;
          uint64_t v40 = 2;
          uint64_t v41 = 1;
        }
        else
        {
          if (WeightsLayout != 3)
          {
            v43 = "failed: unsupported weights layout";
            goto LABEL_48;
          }
          uint64_t v40 = 0;
          uint64_t v41 = 2;
          uint64_t v42 = 3;
        }
        if (v38 != 0x8000000000000000)
        {
          uint64_t v44 = v109[v41];
          if (v44 != 0x8000000000000000)
          {
            uint64_t v45 = v109[v42];
            if (v45 != 0x8000000000000000)
            {
              if (v44 == 1)
              {
                uint64_t v49 = v45 / v38;
                if (v45 / v38 * v38 == v45
                  && mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v91) == (void *)v38)
                {
                  if (v49 < 2)
                  {
                    if (mlir::ShapedType::hasStaticShape((mlir::ShapedType *)v88))
                    {
                      v106 = v108;
                      uint64_t v107 = 0x400000000;
                      if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v91))
                      {
                        __src = (void *)v41;
                        uint64_t v101 = v40;
                        uint64_t v102 = v40 | 1;
                        uint64_t v103 = v42;
                      }
                      else
                      {
                        __src = (void *)v41;
                        uint64_t v101 = v42;
                        uint64_t v102 = v40;
                        uint64_t v103 = v40 | 1;
                      }
                      llvm::SmallVector<long long,4u>::operator=((uint64_t)&v106, &__src, 4);
                      __src = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v91);
                      uint64_t v105 = 4;
                      uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 8), 0x40u, 1);
                      v85 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v105, 1, IntegerType, 0);
                      v52 = mlir::Type::cast<mlir::ShapedType>(&v85);
                      InputAttributeNames = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v52, v53, v106, 8 * v107, 8, 1, 1);
                      Strides = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 8), v4, (uint64_t **)&InputAttributeNames);
                      uint64_t v86 = (uint64_t)mlir::OpBuilder::create<mlir::mps::PermuteOp,mlir::Value,mlir::mps::ConstantOp>((mlir::OpBuilder *)(a3 + 8), v4, (uint64_t *)&__src, &Strides)- 16;
                      if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v91)) {
                        uint64_t v54 = 3;
                      }
                      else {
                        uint64_t v54 = 0;
                      }
                      __src = &v102;
                      uint64_t v101 = 0x600000000;
                      Strides = (void *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v91);
                      v55 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&Strides);
                      mlir::getIntValues<unsigned long long>((uint64_t)v55, v56, (uint64_t)&__src, 1);
                      uint64_t v57 = (char *)__src + 8 * v54;
                      int v58 = v101;
                      int64_t v59 = (char *)__src + 8 * v101;
                      if (v59 != v57 + 8)
                      {
                        memmove(v57, v57 + 8, v59 - (v57 + 8));
                        int v58 = v101;
                      }
                      LODWORD(v101) = v58 - 1;
                      InputAttributeNames = (void *)3;
                      uint64_t v60 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 8), 0x40u, 0);
                      Strides = (void *)mlir::RankedTensorType::get((uint64_t)&InputAttributeNames, 1, v60, 0);
                      unint64_t v61 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&Strides);
                      v85 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v61, v62, __src, 8 * v101, 8, 1, 0);
                      Strides = v99;
                      uint64_t v98 = 0x600000000;
                      InputAttributeNames = (void *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v91);
                      unint64_t v63 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&InputAttributeNames);
                      mlir::getIntValues<unsigned long long>((uint64_t)v63, v64, (uint64_t)&Strides, 1);
                      v65 = (char *)Strides + 8 * v54;
                      int v66 = v98;
                      v67 = (char *)Strides + 8 * v98;
                      if (v67 != v65 + 8)
                      {
                        memmove(v65, v65 + 8, v67 - (v65 + 8));
                        int v66 = v98;
                      }
                      LODWORD(v98) = v66 - 1;
                      uint64_t Rewriter = 3;
                      uint64_t v68 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 8), 0x40u, 0);
                      InputAttributeNames = (void *)mlir::RankedTensorType::get((uint64_t)&Rewriter, 1, v68, 0);
                      unint64_t v69 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&InputAttributeNames);
                      uint64_t v105 = mlir::DenseElementsAttr::getFromRawBuffer(v69, v70, Strides, 8 * v98, 8, 1, 0);
                      InputAttributeNames = v95;
                      uint64_t v94 = 0x600000000;
                      uint64_t Rewriter = mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v91);
                      uint64_t v71 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&Rewriter);
                      mlir::getIntValues<unsigned long long>((uint64_t)v71, v72, (uint64_t)&InputAttributeNames, 1);
                      v73 = (char *)InputAttributeNames;
                      uint64_t v74 = (char *)InputAttributeNames + 16 * v54;
                      int v75 = v94;
                      size_t v76 = (char *)InputAttributeNames + 8 * v94;
                      if (v76 != v74 + 8)
                      {
                        memmove(v74, v74 + 8, v76 - (v74 + 8));
                        int v75 = v94;
                        v73 = (char *)InputAttributeNames;
                      }
                      int v77 = v75 - 1;
                      LODWORD(v94) = v77;
                      v78 = &v73[16 * v54];
                      v79 = &v73[8 * v77];
                      if (v79 != v78 + 8)
                      {
                        memmove(v78, v78 + 8, v79 - (v78 + 8));
                        int v77 = v94;
                      }
                      LODWORD(v94) = v77 - 1;
                      uint64_t v92 = 6;
                      uint64_t v80 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 8), 0x40u, 0);
                      uint64_t Input = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v92, 1, v80, 0);
                      uint64_t v81 = mlir::Type::cast<mlir::ShapedType>(&Input);
                      uint64_t Rewriter = mlir::DenseElementsAttr::getFromRawBuffer(v81, v82, InputAttributeNames, 8 * v94, 8, 1, 0);
                      uint64_t v83 = v91;
                      uint64_t Input = (uint64_t *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v91);
                      LODWORD(v92) = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v91);
                      mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::DepthwiseConv3DOp,mlir::Value,mlir::Value&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyle,long long &>(a3, v83, (uint64_t *)&Input, &v86, (uint64_t *)&v85, &v105, &Rewriter, (unsigned int *)&v92, &v87);
                      if (InputAttributeNames != v95) {
                        free(InputAttributeNames);
                      }
                      if (Strides != v99) {
                        free(Strides);
                      }
                      if (__src != &v102) {
                        free(__src);
                      }
                      if (v106 != v108) {
                        free(v106);
                      }
                      uint64_t v34 = 1;
                      goto LABEL_53;
                    }
                    uint64_t v50 = "failed: weights must have a static shape";
                  }
                  else
                  {
                    uint64_t v50 = "failed: channelsMultiplier must be 1";
                  }
                }
                else
                {
                  uint64_t v50 = "failed: input channels must match the number of groups";
                }
              }
              else
              {
                uint64_t v50 = "failed: weights must have only one input channel";
              }
              uint64_t v47 = mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(a3, &v91, v50);
              goto LABEL_51;
            }
          }
        }
        v43 = "failed: op has dynamic channels count";
LABEL_48:
        __src = v43;
        __int16 v104 = 259;
        uint64_t v46 = v91;
        Strides = &__src;
        uint64_t v34 = *(void *)(a3 + 16);
        if (!v34) {
          goto LABEL_53;
        }
        if (!mlir::RewriterBase::Listener::classof(v34))
        {
          uint64_t v34 = 0;
LABEL_53:
          if (v109 != v111) {
            free(v109);
          }
          return v34;
        }
        uint64_t v47 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v34 + 64))(v34, *(void *)(v46 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &Strides);
LABEL_51:
        uint64_t v34 = v47;
        goto LABEL_53;
      }
    }
    memcpy(&v109[v31], ArgAttrsAttr, v30);
    int v31 = v110;
    goto LABEL_32;
  }
  __src = "failed: op has dynamic channels count";
  __int16 v104 = 259;
  uint64_t v32 = v91;
  Strides = &__src;
  uint64_t v33 = *(void *)(a3 + 16);
  if (v33 && mlir::RewriterBase::Listener::classof(*(void *)(a3 + 16))) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v33 + 64))(v33, *(void *)(v32 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &Strides);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  char v3 = 1;
  char v9 = 1;
  if (*a3)
  {
    unint64_t v7 = a3;
    char v3 = 3;
  }
  char v8 = v3;
  uint64_t v4 = *a2;
  unint64_t v10 = &v7;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v5 + 64))(v5, *(void *)(v4 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v10);
  }
  return result;
}

uint64_t llvm::SmallVector<long long,4u>::operator=(uint64_t a1, void *__src, uint64_t a3)
{
  unsigned int v6 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  unint64_t v7 = (8 * a3) >> 3;
  if (v7 > *(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v7, 8);
    unsigned int v6 = *(_DWORD *)(a1 + 8);
  }
  if (a3)
  {
    memcpy((void *)(*(void *)a1 + 8 * v6), __src, 8 * a3);
    unsigned int v6 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v6 + a3;
  return a1;
}

mlir::GenericProgramPoint *mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::DepthwiseConv3DOp,mlir::Value,mlir::Value&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyle,long long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, unsigned int *a8, void *a9)
{
  unint64_t v11 = mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DOp,mlir::Value,mlir::Value&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyle,long long &>((mlir::Builder *)(a1 + 8), *(void *)(a2 + 24), a3, a4, a5, a6, a7, a8, a9);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a1 + 32))(a1, a2, v11);
  return v11;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DOp,mlir::Value,mlir::Value&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyle,long long &>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, unsigned int *a8, void *a9)
{
  v28[38] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v23);
  uint64_t v18 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.depthwise_conv_3d", (const unsigned __int8 *)0x15, Context);
  if (!v19)
  {
    __int16 v27 = 1283;
    v26[2] = (uint64_t)"mps.depthwise_conv_3d";
    v26[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v25 = 259;
    llvm::operator+(v26, (uint64_t *)&v24, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v18);
  mlir::mps::DepthwiseConv3DOp::build(a1, (uint64_t)v28, *a3, *a4, *a5, *a6, *a7, *a8, *a9);
  uint64_t v20 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((void *)v20 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DOp,void>::id) {
    unint64_t v21 = v20;
  }
  else {
    unint64_t v21 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v21;
}

void *mlir::mps::anonymous namespace'::CanonicalizeConvToDepthwise<mlir::mps::Conv2DDataGradientOp>::~CanonicalizeConvToDepthwise(void *a1)
{
  v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  char v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeConvToDepthwise<mlir::mps::Conv2DDataGradientOp>::~CanonicalizeConvToDepthwise(void *__p)
{
  v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  char v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeConvToDepthwise<mlir::mps::Conv2DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v112[4] = *MEMORY[0x1E4F143B8];
  uint64_t v91 = 0;
  uint64_t v92 = a2;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v90 = 0;
  uint64_t v5 = (void *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v92) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  char v9 = *(void **)(v6 + 8);
  unint64_t v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    uint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    unint64_t v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      char v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  uint64_t v90 = v5;
  uint64_t v91 = v15;
  __int16 v16 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v92) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16) {
    goto LABEL_20;
  }
  uint64_t v17 = *v16;
  unint64_t v18 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v19 = *(unsigned int *)(v17 + 16);
  if (!v19) {
    goto LABEL_20;
  }
  uint64_t v20 = *(void **)(v17 + 8);
  unint64_t v21 = &v20[2 * v19];
  do
  {
    unint64_t v22 = v19 >> 1;
    uint64_t v23 = &v20[2 * (v19 >> 1)];
    unint64_t v25 = *v23;
    unint64_t v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18) {
      uint64_t v20 = v24;
    }
    else {
      unint64_t v19 = v22;
    }
  }
  while (v19);
  if (v20 != v21 && *v20 == v18) {
    uint64_t v26 = v20[1];
  }
  else {
LABEL_20:
  }
    uint64_t v26 = 0;
  v89[0] = v16;
  v89[1] = v26;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v90)
    && (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89) & 1) != 0)
  {
    uint64_t ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
    uint64_t v29 = v27;
    uint64_t v110 = v112;
    uint64_t v111 = 0x400000000;
    size_t v30 = 8 * v27;
    if ((unint64_t)(8 * v27) < 0x21)
    {
      int v31 = 0;
      if (!v27) {
        goto LABEL_32;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, v112, (8 * v27) >> 3, 8);
      int v31 = v111;
      if (!v29)
      {
LABEL_32:
        LODWORD(v111) = v31 + (v30 >> 3);
        int StorageType = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v92);
        if (StorageType)
        {
          if (StorageType != 1)
          {
            v43 = "failed: unsupported data layout";
            goto LABEL_48;
          }
          uint64_t v36 = -1;
          uint64_t v37 = 3;
        }
        else
        {
          uint64_t v36 = -3;
          uint64_t v37 = 1;
        }
        uint64_t v88 = v36;
        uint64_t v38 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v90) + 8 * v37);
        int WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v92);
        if (WeightsLayout == 2)
        {
          uint64_t v42 = 0;
          uint64_t v40 = 2;
          uint64_t v41 = 1;
        }
        else
        {
          if (WeightsLayout != 3)
          {
            v43 = "failed: unsupported weights layout";
            goto LABEL_48;
          }
          uint64_t v40 = 0;
          uint64_t v41 = 2;
          uint64_t v42 = 3;
        }
        if (v38 != 0x8000000000000000)
        {
          uint64_t v44 = v110[v41];
          if (v44 != 0x8000000000000000)
          {
            uint64_t v45 = v110[v42];
            if (v45 != 0x8000000000000000)
            {
              if (v44 == 1)
              {
                uint64_t v49 = v45 / v38;
                if (v45 / v38 * v38 == v45
                  && mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v92) == (void *)v38)
                {
                  if (v49 < 2)
                  {
                    if (mlir::ShapedType::hasStaticShape((mlir::ShapedType *)v89))
                    {
                      uint64_t v107 = v109;
                      uint64_t v108 = 0x400000000;
                      if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v92))
                      {
                        __src = (uint64_t *)v41;
                        uint64_t v102 = v40;
                        uint64_t v103 = v40 | 1;
                        uint64_t v104 = v42;
                      }
                      else
                      {
                        __src = (uint64_t *)v41;
                        uint64_t v102 = v42;
                        uint64_t v103 = v40;
                        uint64_t v104 = v40 | 1;
                      }
                      llvm::SmallVector<long long,4u>::operator=((uint64_t)&v107, &__src, 4);
                      __src = (uint64_t *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v92);
                      uint64_t v106 = 4;
                      uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 8), 0x40u, 1);
                      uint64_t v86 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v106, 1, IntegerType, 0);
                      v52 = mlir::Type::cast<mlir::ShapedType>(&v86);
                      InputAttributeNames = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v52, v53, v107, 8 * v108, 8, 1, 1);
                      Strides = (uint64_t **)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 8), v4, (uint64_t **)&InputAttributeNames);
                      uint64_t v87 = (uint64_t)mlir::OpBuilder::create<mlir::mps::PermuteOp,mlir::Value,mlir::mps::ConstantOp>((mlir::OpBuilder *)(a3 + 8), v4, (uint64_t *)&__src, &Strides)- 16;
                      if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v92)) {
                        uint64_t v54 = 3;
                      }
                      else {
                        uint64_t v54 = 0;
                      }
                      __src = &v103;
                      uint64_t v102 = 0x600000000;
                      Strides = (uint64_t **)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v92);
                      v55 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&Strides);
                      mlir::getIntValues<unsigned long long>((uint64_t)v55, v56, (uint64_t)&__src, 1);
                      uint64_t v57 = &__src[v54];
                      int v58 = v102;
                      int64_t v59 = &__src[v102];
                      if (v59 != v57 + 1)
                      {
                        memmove(v57, v57 + 1, (char *)v59 - (char *)(v57 + 1));
                        int v58 = v102;
                      }
                      LODWORD(v102) = v58 - 1;
                      InputAttributeNames = (void *)3;
                      uint64_t v60 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 8), 0x40u, 0);
                      Strides = (uint64_t **)mlir::RankedTensorType::get((uint64_t)&InputAttributeNames, 1, v60, 0);
                      unint64_t v61 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&Strides);
                      uint64_t v86 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v61, v62, __src, 8 * v102, 8, 1, 0);
                      Strides = (uint64_t **)v100;
                      uint64_t v99 = 0x600000000;
                      InputAttributeNames = (void *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v92);
                      unint64_t v63 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&InputAttributeNames);
                      mlir::getIntValues<unsigned long long>((uint64_t)v63, v64, (uint64_t)&Strides, 1);
                      v65 = (uint64_t *)&Strides[v54];
                      int v66 = v99;
                      v67 = (uint64_t *)&Strides[v99];
                      if (v67 != v65 + 1)
                      {
                        memmove(v65, v65 + 1, (char *)v67 - (char *)(v65 + 1));
                        int v66 = v99;
                      }
                      LODWORD(v99) = v66 - 1;
                      uint64_t Rewriter = 3;
                      uint64_t v68 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 8), 0x40u, 0);
                      InputAttributeNames = (void *)mlir::RankedTensorType::get((uint64_t)&Rewriter, 1, v68, 0);
                      unint64_t v69 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&InputAttributeNames);
                      uint64_t v106 = mlir::DenseElementsAttr::getFromRawBuffer(v69, v70, Strides, 8 * v99, 8, 1, 0);
                      InputAttributeNames = v96;
                      uint64_t v95 = 0x600000000;
                      uint64_t Rewriter = mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v92);
                      uint64_t v71 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&Rewriter);
                      mlir::getIntValues<unsigned long long>((uint64_t)v71, v72, (uint64_t)&InputAttributeNames, 1);
                      v73 = (char *)InputAttributeNames;
                      uint64_t v74 = (char *)InputAttributeNames + 16 * v54;
                      int v75 = v95;
                      size_t v76 = (char *)InputAttributeNames + 8 * v95;
                      if (v76 != v74 + 8)
                      {
                        memmove(v74, v74 + 8, v76 - (v74 + 8));
                        int v75 = v95;
                        v73 = (char *)InputAttributeNames;
                      }
                      int v77 = v75 - 1;
                      LODWORD(v95) = v77;
                      v78 = &v73[16 * v54];
                      v79 = &v73[8 * v77];
                      if (v79 != v78 + 8)
                      {
                        memmove(v78, v78 + 8, v79 - (v78 + 8));
                        int v77 = v95;
                      }
                      LODWORD(v95) = v77 - 1;
                      uint64_t SplitSizes = 6;
                      uint64_t v80 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 8), 0x40u, 0);
                      uint64_t Input = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&SplitSizes, 1, v80, 0);
                      uint64_t v81 = mlir::Type::cast<mlir::ShapedType>(&Input);
                      uint64_t Rewriter = mlir::DenseElementsAttr::getFromRawBuffer(v81, v82, InputAttributeNames, 8 * v95, 8, 1, 0);
                      uint64_t v83 = v92;
                      uint64_t Input = (uint64_t *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v92);
                      uint64_t SplitSizes = mlir::mps::SplitOp::getSplitSizes((mlir::mps::SplitOp *)&v92);
                      unsigned int PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v92);
                      mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::DepthwiseConv3DDataGradientOp,mlir::Value,mlir::Value&,mlir::Value,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyle,long long &>(a3, v83, (uint64_t *)&Input, &v87, &SplitSizes, (uint64_t *)&v86, &v106, &Rewriter, &PaddingStyle, &v88);
                      if (InputAttributeNames != v96) {
                        free(InputAttributeNames);
                      }
                      if (Strides != (uint64_t **)v100) {
                        free(Strides);
                      }
                      if (__src != &v103) {
                        free(__src);
                      }
                      if (v107 != v109) {
                        free(v107);
                      }
                      uint64_t v34 = 1;
                      goto LABEL_53;
                    }
                    uint64_t v50 = "failed: weights must have a static shape";
                  }
                  else
                  {
                    uint64_t v50 = "failed: channelsMultiplier must be 1";
                  }
                }
                else
                {
                  uint64_t v50 = "failed: input channels must match the number of groups";
                }
              }
              else
              {
                uint64_t v50 = "failed: weights must have only one input channel";
              }
              uint64_t v47 = mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(a3, &v92, v50);
              goto LABEL_51;
            }
          }
        }
        v43 = "failed: op has dynamic channels count";
LABEL_48:
        __src = (uint64_t *)v43;
        __int16 v105 = 259;
        uint64_t v46 = v92;
        Strides = &__src;
        uint64_t v34 = *(void *)(a3 + 16);
        if (!v34) {
          goto LABEL_53;
        }
        if (!mlir::RewriterBase::Listener::classof(v34))
        {
          uint64_t v34 = 0;
LABEL_53:
          if (v110 != v112) {
            free(v110);
          }
          return v34;
        }
        uint64_t v47 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t ***))(*(void *)v34 + 64))(v34, *(void *)(v46 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &Strides);
LABEL_51:
        uint64_t v34 = v47;
        goto LABEL_53;
      }
    }
    memcpy(&v110[v31], ArgAttrsAttr, v30);
    int v31 = v111;
    goto LABEL_32;
  }
  __src = (uint64_t *)"failed: op has dynamic channels count";
  __int16 v105 = 259;
  uint64_t v32 = v92;
  Strides = &__src;
  uint64_t v33 = *(void *)(a3 + 16);
  if (v33 && mlir::RewriterBase::Listener::classof(*(void *)(a3 + 16))) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t ***))(*(void *)v33 + 64))(v33, *(void *)(v32 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &Strides);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  char v3 = 1;
  char v9 = 1;
  if (*a3)
  {
    unint64_t v7 = a3;
    char v3 = 3;
  }
  char v8 = v3;
  uint64_t v4 = *a2;
  unint64_t v10 = &v7;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v5 + 64))(v5, *(void *)(v4 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v10);
  }
  return result;
}

mlir::GenericProgramPoint *mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::DepthwiseConv3DDataGradientOp,mlir::Value,mlir::Value&,mlir::Value,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyle,long long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, unsigned int *a9, void *a10)
{
  uint64_t v12 = mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DDataGradientOp,mlir::Value,mlir::Value&,mlir::Value,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyle,long long &>((mlir::Builder *)(a1 + 8), *(void *)(a2 + 24), a3, a4, a5, a6, a7, a8, a9, a10);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a1 + 32))(a1, a2, v12);
  return v12;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DDataGradientOp,mlir::Value,mlir::Value&,mlir::Value,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyle,long long &>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, unsigned int *a9, void *a10)
{
  v29[38] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  uint64_t v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.depthwise_conv_3d_data_gradient", (const unsigned __int8 *)0x23, Context);
  if (!v20)
  {
    __int16 v28 = 1283;
    void v27[2] = (uint64_t)"mps.depthwise_conv_3d_data_gradient";
    v27[3] = 35;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v29);
    llvm::report_fatal_error((llvm::Twine *)v29, 1);
  }
  mlir::OperationState::OperationState(v29, a2, v19);
  mlir::mps::DepthwiseConv3DDataGradientOp::build(a1, (uint64_t)v29, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10);
  unint64_t v21 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v29);
  if (*(_UNKNOWN **)(*((void *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DDataGradientOp,void>::id) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v29);
  return v22;
}

void mlir::mps::anonymous namespace'::CanonicalizeSparseMatMulTranspose::~CanonicalizeSparseMatMulTranspose(mlir::mps::_anonymous_namespace_::CanonicalizeSparseMatMulTranspose *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  char v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  char v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mpsx::SparseDenseMatMulOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mpsx::SparseDenseMatMulOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mpsx::SparseDenseMatMulOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

BOOL mlir::mps::anonymous namespace'::CanonicalizeSparseMatMulTranspose::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  __int16 v16 = a2;
  BOOL result = mlir::mpsx::SparseDenseMatMulOp::getTransposeRhs(&v16);
  if (result)
  {
    uint64_t v5 = *((void *)v16 + 3);
    uint64_t Dense = mlir::mpsx::SparseDenseMatMulOp::getDense((mlir::mpsx::SparseDenseMatMulOp *)&v16);
    LODWORD(Filter) = -1;
    LODWORD(Bias) = -2;
    uint64_t v15 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 8), v5, &Dense, (unsigned int *)&Filter, (unsigned int *)&Bias);
    uint64_t v6 = v16;
    uint64_t Dense = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v16);
    uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v16);
    uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v16);
    uint64_t SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v16);
    BOOL TransposeLhs = mlir::mpsx::SparseDenseMatMulOp::getTransposeLhs(&v16);
    unsigned __int8 v9 = 0;
    unsigned int StorageType = mlir::mpsx::SparseDenseMatMulOp::getStorageType(&v16);
    unint64_t v7 = mlir::OpBuilder::create<mlir::mpsx::SparseDenseMatMulOp,mlir::Value,mlir::Value,mlir::Value,mlir::Value,mlir::mps::TransposeOp &,BOOL,BOOL,mlir::mps::SparseTensorStorage>((mlir::BoolAttr **)(a3 + 8), *((void *)v6 + 3), &Dense, &Filter, &Bias, &SparseShape, &v15, (unsigned __int8 *)&TransposeLhs, &v9, &StorageType);
    (*(void (**)(uint64_t, mlir::Operation *, mlir::GenericProgramPoint *))(*(void *)a3 + 32))(a3, v6, v7);
    return 1;
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::SparseDenseMatMulOp,mlir::Value,mlir::Value,mlir::Value,mlir::Value,mlir::mps::TransposeOp &,BOOL,BOOL,mlir::mps::SparseTensorStorage>(mlir::BoolAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, unsigned __int8 *a8, unsigned __int8 *a9, unsigned int *a10)
{
  v29[38] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  uint64_t v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.sparse_dense_matmul", (const unsigned __int8 *)0x18, Context);
  if (!v20)
  {
    __int16 v28 = 1283;
    void v27[2] = (uint64_t)"mpsx.sparse_dense_matmul";
    v27[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v29);
    llvm::report_fatal_error((llvm::Twine *)v29, 1);
  }
  mlir::OperationState::OperationState(v29, a2, v19);
  mlir::mpsx::SparseDenseMatMulOp::build(a1, (uint64_t)v29, *a3, *a4, *a5, *a6, *a7 - 16, (mlir::MLIRContext *)*a8, *a9, *a10);
  unint64_t v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v29);
  if (*(_UNKNOWN **)(*((void *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::SparseDenseMatMulOp,void>::id) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v29);
  return v22;
}

void mlir::mps::anonymous namespace'::CanonicalizeQuantizedMatmulTranpose::~CanonicalizeQuantizedMatmulTranpose(mlir::mps::_anonymous_namespace_::CanonicalizeQuantizedMatmulTranpose *this)
{
  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  char v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  char v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeQuantizedMatmulTranpose::matchAndRewrite(uint64_t a1, mlir::Operation *a2, mlir::MLIRContext **a3)
{
  uint64_t v36 = a2;
  uint64_t Input = mlir::mpsx::QuantizedMatMulOp::getInput(&v36);
  uint64_t InputScale = mlir::mpsx::QuantizedMatMulOp::getInputScale(&v36);
  uint64_t v34 = (char *)InputScale;
  uint64_t InputZeroPoint = mlir::mpsx::QuantizedMatMulOp::getInputZeroPoint(&v36);
  uint64_t v33 = (char *)InputZeroPoint;
  uint64_t InputMin = mlir::mpsx::QuantizedMatMulOp::getInputMin(&v36);
  uint64_t v32 = (char *)InputMin;
  uint64_t InputQuantParamsAxisAttr = mlir::mpsx::QuantizedMatMulOp::getInputQuantParamsAxisAttr(&v36);
  uint64_t v31 = InputQuantParamsAxisAttr;
  uint64_t v9 = TransposedInput;
  if (TransposedInput)
  {
    uint64_t Input = TransposedInput;
  }
  uint64_t Weights = mlir::mpsx::QuantizedMatMulOp::getWeights(&v36);
  uint64_t WeightsScale = mlir::mpsx::QuantizedMatMulOp::getWeightsScale(&v36);
  uint64_t v29 = (char *)WeightsScale;
  uint64_t WeightsZeroPoint = mlir::mpsx::QuantizedMatMulOp::getWeightsZeroPoint(&v36);
  __int16 v28 = (char *)WeightsZeroPoint;
  uint64_t WeightsMin = mlir::mpsx::QuantizedMatMulOp::getWeightsMin(&v36);
  uint64_t v27 = (char *)WeightsMin;
  uint64_t WeightsQuantParamsAxisAttr = mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr(&v36);
  uint64_t v26 = WeightsQuantParamsAxisAttr;
  uint64_t v15 = v14;
  if (v14)
  {
    uint64_t Weights = v14;
  }
  else if (!v9)
  {
    return 0;
  }
  BOOL v16 = v9 != 0;
  uint64_t v17 = v36;
  uint64_t WeightsPaletteLut = mlir::mpsx::QuantizedMatMulOp::getWeightsPaletteLut(&v36);
  Biquantuint64_t WeightsScale = mlir::mpsx::QuantizedMatMulOp::getBiquantWeightsScale(&v36);
  Biquantuint64_t WeightsZeroPoint = mlir::mpsx::QuantizedMatMulOp::getBiquantWeightsZeroPoint(&v36);
  uint64_t OutputType = mlir::mpsx::QuantizedMatMulOp::getOutputType(&v36);
  unsigned __int8 v21 = mlir::mpsx::QuantizedMatMulOp::getTransposeLhs(&v36) ^ v16;
  unsigned __int8 v20 = mlir::mpsx::QuantizedMatMulOp::getTransposeRhs(&v36) ^ (v15 != 0);
  unint64_t v18 = mlir::OpBuilder::create<mlir::mpsx::QuantizedMatMulOp,mlir::Value,mlir::Value&,mlir::Value&,mlir::Value&,mlir::IntegerAttr &,mlir::Value&,mlir::Value&,mlir::Value&,mlir::Value&,mlir::IntegerAttr &,mlir::Value,mlir::detail::TypedValue<mlir::RankedTensorType>,mlir::detail::TypedValue<mlir::RankedTensorType>,mlir::Type,BOOL,BOOL>(a3 + 1, *((void *)v17 + 3), &Input, (uint64_t *)&v34, (uint64_t *)&v33, (uint64_t *)&v32, &v31, &Weights, (uint64_t *)&v29, (uint64_t *)&v28, (uint64_t *)&v27, &v26, &WeightsPaletteLut, &BiquantWeightsScale, &BiquantWeightsZeroPoint, &OutputType, &v21, &v20);
  (*((void (**)(mlir::MLIRContext **, mlir::Operation *, mlir::GenericProgramPoint *))*a3 + 4))(a3, v17, v18);
  return 1;
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeQuantizedMatmulTranpose::getTransposedInput(uint64_t a1)
{
  uint64_t v40 = a1;
  v1 = (uint64_t *)(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v1) {
    goto LABEL_10;
  }
  uint64_t v2 = *v1;
  unint64_t v3 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v4 = *(unsigned int *)(v2 + 16);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *(void **)(v2 + 8);
  uint64_t v6 = &v5[2 * v4];
  do
  {
    unint64_t v7 = v4 >> 1;
    char v8 = &v5[2 * (v4 >> 1)];
    unint64_t v10 = *v8;
    uint64_t v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3) {
      uint64_t v5 = v9;
    }
    else {
      unint64_t v4 = v7;
    }
  }
  while (v4);
  if (v5 != v6 && *v5 == v3) {
    uint64_t v11 = v5[1];
  }
  else {
LABEL_10:
  }
    uint64_t v11 = 0;
  v39[0] = v1;
  v39[1] = v11;
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v40);
  if (result)
  {
    uint64_t v13 = result;
    uint64_t result = 0;
    uint64_t v14 = *(void **)(*(void *)(v13 + 48) + 16);
    if (v14 != &mlir::detail::TypeIDResolver<mlir::mps::TransposeOp,void>::id) {
      uint64_t v13 = 0;
    }
    uint64_t v38 = v13;
    if (v14 == &mlir::detail::TypeIDResolver<mlir::mps::TransposeOp,void>::id)
    {
      uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v38);
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      uint64_t v41 = (uint64_t **)&v42;
      uint64_t v44 = Filter;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v44);
      if (DefiningOp)
      {
        if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v41, DefiningOp))
        {
          unint64_t SingleInt = mlir::getSingleIntValue<long long>(v42, v43);
          if (v18)
          {
            unint64_t v19 = SingleInt;
            if ((SingleInt & 0x8000000000000000) != 0)
            {
              int v20 = 0;
              unint64_t v22 = SingleInt & 0xFFFFFFFFFFFFFF00;
              uint64_t v23 = SingleInt;
LABEL_22:
              int64_t v24 = v22 | v23;
              uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v38);
              uint64_t v42 = 0;
              uint64_t v43 = 0;
              uint64_t v41 = (uint64_t **)&v42;
              uint64_t v44 = Bias;
              uint64_t v26 = mlir::Value::getDefiningOp((mlir::Value *)&v44);
              if (!v26) {
                goto LABEL_28;
              }
              if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v41, v26)) {
                goto LABEL_28;
              }
              unint64_t v27 = mlir::getSingleIntValue<long long>(v42, v43);
              if (!v28) {
                goto LABEL_28;
              }
              unint64_t v29 = v27;
              if ((v27 & 0x8000000000000000) != 0)
              {
                int v30 = 0;
                unint64_t v32 = v27 & 0xFFFFFFFFFFFFFF00;
                uint64_t v33 = v27;
                goto LABEL_29;
              }
              if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39))
              {
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
                int v30 = 0;
                unint64_t v32 = (v29 - v31) & 0xFFFFFFFFFFFFFF00;
                uint64_t v33 = (v29 - v31);
              }
              else
              {
LABEL_28:
                uint64_t v33 = 0;
                unint64_t v32 = 0;
                int v30 = 1;
              }
LABEL_29:
              uint64_t result = 0;
              int64_t v34 = v32 | v33;
              int v35 = v20 | v30;
              if (v34 >= v24) {
                int64_t v36 = v24;
              }
              else {
                int64_t v36 = v34;
              }
              if (v24 <= v34) {
                int64_t v37 = v34;
              }
              else {
                int64_t v37 = v24;
              }
              if (v35 != 1 && v36 == -2 && v37 == -1) {
                return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v38);
              }
              return result;
            }
            if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39))
            {
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
              int v20 = 0;
              unint64_t v22 = (v19 - v21) & 0xFFFFFFFFFFFFFF00;
              uint64_t v23 = (v19 - v21);
              goto LABEL_22;
            }
          }
        }
      }
      uint64_t v23 = 0;
      unint64_t v22 = 0;
      int v20 = 1;
      goto LABEL_22;
    }
  }
  return result;
}

char *mlir::mps::anonymous namespace'::CanonicalizeQuantizedMatmulTranpose::transposeParam(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v21 = a2;
  if (a2)
  {
    unint64_t v4 = (uint64_t *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v4) {
      goto LABEL_11;
    }
    uint64_t v5 = *v4;
    unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v7 = *(unsigned int *)(v5 + 16);
    if (!v7) {
      goto LABEL_11;
    }
    char v8 = *(void **)(v5 + 8);
    uint64_t v9 = &v8[2 * v7];
    do
    {
      unint64_t v10 = v7 >> 1;
      uint64_t v11 = &v8[2 * (v7 >> 1)];
      unint64_t v13 = *v11;
      uint64_t v12 = v11 + 2;
      v7 += ~(v7 >> 1);
      if (v13 < v6) {
        char v8 = v12;
      }
      else {
        unint64_t v7 = v10;
      }
    }
    while (v7);
    if (v8 != v9 && *v8 == v6) {
      uint64_t v14 = v8[1];
    }
    else {
LABEL_11:
    }
      uint64_t v14 = 0;
    v20[0] = v4;
    v20[1] = v14;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v20))
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v20);
      if (v15 >= 2)
      {
        uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v21);
        unsigned int v18 = -2;
        unsigned int v19 = -1;
        return (char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a1 + 8), Loc, &v21, &v19, &v18)- 16;
      }
    }
  }
  return (char *)v2;
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeQuantizedMatmulTranpose::transposeAxisAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  if (!a2) {
    return 0;
  }
  mlir::IntegerAttr::getValue(&v26, (llvm::APInt *)&__p);
  if (v25 > 0x40)
  {
    uint64_t NegativeAxis = *(void *)__p;
    operator delete[](__p);
    if (NegativeAxis < 0)
    {
LABEL_4:
      if (NegativeAxis != -2) {
        goto LABEL_5;
      }
LABEL_20:
      uint64_t v23 = (mlir::Builder *)(a1 + 8);
      uint64_t IntegerType = mlir::Builder::getIntegerType(v23, 0x20u, 1);
      uint64_t v8 = (uint64_t)v23;
      uint64_t v9 = -1;
      return mlir::Builder::getIntegerAttr(v8, IntegerType, v9);
    }
  }
  else
  {
    uint64_t NegativeAxis = (uint64_t)((void)__p << -(uint64_t)v25) >> -(uint64_t)v25;
    if (NegativeAxis < 0) {
      goto LABEL_4;
    }
  }
  uint64_t v11 = (uint64_t *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v11) {
    goto LABEL_18;
  }
  uint64_t v12 = *v11;
  unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v14 = *(unsigned int *)(v12 + 16);
  if (!v14) {
    goto LABEL_18;
  }
  uint64_t v15 = *(void **)(v12 + 8);
  BOOL v16 = &v15[2 * v14];
  do
  {
    unint64_t v17 = v14 >> 1;
    unsigned int v18 = &v15[2 * (v14 >> 1)];
    unint64_t v20 = *v18;
    unsigned int v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13) {
      uint64_t v15 = v19;
    }
    else {
      unint64_t v14 = v17;
    }
  }
  while (v14);
  if (v15 != v16 && *v15 == v13) {
    uint64_t v21 = v15[1];
  }
  else {
LABEL_18:
  }
    uint64_t v21 = 0;
  __p = v11;
  uint64_t v25 = v21;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__p);
  uint64_t NegativeAxis = mlir::getNegativeAxis((mlir *)NegativeAxis, v22);
  if (NegativeAxis == -2) {
    goto LABEL_20;
  }
LABEL_5:
  if (NegativeAxis == -1)
  {
    unint64_t v6 = (mlir::Builder *)(a1 + 8);
    uint64_t IntegerType = mlir::Builder::getIntegerType(v6, 0x20u, 1);
    uint64_t v8 = (uint64_t)v6;
    uint64_t v9 = -2;
    return mlir::Builder::getIntegerAttr(v8, IntegerType, v9);
  }
  return v26;
}

unint64_t mlir::matchConstantWithIntValue<long long>(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v6 = (uint64_t **)&v7;
  uint64_t v9 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v9);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v6, DefiningOp))
  {
    unint64_t SingleInt = mlir::getSingleIntValue<long long>(v7, v8);
    unint64_t v3 = SingleInt & 0xFFFFFFFFFFFFFF00;
    uint64_t v4 = SingleInt;
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  return v4 | v3;
}

void *mlir::mps::anonymous namespace'::FuseRMS<mlir::mps::MultiplyOp>::~FuseRMS(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::FuseRMS<mlir::mps::MultiplyOp>::~FuseRMS(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

BOOL mlir::mps::anonymous namespace'::FuseRMS<mlir::mps::MultiplyOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::UnknownLoc **a3)
{
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  v51[0] = &v52;
  v51[1] = 0;
  uint64_t v48 = v51;
  LOBYTE(v49) = 0;
  char v50 = 0;
  uint64_t v44 = &v53;
  uint64_t v45 = &v48;
  char v46 = 0;
  char v47 = 0;
  if (!mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>>::match(&v44, a2))return 0; {
  uint64_t v5 = v53;
  }
  uint64_t v6 = v50 ? v49 : 0;
  uint64_t v72 = v53;
  uint64_t v68 = 0;
  Axes = &v72;
  LOBYTE(v70) = 0;
  char v71 = 0;
  uint64_t v64 = 0;
  v65 = &v68;
  char v66 = 0;
  char v67 = 0;
  v63[0] = &Axes;
  v63[1] = 0;
  v61[0] = (uint64_t)v63;
  v61[1] = (uint64_t)&v64;
  uint64_t v62 = 0;
  int v58 = (uint64_t **)v61;
  LOBYTE(v59) = 0;
  char v60 = 0;
  uint64_t v54 = &v58;
  v55 = &v65;
  char v56 = 0;
  char v57 = 0;
  uint64_t v40 = v52;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v40);
  if (!DefiningOp
    || (mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::any_value_binder>>::match(&v54, DefiningOp) & 1) == 0)
  {
    return 0;
  }
  if (v6)
  {
    uint64_t v8 = v71 ? v70 : 0;
  }
  if (v60)
  {
    uint64_t v9 = v71 ? v70 : 0;
  }
  uint64_t v40 = v5;
  uint64_t v41 = v68;
  uint64_t v42 = v62;
  char v43 = 1;
  BOOL result = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v42);
  if (!result) {
    return result;
  }
  uint64_t v11 = (uint64_t ***)(*(void *)(v40 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v11) {
    goto LABEL_27;
  }
  uint64_t v12 = *v11;
  unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v14 = *((unsigned int *)v12 + 4);
  if (!v14) {
    goto LABEL_27;
  }
  uint64_t v15 = v12[1];
  BOOL v16 = &v15[2 * v14];
  do
  {
    unint64_t v17 = v14 >> 1;
    unsigned int v18 = (unint64_t *)&v15[2 * (v14 >> 1)];
    unint64_t v20 = *v18;
    unsigned int v19 = (uint64_t *)(v18 + 2);
    v14 += ~(v14 >> 1);
    if (v20 < v13) {
      uint64_t v15 = v19;
    }
    else {
      unint64_t v14 = v17;
    }
  }
  while (v14);
  if (v15 != v16 && *v15 == v13) {
    uint64_t v21 = (uint64_t **)v15[1];
  }
  else {
LABEL_27:
  }
    uint64_t v21 = 0;
  uint64_t v54 = v11;
  v55 = v21;
  uint64_t v22 = (uint64_t *)v41;
  v61[0] = v41;
  uint64_t v23 = (uint64_t *)(*(void *)(v41 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v23) {
    goto LABEL_37;
  }
  uint64_t v24 = *v23;
  unint64_t v25 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v26 = *(unsigned int *)(v24 + 16);
  if (!v26) {
    goto LABEL_37;
  }
  unint64_t v27 = *(void **)(v24 + 8);
  char v28 = &v27[2 * v26];
  do
  {
    unint64_t v29 = v26 >> 1;
    int v30 = &v27[2 * (v26 >> 1)];
    unint64_t v32 = *v30;
    uint64_t v31 = v30 + 2;
    v26 += ~(v26 >> 1);
    if (v32 < v25) {
      unint64_t v27 = v31;
    }
    else {
      unint64_t v26 = v29;
    }
  }
  while (v26);
  if (v27 != v28 && *v27 == v25) {
    uint64_t v33 = (void **)v27[1];
  }
  else {
LABEL_37:
  }
    uint64_t v33 = 0;
  uint64_t v44 = v23;
  uint64_t v45 = v33;
  Axes = 0;
  uint64_t v70 = 0;
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v44);
  if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v35) != 1)
  {
    int v58 = &Axes;
    v65 = v22;
    uint64_t v39 = mlir::Value::getDefiningOp((mlir::Value *)&v65);
    if (!v39
      || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v58, v39)
      || (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Axes) & 1) == 0)
    {
      return 0;
    }
  }
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v54);
  if (OperandRange != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v44))
  {
    uint64_t Loc = mlir::Value::getLoc((mlir::Value *)v61);
    Axes = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v54);
    v61[0] = (uint64_t)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, v61, (uint64_t *)&Axes)- 16;
  }
  Axes = (uint64_t *)mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v42);
  uint64_t v38 = mlir::OpBuilder::create<mlir::mpsx::RMSNormOp,mlir::Value &,mlir::Value &,mlir::Value &>(a3 + 1, *(void *)(a2 + 24), &v40, v61, (uint64_t *)&Axes);
  (*((void (**)(mlir::UnknownLoc **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v38);
  return 1;
}

uint64_t mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>>::match(uint64_t **a1, uint64_t a2)
{
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::MultiplyOp,void>::id) {
    return 0;
  }
  uint64_t v5 = (uint64_t ***)a1[1];
  uint64_t v6 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t v7 = **a1;
  if (v7)
  {
    BOOL v8 = v7 == v6;
  }
  else
  {
    **a1 = v6;
    BOOL v8 = 1;
  }
  char v9 = mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>>(a2, 1u, v5);
  if (!v8 || (v9 & 1) == 0)
  {
    unint64_t v10 = a1[1];
    int v11 = *((unsigned __int8 *)v10 + 16);
    uint64_t v12 = (void **)*v10;
    **(void **)*unint64_t v10 = 0;
    v12[1] = 0;
    if (v11 && *((unsigned char *)v10 + 16)) {
      *((unsigned char *)v10 + 16) = 0;
    }
    **a1 = 0;
    unint64_t v13 = *a1;
    int v14 = mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>>(a2, 0, (uint64_t ***)a1[1]);
    uint64_t v15 = *(void *)(*(void *)(a2 + 72) + 56);
    if (*v13)
    {
      BOOL v16 = *v13 == v15;
    }
    else
    {
      *unint64_t v13 = v15;
      BOOL v16 = 1;
    }
    if ((v14 & v16) != 1) {
      return 0;
    }
  }
  if (!*((unsigned char *)a1 + 24)) {
    *((unsigned char *)a1 + 24) = 1;
  }
  a1[2] = (uint64_t *)a2;
  return 1;
}

uint64_t mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>>(uint64_t a1, unsigned int a2, uint64_t ***a3)
{
  uint64_t v11 = *(void *)(*(void *)(a1 + 72) + 32 * a2 + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (DefiningOp) {
    return mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>::match(a3, DefiningOp);
  }
  uint64_t v6 = *a3;
  uint64_t v12 = v11;
  uint64_t v7 = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (v7)
  {
    if (*(_UNKNOWN **)(*(void *)(v7 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReciprocalSquareRootOp,void>::id
      || (*(unsigned char *)(v7 + 46) & 0x80) == 0
      || *(_DWORD *)(v7 + 68) != 1)
    {
      goto LABEL_9;
    }
    uint64_t v9 = *(void *)(*(void *)(v7 + 72) + 24);
    uint64_t v10 = **v6;
    if (v10)
    {
      if (v10 != v9)
      {
LABEL_9:
        char v8 = 0;
        return (v7 != 0) & v8;
      }
    }
    else
    {
      **uint64_t v6 = v9;
    }
    v6[1] = (uint64_t *)v7;
    char v8 = 1;
  }
  return (v7 != 0) & v8;
}

uint64_t mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>::match(uint64_t ***a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(*(void *)(a2 + 48) + 16);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
  {
    if (v4 == &mlir::detail::TypeIDResolver<mlir::mps::ReciprocalSquareRootOp,void>::id
      && (*(unsigned char *)(a2 + 46) & 0x80) != 0
      && *(_DWORD *)(a2 + 68) == 1)
    {
      uint64_t v5 = *a1;
      uint64_t v6 = **a1;
      uint64_t v7 = *(void *)(*(void *)(a2 + 72) + 24);
      if (!*v6)
      {
        *uint64_t v6 = v7;
LABEL_19:
        v5[1] = (uint64_t *)a2;
        return 1;
      }
      if (*v6 == v7) {
        goto LABEL_19;
      }
    }
    return 0;
  }
  if ((*(unsigned char *)(a2 + 46) & 0x80) == 0 || *(_DWORD *)(a2 + 68) != 1) {
    return 0;
  }
  char v8 = *a1;
  uint64_t v12 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!result) {
    return result;
  }
  if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReciprocalSquareRootOp,void>::id
    || (*(unsigned char *)(result + 46) & 0x80) == 0
    || *(_DWORD *)(result + 68) != 1)
  {
    return 0;
  }
  uint64_t v10 = *(void *)(*(void *)(result + 72) + 24);
  uint64_t v11 = **v8;
  if (v11)
  {
    if (v11 != v10) {
      return 0;
    }
  }
  else
  {
    *void *v8 = v10;
  }
  v8[1] = (uint64_t *)result;
  if (!*((unsigned char *)a1 + 16)) {
    *((unsigned char *)a1 + 16) = 1;
  }
  a1[1] = (uint64_t **)a2;
  return 1;
}

BOOL mlir::mps::anonymous namespace'::FuseRMS<mlir::mps::MultiplyOp>::matchAndRewrite(mlir::mps::MultiplyOp,mlir::PatternRewriter &)::{lambda(mlir::Value,mlir::Value,mlir::mps::CastOp)#1}::operator() const(mlir::Value,mlir::Value,mlir::mps::CastOp)::{lambda(mlir::mps::CastOp,mlir::mps::CastOp)#1}::operator()(BOOL result, uint64_t a2)
{
  uint64_t v22 = a2;
  BOOL v23 = result;
  if (result)
  {
    uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v23);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(Input);
    uint64_t v21 = ElementTypeOrSelf;
    uint64_t v4 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v22);
    if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(v4)) {
      return 0;
    }
    uint64_t Type = mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&v23);
    uint64_t v20 = Type;
    uint64_t v6 = *(void **)(*(void *)ElementTypeOrSelf + 136);
    BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
    BOOL v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
    BOOL v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
    BOOL v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
    BOOL v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
    BOOL v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
    BOOL v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
    BOOL v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
    BOOL v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
    BOOL v16 = v15 || v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
    BOOL v17 = v16 || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
    if (v17
      && ((unsigned int v18 = *(void **)(*(void *)Type + 136), v18 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id))
    {
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v21);
      return IntOrFloatBitWidth < mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v20);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::any_value_binder>>::match(uint64_t ****a1, uint64_t a2)
{
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::AddOp,void>::id) {
    return 0;
  }
  uint64_t v6 = *a1;
  uint64_t v5 = (uint64_t **)a1[1];
  uint64_t v21 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v21);
  int v8 = DefiningOp
     ? mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>::match(v6, DefiningOp): mlir::detail::matchValue<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>(v21, (uint64_t)*v6);
  int v9 = v8;
  BOOL v10 = mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::any_value_binder>>(a2, 1u, v5);
  if (!v9 || !v10)
  {
    BOOL v11 = a1[1];
    int v12 = *((unsigned __int8 *)v11 + 16);
    **BOOL v11 = 0;
    if (v12) {
      *((unsigned char *)v11 + 16) = 0;
    }
    BOOL v13 = *a1;
    BOOL v14 = **a1;
    BOOL v15 = *v14;
    uint64_t v16 = **v14;
    if (*((unsigned char *)*a1 + 16))
    {
      if (*(unsigned char *)(v16 + 16)) {
        *(unsigned char *)(v16 + 16) = 0;
      }
      v15[1] = 0;
      *v14[1] = 0;
      v14[2] = 0;
      if (*((unsigned char *)v13 + 16)) {
        *((unsigned char *)v13 + 16) = 0;
      }
    }
    else
    {
      if (*(unsigned char *)(v16 + 16)) {
        *(unsigned char *)(v16 + 16) = 0;
      }
      v15[1] = 0;
      *v14[1] = 0;
      v14[2] = 0;
    }
    BOOL v17 = *a1;
    BOOL v18 = mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::any_value_binder>>(a2, 0, (uint64_t **)a1[1]);
    uint64_t v21 = *(void *)(*(void *)(a2 + 72) + 56);
    uint64_t v19 = mlir::Value::getDefiningOp((mlir::Value *)&v21);
    int v20 = v19
        ? mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>::match(v17, v19): mlir::detail::matchValue<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>(v21, (uint64_t)*v17);
    if ((v18 & v20) != 1) {
      return 0;
    }
  }
  if (!*((unsigned char *)a1 + 24)) {
    *((unsigned char *)a1 + 24) = 1;
  }
  a1[2] = (uint64_t ***)a2;
  return 1;
}

uint64_t mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>::match(uint64_t ***a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(*(void *)(a2 + 48) + 16);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0 && *(_DWORD *)(a2 + 68) == 1)
    {
      int v11 = mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>(a2, 0, (uint64_t)*a1);
      uint64_t result = 0;
      if (!v11) {
        return result;
      }
      if (!*((unsigned char *)a1 + 16)) {
        *((unsigned char *)a1 + 16) = 1;
      }
      a1[1] = (uint64_t **)a2;
      return 1;
    }
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMeanOp,void>::id {
         && (*(unsigned char *)(a2 + 46) & 0x80) != 0
  }
         && *(_DWORD *)(a2 + 68) == 2)
  {
    uint64_t v5 = (uint64_t)*a1;
    uint64_t v6 = **a1;
    uint64_t v13 = *(void *)(*(void *)(a2 + 72) + 24);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
    if (DefiningOp) {
      LODWORD(DefiningOp) = mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>::match(v6, DefiningOp);
    }
    int v8 = *(void **)(v5 + 8);
    uint64_t v9 = *(void *)(*(void *)(a2 + 72) + 56);
    if (*v8)
    {
      BOOL v10 = *v8 == v9;
    }
    else
    {
      void *v8 = v9;
      BOOL v10 = 1;
    }
    if ((DefiningOp & v10) == 1)
    {
      *(void *)(v5 + 16) = a2;
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>::match(uint64_t *a1, uint64_t a2)
{
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::SquareOp,void>::id
    && (*(unsigned char *)(a2 + 46) & 0x80) != 0
    && *(_DWORD *)(a2 + 68) == 1)
  {
    uint64_t v4 = *a1;
    uint64_t v7 = *(void *)(*(void *)(a2 + 72) + 24);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v7);
    if (DefiningOp)
    {
      if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
      {
        if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0
          && *(_DWORD *)(DefiningOp + 68) == 1
          && **(void **)v4 == *(void *)(*(void *)(DefiningOp + 72) + 24))
        {
          if (!*(unsigned char *)(v4 + 16)) {
            *(unsigned char *)(v4 + 16) = 1;
          }
          *(void *)(v4 + 8) = DefiningOp;
          goto LABEL_19;
        }
      }
      else if (*(_DWORD *)(DefiningOp + 36) && **(void **)v4 == DefiningOp - 16)
      {
        goto LABEL_19;
      }
    }
    else if (**(void **)v4 == v7)
    {
LABEL_19:
      a1[1] = a2;
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 32 * a2 + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
  uint64_t v6 = DefiningOp;
  if (DefiningOp)
  {
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReductionMeanOp,void>::id
      || (*(unsigned char *)(DefiningOp + 46) & 0x80) == 0
      || *(_DWORD *)(DefiningOp + 68) != 2)
    {
      goto LABEL_13;
    }
    uint64_t v7 = *(uint64_t **)a3;
    uint64_t v13 = *(void *)(*(void *)(DefiningOp + 72) + 24);
    uint64_t v8 = mlir::Value::getDefiningOp((mlir::Value *)&v13);
    if (v8) {
      LODWORD(v8) = mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>::match(v7, v8);
    }
    uint64_t v9 = *(void **)(a3 + 8);
    uint64_t v10 = *(void *)(*(void *)(v6 + 72) + 56);
    if (*v9)
    {
      BOOL v11 = *v9 == v10;
    }
    else
    {
      *uint64_t v9 = v10;
      BOOL v11 = 1;
    }
    int v5 = v8 & v11;
    if (v5 == 1) {
      *(void *)(a3 + 16) = v6;
    }
    else {
LABEL_13:
    }
      LOBYTE(v5) = 0;
  }
  return (v6 != 0) & v5;
}

uint64_t mlir::detail::matchValue<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  uint64_t v5 = DefiningOp;
  if (DefiningOp)
  {
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReductionMeanOp,void>::id
      || (*(unsigned char *)(DefiningOp + 46) & 0x80) == 0
      || *(_DWORD *)(DefiningOp + 68) != 2)
    {
      goto LABEL_13;
    }
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v13 = *(void *)(*(void *)(DefiningOp + 72) + 24);
    uint64_t v7 = mlir::Value::getDefiningOp((mlir::Value *)&v13);
    if (v7) {
      LODWORD(v7) = mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>::match(v6, v7);
    }
    uint64_t v8 = *(void **)(a2 + 8);
    uint64_t v9 = *(void *)(*(void *)(v5 + 72) + 56);
    if (*v8)
    {
      BOOL v10 = *v8 == v9;
    }
    else
    {
      void *v8 = v9;
      BOOL v10 = 1;
    }
    int v4 = v7 & v10;
    if (v4 == 1) {
      *(void *)(a2 + 16) = v5;
    }
    else {
LABEL_13:
    }
      LOBYTE(v4) = 0;
  }
  return (v5 != 0) & v4;
}

BOOL mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::any_value_binder>>(uint64_t a1, unsigned int a2, uint64_t **a3)
{
  uint64_t v11 = *(void *)(*(void *)(a1 + 72) + 32 * a2 + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (!DefiningOp)
  {
    uint64_t v8 = **a3;
    if (v8) {
      return v8 == v11;
    }
    **a3 = v11;
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
  {
    if (*(_DWORD *)(DefiningOp + 36))
    {
      uint64_t v5 = DefiningOp - 16;
      uint64_t v6 = **a3;
      if (v6) {
        return v6 == v5;
      }
      **a3 = v5;
      return 1;
    }
    return 0;
  }
  if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0 || *(_DWORD *)(DefiningOp + 68) != 1) {
    return 0;
  }
  uint64_t v9 = *(void *)(*(void *)(DefiningOp + 72) + 24);
  uint64_t v10 = **a3;
  if (v10)
  {
    if (v10 != v9) {
      return 0;
    }
  }
  else
  {
    **a3 = v9;
  }
  if (!*((unsigned char *)a3 + 16)) {
    *((unsigned char *)a3 + 16) = 1;
  }
  a3[1] = (uint64_t *)DefiningOp;
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::RMSNormOp,mlir::Value &,mlir::Value &,mlir::Value &>(mlir::Float32Type **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.rms_norm", (const unsigned __int8 *)0xD, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    unint64_t v19[2] = (uint64_t)"mpsx.rms_norm";
    v19[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::mpsx::RMSNormOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  uint64_t v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::RMSNormOp,void>::id) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void *mlir::mps::anonymous namespace'::FuseRMS<mlir::mps::DivideOp>::~FuseRMS(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::FuseRMS<mlir::mps::DivideOp>::~FuseRMS(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

BOOL mlir::mps::anonymous namespace'::FuseRMS<mlir::mps::DivideOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::UnknownLoc **a3)
{
  v47[1] = 0;
  uint64_t v48 = 0;
  v47[0] = &v48;
  uint64_t v44 = (uint64_t **)v47;
  LOBYTE(v45) = 0;
  char v46 = 0;
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DivideOp,void>::id) {
    return 0;
  }
  if ((*(unsigned char *)(a2 + 46) & 0x80) == 0) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 68) != 2) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)(a2 + 72) + 24);
  if (!mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareRootOp,mlir::detail::any_value_binder>>>(a2, 1u, &v44))return 0; {
  uint64_t v6 = v46 ? v45 : 0;
  }
  uint64_t v67 = v5;
  uint64_t v63 = 0;
  uint64_t v64 = &v67;
  LOBYTE(v65) = 0;
  char v66 = 0;
  uint64_t v59 = 0;
  Axes = &v63;
  LOBYTE(v61) = 0;
  char v62 = 0;
  v58[0] = &v64;
  v58[1] = 0;
  v56[0] = v58;
  v56[1] = &v59;
  uint64_t v57 = 0;
  uint64_t v53 = v56;
  LOBYTE(v54) = 0;
  char v55 = 0;
  uint64_t v49 = (uint64_t ***)&v53;
  char v50 = &Axes;
  char v51 = 0;
  char v52 = 0;
  uint64_t v40 = v48;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v40);
  if (!DefiningOp
    || (mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::any_value_binder>>::match(&v49, DefiningOp) & 1) == 0)
  {
    return 0;
  }
  if (v6)
  {
    uint64_t v8 = v66 ? v65 : 0;
  }
  if (v55)
  {
    uint64_t v9 = v66 ? v65 : 0;
  }
  uint64_t v40 = v5;
  uint64_t v41 = v63;
  uint64_t v42 = v57;
  char v43 = 1;
  BOOL result = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v42);
  if (!result) {
    return result;
  }
  uint64_t v11 = (uint64_t ***)(*(void *)(v40 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v11) {
    goto LABEL_30;
  }
  char v12 = *v11;
  unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v14 = *((unsigned int *)v12 + 4);
  if (!v14) {
    goto LABEL_30;
  }
  BOOL v15 = v12[1];
  uint64_t v16 = &v15[2 * v14];
  do
  {
    unint64_t v17 = v14 >> 1;
    __int16 v18 = (unint64_t *)&v15[2 * (v14 >> 1)];
    unint64_t v20 = *v18;
    uint64_t v19 = (uint64_t *)(v18 + 2);
    v14 += ~(v14 >> 1);
    if (v20 < v13) {
      BOOL v15 = v19;
    }
    else {
      unint64_t v14 = v17;
    }
  }
  while (v14);
  if (v15 != v16 && *v15 == v13) {
    uint64_t v21 = (uint64_t **)v15[1];
  }
  else {
LABEL_30:
  }
    uint64_t v21 = 0;
  uint64_t v49 = v11;
  char v50 = v21;
  uint64_t v22 = v41;
  uint64_t v53 = (void *)v41;
  BOOL v23 = (uint64_t *)(*(void *)(v41 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v23) {
    goto LABEL_40;
  }
  uint64_t v24 = *v23;
  unint64_t v25 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v26 = *(unsigned int *)(v24 + 16);
  if (!v26) {
    goto LABEL_40;
  }
  unint64_t v27 = *(void **)(v24 + 8);
  char v28 = &v27[2 * v26];
  do
  {
    unint64_t v29 = v26 >> 1;
    int v30 = &v27[2 * (v26 >> 1)];
    unint64_t v32 = *v30;
    uint64_t v31 = v30 + 2;
    v26 += ~(v26 >> 1);
    if (v32 < v25) {
      unint64_t v27 = v31;
    }
    else {
      unint64_t v26 = v29;
    }
  }
  while (v26);
  if (v27 != v28 && *v27 == v25) {
    uint64_t v33 = v27[1];
  }
  else {
LABEL_40:
  }
    uint64_t v33 = 0;
  uint64_t v64 = v23;
  uint64_t v65 = v33;
  Axes = 0;
  uint64_t v61 = 0;
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v64);
  if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v35) != 1)
  {
    uint64_t v44 = &Axes;
    v56[0] = v22;
    uint64_t v39 = mlir::Value::getDefiningOp((mlir::Value *)v56);
    if (!v39
      || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v44, v39)
      || (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Axes) & 1) == 0)
    {
      return 0;
    }
  }
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v49);
  if (OperandRange != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v64))
  {
    uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v53);
    Axes = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v49);
    uint64_t v53 = (void *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v53, (uint64_t *)&Axes)- 16);
  }
  Axes = (uint64_t *)mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v42);
  uint64_t v38 = mlir::OpBuilder::create<mlir::mpsx::RMSNormOp,mlir::Value &,mlir::Value &,mlir::Value &>(a3 + 1, *(void *)(a2 + 24), &v40, (uint64_t *)&v53, (uint64_t *)&Axes);
  (*((void (**)(mlir::UnknownLoc **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v38);
  return 1;
}

uint64_t mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareRootOp,mlir::detail::any_value_binder>>>(uint64_t a1, unsigned int a2, uint64_t ***a3)
{
  uint64_t v11 = *(void *)(*(void *)(a1 + 72) + 32 * a2 + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (DefiningOp) {
    return mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareRootOp,mlir::detail::any_value_binder>>::match(a3, DefiningOp);
  }
  uint64_t v6 = *a3;
  uint64_t v12 = v11;
  uint64_t v7 = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (v7)
  {
    if (*(_UNKNOWN **)(*(void *)(v7 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::SquareRootOp,void>::id
      || (*(unsigned char *)(v7 + 46) & 0x80) == 0
      || *(_DWORD *)(v7 + 68) != 1)
    {
      goto LABEL_9;
    }
    uint64_t v9 = *(void *)(*(void *)(v7 + 72) + 24);
    uint64_t v10 = **v6;
    if (v10)
    {
      if (v10 != v9)
      {
LABEL_9:
        char v8 = 0;
        return (v7 != 0) & v8;
      }
    }
    else
    {
      **uint64_t v6 = v9;
    }
    v6[1] = (uint64_t *)v7;
    char v8 = 1;
  }
  return (v7 != 0) & v8;
}

uint64_t mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareRootOp,mlir::detail::any_value_binder>>::match(uint64_t ***a1, uint64_t a2)
{
  int v4 = *(void **)(*(void *)(a2 + 48) + 16);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
  {
    if (v4 == &mlir::detail::TypeIDResolver<mlir::mps::SquareRootOp,void>::id
      && (*(unsigned char *)(a2 + 46) & 0x80) != 0
      && *(_DWORD *)(a2 + 68) == 1)
    {
      uint64_t v5 = *a1;
      uint64_t v6 = **a1;
      uint64_t v7 = *(void *)(*(void *)(a2 + 72) + 24);
      if (!*v6)
      {
        *uint64_t v6 = v7;
LABEL_19:
        v5[1] = (uint64_t *)a2;
        return 1;
      }
      if (*v6 == v7) {
        goto LABEL_19;
      }
    }
    return 0;
  }
  if ((*(unsigned char *)(a2 + 46) & 0x80) == 0 || *(_DWORD *)(a2 + 68) != 1) {
    return 0;
  }
  char v8 = *a1;
  uint64_t v12 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!result) {
    return result;
  }
  if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::SquareRootOp,void>::id
    || (*(unsigned char *)(result + 46) & 0x80) == 0
    || *(_DWORD *)(result + 68) != 1)
  {
    return 0;
  }
  uint64_t v10 = *(void *)(*(void *)(result + 72) + 24);
  uint64_t v11 = **v8;
  if (v11)
  {
    if (v11 != v10) {
      return 0;
    }
  }
  else
  {
    *void *v8 = v10;
  }
  v8[1] = (uint64_t *)result;
  if (!*((unsigned char *)a1 + 16)) {
    *((unsigned char *)a1 + 16) = 1;
  }
  a1[1] = (uint64_t **)a2;
  return 1;
}

void mlir::mps::anonymous namespace'::CanonicalizeRoPE::~CanonicalizeRoPE(mlir::mps::_anonymous_namespace_::CanonicalizeRoPE *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeRoPE::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  uint64_t v137 = a2;
  uint64_t v136 = 0;
  uint64_t v135 = 0;
  v133[0] = &v136;
  v133[1] = &v135;
  unint64_t v134 = 0;
  uint64_t v132 = 0;
  v130[0] = v133;
  v130[1] = v133;
  v130[2] = &v132;
  v131 = 0;
  uint64_t v129 = 0;
  v128[0] = v130;
  v128[1] = &v129;
  v128[2] = 0;
  v127 = 0;
  v126[0] = &v127;
  v126[1] = &v135;
  v126[2] = 0;
  v125[0] = v126;
  v125[1] = v126;
  v125[2] = &v132;
  v125[3] = 0;
  v124[0] = v125;
  v124[1] = &v129;
  v124[2] = 0;
  uint64_t v123 = 0;
  uint64_t v122 = 0;
  v120[0] = &v123;
  v120[1] = &v122;
  v121 = 0;
  uint64_t v119 = 0;
  uint64_t v118 = 0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  v114 = 0;
  uint64_t v115 = 0;
  v113[0] = v120;
  v113[1] = &v119;
  v113[2] = &v118;
  v113[3] = &v117;
  v111[0] = v120;
  v111[1] = &v116;
  v111[2] = &v115;
  v111[3] = &v117;
  uint64_t v112 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  v108[0] = v111;
  v108[1] = &v110;
  v106[2] = 0;
  uint64_t v107 = 0;
  v106[0] = v108;
  v106[1] = &v107;
  v104[2] = 0;
  uint64_t v105 = 0;
  v104[0] = v106;
  v104[1] = &v105;
  v103[0] = v104;
  v103[1] = v113;
  v103[2] = &v132;
  v103[3] = 0;
  v101[2] = 0;
  uint64_t v102 = 0;
  v101[0] = v103;
  v101[1] = &v102;
  v100[0] = v101;
  v100[1] = v128;
  v100[2] = 0;
  v99[0] = &v123;
  v99[1] = v124;
  v99[2] = 0;
  v96.i64[0] = (uint64_t)v99;
  v96.i64[1] = (uint64_t)v100;
  char v97 = 0;
  char v98 = 0;
  int v4 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v137) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  char v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    uint64_t v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      char v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v95[0] = v4;
  v95[1] = v14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v95)) {
    return 0;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v95);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v95);
  uint64_t v15 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v137);
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (!mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>>::match(&v96, v137))
  {
    v165 = "failed: RoPE pattern did not match";
    v167[8] = 259;
    uint64_t v53 = v137;
    unint64_t v162 = (void **)&v165;
    uint64_t v54 = *(void *)(a3 + 16);
    if (v54 && mlir::RewriterBase::Listener::classof(v54)) {
      return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void ***))(*(void *)v54 + 64))(v54, *(void *)(v53 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AddOp &>(mlir::mps::AddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v162);
    }
    return 0;
  }
  v165 = (char *)v167;
  uint64_t v166 = 0x600000000;
  uint64_t v16 = (uint64_t *)(*(void *)(v136 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16) {
    goto LABEL_22;
  }
  uint64_t v17 = *v16;
  unint64_t v18 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v19 = *(unsigned int *)(v17 + 16);
  if (!v19) {
    goto LABEL_22;
  }
  unint64_t v20 = *(void **)(v17 + 8);
  uint64_t v21 = &v20[2 * v19];
  do
  {
    unint64_t v22 = v19 >> 1;
    BOOL v23 = &v20[2 * (v19 >> 1)];
    unint64_t v25 = *v23;
    uint64_t v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18) {
      unint64_t v20 = v24;
    }
    else {
      unint64_t v19 = v22;
    }
  }
  while (v19);
  if (v20 != v21 && *v20 == v18) {
    uint64_t v26 = v20[1];
  }
  else {
LABEL_22:
  }
    uint64_t v26 = 0;
  v93[0] = v16;
  v93[1] = v26;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v93))
  {
    if (mlir::matchConstantWithIntVector<long long>(v135, (uint64_t)&v165))
    {
      uint64_t v27 = v166;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v93);
      if (v28 + 1 == v27 && *(void *)&v165[8 * v166 - 8] == 1)
      {
        unint64_t matched = mlir::matchConstantWithIntValue<long long>(v132);
        if (v30)
        {
          unint64_t v31 = matched;
          uint64_t v159 = v134;
          unint64_t v162 = (void **)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v159) + 8) & 0xFFFFFFFFFFFFFFF8);
          v92[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v162);
          v92[1] = v32;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v92))
          {
            if (v31 == -1
              || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v92), v31 == v33 - 1))
            {
              uint64_t v159 = v131;
              unint64_t v162 = (void **)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v159) + 8) & 0xFFFFFFFFFFFFFFF8);
              v91[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v162);
              v91[1] = v34;
              if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v91))
              {
                uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v91);
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v91);
                uint64_t v37 = v36;
                unint64_t v162 = (void **)v164;
                uint64_t v163 = 0x600000000;
                if (!mlir::matchConstantWithIntVector<long long>(v129, (uint64_t)&v162)
                  || (uint64_t v38 = v163,
                      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v91),
                      v39 - 1 != v38)
                  || v162[v38 - 1] != (void *)(*(void *)(ArgAttrsAttr + 8 * v37 - 16)
                                             * *(void *)(ArgAttrsAttr + 8 * v37 - 8))
                  || (uint64_t v159 = (void *)(*(void *)(v123 + 8) & 0xFFFFFFFFFFFFFFF8),
                      v90[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v159),
                      v90[1] = v40,
                      !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v90)))
                {
                  uint64_t v45 = 0;
LABEL_64:
                  if (v162 != (void **)v164) {
                    free(v162);
                  }
                  goto LABEL_59;
                }
                uint64_t v41 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
                uint64_t v43 = v42;
                uint64_t v159 = v161;
                uint64_t v160 = 0x600000000;
                if (mlir::matchConstantWithIntVector<long long>(v122, (uint64_t)&v159)
                  && v43 + 1 == v160
                  && *((void *)v159 + v160 - 2) * *((void *)v159 + v160 - 1) == *(void *)(v41 + 8 * v43 - 8))
                {
                  unint64_t v44 = mlir::matchConstantWithFloatValue<float>(v107);
                  uint64_t v45 = 0;
                  if ((v44 & 0xFF00000000) != 0 && *(float *)&v44 == -1.0)
                  {
                    v156 = v158;
                    uint64_t v157 = 0x600000000;
                    unint64_t v153 = v155;
                    uint64_t v154 = 0x600000000;
                    v150 = v152;
                    uint64_t v151 = 0x600000000;
                    uint64_t v147 = v149;
                    uint64_t v148 = 0x600000000;
                    uint64_t v144 = v146;
                    uint64_t v145 = 0x600000000;
                    if (!mlir::matchConstantWithIntVector<long long>(v119, (uint64_t)&v156)) {
                      goto LABEL_122;
                    }
                    if (!mlir::matchConstantWithIntVector<long long>(v118, (uint64_t)&v153)) {
                      goto LABEL_122;
                    }
                    if (!mlir::matchConstantWithIntVector<long long>(v116, (uint64_t)&v150)) {
                      goto LABEL_122;
                    }
                    if (!mlir::matchConstantWithIntVector<long long>(v115, (uint64_t)&v147)) {
                      goto LABEL_122;
                    }
                    if (!mlir::matchConstantWithIntVector<long long>(v117, (uint64_t)&v144)) {
                      goto LABEL_122;
                    }
                    v138 = v121;
                    uint64_t v141 = (void *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v138) + 8) & 0xFFFFFFFFFFFFFFF8);
                    v89[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v141);
                    v89[1] = v46;
                    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89)) {
                      goto LABEL_122;
                    }
                    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
                    uint64_t v47 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
                    uint64_t v48 = v157;
                    if (v157)
                    {
                      uint64_t v49 = v156;
                      do
                      {
                        if (*v49++) {
                          goto LABEL_122;
                        }
                      }
                      while (--v48);
                    }
                    uint64_t v141 = v114;
                    unsigned int Offset = mlir::mps::ReadDataFromFileOp::getOffset((mlir::mps::ReadDataFromFileOp *)&v141);
                    if (v154 != 1)
                    {
                      uint64_t v52 = 0;
                      do
                      {
                        if (((Offset >> v52) & 1) == 0)
                        {
                          uint64_t v56 = *(void *)(v47 + 8 * v52);
                          if (v56 == 0x8000000000000000 || v56 != *((void *)v153 + v52)) {
                            goto LABEL_122;
                          }
                        }
                      }
                      while (v154 - 1 != ++v52);
                    }
                    if (*((void *)v153 + v154 - 1) != 1) {
                      goto LABEL_122;
                    }
                    uint64_t v58 = v151 - 1;
                    if (v151 != 1)
                    {
                      uint64_t v59 = v150;
                      do
                      {
                        if (*v59++) {
                          goto LABEL_122;
                        }
                      }
                      while (--v58);
                    }
                    if (*((void *)v150 + v151 - 1) != 1) {
                      goto LABEL_122;
                    }
                    uint64_t v141 = v112;
                    unsigned int v61 = mlir::mps::ReadDataFromFileOp::getOffset((mlir::mps::ReadDataFromFileOp *)&v141);
                    if (v148 != 1)
                    {
                      uint64_t v62 = 0;
                      do
                      {
                        if (((v61 >> v62) & 1) == 0)
                        {
                          uint64_t v63 = *(void *)(v47 + 8 * v62);
                          if (v63 == 0x8000000000000000 || v63 != *((void *)v147 + v62)) {
                            goto LABEL_122;
                          }
                        }
                      }
                      while (v148 - 1 != ++v62);
                    }
                    if (*((void *)v147 + v148 - 1) != 2)
                    {
LABEL_122:
                      uint64_t v45 = 0;
LABEL_123:
                      if (v144 != v146) {
                        free(v144);
                      }
                      if (v147 != v149) {
                        free(v147);
                      }
                      if (v150 != v152) {
                        free(v150);
                      }
                      if (v153 != v155) {
                        free(v153);
                      }
                      if (v156 != v158) {
                        free(v156);
                      }
                      goto LABEL_67;
                    }
                    if (v145)
                    {
                      uint64_t v65 = v144;
                      uint64_t v66 = 8 * v145;
                      while (*v65 == 1)
                      {
                        ++v65;
                        v66 -= 8;
                        if (!v66) {
                          goto LABEL_96;
                        }
                      }
                      goto LABEL_122;
                    }
LABEL_96:
                    uint64_t v141 = v143;
                    uint64_t v142 = 0x600000000;
                    v138 = v140;
                    uint64_t v139 = 0x600000000;
                    if (mlir::matchConstantWithIntVector<long long>(v110, (uint64_t)&v141))
                    {
                      if (mlir::matchConstantWithIntVector<long long>(v105, (uint64_t)&v138))
                      {
                        uint64_t v86 = v109;
                        uint64_t v87 = (uint64_t *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v86) + 8) & 0xFFFFFFFFFFFFFFF8);
                        v88[0] = mlir::Type::cast<mlir::ShapedType>(&v87);
                        v88[1] = v67;
                        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v88))
                        {
                          uint64_t v68 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
                          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
                          if (v69 == v142 && v69 + 1 == v139)
                          {
                            if (v69 < 1)
                            {
LABEL_120:
                              if (*((void *)v138 + v69) == 1)
                              {
                                uint64_t v82 = *(void *)(v137 + 24);
                                v85 = (mlir::GenericProgramPoint *)v136;
                                uint64_t v86 = v127;
                                uint64_t v87 = (uint64_t *)mlir::OpBuilder::create<mlir::mps::CreateComplexOp,mlir::Value,mlir::Value>((mlir::Float32Type **)(a3 + 8), v82, (uint64_t *)&v86, (uint64_t *)&v85);
                                uint64_t v83 = *(void *)(v137 + 24);
                                v85 = (mlir::GenericProgramPoint *)v123;
                                uint64_t v84 = mlir::ComplexType::get(ElementTypeOrSelf);
                                uint64_t v86 = mlir::OpBuilder::create<mlir::mps::ReinterpretCastOp,mlir::Value,mlir::ComplexType>((mlir::UnknownLoc **)(a3 + 8), v83, (uint64_t *)&v85, &v84);
                                v85 = mlir::OpBuilder::create<mlir::mps::MultiplyOp,mlir::mps::ConstantOp,mlir::mps::CastOp &>((mlir::Float32Type **)(a3 + 8), *(void *)(v137 + 24), &v87, &v86);
                                mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::ReinterpretCastOp,mlir::mps::MultiplyOp &,mlir::Type &>((mlir::UnknownLoc **)a3, v137, &v85, &ElementTypeOrSelf);
                                uint64_t v45 = 1;
LABEL_134:
                                if (v138 != v140) {
                                  free(v138);
                                }
                                if (v141 != v143) {
                                  free(v141);
                                }
                                goto LABEL_123;
                              }
                            }
                            else
                            {
                              uint64_t v70 = (uint64_t *)v141;
                              uint64_t v71 = v69;
                              uint64_t v72 = (uint64_t *)v138;
                              while (1)
                              {
                                uint64_t v74 = *v68++;
                                uint64_t v73 = v74;
                                uint64_t v76 = *v70++;
                                uint64_t v75 = v76;
                                BOOL v77 = v73 == 0x8000000000000000 || v75 == -1;
                                if (!v77 && v73 != v75) {
                                  break;
                                }
                                uint64_t v79 = *v72;
                                BOOL v80 = v73 == 0x8000000000000000 || v79 == -1;
                                if (!v80 && v73 != v79) {
                                  break;
                                }
                                ++v72;
                                if (!--v71) {
                                  goto LABEL_120;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    uint64_t v45 = 0;
                    goto LABEL_134;
                  }
                }
                else
                {
                  uint64_t v45 = 0;
                }
LABEL_67:
                if (v159 != v161) {
                  free(v159);
                }
                goto LABEL_64;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v45 = 0;
LABEL_59:
  if (v165 != (char *)v167) {
    free(v165);
  }
  return v45;
}

unint64_t mlir::matchConstantWithFloatValue<float>(uint64_t a1)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v8 = (uint64_t **)&v9;
  uint64_t v11 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v8, DefiningOp))
  {
    uint64_t SingleFloat = mlir::getSingleFloatValue<float>(v9, v10);
    unint64_t v3 = SingleFloat & 0xFFFFFF0000000000;
    uint64_t v4 = SingleFloat & 0xFF00000000;
    uint64_t v5 = SingleFloat & 0xFFFFFF00;
    uint64_t v6 = SingleFloat;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  return v3 | v5 | v4 | v6;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::CreateComplexOp,mlir::Value,mlir::Value>(mlir::Float32Type **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.create_complex", (const unsigned __int8 *)0x12, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"mps.create_complex";
    v17[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::CreateComplexOp::build(a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::CreateComplexOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReinterpretCastOp,mlir::Value,mlir::ComplexType>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reinterpret_cast", (const unsigned __int8 *)0x14, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"mps.reinterpret_cast";
    v17[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::ReinterpretCastOp::build(a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReinterpretCastOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::ReinterpretCastOp,mlir::mps::MultiplyOp &,mlir::Type &>(mlir::UnknownLoc **a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v6 = mlir::OpBuilder::create<mlir::mps::ReinterpretCastOp,mlir::mps::MultiplyOp &,mlir::Type &>(a1 + 1, *(void *)(a2 + 24), a3, a4);
  (*((void (**)(mlir::UnknownLoc **, uint64_t, mlir::GenericProgramPoint *))*a1 + 4))(a1, a2, v6);
  return v6;
}

BOOL mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>>::match(int8x16_t *a1, uint64_t a2)
{
  uint64_t v29 = a2;
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::AddOp,void>::id) {
    return 0;
  }
  int v4 = 1;
  unsigned __int8 v28 = 1;
  int8x16_t v27 = *a1;
  v26.i64[0] = (uint64_t)&v28;
  v26.i64[1] = (uint64_t)&v29;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> & *)#1},0ul,1ul>(v27.i64, (uint64_t)&v26);
  if (v28) {
    goto LABEL_5;
  }
  unsigned __int8 v28 = 1;
  uint64_t v5 = a1->i64[1];
  uint64_t v6 = *(uint64_t ******)v5;
  unint64_t v7 = **(uint64_t ******)v5;
  char v8 = *v7;
  uint64_t v9 = **v7;
  char v10 = *v9;
  uint64_t v11 = **v9;
  uint64_t v12 = *(void ***)v11;
  ***(void ***)uint64_t v11 = 0;
  *v12[1] = 0;
  v12[2] = 0;
  **(void **)(v11 + 8) = 0;
  **(void **)(v11 + 16) = 0;
  **(void **)(v11 + 24) = 0;
  *(void *)(v11 + 32) = 0;
  *(void *)v10[1] = 0;
  v10[2] = 0;
  *v9[1] = 0;
  v9[2] = 0;
  *v8[1] = 0;
  v8[2] = 0;
  unint64_t v13 = v7[1];
  uint64_t v14 = *v13;
  ***unint64_t v13 = 0;
  *v14[1] = 0;
  v14[2] = 0;
  *v13[1] = 0;
  *v13[2] = 0;
  *v13[3] = 0;
  v13[4] = 0;
  *v7[2] = 0;
  v7[3] = 0;
  *v6[1] = 0;
  v6[2] = 0;
  uint64_t v15 = *(uint64_t ***)(v5 + 8);
  __int16 v16 = *v15;
  uint64_t v17 = **v15;
  **(void **)uint64_t v17 = 0;
  **(void **)(v17 + 8) = 0;
  *(void *)(v17 + 16) = 0;
  uint64_t v18 = v16[1];
  **(void **)uint64_t v18 = 0;
  **(void **)(v18 + 8) = 0;
  *(void *)(v18 + 16) = 0;
  *(void *)v16[2] = 0;
  v16[3] = 0;
  *v15[1] = 0;
  v15[2] = 0;
  *(void *)(v5 + 16) = 0;
  uint64_t v19 = a1->i64[0];
  **(void **)a1->i64[0] = 0;
  unint64_t v20 = *(uint64_t ***)(v19 + 8);
  uint64_t v21 = *v20;
  uint64_t v22 = **v20;
  **(void **)uint64_t v22 = 0;
  **(void **)(v22 + 8) = 0;
  *(void *)(v22 + 16) = 0;
  uint64_t v23 = v21[1];
  **(void **)uint64_t v23 = 0;
  **(void **)(v23 + 8) = 0;
  *(void *)(v23 + 16) = 0;
  *(void *)unint64_t v21[2] = 0;
  v21[3] = 0;
  *v20[1] = 0;
  void v20[2] = 0;
  *(void *)(v19 + 16) = 0;
  int8x16_t v26 = vextq_s8(*a1, *a1, 8uLL);
  v25[0] = &v28;
  v25[1] = &v29;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> & *)#2},0ul,1ul>(v26.i64, (uint64_t)v25);
  int v4 = v28;
  if (v28)
  {
LABEL_5:
    uint64_t v24 = v29;
    if (!a1[1].i8[8]) {
      a1[1].i8[8] = 1;
    }
    a1[1].i64[0] = v24;
  }
  return v4 != 0;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> & *)#1},0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  __int16 v16 = *(unsigned __int8 **)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v16);
  uint64_t v7 = DefiningOp;
  if (DefiningOp)
  {
    uint64_t v19 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MultiplyOp,void>::id
      && (*(unsigned char *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 2)
    {
      unsigned __int8 v18 = 1;
      __int16 v16 = &v18;
      uint64_t v17 = &v19;
      mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> & *)#1},0ul,1ul>((uint64_t **)v4, (uint64_t)&v16);
      int v8 = v18;
      if (v18) {
        *(void *)(v4 + 16) = v19;
      }
      BOOL v6 = v8 != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  BOOL v9 = v6 && **(unsigned char **)a2 != 0;
  if (!v7) {
    BOOL v9 = 0;
  }
  **(unsigned char **)a2 = v9;
  uint64_t v10 = a1[1];
  __int16 v16 = *(unsigned __int8 **)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v16);
  uint64_t v13 = result;
  if (result)
  {
    uint64_t v19 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MultiplyOp,void>::id
      && (*(unsigned char *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      unsigned __int8 v18 = 1;
      __int16 v16 = &v18;
      uint64_t v17 = &v19;
      uint64_t result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> & *)#1},0ul,1ul>((uint64_t **)v10, (uint64_t)&v16);
      int v14 = v18;
      if (v18) {
        *(void *)(v10 + 16) = v19;
      }
      BOOL v12 = v14 != 0;
    }
    else
    {
      BOOL v12 = 0;
    }
  }
  BOOL v15 = v12 && **(unsigned char **)a2 != 0;
  if (!v13) {
    BOOL v15 = 0;
  }
  **(unsigned char **)a2 = v15;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> & *)#1},0ul,1ul>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(**(void **)(a2 + 8) + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = **a1;
  if (v5)
  {
    BOOL v6 = v5 == v4;
  }
  else
  {
    **a1 = v4;
    uint64_t v3 = *(void *)(**(void **)(a2 + 8) + 72);
    BOOL v6 = 1;
  }
  if (!**(unsigned char **)a2) {
    BOOL v6 = 0;
  }
  **(unsigned char **)a2 = v6;
  uint64_t v7 = a1[1];
  v13[0] = *(void *)(v3 + 56);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v13);
  uint64_t v10 = result;
  if (result)
  {
    uint64_t v15 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      && (*(unsigned char *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      unsigned __int8 v14 = 1;
      v13[0] = &v14;
      v13[1] = &v15;
      uint64_t result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(v7, (uint64_t)v13);
      int v11 = v14;
      if (v14) {
        v7[2] = v15;
      }
      BOOL v9 = v11 != 0;
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  BOOL v12 = v9 && **(unsigned char **)a2 != 0;
  if (!v10) {
    BOOL v12 = 0;
  }
  **(unsigned char **)a2 = v12;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  v14[0] = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  uint64_t v7 = result;
  if (result)
  {
    uint64_t v16 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ConcatOp,void>::id
      && (*(unsigned char *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 3)
    {
      unsigned __int8 v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      uint64_t result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul>((uint64_t ***)v4, (uint64_t)v14);
      int v8 = v15;
      if (v15) {
        *(void *)(v4 + 24) = v16;
      }
      BOOL v6 = v8 != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  BOOL v9 = *(BOOL **)a2;
  BOOL v10 = v6 && **(unsigned char **)a2 != 0;
  if (!v7) {
    BOOL v10 = 0;
  }
  *BOOL v9 = v10;
  int v11 = (void *)a1[1];
  uint64_t v12 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  if (*v11)
  {
    BOOL v13 = *v11 == v12;
  }
  else
  {
    *int v11 = v12;
    BOOL v9 = *(BOOL **)a2;
    BOOL v10 = **(unsigned char **)a2 != 0;
    BOOL v13 = 1;
  }
  *BOOL v9 = v13 && v10;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul>(uint64_t ***a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v30 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v30);
  if (DefiningOp)
  {
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      || (*(unsigned char *)(DefiningOp + 46) & 0x80) == 0
      || *(_DWORD *)(DefiningOp + 68) != 2)
    {
      goto LABEL_14;
    }
    uint64_t v7 = *(void *)(DefiningOp + 72);
    uint64_t v8 = *(void *)(v7 + 24);
    uint64_t v9 = **v4;
    if (v9)
    {
      BOOL v10 = v9 == v8;
    }
    else
    {
      uint64_t **v4 = v8;
      uint64_t v7 = *(void *)(DefiningOp + 72);
      BOOL v10 = 1;
    }
    int v11 = v4[1];
    uint64_t v12 = *(void *)(v7 + 56);
    if (*v11)
    {
      BOOL v13 = *v11 == v12;
    }
    else
    {
      *int v11 = v12;
      BOOL v13 = 1;
    }
    int v6 = v10 && v13;
    if (v6 == 1) {
      v4[2] = (uint64_t *)DefiningOp;
    }
    else {
LABEL_14:
    }
      LOBYTE(v6) = 0;
  }
  char v14 = v6 & (**(unsigned char **)a2 != 0);
  if (!DefiningOp) {
    char v14 = 0;
  }
  **(unsigned char **)a2 = v14;
  unsigned __int8 v15 = a1[1];
  uint64_t v30 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v30);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      || (*(unsigned char *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_30;
    }
    uint64_t v18 = *(void *)(result + 72);
    uint64_t v19 = *(void *)(v18 + 24);
    uint64_t v20 = **v15;
    if (v20)
    {
      BOOL v21 = v20 == v19;
    }
    else
    {
      **unsigned __int8 v15 = v19;
      uint64_t v18 = *(void *)(result + 72);
      BOOL v21 = 1;
    }
    uint64_t v22 = v15[1];
    uint64_t v23 = *(void *)(v18 + 56);
    if (*v22)
    {
      BOOL v24 = *v22 == v23;
    }
    else
    {
      *uint64_t v22 = v23;
      BOOL v24 = 1;
    }
    if (v21 && v24)
    {
      v15[2] = (uint64_t *)result;
      char v17 = 1;
    }
    else
    {
LABEL_30:
      char v17 = 0;
    }
  }
  unint64_t v25 = *(unsigned char **)a2;
  char v26 = v17 & (**(unsigned char **)a2 != 0);
  if (!result) {
    char v26 = 0;
  }
  unsigned char *v25 = v26;
  int8x16_t v27 = a1[2];
  unsigned __int8 v28 = *(uint64_t **)(*(void *)(**(void **)(a2 + 8) + 72) + 88);
  if (*v27)
  {
    BOOL v29 = *v27 == v28;
  }
  else
  {
    void *v27 = v28;
    unint64_t v25 = *(unsigned char **)a2;
    char v26 = **(unsigned char **)a2 != 0;
    BOOL v29 = 1;
  }
  unsigned char *v25 = v29 & v26;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> & *)#1},0ul,1ul>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v16 = *(unsigned __int8 **)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v16);
  uint64_t v7 = DefiningOp;
  if (DefiningOp)
  {
    uint64_t v19 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      && (*(unsigned char *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 2)
    {
      unsigned __int8 v18 = 1;
      uint64_t v16 = &v18;
      char v17 = &v19;
      mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(v4, (uint64_t)&v16);
      int v8 = v18;
      if (v18) {
        v4[2] = v19;
      }
      BOOL v6 = v8 != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  BOOL v9 = v6 && **(unsigned char **)a2 != 0;
  if (!v7) {
    BOOL v9 = 0;
  }
  **(unsigned char **)a2 = v9;
  BOOL v10 = a1[1];
  uint64_t v16 = *(unsigned __int8 **)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v16);
  uint64_t v13 = result;
  if (result)
  {
    uint64_t v19 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      && (*(unsigned char *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      unsigned __int8 v18 = 1;
      uint64_t v16 = &v18;
      char v17 = &v19;
      uint64_t result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(v10, (uint64_t)&v16);
      int v14 = v18;
      if (v18) {
        v10[2] = v19;
      }
      BOOL v12 = v14 != 0;
    }
    else
    {
      BOOL v12 = 0;
    }
  }
  BOOL v15 = v12 && **(unsigned char **)a2 != 0;
  if (!v13) {
    BOOL v15 = 0;
  }
  **(unsigned char **)a2 = v15;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  v14[0] = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  uint64_t v7 = result;
  if (result)
  {
    uint64_t v16 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ConcatOp,void>::id
      && (*(unsigned char *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 3)
    {
      unsigned __int8 v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      uint64_t result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>*,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>*,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul>(v4, (uint64_t)v14);
      int v8 = v15;
      if (v15) {
        *(void *)(v4 + 24) = v16;
      }
      BOOL v6 = v8 != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  BOOL v9 = *(BOOL **)a2;
  BOOL v10 = v6 && **(unsigned char **)a2 != 0;
  if (!v7) {
    BOOL v10 = 0;
  }
  *BOOL v9 = v10;
  int v11 = (void *)a1[1];
  uint64_t v12 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  if (*v11)
  {
    BOOL v13 = *v11 == v12;
  }
  else
  {
    *int v11 = v12;
    BOOL v9 = *(BOOL **)a2;
    BOOL v10 = **(unsigned char **)a2 != 0;
    BOOL v13 = 1;
  }
  *BOOL v9 = v13 && v10;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>*,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>*,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)a1;
  uint64_t v20 = *(unsigned __int8 **)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  uint64_t v7 = DefiningOp;
  if (DefiningOp)
  {
    uint64_t v23 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      && (*(unsigned char *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 2)
    {
      unsigned __int8 v22 = 1;
      uint64_t v20 = &v22;
      BOOL v21 = &v23;
      mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(v4, (uint64_t)&v20);
      int v8 = v22;
      if (v22) {
        v4[2] = v23;
      }
      BOOL v6 = v8 != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  BOOL v9 = v6 && **(unsigned char **)a2 != 0;
  if (!v7) {
    BOOL v9 = 0;
  }
  **(unsigned char **)a2 = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v20 = *(unsigned __int8 **)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  uint64_t v13 = result;
  if (result)
  {
    uint64_t v23 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::StridedSliceOp,void>::id
      && (*(unsigned char *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 4)
    {
      unsigned __int8 v22 = 1;
      uint64_t v20 = &v22;
      BOOL v21 = &v23;
      uint64_t result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul,3ul>((uint64_t ***)v10, (uint64_t)&v20);
      int v14 = v22;
      if (v22) {
        *(void *)(v10 + 32) = v23;
      }
      BOOL v12 = v14 != 0;
    }
    else
    {
      BOOL v12 = 0;
    }
  }
  unsigned __int8 v15 = *(BOOL **)a2;
  BOOL v16 = v12 && **(unsigned char **)a2 != 0;
  if (!v13) {
    BOOL v16 = 0;
  }
  *unsigned __int8 v15 = v16;
  char v17 = *(void **)(a1 + 16);
  uint64_t v18 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 88);
  if (*v17)
  {
    BOOL v19 = *v17 == v18;
  }
  else
  {
    void *v17 = v18;
    unsigned __int8 v15 = *(BOOL **)a2;
    BOOL v16 = **(unsigned char **)a2 != 0;
    BOOL v19 = 1;
  }
  *unsigned __int8 v15 = v19 && v16;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  v14[0] = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  uint64_t v7 = result;
  if (result)
  {
    uint64_t v16 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MultiplyOp,void>::id
      && (*(unsigned char *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      unsigned __int8 v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      uint64_t result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(v4, (uint64_t)v14);
      int v8 = v15;
      if (v15) {
        *(void *)(v4 + 16) = v16;
      }
      BOOL v6 = v8 != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  BOOL v9 = *(BOOL **)a2;
  BOOL v10 = v6 && **(unsigned char **)a2 != 0;
  if (!v7) {
    BOOL v10 = 0;
  }
  *BOOL v9 = v10;
  int v11 = (void *)a1[1];
  uint64_t v12 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  if (*v11)
  {
    BOOL v13 = *v11 == v12;
  }
  else
  {
    *int v11 = v12;
    BOOL v9 = *(BOOL **)a2;
    BOOL v10 = **(unsigned char **)a2 != 0;
    BOOL v13 = 1;
  }
  *BOOL v9 = v13 && v10;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)a1;
  v14[0] = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  uint64_t v7 = result;
  if (result)
  {
    uint64_t v16 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      && (*(unsigned char *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      unsigned __int8 v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      uint64_t result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(v4, (uint64_t)v14);
      int v8 = v15;
      if (v15) {
        v4[2] = v16;
      }
      BOOL v6 = v8 != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  BOOL v9 = *(BOOL **)a2;
  BOOL v10 = v6 && **(unsigned char **)a2 != 0;
  if (!v7) {
    BOOL v10 = 0;
  }
  *BOOL v9 = v10;
  int v11 = *(void **)(a1 + 8);
  uint64_t v12 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  if (*v11)
  {
    BOOL v13 = *v11 == v12;
  }
  else
  {
    *int v11 = v12;
    BOOL v9 = *(BOOL **)a2;
    BOOL v10 = **(unsigned char **)a2 != 0;
    BOOL v13 = 1;
  }
  *BOOL v9 = v13 && v10;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  v14[0] = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  uint64_t v7 = result;
  if (result)
  {
    uint64_t v16 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::StridedSliceOp,void>::id
      && (*(unsigned char *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 4)
    {
      unsigned __int8 v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      uint64_t result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul,3ul>((uint64_t ***)v4, (uint64_t)v14);
      int v8 = v15;
      if (v15) {
        *(void *)(v4 + 32) = v16;
      }
      BOOL v6 = v8 != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  BOOL v9 = *(BOOL **)a2;
  BOOL v10 = v6 && **(unsigned char **)a2 != 0;
  if (!v7) {
    BOOL v10 = 0;
  }
  *BOOL v9 = v10;
  int v11 = (void *)a1[1];
  uint64_t v12 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  if (*v11)
  {
    BOOL v13 = *v11 == v12;
  }
  else
  {
    *int v11 = v12;
    BOOL v9 = *(BOOL **)a2;
    BOOL v10 = **(unsigned char **)a2 != 0;
    BOOL v13 = 1;
  }
  *BOOL v9 = v13 && v10;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul,3ul>(uint64_t ***a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v30 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v30);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      || (*(unsigned char *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_14;
    }
    uint64_t v7 = *(void *)(result + 72);
    uint64_t v8 = *(void *)(v7 + 24);
    uint64_t v9 = **v4;
    if (v9)
    {
      BOOL v10 = v9 == v8;
    }
    else
    {
      uint64_t **v4 = v8;
      uint64_t v7 = *(void *)(result + 72);
      BOOL v10 = 1;
    }
    int v11 = v4[1];
    uint64_t v12 = *(void *)(v7 + 56);
    if (*v11)
    {
      BOOL v13 = *v11 == v12;
    }
    else
    {
      *int v11 = v12;
      BOOL v13 = 1;
    }
    if (v10 && v13)
    {
      v4[2] = (uint64_t *)result;
      char v6 = 1;
    }
    else
    {
LABEL_14:
      char v6 = 0;
    }
  }
  int v14 = *(BOOL **)a2;
  uint64_t v15 = *(void *)(a2 + 8);
  BOOL v16 = v6 & (**(unsigned char **)a2 != 0);
  if (result) {
    BOOL v17 = v16;
  }
  else {
    BOOL v17 = 0;
  }
  *int v14 = v17;
  uint64_t v18 = a1[1];
  BOOL v19 = *(void **)(*(void *)v15 + 72);
  uint64_t v20 = (uint64_t *)v19[7];
  if (*v18)
  {
    BOOL v21 = *v18 == v20;
  }
  else
  {
    *uint64_t v18 = v20;
    int v14 = *(BOOL **)a2;
    BOOL v19 = *(void **)(**(void **)(a2 + 8) + 72);
    BOOL v17 = **(unsigned char **)a2 != 0;
    BOOL v21 = 1;
  }
  BOOL v22 = v21 && v17;
  *int v14 = v22;
  uint64_t v23 = a1[2];
  BOOL v24 = (uint64_t *)v19[11];
  if (*v23)
  {
    BOOL v25 = *v23 == v24;
  }
  else
  {
    unint64_t *v23 = v24;
    int v14 = *(BOOL **)a2;
    BOOL v19 = *(void **)(**(void **)(a2 + 8) + 72);
    BOOL v22 = **(unsigned char **)a2 != 0;
    BOOL v25 = 1;
  }
  BOOL v26 = v25 && v22;
  *int v14 = v26;
  int8x16_t v27 = a1[3];
  unsigned __int8 v28 = (uint64_t *)v19[15];
  if (*v27)
  {
    BOOL v29 = *v27 == v28;
  }
  else
  {
    void *v27 = v28;
    int v14 = *(BOOL **)a2;
    BOOL v26 = **(unsigned char **)a2 != 0;
    BOOL v29 = 1;
  }
  *int v14 = v29 && v26;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> & *)#2},0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  BOOL v16 = *(unsigned __int8 **)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v16);
  uint64_t v7 = DefiningOp;
  if (DefiningOp)
  {
    uint64_t v19 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MultiplyOp,void>::id
      && (*(unsigned char *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 2)
    {
      unsigned __int8 v18 = 1;
      BOOL v16 = &v18;
      BOOL v17 = &v19;
      mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> & *)#1},0ul,1ul>((uint64_t **)v4, (uint64_t)&v16);
      int v8 = v18;
      if (v18) {
        *(void *)(v4 + 16) = v19;
      }
      BOOL v6 = v8 != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  BOOL v9 = v6 && **(unsigned char **)a2 != 0;
  if (!v7) {
    BOOL v9 = 0;
  }
  **(unsigned char **)a2 = v9;
  uint64_t v10 = a1[1];
  BOOL v16 = *(unsigned __int8 **)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v16);
  uint64_t v13 = result;
  if (result)
  {
    uint64_t v19 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MultiplyOp,void>::id
      && (*(unsigned char *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      unsigned __int8 v18 = 1;
      BOOL v16 = &v18;
      BOOL v17 = &v19;
      uint64_t result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> & *)#1},0ul,1ul>((uint64_t **)v10, (uint64_t)&v16);
      int v14 = v18;
      if (v18) {
        *(void *)(v10 + 16) = v19;
      }
      BOOL v12 = v14 != 0;
    }
    else
    {
      BOOL v12 = 0;
    }
  }
  BOOL v15 = v12 && **(unsigned char **)a2 != 0;
  if (!v13) {
    BOOL v15 = 0;
  }
  **(unsigned char **)a2 = v15;
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AddOp &>(mlir::mps::AddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t mlir::getSingleFloatValue<float>(uint64_t a1, uint64_t a2)
{
  v90[5] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v84 = a1;
  *((void *)&v84 + 1) = a2;
  v83[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v84);
  v83[1] = v2;
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v83);
  if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v4) == 1)
  {
    ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v84);
    *(void *)&long long v89 = v5;
    BOOL v6 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                  + 136);
    _ZF = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
    BOOL v8 = _ZF || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
    BOOL v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
    BOOL v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
    BOOL v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
    BOOL v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
    BOOL v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
    BOOL v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
    BOOL v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
    if (v15
      || (v6 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        ? (BOOL v45 = v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        : (BOOL v45 = 1),
          v45))
    {
      long long v87 = v84;
      uint64_t Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v87);
      BOOL v17 = Type;
      if (!Type) {
        goto LABEL_40;
      }
      uint64_t v18 = *Type;
      unint64_t v19 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v20 = *(unsigned int *)(v18 + 16);
      if (!v20) {
        goto LABEL_40;
      }
      BOOL v21 = *(void **)(v18 + 8);
      BOOL v22 = &v21[2 * v20];
      do
      {
        unint64_t v23 = v20 >> 1;
        BOOL v24 = &v21[2 * (v20 >> 1)];
        unint64_t v26 = *v24;
        BOOL v25 = v24 + 2;
        v20 += ~(v20 >> 1);
        if (v26 < v19) {
          BOOL v21 = v25;
        }
        else {
          unint64_t v20 = v23;
        }
      }
      while (v20);
      if (v21 != v22 && *v21 == v19) {
        uint64_t v27 = v21[1];
      }
      else {
LABEL_40:
      }
        uint64_t v27 = 0;
      v86[0] = v17;
      v86[1] = v27;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v86);
      int v28 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v87);
      ElementsAttrRawData = (unsigned __int8 *)mlir::getElementsAttrRawData(v87);
      uint64_t v31 = v30;
      uint64_t NumElements = mlir::ElementsAttr::getNumElements(v87, *((uint64_t *)&v87 + 1));
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
      {
        uint64_t v34 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28) {
            uint64_t v34 = 0;
          }
          LOBYTE(v33) = ElementsAttrRawData[v34];
          _S0 = (float)v33;
          goto LABEL_117;
        }
LABEL_116:
        _S0 = 0.0;
LABEL_117:
        uint64_t v47 = LODWORD(_S0);
        uint64_t v46 = 0x100000000;
        return v47 | v46;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
      {
        uint64_t v37 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28) {
            uint64_t v37 = 0;
          }
          unsigned __int8 v38 = ElementsAttrRawData[v37];
          _S0 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v36)).i32[0];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
      {
        uint64_t v40 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28) {
            uint64_t v40 = 0;
          }
          LOWORD(v39) = *(_WORD *)&ElementsAttrRawData[2 * v40];
          _S0 = (float)v39;
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
      {
        uint64_t v42 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28) {
            uint64_t v42 = 0;
          }
          __int16 v43 = *(_WORD *)&ElementsAttrRawData[2 * v42];
          _S0 = (float)vmovl_s16(v41).i32[0];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
      {
        uint64_t v44 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28) {
            uint64_t v44 = 0;
          }
          _S0 = (float)*(unsigned int *)&ElementsAttrRawData[4 * v44];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
      {
        uint64_t v48 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28) {
            uint64_t v48 = 0;
          }
          _S0 = (float)*(int *)&ElementsAttrRawData[4 * v48];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      {
        uint64_t v49 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28) {
            uint64_t v49 = 0;
          }
          _S0 = (float)*(unint64_t *)&ElementsAttrRawData[8 * v49];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
      {
        uint64_t v50 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28) {
            uint64_t v50 = 0;
          }
          _S0 = (float)*(uint64_t *)&ElementsAttrRawData[8 * v50];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isF16((mlir::Type *)&OperandRange))
      {
        uint64_t v51 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28) {
            uint64_t v51 = 0;
          }
          _H0 = *(_WORD *)&ElementsAttrRawData[2 * v51];
          __asm { FCVT            S0, H0 }
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isF32((mlir::Type *)&OperandRange))
      {
        uint64_t v56 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28) {
            uint64_t v56 = 0;
          }
          _S0 = *(float *)&ElementsAttrRawData[4 * v56];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isF64((mlir::Type *)&OperandRange))
      {
        uint64_t v57 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28) {
            uint64_t v57 = 0;
          }
          _S0 = *(double *)&ElementsAttrRawData[8 * v57];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
      {
        uint64_t v58 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28) {
            uint64_t v58 = 0;
          }
          LODWORD(_S0) = *(unsigned __int16 *)&ElementsAttrRawData[2 * v58] << 16;
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
      {
        mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        if (v31)
        {
          uint64_t v64 = 0;
          _S0 = 0.0;
          unint64_t v65 = NumElements;
          unint64_t v66 = 8 / IntOrFloatBitWidth;
          do
          {
            unint64_t v68 = NumElements - v64 * v66;
            if (v68 >= v66) {
              unint64_t v68 = 8 / IntOrFloatBitWidth;
            }
            if (v68)
            {
              if (v65 >= v66) {
                unint64_t v69 = 8 / IntOrFloatBitWidth;
              }
              else {
                unint64_t v69 = v65;
              }
              unint64_t v70 = v69 - 1;
              if (v70 >= 7) {
                LOBYTE(v70) = 7;
              }
              _S0 = (float)((*ElementsAttrRawData >> (IntOrFloatBitWidth * v70)) & ~(-1 << IntOrFloatBitWidth));
            }
            ++v64;
            v65 -= v66;
            ++ElementsAttrRawData;
            --v31;
          }
          while (v31);
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (v28) {
        unint64_t v59 = 1;
      }
      else {
        unint64_t v59 = NumElements;
      }
      ArgOperands = v90;
      int8x8_t v60 = 0;
      long long v89 = xmmword_1810FE310;
      if (v59)
      {
        if (v59 < 0x29)
        {
          uint64_t v62 = 0;
          unsigned int v61 = v90;
        }
        else
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&ArgOperands, v90, v59, 1);
          unsigned int v61 = ArgOperands;
          uint64_t v62 = v89;
        }
        if (v59 != v62)
        {
          bzero((char *)v61 + v62, v59 - v62);
          unsigned int v61 = ArgOperands;
        }
        *(void *)&long long v89 = v59;
      }
      else
      {
        unsigned int v61 = v90;
      }
      if (!v31)
      {
LABEL_166:
        uint64_t v81 = NumElements - 1;
        if (NumElements < 1)
        {
          v60.i32[0] = 0;
        }
        else
        {
          if (v28) {
            uint64_t v81 = 0;
          }
          v60.i8[0] = *((unsigned char *)v61 + v81);
          *(float *)v60.i32 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v60)).i32[0];
        }
        float v82 = *(float *)v60.i32;
        if (v61 != v90) {
          free(v61);
        }
        _S0 = v82;
        goto LABEL_117;
      }
      uint64_t v71 = (BOOL *)v61 + 3;
      int8x8_t v60 = 0;
      while (1)
      {
        if (v59 >= 8) {
          uint64_t v72 = 8;
        }
        else {
          uint64_t v72 = v59;
        }
        if (!v72) {
          goto LABEL_136;
        }
        if (v59 >= 8) {
          uint64_t v73 = 8;
        }
        else {
          uint64_t v73 = v59;
        }
        unsigned int v74 = *ElementsAttrRawData;
        uint64x2_t v75 = (uint64x2_t)vdupq_n_s64(v73 - 1);
        int32x2_t v76 = vmovn_s64((int64x2_t)vcgeq_u64(v75, (uint64x2_t)xmmword_1810FE2E0));
        if (v76.i8[0]) {
          *(v71 - 3) = v74 & 1;
        }
        if (v76.i8[4]) {
          *(v71 - 2) = (v74 & 2) != 0;
        }
        uint64_t v77 = ((_BYTE)v73 + 1) & 0x1E;
        if (v77 == 2) {
          goto LABEL_136;
        }
        int32x2_t v78 = vmovn_s64((int64x2_t)vcgtq_u64(v75, (uint64x2_t)xmmword_1810FE320));
        if (v78.i8[0])
        {
          *(v71 - 1) = (v74 & 4) != 0;
          if (v78.i8[4]) {
            goto LABEL_154;
          }
        }
        else if (v78.i8[4])
        {
LABEL_154:
          *uint64_t v71 = (v74 & 8) != 0;
          if (v77 == 4) {
            goto LABEL_136;
          }
          goto LABEL_155;
        }
        if (v77 == 4) {
          goto LABEL_136;
        }
LABEL_155:
        int32x2_t v79 = vmovn_s64((int64x2_t)vcgtq_u64(v75, (uint64x2_t)xmmword_1810FE330));
        if (v79.i8[0])
        {
          v71[1] = (v74 & 0x10) != 0;
          if ((v79.i8[4] & 1) == 0) {
            goto LABEL_157;
          }
        }
        else if ((v79.i8[4] & 1) == 0)
        {
LABEL_157:
          if (v77 != 6) {
            goto LABEL_161;
          }
          goto LABEL_136;
        }
        v71[2] = (v74 & 0x20) != 0;
        if (v77 != 6)
        {
LABEL_161:
          int32x2_t v80 = vmovn_s64((int64x2_t)vcgtq_u64(v75, (uint64x2_t)xmmword_1810FE340));
          if (v80.i8[0]) {
            v71[3] = (v74 & 0x40) != 0;
          }
          if (v80.i8[4]) {
            v71[4] = v74 >> 7;
          }
        }
LABEL_136:
        ++ElementsAttrRawData;
        v71 += 8;
        v59 -= 8;
        if (!--v31)
        {
          unsigned int v61 = ArgOperands;
          goto LABEL_166;
        }
      }
    }
  }
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  return v47 | v46;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReinterpretCastOp,mlir::mps::MultiplyOp &,mlir::Type &>(mlir::UnknownLoc **a1, uint64_t a2, void *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reinterpret_cast", (const unsigned __int8 *)0x14, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"mps.reinterpret_cast";
    v17[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::ReinterpretCastOp::build(a1, (uint64_t)v19, *a3 - 16, *a4);
  BOOL v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReinterpretCastOp,void>::id) {
    BOOL v12 = v11;
  }
  else {
    BOOL v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::mps::anonymous namespace'::CanonicalizeReadVariable::~CanonicalizeReadVariable(mlir::mps::_anonymous_namespace_::CanonicalizeReadVariable *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReadVariableOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReadVariableOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReadVariableOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeReadVariable::matchAndRewrite(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReadVariableOp,void>::id
    && (*(unsigned char *)(a2 + 46) & 0x80) != 0
    && *(_DWORD *)(a2 + 68) == 1)
  {
    v17[0] = *(void *)(*(void *)(a2 + 72) + 24);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v17);
    if (DefiningOp)
    {
      if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::VariableFromTensorOp,void>::id
        && (*(unsigned char *)(DefiningOp + 46) & 0x80) != 0
        && *(_DWORD *)(DefiningOp + 68) == 1)
      {
        uint64_t v16 = a2;
        v17[0] = DefiningOp;
        BOOL v15 = (void *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v17);
        BOOL v6 = (void *)*v15;
        uint64_t v7 = *(void **)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v16);
        memset(v17, 0, 24);
        if (v6)
        {
          while (1)
          {
            uint64_t v11 = v6[2];
            if (v11)
            {
              if (*(_UNKNOWN **)(*(void *)(v11 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::AssignVariableOp,void>::id)
              {
                unint64_t v19 = (mlir::GenericProgramPoint *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v16);
                if (mlir::Value::getDefiningOp((mlir::Value *)&v19) == v11
                  || mlir::DominanceInfo::properlyDominates((mlir::DominanceInfo *)v17, (uint64_t)v19, (mlir::Block **)v11))
                {
                  if (v7) {
                    break;
                  }
                }
              }
            }
LABEL_15:
            BOOL v6 = (void *)*v6;
            if (!v6) {
              goto LABEL_28;
            }
          }
          BOOL v12 = v7;
          while (1)
          {
            BOOL v13 = (mlir::Block **)v12[2];
            if ((mlir::Block **)v11 == v13
              || (mlir::DominanceInfo::properlyDominatesImpl((mlir::DominanceInfo *)v17, (mlir::Block **)v11, v13, 1) & 1) != 0)
            {
              break;
            }
            BOOL v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_15;
            }
          }
          unint64_t v19 = mlir::OpBuilder::create<mlir::mps::ReadVariableOp,mlir::detail::TypedValue<mlir::TensorType> &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), (uint64_t *)&v15);
          uint64_t v14 = mlir::OpBuilder::create<mlir::mps::IdentityOp,mlir::mps::ReadVariableOp &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), &v19);
          (*(void (**)(void *, uint64_t, mlir::GenericProgramPoint *))(*a3 + 32))(a3, a2, v14);
        }
LABEL_28:
        mlir::detail::DominanceInfoBase<false>::~DominanceInfoBase((uint64_t)v17);
      }
    }
  }
  v17[0] = "failed: read var pattern did not match";
  __int16 v18 = 259;
  unint64_t v19 = (mlir::GenericProgramPoint *)v17;
  uint64_t v8 = a3[2];
  if (v8 && mlir::RewriterBase::Listener::classof(v8)) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), mlir::GenericProgramPoint **))(*(void *)v8 + 64))(v8, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReadVariableOp &>(mlir::mps::ReadVariableOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v19);
  }
  else {
    return 0;
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReadVariableOp,mlir::detail::TypedValue<mlir::TensorType> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.read_variable", (const unsigned __int8 *)0x11, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"mps.read_variable";
    v15[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::mps::ACosOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReadVariableOp,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReadVariableOp &>(mlir::mps::ReadVariableOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::IdentityOp,mlir::mps::ReadVariableOp &>(mlir::OpBuilder *a1, uint64_t a2, void *a3)
{
  v17[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.identity", (const unsigned __int8 *)0xC, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"mps.identity";
    v15[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::mps::ACosOp::build((uint64_t)a1, (uint64_t)v17, *a3 - 16);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

void *mlir::mps::anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::Conv2DOp>::~CanonicalizeQuantizedLayerScale(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::Conv2DOp>::~CanonicalizeQuantizedLayerScale(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::Conv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0;
  v138[2] = *MEMORY[0x1E4F143B8];
  uint64_t v136 = v138;
  uint64_t v137 = 0x200000000;
  v133 = v135;
  uint64_t v134 = 0x200000000;
  unint64_t v130 = v132;
  uint64_t v131 = 0x200000000;
  uint64_t v5 = (mlir::OpBuilder *)(a3 + 8);
  while ((*(unsigned char *)(a2 + 46) & 0x80) != 0 && v4 < *(unsigned int *)(a2 + 68))
  {
    uint64_t v9 = *(void *)(*(void *)(a2 + 72) + 32 * v4 + 24);
    uint64_t v121 = v9;
    uint64_t v10 = v131;
    if (v131 >= (unint64_t)HIDWORD(v131))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v131 + 1, 8);
      uint64_t v10 = v131;
    }
    *((void *)v130 + v10) = v9;
    LODWORD(v131) = v131 + 1;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v121);
    if (DefiningOp)
    {
      uint64_t v12 = *(void **)(*(void *)(DefiningOp + 48) + 16);
      BOOL v13 = v12 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
      uint64_t v14 = v12 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? DefiningOp : 0;
      uint64_t v120 = v14;
      if (v13)
      {
        uint64_t SparseShape = (unint64_t *)mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v120);
        if (mlir::isConstantFPZero(SparseShape))
        {
          uint64_t Filter = (unint64_t *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v120);
          BOOL v17 = (uint64_t *)(Filter[1] & 0xFFFFFFFFFFFFFFF8);
          if (!v17) {
            goto LABEL_25;
          }
          uint64_t v18 = *v17;
          unint64_t v19 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v20 = *(unsigned int *)(v18 + 16);
          if (!v20) {
            goto LABEL_25;
          }
          BOOL v21 = *(void **)(v18 + 8);
          BOOL v22 = &v21[2 * v20];
          do
          {
            unint64_t v23 = v20 >> 1;
            BOOL v24 = &v21[2 * (v20 >> 1)];
            unint64_t v26 = *v24;
            BOOL v25 = v24 + 2;
            v20 += ~(v20 >> 1);
            if (v26 < v19) {
              BOOL v21 = v25;
            }
            else {
              unint64_t v20 = v23;
            }
          }
          while (v20);
          if (v21 != v22 && *v21 == v19) {
            uint64_t v27 = v21[1];
          }
          else {
LABEL_25:
          }
            uint64_t v27 = 0;
          unint64_t v126 = v17;
          uint64_t v127 = v27;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v126))
          {
            uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v126);
            if (v29)
            {
              uint64_t v30 = 8 * v29;
              while (*ArgAttrsAttr != 0x8000000000000000)
              {
                ++ArgAttrsAttr;
                v30 -= 8;
                if (!v30) {
                  goto LABEL_31;
                }
              }
            }
            else
            {
LABEL_31:
              if (mlir::isConstantFPOne(Filter)) {
                goto LABEL_4;
              }
              uint64_t v31 = (uint64_t *)(Filter[1] & 0xFFFFFFFFFFFFFFF8);
              if (!v31) {
                goto LABEL_41;
              }
              uint64_t v32 = *v31;
              unint64_t v33 = mlir::TypeID::get<mlir::ShapedType>();
              unint64_t v34 = *(unsigned int *)(v32 + 16);
              if (!v34) {
                goto LABEL_41;
              }
              uint64_t v35 = *(void **)(v32 + 8);
              int8x8_t v36 = &v35[2 * v34];
              do
              {
                unint64_t v37 = v34 >> 1;
                unsigned __int8 v38 = &v35[2 * (v34 >> 1)];
                unint64_t v40 = *v38;
                unsigned int v39 = v38 + 2;
                v34 += ~(v34 >> 1);
                if (v40 < v33) {
                  uint64_t v35 = v39;
                }
                else {
                  unint64_t v34 = v37;
                }
              }
              while (v34);
              if (v35 != v36 && *v35 == v33) {
                uint64_t v41 = v35[1];
              }
              else {
LABEL_41:
              }
                uint64_t v41 = 0;
              unint64_t v126 = v31;
              uint64_t v127 = v41;
              uint64_t v42 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v126);
              if (mlir::ShapedType::getNumElements(v42, v43) == 1)
              {
                uint64_t v44 = -1;
              }
              else
              {
                unint64_t v126 = (void *)a2;
                if (!v4) {
                  goto LABEL_4;
                }
                uint64_t Input = *(char **)(*(void *)(a2 + 72) + 32 * v4 + 24);
                AttrDictionary = (void *)mlir::Value::getDefiningOp((mlir::Value *)&Input);
                int Axis = mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&AttrDictionary);
                uint64_t v46 = Axis < 0 ? Axis : Axis - 4;
                if (v46 != qword_18110B760[(int)mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v126)]) {
                  goto LABEL_4;
                }
                uint64_t v44 = qword_18110B760[(int)mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v126)];
              }
              uint64_t v47 = v137;
              if (v137 >= (unint64_t)HIDWORD(v137))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v136, v138, v137 + 1, 8);
                uint64_t v47 = v137;
              }
              v136[v47] = (uint64_t)Filter;
              LODWORD(v137) = v137 + 1;
              uint64_t v48 = v134;
              if (v134 >= (unint64_t)HIDWORD(v134))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v135, v134 + 1, 8);
                uint64_t v48 = v134;
              }
              *(void *)&v133[8 * v48] = v44;
              LODWORD(v134) = v134 + 1;
              uint64_t v49 = (void *)(Filter[1] & 0xFFFFFFFFFFFFFFF8);
              if (!v49) {
                goto LABEL_64;
              }
              uint64_t v50 = *v49;
              unint64_t v51 = mlir::TypeID::get<mlir::ShapedType>();
              unint64_t v52 = *(unsigned int *)(v50 + 16);
              if (!v52) {
                goto LABEL_64;
              }
              uint64_t v53 = *(void **)(v50 + 8);
              uint64_t v54 = &v53[2 * v52];
              do
              {
                unint64_t v55 = v52 >> 1;
                uint64_t v56 = &v53[2 * (v52 >> 1)];
                unint64_t v58 = *v56;
                uint64_t v57 = v56 + 2;
                v52 += ~(v52 >> 1);
                if (v58 < v51) {
                  uint64_t v53 = v57;
                }
                else {
                  unint64_t v52 = v55;
                }
              }
              while (v52);
              if (v53 != v54 && *v53 == v51) {
                uint64_t v59 = v53[1];
              }
              else {
LABEL_64:
              }
                uint64_t v59 = 0;
              AttrDictionary = v49;
              uint64_t v124 = v59;
              uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
              unsigned int v61 = (llvm::APFloatBase *)mlir::RankedTensorType::get(0, 0, OperandRange, 0);
              uint64_t v62 = v61;
              if (!v61) {
                goto LABEL_74;
              }
              uint64_t v63 = *(void *)v61;
              unint64_t v64 = mlir::TypeID::get<mlir::ShapedType>();
              unint64_t v65 = *(unsigned int *)(v63 + 16);
              if (!v65) {
                goto LABEL_74;
              }
              unint64_t v66 = *(void **)(v63 + 8);
              uint64_t v67 = &v66[2 * v65];
              do
              {
                unint64_t v68 = v65 >> 1;
                unint64_t v69 = &v66[2 * (v65 >> 1)];
                unint64_t v71 = *v69;
                unint64_t v70 = v69 + 2;
                v65 += ~(v65 >> 1);
                if (v71 < v64) {
                  unint64_t v66 = v70;
                }
                else {
                  unint64_t v65 = v68;
                }
              }
              while (v65);
              if (v66 != v67 && *v66 == v64) {
                uint64_t v72 = v66[1];
              }
              else {
LABEL_74:
              }
                uint64_t v72 = 0;
              DenseElementsAttrOf = mlir::createDenseElementsAttrOfType<float>(v62, v72, 1.0);
              unsigned int v74 = DenseElementsAttrOf;
              if (!DenseElementsAttrOf) {
                goto LABEL_2;
              }
              uint64_t v75 = *(void *)DenseElementsAttrOf;
              unint64_t v76 = mlir::TypeID::get<mlir::ElementsAttr>();
              unint64_t v77 = *(unsigned int *)(v75 + 16);
              if (!v77) {
                goto LABEL_2;
              }
              int32x2_t v78 = *(void **)(v75 + 8);
              int32x2_t v79 = &v78[2 * v77];
              do
              {
                unint64_t v80 = v77 >> 1;
                uint64_t v81 = &v78[2 * (v77 >> 1)];
                unint64_t v83 = *v81;
                float v82 = v81 + 2;
                v77 += ~(v77 >> 1);
                if (v83 < v76) {
                  int32x2_t v78 = v82;
                }
                else {
                  unint64_t v77 = v80;
                }
              }
              while (v77);
              if (v78 != v79 && *v78 == v76) {
                uint64_t v6 = v78[1];
              }
              else {
LABEL_2:
              }
                uint64_t v6 = 0;
              unint64_t v126 = v74;
              uint64_t v127 = v6;
              AttrDictionary = (void *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::ElementsAttr &>(v5, *(void *)(v120 + 24), (uint64_t)&v126)- 16);
              uint64_t v7 = *(void *)(v120 + 24);
              uint64_t Input = (char *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v120);
              uint64_t Bias = (uint64_t *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v120);
              uint64_t InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v120);
              uint64_t FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v120);
              char v8 = mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value,mlir::TypeAttr,mlir::IntegerAttr>((mlir::Float32Type **)v5, v7, (uint64_t *)&Input, (uint64_t *)&AttrDictionary, (uint64_t *)&Bias, &InputAttributeNames, &FastmathAttr);
              *((void *)v130 + v4) = (char *)v8 - 16;
            }
          }
        }
      }
    }
LABEL_4:
    ++v4;
  }
  if (v137)
  {
    uint64_t v84 = *(void *)(a2 + 24);
    uint64_t v85 = *(unsigned int *)(a2 + 36);
    uint64_t v86 = a2 - 16;
    if (!v85) {
      uint64_t v86 = 0;
    }
    AttrDictionary = (void *)v86;
    uint64_t v124 = v85;
    mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, (uint64_t *)&v126);
    if (*(unsigned char *)(a2 + 47))
    {
      AttrDictionary = (void *)mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
      p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
    }
    else
    {
      p_AttrDictionary = (mlir::ArrayAttr *)(a2 + 56);
    }
    AttrDictionary = (void *)mlir::ArrayAttr::getValue(p_AttrDictionary);
    uint64_t v124 = v89;
    uint64_t v90 = (char *)mlir::OpBuilder::create<mlir::mps::Conv2DOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>(v5, v84, (uint64_t *)&v126, (uint64_t)&v130, (uint64_t)&AttrDictionary)- 16;
    uint64_t Input = v90;
    AttrDictionary = (void *)mlir::getElementTypeOrSelf((uint64_t)v90);
    if (v137 && v134)
    {
      uint64_t v91 = v136;
      uint64_t v92 = v133;
      uint64_t v93 = &v136[v137];
      uint64_t v94 = &v133[8 * v134];
      do
      {
        uint64_t v121 = *v91;
        uint64_t v95 = *(void *)v92;
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v121);
        if (AttrDictionary != (void *)ElementTypeOrSelf)
        {
          uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v121);
          uint64_t v121 = (uint64_t)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>((mlir::UnknownLoc **)v5, Loc, &v121, (uint64_t *)&AttrDictionary)- 16;
        }
        if (v95 != -1)
        {
          unsigned int v98 = 0;
          unint64_t v126 = v128;
          uint64_t v127 = 0x500000000;
          uint64_t v99 = v95 + 1;
          do
          {
            if (v98 >= HIDWORD(v127))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v128, v98 + 1, 8);
              unsigned int v98 = v127;
            }
            *((void *)v126 + v98) = v99;
            unsigned int v98 = v127 + 1;
            LODWORD(v127) = v127 + 1;
          }
          while (!__CFADD__(v99++, 1));
          uint64_t v101 = mlir::Value::getLoc((mlir::Value *)&v121);
          uint64_t InputAttributeNames = v127;
          uint64_t IntegerType = mlir::Builder::getIntegerType(v5, 0x40u, 1);
          uint64_t v103 = (void *)mlir::RankedTensorType::get((uint64_t)&InputAttributeNames, 1, IntegerType, 0);
          uint64_t v104 = v103;
          if (!v103) {
            goto LABEL_115;
          }
          uint64_t v105 = *v103;
          unint64_t v106 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v107 = *(unsigned int *)(v105 + 16);
          if (!v107) {
            goto LABEL_115;
          }
          uint64_t v108 = *(void **)(v105 + 8);
          uint64_t v109 = &v108[2 * v107];
          do
          {
            unint64_t v110 = v107 >> 1;
            uint64_t v111 = &v108[2 * (v107 >> 1)];
            unint64_t v113 = *v111;
            uint64_t v112 = v111 + 2;
            v107 += ~(v107 >> 1);
            if (v113 < v106) {
              uint64_t v108 = v112;
            }
            else {
              unint64_t v107 = v110;
            }
          }
          while (v107);
          if (v108 != v109 && *v108 == v106) {
            uint64_t v114 = v108[1];
          }
          else {
LABEL_115:
          }
            uint64_t v114 = 0;
          uint64_t Bias = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v104, v114, v126, 8 * v127, 8, 1, 1);
          uint64_t v120 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v5, v101, &Bias)
               - 16;
          uint64_t v121 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::Value &>(v5, *(void *)(a2 + 24), &v121, &v120)- 16;
          if (v126 != v128) {
            free(v126);
          }
        }
        uint64_t v115 = mlir::Value::getLoc((mlir::Value *)&v121);
        uint64_t v90 = (char *)mlir::OpBuilder::create<mlir::mps::MultiplyOp,mlir::Value,mlir::Value&>((mlir::Float32Type **)v5, v115, (uint64_t *)&Input, &v121)- 16;
        uint64_t Input = v90;
        if (++v91 == v93) {
          break;
        }
        v92 += 8;
      }
      while (v92 != v94);
    }
    unint64_t v126 = v90;
    uint64_t v88 = 1;
    mlir::ValueRange::ValueRange(v125, (uint64_t)&v126, 1uLL);
    (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a3 + 24))(a3, a2, v125[0], v125[1]);
  }
  else
  {
    uint64_t v88 = 0;
  }
  if (v130 != v132) {
    free(v130);
  }
  if (v133 != v135) {
    free(v133);
  }
  if (v136 != v138) {
    free(v136);
  }
  return v88;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value,mlir::TypeAttr,mlir::IntegerAttr>(mlir::Float32Type **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  v25[38] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.dequantize", (const unsigned __int8 *)0xE, Context);
  if (!v16)
  {
    __int16 v24 = 1283;
    v23[2] = (uint64_t)"mps.dequantize";
    v23[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::mps::DequantizeOp::build(a1, v25, *a3, *a4, *a5, *a6, *a7);
  BOOL v17 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::Conv2DOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.conv_2d", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    __int16 v26 = 1283;
    void v25[2] = (uint64_t)"mps.conv_2d";
    v25[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v21 = 259;
    llvm::operator+(v25, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  NextResultAtunsigned int Offset = *a3;
  uint64_t v14 = a3[1];
  uint64_t v15 = a3[3];
  if (v14) {
    NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v14);
  }
  mlir::ValueRange::ValueRange((unint64_t *)v25, NextResultAtOffset, v15 - v14);
  mlir::TypeRange::TypeRange(v23, v25[0], v25[1]);
  mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(void *)(a5 + 8));
  char v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id) {
    BOOL v17 = v16;
  }
  else {
    BOOL v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v17;
}

void *mlir::mps::anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::DepthwiseConv3DOp>::~CanonicalizeQuantizedLayerScale(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::DepthwiseConv3DOp>::~CanonicalizeQuantizedLayerScale(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::DepthwiseConv3DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0;
  v195[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = v195;
  int64_t v193 = v195;
  uint64_t v194 = 0x200000000;
  uint64_t v190 = v192;
  uint64_t v191 = 0x200000000;
  v187 = v189;
  uint64_t v188 = 0x200000000;
  uint64_t v6 = (mlir::OpBuilder *)(a3 + 8);
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    while (1)
    {
      if (v4 >= *(unsigned int *)(a2 + 68)) {
        goto LABEL_143;
      }
      uint64_t v7 = *(void *)(*(void *)(a2 + 72) + 32 * v4 + 24);
      uint64_t v177 = v7;
      uint64_t v8 = v188;
      if (v188 >= (unint64_t)HIDWORD(v188))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v189, v188 + 1, 8);
        uint64_t v8 = v188;
      }
      *((void *)v187 + v8) = v7;
      LODWORD(v188) = v188 + 1;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v177);
      if (DefiningOp)
      {
        uint64_t v10 = *(void **)(*(void *)(DefiningOp + 48) + 16);
        BOOL v11 = v10 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
        char v12 = v10 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? (uint64_t *)DefiningOp : 0;
        unint64_t v176 = v12;
        if (v11)
        {
          uint64_t SparseShape = (unint64_t *)mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v176);
          if (mlir::isConstantFPZero(SparseShape))
          {
            uint64_t Filter = (unint64_t *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v176);
            uint64_t v15 = (uint64_t *)(Filter[1] & 0xFFFFFFFFFFFFFFF8);
            if (!v15) {
              goto LABEL_24;
            }
            uint64_t v16 = *v15;
            unint64_t v17 = mlir::TypeID::get<mlir::ShapedType>();
            unint64_t v18 = *(unsigned int *)(v16 + 16);
            if (!v18) {
              goto LABEL_24;
            }
            uint64_t v19 = *(void **)(v16 + 8);
            uint64_t v20 = &v19[2 * v18];
            do
            {
              unint64_t v21 = v18 >> 1;
              __int16 v22 = &v19[2 * (v18 >> 1)];
              unint64_t v24 = *v22;
              unint64_t v23 = v22 + 2;
              v18 += ~(v18 >> 1);
              if (v24 < v17) {
                uint64_t v19 = v23;
              }
              else {
                unint64_t v18 = v21;
              }
            }
            while (v18);
            if (v19 != v20 && *v19 == v17) {
              uint64_t v25 = v19[1];
            }
            else {
LABEL_24:
            }
              uint64_t v25 = 0;
            v183 = v15;
            uint64_t v184 = v25;
            if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v183))
            {
              uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
              if (v27)
              {
                uint64_t v28 = 8 * v27;
                while (*ArgAttrsAttr != 0x8000000000000000)
                {
                  ++ArgAttrsAttr;
                  v28 -= 8;
                  if (!v28) {
                    goto LABEL_30;
                  }
                }
                goto LABEL_4;
              }
LABEL_30:
              if (!mlir::isConstantFPOne(Filter))
              {
                uint64_t v29 = (uint64_t *)(Filter[1] & 0xFFFFFFFFFFFFFFF8);
                if (!v29) {
                  goto LABEL_40;
                }
                uint64_t v30 = *v29;
                unint64_t v31 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v32 = *(unsigned int *)(v30 + 16);
                if (!v32) {
                  goto LABEL_40;
                }
                unint64_t v33 = *(void **)(v30 + 8);
                unint64_t v34 = &v33[2 * v32];
                do
                {
                  unint64_t v35 = v32 >> 1;
                  int8x8_t v36 = &v33[2 * (v32 >> 1)];
                  unint64_t v38 = *v36;
                  unint64_t v37 = v36 + 2;
                  v32 += ~(v32 >> 1);
                  if (v38 < v31) {
                    unint64_t v33 = v37;
                  }
                  else {
                    unint64_t v32 = v35;
                  }
                }
                while (v32);
                if (v33 != v34 && *v33 == v31) {
                  uint64_t v39 = v33[1];
                }
                else {
LABEL_40:
                }
                  uint64_t v39 = 0;
                v183 = v29;
                uint64_t v184 = v39;
                unint64_t v40 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                if (mlir::ShapedType::getNumElements(v40, v41) == 1)
                {
                  uint64_t v42 = -1;
LABEL_43:
                  uint64_t v43 = v194;
                  if (v194 >= (unint64_t)HIDWORD(v194))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v193, v5, v194 + 1, 8);
                    uint64_t v43 = v194;
                  }
                  v193[v43] = (uint64_t)Filter;
                  LODWORD(v194) = v194 + 1;
                  uint64_t v44 = v191;
                  if (v191 >= (unint64_t)HIDWORD(v191))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v192, v191 + 1, 8);
                    uint64_t v44 = v191;
                  }
                  *(void *)&v190[8 * v44] = v42;
                  LODWORD(v191) = v191 + 1;
                  BOOL v45 = (void *)(Filter[1] & 0xFFFFFFFFFFFFFFF8);
                  if (!v45) {
                    goto LABEL_56;
                  }
                  uint64_t v46 = *v45;
                  unint64_t v47 = mlir::TypeID::get<mlir::ShapedType>();
                  unint64_t v48 = *(unsigned int *)(v46 + 16);
                  if (!v48) {
                    goto LABEL_56;
                  }
                  uint64_t v49 = *(void **)(v46 + 8);
                  uint64_t v50 = &v49[2 * v48];
                  do
                  {
                    unint64_t v51 = v48 >> 1;
                    unint64_t v52 = &v49[2 * (v48 >> 1)];
                    unint64_t v54 = *v52;
                    uint64_t v53 = v52 + 2;
                    v48 += ~(v48 >> 1);
                    if (v54 < v47) {
                      uint64_t v49 = v53;
                    }
                    else {
                      unint64_t v48 = v51;
                    }
                  }
                  while (v48);
                  if (v49 != v50 && *v49 == v47) {
                    uint64_t v55 = v49[1];
                  }
                  else {
LABEL_56:
                  }
                    uint64_t v55 = 0;
                  AttrDictionary = v45;
                  uint64_t v181 = v55;
                  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
                  uint64_t v57 = (llvm::APFloatBase *)mlir::RankedTensorType::get(0, 0, OperandRange, 0);
                  unint64_t v58 = v57;
                  if (!v57) {
                    goto LABEL_66;
                  }
                  uint64_t v59 = *(void *)v57;
                  unint64_t v60 = mlir::TypeID::get<mlir::ShapedType>();
                  unint64_t v61 = *(unsigned int *)(v59 + 16);
                  if (!v61) {
                    goto LABEL_66;
                  }
                  uint64_t v62 = *(void **)(v59 + 8);
                  uint64_t v63 = &v62[2 * v61];
                  do
                  {
                    unint64_t v64 = v61 >> 1;
                    unint64_t v65 = &v62[2 * (v61 >> 1)];
                    unint64_t v67 = *v65;
                    unint64_t v66 = v65 + 2;
                    v61 += ~(v61 >> 1);
                    if (v67 < v60) {
                      uint64_t v62 = v66;
                    }
                    else {
                      unint64_t v61 = v64;
                    }
                  }
                  while (v61);
                  if (v62 != v63 && *v62 == v60) {
                    uint64_t v68 = v62[1];
                  }
                  else {
LABEL_66:
                  }
                    uint64_t v68 = 0;
                  DenseElementsAttrOf = mlir::createDenseElementsAttrOfType<float>(v58, v68, 1.0);
                  unint64_t v70 = DenseElementsAttrOf;
                  if (!DenseElementsAttrOf) {
                    goto LABEL_76;
                  }
                  uint64_t v71 = *(void *)DenseElementsAttrOf;
                  unint64_t v72 = mlir::TypeID::get<mlir::ElementsAttr>();
                  unint64_t v73 = *(unsigned int *)(v71 + 16);
                  if (!v73) {
                    goto LABEL_76;
                  }
                  unsigned int v74 = *(void **)(v71 + 8);
                  uint64_t v75 = &v74[2 * v73];
                  do
                  {
                    unint64_t v76 = v73 >> 1;
                    unint64_t v77 = &v74[2 * (v73 >> 1)];
                    unint64_t v79 = *v77;
                    int32x2_t v78 = v77 + 2;
                    v73 += ~(v73 >> 1);
                    if (v79 < v72) {
                      unsigned int v74 = v78;
                    }
                    else {
                      unint64_t v73 = v76;
                    }
                  }
                  while (v73);
                  if (v74 != v75 && *v74 == v72) {
                    uint64_t v80 = v74[1];
                  }
                  else {
LABEL_76:
                  }
                    uint64_t v80 = 0;
                  v183 = v70;
                  uint64_t v184 = v80;
                  AttrDictionary = (void *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::ElementsAttr &>(v6, v176[3], (uint64_t)&v183)- 16);
                  uint64_t v81 = v176[3];
                  uint64_t Input = (char *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v176);
                  uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v176);
                  uint64_t InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v176);
                  uint64_t FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v176);
                  float v82 = mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value,mlir::TypeAttr,mlir::IntegerAttr>((mlir::Float32Type **)v6, v81, (uint64_t *)&Input, (uint64_t *)&AttrDictionary, &Bias, &InputAttributeNames, &FastmathAttr);
                  *((void *)v187 + v4) = (char *)v82 - 16;
                  goto LABEL_4;
                }
                uint64_t Input = (char *)a2;
                if (v4) {
                  break;
                }
              }
            }
          }
        }
      }
LABEL_4:
      ++v4;
      if ((*(unsigned char *)(a2 + 46) & 0x80) == 0) {
        goto LABEL_143;
      }
    }
    v183 = *(void **)(*(void *)(a2 + 72) + 32 * v4 + 24);
    uint64_t Bias = mlir::Value::getDefiningOp((mlir::Value *)&v183);
    int Axis = mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&Bias);
    uint64_t v42 = Axis;
    if (Axis < 0)
    {
LABEL_100:
      Channelint Axis = mlir::mps::DepthwiseConv3DDataGradientOp::getChannelAxis((mlir::mps::DepthwiseConv3DDataGradientOp *)&Input);
      uint64_t v98 = ChannelAxis;
      if ((ChannelAxis & 0x80000000) == 0)
      {
        v172 = v5;
        uint64_t v99 = (uint64_t *)(*((void *)Input - 1) & 0xFFFFFFFFFFFFFFF8);
        if (!v99) {
          goto LABEL_110;
        }
        uint64_t v100 = *v99;
        unint64_t v101 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v102 = *(unsigned int *)(v100 + 16);
        if (!v102) {
          goto LABEL_110;
        }
        uint64_t v103 = *(void **)(v100 + 8);
        uint64_t v104 = &v103[2 * v102];
        do
        {
          unint64_t v105 = v102 >> 1;
          unint64_t v106 = &v103[2 * (v102 >> 1)];
          unint64_t v108 = *v106;
          unint64_t v107 = v106 + 2;
          v102 += ~(v102 >> 1);
          if (v108 < v101) {
            uint64_t v103 = v107;
          }
          else {
            unint64_t v102 = v105;
          }
        }
        while (v102);
        if (v103 != v104 && *v103 == v101) {
          uint64_t v109 = v103[1];
        }
        else {
LABEL_110:
        }
          uint64_t v109 = 0;
        v183 = v99;
        uint64_t v184 = v109;
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v183))
        {
LABEL_3:
          uint64_t v5 = v172;
          goto LABEL_4;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
        v98 -= v110;
        uint64_t v5 = v172;
      }
      if (v98 != v42) {
        goto LABEL_4;
      }
      uint64_t v111 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Input) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v111)
      {
        uint64_t v112 = v5;
        uint64_t v113 = *v111;
        unint64_t v114 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v115 = *(unsigned int *)(v113 + 16);
        if (!v115)
        {
          uint64_t v122 = 0;
          uint64_t v5 = v112;
          goto LABEL_127;
        }
        uint64_t v116 = *(void **)(v113 + 8);
        uint64_t v117 = &v116[2 * v115];
        do
        {
          unint64_t v118 = v115 >> 1;
          uint64_t v119 = &v116[2 * (v115 >> 1)];
          unint64_t v121 = *v119;
          uint64_t v120 = v119 + 2;
          v115 += ~(v115 >> 1);
          if (v121 < v114) {
            uint64_t v116 = v120;
          }
          else {
            unint64_t v115 = v118;
          }
        }
        while (v115);
        uint64_t v5 = v112;
        if (v116 != v117 && *v116 == v114)
        {
          uint64_t v122 = v116[1];
          goto LABEL_127;
        }
      }
      uint64_t v122 = 0;
LABEL_127:
      v183 = v111;
      uint64_t v184 = v122;
      if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v183) & 1) == 0) {
        goto LABEL_4;
      }
      v172 = v5;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
      uint64_t v124 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183)
                       + 8 * (v123 + v42));
      AttrDictionary = 0;
      uint64_t v181 = 0;
      unint64_t v125 = (void *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Input) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v125) {
        goto LABEL_137;
      }
      uint64_t v126 = *v125;
      unint64_t v127 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v128 = *(unsigned int *)(v126 + 16);
      if (!v128) {
        goto LABEL_137;
      }
      uint64_t v129 = *(void **)(v126 + 8);
      unint64_t v130 = &v129[2 * v128];
      do
      {
        unint64_t v131 = v128 >> 1;
        uint64_t v132 = &v129[2 * (v128 >> 1)];
        unint64_t v134 = *v132;
        v133 = v132 + 2;
        v128 += ~(v128 >> 1);
        if (v134 < v127) {
          uint64_t v129 = v133;
        }
        else {
          unint64_t v128 = v131;
        }
      }
      while (v128);
      if (v129 != v130 && *v129 == v127) {
        uint64_t v135 = v129[1];
      }
      else {
LABEL_137:
      }
        uint64_t v135 = 0;
      AttrDictionary = v125;
      uint64_t v181 = v135;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&AttrDictionary))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&AttrDictionary);
        int v137 = v136;
        uint64_t v138 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&AttrDictionary);
        if (v124 != 0x8000000000000000 && v124 == *(void *)(v138 + 8 * (v137 + v42)))
        {
          uint64_t v5 = v172;
          goto LABEL_43;
        }
      }
      goto LABEL_3;
    }
    uint64_t v84 = (uint64_t *)(*(void *)(Bias - 8) & 0xFFFFFFFFFFFFFFF8);
    if (v84)
    {
      uint64_t v85 = v5;
      uint64_t v86 = *v84;
      unint64_t v87 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v88 = *(unsigned int *)(v86 + 16);
      if (!v88)
      {
        uint64_t v95 = 0;
        uint64_t v5 = v85;
        goto LABEL_98;
      }
      uint64_t v89 = *(void **)(v86 + 8);
      uint64_t v90 = &v89[2 * v88];
      do
      {
        unint64_t v91 = v88 >> 1;
        uint64_t v92 = &v89[2 * (v88 >> 1)];
        unint64_t v94 = *v92;
        uint64_t v93 = v92 + 2;
        v88 += ~(v88 >> 1);
        if (v94 < v87) {
          uint64_t v89 = v93;
        }
        else {
          unint64_t v88 = v91;
        }
      }
      while (v88);
      uint64_t v5 = v85;
      if (v89 != v90 && *v89 == v87)
      {
        uint64_t v95 = v89[1];
        goto LABEL_98;
      }
    }
    uint64_t v95 = 0;
LABEL_98:
    v183 = v84;
    uint64_t v184 = v95;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v183)) {
      goto LABEL_4;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
    v42 -= v96;
    goto LABEL_100;
  }
LABEL_143:
  if (v194)
  {
    uint64_t v139 = *(void *)(a2 + 24);
    uint64_t v140 = *(unsigned int *)(a2 + 36);
    uint64_t v141 = a2 - 16;
    if (!v140) {
      uint64_t v141 = 0;
    }
    AttrDictionary = (void *)v141;
    uint64_t v181 = v140;
    mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, (uint64_t *)&v183);
    if (*(unsigned char *)(a2 + 47))
    {
      AttrDictionary = (void *)mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
      p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
    }
    else
    {
      p_AttrDictionary = (mlir::ArrayAttr *)(a2 + 56);
    }
    AttrDictionary = (void *)mlir::ArrayAttr::getValue(p_AttrDictionary);
    uint64_t v181 = v144;
    uint64_t v145 = (char *)mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>(v6, v139, (uint64_t *)&v183, (uint64_t)&v187, (uint64_t)&AttrDictionary)- 16;
    uint64_t Input = v145;
    AttrDictionary = (void *)mlir::getElementTypeOrSelf((uint64_t)v145);
    if (v194 && v191)
    {
      v173 = v5;
      uint64_t v146 = v193;
      uint64_t v147 = v190;
      uint64_t v148 = &v193[v194];
      v149 = &v190[8 * v191];
      do
      {
        uint64_t Bias = *v146;
        uint64_t v150 = *(void *)v147;
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(Bias);
        if (AttrDictionary != (void *)ElementTypeOrSelf)
        {
          uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&Bias);
          uint64_t Bias = (uint64_t)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>((mlir::UnknownLoc **)v6, Loc, &Bias, (uint64_t *)&AttrDictionary)- 16;
        }
        if (v150 != -1)
        {
          unsigned int v153 = 0;
          v183 = v185;
          uint64_t v184 = 0x500000000;
          uint64_t v154 = v150 + 1;
          do
          {
            if (v153 >= HIDWORD(v184))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v183, v185, v153 + 1, 8);
              unsigned int v153 = v184;
            }
            *((void *)v183 + v153) = v154;
            unsigned int v153 = v184 + 1;
            LODWORD(v184) = v184 + 1;
          }
          while (!__CFADD__(v154++, 1));
          uint64_t v156 = mlir::Value::getLoc((mlir::Value *)&Bias);
          uint64_t InputAttributeNames = v184;
          uint64_t IntegerType = mlir::Builder::getIntegerType(v6, 0x40u, 1);
          v158 = (void *)mlir::RankedTensorType::get((uint64_t)&InputAttributeNames, 1, IntegerType, 0);
          uint64_t v159 = v158;
          if (!v158) {
            goto LABEL_170;
          }
          uint64_t v160 = *v158;
          unint64_t v161 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v162 = *(unsigned int *)(v160 + 16);
          if (!v162) {
            goto LABEL_170;
          }
          uint64_t v163 = *(void **)(v160 + 8);
          uint64_t v164 = &v163[2 * v162];
          do
          {
            unint64_t v165 = v162 >> 1;
            uint64_t v166 = &v163[2 * (v162 >> 1)];
            unint64_t v168 = *v166;
            uint64_t v167 = v166 + 2;
            v162 += ~(v162 >> 1);
            if (v168 < v161) {
              uint64_t v163 = v167;
            }
            else {
              unint64_t v162 = v165;
            }
          }
          while (v162);
          if (v163 != v164 && *v163 == v161) {
            uint64_t v169 = v163[1];
          }
          else {
LABEL_170:
          }
            uint64_t v169 = 0;
          unint64_t v176 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v159, v169, v183, 8 * v184, 8, 1, 1);
          uint64_t v177 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v6, v156, &v176)
               - 16;
          uint64_t Bias = (uint64_t)mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::Value &>(v6, *(void *)(a2 + 24), &Bias, &v177)- 16;
          if (v183 != v185) {
            free(v183);
          }
        }
        uint64_t v170 = mlir::Value::getLoc((mlir::Value *)&Bias);
        uint64_t v145 = (char *)mlir::OpBuilder::create<mlir::mps::MultiplyOp,mlir::Value,mlir::Value&>((mlir::Float32Type **)v6, v170, (uint64_t *)&Input, &Bias)- 16;
        uint64_t Input = v145;
        if (++v146 == v148) {
          break;
        }
        v147 += 8;
      }
      while (v147 != v149);
      uint64_t v5 = v173;
    }
    v183 = v145;
    uint64_t v143 = 1;
    mlir::ValueRange::ValueRange(v182, (uint64_t)&v183, 1uLL);
    (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a3 + 24))(a3, a2, v182[0], v182[1]);
  }
  else
  {
    uint64_t v143 = 0;
  }
  if (v187 != v189) {
    free(v187);
  }
  if (v190 != v192) {
    free(v190);
  }
  if (v193 != v5) {
    free(v193);
  }
  return v143;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.depthwise_conv_3d", (const unsigned __int8 *)0x15, Context);
  if (!v12)
  {
    __int16 v26 = 1283;
    void v25[2] = (uint64_t)"mps.depthwise_conv_3d";
    v25[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v21 = 259;
    llvm::operator+(v25, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  NextResultAtunsigned int Offset = *a3;
  uint64_t v14 = a3[1];
  uint64_t v15 = a3[3];
  if (v14) {
    NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v14);
  }
  mlir::ValueRange::ValueRange((unint64_t *)v25, NextResultAtOffset, v15 - v14);
  mlir::TypeRange::TypeRange(v23, v25[0], v25[1]);
  mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(void *)(a5 + 8));
  uint64_t v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DOp,void>::id) {
    unint64_t v17 = v16;
  }
  else {
    unint64_t v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v17;
}

void *mlir::mps::anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::DepthwiseConv3DDataGradientOp>::~CanonicalizeQuantizedLayerScale(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::DepthwiseConv3DDataGradientOp>::~CanonicalizeQuantizedLayerScale(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::DepthwiseConv3DDataGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::DepthwiseConv3DDataGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::DepthwiseConv3DDataGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::DepthwiseConv3DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0;
  v195[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = v195;
  int64_t v193 = v195;
  uint64_t v194 = 0x200000000;
  uint64_t v190 = v192;
  uint64_t v191 = 0x200000000;
  v187 = v189;
  uint64_t v188 = 0x200000000;
  uint64_t v6 = (mlir::OpBuilder *)(a3 + 8);
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    while (1)
    {
      if (v4 >= *(unsigned int *)(a2 + 68)) {
        goto LABEL_143;
      }
      uint64_t v7 = *(void *)(*(void *)(a2 + 72) + 32 * v4 + 24);
      uint64_t v177 = v7;
      uint64_t v8 = v188;
      if (v188 >= (unint64_t)HIDWORD(v188))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v189, v188 + 1, 8);
        uint64_t v8 = v188;
      }
      *((void *)v187 + v8) = v7;
      LODWORD(v188) = v188 + 1;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v177);
      if (DefiningOp)
      {
        uint64_t v10 = *(void **)(*(void *)(DefiningOp + 48) + 16);
        BOOL v11 = v10 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
        char v12 = v10 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? (uint64_t *)DefiningOp : 0;
        unint64_t v176 = v12;
        if (v11)
        {
          uint64_t SparseShape = (unint64_t *)mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v176);
          if (mlir::isConstantFPZero(SparseShape))
          {
            uint64_t Filter = (unint64_t *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v176);
            uint64_t v15 = (uint64_t *)(Filter[1] & 0xFFFFFFFFFFFFFFF8);
            if (!v15) {
              goto LABEL_24;
            }
            uint64_t v16 = *v15;
            unint64_t v17 = mlir::TypeID::get<mlir::ShapedType>();
            unint64_t v18 = *(unsigned int *)(v16 + 16);
            if (!v18) {
              goto LABEL_24;
            }
            uint64_t v19 = *(void **)(v16 + 8);
            uint64_t v20 = &v19[2 * v18];
            do
            {
              unint64_t v21 = v18 >> 1;
              __int16 v22 = &v19[2 * (v18 >> 1)];
              unint64_t v24 = *v22;
              unint64_t v23 = v22 + 2;
              v18 += ~(v18 >> 1);
              if (v24 < v17) {
                uint64_t v19 = v23;
              }
              else {
                unint64_t v18 = v21;
              }
            }
            while (v18);
            if (v19 != v20 && *v19 == v17) {
              uint64_t v25 = v19[1];
            }
            else {
LABEL_24:
            }
              uint64_t v25 = 0;
            v183 = v15;
            uint64_t v184 = v25;
            if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v183))
            {
              uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
              if (v27)
              {
                uint64_t v28 = 8 * v27;
                while (*ArgAttrsAttr != 0x8000000000000000)
                {
                  ++ArgAttrsAttr;
                  v28 -= 8;
                  if (!v28) {
                    goto LABEL_30;
                  }
                }
                goto LABEL_4;
              }
LABEL_30:
              if (!mlir::isConstantFPOne(Filter))
              {
                uint64_t v29 = (uint64_t *)(Filter[1] & 0xFFFFFFFFFFFFFFF8);
                if (!v29) {
                  goto LABEL_40;
                }
                uint64_t v30 = *v29;
                unint64_t v31 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v32 = *(unsigned int *)(v30 + 16);
                if (!v32) {
                  goto LABEL_40;
                }
                unint64_t v33 = *(void **)(v30 + 8);
                unint64_t v34 = &v33[2 * v32];
                do
                {
                  unint64_t v35 = v32 >> 1;
                  int8x8_t v36 = &v33[2 * (v32 >> 1)];
                  unint64_t v38 = *v36;
                  unint64_t v37 = v36 + 2;
                  v32 += ~(v32 >> 1);
                  if (v38 < v31) {
                    unint64_t v33 = v37;
                  }
                  else {
                    unint64_t v32 = v35;
                  }
                }
                while (v32);
                if (v33 != v34 && *v33 == v31) {
                  uint64_t v39 = v33[1];
                }
                else {
LABEL_40:
                }
                  uint64_t v39 = 0;
                v183 = v29;
                uint64_t v184 = v39;
                unint64_t v40 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                if (mlir::ShapedType::getNumElements(v40, v41) == 1)
                {
                  uint64_t v42 = -1;
LABEL_43:
                  uint64_t v43 = v194;
                  if (v194 >= (unint64_t)HIDWORD(v194))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v193, v5, v194 + 1, 8);
                    uint64_t v43 = v194;
                  }
                  v193[v43] = (uint64_t)Filter;
                  LODWORD(v194) = v194 + 1;
                  uint64_t v44 = v191;
                  if (v191 >= (unint64_t)HIDWORD(v191))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v192, v191 + 1, 8);
                    uint64_t v44 = v191;
                  }
                  *(void *)&v190[8 * v44] = v42;
                  LODWORD(v191) = v191 + 1;
                  BOOL v45 = (void *)(Filter[1] & 0xFFFFFFFFFFFFFFF8);
                  if (!v45) {
                    goto LABEL_56;
                  }
                  uint64_t v46 = *v45;
                  unint64_t v47 = mlir::TypeID::get<mlir::ShapedType>();
                  unint64_t v48 = *(unsigned int *)(v46 + 16);
                  if (!v48) {
                    goto LABEL_56;
                  }
                  uint64_t v49 = *(void **)(v46 + 8);
                  uint64_t v50 = &v49[2 * v48];
                  do
                  {
                    unint64_t v51 = v48 >> 1;
                    unint64_t v52 = &v49[2 * (v48 >> 1)];
                    unint64_t v54 = *v52;
                    uint64_t v53 = v52 + 2;
                    v48 += ~(v48 >> 1);
                    if (v54 < v47) {
                      uint64_t v49 = v53;
                    }
                    else {
                      unint64_t v48 = v51;
                    }
                  }
                  while (v48);
                  if (v49 != v50 && *v49 == v47) {
                    uint64_t v55 = v49[1];
                  }
                  else {
LABEL_56:
                  }
                    uint64_t v55 = 0;
                  AttrDictionary = v45;
                  uint64_t v181 = v55;
                  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
                  uint64_t v57 = (llvm::APFloatBase *)mlir::RankedTensorType::get(0, 0, OperandRange, 0);
                  unint64_t v58 = v57;
                  if (!v57) {
                    goto LABEL_66;
                  }
                  uint64_t v59 = *(void *)v57;
                  unint64_t v60 = mlir::TypeID::get<mlir::ShapedType>();
                  unint64_t v61 = *(unsigned int *)(v59 + 16);
                  if (!v61) {
                    goto LABEL_66;
                  }
                  uint64_t v62 = *(void **)(v59 + 8);
                  uint64_t v63 = &v62[2 * v61];
                  do
                  {
                    unint64_t v64 = v61 >> 1;
                    unint64_t v65 = &v62[2 * (v61 >> 1)];
                    unint64_t v67 = *v65;
                    unint64_t v66 = v65 + 2;
                    v61 += ~(v61 >> 1);
                    if (v67 < v60) {
                      uint64_t v62 = v66;
                    }
                    else {
                      unint64_t v61 = v64;
                    }
                  }
                  while (v61);
                  if (v62 != v63 && *v62 == v60) {
                    uint64_t v68 = v62[1];
                  }
                  else {
LABEL_66:
                  }
                    uint64_t v68 = 0;
                  DenseElementsAttrOf = mlir::createDenseElementsAttrOfType<float>(v58, v68, 1.0);
                  unint64_t v70 = DenseElementsAttrOf;
                  if (!DenseElementsAttrOf) {
                    goto LABEL_76;
                  }
                  uint64_t v71 = *(void *)DenseElementsAttrOf;
                  unint64_t v72 = mlir::TypeID::get<mlir::ElementsAttr>();
                  unint64_t v73 = *(unsigned int *)(v71 + 16);
                  if (!v73) {
                    goto LABEL_76;
                  }
                  unsigned int v74 = *(void **)(v71 + 8);
                  uint64_t v75 = &v74[2 * v73];
                  do
                  {
                    unint64_t v76 = v73 >> 1;
                    unint64_t v77 = &v74[2 * (v73 >> 1)];
                    unint64_t v79 = *v77;
                    int32x2_t v78 = v77 + 2;
                    v73 += ~(v73 >> 1);
                    if (v79 < v72) {
                      unsigned int v74 = v78;
                    }
                    else {
                      unint64_t v73 = v76;
                    }
                  }
                  while (v73);
                  if (v74 != v75 && *v74 == v72) {
                    uint64_t v80 = v74[1];
                  }
                  else {
LABEL_76:
                  }
                    uint64_t v80 = 0;
                  v183 = v70;
                  uint64_t v184 = v80;
                  AttrDictionary = (void *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::ElementsAttr &>(v6, v176[3], (uint64_t)&v183)- 16);
                  uint64_t v81 = v176[3];
                  uint64_t Input = (char *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v176);
                  uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v176);
                  uint64_t InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v176);
                  uint64_t FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v176);
                  float v82 = mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value,mlir::TypeAttr,mlir::IntegerAttr>((mlir::Float32Type **)v6, v81, (uint64_t *)&Input, (uint64_t *)&AttrDictionary, &Bias, &InputAttributeNames, &FastmathAttr);
                  *((void *)v187 + v4) = (char *)v82 - 16;
                  goto LABEL_4;
                }
                uint64_t Input = (char *)a2;
                if (v4) {
                  break;
                }
              }
            }
          }
        }
      }
LABEL_4:
      ++v4;
      if ((*(unsigned char *)(a2 + 46) & 0x80) == 0) {
        goto LABEL_143;
      }
    }
    v183 = *(void **)(*(void *)(a2 + 72) + 32 * v4 + 24);
    uint64_t Bias = mlir::Value::getDefiningOp((mlir::Value *)&v183);
    int Axis = mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&Bias);
    uint64_t v42 = Axis;
    if (Axis < 0)
    {
LABEL_100:
      Channelint Axis = mlir::mps::DepthwiseConv3DDataGradientOp::getChannelAxis((mlir::mps::DepthwiseConv3DDataGradientOp *)&Input);
      uint64_t v98 = ChannelAxis;
      if ((ChannelAxis & 0x80000000) == 0)
      {
        v172 = v5;
        uint64_t v99 = (uint64_t *)(*((void *)Input - 1) & 0xFFFFFFFFFFFFFFF8);
        if (!v99) {
          goto LABEL_110;
        }
        uint64_t v100 = *v99;
        unint64_t v101 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v102 = *(unsigned int *)(v100 + 16);
        if (!v102) {
          goto LABEL_110;
        }
        uint64_t v103 = *(void **)(v100 + 8);
        uint64_t v104 = &v103[2 * v102];
        do
        {
          unint64_t v105 = v102 >> 1;
          unint64_t v106 = &v103[2 * (v102 >> 1)];
          unint64_t v108 = *v106;
          unint64_t v107 = v106 + 2;
          v102 += ~(v102 >> 1);
          if (v108 < v101) {
            uint64_t v103 = v107;
          }
          else {
            unint64_t v102 = v105;
          }
        }
        while (v102);
        if (v103 != v104 && *v103 == v101) {
          uint64_t v109 = v103[1];
        }
        else {
LABEL_110:
        }
          uint64_t v109 = 0;
        v183 = v99;
        uint64_t v184 = v109;
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v183))
        {
LABEL_3:
          uint64_t v5 = v172;
          goto LABEL_4;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
        v98 -= v110;
        uint64_t v5 = v172;
      }
      if (v98 != v42) {
        goto LABEL_4;
      }
      uint64_t v111 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Input) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v111)
      {
        uint64_t v112 = v5;
        uint64_t v113 = *v111;
        unint64_t v114 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v115 = *(unsigned int *)(v113 + 16);
        if (!v115)
        {
          uint64_t v122 = 0;
          uint64_t v5 = v112;
          goto LABEL_127;
        }
        uint64_t v116 = *(void **)(v113 + 8);
        uint64_t v117 = &v116[2 * v115];
        do
        {
          unint64_t v118 = v115 >> 1;
          uint64_t v119 = &v116[2 * (v115 >> 1)];
          unint64_t v121 = *v119;
          uint64_t v120 = v119 + 2;
          v115 += ~(v115 >> 1);
          if (v121 < v114) {
            uint64_t v116 = v120;
          }
          else {
            unint64_t v115 = v118;
          }
        }
        while (v115);
        uint64_t v5 = v112;
        if (v116 != v117 && *v116 == v114)
        {
          uint64_t v122 = v116[1];
          goto LABEL_127;
        }
      }
      uint64_t v122 = 0;
LABEL_127:
      v183 = v111;
      uint64_t v184 = v122;
      if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v183) & 1) == 0) {
        goto LABEL_4;
      }
      v172 = v5;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
      uint64_t v124 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183)
                       + 8 * (v123 + v42));
      AttrDictionary = 0;
      uint64_t v181 = 0;
      unint64_t v125 = (void *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Input) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v125) {
        goto LABEL_137;
      }
      uint64_t v126 = *v125;
      unint64_t v127 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v128 = *(unsigned int *)(v126 + 16);
      if (!v128) {
        goto LABEL_137;
      }
      uint64_t v129 = *(void **)(v126 + 8);
      unint64_t v130 = &v129[2 * v128];
      do
      {
        unint64_t v131 = v128 >> 1;
        uint64_t v132 = &v129[2 * (v128 >> 1)];
        unint64_t v134 = *v132;
        v133 = v132 + 2;
        v128 += ~(v128 >> 1);
        if (v134 < v127) {
          uint64_t v129 = v133;
        }
        else {
          unint64_t v128 = v131;
        }
      }
      while (v128);
      if (v129 != v130 && *v129 == v127) {
        uint64_t v135 = v129[1];
      }
      else {
LABEL_137:
      }
        uint64_t v135 = 0;
      AttrDictionary = v125;
      uint64_t v181 = v135;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&AttrDictionary))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&AttrDictionary);
        int v137 = v136;
        uint64_t v138 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&AttrDictionary);
        if (v124 != 0x8000000000000000 && v124 == *(void *)(v138 + 8 * (v137 + v42)))
        {
          uint64_t v5 = v172;
          goto LABEL_43;
        }
      }
      goto LABEL_3;
    }
    uint64_t v84 = (uint64_t *)(*(void *)(Bias - 8) & 0xFFFFFFFFFFFFFFF8);
    if (v84)
    {
      uint64_t v85 = v5;
      uint64_t v86 = *v84;
      unint64_t v87 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v88 = *(unsigned int *)(v86 + 16);
      if (!v88)
      {
        uint64_t v95 = 0;
        uint64_t v5 = v85;
        goto LABEL_98;
      }
      uint64_t v89 = *(void **)(v86 + 8);
      uint64_t v90 = &v89[2 * v88];
      do
      {
        unint64_t v91 = v88 >> 1;
        uint64_t v92 = &v89[2 * (v88 >> 1)];
        unint64_t v94 = *v92;
        uint64_t v93 = v92 + 2;
        v88 += ~(v88 >> 1);
        if (v94 < v87) {
          uint64_t v89 = v93;
        }
        else {
          unint64_t v88 = v91;
        }
      }
      while (v88);
      uint64_t v5 = v85;
      if (v89 != v90 && *v89 == v87)
      {
        uint64_t v95 = v89[1];
        goto LABEL_98;
      }
    }
    uint64_t v95 = 0;
LABEL_98:
    v183 = v84;
    uint64_t v184 = v95;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v183)) {
      goto LABEL_4;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
    v42 -= v96;
    goto LABEL_100;
  }
LABEL_143:
  if (v194)
  {
    uint64_t v139 = *(void *)(a2 + 24);
    uint64_t v140 = *(unsigned int *)(a2 + 36);
    uint64_t v141 = a2 - 16;
    if (!v140) {
      uint64_t v141 = 0;
    }
    AttrDictionary = (void *)v141;
    uint64_t v181 = v140;
    mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, (uint64_t *)&v183);
    if (*(unsigned char *)(a2 + 47))
    {
      AttrDictionary = (void *)mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
      p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
    }
    else
    {
      p_AttrDictionary = (mlir::ArrayAttr *)(a2 + 56);
    }
    AttrDictionary = (void *)mlir::ArrayAttr::getValue(p_AttrDictionary);
    uint64_t v181 = v144;
    uint64_t v145 = (char *)mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DDataGradientOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>(v6, v139, (uint64_t *)&v183, (uint64_t)&v187, (uint64_t)&AttrDictionary)- 16;
    uint64_t Input = v145;
    AttrDictionary = (void *)mlir::getElementTypeOrSelf((uint64_t)v145);
    if (v194 && v191)
    {
      v173 = v5;
      uint64_t v146 = v193;
      uint64_t v147 = v190;
      uint64_t v148 = &v193[v194];
      v149 = &v190[8 * v191];
      do
      {
        uint64_t Bias = *v146;
        uint64_t v150 = *(void *)v147;
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(Bias);
        if (AttrDictionary != (void *)ElementTypeOrSelf)
        {
          uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&Bias);
          uint64_t Bias = (uint64_t)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>((mlir::UnknownLoc **)v6, Loc, &Bias, (uint64_t *)&AttrDictionary)- 16;
        }
        if (v150 != -1)
        {
          unsigned int v153 = 0;
          v183 = v185;
          uint64_t v184 = 0x500000000;
          uint64_t v154 = v150 + 1;
          do
          {
            if (v153 >= HIDWORD(v184))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v183, v185, v153 + 1, 8);
              unsigned int v153 = v184;
            }
            *((void *)v183 + v153) = v154;
            unsigned int v153 = v184 + 1;
            LODWORD(v184) = v184 + 1;
          }
          while (!__CFADD__(v154++, 1));
          uint64_t v156 = mlir::Value::getLoc((mlir::Value *)&Bias);
          uint64_t InputAttributeNames = v184;
          uint64_t IntegerType = mlir::Builder::getIntegerType(v6, 0x40u, 1);
          v158 = (void *)mlir::RankedTensorType::get((uint64_t)&InputAttributeNames, 1, IntegerType, 0);
          uint64_t v159 = v158;
          if (!v158) {
            goto LABEL_170;
          }
          uint64_t v160 = *v158;
          unint64_t v161 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v162 = *(unsigned int *)(v160 + 16);
          if (!v162) {
            goto LABEL_170;
          }
          uint64_t v163 = *(void **)(v160 + 8);
          uint64_t v164 = &v163[2 * v162];
          do
          {
            unint64_t v165 = v162 >> 1;
            uint64_t v166 = &v163[2 * (v162 >> 1)];
            unint64_t v168 = *v166;
            uint64_t v167 = v166 + 2;
            v162 += ~(v162 >> 1);
            if (v168 < v161) {
              uint64_t v163 = v167;
            }
            else {
              unint64_t v162 = v165;
            }
          }
          while (v162);
          if (v163 != v164 && *v163 == v161) {
            uint64_t v169 = v163[1];
          }
          else {
LABEL_170:
          }
            uint64_t v169 = 0;
          unint64_t v176 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v159, v169, v183, 8 * v184, 8, 1, 1);
          uint64_t v177 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v6, v156, &v176)
               - 16;
          uint64_t Bias = (uint64_t)mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::Value &>(v6, *(void *)(a2 + 24), &Bias, &v177)- 16;
          if (v183 != v185) {
            free(v183);
          }
        }
        uint64_t v170 = mlir::Value::getLoc((mlir::Value *)&Bias);
        uint64_t v145 = (char *)mlir::OpBuilder::create<mlir::mps::MultiplyOp,mlir::Value,mlir::Value&>((mlir::Float32Type **)v6, v170, (uint64_t *)&Input, &Bias)- 16;
        uint64_t Input = v145;
        if (++v146 == v148) {
          break;
        }
        v147 += 8;
      }
      while (v147 != v149);
      uint64_t v5 = v173;
    }
    v183 = v145;
    uint64_t v143 = 1;
    mlir::ValueRange::ValueRange(v182, (uint64_t)&v183, 1uLL);
    (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a3 + 24))(a3, a2, v182[0], v182[1]);
  }
  else
  {
    uint64_t v143 = 0;
  }
  if (v187 != v189) {
    free(v187);
  }
  if (v190 != v192) {
    free(v190);
  }
  if (v193 != v5) {
    free(v193);
  }
  return v143;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DDataGradientOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.depthwise_conv_3d_data_gradient", (const unsigned __int8 *)0x23, Context);
  if (!v12)
  {
    __int16 v26 = 1283;
    void v25[2] = (uint64_t)"mps.depthwise_conv_3d_data_gradient";
    v25[3] = 35;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v21 = 259;
    llvm::operator+(v25, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  NextResultAtunsigned int Offset = *a3;
  uint64_t v14 = a3[1];
  uint64_t v15 = a3[3];
  if (v14) {
    NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v14);
  }
  mlir::ValueRange::ValueRange((unint64_t *)v25, NextResultAtOffset, v15 - v14);
  mlir::TypeRange::TypeRange(v23, v25[0], v25[1]);
  mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(void *)(a5 + 8));
  uint64_t v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DDataGradientOp,void>::id) {
    unint64_t v17 = v16;
  }
  else {
    unint64_t v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v17;
}

void *mlir::mps::anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::MatMulOp>::~CanonicalizeQuantizedLayerScale(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::MatMulOp>::~CanonicalizeQuantizedLayerScale(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::MatMulOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0;
  v142[2] = *MEMORY[0x1E4F143B8];
  uint64_t v140 = v142;
  uint64_t v141 = 0x200000000;
  int v137 = v139;
  uint64_t v138 = 0x200000000;
  unint64_t v134 = v136;
  uint64_t v135 = 0x200000000;
  uint64_t v5 = (mlir::OpBuilder *)(a3 + 8);
  while ((*(unsigned char *)(a2 + 46) & 0x80) != 0 && v4 < *(unsigned int *)(a2 + 68))
  {
    uint64_t v9 = *(void *)(*(void *)(a2 + 72) + 32 * v4 + 24);
    uint64_t v125 = v9;
    uint64_t v10 = v135;
    if (v135 >= (unint64_t)HIDWORD(v135))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v136, v135 + 1, 8);
      uint64_t v10 = v135;
    }
    *((void *)v134 + v10) = v9;
    LODWORD(v135) = v135 + 1;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v125);
    if (DefiningOp)
    {
      char v12 = *(void **)(*(void *)(DefiningOp + 48) + 16);
      BOOL v13 = v12 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
      uint64_t v14 = v12 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? DefiningOp : 0;
      uint64_t v124 = v14;
      if (v13)
      {
        uint64_t SparseShape = (unint64_t *)mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v124);
        if (mlir::isConstantFPZero(SparseShape))
        {
          uint64_t Filter = (unint64_t *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v124);
          unint64_t v17 = (uint64_t *)(Filter[1] & 0xFFFFFFFFFFFFFFF8);
          if (!v17) {
            goto LABEL_25;
          }
          uint64_t v18 = *v17;
          unint64_t v19 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v20 = *(unsigned int *)(v18 + 16);
          if (!v20) {
            goto LABEL_25;
          }
          __int16 v21 = *(void **)(v18 + 8);
          __int16 v22 = &v21[2 * v20];
          do
          {
            unint64_t v23 = v20 >> 1;
            unint64_t v24 = &v21[2 * (v20 >> 1)];
            unint64_t v26 = *v24;
            uint64_t v25 = v24 + 2;
            v20 += ~(v20 >> 1);
            if (v26 < v19) {
              __int16 v21 = v25;
            }
            else {
              unint64_t v20 = v23;
            }
          }
          while (v20);
          if (v21 != v22 && *v21 == v19) {
            uint64_t v27 = v21[1];
          }
          else {
LABEL_25:
          }
            uint64_t v27 = 0;
          unint64_t v130 = v17;
          uint64_t v131 = v27;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v130))
          {
            uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v130);
            if (v29)
            {
              uint64_t v30 = 8 * v29;
              while (*ArgAttrsAttr != 0x8000000000000000)
              {
                ++ArgAttrsAttr;
                v30 -= 8;
                if (!v30) {
                  goto LABEL_31;
                }
              }
            }
            else
            {
LABEL_31:
              if (mlir::isConstantFPOne(Filter)) {
                goto LABEL_4;
              }
              unint64_t v31 = (uint64_t *)(Filter[1] & 0xFFFFFFFFFFFFFFF8);
              if (!v31) {
                goto LABEL_41;
              }
              uint64_t v32 = *v31;
              unint64_t v33 = mlir::TypeID::get<mlir::ShapedType>();
              unint64_t v34 = *(unsigned int *)(v32 + 16);
              if (!v34) {
                goto LABEL_41;
              }
              unint64_t v35 = *(void **)(v32 + 8);
              int8x8_t v36 = &v35[2 * v34];
              do
              {
                unint64_t v37 = v34 >> 1;
                unint64_t v38 = &v35[2 * (v34 >> 1)];
                unint64_t v40 = *v38;
                uint64_t v39 = v38 + 2;
                v34 += ~(v34 >> 1);
                if (v40 < v33) {
                  unint64_t v35 = v39;
                }
                else {
                  unint64_t v34 = v37;
                }
              }
              while (v34);
              if (v35 != v36 && *v35 == v33) {
                uint64_t v41 = v35[1];
              }
              else {
LABEL_41:
              }
                uint64_t v41 = 0;
              unint64_t v130 = v31;
              uint64_t v131 = v41;
              uint64_t v42 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v130);
              if (mlir::ShapedType::getNumElements(v42, v43) == 1)
              {
                uint64_t v44 = -1;
LABEL_44:
                uint64_t v45 = v141;
                if (v141 >= (unint64_t)HIDWORD(v141))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v142, v141 + 1, 8);
                  uint64_t v45 = v141;
                }
                v140[v45] = (uint64_t)Filter;
                LODWORD(v141) = v141 + 1;
                uint64_t v46 = v138;
                if (v138 >= (unint64_t)HIDWORD(v138))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v137, v139, v138 + 1, 8);
                  uint64_t v46 = v138;
                }
                *(void *)&v137[8 * v46] = v44;
                LODWORD(v138) = v138 + 1;
                unint64_t v47 = (void *)(Filter[1] & 0xFFFFFFFFFFFFFFF8);
                if (!v47) {
                  goto LABEL_57;
                }
                uint64_t v48 = *v47;
                unint64_t v49 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v50 = *(unsigned int *)(v48 + 16);
                if (!v50) {
                  goto LABEL_57;
                }
                unint64_t v51 = *(void **)(v48 + 8);
                unint64_t v52 = &v51[2 * v50];
                do
                {
                  unint64_t v53 = v50 >> 1;
                  unint64_t v54 = &v51[2 * (v50 >> 1)];
                  unint64_t v56 = *v54;
                  uint64_t v55 = v54 + 2;
                  v50 += ~(v50 >> 1);
                  if (v56 < v49) {
                    unint64_t v51 = v55;
                  }
                  else {
                    unint64_t v50 = v53;
                  }
                }
                while (v50);
                if (v51 != v52 && *v51 == v49) {
                  uint64_t v57 = v51[1];
                }
                else {
LABEL_57:
                }
                  uint64_t v57 = 0;
                AttrDictionary = v47;
                uint64_t v128 = v57;
                uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
                uint64_t v59 = (llvm::APFloatBase *)mlir::RankedTensorType::get(0, 0, OperandRange, 0);
                unint64_t v60 = v59;
                if (!v59) {
                  goto LABEL_67;
                }
                uint64_t v61 = *(void *)v59;
                unint64_t v62 = mlir::TypeID::get<mlir::ShapedType>();
                unint64_t v63 = *(unsigned int *)(v61 + 16);
                if (!v63) {
                  goto LABEL_67;
                }
                unint64_t v64 = *(void **)(v61 + 8);
                unint64_t v65 = &v64[2 * v63];
                do
                {
                  unint64_t v66 = v63 >> 1;
                  unint64_t v67 = &v64[2 * (v63 >> 1)];
                  unint64_t v69 = *v67;
                  uint64_t v68 = v67 + 2;
                  v63 += ~(v63 >> 1);
                  if (v69 < v62) {
                    unint64_t v64 = v68;
                  }
                  else {
                    unint64_t v63 = v66;
                  }
                }
                while (v63);
                if (v64 != v65 && *v64 == v62) {
                  uint64_t v70 = v64[1];
                }
                else {
LABEL_67:
                }
                  uint64_t v70 = 0;
                DenseElementsAttrOf = mlir::createDenseElementsAttrOfType<float>(v60, v70, 1.0);
                unint64_t v72 = DenseElementsAttrOf;
                if (!DenseElementsAttrOf) {
                  goto LABEL_2;
                }
                uint64_t v73 = *(void *)DenseElementsAttrOf;
                unint64_t v74 = mlir::TypeID::get<mlir::ElementsAttr>();
                unint64_t v75 = *(unsigned int *)(v73 + 16);
                if (!v75) {
                  goto LABEL_2;
                }
                unint64_t v76 = *(void **)(v73 + 8);
                unint64_t v77 = &v76[2 * v75];
                do
                {
                  unint64_t v78 = v75 >> 1;
                  unint64_t v79 = &v76[2 * (v75 >> 1)];
                  unint64_t v81 = *v79;
                  uint64_t v80 = v79 + 2;
                  v75 += ~(v75 >> 1);
                  if (v81 < v74) {
                    unint64_t v76 = v80;
                  }
                  else {
                    unint64_t v75 = v78;
                  }
                }
                while (v75);
                if (v76 != v77 && *v76 == v74) {
                  uint64_t v6 = v76[1];
                }
                else {
LABEL_2:
                }
                  uint64_t v6 = 0;
                unint64_t v130 = v72;
                uint64_t v131 = v6;
                AttrDictionary = (void *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::ElementsAttr &>(v5, *(void *)(v124 + 24), (uint64_t)&v130)- 16);
                uint64_t v7 = *(void *)(v124 + 24);
                uint64_t Input = (char *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v124);
                uint64_t Bias = (uint64_t *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v124);
                uint64_t InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v124);
                uint64_t FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v124);
                uint64_t v8 = mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value,mlir::TypeAttr,mlir::IntegerAttr>((mlir::Float32Type **)v5, v7, (uint64_t *)&Input, (uint64_t *)&AttrDictionary, (uint64_t *)&Bias, &InputAttributeNames, &FastmathAttr);
                *((void *)v134 + v4) = (char *)v8 - 16;
                goto LABEL_4;
              }
              AttrDictionary = (void *)a2;
              unint64_t v130 = *(void **)(*(void *)(a2 + 72) + 32 * v4 + 24);
              uint64_t Input = (char *)mlir::Value::getDefiningOp((mlir::Value *)&v130);
              uint64_t Axis = mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&Input);
              if ((Axis & 0xFF00000000) == 0) {
                goto LABEL_4;
              }
              uint64_t v44 = (int)Axis;
              if ((Axis & 0x80000000) == 0)
              {
                unint64_t v130 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*((void *)Input - 1) & 0xFFFFFFFFFFFFFFF8));
                uint64_t v131 = v83;
                if (!v130 || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v130) & 1) == 0) {
                  goto LABEL_4;
                }
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v130);
                v44 -= v84;
              }
              if (v44 <= -3) {
                goto LABEL_44;
              }
              if (v4) {
                uint64_t v85 = -1;
              }
              else {
                uint64_t v85 = -2;
              }
              if (v4)
              {
                BOOL TransposeRhs = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&AttrDictionary);
                uint64_t v87 = -2;
              }
              else
              {
                BOOL TransposeRhs = mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&AttrDictionary);
                uint64_t v87 = -1;
              }
              if (!TransposeRhs) {
                uint64_t v87 = v85;
              }
              BOOL v13 = v87 == v44;
              uint64_t v44 = v85;
              if (v13) {
                goto LABEL_44;
              }
            }
          }
        }
      }
    }
LABEL_4:
    ++v4;
  }
  if (v141)
  {
    uint64_t v88 = *(void *)(a2 + 24);
    uint64_t v89 = *(unsigned int *)(a2 + 36);
    uint64_t v90 = a2 - 16;
    if (!v89) {
      uint64_t v90 = 0;
    }
    AttrDictionary = (void *)v90;
    uint64_t v128 = v89;
    mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, (uint64_t *)&v130);
    if (*(unsigned char *)(a2 + 47))
    {
      AttrDictionary = (void *)mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
      p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
    }
    else
    {
      p_AttrDictionary = (mlir::ArrayAttr *)(a2 + 56);
    }
    AttrDictionary = (void *)mlir::ArrayAttr::getValue(p_AttrDictionary);
    uint64_t v128 = v93;
    unint64_t v94 = (char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>(v5, v88, (uint64_t *)&v130, (uint64_t)&v134, (uint64_t)&AttrDictionary)- 16;
    uint64_t Input = v94;
    AttrDictionary = (void *)mlir::getElementTypeOrSelf((uint64_t)v94);
    if (v141 && v138)
    {
      uint64_t v95 = v140;
      uint64_t v96 = v137;
      char v97 = &v140[v141];
      uint64_t v98 = &v137[8 * v138];
      do
      {
        uint64_t v125 = *v95;
        uint64_t v99 = *(void *)v96;
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v125);
        if (AttrDictionary != (void *)ElementTypeOrSelf)
        {
          uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v125);
          uint64_t v125 = (uint64_t)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>((mlir::UnknownLoc **)v5, Loc, &v125, (uint64_t *)&AttrDictionary)- 16;
        }
        if (v99 != -1)
        {
          unsigned int v102 = 0;
          unint64_t v130 = v132;
          uint64_t v131 = 0x500000000;
          uint64_t v103 = v99 + 1;
          do
          {
            if (v102 >= HIDWORD(v131))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v102 + 1, 8);
              unsigned int v102 = v131;
            }
            *((void *)v130 + v102) = v103;
            unsigned int v102 = v131 + 1;
            LODWORD(v131) = v131 + 1;
          }
          while (!__CFADD__(v103++, 1));
          uint64_t v105 = mlir::Value::getLoc((mlir::Value *)&v125);
          uint64_t InputAttributeNames = v131;
          uint64_t IntegerType = mlir::Builder::getIntegerType(v5, 0x40u, 1);
          unint64_t v107 = (void *)mlir::RankedTensorType::get((uint64_t)&InputAttributeNames, 1, IntegerType, 0);
          unint64_t v108 = v107;
          if (!v107) {
            goto LABEL_126;
          }
          uint64_t v109 = *v107;
          unint64_t v110 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v111 = *(unsigned int *)(v109 + 16);
          if (!v111) {
            goto LABEL_126;
          }
          uint64_t v112 = *(void **)(v109 + 8);
          uint64_t v113 = &v112[2 * v111];
          do
          {
            unint64_t v114 = v111 >> 1;
            unint64_t v115 = &v112[2 * (v111 >> 1)];
            unint64_t v117 = *v115;
            uint64_t v116 = v115 + 2;
            v111 += ~(v111 >> 1);
            if (v117 < v110) {
              uint64_t v112 = v116;
            }
            else {
              unint64_t v111 = v114;
            }
          }
          while (v111);
          if (v112 != v113 && *v112 == v110) {
            uint64_t v118 = v112[1];
          }
          else {
LABEL_126:
          }
            uint64_t v118 = 0;
          uint64_t Bias = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v108, v118, v130, 8 * v131, 8, 1, 1);
          uint64_t v124 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v5, v105, &Bias)
               - 16;
          uint64_t v125 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::Value &>(v5, *(void *)(a2 + 24), &v125, &v124)- 16;
          if (v130 != v132) {
            free(v130);
          }
        }
        uint64_t v119 = mlir::Value::getLoc((mlir::Value *)&v125);
        unint64_t v94 = (char *)mlir::OpBuilder::create<mlir::mps::MultiplyOp,mlir::Value,mlir::Value&>((mlir::Float32Type **)v5, v119, (uint64_t *)&Input, &v125)- 16;
        uint64_t Input = v94;
        if (++v95 == v97) {
          break;
        }
        v96 += 8;
      }
      while (v96 != v98);
    }
    unint64_t v130 = v94;
    uint64_t v92 = 1;
    mlir::ValueRange::ValueRange(v129, (uint64_t)&v130, 1uLL);
    (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)a3 + 24))(a3, a2, v129[0], v129[1]);
  }
  else
  {
    uint64_t v92 = 0;
  }
  if (v134 != v136) {
    free(v134);
  }
  if (v137 != v139) {
    free(v137);
  }
  if (v140 != v142) {
    free(v140);
  }
  return v92;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.matmul", (const unsigned __int8 *)0xA, Context);
  if (!v12)
  {
    __int16 v26 = 1283;
    void v25[2] = (uint64_t)"mps.matmul";
    v25[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v21 = 259;
    llvm::operator+(v25, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  NextResultAtunsigned int Offset = *a3;
  uint64_t v14 = a3[1];
  uint64_t v15 = a3[3];
  if (v14) {
    NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v14);
  }
  mlir::ValueRange::ValueRange((unint64_t *)v25, NextResultAtOffset, v15 - v14);
  mlir::TypeRange::TypeRange(v23, v25[0], v25[1]);
  mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(void *)(a5 + 8));
  uint64_t v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id) {
    unint64_t v17 = v16;
  }
  else {
    unint64_t v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v17;
}

void *mlir::mps::anonymous namespace'::ConditionallyCanonicalizeQuantizedOp<mlir::mps::MatMulOp>::~ConditionallyCanonicalizeQuantizedOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::ConditionallyCanonicalizeQuantizedOp<mlir::mps::MatMulOp>::~ConditionallyCanonicalizeQuantizedOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::ConditionallyCanonicalizeQuantizedOp<mlir::mps::MatMulOp>::matchAndRewrite(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t *)(*(a2 - 1) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = *v6;
  unint64_t v8 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v9 = *(unsigned int *)(v7 + 16);
  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v10 = *(void **)(v7 + 8);
  uint64_t v11 = &v10[2 * v9];
  do
  {
    unint64_t v12 = v9 >> 1;
    BOOL v13 = &v10[2 * (v9 >> 1)];
    unint64_t v15 = *v13;
    uint64_t v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8) {
      uint64_t v10 = v14;
    }
    else {
      unint64_t v9 = v12;
    }
  }
  while (v9);
  if (v10 != v11 && *v10 == v8) {
    uint64_t v16 = v10[1];
  }
  else {
LABEL_10:
  }
    uint64_t v16 = 0;
  v112[0] = v6;
  v112[1] = v16;
  unint64_t v17 = (uint64_t *)(*(void *)(*(void *)(a2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v17) {
    goto LABEL_20;
  }
  uint64_t v18 = *v17;
  unint64_t v19 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v20 = *(unsigned int *)(v18 + 16);
  if (!v20) {
    goto LABEL_20;
  }
  __int16 v21 = *(void **)(v18 + 8);
  __int16 v22 = &v21[2 * v20];
  do
  {
    unint64_t v23 = v20 >> 1;
    unint64_t v24 = &v21[2 * (v20 >> 1)];
    unint64_t v26 = *v24;
    uint64_t v25 = v24 + 2;
    v20 += ~(v20 >> 1);
    if (v26 < v19) {
      __int16 v21 = v25;
    }
    else {
      unint64_t v20 = v23;
    }
  }
  while (v20);
  if (v21 != v22 && *v21 == v19) {
    uint64_t v27 = v21[1];
  }
  else {
LABEL_20:
  }
    uint64_t v27 = 0;
  v111[0] = v17;
  v111[1] = v27;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v112))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v112);
    if (v28 < 1)
    {
      LODWORD(v30) = 1;
    }
    else
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v112);
      uint64_t v30 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v112)
                      + 8 * (v29 - 1));
    }
  }
  else
  {
    LODWORD(v30) = 0;
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v112))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v112);
    if (v31 < 2)
    {
      LODWORD(v33) = 1;
    }
    else
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v112);
      uint64_t v33 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v112)
                      + 8 * (v32 - 2));
    }
  }
  else
  {
    LODWORD(v33) = 0;
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v112))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v112);
    if (v34 < 3)
    {
      LODWORD(v36) = 1;
    }
    else
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v112);
      uint64_t v36 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v112)
                      + 8 * (v35 - 3));
    }
  }
  else
  {
    LODWORD(v36) = 0;
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v111))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v111);
    if (v37 < 1)
    {
      LODWORD(v39) = 1;
    }
    else
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v111);
      uint64_t v39 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v111)
                      + 8 * (v38 - 1));
    }
  }
  else
  {
    LODWORD(v39) = 0;
  }
  BOOL v41 = v33 < 0x11 || v30 < 0x11;
    goto LABEL_48;
  uint64_t ElementTypeOrSelf = *(void **)(a2[9] + 56);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp) {
    goto LABEL_78;
  }
  uint64_t v44 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v45 = v44 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
  uint64_t v46 = v44 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? DefiningOp : 0;
  uint64_t v113 = v46;
  if (!v45) {
    goto LABEL_78;
  }
  unint64_t v47 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v113) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v47) {
    goto LABEL_64;
  }
  uint64_t v48 = *v47;
  unint64_t v49 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v50 = *(unsigned int *)(v48 + 16);
  if (!v50) {
    goto LABEL_64;
  }
  unint64_t v51 = *(void **)(v48 + 8);
  unint64_t v52 = &v51[2 * v50];
  do
  {
    unint64_t v53 = v50 >> 1;
    unint64_t v54 = &v51[2 * (v50 >> 1)];
    unint64_t v56 = *v54;
    uint64_t v55 = v54 + 2;
    v50 += ~(v50 >> 1);
    if (v56 < v49) {
      unint64_t v51 = v55;
    }
    else {
      unint64_t v50 = v53;
    }
  }
  while (v50);
  if (v51 != v52 && *v51 == v49) {
    uint64_t v57 = v51[1];
  }
  else {
LABEL_64:
  }
    uint64_t v57 = 0;
  uint64_t ElementTypeOrSelf = v47;
  v115[0] = v57;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&ElementTypeOrSelf)
    && ((mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf), v58 < 1)
      ? (unsigned int v59 = 1)
      : (unsigned int v59 = *(_DWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf)),
        (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf), v60 <= 1)
      ? (unsigned int v61 = 1)
      : (unsigned int v61 = *(_DWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf)
                         + 8)),
        ((unsigned int v62 = v30 / v61, v62 == 1) || (v62 & 3) == 0)
     && (v39 / v59 == 1 || ((v39 / v59) & 3) == 0)))
  {
LABEL_48:
  }
  else
  {
LABEL_78:
    int isScaleZpMinDimMatching = 0;
  }
    goto LABEL_151;
  uint64_t ElementTypeOrSelf = *(void **)(a2[9] + 56);
  uint64_t v63 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v63) {
    goto LABEL_85;
  }
  unint64_t v64 = *(void **)(*(void *)(v63 + 48) + 16);
  BOOL v65 = v64 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
  uint64_t v66 = v64 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? v63 : 0;
  uint64_t v113 = v66;
  if (!v65) {
    goto LABEL_85;
  }
  uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v113);
  uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf(Input);
  if (!mlir::Type::isSignedInteger((mlir::Type *)&ElementTypeOrSelf, 8)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&ElementTypeOrSelf, 8))
  {
    goto LABEL_85;
  }
  uint64_t ElementTypeOrSelf = *(void **)(a2[9] + 24);
  uint64_t v73 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (v73)
  {
    if (*(_UNKNOWN **)(*(void *)(v73 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id) {
      goto LABEL_85;
    }
  }
  uint64_t v113 = mlir::getElementTypeOrSelf((uint64_t)ElementTypeOrSelf);
  if (!mlir::Type::isF16((mlir::Type *)&v113)) {
    goto LABEL_85;
  }
  uint64_t ElementTypeOrSelf = *(void **)(a2[9] + 56);
  uint64_t v74 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v74) {
    goto LABEL_85;
  }
  unint64_t v75 = *(void **)(*(void *)(v74 + 48) + 16);
  BOOL v76 = v75 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
  uint64_t v77 = v75 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? v74 : 0;
  uint64_t v113 = v77;
  if (!v76) {
    goto LABEL_85;
  }
  uint64_t v78 = *(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v113) + 8);
  unint64_t v79 = (uint64_t *)(v78 & 0xFFFFFFFFFFFFFFF8);
  if ((v78 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v110 = v78 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v80 = *v79;
    unint64_t v81 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v82 = *(unsigned int *)(v80 + 16);
    if (!v82) {
      goto LABEL_111;
    }
    uint64_t v83 = *(void **)(v80 + 8);
    uint64_t v84 = &v83[2 * v82];
    do
    {
      unint64_t v85 = v82 >> 1;
      uint64_t v86 = &v83[2 * (v82 >> 1)];
      unint64_t v88 = *v86;
      uint64_t v87 = v86 + 2;
      v82 += ~(v82 >> 1);
      if (v88 < v81) {
        uint64_t v83 = v87;
      }
      else {
        unint64_t v82 = v85;
      }
    }
    while (v82);
    if (v83 != v84 && *v83 == v81) {
      uint64_t v89 = v83[1];
    }
    else {
LABEL_111:
    }
      uint64_t v89 = 0;
    unint64_t v79 = (uint64_t *)v110;
  }
  else
  {
    uint64_t v89 = 0;
  }
  uint64_t ElementTypeOrSelf = v79;
  v115[0] = v89;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&ElementTypeOrSelf) & 1) == 0) {
    goto LABEL_85;
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&ElementTypeOrSelf)
    && ((mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf), v90 < 1)
     || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf),
         *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf)
                                 + 8 * (v91 - 1)) == 1))
    && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&ElementTypeOrSelf))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf);
    if (v92 < 2)
    {
      BOOL v94 = 1;
    }
    else
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf);
      BOOL v94 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf)
                      + 8 * (v93 - 2)) == 1;
    }
  }
  else
  {
    BOOL v94 = 0;
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&ElementTypeOrSelf))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf);
    if (v95 < 1)
    {
      LODWORD(v97) = 1;
    }
    else
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf);
      uint64_t v97 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf)
                      + 8 * (v96 - 1));
    }
  }
  else
  {
    LODWORD(v97) = 0;
  }
  if (v97 == v30
    && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&ElementTypeOrSelf))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf);
    if (v98 <= 1) {
      goto LABEL_134;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf);
    BOOL v100 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf)
                     + 8 * (v99 - 2)) == 1;
  }
  else
  {
    BOOL v100 = 0;
  }
  if (!v94 && !v100) {
    goto LABEL_85;
  }
LABEL_134:
  uint64_t ElementTypeOrSelf = *(void **)(a2[9] + 56);
  uint64_t v101 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (v101
    && ((unsigned int v102 = *(void **)(*(void *)(v101 + 48) + 16),
         BOOL v103 = v102 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id,
         v102 != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
      ? (uint64_t v104 = 0)
      : (uint64_t v104 = v101),
        (uint64_t v113 = v104, v103)
     && (uint64_t SparseShape = (unint64_t *)mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v113),
         !mlir::isConstantFPZero(SparseShape)))
    || (uint64_t ElementTypeOrSelf = a2,
        mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&ElementTypeOrSelf))
    || !mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&ElementTypeOrSelf))
  {
LABEL_85:
    int v67 = 0;
    if (v41 & isScaleZpMinDimMatching) {
      goto LABEL_151;
    }
    goto LABEL_86;
  }
  if ((v39 & 7) != 0) {
    int v67 = 0;
  }
  else {
    int v67 = v106;
  }
  if ((v30 & 0x1F) != 0) {
    int v67 = 0;
  }
  if (v36 >= 2) {
    int v67 = 0;
  }
  if (v41 & isScaleZpMinDimMatching)
  {
LABEL_151:
    unint64_t v107 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8;
    int v108 = *(_DWORD *)(a1 + 96);
    mlir::PatternBenefit::PatternBenefit(&v113, 2);
    mlir::Pattern::Pattern((uint64_t)v115, (uint64_t)"mps.matmul", 10, v113, v107, 0, 0);
    uint64_t ElementTypeOrSelf = &unk_1EC9C9378;
    int v119 = v108;
    if (v118 != &v119) {
      free(v118);
    }
    uint64_t v71 = v116;
    if (v116 != v117) {
      goto LABEL_154;
    }
    return v70;
  }
LABEL_86:
  if (v67) {
    goto LABEL_151;
  }
  unint64_t v68 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8;
  mlir::PatternBenefit::PatternBenefit(&v113, 2);
  uint64_t v69 = mlir::Pattern::Pattern((uint64_t)v115, (uint64_t)"mps.matmul", 10, v113, v68, 0, 0);
  uint64_t ElementTypeOrSelf = &unk_1EC9C9FD8;
  if (v118 != &v119) {
    free(v118);
  }
  uint64_t v71 = v116;
  if (v116 != v117) {
LABEL_154:
  }
    free(v71);
  return v70;
}

uint64_t mlir::mps::anonymous namespace'::ConditionallyCanonicalizeQuantizedOp<mlir::mps::MatMulOp>::isWeights4Bit(uint64_t a1)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 56);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v7);
  if (result)
  {
    uint64_t v2 = *(void **)(*(void *)(result + 48) + 16);
    BOOL v3 = v2 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
    if (v2 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id) {
      uint64_t v4 = result;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v7 = v4;
    if (v3)
    {
      uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v7);
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(Input);
      return mlir::Type::isSignedInteger((mlir::Type *)&ElementTypeOrSelf, 4)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&ElementTypeOrSelf, 4);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::mps::anonymous namespace'::ConditionallyCanonicalizeQuantizedOp<mlir::mps::MatMulOp>::isScaleZpMinDimMatching(uint64_t a1, int a2)
{
  v90[0] = *(void *)(*(void *)(a1 + 72) + 56);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v90);
  if (!DefiningOp) {
    return 0;
  }
  uint64_t v4 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v5 = v4 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
  uint64_t v6 = v4 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? DefiningOp : 0;
  uint64_t v91 = v6;
  if (!v5) {
    return 0;
  }
  uint64_t v7 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v91) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v8 = *v7;
  unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v10 = *(unsigned int *)(v8 + 16);
  if (!v10) {
    goto LABEL_16;
  }
  uint64_t v11 = *(void **)(v8 + 8);
  unint64_t v12 = &v11[2 * v10];
  do
  {
    unint64_t v13 = v10 >> 1;
    uint64_t v14 = &v11[2 * (v10 >> 1)];
    unint64_t v16 = *v14;
    unint64_t v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9) {
      uint64_t v11 = v15;
    }
    else {
      unint64_t v10 = v13;
    }
  }
  while (v10);
  if (v11 != v12 && *v11 == v9) {
    uint64_t v17 = v11[1];
  }
  else {
LABEL_16:
  }
    uint64_t v17 = 0;
  v90[0] = v7;
  v90[1] = v17;
  uint64_t v18 = (uint64_t *)(*(void *)(mlir::anec::GOC::getBias((mlir::anec::GOC *)&v91) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v18) {
    goto LABEL_26;
  }
  uint64_t v19 = *v18;
  unint64_t v20 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v21 = *(unsigned int *)(v19 + 16);
  if (!v21) {
    goto LABEL_26;
  }
  __int16 v22 = *(void **)(v19 + 8);
  unint64_t v23 = &v22[2 * v21];
  do
  {
    unint64_t v24 = v21 >> 1;
    uint64_t v25 = &v22[2 * (v21 >> 1)];
    unint64_t v27 = *v25;
    unint64_t v26 = v25 + 2;
    v21 += ~(v21 >> 1);
    if (v27 < v20) {
      __int16 v22 = v26;
    }
    else {
      unint64_t v21 = v24;
    }
  }
  while (v21);
  if (v22 != v23 && *v22 == v20) {
    uint64_t v28 = v22[1];
  }
  else {
LABEL_26:
  }
    uint64_t v28 = 0;
  v89[0] = v18;
  v89[1] = v28;
  uint64_t SparseShape = (unint64_t *)mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v91);
  uint64_t v30 = (uint64_t *)(SparseShape[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v30) {
    goto LABEL_36;
  }
  uint64_t v31 = *v30;
  unint64_t v32 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v33 = *(unsigned int *)(v31 + 16);
  if (!v33) {
    goto LABEL_36;
  }
  uint64_t v34 = *(void **)(v31 + 8);
  int v35 = &v34[2 * v33];
  do
  {
    unint64_t v36 = v33 >> 1;
    uint64_t v37 = &v34[2 * (v33 >> 1)];
    unint64_t v39 = *v37;
    int v38 = v37 + 2;
    v33 += ~(v33 >> 1);
    if (v39 < v32) {
      uint64_t v34 = v38;
    }
    else {
      unint64_t v33 = v36;
    }
  }
  while (v33);
  if (v34 != v35 && *v34 == v32) {
    uint64_t v40 = v34[1];
  }
  else {
LABEL_36:
  }
    uint64_t v40 = 0;
  v88[0] = v30;
  v88[1] = v40;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v90)) {
    return 0;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89)) {
    return 0;
  }
  int v41 = a2 ^ 1;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v88) & 1) == 0 && !v41) {
    return 0;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
  if (!v42
    || (uint64_t v43 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90),
        mlir::ShapedType::getNumElements(v43, v44) == 1))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
    if (!v45
      || (uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89),
          mlir::ShapedType::getNumElements(ArgAttrsAttr, v47) == 1))
    {
        return 1;
    }
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
  if (!v49) {
    return 0;
  }
  unint64_t v50 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
  if (mlir::ShapedType::getNumElements(v50, v51) == 1) {
    return 0;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  if (!v52) {
    return 0;
  }
  unint64_t v53 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  if (mlir::ShapedType::getNumElements(v53, v54) == 1
  {
    return 0;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
  uint64_t v56 = v55;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  if (v56 <= v57) {
    uint64_t v58 = v57;
  }
  else {
    uint64_t v58 = v56;
  }
  if (v58 >= 1)
  {
    uint64_t v59 = 0;
    unsigned int v60 = 1;
    do
    {
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v90))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
        if (v61 <= v59)
        {
          LODWORD(v63) = 1;
        }
        else
        {
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
          uint64_t v63 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90)
                          + 8 * (v62 + ~v59));
        }
      }
      else
      {
        LODWORD(v63) = 0;
      }
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
        if (v64 <= v59)
        {
          LODWORD(v66) = 1;
        }
        else
        {
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
          uint64_t v66 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89)
                          + 8 * (v65 + ~v59));
        }
      }
      else
      {
        LODWORD(v66) = 0;
      }
      if (v63 != v66) {
        return 0;
      }
      uint64_t v59 = v60;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
      uint64_t v68 = v67;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
      if (v68 <= v69) {
        uint64_t v70 = v69;
      }
      else {
        uint64_t v70 = v68;
      }
      ++v60;
    }
    while (v70 > v59);
  }
  if ((mlir::isConstantFPZero(SparseShape) | v41)) {
    return 1;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
  uint64_t v72 = v71;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
  uint64_t v74 = v72 <= v73 ? v73 : v72;
  if (v74 < 1) {
    return 1;
  }
  uint64_t v75 = 0;
  unsigned int v76 = 1;
  do
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v90))
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
      if (v77 <= v75)
      {
        LODWORD(v79) = 1;
      }
      else
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
        uint64_t v79 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90)
                        + 8 * (v78 + ~v75));
      }
    }
    else
    {
      LODWORD(v79) = 0;
    }
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v88))
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
      if (v80 <= v75)
      {
        LODWORD(v82) = 1;
      }
      else
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
        uint64_t v82 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88)
                        + 8 * (v81 + ~v75));
      }
    }
    else
    {
      LODWORD(v82) = 0;
    }
    BOOL v5 = v79 == v82;
    BOOL v48 = v79 == v82;
    if (!v5) {
      break;
    }
    uint64_t v75 = v76;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
    uint64_t v84 = v83;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
    uint64_t v86 = v84 <= v85 ? v85 : v84;
    ++v76;
  }
  while (v86 > v75);
  return v48;
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeQuantizedOp<mlir::mps::MatMulOp>::matchAndRewrite(uint64_t a1, void *a2, uint64_t a3)
{
  void v47[2] = *MEMORY[0x1E4F143B8];
  v30[0] = 0;
  memset(&v30[8], 0, 64);
  v29[0] = 0;
  memset(&v29[8], 0, 64);
  {
    return 0;
  }
  uint64_t v27 = a1;
  uint64_t v28 = a3;
  uint64_t v8 = 0;
  long long v40 = *(_OWORD *)&v30[32];
  long long v41 = *(_OWORD *)&v30[48];
  long long v38 = *(_OWORD *)v30;
  long long v39 = *(_OWORD *)&v30[16];
  long long v44 = *(_OWORD *)&v29[16];
  long long v45 = *(_OWORD *)&v29[32];
  long long v46 = *(_OWORD *)&v29[48];
  unsigned int v9 = 2;
  uint64_t v42 = *(void *)&v30[64];
  v47[0] = *(void *)&v29[64];
  long long v43 = *(_OWORD *)v29;
  do
  {
    if (*(void *)((char *)&v38 + v8 + 16)) {
      ++v9;
    }
    if (*(void *)((char *)&v39 + v8 + 8))
    {
      uint64_t ElementTypeOrSelf = *(void *)((char *)&v39 + v8 + 8);
      uint64_t DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
      if (!DefiningOp)
      {
        ++v9;
        goto LABEL_25;
      }
      unsigned int v32 = 1;
      __p = 0;
      p_p = &__p;
      int v11 = mlir::detail::constant_int_value_binder::match((mlir::detail::constant_int_value_binder *)&p_p, DefiningOp);
      unsigned int v12 = v32;
      if (v11)
      {
        if (v32 >= 0x41)
        {
          if (v12 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) >= 0x41)
          {
            BOOL v14 = 0;
            unint64_t v15 = __p;
            if (!__p) {
              goto LABEL_24;
            }
            goto LABEL_23;
          }
          unint64_t v13 = __p;
        }
        else
        {
          unint64_t v13 = &__p;
        }
        BOOL v14 = *v13 == 0;
        if (v12 < 0x41)
        {
LABEL_24:
          v9 += !v14;
          goto LABEL_25;
        }
      }
      else
      {
        BOOL v14 = 0;
        if (v32 < 0x41) {
          goto LABEL_24;
        }
      }
      unint64_t v15 = __p;
      if (__p)
      {
LABEL_23:
        operator delete[](v15);
        goto LABEL_24;
      }
      goto LABEL_24;
    }
LABEL_25:
    unint64_t v16 = *(unint64_t **)((char *)&v40 + v8);
    if (v16) {
      v9 += !mlir::isConstantFPZero(v16);
    }
    if (*(void *)((char *)&v40 + v8 + 8)) {
      unsigned int v17 = v9 + 1;
    }
    else {
      unsigned int v17 = v9;
    }
    if (*(void *)((char *)&v41 + v8)) {
      unsigned int v9 = v17 + 1;
    }
    else {
      unsigned int v9 = v17;
    }
    if (*(void *)((char *)&v41 + v8 + 8))
    {
      uint64_t ElementTypeOrSelf = *(void *)((char *)&v41 + v8 + 8);
      uint64_t v18 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
      if (v18)
      {
        unsigned int v32 = 1;
        __p = 0;
        p_p = &__p;
        int v19 = mlir::detail::constant_int_value_binder::match((mlir::detail::constant_int_value_binder *)&p_p, v18);
        unsigned int v20 = v32;
        if (v19)
        {
          if (v32 < 0x41)
          {
            unint64_t v21 = &__p;
            goto LABEL_43;
          }
          if (v20 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) >= 0x41)
          {
            BOOL v22 = 0;
            unint64_t v23 = __p;
            if (__p) {
LABEL_45:
            }
              operator delete[](v23);
          }
          else
          {
            unint64_t v21 = __p;
LABEL_43:
            BOOL v22 = *v21 == 0;
            if (v20 >= 0x41)
            {
LABEL_44:
              unint64_t v23 = __p;
              if (__p) {
                goto LABEL_45;
              }
            }
          }
        }
        else
        {
          BOOL v22 = 0;
          if (v32 >= 0x41) {
            goto LABEL_44;
          }
        }
        v9 += !v22;
        goto LABEL_8;
      }
      ++v9;
    }
LABEL_8:
    v8 += 72;
  }
  while (v8 != 144);
  if (v9 <= *(_DWORD *)(v27 + 96))
  {
    long long v40 = *(_OWORD *)&v30[32];
    long long v41 = *(_OWORD *)&v30[48];
    long long v38 = *(_OWORD *)v30;
    long long v39 = *(_OWORD *)&v30[16];
    long long v44 = *(_OWORD *)&v29[16];
    long long v45 = *(_OWORD *)&v29[32];
    long long v46 = *(_OWORD *)&v29[48];
    uint64_t v42 = *(void *)&v30[64];
    v47[0] = *(void *)&v29[64];
    long long v43 = *(_OWORD *)v29;
    __p = a2;
    uint64_t v25 = a2[3];
    uint64_t v26 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&__p);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(v26 + 8) & 0xFFFFFFFFFFFFFFF8));
    BOOL IsNegated = mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&__p);
    BOOL TransposeRhs = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&__p);
    p_p = mlir::OpBuilder::create<mlir::mpsx::QuantizedMatMulOp,mlir::Value,mlir::Value&,mlir::Value&,mlir::Value&,mlir::IntegerAttr &,mlir::Value&,mlir::Value&,mlir::Value&,mlir::Value&,mlir::IntegerAttr &,mlir::Value,mlir::detail::TypedValue<mlir::RankedTensorType>,mlir::detail::TypedValue<mlir::RankedTensorType>,mlir::Type,BOOL,BOOL>((mlir::MLIRContext **)(v28 + 8), v25, (uint64_t *)&v38 + 1, (uint64_t *)&v39, (uint64_t *)&v39 + 1, (uint64_t *)&v40, &v42, (uint64_t *)&v43 + 1, (uint64_t *)&v44, (uint64_t *)&v44 + 1, (uint64_t *)&v45, v47, (uint64_t *)&v45 + 1, (uint64_t *)&v46, (uint64_t *)&v46 + 1, &ElementTypeOrSelf, (unsigned __int8 *)&IsNegated, (unsigned __int8 *)&TransposeRhs);
    *(void *)&long long v38 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&p_p);
    uint64_t v6 = 1;
    mlir::ValueRange::ValueRange(v37, (uint64_t)&v38, 1uLL);
    (*(void (**)(uint64_t, void *, unint64_t, unint64_t))(*(void *)v28 + 24))(v28, a2, v37[0], v37[1]);
    return v6;
  }
  *(void *)&long long v38 = "failed: quantized op requires more inputs than what is supported by the MPS kernel.";
  LOWORD(v40) = 259;
  __p = &v38;
  uint64_t v24 = *(void *)(v28 + 16);
  if (v24 && mlir::RewriterBase::Listener::classof(*(void *)(v28 + 16))) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v24 + 64))(v24, a2[3], llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MatMulOp &>(mlir::mps::MatMulOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__p);
  }
  return 0;
}

void *mlir::mps::anonymous namespace'::CanonicalizeQuantizedOp<mlir::mps::MatMulOp>::~CanonicalizeQuantizedOp(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  BOOL v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

BOOL mlir::mps::anonymous namespace'::ConditionallyCanonicalizeQuantizedOp<mlir::mps::MatMulOp>::isScaleZpMinDimMatching(mlir::mps::MatMulOp,BOOL)::{lambda(mlir::ShapedType const&)#1}::operator()(mlir::CallableOpInterface *a1)
{
  mlir::CallableOpInterface::getArgAttrsAttr(a1);
  if (!v2) {
    return 1;
  }
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr(a1);
  return mlir::ShapedType::getNumElements(ArgAttrsAttr, v4) == 1;
}

void mlir::mps::anonymous namespace'::CanonicalizeQuantizedOp<mlir::mps::MatMulOp>::~CanonicalizeQuantizedOp(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  BOOL v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeQuantizedOp<mlir::mps::MatMulOp>::getQuantizationInfos(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v77 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v77);
  if (DefiningOp)
  {
    uint64_t v8 = *(void **)(*(void *)(DefiningOp + 48) + 16);
    BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::mps::TransposeOp,void>::id;
    uint64_t v10 = v8 == &mlir::detail::TypeIDResolver<mlir::mps::TransposeOp,void>::id ? DefiningOp : 0;
    int v78 = (void *)v10;
    if (v9)
    {
      uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v78);
      uint64_t v20 = mlir::Value::getDefiningOp((mlir::Value *)&Input);
      if (v20)
      {
        unint64_t v21 = *(void **)(*(void *)(v20 + 48) + 16);
        if (v21 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id
          || v21 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeLUTOp,void>::id)
        {
          return 0;
        }
      }
    }
  }
  uint64_t v11 = mlir::Value::getDefiningOp((mlir::Value *)&v77);
  if (!v11
    || ((unsigned int v12 = *(void **)(*(void *)(v11 + 48) + 16),
         BOOL v13 = v12 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id,
         v12 != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
      ? (uint64_t v14 = 0)
      : (uint64_t v14 = v11),
        uint64_t Input = v14,
        !v13))
  {
    if (a3
      && (uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)&v77)) != 0
      && ((unint64_t v16 = *(void **)(*(void *)(v15 + 48) + 16),
           BOOL v17 = v16 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeLUTOp,void>::id,
           v16 != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeLUTOp,void>::id)
        ? (uint64_t v18 = 0)
        : (uint64_t v18 = v15),
          int v78 = (void *)v18,
          v17))
    {
      uint64_t v19 = 1;
      *(unsigned char *)a2 = 1;
      *(void *)(a2 + 8) = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v78);
      *(void *)(a2 + 40) = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v78);
      *(void *)(a2 + 64) = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v78);
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(void *)(a2 + 8) = v77;
      return 1;
    }
    return v19;
  }
  unint64_t v23 = (void *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Input) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v23) {
    goto LABEL_34;
  }
  uint64_t v24 = *v23;
  unint64_t v25 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v26 = *(unsigned int *)(v24 + 16);
  if (!v26) {
    goto LABEL_34;
  }
  uint64_t v27 = *(void **)(v24 + 8);
  uint64_t v28 = &v27[2 * v26];
  do
  {
    unint64_t v29 = v26 >> 1;
    uint64_t v30 = &v27[2 * (v26 >> 1)];
    unint64_t v32 = *v30;
    uint64_t v31 = v30 + 2;
    v26 += ~(v26 >> 1);
    if (v32 < v25) {
      uint64_t v27 = v31;
    }
    else {
      unint64_t v26 = v29;
    }
  }
  while (v26);
  if (v27 != v28 && *v27 == v25) {
    uint64_t v33 = v27[1];
  }
  else {
LABEL_34:
  }
    uint64_t v33 = 0;
  int v78 = v23;
  uint64_t v79 = v33;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v78) & 1) == 0) {
    return 0;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v78);
  if (v34 > 3) {
    return 0;
  }
  int v35 = (void *)(*(void *)(mlir::anec::GOC::getBias((mlir::anec::GOC *)&Input) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v35) {
    goto LABEL_46;
  }
  uint64_t v36 = *v35;
  unint64_t v37 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v38 = *(unsigned int *)(v36 + 16);
  if (!v38) {
    goto LABEL_46;
  }
  long long v39 = *(void **)(v36 + 8);
  long long v40 = &v39[2 * v38];
  do
  {
    unint64_t v41 = v38 >> 1;
    uint64_t v42 = &v39[2 * (v38 >> 1)];
    unint64_t v44 = *v42;
    long long v43 = v42 + 2;
    v38 += ~(v38 >> 1);
    if (v44 < v37) {
      long long v39 = v43;
    }
    else {
      unint64_t v38 = v41;
    }
  }
  while (v38);
  if (v39 != v40 && *v39 == v37) {
    uint64_t v45 = v39[1];
  }
  else {
LABEL_46:
  }
    uint64_t v45 = 0;
  int v78 = v35;
  uint64_t v79 = v45;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v78) & 1) == 0) {
    return 0;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v78);
  if (v46 > 3) {
    return 0;
  }
  uint64_t v47 = (void *)(*(void *)(mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&Input)
                             + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v47) {
    goto LABEL_58;
  }
  uint64_t v48 = *v47;
  unint64_t v49 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v50 = *(unsigned int *)(v48 + 16);
  if (!v50) {
    goto LABEL_58;
  }
  uint64_t v51 = *(void **)(v48 + 8);
  uint64_t v52 = &v51[2 * v50];
  do
  {
    unint64_t v53 = v50 >> 1;
    uint64_t v54 = &v51[2 * (v50 >> 1)];
    unint64_t v56 = *v54;
    uint64_t v55 = v54 + 2;
    v50 += ~(v50 >> 1);
    if (v56 < v49) {
      uint64_t v51 = v55;
    }
    else {
      unint64_t v50 = v53;
    }
  }
  while (v50);
  if (v51 != v52 && *v51 == v49) {
    uint64_t v57 = v51[1];
  }
  else {
LABEL_58:
  }
    uint64_t v57 = 0;
  int v78 = v47;
  uint64_t v79 = v57;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v78) & 1) == 0) {
    return 0;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v78);
  if (v58 > 3) {
    return 0;
  }
  uint64_t v59 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Input);
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v59);
  uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&Input);
  if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(Bias)) {
    return 0;
  }
  uint64_t v19 = 1;
  *(unsigned char *)a2 = 1;
  *(void *)(a2 + 8) = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Input);
  *(void *)(a2 + 16) = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Input);
  *(void *)(a2 + 24) = mlir::anec::GOC::getBias((mlir::anec::GOC *)&Input);
  *(void *)(a2 + 32) = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&Input);
  *(void *)(a2 + 64) = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Input);
  if (a4)
  {
    uint64_t Filter = (BOOL (*)(llvm::APInt *))mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Input);
    uint64_t v63 = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
    if (v63)
    {
      uint64_t v64 = *(void **)(*(void *)(v63 + 48) + 16);
      BOOL v65 = v64 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
      uint64_t v66 = v64 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? v63 : 0;
      int v78 = (void *)v66;
      if (v65)
      {
        uint64_t v67 = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v78);
          return 0;
        uint64_t v68 = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v78);
          return 0;
        uint64_t SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v78);
          return 0;
        uint64_t v70 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v78);
        uint64_t v71 = mlir::getElementTypeOrSelf(v70);
        uint64_t v72 = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v78);
        if (v71 != mlir::getElementTypeOrSelf(v72)) {
          return 0;
        }
        *(void *)(a2 + 16) = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v78);
        *(void *)(a2 + 48) = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v78);
        *(void *)(a2 + 56) = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v78);
        uint64_t v73 = (unint64_t *)mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v78);
        if (!mlir::isConstantFPZero(v73)) {
          return 0;
        }
        uint64_t v74 = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v78);
        uint64_t Filter = mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke;
        if ((mlir::matchPattern<mlir::detail::constant_int_predicate_matcher>(v74, (uint64_t (**)(void **))&Filter) & 1) == 0)return 0; {
      }
        }
    }
  }
  return v19;
}

uint64_t mlir::matchPattern<mlir::detail::constant_int_predicate_matcher>(uint64_t a1, uint64_t (**a2)(void **))
{
  uint64_t v6 = a1;
  uint64_t DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v6);
  if (!DefiningOp) {
    return 0;
  }
  unsigned int v9 = 1;
  p_p = &__p;
  __p = 0;
  if (mlir::detail::constant_int_value_binder::match((mlir::detail::constant_int_value_binder *)&p_p, DefiningOp))uint64_t v4 = (*a2)(&__p); {
  else
  }
    uint64_t v4 = 0;
  if (v9 >= 0x41 && __p) {
    operator delete[](__p);
  }
  return v4;
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeQuantizedOp<mlir::mps::MatMulOp>::getQuantizationInfos(mlir::Value,mlir::mps::anonymous namespace'::CanonicalizeQuantizedOp<mlir::mps::MatMulOp>::OperandQuantizationInfos &,BOOL,BOOL)const::{lambda(mlir::Value)#1}::operator()(uint64_t a1)
{
  v1 = (uint64_t *)(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v1) {
    goto LABEL_10;
  }
  uint64_t v2 = *v1;
  unint64_t v3 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v4 = *(unsigned int *)(v2 + 16);
  if (!v4) {
    goto LABEL_10;
  }
  BOOL v5 = *(void **)(v2 + 8);
  uint64_t v6 = &v5[2 * v4];
  do
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = &v5[2 * (v4 >> 1)];
    unint64_t v10 = *v8;
    unsigned int v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3) {
      BOOL v5 = v9;
    }
    else {
      unint64_t v4 = v7;
    }
  }
  while (v4);
  if (v5 != v6 && *v5 == v3) {
    uint64_t v11 = v5[1];
  }
  else {
LABEL_10:
  }
    uint64_t v11 = 0;
  v14[0] = v1;
  v14[1] = v11;
  uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v14);
  if (result)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v14);
    return v13 < 4;
  }
  return result;
}

void mlir::mps::anonymous namespace'::CanonicalizeMatMulNNToNT::~CanonicalizeMatMulNNToNT(mlir::mps::_anonymous_namespace_::CanonicalizeMatMulNNToNT *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeMatMulNNToNT::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a2;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = (uint64_t **)&v12;
  v10[0] = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v14);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v10);
  if (result)
  {
    uint64_t result = mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v11, result);
    if (result)
    {
      unint64_t v5 = mlir::mps::foldTransposeOp(v14, v12, v13, 1);
      uint64_t result = 0;
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
        if (v6)
        {
          uint64_t result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
          v10[0] = result;
          v10[1] = v7;
          if (result)
          {
            uint64_t v8 = v14;
            unsigned int v9 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::ElementsAttr &>((mlir::OpBuilder *)(a3 + 8), *(void *)(v14 + 24), (uint64_t)v10);
            (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(void *)a3 + 32))(a3, v8, v9);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

void mlir::mps::anonymous namespace'::ReshapeConvBiasReshape::~ReshapeConvBiasReshape(mlir::mps::_anonymous_namespace_::ReshapeConvBiasReshape *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  operator delete(this);
}

uint64_t *mlir::mps::anonymous namespace'::ReshapeConvBiasReshape::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t v102 = 0;
  BOOL v103 = 0;
  v100[0] = &v103;
  v100[1] = &v102;
  uint64_t v101 = 0;
  int v99 = 0;
  v97[0] = v100;
  v97[1] = &v99;
  uint64_t v98 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  v94[0] = v97;
  v94[1] = &v96;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  v91[0] = v94;
  v91[1] = &v93;
  uint64_t Rewriter = a2;
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
    && (*(unsigned char *)(a2 + 46) & 0x80) != 0
    && *(_DWORD *)(a2 + 68) == 2)
  {
    LOBYTE(v88[0]) = 1;
    int v106 = (char *)v88;
    uint64_t v107 = (uint64_t)&Rewriter;
    mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::BiasAddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::BiasAddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::BiasAddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>((uint64_t)v91, (uint64_t)&v106);
    if (LOBYTE(v88[0]))
    {
      uint64_t v92 = (uint64_t *)Rewriter;
      uint64_t v90 = v98;
      if (!mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v90)
        && mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v90) == 2
        && mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v90) == (void *)1)
      {
        int v106 = (char *)v108;
        uint64_t v107 = 0x600000000;
        Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v90);
        uint64_t v6 = (uint64_t)Strides;
        if (!Strides) {
          goto LABEL_17;
        }
        uint64_t v7 = *Strides;
        unint64_t v8 = mlir::TypeID::get<mlir::ElementsAttr>();
        unint64_t v9 = *(unsigned int *)(v7 + 16);
        if (!v9) {
          goto LABEL_17;
        }
        unint64_t v10 = *(void **)(v7 + 8);
        uint64_t v11 = &v10[2 * v9];
        do
        {
          unint64_t v12 = v9 >> 1;
          uint64_t v13 = &v10[2 * (v9 >> 1)];
          unint64_t v15 = *v13;
          uint64_t v14 = v13 + 2;
          v9 += ~(v9 >> 1);
          if (v15 < v8) {
            unint64_t v10 = v14;
          }
          else {
            unint64_t v9 = v12;
          }
        }
        while (v9);
        if (v10 != v11 && *v10 == v8) {
          uint64_t v16 = v10[1];
        }
        else {
LABEL_17:
        }
          uint64_t v16 = 0;
        BOOL v17 = 1;
        mlir::getIntValues<unsigned long long>(v6, v16, (uint64_t)&v106, 1);
        if (v107)
        {
          uint64_t v18 = 8 * v107 - 8;
          uint64_t v19 = (uint64_t *)v106;
          do
          {
            uint64_t v20 = *v19++;
            BOOL v17 = v20 == 1;
            BOOL v21 = v20 != 1 || v18 == 0;
            v18 -= 8;
          }
          while (!v21);
        }
        if (v106 != (char *)v108) {
          free(v106);
        }
        if (v17)
        {
          int v106 = (char *)v108;
          uint64_t v107 = 0x600000000;
          uint64_t InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v90);
          uint64_t v23 = (uint64_t)InputAttributeNames;
          if (!InputAttributeNames) {
            goto LABEL_37;
          }
          uint64_t v24 = *InputAttributeNames;
          unint64_t v25 = mlir::TypeID::get<mlir::ElementsAttr>();
          unint64_t v26 = *(unsigned int *)(v24 + 16);
          if (!v26) {
            goto LABEL_37;
          }
          uint64_t v27 = *(void **)(v24 + 8);
          uint64_t v28 = &v27[2 * v26];
          do
          {
            unint64_t v29 = v26 >> 1;
            uint64_t v30 = &v27[2 * (v26 >> 1)];
            unint64_t v32 = *v30;
            uint64_t v31 = v30 + 2;
            v26 += ~(v26 >> 1);
            if (v32 < v25) {
              uint64_t v27 = v31;
            }
            else {
              unint64_t v26 = v29;
            }
          }
          while (v26);
          if (v27 != v28 && *v27 == v25) {
            uint64_t v33 = v27[1];
          }
          else {
LABEL_37:
          }
            uint64_t v33 = 0;
          BOOL v34 = 1;
          mlir::getIntValues<unsigned long long>(v23, v33, (uint64_t)&v106, 1);
          if (v107)
          {
            uint64_t v35 = 8 * v107 - 8;
            uint64_t v36 = (uint64_t *)v106;
            do
            {
              uint64_t v37 = *v36++;
              BOOL v34 = v37 == 1;
              BOOL v38 = v37 != 1 || v35 == 0;
              v35 -= 8;
            }
            while (!v38);
          }
          if (v106 != (char *)v108) {
            free(v106);
          }
          if (v34)
          {
            int PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v90);
            if ((PaddingStyle - 1) < 2 || PaddingStyle == 4) {
              goto LABEL_101;
            }
            if (!PaddingStyle)
            {
              int v106 = (char *)v108;
              uint64_t v107 = 0x600000000;
              uint64_t Rewriter = mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v90);
              long long v40 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&Rewriter);
              BOOL v41 = 1;
              mlir::getIntValues<unsigned long long>((uint64_t)v40, v42, (uint64_t)&v106, 1);
              if (v107)
              {
                uint64_t v43 = 8 * v107 - 8;
                unint64_t v44 = (uint64_t *)v106;
                do
                {
                  uint64_t v45 = *v44++;
                  BOOL v41 = v45 == 0;
                  if (v45) {
                    BOOL v46 = 1;
                  }
                  else {
                    BOOL v46 = v43 == 0;
                  }
                  v43 -= 8;
                }
                while (!v46);
              }
              if (v106 != (char *)v108) {
                free(v106);
              }
              if (v41)
              {
LABEL_101:
                uint64_t v89 = v95;
                if (!mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v89))
                {
                  int v106 = (char *)(v103[1] & 0xFFFFFFFFFFFFFFF8);
                  v88[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v106);
                  v88[1] = v47;
                  uint64_t Rewriter = (uint64_t)v101;
                  int v106 = (char *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter) + 8) & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v48 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v106);
                  v87[0] = v48;
                  v87[1] = v49;
                  if (v88[0])
                  {
                    unint64_t v50 = v48;
                    uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v88);
                    if (!result) {
                      return result;
                    }
                    BOOL hasStaticShape = mlir::ShapedType::hasStaticShape((mlir::ShapedType *)v88);
                    uint64_t result = 0;
                    if (!hasStaticShape) {
                      return result;
                    }
                    if (!v50) {
                      return result;
                    }
                    uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v87);
                    if (!result) {
                      return result;
                    }
                    uint64_t result = (uint64_t *)mlir::ShapedType::hasStaticShape((mlir::ShapedType *)v87);
                    if (!result) {
                      return result;
                    }
                    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
                    uint64_t v55 = v54;
                    uint64_t v57 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v87);
                    uint64_t result = 0;
                    if (v55 != 3 || v56 != 4) {
                      return result;
                    }
                    if (*ArgAttrsAttr == *v57
                      && ArgAttrsAttr[1] == v57[1]
                      && ArgAttrsAttr[2] == v57[3]
                      && v57[2] == 1)
                    {
                      int v106 = (char *)(v99[1] & 0xFFFFFFFFFFFFFFF8);
                      uint64_t result = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v106);
                      v86[0] = result;
                      v86[1] = v58;
                      if (!result) {
                        return result;
                      }
                      uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v86);
                      if (!result) {
                        return result;
                      }
                      uint64_t result = (uint64_t *)mlir::ShapedType::hasStaticShape((mlir::ShapedType *)v86);
                      if (!result) {
                        return result;
                      }
                      uint64_t v59 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v86);
                      if (v60 == 4)
                      {
                        uint64_t v61 = (void *)v59;
                        if (*(void *)(v59 + 16) == 1 && *(void *)(v59 + 24) == 1)
                        {
                          uint64_t Rewriter = (uint64_t)v92;
                          int v106 = (char *)(*(void *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Rewriter)
                                                    + 8) & 0xFFFFFFFFFFFFFFF8);
                          uint64_t result = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v106);
                          v85[0] = result;
                          v85[1] = v62;
                          if (!result) {
                            return result;
                          }
                          uint64_t result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v85);
                          if (!result) {
                            return result;
                          }
                          uint64_t result = (uint64_t *)mlir::ShapedType::hasStaticShape((mlir::ShapedType *)v85);
                          if (!result) {
                            return result;
                          }
                          uint64_t v63 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v85);
                          if (v64 == 3 && *v63 == *ArgAttrsAttr && v63[1] == *v61 && v63[2] == ArgAttrsAttr[2])
                          {
                            uint64_t Rewriter = 0x300000002;
                            std::vector<int>::vector[abi:nn180100](&v106, &Rewriter, 2uLL);
                            uint64_t Rewriter = 2;
                            uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 8), 0x20u, 1);
                            uint64_t v84 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&Rewriter, 1, IntegerType, 0);
                            uint64_t v66 = *(void *)(a2 + 24);
                            uint64_t v67 = mlir::Type::cast<mlir::ShapedType>(&v84);
                            uint64_t Rewriter = mlir::DenseElementsAttr::getFromRawBuffer(v67, v68, v106, v107 - (void)v106, 4, 1, 1);
                            uint64_t v83 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 8), v66, (uint64_t **)&Rewriter);
                            uint64_t v69 = *(void *)(a2 + 24);
                            uint64_t Rewriter = (uint64_t)v99;
                            uint64_t v82 = mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 8), v69, &Rewriter, &v83);
                            uint64_t v70 = *(void *)(a2 + 24);
                            uint64_t Rewriter = (uint64_t)v103;
                            int v81 = mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::mps::SqueezeOp &,mlir::Value>((mlir::BoolAttr **)(a3 + 8), v70, &v82, &Rewriter);
                            LODWORD(v80) = 1;
                            std::vector<int>::vector[abi:nn180100](&Rewriter, &v80, 1uLL);
                            uint64_t v79 = 1;
                            uint64_t v71 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 8), 0x20u, 1);
                            uint64_t v80 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v79, 1, v71, 0);
                            uint64_t v72 = *(void *)(a2 + 24);
                            uint64_t v73 = mlir::Type::cast<mlir::ShapedType>(&v80);
                            int v78 = (mlir::GenericProgramPoint *)mlir::DenseElementsAttr::getFromRawBuffer(v73, v74, Rewriter, v105 - Rewriter, 4, 1, 1);
                            uint64_t v79 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 8), v72, (uint64_t **)&v78);
                            uint64_t v75 = *(void *)(a2 + 24);
                            uint64_t v77 = v96;
                            int v78 = mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 8), v75, &v77, &v79);
                            mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::AddOp,mlir::mps::MatMulOp &,mlir::mps::ExpandDimsOp &>((mlir::Float32Type **)a3, a2, &v81, &v78);
                            if (Rewriter)
                            {
                              uint64_t v105 = Rewriter;
                              operator delete((void *)Rewriter);
                            }
                            if (v106)
                            {
                              uint64_t v107 = (uint64_t)v106;
                              operator delete(v106);
                            }
                            return (uint64_t *)1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return 0;
    }
  }
  int v106 = "could not detect reshape->conv+bias->reshape op pattern";
  v108[8] = 259;
  uint64_t Rewriter = (uint64_t)&v106;
  uint64_t v76 = *(void *)(a3 + 16);
  if (!v76) {
    return 0;
  }
  uint64_t result = (uint64_t *)mlir::RewriterBase::Listener::classof(v76);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(void *)v76 + 64))(v76, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReshapeOp &>(mlir::mps::ReshapeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &Rewriter);
  }
  return result;
}

void *std::vector<int>::vector[abi:nn180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 62) {
      abort();
    }
    size_t v5 = 4 * a3;
    uint64_t v6 = (char *)operator new(4 * a3);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5);
    a1[1] = v7;
  }
  return a1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value,mlir::mps::ConstantOp &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, void *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.squeeze", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"mps.squeeze";
    v17[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::SqueezeOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4 - 16);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::SqueezeOp,void>::id) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::mps::SqueezeOp &,mlir::Value>(mlir::BoolAttr **a1, uint64_t a2, void *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.matmul", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"mps.matmul";
    v17[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::MatMulOp::build(a1, (uint64_t)v19, *a3 - 16, *a4, 0, 0);
  uint64_t v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::RewriterBase::replaceOpWithNewOp<mlir::mps::AddOp,mlir::mps::MatMulOp &,mlir::mps::ExpandDimsOp &>(mlir::Float32Type **a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = mlir::OpBuilder::create<mlir::mps::AddOp,mlir::mps::SubtractOp &,mlir::mps::ConstantOp>(a1 + 1, *(void *)(a2 + 24), a3, a4);
  (*((void (**)(mlir::Float32Type **, uint64_t, mlir::GenericProgramPoint *))*a1 + 4))(a1, a2, v6);
  return v6;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::BiasAddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::BiasAddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::BiasAddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(uint64_t **)a1;
  v14[0] = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  uint64_t v7 = result;
  if (result)
  {
    uint64_t v16 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::BiasAddOp,void>::id
      && (*(unsigned char *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      unsigned __int8 v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      uint64_t result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::BiasAddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(v4, (uint64_t)v14);
      int v8 = v15;
      if (v15) {
        v4[2] = v16;
      }
      BOOL v6 = v8 != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  uint64_t v9 = *(BOOL **)a2;
  BOOL v10 = v6 && **(unsigned char **)a2 != 0;
  if (!v7) {
    BOOL v10 = 0;
  }
  *uint64_t v9 = v10;
  uint64_t v11 = *(void **)(a1 + 8);
  uint64_t v12 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  if (*v11)
  {
    BOOL v13 = *v11 == v12;
  }
  else
  {
    *uint64_t v11 = v12;
    uint64_t v9 = *(BOOL **)a2;
    BOOL v10 = **(unsigned char **)a2 != 0;
    BOOL v13 = 1;
  }
  *uint64_t v9 = v13 && v10;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::BiasAddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  v14[0] = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  uint64_t v7 = result;
  if (result)
  {
    uint64_t v16 = result;
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id
      && (*(unsigned char *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      unsigned __int8 v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      uint64_t result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>((uint64_t ***)v4, (uint64_t)v14);
      int v8 = v15;
      if (v15) {
        *(void *)(v4 + 16) = v16;
      }
      BOOL v6 = v8 != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  uint64_t v9 = *(BOOL **)a2;
  BOOL v10 = v6 && **(unsigned char **)a2 != 0;
  if (!v7) {
    BOOL v10 = 0;
  }
  *uint64_t v9 = v10;
  uint64_t v11 = (void *)a1[1];
  uint64_t v12 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 56);
  if (*v11)
  {
    BOOL v13 = *v11 == v12;
  }
  else
  {
    *uint64_t v11 = v12;
    uint64_t v9 = *(BOOL **)a2;
    BOOL v10 = **(unsigned char **)a2 != 0;
    BOOL v13 = 1;
  }
  *uint64_t v9 = v13 && v10;
  return result;
}

void *mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv2DOp>::~CanonicalizeConvToMatMul(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv2DOp>::~CanonicalizeConvToMatMul(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t v230 = *MEMORY[0x1E4F143B8];
  v211[0] = a2;
  BOOL v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = *v6;
  unint64_t v8 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v9 = *(unsigned int *)(v7 + 16);
  if (!v9) {
    goto LABEL_10;
  }
  BOOL v10 = *(void **)(v7 + 8);
  uint64_t v11 = &v10[2 * v9];
  do
  {
    unint64_t v12 = v9 >> 1;
    BOOL v13 = &v10[2 * (v9 >> 1)];
    unint64_t v15 = *v13;
    uint64_t v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8) {
      BOOL v10 = v14;
    }
    else {
      unint64_t v9 = v12;
    }
  }
  while (v9);
  if (v10 != v11 && *v10 == v8) {
    uint64_t v16 = v10[1];
  }
  else {
LABEL_10:
  }
    uint64_t v16 = 0;
  __src = v6;
  uint64_t v223 = v16;
  BOOL v17 = (void *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v17) {
    goto LABEL_20;
  }
  uint64_t v18 = *v17;
  unint64_t v19 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v20 = *(unsigned int *)(v18 + 16);
  if (!v20) {
    goto LABEL_20;
  }
  BOOL v21 = *(void **)(v18 + 8);
  BOOL v22 = &v21[2 * v20];
  do
  {
    unint64_t v23 = v20 >> 1;
    uint64_t v24 = &v21[2 * (v20 >> 1)];
    unint64_t v26 = *v24;
    unint64_t v25 = v24 + 2;
    v20 += ~(v20 >> 1);
    if (v26 < v19) {
      BOOL v21 = v25;
    }
    else {
      unint64_t v20 = v23;
    }
  }
  while (v20);
  if (v21 != v22 && *v21 == v19) {
    uint64_t v27 = v21[1];
  }
  else {
LABEL_20:
  }
    uint64_t v27 = 0;
  unint64_t v220 = v17;
  uint64_t v221 = v27;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v6);
  if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(v17)) {
    goto LABEL_54;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__src)) {
    goto LABEL_54;
  }
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v220) & 1) == 0) {
    goto LABEL_54;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
  uint64_t v30 = v29;
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
  if (!*(unsigned char *)(a1 + 96)) {
    goto LABEL_54;
  }
  uint64_t v33 = ArgAttrsAttr;
  uint64_t v34 = v32;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v211)
    || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v211) != 2
    || v30 != 4
    || v34 != 4
    || *(void *)(v33 + 16) != 1
    || *(void *)(v33 + 24) != 1
    || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v211) != (void *)1)
  {
    goto LABEL_54;
  }
  v225 = (char *)&v227;
  uint64_t v226 = 0x600000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v211);
  uint64_t v35 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v35, v36, (uint64_t)&v225, 1);
  uint64_t v37 = (uint64_t *)v225;
  if (v226)
  {
    uint64_t v38 = 0;
    while (*(void *)&v225[v38] == 1)
    {
      v38 += 8;
      if (8 * v226 == v38) {
        goto LABEL_36;
      }
    }
    goto LABEL_200;
  }
LABEL_36:
  if (v225 != (char *)&v227) {
    free(v225);
  }
  v225 = (char *)&v227;
  uint64_t v226 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v211);
  long long v39 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v39, v40, (uint64_t)&v225, 1);
  uint64_t v37 = (uint64_t *)v225;
  if (v226)
  {
    uint64_t v41 = 0;
    while (*(void *)&v225[v41] == 1)
    {
      v41 += 8;
      if (8 * v226 == v41) {
        goto LABEL_42;
      }
    }
    goto LABEL_200;
  }
LABEL_42:
  if (v225 != (char *)&v227) {
    free(v225);
  }
  int PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v211);
  if ((PaddingStyle - 1) < 2 || PaddingStyle == 4)
  {
LABEL_53:
    uint64_t v46 = *(void *)(v211[0] + 72);
    uint64_t v47 = *(uint64_t **)(v46 + 24);
    uint64_t v48 = *(void *)(v46 + 56);
    Strides = v47;
    uint64_t v215 = v48;
    v216[0] = 0;
    LOBYTE(v217) = 0;
    char v218 = 0;
    char v219 = 1;
    goto LABEL_55;
  }
  if (PaddingStyle)
  {
LABEL_54:
    LOBYTE(Strides) = 0;
    char v219 = 0;
    goto LABEL_55;
  }
  v225 = (char *)&v227;
  uint64_t v226 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v211);
  uint64_t v43 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v43, v44, (uint64_t)&v225, 1);
  uint64_t v37 = (uint64_t *)v225;
  if (!v226)
  {
LABEL_51:
    if (v225 != (char *)&v227) {
      free(v225);
    }
    goto LABEL_53;
  }
  uint64_t v45 = 0;
  while (!*(void *)&v225[v45])
  {
    v45 += 8;
    if (8 * v226 == v45) {
      goto LABEL_51;
    }
  }
LABEL_200:
  LOBYTE(Strides) = 0;
  char v219 = 0;
  if (v37 != &v227) {
    free(v37);
  }
LABEL_55:
  if (v219)
  {
    uint64_t v212 = v215;
    uint64_t v213 = Strides;
    uint64_t v49 = (void *)(Strides[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v49) {
      goto LABEL_65;
    }
    uint64_t v50 = *v49;
    unint64_t v51 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v52 = *(unsigned int *)(v50 + 16);
    if (!v52) {
      goto LABEL_65;
    }
    unint64_t v53 = *(void **)(v50 + 8);
    uint64_t v54 = &v53[2 * v52];
    do
    {
      unint64_t v55 = v52 >> 1;
      uint64_t v56 = &v53[2 * (v52 >> 1)];
      unint64_t v58 = *v56;
      uint64_t v57 = v56 + 2;
      v52 += ~(v52 >> 1);
      if (v58 < v51) {
        unint64_t v53 = v57;
      }
      else {
        unint64_t v52 = v55;
      }
    }
    while (v52);
    if (v53 != v54 && *v53 == v51) {
      uint64_t v59 = v53[1];
    }
    else {
LABEL_65:
    }
      uint64_t v59 = 0;
    unint64_t v220 = v49;
    uint64_t v221 = v59;
    uint64_t v60 = (uint64_t *)(*(void *)(v212 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v60) {
      goto LABEL_75;
    }
    uint64_t v61 = *v60;
    unint64_t v62 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v63 = *(unsigned int *)(v61 + 16);
    if (!v63) {
      goto LABEL_75;
    }
    uint64_t v64 = *(void **)(v61 + 8);
    BOOL v65 = &v64[2 * v63];
    do
    {
      unint64_t v66 = v63 >> 1;
      uint64_t v67 = &v64[2 * (v63 >> 1)];
      unint64_t v69 = *v67;
      uint64_t v68 = v67 + 2;
      v63 += ~(v63 >> 1);
      if (v69 < v62) {
        uint64_t v64 = v68;
      }
      else {
        unint64_t v63 = v66;
      }
    }
    while (v63);
    if (v64 != v65 && *v64 == v62) {
      uint64_t v70 = v64[1];
    }
    else {
LABEL_75:
    }
      uint64_t v70 = 0;
    v211[0] = v60;
    v211[1] = v70;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
    uint64_t v72 = v71;
    uint64_t v74 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
    uint64_t v75 = v73;
    unint64_t v76 = 8 * v73;
    __src = v224;
    uint64_t v223 = 0x500000000;
    if ((unint64_t)(8 * v73) < 0x29)
    {
      uint64_t v77 = 0;
      int v78 = 0;
      if (!v73) {
        goto LABEL_93;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v224, (8 * v73) >> 3, 4);
      uint64_t v77 = v223;
      int v78 = v223;
      if (!v75)
      {
LABEL_93:
        LODWORD(v223) = v78 + (v76 >> 3);
        uint64_t v97 = v216[0];
        uint64_t v98 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v211) + 8 * v97);
        if (v98 == 0x8000000000000000) {
          int v99 = -1;
        }
        else {
          int v99 = v98;
        }
        BOOL v100 = (int32x4_t *)__src;
        *((_DWORD *)__src + 1) = v99;
        if (!v223) {
          goto LABEL_110;
        }
        unint64_t v101 = (v223 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v101 >= 7)
        {
          unint64_t v104 = v101 + 1;
          uint64_t v105 = (v101 + 1) & 0x7FFFFFFFFFFFFFF8;
          BOOL v103 = (int32x4_t *)((char *)v100 + 4 * v105);
          int v106 = v100 + 1;
          int64x2_t v107 = 0uLL;
          v108.i64[0] = -1;
          v108.i64[1] = -1;
          int8x16_t v109 = (int8x16_t)vdupq_n_s64(1uLL);
          uint64_t v110 = v105;
          int64x2_t v111 = 0uLL;
          int64x2_t v112 = 0uLL;
          int64x2_t v113 = 0uLL;
          do
          {
            int32x4_t v114 = vceqq_s32(v106[-1], v108);
            v115.i64[0] = v114.u32[0];
            v115.i64[1] = v114.u32[1];
            int64x2_t v116 = (int64x2_t)vandq_s8(v115, v109);
            v115.i64[0] = v114.u32[2];
            v115.i64[1] = v114.u32[3];
            int64x2_t v117 = (int64x2_t)vandq_s8(v115, v109);
            int32x4_t v118 = vceqq_s32(*v106, v108);
            v115.i64[0] = v118.u32[0];
            v115.i64[1] = v118.u32[1];
            int64x2_t v119 = (int64x2_t)vandq_s8(v115, v109);
            v115.i64[0] = v118.u32[2];
            v115.i64[1] = v118.u32[3];
            int64x2_t v111 = vaddq_s64(v111, v117);
            int64x2_t v107 = vaddq_s64(v107, v116);
            int64x2_t v113 = vaddq_s64(v113, (int64x2_t)vandq_s8(v115, v109));
            int64x2_t v112 = vaddq_s64(v112, v119);
            v106 += 2;
            v110 -= 8;
          }
          while (v110);
          unint64_t v102 = vaddvq_s64(vaddq_s64(vaddq_s64(v112, v107), vaddq_s64(v113, v111)));
          if (v104 == v105) {
            goto LABEL_106;
          }
        }
        else
        {
          unint64_t v102 = 0;
          BOOL v103 = v100;
        }
        uint64_t v120 = (int32x4_t *)((char *)v100 + 4 * v223);
        do
        {
          __int32 v121 = v103->i32[0];
          BOOL v103 = (int32x4_t *)((char *)v103 + 4);
          if (v121 == -1) {
            ++v102;
          }
        }
        while (v103 != v120);
LABEL_106:
        if (v102 >= 2)
        {
          v225 = "failed: unsupported dynamic dimensions";
          __int16 v229 = 259;
          v208[0] = (uint64_t *)&v225;
          uint64_t v122 = (uint64_t)a3[2];
          if (v122 && mlir::RewriterBase::Listener::classof(v122)) {
            uint64_t v80 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(void *)v122 + 64))(v122, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v208);
          }
          else {
            uint64_t v80 = 0;
          }
LABEL_188:
          if (__src != v224) {
            free(__src);
          }
          return v80;
        }
LABEL_110:
        v225 = (char *)&v227;
        HIDWORD(v226) = 3;
        uint64_t v227 = 0x300000002;
        if (v72 == 4)
        {
          unsigned int v123 = 2;
        }
        else
        {
          int v228 = 4;
          unsigned int v123 = 3;
        }
        LODWORD(v226) = v123;
        v208[0] = (uint64_t *)v123;
        uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        uint64_t v125 = (void *)mlir::RankedTensorType::get((uint64_t)v208, 1, IntegerType, 0);
        uint64_t v126 = v125;
        uint64_t v127 = *(void *)(a2 + 24);
        if (!v125) {
          goto LABEL_122;
        }
        uint64_t v128 = *v125;
        unint64_t v129 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v130 = *(unsigned int *)(v128 + 16);
        if (!v130) {
          goto LABEL_122;
        }
        uint64_t v131 = *(void **)(v128 + 8);
        uint64_t v132 = &v131[2 * v130];
        do
        {
          unint64_t v133 = v130 >> 1;
          unint64_t v134 = &v131[2 * (v130 >> 1)];
          unint64_t v136 = *v134;
          uint64_t v135 = v134 + 2;
          v130 += ~(v130 >> 1);
          if (v136 < v129) {
            uint64_t v131 = v135;
          }
          else {
            unint64_t v130 = v133;
          }
        }
        while (v130);
        if (v131 != v132 && *v131 == v129) {
          uint64_t v137 = v131[1];
        }
        else {
LABEL_122:
        }
          uint64_t v137 = 0;
        BOOL v210 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v126, v137, v225, 4 * v226, 4, 1, 1);
        v208[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v127, &v210);
        uint64_t v212 = (uint64_t)mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), &v212, v208)- 16;
        if (v225 != (char *)&v227) {
          free(v225);
        }
        uint64_t v138 = *(void *)(a2 + 24);
        LODWORD(v225) = 0;
        LODWORD(v208[0]) = 1;
        uint64_t v213 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), v138, (uint64_t *)&v213, (unsigned int *)&v225, (unsigned int *)v208)- 16);
        LODWORD(v210) = 1;
        uint64_t v139 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        uint64_t v140 = (void *)mlir::RankedTensorType::get(0, 0, v139, 0);
        uint64_t v141 = v140;
        uint64_t v142 = *(void *)(a2 + 24);
        if (!v140) {
          goto LABEL_134;
        }
        uint64_t v143 = *v140;
        unint64_t v144 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v145 = *(unsigned int *)(v143 + 16);
        if (!v145) {
          goto LABEL_134;
        }
        uint64_t v146 = *(void **)(v143 + 8);
        uint64_t v147 = &v146[2 * v145];
        do
        {
          unint64_t v148 = v145 >> 1;
          v149 = &v146[2 * (v145 >> 1)];
          unint64_t v151 = *v149;
          uint64_t v150 = v149 + 2;
          v145 += ~(v145 >> 1);
          if (v151 < v144) {
            uint64_t v146 = v150;
          }
          else {
            unint64_t v145 = v148;
          }
        }
        while (v145);
        if (v146 != v147 && *v146 == v144) {
          uint64_t v152 = v146[1];
        }
        else {
LABEL_134:
        }
          uint64_t v152 = 0;
        v208[0] = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v141, v152, &v210, 4, 4, 1, 1);
        v225 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v142, v208)- 16;
        uint64_t v213 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), (uint64_t *)&v213, (uint64_t *)&v225)- 16);
        uint64_t v153 = *(void *)(a2 + 24);
        LOBYTE(v225) = 0;
        BOOL v210 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value,mlir::Value,BOOL,BOOL>(a3 + 1, v153, &v212, (uint64_t *)&v213, v216, (unsigned __int8 *)&v225)- 16);
        if (v218)
        {
          uint64_t v209 = v217;
          uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v209);
          v155 = (uint64_t *)(v209[1] & 0xFFFFFFFFFFFFFFF8);
          if (!v155) {
            goto LABEL_145;
          }
          uint64_t v156 = *v155;
          unint64_t v157 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v158 = *(unsigned int *)(v156 + 16);
          if (!v158) {
            goto LABEL_145;
          }
          uint64_t v159 = *(void **)(v156 + 8);
          uint64_t v160 = &v159[2 * v158];
          do
          {
            unint64_t v161 = v158 >> 1;
            unint64_t v162 = &v159[2 * (v158 >> 1)];
            unint64_t v164 = *v162;
            uint64_t v163 = v162 + 2;
            v158 += ~(v158 >> 1);
            if (v164 < v157) {
              uint64_t v159 = v163;
            }
            else {
              unint64_t v158 = v161;
            }
          }
          while (v158);
          if (v159 != v160 && *v159 == v157) {
            unint64_t v165 = (uint64_t *)v159[1];
          }
          else {
LABEL_145:
          }
            unint64_t v165 = 0;
          v208[0] = v155;
          v208[1] = v165;
          v225 = (char *)&v227;
          uint64_t v227 = 0x1FFFFFFFFLL;
          uint64_t v226 = 0x200000002;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v208))
          {
            uint64_t v166 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v208);
            if (v167)
            {
              uint64_t v168 = 8 * v167;
              while (*v166 != 0x8000000000000000)
              {
                ++v166;
                v168 -= 8;
                if (!v168) {
                  goto LABEL_151;
                }
              }
            }
            else
            {
LABEL_151:
              uint64_t v169 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v208);
              int NumElements = mlir::ShapedType::getNumElements(v169, v170);
              *(_DWORD *)v225 = NumElements;
            }
          }
          uint64_t v207 = 2;
          uint64_t v172 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
          v173 = (void *)mlir::RankedTensorType::get((uint64_t)&v207, 1, v172, 0);
          uint64_t v174 = v173;
          if (!v173) {
            goto LABEL_161;
          }
          uint64_t v175 = *v173;
          unint64_t v176 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v177 = *(unsigned int *)(v175 + 16);
          if (!v177) {
            goto LABEL_161;
          }
          uint64_t v178 = *(void **)(v175 + 8);
          v179 = &v178[2 * v177];
          do
          {
            unint64_t v180 = v177 >> 1;
            uint64_t v181 = &v178[2 * (v177 >> 1)];
            unint64_t v183 = *v181;
            long long v182 = v181 + 2;
            v177 += ~(v177 >> 1);
            if (v183 < v176) {
              uint64_t v178 = v182;
            }
            else {
              unint64_t v177 = v180;
            }
          }
          while (v177);
          if (v178 != v179 && *v178 == v176) {
            uint64_t v184 = v178[1];
          }
          else {
LABEL_161:
          }
            uint64_t v184 = 0;
          uint64_t v206 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v174, v184, v225, 4 * v226, 4, 1, 1);
          uint64_t v207 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), Loc, &v206);
          uint64_t v209 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, Loc, (uint64_t *)&v209, &v207)- 16);
          uint64_t v206 = (uint64_t *)mlir::getElementTypeOrSelf((void *)(v210[1] & 0xFFFFFFFFFFFFFFF8));
          if (v206 != (uint64_t *)mlir::getElementTypeOrSelf((void *)(v209[1] & 0xFFFFFFFFFFFFFFF8))) {
            uint64_t v209 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v209, (uint64_t *)&v206)- 16);
          }
          BOOL v210 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>(a3 + 1, Loc, (uint64_t *)&v210, (uint64_t *)&v209)- 16);
          if (v225 != (char *)&v227) {
            free(v225);
          }
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
        v225 = v185;
        uint64_t v186 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        uint64_t v188 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v225, 1, v186, 0);
        v225 = (char *)&v227;
        uint64_t v226 = 0x500000000;
        int v189 = v223;
        if (!v223)
        {
          uint64_t v192 = &v227;
LABEL_175:
          *(_DWORD *)uint64_t v192 = *((_DWORD *)v192 + 1);
          *((_DWORD *)v192 + 1) = v187;
          uint64_t v193 = *(void *)(a2 + 24);
          if (!v188) {
            goto LABEL_184;
          }
          uint64_t v194 = *v188;
          unint64_t v195 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v196 = *(unsigned int *)(v194 + 16);
          if (!v196) {
            goto LABEL_184;
          }
          v197 = *(void **)(v194 + 8);
          v198 = &v197[2 * v196];
          do
          {
            unint64_t v199 = v196 >> 1;
            unint64_t v200 = &v197[2 * (v196 >> 1)];
            unint64_t v202 = *v200;
            v201 = v200 + 2;
            v196 += ~(v196 >> 1);
            if (v202 < v195) {
              v197 = v201;
            }
            else {
              unint64_t v196 = v199;
            }
          }
          while (v196);
          if (v197 != v198 && *v197 == v195) {
            uint64_t v203 = v197[1];
          }
          else {
LABEL_184:
          }
            uint64_t v203 = 0;
          uint64_t v80 = 1;
          uint64_t v209 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v188, v203, v225, 4 * v226, 4, 1, 1);
          v208[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v193, &v209);
          BOOL v210 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, *(void *)(a2 + 24), (uint64_t *)&v210, v208)- 16);
          if (v225 != (char *)&v227) {
            free(v225);
          }
          LODWORD(v225) = 0;
          LODWORD(v208[0]) = 1;
          v204 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), *(void *)(a2 + 24), (uint64_t *)&v210, (unsigned int *)&v225, (unsigned int *)v208);
          (*((void (**)(mlir::BoolAttr **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v204);
          goto LABEL_188;
        }
        if (v223 < 6)
        {
          uint64_t v191 = &v227;
          unsigned int v190 = v223;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v225, &v227, v223, 4);
          unsigned int v190 = v223;
          if (!v223)
          {
LABEL_174:
            LODWORD(v226) = v189;
            uint64_t v192 = (uint64_t *)v225;
            int v187 = *(_DWORD *)v225;
            goto LABEL_175;
          }
          uint64_t v191 = (uint64_t *)v225;
        }
        memcpy(v191, __src, 4 * v190);
        goto LABEL_174;
      }
    }
    int v81 = (int8x16_t *)((char *)__src + 4 * v77);
    unint64_t v82 = (v75 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v82 >= 7)
    {
      unint64_t v85 = v82 + 1;
      uint64_t v86 = (v82 + 1) & 0x3FFFFFFFFFFFFFF8;
      uint64_t v83 = (uint64_t *)(v74 + 8 * v86);
      uint64_t v84 = &v81->i32[v86];
      uint64_t v87 = v81 + 1;
      unint64_t v88 = (int32x4_t *)(v74 + 32);
      int64x2_t v89 = vdupq_n_s64(0x8000000000000000);
      uint64_t v90 = v86;
      do
      {
        int32x4_t v91 = v88[-2];
        int32x4_t v92 = v88[-1];
        int32x4_t v93 = *v88;
        int32x4_t v94 = v88[1];
        v88 += 4;
        v87[-1] = vorrq_s8((int8x16_t)vuzp1q_s32(v91, v92), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v91, v89), (int32x4_t)vceqq_s64((int64x2_t)v92, v89)));
        *uint64_t v87 = vorrq_s8((int8x16_t)vuzp1q_s32(v93, v94), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v93, v89), (int32x4_t)vceqq_s64((int64x2_t)v94, v89)));
        v87 += 2;
        v90 -= 8;
      }
      while (v90);
      if (v85 == v86)
      {
LABEL_92:
        int v78 = v223;
        goto LABEL_93;
      }
    }
    else
    {
      uint64_t v83 = (uint64_t *)v74;
      uint64_t v84 = (int *)v81;
    }
    do
    {
      uint64_t v96 = *v83++;
      int v95 = v96;
      if (v96 == 0x8000000000000000) {
        int v95 = -1;
      }
      *v84++ = v95;
    }
    while (v83 != (uint64_t *)(v74 + v76));
    goto LABEL_92;
  }
  v225 = "failed: pattern did not match";
  __int16 v229 = 259;
  __src = &v225;
  uint64_t v79 = (uint64_t)a3[2];
  if (v79 && mlir::RewriterBase::Listener::classof(v79)) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v79 + 64))(v79, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
  }
  else {
    return 0;
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.flatten_2d", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"mps.flatten_2d";
    v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::Flatten2DOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::Flatten2DOp,void>::id) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void *mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv2DDataGradientOp>::~CanonicalizeConvToMatMul(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv2DDataGradientOp>::~CanonicalizeConvToMatMul(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv2DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t v230 = *MEMORY[0x1E4F143B8];
  v211[0] = a2;
  BOOL v6 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = *v6;
  unint64_t v8 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v9 = *(unsigned int *)(v7 + 16);
  if (!v9) {
    goto LABEL_10;
  }
  char v10 = *(void **)(v7 + 8);
  uint64_t v11 = &v10[2 * v9];
  do
  {
    unint64_t v12 = v9 >> 1;
    BOOL v13 = &v10[2 * (v9 >> 1)];
    unint64_t v15 = *v13;
    uint64_t v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8) {
      char v10 = v14;
    }
    else {
      unint64_t v9 = v12;
    }
  }
  while (v9);
  if (v10 != v11 && *v10 == v8) {
    uint64_t v16 = v10[1];
  }
  else {
LABEL_10:
  }
    uint64_t v16 = 0;
  __src = v6;
  uint64_t v223 = v16;
  BOOL v17 = (void *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v17) {
    goto LABEL_20;
  }
  uint64_t v18 = *v17;
  unint64_t v19 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v20 = *(unsigned int *)(v18 + 16);
  if (!v20) {
    goto LABEL_20;
  }
  BOOL v21 = *(void **)(v18 + 8);
  BOOL v22 = &v21[2 * v20];
  do
  {
    unint64_t v23 = v20 >> 1;
    uint64_t v24 = &v21[2 * (v20 >> 1)];
    unint64_t v26 = *v24;
    unint64_t v25 = v24 + 2;
    v20 += ~(v20 >> 1);
    if (v26 < v19) {
      BOOL v21 = v25;
    }
    else {
      unint64_t v20 = v23;
    }
  }
  while (v20);
  if (v21 != v22 && *v21 == v19) {
    uint64_t v27 = v21[1];
  }
  else {
LABEL_20:
  }
    uint64_t v27 = 0;
  unint64_t v220 = v17;
  uint64_t v221 = v27;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v6);
  if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(v17)) {
    goto LABEL_54;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__src)) {
    goto LABEL_54;
  }
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v220) & 1) == 0) {
    goto LABEL_54;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
  uint64_t v30 = v29;
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
  if (!*(unsigned char *)(a1 + 96)) {
    goto LABEL_54;
  }
  uint64_t v33 = ArgAttrsAttr;
  uint64_t v34 = v32;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v211)
    || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v211) != 2
    || v30 != 4
    || v34 != 4
    || *(void *)(v33 + 16) != 1
    || *(void *)(v33 + 24) != 1
    || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v211) != (void *)1)
  {
    goto LABEL_54;
  }
  v225 = (char *)&v227;
  uint64_t v226 = 0x600000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v211);
  uint64_t v35 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v35, v36, (uint64_t)&v225, 1);
  uint64_t v37 = (uint64_t *)v225;
  if (v226)
  {
    uint64_t v38 = 0;
    while (*(void *)&v225[v38] == 1)
    {
      v38 += 8;
      if (8 * v226 == v38) {
        goto LABEL_36;
      }
    }
    goto LABEL_200;
  }
LABEL_36:
  if (v225 != (char *)&v227) {
    free(v225);
  }
  v225 = (char *)&v227;
  uint64_t v226 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v211);
  long long v39 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v39, v40, (uint64_t)&v225, 1);
  uint64_t v37 = (uint64_t *)v225;
  if (v226)
  {
    uint64_t v41 = 0;
    while (*(void *)&v225[v41] == 1)
    {
      v41 += 8;
      if (8 * v226 == v41) {
        goto LABEL_42;
      }
    }
    goto LABEL_200;
  }
LABEL_42:
  if (v225 != (char *)&v227) {
    free(v225);
  }
  int PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v211);
  if ((PaddingStyle - 1) < 2 || PaddingStyle == 4)
  {
LABEL_53:
    uint64_t v46 = *(void *)(v211[0] + 72);
    uint64_t v47 = *(uint64_t **)(v46 + 24);
    uint64_t v48 = *(void *)(v46 + 56);
    Strides = v47;
    uint64_t v215 = v48;
    v216[0] = 1;
    LOBYTE(v217) = 0;
    char v218 = 0;
    char v219 = 1;
    goto LABEL_55;
  }
  if (PaddingStyle)
  {
LABEL_54:
    LOBYTE(Strides) = 0;
    char v219 = 0;
    goto LABEL_55;
  }
  v225 = (char *)&v227;
  uint64_t v226 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v211);
  uint64_t v43 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v43, v44, (uint64_t)&v225, 1);
  uint64_t v37 = (uint64_t *)v225;
  if (!v226)
  {
LABEL_51:
    if (v225 != (char *)&v227) {
      free(v225);
    }
    goto LABEL_53;
  }
  uint64_t v45 = 0;
  while (!*(void *)&v225[v45])
  {
    v45 += 8;
    if (8 * v226 == v45) {
      goto LABEL_51;
    }
  }
LABEL_200:
  LOBYTE(Strides) = 0;
  char v219 = 0;
  if (v37 != &v227) {
    free(v37);
  }
LABEL_55:
  if (v219)
  {
    uint64_t v212 = v215;
    uint64_t v213 = Strides;
    uint64_t v49 = (void *)(Strides[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v49) {
      goto LABEL_65;
    }
    uint64_t v50 = *v49;
    unint64_t v51 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v52 = *(unsigned int *)(v50 + 16);
    if (!v52) {
      goto LABEL_65;
    }
    unint64_t v53 = *(void **)(v50 + 8);
    uint64_t v54 = &v53[2 * v52];
    do
    {
      unint64_t v55 = v52 >> 1;
      uint64_t v56 = &v53[2 * (v52 >> 1)];
      unint64_t v58 = *v56;
      uint64_t v57 = v56 + 2;
      v52 += ~(v52 >> 1);
      if (v58 < v51) {
        unint64_t v53 = v57;
      }
      else {
        unint64_t v52 = v55;
      }
    }
    while (v52);
    if (v53 != v54 && *v53 == v51) {
      uint64_t v59 = v53[1];
    }
    else {
LABEL_65:
    }
      uint64_t v59 = 0;
    unint64_t v220 = v49;
    uint64_t v221 = v59;
    uint64_t v60 = (uint64_t *)(*(void *)(v212 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v60) {
      goto LABEL_75;
    }
    uint64_t v61 = *v60;
    unint64_t v62 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v63 = *(unsigned int *)(v61 + 16);
    if (!v63) {
      goto LABEL_75;
    }
    uint64_t v64 = *(void **)(v61 + 8);
    BOOL v65 = &v64[2 * v63];
    do
    {
      unint64_t v66 = v63 >> 1;
      uint64_t v67 = &v64[2 * (v63 >> 1)];
      unint64_t v69 = *v67;
      uint64_t v68 = v67 + 2;
      v63 += ~(v63 >> 1);
      if (v69 < v62) {
        uint64_t v64 = v68;
      }
      else {
        unint64_t v63 = v66;
      }
    }
    while (v63);
    if (v64 != v65 && *v64 == v62) {
      uint64_t v70 = v64[1];
    }
    else {
LABEL_75:
    }
      uint64_t v70 = 0;
    v211[0] = v60;
    v211[1] = v70;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
    uint64_t v72 = v71;
    uint64_t v74 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
    uint64_t v75 = v73;
    unint64_t v76 = 8 * v73;
    __src = v224;
    uint64_t v223 = 0x500000000;
    if ((unint64_t)(8 * v73) < 0x29)
    {
      uint64_t v77 = 0;
      int v78 = 0;
      if (!v73) {
        goto LABEL_93;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v224, (8 * v73) >> 3, 4);
      uint64_t v77 = v223;
      int v78 = v223;
      if (!v75)
      {
LABEL_93:
        LODWORD(v223) = v78 + (v76 >> 3);
        uint64_t v97 = v216[0];
        uint64_t v98 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v211) + 8 * v97);
        if (v98 == 0x8000000000000000) {
          int v99 = -1;
        }
        else {
          int v99 = v98;
        }
        BOOL v100 = (int32x4_t *)__src;
        *((_DWORD *)__src + 1) = v99;
        if (!v223) {
          goto LABEL_110;
        }
        unint64_t v101 = (v223 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v101 >= 7)
        {
          unint64_t v104 = v101 + 1;
          uint64_t v105 = (v101 + 1) & 0x7FFFFFFFFFFFFFF8;
          BOOL v103 = (int32x4_t *)((char *)v100 + 4 * v105);
          int v106 = v100 + 1;
          int64x2_t v107 = 0uLL;
          v108.i64[0] = -1;
          v108.i64[1] = -1;
          int8x16_t v109 = (int8x16_t)vdupq_n_s64(1uLL);
          uint64_t v110 = v105;
          int64x2_t v111 = 0uLL;
          int64x2_t v112 = 0uLL;
          int64x2_t v113 = 0uLL;
          do
          {
            int32x4_t v114 = vceqq_s32(v106[-1], v108);
            v115.i64[0] = v114.u32[0];
            v115.i64[1] = v114.u32[1];
            int64x2_t v116 = (int64x2_t)vandq_s8(v115, v109);
            v115.i64[0] = v114.u32[2];
            v115.i64[1] = v114.u32[3];
            int64x2_t v117 = (int64x2_t)vandq_s8(v115, v109);
            int32x4_t v118 = vceqq_s32(*v106, v108);
            v115.i64[0] = v118.u32[0];
            v115.i64[1] = v118.u32[1];
            int64x2_t v119 = (int64x2_t)vandq_s8(v115, v109);
            v115.i64[0] = v118.u32[2];
            v115.i64[1] = v118.u32[3];
            int64x2_t v111 = vaddq_s64(v111, v117);
            int64x2_t v107 = vaddq_s64(v107, v116);
            int64x2_t v113 = vaddq_s64(v113, (int64x2_t)vandq_s8(v115, v109));
            int64x2_t v112 = vaddq_s64(v112, v119);
            v106 += 2;
            v110 -= 8;
          }
          while (v110);
          unint64_t v102 = vaddvq_s64(vaddq_s64(vaddq_s64(v112, v107), vaddq_s64(v113, v111)));
          if (v104 == v105) {
            goto LABEL_106;
          }
        }
        else
        {
          unint64_t v102 = 0;
          BOOL v103 = v100;
        }
        uint64_t v120 = (int32x4_t *)((char *)v100 + 4 * v223);
        do
        {
          __int32 v121 = v103->i32[0];
          BOOL v103 = (int32x4_t *)((char *)v103 + 4);
          if (v121 == -1) {
            ++v102;
          }
        }
        while (v103 != v120);
LABEL_106:
        if (v102 >= 2)
        {
          v225 = "failed: unsupported dynamic dimensions";
          __int16 v229 = 259;
          v208[0] = (uint64_t *)&v225;
          uint64_t v122 = (uint64_t)a3[2];
          if (v122 && mlir::RewriterBase::Listener::classof(v122)) {
            uint64_t v80 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(void *)v122 + 64))(v122, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v208);
          }
          else {
            uint64_t v80 = 0;
          }
LABEL_188:
          if (__src != v224) {
            free(__src);
          }
          return v80;
        }
LABEL_110:
        v225 = (char *)&v227;
        HIDWORD(v226) = 3;
        uint64_t v227 = 0x300000002;
        if (v72 == 4)
        {
          unsigned int v123 = 2;
        }
        else
        {
          int v228 = 4;
          unsigned int v123 = 3;
        }
        LODWORD(v226) = v123;
        v208[0] = (uint64_t *)v123;
        uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        uint64_t v125 = (void *)mlir::RankedTensorType::get((uint64_t)v208, 1, IntegerType, 0);
        uint64_t v126 = v125;
        uint64_t v127 = *(void *)(a2 + 24);
        if (!v125) {
          goto LABEL_122;
        }
        uint64_t v128 = *v125;
        unint64_t v129 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v130 = *(unsigned int *)(v128 + 16);
        if (!v130) {
          goto LABEL_122;
        }
        uint64_t v131 = *(void **)(v128 + 8);
        uint64_t v132 = &v131[2 * v130];
        do
        {
          unint64_t v133 = v130 >> 1;
          unint64_t v134 = &v131[2 * (v130 >> 1)];
          unint64_t v136 = *v134;
          uint64_t v135 = v134 + 2;
          v130 += ~(v130 >> 1);
          if (v136 < v129) {
            uint64_t v131 = v135;
          }
          else {
            unint64_t v130 = v133;
          }
        }
        while (v130);
        if (v131 != v132 && *v131 == v129) {
          uint64_t v137 = v131[1];
        }
        else {
LABEL_122:
        }
          uint64_t v137 = 0;
        BOOL v210 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v126, v137, v225, 4 * v226, 4, 1, 1);
        v208[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v127, &v210);
        uint64_t v212 = (uint64_t)mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), &v212, v208)- 16;
        if (v225 != (char *)&v227) {
          free(v225);
        }
        uint64_t v138 = *(void *)(a2 + 24);
        LODWORD(v225) = 0;
        LODWORD(v208[0]) = 1;
        uint64_t v213 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), v138, (uint64_t *)&v213, (unsigned int *)&v225, (unsigned int *)v208)- 16);
        LODWORD(v210) = 1;
        uint64_t v139 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        uint64_t v140 = (void *)mlir::RankedTensorType::get(0, 0, v139, 0);
        uint64_t v141 = v140;
        uint64_t v142 = *(void *)(a2 + 24);
        if (!v140) {
          goto LABEL_134;
        }
        uint64_t v143 = *v140;
        unint64_t v144 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v145 = *(unsigned int *)(v143 + 16);
        if (!v145) {
          goto LABEL_134;
        }
        uint64_t v146 = *(void **)(v143 + 8);
        uint64_t v147 = &v146[2 * v145];
        do
        {
          unint64_t v148 = v145 >> 1;
          v149 = &v146[2 * (v145 >> 1)];
          unint64_t v151 = *v149;
          uint64_t v150 = v149 + 2;
          v145 += ~(v145 >> 1);
          if (v151 < v144) {
            uint64_t v146 = v150;
          }
          else {
            unint64_t v145 = v148;
          }
        }
        while (v145);
        if (v146 != v147 && *v146 == v144) {
          uint64_t v152 = v146[1];
        }
        else {
LABEL_134:
        }
          uint64_t v152 = 0;
        v208[0] = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v141, v152, &v210, 4, 4, 1, 1);
        v225 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v142, v208)- 16;
        uint64_t v213 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), (uint64_t *)&v213, (uint64_t *)&v225)- 16);
        uint64_t v153 = *(void *)(a2 + 24);
        LOBYTE(v225) = 0;
        BOOL v210 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value,mlir::Value,BOOL,BOOL>(a3 + 1, v153, &v212, (uint64_t *)&v213, v216, (unsigned __int8 *)&v225)- 16);
        if (v218)
        {
          uint64_t v209 = v217;
          uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v209);
          v155 = (uint64_t *)(v209[1] & 0xFFFFFFFFFFFFFFF8);
          if (!v155) {
            goto LABEL_145;
          }
          uint64_t v156 = *v155;
          unint64_t v157 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v158 = *(unsigned int *)(v156 + 16);
          if (!v158) {
            goto LABEL_145;
          }
          uint64_t v159 = *(void **)(v156 + 8);
          uint64_t v160 = &v159[2 * v158];
          do
          {
            unint64_t v161 = v158 >> 1;
            unint64_t v162 = &v159[2 * (v158 >> 1)];
            unint64_t v164 = *v162;
            uint64_t v163 = v162 + 2;
            v158 += ~(v158 >> 1);
            if (v164 < v157) {
              uint64_t v159 = v163;
            }
            else {
              unint64_t v158 = v161;
            }
          }
          while (v158);
          if (v159 != v160 && *v159 == v157) {
            unint64_t v165 = (uint64_t *)v159[1];
          }
          else {
LABEL_145:
          }
            unint64_t v165 = 0;
          v208[0] = v155;
          v208[1] = v165;
          v225 = (char *)&v227;
          uint64_t v227 = 0x1FFFFFFFFLL;
          uint64_t v226 = 0x200000002;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v208))
          {
            uint64_t v166 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v208);
            if (v167)
            {
              uint64_t v168 = 8 * v167;
              while (*v166 != 0x8000000000000000)
              {
                ++v166;
                v168 -= 8;
                if (!v168) {
                  goto LABEL_151;
                }
              }
            }
            else
            {
LABEL_151:
              uint64_t v169 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v208);
              int NumElements = mlir::ShapedType::getNumElements(v169, v170);
              *(_DWORD *)v225 = NumElements;
            }
          }
          uint64_t v207 = 2;
          uint64_t v172 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
          v173 = (void *)mlir::RankedTensorType::get((uint64_t)&v207, 1, v172, 0);
          uint64_t v174 = v173;
          if (!v173) {
            goto LABEL_161;
          }
          uint64_t v175 = *v173;
          unint64_t v176 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v177 = *(unsigned int *)(v175 + 16);
          if (!v177) {
            goto LABEL_161;
          }
          uint64_t v178 = *(void **)(v175 + 8);
          v179 = &v178[2 * v177];
          do
          {
            unint64_t v180 = v177 >> 1;
            uint64_t v181 = &v178[2 * (v177 >> 1)];
            unint64_t v183 = *v181;
            long long v182 = v181 + 2;
            v177 += ~(v177 >> 1);
            if (v183 < v176) {
              uint64_t v178 = v182;
            }
            else {
              unint64_t v177 = v180;
            }
          }
          while (v177);
          if (v178 != v179 && *v178 == v176) {
            uint64_t v184 = v178[1];
          }
          else {
LABEL_161:
          }
            uint64_t v184 = 0;
          uint64_t v206 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v174, v184, v225, 4 * v226, 4, 1, 1);
          uint64_t v207 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), Loc, &v206);
          uint64_t v209 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, Loc, (uint64_t *)&v209, &v207)- 16);
          uint64_t v206 = (uint64_t *)mlir::getElementTypeOrSelf((void *)(v210[1] & 0xFFFFFFFFFFFFFFF8));
          if (v206 != (uint64_t *)mlir::getElementTypeOrSelf((void *)(v209[1] & 0xFFFFFFFFFFFFFFF8))) {
            uint64_t v209 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v209, (uint64_t *)&v206)- 16);
          }
          BOOL v210 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>(a3 + 1, Loc, (uint64_t *)&v210, (uint64_t *)&v209)- 16);
          if (v225 != (char *)&v227) {
            free(v225);
          }
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
        v225 = v185;
        uint64_t v186 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        uint64_t v188 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v225, 1, v186, 0);
        v225 = (char *)&v227;
        uint64_t v226 = 0x500000000;
        int v189 = v223;
        if (!v223)
        {
          uint64_t v192 = &v227;
LABEL_175:
          *(_DWORD *)uint64_t v192 = *((_DWORD *)v192 + 1);
          *((_DWORD *)v192 + 1) = v187;
          uint64_t v193 = *(void *)(a2 + 24);
          if (!v188) {
            goto LABEL_184;
          }
          uint64_t v194 = *v188;
          unint64_t v195 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v196 = *(unsigned int *)(v194 + 16);
          if (!v196) {
            goto LABEL_184;
          }
          v197 = *(void **)(v194 + 8);
          v198 = &v197[2 * v196];
          do
          {
            unint64_t v199 = v196 >> 1;
            unint64_t v200 = &v197[2 * (v196 >> 1)];
            unint64_t v202 = *v200;
            v201 = v200 + 2;
            v196 += ~(v196 >> 1);
            if (v202 < v195) {
              v197 = v201;
            }
            else {
              unint64_t v196 = v199;
            }
          }
          while (v196);
          if (v197 != v198 && *v197 == v195) {
            uint64_t v203 = v197[1];
          }
          else {
LABEL_184:
          }
            uint64_t v203 = 0;
          uint64_t v80 = 1;
          uint64_t v209 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v188, v203, v225, 4 * v226, 4, 1, 1);
          v208[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v193, &v209);
          BOOL v210 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, *(void *)(a2 + 24), (uint64_t *)&v210, v208)- 16);
          if (v225 != (char *)&v227) {
            free(v225);
          }
          LODWORD(v225) = 0;
          LODWORD(v208[0]) = 1;
          v204 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), *(void *)(a2 + 24), (uint64_t *)&v210, (unsigned int *)&v225, (unsigned int *)v208);
          (*((void (**)(mlir::BoolAttr **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v204);
          goto LABEL_188;
        }
        if (v223 < 6)
        {
          uint64_t v191 = &v227;
          unsigned int v190 = v223;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v225, &v227, v223, 4);
          unsigned int v190 = v223;
          if (!v223)
          {
LABEL_174:
            LODWORD(v226) = v189;
            uint64_t v192 = (uint64_t *)v225;
            int v187 = *(_DWORD *)v225;
            goto LABEL_175;
          }
          uint64_t v191 = (uint64_t *)v225;
        }
        memcpy(v191, __src, 4 * v190);
        goto LABEL_174;
      }
    }
    int v81 = (int8x16_t *)((char *)__src + 4 * v77);
    unint64_t v82 = (v75 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v82 >= 7)
    {
      unint64_t v85 = v82 + 1;
      uint64_t v86 = (v82 + 1) & 0x3FFFFFFFFFFFFFF8;
      uint64_t v83 = (uint64_t *)(v74 + 8 * v86);
      uint64_t v84 = &v81->i32[v86];
      uint64_t v87 = v81 + 1;
      unint64_t v88 = (int32x4_t *)(v74 + 32);
      int64x2_t v89 = vdupq_n_s64(0x8000000000000000);
      uint64_t v90 = v86;
      do
      {
        int32x4_t v91 = v88[-2];
        int32x4_t v92 = v88[-1];
        int32x4_t v93 = *v88;
        int32x4_t v94 = v88[1];
        v88 += 4;
        v87[-1] = vorrq_s8((int8x16_t)vuzp1q_s32(v91, v92), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v91, v89), (int32x4_t)vceqq_s64((int64x2_t)v92, v89)));
        *uint64_t v87 = vorrq_s8((int8x16_t)vuzp1q_s32(v93, v94), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v93, v89), (int32x4_t)vceqq_s64((int64x2_t)v94, v89)));
        v87 += 2;
        v90 -= 8;
      }
      while (v90);
      if (v85 == v86)
      {
LABEL_92:
        int v78 = v223;
        goto LABEL_93;
      }
    }
    else
    {
      uint64_t v83 = (uint64_t *)v74;
      uint64_t v84 = (int *)v81;
    }
    do
    {
      uint64_t v96 = *v83++;
      int v95 = v96;
      if (v96 == 0x8000000000000000) {
        int v95 = -1;
      }
      *v84++ = v95;
    }
    while (v83 != (uint64_t *)(v74 + v76));
    goto LABEL_92;
  }
  v225 = "failed: pattern did not match";
  __int16 v229 = 259;
  __src = &v225;
  uint64_t v79 = (uint64_t)a3[2];
  if (v79 && mlir::RewriterBase::Listener::classof(v79)) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v79 + 64))(v79, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
  }
  else {
    return 0;
  }
}

void *mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv3DOp>::~CanonicalizeConvToMatMul(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv3DOp>::~CanonicalizeConvToMatMul(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Conv3DOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Conv3DOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Conv3DOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv3DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t v228 = *MEMORY[0x1E4F143B8];
  v209[0] = a2;
  size_t v5 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  unint64_t v9 = *(void **)(v6 + 8);
  char v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    unint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    BOOL v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      unint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  __src = v5;
  uint64_t v221 = v15;
  uint64_t v16 = (void *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16) {
    goto LABEL_20;
  }
  uint64_t v17 = *v16;
  unint64_t v18 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v19 = *(unsigned int *)(v17 + 16);
  if (!v19) {
    goto LABEL_20;
  }
  unint64_t v20 = *(void **)(v17 + 8);
  BOOL v21 = &v20[2 * v19];
  do
  {
    unint64_t v22 = v19 >> 1;
    unint64_t v23 = &v20[2 * (v19 >> 1)];
    unint64_t v25 = *v23;
    uint64_t v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18) {
      unint64_t v20 = v24;
    }
    else {
      unint64_t v19 = v22;
    }
  }
  while (v19);
  if (v20 != v21 && *v20 == v18) {
    uint64_t v26 = v20[1];
  }
  else {
LABEL_20:
  }
    uint64_t v26 = 0;
  char v218 = v16;
  uint64_t v219 = v26;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v5);
  if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(v16)) {
    goto LABEL_54;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__src)) {
    goto LABEL_54;
  }
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v218) & 1) == 0) {
    goto LABEL_54;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
  uint64_t v29 = v28;
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
  uint64_t v32 = v31;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v209) != 7
    || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v209) != 9
    || v29 != 5
    || v32 != 5
    || ArgAttrsAttr[2] != 1
    || ArgAttrsAttr[3] != 1
    || ArgAttrsAttr[4] != 1
    || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v209) != (void *)1)
  {
    goto LABEL_54;
  }
  uint64_t v223 = (char *)&v225;
  uint64_t v224 = 0x600000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v209);
  uint64_t v33 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v33, v34, (uint64_t)&v223, 1);
  uint64_t v35 = (uint64_t *)v223;
  if (v224)
  {
    uint64_t v36 = 0;
    while (*(void *)&v223[v36] == 1)
    {
      v36 += 8;
      if (8 * v224 == v36) {
        goto LABEL_36;
      }
    }
    goto LABEL_200;
  }
LABEL_36:
  if (v223 != (char *)&v225) {
    free(v223);
  }
  uint64_t v223 = (char *)&v225;
  uint64_t v224 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v209);
  uint64_t v37 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v37, v38, (uint64_t)&v223, 1);
  uint64_t v35 = (uint64_t *)v223;
  if (v224)
  {
    uint64_t v39 = 0;
    while (*(void *)&v223[v39] == 1)
    {
      v39 += 8;
      if (8 * v224 == v39) {
        goto LABEL_42;
      }
    }
    goto LABEL_200;
  }
LABEL_42:
  if (v223 != (char *)&v225) {
    free(v223);
  }
  int PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v209);
  if ((PaddingStyle - 1) < 2 || PaddingStyle == 4)
  {
LABEL_53:
    uint64_t v44 = *(void *)(v209[0] + 72);
    uint64_t v45 = *(uint64_t **)(v44 + 24);
    uint64_t v46 = *(void *)(v44 + 56);
    Strides = v45;
    uint64_t v213 = v46;
    v214[0] = 0;
    LOBYTE(v215) = 0;
    char v216 = 0;
    char v217 = 1;
    goto LABEL_55;
  }
  if (PaddingStyle)
  {
LABEL_54:
    LOBYTE(Strides) = 0;
    char v217 = 0;
    goto LABEL_55;
  }
  uint64_t v223 = (char *)&v225;
  uint64_t v224 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v209);
  uint64_t v41 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v41, v42, (uint64_t)&v223, 1);
  uint64_t v35 = (uint64_t *)v223;
  if (!v224)
  {
LABEL_51:
    if (v223 != (char *)&v225) {
      free(v223);
    }
    goto LABEL_53;
  }
  uint64_t v43 = 0;
  while (!*(void *)&v223[v43])
  {
    v43 += 8;
    if (8 * v224 == v43) {
      goto LABEL_51;
    }
  }
LABEL_200:
  LOBYTE(Strides) = 0;
  char v217 = 0;
  if (v35 != &v225) {
    free(v35);
  }
LABEL_55:
  if (v217)
  {
    uint64_t v210 = v213;
    v211 = Strides;
    uint64_t v47 = (void *)(Strides[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v47) {
      goto LABEL_65;
    }
    uint64_t v48 = *v47;
    unint64_t v49 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v50 = *(unsigned int *)(v48 + 16);
    if (!v50) {
      goto LABEL_65;
    }
    unint64_t v51 = *(void **)(v48 + 8);
    unint64_t v52 = &v51[2 * v50];
    do
    {
      unint64_t v53 = v50 >> 1;
      uint64_t v54 = &v51[2 * (v50 >> 1)];
      unint64_t v56 = *v54;
      unint64_t v55 = v54 + 2;
      v50 += ~(v50 >> 1);
      if (v56 < v49) {
        unint64_t v51 = v55;
      }
      else {
        unint64_t v50 = v53;
      }
    }
    while (v50);
    if (v51 != v52 && *v51 == v49) {
      uint64_t v57 = v51[1];
    }
    else {
LABEL_65:
    }
      uint64_t v57 = 0;
    char v218 = v47;
    uint64_t v219 = v57;
    unint64_t v58 = (uint64_t *)(*(void *)(v210 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v58) {
      goto LABEL_75;
    }
    uint64_t v59 = *v58;
    unint64_t v60 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v61 = *(unsigned int *)(v59 + 16);
    if (!v61) {
      goto LABEL_75;
    }
    unint64_t v62 = *(void **)(v59 + 8);
    unint64_t v63 = &v62[2 * v61];
    do
    {
      unint64_t v64 = v61 >> 1;
      BOOL v65 = &v62[2 * (v61 >> 1)];
      unint64_t v67 = *v65;
      unint64_t v66 = v65 + 2;
      v61 += ~(v61 >> 1);
      if (v67 < v60) {
        unint64_t v62 = v66;
      }
      else {
        unint64_t v61 = v64;
      }
    }
    while (v61);
    if (v62 != v63 && *v62 == v60) {
      uint64_t v68 = v62[1];
    }
    else {
LABEL_75:
    }
      uint64_t v68 = 0;
    v209[0] = v58;
    v209[1] = v68;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
    uint64_t v70 = v69;
    uint64_t v72 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
    uint64_t v73 = v71;
    unint64_t v74 = 8 * v71;
    __src = v222;
    uint64_t v221 = 0x500000000;
    if ((unint64_t)(8 * v71) < 0x29)
    {
      uint64_t v75 = 0;
      int v76 = 0;
      if (!v71) {
        goto LABEL_93;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v222, (8 * v71) >> 3, 4);
      uint64_t v75 = v221;
      int v76 = v221;
      if (!v73)
      {
LABEL_93:
        LODWORD(v221) = v76 + (v74 >> 3);
        uint64_t v95 = v214[0];
        uint64_t v96 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v209) + 8 * v95);
        if (v96 == 0x8000000000000000) {
          int v97 = -1;
        }
        else {
          int v97 = v96;
        }
        uint64_t v98 = (int32x4_t *)__src;
        *((_DWORD *)__src + 1) = v97;
        if (!v221) {
          goto LABEL_110;
        }
        unint64_t v99 = (v221 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v99 >= 7)
        {
          unint64_t v102 = v99 + 1;
          uint64_t v103 = (v99 + 1) & 0x7FFFFFFFFFFFFFF8;
          unint64_t v101 = (int32x4_t *)((char *)v98 + 4 * v103);
          unint64_t v104 = v98 + 1;
          int64x2_t v105 = 0uLL;
          v106.i64[0] = -1;
          v106.i64[1] = -1;
          int8x16_t v107 = (int8x16_t)vdupq_n_s64(1uLL);
          uint64_t v108 = v103;
          int64x2_t v109 = 0uLL;
          int64x2_t v110 = 0uLL;
          int64x2_t v111 = 0uLL;
          do
          {
            int32x4_t v112 = vceqq_s32(v104[-1], v106);
            v113.i64[0] = v112.u32[0];
            v113.i64[1] = v112.u32[1];
            int64x2_t v114 = (int64x2_t)vandq_s8(v113, v107);
            v113.i64[0] = v112.u32[2];
            v113.i64[1] = v112.u32[3];
            int64x2_t v115 = (int64x2_t)vandq_s8(v113, v107);
            int32x4_t v116 = vceqq_s32(*v104, v106);
            v113.i64[0] = v116.u32[0];
            v113.i64[1] = v116.u32[1];
            int64x2_t v117 = (int64x2_t)vandq_s8(v113, v107);
            v113.i64[0] = v116.u32[2];
            v113.i64[1] = v116.u32[3];
            int64x2_t v109 = vaddq_s64(v109, v115);
            int64x2_t v105 = vaddq_s64(v105, v114);
            int64x2_t v111 = vaddq_s64(v111, (int64x2_t)vandq_s8(v113, v107));
            int64x2_t v110 = vaddq_s64(v110, v117);
            v104 += 2;
            v108 -= 8;
          }
          while (v108);
          unint64_t v100 = vaddvq_s64(vaddq_s64(vaddq_s64(v110, v105), vaddq_s64(v111, v109)));
          if (v102 == v103) {
            goto LABEL_106;
          }
        }
        else
        {
          unint64_t v100 = 0;
          unint64_t v101 = v98;
        }
        int32x4_t v118 = (int32x4_t *)((char *)v98 + 4 * v221);
        do
        {
          __int32 v119 = v101->i32[0];
          unint64_t v101 = (int32x4_t *)((char *)v101 + 4);
          if (v119 == -1) {
            ++v100;
          }
        }
        while (v101 != v118);
LABEL_106:
        if (v100 >= 2)
        {
          uint64_t v223 = "failed: unsupported dynamic dimensions";
          __int16 v227 = 259;
          v206[0] = (uint64_t *)&v223;
          uint64_t v120 = (uint64_t)a3[2];
          if (v120 && mlir::RewriterBase::Listener::classof(v120)) {
            uint64_t v78 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(void *)v120 + 64))(v120, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DOp &>(mlir::mps::Conv3DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v206);
          }
          else {
            uint64_t v78 = 0;
          }
LABEL_188:
          if (__src != v222) {
            free(__src);
          }
          return v78;
        }
LABEL_110:
        uint64_t v223 = (char *)&v225;
        HIDWORD(v224) = 3;
        uint64_t v225 = 0x300000002;
        if (v70 == 4)
        {
          unsigned int v121 = 2;
        }
        else
        {
          int v226 = 4;
          unsigned int v121 = 3;
        }
        LODWORD(v224) = v121;
        v206[0] = (uint64_t *)v121;
        uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        unsigned int v123 = (void *)mlir::RankedTensorType::get((uint64_t)v206, 1, IntegerType, 0);
        uint64_t v124 = v123;
        uint64_t v125 = *(void *)(a2 + 24);
        if (!v123) {
          goto LABEL_122;
        }
        uint64_t v126 = *v123;
        unint64_t v127 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v128 = *(unsigned int *)(v126 + 16);
        if (!v128) {
          goto LABEL_122;
        }
        unint64_t v129 = *(void **)(v126 + 8);
        unint64_t v130 = &v129[2 * v128];
        do
        {
          unint64_t v131 = v128 >> 1;
          uint64_t v132 = &v129[2 * (v128 >> 1)];
          unint64_t v134 = *v132;
          unint64_t v133 = v132 + 2;
          v128 += ~(v128 >> 1);
          if (v134 < v127) {
            unint64_t v129 = v133;
          }
          else {
            unint64_t v128 = v131;
          }
        }
        while (v128);
        if (v129 != v130 && *v129 == v127) {
          uint64_t v135 = v129[1];
        }
        else {
LABEL_122:
        }
          uint64_t v135 = 0;
        v208 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v124, v135, v223, 4 * v224, 4, 1, 1);
        v206[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v125, &v208);
        uint64_t v210 = (uint64_t)mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), &v210, v206)- 16;
        if (v223 != (char *)&v225) {
          free(v223);
        }
        uint64_t v136 = *(void *)(a2 + 24);
        LODWORD(v223) = 0;
        LODWORD(v206[0]) = 1;
        v211 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), v136, (uint64_t *)&v211, (unsigned int *)&v223, (unsigned int *)v206)- 16);
        LODWORD(v208) = 1;
        uint64_t v137 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        uint64_t v138 = (void *)mlir::RankedTensorType::get(0, 0, v137, 0);
        uint64_t v139 = v138;
        uint64_t v140 = *(void *)(a2 + 24);
        if (!v138) {
          goto LABEL_134;
        }
        uint64_t v141 = *v138;
        unint64_t v142 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v143 = *(unsigned int *)(v141 + 16);
        if (!v143) {
          goto LABEL_134;
        }
        unint64_t v144 = *(void **)(v141 + 8);
        unint64_t v145 = &v144[2 * v143];
        do
        {
          unint64_t v146 = v143 >> 1;
          uint64_t v147 = &v144[2 * (v143 >> 1)];
          unint64_t v149 = *v147;
          unint64_t v148 = v147 + 2;
          v143 += ~(v143 >> 1);
          if (v149 < v142) {
            unint64_t v144 = v148;
          }
          else {
            unint64_t v143 = v146;
          }
        }
        while (v143);
        if (v144 != v145 && *v144 == v142) {
          uint64_t v150 = v144[1];
        }
        else {
LABEL_134:
        }
          uint64_t v150 = 0;
        v206[0] = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v139, v150, &v208, 4, 4, 1, 1);
        uint64_t v223 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v140, v206)- 16;
        v211 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), (uint64_t *)&v211, (uint64_t *)&v223)- 16);
        uint64_t v151 = *(void *)(a2 + 24);
        LOBYTE(v223) = 0;
        v208 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value,mlir::Value,BOOL,BOOL>(a3 + 1, v151, &v210, (uint64_t *)&v211, v214, (unsigned __int8 *)&v223)- 16);
        if (v216)
        {
          uint64_t v207 = v215;
          uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v207);
          uint64_t v153 = (uint64_t *)(v207[1] & 0xFFFFFFFFFFFFFFF8);
          if (!v153) {
            goto LABEL_145;
          }
          uint64_t v154 = *v153;
          unint64_t v155 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v156 = *(unsigned int *)(v154 + 16);
          if (!v156) {
            goto LABEL_145;
          }
          unint64_t v157 = *(void **)(v154 + 8);
          unint64_t v158 = &v157[2 * v156];
          do
          {
            unint64_t v159 = v156 >> 1;
            uint64_t v160 = &v157[2 * (v156 >> 1)];
            unint64_t v162 = *v160;
            unint64_t v161 = v160 + 2;
            v156 += ~(v156 >> 1);
            if (v162 < v155) {
              unint64_t v157 = v161;
            }
            else {
              unint64_t v156 = v159;
            }
          }
          while (v156);
          if (v157 != v158 && *v157 == v155) {
            uint64_t v163 = (uint64_t *)v157[1];
          }
          else {
LABEL_145:
          }
            uint64_t v163 = 0;
          v206[0] = v153;
          v206[1] = v163;
          uint64_t v223 = (char *)&v225;
          uint64_t v225 = 0x1FFFFFFFFLL;
          uint64_t v224 = 0x200000002;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v206))
          {
            unint64_t v164 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v206);
            if (v165)
            {
              uint64_t v166 = 8 * v165;
              while (*v164 != 0x8000000000000000)
              {
                ++v164;
                v166 -= 8;
                if (!v166) {
                  goto LABEL_151;
                }
              }
            }
            else
            {
LABEL_151:
              uint64_t v167 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v206);
              int NumElements = mlir::ShapedType::getNumElements(v167, v168);
              *(_DWORD *)uint64_t v223 = NumElements;
            }
          }
          uint64_t v205 = 2;
          uint64_t v170 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
          uint64_t v171 = (void *)mlir::RankedTensorType::get((uint64_t)&v205, 1, v170, 0);
          uint64_t v172 = v171;
          if (!v171) {
            goto LABEL_161;
          }
          uint64_t v173 = *v171;
          unint64_t v174 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v175 = *(unsigned int *)(v173 + 16);
          if (!v175) {
            goto LABEL_161;
          }
          unint64_t v176 = *(void **)(v173 + 8);
          unint64_t v177 = &v176[2 * v175];
          do
          {
            unint64_t v178 = v175 >> 1;
            v179 = &v176[2 * (v175 >> 1)];
            unint64_t v181 = *v179;
            unint64_t v180 = v179 + 2;
            v175 += ~(v175 >> 1);
            if (v181 < v174) {
              unint64_t v176 = v180;
            }
            else {
              unint64_t v175 = v178;
            }
          }
          while (v175);
          if (v176 != v177 && *v176 == v174) {
            uint64_t v182 = v176[1];
          }
          else {
LABEL_161:
          }
            uint64_t v182 = 0;
          v204 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v172, v182, v223, 4 * v224, 4, 1, 1);
          uint64_t v205 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), Loc, &v204);
          uint64_t v207 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, Loc, (uint64_t *)&v207, &v205)- 16);
          v204 = (uint64_t *)mlir::getElementTypeOrSelf((void *)(v208[1] & 0xFFFFFFFFFFFFFFF8));
          if (v204 != (uint64_t *)mlir::getElementTypeOrSelf((void *)(v207[1] & 0xFFFFFFFFFFFFFFF8))) {
            uint64_t v207 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v207, (uint64_t *)&v204)- 16);
          }
          v208 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>(a3 + 1, Loc, (uint64_t *)&v208, (uint64_t *)&v207)- 16);
          if (v223 != (char *)&v225) {
            free(v223);
          }
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
        uint64_t v223 = v183;
        uint64_t v184 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        uint64_t v186 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v223, 1, v184, 0);
        uint64_t v223 = (char *)&v225;
        uint64_t v224 = 0x500000000;
        int v187 = v221;
        if (!v221)
        {
          unsigned int v190 = &v225;
LABEL_175:
          *(_DWORD *)unsigned int v190 = *((_DWORD *)v190 + 1);
          *((_DWORD *)v190 + 1) = v185;
          uint64_t v191 = *(void *)(a2 + 24);
          if (!v186) {
            goto LABEL_184;
          }
          uint64_t v192 = *v186;
          unint64_t v193 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v194 = *(unsigned int *)(v192 + 16);
          if (!v194) {
            goto LABEL_184;
          }
          unint64_t v195 = *(void **)(v192 + 8);
          unint64_t v196 = &v195[2 * v194];
          do
          {
            unint64_t v197 = v194 >> 1;
            v198 = &v195[2 * (v194 >> 1)];
            unint64_t v200 = *v198;
            unint64_t v199 = v198 + 2;
            v194 += ~(v194 >> 1);
            if (v200 < v193) {
              unint64_t v195 = v199;
            }
            else {
              unint64_t v194 = v197;
            }
          }
          while (v194);
          if (v195 != v196 && *v195 == v193) {
            uint64_t v201 = v195[1];
          }
          else {
LABEL_184:
          }
            uint64_t v201 = 0;
          uint64_t v78 = 1;
          uint64_t v207 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v186, v201, v223, 4 * v224, 4, 1, 1);
          v206[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v191, &v207);
          v208 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, *(void *)(a2 + 24), (uint64_t *)&v208, v206)- 16);
          if (v223 != (char *)&v225) {
            free(v223);
          }
          LODWORD(v223) = 0;
          LODWORD(v206[0]) = 1;
          unint64_t v202 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), *(void *)(a2 + 24), (uint64_t *)&v208, (unsigned int *)&v223, (unsigned int *)v206);
          (*((void (**)(mlir::BoolAttr **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v202);
          goto LABEL_188;
        }
        if (v221 < 6)
        {
          int v189 = &v225;
          unsigned int v188 = v221;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, &v225, v221, 4);
          unsigned int v188 = v221;
          if (!v221)
          {
LABEL_174:
            LODWORD(v224) = v187;
            unsigned int v190 = (uint64_t *)v223;
            int v185 = *(_DWORD *)v223;
            goto LABEL_175;
          }
          int v189 = (uint64_t *)v223;
        }
        memcpy(v189, __src, 4 * v188);
        goto LABEL_174;
      }
    }
    uint64_t v79 = (int8x16_t *)((char *)__src + 4 * v75);
    unint64_t v80 = (v73 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v80 >= 7)
    {
      unint64_t v83 = v80 + 1;
      uint64_t v84 = (v80 + 1) & 0x3FFFFFFFFFFFFFF8;
      int v81 = (uint64_t *)(v72 + 8 * v84);
      unint64_t v82 = &v79->i32[v84];
      unint64_t v85 = v79 + 1;
      uint64_t v86 = (int32x4_t *)(v72 + 32);
      int64x2_t v87 = vdupq_n_s64(0x8000000000000000);
      uint64_t v88 = v84;
      do
      {
        int32x4_t v89 = v86[-2];
        int32x4_t v90 = v86[-1];
        int32x4_t v91 = *v86;
        int32x4_t v92 = v86[1];
        v86 += 4;
        v85[-1] = vorrq_s8((int8x16_t)vuzp1q_s32(v89, v90), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v89, v87), (int32x4_t)vceqq_s64((int64x2_t)v90, v87)));
        int8x16_t *v85 = vorrq_s8((int8x16_t)vuzp1q_s32(v91, v92), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v91, v87), (int32x4_t)vceqq_s64((int64x2_t)v92, v87)));
        v85 += 2;
        v88 -= 8;
      }
      while (v88);
      if (v83 == v84)
      {
LABEL_92:
        int v76 = v221;
        goto LABEL_93;
      }
    }
    else
    {
      int v81 = (uint64_t *)v72;
      unint64_t v82 = (int *)v79;
    }
    do
    {
      uint64_t v94 = *v81++;
      int v93 = v94;
      if (v94 == 0x8000000000000000) {
        int v93 = -1;
      }
      *v82++ = v93;
    }
    while (v81 != (uint64_t *)(v72 + v74));
    goto LABEL_92;
  }
  uint64_t v223 = "failed: pattern did not match";
  __int16 v227 = 259;
  __src = &v223;
  uint64_t v77 = (uint64_t)a3[2];
  if (v77 && mlir::RewriterBase::Listener::classof(v77)) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v77 + 64))(v77, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DOp &>(mlir::mps::Conv3DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
  }
  else {
    return 0;
  }
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DOp &>(mlir::mps::Conv3DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void *mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv3DDataGradientOp>::~CanonicalizeConvToMatMul(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv3DDataGradientOp>::~CanonicalizeConvToMatMul(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Conv3DDataGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Conv3DDataGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Conv3DDataGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv3DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t v228 = *MEMORY[0x1E4F143B8];
  v209[0] = a2;
  size_t v5 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *v5;
  unint64_t v7 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v8 = *(unsigned int *)(v6 + 16);
  if (!v8) {
    goto LABEL_10;
  }
  unint64_t v9 = *(void **)(v6 + 8);
  char v10 = &v9[2 * v8];
  do
  {
    unint64_t v11 = v8 >> 1;
    unint64_t v12 = &v9[2 * (v8 >> 1)];
    unint64_t v14 = *v12;
    BOOL v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7) {
      unint64_t v9 = v13;
    }
    else {
      unint64_t v8 = v11;
    }
  }
  while (v8);
  if (v9 != v10 && *v9 == v7) {
    uint64_t v15 = v9[1];
  }
  else {
LABEL_10:
  }
    uint64_t v15 = 0;
  __src = v5;
  uint64_t v221 = v15;
  uint64_t v16 = (void *)(*(void *)(*(void *)(*(void *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16) {
    goto LABEL_20;
  }
  uint64_t v17 = *v16;
  unint64_t v18 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v19 = *(unsigned int *)(v17 + 16);
  if (!v19) {
    goto LABEL_20;
  }
  unint64_t v20 = *(void **)(v17 + 8);
  BOOL v21 = &v20[2 * v19];
  do
  {
    unint64_t v22 = v19 >> 1;
    unint64_t v23 = &v20[2 * (v19 >> 1)];
    unint64_t v25 = *v23;
    uint64_t v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18) {
      unint64_t v20 = v24;
    }
    else {
      unint64_t v19 = v22;
    }
  }
  while (v19);
  if (v20 != v21 && *v20 == v18) {
    uint64_t v26 = v20[1];
  }
  else {
LABEL_20:
  }
    uint64_t v26 = 0;
  char v218 = v16;
  uint64_t v219 = v26;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v5);
  if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(v16)) {
    goto LABEL_54;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__src)) {
    goto LABEL_54;
  }
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v218) & 1) == 0) {
    goto LABEL_54;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
  uint64_t v29 = v28;
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
  uint64_t v32 = v31;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v209) != 7
    || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v209) != 9
    || v29 != 5
    || v32 != 5
    || ArgAttrsAttr[2] != 1
    || ArgAttrsAttr[3] != 1
    || ArgAttrsAttr[4] != 1
    || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v209) != (void *)1)
  {
    goto LABEL_54;
  }
  uint64_t v223 = (char *)&v225;
  uint64_t v224 = 0x600000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v209);
  uint64_t v33 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v33, v34, (uint64_t)&v223, 1);
  uint64_t v35 = (uint64_t *)v223;
  if (v224)
  {
    uint64_t v36 = 0;
    while (*(void *)&v223[v36] == 1)
    {
      v36 += 8;
      if (8 * v224 == v36) {
        goto LABEL_36;
      }
    }
    goto LABEL_200;
  }
LABEL_36:
  if (v223 != (char *)&v225) {
    free(v223);
  }
  uint64_t v223 = (char *)&v225;
  uint64_t v224 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v209);
  uint64_t v37 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v37, v38, (uint64_t)&v223, 1);
  uint64_t v35 = (uint64_t *)v223;
  if (v224)
  {
    uint64_t v39 = 0;
    while (*(void *)&v223[v39] == 1)
    {
      v39 += 8;
      if (8 * v224 == v39) {
        goto LABEL_42;
      }
    }
    goto LABEL_200;
  }
LABEL_42:
  if (v223 != (char *)&v225) {
    free(v223);
  }
  int PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v209);
  if ((PaddingStyle - 1) < 2 || PaddingStyle == 4)
  {
LABEL_53:
    uint64_t v44 = *(void *)(v209[0] + 72);
    uint64_t v45 = *(uint64_t **)(v44 + 24);
    uint64_t v46 = *(void *)(v44 + 56);
    Strides = v45;
    uint64_t v213 = v46;
    v214[0] = 1;
    LOBYTE(v215) = 0;
    char v216 = 0;
    char v217 = 1;
    goto LABEL_55;
  }
  if (PaddingStyle)
  {
LABEL_54:
    LOBYTE(Strides) = 0;
    char v217 = 0;
    goto LABEL_55;
  }
  uint64_t v223 = (char *)&v225;
  uint64_t v224 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v209);
  uint64_t v41 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v41, v42, (uint64_t)&v223, 1);
  uint64_t v35 = (uint64_t *)v223;
  if (!v224)
  {
LABEL_51:
    if (v223 != (char *)&v225) {
      free(v223);
    }
    goto LABEL_53;
  }
  uint64_t v43 = 0;
  while (!*(void *)&v223[v43])
  {
    v43 += 8;
    if (8 * v224 == v43) {
      goto LABEL_51;
    }
  }
LABEL_200:
  LOBYTE(Strides) = 0;
  char v217 = 0;
  if (v35 != &v225) {
    free(v35);
  }
LABEL_55:
  if (v217)
  {
    uint64_t v210 = v213;
    v211 = Strides;
    uint64_t v47 = (void *)(Strides[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v47) {
      goto LABEL_65;
    }
    uint64_t v48 = *v47;
    unint64_t v49 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v50 = *(unsigned int *)(v48 + 16);
    if (!v50) {
      goto LABEL_65;
    }
    unint64_t v51 = *(void **)(v48 + 8);
    unint64_t v52 = &v51[2 * v50];
    do
    {
      unint64_t v53 = v50 >> 1;
      uint64_t v54 = &v51[2 * (v50 >> 1)];
      unint64_t v56 = *v54;
      unint64_t v55 = v54 + 2;
      v50 += ~(v50 >> 1);
      if (v56 < v49) {
        unint64_t v51 = v55;
      }
      else {
        unint64_t v50 = v53;
      }
    }
    while (v50);
    if (v51 != v52 && *v51 == v49) {
      uint64_t v57 = v51[1];
    }
    else {
LABEL_65:
    }
      uint64_t v57 = 0;
    char v218 = v47;
    uint64_t v219 = v57;
    unint64_t v58 = (uint64_t *)(*(void *)(v210 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v58) {
      goto LABEL_75;
    }
    uint64_t v59 = *v58;
    unint64_t v60 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v61 = *(unsigned int *)(v59 + 16);
    if (!v61) {
      goto LABEL_75;
    }
    unint64_t v62 = *(void **)(v59 + 8);
    unint64_t v63 = &v62[2 * v61];
    do
    {
      unint64_t v64 = v61 >> 1;
      BOOL v65 = &v62[2 * (v61 >> 1)];
      unint64_t v67 = *v65;
      unint64_t v66 = v65 + 2;
      v61 += ~(v61 >> 1);
      if (v67 < v60) {
        unint64_t v62 = v66;
      }
      else {
        unint64_t v61 = v64;
      }
    }
    while (v61);
    if (v62 != v63 && *v62 == v60) {
      uint64_t v68 = v62[1];
    }
    else {
LABEL_75:
    }
      uint64_t v68 = 0;
    v209[0] = v58;
    v209[1] = v68;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
    uint64_t v70 = v69;
    uint64_t v72 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
    uint64_t v73 = v71;
    unint64_t v74 = 8 * v71;
    __src = v222;
    uint64_t v221 = 0x500000000;
    if ((unint64_t)(8 * v71) < 0x29)
    {
      uint64_t v75 = 0;
      int v76 = 0;
      if (!v71) {
        goto LABEL_93;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v222, (8 * v71) >> 3, 4);
      uint64_t v75 = v221;
      int v76 = v221;
      if (!v73)
      {
LABEL_93:
        LODWORD(v221) = v76 + (v74 >> 3);
        uint64_t v95 = v214[0];
        uint64_t v96 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v209) + 8 * v95);
        if (v96 == 0x8000000000000000) {
          int v97 = -1;
        }
        else {
          int v97 = v96;
        }
        uint64_t v98 = (int32x4_t *)__src;
        *((_DWORD *)__src + 1) = v97;
        if (!v221) {
          goto LABEL_110;
        }
        unint64_t v99 = (v221 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v99 >= 7)
        {
          unint64_t v102 = v99 + 1;
          uint64_t v103 = (v99 + 1) & 0x7FFFFFFFFFFFFFF8;
          unint64_t v101 = (int32x4_t *)((char *)v98 + 4 * v103);
          unint64_t v104 = v98 + 1;
          int64x2_t v105 = 0uLL;
          v106.i64[0] = -1;
          v106.i64[1] = -1;
          int8x16_t v107 = (int8x16_t)vdupq_n_s64(1uLL);
          uint64_t v108 = v103;
          int64x2_t v109 = 0uLL;
          int64x2_t v110 = 0uLL;
          int64x2_t v111 = 0uLL;
          do
          {
            int32x4_t v112 = vceqq_s32(v104[-1], v106);
            v113.i64[0] = v112.u32[0];
            v113.i64[1] = v112.u32[1];
            int64x2_t v114 = (int64x2_t)vandq_s8(v113, v107);
            v113.i64[0] = v112.u32[2];
            v113.i64[1] = v112.u32[3];
            int64x2_t v115 = (int64x2_t)vandq_s8(v113, v107);
            int32x4_t v116 = vceqq_s32(*v104, v106);
            v113.i64[0] = v116.u32[0];
            v113.i64[1] = v116.u32[1];
            int64x2_t v117 = (int64x2_t)vandq_s8(v113, v107);
            v113.i64[0] = v116.u32[2];
            v113.i64[1] = v116.u32[3];
            int64x2_t v109 = vaddq_s64(v109, v115);
            int64x2_t v105 = vaddq_s64(v105, v114);
            int64x2_t v111 = vaddq_s64(v111, (int64x2_t)vandq_s8(v113, v107));
            int64x2_t v110 = vaddq_s64(v110, v117);
            v104 += 2;
            v108 -= 8;
          }
          while (v108);
          unint64_t v100 = vaddvq_s64(vaddq_s64(vaddq_s64(v110, v105), vaddq_s64(v111, v109)));
          if (v102 == v103) {
            goto LABEL_106;
          }
        }
        else
        {
          unint64_t v100 = 0;
          unint64_t v101 = v98;
        }
        int32x4_t v118 = (int32x4_t *)((char *)v98 + 4 * v221);
        do
        {
          __int32 v119 = v101->i32[0];
          unint64_t v101 = (int32x4_t *)((char *)v101 + 4);
          if (v119 == -1) {
            ++v100;
          }
        }
        while (v101 != v118);
LABEL_106:
        if (v100 >= 2)
        {
          uint64_t v223 = "failed: unsupported dynamic dimensions";
          __int16 v227 = 259;
          v206[0] = (uint64_t *)&v223;
          uint64_t v120 = (uint64_t)a3[2];
          if (v120 && mlir::RewriterBase::Listener::classof(v120)) {
            uint64_t v78 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(void *)v120 + 64))(v120, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DDataGradientOp &>(mlir::mps::Conv3DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v206);
          }
          else {
            uint64_t v78 = 0;
          }
LABEL_188:
          if (__src != v222) {
            free(__src);
          }
          return v78;
        }
LABEL_110:
        uint64_t v223 = (char *)&v225;
        HIDWORD(v224) = 3;
        uint64_t v225 = 0x300000002;
        if (v70 == 4)
        {
          unsigned int v121 = 2;
        }
        else
        {
          int v226 = 4;
          unsigned int v121 = 3;
        }
        LODWORD(v224) = v121;
        v206[0] = (uint64_t *)v121;
        uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        unsigned int v123 = (void *)mlir::RankedTensorType::get((uint64_t)v206, 1, IntegerType, 0);
        uint64_t v124 = v123;
        uint64_t v125 = *(void *)(a2 + 24);
        if (!v123) {
          goto LABEL_122;
        }
        uint64_t v126 = *v123;
        unint64_t v127 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v128 = *(unsigned int *)(v126 + 16);
        if (!v128) {
          goto LABEL_122;
        }
        unint64_t v129 = *(void **)(v126 + 8);
        unint64_t v130 = &v129[2 * v128];
        do
        {
          unint64_t v131 = v128 >> 1;
          uint64_t v132 = &v129[2 * (v128 >> 1)];
          unint64_t v134 = *v132;
          unint64_t v133 = v132 + 2;
          v128 += ~(v128 >> 1);
          if (v134 < v127) {
            unint64_t v129 = v133;
          }
          else {
            unint64_t v128 = v131;
          }
        }
        while (v128);
        if (v129 != v130 && *v129 == v127) {
          uint64_t v135 = v129[1];
        }
        else {
LABEL_122:
        }
          uint64_t v135 = 0;
        v208 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v124, v135, v223, 4 * v224, 4, 1, 1);
        v206[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v125, &v208);
        uint64_t v210 = (uint64_t)mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), &v210, v206)- 16;
        if (v223 != (char *)&v225) {
          free(v223);
        }
        uint64_t v136 = *(void *)(a2 + 24);
        LODWORD(v223) = 0;
        LODWORD(v206[0]) = 1;
        v211 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), v136, (uint64_t *)&v211, (unsigned int *)&v223, (unsigned int *)v206)- 16);
        LODWORD(v208) = 1;
        uint64_t v137 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        uint64_t v138 = (void *)mlir::RankedTensorType::get(0, 0, v137, 0);
        uint64_t v139 = v138;
        uint64_t v140 = *(void *)(a2 + 24);
        if (!v138) {
          goto LABEL_134;
        }
        uint64_t v141 = *v138;
        unint64_t v142 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v143 = *(unsigned int *)(v141 + 16);
        if (!v143) {
          goto LABEL_134;
        }
        unint64_t v144 = *(void **)(v141 + 8);
        unint64_t v145 = &v144[2 * v143];
        do
        {
          unint64_t v146 = v143 >> 1;
          uint64_t v147 = &v144[2 * (v143 >> 1)];
          unint64_t v149 = *v147;
          unint64_t v148 = v147 + 2;
          v143 += ~(v143 >> 1);
          if (v149 < v142) {
            unint64_t v144 = v148;
          }
          else {
            unint64_t v143 = v146;
          }
        }
        while (v143);
        if (v144 != v145 && *v144 == v142) {
          uint64_t v150 = v144[1];
        }
        else {
LABEL_134:
        }
          uint64_t v150 = 0;
        v206[0] = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v139, v150, &v208, 4, 4, 1, 1);
        uint64_t v223 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v140, v206)- 16;
        v211 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), (uint64_t *)&v211, (uint64_t *)&v223)- 16);
        uint64_t v151 = *(void *)(a2 + 24);
        LOBYTE(v223) = 0;
        v208 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value,mlir::Value,BOOL,BOOL>(a3 + 1, v151, &v210, (uint64_t *)&v211, v214, (unsigned __int8 *)&v223)- 16);
        if (v216)
        {
          uint64_t v207 = v215;
          uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v207);
          uint64_t v153 = (uint64_t *)(v207[1] & 0xFFFFFFFFFFFFFFF8);
          if (!v153) {
            goto LABEL_145;
          }
          uint64_t v154 = *v153;
          unint64_t v155 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v156 = *(unsigned int *)(v154 + 16);
          if (!v156) {
            goto LABEL_145;
          }
          unint64_t v157 = *(void **)(v154 + 8);
          unint64_t v158 = &v157[2 * v156];
          do
          {
            unint64_t v159 = v156 >> 1;
            uint64_t v160 = &v157[2 * (v156 >> 1)];
            unint64_t v162 = *v160;
            unint64_t v161 = v160 + 2;
            v156 += ~(v156 >> 1);
            if (v162 < v155) {
              unint64_t v157 = v161;
            }
            else {
              unint64_t v156 = v159;
            }
          }
          while (v156);
          if (v157 != v158 && *v157 == v155) {
            uint64_t v163 = (uint64_t *)v157[1];
          }
          else {
LABEL_145:
          }
            uint64_t v163 = 0;
          v206[0] = v153;
          v206[1] = v163;
          uint64_t v223 = (char *)&v225;
          uint64_t v225 = 0x1FFFFFFFFLL;
          uint64_t v224 = 0x200000002;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v206))
          {
            unint64_t v164 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v206);
            if (v165)
            {
              uint64_t v166 = 8 * v165;
              while (*v164 != 0x8000000000000000)
              {
                ++v164;
                v166 -= 8;
                if (!v166) {
                  goto LABEL_151;
                }
              }
            }
            else
            {
LABEL_151:
              uint64_t v167 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v206);
              int NumElements = mlir::ShapedType::getNumElements(v167, v168);
              *(_DWORD *)uint64_t v223 = NumElements;
            }
          }
          uint64_t v205 = 2;
          uint64_t v170 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
          uint64_t v171 = (void *)mlir::RankedTensorType::get((uint64_t)&v205, 1, v170, 0);
          uint64_t v172 = v171;
          if (!v171) {
            goto LABEL_161;
          }
          uint64_t v173 = *v171;
          unint64_t v174 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v175 = *(unsigned int *)(v173 + 16);
          if (!v175) {
            goto LABEL_161;
          }
          unint64_t v176 = *(void **)(v173 + 8);
          unint64_t v177 = &v176[2 * v175];
          do
          {
            unint64_t v178 = v175 >> 1;
            v179 = &v176[2 * (v175 >> 1)];
            unint64_t v181 = *v179;
            unint64_t v180 = v179 + 2;
            v175 += ~(v175 >> 1);
            if (v181 < v174) {
              unint64_t v176 = v180;
            }
            else {
              unint64_t v175 = v178;
            }
          }
          while (v175);
          if (v176 != v177 && *v176 == v174) {
            uint64_t v182 = v176[1];
          }
          else {
LABEL_161:
          }
            uint64_t v182 = 0;
          v204 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v172, v182, v223, 4 * v224, 4, 1, 1);
          uint64_t v205 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), Loc, &v204);
          uint64_t v207 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, Loc, (uint64_t *)&v207, &v205)- 16);
          v204 = (uint64_t *)mlir::getElementTypeOrSelf((void *)(v208[1] & 0xFFFFFFFFFFFFFFF8));
          if (v204 != (uint64_t *)mlir::getElementTypeOrSelf((void *)(v207[1] & 0xFFFFFFFFFFFFFFF8))) {
            uint64_t v207 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v207, (uint64_t *)&v204)- 16);
          }
          v208 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>(a3 + 1, Loc, (uint64_t *)&v208, (uint64_t *)&v207)- 16);
          if (v223 != (char *)&v225) {
            free(v223);
          }
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
        uint64_t v223 = v183;
        uint64_t v184 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        uint64_t v186 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v223, 1, v184, 0);
        uint64_t v223 = (char *)&v225;
        uint64_t v224 = 0x500000000;
        int v187 = v221;
        if (!v221)
        {
          unsigned int v190 = &v225;
LABEL_175:
          *(_DWORD *)unsigned int v190 = *((_DWORD *)v190 + 1);
          *((_DWORD *)v190 + 1) = v185;
          uint64_t v191 = *(void *)(a2 + 24);
          if (!v186) {
            goto LABEL_184;
          }
          uint64_t v192 = *v186;
          unint64_t v193 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v194 = *(unsigned int *)(v192 + 16);
          if (!v194) {
            goto LABEL_184;
          }
          unint64_t v195 = *(void **)(v192 + 8);
          unint64_t v196 = &v195[2 * v194];
          do
          {
            unint64_t v197 = v194 >> 1;
            v198 = &v195[2 * (v194 >> 1)];
            unint64_t v200 = *v198;
            unint64_t v199 = v198 + 2;
            v194 += ~(v194 >> 1);
            if (v200 < v193) {
              unint64_t v195 = v199;
            }
            else {
              unint64_t v194 = v197;
            }
          }
          while (v194);
          if (v195 != v196 && *v195 == v193) {
            uint64_t v201 = v195[1];
          }
          else {
LABEL_184:
          }
            uint64_t v201 = 0;
          uint64_t v78 = 1;
          uint64_t v207 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v186, v201, v223, 4 * v224, 4, 1, 1);
          v206[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v191, &v207);
          v208 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, *(void *)(a2 + 24), (uint64_t *)&v208, v206)- 16);
          if (v223 != (char *)&v225) {
            free(v223);
          }
          LODWORD(v223) = 0;
          LODWORD(v206[0]) = 1;
          unint64_t v202 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), *(void *)(a2 + 24), (uint64_t *)&v208, (unsigned int *)&v223, (unsigned int *)v206);
          (*((void (**)(mlir::BoolAttr **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v202);
          goto LABEL_188;
        }
        if (v221 < 6)
        {
          int v189 = &v225;
          unsigned int v188 = v221;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, &v225, v221, 4);
          unsigned int v188 = v221;
          if (!v221)
          {
LABEL_174:
            LODWORD(v224) = v187;
            unsigned int v190 = (uint64_t *)v223;
            int v185 = *(_DWORD *)v223;
            goto LABEL_175;
          }
          int v189 = (uint64_t *)v223;
        }
        memcpy(v189, __src, 4 * v188);
        goto LABEL_174;
      }
    }
    uint64_t v79 = (int8x16_t *)((char *)__src + 4 * v75);
    unint64_t v80 = (v73 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v80 >= 7)
    {
      unint64_t v83 = v80 + 1;
      uint64_t v84 = (v80 + 1) & 0x3FFFFFFFFFFFFFF8;
      int v81 = (uint64_t *)(v72 + 8 * v84);
      unint64_t v82 = &v79->i32[v84];
      unint64_t v85 = v79 + 1;
      uint64_t v86 = (int32x4_t *)(v72 + 32);
      int64x2_t v87 = vdupq_n_s64(0x8000000000000000);
      uint64_t v88 = v84;
      do
      {
        int32x4_t v89 = v86[-2];
        int32x4_t v90 = v86[-1];
        int32x4_t v91 = *v86;
        int32x4_t v92 = v86[1];
        v86 += 4;
        v85[-1] = vorrq_s8((int8x16_t)vuzp1q_s32(v89, v90), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v89, v87), (int32x4_t)vceqq_s64((int64x2_t)v90, v87)));
        int8x16_t *v85 = vorrq_s8((int8x16_t)vuzp1q_s32(v91, v92), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v91, v87), (int32x4_t)vceqq_s64((int64x2_t)v92, v87)));
        v85 += 2;
        v88 -= 8;
      }
      while (v88);
      if (v83 == v84)
      {
LABEL_92:
        int v76 = v221;
        goto LABEL_93;
      }
    }
    else
    {
      int v81 = (uint64_t *)v72;
      unint64_t v82 = (int *)v79;
    }
    do
    {
      uint64_t v94 = *v81++;
      int v93 = v94;
      if (v94 == 0x8000000000000000) {
        int v93 = -1;
      }
      *v82++ = v93;
    }
    while (v81 != (uint64_t *)(v72 + v74));
    goto LABEL_92;
  }
  uint64_t v223 = "failed: pattern did not match";
  __int16 v227 = 259;
  __src = &v223;
  uint64_t v77 = (uint64_t)a3[2];
  if (v77 && mlir::RewriterBase::Listener::classof(v77)) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v77 + 64))(v77, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DDataGradientOp &>(mlir::mps::Conv3DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
  }
  else {
    return 0;
  }
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DDataGradientOp &>(mlir::mps::Conv3DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void *mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::BiasAddOp>::~CanonicalizeConvToMatMul(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::BiasAddOp>::~CanonicalizeConvToMatMul(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::BiasAddOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::BiasAddOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::BiasAddOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::BiasAddOp>::matchAndRewrite(uint64_t a1, uint64_t *a2, mlir::BoolAttr **a3)
{
  uint64_t v290 = *MEMORY[0x1E4F143B8];
  v266[0] = a2;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v266)) {
    goto LABEL_2;
  }
  uint64_t Input = (void *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v266);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (!DefiningOp) {
    goto LABEL_67;
  }
  uint64_t v9 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id) {
    goto LABEL_67;
  }
  v270[0] = DefiningOp;
  char v10 = (char *)(*(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v10) {
    goto LABEL_16;
  }
  uint64_t v11 = *(void *)v10;
  unint64_t v12 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v13 = *(unsigned int *)(v11 + 16);
  if (!v13) {
    goto LABEL_16;
  }
  unint64_t v14 = *(void **)(v11 + 8);
  uint64_t v15 = &v14[2 * v13];
  do
  {
    unint64_t v16 = v13 >> 1;
    uint64_t v17 = &v14[2 * (v13 >> 1)];
    unint64_t v19 = *v17;
    unint64_t v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12) {
      unint64_t v14 = v18;
    }
    else {
      unint64_t v13 = v16;
    }
  }
  while (v13);
  if (v14 != v15 && *v14 == v12) {
    uint64_t v20 = v14[1];
  }
  else {
LABEL_16:
  }
    uint64_t v20 = 0;
  unint64_t v285 = v10;
  uint64_t v286 = v20;
  BOOL v21 = (uint64_t *)(*(void *)(*(void *)(*(void *)(v9 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v21) {
    goto LABEL_26;
  }
  uint64_t v22 = *v21;
  unint64_t v23 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v24 = *(unsigned int *)(v22 + 16);
  if (!v24) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void **)(v22 + 8);
  uint64_t v26 = &v25[2 * v24];
  do
  {
    unint64_t v27 = v24 >> 1;
    uint64_t v28 = &v25[2 * (v24 >> 1)];
    unint64_t v30 = *v28;
    uint64_t v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23) {
      unint64_t v25 = v29;
    }
    else {
      unint64_t v24 = v27;
    }
  }
  while (v24);
  if (v25 != v26 && *v25 == v23) {
    uint64_t v31 = v25[1];
  }
  else {
LABEL_26:
  }
    uint64_t v31 = 0;
  __src = v21;
  uint64_t v274 = v31;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v10);
  if (ElementTypeOrSelf == mlir::getElementTypeOrSelf(v21))
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v285))
    {
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__src))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v285);
        uint64_t v34 = v33;
        uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
        if (*(unsigned char *)(a1 + 96))
        {
          uint64_t v37 = ArgAttrsAttr;
          uint64_t v38 = v36;
          if (!mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v270)
            && mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v270) == 2
            && v34 == 4
            && v38 == 4
            && *(void *)(v37 + 16) == 1
            && *(void *)(v37 + 24) == 1
            && mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v270) == (void *)1)
          {
            uint64_t Input = &v278;
            uint64_t v277 = 0x600000000;
            v269[0] = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v270);
            uint64_t v39 = mlir::Attribute::cast<mlir::ElementsAttr>(v269);
            mlir::getIntValues<unsigned long long>((uint64_t)v39, v40, (uint64_t)&Input, 1);
            uint64_t v41 = (unsigned __int8 *)Input;
            if (v277)
            {
              uint64_t v42 = 0;
              while (*(void *)((char *)Input + v42) == 1)
              {
                v42 += 8;
                if (8 * v277 == v42) {
                  goto LABEL_42;
                }
              }
              goto LABEL_64;
            }
LABEL_42:
            if (Input != &v278) {
              free(Input);
            }
            uint64_t Input = &v278;
            uint64_t v277 = 0x600000000;
            v269[0] = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v270);
            uint64_t v43 = mlir::Attribute::cast<mlir::ElementsAttr>(v269);
            mlir::getIntValues<unsigned long long>((uint64_t)v43, v44, (uint64_t)&Input, 1);
            uint64_t v41 = (unsigned __int8 *)Input;
            if (v277)
            {
              uint64_t v45 = 0;
              while (*(void *)((char *)Input + v45) == 1)
              {
                v45 += 8;
                if (8 * v277 == v45) {
                  goto LABEL_48;
                }
              }
              goto LABEL_64;
            }
LABEL_48:
            if (Input != &v278) {
              free(Input);
            }
            int PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v270);
            if ((PaddingStyle - 1) < 2 || PaddingStyle == 4)
            {
LABEL_59:
              unsigned __int8 v50 = 0;
              uint64_t v51 = *(void *)(v270[0] + 72);
              unint64_t v52 = *(void **)(v51 + 24);
              uint64_t v53 = *(void *)(v51 + 56);
              LODWORD(v272) = v267;
              *(_DWORD *)((char *)&v272 + 3) = *(_DWORD *)((char *)&v267 + 3);
              LODWORD(v271) = v265;
              *(_DWORD *)((char *)&v271 + 3) = *(_DWORD *)((char *)&v265 + 3);
              goto LABEL_122;
            }
            if (!PaddingStyle)
            {
              uint64_t Input = &v278;
              uint64_t v277 = 0x600000000;
              v269[0] = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v270);
              uint64_t v47 = mlir::Attribute::cast<mlir::ElementsAttr>(v269);
              mlir::getIntValues<unsigned long long>((uint64_t)v47, v48, (uint64_t)&Input, 1);
              uint64_t v41 = (unsigned __int8 *)Input;
              if (v277)
              {
                uint64_t v49 = 0;
                while (!*(void *)((char *)Input + v49))
                {
                  v49 += 8;
                  if (8 * v277 == v49) {
                    goto LABEL_57;
                  }
                }
LABEL_64:
                if (v41 != &v278) {
                  free(v41);
                }
                goto LABEL_66;
              }
LABEL_57:
              if (Input != &v278) {
                free(Input);
              }
              goto LABEL_59;
            }
          }
        }
      }
    }
  }
LABEL_66:
  LODWORD(v272) = v267;
  *(_DWORD *)((char *)&v272 + 3) = *(_DWORD *)((char *)&v267 + 3);
  LODWORD(v271) = v265;
  *(_DWORD *)((char *)&v271 + 3) = *(_DWORD *)((char *)&v265 + 3);
LABEL_67:
  uint64_t Input = (void *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v266);
  uint64_t v54 = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (!v54) {
    goto LABEL_2;
  }
  uint64_t v55 = v54;
  if (*(_UNKNOWN **)(*(void *)(v54 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DDataGradientOp,void>::id) {
    goto LABEL_2;
  }
  v270[0] = v54;
  unint64_t v56 = (char *)(*(void *)(*(void *)(*(void *)(v54 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v56) {
    goto LABEL_78;
  }
  uint64_t v57 = *(void *)v56;
  unint64_t v58 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v59 = *(unsigned int *)(v57 + 16);
  if (!v59) {
    goto LABEL_78;
  }
  unint64_t v60 = *(void **)(v57 + 8);
  unint64_t v61 = &v60[2 * v59];
  do
  {
    unint64_t v62 = v59 >> 1;
    unint64_t v63 = &v60[2 * (v59 >> 1)];
    unint64_t v65 = *v63;
    unint64_t v64 = v63 + 2;
    v59 += ~(v59 >> 1);
    if (v65 < v58) {
      unint64_t v60 = v64;
    }
    else {
      unint64_t v59 = v62;
    }
  }
  while (v59);
  if (v60 != v61 && *v60 == v58) {
    uint64_t v66 = v60[1];
  }
  else {
LABEL_78:
  }
    uint64_t v66 = 0;
  unint64_t v285 = v56;
  uint64_t v286 = v66;
  unint64_t v67 = (uint64_t *)(*(void *)(*(void *)(*(void *)(v55 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v67) {
    goto LABEL_88;
  }
  uint64_t v68 = *v67;
  unint64_t v69 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v70 = *(unsigned int *)(v68 + 16);
  if (!v70) {
    goto LABEL_88;
  }
  uint64_t v71 = *(void **)(v68 + 8);
  uint64_t v72 = &v71[2 * v70];
  do
  {
    unint64_t v73 = v70 >> 1;
    unint64_t v74 = &v71[2 * (v70 >> 1)];
    unint64_t v76 = *v74;
    uint64_t v75 = v74 + 2;
    v70 += ~(v70 >> 1);
    if (v76 < v69) {
      uint64_t v71 = v75;
    }
    else {
      unint64_t v70 = v73;
    }
  }
  while (v70);
  if (v71 != v72 && *v71 == v69) {
    uint64_t v77 = v71[1];
  }
  else {
LABEL_88:
  }
    uint64_t v77 = 0;
  __src = v67;
  uint64_t v274 = v77;
  uint64_t v78 = mlir::getElementTypeOrSelf(v56);
  if (v78 != mlir::getElementTypeOrSelf(v67)) {
    goto LABEL_2;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v285)) {
    goto LABEL_2;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__src)) {
    goto LABEL_2;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v285);
  uint64_t v80 = v79;
  uint64_t v81 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
  if (!*(unsigned char *)(a1 + 96)) {
    goto LABEL_2;
  }
  uint64_t v83 = v81;
  uint64_t v84 = v82;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v270)
    || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v270) != 2
    || v80 != 4
    || v84 != 4
    || *(void *)(v83 + 16) != 1
    || *(void *)(v83 + 24) != 1
    || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v270) != (void *)1)
  {
    goto LABEL_2;
  }
  uint64_t Input = &v278;
  uint64_t v277 = 0x600000000;
  v269[0] = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v270);
  unint64_t v85 = mlir::Attribute::cast<mlir::ElementsAttr>(v269);
  mlir::getIntValues<unsigned long long>((uint64_t)v85, v86, (uint64_t)&Input, 1);
  int64x2_t v87 = (unsigned __int8 *)Input;
  if (v277)
  {
    uint64_t v88 = 0;
    while (*(void *)((char *)Input + v88) == 1)
    {
      v88 += 8;
      if (8 * v277 == v88) {
        goto LABEL_104;
      }
    }
    goto LABEL_157;
  }
LABEL_104:
  if (Input != &v278) {
    free(Input);
  }
  uint64_t Input = &v278;
  uint64_t v277 = 0x600000000;
  v269[0] = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v270);
  int32x4_t v89 = mlir::Attribute::cast<mlir::ElementsAttr>(v269);
  mlir::getIntValues<unsigned long long>((uint64_t)v89, v90, (uint64_t)&Input, 1);
  int64x2_t v87 = (unsigned __int8 *)Input;
  if (v277)
  {
    uint64_t v91 = 0;
    while (*(void *)((char *)Input + v91) == 1)
    {
      v91 += 8;
      if (8 * v277 == v91) {
        goto LABEL_110;
      }
    }
    goto LABEL_157;
  }
LABEL_110:
  if (Input != &v278) {
    free(Input);
  }
  int v92 = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v270);
  if ((v92 - 1) >= 2 && v92 != 4)
  {
    if (v92)
    {
LABEL_2:
      LOBYTE(Input) = 0;
      char v283 = 0;
      unint64_t v285 = "failed: pattern did not match";
      __int16 v289 = 259;
      __src = &v285;
      uint64_t v6 = (uint64_t)a3[2];
      if (!v6) {
        return 0;
      }
      uint64_t result = mlir::RewriterBase::Listener::classof(v6);
      if (result) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v6 + 64))(v6, a2[3], llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::BiasAddOp &>(mlir::mps::BiasAddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
      }
      return result;
    }
    uint64_t Input = &v278;
    uint64_t v277 = 0x600000000;
    v269[0] = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v270);
    int v93 = mlir::Attribute::cast<mlir::ElementsAttr>(v269);
    mlir::getIntValues<unsigned long long>((uint64_t)v93, v94, (uint64_t)&Input, 1);
    int64x2_t v87 = (unsigned __int8 *)Input;
    if (v277)
    {
      uint64_t v95 = 0;
      while (!*(void *)((char *)Input + v95))
      {
        v95 += 8;
        if (8 * v277 == v95) {
          goto LABEL_119;
        }
      }
LABEL_157:
      if (v87 != &v278) {
        free(v87);
      }
      goto LABEL_2;
    }
LABEL_119:
    if (Input != &v278) {
      free(Input);
    }
  }
  uint64_t v96 = *(void *)(v270[0] + 72);
  unint64_t v52 = *(void **)(v96 + 24);
  uint64_t v53 = *(void *)(v96 + 56);
  LODWORD(v272) = v267;
  *(_DWORD *)((char *)&v272 + 3) = *(_DWORD *)((char *)&v267 + 3);
  LODWORD(v271) = v265;
  *(_DWORD *)((char *)&v271 + 3) = *(_DWORD *)((char *)&v265 + 3);
  unsigned __int8 v50 = 1;
LABEL_122:
  int v97 = (char *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)v266) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v97) {
    goto LABEL_131;
  }
  uint64_t v98 = *(void *)v97;
  unint64_t v99 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v100 = *(unsigned int *)(v98 + 16);
  if (!v100) {
    goto LABEL_131;
  }
  unint64_t v101 = *(void **)(v98 + 8);
  unint64_t v102 = &v101[2 * v100];
  do
  {
    unint64_t v103 = v100 >> 1;
    unint64_t v104 = &v101[2 * (v100 >> 1)];
    unint64_t v106 = *v104;
    int64x2_t v105 = v104 + 2;
    v100 += ~(v100 >> 1);
    if (v106 < v99) {
      unint64_t v101 = v105;
    }
    else {
      unint64_t v100 = v103;
    }
  }
  while (v100);
  if (v101 != v102 && *v101 == v99) {
    uint64_t v107 = v101[1];
  }
  else {
LABEL_131:
  }
    uint64_t v107 = 0;
  unint64_t v285 = v97;
  uint64_t v286 = v107;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v285) & 1) == 0) {
    goto LABEL_2;
  }
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)v266);
  uint64_t Input = v52;
  uint64_t v277 = v53;
  unsigned __int8 v278 = v50;
  *(_DWORD *)v279 = v272;
  *(_DWORD *)&v279[3] = *(_DWORD *)((char *)&v272 + 3);
  v280 = (uint64_t *)Filter;
  char v281 = 1;
  *(_DWORD *)unint64_t v282 = v271;
  *(_DWORD *)&v282[3] = *(_DWORD *)((char *)&v271 + 3);
  char v283 = 1;
  *(_DWORD *)&v284[3] = *(_DWORD *)((char *)&v268 + 3);
  *(_DWORD *)uint64_t v284 = v268;
  uint64_t v271 = v53;
  v272 = v52;
  int64x2_t v109 = (uint64_t *)(v52[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v109) {
    goto LABEL_142;
  }
  uint64_t v110 = *v109;
  unint64_t v111 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v112 = *(unsigned int *)(v110 + 16);
  if (!v112) {
    goto LABEL_142;
  }
  int8x16_t v113 = *(void **)(v110 + 8);
  int64x2_t v114 = &v113[2 * v112];
  do
  {
    unint64_t v115 = v112 >> 1;
    int32x4_t v116 = &v113[2 * (v112 >> 1)];
    unint64_t v118 = *v116;
    int64x2_t v117 = v116 + 2;
    v112 += ~(v112 >> 1);
    if (v118 < v111) {
      int8x16_t v113 = v117;
    }
    else {
      unint64_t v112 = v115;
    }
  }
  while (v112);
  if (v113 != v114 && *v113 == v111) {
    uint64_t v119 = v113[1];
  }
  else {
LABEL_142:
  }
    uint64_t v119 = 0;
  v270[0] = v109;
  v270[1] = v119;
  uint64_t v120 = (uint64_t *)(*(void *)(v271 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v120) {
    goto LABEL_152;
  }
  uint64_t v121 = *v120;
  unint64_t v122 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v123 = *(unsigned int *)(v121 + 16);
  if (!v123) {
    goto LABEL_152;
  }
  uint64_t v124 = *(void **)(v121 + 8);
  uint64_t v125 = &v124[2 * v123];
  do
  {
    unint64_t v126 = v123 >> 1;
    unint64_t v127 = &v124[2 * (v123 >> 1)];
    unint64_t v129 = *v127;
    unint64_t v128 = v127 + 2;
    v123 += ~(v123 >> 1);
    if (v129 < v122) {
      uint64_t v124 = v128;
    }
    else {
      unint64_t v123 = v126;
    }
  }
  while (v123);
  if (v124 != v125 && *v124 == v122) {
    unint64_t v130 = (uint64_t *)v124[1];
  }
  else {
LABEL_152:
  }
    unint64_t v130 = 0;
  v269[0] = v120;
  v269[1] = v130;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v270);
  uint64_t v132 = v131;
  uint64_t v134 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v270);
  uint64_t v135 = v133;
  unint64_t v136 = 8 * v133;
  __src = v275;
  uint64_t v274 = 0x500000000;
  if ((unint64_t)(8 * v133) < 0x29)
  {
    uint64_t v137 = 0;
    int v138 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v275, (8 * v133) >> 3, 4);
    uint64_t v137 = v274;
    int v138 = v274;
  }
  if (v135)
  {
    uint64_t v139 = (int8x16_t *)((char *)__src + 4 * v137);
    unint64_t v140 = (v135 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v140 >= 7)
    {
      unint64_t v143 = v140 + 1;
      uint64_t v144 = (v140 + 1) & 0x3FFFFFFFFFFFFFF8;
      uint64_t v141 = (uint64_t *)(v134 + 8 * v144);
      unint64_t v142 = &v139->i32[v144];
      unint64_t v145 = v139 + 1;
      unint64_t v146 = (int32x4_t *)(v134 + 32);
      int64x2_t v147 = vdupq_n_s64(0x8000000000000000);
      uint64_t v148 = v144;
      do
      {
        int32x4_t v149 = v146[-2];
        int32x4_t v150 = v146[-1];
        int32x4_t v151 = *v146;
        int32x4_t v152 = v146[1];
        v146 += 4;
        v145[-1] = vorrq_s8((int8x16_t)vuzp1q_s32(v149, v150), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v149, v147), (int32x4_t)vceqq_s64((int64x2_t)v150, v147)));
        int8x16_t *v145 = vorrq_s8((int8x16_t)vuzp1q_s32(v151, v152), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v151, v147), (int32x4_t)vceqq_s64((int64x2_t)v152, v147)));
        v145 += 2;
        v148 -= 8;
      }
      while (v148);
      if (v143 == v144)
      {
LABEL_169:
        int v138 = v274;
        goto LABEL_170;
      }
    }
    else
    {
      uint64_t v141 = (uint64_t *)v134;
      unint64_t v142 = (int *)v139;
    }
    do
    {
      uint64_t v154 = *v141++;
      int v153 = v154;
      if (v154 == 0x8000000000000000) {
        int v153 = -1;
      }
      *v142++ = v153;
    }
    while (v141 != (uint64_t *)(v134 + v136));
    goto LABEL_169;
  }
LABEL_170:
  LODWORD(v274) = v138 + (v136 >> 3);
  uint64_t v155 = v278;
  uint64_t v156 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v269) + 8 * v155);
  if (v156 == 0x8000000000000000) {
    int v157 = -1;
  }
  else {
    int v157 = v156;
  }
  unint64_t v158 = (int32x4_t *)__src;
  *((_DWORD *)__src + 1) = v157;
  if (!v274) {
    goto LABEL_187;
  }
  unint64_t v159 = (v274 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v159 >= 7)
  {
    unint64_t v162 = v159 + 1;
    uint64_t v163 = (v159 + 1) & 0x7FFFFFFFFFFFFFF8;
    unint64_t v161 = (int32x4_t *)((char *)v158 + 4 * v163);
    unint64_t v164 = v158 + 1;
    int64x2_t v165 = 0uLL;
    v166.i64[0] = -1;
    v166.i64[1] = -1;
    int8x16_t v167 = (int8x16_t)vdupq_n_s64(1uLL);
    uint64_t v168 = v163;
    int64x2_t v169 = 0uLL;
    int64x2_t v170 = 0uLL;
    int64x2_t v171 = 0uLL;
    do
    {
      int32x4_t v172 = vceqq_s32(v164[-1], v166);
      v173.i64[0] = v172.u32[0];
      v173.i64[1] = v172.u32[1];
      int64x2_t v174 = (int64x2_t)vandq_s8(v173, v167);
      v173.i64[0] = v172.u32[2];
      v173.i64[1] = v172.u32[3];
      int64x2_t v175 = (int64x2_t)vandq_s8(v173, v167);
      int32x4_t v176 = vceqq_s32(*v164, v166);
      v173.i64[0] = v176.u32[0];
      v173.i64[1] = v176.u32[1];
      int64x2_t v177 = (int64x2_t)vandq_s8(v173, v167);
      v173.i64[0] = v176.u32[2];
      v173.i64[1] = v176.u32[3];
      int64x2_t v169 = vaddq_s64(v169, v175);
      int64x2_t v165 = vaddq_s64(v165, v174);
      int64x2_t v171 = vaddq_s64(v171, (int64x2_t)vandq_s8(v173, v167));
      int64x2_t v170 = vaddq_s64(v170, v177);
      v164 += 2;
      v168 -= 8;
    }
    while (v168);
    unint64_t v160 = vaddvq_s64(vaddq_s64(vaddq_s64(v170, v165), vaddq_s64(v171, v169)));
    if (v162 == v163) {
      goto LABEL_183;
    }
  }
  else
  {
    unint64_t v160 = 0;
    unint64_t v161 = v158;
  }
  unint64_t v178 = (int32x4_t *)((char *)v158 + 4 * v274);
  do
  {
    __int32 v179 = v161->i32[0];
    unint64_t v161 = (int32x4_t *)((char *)v161 + 4);
    if (v179 == -1) {
      ++v160;
    }
  }
  while (v161 != v178);
LABEL_183:
  if (v160 < 2)
  {
LABEL_187:
    unint64_t v285 = (char *)&v287;
    HIDWORD(v286) = 3;
    uint64_t v287 = 0x300000002;
    if (v132 == 4)
    {
      unsigned int v182 = 2;
    }
    else
    {
      int v288 = 4;
      unsigned int v182 = 3;
    }
    LODWORD(v286) = v182;
    v266[0] = (uint64_t *)v182;
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
    uint64_t v184 = (void *)mlir::RankedTensorType::get((uint64_t)v266, 1, IntegerType, 0);
    int v185 = v184;
    uint64_t v186 = a2[3];
    if (!v184) {
      goto LABEL_199;
    }
    uint64_t v187 = *v184;
    unint64_t v188 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v189 = *(unsigned int *)(v187 + 16);
    if (!v189) {
      goto LABEL_199;
    }
    unsigned int v190 = *(void **)(v187 + 8);
    uint64_t v191 = &v190[2 * v189];
    do
    {
      unint64_t v192 = v189 >> 1;
      unint64_t v193 = &v190[2 * (v189 >> 1)];
      unint64_t v195 = *v193;
      unint64_t v194 = v193 + 2;
      v189 += ~(v189 >> 1);
      if (v195 < v188) {
        unsigned int v190 = v194;
      }
      else {
        unint64_t v189 = v192;
      }
    }
    while (v189);
    if (v190 != v191 && *v190 == v188) {
      uint64_t v196 = v190[1];
    }
    else {
LABEL_199:
    }
      uint64_t v196 = 0;
    v268 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v185, v196, v285, 4 * v286, 4, 1, 1);
    v266[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v186, &v268);
    uint64_t v271 = (uint64_t)mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), a2[3], &v271, v266)- 16;
    if (v285 != (char *)&v287) {
      free(v285);
    }
    uint64_t v197 = a2[3];
    LODWORD(v285) = 0;
    LODWORD(v266[0]) = 1;
    v272 = (void *)((char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), v197, (uint64_t *)&v272, (unsigned int *)&v285, (unsigned int *)v266)- 16);
    LODWORD(v268) = 1;
    uint64_t v198 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
    unint64_t v199 = (void *)mlir::RankedTensorType::get(0, 0, v198, 0);
    unint64_t v200 = v199;
    uint64_t v201 = a2[3];
    if (!v199) {
      goto LABEL_211;
    }
    uint64_t v202 = *v199;
    unint64_t v203 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v204 = *(unsigned int *)(v202 + 16);
    if (!v204) {
      goto LABEL_211;
    }
    uint64_t v205 = *(void **)(v202 + 8);
    uint64_t v206 = &v205[2 * v204];
    do
    {
      unint64_t v207 = v204 >> 1;
      v208 = &v205[2 * (v204 >> 1)];
      unint64_t v210 = *v208;
      uint64_t v209 = v208 + 2;
      v204 += ~(v204 >> 1);
      if (v210 < v203) {
        uint64_t v205 = v209;
      }
      else {
        unint64_t v204 = v207;
      }
    }
    while (v204);
    if (v205 != v206 && *v205 == v203) {
      uint64_t v211 = v205[1];
    }
    else {
LABEL_211:
    }
      uint64_t v211 = 0;
    v266[0] = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v200, v211, &v268, 4, 4, 1, 1);
    unint64_t v285 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v201, v266)- 16;
    v272 = (void *)((char *)mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), a2[3], (uint64_t *)&v272, (uint64_t *)&v285)- 16);
    uint64_t v212 = a2[3];
    LOBYTE(v285) = 0;
    v268 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value,mlir::Value,BOOL,BOOL>(a3 + 1, v212, &v271, (uint64_t *)&v272, &v278, (unsigned __int8 *)&v285)- 16);
    if (v281)
    {
      char v267 = v280;
      uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v267);
      v214 = (uint64_t *)(v267[1] & 0xFFFFFFFFFFFFFFF8);
      if (!v214) {
        goto LABEL_222;
      }
      uint64_t v215 = *v214;
      unint64_t v216 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v217 = *(unsigned int *)(v215 + 16);
      if (!v217) {
        goto LABEL_222;
      }
      char v218 = *(void **)(v215 + 8);
      uint64_t v219 = &v218[2 * v217];
      do
      {
        unint64_t v220 = v217 >> 1;
        uint64_t v221 = &v218[2 * (v217 >> 1)];
        unint64_t v223 = *v221;
        v222 = v221 + 2;
        v217 += ~(v217 >> 1);
        if (v223 < v216) {
          char v218 = v222;
        }
        else {
          unint64_t v217 = v220;
        }
      }
      while (v217);
      if (v218 != v219 && *v218 == v216) {
        uint64_t v224 = (uint64_t *)v218[1];
      }
      else {
LABEL_222:
      }
        uint64_t v224 = 0;
      v266[0] = v214;
      v266[1] = v224;
      unint64_t v285 = (char *)&v287;
      uint64_t v287 = 0x1FFFFFFFFLL;
      uint64_t v286 = 0x200000002;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v266))
      {
        uint64_t v225 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v266);
        if (v226)
        {
          uint64_t v227 = 8 * v226;
          while (*v225 != 0x8000000000000000)
          {
            ++v225;
            v227 -= 8;
            if (!v227) {
              goto LABEL_228;
            }
          }
        }
        else
        {
LABEL_228:
          uint64_t v228 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v266);
          int NumElements = mlir::ShapedType::getNumElements(v228, v229);
          *(_DWORD *)unint64_t v285 = NumElements;
        }
      }
      uint64_t v265 = 2;
      uint64_t v231 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
      v232 = (void *)mlir::RankedTensorType::get((uint64_t)&v265, 1, v231, 0);
      uint64_t v233 = v232;
      if (!v232) {
        goto LABEL_238;
      }
      uint64_t v234 = *v232;
      unint64_t v235 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v236 = *(unsigned int *)(v234 + 16);
      if (!v236) {
        goto LABEL_238;
      }
      uint64_t v237 = *(void **)(v234 + 8);
      uint64_t v238 = &v237[2 * v236];
      do
      {
        unint64_t v239 = v236 >> 1;
        unint64_t v240 = &v237[2 * (v236 >> 1)];
        unint64_t v242 = *v240;
        v241 = v240 + 2;
        v236 += ~(v236 >> 1);
        if (v242 < v235) {
          uint64_t v237 = v241;
        }
        else {
          unint64_t v236 = v239;
        }
      }
      while (v236);
      if (v237 != v238 && *v237 == v235) {
        uint64_t v243 = v237[1];
      }
      else {
LABEL_238:
      }
        uint64_t v243 = 0;
      v264 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v233, v243, v285, 4 * v286, 4, 1, 1);
      uint64_t v265 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), Loc, &v264);
      char v267 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, Loc, (uint64_t *)&v267, &v265)- 16);
      v264 = (uint64_t *)mlir::getElementTypeOrSelf((void *)(v268[1] & 0xFFFFFFFFFFFFFFF8));
      if (v264 != (uint64_t *)mlir::getElementTypeOrSelf((void *)(v267[1] & 0xFFFFFFFFFFFFFFF8))) {
        char v267 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v267, (uint64_t *)&v264)- 16);
      }
      v268 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>(a3 + 1, Loc, (uint64_t *)&v268, (uint64_t *)&v267)- 16);
      if (v285 != (char *)&v287) {
        free(v285);
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v270);
    unint64_t v285 = v244;
    uint64_t v245 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
    uint64_t v247 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v285, 1, v245, 0);
    unint64_t v285 = (char *)&v287;
    uint64_t v286 = 0x500000000;
    int v248 = v274;
    if (!v274)
    {
      uint64_t v251 = &v287;
LABEL_251:
      *(_DWORD *)uint64_t v251 = *((_DWORD *)v251 + 1);
      *((_DWORD *)v251 + 1) = v246;
      uint64_t v252 = a2[3];
      if (!v247) {
        goto LABEL_260;
      }
      uint64_t v253 = *v247;
      unint64_t v254 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v255 = *(unsigned int *)(v253 + 16);
      if (!v255) {
        goto LABEL_260;
      }
      v256 = *(void **)(v253 + 8);
      uint64_t v257 = &v256[2 * v255];
      do
      {
        unint64_t v258 = v255 >> 1;
        unint64_t v259 = &v256[2 * (v255 >> 1)];
        unint64_t v261 = *v259;
        v260 = v259 + 2;
        v255 += ~(v255 >> 1);
        if (v261 < v254) {
          v256 = v260;
        }
        else {
          unint64_t v255 = v258;
        }
      }
      while (v255);
      if (v256 != v257 && *v256 == v254) {
        uint64_t v262 = v256[1];
      }
      else {
LABEL_260:
      }
        uint64_t v262 = 0;
      uint64_t v181 = 1;
      char v267 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v247, v262, v285, 4 * v286, 4, 1, 1);
      v266[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v252, &v267);
      v268 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, a2[3], (uint64_t *)&v268, v266)- 16);
      if (v285 != (char *)&v287) {
        free(v285);
      }
      LODWORD(v285) = 0;
      LODWORD(v266[0]) = 1;
      v263 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), a2[3], (uint64_t *)&v268, (unsigned int *)&v285, (unsigned int *)v266);
      (*((void (**)(mlir::BoolAttr **, uint64_t *, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v263);
      goto LABEL_265;
    }
    if (v274 < 6)
    {
      v250 = &v287;
      unsigned int v249 = v274;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v285, &v287, v274, 4);
      unsigned int v249 = v274;
      if (!v274)
      {
LABEL_250:
        LODWORD(v286) = v248;
        uint64_t v251 = (uint64_t *)v285;
        int v246 = *(_DWORD *)v285;
        goto LABEL_251;
      }
      v250 = (uint64_t *)v285;
    }
    memcpy(v250, __src, 4 * v249);
    goto LABEL_250;
  }
  unint64_t v285 = "failed: unsupported dynamic dimensions";
  __int16 v289 = 259;
  v266[0] = (uint64_t *)&v285;
  uint64_t v180 = (uint64_t)a3[2];
  if (v180 && mlir::RewriterBase::Listener::classof(v180)) {
    uint64_t v181 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(void *)v180 + 64))(v180, a2[3], llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::BiasAddOp &>(mlir::mps::BiasAddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v266);
  }
  else {
    uint64_t v181 = 0;
  }
LABEL_265:
  if (__src != v275) {
    free(__src);
  }
  return v181;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::BiasAddOp &>(mlir::mps::BiasAddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void *mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::AddOp>::~CanonicalizeConvToMatMul(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::AddOp>::~CanonicalizeConvToMatMul(void *__p)
{
  uint64_t v2 = (void *)__p[10];
  if (v2 != __p + 12) {
    free(v2);
  }
  unint64_t v3 = (void *)__p[4];
  if (v3 != __p + 6) {
    free(v3);
  }

  operator delete(__p);
}

uint64_t mlir::mps::anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::AddOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t v380 = *MEMORY[0x1E4F143B8];
  v355 = 0;
  uint64_t v356 = 0;
  v354 = 0;
  __src = &v356;
  uint64_t v364 = (uint64_t)&v355;
  v365[0] = 0;
  p_src = (char *)&__src;
  uint64_t v376 = (uint64_t)&v354;
  LOBYTE(v377) = 0;
  LOBYTE(v378) = 0;
  if (mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match((uint64_t *)&p_src, a2))
  {
    uint64_t v6 = v365[0];
    v351[0] = (uint64_t *)v365[0];
    unint64_t v7 = (void *)(*(void *)(*(void *)(*(void *)(v365[0] + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v7) {
      goto LABEL_11;
    }
    uint64_t v8 = *v7;
    unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v10 = *(unsigned int *)(v8 + 16);
    if (!v10) {
      goto LABEL_11;
    }
    uint64_t v11 = *(void **)(v8 + 8);
    unint64_t v12 = &v11[2 * v10];
    do
    {
      unint64_t v13 = v10 >> 1;
      unint64_t v14 = &v11[2 * (v10 >> 1)];
      unint64_t v16 = *v14;
      uint64_t v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9) {
        uint64_t v11 = v15;
      }
      else {
        unint64_t v10 = v13;
      }
    }
    while (v10);
    if (v11 != v12 && *v11 == v9) {
      uint64_t v17 = v11[1];
    }
    else {
LABEL_11:
    }
      uint64_t v17 = 0;
    v361 = v7;
    uint64_t v362 = v17;
    unint64_t v18 = (void *)(*(void *)(*(void *)(*(void *)(v6 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v18) {
      goto LABEL_21;
    }
    uint64_t v19 = *v18;
    unint64_t v20 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v21 = *(unsigned int *)(v19 + 16);
    if (!v21) {
      goto LABEL_21;
    }
    uint64_t v22 = *(void **)(v19 + 8);
    unint64_t v23 = &v22[2 * v21];
    do
    {
      unint64_t v24 = v21 >> 1;
      unint64_t v25 = &v22[2 * (v21 >> 1)];
      unint64_t v27 = *v25;
      uint64_t v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20) {
        uint64_t v22 = v26;
      }
      else {
        unint64_t v21 = v24;
      }
    }
    while (v21);
    if (v22 != v23 && *v22 == v20) {
      uint64_t v28 = v22[1];
    }
    else {
LABEL_21:
    }
      uint64_t v28 = 0;
    v359 = v18;
    uint64_t v360 = v28;
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
    if (ElementTypeOrSelf == mlir::getElementTypeOrSelf(v18))
    {
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v361))
      {
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v359))
        {
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
          uint64_t v31 = v30;
          uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v359);
          if (*(unsigned char *)(a1 + 96))
          {
            uint64_t v34 = ArgAttrsAttr;
            uint64_t v35 = v33;
            if (!mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v351)
              && mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v351) == 2
              && v31 == 4
              && v35 == 4
              && *(void *)(v34 + 16) == 1
              && *(void *)(v34 + 24) == 1
              && mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v351) == (void *)1)
            {
              v366 = &v368;
              uint64_t v367 = 0x600000000;
              Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v351);
              uint64_t v36 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
              mlir::getIntValues<unsigned long long>((uint64_t)v36, v37, (uint64_t)&v366, 1);
              uint64_t v38 = (unsigned __int8 *)v366;
              if (v367)
              {
                uint64_t v39 = 0;
                while (*(void *)((char *)v366 + v39) == 1)
                {
                  v39 += 8;
                  if (8 * v367 == v39) {
                    goto LABEL_37;
                  }
                }
                goto LABEL_57;
              }
LABEL_37:
              if (v366 != &v368) {
                free(v366);
              }
              v366 = &v368;
              uint64_t v367 = 0x600000000;
              Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v351);
              uint64_t v40 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
              mlir::getIntValues<unsigned long long>((uint64_t)v40, v41, (uint64_t)&v366, 1);
              uint64_t v38 = (unsigned __int8 *)v366;
              if (v367)
              {
                uint64_t v42 = 0;
                while (*(void *)((char *)v366 + v42) == 1)
                {
                  v42 += 8;
                  if (8 * v367 == v42) {
                    goto LABEL_43;
                  }
                }
                goto LABEL_57;
              }
LABEL_43:
              if (v366 != &v368) {
                free(v366);
              }
              int PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v351);
              if ((PaddingStyle - 1) < 2 || PaddingStyle == 4)
              {
LABEL_54:
                unsigned __int8 v47 = 0;
                uint64_t v48 = v351[0][9];
                uint64_t v49 = *(void **)(v48 + 24);
                uint64_t v50 = *(void *)(v48 + 56);
                LODWORD(v350) = *(_DWORD *)v353;
                *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
                LODWORD(v349) = *(_DWORD *)v352;
                *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
                uint64_t v51 = v354;
                uint64_t v52 = -3;
                goto LABEL_233;
              }
              if (!PaddingStyle)
              {
                v366 = &v368;
                uint64_t v367 = 0x600000000;
                Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v351);
                uint64_t v44 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
                mlir::getIntValues<unsigned long long>((uint64_t)v44, v45, (uint64_t)&v366, 1);
                uint64_t v38 = (unsigned __int8 *)v366;
                if (v367)
                {
                  uint64_t v46 = 0;
                  while (!*(void *)((char *)v366 + v46))
                  {
                    v46 += 8;
                    if (8 * v367 == v46) {
                      goto LABEL_52;
                    }
                  }
LABEL_57:
                  if (v38 != &v368) {
                    free(v38);
                  }
                  goto LABEL_59;
                }
LABEL_52:
                if (v366 != &v368) {
                  free(v366);
                }
                goto LABEL_54;
              }
            }
          }
        }
      }
    }
LABEL_59:
    LODWORD(v350) = *(_DWORD *)v353;
    *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
    LODWORD(v349) = *(_DWORD *)v352;
    *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
  }
  v355 = 0;
  uint64_t v356 = 0;
  v354 = 0;
  __src = &v356;
  uint64_t v364 = (uint64_t)&v355;
  v365[0] = 0;
  p_src = (char *)&__src;
  uint64_t v376 = (uint64_t)&v354;
  LOBYTE(v377) = 0;
  LOBYTE(v378) = 0;
  if (!mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match((uint64_t *)&p_src, a2))goto LABEL_119; {
  uint64_t v53 = v365[0];
  }
  v351[0] = (uint64_t *)v365[0];
  uint64_t v54 = (void *)(*(void *)(*(void *)(*(void *)(v365[0] + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v54) {
    goto LABEL_70;
  }
  uint64_t v55 = *v54;
  unint64_t v56 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v57 = *(unsigned int *)(v55 + 16);
  if (!v57) {
    goto LABEL_70;
  }
  unint64_t v58 = *(void **)(v55 + 8);
  unint64_t v59 = &v58[2 * v57];
  do
  {
    unint64_t v60 = v57 >> 1;
    unint64_t v61 = &v58[2 * (v57 >> 1)];
    unint64_t v63 = *v61;
    unint64_t v62 = v61 + 2;
    v57 += ~(v57 >> 1);
    if (v63 < v56) {
      unint64_t v58 = v62;
    }
    else {
      unint64_t v57 = v60;
    }
  }
  while (v57);
  if (v58 != v59 && *v58 == v56) {
    uint64_t v64 = v58[1];
  }
  else {
LABEL_70:
  }
    uint64_t v64 = 0;
  v361 = v54;
  uint64_t v362 = v64;
  unint64_t v65 = (void *)(*(void *)(*(void *)(*(void *)(v53 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v65) {
    goto LABEL_80;
  }
  uint64_t v66 = *v65;
  unint64_t v67 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v68 = *(unsigned int *)(v66 + 16);
  if (!v68) {
    goto LABEL_80;
  }
  unint64_t v69 = *(void **)(v66 + 8);
  unint64_t v70 = &v69[2 * v68];
  do
  {
    unint64_t v71 = v68 >> 1;
    uint64_t v72 = &v69[2 * (v68 >> 1)];
    unint64_t v74 = *v72;
    unint64_t v73 = v72 + 2;
    v68 += ~(v68 >> 1);
    if (v74 < v67) {
      unint64_t v69 = v73;
    }
    else {
      unint64_t v68 = v71;
    }
  }
  while (v68);
  if (v69 != v70 && *v69 == v67) {
    uint64_t v75 = v69[1];
  }
  else {
LABEL_80:
  }
    uint64_t v75 = 0;
  v359 = v65;
  uint64_t v360 = v75;
  uint64_t v76 = mlir::getElementTypeOrSelf(v54);
  if (v76 == mlir::getElementTypeOrSelf(v65))
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v361))
    {
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v359))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
        uint64_t v78 = v77;
        uint64_t v79 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v359);
        if (*(unsigned char *)(a1 + 96))
        {
          uint64_t v81 = v79;
          uint64_t v82 = v80;
          if (!mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v351)
            && mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v351) == 2
            && v78 == 4
            && v82 == 4
            && *(void *)(v81 + 16) == 1
            && *(void *)(v81 + 24) == 1
            && mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v351) == (void *)1)
          {
            v366 = &v368;
            uint64_t v367 = 0x600000000;
            Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v351);
            uint64_t v83 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
            mlir::getIntValues<unsigned long long>((uint64_t)v83, v84, (uint64_t)&v366, 1);
            unint64_t v85 = (unsigned __int8 *)v366;
            if (v367)
            {
              uint64_t v86 = 0;
              while (*(void *)((char *)v366 + v86) == 1)
              {
                v86 += 8;
                if (8 * v367 == v86) {
                  goto LABEL_96;
                }
              }
              goto LABEL_116;
            }
LABEL_96:
            if (v366 != &v368) {
              free(v366);
            }
            v366 = &v368;
            uint64_t v367 = 0x600000000;
            Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v351);
            int64x2_t v87 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
            mlir::getIntValues<unsigned long long>((uint64_t)v87, v88, (uint64_t)&v366, 1);
            unint64_t v85 = (unsigned __int8 *)v366;
            if (v367)
            {
              uint64_t v89 = 0;
              while (*(void *)((char *)v366 + v89) == 1)
              {
                v89 += 8;
                if (8 * v367 == v89) {
                  goto LABEL_102;
                }
              }
              goto LABEL_116;
            }
LABEL_102:
            if (v366 != &v368) {
              free(v366);
            }
            int v90 = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v351);
            if ((v90 - 1) < 2 || v90 == 4)
            {
LABEL_113:
              uint64_t v94 = v351[0][9];
              uint64_t v49 = *(void **)(v94 + 24);
              uint64_t v50 = *(void *)(v94 + 56);
              LODWORD(v350) = *(_DWORD *)v353;
              *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
              LODWORD(v349) = *(_DWORD *)v352;
              *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
              uint64_t v51 = v354;
              unsigned __int8 v47 = 1;
              uint64_t v52 = -3;
              goto LABEL_233;
            }
            if (!v90)
            {
              v366 = &v368;
              uint64_t v367 = 0x600000000;
              Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v351);
              uint64_t v91 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
              mlir::getIntValues<unsigned long long>((uint64_t)v91, v92, (uint64_t)&v366, 1);
              unint64_t v85 = (unsigned __int8 *)v366;
              if (v367)
              {
                uint64_t v93 = 0;
                while (!*(void *)((char *)v366 + v93))
                {
                  v93 += 8;
                  if (8 * v367 == v93) {
                    goto LABEL_111;
                  }
                }
LABEL_116:
                if (v85 != &v368) {
                  free(v85);
                }
                goto LABEL_118;
              }
LABEL_111:
              if (v366 != &v368) {
                free(v366);
              }
              goto LABEL_113;
            }
          }
        }
      }
    }
  }
LABEL_118:
  LODWORD(v350) = *(_DWORD *)v353;
  *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
  LODWORD(v349) = *(_DWORD *)v352;
  *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
LABEL_119:
  v355 = 0;
  uint64_t v356 = 0;
  v354 = 0;
  __src = &v356;
  uint64_t v364 = (uint64_t)&v355;
  v365[0] = 0;
  p_src = (char *)&__src;
  uint64_t v376 = (uint64_t)&v354;
  LOBYTE(v377) = 0;
  LOBYTE(v378) = 0;
  if (!mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match((uint64_t *)&p_src, a2))goto LABEL_178; {
  uint64_t v95 = v365[0];
  }
  v351[0] = (uint64_t *)v365[0];
  uint64_t v96 = (void *)(*(void *)(*(void *)(*(void *)(v365[0] + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v96) {
    goto LABEL_129;
  }
  uint64_t v97 = *v96;
  unint64_t v98 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v99 = *(unsigned int *)(v97 + 16);
  if (!v99) {
    goto LABEL_129;
  }
  unint64_t v100 = *(void **)(v97 + 8);
  unint64_t v101 = &v100[2 * v99];
  do
  {
    unint64_t v102 = v99 >> 1;
    unint64_t v103 = &v100[2 * (v99 >> 1)];
    unint64_t v105 = *v103;
    unint64_t v104 = v103 + 2;
    v99 += ~(v99 >> 1);
    if (v105 < v98) {
      unint64_t v100 = v104;
    }
    else {
      unint64_t v99 = v102;
    }
  }
  while (v99);
  if (v100 != v101 && *v100 == v98) {
    uint64_t v106 = v100[1];
  }
  else {
LABEL_129:
  }
    uint64_t v106 = 0;
  v361 = v96;
  uint64_t v362 = v106;
  uint64_t v107 = (void *)(*(void *)(*(void *)(*(void *)(v95 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v107) {
    goto LABEL_139;
  }
  uint64_t v108 = *v107;
  unint64_t v109 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v110 = *(unsigned int *)(v108 + 16);
  if (!v110) {
    goto LABEL_139;
  }
  unint64_t v111 = *(void **)(v108 + 8);
  unint64_t v112 = &v111[2 * v110];
  do
  {
    unint64_t v113 = v110 >> 1;
    int64x2_t v114 = &v111[2 * (v110 >> 1)];
    unint64_t v116 = *v114;
    unint64_t v115 = v114 + 2;
    v110 += ~(v110 >> 1);
    if (v116 < v109) {
      unint64_t v111 = v115;
    }
    else {
      unint64_t v110 = v113;
    }
  }
  while (v110);
  if (v111 != v112 && *v111 == v109) {
    uint64_t v117 = v111[1];
  }
  else {
LABEL_139:
  }
    uint64_t v117 = 0;
  v359 = v107;
  uint64_t v360 = v117;
  uint64_t v118 = mlir::getElementTypeOrSelf(v96);
  if (v118 != mlir::getElementTypeOrSelf(v107)) {
    goto LABEL_177;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v361)) {
    goto LABEL_177;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v359)) {
    goto LABEL_177;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
  uint64_t v120 = v119;
  uint64_t v121 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v359);
  uint64_t v123 = v122;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v351) != 7
    || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v351) != 9
    || v120 != 5
    || v123 != 5
    || v121[2] != 1
    || v121[3] != 1
    || v121[4] != 1
    || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v351) != (void *)1)
  {
    goto LABEL_177;
  }
  v366 = &v368;
  uint64_t v367 = 0x600000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v351);
  uint64_t v124 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v124, v125, (uint64_t)&v366, 1);
  unint64_t v126 = (unsigned __int8 *)v366;
  if (v367)
  {
    uint64_t v127 = 0;
    while (*(void *)((char *)v366 + v127) == 1)
    {
      v127 += 8;
      if (8 * v367 == v127) {
        goto LABEL_155;
      }
    }
    goto LABEL_175;
  }
LABEL_155:
  if (v366 != &v368) {
    free(v366);
  }
  v366 = &v368;
  uint64_t v367 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v351);
  unint64_t v128 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v128, v129, (uint64_t)&v366, 1);
  unint64_t v126 = (unsigned __int8 *)v366;
  if (v367)
  {
    uint64_t v130 = 0;
    while (*(void *)((char *)v366 + v130) == 1)
    {
      v130 += 8;
      if (8 * v367 == v130) {
        goto LABEL_161;
      }
    }
    goto LABEL_175;
  }
LABEL_161:
  if (v366 != &v368) {
    free(v366);
  }
  int v131 = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v351);
  if ((v131 - 1) >= 2 && v131 != 4)
  {
    if (!v131)
    {
      v366 = &v368;
      uint64_t v367 = 0x600000000;
      Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v351);
      uint64_t v132 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
      mlir::getIntValues<unsigned long long>((uint64_t)v132, v133, (uint64_t)&v366, 1);
      unint64_t v126 = (unsigned __int8 *)v366;
      if (v367)
      {
        uint64_t v134 = 0;
        while (!*(void *)((char *)v366 + v134))
        {
          v134 += 8;
          if (8 * v367 == v134) {
            goto LABEL_170;
          }
        }
LABEL_175:
        if (v126 != &v368) {
          free(v126);
        }
        goto LABEL_177;
      }
LABEL_170:
      if (v366 != &v368) {
        free(v366);
      }
      goto LABEL_172;
    }
LABEL_177:
    LODWORD(v350) = *(_DWORD *)v353;
    *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
    LODWORD(v349) = *(_DWORD *)v352;
    *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
LABEL_178:
    v355 = 0;
    uint64_t v356 = 0;
    v354 = 0;
    __src = &v356;
    uint64_t v364 = (uint64_t)&v355;
    v365[0] = 0;
    p_src = (char *)&__src;
    uint64_t v376 = (uint64_t)&v354;
    LOBYTE(v377) = 0;
    LOBYTE(v378) = 0;
    if (!mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match((uint64_t *)&p_src, a2))goto LABEL_255; {
    uint64_t v136 = v365[0];
    }
    v351[0] = (uint64_t *)v365[0];
    uint64_t v137 = (void *)(*(void *)(*(void *)(*(void *)(v365[0] + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v137) {
      goto LABEL_188;
    }
    uint64_t v138 = *v137;
    unint64_t v139 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v140 = *(unsigned int *)(v138 + 16);
    if (!v140) {
      goto LABEL_188;
    }
    uint64_t v141 = *(void **)(v138 + 8);
    unint64_t v142 = &v141[2 * v140];
    do
    {
      unint64_t v143 = v140 >> 1;
      uint64_t v144 = &v141[2 * (v140 >> 1)];
      unint64_t v146 = *v144;
      unint64_t v145 = v144 + 2;
      v140 += ~(v140 >> 1);
      if (v146 < v139) {
        uint64_t v141 = v145;
      }
      else {
        unint64_t v140 = v143;
      }
    }
    while (v140);
    if (v141 != v142 && *v141 == v139) {
      uint64_t v147 = v141[1];
    }
    else {
LABEL_188:
    }
      uint64_t v147 = 0;
    v361 = v137;
    uint64_t v362 = v147;
    uint64_t v148 = (void *)(*(void *)(*(void *)(*(void *)(v136 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v148) {
      goto LABEL_198;
    }
    uint64_t v149 = *v148;
    unint64_t v150 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v151 = *(unsigned int *)(v149 + 16);
    if (!v151) {
      goto LABEL_198;
    }
    int32x4_t v152 = *(void **)(v149 + 8);
    int v153 = &v152[2 * v151];
    do
    {
      unint64_t v154 = v151 >> 1;
      uint64_t v155 = &v152[2 * (v151 >> 1)];
      unint64_t v157 = *v155;
      uint64_t v156 = v155 + 2;
      v151 += ~(v151 >> 1);
      if (v157 < v150) {
        int32x4_t v152 = v156;
      }
      else {
        unint64_t v151 = v154;
      }
    }
    while (v151);
    if (v152 != v153 && *v152 == v150) {
      uint64_t v158 = v152[1];
    }
    else {
LABEL_198:
    }
      uint64_t v158 = 0;
    v359 = v148;
    uint64_t v360 = v158;
    uint64_t v159 = mlir::getElementTypeOrSelf(v137);
    if (v159 != mlir::getElementTypeOrSelf(v148)) {
      goto LABEL_255;
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v361)) {
      goto LABEL_255;
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v359)) {
      goto LABEL_255;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
    uint64_t v161 = v160;
    unint64_t v162 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v359);
    uint64_t v164 = v163;
    if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v351) != 7
      || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v351) != 9
      || v161 != 5
      || v164 != 5
      || v162[2] != 1
      || v162[3] != 1
      || v162[4] != 1
      || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v351) != (void *)1)
    {
      goto LABEL_255;
    }
    v366 = &v368;
    uint64_t v367 = 0x600000000;
    Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v351);
    int64x2_t v165 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
    mlir::getIntValues<unsigned long long>((uint64_t)v165, v166, (uint64_t)&v366, 1);
    int8x16_t v167 = (unsigned __int8 *)v366;
    if (v367)
    {
      uint64_t v168 = 0;
      while (*(void *)((char *)v366 + v168) == 1)
      {
        v168 += 8;
        if (8 * v367 == v168) {
          goto LABEL_214;
        }
      }
      goto LABEL_253;
    }
LABEL_214:
    if (v366 != &v368) {
      free(v366);
    }
    v366 = &v368;
    uint64_t v367 = 0x600000000;
    Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v351);
    int64x2_t v169 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
    mlir::getIntValues<unsigned long long>((uint64_t)v169, v170, (uint64_t)&v366, 1);
    int8x16_t v167 = (unsigned __int8 *)v366;
    if (v367)
    {
      uint64_t v171 = 0;
      while (*(void *)((char *)v366 + v171) == 1)
      {
        v171 += 8;
        if (8 * v367 == v171) {
          goto LABEL_220;
        }
      }
      goto LABEL_253;
    }
LABEL_220:
    if (v366 != &v368) {
      free(v366);
    }
    int v172 = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v351);
    if ((v172 - 1) >= 2 && v172 != 4)
    {
      if (v172)
      {
LABEL_255:
        LOBYTE(v366) = 0;
        char v373 = 0;
        p_src = "failed: pattern did not match";
        __int16 v379 = 259;
        __src = &p_src;
        uint64_t v193 = (uint64_t)a3[2];
        if (v193 && mlir::RewriterBase::Listener::classof(v193)) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), void **))(*(void *)v193 + 64))(v193, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AddOp &>(mlir::mps::AddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
        }
        else {
          return 0;
        }
      }
      v366 = &v368;
      uint64_t v367 = 0x600000000;
      Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v351);
      int8x16_t v173 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
      mlir::getIntValues<unsigned long long>((uint64_t)v173, v174, (uint64_t)&v366, 1);
      int8x16_t v167 = (unsigned __int8 *)v366;
      if (v367)
      {
        uint64_t v175 = 0;
        while (!*(void *)((char *)v366 + v175))
        {
          v175 += 8;
          if (8 * v367 == v175) {
            goto LABEL_229;
          }
        }
LABEL_253:
        if (v167 != &v368) {
          free(v167);
        }
        goto LABEL_255;
      }
LABEL_229:
      if (v366 != &v368) {
        free(v366);
      }
    }
    uint64_t v176 = v351[0][9];
    uint64_t v49 = *(void **)(v176 + 24);
    uint64_t v50 = *(void *)(v176 + 56);
    LODWORD(v350) = *(_DWORD *)v353;
    *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
    LODWORD(v349) = *(_DWORD *)v352;
    *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
    uint64_t v51 = v354;
    unsigned __int8 v47 = 1;
    goto LABEL_232;
  }
LABEL_172:
  unsigned __int8 v47 = 0;
  uint64_t v135 = v351[0][9];
  uint64_t v49 = *(void **)(v135 + 24);
  uint64_t v50 = *(void *)(v135 + 56);
  LODWORD(v350) = *(_DWORD *)v353;
  *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
  LODWORD(v349) = *(_DWORD *)v352;
  *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
  uint64_t v51 = v354;
LABEL_232:
  uint64_t v52 = -4;
LABEL_233:
  int64x2_t v177 = (char *)(v51[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v177) {
    goto LABEL_242;
  }
  uint64_t v178 = *(void *)v177;
  unint64_t v179 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v180 = *(unsigned int *)(v178 + 16);
  if (!v180) {
    goto LABEL_242;
  }
  uint64_t v181 = *(void **)(v178 + 8);
  unsigned int v182 = &v181[2 * v180];
  do
  {
    unint64_t v183 = v180 >> 1;
    uint64_t v184 = &v181[2 * (v180 >> 1)];
    unint64_t v186 = *v184;
    int v185 = v184 + 2;
    v180 += ~(v180 >> 1);
    if (v186 < v179) {
      uint64_t v181 = v185;
    }
    else {
      unint64_t v180 = v183;
    }
  }
  while (v180);
  if (v181 != v182 && *v181 == v179) {
    uint64_t v187 = v181[1];
  }
  else {
LABEL_242:
  }
    uint64_t v187 = 0;
  p_src = v177;
  uint64_t v376 = v187;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&p_src) & 1) == 0) {
    goto LABEL_255;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&p_src);
  uint64_t v189 = v188 + v52;
  if (v189 < 0) {
    goto LABEL_255;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&p_src);
  if (v190)
  {
    uint64_t v191 = 0;
    while (v189 == v191
         || *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&p_src)
                      + 8 * v191) == 1)
    {
      ++v191;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&p_src);
      if (v191 == v192) {
        goto LABEL_260;
      }
    }
    goto LABEL_255;
  }
LABEL_260:
  v366 = v49;
  uint64_t v367 = v50;
  unsigned __int8 v368 = v47;
  *(_DWORD *)v369 = v350;
  *(_DWORD *)&v369[3] = *(_DWORD *)((char *)&v350 + 3);
  v370 = v51;
  char v371 = 1;
  *(_DWORD *)v372 = v349;
  *(_DWORD *)&v372[3] = *(_DWORD *)((char *)&v349 + 3);
  char v373 = 1;
  *(_DWORD *)&v374[3] = *(_DWORD *)&v357[3];
  *(_DWORD *)v374 = *(_DWORD *)v357;
  Strides = v49;
  uint64_t v356 = v50;
  uint64_t v196 = (void *)(v49[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v196) {
    goto LABEL_269;
  }
  uint64_t v197 = *v196;
  unint64_t v198 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v199 = *(unsigned int *)(v197 + 16);
  if (!v199) {
    goto LABEL_269;
  }
  unint64_t v200 = *(void **)(v197 + 8);
  uint64_t v201 = &v200[2 * v199];
  do
  {
    unint64_t v202 = v199 >> 1;
    unint64_t v203 = &v200[2 * (v199 >> 1)];
    unint64_t v205 = *v203;
    unint64_t v204 = v203 + 2;
    v199 += ~(v199 >> 1);
    if (v205 < v198) {
      unint64_t v200 = v204;
    }
    else {
      unint64_t v199 = v202;
    }
  }
  while (v199);
  if (v200 != v201 && *v200 == v198) {
    uint64_t v206 = v200[1];
  }
  else {
LABEL_269:
  }
    uint64_t v206 = 0;
  v361 = v196;
  uint64_t v362 = v206;
  unint64_t v207 = (void *)(*(void *)(v356 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v207) {
    goto LABEL_279;
  }
  uint64_t v208 = *v207;
  unint64_t v209 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v210 = *(unsigned int *)(v208 + 16);
  if (!v210) {
    goto LABEL_279;
  }
  uint64_t v211 = *(void **)(v208 + 8);
  uint64_t v212 = &v211[2 * v210];
  do
  {
    unint64_t v213 = v210 >> 1;
    v214 = &v211[2 * (v210 >> 1)];
    unint64_t v216 = *v214;
    uint64_t v215 = v214 + 2;
    v210 += ~(v210 >> 1);
    if (v216 < v209) {
      uint64_t v211 = v215;
    }
    else {
      unint64_t v210 = v213;
    }
  }
  while (v210);
  if (v211 != v212 && *v211 == v209) {
    uint64_t v217 = v211[1];
  }
  else {
LABEL_279:
  }
    uint64_t v217 = 0;
  v359 = v207;
  uint64_t v360 = v217;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
  uint64_t v219 = v218;
  uint64_t v221 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
  uint64_t v222 = v220;
  unint64_t v223 = 8 * v220;
  __src = v365;
  uint64_t v364 = 0x500000000;
  if ((unint64_t)(8 * v220) < 0x29)
  {
    uint64_t v224 = 0;
    int v225 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v365, (8 * v220) >> 3, 4);
    uint64_t v224 = v364;
    int v225 = v364;
  }
  if (v222)
  {
    uint64_t v226 = (int8x16_t *)((char *)__src + 4 * v224);
    unint64_t v227 = (v222 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v227 >= 7)
    {
      unint64_t v230 = v227 + 1;
      uint64_t v231 = (v227 + 1) & 0x3FFFFFFFFFFFFFF8;
      uint64_t v228 = (uint64_t *)(v221 + 8 * v231);
      uint64_t v229 = &v226->i32[v231];
      v232 = v226 + 1;
      uint64_t v233 = (int32x4_t *)(v221 + 32);
      int64x2_t v234 = vdupq_n_s64(0x8000000000000000);
      uint64_t v235 = v231;
      do
      {
        int32x4_t v236 = v233[-2];
        int32x4_t v237 = v233[-1];
        int32x4_t v238 = *v233;
        int32x4_t v239 = v233[1];
        v233 += 4;
        v232[-1] = vorrq_s8((int8x16_t)vuzp1q_s32(v236, v237), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v236, v234), (int32x4_t)vceqq_s64((int64x2_t)v237, v234)));
        int8x16_t *v232 = vorrq_s8((int8x16_t)vuzp1q_s32(v238, v239), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v238, v234), (int32x4_t)vceqq_s64((int64x2_t)v239, v234)));
        v232 += 2;
        v235 -= 8;
      }
      while (v235);
      if (v230 == v231)
      {
LABEL_293:
        int v225 = v364;
        goto LABEL_294;
      }
    }
    else
    {
      uint64_t v228 = (uint64_t *)v221;
      uint64_t v229 = (int *)v226;
    }
    do
    {
      uint64_t v241 = *v228++;
      int v240 = v241;
      if (v241 == 0x8000000000000000) {
        int v240 = -1;
      }
      *v229++ = v240;
    }
    while (v228 != (uint64_t *)(v221 + v223));
    goto LABEL_293;
  }
LABEL_294:
  LODWORD(v364) = v225 + (v223 >> 3);
  uint64_t v242 = v368;
  uint64_t v243 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v359) + 8 * v242);
  if (v243 == 0x8000000000000000) {
    int v244 = -1;
  }
  else {
    int v244 = v243;
  }
  uint64_t v245 = (int32x4_t *)__src;
  *((_DWORD *)__src + 1) = v244;
  if (!v364) {
    goto LABEL_311;
  }
  unint64_t v246 = (v364 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v246 >= 7)
  {
    unint64_t v249 = v246 + 1;
    uint64_t v250 = (v246 + 1) & 0x7FFFFFFFFFFFFFF8;
    int v248 = (int32x4_t *)((char *)v245 + 4 * v250);
    uint64_t v251 = v245 + 1;
    int64x2_t v252 = 0uLL;
    v253.i64[0] = -1;
    v253.i64[1] = -1;
    int8x16_t v254 = (int8x16_t)vdupq_n_s64(1uLL);
    uint64_t v255 = v250;
    int64x2_t v256 = 0uLL;
    int64x2_t v257 = 0uLL;
    int64x2_t v258 = 0uLL;
    do
    {
      int32x4_t v259 = vceqq_s32(v251[-1], v253);
      v260.i64[0] = v259.u32[0];
      v260.i64[1] = v259.u32[1];
      int64x2_t v261 = (int64x2_t)vandq_s8(v260, v254);
      v260.i64[0] = v259.u32[2];
      v260.i64[1] = v259.u32[3];
      int64x2_t v262 = (int64x2_t)vandq_s8(v260, v254);
      int32x4_t v263 = vceqq_s32(*v251, v253);
      v260.i64[0] = v263.u32[0];
      v260.i64[1] = v263.u32[1];
      int64x2_t v264 = (int64x2_t)vandq_s8(v260, v254);
      v260.i64[0] = v263.u32[2];
      v260.i64[1] = v263.u32[3];
      int64x2_t v256 = vaddq_s64(v256, v262);
      int64x2_t v252 = vaddq_s64(v252, v261);
      int64x2_t v258 = vaddq_s64(v258, (int64x2_t)vandq_s8(v260, v254));
      int64x2_t v257 = vaddq_s64(v257, v264);
      v251 += 2;
      v255 -= 8;
    }
    while (v255);
    unint64_t v247 = vaddvq_s64(vaddq_s64(vaddq_s64(v257, v252), vaddq_s64(v258, v256)));
    if (v249 == v250) {
      goto LABEL_307;
    }
  }
  else
  {
    unint64_t v247 = 0;
    int v248 = v245;
  }
  uint64_t v265 = (int32x4_t *)((char *)v245 + 4 * v364);
  do
  {
    __int32 v266 = v248->i32[0];
    int v248 = (int32x4_t *)((char *)v248 + 4);
    if (v266 == -1) {
      ++v247;
    }
  }
  while (v248 != v265);
LABEL_307:
  if (v247 < 2)
  {
LABEL_311:
    p_src = (char *)&v377;
    HIDWORD(v376) = 3;
    uint64_t v377 = 0x300000002;
    if (v219 == 4)
    {
      unsigned int v268 = 2;
    }
    else
    {
      int v378 = 4;
      unsigned int v268 = 3;
    }
    LODWORD(v376) = v268;
    v351[0] = (uint64_t *)v268;
    uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
    unint64_t v270 = (void *)mlir::RankedTensorType::get((uint64_t)v351, 1, IntegerType, 0);
    uint64_t v271 = v270;
    uint64_t v272 = *(void *)(a2 + 24);
    if (!v270) {
      goto LABEL_323;
    }
    uint64_t v273 = *v270;
    unint64_t v274 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v275 = *(unsigned int *)(v273 + 16);
    if (!v275) {
      goto LABEL_323;
    }
    uint64_t v276 = *(void **)(v273 + 8);
    uint64_t v277 = &v276[2 * v275];
    do
    {
      unint64_t v278 = v275 >> 1;
      v279 = &v276[2 * (v275 >> 1)];
      unint64_t v281 = *v279;
      v280 = v279 + 2;
      v275 += ~(v275 >> 1);
      if (v281 < v274) {
        uint64_t v276 = v280;
      }
      else {
        unint64_t v275 = v278;
      }
    }
    while (v275);
    if (v276 != v277 && *v276 == v274) {
      uint64_t v282 = v276[1];
    }
    else {
LABEL_323:
    }
      uint64_t v282 = 0;
    v355 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v271, v282, p_src, 4 * v376, 4, 1, 1);
    v351[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v272, &v355);
    uint64_t v356 = (uint64_t)mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), &v356, v351)- 16;
    if (p_src != (char *)&v377) {
      free(p_src);
    }
    uint64_t v283 = *(void *)(a2 + 24);
    LODWORD(p_src) = 0;
    LODWORD(v351[0]) = 1;
    Strides = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), v283, (uint64_t *)&Strides, (unsigned int *)&p_src, (unsigned int *)v351)- 16);
    LODWORD(v355) = 1;
    uint64_t v284 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
    unint64_t v285 = (void *)mlir::RankedTensorType::get(0, 0, v284, 0);
    uint64_t v286 = v285;
    uint64_t v287 = *(void *)(a2 + 24);
    if (!v285) {
      goto LABEL_335;
    }
    uint64_t v288 = *v285;
    unint64_t v289 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v290 = *(unsigned int *)(v288 + 16);
    if (!v290) {
      goto LABEL_335;
    }
    long long v291 = *(void **)(v288 + 8);
    v292 = &v291[2 * v290];
    do
    {
      unint64_t v293 = v290 >> 1;
      v294 = &v291[2 * (v290 >> 1)];
      unint64_t v296 = *v294;
      uint64_t v295 = v294 + 2;
      v290 += ~(v290 >> 1);
      if (v296 < v289) {
        long long v291 = v295;
      }
      else {
        unint64_t v290 = v293;
      }
    }
    while (v290);
    if (v291 != v292 && *v291 == v289) {
      uint64_t v297 = v291[1];
    }
    else {
LABEL_335:
    }
      uint64_t v297 = 0;
    v351[0] = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v286, v297, &v355, 4, 4, 1, 1);
    p_src = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v287, v351)- 16;
    Strides = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), *(void *)(a2 + 24), (uint64_t *)&Strides, (uint64_t *)&p_src)- 16);
    uint64_t v298 = *(void *)(a2 + 24);
    LOBYTE(p_src) = 0;
    v355 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value,mlir::Value,BOOL,BOOL>(a3 + 1, v298, &v356, (uint64_t *)&Strides, &v368, (unsigned __int8 *)&p_src)- 16);
    if (v371)
    {
      v354 = v370;
      uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v354);
      uint64_t v300 = (uint64_t *)(v354[1] & 0xFFFFFFFFFFFFFFF8);
      if (!v300) {
        goto LABEL_346;
      }
      uint64_t v301 = *v300;
      unint64_t v302 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v303 = *(unsigned int *)(v301 + 16);
      if (!v303) {
        goto LABEL_346;
      }
      v304 = *(void **)(v301 + 8);
      v305 = &v304[2 * v303];
      do
      {
        unint64_t v306 = v303 >> 1;
        long long v307 = &v304[2 * (v303 >> 1)];
        unint64_t v309 = *v307;
        v308 = v307 + 2;
        v303 += ~(v303 >> 1);
        if (v309 < v302) {
          v304 = v308;
        }
        else {
          unint64_t v303 = v306;
        }
      }
      while (v303);
      if (v304 != v305 && *v304 == v302) {
        v310 = (uint64_t *)v304[1];
      }
      else {
LABEL_346:
      }
        v310 = 0;
      v351[0] = v300;
      v351[1] = v310;
      p_src = (char *)&v377;
      uint64_t v377 = 0x1FFFFFFFFLL;
      uint64_t v376 = 0x200000002;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v351))
      {
        uint64_t v311 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v351);
        if (v312)
        {
          uint64_t v313 = 8 * v312;
          while (*v311 != 0x8000000000000000)
          {
            ++v311;
            v313 -= 8;
            if (!v313) {
              goto LABEL_352;
            }
          }
        }
        else
        {
LABEL_352:
          v314 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v351);
          int NumElements = mlir::ShapedType::getNumElements(v314, v315);
          *(_DWORD *)p_src = NumElements;
        }
      }
      uint64_t v350 = 2;
      uint64_t v317 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
      v318 = (void *)mlir::RankedTensorType::get((uint64_t)&v350, 1, v317, 0);
      v319 = v318;
      if (!v318) {
        goto LABEL_362;
      }
      uint64_t v320 = *v318;
      unint64_t v321 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v322 = *(unsigned int *)(v320 + 16);
      if (!v322) {
        goto LABEL_362;
      }
      v323 = *(void **)(v320 + 8);
      v324 = &v323[2 * v322];
      do
      {
        unint64_t v325 = v322 >> 1;
        uint64_t v326 = &v323[2 * (v322 >> 1)];
        unint64_t v328 = *v326;
        uint64_t v327 = v326 + 2;
        v322 += ~(v322 >> 1);
        if (v328 < v321) {
          v323 = v327;
        }
        else {
          unint64_t v322 = v325;
        }
      }
      while (v322);
      if (v323 != v324 && *v323 == v321) {
        uint64_t v329 = v323[1];
      }
      else {
LABEL_362:
      }
        uint64_t v329 = 0;
      v349 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v319, v329, p_src, 4 * v376, 4, 1, 1);
      uint64_t v350 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), Loc, &v349);
      v354 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, Loc, (uint64_t *)&v354, &v350)- 16);
      v349 = (uint64_t *)mlir::getElementTypeOrSelf((void *)(v355[1] & 0xFFFFFFFFFFFFFFF8));
      if (v349 != (uint64_t *)mlir::getElementTypeOrSelf((void *)(v354[1] & 0xFFFFFFFFFFFFFFF8))) {
        v354 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v354, (uint64_t *)&v349)- 16);
      }
      v355 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>(a3 + 1, Loc, (uint64_t *)&v355, (uint64_t *)&v354)- 16);
      if (p_src != (char *)&v377) {
        free(p_src);
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
    p_src = v330;
    uint64_t v331 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
    v332 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&p_src, 1, v331, 0);
    p_src = (char *)&v377;
    uint64_t v376 = 0x500000000;
    int v333 = v364;
    if (!v364)
    {
      v336 = (int32x2_t *)&v377;
LABEL_376:
      int32x2_t *v336 = vrev64_s32(*v336);
      uint64_t v337 = *(void *)(a2 + 24);
      if (!v332) {
        goto LABEL_385;
      }
      uint64_t v338 = *v332;
      unint64_t v339 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v340 = *(unsigned int *)(v338 + 16);
      if (!v340) {
        goto LABEL_385;
      }
      v341 = *(void **)(v338 + 8);
      v342 = &v341[2 * v340];
      do
      {
        unint64_t v343 = v340 >> 1;
        v344 = &v341[2 * (v340 >> 1)];
        unint64_t v346 = *v344;
        v345 = v344 + 2;
        v340 += ~(v340 >> 1);
        if (v346 < v339) {
          v341 = v345;
        }
        else {
          unint64_t v340 = v343;
        }
      }
      while (v340);
      if (v341 != v342 && *v341 == v339) {
        uint64_t v347 = v341[1];
      }
      else {
LABEL_385:
      }
        uint64_t v347 = 0;
      uint64_t v194 = 1;
      v354 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v332, v347, p_src, 4 * v376, 4, 1, 1);
      v351[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v337, &v354);
      v355 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, *(void *)(a2 + 24), (uint64_t *)&v355, v351)- 16);
      if (p_src != (char *)&v377) {
        free(p_src);
      }
      LODWORD(p_src) = 0;
      LODWORD(v351[0]) = 1;
      uint64_t v348 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), *(void *)(a2 + 24), (uint64_t *)&v355, (unsigned int *)&p_src, (unsigned int *)v351);
      (*((void (**)(mlir::BoolAttr **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v348);
      goto LABEL_389;
    }
    if (v364 < 6)
    {
      size_t v335 = &v377;
      unsigned int v334 = v364;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_src, &v377, v364, 4);
      unsigned int v334 = v364;
      if (!v364)
      {
LABEL_375:
        LODWORD(v376) = v333;
        v336 = (int32x2_t *)p_src;
        goto LABEL_376;
      }
      size_t v335 = (uint64_t *)p_src;
    }
    memcpy(v335, __src, 4 * v334);
    goto LABEL_375;
  }
  p_src = "failed: unsupported dynamic dimensions";
  __int16 v379 = 259;
  v351[0] = (uint64_t *)&p_src;
  uint64_t v267 = (uint64_t)a3[2];
  if (v267 && mlir::RewriterBase::Listener::classof(v267)) {
    uint64_t v194 = (*(uint64_t (**)(uint64_t, void, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(void *)v267 + 64))(v267, *(void *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AddOp &>(mlir::mps::AddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v351);
  }
  else {
    uint64_t v194 = 0;
  }
LABEL_389:
  if (__src != v365) {
    free(__src);
  }
  return v194;
}

BOOL mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(uint64_t *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::AddOp,void>::id) {
    return 0;
  }
  int v4 = 1;
  unsigned __int8 v10 = 1;
  int8x16_t v9 = *(int8x16_t *)a1;
  v8.i64[0] = (uint64_t)&v10;
  v8.i64[1] = (uint64_t)&v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>((uint64_t ***)&v9, (uint64_t)&v8);
  if (v10) {
    goto LABEL_5;
  }
  unsigned __int8 v10 = 1;
  *(void *)a1[1] = 0;
  uint64_t v5 = *a1;
  **(void **)*a1 = 0;
  **(void **)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  int8x16_t v8 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  v7[0] = &v10;
  v7[1] = &v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>((uint64_t **)&v8, (uint64_t)v7);
  int v4 = v10;
  if (v10)
  {
LABEL_5:
    uint64_t v6 = v11;
    if (!*((unsigned char *)a1 + 24)) {
      *((unsigned char *)a1 + 24) = 1;
    }
    a1[2] = v6;
  }
  return v4 != 0;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t ***a1, uint64_t a2)
{
  int v4 = *a1;
  uint64_t v20 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id
      || (*(unsigned char *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_14;
    }
    uint64_t v7 = *(void *)(result + 72);
    uint64_t v8 = *(void *)(v7 + 24);
    uint64_t v9 = **v4;
    if (v9)
    {
      BOOL v10 = v9 == v8;
    }
    else
    {
      uint64_t **v4 = v8;
      uint64_t v7 = *(void *)(result + 72);
      BOOL v10 = 1;
    }
    uint64_t v11 = v4[1];
    uint64_t v12 = *(void *)(v7 + 56);
    if (*v11)
    {
      BOOL v13 = *v11 == v12;
    }
    else
    {
      *uint64_t v11 = v12;
      BOOL v13 = 1;
    }
    if (v10 && v13)
    {
      v4[2] = (uint64_t *)result;
      char v6 = 1;
    }
    else
    {
LABEL_14:
      char v6 = 0;
    }
  }
  unint64_t v14 = *(unsigned char **)a2;
  uint64_t v15 = *(void *)(a2 + 8);
  char v16 = v6 & (**(unsigned char **)a2 != 0);
  if (!result) {
    char v16 = 0;
  }
  *unint64_t v14 = v16;
  uint64_t v17 = a1[1];
  unint64_t v18 = *(uint64_t **)(*(void *)(*(void *)v15 + 72) + 56);
  if (*v17)
  {
    BOOL v19 = *v17 == v18;
  }
  else
  {
    unint64_t *v17 = v18;
    unint64_t v14 = *(unsigned char **)a2;
    char v16 = **(unsigned char **)a2 != 0;
    BOOL v19 = 1;
  }
  *unint64_t v14 = v19 & v16;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(**(void **)(a2 + 8) + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = **a1;
  if (v5)
  {
    BOOL v6 = v5 == v4;
  }
  else
  {
    **a1 = v4;
    uint64_t v3 = *(void *)(**(void **)(a2 + 8) + 72);
    BOOL v6 = 1;
  }
  if (!**(unsigned char **)a2) {
    BOOL v6 = 0;
  }
  **(unsigned char **)a2 = v6;
  uint64_t v7 = (uint64_t **)a1[1];
  uint64_t v18 = *(void *)(v3 + 56);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id
      || (*(unsigned char *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_19;
    }
    uint64_t v10 = *(void *)(result + 72);
    uint64_t v11 = *(void *)(v10 + 24);
    uint64_t v12 = **v7;
    if (v12)
    {
      BOOL v13 = v12 == v11;
    }
    else
    {
      **uint64_t v7 = v11;
      uint64_t v10 = *(void *)(result + 72);
      BOOL v13 = 1;
    }
    unint64_t v14 = v7[1];
    uint64_t v15 = *(void *)(v10 + 56);
    if (*v14)
    {
      BOOL v16 = *v14 == v15;
    }
    else
    {
      *unint64_t v14 = v15;
      BOOL v16 = 1;
    }
    int v9 = v13 && v16;
    if (v9 == 1) {
      void v7[2] = (uint64_t *)result;
    }
    else {
LABEL_19:
    }
      LOBYTE(v9) = 0;
  }
  char v17 = v9 & (**(unsigned char **)a2 != 0);
  if (!result) {
    char v17 = 0;
  }
  **(unsigned char **)a2 = v17;
  return result;
}

BOOL mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(uint64_t *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::AddOp,void>::id) {
    return 0;
  }
  int v4 = 1;
  unsigned __int8 v10 = 1;
  int8x16_t v9 = *(int8x16_t *)a1;
  v8.i64[0] = (uint64_t)&v10;
  v8.i64[1] = (uint64_t)&v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>((uint64_t ***)&v9, (uint64_t)&v8);
  if (v10) {
    goto LABEL_5;
  }
  unsigned __int8 v10 = 1;
  *(void *)a1[1] = 0;
  uint64_t v5 = *a1;
  **(void **)*a1 = 0;
  **(void **)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  int8x16_t v8 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  v7[0] = &v10;
  v7[1] = &v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>((uint64_t **)&v8, (uint64_t)v7);
  int v4 = v10;
  if (v10)
  {
LABEL_5:
    uint64_t v6 = v11;
    if (!*((unsigned char *)a1 + 24)) {
      *((unsigned char *)a1 + 24) = 1;
    }
    a1[2] = v6;
  }
  return v4 != 0;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t ***a1, uint64_t a2)
{
  int v4 = *a1;
  uint64_t v20 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DDataGradientOp,void>::id
      || (*(unsigned char *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_14;
    }
    uint64_t v7 = *(void *)(result + 72);
    uint64_t v8 = *(void *)(v7 + 24);
    uint64_t v9 = **v4;
    if (v9)
    {
      BOOL v10 = v9 == v8;
    }
    else
    {
      uint64_t **v4 = v8;
      uint64_t v7 = *(void *)(result + 72);
      BOOL v10 = 1;
    }
    uint64_t v11 = v4[1];
    uint64_t v12 = *(void *)(v7 + 56);
    if (*v11)
    {
      BOOL v13 = *v11 == v12;
    }
    else
    {
      *uint64_t v11 = v12;
      BOOL v13 = 1;
    }
    if (v10 && v13)
    {
      v4[2] = (uint64_t *)result;
      char v6 = 1;
    }
    else
    {
LABEL_14:
      char v6 = 0;
    }
  }
  unint64_t v14 = *(unsigned char **)a2;
  uint64_t v15 = *(void *)(a2 + 8);
  char v16 = v6 & (**(unsigned char **)a2 != 0);
  if (!result) {
    char v16 = 0;
  }
  *unint64_t v14 = v16;
  char v17 = a1[1];
  uint64_t v18 = *(uint64_t **)(*(void *)(*(void *)v15 + 72) + 56);
  if (*v17)
  {
    BOOL v19 = *v17 == v18;
  }
  else
  {
    unint64_t *v17 = v18;
    unint64_t v14 = *(unsigned char **)a2;
    char v16 = **(unsigned char **)a2 != 0;
    BOOL v19 = 1;
  }
  *unint64_t v14 = v19 & v16;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(**(void **)(a2 + 8) + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = **a1;
  if (v5)
  {
    BOOL v6 = v5 == v4;
  }
  else
  {
    **a1 = v4;
    uint64_t v3 = *(void *)(**(void **)(a2 + 8) + 72);
    BOOL v6 = 1;
  }
  if (!**(unsigned char **)a2) {
    BOOL v6 = 0;
  }
  **(unsigned char **)a2 = v6;
  uint64_t v7 = (uint64_t **)a1[1];
  uint64_t v18 = *(void *)(v3 + 56);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DDataGradientOp,void>::id
      || (*(unsigned char *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_19;
    }
    uint64_t v10 = *(void *)(result + 72);
    uint64_t v11 = *(void *)(v10 + 24);
    uint64_t v12 = **v7;
    if (v12)
    {
      BOOL v13 = v12 == v11;
    }
    else
    {
      **uint64_t v7 = v11;
      uint64_t v10 = *(void *)(result + 72);
      BOOL v13 = 1;
    }
    unint64_t v14 = v7[1];
    uint64_t v15 = *(void *)(v10 + 56);
    if (*v14)
    {
      BOOL v16 = *v14 == v15;
    }
    else
    {
      *unint64_t v14 = v15;
      BOOL v16 = 1;
    }
    int v9 = v13 && v16;
    if (v9 == 1) {
      void v7[2] = (uint64_t *)result;
    }
    else {
LABEL_19:
    }
      LOBYTE(v9) = 0;
  }
  char v17 = v9 & (**(unsigned char **)a2 != 0);
  if (!result) {
    char v17 = 0;
  }
  **(unsigned char **)a2 = v17;
  return result;
}

BOOL mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(uint64_t *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::AddOp,void>::id) {
    return 0;
  }
  int v4 = 1;
  unsigned __int8 v10 = 1;
  int8x16_t v9 = *(int8x16_t *)a1;
  v8.i64[0] = (uint64_t)&v10;
  v8.i64[1] = (uint64_t)&v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>((uint64_t ***)&v9, (uint64_t)&v8);
  if (v10) {
    goto LABEL_5;
  }
  unsigned __int8 v10 = 1;
  *(void *)a1[1] = 0;
  uint64_t v5 = *a1;
  **(void **)*a1 = 0;
  **(void **)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  int8x16_t v8 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  v7[0] = &v10;
  v7[1] = &v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>((uint64_t **)&v8, (uint64_t)v7);
  int v4 = v10;
  if (v10)
  {
LABEL_5:
    uint64_t v6 = v11;
    if (!*((unsigned char *)a1 + 24)) {
      *((unsigned char *)a1 + 24) = 1;
    }
    a1[2] = v6;
  }
  return v4 != 0;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t ***a1, uint64_t a2)
{
  int v4 = *a1;
  uint64_t v20 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv3DOp,void>::id
      || (*(unsigned char *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_14;
    }
    uint64_t v7 = *(void *)(result + 72);
    uint64_t v8 = *(void *)(v7 + 24);
    uint64_t v9 = **v4;
    if (v9)
    {
      BOOL v10 = v9 == v8;
    }
    else
    {
      uint64_t **v4 = v8;
      uint64_t v7 = *(void *)(result + 72);
      BOOL v10 = 1;
    }
    uint64_t v11 = v4[1];
    uint64_t v12 = *(void *)(v7 + 56);
    if (*v11)
    {
      BOOL v13 = *v11 == v12;
    }
    else
    {
      *uint64_t v11 = v12;
      BOOL v13 = 1;
    }
    if (v10 && v13)
    {
      v4[2] = (uint64_t *)result;
      char v6 = 1;
    }
    else
    {
LABEL_14:
      char v6 = 0;
    }
  }
  unint64_t v14 = *(unsigned char **)a2;
  uint64_t v15 = *(void *)(a2 + 8);
  char v16 = v6 & (**(unsigned char **)a2 != 0);
  if (!result) {
    char v16 = 0;
  }
  *unint64_t v14 = v16;
  char v17 = a1[1];
  uint64_t v18 = *(uint64_t **)(*(void *)(*(void *)v15 + 72) + 56);
  if (*v17)
  {
    BOOL v19 = *v17 == v18;
  }
  else
  {
    unint64_t *v17 = v18;
    unint64_t v14 = *(unsigned char **)a2;
    char v16 = **(unsigned char **)a2 != 0;
    BOOL v19 = 1;
  }
  *unint64_t v14 = v19 & v16;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(**(void **)(a2 + 8) + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = **a1;
  if (v5)
  {
    BOOL v6 = v5 == v4;
  }
  else
  {
    **a1 = v4;
    uint64_t v3 = *(void *)(**(void **)(a2 + 8) + 72);
    BOOL v6 = 1;
  }
  if (!**(unsigned char **)a2) {
    BOOL v6 = 0;
  }
  **(unsigned char **)a2 = v6;
  uint64_t v7 = (uint64_t **)a1[1];
  uint64_t v18 = *(void *)(v3 + 56);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv3DOp,void>::id
      || (*(unsigned char *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_19;
    }
    uint64_t v10 = *(void *)(result + 72);
    uint64_t v11 = *(void *)(v10 + 24);
    uint64_t v12 = **v7;
    if (v12)
    {
      BOOL v13 = v12 == v11;
    }
    else
    {
      **uint64_t v7 = v11;
      uint64_t v10 = *(void *)(result + 72);
      BOOL v13 = 1;
    }
    unint64_t v14 = v7[1];
    uint64_t v15 = *(void *)(v10 + 56);
    if (*v14)
    {
      BOOL v16 = *v14 == v15;
    }
    else
    {
      *unint64_t v14 = v15;
      BOOL v16 = 1;
    }
    int v9 = v13 && v16;
    if (v9 == 1) {
      void v7[2] = (uint64_t *)result;
    }
    else {
LABEL_19:
    }
      LOBYTE(v9) = 0;
  }
  char v17 = v9 & (**(unsigned char **)a2 != 0);
  if (!result) {
    char v17 = 0;
  }
  **(unsigned char **)a2 = v17;
  return result;
}

BOOL mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(uint64_t *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::AddOp,void>::id) {
    return 0;
  }
  int v4 = 1;
  unsigned __int8 v10 = 1;
  int8x16_t v9 = *(int8x16_t *)a1;
  v8.i64[0] = (uint64_t)&v10;
  v8.i64[1] = (uint64_t)&v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>((uint64_t ***)&v9, (uint64_t)&v8);
  if (v10) {
    goto LABEL_5;
  }
  unsigned __int8 v10 = 1;
  *(void *)a1[1] = 0;
  uint64_t v5 = *a1;
  **(void **)*a1 = 0;
  **(void **)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  int8x16_t v8 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  v7[0] = &v10;
  v7[1] = &v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>((uint64_t **)&v8, (uint64_t)v7);
  int v4 = v10;
  if (v10)
  {
LABEL_5:
    uint64_t v6 = v11;
    if (!*((unsigned char *)a1 + 24)) {
      *((unsigned char *)a1 + 24) = 1;
    }
    a1[2] = v6;
  }
  return v4 != 0;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t ***a1, uint64_t a2)
{
  int v4 = *a1;
  uint64_t v20 = *(void *)(*(void *)(**(void **)(a2 + 8) + 72) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv3DDataGradientOp,void>::id
      || (*(unsigned char *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_14;
    }
    uint64_t v7 = *(void *)(result + 72);
    uint64_t v8 = *(void *)(v7 + 24);
    uint64_t v9 = **v4;
    if (v9)
    {
      BOOL v10 = v9 == v8;
    }
    else
    {
      uint64_t **v4 = v8;
      uint64_t v7 = *(void *)(result + 72);
      BOOL v10 = 1;
    }
    uint64_t v11 = v4[1];
    uint64_t v12 = *(void *)(v7 + 56);
    if (*v11)
    {
      BOOL v13 = *v11 == v12;
    }
    else
    {
      *uint64_t v11 = v12;
      BOOL v13 = 1;
    }
    if (v10 && v13)
    {
      v4[2] = (uint64_t *)result;
      char v6 = 1;
    }
    else
    {
LABEL_14:
      char v6 = 0;
    }
  }
  unint64_t v14 = *(unsigned char **)a2;
  uint64_t v15 = *(void *)(a2 + 8);
  char v16 = v6 & (**(unsigned char **)a2 != 0);
  if (!result) {
    char v16 = 0;
  }
  *unint64_t v14 = v16;
  char v17 = a1[1];
  uint64_t v18 = *(uint64_t **)(*(void *)(*(void *)v15 + 72) + 56);
  if (*v17)
  {
    BOOL v19 = *v17 == v18;
  }
  else
  {
    unint64_t *v17 = v18;
    unint64_t v14 = *(unsigned char **)a2;
    char v16 = **(unsigned char **)a2 != 0;
    BOOL v19 = 1;
  }
  *unint64_t v14 = v19 & v16;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(**(void **)(a2 + 8) + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = **a1;
  if (v5)
  {
    BOOL v6 = v5 == v4;
  }
  else
  {
    **a1 = v4;
    uint64_t v3 = *(void *)(**(void **)(a2 + 8) + 72);
    BOOL v6 = 1;
  }
  if (!**(unsigned char **)a2) {
    BOOL v6 = 0;
  }
  **(unsigned char **)a2 = v6;
  uint64_t v7 = (uint64_t **)a1[1];
  uint64_t v18 = *(void *)(v3 + 56);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv3DDataGradientOp,void>::id
      || (*(unsigned char *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_19;
    }
    uint64_t v10 = *(void *)(result + 72);
    uint64_t v11 = *(void *)(v10 + 24);
    uint64_t v12 = **v7;
    if (v12)
    {
      BOOL v13 = v12 == v11;
    }
    else
    {
      **uint64_t v7 = v11;
      uint64_t v10 = *(void *)(result + 72);
      BOOL v13 = 1;
    }
    unint64_t v14 = v7[1];
    uint64_t v15 = *(void *)(v10 + 56);
    if (*v14)
    {
      BOOL v16 = *v14 == v15;
    }
    else
    {
      *unint64_t v14 = v15;
      BOOL v16 = 1;
    }
    int v9 = v13 && v16;
    if (v9 == 1) {
      void v7[2] = (uint64_t *)result;
    }
    else {
LABEL_19:
    }
      LOBYTE(v9) = 0;
  }
  char v17 = v9 & (**(unsigned char **)a2 != 0);
  if (!result) {
    char v17 = 0;
  }
  **(unsigned char **)a2 = v17;
  return result;
}

void mlir::mps::StitchingPass::runOnRegionForOp(mlir::mps::BaseFusableCoreOps **this, mlir::Operation *a2)
{
  v43[0] = mlir::Attribute::getContext((mlir::Operation *)((char *)a2 + 24));
  memset(&v43[1], 0, 24);
  uint64_t v41 = *((_DWORD *)a2 + 11) & 0x7FFFFF;
  if (v41)
  {
    uint64_t v4 = 0;
    do
    {
      unint64_t v5 = *((unsigned int *)a2 + 11);
      if ((v5 & 0x7FFFFF) != 0) {
        unint64_t v6 = (((unint64_t)a2 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
      }
           + 32 * *((unsigned int *)a2 + 10);
      else {
        unint64_t v6 = 0;
      }
      uint64_t v42 = v4;
      unint64_t v7 = v6 + 24 * v4;
      for (uint64_t i = *(void *)(v7 + 8); i != v7; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v9 = i - 8;
        if (!i) {
          uint64_t v9 = 0;
        }
        uint64_t v10 = (mlir::GenericProgramPoint **)(v9 + 32);
        uint64_t v11 = *(mlir::GenericProgramPoint ***)(v9 + 40);
        while (v11 != v10)
        {
          mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v11);
          BOOL v13 = v12;
            goto LABEL_14;
          ParentOp = (mlir::Block *)*((void *)v13 + 2);
          if (ParentOp) {
            ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
          }
          if (ParentOp != a2) {
            goto LABEL_14;
          }
          int v16 = *((_DWORD *)v13 + 11);
          if ((v16 & 0x7FFFFF) != 0
            && *(_UNKNOWN **)(*((void *)v13 + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
          {
            mlir::mps::StitchingPass::runOnRegionForOp((mlir::mps::StitchingPass *)this, v13);
            int v16 = *((_DWORD *)v13 + 11);
          }
          if ((v16 & 0x800000) != 0 && (uint64_t v17 = *((unsigned int *)v13 + 17), v17))
          {
            uint64_t v18 = (void *)(*((void *)v13 + 9) + 24);
            while (1)
            {
              *(void *)&v46[0] = *v18;
              uint64_t DefiningOp = (mlir::mps::_anonymous_namespace_ *)mlir::Value::getDefiningOp((mlir::Value *)v46);
              if (DefiningOp)
              {
                  break;
              }
              v18 += 4;
              if (!--v17) {
                goto LABEL_43;
              }
            }
LABEL_29:
            unint64_t v21 = (mlir::GenericProgramPoint ***)v11[1];
            uint64_t v22 = *(void *)(v7 + 8);
            if (v22) {
              uint64_t v23 = v22 - 8;
            }
            else {
              uint64_t v23 = 0;
            }
            if (v21 == (mlir::GenericProgramPoint ***)(v23 + 32))
            {
LABEL_39:
              uint64_t v26 = 0;
            }
            else
            {
              unint64_t v24 = v11[1];
              while (1)
              {
                mlir::GenericProgramPoint::~GenericProgramPoint(v24);
                uint64_t v26 = v25;
                  break;
                unint64_t v24 = (mlir::GenericProgramPoint *)*((void *)v24 + 1);
                uint64_t v28 = *(void *)(v7 + 8);
                if (v28) {
                  uint64_t v29 = v28 - 8;
                }
                else {
                  uint64_t v29 = 0;
                }
                if (v24 == (mlir::GenericProgramPoint *)(v29 + 32)) {
                  goto LABEL_39;
                }
              }
            }
            uint64_t v30 = mlir::mps::BaseFusableCoreOps::fuseCoreOps(this[43], (mlir::mps::StitchingPass *)this, v13, (mlir::OpBuilder *)v43);
            if (!v30)
            {
              uint64_t v11 = *v21;
              goto LABEL_14;
            }
            if (v26) {
              uint64_t v11 = *(mlir::GenericProgramPoint ***)(*(void *)v26 + 8);
            }
            else {
              uint64_t v11 = *(mlir::GenericProgramPoint ***)(v30 + 8);
            }
          }
          else
          {
LABEL_43:
            uint64_t v31 = *((unsigned int *)v13 + 9);
            uint64_t v32 = (char *)v13 - 16;
            if (!v31) {
              uint64_t v32 = 0;
            }
            *(void *)&v44[0] = v32;
            *((void *)&v44[0] + 1) = v31;
            mlir::ResultRange::getUses((uint64_t *)v44, (uint64_t *)v46);
            uint64_t v34 = v47;
            uint64_t v35 = v48;
            uint64_t v45 = v47;
            v44[0] = v46[0];
            v44[1] = v46[1];
            if (v47 != v48)
            {
              {
                mlir::ResultRange::UseIterator::operator++((uint64_t *)v44);
                uint64_t v34 = v45;
                if (v45 == v35) {
                  goto LABEL_14;
                }
              }
              goto LABEL_29;
            }
LABEL_14:
            uint64_t v11 = (mlir::GenericProgramPoint **)v11[1];
          }
        }
        uint64_t v36 = *v10;
        while (v36 != (mlir::GenericProgramPoint *)v10)
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(v36);
          uint64_t v38 = v37;
          uint64_t v36 = *(mlir::GenericProgramPoint **)v36;
          uint64_t v39 = mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>>();
          if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v38 + 48) + 32))(*(void *)(v38 + 48), v39) & 1) == 0&& !mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(v38))
          {
            uint64_t v40 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
            if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v38 + 48) + 32))(*(void *)(v38 + 48), v40) & 1) == 0&& *(_DWORD *)(v38 + 36)&& !*(void *)(v38 - 16))
            {
              mlir::Operation::erase((mlir::Operation *)v38);
            }
          }
        }
      }
      uint64_t v4 = v42 + 1;
    }
    while (v42 + 1 != v41);
  }
}

uint64_t mlir::mps::anonymous namespace'::isStitchable(mlir::mps::_anonymous_namespace_ *this, mlir::Operation *a2, mlir::Operation *a3)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)this + 6) + 32))(*((void *)this + 6), v5)) {
    return 0;
  }
  v112[0] = 0;
  v112[1] = 0;
  uint64_t v119 = (uint64_t **)v112;
  if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v119, (uint64_t)this)) {
    return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v112);
  }
  uint64_t v8 = *(_UNKNOWN **)(*((void *)this + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::BroadcastToOp,void>::id
     ? this
     : 0;
  uint64_t v124 = v8;
  if (v8)
  {
    uint64_t Filter = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v124);
    uint64_t v119 = (uint64_t **)Filter;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v119);
    if (!DefiningOp
      || (uint64_t v10 = DefiningOp,
          uint64_t v11 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(void, uint64_t))(**(void **)(v10 + 48) + 32))(*(void *)(v10 + 48), v11) & 1) == 0))
    {
      uint64_t v12 = (mlir::mps::_anonymous_namespace_ *)mlir::Value::getDefiningOp((mlir::Value *)&Filter);
      if (v12)
      {
          return 0;
      }
    }
  }
  unint64_t v14 = *(void **)(*((void *)this + 6) + 16);
  if (v14 == &mlir::detail::TypeIDResolver<mlir::mps::GetCoordOp,void>::id)
  {
    mlir::mps::GetCoordOpAdaptor::GetCoordOpAdaptor(&v119, this);
    unsigned int ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)&v119, 1u);
    uint64_t v49 = v123;
    uint64_t Filter = v123;
    uint64_t v117 = ODSOperandIndexAndLength;
    if (ODSOperandIndexAndLength) {
      uint64_t v49 = (void *)mlir::ValueRange::offset_base(&Filter, ODSOperandIndexAndLength);
    }
    uint64_t Filter = v49;
    uint64_t v117 = 0;
    uint64_t v50 = mlir::ValueRange::dereference_iterator(&Filter, 0);
    uint64_t Filter = 0;
    uint64_t v117 = 0;
    v114[0] = (uint64_t **)&Filter;
    uint64_t v124 = (void *)v50;
    uint64_t v51 = mlir::Value::getDefiningOp((mlir::Value *)&v124);
    if (!v51 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v114, v51)) {
      return 0;
    }
    int64_t SingleInt = mlir::getSingleIntValue<long long>((uint64_t)Filter, v117);
    BOOL v7 = 0;
    if (v53)
    {
      uint64_t v54 = SingleInt;
      if (SingleInt >= -4)
      {
        uint64_t Filter = v118;
        uint64_t v117 = 0x400000000;
        unsigned int v55 = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)&v119, 0);
        unint64_t v56 = (unint64_t)v123;
        uint64_t v124 = v123;
        uint64_t v125 = v55;
        if (v55) {
          unint64_t v56 = mlir::ValueRange::offset_base(&v124, v55);
        }
        uint64_t v124 = (void *)v56;
        uint64_t v125 = 0;
        uint64_t v57 = mlir::ValueRange::dereference_iterator(&v124, 0);
        if (mlir::matchConstantWithIntVector<long long>(v57, (uint64_t)&Filter)) {
          BOOL v7 = ~((v117 & (unint64_t)(v54 >> 63)) + v54) + v117 < 4;
        }
        else {
          BOOL v7 = 0;
        }
        if (Filter != v118) {
          free(Filter);
        }
      }
    }
  }
  else if (v14 == &mlir::detail::TypeIDResolver<mlir::mps::DepthToSpace2DOp,void>::id)
  {
    unint64_t v115 = this;
    unint64_t v58 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v115) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v58) {
      goto LABEL_72;
    }
    uint64_t v59 = *v58;
    unint64_t v60 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v61 = *(unsigned int *)(v59 + 16);
    if (!v61) {
      goto LABEL_72;
    }
    unint64_t v62 = *(void **)(v59 + 8);
    unint64_t v63 = &v62[2 * v61];
    do
    {
      unint64_t v64 = v61 >> 1;
      unint64_t v65 = &v62[2 * (v61 >> 1)];
      unint64_t v67 = *v65;
      uint64_t v66 = v65 + 2;
      v61 += ~(v61 >> 1);
      if (v67 < v60) {
        unint64_t v62 = v66;
      }
      else {
        unint64_t v61 = v64;
      }
    }
    while (v61);
    if (v62 != v63 && *v62 == v60) {
      uint64_t v68 = v62[1];
    }
    else {
LABEL_72:
    }
      uint64_t v68 = 0;
    uint64_t Filter = v58;
    uint64_t v117 = v68;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&Filter)) {
      return 0;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Filter);
    uint64_t v70 = v69;
    int v71 = 0;
    while (1)
    {
      if (v71 == 1) {
        uint64_t v72 = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v115);
      }
      else {
        uint64_t v72 = v71
      }
            ? mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v115)
            : mlir::anec::GOC::getBias((mlir::anec::GOC *)&v115);
      uint64_t v119 = 0;
      uint64_t v120 = 0;
      v114[0] = (uint64_t **)&v119;
      uint64_t v124 = (void *)v72;
      uint64_t v73 = mlir::Value::getDefiningOp((mlir::Value *)&v124);
      if (v73 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v114, v73))
      {
        unint64_t v74 = mlir::getSingleIntValue<long long>((uint64_t)v119, v120);
        unint64_t v75 = v74 & 0xFFFFFFFFFFFFFF00;
        uint64_t v76 = v74;
        uint64_t v78 = v77;
      }
      else
      {
        unint64_t v75 = 0;
        uint64_t v78 = 0;
        uint64_t v76 = 0;
      }
      uint64_t v79 = v76 | v75;
      BOOL v7 = 0;
      if (!v78 || v79 < -4) {
        break;
      }
      if ((unint64_t)(v70 + ~mlir::getPositiveAxis(v79, v70)) >= 4) {
        return 0;
      }
      if (++v71 == 3) {
        return 1;
      }
    }
  }
  else
  {
    if (v14 != &mlir::detail::TypeIDResolver<mlir::mps::SpaceToDepth2DOp,void>::id)
    {
      if (!a2 || !*((_DWORD *)a2 + 9)) {
        return 1;
      }
      unint64_t v115 = this;
      uint64_t v15 = (void *)(*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8);
      if (!v15) {
        goto LABEL_27;
      }
      uint64_t v16 = *v15;
      unint64_t v17 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v18 = *(unsigned int *)(v16 + 16);
      if (!v18) {
        goto LABEL_27;
      }
      BOOL v19 = *(void **)(v16 + 8);
      uint64_t v20 = &v19[2 * v18];
      do
      {
        unint64_t v21 = v18 >> 1;
        uint64_t v22 = &v19[2 * (v18 >> 1)];
        unint64_t v24 = *v22;
        uint64_t v23 = v22 + 2;
        v18 += ~(v18 >> 1);
        if (v24 < v17) {
          BOOL v19 = v23;
        }
        else {
          unint64_t v18 = v21;
        }
      }
      while (v18);
      if (v19 != v20 && *v19 == v17) {
        uint64_t v25 = v19[1];
      }
      else {
LABEL_27:
      }
        uint64_t v25 = 0;
      uint64_t v124 = v15;
      uint64_t v125 = v25;
      uint64_t v26 = (uint64_t **)(*((void *)this - 1) & 0xFFFFFFFFFFFFFFF8);
      if (!v26) {
        goto LABEL_37;
      }
      unint64_t v27 = *v26;
      unint64_t v28 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v29 = *((unsigned int *)v27 + 4);
      if (!v29) {
        goto LABEL_37;
      }
      uint64_t v30 = (void *)v27[1];
      uint64_t v31 = &v30[2 * v29];
      do
      {
        unint64_t v32 = v29 >> 1;
        uint64_t v33 = &v30[2 * (v29 >> 1)];
        unint64_t v35 = *v33;
        uint64_t v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28) {
          uint64_t v30 = v34;
        }
        else {
          unint64_t v29 = v32;
        }
      }
      while (v29);
      if (v30 != v31 && *v30 == v28) {
        uint64_t v36 = (uint64_t **)v30[1];
      }
      else {
LABEL_37:
      }
        uint64_t v36 = 0;
      v114[0] = v26;
      v114[1] = v36;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124)) {
        return 0;
      }
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v114)) {
        return 0;
      }
      uint64_t ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v124);
      uint64_t v39 = v38;
      uint64_t v40 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v114);
      if (v39 != v41 || memcmp(ArgAttrsAttr, v40, 8 * v39)) {
        return 0;
      }
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124))
      {
        uint64_t v42 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v124);
        if (v43)
        {
          uint64_t v44 = 8 * v43;
          while (*v42 != 0x8000000000000000)
          {
            ++v42;
            v44 -= 8;
            if (!v44) {
              goto LABEL_47;
            }
          }
        }
        else
        {
LABEL_47:
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v114))
          {
            uint64_t v45 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v114);
            if (!v46) {
              return 1;
            }
            uint64_t v47 = 8 * v46;
            BOOL v7 = 1;
            while (*v45 != 0x8000000000000000)
            {
              ++v45;
              v47 -= 8;
              if (!v47) {
                return v7;
              }
            }
          }
        }
      }
      uint64_t v102 = mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>>();
      if (((*(uint64_t (**)(void, uint64_t))(**((void **)this + 6) + 32))(*((void *)this + 6), v102) & 1) == 0)
      {
        uint64_t v103 = mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>>();
        if (((*(uint64_t (**)(void, uint64_t))(**((void **)this + 6) + 32))(*((void *)this + 6), v103) & 1) == 0)
        {
          uint64_t v104 = mlir::TypeID::get<mlir::OpTrait::ResultsBroadcastableShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ResultsBroadcastableShape>(void)::Empty>>();
          if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 6) + 32))(*((void *)this + 6), v104))
          {
            mlir::Operation::getOperandTypes(this, (uint64_t *)&v119);
            if (v119 != v121 || v120 != v122)
            {
              uint64_t v105 = 0;
              uint64_t v106 = ~v120 + v122;
              uint64_t v107 = &v119[4 * v120 + 3];
              do
              {
                uint64_t v108 = *v107;
                v107 += 4;
                if (v124 == (void *)(v108[1] & 0xFFFFFFFFFFFFFFF8)) {
                  ++v105;
                }
                BOOL v110 = v106-- != 0;
              }
              while (v119 != v121 || v110);
              if (v105)
              {
                char v113 = 1;
                mlir::Operation::getOperandTypes(this, (uint64_t *)&v119);
                uint64_t Filter = &v124;
                uint64_t v117 = (uint64_t)&v113;
                v118[0] = &v115;
              }
            }
          }
          return 0;
        }
      }
      return 1;
    }
    unint64_t v115 = this;
    uint64_t v80 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v115) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v80) {
      goto LABEL_98;
    }
    uint64_t v81 = *v80;
    unint64_t v82 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v83 = *(unsigned int *)(v81 + 16);
    if (!v83) {
      goto LABEL_98;
    }
    uint64_t v84 = *(void **)(v81 + 8);
    unint64_t v85 = &v84[2 * v83];
    do
    {
      unint64_t v86 = v83 >> 1;
      int64x2_t v87 = &v84[2 * (v83 >> 1)];
      unint64_t v89 = *v87;
      uint64_t v88 = v87 + 2;
      v83 += ~(v83 >> 1);
      if (v89 < v82) {
        uint64_t v84 = v88;
      }
      else {
        unint64_t v83 = v86;
      }
    }
    while (v83);
    if (v84 != v85 && *v84 == v82) {
      uint64_t v90 = v84[1];
    }
    else {
LABEL_98:
    }
      uint64_t v90 = 0;
    uint64_t Filter = v80;
    uint64_t v117 = v90;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&Filter)) {
      return 0;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Filter);
    uint64_t v92 = v91;
    int v93 = 0;
    while (1)
    {
      if (v93 == 1) {
        uint64_t v94 = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v115);
      }
      else {
        uint64_t v94 = v93
      }
            ? mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v115)
            : mlir::anec::GOC::getBias((mlir::anec::GOC *)&v115);
      uint64_t v119 = 0;
      uint64_t v120 = 0;
      v114[0] = (uint64_t **)&v119;
      uint64_t v124 = (void *)v94;
      uint64_t v95 = mlir::Value::getDefiningOp((mlir::Value *)&v124);
      if (v95 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v114, v95))
      {
        unint64_t v96 = mlir::getSingleIntValue<long long>((uint64_t)v119, v120);
        unint64_t v97 = v96 & 0xFFFFFFFFFFFFFF00;
        uint64_t v98 = v96;
        uint64_t v100 = v99;
      }
      else
      {
        unint64_t v97 = 0;
        uint64_t v100 = 0;
        uint64_t v98 = 0;
      }
      uint64_t v101 = v98 | v97;
      BOOL v7 = 0;
      if (!v100 || v101 < -4) {
        break;
      }
      if ((unint64_t)(v92 + ~mlir::getPositiveAxis(v101, v92)) >= 4) {
        return 0;
      }
      if (++v93 == 3) {
        return 1;
      }
    }
  }
  return v7;
}

uint64_t mlir::mps::BaseFusableCoreOps::fuseCoreOps(mlir::mps::BaseFusableCoreOps *this, mlir::mps::StitchingPass *a2, mlir::Operation *a3, mlir::OpBuilder *a4)
{
  if ((*((unsigned char *)a3 + 46) & 0x80) != 0)
  {
    uint64_t v8 = *((unsigned int *)a3 + 17);
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (uint64_t *)(*((void *)a3 + 9) + 24);
      do
      {
        if (((**(uint64_t (***)(mlir::mps::BaseFusableCoreOps *, mlir::Operation *, uint64_t))this)(this, a3, v9) & 1) == 0)
        {
          uint64_t v54 = (void *)*v10;
          uint64_t DefiningOp = (mlir::GenericProgramPoint *)mlir::Value::getDefiningOp((mlir::Value *)&v54);
          uint64_t v54 = (void *)*v10;
          uint64_t v13 = mlir::Value::getDefiningOp((mlir::Value *)&v54);
          if (v13)
          {
            uint64_t v15 = v13;
            uint64_t v16 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
            LOBYTE(v13) = (*(uint64_t (**)(void, uint64_t))(**(void **)(v15 + 48) + 32))(*(void *)(v15 + 48), v16);
          }
          if ((v13 & 1) == 0 {
            && DefiningOp
          }
          {
            uint64_t v17 = *((void *)DefiningOp + 2);
            mlir::GenericProgramPoint::~GenericProgramPoint(DefiningOp);
            uint64_t v19 = *(void *)(v18 + 8);
            *((void *)a4 + 2) = v17;
            *((void *)a4 + 3) = v19;
            Unknownuint64_t Loc = mlir::Builder::getUnknownLoc((mlir::UnknownLoc **)a4, v20);
            uint64_t v54 = (void *)*v10;
            uint64_t v22 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::IdentityOp,mlir::Value>(a4, UnknownLoc, (uint64_t *)&v54)- 16);
            v62[0] = v22;
            uint64_t v61 = *v10;
            uint64_t v23 = mlir::Value::getDefiningOp((mlir::Value *)v62);
            uint64_t v54 = v58;
            unsigned int v55 = v58;
            int v57 = 0;
            uint64_t v56 = 0x100000001;
            v58[0] = v23;
            mlir::Value::replaceAllUsesExcept((const void **)&v61, v22, (llvm::SmallPtrSetImplBase *)&v54);
            if (v55 != v54) {
              free(v55);
            }
            uint64_t v11 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)v62);
            mlir::mps::BaseFusableCoreOps::fuseCoreOps(this, a2, v11, a4);
          }
        }
        ++v9;
        v10 += 4;
      }
      while (v8 != v9);
    }
  }
  unint64_t v24 = *(void **)(*((void *)a3 + 6) + 16);
  BOOL v38 = v24 == &mlir::detail::TypeIDResolver<mlir::mps::RealToHermiteanFFTOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::SoftmaxOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mpsx::RMSNormOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::FastFourierTransformOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::ResizeOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::StencilOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mpsx::QuantizedMatMulOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionProdOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMinOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMaxOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionSumOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id;
  if (v38
    && (*(unsigned int (**)(mlir::mps::BaseFusableCoreOps *, mlir::Operation *))(*(void *)this + 8))(this, a3))
  {
    llvm::deallocate_buffer(v59, (void *)(16 * v60));
  }
  uint64_t v39 = *((void *)a3 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(a3);
  *((void *)a4 + 2) = v39;
  *((void *)a4 + 3) = v40;
  if ((*((unsigned char *)a3 + 46) & 0x80) != 0)
  {
    uint64_t v41 = *((unsigned int *)a3 + 17);
    if (v41)
    {
      uint64_t v42 = 0;
      uint64_t v43 = *((void *)a3 + 9);
      do
      {
        uint64_t v44 = v43 + 32 * v42;
        uint64_t v46 = *(void *)(v44 + 24);
        uint64_t v45 = (uint64_t *)(v44 + 24);
        uint64_t v54 = (void *)v46;
        uint64_t v47 = (mlir::mps::_anonymous_namespace_ *)mlir::Value::getDefiningOp((mlir::Value *)&v54);
        if (v47)
        {
          uint64_t v49 = v47;
          {
            uint64_t v54 = (void *)*v45;
            uint64_t v50 = mlir::Value::getDefiningOp((mlir::Value *)&v54);
            if (!v50
              || (uint64_t v51 = v50,
                  uint64_t v52 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
                  ((*(uint64_t (**)(void, uint64_t))(**(void **)(v51 + 48) + 32))(*(void *)(v51 + 48), v52) & 1) == 0))
            {
              llvm::deallocate_buffer(v59, (void *)(16 * v60));
            }
          }
        }
        ++v42;
      }
      while (v42 != v41);
    }
  }
  return 0;
}

void mlir::mps::StitchingPass::runOnOperation(mlir::mps::StitchingPass *this)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = (mlir::Operation *)(v2 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(v2 & 0xFFFFFFFFFFFFFFF8);
  }

  mlir::mps::StitchingPass::runOnRegionForOp((mlir::mps::BaseFusableCoreOps **)this, v3);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::IdentityOp,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.identity", (const unsigned __int8 *)0xC, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"mps.identity";
    v15[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::mps::ACosOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

mlir::mps::_anonymous_namespace_::StitchedRegion *mlir::mps::anonymous namespace'::StitchedRegion::StitchedRegion(mlir::mps::_anonymous_namespace_::StitchedRegion *this, mlir::mps::StitchingPass *a2, mlir::OpBuilder *a3, mlir::Operation *a4, mlir::mps::BaseFusableCoreOps *a5, int a6)
{
  v14[23] = *MEMORY[0x1E4F143B8];
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = a4;
  *((void *)this + 5) = 0;
  char v8 = (mlir::mps::_anonymous_namespace_::StitchedRegion *)((char *)this + 40);
  *((unsigned char *)this + 48) = a6;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 48) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *((void *)this + 26) = a5;
  *((_DWORD *)this + 54) = 1;
  uint64_t v11 = (uint64_t *)*((void *)this + 4);
  if (isStitchable)
  {
    *((void *)this + 5) = v11;
  }
  if (a6)
  {
    *((void *)this + 5) = v11;
  }
  mlir::emitError(v11[3], (uint64_t)&v13);
  if (v13) {
    mlir::Diagnostic::operator<<((uint64_t)v14, "A non stitchable core asked to create a stitched region, invalid\n");
  }
  mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v13);
  if (v13) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v13);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  *(void *)(*(void *)this + 40) |= 4uLL;
  return this;
}

void mlir::mps::createStitchingPass(long long *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x168uLL);
  long long v6 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  mlir::mps::StitchingPass::StitchingPass((uint64_t)v4, (uint64_t)&v6);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a2 = v4;
}

void mlir::mps::StitchingPass::~StitchingPass(mlir::mps::StitchingPass *this)
{
  *(void *)this = &unk_1EC9CA598;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

  mlir::Pass::~Pass(this);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EC9CA598;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  mlir::Pass::~Pass(this);

  operator delete(v3);
}

const char *mlir::mps::MPSStitchingBase<mlir::mps::StitchingPass>::getName()
{
  return "MPSStitching";
}

void *mlir::mps::MPSStitchingBase<mlir::mps::StitchingPass>::getDependentDialects(int a1, uint64_t **a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EC9CF000;
  uint64_t v4 = v3;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mpsx::MPSXDialect,void>::id, "mpsx", 4uLL, v3);
  uint64_t result = v4;
  if (v4 == v3) {
    return (void *)(*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (void *)(*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

const char *mlir::mps::MPSStitchingBase<mlir::mps::StitchingPass>::getArgument()
{
  return "mps-stitching";
}

const char *mlir::mps::MPSStitchingBase<mlir::mps::StitchingPass>::getDescription()
{
  return "Stitch MPS ops together.";
}

BOOL mlir::InterfacePass<mlir::FunctionOpInterface>::canScheduleOn(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::TypeID::get<mlir::FunctionOpInterface>();
  unint64_t v4 = *(unsigned int *)(a2 + 40);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void **)(a2 + 32);
  long long v6 = &v5[2 * v4];
  do
  {
    unint64_t v7 = v4 >> 1;
    char v8 = &v5[2 * (v4 >> 1)];
    unint64_t v10 = *v8;
    uint64_t v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3) {
      uint64_t v5 = v9;
    }
    else {
      unint64_t v4 = v7;
    }
  }
  while (v4);
  return v5 != v6 && *v5 == v3 && v5[1] != 0;
}

_OWORD *mlir::mps::MPSStitchingBase<mlir::mps::StitchingPass>::clonePass@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = operator new(0x168uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  result[1] = *(_OWORD *)(a1 + 16);
  *((void *)result + 4) = *(void *)(a1 + 32);
  *((void *)result + 1) = v5;
  *((unsigned char *)result + 40) = 0;
  *((unsigned char *)result + 120) = 0;
  result[8] = 0u;
  result[9] = 0u;
  result[10] = 0u;
  *((void *)result + 22) = 0;
  *((void *)result + 23) = (char *)result + 200;
  *((void *)result + 24) = 0x400000000;
  *((void *)result + 29) = (char *)result + 248;
  *((void *)result + 30) = 0x400000000;
  *((void *)result + 35) = 0;
  *((void *)result + 36) = 0;
  *((_DWORD *)result + 74) = 0;
  *((_DWORD *)result + 75) = 16;
  result[19] = 0u;
  result[20] = 0u;
  *(void *)uint64_t result = &unk_1EC9CA598;
  uint64_t v7 = *(void *)(a1 + 344);
  uint64_t v6 = *(void *)(a1 + 352);
  *((void *)result + 42) = 0;
  *((void *)result + 43) = v7;
  *((void *)result + 44) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *a2 = result;
  return result;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>()
{
  unint64_t v0 = 0x1E8EB8000uLL;
  {
    unint64_t v0 = 0x1E8EB8000;
    if (v2)
    {
      unint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Stitchable<Empty>]";
      unint64_t v11 = 82;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = 0x1E8EB8000;
    }
  }
  return *(void *)(v0 + 2032);
}

uint64_t *mlir::Operation::getOperandTypes@<X0>(mlir::Operation *this@<X0>, uint64_t *a2@<X8>)
{
  if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
    uint64_t v2 = *((void *)this + 9);
    uint64_t v3 = *((unsigned int *)this + 17);
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  v5[0] = v2;
  v5[1] = v3;
  return mlir::OperandRange::getTypes(v5, a2);
}

uint64_t llvm::all_of<mlir::ValueTypeRange<mlir::OperandRange>,mlir::mps::anonymous namespace'::checkCompatibleShapes(mlir::Operation *,mlir::Operation *)::{lambda(mlir::Type)#2}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  if (*a1 == v4 && v3 == v5) {
    return 1;
  }
  uint64_t v7 = *(mlir::CallableOpInterface **)a2;
  uint64_t v42 = a1[2];
  uint64_t v43 = *(unsigned char **)(a2 + 8);
  unint64_t v8 = *(uint64_t **)(a2 + 16);
  uint64_t v41 = a1[3];
  while (1)
  {
    uint64_t v9 = (uint64_t *)(*(void *)(*(void *)(v2 + 32 * v3 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (*(uint64_t **)v7 == v9 && *v43)
    {
      unsigned char *v43 = 0;
      goto LABEL_49;
    }
    if (!v9) {
      goto LABEL_16;
    }
    uint64_t v10 = *v9;
    unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v12 = *(unsigned int *)(v10 + 16);
    if (!v12) {
      goto LABEL_16;
    }
    uint64_t v13 = *(void **)(v10 + 8);
    __int16 v14 = &v13[2 * v12];
    do
    {
      unint64_t v15 = v12 >> 1;
      __int16 v16 = &v13[2 * (v12 >> 1)];
      unint64_t v18 = *v16;
      uint64_t v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11) {
        uint64_t v13 = v17;
      }
      else {
        unint64_t v12 = v15;
      }
    }
    while (v12);
    if (v13 != v14 && *v13 == v11) {
      uint64_t v19 = v13[1];
    }
    else {
LABEL_16:
    }
      uint64_t v19 = 0;
    v44[0] = v9;
    v44[1] = v19;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v44)) {
      return 0;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
    uint64_t v21 = v20;
    mlir::CallableOpInterface::getArgAttrsAttr(v7);
    if (v21 > v22) {
      return 0;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
    unint64_t v24 = v23;
    mlir::CallableOpInterface::getArgAttrsAttr(v7);
    if (v25 >= v24) {
      unint64_t v26 = v24;
    }
    else {
      unint64_t v26 = v25;
    }
    if (!v26) {
      goto LABEL_49;
    }
    uint64_t v27 = 0;
    int v28 = 0;
    do
    {
      while (1)
      {
        mlir::CallableOpInterface::getArgAttrsAttr(v7);
        uint64_t v30 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr(v7) + 8 * (v29 + ~v27));
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
        uint64_t v32 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44)
                        + 8 * (v31 + ~v27));
        if (v30 == 0x8000000000000000) {
          break;
        }
        if (v30 != 1 || v32 == 1)
        {
LABEL_35:
          BOOL v39 = v30 == 0x8000000000000000 && v32 != 1;
          v28 |= v39;
          goto LABEL_44;
        }
        ++v27;
        int v28 = 1;
        if (v27 == v26) {
          return 0;
        }
      }
      if (v32 != 0x8000000000000000) {
        goto LABEL_35;
      }
      uint64_t v33 = *v8;
      if (*(unsigned char *)(*v8 + 47)
        && (uint64_t InherentAttr = mlir::Operation::getInherentAttr(*v8, (uint64_t)"__no_dynamic_broadcast", 22), v35))
      {
        int v36 = InherentAttr != 0;
      }
      else
      {
        int v36 = mlir::DictionaryAttr::contains(v33 + 56, "__no_dynamic_broadcast", 0x16uLL);
      }
      v28 |= v36 ^ 1;
LABEL_44:
      ++v27;
    }
    while (v27 != v26);
    uint64_t v5 = v41;
    uint64_t v4 = v42;
    if (v28) {
      return 0;
    }
LABEL_49:
    ++v3;
    if (v2 == v4 && v3 == v5) {
      return 1;
    }
  }
}

uint64_t mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>>()
{
  unint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    unint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      unint64_t v11 = 97;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    }
  }
  return v0[21];
}

void mlir::mps::anonymous namespace'::StitchedRegion::createStitchedOp(mlir::mps::_anonymous_namespace_::StitchedRegion *this)
{
  void v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 1);
  unint64_t v4 = (mlir::Operation **)((char *)this + 40);
  unint64_t v3 = (mlir::GenericProgramPoint *)*((void *)this + 5);
  uint64_t v5 = *((void *)v3 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v3);
  uint64_t v7 = *(void *)(v6 + 8);
  *(void *)(v2 + 16) = v5;
  *(void *)(v2 + 24) = v7;
  Unknownuint64_t Loc = mlir::Builder::getUnknownLoc(*((mlir::UnknownLoc ***)this + 1), v8);
  F32uint64_t Type = mlir::Builder::getF32Type(*((mlir::Float32Type ***)this + 1), v10);
  uint64_t v26 = mlir::UnrankedTensorType::get(F32Type);
  unint64_t v25 = (char *)mlir::OpBuilder::create<mlir::mpsx::StitchedOp,mlir::UnrankedTensorType &>(*((mlir::OpBuilder **)this + 1), UnknownLoc, &v26)- 16;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v25);
  *((void *)this + 25) = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id) {
    uint64_t v13 = DefiningOp;
  }
  else {
    uint64_t v13 = 0;
  }
  *((void *)this + 3) = v13;
  *((void *)this + 15) = 0;
  unint64_t Body = mlir::anec::A11Legacy::getBody((mlir::mps::_anonymous_namespace_::StitchedRegion *)((char *)this + 24));
  unint64_t v15 = (void *)*((void *)this + 1);
  mlir::ValueRange::ValueRange(v27, 0, 0);
  Block = mlir::OpBuilder::createBlock(v15, Body, 0, v27[0], v27[1], 0, 0);
  *((void *)this + 2) = Block;
  uint64_t v17 = *((void *)this + 1);
  *(void *)(v17 + 16) = Block;
  *(void *)(v17 + 24) = Block + 2;
  unint64_t v18 = (void *)*((unsigned int *)*v4 + 9);
  uint64_t v19 = (char *)*v4 - 16;
  if (!v18) {
    uint64_t v19 = 0;
  }
  __p = v19;
  unint64_t v23 = v18;
  mlir::ResultRange::replaceAllUsesWith((uint64_t *)&__p, *((mlir::Operation **)this + 25));
  __p = operator new(0x80uLL);
  unint64_t v23 = __p;
  unint64_t v24 = (char *)__p + 128;
  uint64_t v20 = (mlir::Operation **)((char *)this + 32);
  if (*((unsigned char *)this + 48))
  {
    uint64_t v21 = *v20;
    uint64_t v20 = v4;
  }
  else
  {
    uint64_t v21 = 0;
  }
}

mlir::Operation *mlir::mps::anonymous namespace'::StitchedRegion::recurseUses(mlir::Operation *this, mlir::Operation *a2, mlir::Operation **a3)
{
  unint64_t v3 = *(void **)(*((void *)this + 6) + 16);
  if (v3 == &mlir::detail::TypeIDResolver<mlir::mps::SpaceToDepth2DOp,void>::id
    || v3 == &mlir::detail::TypeIDResolver<mlir::mps::DepthToSpace2DOp,void>::id)
  {
    return this;
  }
  uint64_t v5 = this;
  uint64_t v6 = *((void *)this - 2);
  if (!v6) {
    return this;
  }
  int v8 = 1;
  uint64_t v9 = (void *)*((void *)this - 2);
  do
  {
    unint64_t v11 = (mlir::mps::_anonymous_namespace_ *)v9[2];
    uint64_t v13 = (mlir::Block *)*((void *)v11 + 2);
    if (!v13)
    {
      uint64_t ParentOp = 0;
      this = (mlir::Operation *)*((void *)v5 + 2);
      if (!this) {
        goto LABEL_7;
      }
LABEL_15:
      this = (mlir::Operation *)mlir::Block::getParentOp(this);
      goto LABEL_7;
    }
    uint64_t ParentOp = mlir::Block::getParentOp(v13);
    this = (mlir::Operation *)*((void *)v5 + 2);
    if (this) {
      goto LABEL_15;
    }
LABEL_7:
    if ((mlir::Operation *)ParentOp == this) {
      int v10 = isStitchable;
    }
    else {
      int v10 = 0;
    }
    v8 &= v10;
    uint64_t v9 = (void *)*v9;
  }
  while (v9);
  if (!v8) {
    return this;
  }
  unint64_t v15 = *(mlir::mps::_anonymous_namespace_ **)(v6 + 16);
  if (!this)
  {
    uint64_t v17 = 0;
    unint64_t v18 = *(void **)v6;
    if (*(void *)v6) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
  uint64_t v21 = v15;
  uint64_t v17 = v21;
  unint64_t v18 = *(void **)v6;
  if (!*(void *)v6)
  {
LABEL_24:
    char v19 = 1;
    goto LABEL_25;
  }
LABEL_19:
  char v19 = 1;
  do
  {
    uint64_t v20 = (mlir::mps::_anonymous_namespace_ *)v18[2];
    if (this)
    {
      uint64_t v21 = v20;
      v19 &= v21 == v17;
    }
    unint64_t v18 = (void *)*v18;
  }
  while (v18);
LABEL_25:
  if (v19)
  {
    if (v17) {
      *(void *)a2 = v17;
    }
  }
  return this;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::ReturnStitchedOp,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.stitched_return", (const unsigned __int8 *)0x14, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"mpsx.stitched_return";
    v15[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::EraseOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::ReturnStitchedOp,void>::id) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::StitchedOp,mlir::UnrankedTensorType &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.stitched", (const unsigned __int8 *)0xD, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"mpsx.stitched";
    v15[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::mpsx::StitchedOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

void mlir::mps::anonymous namespace'::StitchedRegion::recursePrefixes(uint64_t a1, mlir::Operation *a2, uint64_t a3, mlir::GenericProgramPoint *a4, uint64_t a5)
{
  unint64_t v11 = (mlir::Operation *)((char *)a2 - 16);
  int v10 = (void *)*((void *)a2 - 2);
  if (!v10) {
    goto LABEL_11;
  }
  int v12 = 0;
  do
  {
    uint64_t ParentOp = *(mlir::Block **)(v10[2] + 16);
    if (ParentOp) {
      uint64_t ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    }
    if (ParentOp != *(mlir::Block **)(a1 + 200)) {
      ++v12;
    }
    int v10 = (void *)*v10;
  }
  while (v10);
  if (v12)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    if (a4)
    {
      uint64_t v15 = *((void *)a4 + 2);
      mlir::GenericProgramPoint::~GenericProgramPoint(a4);
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = v15 + 32;
    }
    *(void *)(v14 + 16) = v15;
    *(void *)(v14 + 24) = v16;
    unint64_t v111 = v11;
    v109[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 128), (unint64_t *)&v111, v109)&& v109[0] != *(void *)(a1 + 128) + 16 * *(unsigned int *)(a1 + 144)&& (v109[0] = *(void *)(v109[0] + 8)) != 0)
    {
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v109);
    }
    else
    {
      uint64_t v91 = mlir::OpBuilder::clone(*(uint64_t ***)(a1 + 8), a2, (mlir::IRMapping *)(a1 + 128));
      uint64_t DefiningOp = (uint64_t)v91;
      uint64_t v92 = (void *)*((void *)a2 - 2);
      if (v92)
      {
        int v93 = (uint64_t *)((char *)v91 - 16);
        do
        {
          uint64_t v94 = v92[2];
          uint64_t v95 = *(mlir::Block **)(v94 + 16);
          if (v95) {
            uint64_t v95 = (mlir::Block *)mlir::Block::getParentOp(v95);
          }
          if (v95 == *(mlir::Block **)(a1 + 200) && (*(unsigned char *)(v94 + 46) & 0x80) != 0)
          {
            uint64_t v96 = *(unsigned int *)(v94 + 68);
            if (v96)
            {
              uint64_t v97 = 0;
              uint64_t v98 = 32 * v96;
              uint64_t v99 = *(void *)(v94 + 72) + 24;
              do
              {
                if (*(mlir::DominanceInfo **)(v99 + v97) == v11)
                {
                  uint64_t v100 = (uint64_t *)(*(void *)(v94 + 72) + v97);
                  uint64_t v101 = (uint64_t *)v100[1];
                  if (v101)
                  {
                    uint64_t *v101 = *v100;
                    if (*v100) {
                      *(void *)(*v100 + 8) = v100[1];
                    }
                  }
                  void v100[3] = (uint64_t)v93;
                  v100[1] = (uint64_t)v93;
                  uint64_t v102 = *v93;
                  uint64_t *v100 = *v93;
                  if (v102) {
                    *(void *)(v102 + 8) = v100;
                  }
                  *int v93 = (uint64_t)v100;
                }
                v97 += 32;
              }
              while (v98 != v97);
            }
          }
          uint64_t v92 = (void *)*v92;
        }
        while (v92);
      }
    }
  }
  else
  {
LABEL_11:
    if (a4) {
      mlir::Operation::moveBefore(a2, a4);
    }
    else {
      mlir::Operation::moveBefore((uint64_t)a2, *(mlir::Block **)(a1 + 16), (uint64_t *)(*(void *)(a1 + 16) + 32));
    }
    uint64_t DefiningOp = (uint64_t)a2;
  }
  uint64_t v105 = a5;
  uint64_t v107 = (mlir::GenericProgramPoint *)DefiningOp;
  if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
  {
    uint64_t v18 = *(unsigned int *)(DefiningOp + 68);
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t v106 = *(void *)(DefiningOp + 72);
      do
      {
        if (DefiningOp != a5
          || (***(unsigned int (****)(void, uint64_t, uint64_t))(a1 + 208))(*(void *)(a1 + 208), a5, v19))
        {
          uint64_t v20 = v106 + 32 * v19;
          uint64_t v22 = *(mlir::DominanceInfo **)(v20 + 24);
          uint64_t v21 = (void *)(v20 + 24);
          unint64_t v111 = v22;
          v109[0] = 0;
          if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 128), (unint64_t *)&v111, v109))goto LABEL_28; {
          if (v109[0] == *(void *)(a1 + 128) + 16 * *(unsigned int *)(a1 + 144))
          }
            goto LABEL_28;
          unint64_t v23 = *(uint64_t **)(v109[0] + 8);
          if (!v23) {
            goto LABEL_28;
          }
          unint64_t v24 = (mlir::Block *)*((void *)v107 + 2);
          if (v24) {
            unint64_t v24 = (mlir::Block *)mlir::Block::getParentOp(v24);
          }
          if (v24 == *(mlir::Block **)(a1 + 200))
          {
            int v31 = (uint64_t *)(*((void *)v107 + 9) + 32 * v19);
            uint64_t v32 = (uint64_t *)v31[1];
            if (v32)
            {
              *uint64_t v32 = *v31;
              if (*v31) {
                *(void *)(*v31 + 8) = v31[1];
              }
            }
            v31[3] = (uint64_t)v23;
            v31[1] = (uint64_t)v23;
            uint64_t v33 = *v23;
            *int v31 = *v23;
            if (v33) {
              *(void *)(v33 + 8) = v31;
            }
            uint64_t *v23 = (uint64_t)v31;
          }
          else
          {
LABEL_28:
            v109[0] = *v21;
            if (mlir::Value::getDefiningOp((mlir::Value *)v109))
            {
              uint64_t v25 = *v21;
              uint64_t v27 = *(char **)a3;
              uint64_t v26 = *(char **)(a3 + 8);
              int v28 = *(char **)a3;
              if (*(char **)a3 != v26)
              {
                int v28 = *(char **)a3;
                do
                {
                  if (*(void *)v28 == v25) {
                    goto LABEL_18;
                  }
                  v28 += 8;
                }
                while (v28 != v26);
                int v28 = *(char **)(a3 + 8);
              }
LABEL_18:
              if (v28 == v26)
              {
                unint64_t v29 = *(void *)(a3 + 16);
                if ((unint64_t)v26 >= v29)
                {
                  int64_t v34 = v26 - v27;
                  uint64_t v35 = (v26 - v27) >> 3;
                  unint64_t v36 = v35 + 1;
                  if ((unint64_t)(v35 + 1) >> 61) {
LABEL_144:
                  }
                    abort();
                  uint64_t v37 = v29 - (void)v27;
                  if (v37 >> 2 > v36) {
                    unint64_t v36 = v37 >> 2;
                  }
                  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  unint64_t v104 = v36;
                  if (v36)
                  {
                    if (v36 >> 61) {
LABEL_145:
                    }
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    BOOL v38 = operator new(8 * v36);
                  }
                  else
                  {
                    BOOL v38 = 0;
                  }
                  BOOL v39 = &v38[8 * v35];
                  *BOOL v39 = v25;
                  uint64_t v30 = v39 + 1;
                  if (v27 != v26)
                  {
                    if ((unint64_t)(v34 - 8) < 0x58) {
                      goto LABEL_148;
                    }
                    if ((unint64_t)(v27 - v38) < 0x20) {
                      goto LABEL_148;
                    }
                    unint64_t v40 = ((unint64_t)(v34 - 8) >> 3) + 1;
                    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
                    uint64_t v42 = &v26[-v41];
                    BOOL v39 = (void *)((char *)v39 - v41);
                    uint64_t v43 = &v38[8 * v35 - 16];
                    uint64_t v44 = v26 - 16;
                    uint64_t v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v46 = *(_OWORD *)v44;
                      *(v43 - 1) = *((_OWORD *)v44 - 1);
                      _OWORD *v43 = v46;
                      v43 -= 2;
                      v44 -= 32;
                      v45 -= 4;
                    }
                    while (v45);
                    uint64_t v26 = v42;
                    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_148:
                      do
                      {
                        uint64_t v47 = *((void *)v26 - 1);
                        v26 -= 8;
                        *--BOOL v39 = v47;
                      }
                      while (v26 != v27);
                    }
                    uint64_t v27 = *(char **)a3;
                  }
                  a5 = v105;
                  *(void *)a3 = v39;
                  *(void *)(a3 + 8) = v30;
                  *(void *)(a3 + 16) = &v38[8 * v104];
                  if (v27) {
                    operator delete(v27);
                  }
                }
                else
                {
                  *(void *)uint64_t v26 = v25;
                  uint64_t v30 = v26 + 8;
                }
                *(void *)(a3 + 8) = v30;
              }
            }
          }
        }
        ++v19;
        uint64_t DefiningOp = (uint64_t)v107;
      }
      while (v19 != v18);
    }
  }
  uint64_t v48 = (mlir::Block *)*((void *)a2 + 2);
  if (v48) {
    mlir::Block::getParentOp(v48);
  }
  v109[0] = 0;
  v109[1] = 0;
  int v110 = 0;
  uint64_t v49 = *(char **)a3;
  uint64_t v50 = *(char **)(a3 + 8);
  unint64_t v111 = (mlir::DominanceInfo *)v109;
  if (v50 - v49 < 1025)
  {
LABEL_68:
  }
  else
  {
    uint64_t v51 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v52 = (v50 - v49) >> 3;
    while (1)
    {
      char v53 = (char *)operator new(8 * v52, v51);
      if (v53) {
        break;
      }
      BOOL v54 = v52 > 1;
      v52 >>= 1;
      if (!v54) {
        goto LABEL_68;
      }
    }
    unsigned int v55 = v53;
    operator delete(v55);
  }
  uint64_t v56 = *(void *)(a3 + 8);
  uint64_t v57 = v105;
  if (v56 == *(void *)a3) {
LABEL_121:
  }
    mlir::detail::DominanceInfoBase<false>::~DominanceInfoBase((uint64_t)v109);
  while (1)
  {
    uint64_t v108 = *(void *)(v56 - 8);
    *(void *)(a3 + 8) = v56 - 8;
    uint64_t v59 = mlir::Value::getDefiningOp((mlir::Value *)&v108);
    if (v59)
    {
      uint64_t v61 = v59;
      unint64_t v62 = *(mlir::Block **)(v59 + 16);
      if (v62) {
        unint64_t v62 = (mlir::Block *)mlir::Block::getParentOp(v62);
      }
      if (v62 == *(mlir::Block **)(a1 + 200)) {
        goto LABEL_74;
      }
      if (v61 == v57 || isStitchable)
      {
        if ((*(unsigned char *)(v61 + 46) & 0x80) != 0 && (uint64_t v73 = *(unsigned int *)(v61 + 68), v73))
        {
          int v74 = 0;
          unint64_t v75 = *(mlir::Block **)(a1 + 200);
          uint64_t v76 = (mlir::DominanceInfo **)(*(void *)(v61 + 72) + 24);
          do
          {
            unint64_t v111 = *v76;
            uint64_t v77 = mlir::Value::getDefiningOp((mlir::Value *)&v111);
            if (!v77) {
              goto LABEL_95;
            }
            uint64_t v78 = *(mlir::Block **)(v77 + 16);
            if (v78) {
              uint64_t v78 = (mlir::Block *)mlir::Block::getParentOp(v78);
            }
            if (v78 != v75) {
LABEL_95:
            }
              ++v74;
            v76 += 4;
            --v73;
          }
          while (v73);
        }
        else
        {
          int v74 = 0;
        }
        if (v74 <= 1) {
          int v79 = 1;
        }
        else {
          int v79 = v74;
        }
        int v80 = v79 + *(_DWORD *)(a1 + 216) - 1;
        if (v80 <= 21)
        {
          *(_DWORD *)(a1 + 216) = v80;
        }
        goto LABEL_74;
      }
    }
    std::__hash_table<mlir::Value,std::hash<mlir::Value>,std::equal_to<mlir::Value>,std::allocator<mlir::Value>>::__emplace_unique_key_args<mlir::Value,mlir::Value const&>(a1 + 56, &v108, &v108);
    if (v64) {
      break;
    }
LABEL_74:
    uint64_t v56 = *(void *)(a3 + 8);
    if (v56 == *(void *)a3) {
      goto LABEL_121;
    }
  }
  uint64_t v66 = *(char **)(a1 + 104);
  unint64_t v65 = *(void *)(a1 + 112);
  if ((unint64_t)v66 < v65)
  {
    *(void *)uint64_t v66 = v108;
    unint64_t v58 = v66 + 8;
LABEL_73:
    *(void *)(a1 + 104) = v58;
    goto LABEL_74;
  }
  unint64_t v67 = *(char **)(a1 + 96);
  uint64_t v68 = (v66 - v67) >> 3;
  unint64_t v69 = v68 + 1;
  if ((unint64_t)(v68 + 1) >> 61) {
    goto LABEL_144;
  }
  uint64_t v70 = v65 - (void)v67;
  if (v70 >> 2 > v69) {
    unint64_t v69 = v70 >> 2;
  }
  if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v71 = v69;
  }
  if (v71)
  {
    if (v71 >> 61) {
      goto LABEL_145;
    }
    uint64_t v72 = (char *)operator new(8 * v71);
  }
  else
  {
    uint64_t v72 = 0;
  }
  uint64_t v81 = &v72[8 * v68];
  *(void *)uint64_t v81 = v108;
  unint64_t v58 = v81 + 8;
  if (v66 == v67)
  {
    uint64_t v57 = v105;
    goto LABEL_119;
  }
  unint64_t v82 = v66 - v67 - 8;
  if (v82 >= 0x58)
  {
    uint64_t v57 = v105;
    if ((unint64_t)(v67 - v72) >= 0x20)
    {
      uint64_t v83 = (v82 >> 3) + 1;
      uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v85 = &v66[-v84];
      v81 -= v84;
      unint64_t v86 = &v72[8 * v68 - 16];
      int64x2_t v87 = (long long *)(v66 - 16);
      uint64_t v88 = v83 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v89 = *v87;
        *((_OWORD *)v86 - 1) = *(v87 - 1);
        *(_OWORD *)unint64_t v86 = v89;
        v86 -= 32;
        v87 -= 2;
        v88 -= 4;
      }
      while (v88);
      uint64_t v66 = v85;
      if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_118;
      }
    }
  }
  else
  {
    uint64_t v57 = v105;
  }
  do
  {
    uint64_t v90 = *((void *)v66 - 1);
    v66 -= 8;
    *((void *)v81 - 1) = v90;
    v81 -= 8;
  }
  while (v66 != v67);
LABEL_118:
  uint64_t v66 = *(char **)(a1 + 96);
LABEL_119:
  *(void *)(a1 + 96) = v81;
  *(void *)(a1 + 104) = v58;
  *(void *)(a1 + 112) = &v72[8 * v71];
  if (v66) {
    operator delete(v66);
  }
  goto LABEL_73;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,mlir::mps::anonymous namespace'::StitchedRegion::recursePrefixes(mlir::Operation *,std::vector<mlir::Value> &,mlir::Operation *,mlir::Operation *)::$_0 &,std::__wrap_iter<mlir::Value*>>(char *a1, char *a2, mlir::DominanceInfo **a3, unint64_t a4, char *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    char v8 = (__n128 *)a1;
    if (a4 == 2)
    {
      unint64_t v9 = *((void *)a2 - 1);
      uint64_t v65 = *(void *)a1;
      unint64_t v66 = v9;
      uint64_t DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
      unint64_t v11 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
      if (mlir::DominanceInfo::properlyDominatesImpl(*a3, DefiningOp, v11, 1))
      {
        unint64_t v13 = v8->n128_u64[0];
        v8->n128_u64[0] = *((void *)a2 - 1);
        *((void *)a2 - 1) = v13;
      }
      return result;
    }
    if ((uint64_t)a4 > 128)
    {
      unint64_t v29 = a4 >> 1;
      uint64_t v30 = &a1[8 * (a4 >> 1)];
      unint64_t v31 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        uint64_t v32 = &a5[8 * v29];
        uint64_t v33 = v32;
        int64_t v34 = a5;
        uint64_t v35 = v8;
        unint64_t v36 = &a5[8 * a4];
        do
        {
          if (v33 == v36)
          {
            if (v34 == v32) {
              return result;
            }
            unint64_t v55 = &a5[8 * (a4 >> 1)] - v34 - 8;
            if (v55 >= 0x38 && (unint64_t)((char *)v8 - v34) >= 0x20)
            {
              uint64_t v59 = 0;
              uint64_t v60 = (v55 >> 3) + 1;
              uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v56 = &v34[v61];
              uint64_t v57 = (__n128 *)((char *)v35 + v61);
              uint64_t v62 = v60 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                unint64_t v63 = &v35[v59];
                __n128 result = *(__n128 *)&v34[v59 * 16];
                __n128 v64 = *(__n128 *)&v34[v59 * 16 + 16];
                *unint64_t v63 = result;
                v63[1] = v64;
                v59 += 2;
                v62 -= 4;
              }
              while (v62);
              if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL)) {
                return result;
              }
            }
            else
            {
              uint64_t v56 = v34;
              uint64_t v57 = v35;
            }
            do
            {
              unint64_t v58 = *(void *)v56;
              v56 += 8;
              v57->n128_u64[0] = v58;
              uint64_t v57 = (__n128 *)((char *)v57 + 8);
            }
            while (v56 != v32);
            return result;
          }
          uint64_t v37 = v33;
          unint64_t v38 = *(void *)v33;
          uint64_t v65 = *(void *)v34;
          unint64_t v66 = v38;
          BOOL v39 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
          unint64_t v40 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
          int v41 = mlir::DominanceInfo::properlyDominatesImpl(*a3, v39, v40, 1);
          if (v41) {
            uint64_t v42 = v37;
          }
          else {
            uint64_t v42 = v34;
          }
          v34 += 8 * (v41 ^ 1u);
          uint64_t v33 = &v37[8 * v41];
          v35->n128_u64[0] = *(void *)v42;
          uint64_t v35 = (__n128 *)((char *)v35 + 8);
          char v8 = (__n128 *)((char *)v8 + 8);
        }
        while (v34 != v32);
        if (v33 != v36)
        {
          uint64_t v43 = -8;
          if (!v41) {
            uint64_t v43 = 0;
          }
          unint64_t v44 = &a5[8 * a4] - v37 + v43 - 8;
          if (v44 < 0x68) {
            goto LABEL_50;
          }
          uint64_t v45 = 8;
          if (!v41) {
            uint64_t v45 = 0;
          }
          if ((unint64_t)((char *)v8 - v37 - v45) < 0x20) {
            goto LABEL_50;
          }
          uint64_t v46 = 0;
          uint64_t v47 = (v44 >> 3) + 1;
          uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v49 = &v33[v48];
          uint64_t v50 = (__n128 *)((char *)v35 + v48);
          uint64_t v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            unint64_t v52 = &v35[v46];
            __n128 result = *(__n128 *)&v33[v46 * 16];
            __n128 v53 = *(__n128 *)&v33[v46 * 16 + 16];
            __n128 *v52 = result;
            v52[1] = v53;
            v46 += 2;
            v51 -= 4;
          }
          while (v51);
          uint64_t v33 = v49;
          uint64_t v35 = v50;
          if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_50:
            do
            {
              unint64_t v54 = *(void *)v33;
              v33 += 8;
              v35->n128_u64[0] = v54;
              uint64_t v35 = (__n128 *)((char *)v35 + 8);
            }
            while (v33 != v36);
          }
        }
      }
      else
      {
      }
    }
    else if (a1 != a2)
    {
      uint64_t v15 = a1 + 8;
      if (a1 + 8 != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = a1;
        do
        {
          uint64_t v19 = *(void *)v17;
          uint64_t v17 = v15;
          unint64_t v20 = *(void *)v15;
          uint64_t v65 = v19;
          unint64_t v66 = v20;
          uint64_t v21 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
          uint64_t v22 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
          if (mlir::DominanceInfo::properlyDominatesImpl(*a3, v21, v22, 1))
          {
            unint64_t v23 = *(void *)v17;
            uint64_t v24 = v16;
            do
            {
              *(unint64_t *)((char *)&v8->n128_u64[1] + v24) = *(unint64_t *)((char *)v8->n128_u64 + v24);
              if (!v24)
              {
                uint64_t v18 = v8;
                goto LABEL_10;
              }
              uint64_t v65 = *(uint64_t *)((char *)&v8->n128_i64[-1] + v24);
              unint64_t v66 = v23;
              uint64_t v25 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
              uint64_t v26 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
              v24 -= 8;
            }
            while ((mlir::DominanceInfo::properlyDominatesImpl(*a3, v25, v26, 1) & 1) != 0);
            uint64_t v18 = (__n128 *)&v8->n128_i8[v24 + 8];
LABEL_10:
            v18->n128_u64[0] = v23;
          }
          uint64_t v15 = v17 + 8;
          v16 += 8;
        }
        while (v17 + 8 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::mps::anonymous namespace'::StitchedRegion::recursePrefixes(mlir::Operation *,std::vector<mlir::Value> &,mlir::Operation *,mlir::Operation *)::$_0 &,std::__wrap_iter<mlir::Value*>>(char *a1, char *a2, mlir::DominanceInfo **a3, unint64_t a4, char *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v7 = a1;
    if (a4 == 1)
    {
LABEL_9:
      *(void *)uint64_t v5 = *(void *)v7;
      return result;
    }
    if (a4 == 2)
    {
      unint64_t v11 = a2 - 8;
      uint64_t v10 = *((void *)a2 - 1);
      uint64_t v65 = *(void *)a1;
      uint64_t v66 = v10;
      uint64_t DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
      unint64_t v13 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
      int v14 = mlir::DominanceInfo::properlyDominatesImpl(*a3, DefiningOp, v13, 1);
      if (v14) {
        uint64_t v16 = v11;
      }
      else {
        uint64_t v16 = v7;
      }
      *(void *)uint64_t v5 = *(void *)v16;
      v5 += 8;
      if (!v14) {
        uint64_t v7 = v11;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v31 = a4 >> 1;
      uint64_t v32 = 8 * (a4 >> 1);
      uint64_t v33 = &a1[v32];
      int64_t v34 = v5;
      uint64_t v35 = v7;
      unint64_t v36 = v33;
      do
      {
        if (v36 == a2)
        {
          if (v35 == v33) {
            return result;
          }
          unint64_t v55 = &v7[8 * v31] - v35 - 8;
          if (v55 >= 0x38 && (unint64_t)(v34 - v35) >= 0x20)
          {
            uint64_t v59 = 0;
            uint64_t v60 = (v55 >> 3) + 1;
            uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v56 = &v5[v61];
            uint64_t v57 = &v35[v61];
            uint64_t v62 = v60 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              unint64_t v63 = &v5[v59];
              __n128 result = *(__n128 *)&v35[v59];
              long long v64 = *(_OWORD *)&v35[v59 + 16];
              *(__n128 *)unint64_t v63 = result;
              *((_OWORD *)v63 + 1) = v64;
              v59 += 32;
              v62 -= 4;
            }
            while (v62);
            if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL)) {
              return result;
            }
          }
          else
          {
            uint64_t v56 = v5;
            uint64_t v57 = v35;
          }
          do
          {
            uint64_t v58 = *(void *)v57;
            v57 += 8;
            *(void *)uint64_t v56 = v58;
            v56 += 8;
          }
          while (v57 != v33);
          return result;
        }
        uint64_t v37 = v36;
        uint64_t v38 = *(void *)v36;
        uint64_t v65 = *(void *)v35;
        uint64_t v66 = v38;
        BOOL v39 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
        unint64_t v40 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
        int v41 = mlir::DominanceInfo::properlyDominatesImpl(*a3, v39, v40, 1);
        if (v41) {
          uint64_t v42 = v37;
        }
        else {
          uint64_t v42 = v35;
        }
        unint64_t v36 = &v37[8 * v41];
        v35 += 8 * (v41 ^ 1u);
        *(void *)uint64_t v5 = *(void *)v42;
        v5 += 8;
        v34 += 8;
      }
      while (v35 != v33);
      if (v36 != a2)
      {
        uint64_t v43 = -8;
        if (!v41) {
          uint64_t v43 = 0;
        }
        unint64_t v44 = a2 - v37 + v43 - 8;
        if (v44 < 0x68) {
          goto LABEL_51;
        }
        uint64_t v45 = 8;
        if (!v41) {
          uint64_t v45 = 0;
        }
        if ((unint64_t)(v34 - &v37[v45]) < 0x20) {
          goto LABEL_51;
        }
        uint64_t v46 = 0;
        uint64_t v47 = (v44 >> 3) + 1;
        uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v49 = &v5[v48];
        uint64_t v50 = &v36[v48];
        uint64_t v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          unint64_t v52 = &v5[v46];
          __n128 result = *(__n128 *)&v36[v46];
          long long v53 = *(_OWORD *)&v36[v46 + 16];
          *(__n128 *)unint64_t v52 = result;
          *((_OWORD *)v52 + 1) = v53;
          v46 += 32;
          v51 -= 4;
        }
        while (v51);
        uint64_t v5 = v49;
        unint64_t v36 = v50;
        if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          do
          {
            uint64_t v54 = *(void *)v36;
            v36 += 8;
            *(void *)uint64_t v5 = v54;
            v5 += 8;
          }
          while (v36 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      uint64_t v17 = a1 + 8;
      *(void *)a5 = *(void *)a1;
      if (a1 + 8 != a2)
      {
        uint64_t v18 = 0;
        uint64_t v19 = (uint64_t *)a5;
        do
        {
          uint64_t v21 = (char *)v19;
          uint64_t v22 = *v19++;
          uint64_t v23 = *(void *)v17;
          uint64_t v65 = v22;
          uint64_t v66 = v23;
          uint64_t v24 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
          uint64_t v25 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
          uint64_t v26 = (char *)v19;
          if (mlir::DominanceInfo::properlyDominatesImpl(*a3, v24, v25, 1))
          {
            *((void *)v21 + 1) = *(void *)v21;
            uint64_t v26 = v5;
            if (v21 != v5)
            {
              uint64_t v27 = v18;
              while (1)
              {
                uint64_t v26 = &v5[v27];
                uint64_t v28 = *(void *)v17;
                uint64_t v65 = *(void *)&v5[v27 - 8];
                uint64_t v66 = v28;
                unint64_t v29 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
                uint64_t v30 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
                if (!mlir::DominanceInfo::properlyDominatesImpl(*a3, v29, v30, 1)) {
                  break;
                }
                *(void *)uint64_t v26 = *((void *)v26 - 1);
                v27 -= 8;
                if (!v27)
                {
                  uint64_t v26 = v5;
                  break;
                }
              }
            }
          }
          uint64_t v20 = *(void *)v17;
          v17 += 8;
          *(void *)uint64_t v26 = v20;
          v18 += 8;
        }
        while (v17 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,mlir::mps::anonymous namespace'::StitchedRegion::recursePrefixes(mlir::Operation *,std::vector<mlir::Value> &,mlir::Operation *,mlir::Operation *)::$_0 &,std::__wrap_iter<mlir::Value*>>(__n128 *a1, char *a2, char *a3, mlir::DominanceInfo **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v110 = a6;
  if (!a6) {
    return result;
  }
  while (v110 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    unint64_t v15 = 0;
    uint64_t v16 = -a5;
    while (1)
    {
      uint64_t v17 = *(void *)a2;
      uint64_t v111 = a1->n128_i64[v15 / 8];
      uint64_t v112 = v17;
      uint64_t DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v112);
      uint64_t v19 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v111);
      if (mlir::DominanceInfo::properlyDominatesImpl(*a4, DefiningOp, v19, 1)) {
        break;
      }
      v15 += 8;
      if (__CFADD__(v16++, 1)) {
        return result;
      }
    }
    uint64_t v22 = -v16;
    uint64_t v105 = (char *)a1 + v15;
    uint64_t v106 = a8;
    uint64_t v23 = v110;
    uint64_t v107 = a7;
    uint64_t v108 = (char *)a1;
    unint64_t v109 = a4;
    if (-v16 >= v110)
    {
      if (v16 == -1)
      {
        uint64_t v84 = a1->n128_i64[v15 / 8];
        a1->n128_u64[v15 / 8] = *(void *)a2;
        *(void *)a2 = v84;
        return result;
      }
      if (v16 > 0) {
        uint64_t v22 = 1 - v16;
      }
      uint64_t v37 = v22 >> 1;
      uint64_t v28 = &a1->n128_i8[8 * (v22 >> 1) + v15];
      uint64_t v26 = a2;
      if (a2 != a3)
      {
        uint64_t v103 = v22 >> 1;
        uint64_t v38 = *v109;
        unint64_t v39 = (a3 - a2) >> 3;
        uint64_t v26 = a2;
        do
        {
          unint64_t v40 = &v26[8 * (v39 >> 1)];
          uint64_t v42 = *(void *)v40;
          int v41 = v40 + 8;
          uint64_t v111 = *(void *)v28;
          uint64_t v112 = v42;
          uint64_t v43 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v112);
          unint64_t v44 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v111);
          int v45 = mlir::DominanceInfo::properlyDominatesImpl(v38, v43, v44, 1);
          if (v45) {
            v39 += ~(v39 >> 1);
          }
          else {
            v39 >>= 1;
          }
          if (v45) {
            uint64_t v26 = v41;
          }
        }
        while (v39);
        uint64_t v37 = v103;
        uint64_t v23 = v110;
      }
      uint64_t v25 = (v26 - a2) >> 3;
    }
    else
    {
      if (v110 >= 0) {
        uint64_t v24 = v110;
      }
      else {
        uint64_t v24 = v110 + 1;
      }
      uint64_t v25 = v24 >> 1;
      uint64_t v26 = &a2[8 * (v24 >> 1)];
      int64_t v27 = a2 - (char *)a1;
      uint64_t v28 = a2;
      uint64_t v29 = v27 - v15;
      if (v29)
      {
        uint64_t v102 = v25;
        unint64_t v104 = a3;
        unint64_t v30 = v29 >> 3;
        uint64_t v28 = v105;
        do
        {
          unint64_t v31 = &v28[8 * (v30 >> 1)];
          uint64_t v32 = *(void *)v26;
          uint64_t v34 = *(void *)v31;
          uint64_t v33 = v31 + 8;
          uint64_t v111 = v34;
          uint64_t v112 = v32;
          uint64_t v35 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v112);
          unint64_t v36 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v111);
          if (mlir::DominanceInfo::properlyDominatesImpl(*v109, v35, v36, 1))
          {
            v30 >>= 1;
          }
          else
          {
            uint64_t v28 = v33;
            v30 += ~(v30 >> 1);
          }
        }
        while (v30);
        uint64_t v25 = v102;
        a3 = v104;
        uint64_t v23 = v110;
      }
      uint64_t v37 = (uint64_t)(v28 - v108 - v15) >> 3;
    }
    a5 = -(v37 + v16);
    uint64_t v46 = v23 - v25;
    uint64_t v47 = a2;
    uint64_t v48 = v23;
    uint64_t v49 = v37;
    uint64_t v50 = v25;
    uint64_t v51 = std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<mlir::Value *>,std::__wrap_iter<mlir::Value *>>(v28, v47, v26);
    uint64_t v52 = v49;
    long long v53 = v51;
    if (v52 + v50 >= v48 - (v52 + v50) - v16)
    {
      unint64_t v55 = v26;
      uint64_t v56 = a3;
      a4 = v109;
      uint64_t v57 = v52;
      uint64_t v58 = v50;
      a7 = v107;
      a2 = v28;
      a5 = v57;
      a3 = v53;
      a8 = v106;
      a1 = (__n128 *)v105;
      uint64_t v110 = v58;
      if (!v58) {
        return result;
      }
    }
    else
    {
      uint64_t v54 = v50;
      a7 = v107;
      a1 = (__n128 *)v53;
      a8 = v106;
      a2 = v26;
      a4 = v109;
      uint64_t v110 = v46;
      if (!v46) {
        return result;
      }
    }
  }
  if (a5 <= v110)
  {
    if (a1 != (__n128 *)a2)
    {
      unint64_t v69 = a2 - (char *)a1 - 8;
      uint64_t v70 = a7;
      unint64_t v71 = (char *)a1;
      if (v69 < 0x18) {
        goto LABEL_88;
      }
      uint64_t v70 = a7;
      unint64_t v71 = (char *)a1;
      if ((unint64_t)(a7 - (char *)a1) < 0x20) {
        goto LABEL_88;
      }
      uint64_t v72 = (v69 >> 3) + 1;
      uint64_t v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v70 = &a7[v73];
      unint64_t v71 = (char *)a1 + v73;
      int v74 = a1 + 1;
      unint64_t v75 = (__n128 *)(a7 + 16);
      uint64_t v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __n128 result = v74[-1];
        __n128 v77 = *v74;
        v75[-1] = result;
        *unint64_t v75 = v77;
        v74 += 2;
        v75 += 2;
        v76 -= 4;
      }
      while (v76);
      if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_88:
        do
        {
          uint64_t v78 = *(void *)v71;
          v71 += 8;
          *(void *)uint64_t v70 = v78;
          v70 += 8;
        }
        while (v71 != a2);
      }
      if (v70 != a7)
      {
        while (a2 != a3)
        {
          uint64_t v79 = *(void *)a2;
          uint64_t v111 = *(void *)a7;
          uint64_t v112 = v79;
          int v80 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v112);
          uint64_t v81 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v111);
          unsigned int v82 = mlir::DominanceInfo::properlyDominatesImpl(*a4, v80, v81, 1);
          if (v82) {
            uint64_t v83 = a2;
          }
          else {
            uint64_t v83 = a7;
          }
          a2 += 8 * v82;
          a7 += 8 * (v82 ^ 1);
          a1->n128_u64[0] = *(void *)v83;
          a1 = (__n128 *)((char *)a1 + 8);
          if (a7 == v70) {
            return result;
          }
        }
        memmove(a1, a7, v70 - a7);
      }
    }
    return result;
  }
  int64_t v59 = a3 - a2;
  if (a3 == a2) {
    return result;
  }
  unint64_t v60 = v59 - 8;
  if ((unint64_t)(v59 - 8) < 0x18)
  {
    uint64_t v61 = a7;
    uint64_t v62 = a2;
  }
  else
  {
    uint64_t v61 = a7;
    uint64_t v62 = a2;
    if ((unint64_t)(a7 - a2) >= 0x20)
    {
      uint64_t v63 = (v60 >> 3) + 1;
      uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v61 = &a7[v64];
      uint64_t v62 = &a2[v64];
      uint64_t v65 = (__n128 *)(a2 + 16);
      uint64_t v66 = (__n128 *)(a7 + 16);
      uint64_t v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __n128 result = v65[-1];
        __n128 v68 = *v65;
        v66[-1] = result;
        *uint64_t v66 = v68;
        v65 += 2;
        v66 += 2;
        v67 -= 4;
      }
      while (v67);
      if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_66;
      }
    }
  }
  do
  {
    uint64_t v85 = *(void *)v62;
    v62 += 8;
    *(void *)uint64_t v61 = v85;
    v61 += 8;
  }
  while (v62 != a3);
LABEL_66:
  if (v61 == a7) {
    return result;
  }
  unint64_t v86 = a3;
  while (a2 != (char *)a1)
  {
    uint64_t v87 = *((void *)v61 - 1);
    uint64_t v111 = *((void *)a2 - 1);
    uint64_t v112 = v87;
    uint64_t v88 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v112);
    long long v89 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v111);
    int v90 = mlir::DominanceInfo::properlyDominatesImpl(*a4, v88, v89, 1);
    if (v90) {
      uint64_t v91 = a2;
    }
    else {
      uint64_t v91 = v61;
    }
    if (v90) {
      a2 -= 8;
    }
    else {
      v61 -= 8;
    }
    *((void *)a3 - 1) = *((void *)v91 - 1);
    a3 -= 8;
    v86 -= 8;
    if (v61 == a7) {
      return result;
    }
  }
  unint64_t v92 = v61 - a7 - 8;
  if (v92 < 0x58 || (unint64_t)(v61 - v86) < 0x20)
  {
    int v93 = v61;
    uint64_t v94 = a3;
LABEL_80:
    uint64_t v95 = v94 - 8;
    do
    {
      uint64_t v96 = *((void *)v93 - 1);
      v93 -= 8;
      *(void *)uint64_t v95 = v96;
      v95 -= 8;
    }
    while (v93 != a7);
    return result;
  }
  uint64_t v97 = 0;
  uint64_t v98 = (v92 >> 3) + 1;
  uint64_t v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
  int v93 = &v61[-v99];
  uint64_t v94 = &a3[-v99];
  uint64_t v100 = v98 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    __n128 result = *(__n128 *)&v61[v97 - 16];
    uint64_t v101 = &a3[v97];
    *((_OWORD *)v101 - 2) = *(_OWORD *)&v61[v97 - 32];
    *((__n128 *)v101 - 1) = result;
    v97 -= 32;
    v100 -= 4;
  }
  while (v100);
  if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_80;
  }
  return result;
}

char *std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<mlir::Value *>,std::__wrap_iter<mlir::Value *>>(char *__src, char *a2, char *a3)
{
  unint64_t v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      uint64_t v12 = *(void *)__src;
      int64_t v13 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      unint64_t v4 = &__src[v13];
      *(void *)unint64_t v4 = v12;
    }
    else if (a2 + 8 == a3)
    {
      uint64_t v14 = *((void *)a3 - 1);
      unint64_t v4 = __src + 8;
      size_t v15 = a3 - 8 - __src;
      if (a3 - 8 != __src) {
        memmove(__src + 8, __src, v15);
      }
      *(void *)__src = v14;
    }
    else
    {
      uint64_t v6 = (a2 - __src) >> 3;
      uint64_t v7 = (a3 - a2) >> 3;
      if (v6 == v7)
      {
        char v8 = __src + 8;
        unint64_t v9 = a2 + 8;
        do
        {
          uint64_t v10 = *((void *)v8 - 1);
          *((void *)v8 - 1) = *((void *)v9 - 1);
          *((void *)v9 - 1) = v10;
          if (v8 == a2) {
            break;
          }
          v8 += 8;
          BOOL v11 = v9 == a3;
          v9 += 8;
        }
        while (!v11);
        return a2;
      }
      else
      {
        uint64_t v16 = (a3 - a2) >> 3;
        uint64_t v17 = (a2 - __src) >> 3;
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = v16;
          uint64_t v16 = v18 % v16;
        }
        while (v16);
        if (v17)
        {
          uint64_t v19 = &__src[8 * v17];
          do
          {
            uint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            uint64_t v20 = v21;
            uint64_t v22 = &v19[8 * v6];
            uint64_t v23 = v19;
            do
            {
              uint64_t v24 = v22;
              *(void *)uint64_t v23 = *(void *)v22;
              uint64_t v25 = (a3 - v22) >> 3;
              BOOL v26 = __OFSUB__(v6, v25);
              uint64_t v28 = v6 - v25;
              char v27 = (v28 < 0) ^ v26;
              uint64_t v22 = &__src[8 * v28];
              if (v27) {
                uint64_t v22 = &v24[8 * v6];
              }
              uint64_t v23 = v24;
            }
            while (v22 != v19);
            *(void *)uint64_t v24 = v20;
          }
          while (v19 != __src);
        }
        return &__src[8 * v7];
      }
    }
  }
  return v4;
}

void *std::__hash_table<mlir::Value,std::hash<mlir::Value>,std::equal_to<mlir::Value>,std::allocator<mlir::Value>>::__emplace_unique_key_args<mlir::Value,mlir::Value const&>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = HIDWORD(*a2);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    BOOL v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_41;
    }
    if (prime < v9)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v9) {
LABEL_41:
      }
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *uint64_t i = *v24;
LABEL_55:
    *uint64_t v24 = i;
    goto LABEL_56;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return i;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mps::anonymous namespace'::StitchedRegion::StitchedRegion(mlir::mps::StitchingPass *,mlir::OpBuilder &,mlir::Operation *,mlir::mps::BaseFusableCoreOps *,BOOL)::$_0>(unsigned char **a1, mlir::mps::_anonymous_namespace_ *this, mlir::Operation *a3)
{
  if ((result & 1) == 0) {
    **a1 = 1;
  }
  return result;
}

uint64_t mlir::mps::StitchingPass::StitchingPass(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = &mlir::mps::MPSStitchingBase<mlir::mps::StitchingPass>::resolveTypeID(void)::id;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x400000000;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x1000000000;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  *(void *)a1 = &unk_1EC9CA598;
  *(_OWORD *)(a1 + 344) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (!*(void *)(a1 + 344))
  {
    unint64_t v4 = operator new(0x20uLL);
    v4[1] = 0;
    v4[2] = 0;
    void *v4 = &unk_1EC9D0050;
    v4[3] = &unk_1EC9CA888;
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 352);
    *(void *)(a1 + 344) = v4 + 3;
    *(void *)(a1 + 352) = v4;
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<mlir::mps::DefaultFusableCoreOps>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9D0050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::mps::DefaultFusableCoreOps>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9D0050;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<mlir::mps::DefaultFusableCoreOps>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

BOOL mlir::mps::DefaultFusableCoreOps::isCoreOperandStitchable(mlir::mps::DefaultFusableCoreOps *this, mlir::Operation *a2, int a3)
{
  unint64_t v3 = *(void **)(*((void *)a2 + 6) + 16);
  return v3 != &mlir::detail::TypeIDResolver<mlir::mps::ReductionSumOp,void>::id
      && v3 != &mlir::detail::TypeIDResolver<mlir::mps::ReductionMaxOp,void>::id
      || a3 < 1;
}

uint64_t mlir::mps::DefaultFusableCoreOps::isCorePostfixStitchable(mlir::mps::DefaultFusableCoreOps *this, mlir::Operation *a2)
{
  return 1;
}

uint64_t mlir::mps::anonymous namespace'::TypeInferencePass::inferTypes(mlir::mps::_anonymous_namespace_::TypeInferencePass *this, mlir::Operation *a2)
{
  v136[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>>();
  if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 6) + 32))(*((void *)this + 6), v3))
  {
    long long v130 = 0uLL;
    if ((*((unsigned char *)this + 46) & 0x80) != 0)
    {
      uint64_t v4 = *((void *)this + 9);
      uint64_t v5 = *((unsigned int *)this + 17);
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    *(void *)&long long v135 = v4;
    *((void *)&v135 + 1) = v5;
    mlir::OperandRange::getTypes((uint64_t *)&v135, (uint64_t *)&v133);
    unint64_t v7 = *((void *)&v133 + 1);
    unint64_t v6 = v133;
    long long v8 = v134[0];
    if (v133 != v134[0])
    {
      do
      {
        unint64_t v9 = (uint64_t *)(*(void *)(*(void *)(v6 + 32 * v7 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v9) {
          goto LABEL_14;
        }
        uint64_t v10 = *v9;
        unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v12 = *(unsigned int *)(v10 + 16);
        if (!v12) {
          goto LABEL_14;
        }
        unint64_t v13 = *(void **)(v10 + 8);
        float v14 = &v13[2 * v12];
        do
        {
          unint64_t v15 = v12 >> 1;
          BOOL v16 = &v13[2 * (v12 >> 1)];
          unint64_t v18 = *v16;
          unint64_t v17 = v16 + 2;
          v12 += ~(v12 >> 1);
          if (v18 < v11) {
            unint64_t v13 = v17;
          }
          else {
            unint64_t v12 = v15;
          }
        }
        while (v12);
        if (v13 != v14 && *v13 == v11) {
          uint64_t v19 = v13[1];
        }
        else {
LABEL_14:
        }
          uint64_t v19 = 0;
        *(void *)&long long v135 = v9;
        *((void *)&v135 + 1) = v19;
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v135))
        {
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v135);
          if (!v21)
          {
LABEL_43:
            long long v130 = v135;
            break;
          }
          uint64_t v22 = 8 * v21;
          while (*ArgAttrsAttr != 0x8000000000000000)
          {
            ++ArgAttrsAttr;
            v22 -= 8;
            if (!v22) {
              goto LABEL_43;
            }
          }
        }
        if (!(void)v130
          || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v130) & 1) == 0
          && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v135))
        {
          long long v130 = v135;
        }
        ++v7;
      }
      while (__PAIR128__(v7, v6) != v8);
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v130)) {
      goto LABEL_90;
    }
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v130))
    {
      uint64_t v43 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v130);
      if (!v44) {
        goto LABEL_90;
      }
      uint64_t v45 = 8 * v44;
      while (*v43 != 0x8000000000000000)
      {
        ++v43;
        v45 -= 8;
        if (!v45) {
          goto LABEL_90;
        }
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v130);
    unint64_t v56 = v55;
    uint64_t v122 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v130);
    uint64_t v58 = v57;
    *(void *)&long long v135 = v136;
    *((void *)&v135 + 1) = 0x400000000;
    if (!v56) {
      goto LABEL_72;
    }
    if (v56 < 5)
    {
      uint64_t v59 = 0;
      unint64_t v60 = v56;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v136, v56, 8);
      uint64_t v59 = DWORD2(v135);
      unint64_t v60 = v56 - DWORD2(v135);
      if (v56 == DWORD2(v135)) {
        goto LABEL_71;
      }
    }
    bzero((void *)(v135 + 8 * v59), 8 * v60);
LABEL_71:
    DWORD2(v135) = v56;
LABEL_72:
    if ((*((unsigned char *)this + 46) & 0x80) != 0)
    {
      uint64_t v62 = *((void *)this + 9);
      uint64_t v63 = *((unsigned int *)this + 17);
    }
    else
    {
      uint64_t v62 = 0;
      uint64_t v63 = 0;
    }
    *(void *)&long long v133 = v62;
    *((void *)&v133 + 1) = v63;
    mlir::OperandRange::getTypes((uint64_t *)&v133, &v126);
    uint64_t v64 = v126;
    uint64_t v65 = v127;
    uint64_t v66 = v128;
    uint64_t v67 = v129;
    if (v126 == v128 && v127 == v129)
    {
LABEL_76:
      uint64_t v68 = v135;
      uint64_t v69 = DWORD2(v135);
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v130);
      unint64_t v71 = (uint64_t *)mlir::RankedTensorType::get(v68, v69, OperandRange, 0);
      uint64_t v41 = (uint64_t)v71;
      if (!v71) {
        goto LABEL_85;
      }
      uint64_t v72 = *v71;
      unint64_t v73 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v74 = *(unsigned int *)(v72 + 16);
      if (!v74) {
        goto LABEL_85;
      }
      unint64_t v75 = *(void **)(v72 + 8);
      uint64_t v76 = &v75[2 * v74];
      do
      {
        unint64_t v77 = v74 >> 1;
        uint64_t v78 = &v75[2 * (v74 >> 1)];
        unint64_t v80 = *v78;
        uint64_t v79 = v78 + 2;
        v74 += ~(v74 >> 1);
        if (v80 < v73) {
          unint64_t v75 = v79;
        }
        else {
          unint64_t v74 = v77;
        }
      }
      while (v74);
      if (v75 != v76 && *v75 == v73) {
        uint64_t v81 = v75[1];
      }
      else {
LABEL_85:
      }
        uint64_t v81 = 0;
      *(void *)&long long v130 = v41;
      *((void *)&v130 + 1) = v81;
      int v82 = 1;
      goto LABEL_87;
    }
    int64x2_t v121 = vdupq_n_s64(0x8000000000000000);
    while (1)
    {
      uint64_t v87 = (uint64_t *)(*(void *)(*(void *)(v64 + 32 * v65 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v87) {
        goto LABEL_108;
      }
      uint64_t v88 = *v87;
      unint64_t v89 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v90 = *(unsigned int *)(v88 + 16);
      if (!v90) {
        goto LABEL_108;
      }
      uint64_t v91 = *(void **)(v88 + 8);
      unint64_t v92 = &v91[2 * v90];
      do
      {
        unint64_t v93 = v90 >> 1;
        uint64_t v94 = &v91[2 * (v90 >> 1)];
        unint64_t v96 = *v94;
        uint64_t v95 = v94 + 2;
        v90 += ~(v90 >> 1);
        if (v96 < v89) {
          uint64_t v91 = v95;
        }
        else {
          unint64_t v90 = v93;
        }
      }
      while (v90);
      if (v91 != v92 && *v91 == v89) {
        uint64_t v97 = v91[1];
      }
      else {
LABEL_108:
      }
        uint64_t v97 = 0;
      v125[0] = v87;
      v125[1] = v97;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v125))
      {
        uint64_t v98 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v125);
        if (v58 != v99)
        {
          v123[0] = (const void **)"input shapes are incompatible";
          __int16 v124 = 259;
          mlir::Operation::emitOpError((uint64_t *)this, v123, (uint64_t)&v133);
          uint64_t v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v133);
          if ((void)v133) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v133);
          }
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v133 + 8);
          int v82 = 0;
LABEL_87:
          if ((void *)v135 != v136) {
            free((void *)v135);
          }
          if (v82)
          {
LABEL_90:
            uint64_t v83 = *((unsigned int *)this + 9);
            if (v83) {
              uint64_t v84 = (char *)this - 16;
            }
            else {
              uint64_t v84 = 0;
            }
            if (v83)
            {
              for (uint64_t i = 0; i != v83; ++i)
              {
                NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v84, i);
                *(void *)(NextResultAtOffset + 8) = *(void *)(NextResultAtOffset + 8) & 7 | v130;
              }
            }
            return 1;
          }
          return v41;
        }
        if (v56)
        {
          uint64_t v100 = v135;
          if (v56 < 6)
          {
            unint64_t v101 = 0;
LABEL_119:
            unint64_t v107 = v56 - v101;
            uint64_t v108 = 8 * v101;
            unint64_t v109 = (uint64_t *)(v122 + 8 * v101);
            uint64_t v110 = (uint64_t *)(v98 + v108);
            uint64_t v111 = (void *)(v100 + v108);
            do
            {
              uint64_t v113 = *v109++;
              uint64_t v112 = v113;
              uint64_t v115 = *v110++;
              uint64_t v114 = v115;
              if (v115 != 0x8000000000000000 && v112 == 0x8000000000000000) {
                uint64_t v112 = v114;
              }
              *v111++ = v112;
              --v107;
            }
            while (v107);
            goto LABEL_127;
          }
          unint64_t v101 = 0;
          if ((unint64_t)(v135 - v122) < 0x20) {
            goto LABEL_119;
          }
          if ((unint64_t)(v135 - v98) < 0x20) {
            goto LABEL_119;
          }
          uint64_t v102 = (int64x2_t *)(v98 + 16);
          uint64_t v103 = (int8x16_t *)(v135 + 16);
          unint64_t v104 = v56 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v105 = (int64x2_t *)(v122 + 16);
          do
          {
            int8x16_t v106 = vbslq_s8(vornq_s8((int8x16_t)vceqq_s64(*v102, v121), (int8x16_t)vceqq_s64(*v105, v121)), *(int8x16_t *)v105, *(int8x16_t *)v102);
            v103[-1] = vbslq_s8(vornq_s8((int8x16_t)vceqq_s64(v102[-1], v121), (int8x16_t)vceqq_s64(v105[-1], v121)), (int8x16_t)v105[-1], (int8x16_t)v102[-1]);
            *uint64_t v103 = v106;
            v105 += 2;
            v102 += 2;
            v103 += 2;
            v104 -= 4;
          }
          while (v104);
          unint64_t v101 = v56 & 0xFFFFFFFFFFFFFFFCLL;
          if (v56 != (v56 & 0xFFFFFFFFFFFFFFFCLL)) {
            goto LABEL_119;
          }
        }
      }
LABEL_127:
      ++v65;
      if (v64 == v66 && v65 == v67) {
        goto LABEL_76;
      }
    }
  }
  if (*(_UNKNOWN **)(*((void *)this + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id) {
    uint64_t v23 = (const void **)this;
  }
  else {
    uint64_t v23 = 0;
  }
  v123[0] = v23;
  if (v23)
  {
    uint64_t v24 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v123);
    *(void *)&long long v135 = mlir::mps::ConstantOp::getValue((mlir::mps::ConstantOp *)v123);
    *((void *)&v135 + 1) = v25;
    *(void *)&long long v133 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v135);
    *((void *)&v133 + 1) = v26;
    uint64_t v27 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v133);
    uint64_t v29 = v28;
    unint64_t v30 = (uint64_t *)(*(void *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v30) {
      goto LABEL_41;
    }
    uint64_t v31 = *v30;
    unint64_t v32 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v33 = *(unsigned int *)(v31 + 16);
    if (!v33) {
      goto LABEL_41;
    }
    uint64_t v34 = *(void **)(v31 + 8);
    uint64_t v35 = &v34[2 * v33];
    do
    {
      unint64_t v36 = v33 >> 1;
      uint64_t v37 = &v34[2 * (v33 >> 1)];
      unint64_t v39 = *v37;
      uint64_t v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32) {
        uint64_t v34 = v38;
      }
      else {
        unint64_t v33 = v36;
      }
    }
    while (v33);
    if (v34 != v35 && *v34 == v32) {
      uint64_t v40 = v34[1];
    }
    else {
LABEL_41:
    }
      uint64_t v40 = 0;
    *(void *)&long long v135 = v30;
    *((void *)&v135 + 1) = v40;
    *(void *)&long long v133 = v27;
    *((void *)&v133 + 1) = v29;
    uint64_t v41 = 1;
    LOBYTE(v134[0]) = 1;
    uint64_t v42 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v135);
    *(void *)(v24 + 8) = *(void *)(v24 + 8) & 7 | mlir::ShapedType::cloneWith((uint64_t *)&v135, &v133, v42);
    return v41;
  }
  if (mlir::OpInterface<mlir::InferTypeOpInterface,mlir::detail::InferTypeOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this))
  {
    *(void *)&long long v135 = this;
    *((void *)&v135 + 1) = mlir::OpInterface<mlir::InferTypeOpInterface,mlir::detail::InferTypeOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this);
    if (this)
    {
      *(void *)&long long v133 = v134;
      *((void *)&v133 + 1) = 0x200000000;
      uint64_t Context = mlir::Attribute::getContext((mlir::mps::_anonymous_namespace_::TypeInferencePass *)((char *)this + 24));
      uint64_t v47 = *((void *)this + 3);
      if ((*((unsigned char *)this + 46) & 0x80) != 0)
      {
        uint64_t v48 = *((void *)this + 9);
        unint64_t v49 = *((unsigned int *)this + 17);
      }
      else
      {
        uint64_t v48 = 0;
        unint64_t v49 = 0;
      }
      mlir::ValueRange::ValueRange(v132, v48, v49);
      unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
      unint64_t v51 = *((unsigned int *)this + 11);
      if (HIBYTE(*((_DWORD *)this + 11))) {
        uint64_t v52 = (char *)this + 16 * ((v51 >> 23) & 1) + 64;
      }
      else {
        uint64_t v52 = 0;
      }
      unint64_t v53 = v51 & 0x7FFFFF;
      if ((v51 & 0x7FFFFF) != 0)
      {
        uint64_t v54 = (((unint64_t)this + 16 * ((v51 >> 23) & 1) + ((v51 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *((unsigned int *)this + 10);
      }
      else
      {
        uint64_t v54 = 0;
        unint64_t v53 = 0;
      }
      mlir::ValueRange::ValueRange(&v131, v54, v53);
      uint64_t v41 = mlir::InferTypeOpInterface::inferReturnTypes((uint64_t)&v135, Context, v47, 1, v132[0], v132[1], AttrDictionary, (uint64_t)v52);
      if ((_BYTE)v41)
      {
        uint64_t v117 = (void *)v133;
        if (*((_DWORD *)this + 9))
        {
          *((void *)this - 1) = *((void *)this - 1) & 7 | *(void *)v133;
          if (*((_DWORD *)this + 9) >= 2u)
          {
            *((void *)this - 3) = *((void *)this - 3) & 7 | v117[1];
            if (*((_DWORD *)this + 9) >= 3u)
            {
              *((void *)this - 5) = *((void *)this - 5) & 7 | v117[2];
              if (*((_DWORD *)this + 9) >= 4u)
              {
                *((void *)this - 7) = *((void *)this - 7) & 7 | v117[3];
                if (*((_DWORD *)this + 9) >= 5u)
                {
                  *((void *)this - 9) = *((void *)this - 9) & 7 | v117[4];
                  unsigned int v118 = *((_DWORD *)this + 9);
                  if (v118 >= 6)
                  {
                    *((void *)this - 11) = *((void *)this - 11) & 7 | v117[5];
                    if (v118 != 6)
                    {
                      uint64_t v119 = (uint64_t *)((char *)this - 112);
                      unint64_t v120 = 6;
                      do
                      {
                        uint64_t *v119 = *v119 & 7 | v117[v120];
                        v119 -= 3;
                        ++v120;
                      }
                      while (v120 < *((unsigned int *)this + 9));
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        uint64_t v117 = (void *)v133;
      }
      if (v117 != (void *)v134) {
        free(v117);
      }
      return v41;
    }
  }
  else
  {
    long long v135 = 0uLL;
  }
  if (*(_UNKNOWN **)(*((void *)this + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id) {
    return 1;
  }
}

void *mlir::mps::createTypeInferencePass@<X0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x228uLL);
  bzero(v3 + 4, 0x208uLL);
  v3[2] = "func.func";
  void v3[3] = 9;
  *((unsigned char *)v3 + 32) = 1;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  v3[22] = 0;
  v3[23] = v3 + 25;
  *((_DWORD *)v3 + 49) = 4;
  v3[29] = v3 + 31;
  *((_DWORD *)v3 + 61) = 4;
  v3[35] = 0;
  v3[36] = 0;
  v3[37] = 0x1000000000;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  v3[42] = 0;
  void *v3 = &unk_1EC9CA818;
  v7.n128_u64[0] = (unint64_t)"Enable folding.";
  v7.n128_u64[1] = 15;
  char v5 = 1;
  unint64_t v6 = &v5;
  uint64_t result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>(v3 + 43, v3 + 19, (uint64_t)"fold", 4, &v7, &v6);
  v3[43] = &unk_1EC9CB060;
  v3[67] = &unk_1EC9CB0E0;
  void *v3 = &unk_1EC9C84F8;
  *a1 = v3;
  return result;
}

uint64_t mlir::mps::anonymous namespace'::TypeInferencePass::inferTypes(uint64_t a1)
{
  v53[4] = *MEMORY[0x1E4F143B8];
  uint64_t v45 = (uint64_t *)a1;
  uint64_t v1 = *(void *)(((a1
                   + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a1 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a1 + 40));
  if (v1) {
    uint64_t v2 = (mlir::GenericProgramPoint **)(v1 - 8);
  }
  else {
    uint64_t v2 = 0;
  }
  mlir::Block::getTerminator(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  char v5 = *(void **)(*(void *)(v3 + 48) + 16);
  uint64_t v6 = v5 == &mlir::detail::TypeIDResolver<mlir::func::ReturnOp,void>::id ? v3 : 0;
  if (v5 != &mlir::detail::TypeIDResolver<mlir::func::ReturnOp,void>::id) {
    return 0;
  }
  Functionuint64_t Type = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v45);
  uint64_t Results = mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionType);
  uint64_t v11 = v10;
  if ((*(unsigned char *)(v4 + 46) & 0x80) != 0)
  {
    unint64_t v12 = *(void **)(v4 + 72);
    uint64_t v13 = *(unsigned int *)(v4 + 68);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  unint64_t v51 = v12;
  uint64_t v52 = v13;
  mlir::OperandRange::getTypes((uint64_t *)&v51, &FunctionType);
  unint64_t v51 = v53;
  uint64_t v52 = 0x400000000;
  uint64_t v14 = FunctionType;
  uint64_t v15 = v49[0];
  uint64_t v16 = v49[1];
  uint64_t v17 = v50;
  int v18 = v50 - LODWORD(v49[0]);
  if ((unint64_t)(v50 - v49[0]) < 5)
  {
    uint64_t v19 = 0;
    int v20 = 0;
    if (v50 != v49[0]) {
      goto LABEL_18;
    }
LABEL_17:
    if (v14 == v16) {
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v53, v50 - v49[0], 8);
  uint64_t v19 = v52;
  int v20 = v52;
  if (v17 == v15) {
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v21 = &v51[v19];
  uint64_t v22 = ~v15 + v17;
  uint64_t v23 = (uint64_t *)(v14 + 32 * v15 + 24);
  do
  {
    uint64_t v24 = *v23;
    v23 += 4;
    *v21++ = *(void *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8;
    BOOL v26 = v22-- != 0;
  }
  while (v14 != v16 || v26);
  int v20 = v52;
LABEL_25:
  LODWORD(v52) = v20 + v18;
  if ((*(unsigned char *)(v4 + 46) & 0x80) == 0)
  {
    if (!v11) {
      goto LABEL_27;
    }
LABEL_46:
    uint64_t v35 = "number of types for the function type and return op differ";
LABEL_47:
    uint64_t v43 = (const void **)v35;
    __int16 v44 = 259;
    mlir::OpState::emitOpError(&v45, &v43, (uint64_t)&FunctionType);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&FunctionType);
    if (FunctionType) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionType);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v49);
    goto LABEL_50;
  }
  if (v11 != *(_DWORD *)(v6 + 68)) {
    goto LABEL_46;
  }
LABEL_27:
  if (v11)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      uint64_t v28 = *(void **)(Results + 8 * i);
      uint64_t v29 = (uint64_t *)v51[i];
      v42[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v29);
      v42[1] = v30;
      if (v42[0])
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v42)) {
          continue;
        }
        uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v42);
        if (v32)
        {
          uint64_t v33 = 8 * v32;
          while (*ArgAttrsAttr != 0x8000000000000000)
          {
            ++ArgAttrsAttr;
            v33 -= 8;
            if (!v33) {
              goto LABEL_36;
            }
          }
          continue;
        }
      }
LABEL_36:
      if (!mlir::verifyCompatibleShape(v28, v29))
      {
        uint64_t v35 = "incompatible shapes for return types";
        goto LABEL_47;
      }
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v28);
      if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(v29))
      {
        uint64_t v35 = "element types for the function type and return op differ";
        goto LABEL_47;
      }
    }
  }
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v45 + 3));
  Functionuint64_t Type = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v45);
  uint64_t Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionType);
  mlir::ValueRange::ValueRange(v47, Inputs, v38);
  mlir::ValueRange::ValueRange(v46, (uint64_t)v51, v52);
  uint64_t v39 = mlir::FunctionType::get(Context, v47[0], v47[1], v46[0], v46[1]);
  uint64_t v40 = v45;
  if (v45) {
    uint64_t InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v45);
  }
  else {
    uint64_t InterfaceFor = 0;
  }
  mlir::function_interface_impl::setFunctionType((uint64_t)v40, InterfaceFor, v39);
  uint64_t v7 = 1;
LABEL_50:
  if (v51 != v53) {
    free(v51);
  }
  return v7;
}

uint64_t mlir::OpInterface<mlir::InferTypeOpInterface,mlir::detail::InferTypeOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void **)(v1 + 16);
  BOOL v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  if (v3)
  {
    uint64_t v22 = *(void *)(v1 + 8);
    uint64_t result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v22);
    if (result)
    {
      uint64_t v20 = result;
      uint64_t v21 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 104))(v20, v21, v1);
    }
  }
  else
  {
    unint64_t v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    unint64_t v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
    unint64_t v8 = *(unsigned int *)(v6 + 40);
    if (!v8) {
      goto LABEL_14;
    }
    unint64_t v9 = *(void **)(v6 + 32);
    uint64_t v10 = &v9[2 * v8];
    do
    {
      unint64_t v11 = v8 >> 1;
      unint64_t v12 = &v9[2 * (v8 >> 1)];
      unint64_t v14 = *v12;
      uint64_t v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7) {
        unint64_t v9 = v13;
      }
      else {
        unint64_t v8 = v11;
      }
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (uint64_t result = v9[1]) == 0)
    {
LABEL_14:
      uint64_t v16 = *(void *)(v6 + 24);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 104);
      return v19(v16, v18, v17);
    }
  }
  return result;
}

void mlir::mps::anonymous namespace'::TypeInferencePass::~TypeInferencePass(mlir::mps::_anonymous_namespace_::TypeInferencePass *this)
{
  *(void *)this = &unk_1EC9CA818;
  *((void *)this + 43) = &unk_1EC9A3F00;
  uint64_t v2 = (char *)this + 504;
  BOOL v3 = (char *)*((void *)this + 66);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 43) = &unk_1EC9A42A8;
  uint64_t v4 = (void *)*((void *)this + 55);
  if (v4 != *((void **)this + 54)) {
    free(v4);
  }
  char v5 = (char *)*((void *)this + 51);
  if (v5 != (char *)this + 424) {
    free(v5);
  }

  mlir::Pass::~Pass(this);
}

{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EC9CA818;
  *((void *)this + 43) = &unk_1EC9A3F00;
  uint64_t v2 = (char *)this + 504;
  BOOL v3 = (char *)*((void *)this + 66);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 43) = &unk_1EC9A42A8;
  uint64_t v4 = (void *)*((void *)this + 55);
  if (v4 != *((void **)this + 54)) {
    free(v4);
  }
  char v5 = (char *)*((void *)this + 51);
  if (v5 != (char *)this + 424) {
    free(v5);
  }
  mlir::Pass::~Pass(this);

  operator delete(v6);
}

const char *mlir::mps::MPSTypeInferenceBase<mlir::mps::anonymous namespace'::TypeInferencePass>::getName()
{
  return "MPSTypeInference";
}

const char *mlir::mps::MPSTypeInferenceBase<mlir::mps::anonymous namespace'::TypeInferencePass>::getArgument()
{
  return "mps-type-inference";
}

const char *mlir::mps::MPSTypeInferenceBase<mlir::mps::anonymous namespace'::TypeInferencePass>::getDescription()
{
  return "Infer types of MPS ops.";
}

uint64_t *mlir::mps::anonymous namespace'::TypeInferencePass::runOnOperation(mlir::mps::_anonymous_namespace_::TypeInferencePass *this)
{
  uint64_t v1 = (mlir::ForwardIterator *)(*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  v13[0] = this;
  unint64_t v12 = v1;
  Functionuint64_t Type = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v12);
  uint64_t result = (uint64_t *)mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionType);
  if (v3)
  {
    uint64_t v4 = (uint64_t **)result;
    char v5 = (uint64_t **)&result[v3];
    while (1)
    {
      for (uint64_t i = *v4; i; uint64_t i = (uint64_t *)i[1])
      {
        uint64_t v7 = *(void *)(*i + 136);
        if (v7 != mlir::TypeID::get<mlir::mpsx::ListType>()) {
          break;
        }
      }
      uint64_t result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(i);
      v13[0] = result;
      v13[1] = v8;
      if (result)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v13)) {
        uint64_t result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
        }
        if (v9) {
          break;
        }
      }
LABEL_3:
      if (++v4 == v5) {
        return result;
      }
    }
    uint64_t v10 = 8 * v9;
    while (*result != 0x8000000000000000)
    {
      ++result;
      v10 -= 8;
      if (!v10) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

void *mlir::mps::MPSTypeInferenceBase<mlir::mps::anonymous namespace'::TypeInferencePass>::clonePass@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x228uLL);
  v2[2] = "func.func";
  v2[3] = 9;
  *((unsigned char *)v2 + 32) = 1;
  *((unsigned char *)v2 + 40) = 0;
  *((unsigned char *)v2 + 120) = 0;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  v2[22] = 0;
  v2[23] = v2 + 25;
  v2[24] = 0x400000000;
  v2[29] = v2 + 31;
  v2[30] = 0x400000000;
  v2[35] = 0;
  v2[36] = 0;
  v2[37] = 0x1000000000;
  v2[42] = 0;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  void *v2 = &unk_1EC9CA818;
  v6.n128_u64[0] = (unint64_t)"Enable folding.";
  v6.n128_u64[1] = 15;
  char v4 = 1;
  char v5 = &v4;
  uint64_t result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>(v2 + 43, v2 + 19, (uint64_t)"fold", 4, &v6, &v5);
  v2[43] = &unk_1EC9CB060;
  v2[67] = &unk_1EC9CB0E0;
  void *v2 = &unk_1EC9C84F8;
  *a1 = v2;
  return result;
}

const char *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mps::anonymous namespace'::TypeInferencePass::runOnOperation(void)::$_0>(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, mlir::Operation *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  v83[4] = *MEMORY[0x1E4F143B8];
  uint64_t v33 = *a1;
  uint64_t v34 = *(unsigned int *)(a2 + 36);
  if (v34) {
    uint64_t v35 = (const char *)(a2 - 16);
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v66 = v35;
  uint64_t v67 = v34;
  uint64_t result = (const char *)mlir::OperandRange::getTypes((uint64_t *)&v66, &v77);
  uint64_t v37 = v77;
  uint64_t v38 = v78;
  uint64_t v39 = v79;
  uint64_t v40 = v80;
  if (v77 != v79 || v78 != v80)
  {
    while (1)
    {
      for (uint64_t i = (uint64_t *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v37, v38) + 8) & 0xFFFFFFFFFFFFFFF8);
            i;
            uint64_t i = (uint64_t *)i[1])
      {
        uint64_t v43 = *(void *)(*i + 136);
        if (v43 != mlir::TypeID::get<mlir::mpsx::ListType>()) {
          break;
        }
      }
      uint64_t result = (const char *)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(i);
      uint64_t v66 = result;
      uint64_t v67 = v44;
      if (result)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v66)) {
          goto LABEL_20;
        }
        uint64_t result = (const char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
        if (v45) {
          break;
        }
      }
LABEL_17:
      ++v38;
      if (v37 == v39 && v38 == v40) {
        goto LABEL_24;
      }
    }
    uint64_t v46 = 8 * (void)v45;
    while (*(void *)result != 0x8000000000000000)
    {
      result += 8;
      v46 -= 8;
      if (!v46) {
        goto LABEL_17;
      }
    }
LABEL_20:
    if (!(_BYTE)result)
    {
      uint64_t v66 = "failed to fold or infer return types";
      LOWORD(v70) = 259;
      mlir::Operation::emitOpError((uint64_t *)a2, (const void ***)&v66, (uint64_t)&v77);
      if (v77) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
      }
      uint64_t result = (const char *)std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v78);
      *(void *)(v33 + 40) |= 4uLL;
    }
  }
LABEL_24:
  if (*(unsigned char *)(v33 + 472))
  {
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      uint64_t v47 = *(void *)(a2 + 72);
      unint64_t v48 = *(unsigned int *)(a2 + 68);
      uint64_t v81 = v83;
      uint64_t v82 = 0x400000000;
      if (v48 < 5)
      {
        if (!v48)
        {
          int v63 = 0;
          goto LABEL_41;
        }
        uint64_t v49 = 0;
        uint64_t v50 = v83;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v83, v48, 8);
        uint64_t v49 = v82;
        uint64_t v50 = v81;
      }
      unint64_t v51 = &v50[v49];
      if (v48 >= 0xD
        && ((unint64_t)v51 >= v47 + 32 * v48 || v47 + 24 >= (unint64_t)&v50[v49 + v48]))
      {
        uint64_t v53 = v48 & 3;
        if ((v48 & 3) == 0) {
          uint64_t v53 = 4;
        }
        unint64_t v52 = v48 - v53;
        v51 += v52;
        uint64_t v54 = (const double *)(v47 + 88);
        unint64_t v55 = (unsigned long long *)&v50[v49 + 2];
        unint64_t v56 = v52;
        do
        {
          uint64_t v57 = v54 - 8;
          unsigned long long v58 = (unsigned __int128)vld4q_f64(v57);
          unsigned long long v59 = (unsigned __int128)vld4q_f64(v54);
          *(v55 - 1) = v58;
          unsigned long long *v55 = v59;
          v54 += 16;
          v55 += 2;
          v56 -= 4;
        }
        while (v56);
      }
      else
      {
        unint64_t v52 = 0;
      }
      unint64_t v60 = v48 - v52;
      uint64_t v61 = (uint64_t *)(v47 + 32 * v52 + 24);
      do
      {
        uint64_t v62 = *v61;
        v61 += 4;
        *v51++ = v62;
        --v60;
      }
      while (v60);
      int v63 = v82;
    }
    else
    {
      LODWORD(v48) = 0;
      int v63 = 0;
      uint64_t v81 = v83;
      HIDWORD(v82) = 4;
    }
LABEL_41:
    LODWORD(v82) = v63 + v48;
    unint64_t v75 = &v81;
    int v74 = 1;
    unint64_t v73 = &unk_1EC9C9B78;
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    int v68 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    int v71 = 0;
    uint64_t v65 = mlir::TypeID::get<mlir::DialectFoldInterface>();
    v76[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectFoldInterface]";
    v76[1] = 76;
    llvm::StringRef::find(v76, "DesiredTypeName = ", 0x12uLL, 0);
    mlir::detail::DialectInterfaceCollectionBase::DialectInterfaceCollectionBase((uint64_t)v72, Context, v65);
    v72[0] = &unk_1EC9C6D48;
    v72[8] = Context;
    v72[9] = &v73;
    v72[10] = 0;
    v72[11] = 0;
    v72[7] = &unk_1EC9A4978;
    mlir::OperationFolder::tryToFold((int32x2_t *)&v66, (mlir::Operation *)a2, 0);
    mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)&v66);
  }
  return result;
}

void mlir::mps::anonymous namespace'::TypeInferencePass::fold(mlir::Operation *)::$_0::operator()(uint64_t a1)
{
  uint64_t v1 = (mlir::Operation **)v22;
  uint64_t v18 = (mlir::Operation **)v22;
  uint64_t v19 = (mlir::Operation **)v22;
  uint64_t v20 = 4;
  int v21 = 0;
  uint64_t v2 = *(void ****)a1;
  uint64_t v3 = *(unsigned int *)(*(void *)a1 + 8);
  if (v3)
  {
    char v4 = *v2;
    uint64_t v5 = (uint64_t)&(*v2)[v3];
    while (1)
    {
      uint64_t v17 = *v4;
      if (mlir::Value::getDefiningOp((mlir::Value *)&v17) && !*v17)
      {
        uint64_t DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v17);
        if (v19 != v18) {
          goto LABEL_3;
        }
        uint64_t v7 = HIDWORD(v20);
        if (HIDWORD(v20))
        {
          uint64_t v8 = 0;
          uint64_t v9 = 8 * HIDWORD(v20);
          uint64_t v10 = v19;
          while (*v10 != DefiningOp)
          {
            if (*v10 == (mlir::Operation *)-2) {
              uint64_t v8 = v10;
            }
            ++v10;
            v9 -= 8;
            if (!v9)
            {
              if (!v8) {
                goto LABEL_16;
              }
              char *v8 = DefiningOp;
              --v21;
              goto LABEL_4;
            }
          }
          goto LABEL_4;
        }
LABEL_16:
        if (HIDWORD(v20) < v20)
        {
          ++HIDWORD(v20);
          v19[v7] = DefiningOp;
        }
        else
        {
LABEL_3:
          llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v18, DefiningOp);
        }
      }
LABEL_4:
      if (++v4 == (void **)v5)
      {
        uint64_t v1 = v18;
        unint64_t v11 = v19;
        unsigned int v12 = v20;
        LODWORD(v3) = HIDWORD(v20);
        goto LABEL_20;
      }
    }
  }
  unsigned int v12 = 4;
  unint64_t v11 = (mlir::Operation **)v22;
LABEL_20:
  if (v11 == v1) {
    uint64_t v3 = v3;
  }
  else {
    uint64_t v3 = v12;
  }
  uint64_t v13 = v11;
  if (v3)
  {
    uint64_t v14 = 0;
    while ((unint64_t)v11[v14] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v3 == ++v14) {
        goto LABEL_36;
      }
    }
    uint64_t v13 = &v11[v14];
  }
  uint64_t v15 = &v11[v3];
  if (v13 != v15)
  {
    do
    {
      uint64_t v16 = *v13++;
      mlir::Operation::erase(v16);
      if (v13 == v15) {
        break;
      }
      while ((unint64_t)*v13 >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (++v13 == v15) {
          goto LABEL_35;
        }
      }
    }
    while (v13 != v15);
LABEL_35:
    uint64_t v1 = v18;
    unint64_t v11 = v19;
  }
LABEL_36:
  if (v11 != v1) {
    free(v11);
  }
}

uint64_t mlir::mps::anonymous namespace'::TypeInferencePassListener::notifyOperationInserted(mlir::mps::_anonymous_namespace_::TypeInferencePassListener *this, mlir::Operation *a2)
{
}

uint64_t mlir::RewriterBase::Listener::notifyOperationReplaced(mlir::RewriterBase::Listener *this, mlir::Operation *a2, mlir::Operation *a3)
{
  void v7[2] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a3 + 9)) {
    uint64_t v5 = (char *)a3 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  mlir::ValueRange::ValueRange(v7, (uint64_t)v5, *((unsigned int *)a3 + 9));
  return (*(uint64_t (**)(mlir::RewriterBase::Listener *, mlir::Operation *, unint64_t, unint64_t))(*(void *)this + 48))(this, a2, v7[0], v7[1]);
}

uint64_t mlir::RewriterBase::Listener::notifyMatchFailure()
{
  return 0;
}

void mlir::DialectInterfaceCollection<mlir::DialectFoldInterface>::~DialectInterfaceCollection(mlir::detail::DialectInterfaceCollectionBase *a1)
{
}

void sub_1805DCD14(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::TypeID::get<mlir::DialectFoldInterface>()
{
  unint64_t v0 = 0x1E8EB8000uLL;
  {
    unint64_t v0 = 0x1E8EB8000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectFoldInterface]";
      unint64_t v11 = 76;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::DialectFoldInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = 0x1E8EB8000;
    }
  }
  return *(void *)(v0 + 3848);
}

void mlir::OperationFolder::~OperationFolder(mlir::OperationFolder *this)
{
}

uint64_t sub_1805DCEF4()
{
  return v0;
}

void mlir::mpsx::createGPURegionParallelEncodePass(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x308uLL);
  bzero(v4 + 4, 0x2E8uLL);
  v4[2] = "builtin.module";
  v4[3] = 14;
  *((unsigned char *)v4 + 32) = 1;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  v4[22] = 0;
  v4[23] = v4 + 25;
  *((_DWORD *)v4 + 49) = 4;
  v4[29] = v4 + 31;
  *((_DWORD *)v4 + 61) = 4;
  v4[35] = 0;
  v4[36] = 0;
  v4[37] = 0x1000000000;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  v4[42] = 0;
  void *v4 = &unk_1EC988D80;
  v12.n128_u64[0] = (unint64_t)"The minimum number of operations each region will have in order to create parallel regions.";
  v12.n128_u64[1] = 91;
  int v10 = 1;
  unint64_t v11 = &v10;
  mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>(v4 + 43, v4 + 19, (uint64_t)"minimum-number-of-ops-per-region", 32, &v12, &v11);
  v4[43] = &unk_1EC988C50;
  v4[68] = &unk_1EC988CD0;
  v12.n128_u64[0] = (unint64_t)"The maximum number of parallel regions to create.";
  v12.n128_u64[1] = 49;
  int v10 = 2;
  unint64_t v11 = &v10;
  mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>(v4 + 70, v4 + 19, (uint64_t)"maximum-number-of-parallel-regions", 34, &v12, &v11);
  v4[70] = &unk_1EC988C50;
  v4[95] = &unk_1EC988CD0;
  void *v4 = &unk_1EC988D10;
  v4[59] = *a1;
  uint64_t v5 = v4[67];
  if (v5
    && ((*(void (**)(uint64_t, void *))(*(void *)v5 + 48))(v5, a1),
        uint64_t v7 = a1[1],
        unint64_t v6 = a1 + 1,
        v4[86] = v7,
        (uint64_t v8 = v4[94]) != 0))
  {
    (*(void (**)(uint64_t, void *))(*(void *)v8 + 48))(v8, v6);
    *a2 = v4;
  }
  else
  {
    uint64_t v9 = (mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *)std::__throw_bad_function_call[abi:nn180100]();
  }
}

void mlir::mpsx::anonymous namespace'::GPURegionParallelEncodePass::~GPURegionParallelEncodePass(mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *this)
{
  *(void *)this = &unk_1EC988D80;
  *((void *)this + 70) = &unk_1EC9A40A0;
  int v2 = (char *)this + 728;
  unint64_t v3 = (char *)*((void *)this + 94);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 70) = &unk_1EC9A42A8;
  unint64_t v4 = (void *)*((void *)this + 82);
  if (v4 != *((void **)this + 81)) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 78);
  if (v5 != (char *)this + 640) {
    free(v5);
  }
  *((void *)this + 43) = &unk_1EC9A40A0;
  unint64_t v6 = (mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *)*((void *)this + 67);
  if (v6 == (mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *)((char *)this + 512))
  {
    (*(void (**)(char *))(*((void *)this + 64) + 32))((char *)this + 512);
  }
  else if (v6)
  {
    (*(void (**)(mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *))(*(void *)v6 + 40))(v6);
  }
  *((void *)this + 43) = &unk_1EC9A42A8;
  uint64_t v7 = (void *)*((void *)this + 55);
  if (v7 != *((void **)this + 54)) {
    free(v7);
  }
  uint64_t v8 = (char *)*((void *)this + 51);
  if (v8 != (char *)this + 424) {
    free(v8);
  }

  mlir::Pass::~Pass(this);
}

{
  void *v1;
  uint64_t vars8;

  operator delete(v1);
}

const char *mlir::mpsx::MPSXGPURegionParallelEncodeBase<mlir::mpsx::anonymous namespace'::GPURegionParallelEncodePass>::getName()
{
  return "MPSXGPURegionParallelEncode";
}

void *mlir::mpsx::MPSXGPURegionParallelEncodeBase<mlir::mpsx::anonymous namespace'::GPURegionParallelEncodePass>::getDependentDialects(int a1, uint64_t **a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EC9CEEE0;
  uint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, "mps", 3uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CF000;
  uint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mpsx::MPSXDialect,void>::id, "mpsx", 4uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CF0D8;
  uint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::placement::PlacementDialect,void>::id, "placement", 9uLL, v4);
  uint64_t result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

const char *mlir::mpsx::MPSXGPURegionParallelEncodeBase<mlir::mpsx::anonymous namespace'::GPURegionParallelEncodePass>::getArgument()
{
  return "mpsx-gpu-parallel-encode";
}

const char *mlir::mpsx::MPSXGPURegionParallelEncodeBase<mlir::mpsx::anonymous namespace'::GPURegionParallelEncodePass>::getDescription()
{
  return "Convert GPU regions so that they can be encoded in parallel.";
}

void mlir::mpsx::anonymous namespace'::GPURegionParallelEncodePass::runOnOperation(mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *this)
{
  uint64_t v1 = this;
  v69[72] = *MEMORY[0x1E4F143B8];
  uint64_t v54 = v56;
  uint64_t v55 = 0x600000000;
  int v2 = (mlir::ForwardIterator *)(*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v67 = v1;
  uint64_t v68 = (uint64_t)&v54;
  uint64_t v64 = &v67;
  mlir::detail::walk<mlir::ForwardIterator>(v2, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4mpsx12_GLOBAL__N_127GPURegionParallelEncodePass14runOnOperationEvE3__0NSB_5GPUOpEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v64, 1);
  if (v55)
  {
    unint64_t v3 = (mlir::GenericProgramPoint **)v54;
    unint64_t v48 = v1;
    while (1)
    {
      unint64_t v4 = *v3;
      uint64_t v53 = *v3;
      if (*((void *)v1 + 86) >= 2uLL)
      {
        uint64_t v5 = *(void *)((((unint64_t)v4
                         + 16 * (((unint64_t)*((unsigned int *)v4 + 11) >> 23) & 1)
                         + (((unint64_t)*((unsigned int *)v4 + 11) >> 21) & 0x7F8)
                         + 71) & 0xFFFFFFFFFFFFFFF8)
                       + 32 * *((unsigned int *)v4 + 10)
                       + 8);
        uint64_t v6 = v5 - 8;
        if (!v5) {
          uint64_t v6 = 0;
        }
        uint64_t v7 = v6 + 32;
        uint64_t v8 = *(void *)(v6 + 40);
        if (v8 == v7)
        {
          unint64_t v9 = 0;
        }
        else
        {
          unint64_t v9 = 0;
          do
          {
            ++v9;
            uint64_t v8 = *(void *)(v8 + 8);
          }
          while (v8 != v7);
        }
        if (v9 >= *((void *)v1 + 59)) {
          break;
        }
      }
      if (++v3 == (mlir::GenericProgramPoint **)((char *)v54 + 8 * v55)) {
        goto LABEL_88;
      }
    }
    if (v4) {
      mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v4);
    }
    mlir::mps::ConstantRuntimeAnalysis::ConstantRuntimeAnalysis((uint64_t)v51, (uint64_t)v4);
    uint64_t v11 = *((unsigned int *)v53 + 10);
    unint64_t v10 = *((unsigned int *)v53 + 11);
    uint64_t v50 = 0;
    uint64_t v12 = *(void *)((((unint64_t)v53 + 16 * ((v10 >> 23) & 1) + ((v10 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * v11
                    + 8);
    if (v12) {
      uint64_t v13 = (mlir::GenericProgramPoint **)(v12 - 8);
    }
    else {
      uint64_t v13 = 0;
    }
    mlir::Block::getTerminator(v13);
    uint64_t v50 = v14;
    uint64_t v67 = v69;
    uint64_t v68 = 0x800000000;
    uint64_t v64 = &v50;
    uint64_t v65 = (uint64_t)v51;
    v66[0] = &v53;
    v66[1] = &v67;
    if (!v68)
    {
      uint64_t v43 = (char *)v67;
      goto LABEL_85;
    }
    uint64_t v64 = v66;
    uint64_t v65 = 0x800000000;
    uint64_t v15 = (char *)v67;
    uint64_t v16 = 72 * v68;
    uint64_t v17 = (int *)v67;
    while (1)
    {
      int v19 = *v17;
      if (!*v17)
      {
        if (*((void *)v1 + 59) <= (unint64_t)v17[4] >> 1)
        {
          int v19 = 0;
          unint64_t v20 = v65;
          if (v65) {
            goto LABEL_33;
          }
          goto LABEL_29;
        }
        int v19 = 1;
        int *v17 = 1;
      }
      unint64_t v20 = v65;
      if (v65) {
        goto LABEL_33;
      }
LABEL_29:
      LODWORD(v60) = v19;
      uint64_t v61 = v63;
      uint64_t v62 = 0x600000000;
      if (v61 != v63) {
        free(v61);
      }
      unint64_t v20 = v65;
      int v19 = *v17;
LABEL_33:
      int v21 = (char *)v64;
      uint64_t v22 = (int *)((char *)v64 + 72 * v20);
      if (*(v22 - 18) == v19)
      {
        uint64_t v23 = (const void *)*((void *)v17 + 1);
        uint64_t v24 = v17[4];
        uint64_t v25 = *(v22 - 14);
        if (v25 + v24 > (unint64_t)*(v22 - 13))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v22 - 16), v22 - 12, v25 + v24, 8);
          LODWORD(v25) = *(v22 - 14);
        }
        if (v24)
        {
          memcpy((void *)(*((void *)v22 - 8) + 8 * v25), v23, 8 * v24);
          LODWORD(v25) = *(v22 - 14);
        }
        *(v22 - 14) = v25 + v24;
        goto LABEL_24;
      }
      BOOL v26 = (const void **)v17;
      if (v20 >= HIDWORD(v65))
      {
        unint64_t v33 = v20 + 1;
        if (v64 <= v17 && v22 > v17)
        {
          int64_t v34 = v15 - (unsigned char *)v64;
          int v21 = (char *)v64;
          BOOL v26 = (const void **)((char *)v64 + v34);
          uint64_t v1 = v48;
        }
        else
        {
          int v21 = (char *)v64;
          BOOL v26 = (const void **)v17;
        }
      }
      uint64_t v27 = (const void **)&v21[72 * v65];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v26;
      uint64_t v28 = v27 + 3;
      v27[1] = v27 + 3;
      uint64_t v29 = (void **)(v27 + 1);
      BOOL v32 = v27 == v26;
      void v27[2] = (const void *)0x600000000;
      uint64_t v30 = v27 + 2;
      unint64_t v31 = *((unsigned int *)v26 + 4);
      BOOL v32 = v32 || v31 == 0;
      if (!v32)
      {
        if (v31 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v29, v28, *((unsigned int *)v26 + 4), 8);
          uint64_t v18 = *((unsigned int *)v26 + 4);
          if (v18)
          {
            uint64_t v28 = *v29;
LABEL_21:
            memcpy(v28, v26[1], 8 * v18);
          }
          *uint64_t v30 = v31;
          goto LABEL_23;
        }
        uint64_t v18 = *((unsigned int *)v26 + 4);
        goto LABEL_21;
      }
LABEL_23:
      LODWORD(v65) = v65 + 1;
LABEL_24:
      v17 += 18;
      v15 += 72;
      v16 -= 72;
      if (!v16)
      {
        if (v65 == 1)
        {
          uint64_t v35 = (char *)v64;
          if (*(_DWORD *)v64 == 1)
          {
            uint64_t v36 = 1;
            goto LABEL_72;
          }
        }
        memset(&v49[2], 0, 24);
        v49[0] = &unk_1EC9A4978;
        v49[1] = mlir::Attribute::getContext((mlir::GenericProgramPoint *)((char *)v53 + 24));
        if (v65)
        {
          uint64_t v37 = (uint64_t **)v64;
          do
          {
            if (*(_DWORD *)v37) {
            unint64_t v38 = *((unsigned int *)v37 + 4);
            }
            unint64_t v39 = *((void *)v1 + 86);
            uint64_t v40 = v38 / v39;
            unint64_t v41 = *((void *)v1 + 59);
            if (v38 / v39 < v41)
            {
              unint64_t v39 = v38 / v41;
              uint64_t v40 = v38 / (v38 / v41);
            }
            if (v39)
            {
              if (v38 % v39) {
                uint64_t v42 = v40 + 1;
              }
              else {
                uint64_t v42 = v40;
              }
            }
            v37 += 9;
          }
          while (v37 != (uint64_t **)((char *)v64 + 72 * v65));
        }
        uint64_t v57 = &v59;
        uint64_t v58 = 0x100000000;
        unint64_t v60 = &v53;
        uint64_t v61 = v51;
        uint64_t v62 = (uint64_t)&v57;
        if (v58) {
        if (v57 != &v59)
        }
          free(v57);
        mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v49);
        uint64_t v35 = (char *)v64;
        uint64_t v36 = v65;
        if (v65)
        {
LABEL_72:
          uint64_t v44 = 72 * v36;
          do
          {
            uint64_t v45 = *(char **)&v35[v44 - 64];
            if (&v35[v44 - 48] != v45) {
              free(v45);
            }
            v44 -= 72;
          }
          while (v44);
          uint64_t v35 = (char *)v64;
        }
        if (v35 != (char *)v66) {
          free(v35);
        }
        uint64_t v43 = (char *)v67;
        if (v68)
        {
          uint64_t v46 = 72 * v68;
          do
          {
            uint64_t v47 = *(char **)&v43[v46 - 64];
            if (&v43[v46 - 48] != v47) {
              free(v47);
            }
            v46 -= 72;
          }
          while (v46);
          uint64_t v43 = (char *)v67;
        }
LABEL_85:
        if (v43 != (char *)v69) {
          free(v43);
        }
        llvm::deallocate_buffer(v51[0], (void *)(8 * v52));
      }
    }
  }
LABEL_88:
  if (v54 != v56) {
    free(v54);
  }
}

void *mlir::mpsx::MPSXGPURegionParallelEncodeBase<mlir::mpsx::anonymous namespace'::GPURegionParallelEncodePass>::clonePass@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x308uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)unint64_t v4 = &unk_1EC988D80;
  v9.n128_u64[0] = (unint64_t)"The minimum number of operations each region will have in order to create parallel regions.";
  v9.n128_u64[1] = 91;
  int v7 = 1;
  uint64_t v8 = &v7;
  mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((void *)v4 + 43, (void *)v4 + 19, (uint64_t)"minimum-number-of-ops-per-region", 32, &v9, &v8);
  *((void *)v4 + 43) = &unk_1EC988C50;
  *((void *)v4 + 68) = &unk_1EC988CD0;
  v9.n128_u64[0] = (unint64_t)"The maximum number of parallel regions to create.";
  v9.n128_u64[1] = 49;
  int v7 = 2;
  uint64_t v8 = &v7;
  uint64_t result = mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((void *)v4 + 70, (void *)v4 + 19, (uint64_t)"maximum-number-of-parallel-regions", 34, &v9, &v8);
  *((void *)v4 + 70) = &unk_1EC988C50;
  *((void *)v4 + 95) = &unk_1EC988CD0;
  *(void *)unint64_t v4 = &unk_1EC988D10;
  *a2 = v4;
  return result;
}

void *mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>(void *a1, void *a2, uint64_t a3, uint64_t a4, __n128 *a5, int **a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  v31[0] = a3;
  v31[1] = a4;
  v34[0] = a2;
  uint64_t v8 = llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)a1, (uint64_t)v31, v34, a5, a6);
  uint64_t v9 = v8 + 200;
  *(unsigned char *)(v8 + 208) = 0;
  *(void *)uint64_t v8 = &unk_1EC988DF0;
  *(void *)(v8 + 200) = &unk_1EC988E70;
  uint64_t v11 = (uint64_t *)a2[21];
  unint64_t v10 = a2[22];
  uint64_t v12 = v11;
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v14 = (uint64_t *)a2[20];
    uint64_t v15 = v11 - v14;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      abort();
    }
    uint64_t v17 = v10 - (void)v14;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v19 = (char *)operator new(8 * v18);
    }
    else
    {
      int v19 = 0;
    }
    unint64_t v20 = (uint64_t *)&v19[8 * v15];
    int v21 = &v19[8 * v18];
    *unint64_t v20 = v9;
    uint64_t v13 = v20 + 1;
    if (v11 != v14)
    {
      unint64_t v22 = (char *)v11 - (char *)v14 - 8;
      if (v22 < 0x58) {
        goto LABEL_36;
      }
      if ((unint64_t)((char *)v14 - v19) < 0x20) {
        goto LABEL_36;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v12 = &v11[v24 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v20 = (uint64_t *)((char *)v20 - v24);
      uint64_t v25 = &v19[8 * v15 - 16];
      BOOL v26 = v11 - 2;
      uint64_t v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)uint64_t v25 = v28;
        v25 -= 32;
        v26 -= 4;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          uint64_t v29 = *--v12;
          *--unint64_t v20 = v29;
        }
        while (v12 != v14);
      }
      uint64_t v12 = (uint64_t *)a2[20];
    }
    a2[20] = v20;
    a2[21] = v13;
    a2[22] = v21;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *uint64_t v11 = v9;
    uint64_t v13 = v11 + 1;
  }
  a2[21] = v13;
  v32[0] = &unk_1EC988FB8;
  v32[1] = a1;
  uint64_t v35 = v34;
  unint64_t v33 = v32;
  v34[0] = &unk_1EC988FB8;
  v34[1] = a1;
  std::__function::__value_func<void ()(unsigned long long const&)>::swap[abi:nn180100](v34, a1 + 21);
  if (v35 == v34)
  {
    (*((void (**)(const void **))v34[0] + 4))(v34);
  }
  else if (v35)
  {
    (*((void (**)(void))*v35 + 5))();
  }
  if (v33 == v32)
  {
    (*(void (**)(void *))(v32[0] + 32))(v32);
  }
  else if (v33)
  {
    (*(void (**)(void))(*v33 + 40))();
  }
  return a1;
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v11 = 0;
  uint64_t v8 = llvm::cl::parser<unsigned long long>::parse(a1 + 160, (void *)a1, a3, a4, a5, a6, &v11);
  if (v8) {
    return v8;
  }
  *(void *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 192);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::getValueExpectedFlagDefault()
{
  return 2;
}

void *mlir::Pass::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::~Option(void *a1)
{
  *a1 = &unk_1EC9A40A0;
  int v2 = a1 + 21;
  unint64_t v3 = (void *)a1[24];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  *a1 = &unk_1EC9A42A8;
  unint64_t v4 = (void *)a1[12];
  if (v4 != (void *)a1[11]) {
    free(v4);
  }
  uint64_t v5 = (void *)a1[8];
  if (v5 != a1 + 10) {
    free(v5);
  }
  return a1;
}

void mlir::Pass::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::~Option(char *__p)
{
  *(void *)__p = &unk_1EC9A40A0;
  int v2 = __p + 168;
  unint64_t v3 = (char *)*((void *)__p + 24);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *(void *)__p = &unk_1EC9A42A8;
  unint64_t v4 = (void *)*((void *)__p + 12);
  if (v4 != *((void **)__p + 11)) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)__p + 8);
  if (v5 != __p + 80) {
    free(v5);
  }

  operator delete(__p);
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 160, a1);
}

llvm::raw_ostream *llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, a2);
}

void llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::printOptionValue(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) != 0 || !*(unsigned char *)(a1 + 152) || *(void *)(a1 + 144) != *(void *)(a1 + 128))
  {
    unint64_t v3 = *(void *)(a1 + 128);
    uint64_t v4 = *(void *)(a1 + 144);
    char v6 = *(unsigned char *)(a1 + 152);
    v5[0] = &unk_1EC9A3B40;
    v5[1] = v4;
    llvm::cl::parser<unsigned long long>::printOptionDiff((llvm *)(a1 + 160), a1, v3, (uint64_t)v5, a2);
  }
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::setDefault(uint64_t result)
{
  if (*(unsigned char *)(result + 152)) {
    *(void *)(result + 128) = *(void *)(result + 144);
  }
  else {
    *(void *)(result + 128) = 0;
  }
  return result;
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::print(void *a1, llvm::raw_ostream *this)
{
  uint64_t v4 = (const void *)a1[2];
  size_t v5 = a1[3];
  char v6 = (unsigned char *)*((void *)this + 4);
  if (v5 <= *((void *)this + 3) - (void)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      char v6 = (unsigned char *)(*((void *)this + 4) + v5);
      *((void *)this + 4) = v6;
    }
    int v7 = this;
  }
  else
  {
    int v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    char v6 = (unsigned char *)*((void *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((void *)v7 + 4) = v6 + 1;
    *char v6 = 61;
  }
  unint64_t v8 = a1[16];

  return llvm::raw_ostream::operator<<(this, v8);
}

uint64_t mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(void *)(result + 128) = *(void *)(a2 - 72);
  *(unsigned char *)(result + 208) = *(unsigned char *)(a2 + 8);
  return result;
}

void non-virtual thunk to'mlir::Pass::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::~Option(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EC9A40A0;
  uint64_t v2 = a1 - 32;
  uint64_t v3 = *(void *)(a1 - 8);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  *(void *)(a1 - 200) = &unk_1EC9A42A8;
  uint64_t v4 = *(void **)(a1 - 104);
  if (v4 != *(void **)(a1 - 112)) {
    free(v4);
  }
  size_t v5 = *(void **)(a1 - 136);
  if (v5 != (void *)(a1 - 120)) {
    free(v5);
  }
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  uint64_t v2 = (void *)(a1 - 200);
  *(void *)(a1 - 200) = &unk_1EC9A40A0;
  uint64_t v3 = a1 - 32;
  uint64_t v4 = *(void *)(a1 - 8);
  if (v4 == v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  *(void *)(a1 - 200) = &unk_1EC9A42A8;
  size_t v5 = *(void **)(a1 - 104);
  if (v5 != *(void **)(a1 - 112)) {
    free(v5);
  }
  char v6 = *(void **)(a1 - 136);
  if (v6 != (void *)(a1 - 120)) {
    free(v6);
  }

  operator delete(v2);
}

llvm::raw_ostream *non-virtual thunk to'mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v4 = *(const void **)(a1 - 184);
  size_t v5 = *(void *)(a1 - 176);
  char v6 = (unsigned char *)*((void *)this + 4);
  if (v5 <= *((void *)this + 3) - (void)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      char v6 = (unsigned char *)(*((void *)this + 4) + v5);
      *((void *)this + 4) = v6;
    }
    int v7 = this;
  }
  else
  {
    int v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    char v6 = (unsigned char *)*((void *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((void *)v7 + 4) = v6 + 1;
    *char v6 = 61;
  }
  unint64_t v8 = *(void *)(a1 - 72);

  return llvm::raw_ostream::operator<<(this, v8);
}

uint64_t non-virtual thunk to'mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::getOption(uint64_t a1)
{
  return a1 - 200;
}

uint64_t non-virtual thunk to'mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(void *)(result - 72) = *(void *)(a2 - 72);
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, int **a5)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  unint64_t v10 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 136) = &unk_1EC9A3B40;
  *(void *)a1 = &unk_1EC9A40A0;
  *(void *)(a1 + 160) = &unk_1EC9A44D0;
  *(void *)(a1 + 168) = &unk_1EC9CE7B0;
  *(void *)(a1 + 192) = a1 + 168;
  llvm::cl::apply<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void *mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::~Option(void *a1)
{
  *a1 = &unk_1EC9A40A0;
  uint64_t v2 = a1 + 21;
  uint64_t v3 = (void *)a1[24];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  *a1 = &unk_1EC9A42A8;
  uint64_t v4 = (void *)a1[12];
  if (v4 != (void *)a1[11]) {
    free(v4);
  }
  size_t v5 = (void *)a1[8];
  if (v5 != a1 + 10) {
    free(v5);
  }
  return a1;
}

void mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::~Option(char *__p)
{
  *(void *)__p = &unk_1EC9A40A0;
  uint64_t v2 = __p + 168;
  uint64_t v3 = (char *)*((void *)__p + 24);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *(void *)__p = &unk_1EC9A42A8;
  uint64_t v4 = (void *)*((void *)__p + 12);
  if (v4 != *((void **)__p + 11)) {
    free(v4);
  }
  size_t v5 = (char *)*((void *)__p + 8);
  if (v5 != __p + 80) {
    free(v5);
  }

  operator delete(__p);
}

void non-virtual thunk to'mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::~Option(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EC9A40A0;
  uint64_t v2 = a1 - 32;
  uint64_t v3 = *(void *)(a1 - 8);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  *(void *)(a1 - 200) = &unk_1EC9A42A8;
  uint64_t v4 = *(void **)(a1 - 104);
  if (v4 != *(void **)(a1 - 112)) {
    free(v4);
  }
  size_t v5 = *(void **)(a1 - 136);
  if (v5 != (void *)(a1 - 120)) {
    free(v5);
  }
}

{
  mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::~Option((char *)(a1 - 200));
}

void *llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::~opt(void *a1)
{
  *a1 = &unk_1EC9A40A0;
  uint64_t v2 = a1 + 21;
  uint64_t v3 = (void *)a1[24];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  *a1 = &unk_1EC9A42A8;
  uint64_t v4 = (void *)a1[12];
  if (v4 != (void *)a1[11]) {
    free(v4);
  }
  size_t v5 = (void *)a1[8];
  if (v5 != a1 + 10) {
    free(v5);
  }
  return a1;
}

void llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::~opt(char *__p)
{
  *(void *)__p = &unk_1EC9A40A0;
  uint64_t v2 = __p + 168;
  uint64_t v3 = (char *)*((void *)__p + 24);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *(void *)__p = &unk_1EC9A42A8;
  uint64_t v4 = (void *)*((void *)__p + 12);
  if (v4 != *((void **)__p + 11)) {
    free(v4);
  }
  size_t v5 = (char *)*((void *)__p + 8);
  if (v5 != __p + 80) {
    free(v5);
  }

  operator delete(__p);
}

BOOL llvm::cl::OptionValueCopy<unsigned long long>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 16) && *(unsigned char *)(a1 + 16) && *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

void *std::__function::__func<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1},std::allocator<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1}>,void ()(unsigned long long const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EC9CE7B0;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1},std::allocator<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1}>,void ()(unsigned long long const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CE7B0;
}

void *std::__function::__value_func<void ()(unsigned long long const&)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    size_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIyN4llvm2cl6parserIyEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKyEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EC988FB8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIyN4llvm2cl6parserIyEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKyEE7__cloneEPNS0_6__baseISS_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EC988FB8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIyN4llvm2cl6parserIyEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKyEEclESR_(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 208) = 1;
  return result;
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4mpsx12_GLOBAL__N_127GPURegionParallelEncodePass14runOnOperationEvE3__0NSB_5GPUOpEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t **a1, uint64_t a2)
{
  if (a2 && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = **a1;
    uint64_t ParentOp = *(mlir::Block **)(a2 + 16);
    if (ParentOp) {
      uint64_t ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    }
    if (ParentOp == (mlir::Block *)(*(void *)(v4 + 40) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v6 = v3[1];
      uint64_t v7 = *(unsigned int *)(v6 + 8);
      if (v7 >= *(_DWORD *)(v6 + 12))
      {
        uint64_t v8 = v3[1];
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v6 + 16), v7 + 1, 8);
        uint64_t v6 = v8;
        LODWORD(v7) = *(_DWORD *)(v8 + 8);
      }
      *(void *)(*(void *)v6 + 8 * v7) = a2;
      ++*(_DWORD *)(v6 + 8);
    }
  }
}

uint64_t llvm::SmallVectorTemplateBase<mlir::mpsx::anonymous namespace'::anonymous namespace'::RegionInfo,false>::push_back(uint64_t a1, char *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v8 = v4 + 1;
    unint64_t v9 = v5 + 72 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      uint64_t v11 = &a2[-v5];
      unint64_t v5 = *(void *)a1;
      a2 = &v11[*(void *)a1];
    }
    else
    {
      unint64_t v5 = *(void *)a1;
    }
  }
  unint64_t v6 = v5 + 72 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)unint64_t v6 = *(_DWORD *)a2;
  *(void *)(v6 + 16) = 0x600000000;
  *(void *)(v6 + 8) = v6 + 24;
  uint64_t result = v6 + 8;
  if (*((_DWORD *)a2 + 4)) {
    uint64_t result = llvm::SmallVectorImpl<mlir::Value>::operator=(result, (uint64_t)(a2 + 8));
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void mlir::mpsx::anonymous namespace'::anonymous namespace'::outlineRegion(uint64_t a1, mlir::GenericProgramPoint *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v10 = a1;
  v67[10] = *MEMORY[0x1E4F143B8];
  uint64_t v52 = a6;
  uint64_t v53 = a2;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  int v51 = 0;
  uint64_t v65 = v67;
  uint64_t v66 = 0xA00000000;
  if (!a4) {
    goto LABEL_48;
  }
  uint64_t v11 = a3;
  uint64_t v12 = &a3[a4];
  while (1)
  {
    uint64_t v13 = *v11;
    long long v63 = 0u;
    long long v64 = 0u;
    *(_OWORD *)__p = 0u;
    std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
    uint64_t v14 = *((void *)&v64 + 1);
    *(void *)(*(void *)((char *)__p[1] + ((((void)v64 + *((void *)&v64 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((v64 + *((void *)&v64 + 1)) & 0x1FF)) = v13;
    BOOL v15 = __CFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (!v15)
    {
      while (1)
      {
        v48[0] = 0;
        uint64_t v23 = *(mlir::ForwardIterator **)(*(void *)((char *)__p[1]
                                                    + (((unint64_t)v64 >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * (v64 & 0x1FF));
        v48[0] = (uint64_t)v23;
        *((void *)&v64 + 1) = v16 - 1;
        *(void *)&long long v64 = v64 + 1;
        if ((unint64_t)v64 >= 0x400)
        {
          operator delete(*(void **)__p[1]);
          __p[1] = (char *)__p[1] + 8;
          *(void *)&long long v64 = v64 - 512;
          uint64_t v23 = (mlir::ForwardIterator *)v48[0];
        }
        if (!v51) {
          break;
        }
        int v24 = v51 - 1;
        uint64_t v25 = ((v23 >> 4) ^ (v23 >> 9)) & (v51 - 1);
        BOOL v26 = *(mlir::ForwardIterator **)(v49 + 8 * v25);
        if (v26 == v23)
        {
          if (v25 != v51) {
            goto LABEL_14;
          }
        }
        else
        {
          int v33 = 1;
          unsigned int v34 = ((v23 >> 4) ^ (v23 >> 9)) & v24;
          do
          {
            if (v26 == (mlir::ForwardIterator *)-4096) {
              goto LABEL_20;
            }
            unsigned int v35 = v34 + v33++;
            unsigned int v34 = v35 & v24;
            BOOL v26 = *(mlir::ForwardIterator **)(v49 + 8 * v34);
          }
          while (v26 != v23);
          if (v34 != v51) {
            goto LABEL_14;
          }
        }
LABEL_20:
        uint64_t v27 = (uint64_t *)(v49 + 8 * v25);
        long long v28 = (mlir::ForwardIterator *)*v27;
        if (v23 != (mlir::ForwardIterator *)*v27)
        {
          uint64_t v29 = 0;
          int v30 = 1;
          while (v28 != (mlir::ForwardIterator *)-4096)
          {
            if (v29) {
              BOOL v31 = 0;
            }
            else {
              BOOL v31 = v28 == (mlir::ForwardIterator *)-8192;
            }
            if (v31) {
              uint64_t v29 = v27;
            }
            int v32 = v25 + v30++;
            LODWORD(v25) = v32 & v24;
            uint64_t v27 = (uint64_t *)(v49 + 8 * v25);
            long long v28 = (mlir::ForwardIterator *)*v27;
            if (v23 == (mlir::ForwardIterator *)*v27) {
              goto LABEL_13;
            }
          }
          if (v29) {
            unint64_t v22 = v29;
          }
          else {
            unint64_t v22 = v27;
          }
          goto LABEL_12;
        }
LABEL_13:
        uint64_t v58 = &v53;
        uint64_t v59 = a5;
        v60[0] = __p;
LABEL_14:
        uint64_t v16 = *((void *)&v64 + 1);
        if (!*((void *)&v64 + 1)) {
          goto LABEL_6;
        }
      }
      unint64_t v22 = 0;
LABEL_12:
      llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>((uint64_t)&v49, v22, v48);
      uint64_t v23 = (mlir::ForwardIterator *)v48[0];
      goto LABEL_13;
    }
LABEL_6:
    uint64_t v17 = (void **)__p[1];
    unint64_t v18 = (void **)v63;
    *((void *)&v64 + 1) = 0;
    unint64_t v19 = v63 - (unint64_t)__p[1];
    if ((unint64_t)v63 - (unint64_t)__p[1] >= 0x11)
    {
      do
      {
        operator delete(*v17);
        unint64_t v18 = (void **)v63;
        uint64_t v17 = (void **)((char *)__p[1] + 8);
        __p[1] = v17;
        unint64_t v19 = v63 - (void)v17;
      }
      while ((void)v63 - (void)v17 > 0x10uLL);
    }
    unint64_t v20 = v19 >> 3;
    if (v20 == 1)
    {
      uint64_t v21 = 256;
    }
    else
    {
      if (v20 != 2) {
        goto LABEL_40;
      }
      uint64_t v21 = 512;
    }
    *(void *)&long long v64 = v21;
LABEL_40:
    if (v17 != v18)
    {
      do
      {
        uint64_t v36 = *v17++;
        operator delete(v36);
      }
      while (v17 != v18);
      if ((void *)v63 != __p[1]) {
        *(void *)&long long v63 = v63 + (((unint64_t)__p[1] - v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (++v11 == v12)
    {
      uint64_t v10 = a1;
      if (HIDWORD(v66) < v50) {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v67, v50, 8);
      }
LABEL_48:
      __p[0] = &v49;
      __p[1] = &v65;
      __p[0] = &v63;
      __p[1] = (void *)0xA00000000;
      v61[0] = 1;
      v61[1] = -4096;
      uint64_t v61[2] = -4096;
      v61[3] = -4096;
      v61[4] = -4096;
      uint64_t v37 = v65;
      unsigned int v38 = v66;
      if (v66)
      {
        uint64_t v39 = 8 * v66;
        do
        {
          uint64_t v40 = (mlir::ForwardIterator *)*v37++;
          uint64_t v58 = (mlir::GenericProgramPoint **)v61;
          uint64_t v59 = (uint64_t)&v49;
          v60[0] = &v53;
          v60[1] = __p;
          v39 -= 8;
        }
        while (v39);
        uint64_t v37 = v65;
        unsigned int v38 = v66;
        uint64_t v10 = a1;
      }
      uint64_t v58 = (mlir::GenericProgramPoint **)v60;
      uint64_t v59 = 0xA00000000;
      v57[0] = 1;
      v57[1] = -4096;
      void v57[2] = -4096;
      v57[3] = -4096;
      v57[4] = -4096;
      if (v38)
      {
        uint64_t v41 = 8 * v38;
        do
        {
          uint64_t v42 = (mlir::ForwardIterator *)*v37;
          {
            v48[0] = (uint64_t)v57;
            v48[1] = (uint64_t)&v49;
            v48[2] = (uint64_t)&v53;
            v48[3] = (uint64_t)&v58;
          }
          ++v37;
          v41 -= 8;
        }
        while (v41);
        unsigned int v43 = v66;
        *(void *)uint64_t v54 = v56;
        uint64_t v55 = 0x600000000;
        if (v66 < 7)
        {
          unsigned int v38 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v54, v56, v66, 8);
          unsigned int v43 = v66;
          unsigned int v38 = v55;
        }
        uint64_t v10 = a1;
        if (v43)
        {
          uint64_t v44 = v65;
          uint64_t v45 = 8 * v43;
          do
          {
            uint64_t v46 = *(void *)(*v44 + 24);
            if (v38 >= HIDWORD(v55))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v54, v56, v38 + 1, 8);
              unsigned int v38 = v55;
            }
            *(void *)(*(void *)v54 + 8 * v38) = v46;
            unsigned int v38 = v55 + 1;
            LODWORD(v55) = v55 + 1;
            ++v44;
            v45 -= 8;
          }
          while (v45);
        }
      }
      else
      {
        *(void *)uint64_t v54 = v56;
        uint64_t v55 = 0x600000000;
      }
      mlir::FusedLoc::get(*(uint64_t ***)v54, (mlir::MLIRContext *)v38, 0, *(mlir::UnknownLoc **)(v10 + 8));
    }
  }
}

void sub_1805DFDA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,llvm *a22,uint64_t a23,unsigned int a24)
{
}

void sub_1805DFDBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, llvm *a19, uint64_t a20,unsigned int a21)
{
}

void sub_1805DFDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,llvm *a34,uint64_t a35,unsigned int a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a48 != v76) {
    free(a48);
  }
  if (a56 != v75) {
    free(a56);
  }
  if (a64 != v74) {
    free(a64);
  }
  if ((a72 & 1) == 0) {
    llvm::deallocate_buffer(a73, (void *)(8 * a74));
  }
  if (STACK[0x208] != v77) {
    free((void *)STACK[0x208]);
  }
  if ((STACK[0x268] & 1) == 0) {
    llvm::deallocate_buffer((llvm *)STACK[0x270], (void *)(8 * LODWORD(STACK[0x278])));
  }
  if (STACK[0x290] != a13) {
    free((void *)STACK[0x290]);
  }
  uint64_t v79 = *(void **)(v78 - 208);
  if (v79 != (void *)a15) {
    free(v79);
  }
  llvm::deallocate_buffer(a34, (void *)(8 * a36));
}

uint64_t sub_1805DFE94()
{
  return v0;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::anonymous namespace'::GPURegionParallelEncodePass::convert(mlir::mpsx::GPUOp,BOOL *)::$_0>(uint64_t a1, uint64_t a2)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  if (**(void **)a1 != a2
  {
    uint64_t ParentOp = *(mlir::Block **)(a2 + 16);
    if (ParentOp) {
      uint64_t ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    }
    if (ParentOp == **(mlir::Block ***)(a1 + 16))
    {
      if (mlir::OpInterface<mlir::MPSRuntimeDynamicEncodeOpInterface,mlir::detail::MPSRuntimeDynamicEncodeOpInterfaceInterfaceTraits>::getInterfaceFor(a2))
      {
        uint64_t v10 = a2;
        uint64_t InterfaceFor = (void *)mlir::OpInterface<mlir::MPSRuntimeDynamicEncodeOpInterface,mlir::detail::MPSRuntimeDynamicEncodeOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
        if (a2)
        {
          int v5 = mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v10, *(void *)(a1 + 8));
LABEL_11:
          uint64_t v6 = *(void *)(a1 + 24);
          unsigned int v7 = *(_DWORD *)(v6 + 8);
          if (!v7)
          {
            LODWORD(v10) = v5;
            uint64_t InterfaceFor = v13;
            uint64_t v12 = 0x600000000;
            if (InterfaceFor != v13) {
              free(InterfaceFor);
            }
            uint64_t v6 = *(void *)(a1 + 24);
            unsigned int v7 = *(_DWORD *)(v6 + 8);
          }
          uint64_t v8 = *(void *)v6 + 72 * v7;
          if (*(_DWORD *)(v8 - 72) == v5)
          {
            uint64_t v9 = *(unsigned int *)(v8 - 56);
            if (v9 >= *(_DWORD *)(v8 - 52))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v8 - 64, (void *)(v8 - 48), v9 + 1, 8);
              LODWORD(v9) = *(_DWORD *)(v8 - 56);
            }
            *(void *)(*(void *)(v8 - 64) + 8 * v9) = a2;
            ++*(_DWORD *)(v8 - 56);
          }
          else
          {
            LODWORD(v10) = v5;
            uint64_t InterfaceFor = v13;
            v13[0] = a2;
            uint64_t v12 = 0x600000001;
            if (InterfaceFor != v13) {
              free(InterfaceFor);
            }
          }
          return;
        }
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t InterfaceFor = 0;
      }
      int v5 = 1;
      goto LABEL_11;
    }
  }
}

BOOL mlir::mpsx::anonymous namespace'::anonymous namespace'::shouldDuplicateOp(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 36))
  {
    uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
    if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v4) & 1) == 0)
    {
      uint64_t v10 = *(unsigned int *)(a2 + 36);
      if (v10) {
        uint64_t v11 = a2 - 16;
      }
      else {
        uint64_t v11 = 0;
      }
      if (!v10) {
        return 1;
      }
      uint64_t v12 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, v12);
        if (!mlir::mps::ConstantRuntimeAnalysis::isConstant(a1, NextResultAtOffset)) {
          break;
        }
        if (v10 == ++v12) {
          return 1;
        }
      }
    }
  }
  int v5 = *(void **)(*(void *)(a2 + 48) + 16);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::VariableFromTensorOp,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::mpsx::VarHandleOp,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::mps::ReadVariableOp,void>::id)
  {
    BOOL v7 = v5 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
    if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v16 = v8;
    if (!v7) {
      return 0;
    }
    uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v16);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(Input);
    if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
      return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf) != 4;
    }
  }
  return 1;
}

void llvm::SmallVectorTemplateBase<mlir::mpsx::anonymous namespace'::anonymous namespace'::RegionInfo,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v15 = 0;
  uint64_t v3 = (char *)(a1 + 16);
  uint64_t v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 72, &v15);
  int v5 = *(char **)a1;
  int v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = &v5[72 * v6];
    do
    {
      uint64_t v9 = &v4[v7];
      uint64_t v10 = &v5[v7];
      *(_DWORD *)uint64_t v9 = *(_DWORD *)&v5[v7];
      *((void *)v9 + 2) = 0x600000000;
      *((void *)v9 + 1) = &v4[v7 + 24];
      if (*(_DWORD *)&v5[v7 + 16]) {
        llvm::SmallVectorImpl<mlir::Value>::operator=((uint64_t)&v4[v7 + 8], (uint64_t)(v10 + 8));
      }
      v7 += 72;
    }
    while (v10 + 72 != v8);
    int v5 = *(char **)a1;
    uint64_t v11 = *(unsigned int *)(a1 + 8);
    if (v11)
    {
      uint64_t v12 = 72 * v11;
      do
      {
        uint64_t v13 = *(char **)&v5[v12 - 64];
        if (&v5[v12 - 48] != v13) {
          free(v13);
        }
        v12 -= 72;
      }
      while (v12);
      int v5 = *(char **)a1;
    }
  }
  int v14 = v15;
  if (v5 != v3) {
    free(v5);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v14;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::GPUOp,std::string &,mlir::IRMapping &,llvm::SmallVector<mlir::Value,10u> &,llvm::SmallVector<mlir::Type,6u> &,llvm::SmallVector<mlir::Value,10u> &,llvm::SmallVector<mlir::Type,6u> &,llvm::SmallVector<mlir::Operation *,10u> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v37[38] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  uint64_t v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.gpu", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    __int16 v32 = 1283;
    void v31[2] = (uint64_t)"mpsx.gpu";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v37);
    llvm::report_fatal_error((llvm::Twine *)v37, 1);
  }
  mlir::OperationState::OperationState(v37, a2, v19);
  int v21 = *((char *)a3 + 23);
  uint64_t v22 = a3[1];
  if (v21 >= 0)
  {
    uint64_t v23 = v21;
  }
  else
  {
    a3 = (void *)*a3;
    uint64_t v23 = v22;
  }
  mlir::ValueRange::ValueRange((unint64_t *)v36, *(void *)a5, *(unsigned int *)(a5 + 8));
  mlir::ValueRange::ValueRange(v35, *(void *)a6, *(unsigned int *)(a6 + 8));
  mlir::ValueRange::ValueRange((unint64_t *)v34, *(void *)a7, *(unsigned int *)(a7 + 8));
  mlir::ValueRange::ValueRange(v33, *(void *)a8, *(unsigned int *)(a8 + 8));
  mlir::mpsx::ANEOp::build((uint64_t)a1, (uint64_t)v37, a3, v23, a4, v36[0], (uint64_t)v36[1], v24, v35[0], v35[1], v34[0], (unint64_t)v34[1], v33[0], v33[1], *(mlir::Operation ***)a9, *(unsigned int *)(a9 + 8), *(void **)a10, *(void *)(a10 + 8));
  uint64_t v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v37);
  if (*(_UNKNOWN **)(*((void *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id) {
    BOOL v26 = v25;
  }
  else {
    BOOL v26 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v37);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::RegionCall,mlir::mpsx::GPUOp &,mlir::placement::RegionType,llvm::SmallVector<mlir::Value,10u> &>(mlir::MLIRContext **a1, uint64_t a2, mlir::SymbolRefAttr **a3, int *a4, uint64_t a5)
{
  void v24[38] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.region_call", (const unsigned __int8 *)0x15, Context);
  if (!v12)
  {
    __int16 v22 = 1283;
    unint64_t v21[2] = (uint64_t)"placement.region_call";
    v21[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  uint64_t v13 = *a3;
  int v14 = *a4;
  mlir::ValueRange::ValueRange(v23, *(void *)a5, *(unsigned int *)(a5 + 8));
  mlir::placement::RegionCall::build(a1, (uint64_t)v24, v13, v14, v23[0], v23[1]);
  unint64_t v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v16;
}

uint64_t mlir::RewriterBase::replaceAllUsesWith(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a2;
  uint64_t v22 = 0;
  uint64_t v23 = a4;
  uint64_t v24 = 0;
  if (a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      if (v23 == a4 && v11 == a5) {
        break;
      }
      int v14 = (uint64_t **)mlir::ValueRange::dereference_iterator(&v21, v10);
      uint64_t result = mlir::ValueRange::dereference_iterator(&v23, v24);
      unint64_t v15 = *v14;
      if (*v14)
      {
        uint64_t v16 = (uint64_t *)result;
        do
        {
          uint64_t v17 = (uint64_t *)*v15;
          uint64_t v18 = v15[2];
          (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 72))(v9, v18);
          uint64_t v19 = (uint64_t *)v15[1];
          if (v19)
          {
            *uint64_t v19 = *v15;
            if (*v15) {
              *(void *)(*v15 + 8) = v15[1];
            }
          }
          v15[3] = (uint64_t)v16;
          v15[1] = (uint64_t)v16;
          uint64_t v20 = *v16;
          *unint64_t v15 = *v16;
          if (v20) {
            *(void *)(v20 + 8) = v15;
          }
          *uint64_t v16 = (uint64_t)v15;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 80))(v9, v18);
          unint64_t v15 = v17;
        }
        while (v17);
      }
      uint64_t v10 = v22 + 1;
      uint64_t v11 = v24 + 1;
      ++v22;
      ++v24;
    }
    while (v21 != a2 || v10 != a3);
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::anonymous namespace'::anonymous namespace'::outlineRegion(mlir::RewriterBase &,mlir::mpsx::GPUOp,llvm::ArrayRef<mlir::Operation *>,mlir::mps::ConstantRuntimeAnalysis &,unsigned long long,BOOL,BOOL)::$_0>(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    uint64_t v2 = *(unsigned int *)(a2 + 68);
    if (v2)
    {
      uint64_t v4 = (uint64_t *)(*(void *)(a2 + 72) + 24);
      do
      {
        uint64_t v14 = *v4;
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v14);
        if (DefiningOp)
        {
          uint64_t v6 = DefiningOp;
          uint64_t ParentOp = *(mlir::Block **)(DefiningOp + 16);
          if (ParentOp) {
            uint64_t ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
          }
          if (ParentOp == **(mlir::Block ***)a1
          {
            uint64_t v8 = *(void **)(a1 + 16);
            uint64_t v9 = v8[2];
            uint64_t v10 = v8[1];
            if (v9 == v10) {
              uint64_t v11 = 0;
            }
            else {
              uint64_t v11 = ((v9 - v10) << 6) - 1;
            }
            uint64_t v12 = v8[5];
            unint64_t v13 = v12 + v8[4];
            if (v11 == v13)
            {
              std::deque<mlir::Operation *>::__add_back_capacity(*(void *)(a1 + 16));
              uint64_t v10 = v8[1];
              uint64_t v12 = v8[5];
              unint64_t v13 = v8[4] + v12;
            }
            *(void *)(*(void *)(v10 + ((v13 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v13 & 0x1FF)) = v6;
            v8[5] = v12 + 1;
          }
        }
        v4 += 4;
        --v2;
      }
      while (v2);
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::anonymous namespace'::anonymous namespace'::outlineRegion(mlir::RewriterBase &,mlir::mpsx::GPUOp,llvm::ArrayRef<mlir::Operation *>,mlir::mps::ConstantRuntimeAnalysis &,unsigned long long,BOOL,BOOL)::$_1>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)*a1;
  uint64_t v4 = *(unsigned int *)(*a1 + 16);
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (uint64_t *)(v3 + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_8;
    }
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v4 - 1);
      uint64_t v7 = *(void *)(v3 + 8 * v5);
      if (v7 == a2)
      {
        uint64_t v6 = (uint64_t *)(v3 + 8 * v5);
        goto LABEL_8;
      }
    }
  }
  uint64_t v6 = (uint64_t *)(v3 + 8 * v4);
LABEL_8:
  if (v6 != (uint64_t *)(v3 + 8 * v4))
  {
    uint64_t v10 = a1[1];
    uint64_t v11 = *(unsigned int *)(v10 + 8);
    if (v11 >= *(_DWORD *)(v10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1[1], (void *)(v10 + 16), v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(v10 + 8);
    }
    *(void *)(*(void *)v10 + 8 * v11) = a2;
    ++*(_DWORD *)(v10 + 8);
  }
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::anonymous namespace'::anonymous namespace'::outlineRegion(mlir::RewriterBase &,mlir::mpsx::GPUOp,llvm::ArrayRef<mlir::Operation *>,mlir::mps::ConstantRuntimeAnalysis &,unsigned long long,BOOL,BOOL)::$_2>(uint64_t result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    uint64_t v2 = *(unsigned int *)(a2 + 68);
    if (v2)
    {
      uint64_t v3 = result;
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)(a2 + 72);
      do
      {
        unint64_t v23 = *(void *)(v5 + 32 * v4 + 24);
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v23);
        uint64_t v7 = *(void *)v3;
        uint64_t v24 = 0;
        uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v7, &v23, &v24);
        if (result)
        {
          int v8 = v24;
          if ((*(_DWORD *)v7 & 1) == 0) {
            goto LABEL_13;
          }
        }
        else
        {
          if ((*(_DWORD *)v7 & 1) == 0)
          {
            int v8 = (void *)(*(void *)(v7 + 8) + 8 * *(unsigned int *)(v7 + 16));
LABEL_13:
            if (v8 != (void *)(*(void *)(v7 + 8) + 8 * *(unsigned int *)(v7 + 16))) {
              goto LABEL_4;
            }
            goto LABEL_14;
          }
          int v8 = (void *)(v7 + 40);
        }
        if (v8 != (void *)(v7 + 40)) {
          goto LABEL_4;
        }
LABEL_14:
        if (!DefiningOp) {
          goto LABEL_30;
        }
        int v9 = *(uint64_t **)(v3 + 8);
        uint64_t v10 = **(void **)(v3 + 16);
        if (v10 == DefiningOp)
        {
          uint64_t DefiningOp = 0;
        }
        else
        {
          while (1)
          {
            uint64_t result = *(void *)(DefiningOp + 16);
            if (result) {
              uint64_t result = mlir::Block::getParentOp((mlir::Block *)result);
            }
            if (result == v10) {
              break;
            }
            uint64_t v11 = *(mlir::Block **)(DefiningOp + 16);
            uint64_t DefiningOp = 0;
            if (v11) {
              uint64_t DefiningOp = mlir::Block::getParentOp(v11);
            }
          }
        }
        uint64_t v12 = *v9;
        uint64_t v13 = *((unsigned int *)v9 + 4);
        if (v13)
        {
          LODWORD(v14) = ((DefiningOp >> 4) ^ (DefiningOp >> 9)) & (v13 - 1);
          unint64_t v15 = (uint64_t *)(v12 + 8 * v14);
          uint64_t v16 = *v15;
          if (*v15 == DefiningOp) {
            goto LABEL_29;
          }
          int v17 = 1;
          while (v16 != -4096)
          {
            int v18 = v14 + v17++;
            uint64_t v14 = v18 & (v13 - 1);
            uint64_t v16 = *(void *)(v12 + 8 * v14);
            if (v16 == DefiningOp)
            {
              unint64_t v15 = (uint64_t *)(v12 + 8 * v14);
              goto LABEL_29;
            }
          }
        }
        unint64_t v15 = (uint64_t *)(v12 + 8 * v13);
LABEL_29:
        if (v15 == (uint64_t *)(v12 + 8 * v13))
        {
LABEL_30:
          uint64_t v19 = *(void *)(v3 + 24);
          unint64_t v20 = v23;
          unint64_t v21 = *(unsigned int *)(v19 + 8);
          if (v21 >= *(unsigned int *)(v19 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(v3 + 24), (void *)(v19 + 16), v21 + 1, 8);
            unint64_t v21 = *(unsigned int *)(v19 + 8);
          }
          *(void *)(*(void *)v19 + 8 * v21) = v20;
          ++*(_DWORD *)(v19 + 8);
          uint64_t v22 = *(_DWORD **)v3;
          uint64_t v24 = 0;
          uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t)v22, &v23, &v24);
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(v22, (uint64_t)&v23, &v23, v24);
            *(void *)uint64_t result = v23;
          }
        }
LABEL_4:
        ++v4;
      }
      while (v4 != v2);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v12 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  unint64_t v5 = *a2;
  unint64_t v6 = 0x1E8EB8000uLL;
  {
    unint64_t v23 = a3;
    unint64_t v21 = a2;
    uint64_t v24 = v3;
    int v22 = v4;
    unint64_t v25 = v5;
    unint64_t v6 = 0x1E8EB8000uLL;
    uint64_t v3 = v24;
    unint64_t v5 = v25;
    int v4 = v22;
    a2 = v21;
    a3 = v23;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      unint64_t v6 = 0x1E8EB8000;
      uint64_t v3 = v24;
      unint64_t v5 = v25;
      int v4 = v22;
      a2 = v21;
      a3 = v23;
    }
  }
  uint64_t v7 = (*(void *)(v6 + 3024) + 8 * v5) ^ HIDWORD(v5);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
  int v9 = -348639895 * ((v8 >> 47) ^ v8);
  int v10 = v4 - 1;
  unsigned int v11 = v9 & (v4 - 1);
  uint64_t v12 = (void *)(v3 + 8 * v11);
  uint64_t v13 = *v12;
  if (*a2 == *v12)
  {
    uint64_t result = 1;
  }
  else
  {
    unint64_t v15 = 0;
    int v16 = 1;
    uint64_t result = 1;
    while (v13 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v13 == -8192;
      }
      if (v17) {
        unint64_t v15 = v12;
      }
      unsigned int v18 = v11 + v16++;
      unsigned int v11 = v18 & v10;
      uint64_t v12 = (void *)(v3 + 8 * (v18 & v10));
      uint64_t v13 = *v12;
      if (*a2 == *v12) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v15) {
      uint64_t v12 = v15;
    }
  }
LABEL_8:
  *a3 = v12;
  return result;
}

void *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(_DWORD *a1, uint64_t a2, unint64_t *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow((uint64_t)a1, v7);
  int v9 = 0;
  llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow(uint64_t result, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = result;
  v37[3] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(unsigned char *)result & 1) == 0)
  {
    unint64_t v8 = (int64x2_t *)(result + 8);
    unsigned int v7 = *(llvm **)(result + 8);
    uint64_t v9 = *(unsigned int *)(result + 16);
    if (v2 > 4)
    {
      buffer = (int64x2_t *)llvm::allocate_buffer(8 * v2, (std::align_val_t)8uLL);
      *(void *)(v3 + 8) = buffer;
      *(void *)(v3 + 16) = v2;
      int v18 = *(_DWORD *)v3;
      int v10 = (unint64_t *)((char *)v7 + 8 * v9);
      *(void *)uint64_t v3 = *(_DWORD *)v3 & 1;
      if ((v18 & 1) == 0)
      {
        int v19 = &buffer->i8[8 * v2];
        unint64_t v8 = buffer;
        goto LABEL_21;
      }
    }
    else
    {
      int v10 = (unint64_t *)((char *)v7 + 8 * v9);
      *(void *)uint64_t result = 1;
    }
    int v19 = (char *)(v3 + 40);
LABEL_21:
    unint64_t v20 = v19 - (char *)v8 - 8;
    if (v20 >= 0x18)
    {
      uint64_t v23 = (v20 >> 3) + 1;
      unint64_t v21 = &v8->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v24 = v8 + 1;
      int64x2_t v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24[-1] = v25;
        *uint64_t v24 = v25;
        v24 += 2;
        v26 -= 4;
      }
      while (v26);
      if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        if (v9)
        {
          uint64_t v27 = (unint64_t *)v7;
          do
          {
            if ((*v27 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              uint64_t v36 = 0;
              llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v3, v27, &v36);
              *uint64_t v36 = *v27;
              *(_DWORD *)v3 += 2;
            }
            ++v27;
          }
          while (v27 != v10);
        }
        llvm::deallocate_buffer(v7, (void *)(8 * v9));
      }
    }
    else
    {
      unint64_t v21 = (char *)v8;
    }
    do
    {
      *(void *)unint64_t v21 = -4096;
      v21 += 8;
    }
    while (v21 != v19);
    goto LABEL_31;
  }
  unsigned int v11 = (int64x2_t *)(result + 8);
  uint64_t v12 = (unint64_t *)&v36;
  if ((*(void *)(result + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    uint64_t v36 = *(unint64_t **)(result + 8);
    uint64_t v12 = v37;
  }
  unint64_t v13 = *(void *)(result + 16);
  if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000) {
    *v12++ = v13;
  }
  unint64_t v14 = *(void *)(result + 24);
  if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000) {
    *v12++ = v14;
  }
  unint64_t v15 = *(void *)(result + 32);
  if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000) {
    *v12++ = v15;
  }
  int v16 = *(_DWORD *)result;
  if (v2 < 5)
  {
    unsigned int v2 = v13;
  }
  else
  {
    *(_DWORD *)uint64_t result = v16 & 0xFFFFFFFE;
    uint64_t result = (uint64_t)llvm::allocate_buffer(8 * v2, (std::align_val_t)8uLL);
    *(void *)(v3 + 8) = result;
    *(void *)(v3 + 16) = v2;
    int v16 = *(_DWORD *)v3;
  }
  *(void *)uint64_t v3 = v16 & 1;
  if (v16)
  {
    int v22 = (char *)(v3 + 40);
  }
  else
  {
    if (!v2) {
      goto LABEL_44;
    }
    unsigned int v11 = (int64x2_t *)v11->i64[0];
    int v22 = &v11->i8[8 * v2];
  }
  unint64_t v28 = v22 - (char *)v11 - 8;
  if (v28 < 0x18)
  {
    uint64_t v29 = (uint64_t *)v11;
    do
LABEL_43:
      *v29++ = -4096;
    while (v29 != (uint64_t *)v22);
    goto LABEL_44;
  }
  uint64_t v30 = (v28 >> 3) + 1;
  uint64_t v29 = &v11->i64[v30 & 0x3FFFFFFFFFFFFFFCLL];
  BOOL v31 = v11 + 1;
  int64x2_t v32 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v31[-1] = v32;
    *BOOL v31 = v32;
    v31 += 2;
    v33 -= 4;
  }
  while (v33);
  if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_43;
  }
LABEL_44:
  if (&v36 != (unint64_t **)v12)
  {
    unsigned int v34 = (unint64_t *)&v36;
    do
    {
      if ((*v34 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v35 = 0;
        uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v3, v34, &v35);
        unint64_t *v35 = *v34;
        *(_DWORD *)v3 += 2;
      }
      ++v34;
    }
    while (v34 != v12);
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::anonymous namespace'::anonymous namespace'::outlineRegion(mlir::RewriterBase &,mlir::mpsx::GPUOp,llvm::ArrayRef<mlir::Operation *>,mlir::mps::ConstantRuntimeAnalysis &,unsigned long long,BOOL,BOOL)::$_3>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 36);
  if (v2) {
    uint64_t v3 = a2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t result = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, v5);
      unint64_t v24 = result;
      int v6 = *(void **)result;
      if (*(void *)result) {
        break;
      }
LABEL_6:
      if (++v5 == v2) {
        return result;
      }
    }
    while (1)
    {
      uint64_t ParentOp = v6[2];
      uint64_t v8 = *(void *)v4;
      int64x2_t v25 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v8, &v24, &v25);
      if (result)
      {
        uint64_t v9 = v25;
        if (*(_DWORD *)v8) {
          goto LABEL_15;
        }
      }
      else
      {
        if (*(_DWORD *)v8)
        {
          uint64_t v9 = (void *)(v8 + 40);
LABEL_15:
          if (v9 == (void *)(v8 + 40)) {
            goto LABEL_19;
          }
          goto LABEL_9;
        }
        uint64_t v9 = (void *)(*(void *)(v8 + 8) + 8 * *(unsigned int *)(v8 + 16));
      }
      if (v9 == (void *)(*(void *)(v8 + 8) + 8 * *(unsigned int *)(v8 + 16)))
      {
LABEL_19:
        int v10 = *(uint64_t **)(v4 + 8);
        uint64_t v11 = **(void **)(v4 + 16);
        if (v11 == ParentOp)
        {
          uint64_t ParentOp = 0;
        }
        else
        {
          while (1)
          {
            uint64_t result = *(void *)(ParentOp + 16);
            if (result) {
              uint64_t result = mlir::Block::getParentOp((mlir::Block *)result);
            }
            if (result == v11) {
              break;
            }
            uint64_t v12 = *(mlir::Block **)(ParentOp + 16);
            uint64_t ParentOp = 0;
            if (v12) {
              uint64_t ParentOp = mlir::Block::getParentOp(v12);
            }
          }
        }
        uint64_t v13 = *v10;
        uint64_t v14 = *((unsigned int *)v10 + 4);
        if (!v14) {
          goto LABEL_32;
        }
        LODWORD(v15) = ((ParentOp >> 4) ^ (ParentOp >> 9)) & (v14 - 1);
        int v16 = (uint64_t *)(v13 + 8 * v15);
        uint64_t v17 = *v16;
        if (*v16 != ParentOp)
        {
          int v18 = 1;
          while (v17 != -4096)
          {
            int v19 = v15 + v18++;
            uint64_t v15 = v19 & (v14 - 1);
            uint64_t v17 = *(void *)(v13 + 8 * v15);
            if (v17 == ParentOp)
            {
              int v16 = (uint64_t *)(v13 + 8 * v15);
              goto LABEL_33;
            }
          }
LABEL_32:
          int v16 = (uint64_t *)(v13 + 8 * v14);
        }
LABEL_33:
        if (v16 == (uint64_t *)(v13 + 8 * v14))
        {
          uint64_t v20 = *(void *)(v4 + 24);
          unint64_t v21 = v24;
          unint64_t v22 = *(unsigned int *)(v20 + 8);
          if (v22 >= *(unsigned int *)(v20 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(v4 + 24), (void *)(v20 + 16), v22 + 1, 8);
            unint64_t v22 = *(unsigned int *)(v20 + 8);
          }
          *(void *)(*(void *)v20 + 8 * v22) = v21;
          ++*(_DWORD *)(v20 + 8);
          uint64_t v23 = *(_DWORD **)v4;
          int64x2_t v25 = 0;
          uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t)v23, &v24, &v25);
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(v23, (uint64_t)&v24, &v24, v25);
            *(void *)uint64_t result = v24;
          }
        }
      }
LABEL_9:
      int v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_6;
      }
    }
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::anonymous namespace'::GPURegionParallelEncodePass::convert(mlir::mpsx::GPUOp,BOOL *)::$_1>(uint64_t a1, uint64_t a2)
{
  uint64_t ParentOp = *(mlir::Block **)(a2 + 16);
  if (ParentOp) {
    uint64_t ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  }
  if (ParentOp == **(mlir::Block ***)a1
  {
    uint64_t v5 = *(unsigned int *)(a2 + 36);
    uint64_t v6 = v5 ? a2 - 16 : 0;
    uint64_t v17 = v6;
    uint64_t v18 = v5;
    mlir::ResultRange::use_begin(&v17, (uint64_t *)&v19);
    uint64_t v7 = *(unsigned int *)(a2 + 36);
    uint64_t v8 = v7 ? a2 - 16 : 0;
    uint64_t v17 = v8;
    uint64_t v18 = v7;
    mlir::ResultRange::use_end(&v17, v15);
    uint64_t v9 = v20;
    uint64_t v10 = v16;
    if (v20 != v16)
    {
      while (1)
      {
        uint64_t v11 = *(void *)(v9 + 16);
        uint64_t v12 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
        if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v11 + 48) + 32))(*(void *)(v11 + 48), v12)) {
          break;
        }
        mlir::ResultRange::UseIterator::operator++((uint64_t *)&v19);
        uint64_t v9 = v20;
        if (v20 == v10) {
          return;
        }
      }
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v14 = *(unsigned int *)(v13 + 8);
      if (v14 >= *(_DWORD *)(v13 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(v13 + 16), v14 + 1, 8);
        LODWORD(v14) = *(_DWORD *)(v13 + 8);
      }
      *(void *)(*(void *)v13 + 8 * v14) = a2;
      ++*(_DWORD *)(v13 + 8);
    }
  }
}

mlir::Operation **mlir::mpsx::FuncValidation::create(mlir::mpsx::FuncValidation *this, mlir::Operation *a2, uint64_t a3)
{
  uint64_t v30 = a3;
  BOOL v31 = a2;
  int v5 = *((_DWORD *)this + 4);
  if (v5)
  {
    uint64_t v6 = *(void *)this;
    int v7 = v5 - 1;
    unsigned int v8 = v7 & (37 * a3);
    inserted = (uint64_t *)(*(void *)this + 16 * v8);
    uint64_t v10 = *inserted;
    if (*inserted == a3) {
      goto LABEL_14;
    }
    uint64_t v11 = 0;
    int v12 = 1;
    while (v10 != -1)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == -2;
      }
      if (v13) {
        uint64_t v11 = inserted;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      inserted = (uint64_t *)(v6 + 16 * v8);
      uint64_t v10 = *inserted;
      if (*inserted == a3) {
        goto LABEL_14;
      }
    }
    if (v11) {
      uint64_t v15 = v11;
    }
    else {
      uint64_t v15 = inserted;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::Operation *,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::Operation *>>,unsigned long long,mlir::Operation *,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::Operation *>>::InsertIntoBucket<unsigned long long const&>((uint64_t)this, v15, &v30);
LABEL_14:
  inserted[1] = (uint64_t)a2;
  uint64_t v18 = *((void *)this + 3);
  uint64_t v17 = (char *)this + 24;
  uint64_t v16 = v18;
  int v19 = *((_DWORD *)v17 + 4);
  if (!v19)
  {
    uint64_t v28 = 0;
LABEL_26:
    unint64_t v22 = (mlir::Operation **)llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,mlir::mpsx::OpValidation,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::mpsx::OpValidation>>,mlir::Operation *,mlir::mpsx::OpValidation,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::mpsx::OpValidation>>::InsertIntoBucket<mlir::Operation * const&>((uint64_t)v17, v28, (uint64_t *)&v31);
    return v22 + 1;
  }
  int v20 = v19 - 1;
  unsigned int v21 = ((a2 >> 4) ^ (a2 >> 9)) & v20;
  unint64_t v22 = (mlir::Operation **)(v16 + 40 * v21);
  uint64_t v23 = *v22;
  if (*v22 != a2)
  {
    unint64_t v24 = 0;
    int v25 = 1;
    while (v23 != (mlir::Operation *)-4096)
    {
      if (v24) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v23 == (mlir::Operation *)-8192;
      }
      if (v26) {
        unint64_t v24 = v22;
      }
      unsigned int v27 = v21 + v25++;
      unsigned int v21 = v27 & v20;
      unint64_t v22 = (mlir::Operation **)(v16 + 40 * v21);
      uint64_t v23 = *v22;
      if (*v22 == a2) {
        return v22 + 1;
      }
    }
    if (v24) {
      uint64_t v28 = (uint64_t)v24;
    }
    else {
      uint64_t v28 = (uint64_t)v22;
    }
    goto LABEL_26;
  }
  return v22 + 1;
}

mlir::Operation **mlir::mpsx::createANERegionFormationPass@<X0>(mlir::mpsx *this@<X0>, void *a2@<X8>)
{
  int v5 = (char *)operator new(0xAA8uLL);
  *((_DWORD *)v6 + 118) = *(_DWORD *)this;
  uint64_t v7 = *((void *)v6 + 117);
  if (!v7) {
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, mlir::mpsx *))(*(void *)v7 + 48))(v7, this);
  v5[1088] = *((unsigned char *)this + 7);
  uint64_t v8 = *((void *)v5 + 143);
  if (!v8) {
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v8 + 48))(v8, (char *)this + 7);
  v5[1296] = *((unsigned char *)this + 4);
  uint64_t v9 = *((void *)v5 + 169);
  if (!v9) {
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v9 + 48))(v9, (char *)this + 4);
  v5[1712] = *((unsigned char *)this + 5);
  uint64_t v10 = *((void *)v5 + 221);
  if (!v10) {
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v10 + 48))(v10, (char *)this + 5);
  v5[1504] = *((unsigned char *)this + 6);
  uint64_t v11 = *((void *)v5 + 195);
  if (!v11) {
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v11 + 48))(v11, (char *)this + 6);
  int v12 = *((_DWORD *)this + 2);
  *((_DWORD *)v5 + 480) = v12;
  int v19 = v12;
  uint64_t v13 = *((void *)v5 + 247);
  if (!v13) {
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, int *))(*(void *)v13 + 48))(v13, &v19);
  std::string::operator=((std::string *)v5 + 106, (const std::string *)((char *)this + 16));
  uint64_t v14 = *((void *)v5 + 330);
  if (v14
    && ((*(void (**)(uint64_t, char *))(*(void *)v14 + 48))(v14, (char *)this + 16),
        v5[2336] = *((unsigned char *)this + 40),
        (uint64_t v15 = *((void *)v5 + 299)) != 0))
  {
    (*(void (**)(uint64_t, char *))(*(void *)v15 + 48))(v15, (char *)this + 40);
    *((void *)v5 + 333) = *((void *)this + 13);
    uint64_t result = (mlir::Operation **)std::string::operator=((std::string *)(v5 + 2672), (const std::string *)this + 2);
    if (*((unsigned char *)this + 96))
    {
      if (v5[2720])
      {
        *((void *)v5 + 338) = *((void *)this + 10);
        *((_DWORD *)v5 + 678) = *((_DWORD *)this + 22);
      }
      else
      {
        *((void *)v5 + 337) = &unk_1EC9CA678;
        *((void *)v5 + 338) = *((void *)this + 10);
        *((_DWORD *)v5 + 678) = *((_DWORD *)this + 22);
        v5[2720] = 1;
      }
    }
    *a2 = v5;
  }
  else
  {
LABEL_14:
    uint64_t v17 = (mlir::Operation **)std::__throw_bad_function_call[abi:nn180100]();
    return llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::FuncValidation::FuncValidation(mlir::func::FuncOp)::$_0>(v17, v18);
  }
  return result;
}

mlir::Operation **llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::FuncValidation::FuncValidation(mlir::func::FuncOp)::$_0>(mlir::Operation **result, mlir::Operation *a2)
{
  if (*(mlir::Operation **)*result != a2)
  {
    uint64_t v2 = result[1];
    uint64_t v3 = result[2];
    uint64_t v4 = (*(void *)v3)++;
    return mlir::mpsx::FuncValidation::create(v2, a2, v4);
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,mlir::Operation *,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::Operation *>>,unsigned long long,mlir::Operation *,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::Operation *>>::InsertIntoBucket<unsigned long long const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<unsigned long long,mlir::Operation *,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::Operation *>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = (37 * *a3) & v10;
  a2 = (uint64_t *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -1)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -2;
      }
      if (v15) {
        uint64_t v13 = a2;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a2 = (uint64_t *)(*(void *)a1 + 16 * (v16 & v10));
      uint64_t v12 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void *llvm::DenseMap<unsigned long long,mlir::Operation *,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,mlir::Operation *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_41;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      int v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -1;
        *uint64_t v13 = -1;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_41:
        do
        {
          *int v10 = -1;
          v10 += 2;
        }
        while (v10 != &result[2 * v11]);
      }
    }
    if (v3)
    {
      int v15 = 0;
      int v16 = v11 - 1;
      uint64_t v17 = v4;
      do
      {
        uint64_t v25 = *(void *)v17;
        if (*(void *)v17 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v26 = (37 * v25) & v16;
          uint64_t v23 = (void *)(*(void *)a1 + 16 * v26);
          uint64_t v27 = *v23;
          if (v25 != *v23)
          {
            uint64_t v28 = 0;
            int v29 = 1;
            while (v27 != -1)
            {
              if (v28) {
                BOOL v30 = 0;
              }
              else {
                BOOL v30 = v27 == -2;
              }
              if (v30) {
                uint64_t v28 = v23;
              }
              unsigned int v31 = v26 + v29++;
              unsigned int v26 = v31 & v16;
              uint64_t v23 = (void *)(*(void *)a1 + 16 * (v31 & v16));
              uint64_t v27 = *v23;
              if (v25 == *v23) {
                goto LABEL_23;
              }
            }
            if (v28) {
              uint64_t v23 = v28;
            }
          }
LABEL_23:
          uint64_t v24 = *((void *)v17 + 1);
          void *v23 = v25;
          v23[1] = v24;
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        uint64_t v17 = (llvm *)((char *)v17 + 16);
      }
      while (v17 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    if (((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_18;
    }
    uint64_t v19 = ((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    int v10 = &result[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    int v20 = result + 2;
    uint64_t v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -1;
      *int v20 = -1;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      unint64_t v22 = &result[2 * v18];
      do
      {
        *int v10 = -1;
        v10 += 2;
      }
      while (v10 != v22);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,mlir::mpsx::OpValidation,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::mpsx::OpValidation>>,mlir::Operation *,mlir::mpsx::OpValidation,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::mpsx::OpValidation>>::InsertIntoBucket<mlir::Operation * const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *(void *)a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Operation *,mlir::mpsx::OpValidation,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::mpsx::OpValidation>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = *(void *)a1 + 40 * v11;
  uint64_t v12 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a2;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a2 = *(void *)a1 + 40 * (v16 & v10);
      uint64_t v12 = *(void *)a2;
      if (v8 == *(void *)a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)a2 = *a3;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  return a2;
}

void *llvm::DenseMap<mlir::Operation *,mlir::mpsx::OpValidation,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::mpsx::OpValidation>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    uint64_t v10 = 5 * v3;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,mlir::mpsx::OpValidation,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::mpsx::OpValidation>>,mlir::Operation *,mlir::mpsx::OpValidation,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::mpsx::OpValidation>>::moveFromOldBuckets(a1, v4, &v4[v10]);
    llvm::deallocate_buffer((llvm *)v4, (void *)(v10 * 8));
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    unint64_t v12 = 40 * v11 - 40;
    if (v12 < 0x28)
    {
      uint64_t v13 = result;
LABEL_14:
      uint64_t v17 = &result[5 * v11];
      do
      {
        *uint64_t v13 = -4096;
        v13 += 5;
      }
      while (v13 != v17);
      return result;
    }
    unint64_t v14 = v12 / 0x28 + 1;
    uint64_t v13 = &result[5 * (v14 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v15 = v14 & 0xFFFFFFFFFFFFFFELL;
    unsigned int v16 = result;
    do
    {
      *unsigned int v16 = -4096;
      v16[5] = -4096;
      v16 += 10;
      v15 -= 2;
    }
    while (v15);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,mlir::mpsx::OpValidation,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::mpsx::OpValidation>>,mlir::Operation *,mlir::mpsx::OpValidation,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::mpsx::OpValidation>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a2;
  *(void *)(result + 8) = 0;
  unsigned int v4 = *(_DWORD *)(result + 16);
  if (v4)
  {
    unint64_t v5 = *(void **)result;
    unint64_t v6 = 40 * v4 - 40;
    if (v6 < 0x28)
    {
      int v7 = *(void **)result;
LABEL_7:
      unsigned int v11 = &v5[5 * v4];
      do
      {
        *int v7 = -4096;
        v7 += 5;
      }
      while (v7 != v11);
      goto LABEL_9;
    }
    unint64_t v8 = v6 / 0x28 + 1;
    int v7 = &v5[5 * (v8 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFELL;
    uint64_t v10 = *(void **)result;
    do
    {
      *uint64_t v10 = -4096;
      v10[5] = -4096;
      v10 += 10;
      v9 -= 2;
    }
    while (v9);
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      uint64_t v15 = *v3;
      if ((*v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v16 = *(_DWORD *)(result + 16) - 1;
        unsigned int v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
        uint64_t v12 = *(void *)result + 40 * v17;
        uint64_t v18 = *(void *)v12;
        if (v15 != *(void *)v12)
        {
          uint64_t v19 = 0;
          int v20 = 1;
          while (v18 != -4096)
          {
            if (v19) {
              BOOL v21 = 0;
            }
            else {
              BOOL v21 = v18 == -8192;
            }
            if (v21) {
              uint64_t v19 = v12;
            }
            unsigned int v22 = v17 + v20++;
            unsigned int v17 = v22 & v16;
            uint64_t v12 = *(void *)result + 40 * (v22 & v16);
            uint64_t v18 = *(void *)v12;
            if (v15 == *(void *)v12) {
              goto LABEL_13;
            }
          }
          if (v19) {
            uint64_t v12 = v19;
          }
        }
LABEL_13:
        *(void *)uint64_t v12 = v15;
        *(unsigned char *)(v12 + 8) = *((unsigned char *)v3 + 8);
        *(_DWORD *)(v12 + 32) = 0;
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 24) = 0;
        *(void *)(v12 + 16) = v3[2];
        v3[2] = 0;
        *(_DWORD *)(v12 + 24) = *((_DWORD *)v3 + 6);
        *((_DWORD *)v3 + 6) = 0;
        int v13 = *(_DWORD *)(v12 + 28);
        *(_DWORD *)(v12 + 28) = *((_DWORD *)v3 + 7);
        *((_DWORD *)v3 + 7) = v13;
        uint64_t v14 = *(unsigned int *)(v12 + 32);
        *(_DWORD *)(v12 + 32) = *((_DWORD *)v3 + 8);
        *((_DWORD *)v3 + 8) = v14;
        ++*(_DWORD *)(result + 8);
        llvm::deallocate_buffer(0, (void *)(8 * v14));
      }
      v3 += 5;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t **_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4mpsx16ModuleValidationC1ENS1_8ModuleOpEE3__0NS1_4func6FuncOpEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t **result, mlir::ForwardIterator *a2)
{
  if (a2 && *(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
  {
    uint64_t v2 = *result;
    uint64_t v24 = a2;
    uint64_t v3 = *v2;
    SymName = (int8x16_t *)mlir::func::FuncOp::getSymName((mlir::func::FuncOp *)&v24);
    unint64_t v6 = v5;
    uint64_t v25 = 0;
    unsigned int v26 = v24;
    unsigned int v11 = 0;
    uint64_t v12 = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unsigned int v16 = 0;
    unsigned int v17 = &v26;
    uint64_t v18 = &v11;
    v19[0] = (llvm *)&v25;
    mlir::detail::walk<mlir::ForwardIterator>(v24, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::FuncValidation::FuncValidation(mlir::func::FuncOp)::$_0>, (uint64_t)&v17, 1);
    unsigned int v17 = (mlir::ForwardIterator **)SymName;
    uint64_t v18 = (llvm **)v6;
    v19[0] = v11;
    unsigned int v11 = 0;
    v19[1] = v12;
    uint64_t v12 = 0;
    int v20 = v13;
    int v13 = 0;
    BOOL v21 = v14;
    uint64_t v14 = 0;
    uint64_t v22 = v15;
    uint64_t v15 = 0;
    unsigned int v23 = v16;
    unsigned int v16 = 0;
    llvm::StringMap<mlir::mpsx::FuncValidation,llvm::MallocAllocator>::try_emplace<mlir::mpsx::FuncValidation>(v3, SymName, v6, (uint64_t *)v19);
    int v7 = v21;
    if (v23)
    {
      unint64_t v8 = (unsigned int *)((char *)v21 + 32);
      uint64_t v9 = 40 * v23;
      do
      {
        if ((*((void *)v8 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000) {
          llvm::deallocate_buffer(*((llvm **)v8 - 2), (void *)(8 * *v8));
        }
        v8 += 10;
        v9 -= 40;
      }
      while (v9);
      int v7 = v21;
      uint64_t v10 = 40 * v23;
    }
    else
    {
      uint64_t v10 = 0;
    }
    llvm::deallocate_buffer(v7, (void *)v10);
  }
  return result;
}

uint64_t *llvm::StringMap<mlir::mpsx::FuncValidation,llvm::MallocAllocator>::try_emplace<mlir::mpsx::FuncValidation>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v10)
  {
    while (!v10 || v10 == -8)
    {
      uint64_t v11 = i[1];
      ++i;
      uint64_t v10 = v11;
    }
    return i;
  }
  buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 57), (std::align_val_t)8uLL);
  int v13 = buffer;
  uint64_t v14 = buffer + 56;
  if (a3) {
    memcpy(buffer + 56, a2, (size_t)a3);
  }
  a3[(void)v14] = 0;
  uint64_t v15 = *a4;
  *(void *)int v13 = a3;
  *((void *)v13 + 1) = v15;
  *a4 = 0;
  *((void *)v13 + 2) = a4[1];
  a4[1] = 0;
  *((_DWORD *)v13 + 6) = *((_DWORD *)a4 + 4);
  *((_DWORD *)a4 + 4) = 0;
  *((void *)v13 + 4) = a4[3];
  a4[3] = 0;
  *((void *)v13 + 5) = a4[4];
  a4[4] = 0;
  *((_DWORD *)v13 + 12) = *((_DWORD *)a4 + 10);
  *((_DWORD *)a4 + 10) = 0;
  *uint64_t i = (uint64_t)v13;
  ++*(_DWORD *)(a1 + 12);
  for (uint64_t i = (uint64_t *)(*(void *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
        !*i || *i == -8;
  return i;
}

mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *mlir::mpsx::anonymous namespace'::ANERegionFormationPass::ANERegionFormationPass(mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *((void *)this + 2) = "builtin.module";
  *((void *)this + 3) = 14;
  *((unsigned char *)this + 32) = 1;
  *((unsigned char *)this + 40) = 0;
  *((unsigned char *)this + 120) = 0;
  uint64_t v2 = (void *)((char *)this + 152);
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = (char *)this + 200;
  *((void *)this + 24) = 0x400000000;
  *((void *)this + 29) = (char *)this + 248;
  *((void *)this + 30) = 0x400000000;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0x1000000000;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((void *)this + 42) = 0;
  *(void *)this = &unk_1EC9D13C8;
  uint64_t v3 = (void *)((char *)this + 344);
  *(void *)&long long v9 = "The family to target for ANEC region formation (default A12).";
  *((void *)&v9 + 1) = 61;
  int v7 = 0;
  uint64_t v8 = &v7;
  v10.n128_u64[0] = (unint64_t)&v11;
  v10.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v10, &v11, 6uLL, 40);
  unsigned __int32 v4 = v10.n128_u32[2];
  unint64_t v5 = v10.n128_u64[0] + 40 * v10.n128_u32[2];
  *(void *)unint64_t v5 = "A12";
  *(void *)(v5 + 8) = 3;
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = "A12 family";
  *(void *)(v5 + 32) = 10;
  *(void *)(v5 + 40) = "A13";
  *(void *)(v5 + 48) = 3;
  *(_DWORD *)(v5 + 56) = 1;
  *(void *)(v5 + 64) = "A13 family";
  *(void *)(v5 + 72) = 10;
  *(void *)(v5 + 80) = "A14";
  *(void *)(v5 + 88) = 3;
  *(_DWORD *)(v5 + 96) = 2;
  *(void *)(v5 + 104) = "A14 family";
  *(void *)(v5 + 112) = 10;
  *(void *)(v5 + 120) = "A15";
  *(void *)(v5 + 128) = 3;
  *(_DWORD *)(v5 + 136) = 3;
  *(void *)(v5 + 144) = "A15 family";
  *(void *)(v5 + 152) = 10;
  *(void *)(v5 + 160) = "A16";
  *(void *)(v5 + 168) = 3;
  *(_DWORD *)(v5 + 176) = 4;
  *(void *)(v5 + 184) = "A16 family";
  *(void *)(v5 + 192) = 10;
  *(void *)(v5 + 200) = "A11Legacy";
  *(void *)(v5 + 208) = 9;
  *(_DWORD *)(v5 + 216) = 6;
  *(void *)(v5 + 224) = "A11 Legacy family";
  *(void *)(v5 + 232) = 17;
  v10.n128_u32[2] = v4 + 6;
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(v3, v2, (uint64_t)"target-family", 13, &v9, &v8, (uint64_t *)&v10);
  *((void *)this + 43) = &unk_1EC9CAEE0;
  *((void *)this + 118) = &unk_1EC9CAF60;
  if ((int *)v10.n128_u64[0] != &v11) {
    free((void *)v10.n128_u64[0]);
  }
  v10.n128_u64[0] = (unint64_t)"If device hints cannot be followed then compilation has failed.";
  v10.n128_u64[1] = 63;
  LOBYTE(v8) = 0;
  *(void *)&long long v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)this + 120, v2, (uint64_t)"strict-hints", 12, &v10, (unsigned char **)&v9);
  *((void *)this + 120) = &unk_1EC9CB060;
  *((void *)this + 144) = &unk_1EC9CB0E0;
  v10.n128_u64[0] = (unint64_t)"If true, placement uses the cost model.";
  v10.n128_u64[1] = 39;
  LOBYTE(v8) = 0;
  *(void *)&long long v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)this + 146, v2, (uint64_t)"use-cost-model", 14, &v10, (unsigned char **)&v9);
  *((void *)this + 146) = &unk_1EC9CB060;
  *((void *)this + 170) = &unk_1EC9CB0E0;
  v10.n128_u64[0] = (unint64_t)"If true, everything will be placed on the host. (requires use-cost-model)";
  v10.n128_u64[1] = 73;
  LOBYTE(v8) = 0;
  *(void *)&long long v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)this + 172, v2, (uint64_t)"force-host-placement", 20, &v10, (unsigned char **)&v9);
  *((void *)this + 172) = &unk_1EC9CB060;
  *((void *)this + 196) = &unk_1EC9CB0E0;
  v10.n128_u64[0] = (unint64_t)"If true, everything will be placed on the ane if possible. (requires use-cost-model)";
  v10.n128_u64[1] = 84;
  LOBYTE(v8) = 0;
  *(void *)&long long v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)this + 198, v2, (uint64_t)"force-ane-placement", 19, &v10, (unsigned char **)&v9);
  *((void *)this + 198) = &unk_1EC9CB060;
  *((void *)this + 222) = &unk_1EC9CB0E0;
  v10.n128_u64[0] = (unint64_t)"The number of gpu cores.";
  v10.n128_u64[1] = 24;
  LODWORD(v8) = 1;
  *(void *)&long long v9 = &v8;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((void *)this + 224, v2, (uint64_t)"gpu-core-count", 14, &v10, (int **)&v9);
  *((void *)this + 224) = &unk_1EC9CB120;
  *((void *)this + 248) = &unk_1EC9CB1A0;
  v10.n128_u64[0] = (unint64_t)"If true, print a report of which ops failed to be placed on ANE.";
  v10.n128_u64[1] = 64;
  LOBYTE(v8) = 0;
  *(void *)&long long v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)this + 250, v2, (uint64_t)"print-placement-report", 22, &v10, (unsigned char **)&v9);
  *((void *)this + 250) = &unk_1EC9CB060;
  *((void *)this + 274) = &unk_1EC9CB0E0;
  v10.n128_u64[0] = (unint64_t)"If true, failing to perform ANE Compiler validation will result in compilation failure.";
  v10.n128_u64[1] = 87;
  LOBYTE(v8) = 0;
  *(void *)&long long v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)this + 276, v2, (uint64_t)"failed-anec-validation-is-failure", 33, &v10, (unsigned char **)&v9);
  *((void *)this + 276) = &unk_1EC9CB060;
  *((void *)this + 300) = &unk_1EC9CB0E0;
  v10.n128_u64[0] = (unint64_t)"Postfix appended to the name of the ANE regions created.";
  v10.n128_u64[1] = 56;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)this + 302, v2, (uint64_t)"region-name-postfix", 19, &v10);
  *((void *)this + 302) = &unk_1EC9CAFA0;
  *((void *)this + 331) = &unk_1EC9CB020;
  *(void *)this = &unk_1EC9D1358;
  *((unsigned char *)this + 2720) = 0;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *(_OWORD *)((char *)this + 2680) = 0u;
  *((unsigned char *)this + 2696) = 0;
  mlir::getMPSVersionFromANEC((uint64_t)&v10);
  if (*((unsigned __int8 *)this + 2720) == v12)
  {
    if (*((unsigned char *)this + 2720))
    {
      *((void *)this + 338) = v10.n128_u64[1];
      *((_DWORD *)this + 678) = v11;
    }
  }
  else if (*((unsigned char *)this + 2720))
  {
    *((unsigned char *)this + 2720) = 0;
  }
  else
  {
    *((void *)this + 337) = &unk_1EC9CA678;
    *((void *)this + 338) = v10.n128_u64[1];
    *((_DWORD *)this + 678) = v11;
    *((unsigned char *)this + 2720) = 1;
  }
  return this;
}

void mlir::mpsx::anonymous namespace'::ANERegionFormationPass::~ANERegionFormationPass(void **this)
{
  *this = &unk_1EC9D1358;
  if (*((char *)this + 2695) < 0) {
    operator delete(this[334]);
  }
  *this = &unk_1EC9D13C8;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)(this + 302));
  this[276] = &unk_1EC9A3F00;
  uint64_t v2 = (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)this[299];
  if (v2 == (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)(this + 296))
  {
    (*((void (**)(char *))this[296] + 4))((char *)this + 2368);
  }
  else if (v2)
  {
    (*(void (**)(mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *))(*(void *)v2 + 40))(v2);
  }
  this[276] = &unk_1EC9A42A8;
  uint64_t v3 = this[288];
  if (v3 != this[287]) {
    free(v3);
  }
  unsigned __int32 v4 = (void **)this[284];
  if (v4 != this + 286) {
    free(v4);
  }
  this[250] = &unk_1EC9A3F00;
  unint64_t v5 = (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)this[273];
  if (v5 == (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)(this + 270))
  {
    (*((void (**)(char *))this[270] + 4))((char *)this + 2160);
  }
  else if (v5)
  {
    (*(void (**)(mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *))(*(void *)v5 + 40))(v5);
  }
  this[250] = &unk_1EC9A42A8;
  unint64_t v6 = this[262];
  if (v6 != this[261]) {
    free(v6);
  }
  int v7 = (void **)this[258];
  if (v7 != this + 260) {
    free(v7);
  }
  this[224] = &unk_1EC9A3FD0;
  uint64_t v8 = (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)this[247];
  if (v8 == (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)(this + 244))
  {
    (*((void (**)(char *))this[244] + 4))((char *)this + 1952);
  }
  else if (v8)
  {
    (*(void (**)(mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *))(*(void *)v8 + 40))(v8);
  }
  this[224] = &unk_1EC9A42A8;
  long long v9 = this[236];
  if (v9 != this[235]) {
    free(v9);
  }
  __n128 v10 = (void **)this[232];
  if (v10 != this + 234) {
    free(v10);
  }
  this[198] = &unk_1EC9A3F00;
  int v11 = (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)this[221];
  if (v11 == (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)(this + 218))
  {
    (*((void (**)(char *))this[218] + 4))((char *)this + 1744);
  }
  else if (v11)
  {
    (*(void (**)(mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *))(*(void *)v11 + 40))(v11);
  }
  this[198] = &unk_1EC9A42A8;
  unsigned __int8 v12 = this[210];
  if (v12 != this[209]) {
    free(v12);
  }
  uint64_t v13 = (void **)this[206];
  if (v13 != this + 208) {
    free(v13);
  }
  this[172] = &unk_1EC9A3F00;
  uint64_t v14 = (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)this[195];
  if (v14 == (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)(this + 192))
  {
    (*((void (**)(char *))this[192] + 4))((char *)this + 1536);
  }
  else if (v14)
  {
    (*(void (**)(mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *))(*(void *)v14 + 40))(v14);
  }
  this[172] = &unk_1EC9A42A8;
  uint64_t v15 = this[184];
  if (v15 != this[183]) {
    free(v15);
  }
  unsigned int v16 = (void **)this[180];
  if (v16 != this + 182) {
    free(v16);
  }
  this[146] = &unk_1EC9A3F00;
  unsigned int v17 = (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)this[169];
  if (v17 == (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)(this + 166))
  {
    (*((void (**)(char *))this[166] + 4))((char *)this + 1328);
  }
  else if (v17)
  {
    (*(void (**)(mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *))(*(void *)v17 + 40))(v17);
  }
  this[146] = &unk_1EC9A42A8;
  uint64_t v18 = this[158];
  if (v18 != this[157]) {
    free(v18);
  }
  uint64_t v19 = (void **)this[154];
  if (v19 != this + 156) {
    free(v19);
  }
  this[120] = &unk_1EC9A3F00;
  int v20 = (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)this[143];
  if (v20 == (mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *)(this + 140))
  {
    (*((void (**)(char *))this[140] + 4))((char *)this + 1120);
  }
  else if (v20)
  {
    (*(void (**)(mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *))(*(void *)v20 + 40))(v20);
  }
  this[120] = &unk_1EC9A42A8;
  BOOL v21 = this[132];
  if (v21 != this[131]) {
    free(v21);
  }
  uint64_t v22 = (void **)this[128];
  if (v22 != this + 130) {
    free(v22);
  }
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(this + 43);

  mlir::Pass::~Pass((mlir::Pass *)this);
}

{
  void *v1;
  uint64_t vars8;

  operator delete(v1);
}

const char *mlir::mpsx::ANERegionFormationPassBase<mlir::mpsx::anonymous namespace'::ANERegionFormationPass>::getName()
{
  return "ANERegionFormationPass";
}

void *mlir::mpsx::ANERegionFormationPassBase<mlir::mpsx::anonymous namespace'::ANERegionFormationPass>::getDependentDialects(int a1, uint64_t **a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EC9CF0D8;
  unint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::placement::PlacementDialect,void>::id, "placement", 9uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CF000;
  unint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mpsx::MPSXDialect,void>::id, "mpsx", 4uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CEEE0;
  unint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, "mps", 3uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CF048;
  unint64_t v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::memref::MemRefDialect,void>::id, "memref", 6uLL, v4);
  uint64_t result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

const char *mlir::mpsx::ANERegionFormationPassBase<mlir::mpsx::anonymous namespace'::ANERegionFormationPass>::getArgument()
{
  return "ane-region-formation";
}

const char *mlir::mpsx::ANERegionFormationPassBase<mlir::mpsx::anonymous namespace'::ANERegionFormationPass>::getDescription()
{
  return "Create ANE region";
}

void mlir::mpsx::anonymous namespace'::ANERegionFormationPass::runOnOperation(mlir::mpsx::_anonymous_namespace_::ANERegionFormationPass *this)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t Context = (mlir::GenericProgramPoint *)mlir::Attribute::getContext((mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 24));
  mlir::GenericProgramPoint::~GenericProgramPoint(Context);
  v21[0] = 1;
  memset(&v21[4], 0, 44);
  uint64_t v22 = 978433816;
  char v19 = 0;
  int v20 = 0;
  char v17 = *((unsigned char *)this + 1712);
  char v18 = *((unsigned char *)this + 1504);
  if (*((unsigned char *)this + 1296))
  {
    mlir::getDeviceInfo(*((_DWORD *)this + 118), *((unsigned int *)this + 480), (uint64_t)&v40);
    *(_OWORD *)BOOL v21 = v40;
    *(_OWORD *)&v21[16] = *(_OWORD *)v41;
    *(_OWORD *)&v21[32] = *(_OWORD *)&v41[16];
    uint64_t v22 = *(void *)&v41[32];
    int v20 = v21;
  }
  uint64_t v3 = mlir::Attribute::getContext((mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  uint64_t v76[2] = 0;
  v76[0] = (uint64_t)&unk_1EC9AA748;
  v76[1] = 0;
  int v77 = 0;
  uint64_t v83 = 0;
  uint64_t v82 = 0;
  uint64_t v78 = v80;
  uint64_t v79 = 0;
  v80[1] = 0;
  v80[0] = 0;
  int v81 = 0;
  uint64_t v84 = 0x1000000000;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0x2800000000;
  uint64_t v88 = 0;
  uint64_t v89 = v3;
  *(void *)&long long v40 = v41;
  *(void *)uint64_t v41 = "func";
  *(void *)&v41[8] = 4;
  *((void *)&v40 + 1) = 0x200000001;
  mlir::ConversionTarget::setDialectAction(v76, (uint64_t)v41, 1, 2);
  if ((unsigned char *)v40 != v41) {
    free((void *)v40);
  }
  *(void *)&long long v40 = v41;
  *(void *)uint64_t v41 = "memref";
  *(void *)&v41[8] = 6;
  *((void *)&v40 + 1) = 0x200000001;
  mlir::ConversionTarget::setDialectAction(v76, (uint64_t)v41, 1, 2);
  if ((unsigned char *)v40 != v41) {
    free((void *)v40);
  }
  unsigned __int32 v4 = (void *)(*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  v14[0] = mlir::Attribute::getContext((mlir::Attribute *)(v4 + 3));
  v14[1] = 0;
  uint64_t v5 = v4[2];
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v4);
  uint64_t v15 = v5;
  uint64_t v16 = v6;
  if (*((void *)this + 333))
  {
    uint64_t v7 = mlir::Attribute::getContext((mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
    memset(&v63[8], 0, 32);
    *(void *)long long v63 = v7;
    long long v64 = &v66;
    uint64_t v65 = 0x600000000;
    uint64_t v68 = 0;
    uint64_t v67 = 0;
    int v69 = 0;
    *(void *)&long long v71 = 0;
    uint64_t v70 = 0;
    *((void *)&v71 + 1) = 0x2800000000;
    uint64_t v72 = 0;
    *(void *)&long long v73 = 0;
    *((void *)&v73 + 1) = 0x2800000000;
    int v61 = 0;
    long long v62 = 0u;
    int v57 = 0;
    memset(v53, 0, sizeof(v53));
    int v51 = 0;
    int v47 = 0;
    memset(v49, 0, sizeof(v49));
    memset(v45, 0, sizeof(v45));
    long long v44 = 0u;
    memset(v43, 0, sizeof(v43));
    long long v42 = 0u;
    memset(&v41[8], 0, 128);
    *(void *)&long long v40 = &unk_1EC9AA670;
    *((void *)&v40 + 1) = &v41[8];
    *(void *)uint64_t v41 = 0x400000000;
    *(void *)&long long v42 = v43;
    HIDWORD(v42) = 2;
    *(void *)&long long v44 = v45;
    HIDWORD(v44) = 2;
    uint64_t v46 = v49;
    int v48 = 2;
    uint64_t v50 = v53;
    int v52 = 2;
    uint64_t v55 = 0;
    uint64_t v54 = 0;
    int v56 = 0;
    uint64_t v59 = 0;
    uint64_t v58 = 0;
    int v60 = 0;
    llvm::sys::RWMutexImpl::RWMutexImpl((llvm::sys::RWMutexImpl *)&v62);
    *((void *)&v62 + 1) = 0;
    *(void *)&long long v40 = &unk_1EC9D1438;
    unsigned int v35 = &unk_1EC9CFC40;
    v37.i64[1] = (uint64_t)&v35;
    mlir::TypeConverter::registerConversion((unsigned int *)&v40, (uint64_t)&v35);
    if ((void **)v37.i64[1] == &v35)
    {
      (*((void (**)(void **))v35 + 4))(&v35);
    }
    else if (v37.i64[1])
    {
      (*(void (**)(void))(*(void *)v37.i64[1] + 40))();
    }
    unsigned int v35 = &unk_1EC9CFBF8;
    v37.i64[1] = (uint64_t)&v35;
    mlir::TypeConverter::registerConversion((unsigned int *)&v40, (uint64_t)&v35);
    if ((void **)v37.i64[1] == &v35)
    {
      (*((void (**)(void **))v35 + 4))(&v35);
    }
    else if (v37.i64[1])
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v37.i64[1] + 40))(v37.i64[1], v12);
    }
    *(_OWORD *)__p = *(_OWORD *)v63;
    long long v24 = *(_OWORD *)&v63[16];
    memset(&v63[8], 0, 32);
    uint64_t v25 = *(mlir::Operation **)&v63[32];
    v26[0] = &v27;
    v26[1] = (void *)0x600000000;
    if (v65) {
      llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=((uint64_t)v26, (uint64_t)&v64);
    }
    uint64_t v28 = v67;
    int v30 = v69;
    unsigned int v31 = v70;
    uint64_t v67 = 0;
    uint64_t v29 = v68;
    uint64_t v68 = 0;
    int v69 = 0;
    long long v32 = v71;
    uint64_t v70 = 0;
    *(void *)&long long v71 = 0;
    DWORD2(v71) = 0;
    uint64_t v33 = v72;
    long long v34 = v73;
    uint64_t v72 = 0;
    *(void *)&long long v73 = 0;
    DWORD2(v73) = 0;
    uint64_t v36 = (uint64_t (*)(uint64_t))v14;
    int64x2_t v37 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    char v38 = 0;
    unsigned int v35 = &unk_1EC9D1458;
    mlir::ConversionTarget::ConversionTarget((uint64_t)&v39);
  }
  if (*((unsigned char *)this + 2720))
  {
    if (*((char *)this + 2695) >= 0 ? *((unsigned __int8 *)this + 2695) : *((void *)this + 335))
    {
      long long v9 = (mlir::ForwardIterator *)(*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8);
      __n128 v10 = operator new(0x18uLL);
      *__n128 v10 = 0;
      v10[1] = 0;
      void v10[2] = 0x3800000000;
      unsigned int v35 = v10;
      *(void *)&long long v40 = &v35;
      int v11 = mlir::detail::walk<mlir::ForwardIterator>(v9, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4mpsx16ModuleValidationC1ENS1_8ModuleOpEE3__0NS1_4func6FuncOpEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v40, 1);
      char v13 = mlir::Operation::CloneOptions::all(v11);
      mlir::Operation::clone((uint64_t)v9, v13);
    }
  }
  if (*((unsigned char *)this + 2336))
  {
    unsigned int v35 = (void *)(*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8);
    *(void *)&long long v40 = "missing module validation information";
    *(_WORD *)&v41[16] = 259;
    mlir::OpState::emitOpError((uint64_t **)&v35, (const void ***)&v40, (uint64_t)&v74);
    if (v74) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v75);
    *((void *)this + 5) |= 4uLL;
  }
  mlir::ConversionTarget::~ConversionTarget((mlir::ConversionTarget *)v76);
}

void sub_1805E4670()
{
  mlir::GenericProgramPoint::~GenericProgramPoint(v0);
}

void mlir::mpsx::ANERegionFormationPassBase<mlir::mpsx::anonymous namespace'::ANERegionFormationPass>::clonePass(uint64_t a1@<X0>, void *a2@<X8>)
{
  v14[20] = *MEMORY[0x1E4F143B8];
  unsigned __int32 v4 = (char *)operator new(0xAA8uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  v4[40] = 0;
  v4[120] = 0;
  uint64_t v6 = v4 + 152;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)unsigned __int32 v4 = &unk_1EC9D13C8;
  *(void *)&long long v12 = "The family to target for ANEC region formation (default A12).";
  *((void *)&v12 + 1) = 61;
  int v10 = 0;
  int v11 = &v10;
  v13.n128_u64[0] = (unint64_t)v14;
  v13.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v14, 6uLL, 40);
  unsigned __int32 v7 = v13.n128_u32[2];
  unint64_t v8 = v13.n128_u64[0] + 40 * v13.n128_u32[2];
  *(void *)unint64_t v8 = "A12";
  *(void *)(v8 + 8) = 3;
  *(_DWORD *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = "A12 family";
  *(void *)(v8 + 32) = 10;
  *(void *)(v8 + 40) = "A13";
  *(void *)(v8 + 48) = 3;
  *(_DWORD *)(v8 + 56) = 1;
  *(void *)(v8 + 64) = "A13 family";
  *(void *)(v8 + 72) = 10;
  *(void *)(v8 + 80) = "A14";
  *(void *)(v8 + 88) = 3;
  *(_DWORD *)(v8 + 96) = 2;
  *(void *)(v8 + 104) = "A14 family";
  *(void *)(v8 + 112) = 10;
  *(void *)(v8 + 120) = "A15";
  *(void *)(v8 + 128) = 3;
  *(_DWORD *)(v8 + 136) = 3;
  *(void *)(v8 + 144) = "A15 family";
  *(void *)(v8 + 152) = 10;
  *(void *)(v8 + 160) = "A16";
  *(void *)(v8 + 168) = 3;
  *(_DWORD *)(v8 + 176) = 4;
  *(void *)(v8 + 184) = "A16 family";
  *(void *)(v8 + 192) = 10;
  *(void *)(v8 + 200) = "A11Legacy";
  *(void *)(v8 + 208) = 9;
  *(_DWORD *)(v8 + 216) = 6;
  *(void *)(v8 + 224) = "A11 Legacy family";
  *(void *)(v8 + 232) = 17;
  v13.n128_u32[2] = v7 + 6;
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>((void *)v4 + 43, (void *)v4 + 19, (uint64_t)"target-family", 13, &v12, &v11, (uint64_t *)&v13);
  *((void *)v4 + 43) = &unk_1EC9CAEE0;
  *((void *)v4 + 118) = &unk_1EC9CAF60;
  if ((void *)v13.n128_u64[0] != v14) {
    free((void *)v13.n128_u64[0]);
  }
  v13.n128_u64[0] = (unint64_t)"If device hints cannot be followed then compilation has failed.";
  v13.n128_u64[1] = 63;
  LOBYTE(v11) = 0;
  *(void *)&long long v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 120, v6, (uint64_t)"strict-hints", 12, &v13, (unsigned char **)&v12);
  *((void *)v4 + 120) = &unk_1EC9CB060;
  *((void *)v4 + 144) = &unk_1EC9CB0E0;
  v13.n128_u64[0] = (unint64_t)"If true, placement uses the cost model.";
  v13.n128_u64[1] = 39;
  LOBYTE(v11) = 0;
  *(void *)&long long v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 146, v6, (uint64_t)"use-cost-model", 14, &v13, (unsigned char **)&v12);
  *((void *)v4 + 146) = &unk_1EC9CB060;
  *((void *)v4 + 170) = &unk_1EC9CB0E0;
  v13.n128_u64[0] = (unint64_t)"If true, everything will be placed on the host. (requires use-cost-model)";
  v13.n128_u64[1] = 73;
  LOBYTE(v11) = 0;
  *(void *)&long long v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 172, v6, (uint64_t)"force-host-placement", 20, &v13, (unsigned char **)&v12);
  *((void *)v4 + 172) = &unk_1EC9CB060;
  *((void *)v4 + 196) = &unk_1EC9CB0E0;
  v13.n128_u64[0] = (unint64_t)"If true, everything will be placed on the ane if possible. (requires use-cost-model)";
  v13.n128_u64[1] = 84;
  LOBYTE(v11) = 0;
  *(void *)&long long v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 198, v6, (uint64_t)"force-ane-placement", 19, &v13, (unsigned char **)&v12);
  *((void *)v4 + 198) = &unk_1EC9CB060;
  *((void *)v4 + 222) = &unk_1EC9CB0E0;
  v13.n128_u64[0] = (unint64_t)"The number of gpu cores.";
  v13.n128_u64[1] = 24;
  LODWORD(v11) = 1;
  *(void *)&long long v12 = &v11;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((void *)v4 + 224, v6, (uint64_t)"gpu-core-count", 14, &v13, (int **)&v12);
  *((void *)v4 + 224) = &unk_1EC9CB120;
  *((void *)v4 + 248) = &unk_1EC9CB1A0;
  v13.n128_u64[0] = (unint64_t)"If true, print a report of which ops failed to be placed on ANE.";
  v13.n128_u64[1] = 64;
  LOBYTE(v11) = 0;
  *(void *)&long long v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 250, v6, (uint64_t)"print-placement-report", 22, &v13, (unsigned char **)&v12);
  *((void *)v4 + 250) = &unk_1EC9CB060;
  *((void *)v4 + 274) = &unk_1EC9CB0E0;
  v13.n128_u64[0] = (unint64_t)"If true, failing to perform ANE Compiler validation will result in compilation failure.";
  v13.n128_u64[1] = 87;
  LOBYTE(v11) = 0;
  *(void *)&long long v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)v4 + 276, v6, (uint64_t)"failed-anec-validation-is-failure", 33, &v13, (unsigned char **)&v12);
  *((void *)v4 + 276) = &unk_1EC9CB060;
  *((void *)v4 + 300) = &unk_1EC9CB0E0;
  v13.n128_u64[0] = (unint64_t)"Postfix appended to the name of the ANE regions created.";
  v13.n128_u64[1] = 56;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 302, v6, (uint64_t)"region-name-postfix", 19, &v13);
  *((void *)v4 + 302) = &unk_1EC9CAFA0;
  *((void *)v4 + 331) = &unk_1EC9CB020;
  *(void *)unsigned __int32 v4 = &unk_1EC9D1358;
  *((void *)v4 + 333) = *(void *)(a1 + 2664);
  long long v9 = (std::string *)(v4 + 2672);
  if (*(char *)(a1 + 2695) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a1 + 2672), *(void *)(a1 + 2680));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 2672);
    *((void *)v4 + 336) = *(void *)(a1 + 2688);
  }
  v4[2696] = 0;
  v4[2720] = 0;
  if (*(unsigned char *)(a1 + 2720))
  {
    *((void *)v4 + 337) = &unk_1EC9CA678;
    *((void *)v4 + 338) = *(void *)(a1 + 2704);
    *((_DWORD *)v4 + 678) = *(_DWORD *)(a1 + 2712);
    v4[2720] = 1;
  }
  *a2 = v4;
}

void *std::__function::__func<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EC9CF048;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CF048;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, void **a2)
{
  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"memref", 6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::MemRefDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::memref::MemRefDialect * mlir::MLIRContext::getOrLoadDialect<mlir::memref::MemRefDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

mlir::memref::MemRefDialect *llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::memref::MemRefDialect * mlir::MLIRContext::getOrLoadDialect<mlir::memref::MemRefDialect>(void)::{lambda(void)#1}>@<X0>(mlir::MLIRContext **a1@<X0>, mlir::memref::MemRefDialect **a2@<X8>)
{
  uint64_t v3 = *a1;
  unsigned __int32 v4 = (mlir::memref::MemRefDialect *)operator new(0x60uLL);
  uint64_t result = mlir::memref::MemRefDialect::MemRefDialect(v4, v3);
  *a2 = result;
  return result;
}

void mlir::mpsx::anonymous namespace'::ANERegionOpCreator::~ANERegionOpCreator(void **this)
{
  *this = &unk_1EC9D1458;
  if (*((char *)this + 295) < 0) {
    operator delete(this[34]);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)(this + 27));
  mlir::ConversionTarget::~ConversionTarget((mlir::ConversionTarget *)(this + 5));
}

{
  *this = &unk_1EC9D1458;
  if (*((char *)this + 295) < 0) {
    operator delete(this[34]);
  }
  mlir::FrozenRewritePatternSet::~FrozenRewritePatternSet((mlir::FrozenRewritePatternSet *)(this + 27));
  mlir::ConversionTarget::~ConversionTarget((mlir::ConversionTarget *)(this + 5));
}

uint64_t sub_1805E4EE0()
{
  return v0;
}

void llvm::StringMapEntry<mlir::mpsx::FuncValidation>::Destroy<llvm::MallocAllocator>(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 48);
  uint64_t v3 = *(llvm **)(a1 + 32);
  if (v2)
  {
    unsigned __int32 v4 = (unsigned int *)((char *)v3 + 32);
    uint64_t v5 = 40 * v2;
    do
    {
      if ((*((void *)v4 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        llvm::deallocate_buffer(*((llvm **)v4 - 2), (void *)(8 * *v4));
      }
      v4 += 10;
      v5 -= 40;
    }
    while (v5);
    uint64_t v3 = *(llvm **)(a1 + 32);
    uint64_t v6 = 40 * *(unsigned int *)(a1 + 48);
  }
  else
  {
    uint64_t v6 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v6);
}

void sub_1805E4F84()
{
  llvm::deallocate_buffer(*(llvm **)(v0 + 8), (void *)(16 * *(unsigned int *)(v0 + 24)));
}

void sub_1805E4F98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  llvm::deallocate_buffer(v14, v15);
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4mpsx12_GLOBAL__N_127getModuleValidationFromANECERNSt3__110unique_ptrINSB_16ModuleValidationENSD_14default_deleteISF_EEEENS1_8ModuleOpENS1_4anec6FamilyENS1_3mps17MPSDialectVersionENS_9StringRefEE3__0NS1_4func6FuncOpEvEENSD_9enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESZ_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t ***a1, mlir::ForwardIterator *a2)
{
  if (!a2 || *(_UNKNOWN **)(*((void *)a2 + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id) {
    return;
  }
  uint64_t v2 = *a1;
  unsigned int v26 = a2;
  uint64_t v3 = **v2;
  __dst = (mlir::ForwardIterator **)a2;
  SymName = (int8x16_t *)mlir::func::FuncOp::getSymName((mlir::func::FuncOp *)&__dst);
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)v3, SymName, v5);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v3 + 8)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)v3 + 8 * Key) + 8;
  }
  uint64_t v25 = v7;
  uint64_t v8 = mlir::func::FuncOp::getSymName((mlir::func::FuncOp *)&v26);
  if (v8)
  {
    size_t v10 = v9;
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    int v11 = (const void *)v8;
    if (v9 >= 0x17)
    {
      uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v14 = v9 | 7;
      }
      uint64_t v15 = v14 + 1;
      p_dst = (void **)operator new(v14 + 1);
      char v19 = (void *)v10;
      int v20 = (uint64_t *)(v15 | 0x8000000000000000);
      __dst = (mlir::ForwardIterator **)p_dst;
    }
    else
    {
      HIBYTE(v20) = v9;
      p_dst = (void **)&__dst;
      if (!v9)
      {
LABEL_17:
        *((unsigned char *)p_dst + v10) = 0;
        if (SHIBYTE(v20) >= 0) {
          __n128 v13 = (const char *)&__dst;
        }
        else {
          __n128 v13 = (const char *)__dst;
        }
        goto LABEL_20;
      }
    }
    memmove(p_dst, v11, v10);
    goto LABEL_17;
  }
  __dst = 0;
  char v19 = 0;
  __n128 v13 = (const char *)&__dst;
  int v20 = 0;
LABEL_20:
  CFStringRef v16 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v13, 0x8000100u);
  if (SHIBYTE(v20) < 0) {
    operator delete(__dst);
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)*v2[1], v16, (const void **)&value))
  {
    CFTypeID v17 = CFGetTypeID(value);
    if (v17 == CFDictionaryGetTypeID())
    {
      uint64_t v22 = 0;
      unsigned int v23 = value;
      __dst = &v26;
      char v19 = &v25;
      int v20 = &v22;
      BOOL v21 = &v23;
    }
  }
  CFRelease(v16);
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::anonymous namespace'::getModuleValidationFromANEC(std::unique_ptr<mlir::mpsx::ModuleValidation> &,mlir::ModuleOp,mlir::anec::Family,mlir::mps::MPSDialectVersion,llvm::StringRef)::$_0::operator() const(mlir::func::FuncOp)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  if (**(void **)a1 == a2) {
    return;
  }
  uint64_t v3 = **(void **)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 24);
  unsigned int v5 = *(_DWORD *)(v3 + 40);
  if (!v5) {
    goto LABEL_8;
  }
  unsigned int v6 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v4 + 40 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 1;
    while (v8 != -4096)
    {
      unsigned int v10 = v6 + v9++;
      unsigned int v6 = v10 & (v5 - 1);
      uint64_t v7 = (void *)(v4 + 40 * v6);
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_9;
      }
    }
LABEL_8:
    uint64_t v7 = (void *)(v4 + 40 * v5);
  }
LABEL_9:
  if (v7 == (void *)(v4 + 40 * v5)) {
    int v11 = 0;
  }
  else {
    int v11 = (BOOL *)(v7 + 1);
  }
  long long v12 = *(void **)(a1 + 16);
  unint64_t v13 = (*v12)++;
  std::to_string(&v20, v13);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &v20;
  }
  else {
    uint64_t v14 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  CFStringRef v15 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v14, 0x8000100u);
  value = 0;
  if (CFDictionaryGetValueIfPresent(**(CFDictionaryRef **)(a1 + 24), v15, (const void **)&value))
  {
    CFTypeID v16 = CFGetTypeID(value);
    if (v16 == CFDictionaryGetTypeID())
    {
      CFTypeRef cf = 0;
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"support", &cf))
      {
        CFTypeID v17 = CFGetTypeID(cf);
        if (v17 == CFBooleanGetTypeID()) {
          *int v11 = CFBooleanGetValue((CFBooleanRef)cf) != 0;
        }
      }
    }
  }
  CFRelease(v15);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

uint64_t mlir::mpsx::anonymous namespace'::ANERegionTypeConverter::canonicalizeType(uint64_t result)
{
  if (*(_UNKNOWN **)(*(void *)result + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    uint64_t v4 = result;
    if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v4) > 7)
    {
      if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v4)) {
        return v4;
      }
      uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v4);
      unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v4);
      uint64_t v1 = Context;
    }
    else
    {
      uint64_t v1 = mlir::Attribute::getContext((mlir::Attribute *)&v4);
      unsigned int Width = 8;
    }
    return mlir::IntegerType::get(v1, Width, 1u);
  }
  return result;
}

uint64_t mlir::mpsx::anonymous namespace'::ANERegionTypeConverter::tensorToMemRef(uint64_t a1)
{
  uint64_t v21 = a1;
  Elementuint64_t Type = mlir::TensorType::getElementType((mlir::TensorType *)&v21);
  if (!mlir::TensorType::hasRank((mlir::TensorType *)&v21)) {
    return mlir::UnrankedMemRefType::get(v2, 0);
  }
  LOBYTE(v22[0]) = 0;
  char v23 = 0;
  uint64_t v3 = (uint64_t *)mlir::TensorType::cloneWith((uint64_t)&v21, (uint64_t)v22, v2);
  uint64_t v4 = (uint64_t)v3;
  if (!v3) {
    goto LABEL_11;
  }
  uint64_t v5 = *v3;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  int v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    int v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    long long v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_11:
  }
    uint64_t v14 = 0;
  v22[0] = mlir::getRankPromotionTypeForANE(v4, v14);
  v22[1] = v15;
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v22);
  char v18 = v17;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v22);
  return mlir::MemRefType::get(ArgAttrsAttr, v18, OperandRange, 0, 0, 0);
}

void mlir::mpsx::anonymous namespace'::ANERegionTypeConverter::~ANERegionTypeConverter(pthread_rwlock_t **this)
{
}

void sub_1805E551C(void *__p)
{
  operator delete(__p);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_4TypeEZNKS3_12wrapCallbackIS5_PFS5_S5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS_8optionalINS2_13LogicalResultEEES5_RN4llvm15SmallVectorImplIS5_EEEEEE4typeEOSA_EUlS5_SJ_E_EENS9_IXsr3stdE14is_invocable_vISA_SB_SJ_EESL_E4typeESO_EUlS5_SJ_E_NS_9allocatorISS_EESK_E7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EC9CFC40;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_4TypeEZNKS3_12wrapCallbackIS5_PFS5_S5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS_8optionalINS2_13LogicalResultEEES5_RN4llvm15SmallVectorImplIS5_EEEEEE4typeEOSA_EUlS5_SJ_E_EENS9_IXsr3stdE14is_invocable_vISA_SB_SJ_EESL_E4typeESO_EUlS5_SJ_E_NS_9allocatorISS_EESK_E7__cloneEPNS0_6__baseISK_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EC9CFC40;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_4TypeEZNKS3_12wrapCallbackIS5_PFS5_S5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS_8optionalINS2_13LogicalResultEEES5_RN4llvm15SmallVectorImplIS5_EEEEEE4typeEOSA_EUlS5_SJ_E_EENS9_IXsr3stdE14is_invocable_vISA_SB_SJ_EESL_E4typeESO_EUlS5_SJ_E_NS_9allocatorISS_EESK_EclEOS5_SJ_(uint64_t a1, void *a2, uint64_t a3)
{
  if (*a2)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(a1 + 8))();
    if (v4)
    {
      uint64_t v5 = *(unsigned int *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v5 + 1, 8);
        LODWORD(v5) = *(_DWORD *)(a3 + 8);
      }
      *(void *)(*(void *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    BOOL v6 = v4 != 0;
    int v7 = 1;
  }
  else
  {
    BOOL v6 = 0;
    int v7 = 0;
  }
  return v6 | (v7 << 8);
}

void *_ZNKSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_10TensorTypeEZNKS3_12wrapCallbackIS5_PFNS_8optionalINS2_4TypeEEES5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS7_INS2_13LogicalResultEEES8_RN4llvm15SmallVectorImplIS8_EEEEEE4typeEOSD_EUlS5_SL_E_EENSC_IXsr3stdE14is_invocable_vISD_SE_SL_EESN_E4typeESQ_EUlS8_SL_E_NS_9allocatorISU_EESM_E7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EC9CFBF8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_10TensorTypeEZNKS3_12wrapCallbackIS5_PFNS_8optionalINS2_4TypeEEES5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS7_INS2_13LogicalResultEEES8_RN4llvm15SmallVectorImplIS8_EEEEEE4typeEOSD_EUlS5_SL_E_EENSC_IXsr3stdE14is_invocable_vISD_SE_SL_EESN_E4typeESQ_EUlS8_SL_E_NS_9allocatorISU_EESM_E7__cloneEPNS0_6__baseISM_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EC9CFBF8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_10TensorTypeEZNKS3_12wrapCallbackIS5_PFNS_8optionalINS2_4TypeEEES5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS7_INS2_13LogicalResultEEES8_RN4llvm15SmallVectorImplIS8_EEEEEE4typeEOSD_EUlS5_SL_E_EENSC_IXsr3stdE14is_invocable_vISD_SE_SL_EESN_E4typeESQ_EUlS8_SL_E_NS_9allocatorISU_EESM_EclEOS8_SL_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(**(void **)a2 + 136);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v3 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (v4 && (uint64_t v6 = (*(uint64_t (**)(void))(a1 + 8))(), v7))
  {
    if (v6)
    {
      uint64_t v8 = *(unsigned int *)(a3 + 8);
      if (v8 >= *(_DWORD *)(a3 + 12))
      {
        uint64_t v12 = v6;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v8 + 1, 8);
        uint64_t v6 = v12;
        LODWORD(v8) = *(_DWORD *)(a3 + 8);
      }
      *(void *)(*(void *)a3 + 8 * v8) = v6;
      ++*(_DWORD *)(a3 + 8);
    }
    BOOL v9 = v6 != 0;
    int v10 = 1;
  }
  else
  {
    BOOL v9 = 0;
    int v10 = 0;
  }
  return v9 | (v10 << 8);
}

uint64_t llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    BOOL v4 = *(char **)a2;
    if (*(void *)a2 != a2 + 16)
    {
      llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::assignRemote((char **)a1, (char **)a2);
      return a1;
    }
    unint64_t v5 = *(unsigned int *)(a2 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      CFTypeID v16 = *(char **)a1;
      if (v5)
      {
        CFTypeID v17 = &v4[8 * v5];
        do
        {
          uint64_t v18 = *(void *)v4;
          *(void *)BOOL v4 = 0;
          char v19 = *(unsigned int **)v16;
          *(void *)CFTypeID v16 = v18;
          if (v19)
          {
            std::string v20 = *(unsigned int **)v19;
            uint64_t v21 = v19[2];
            if (v21)
            {
              uint64_t v22 = 8 * v21;
              char v23 = (char *)(v20 - 2);
              do
              {
                uint64_t v24 = *(void *)&v23[v22];
                *(void *)&v23[v22] = 0;
                if (v24) {
                  (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
                }
                v22 -= 8;
              }
              while (v22);
              std::string v20 = *(unsigned int **)v19;
            }
            if (v20 != v19 + 4) {
              free(v20);
            }
            operator delete(v19);
          }
          v4 += 8;
          v16 += 8;
        }
        while (v4 != v17);
        uint64_t v25 = v16;
        CFTypeID v16 = *(char **)a1;
        uint64_t v6 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        uint64_t v25 = *(char **)a1;
      }
      long long v62 = &v16[8 * v6];
      while (v62 != v25)
      {
        long long v64 = (unsigned int *)*((void *)v62 - 1);
        v62 -= 8;
        long long v63 = v64;
        *(void *)long long v62 = 0;
        if (v64)
        {
          uint64_t v65 = *(unsigned int **)v63;
          uint64_t v66 = v63[2];
          if (v66)
          {
            uint64_t v67 = 8 * v66;
            uint64_t v68 = (char *)(v65 - 2);
            do
            {
              uint64_t v69 = *(void *)&v68[v67];
              *(void *)&v68[v67] = 0;
              if (v69) {
                (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
              }
              v67 -= 8;
            }
            while (v67);
            uint64_t v65 = *(unsigned int **)v63;
          }
          if (v65 != v63 + 4) {
            free(v65);
          }
          operator delete(v63);
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      uint64_t v70 = *(unsigned int *)(a2 + 8);
      if (v70)
      {
        long long v71 = *(char **)a2;
        uint64_t v72 = (char *)(*(void *)a2 + 8 * v70);
        do
        {
          uint64_t v74 = (unsigned int *)*((void *)v72 - 1);
          v72 -= 8;
          long long v73 = v74;
          *(void *)uint64_t v72 = 0;
          if (v74)
          {
            uint64_t v75 = *(unsigned int **)v73;
            uint64_t v76 = v73[2];
            if (v76)
            {
              uint64_t v77 = 8 * v76;
              uint64_t v78 = (char *)(v75 - 2);
              do
              {
                uint64_t v79 = *(void *)&v78[v77];
                *(void *)&v78[v77] = 0;
                if (v79) {
                  (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
                }
                v77 -= 8;
              }
              while (v77);
              uint64_t v75 = *(unsigned int **)v73;
            }
            if (v75 != v73 + 4) {
              free(v75);
            }
            operator delete(v73);
          }
        }
        while (v72 != v71);
      }
      goto LABEL_97;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      if (v6)
      {
        unsigned int v26 = &v4[8 * v6];
        uint64_t v27 = *(char **)a1;
        do
        {
          uint64_t v28 = *(void *)v4;
          *(void *)BOOL v4 = 0;
          uint64_t v29 = *(unsigned int **)v27;
          *(void *)uint64_t v27 = v28;
          if (v29)
          {
            int v30 = *(unsigned int **)v29;
            uint64_t v31 = v29[2];
            if (v31)
            {
              uint64_t v32 = 8 * v31;
              uint64_t v33 = (char *)(v30 - 2);
              do
              {
                uint64_t v34 = *(void *)&v33[v32];
                *(void *)&v33[v32] = 0;
                if (v34) {
                  (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
                }
                v32 -= 8;
              }
              while (v32);
              int v30 = *(unsigned int **)v29;
            }
            if (v30 != v29 + 4) {
              free(v30);
            }
            operator delete(v29);
          }
          v4 += 8;
          v27 += 8;
        }
        while (v4 != v26);
        goto LABEL_48;
      }
    }
    else
    {
      if (v6)
      {
        char v7 = *(char **)a1;
        uint64_t v8 = (char *)(*(void *)a1 + 8 * v6);
        do
        {
          int v10 = (unsigned int *)*((void *)v8 - 1);
          v8 -= 8;
          BOOL v9 = v10;
          *(void *)uint64_t v8 = 0;
          if (v10)
          {
            int v11 = *(unsigned int **)v9;
            uint64_t v12 = v9[2];
            if (v12)
            {
              uint64_t v13 = 8 * v12;
              uint64_t v14 = (char *)(v11 - 2);
              do
              {
                uint64_t v15 = *(void *)&v14[v13];
                *(void *)&v14[v13] = 0;
                if (v15) {
                  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
                }
                v13 -= 8;
              }
              while (v13);
              int v11 = *(unsigned int **)v9;
            }
            if (v11 != v9 + 4) {
              free(v11);
            }
            operator delete(v9);
          }
        }
        while (v8 != v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::PDLPatternConfigSet>,false>::grow(a1, v5);
    }
    uint64_t v6 = 0;
LABEL_48:
    unsigned int v35 = *(char **)a2;
    uint64_t v36 = *(unsigned int *)(a2 + 8);
    if (v6 != v36)
    {
      int64x2_t v37 = *(char **)a1;
      uint64_t v38 = 8 * v6;
      uint64_t v39 = (char *)(*(void *)a1 + 8 * v6);
      long long v40 = &v35[8 * v6];
      uint64_t v41 = 8 * v36;
      unint64_t v42 = 8 * v36 - 8 * v6 - 8;
      if (v42 < 0x78 || v40 < &v37[v41] && v39 < &v35[v41]) {
        goto LABEL_55;
      }
      uint64_t v43 = (v42 >> 3) + 1;
      uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
      v39 += v44;
      v40 += v44;
      uint64_t v45 = v38 + 16;
      uint64_t v46 = &v35[v38 + 16];
      int v47 = &v37[v45];
      uint64_t v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v49 = *((_OWORD *)v46 - 1);
        long long v50 = *(_OWORD *)v46;
        *((_OWORD *)v46 - 1) = 0uLL;
        *(_OWORD *)uint64_t v46 = 0uLL;
        *((_OWORD *)v47 - 1) = v49;
        *(_OWORD *)int v47 = v50;
        v46 += 32;
        v47 += 32;
        v48 -= 4;
      }
      while (v48);
      if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_55:
        int v51 = &v35[8 * v36];
        do
        {
          uint64_t v52 = *(void *)v40;
          *(void *)long long v40 = 0;
          v40 += 8;
          *(void *)uint64_t v39 = v52;
          v39 += 8;
        }
        while (v40 != v51);
      }
      unsigned int v35 = *(char **)a2;
    }
    *(_DWORD *)(a1 + 8) = v5;
    uint64_t v53 = *(unsigned int *)(a2 + 8);
    if (v53)
    {
      uint64_t v54 = &v35[8 * v53];
      do
      {
        int v56 = (unsigned int *)*((void *)v54 - 1);
        v54 -= 8;
        uint64_t v55 = v56;
        *(void *)uint64_t v54 = 0;
        if (v56)
        {
          int v57 = *(unsigned int **)v55;
          uint64_t v58 = v55[2];
          if (v58)
          {
            uint64_t v59 = 8 * v58;
            int v60 = (char *)(v57 - 2);
            do
            {
              uint64_t v61 = *(void *)&v60[v59];
              *(void *)&v60[v59] = 0;
              if (v61) {
                (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
              }
              v59 -= 8;
            }
            while (v59);
            int v57 = *(unsigned int **)v55;
          }
          if (v57 != v55 + 4) {
            free(v57);
          }
          operator delete(v55);
        }
      }
      while (v54 != v35);
    }
LABEL_97:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::assignRemote(char **a1, char **a2)
{
  BOOL v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = &v4[8 * v5];
    do
    {
      uint64_t v8 = (unsigned int *)*((void *)v6 - 1);
      v6 -= 8;
      char v7 = v8;
      *(void *)uint64_t v6 = 0;
      if (v8)
      {
        BOOL v9 = *(unsigned int **)v7;
        uint64_t v10 = v7[2];
        if (v10)
        {
          uint64_t v11 = 8 * v10;
          uint64_t v12 = (char *)(v9 - 2);
          do
          {
            uint64_t v13 = *(void *)&v12[v11];
            *(void *)&v12[v11] = 0;
            if (v13) {
              (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
            }
            v11 -= 8;
          }
          while (v11);
          BOOL v9 = *(unsigned int **)v7;
        }
        if (v9 != v7 + 4) {
          free(v9);
        }
        operator delete(v7);
      }
    }
    while (v6 != v4);
    BOOL v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::PDLPatternConfigSet>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v30 = 0;
  uint64_t v3 = (uint64_t *)(a1 + 16);
  BOOL v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v30);
  unint64_t v5 = *(void *)a1;
  uint64_t v6 = *(uint64_t **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (!v7) {
    goto LABEL_27;
  }
  unint64_t v8 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v8 < 0xB)
  {
    BOOL v9 = v4;
LABEL_12:
    uint64_t v18 = (uint64_t *)(v5 + 8 * v7);
    do
    {
      uint64_t v19 = *v6;
      *v6++ = 0;
      *(void *)BOOL v9 = v19;
      v9 += 8;
    }
    while (v6 != v18);
    goto LABEL_14;
  }
  BOOL v10 = v5 >= (unint64_t)&v4[8 * v7] || (unint64_t)v4 >= v5 + 8 * v7;
  BOOL v9 = v4;
  if (!v10) {
    goto LABEL_12;
  }
  unint64_t v11 = v8 + 1;
  uint64_t v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
  BOOL v9 = &v4[v12];
  uint64_t v6 = (uint64_t *)(v5 + v12);
  uint64_t v13 = (long long *)(v5 + 16);
  uint64_t v14 = v4 + 16;
  uint64_t v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v16 = *(v13 - 1);
    long long v17 = *v13;
    *(v13 - 1) = 0uLL;
    *uint64_t v13 = 0uLL;
    *(v14 - 1) = v16;
    *uint64_t v14 = v17;
    v13 += 2;
    v14 += 2;
    v15 -= 4;
  }
  while (v15);
  if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_14:
  std::string v20 = *(void **)a1;
  uint64_t v21 = (void *)(*(void *)a1 + 8 * v7);
  do
  {
    char v23 = (unsigned int *)*--v21;
    uint64_t v22 = v23;
    void *v21 = 0;
    if (v23)
    {
      uint64_t v24 = *(unsigned int **)v22;
      uint64_t v25 = v22[2];
      if (v25)
      {
        uint64_t v26 = 8 * v25;
        uint64_t v27 = (char *)(v24 - 2);
        do
        {
          uint64_t v28 = *(void *)&v27[v26];
          *(void *)&v27[v26] = 0;
          if (v28) {
            (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
          }
          v26 -= 8;
        }
        while (v26);
        uint64_t v24 = *(unsigned int **)v22;
      }
      if (v24 != v22 + 4) {
        free(v24);
      }
      operator delete(v22);
    }
  }
  while (v21 != v20);
  uint64_t v6 = *(uint64_t **)a1;
LABEL_27:
  int v29 = v30;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v29;
}

void sub_1805E5FB8()
{
  operator delete(v0);
}

uint64_t mlir::mpsx::anonymous namespace'::ANERegionOpCreator::getMarkAttrID(mlir::mpsx::_anonymous_namespace_::ANERegionOpCreator *this)
{
  uint64_t v1 = (mlir::StringAttr **)*((void *)this + 1);
  uint64_t v3 = "ANE_region";
  __int16 v4 = 259;
  return mlir::Builder::getStringAttr(v1, (mlir::MLIRContext *)&v3);
}

uint64_t mlir::mpsx::anonymous namespace'::ANERegionOpCreator::isOpCompatible(mlir::mpsx::_anonymous_namespace_::ANERegionOpCreator *this, mlir::Operation *a2)
{
  return (*(uint64_t (**)(mlir::mpsx::_anonymous_namespace_::ANERegionOpCreator *, mlir::Operation *, void))(*(void *)this + 32))(this, a2, 0);
}

uint64_t mlir::mpsx::anonymous namespace'::ANERegionOpCreator::isOpCompatible(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(mlir::Block **)(a2 + 16);
  if (!v5) {
    goto LABEL_4;
  }
  uint64_t ParentOp = mlir::Block::getParentOp(v5);
  if (!ParentOp) {
    goto LABEL_4;
  }
  if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id) {
    goto LABEL_4;
  }
  uint64_t v15 = *(void *)(a1 + 208);
  uint64_t v65 = (uint64_t *)ParentOp;
  SymName = (int8x16_t *)mlir::func::FuncOp::getSymName((mlir::func::FuncOp *)&v65);
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)v15, SymName, v17);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v15 + 8)) {
    goto LABEL_4;
  }
  uint64_t v19 = *(void *)(*(void *)v15 + 8 * Key);
  uint64_t v20 = *(void *)(v19 + 32);
  unsigned int v21 = *(_DWORD *)(v19 + 48);
  if (!v21) {
    goto LABEL_31;
  }
  unsigned int v22 = v21 - 1;
  unsigned int v23 = (v21 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v24 = (uint64_t *)(v20 + 40 * v23);
  uint64_t v25 = *v24;
  if (*v24 != a2)
  {
    int v26 = 1;
    while (v25 != -4096)
    {
      unsigned int v27 = v23 + v26++;
      unsigned int v23 = v27 & v22;
      uint64_t v24 = (uint64_t *)(v20 + 40 * (v27 & v22));
      uint64_t v25 = *v24;
      if (*v24 == a2) {
        goto LABEL_32;
      }
    }
LABEL_31:
    uint64_t v24 = (uint64_t *)(v20 + 40 * v21);
  }
LABEL_32:
  if (v24 != (uint64_t *)(v20 + 40 * v21) && *((unsigned char *)v24 + 8))
  {
    if (!*((_DWORD *)v24 + 6)) {
      goto LABEL_56;
    }
    if (!a3) {
      goto LABEL_5;
    }
    uint64_t v28 = (uint64_t *)v24[2];
    uint64_t v29 = *((unsigned int *)v24 + 8);
    if (v29)
    {
      uint64_t v30 = 8 * v29;
      uint64_t v31 = v28;
      while ((*v31 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v31;
        v30 -= 8;
        if (!v30) {
          goto LABEL_56;
        }
      }
    }
    else
    {
      uint64_t v31 = (uint64_t *)v24[2];
    }
    uint64_t v32 = &v28[v29];
    if (v31 == v32)
    {
LABEL_56:
      if ((*(unsigned char *)(a2 + 46) & 0x80) != 0 && (uint64_t v43 = *(unsigned int *)(a2 + 68), v43))
      {
        uint64_t v44 = 0;
        uint64_t v45 = *(void *)(a2 + 72);
        while (1)
        {
          uint64_t v46 = *(void *)(v45 + 32 * v44 + 24);
          uint64_t v65 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(v46 + 8) & 0xFFFFFFFFFFFFFFF8));
          uint64_t v66 = v47;
          if (!v65 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v65)) {
            break;
          }
          uint64_t v67 = v46;
          uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v67);
          if (!DefiningOp
            || (uint64_t v49 = DefiningOp,
                uint64_t v50 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
                ((*(uint64_t (**)(void, uint64_t))(**(void **)(v49 + 48) + 32))(*(void *)(v49 + 48), v50) & 1) == 0))
          {
            uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v65);
            if (v52)
            {
              uint64_t v53 = 8 * v52;
              while (*ArgAttrsAttr)
              {
                ++ArgAttrsAttr;
                v53 -= 8;
                if (!v53) {
                  goto LABEL_59;
                }
              }
              break;
            }
          }
LABEL_59:
          if (++v44 == v43) {
            goto LABEL_69;
          }
        }
      }
      else
      {
LABEL_69:
        uint64_t v54 = *(unsigned int *)(a2 + 36);
        if (v54) {
          uint64_t v55 = a2 - 16;
        }
        else {
          uint64_t v55 = 0;
        }
        if (!v54)
        {
          a3 = 1;
          goto LABEL_5;
        }
        uint64_t v56 = 0;
        while (1)
        {
          NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v55, v56);
          uint64_t v65 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
          uint64_t v66 = v58;
          if (!v65 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v65)) {
            break;
          }
          uint64_t v67 = NextResultAtOffset;
          uint64_t v59 = mlir::Value::getDefiningOp((mlir::Value *)&v67);
          if (!v59
            || (uint64_t v60 = v59,
                uint64_t v61 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
                ((*(uint64_t (**)(void, uint64_t))(**(void **)(v60 + 48) + 32))(*(void *)(v60 + 48), v61) & 1) == 0))
          {
            long long v62 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v65);
            if (v63)
            {
              uint64_t v64 = 8 * v63;
              while (*v62)
              {
                ++v62;
                v64 -= 8;
                if (!v64) {
                  goto LABEL_74;
                }
              }
              break;
            }
          }
LABEL_74:
          ++v56;
          a3 = 1;
          if (v56 == v54) {
            goto LABEL_5;
          }
        }
      }
    }
    else
    {
      uint64_t v33 = *(unsigned int *)(a3 + 16);
      if (v33)
      {
        uint64_t v34 = *(void *)a3;
        unsigned int v35 = v33 - 1;
        uint64_t v36 = *(void *)a3 + 8 * v33;
        uint64_t v37 = *v31;
LABEL_45:
        LODWORD(v38) = ((v37 >> 4) ^ (v37 >> 9)) & v35;
        uint64_t v39 = (uint64_t *)(v34 + 8 * v38);
        uint64_t v40 = *v39;
        if (*v39 == v37)
        {
          if (v39 != (uint64_t *)v36) {
            goto LABEL_47;
          }
        }
        else
        {
          int v41 = 1;
          while (v40 != -4096)
          {
            int v42 = v38 + v41++;
            uint64_t v38 = v42 & v35;
            uint64_t v40 = *(void *)(v34 + 8 * v38);
            if (v40 == v37)
            {
              if (v34 + 8 * v38 == v36) {
                break;
              }
LABEL_47:
              while (1)
              {
                if (++v31 == v32) {
                  goto LABEL_56;
                }
                uint64_t v37 = *v31;
                if ((*v31 | 0x1000) != 0xFFFFFFFFFFFFF000)
                {
                  if (v31 != v32) {
                    goto LABEL_45;
                  }
                  goto LABEL_56;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_4:
  a3 = 0;
LABEL_5:
  if (*(unsigned char *)(a2 + 47) && (uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"device_hint", 11), v9))
  {
    if (!InherentAttr) {
      return a3;
    }
  }
  else
  {
    uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "device_hint", 0xBuLL);
    if (!InherentAttr) {
      return a3;
    }
  }
  BOOL v10 = *(void **)(*(void *)InherentAttr + 136);
  BOOL v11 = v10 == &mlir::detail::TypeIDResolver<mlir::mps::DeviceHintAttr,void>::id;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::mps::DeviceHintAttr,void>::id) {
    uint64_t v12 = InherentAttr;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v67 = v12;
  if (v11)
  {
    if (!mlir::AffineExpr::getKind((mlir::AffineExpr *)&v67))
    {
      char v13 = *(unsigned char *)(a1 + 260) ? a3 : 1;
      if ((v13 & 1) == 0) {
    }
      }
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v67)) {
      return 0;
    }
  }
  return a3;
}

uint64_t mlir::mpsx::anonymous namespace'::ANERegionOpCreator::isRegionProfitable()
{
  return 1;
}

mlir::GenericProgramPoint *mlir::mpsx::anonymous namespace'::ANERegionOpCreator::getRegionOp(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, mlir::Operation **a15, uint64_t a16, uint64_t a17)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  unsigned int v22 = (const std::string::value_type **)(a1 + 272);
  std::string::size_type v23 = *(unsigned __int8 *)(a1 + 295);
  if (*(char *)(a1 + 295) < 0)
  {
    std::string::size_type v24 = *(void *)(a1 + 280);
    if (!v24)
    {
      std::string::__init_copy_ctor_external(&v87, *v22, 0);
      goto LABEL_15;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 295))
    {
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = *(_OWORD *)v22;
      v87.__r_.__value_.__r.__words[2] = *(void *)(a1 + 288);
      goto LABEL_15;
    }
    std::string::size_type v24 = *(void *)(a1 + 280);
  }
  *((unsigned char *)&v90.__r_.__value_.__s + 23) = 1;
  LOWORD(v90.__r_.__value_.__l.__data_) = 95;
  if ((v23 & 0x80u) == 0) {
    uint64_t v25 = (const std::string::value_type *)(a1 + 272);
  }
  else {
    uint64_t v25 = *v22;
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v26 = v23;
  }
  else {
    std::string::size_type v26 = v24;
  }
  unsigned int v27 = std::string::append(&v90, v25, v26);
  std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v87.__r_.__value_.__r.__words[2] = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
LABEL_15:
  __int16 v95 = 773;
  unint64_t v92 = a3;
  uint64_t v93 = a4;
  v94[0] = "_ANE_region_";
  p_p = (std::string *)&v92;
  uint64_t v98 = &a17;
  __int16 v100 = 2818;
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
  v90.__r_.__value_.__r.__words[2] = (std::string::size_type)&v87;
  __int16 v91 = 1026;
  llvm::Twine::str((llvm::Twine *)&v90, &v86);
  uint64_t v85 = mlir::FunctionType::get(**(mlir::MLIRContext ***)(a1 + 8), a13, a14, (uint64_t)a9, a10);
  uint64_t v29 = *(mlir::OpBuilder **)(a1 + 8);
  v90.__r_.__value_.__r.__words[0] = 0;
  p_p = 0;
  uint64_t v84 = mlir::OpBuilder::create<mlir::mpsx::ANEOp,mlir::FunctionType &,mlir::ArrayAttr,mlir::ArrayAttr>(v29, a2, &v85, (uint64_t *)&v90, (uint64_t *)&p_p);
  uint64_t v30 = *(mlir::StringAttr ***)(a1 + 8);
  __int16 v100 = 260;
  p_p = &v86;
  uint64_t StringAttr = mlir::Builder::getStringAttr(v30, (mlir::MLIRContext *)&p_p);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::GenericProgramPoint *)((char *)v84 + 24));
  __int16 v91 = 261;
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)"sym_name";
  v90.__r_.__value_.__l.__size_ = 8;
  uint64_t v33 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v90);
  mlir::Operation::setAttr((uint64_t)v84, v33, StringAttr);
  uint64_t v34 = (char *)operator new(0x48uLL);
  *(_OWORD *)uint64_t v34 = 0u;
  *((_OWORD *)v34 + 1) = 0u;
  *((void *)v34 + 4) = v34 + 32;
  *((void *)v34 + 5) = v34 + 32;
  *((void *)v34 + 7) = 0;
  *((void *)v34 + 8) = 0;
  *((void *)v34 + 6) = 0;
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90.__r_.__value_.__r.__words[2];
  v90.__r_.__value_.__l.__size_ = 0x400000000;
  if (a12 < 5)
  {
    p_p = (std::string *)a11;
    uint64_t v97 = 0;
    if (!a12)
    {
      int v40 = 0;
      unsigned int v38 = v90.__r_.__value_.__r.__words[1];
      goto LABEL_27;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, &v90.__r_.__value_.__r.__words[2], a12, 8);
    p_p = (std::string *)a11;
    uint64_t v97 = 0;
  }
  uint64_t v35 = 0;
  do
  {
    unint64_t v92 = (void *)mlir::ValueRange::dereference_iterator(&p_p, v35);
    uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v92);
    uint64_t v37 = LODWORD(v90.__r_.__value_.__r.__words[1]);
    if (LODWORD(v90.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v90.__r_.__value_.__r.__words[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, &v90.__r_.__value_.__r.__words[2], LODWORD(v90.__r_.__value_.__r.__words[1]) + 1, 8);
      uint64_t v37 = LODWORD(v90.__r_.__value_.__r.__words[1]);
    }
    *(void *)(v90.__r_.__value_.__r.__words[0] + 8 * v37) = Loc;
    unsigned int v38 = ++LODWORD(v90.__r_.__value_.__r.__words[1]);
    uint64_t v35 = ++v97;
  }
  while ((std::string *)a11 != p_p || v35 != a12);
  int v40 = 1;
LABEL_27:
  mlir::Block::addArguments(v34, a13, a14, (uint64_t)v90.__r_.__value_.__l.__data_, v38);
  unint64_t Body = (uint64_t *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v84);
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)Body, (uint64_t)v34);
  uint64_t v42 = *Body;
  *((void *)v34 + 2) = Body;
  *((void *)v34 + 1) = v42;
  *(void *)(v42 + 8) = v34 + 8;
  *unint64_t Body = (uint64_t)(v34 + 8);
  uint64_t v43 = *(void *)(a1 + 8);
  long long v76 = *(_OWORD *)(v43 + 16);
  uint64_t v44 = *((void *)v34 + 5);
  uint64_t v79 = v43 + 16;
  uint64_t v80 = v43;
  *(void *)(v43 + 16) = v34;
  *(void *)(v43 + 24) = v44;
  uint64_t v45 = (uint64_t *)*((void *)v34 + 6);
  uint64_t v46 = (uint64_t *)*((void *)v34 + 7);
  p_p = (std::string *)a11;
  uint64_t v97 = 0;
  uint64_t v98 = v45;
  if (v40 && v46 != v45)
  {
    uint64_t v47 = 0;
    do
    {
      int v51 = (void *)mlir::ValueRange::dereference_iterator(&p_p, v47);
      uint64_t v52 = *(mlir::OpBuilder **)(a1 + 8);
      unint64_t v92 = (void *)(v51[1] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v53 = mlir::OpBuilder::create<mlir::placement::ANEIOCast,mlir::Type,mlir::BlockArgument &>(v52, a2, (uint64_t *)&v92, v98);
      __p = v51;
      unint64_t v92 = 0;
      char v54 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)&__p, &v92);
      uint64_t v55 = v92;
      if ((v54 & 1) == 0)
      {
        uint64_t v55 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a5, (uint64_t)&__p, (unint64_t *)&__p, v92);
        void *v55 = __p;
        v55[1] = 0;
      }
      v55[1] = (char *)v53 - 16;
      uint64_t v47 = v97 + 1;
      uint64_t v48 = v98 + 1;
      uint64_t v97 = v47;
      ++v98;
    }
    while ((v47 != a12 || a11 != (void)p_p) && v48 != v46);
  }
  if (a16)
  {
    uint64_t v57 = 8 * a16;
    do
    {
      uint64_t v58 = *a15++;
      mlir::OpBuilder::clone(*(uint64_t ***)(a1 + 8), v58, (mlir::IRMapping *)a5);
      v57 -= 8;
    }
    while (v57);
  }
  unint64_t v92 = v94;
  uint64_t v93 = 0x200000000;
  if (a7 < 3)
  {
    uint64_t v59 = (std::string *)a6;
    p_p = (std::string *)a6;
    uint64_t v97 = 0;
    uint64_t v98 = a9;
    uint64_t v99 = 0;
    if (!a7) {
      goto LABEL_57;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v94, a7, 8);
    uint64_t v59 = (std::string *)a6;
    p_p = (std::string *)a6;
    uint64_t v97 = 0;
    uint64_t v98 = a9;
    uint64_t v99 = 0;
  }
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  while (v98 != a9 || v61 != a10)
  {
    uint64_t v63 = (void *)mlir::ValueRange::dereference_iterator(&p_p, v60);
    unint64_t v64 = mlir::TypeRange::dereference_iterator((uint64_t)v98, v99);
    __p = v63;
    unint64_t v82 = v64;
    uint64_t v88 = v63;
    uint64_t v89 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)&v88, &v89)&& v89 != (void *)(*(void *)a5 + 16 * *(unsigned int *)(a5 + 16)))
    {
      uint64_t v63 = (void *)v89[1];
    }
    uint64_t v89 = v63;
    uint64_t v65 = *(mlir::OpBuilder **)(a1 + 8);
    uint64_t v66 = mlir::Value::getLoc((mlir::Value *)&v89);
    uint64_t v67 = mlir::OpBuilder::create<mlir::placement::ANEIOCast,mlir::Type,mlir::BlockArgument &>(v65, v66, (uint64_t *)&v82, (uint64_t *)&v89);
    uint64_t v68 = v93;
    if (v93 >= (unint64_t)HIDWORD(v93))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v94, v93 + 1, 8);
      uint64_t v68 = v93;
    }
    v92[v68] = (char *)v67 - 16;
    LODWORD(v93) = v93 + 1;
    uint64_t v60 = v97 + 1;
    uint64_t v61 = v99 + 1;
    ++v97;
    ++v99;
    if (p_p == v59 && v60 == a7) {
      break;
    }
  }
LABEL_57:
  uint64_t v69 = v84;
  uint64_t v70 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::GenericProgramPoint *)((char *)v84 + 24));
  p_p = (std::string *)"mpsx.aneFamily";
  __int16 v100 = 259;
  uint64_t v71 = mlir::StringAttr::get(v70, (mlir::MLIRContext *)&p_p);
  uint64_t v72 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::GenericProgramPoint *)((char *)v84 + 24));
  mlir::anec::getFamilyString(*(unsigned int *)(a1 + 256), (char *)&__p);
  __int16 v100 = 260;
  p_p = (std::string *)&__p;
  uint64_t v73 = mlir::StringAttr::get(v72, (mlir::MLIRContext *)&p_p);
  mlir::Operation::setAttr((uint64_t)v69, v71, v73);
  if (v83 < 0) {
    operator delete(__p);
  }
  mlir::OpBuilder::create<mlir::mpsx::RegionReturnOp,llvm::SmallVector<mlir::Value,2u> &>(*(mlir::OpBuilder **)(a1 + 8), a2, (uint64_t)&v92);
  uint64_t v74 = v84;
  if (v92 != v94) {
    free(v92);
  }
  if (v80)
  {
    if ((void)v76)
    {
      *(_OWORD *)uint64_t v79 = v76;
    }
    else
    {
      *(void *)uint64_t v79 = 0;
      *(void *)(v79 + 8) = 0;
    }
  }
  if ((std::string::size_type *)v90.__r_.__value_.__l.__data_ != &v90.__r_.__value_.__r.__words[2]) {
    free(v90.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v86.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v74;
    }
LABEL_71:
    operator delete(v87.__r_.__value_.__l.__data_);
    return v74;
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_71;
  }
  return v74;
}

uint64_t mlir::mpsx::anonymous namespace'::ANERegionOpCreator::getCanonicalizationPatterns@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 224);
  *a2 = *(void *)(this + 216);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

mlir::GenericProgramPoint *mlir::mpsx::anonymous namespace'::ANERegionOpCreator::getRegionTerminator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = a3;
  v5[1] = a4;
  return mlir::OpBuilder::create<mlir::mpsx::RegionReturnOp,llvm::ArrayRef<mlir::Value> &>(*(mlir::OpBuilder **)(a1 + 8), a2, (uint64_t)v5);
}

uint64_t mlir::mpsx::anonymous namespace'::ANERegionOpCreator::getBody(mlir::mpsx::_anonymous_namespace_::ANERegionOpCreator *this, mlir::Operation *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = mlir::OpInterface<mlir::FormableRegionOpInterface,mlir::detail::FormableRegionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  if (result)
  {
    mlir::OpInterface<mlir::FormableRegionOpInterface,mlir::detail::FormableRegionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
    return *((void *)a2 + 2);
  }
  return result;
}

void mlir::mpsx::anonymous namespace'::ANERegionOpCreator::getInitializedConversionTarget(uint64_t a1@<X8>)
{
}

void mlir::mpsx::anonymous namespace'::ANERegionOpCreator::computeDeviceRegionCost(mlir::mpsx::_anonymous_namespace_::ANERegionOpCreator *this, mlir::Operation *a2)
{
  v3[47] = *(uint64_t **)MEMORY[0x1E4F143B8];
  v3[0] = (uint64_t *)mlir::Attribute::getContext((mlir::Operation *)((char *)a2 + 24));
  memset(&v3[1], 0, 24);
  mlir::OpBuilder::clone(v3, a2);
}

float sub_1805E6FF8()
{
  uint64_t v1 = v6;
  uint64_t v6 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  if (v4 < 0) {
    operator delete(v3);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v5);
  return v0;
}

float mlir::mpsx::anonymous namespace'::ANERegionOpCreator::computeHostRegionCost(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!a3) {
    return 0.0;
  }
  uint64_t v5 = a1 + 232;
  uint64_t v6 = 8 * a3;
  float v7 = 0.0;
  do
  {
    uint64_t v8 = *a2++;
    double v9 = mlir::mps::detail::MPSAbstractCostModel::computeCost(v5, v8, *(void *)(a1 + 264));
    float v7 = v7 + *(float *)&v9;
    v6 -= 8;
  }
  while (v6);
  return v7;
}

float mlir::mpsx::anonymous namespace'::ANERegionOpCreator::computeHostRegionCost(mlir::mpsx::_anonymous_namespace_::ANERegionOpCreator *this, mlir::Operation *a2)
{
  float v4 = 0.0;
  v3[0] = this;
  v3[1] = &v4;
  return v4;
}

float mlir::mpsx::anonymous namespace'::ANERegionOpCreator::computeModuleCost(mlir::mpsx::_anonymous_namespace_::ANERegionOpCreator *this, mlir::Operation *a2)
{
  return INFINITY;
}

float mlir::mpsx::anonymous namespace'::ANERegionOpCreator::synchronizationCost(mlir::mpsx::_anonymous_namespace_::ANERegionOpCreator *this, mlir::Operation *a2)
{
  return *(float *)(*((void *)this + 33) + 48);
}

uint64_t mlir::mpsx::anonymous namespace'::ANERegionOpCreator::materializeHostTypeConversion(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  v9[23] = *MEMORY[0x1E4F143B8];
  uint64_t result = mlir::materializeMPSToANECHostTypeConversion(*(mlir::UnknownLoc ***)(a1 + 8), a2, a3, a4, a5, a6);
  if (!(_BYTE)result)
  {
    mlir::emitError(a2, (uint64_t)&v8);
    if (v8)
    {
      mlir::Diagnostic::operator<<((uint64_t)v9, "unable to materialize host type conversion");
      if (v8) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v8);
      }
    }
    return std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v9);
  }
  return result;
}

BOOL mlir::mpsx::anonymous namespace'::ANERegionOpCreator::replaceOutOfRegionUses(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
  {
    uint64_t v2 = *(unsigned int *)(a2 + 68);
    if (v2)
    {
      uint64_t v3 = v2 - 1;
      for (uint64_t i = (uint64_t *)(*(void *)(a2 + 72) + 24); ; i += 4)
      {
        uint64_t v9 = *i;
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v9);
        if (!DefiningOp) {
          break;
        }
        uint64_t v6 = *(void **)(*(void *)(DefiningOp + 48) + 16);
        BOOL result = v6 != &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id;
        if (v6 != &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id || v3-- == 0) {
          return result;
        }
      }
    }
  }
  return 1;
}

mlir::GenericProgramPoint *mlir::mpsx::anonymous namespace'::ANERegionOpCreator::getCallOp(uint64_t a1, uint64_t a2, mlir::SymbolRefAttr *a3, uint64_t a4, uint64_t a5)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  v9[0] = a4;
  v9[1] = a5;
  uint64_t v8 = a3;
  uint64_t v5 = *(mlir::MLIRContext ***)(a1 + 8);
  int v7 = 1;
  return mlir::OpBuilder::create<mlir::placement::RegionCall,mlir::Operation *&,mlir::placement::RegionType,mlir::ValueRange &>(v5, a2, &v8, &v7, v9);
}

uint64_t mlir::mpsx::anonymous namespace'::ANERegionOpCreator::getPromotedType(uint64_t a1, void *a2)
{
  return mlir::TypeConverter::convertType(*(void *)(a1 + 200), a2);
}

uint64_t mlir::mpsx::anonymous namespace'::ANERegionOpCreator::insertInstrumentation(mlir::mpsx::_anonymous_namespace_::ANERegionOpCreator *this)
{
  return *((unsigned __int8 *)this + 261);
}

uint64_t mlir::mpsx::anonymous namespace'::ANERegionOpCreator::canonicalizeTranslatedRegion(mlir::mpsx::_anonymous_namespace_::ANERegionOpCreator *this, mlir::Operation *a2)
{
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::ANEOp,mlir::FunctionType &,mlir::ArrayAttr,mlir::ArrayAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.ane", (const unsigned __int8 *)8, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    unint64_t v19[2] = (uint64_t)"mpsx.ane";
    v19[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::mpsx::ANEOp::build((uint64_t)a1, (mlir::OperationState *)v21, *a3, *a4, *a5);
  char v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::ANEOp,void>::id) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::ANEIOCast,mlir::Type,mlir::BlockArgument &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.ane_io_cast", (const unsigned __int8 *)0x15, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    v17[2] = (uint64_t)"placement.ane_io_cast";
    v17[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::RegionReturnOp,llvm::SmallVector<mlir::Value,2u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  v18[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.region_return", (const unsigned __int8 *)0x12, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"mpsx.region_return";
    v15[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::RegionReturn::build((uint64_t)a1, (uint64_t)v18, v17[0], v17[1]);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::RegionReturnOp,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

void *std::__function::__func<mlir::mpsx::anonymous namespace'::ANERegionOpCreator::computeDeviceRegionCost(mlir::Operation *)::$_0,std::allocator<mlir::mpsx::anonymous namespace'::ANERegionOpCreator::computeDeviceRegionCost(mlir::Operation *)::$_0>,void ()(mlir::Operation *,mlir::Operation *)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EC9D1548;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mlir::mpsx::anonymous namespace'::ANERegionOpCreator::computeDeviceRegionCost(mlir::Operation *)::$_0,std::allocator<mlir::mpsx::anonymous namespace'::ANERegionOpCreator::computeDeviceRegionCost(mlir::Operation *)::$_0>,void ()(mlir::Operation *,mlir::Operation *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EC9D1548;
  a2[1] = v2;
  return result;
}

void std::__function::__func<mlir::mpsx::anonymous namespace'::ANERegionOpCreator::computeDeviceRegionCost(mlir::Operation *)::$_0,std::allocator<mlir::mpsx::anonymous namespace'::ANERegionOpCreator::computeDeviceRegionCost(mlir::Operation *)::$_0>,void ()(mlir::Operation *,mlir::Operation *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(v4 + 8);
  if (v5 >= *(_DWORD *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(a1 + 8), (void *)(v4 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(v4 + 8);
  }
  *(void *)(*(void *)v4 + 8 * v5) = v3;
  ++*(_DWORD *)(v4 + 8);
}

float llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::anonymous namespace'::ANERegionOpCreator::computeHostRegionCost(mlir::Operation *)::$_0>(void *a1, uint64_t a2)
{
  double v3 = mlir::mps::detail::MPSAbstractCostModel::computeCost(*a1 + 232, a2, *(void *)(*a1 + 264));
  uint64_t v4 = (float *)a1[1];
  float result = *(float *)&v3 + *v4;
  float *v4 = result;
  return result;
}

mlir::mpsx::_anonymous_namespace_::WriteANERegionsPass *mlir::mpsx::createWriteANERegionsPass@<X0>(uint64_t a1@<X0>, mlir::mpsx::_anonymous_namespace_::WriteANERegionsPass **a2@<X8>)
{
  uint64_t v4 = (mlir::mpsx::_anonymous_namespace_::WriteANERegionsPass *)operator new(0x348uLL);
  std::string::operator=((std::string *)((char *)v5 + 472), (const std::string *)a1);
  uint64_t v6 = *((void *)v4 + 71);
  if (!v6) {
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a1);
  if (*(unsigned char *)(a1 + 56))
  {
    if (*((unsigned char *)v4 + 824))
    {
      *((void *)v4 + 101) = *(void *)(a1 + 40);
      *((_DWORD *)v4 + 204) = *(_DWORD *)(a1 + 48);
    }
    else
    {
      *((void *)v4 + 100) = &unk_1EC9CA678;
      *((void *)v4 + 101) = *(void *)(a1 + 40);
      *((_DWORD *)v4 + 204) = *(_DWORD *)(a1 + 48);
      *((unsigned char *)v4 + 824) = 1;
    }
  }
  char v8 = *(unsigned char *)(a1 + 24);
  uint64_t v7 = a1 + 24;
  *((void *)v4 + 104) = *(void *)(v7 + 40);
  *((unsigned char *)v4 + 720) = v8;
  uint64_t v9 = *((void *)v4 + 97);
  if (v9)
  {
    float result = (mlir::mpsx::_anonymous_namespace_::WriteANERegionsPass *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, v7);
    *a2 = v4;
  }
  else
  {
LABEL_8:
    uint64_t v11 = (mlir::mpsx::_anonymous_namespace_::WriteANERegionsPass *)std::__throw_bad_function_call[abi:nn180100]();
  }
  return result;
}

mlir::mpsx::_anonymous_namespace_::WriteANERegionsPass *mlir::mpsx::anonymous namespace'::WriteANERegionsPass::WriteANERegionsPass(mlir::mpsx::_anonymous_namespace_::WriteANERegionsPass *this)
{
  *((void *)this + 2) = "builtin.module";
  *((void *)this + 3) = 14;
  *((unsigned char *)this + 32) = 1;
  *((unsigned char *)this + 40) = 0;
  *((unsigned char *)this + 120) = 0;
  uint64_t v2 = (void *)((char *)this + 152);
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = (char *)this + 200;
  *((void *)this + 24) = 0x400000000;
  *((void *)this + 29) = (char *)this + 248;
  *((void *)this + 30) = 0x400000000;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0x1000000000;
  *((void *)this + 42) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *(void *)this = &unk_1EC9D1600;
  v4.n128_u64[0] = (unint64_t)"The filename for the output to be produced.";
  v4.n128_u64[1] = 43;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)this + 43, (void *)this + 19, (uint64_t)"output-filename", 15, &v4);
  *((void *)this + 43) = &unk_1EC9CAFA0;
  *((void *)this + 72) = &unk_1EC9CB020;
  v4.n128_u64[0] = (unint64_t)"(Testing only) Force the pass to overwrite any files that already exist.";
  v4.n128_u64[1] = 72;
  char v8 = 0;
  uint64_t v9 = &v8;
  int v7 = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)this + 74, v2, (uint64_t)"force-overwrite", 15, &v4, &v9, &v7);
  *((void *)this + 74) = &unk_1EC9CB060;
  *((void *)this + 98) = &unk_1EC9CB0E0;
  *(void *)this = &unk_1EC9D1590;
  *((unsigned char *)this + 800) = 0;
  *((unsigned char *)this + 824) = 0;
  *((void *)this + 104) = 0;
  mlir::getMPSVersionFromANEC((uint64_t)&v4);
  if (*((unsigned __int8 *)this + 824) == v6)
  {
    if (*((unsigned char *)this + 824))
    {
      *((void *)this + 101) = v4.n128_u64[1];
      *((_DWORD *)this + 204) = v5;
    }
  }
  else if (*((unsigned char *)this + 824))
  {
    *((unsigned char *)this + 824) = 0;
  }
  else
  {
    *((void *)this + 100) = &unk_1EC9CA678;
    *((void *)this + 101) = v4.n128_u64[1];
    *((_DWORD *)this + 204) = v5;
    *((unsigned char *)this + 824) = 1;
  }
  return this;
}

void mlir::mpsx::anonymous namespace'::WriteANERegionsPass::~WriteANERegionsPass(mlir::mpsx::_anonymous_namespace_::WriteANERegionsPass *this)
{
  *(void *)this = &unk_1EC9D1600;
  *((void *)this + 74) = &unk_1EC9A3F00;
  uint64_t v2 = (char *)this + 752;
  double v3 = (char *)*((void *)this + 97);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 74) = &unk_1EC9A42A8;
  __n128 v4 = (void *)*((void *)this + 86);
  if (v4 != *((void **)this + 85)) {
    free(v4);
  }
  int v5 = (char *)*((void *)this + 82);
  if (v5 != (char *)this + 672) {
    free(v5);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 344);

  mlir::Pass::~Pass(this);
}

{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EC9D1600;
  *((void *)this + 74) = &unk_1EC9A3F00;
  uint64_t v2 = (char *)this + 752;
  double v3 = (char *)*((void *)this + 97);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 74) = &unk_1EC9A42A8;
  __n128 v4 = (void *)*((void *)this + 86);
  if (v4 != *((void **)this + 85)) {
    free(v4);
  }
  int v5 = (char *)*((void *)this + 82);
  if (v5 != (char *)this + 672) {
    free(v5);
  }
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 344);
  mlir::Pass::~Pass(this);

  operator delete(v6);
}

const char *mlir::mpsx::WriteANERegionsBase<mlir::mpsx::anonymous namespace'::WriteANERegionsPass>::getName()
{
  return "WriteANERegions";
}

void *mlir::mpsx::WriteANERegionsBase<mlir::mpsx::anonymous namespace'::WriteANERegionsPass>::getDependentDialects(int a1, uint64_t **a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EC9CF0D8;
  int v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::placement::PlacementDialect,void>::id, "placement", 9uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CF000;
  int v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mpsx::MPSXDialect,void>::id, "mpsx", 4uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CEEE0;
  int v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, "mps", 3uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CF048;
  int v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::memref::MemRefDialect,void>::id, "memref", 6uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CF090;
  int v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::tensor::TensorDialect,void>::id, "tensor", 6uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CEF28;
  int v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::scf::SCFDialect,void>::id, "scf", 3uLL, v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  v4[0] = &unk_1EC9CEF70;
  int v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::anec::ANECDialect,void>::id, "anec", 4uLL, v4);
  float result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

const char *mlir::mpsx::WriteANERegionsBase<mlir::mpsx::anonymous namespace'::WriteANERegionsPass>::getArgument()
{
  return "write-ane-regions";
}

const char *mlir::mpsx::WriteANERegionsBase<mlir::mpsx::anonymous namespace'::WriteANERegionsPass>::getDescription()
{
  return "Write the ANE regions to byetcode files to be consumed by the ANE compiler.";
}

void mlir::mpsx::anonymous namespace'::WriteANERegionsPass::runOnOperation(mlir::mpsx::_anonymous_namespace_::WriteANERegionsPass *this)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t Context = (mlir::GenericProgramPoint *)mlir::Attribute::getContext((mlir::Attribute *)((*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 24));
  mlir::GenericProgramPoint::~GenericProgramPoint(Context);
  if (!*((unsigned char *)this + 824))
  {
    uint64_t v11 = (uint64_t *)(*((void *)this + 5) & 0xFFFFFFFFFFFFFFF8);
    __int16 v42 = 257;
    mlir::Operation::emitOpError(v11, v41, (uint64_t)&v43);
    if (v43)
    {
      mlir::Diagnostic::operator<<((uint64_t)v44, "missing dialect version");
      if (v43) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
      }
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
    goto LABEL_70;
  }
  uint64_t v3 = *((void *)this + 5);
  unsigned int v38 = 0;
  std::string::size_type v39 = 0;
  uint64_t v40 = 0;
  char v4 = *((unsigned char *)this + 495);
  if ((v4 & 0x80000000) == 0)
  {
    int v5 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if (*((unsigned char *)this + 495)) {
      goto LABEL_4;
    }
LABEL_31:
    v41[0] = (const void **)"outputFilename is not set";
    __int16 v42 = 259;
    mlir::Operation::emitOpError(v5, v41, (uint64_t)&v43);
    goto LABEL_32;
  }
  int v5 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if (!*((void *)this + 60)) {
    goto LABEL_31;
  }
LABEL_4:
  if (v4 >= 0) {
    uint64_t v6 = (char *)this + 472;
  }
  else {
    uint64_t v6 = (char *)*((void *)this + 59);
  }
  if (v4 >= 0) {
    uint64_t v7 = *((unsigned __int8 *)this + 495);
  }
  else {
    uint64_t v7 = *((void *)this + 60);
  }
  MEMORY[0x1852FD9F0](&v38, v6, v7);
  __int16 v45 = 260;
  uint64_t v43 = &v38;
  if (!llvm::sys::fs::access((unsigned __int8 *)&v43, 0) && !*((unsigned char *)this + 720))
  {
    __int16 v37 = 257;
    mlir::Operation::emitOpError(v5, (const void ***)&v35, (uint64_t)&v43);
    if (v43)
    {
      mlir::Diagnostic::operator<<((uint64_t)v44, "file ");
      if (v43)
      {
        __int16 v42 = 260;
        v41[0] = (const void **)&v38;
        mlir::Diagnostic::operator<<((uint64_t)v44, v41);
        if (v43) {
          mlir::Diagnostic::operator<<((uint64_t)v44, " exists already");
        }
      }
    }
LABEL_32:
    LOBYTE(v5) = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43);
    if (v43) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
    if (SHIBYTE(v40) < 0) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  __p = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (v40 >= 0) {
    char v8 = &v38;
  }
  else {
    char v8 = v38;
  }
  if (v40 >= 0) {
    std::string::size_type v9 = HIBYTE(v40);
  }
  else {
    std::string::size_type v9 = v39;
  }
  mlir::openOutputFile(v8, v9, (uint64_t)&__p, &v31);
  uint64_t v10 = HIBYTE(v34);
  if (v34 < 0) {
    uint64_t v10 = v33;
  }
  if (v10)
  {
    *(void *)&long long v35 = "opening output file error: ";
    __int16 v37 = 259;
    mlir::Operation::emitOpError(v5, (const void ***)&v35, (uint64_t)&v43);
    if (v43)
    {
      __int16 v42 = 260;
      v41[0] = (const void **)&__p;
      mlir::Diagnostic::operator<<((uint64_t)v44, v41);
    }
    LOBYTE(v5) = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43);
    if (v43) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
LABEL_63:
    std::string::size_type v23 = v31;
    uint64_t v31 = 0;
    if (v23)
    {
      if (*((unsigned char *)v23 + 128)) {
        llvm::raw_fd_ostream::~raw_fd_ostream((llvm::ToolOutputFile::CleanupInstaller *)((char *)v23 + 32));
      }
      llvm::ToolOutputFile::CleanupInstaller::~CleanupInstaller(v23);
      operator delete(v24);
    }
    if ((SHIBYTE(v34) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v40) & 0x80000000) == 0) {
        goto LABEL_69;
      }
LABEL_73:
      operator delete(v38);
      if ((_BYTE)v5) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
    operator delete(__p);
    if (SHIBYTE(v40) < 0) {
      goto LABEL_73;
    }
LABEL_69:
    if ((_BYTE)v5)
    {
LABEL_71:
      mlir::GenericProgramPoint::~GenericProgramPoint(Context);
      return;
    }
LABEL_70:
    *((void *)this + 5) |= 4uLL;
    goto LABEL_71;
  }
  uint64_t v12 = v5[3];
  LOBYTE(v35) = 0;
  char v36 = 0;
  uint64_t v30 = mlir::ModuleOp::create(v12, &v35);
  uint64_t v43 = (void **)this;
  v44[0] = &v30;
  v41[0] = (const void **)&v43;
  if (!mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)v5, (mlir::Operation *)_ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4mpsx12_GLOBAL__N_119WriteANERegionsPass9serializeENS1_8ModuleOpEE3__0NSC_5ANEOpES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESP_E4typeES4_OT1_EUlS4_E_EES2_lS4_, (uint64_t)v41, 1))
  {
    LOBYTE(v5) = 0;
    goto LABEL_61;
  }
  if (*((void *)this + 104))
  {
    if (*((unsigned char *)this + 824))
    {
      uint64_t v13 = *((void *)this + 101);
      std::string::size_type v26 = &unk_1EC9CA678;
      uint64_t v27 = v13;
      int v28 = *((_DWORD *)this + 204);
      mlir::mps::inMemorySerializeMPSModule((unsigned int *)v30, (uint64_t)&v26, *((mlir::Operation **)v31 + 17), &v29);
      __int16 v14 = v29;
      if (v29)
      {
        uint64_t v15 = (mlir::mps::MPSResources **)*((void *)this + 104);
        uint64_t v29 = 0;
        __int16 v16 = *v15;
        *uint64_t v15 = v14;
        if (v16)
        {
          mlir::mps::MPSResources::~MPSResources(v16);
          operator delete(v17);
        }
      }
      else
      {
        v41[0] = (const void **)"failed to serialize the module";
        __int16 v42 = 259;
        mlir::Operation::emitOpError(v5, v41, (uint64_t)&v43);
        LOBYTE(v5) = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43);
        if (v43) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
      }
      unsigned int v21 = v29;
      uint64_t v29 = 0;
      if (v21)
      {
        mlir::mps::MPSResources::~MPSResources(v21);
        operator delete(v22);
      }
      if (!v14) {
        goto LABEL_61;
      }
      goto LABEL_60;
    }
  }
  else if (*((unsigned char *)this + 824))
  {
    uint64_t v18 = *((void *)this + 101);
    std::string::size_type v26 = &unk_1EC9CA678;
    uint64_t v27 = v18;
    int v28 = *((_DWORD *)this + 204);
    uint64_t v19 = (unsigned int *)v30;
    __int16 v20 = (mlir::Operation *)*((void *)v31 + 17);
    mlir::BytecodeWriterConfig::BytecodeWriterConfig(&v43, (uint64_t)"MLIR18.0.0git", 13);
    LODWORD(v19) = mlir::mps::serializeMPSModule(v19, (uint64_t)&v26, v20, (llvm::raw_ostream *)&v43, 0, 0);
    mlir::BytecodeWriterConfig::~BytecodeWriterConfig((mlir::BytecodeWriterConfig::Impl **)&v43);
    if (!v19)
    {
      v41[0] = (const void **)"failed to serialize the module";
      __int16 v42 = 259;
      mlir::Operation::emitOpError(v5, v41, (uint64_t)&v43);
      LOBYTE(v5) = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43);
      if (v43) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
      goto LABEL_61;
    }
LABEL_60:
    LOBYTE(v5) = 1;
    *((unsigned char *)v31 + 24) = 1;
LABEL_61:
    if (v30) {
      mlir::Operation::erase(v30);
    }
    goto LABEL_63;
  }
  uint64_t v25 = std::__throw_bad_optional_access[abi:nn180100]();
}

void *mlir::mpsx::WriteANERegionsBase<mlir::mpsx::anonymous namespace'::WriteANERegionsPass>::clonePass@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v4 = operator new(0x348uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((void *)v4 + 4) = *(void *)(a1 + 32);
  *((void *)v4 + 1) = v5;
  *((unsigned char *)v4 + 40) = 0;
  *((unsigned char *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = (char *)v4 + 200;
  *((void *)v4 + 24) = 0x400000000;
  *((void *)v4 + 29) = (char *)v4 + 248;
  *((void *)v4 + 30) = 0x400000000;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((void *)v4 + 42) = 0;
  *(void *)char v4 = &unk_1EC9D1600;
  v10.n128_u64[0] = (unint64_t)"The filename for the output to be produced.";
  v10.n128_u64[1] = 43;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)v4 + 43, (void *)v4 + 19, (uint64_t)"output-filename", 15, &v10);
  *((void *)v4 + 43) = &unk_1EC9CAFA0;
  *((void *)v4 + 72) = &unk_1EC9CB020;
  v10.n128_u64[0] = (unint64_t)"(Testing only) Force the pass to overwrite any files that already exist.";
  v10.n128_u64[1] = 72;
  char v8 = 0;
  std::string::size_type v9 = &v8;
  int v7 = 1;
  float result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)v4 + 74, (void *)v4 + 19, (uint64_t)"force-overwrite", 15, &v10, &v9, &v7);
  *((void *)v4 + 74) = &unk_1EC9CB060;
  *((void *)v4 + 98) = &unk_1EC9CB0E0;
  *(void *)char v4 = &unk_1EC9D1590;
  *((unsigned char *)v4 + 800) = 0;
  *((unsigned char *)v4 + 824) = 0;
  if (*(unsigned char *)(a1 + 824))
  {
    *((void *)v4 + 100) = &unk_1EC9CA678;
    *((void *)v4 + 101) = *(void *)(a1 + 808);
    *((_DWORD *)v4 + 204) = *(_DWORD *)(a1 + 816);
    *((unsigned char *)v4 + 824) = 1;
  }
  *((void *)v4 + 104) = *(void *)(a1 + 832);
  *a2 = v4;
  return result;
}

void *std::__function::__func<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EC9CEF70;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CEF70;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, void **a2)
{
  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"anec", 4, (uint64_t)&mlir::detail::TypeIDResolver<mlir::anec::ANECDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::anec::ANECDialect * mlir::MLIRContext::getOrLoadDialect<mlir::anec::ANECDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

mlir::anec::ANECDialect *llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::anec::ANECDialect * mlir::MLIRContext::getOrLoadDialect<mlir::anec::ANECDialect>(void)::{lambda(void)#1}>@<X0>(mlir::MLIRContext **a1@<X0>, mlir::anec::ANECDialect **a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = (mlir::anec::ANECDialect *)operator new(0x60uLL);
  float result = mlir::anec::ANECDialect::ANECDialect(v4, v3);
  *a2 = result;
  return result;
}

BOOL _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4mpsx12_GLOBAL__N_119WriteANERegionsPass9serializeENS1_8ModuleOpEE3__0NSC_5ANEOpES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESP_E4typeES4_OT1_EUlS4_E_EES2_lS4_(uint64_t a1, uint64_t *a2)
{
  v123[1] = *MEMORY[0x1E4F143B8];
  BOOL result = 1;
  if (!a2 || *(_UNKNOWN **)(a2[6] + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::ANEOp,void>::id) {
    return result;
  }
  uint64_t v5 = **(void **)(*(void *)a1 + 8);
  unint64_t v92 = a2;
  uint64_t v6 = (mlir::ForwardIterator *)a2;
  while (1)
  {
    int v7 = (mlir::Block *)*((void *)v6 + 2);
    if (!v7) {
      break;
    }
    uint64_t ParentOp = mlir::Block::getParentOp(v7);
    uint64_t v6 = (mlir::ForwardIterator *)ParentOp;
    if (!ParentOp
      || *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
    {
      goto LABEL_9;
    }
  }
  uint64_t v6 = 0;
LABEL_9:
  __p = (void *)mlir::SymbolRefAttr::get((mlir::SymbolRefAttr *)a2, (mlir::Operation *)a2);
  Value = (llvm *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
  v91[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
  v91[1] = v9;
  if (*((unsigned char *)v92 + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)v92, (uint64_t)"sym_name", 8);
    if (v11)
    {
      if (InherentAttr) {
        goto LABEL_12;
      }
LABEL_16:
      uint64_t v12 = 0;
      goto LABEL_17;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)(v92 + 7), "sym_name", 8uLL);
  if (!InherentAttr) {
    goto LABEL_16;
  }
LABEL_12:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
    uint64_t v12 = InherentAttr;
  }
  else {
    uint64_t v12 = 0;
  }
LABEL_17:
  uint64_t v90 = v12;
  int64x2_t v121 = v123;
  uint64_t v122 = 0x100000000;
  Value = (llvm *)&v90;
  uint64_t v113 = (void **)&v121;
  __p = &Value;
  char v13 = 1;
  mlir::detail::walk<mlir::ForwardIterator>(v6, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4mpsx12_GLOBAL__N_119WriteANERegionsPass5addOpENS1_8ModuleOpENSB_5ANEOpEE3__0NS1_9placement10RegionCallEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESQ_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&__p, 1);
  if (v122)
  {
    if (v122 == 1)
    {
      uint64_t v89 = 0;
      uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v92 + 3));
      unint64_t Body = (void *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v92);
      uint64_t v15 = Body[1];
      if (v15) {
        __int16 v16 = (mlir::GenericProgramPoint **)(v15 - 8);
      }
      else {
        __int16 v16 = 0;
      }
      mlir::Block::getTerminator(v16);
      if (v17)
      {
        uint64_t v18 = v17;
        __p = v99;
        uint64_t v98 = 0x400000000;
        __src[0] = v96;
        __src[1] = (void *)0x400000000;
        unint64_t v109 = v111;
        uint64_t v110 = 0x400000000;
        int8x16_t v106 = v108;
        uint64_t v107 = 0x400000000;
        uint64_t v19 = (void *)*Body;
        if ((void *)*Body == Body) {
          goto LABEL_35;
        }
        uint64_t v20 = Body[1];
        if (v20) {
          uint64_t v21 = v20 - 8;
        }
        else {
          uint64_t v21 = 0;
        }
        unint64_t v22 = ((*(void *)(v21 + 56) - *(void *)(v21 + 48)) >> 3);
        if (v22 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v99, v22, 8);
          uint64_t v19 = (void *)*Body;
        }
        if (v19 == Body)
        {
LABEL_35:
          LODWORD(v25) = 0;
        }
        else
        {
          uint64_t v23 = Body[1];
          if (v23) {
            uint64_t v24 = v23 - 8;
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v25 = (*(void *)(v24 + 56) - *(void *)(v24 + 48)) >> 3;
        }
        if (v25 > (unint64_t)HIDWORD(__src[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, v96, v25, 8);
        }
        if ((*(unsigned char *)(v18 + 46) & 0x80) == 0) {
          goto LABEL_44;
        }
        unint64_t v26 = *(unsigned int *)(v18 + 68);
        if (HIDWORD(v110) < v26)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v111, v26, 8);
          if ((*(unsigned char *)(v18 + 46) & 0x80) == 0)
          {
LABEL_44:
            uint64_t v27 = (void *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v92);
            if ((void *)*v27 == v27
              || ((uint64_t v28 = v27[1]) != 0 ? (v29 = v28 - 8) : (v29 = 0),
                  uint64_t v30 = *(void ***)(v29 + 48),
                  (uint64_t v31 = *(void *)(v29 + 56) - (void)v30) == 0))
            {
LABEL_62:
              if ((*(unsigned char *)(v18 + 46) & 0x80) == 0 || (uint64_t v39 = *(unsigned int *)(v18 + 68), !v39))
              {
LABEL_87:
                uint64_t v50 = *(unsigned int *)(v5 + 40);
                unint64_t v49 = *(unsigned int *)(v5 + 44);
                long long v85 = (unint64_t)Context;
                uint64_t v86 = 0;
                uint64_t v87 = 0;
                uint64_t v51 = *(void *)(((v5 + 16 * ((v49 >> 23) & 1) + ((v49 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                                + 32 * v50
                                + 8);
                if (v51) {
                  uint64_t v52 = v51 - 8;
                }
                else {
                  uint64_t v52 = 0;
                }
                uint64_t v86 = v52;
                uint64_t v87 = v52 + 32;
                mlir::ValueRange::ValueRange(v105, (uint64_t)__src[0], LODWORD(__src[1]));
                mlir::ValueRange::ValueRange(v104, (uint64_t)v106, v107);
                uint64_t v84 = mlir::FunctionType::get(Context, v105[0], v105[1], v104[0], v104[1]);
                uint64_t v89 = mlir::OpBuilder::create<mlir::func::FuncOp,llvm::StringRef const&,mlir::FunctionType &>((mlir::StringAttr **)&v85, v92[3], v91, &v84);
                mlir::detail::FunctionOpInterfaceTrait<mlir::func::FuncOp>::addEntryBlock((mlir::func::FuncOp *)&v89);
                uint64_t v113 = 0;
                Value = 0;
                LODWORD(v114) = 0;
                uint64_t v116 = 0;
                uint64_t v115 = 0;
                int v117 = 0;
                uint64_t v119 = 0;
                unsigned int v118 = 0;
                unsigned int v120 = 0;
                uint64_t v53 = (void *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v89);
                if ((void *)*v53 != v53)
                {
                  uint64_t v54 = v53[1];
                  uint64_t v55 = v54 - 8;
                  if (!v54) {
                    uint64_t v55 = 0;
                  }
                  if (v98)
                  {
                    uint64_t v57 = *(uint64_t **)(v55 + 48);
                    uint64_t v56 = *(void **)(v55 + 56);
                    if (v56 != v57)
                    {
                      uint64_t v58 = (void **)__p;
                      uint64_t v59 = 8 * (v56 - v57) - 8;
                      uint64_t v60 = 8 * v98 - 8;
                      do
                      {
                        uint64_t v61 = *v57;
                        uint64_t v94 = *v58;
                        uint64_t v101 = 0;
                        char v62 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&Value, (unint64_t *)&v94, &v101);
                        uint64_t v63 = v101;
                        if ((v62 & 1) == 0)
                        {
                          uint64_t v63 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)&Value, (uint64_t)&v94, (unint64_t *)&v94, v101);
                          *uint64_t v63 = v94;
                          v63[1] = 0;
                        }
                        v63[1] = v61;
                        if (!v60) {
                          break;
                        }
                        ++v58;
                        ++v57;
                        uint64_t v64 = v59;
                        v59 -= 8;
                        v60 -= 8;
                      }
                      while (v64);
                    }
                  }
                }
                uint64_t v65 = *(void *)(mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v89) + 8);
                if (v65) {
                  uint64_t v66 = v65 - 8;
                }
                else {
                  uint64_t v66 = 0;
                }
                uint64_t v67 = *(void *)(v66 + 40);
                uint64_t v86 = v66;
                uint64_t v87 = v67;
                unint64_t v68 = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v92);
                uint64_t v101 = &v85;
                uint64_t p_Value = (uint64_t)&Value;
                uint64_t v69 = *(void *)(v68 + 8);
                if (v69 != v68)
                {
                  unint64_t v70 = v68;
                  do
                  {
                    uint64_t v71 = v69 - 8;
                    if (!v69) {
                      uint64_t v71 = 0;
                    }
                    uint64_t v72 = (mlir::GenericProgramPoint *)(v71 + 32);
                    uint64_t v73 = *(mlir::GenericProgramPoint **)(v71 + 40);
                    if (v73 != (mlir::GenericProgramPoint *)(v71 + 32))
                    {
                      do
                      {
                        uint64_t v74 = (mlir::GenericProgramPoint *)*((void *)v73 + 1);
                        mlir::GenericProgramPoint::~GenericProgramPoint(v73);
                        uint64_t v73 = v74;
                      }
                      while (v74 != v72);
                    }
                    uint64_t v69 = *(void *)(v69 + 8);
                  }
                  while (v69 != v70);
                }
                uint64_t v101 = v103;
                uint64_t p_Value = 0x200000000;
                unsigned int v76 = v110;
                if (v110 >= 3)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, v103, v110, 8);
                  unsigned int v76 = v110;
                }
                if (v76)
                {
                  uint64_t v77 = (unint64_t *)v109;
                  uint64_t v78 = 8 * v76;
                  do
                  {
                    unint64_t v79 = *v77;
                    unint64_t v93 = *v77;
                    uint64_t v94 = 0;
                    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&Value, &v93, &v94)&& v94 != (void *)((char *)Value + 16 * v114))
                    {
                      unint64_t v79 = v94[1];
                    }
                    uint64_t v80 = p_Value;
                    if (p_Value >= (unint64_t)HIDWORD(p_Value))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, v103, p_Value + 1, 8);
                      uint64_t v80 = p_Value;
                    }
                    *((void *)v101 + v80) = v79;
                    LODWORD(p_Value) = p_Value + 1;
                    ++v77;
                    v78 -= 8;
                  }
                  while (v78);
                }
                mlir::OpBuilder::create<mlir::func::ReturnOp,llvm::SmallVector<mlir::Value,2u> &>((mlir::OpBuilder *)&v85, *(void *)(v18 + 24), (uint64_t)&v101);
                if (v101 != v103) {
                  free(v101);
                }
                llvm::deallocate_buffer(v118, (void *)(16 * v120));
              }
              uint64_t v40 = (void **)(*(void *)(v18 + 72) + 24);
              while (1)
              {
                uint64_t v101 = *v40;
                if (!*(void *)v101 || **(void **)v101)
                {
                  *(void *)&long long v85 = "invalid result";
                  __int16 v88 = 259;
                  mlir::Operation::emitOpError(v92, (const void ***)&v85, (uint64_t)&Value);
                  char v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
                  if (Value) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
                  }
                  goto LABEL_132;
                }
                uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v101);
                if (!DefiningOp) {
                  break;
                }
                __int16 v42 = *(void **)(*(void *)(DefiningOp + 48) + 16);
                BOOL v43 = v42 == &mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id;
                if (v42 == &mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id) {
                  unint64_t v44 = DefiningOp;
                }
                else {
                  unint64_t v44 = 0;
                }
                v105[0] = v44;
                if (!v43) {
                  goto LABEL_129;
                }
                uint64_t Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v105);
                uint64_t v46 = v110;
                if (v110 >= (unint64_t)HIDWORD(v110))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v111, v110 + 1, 8);
                  uint64_t v46 = v110;
                }
                *((void *)v109 + v46) = Input;
                LODWORD(v110) = v110 + 1;
                uint64_t v47 = *(void *)(*((void *)v109 + v110 - 1) + 8);
                uint64_t v48 = v107;
                if (v107 >= (unint64_t)HIDWORD(v107))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v108, v107 + 1, 8);
                  uint64_t v48 = v107;
                }
                *((void *)v106 + v48) = v47 & 0xFFFFFFFFFFFFFFF8;
                LODWORD(v107) = v107 + 1;
                v40 += 4;
                if (!--v39) {
                  goto LABEL_87;
                }
              }
              v105[0] = 0;
LABEL_129:
              int v81 = v92;
              unint64_t v82 = "invalid result";
            }
            else
            {
              uint64_t v32 = 8 * (v31 >> 3);
              while (1)
              {
                uint64_t v33 = (void *)**v30;
                if (!v33 || *v33) {
                  break;
                }
                uint64_t v34 = v33[2];
                if (!v34
                  || *(void *)(*(void *)(v34 + 48) + 16) != (void)&mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id)
                {
                  break;
                }
                uint64_t v36 = v98;
                if (v98 >= (unint64_t)HIDWORD(v98))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v99, v98 + 1, 8);
                  uint64_t v36 = v98;
                }
                *((void *)__p + v36) = v34 - 16;
                LODWORD(v98) = v98 + 1;
                uint64_t v37 = *(void *)(*((void *)__p + v98 - 1) + 8);
                uint64_t v38 = LODWORD(__src[1]);
                if (LODWORD(__src[1]) >= (unint64_t)HIDWORD(__src[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, v96, LODWORD(__src[1]) + 1, 8);
                  uint64_t v38 = LODWORD(__src[1]);
                }
                *((void *)__src[0] + v38) = v37 & 0xFFFFFFFFFFFFFFF8;
                ++LODWORD(__src[1]);
                ++v30;
                v32 -= 8;
                if (!v32) {
                  goto LABEL_62;
                }
              }
              int v81 = v92;
              unint64_t v82 = "invalid argument";
            }
            *(void *)&long long v85 = v82;
            __int16 v88 = 259;
            mlir::Operation::emitOpError(v81, (const void ***)&v85, (uint64_t)&Value);
            char v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            if (Value) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
            }
LABEL_132:
            std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v113);
            if (v106 != v108) {
              free(v106);
            }
            if (v109 != v111) {
              free(v109);
            }
            if (__src[0] != v96) {
              free(__src[0]);
            }
            if (__p != v99) {
              free(__p);
            }
            goto LABEL_83;
          }
          LODWORD(v26) = *(_DWORD *)(v18 + 68);
        }
        if (HIDWORD(v107) < v26) {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v108, v26, 8);
        }
        goto LABEL_44;
      }
      __p = "missing terminator";
      LOWORD(__dst) = 259;
      mlir::Operation::emitOpError(v92, (const void ***)&__p, (uint64_t)&Value);
    }
    else
    {
      __p = "Found more than one call to the same region";
      LOWORD(__dst) = 259;
      mlir::Operation::emitError(v92, (uint64_t)&__p, (uint64_t)&Value);
    }
    char v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v113);
  }
LABEL_83:
  if (v121 != v123) {
    free(v121);
  }
  return v13 != 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::func::FuncOp,llvm::StringRef const&,mlir::FunctionType &>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v20[38] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"func.func", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"func.func";
    v18[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::func::FuncOp::build(a1, (uint64_t)v20, *a3, a3[1], *a4, 0, 0, v11, 0, 0);
  uint64_t v12 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id) {
    char v13 = v12;
  }
  else {
    char v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::func::ReturnOp,llvm::SmallVector<mlir::Value,2u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  v18[38] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"func.return", (const unsigned __int8 *)0xB, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"func.return";
    v15[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::RegionReturn::build((uint64_t)a1, (uint64_t)v18, v17[0], v17[1]);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::ReturnOp,void>::id) {
    char v10 = v9;
  }
  else {
    char v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

uint64_t mlir::mpsx::anonymous namespace'::WriteANERegionsPass::addOp(mlir::ModuleOp,mlir::mpsx::ANEOp)::$_2::operator()(uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v31[23] = *MEMORY[0x1E4F143B8];
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(a2);
  uint64_t v29 = ElementTypeOrSelf;
  uint64_t v28 = mlir::getElementTypeOrSelf(a3);
  if (ElementTypeOrSelf != v28)
  {
    if (mlir::Type::isF32((mlir::Type *)&v29) && mlir::Type::isF16((mlir::Type *)&v28))
    {
      if (!a3) {
        goto LABEL_13;
      }
      uint64_t v10 = *a3;
      unint64_t v11 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v12 = *(unsigned int *)(v10 + 16);
      if (!v12) {
        goto LABEL_13;
      }
      char v13 = *(void **)(v10 + 8);
      __int16 v14 = &v13[2 * v12];
      do
      {
        unint64_t v15 = v12 >> 1;
        __int16 v16 = &v13[2 * (v12 >> 1)];
        unint64_t v18 = *v16;
        __int16 v17 = v16 + 2;
        v12 += ~(v12 >> 1);
        if (v18 < v11) {
          char v13 = v17;
        }
        else {
          unint64_t v12 = v15;
        }
      }
      while (v12);
      if (v13 != v14 && *v13 == v11) {
        uint64_t v19 = v13[1];
      }
      else {
LABEL_13:
      }
        uint64_t v19 = 0;
      uint64_t v30 = a3;
      v31[0] = v19;
      uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v30);
      int64_t v21 = *(void *)(a4 + 8 * a5 - 16);
      uint64_t v23 = *(void *)(ArgAttrsAttr + 8 * v22 - 8);
      if (v23 * (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v29) >> 3) <= v21) {
        return v29;
      }
      uint64_t v24 = "Invalid input strides: row stride must be large enough to represent the whole F32 row";
    }
    else
    {
      uint64_t v24 = "Only F16 <-> F32 ANE / host type conversion is supported";
    }
    unint64_t v26 = v24;
    __int16 v27 = 259;
    mlir::Operation::emitError(a1, (uint64_t)&v26, (uint64_t)&v30);
    if (v30) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v31);
    return 0;
  }
  return ElementTypeOrSelf;
}

uint64_t mlir::mpsx::anonymous namespace'::WriteANERegionsPass::addOp(mlir::ModuleOp,mlir::mpsx::ANEOp)::IOAttributes::toMLIRAttribute(uint64_t a1, mlir::StringAttr *this)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  *(void *)&v47[0] = "name";
  LOWORD(v48) = 259;
  uint64_t v4 = mlir::StringAttr::get(this, (mlir::MLIRContext *)v47);
  __int16 v45 = 260;
  v44[0] = a1;
  uint64_t v5 = mlir::StringAttr::get(this, (mlir::MLIRContext *)v44);
  mlir::NamedAttribute::NamedAttribute(&v46, v4, v5);
  v44[0] = this;
  memset(&v44[1], 0, 24);
  *(void *)&v47[0] = "elementType";
  LOWORD(v48) = 259;
  uint64_t v6 = mlir::StringAttr::get(this, (mlir::MLIRContext *)v47);
  uint64_t v7 = mlir::TypeAttr::get(*(void *)(a1 + 24));
  mlir::NamedAttribute::NamedAttribute(&v43, v6, v7);
  *(void *)&v47[0] = "shape";
  LOWORD(v48) = 259;
  uint64_t v8 = mlir::StringAttr::get(this, (mlir::MLIRContext *)v47);
  *(void *)&long long v52 = *(unsigned int *)(a1 + 40);
  uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)v44, 0x40u, 1);
  uint64_t v10 = (void *)mlir::RankedTensorType::get((uint64_t)&v52, 1, IntegerType, 0);
  unint64_t v11 = v10;
  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v12 = *v10;
  unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v14 = *(unsigned int *)(v12 + 16);
  if (!v14) {
    goto LABEL_10;
  }
  unint64_t v15 = *(void **)(v12 + 8);
  __int16 v16 = &v15[2 * v14];
  do
  {
    unint64_t v17 = v14 >> 1;
    unint64_t v18 = &v15[2 * (v14 >> 1)];
    unint64_t v20 = *v18;
    uint64_t v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13) {
      unint64_t v15 = v19;
    }
    else {
      unint64_t v14 = v17;
    }
  }
  while (v14);
  if (v15 != v16 && *v15 == v13) {
    uint64_t v21 = v15[1];
  }
  else {
LABEL_10:
  }
    uint64_t v21 = 0;
  uint64_t v22 = mlir::DenseElementsAttr::getFromRawBuffer(v11, v21, *(void *)(a1 + 32), 8 * *(unsigned int *)(a1 + 40), 8, 1, 1);
  mlir::NamedAttribute::NamedAttribute(&v42, v8, v22);
  *(void *)&v47[0] = "strides";
  LOWORD(v48) = 259;
  uint64_t v23 = mlir::StringAttr::get(this, (mlir::MLIRContext *)v47);
  *(void *)&long long v51 = *(unsigned int *)(a1 + 88);
  uint64_t v24 = mlir::Builder::getIntegerType((mlir::Builder *)v44, 0x40u, 1);
  uint64_t v25 = (void *)mlir::RankedTensorType::get((uint64_t)&v51, 1, v24, 0);
  unint64_t v26 = v25;
  if (!v25) {
    goto LABEL_20;
  }
  uint64_t v27 = *v25;
  unint64_t v28 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v29 = *(unsigned int *)(v27 + 16);
  if (!v29) {
    goto LABEL_20;
  }
  uint64_t v30 = *(void **)(v27 + 8);
  uint64_t v31 = &v30[2 * v29];
  do
  {
    unint64_t v32 = v29 >> 1;
    uint64_t v33 = &v30[2 * (v29 >> 1)];
    unint64_t v35 = *v33;
    uint64_t v34 = v33 + 2;
    v29 += ~(v29 >> 1);
    if (v35 < v28) {
      uint64_t v30 = v34;
    }
    else {
      unint64_t v29 = v32;
    }
  }
  while (v29);
  if (v30 != v31 && *v30 == v28) {
    uint64_t v36 = v30[1];
  }
  else {
LABEL_20:
  }
    uint64_t v36 = 0;
  uint64_t v37 = mlir::DenseElementsAttr::getFromRawBuffer(v26, v36, *(void *)(a1 + 80), 8 * *(unsigned int *)(a1 + 88), 8, 1, 1);
  mlir::NamedAttribute::NamedAttribute(&v52, v23, v37);
  *(void *)&v47[0] = "interleave";
  LOWORD(v48) = 259;
  uint64_t v38 = mlir::StringAttr::get(this, (mlir::MLIRContext *)v47);
  uint64_t v39 = mlir::Builder::getIntegerType((mlir::Builder *)v44, 0x40u, 0);
  uint64_t v40 = mlir::IntegerAttr::get(v39, *(void *)(a1 + 128));
  mlir::NamedAttribute::NamedAttribute(&v51, v38, v40);
  v47[0] = v46;
  v47[1] = v43;
  long long v48 = v42;
  long long v49 = v52;
  long long v50 = v51;
  return mlir::DictionaryAttr::get(this, (uint64_t *)v47, 5);
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4mpsx12_GLOBAL__N_119WriteANERegionsPass5addOpENS1_8ModuleOpENSB_5ANEOpEE3__0NS1_9placement10RegionCallEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESQ_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t *a1, mlir::Operation *a2)
{
  if (a2)
  {
    if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
    {
      uint64_t v2 = *a1;
      unint64_t v11 = a2;
      AttrData = (const void *)mlir::OpaqueAttr::getAttrData(*(mlir::OpaqueAttr **)v2);
      size_t v5 = v4;
      Callee = (const void *)mlir::placement::RegionCall::getCallee(&v11);
      if (v5 == v7 && (!v5 || !memcmp(AttrData, Callee, v5)))
      {
        uint64_t v8 = *(void *)(v2 + 8);
        uint64_t v9 = v11;
        uint64_t v10 = *(unsigned int *)(v8 + 8);
        if (v10 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(v2 + 8), (void *)(v8 + 16), v10 + 1, 8);
          LODWORD(v10) = *(_DWORD *)(v8 + 8);
        }
        *(void *)(*(void *)v8 + 8 * v10) = v9;
        ++*(_DWORD *)(v8 + 8);
      }
    }
  }
}

mlir::GenericProgramPoint *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::anonymous namespace'::WriteANERegionsPass::addOp(mlir::ModuleOp,mlir::mpsx::ANEOp)::$_1>(mlir::GenericProgramPoint *result, mlir::Operation *a2)
{
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id)
  {
    uint64_t v3 = result;
    uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
    BOOL result = (mlir::GenericProgramPoint *)(*(uint64_t (**)(void *, uint64_t))(**((void **)a2 + 6) + 32))(*((void **)a2 + 6), v4);
    if ((result & 1) == 0)
    {
      size_t v5 = *(uint64_t ***)v3;
      uint64_t v6 = (mlir::IRMapping *)*((void *)v3 + 1);
      return mlir::OpBuilder::clone(v5, a2, v6);
    }
  }
  return result;
}

uint64_t mlir::detail::verifyParallelCombiningOpInterface(mlir::detail *this, mlir::Operation *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *((unsigned int *)this + 11);
  if ((v2 & 0x7FFFFF) == 1)
  {
    uint64_t v3 = (void *)((((unint64_t)this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)this + 10));
    if ((void *)*v3 != v3 && *(void **)(v3[1] + 8) == v3) {
      return 1;
    }
    v20[0] = "expected single block op region";
    __int16 v21 = 259;
    mlir::Operation::emitError((uint64_t *)this, (uint64_t)v20, (uint64_t)v22);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      size_t v5 = (void **)__p;
      if (__p)
      {
        uint64_t v6 = v28;
        uint64_t v7 = __p;
        if (v28 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        unint64_t v28 = v5;
        operator delete(v7);
      }
      uint64_t v8 = v25;
      if (!v25) {
        goto LABEL_34;
      }
      uint64_t v9 = v26;
      uint64_t v10 = v25;
      if (v26 == v25)
      {
LABEL_33:
        unint64_t v26 = v8;
        operator delete(v10);
LABEL_34:
        if (v23 != &v24) {
          free(v23);
        }
        return v4;
      }
      do
      {
        uint64_t v12 = (void *)*--v9;
        unint64_t v11 = v12;
        *uint64_t v9 = 0;
        if (v12) {
          operator delete[](v11);
        }
      }
      while (v9 != v8);
LABEL_32:
      uint64_t v10 = v25;
      goto LABEL_33;
    }
  }
  else
  {
    v20[0] = "expected single region op";
    __int16 v21 = 259;
    mlir::Operation::emitError((uint64_t *)this, (uint64_t)v20, (uint64_t)v22);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      unint64_t v13 = (void **)__p;
      if (__p)
      {
        unint64_t v14 = v28;
        unint64_t v15 = __p;
        if (v28 != __p)
        {
          do
            unint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          unint64_t v15 = __p;
        }
        unint64_t v28 = v13;
        operator delete(v15);
      }
      uint64_t v8 = v25;
      if (!v25) {
        goto LABEL_34;
      }
      __int16 v16 = v26;
      uint64_t v10 = v25;
      if (v26 == v25) {
        goto LABEL_33;
      }
      do
      {
        unint64_t v18 = (void *)*--v16;
        unint64_t v17 = v18;
        *__int16 v16 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v16 != v8);
      goto LABEL_32;
    }
  }
  return v4;
}

uint64_t mlir::parseSourceFile(uint64_t **a1, uint64_t a2, uint64_t ***a3, uint64_t *a4)
{
  uint64_t v7 = (const llvm::MemoryBuffer *)**a1;
  if (a4)
  {
    uint64_t v9 = *a3;
    uint64_t v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(**a1);
    *a4 = mlir::FileLineColLoc::get((mlir::StringAttr *)v9, v10, v11, 0, 0);
  }
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v14, v7);
  if (!mlir::isBytecode((uint64_t)v14)) {
    mlir::parseAsmSourceFile(a1, a2, a3, 0, 0);
  }
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v13, v7);
  return mlir::readBytecodeFile(v13, a2, (mlir::StringAttr **)a3);
}

uint64_t mlir::parseSourceFile(uint64_t ***a1, uint64_t a2, uint64_t ***a3, uint64_t *a4)
{
  uint64_t v7 = (const llvm::MemoryBuffer *)***a1;
  if (a4)
  {
    uint64_t v9 = *a3;
    uint64_t v10 = (const char *)(*(uint64_t (**)(const llvm::MemoryBuffer *))(*(void *)v7 + 16))(v7);
    *a4 = mlir::FileLineColLoc::get((mlir::StringAttr *)v9, v10, v11, 0, 0);
  }
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v13, v7);
  if (!mlir::isBytecode((uint64_t)v13)) {
    mlir::parseAsmSourceFile(*a1, a2, a3, 0, 0);
  }
  return mlir::readBytecodeFile((const llvm::MemoryBuffer ****)a1, a2, (mlir::StringAttr **)a3);
}

void std::__shared_ptr_emplace<llvm::SourceMgr>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9CFDE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::SourceMgr>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9CFDE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<llvm::SourceMgr>::__on_zero_shared(uint64_t a1)
{
}

uint64_t mlir::PassManager::enableIRPrinting(uint64_t a1, void *a2, void *a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  __int16 v16 = operator new(0x80uLL);
  unint64_t v17 = (void *)a2[3];
  if (!v17)
  {
    uint64_t v27 = 0;
    unint64_t v18 = (void *)a3[3];
    if (v18) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  if (v17 == a2)
  {
    uint64_t v27 = v26;
    (*(void (**)(void *, uint64_t *))(*a2 + 24))(a2, v26);
    unint64_t v18 = (void *)a3[3];
    if (v18) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v25 = 0;
    goto LABEL_11;
  }
  uint64_t v27 = (uint64_t *)a2[3];
  a2[3] = 0;
  unint64_t v18 = (void *)a3[3];
  if (!v18) {
    goto LABEL_9;
  }
LABEL_6:
  if (v18 == a3)
  {
    uint64_t v25 = v24;
    (*(void (**)(void *, void *))(*a3 + 24))(a3, v24);
  }
  else
  {
    uint64_t v25 = v18;
    a3[3] = 0;
  }
LABEL_11:
  long long v19 = *(_OWORD *)(a8 + 16);
  v16[1] = *(_OWORD *)a8;
  v16[2] = v19;
  *((void *)v16 + 6) = *(void *)(a8 + 32);
  *((unsigned char *)v16 + 8) = a4;
  *((unsigned char *)v16 + 9) = a5;
  *((unsigned char *)v16 + 10) = a6;
  *(void *)__int16 v16 = &unk_1EC99A348;
  if (!v27)
  {
    *((void *)v16 + 10) = 0;
    unint64_t v20 = v25;
    if (v25) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (v27 == v26)
  {
    *((void *)v16 + 10) = (char *)v16 + 56;
    (*(void (**)(uint64_t *))(v26[0] + 24))(v26);
    unint64_t v20 = v25;
    if (v25) {
      goto LABEL_16;
    }
LABEL_19:
    *((void *)v16 + 14) = 0;
    *((void *)v16 + 15) = a7;
    goto LABEL_20;
  }
  *((void *)v16 + 10) = v27;
  uint64_t v27 = 0;
  unint64_t v20 = v25;
  if (!v25) {
    goto LABEL_19;
  }
LABEL_16:
  if (v20 == v24)
  {
    *((void *)v16 + 14) = (char *)v16 + 88;
    (*(void (**)(void *))(v24[0] + 24))(v24);
    uint64_t v23 = v25;
    *((void *)v16 + 15) = a7;
    if (v23 == v24)
    {
      (*(void (**)(void *))(v24[0] + 32))(v24);
    }
    else if (v23)
    {
      (*(void (**)(void *))(*v23 + 40))(v23);
    }
  }
  else
  {
    uint64_t v25 = 0;
    *((void *)v16 + 14) = v20;
    *((void *)v16 + 15) = a7;
  }
LABEL_20:
  if (v27 == v26)
  {
    (*(void (**)(uint64_t *))(v26[0] + 32))(v26);
    if (!*((unsigned char *)v16 + 8)) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v27) {
    (*(void (**)(void))(*v27 + 40))();
  }
  if (*((unsigned char *)v16 + 8))
  {
LABEL_26:
    if (mlir::MLIRContext::isMultithreadingEnabled(*(mlir::MLIRContext **)(a1 + 8))) {
      llvm::report_fatal_error((llvm *)"IR printing can't be setup on a pass-manager without disabling multi-threading first.", (const char *)1);
    }
  }
LABEL_27:
  __int16 v21 = operator new(0x28uLL);
  void *v21 = &unk_1EC99B4E8;
  v21[1] = v16;
  unint64_t v21[2] = 0;
  v21[3] = 0;
  *((_DWORD *)v21 + 8) = 0;
  v26[0] = (uint64_t)v21;
  mlir::PassManager::addInstrumentation(a1, v26);
  uint64_t result = v26[0];
  v26[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void anonymous namespace'::IRPrinterInstrumentation::~IRPrinterInstrumentation(llvm **this)
{
  *this = (llvm *)&unk_1EC99B4E8;
  llvm::deallocate_buffer(this[2], (void *)(32 * *((unsigned int *)this + 8)));
}

{
  *this = (llvm *)&unk_1EC99B4E8;
  llvm::deallocate_buffer(this[2], (void *)(32 * *((unsigned int *)this + 8)));
}

void sub_1805EB1A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *((void *)v12 + 1);
  *((void *)v12 + 1) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
}

void sub_1805EB234(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *((void *)v12 + 1);
  *((void *)v12 + 1) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
  operator delete(v14);
}

void anonymous namespace'::IRPrinterInstrumentation::runBeforePass(_anonymous_namespace_::IRPrinterInstrumentation *this, mlir::Pass *a2, mlir::Operation *a3)
{
  uint64_t v31 = a2;
  uint64_t v30 = a3;
  uint64_t v4 = *((void *)a2 + 1);
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v26 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v26;
    if (v18)
    {
      uint64_t v27 = (mlir::Pass **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      unint64_t v28 = 81;
      unint64_t v19 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
      if (v28 >= v19) {
        unint64_t v20 = v19;
      }
      else {
        unint64_t v20 = v28;
      }
      __int16 v21 = (char *)v27 + v20;
      unint64_t v22 = v28 - v20;
      if (v28 - v20 >= 0x12) {
        uint64_t v23 = 18;
      }
      else {
        uint64_t v23 = v28 - v20;
      }
      unint64_t v24 = v22 - v23;
      if (v24 >= v24 - 1) {
        uint64_t v25 = v24 - 1;
      }
      else {
        uint64_t v25 = v24;
      }
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v21[v23], v25);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v26;
    }
  }
  if (v4 != *(void *)(v5 + 2968))
  {
    uint64_t v6 = (unsigned char *)*((void *)this + 1);
    if (v6[9])
    {
      uint64_t v7 = *((void *)this + 2);
      int v8 = *((_DWORD *)this + 8);
      if (!v8)
      {
        unint64_t v17 = 0;
LABEL_16:
        llvm::DenseMapBase<llvm::DenseMap<mlir::Pass *,mlir::OperationFingerPrint,llvm::DenseMapInfo<mlir::Pass *,void>,llvm::detail::DenseMapPair<mlir::Pass *,mlir::OperationFingerPrint>>,mlir::Pass *,mlir::OperationFingerPrint,llvm::DenseMapInfo<mlir::Pass *,void>,llvm::detail::DenseMapPair<mlir::Pass *,mlir::OperationFingerPrint>>::InsertIntoBucket<mlir::Pass * const&,mlir::Operation *&>((uint64_t)this + 16, v17, (uint64_t *)&v31, &v30);
        uint64_t v6 = (unsigned char *)*((void *)this + 1);
        goto LABEL_17;
      }
      unsigned int v9 = v8 - 1;
      uint64_t v10 = ((v31 >> 4) ^ (v31 >> 9)) & v9;
      unint64_t v11 = (uint64_t *)(v7 + 32 * v10);
      uint64_t v12 = (mlir::Pass *)*v11;
      if (v31 != (mlir::Pass *)*v11)
      {
        uint64_t v13 = 0;
        int v14 = 1;
        while (v12 != (mlir::Pass *)-4096)
        {
          if (v13) {
            BOOL v15 = 0;
          }
          else {
            BOOL v15 = v12 == (mlir::Pass *)-8192;
          }
          if (v15) {
            uint64_t v13 = v11;
          }
          int v16 = v10 + v14++;
          uint64_t v10 = v16 & v9;
          unint64_t v11 = (uint64_t *)(v7 + 32 * v10);
          uint64_t v12 = (mlir::Pass *)*v11;
          if (v31 == (mlir::Pass *)*v11) {
            goto LABEL_17;
          }
        }
        if (v13) {
          unint64_t v17 = v13;
        }
        else {
          unint64_t v17 = v11;
        }
        goto LABEL_16;
      }
    }
LABEL_17:
    uint64_t v27 = &v31;
    unint64_t v28 = (unint64_t)&v30;
    char v29 = this;
  }
}

void anonymous namespace'::IRPrinterInstrumentation::runAfterPass(int32x2_t *this, mlir::Pass *a2, mlir::Operation *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v4 = *((void *)a2 + 1);
  {
    uint64_t v26 = (mlir::Pass **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
    unint64_t v27 = 81;
    unint64_t v17 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
    if (v27 >= v17) {
      unint64_t v18 = v17;
    }
    else {
      unint64_t v18 = v27;
    }
    unint64_t v19 = (char *)v26 + v18;
    unint64_t v20 = v27 - v18;
    if (v27 - v18 >= 0x12) {
      uint64_t v21 = 18;
    }
    else {
      uint64_t v21 = v27 - v18;
    }
    unint64_t v22 = v20 - v21;
    if (v22 >= v22 - 1) {
      uint64_t v23 = v22 - 1;
    }
    else {
      uint64_t v23 = v22;
    }
    mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
  }
  if (v4 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id) {
    return;
  }
  unint64_t v5 = (unsigned char *)this[1];
  if (v5[10]) {
    return;
  }
  uint64_t v6 = v25;
  if (!v5[9])
  {
    int v14 = v24;
LABEL_21:
    uint64_t v26 = &v25;
    unint64_t v27 = (unint64_t)&v24;
    unint64_t v28 = this;
    return;
  }
  int32x2_t v7 = this[2];
  uint64_t v8 = this[4].u32[0];
  if (v8)
  {
    uint64_t v9 = ((v25 >> 4) ^ (v25 >> 9)) & (v8 - 1);
    uint64_t v10 = *(void *)&v7 + 32 * v9;
    unint64_t v11 = *(mlir::Pass **)v10;
    if (*(mlir::Pass **)v10 == v25) {
      goto LABEL_13;
    }
    int v12 = 1;
    while (v11 != (mlir::Pass *)-4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v8 - 1);
      unint64_t v11 = *(mlir::Pass **)(*(void *)&v7 + 32 * v9);
      if (v11 == v25)
      {
        uint64_t v10 = *(void *)&v7 + 32 * v9;
        goto LABEL_13;
      }
    }
  }
  uint64_t v10 = *(void *)&v7 + 32 * v8;
LABEL_13:
  int v14 = v24;
  mlir::OperationFingerPrint::OperationFingerPrint((mlir::OperationFingerPrint *)&v26, v24);
  BOOL v16 = *(mlir::Pass ***)(v10 + 8) == v26
     && *(void *)(v10 + 16) == v27
     && *(_DWORD *)(v10 + 24) == (unint64_t)v28;
  *(void *)uint64_t v10 = -8192;
  this[3] = vadd_s32(this[3], (int32x2_t)0x1FFFFFFFFLL);
  if (!v16)
  {
    unint64_t v5 = (unsigned char *)this[1];
    goto LABEL_21;
  }
}

int32x2_t *anonymous namespace'::IRPrinterInstrumentation::runAfterPassFailed(int32x2_t *this, mlir::Pass *a2, mlir::Operation *a3)
{
  uint64_t v29 = a3;
  uint64_t v30 = a2;
  uint64_t v3 = *((void *)a2 + 1);
  unint64_t v4 = 0x1E8EB8000uLL;
  {
    uint64_t v24 = v3;
    uint64_t v25 = this;
    unint64_t v4 = 0x1E8EB8000;
    int v16 = v15;
    uint64_t v3 = v24;
    this = v25;
    if (v16)
    {
      uint64_t v26 = (mlir::Pass **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      unint64_t v27 = 81;
      unint64_t v17 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v17) {
        unint64_t v18 = v17;
      }
      else {
        unint64_t v18 = v27;
      }
      unint64_t v19 = (char *)v26 + v18;
      unint64_t v20 = v27 - v18;
      if (v27 - v18 >= 0x12) {
        uint64_t v21 = 18;
      }
      else {
        uint64_t v21 = v27 - v18;
      }
      unint64_t v22 = v20 - v21;
      if (v22 >= v22 - 1) {
        uint64_t v23 = v22 - 1;
      }
      else {
        uint64_t v23 = v22;
      }
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
      unint64_t v4 = 0x1E8EB8000;
      uint64_t v3 = v24;
      this = v25;
    }
  }
  if (v3 != *(void *)(v4 + 2968))
  {
    unint64_t v5 = (unsigned char *)this[1];
    if (v5[9])
    {
      __int32 v6 = this[4].i32[0];
      int32x2_t v7 = v30;
      if (v6)
      {
        int32x2_t v8 = this[2];
        __int32 v9 = v6 - 1;
        uint64_t v10 = ((v30 >> 4) ^ (v30 >> 9)) & v9;
        unint64_t v11 = (mlir::Pass **)(*(void *)&v8 + 32 * v10);
        int v12 = *v11;
        if (v30 == *v11)
        {
LABEL_6:
          *unint64_t v11 = (mlir::Pass *)-8192;
          this[3] = vadd_s32(this[3], (int32x2_t)0x1FFFFFFFFLL);
          unint64_t v5 = (unsigned char *)this[1];
        }
        else
        {
          int v13 = 1;
          while (v12 != (mlir::Pass *)-4096)
          {
            int v14 = v10 + v13++;
            uint64_t v10 = v14 & v9;
            int v12 = *(mlir::Pass **)(*(void *)&v8 + 32 * v10);
            if (v30 == v12)
            {
              unint64_t v11 = (mlir::Pass **)(*(void *)&v8 + 32 * v10);
              goto LABEL_6;
            }
          }
        }
      }
    }
    else
    {
      int32x2_t v7 = v30;
    }
    uint64_t v26 = &v30;
    unint64_t v27 = (unint64_t)&v29;
    unint64_t v28 = this;
  }
  return this;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Pass *,mlir::OperationFingerPrint,llvm::DenseMapInfo<mlir::Pass *,void>,llvm::detail::DenseMapPair<mlir::Pass *,mlir::OperationFingerPrint>>,mlir::Pass *,mlir::OperationFingerPrint,llvm::DenseMapInfo<mlir::Pass *,void>,llvm::detail::DenseMapPair<mlir::Pass *,mlir::OperationFingerPrint>>::InsertIntoBucket<mlir::Pass * const&,mlir::Operation *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, mlir::Operation **a4)
{
  int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
LABEL_3:
    uint64_t v10 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Pass *,mlir::OperationFingerPrint,llvm::DenseMapInfo<mlir::Pass *,void>,llvm::detail::DenseMapPair<mlir::Pass *,mlir::OperationFingerPrint>>::grow(a1, v9);
  uint64_t v10 = *a3;
  int v12 = *(_DWORD *)(a1 + 16) - 1;
  uint64_t v13 = ((*a3 >> 4) ^ (*a3 >> 9)) & v12;
  a2 = (uint64_t *)(*(void *)a1 + 32 * v13);
  uint64_t v14 = *a2;
  if (*a3 != *a2)
  {
    int v15 = 0;
    int v16 = 1;
    while (v14 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == -8192;
      }
      if (v17) {
        int v15 = a2;
      }
      int v18 = v13 + v16++;
      uint64_t v13 = v18 & v12;
      a2 = (uint64_t *)(*(void *)a1 + 32 * v13);
      uint64_t v14 = *a2;
      if (v10 == *a2) {
        goto LABEL_4;
      }
    }
    if (v15) {
      a2 = v15;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  mlir::OperationFingerPrint::OperationFingerPrint((mlir::OperationFingerPrint *)(a2 + 1), *a4);
  return a2;
}

void *llvm::DenseMap<mlir::Pass *,mlir::OperationFingerPrint,llvm::DenseMapInfo<mlir::Pass *,void>,llvm::detail::DenseMapPair<mlir::Pass *,mlir::OperationFingerPrint>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      uint64_t v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      uint64_t v13 = result + 4;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *uint64_t v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        int v15 = &result[4 * v11];
        do
        {
          *uint64_t v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      int v16 = v4;
      do
      {
        uint64_t v19 = *(void *)v16;
        if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v20 = *(_DWORD *)(a1 + 16);
          if (v20)
          {
            unsigned int v21 = v20 - 1;
            uint64_t v22 = (v20 - 1) & ((v19 >> 4) ^ (v19 >> 9));
            uint64_t v17 = *(void *)a1 + 32 * v22;
            uint64_t v23 = *(void *)v17;
            if (v19 != *(void *)v17)
            {
              uint64_t v24 = 0;
              int v25 = 1;
              while (v23 != -4096)
              {
                if (v24) {
                  BOOL v26 = 0;
                }
                else {
                  BOOL v26 = v23 == -8192;
                }
                if (v26) {
                  uint64_t v24 = v17;
                }
                int v27 = v22 + v25++;
                uint64_t v22 = v27 & v21;
                uint64_t v17 = *(void *)a1 + 32 * v22;
                uint64_t v23 = *(void *)v17;
                if (v19 == *(void *)v17) {
                  goto LABEL_15;
                }
              }
              if (v24) {
                uint64_t v17 = v24;
              }
            }
          }
          else
          {
            uint64_t v17 = 0;
          }
LABEL_15:
          *(void *)uint64_t v17 = v19;
          long long v18 = *(_OWORD *)((char *)v16 + 8);
          *(_DWORD *)(v17 + 24) = *((_DWORD *)v16 + 6);
          *(_OWORD *)(v17 + 8) = v18;
          ++*(_DWORD *)(a1 + 8);
        }
        int v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v28 = *(unsigned int *)(a1 + 16);
  if (v28)
  {
    if (((v28 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_40;
    }
    uint64_t v29 = ((v28 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    uint64_t v10 = &result[4 * (v29 & 0xFFFFFFFFFFFFFFELL)];
    uint64_t v30 = result + 4;
    uint64_t v31 = v29 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 4) = -4096;
      *uint64_t v30 = -4096;
      v30 += 8;
      v31 -= 2;
    }
    while (v31);
    if (v29 != (v29 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_40:
      unint64_t v32 = &result[4 * v28];
      do
      {
        *uint64_t v10 = -4096;
        v10 += 4;
      }
      while (v10 != v32);
    }
  }
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<anonymous namespace'::IRPrinterInstrumentation::runBeforePass(mlir::Pass *,mlir::Operation *)::$_0>(void **a1, llvm::raw_ostream *this)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v5 > 0x19uLL)
  {
    qmemcpy(v5, "// -----// IR Dump Before ", 26);
    *((void *)this + 4) += 26;
    unint64_t v6 = this;
  }
  else
  {
    unint64_t v6 = llvm::raw_ostream::write(this, "// -----// IR Dump Before ", 0x1AuLL);
  }
  unsigned int v8 = (const void *)(*(uint64_t (**)(void))(*(void *)**a1 + 16))(**a1);
  size_t v9 = v7;
  uint64_t v10 = (_WORD *)*((void *)v6 + 4);
  if (v7 <= *((void *)v6 + 3) - (void)v10)
  {
    if (v7)
    {
      memcpy(v10, v8, v7);
      uint64_t v10 = (_WORD *)(*((void *)v6 + 4) + v9);
      *((void *)v6 + 4) = v10;
    }
  }
  else
  {
    unint64_t v6 = llvm::raw_ostream::write(v6, (const char *)v8, v7);
    uint64_t v10 = (_WORD *)*((void *)v6 + 4);
  }
  if (*((void *)v6 + 3) - (void)v10 > 1uLL)
  {
    *uint64_t v10 = 10272;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    unint64_t v6 = llvm::raw_ostream::write(v6, " (", 2uLL);
  }
  uint64_t v12 = (const void *)(*(uint64_t (**)(void))(*(void *)**a1 + 32))(**a1);
  size_t v13 = v11;
  uint64_t v14 = (unsigned char *)*((void *)v6 + 4);
  if (v11 <= *((void *)v6 + 3) - (void)v14)
  {
    if (v11)
    {
      memcpy(v14, v12, v11);
      uint64_t v14 = (unsigned char *)(*((void *)v6 + 4) + v13);
      *((void *)v6 + 4) = v14;
    }
  }
  else
  {
    unint64_t v6 = llvm::raw_ostream::write(v6, (const char *)v12, v11);
    uint64_t v14 = (unsigned char *)*((void *)v6 + 4);
  }
  if (*((unsigned char **)v6 + 3) == v14)
  {
    llvm::raw_ostream::write(v6, ")", 1uLL);
  }
  else
  {
    *uint64_t v14 = 41;
    ++*((void *)v6 + 4);
  }
  uint64_t v15 = *a1[1];
  uint64_t v16 = v4[1];
  char v17 = *(unsigned char *)(v16 + 8);
  long long v18 = *(_OWORD *)(v16 + 16);
  long long v19 = *(_OWORD *)(v16 + 32);
  uint64_t v23 = *(void *)(v16 + 48);
  v22[0] = v18;
  v22[1] = v19;
  uint64_t result = printIR(v15, v17, this, (const mlir::OpPrintingFlags *)v22);
  unsigned int v21 = (_WORD *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v21 <= 1uLL) {
    return llvm::raw_ostream::write(this, "\n\n", 2uLL);
  }
  _WORD *v21 = 2570;
  *((void *)this + 4) += 2;
  return result;
}

mlir::detail::AsmStateImpl *printIR(uint64_t a1, char a2, llvm::raw_ostream *a3, const mlir::OpPrintingFlags *a4)
{
  unint64_t v5 = a3;
  uint64_t ParentOp = a1;
  uint64_t v7 = *((void *)a3 + 4);
  unint64_t v8 = *((void *)a3 + 3) - v7;
  if (a2)
  {
    if (v8 > 2)
    {
      *(unsigned char *)(v7 + 2) = 39;
      *(_WORD *)uint64_t v7 = 10272;
      *((void *)a3 + 4) += 3;
      size_t v9 = a3;
    }
    else
    {
      size_t v9 = llvm::raw_ostream::write(a3, " ('", 3uLL);
    }
    uint64_t v26 = *(void *)(ParentOp + 48);
    mlir::OperationName::print((mlir::OperationName *)&v26, v9);
    uint64_t v10 = *((void *)v9 + 4);
    if ((unint64_t)(*((void *)v9 + 3) - v10) > 0xA)
    {
      *(_DWORD *)(v10 + 7) = 1852795252;
      *(void *)uint64_t v10 = *(void *)"' operation";
      *((void *)v9 + 4) += 11;
      if (!*(unsigned char *)(ParentOp + 47))
      {
LABEL_18:
        uint64_t InherentAttr = mlir::DictionaryAttr::get(ParentOp + 56, "sym_name", 8uLL);
LABEL_19:
        if (InherentAttr)
        {
          uint64_t v14 = *(void **)(*(void *)InherentAttr + 136);
          BOOL v15 = v14 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
          uint64_t v16 = v14 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id ? InherentAttr : 0;
          uint64_t v26 = v16;
          if (v15)
          {
            uint64_t v17 = *((void *)v5 + 4);
            if ((unint64_t)(*((void *)v5 + 3) - v17) > 2)
            {
              *(unsigned char *)(v17 + 2) = 64;
              *(_WORD *)uint64_t v17 = 8250;
              *((void *)v5 + 4) += 3;
              long long v18 = v5;
            }
            else
            {
              long long v18 = llvm::raw_ostream::write(v5, ": @", 3uLL);
            }
            AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v26);
            size_t v21 = v19;
            uint64_t v22 = (void *)*((void *)v18 + 4);
            if (v19 <= *((void *)v18 + 3) - (void)v22)
            {
              if (v19)
              {
                memcpy(v22, AttrData, v19);
                *((void *)v18 + 4) += v21;
              }
            }
            else
            {
              llvm::raw_ostream::write(v18, (const char *)AttrData, v19);
            }
          }
        }
        uint64_t v23 = (void *)*((void *)v5 + 4);
        if (*((void *)v5 + 3) - (void)v23 > 0xCuLL)
        {
          qmemcpy(v23, ") //----- //\n", 13);
          *((void *)v5 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v5, ") //----- //\n", 0xDuLL);
        }
        do
        {
          uint64_t v24 = (mlir::Operation *)ParentOp;
          int v25 = *(mlir::Block **)(ParentOp + 16);
          if (!v25) {
            break;
          }
          uint64_t ParentOp = mlir::Block::getParentOp(v25);
        }
        while (ParentOp);
        return mlir::Operation::print(v24, v5, a4);
      }
    }
    else
    {
      llvm::raw_ostream::write(v9, "' operation", 0xBuLL);
      if (!*(unsigned char *)(ParentOp + 47)) {
        goto LABEL_18;
      }
    }
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(ParentOp, (uint64_t)"sym_name", 8);
    if (v13) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v8 <= 0xB)
  {
    unint64_t v5 = llvm::raw_ostream::write(a3, " //----- //\n", 0xCuLL);
    if (!*(void *)(ParentOp + 16)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  *(_DWORD *)(v7 + 8) = 170864416;
  *(void *)uint64_t v7 = *(void *)" //----- //\n";
  *((void *)a3 + 4) += 12;
  if (*(void *)(a1 + 16)) {
LABEL_12:
  }
    a4 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::useLocalScope((uint64_t)a4);
LABEL_13:

  return mlir::Operation::print((mlir::Operation *)ParentOp, v5, a4);
}

llvm::raw_ostream *llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<anonymous namespace'::IRPrinterInstrumentation::runAfterPass(mlir::Pass *,mlir::Operation *)::$_0>(void **a1, llvm::raw_ostream *this)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v5 > 0x18uLL)
  {
    qmemcpy(v5, "// -----// IR Dump After ", 25);
    *((void *)this + 4) += 25;
    unint64_t v6 = this;
  }
  else
  {
    unint64_t v6 = llvm::raw_ostream::write(this, "// -----// IR Dump After ", 0x19uLL);
  }
  unint64_t v8 = (const void *)(*(uint64_t (**)(void))(*(void *)**a1 + 16))(**a1);
  size_t v9 = v7;
  uint64_t v10 = (_WORD *)*((void *)v6 + 4);
  if (v7 <= *((void *)v6 + 3) - (void)v10)
  {
    if (v7)
    {
      memcpy(v10, v8, v7);
      uint64_t v10 = (_WORD *)(*((void *)v6 + 4) + v9);
      *((void *)v6 + 4) = v10;
    }
  }
  else
  {
    unint64_t v6 = llvm::raw_ostream::write(v6, (const char *)v8, v7);
    uint64_t v10 = (_WORD *)*((void *)v6 + 4);
  }
  if (*((void *)v6 + 3) - (void)v10 > 1uLL)
  {
    *uint64_t v10 = 10272;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    unint64_t v6 = llvm::raw_ostream::write(v6, " (", 2uLL);
  }
  uint64_t v12 = (const void *)(*(uint64_t (**)(void))(*(void *)**a1 + 32))(**a1);
  size_t v13 = v11;
  uint64_t v14 = (unsigned char *)*((void *)v6 + 4);
  if (v11 <= *((void *)v6 + 3) - (void)v14)
  {
    if (v11)
    {
      memcpy(v14, v12, v11);
      uint64_t v14 = (unsigned char *)(*((void *)v6 + 4) + v13);
      *((void *)v6 + 4) = v14;
    }
  }
  else
  {
    unint64_t v6 = llvm::raw_ostream::write(v6, (const char *)v12, v11);
    uint64_t v14 = (unsigned char *)*((void *)v6 + 4);
  }
  if (*((unsigned char **)v6 + 3) == v14)
  {
    llvm::raw_ostream::write(v6, ")", 1uLL);
  }
  else
  {
    *uint64_t v14 = 41;
    ++*((void *)v6 + 4);
  }
  uint64_t v15 = *a1[1];
  uint64_t v16 = v4[1];
  char v17 = *(unsigned char *)(v16 + 8);
  long long v18 = *(_OWORD *)(v16 + 16);
  long long v19 = *(_OWORD *)(v16 + 32);
  uint64_t v23 = *(void *)(v16 + 48);
  v22[0] = v18;
  v22[1] = v19;
  uint64_t result = printIR(v15, v17, this, (const mlir::OpPrintingFlags *)v22);
  size_t v21 = (_WORD *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v21 <= 1uLL) {
    return llvm::raw_ostream::write(this, "\n\n", 2uLL);
  }
  _WORD *v21 = 2570;
  *((void *)this + 4) += 2;
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<anonymous namespace'::IRPrinterInstrumentation::runAfterPassFailed(mlir::Pass *,mlir::Operation *)::$_0>(void **a1, llvm::raw_ostream *a2)
{
  unint64_t v4 = a1[2];
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)**a1 + 16))(**a1);
  uint64_t v7 = v6;
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a1 + 32))(**a1);
  v13[0] = "// -----// IR Dump After {0} Failed ({1})";
  v13[1] = 41;
  _OWORD v13[2] = v16;
  v13[3] = 2;
  v14[0] = &unk_1EC9A4528;
  v14[1] = v5;
  void v14[2] = v7;
  v15[0] = &unk_1EC9A4528;
  v15[1] = v8;
  v15[2] = v9;
  v16[0] = v14;
  v16[1] = v15;
  llvm::raw_ostream::operator<<(a2, (llvm::formatv_object_base *)v13);
  uint64_t v10 = *a1[1];
  LOBYTE(v5) = *(unsigned char *)(v4[1] + 8);
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v13);
  uint64_t result = printIR(v10, v5, a2, (const mlir::OpPrintingFlags *)v13);
  uint64_t v12 = (_WORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v12 <= 1uLL) {
    return llvm::raw_ostream::write(a2, "\n\n", 2uLL);
  }
  *uint64_t v12 = 2570;
  *((void *)a2 + 4) += 2;
  return result;
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<llvm::StringRef>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v11 = 0;
    int AsUnsignedInteger = llvm::getAsUnsignedInteger(a3, a4, 0xAu, &v11);
    unint64_t v7 = v11;
    if (AsUnsignedInteger) {
      unint64_t v7 = -1;
    }
  }
  else
  {
    unint64_t v7 = -1;
  }
  uint64_t v8 = *(const char **)(a1 + 8);
  if (*(void *)(a1 + 16) >= v7) {
    size_t v9 = v7;
  }
  else {
    size_t v9 = *(void *)(a1 + 16);
  }
  uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 > *((void *)a2 + 3) - (void)result) {
    return llvm::raw_ostream::write(a2, v8, v9);
  }
  if (v9)
  {
    uint64_t result = (llvm::raw_ostream *)memcpy(result, v8, v9);
    *((void *)a2 + 4) += v9;
  }
  return result;
}

void anonymous namespace'::BasicIRPrinterConfig::~BasicIRPrinterConfig(_anonymous_namespace_::BasicIRPrinterConfig *this)
{
  *(void *)this = &unk_1EC99A348;
  unint64_t v2 = (char *)this + 88;
  uint64_t v3 = (char *)*((void *)this + 14);
  if (v3 != v2)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    unint64_t v4 = (char *)this + 56;
    uint64_t v5 = (_anonymous_namespace_::BasicIRPrinterConfig *)*((void *)this + 10);
    if (v5 != (_anonymous_namespace_::BasicIRPrinterConfig *)((char *)this + 56)) {
      goto LABEL_5;
    }
LABEL_9:
    (*(void (**)(char *))(*(void *)v4 + 32))(v4);
    return;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  unint64_t v4 = (char *)this + 56;
  uint64_t v5 = (_anonymous_namespace_::BasicIRPrinterConfig *)*((void *)this + 10);
  if (v5 == (_anonymous_namespace_::BasicIRPrinterConfig *)((char *)this + 56)) {
    goto LABEL_9;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(_anonymous_namespace_::BasicIRPrinterConfig *))(*(void *)v5 + 40))(v5);
  }
}

{
  char *v2;
  char *v3;
  char *v4;
  _anonymous_namespace_::BasicIRPrinterConfig *v5;
  _anonymous_namespace_::BasicIRPrinterConfig *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EC99A348;
  unint64_t v2 = (char *)this + 88;
  uint64_t v3 = (char *)*((void *)this + 14);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    unint64_t v4 = (char *)this + 56;
    uint64_t v5 = (_anonymous_namespace_::BasicIRPrinterConfig *)*((void *)this + 10);
    if (v5 != (_anonymous_namespace_::BasicIRPrinterConfig *)((char *)this + 56))
    {
LABEL_5:
      if (v5) {
        (*(void (**)(_anonymous_namespace_::BasicIRPrinterConfig *))(*(void *)v5 + 40))(v5);
      }
      uint64_t v6 = this;
      goto LABEL_9;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    unint64_t v4 = (char *)this + 56;
    uint64_t v5 = (_anonymous_namespace_::BasicIRPrinterConfig *)*((void *)this + 10);
    if (v5 != (_anonymous_namespace_::BasicIRPrinterConfig *)((char *)this + 56)) {
      goto LABEL_5;
    }
  }
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  uint64_t v6 = this;

LABEL_9:
  operator delete(v6);
}

uint64_t anonymous namespace'::BasicIRPrinterConfig::printBeforeIfEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void), uint64_t a5)
{
  uint64_t result = *(void *)(a1 + 80);
  if (result)
  {
    uint64_t v9 = a3;
    uint64_t v10 = a2;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)result + 48))(result, &v10, &v9);
    if (result) {
      return a4(a5, *(void *)(a1 + 120));
    }
  }
  return result;
}

uint64_t anonymous namespace'::BasicIRPrinterConfig::printAfterIfEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void), uint64_t a5)
{
  uint64_t result = *(void *)(a1 + 112);
  if (result)
  {
    uint64_t v9 = a3;
    uint64_t v10 = a2;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)result + 48))(result, &v10, &v9);
    if (result) {
      return a4(a5, *(void *)(a1 + 120));
    }
  }
  return result;
}

llvm::raw_ostream *mlir::PassExecutionAction::print(mlir::PassExecutionAction *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
  uint64_t v6 = v5;
  unint64_t v7 = (void *)(*(uint64_t (**)(mlir::PassExecutionAction *))(*(void *)this + 32))(this);
  if ((*v7 & 6) != 0) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = *v7 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *(void *)(v8 + 48);
  v11[1] = 38;
  v11[2] = v15;
  v11[3] = 3;
  v12[0] = &unk_1EC9A4558;
  v12[1] = &mlir::PassExecutionAction::tag;
  v13[0] = &unk_1EC9A4528;
  v13[1] = v4;
  _OWORD v13[2] = v6;
  v14[0] = &unk_1EC9A4738;
  v14[1] = v9;
  v15[0] = v12;
  v15[1] = v13;
  v15[2] = v14;
  return llvm::raw_ostream::operator<<(a2, (llvm::formatv_object_base *)v11);
}

uint64_t mlir::Pass::initializeOptions(uint64_t a1, __int8 *a2, unint64_t a3)
{
  return mlir::detail::PassOptions::parseFromString(a1 + 152, a2, a3);
}

void mlir::Pass::printAsTextualPipeline(mlir::Pass *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *((void *)this + 1);
  {
    uint64_t v31 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
    unint64_t v32 = 81;
    unint64_t v24 = llvm::StringRef::find((uint64_t *)&v31, "DesiredTypeName = ", 0x12uLL, 0);
    if (v32 >= v24) {
      unint64_t v25 = v24;
    }
    else {
      unint64_t v25 = v32;
    }
    uint64_t v26 = &v31[v25];
    unint64_t v27 = v32 - v25;
    if (v32 - v25 >= 0x12) {
      uint64_t v28 = 18;
    }
    else {
      uint64_t v28 = v32 - v25;
    }
    unint64_t v29 = v27 - v28;
    if (v29 >= v29 - 1) {
      uint64_t v30 = v29 - 1;
    }
    else {
      uint64_t v30 = v29;
    }
    mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v26[v28], v30);
  }
  if (v4 != mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
  {
    uint64_t v5 = (*(uint64_t (**)(mlir::Pass *))(*(void *)this + 32))(this);
    if (v6)
    {
      unint64_t v7 = (const char *)v5;
      size_t v8 = v6;
      uint64_t v9 = (void *)*((void *)a2 + 4);
      if (v6 > *((void *)a2 + 3) - (void)v9)
      {
        uint64_t v10 = a2;
        unint64_t v11 = v7;
        size_t v12 = v8;
LABEL_24:
        llvm::raw_ostream::write(v10, v11, v12);
        goto LABEL_25;
      }
      memcpy(v9, v7, v6);
      *((void *)a2 + 4) += v8;
    }
    else
    {
      long long v18 = (void *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v18 > 7uLL)
      {
        *long long v18 = 0x3C6E776F6E6B6E75;
        *((void *)a2 + 4) += 8;
        long long v19 = a2;
      }
      else
      {
        long long v19 = llvm::raw_ostream::write(a2, "unknown<", 8uLL);
      }
      size_t v21 = (const void *)(*(uint64_t (**)(mlir::Pass *))(*(void *)this + 16))(this);
      size_t v22 = v20;
      uint64_t v23 = (unsigned char *)*((void *)v19 + 4);
      if (v20 <= *((void *)v19 + 3) - (void)v23)
      {
        if (v20)
        {
          memcpy(v23, v21, v20);
          uint64_t v23 = (unsigned char *)(*((void *)v19 + 4) + v22);
          *((void *)v19 + 4) = v23;
        }
      }
      else
      {
        long long v19 = llvm::raw_ostream::write(v19, (const char *)v21, v20);
        uint64_t v23 = (unsigned char *)*((void *)v19 + 4);
      }
      if (*((unsigned char **)v19 + 3) == v23)
      {
        unint64_t v11 = ">";
        uint64_t v10 = v19;
        size_t v12 = 1;
        goto LABEL_24;
      }
      unsigned char *v23 = 62;
      ++*((void *)v19 + 4);
    }
LABEL_25:
    mlir::detail::PassOptions::print((mlir::Pass *)((char *)this + 152), a2);
    return;
  }
  uint64_t v13 = *((unsigned int *)this + 88);
  if (v13)
  {
    uint64_t v14 = (const char **)*((void *)this + 43);
    mlir::OpPassManager::printAsTextualPipeline(v14, a2);
    if (v13 != 1)
    {
      uint64_t v15 = v14 + 1;
      uint64_t v16 = 8 * v13 - 8;
      do
      {
        while (1)
        {
          char v17 = (unsigned char *)*((void *)a2 + 4);
          if (*((unsigned char **)a2 + 3) == v17) {
            break;
          }
          unsigned char *v17 = 44;
          ++*((void *)a2 + 4);
          mlir::OpPassManager::printAsTextualPipeline(v15++, a2);
          v16 -= 8;
          if (!v16) {
            return;
          }
        }
        llvm::raw_ostream::write(a2, ",", 1uLL);
        mlir::OpPassManager::printAsTextualPipeline(v15++, a2);
        v16 -= 8;
      }
      while (v16);
    }
  }
}

void *mlir::detail::OpPassManagerImpl::addPass(unsigned char *a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  if (((char)a1[23] & 0x80000000) == 0)
  {
    if (a1[23]) {
      goto LABEL_3;
    }
LABEL_21:
    uint64_t v5 = *a2;
LABEL_22:
    long long v19 = (uint64_t *)*((void *)v3 + 6);
    if ((unint64_t)v19 >= *((void *)v3 + 7))
    {
      uint64_t result = std::vector<std::unique_ptr<mlir::Pass>>::__push_back_slow_path<std::unique_ptr<mlir::Pass>>((void *)v3 + 5, a2);
    }
    else
    {
      *a2 = 0;
      *long long v19 = v5;
      uint64_t result = v19 + 1;
    }
    *((void *)v3 + 6) = result;
    return result;
  }
  if (!*((void *)a1 + 1)) {
    goto LABEL_21;
  }
LABEL_3:
  if ((char)a1[23] >= 0)
  {
    size_t v4 = a1[23];
  }
  else
  {
    a1 = *(unsigned char **)a1;
    size_t v4 = *((void *)v3 + 1);
  }
  uint64_t v5 = *a2;
  if (!*(unsigned char *)(*a2 + 32)) {
    goto LABEL_22;
  }
  unint64_t v7 = *(unsigned char **)(v5 + 16);
  size_t v6 = *(void *)(v5 + 24);
  if (v4 == v6 && (!v4 || !memcmp(a1, *(const void **)(v5 + 16), v4))) {
    goto LABEL_22;
  }
  if (*((_DWORD *)v3 + 17))
  {
    uint64_t v38 = "Can't add pass '";
    __int16 v39 = 259;
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    __int16 v37 = 261;
    v36[0] = v23;
    v36[1] = v24;
    llvm::operator+((uint64_t *)&v38, v36, (uint64_t)v40);
    uint64_t v34 = "' restricted to '";
    __int16 v35 = 259;
    llvm::operator+(v40, (uint64_t *)&v34, (uint64_t)v41);
    __int16 v33 = 261;
    v32[0] = (uint64_t)v7;
    v32[1] = v6;
    llvm::operator+(v41, v32, (uint64_t)v42);
    uint64_t v30 = "' on a PassManager intended to run on '";
    __int16 v31 = 259;
    llvm::operator+(v42, (uint64_t *)&v30, (uint64_t)v43);
    __int16 v29 = 261;
    v28[0] = (uint64_t)mlir::detail::OpPassManagerImpl::getOpAnchorName((const char *)v3);
    v28[1] = v25;
    llvm::operator+(v43, v28, (uint64_t)v44);
    uint64_t v26 = "', did you intend to nest?";
    __int16 v27 = 259;
    llvm::operator+(v44, (uint64_t *)&v26, (uint64_t)v45);
    llvm::report_fatal_error((llvm::Twine *)v45, 1);
  }
  mlir::OpPassManager::OpPassManager(v44, v7, v6, 0);
  size_t v8 = operator new(0x240uLL);
  mlir::PassWrapper<mlir::detail::OpToOpPassAdaptor,mlir::OperationPass<void>>::PassWrapper((uint64_t)v8);
  *uint64_t v9 = &unk_1EC9CD098;
  uint64_t v10 = (uint64_t **)(v9 + 43);
  v9[43] = v9 + 45;
  v9[44] = 0x100000000;
  v9[46] = v9 + 48;
  v9[47] = 0x800000000;
  llvm::SmallVectorImpl<mlir::OpPassManager>::emplace_back<mlir::OpPassManager>((uint64_t)(v9 + 43), v44);
  v45[0] = v8;
  mlir::detail::OpPassManagerImpl::addPass(v3, v45);
  uint64_t v11 = v45[0];
  v45[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  size_t v12 = *v10;
  uint64_t v13 = v44[0];
  v44[0] = 0;
  if (v13)
  {
    uint64_t v14 = *(void **)(v13 + 40);
    if (v14)
    {
      uint64_t v15 = *(void **)(v13 + 48);
      uint64_t v16 = *(void **)(v13 + 40);
      if (v15 != v14)
      {
        do
        {
          uint64_t v18 = *--v15;
          uint64_t v17 = v18;
          *uint64_t v15 = 0;
          if (v18) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
        }
        while (v15 != v14);
        uint64_t v16 = *(void **)(v13 + 40);
      }
      *(void *)(v13 + 48) = v14;
      operator delete(v16);
    }
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    operator delete((void *)v13);
  }
  uint64_t v21 = *a2;
  *a2 = 0;
  uint64_t v22 = *v12;
  v45[0] = v21;
  mlir::detail::OpPassManagerImpl::addPass(v22, v45);
  uint64_t result = (void *)v45[0];
  v45[0] = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

uint64_t mlir::detail::OpPassManagerImpl::nest(uint64_t a1, unsigned char *a2, size_t a3)
{
  mlir::OpPassManager::OpPassManager(&__p, a2, a3, *(_DWORD *)(a1 + 68));
  size_t v4 = operator new(0x240uLL);
  mlir::PassWrapper<mlir::detail::OpToOpPassAdaptor,mlir::OperationPass<void>>::PassWrapper((uint64_t)v4);
  *uint64_t v5 = &unk_1EC9CD098;
  size_t v6 = v5 + 43;
  v5[43] = v5 + 45;
  v5[44] = 0x100000000;
  v5[46] = v5 + 48;
  v5[47] = 0x800000000;
  llvm::SmallVectorImpl<mlir::OpPassManager>::emplace_back<mlir::OpPassManager>((uint64_t)(v5 + 43), (uint64_t *)&__p);
  uint64_t v17 = (uint64_t)v4;
  mlir::detail::OpPassManagerImpl::addPass((unsigned char *)a1, &v17);
  uint64_t v7 = v17;
  uint64_t v17 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *v6;
  uint64_t v9 = (void **)__p;
  __p = 0;
  if (v9)
  {
    uint64_t v10 = v9[5];
    if (v10)
    {
      uint64_t v11 = v9[6];
      size_t v12 = v9[5];
      if (v11 != v10)
      {
        do
        {
          uint64_t v14 = *--v11;
          uint64_t v13 = v14;
          *uint64_t v11 = 0;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
          }
        }
        while (v11 != v10);
        size_t v12 = v9[5];
      }
      v9[6] = v10;
      operator delete(v12);
    }
    if (*((char *)v9 + 23) < 0) {
      operator delete(*v9);
    }
    operator delete(v9);
  }
  return v8;
}

uint64_t mlir::OpPassManager::addPass(unsigned char **a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v5 = v3;
  mlir::detail::OpPassManagerImpl::addPass(v2, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

const char *mlir::detail::OpPassManagerImpl::getOpAnchorName(const char *this)
{
  if ((this[23] & 0x80000000) == 0)
  {
    if (this[23]) {
      goto LABEL_3;
    }
    return "any";
  }
  if (!*((void *)this + 1)) {
    return "any";
  }
LABEL_3:
  if (this[23] < 0) {
    return *(const char **)this;
  }
  return this;
}

uint64_t mlir::detail::OpPassManagerImpl::finalizePassList(mlir::detail::OpPassManagerImpl *this, mlir::MLIRContext *a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)*((void *)this + 5);
  size_t v6 = (uint64_t *)*((void *)this + 6);
  size_t v4 = (uint64_t **)((char *)this + 40);
  if (v5 != v6)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v7;
      uint64_t v7 = *v5;
      uint64_t v9 = *(void *)(*v5 + 8);
      {
        uint64_t v73 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
        v74[0] = 81;
        unint64_t v13 = llvm::StringRef::find((uint64_t *)&v73, "DesiredTypeName = ", 0x12uLL, 0);
        if (v74[0] >= v13) {
          unint64_t v14 = v13;
        }
        else {
          unint64_t v14 = v74[0];
        }
        uint64_t v15 = &v73[v14];
        unint64_t v16 = v74[0] - v14;
        uint64_t v17 = 18;
        if (v16 < 0x12) {
          uint64_t v17 = v16;
        }
        unint64_t v18 = v16 - v17;
        if (v18 >= v18 - 1) {
          uint64_t v19 = v18 - 1;
        }
        else {
          uint64_t v19 = v18;
        }
        mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      }
      if (v9 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
      {
        if (v8
          && mlir::detail::OpToOpPassAdaptor::tryMergeInto((mlir::detail::OpToOpPassAdaptor *)v7, a2, (mlir::detail::OpToOpPassAdaptor *)v8))
        {
          uint64_t v12 = *v5;
          *uint64_t v5 = 0;
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
          uint64_t v7 = v8;
        }
      }
      else
      {
        if (v8)
        {
          uint64_t v10 = *(unsigned int *)(v8 + 352);
          if (v10)
          {
            uint64_t v11 = *(mlir::detail::OpPassManagerImpl ***)(v8 + 344);
            uint64_t v7 = 8 * v10;
            while (mlir::detail::OpPassManagerImpl::finalizePassList(*v11, a2))
            {
              ++v11;
              v7 -= 8;
              if (!v7) {
                goto LABEL_4;
              }
            }
            return 0;
          }
        }
        uint64_t v7 = 0;
      }
LABEL_4:
      ++v5;
    }
    while (v5 != v6);
    if (v7)
    {
      uint64_t v20 = *(unsigned int *)(v7 + 352);
      if (v20)
      {
        uint64_t v21 = *(mlir::detail::OpPassManagerImpl ***)(v7 + 344);
        uint64_t v22 = 8 * v20;
        while (mlir::detail::OpPassManagerImpl::finalizePassList(*v21, a2))
        {
          ++v21;
          v22 -= 8;
          if (!v22) {
            goto LABEL_33;
          }
        }
        return 0;
      }
    }
  }
LABEL_33:
  llvm::erase_if<std::vector<std::unique_ptr<mlir::Pass>>,std::logical_not<std::unique_ptr<mlir::Pass>>>(v4);
  char v23 = *((unsigned char *)this + 23);
  if (v23 < 0)
  {
    if (!*((void *)this + 1)) {
      goto LABEL_39;
    }
  }
  else if (!*((unsigned char *)this + 23))
  {
LABEL_39:
    if (*((unsigned char *)this + 32)) {
      goto LABEL_40;
    }
    return 1;
  }
  if (*((unsigned char *)this + 32)) {
    goto LABEL_39;
  }
  if (v23 >= 0) {
    uint64_t v47 = this;
  }
  else {
    uint64_t v47 = *(mlir::detail::OpPassManagerImpl **)this;
  }
  if (v23 >= 0) {
    uint64_t v48 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v48 = *((void *)this + 1);
  }
  mlir::OperationName::OperationName(&v73, v47, v48, a2);
  long long v49 = v73;
  if (!*((unsigned char *)this + 32)) {
    *((unsigned char *)this + 32) = 1;
  }
  *((void *)this + 3) = v49;
  if (!*((unsigned char *)this + 32)) {
    return 1;
  }
LABEL_40:
  uint64_t v25 = *((void *)this + 3);
  uint64_t v26 = *(void **)(v25 + 16);
  uint64_t v27 = v25;
  if (v26 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v27 = 0;
  }
  uint64_t v28 = (uint64_t *)*((void *)this + 5);
  __int16 v29 = (uint64_t *)*((void *)this + 6);
  uint64_t v24 = 1;
  if (v28 != v29 && v26 != &mlir::detail::TypeIDResolver<void,void>::id)
  {
    unint64_t v30 = v27 | v25 & 0xFFFFFFFFFFFFFF00;
    if ((*(unsigned int (**)(uint64_t, unint64_t))(*(void *)*v28 + 72))(*v28, v30))
    {
      unint64_t v32 = v28 + 1;
      while (v32 != v29)
      {
        uint64_t v33 = *v32++;
        if (((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v33 + 72))(v33, v30) & 1) == 0)
        {
          uint64_t v28 = v32 - 1;
          goto LABEL_49;
        }
      }
      return 1;
    }
LABEL_49:
    uint64_t v34 = mlir::UnknownLoc::get(a2, v31);
    mlir::emitError(v34, (uint64_t)&v73);
    if (v73)
    {
      LODWORD(v69) = 3;
      unint64_t v70 = "unable to schedule pass '";
      uint64_t v71 = 25;
      __int16 v35 = &v69;
      uint64_t v36 = (char *)v75;
      if (v76 >= v77)
      {
        unint64_t v63 = v76 + 1;
        if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
        {
          int64_t v66 = (char *)&v69 - (unsigned char *)v75;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v63, 24);
          uint64_t v36 = (char *)v75;
          __int16 v35 = (const void ***)((char *)v75 + v66);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v63, 24);
          __int16 v35 = &v69;
          uint64_t v36 = (char *)v75;
        }
      }
      __int16 v37 = &v36[24 * v76];
      long long v38 = *(_OWORD *)v35;
      *((void *)v37 + 2) = v35[2];
      *(_OWORD *)__int16 v37 = v38;
      ++v76;
    }
    __int16 v39 = (const void **)(*(uint64_t (**)(void))(*(void *)*v28 + 16))();
    if (v73)
    {
      __int16 v72 = 261;
      uint64_t v69 = v39;
      unint64_t v70 = v40;
      mlir::Diagnostic::operator<<((uint64_t)v74, &v69);
      if (v73)
      {
        LODWORD(v69) = 3;
        unint64_t v70 = "' on a PassManager intended to run on '";
        uint64_t v71 = 39;
        int v41 = &v69;
        long long v42 = (char *)v75;
        if (v76 >= v77)
        {
          unint64_t v64 = v76 + 1;
          if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
          {
            int64_t v67 = (char *)&v69 - (unsigned char *)v75;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v64, 24);
            long long v42 = (char *)v75;
            int v41 = (const void ***)((char *)v75 + v67);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v64, 24);
            int v41 = &v69;
            long long v42 = (char *)v75;
          }
        }
        long long v43 = &v42[24 * v76];
        long long v44 = *(_OWORD *)v41;
        *((void *)v43 + 2) = v41[2];
        *(_OWORD *)long long v43 = v44;
        ++v76;
      }
    }
    uint64_t v45 = *((unsigned __int8 *)this + 23);
    if (*((char *)this + 23) < 0)
    {
      if (*((void *)this + 1))
      {
LABEL_58:
        long long v46 = *(const void ***)this;
        if ((v45 & 0x80u) != 0) {
          uint64_t v45 = *((void *)this + 1);
        }
        else {
          long long v46 = (const void **)this;
        }
        if (!v73) {
          goto LABEL_79;
        }
        goto LABEL_76;
      }
    }
    else if (*((unsigned char *)this + 23))
    {
      goto LABEL_58;
    }
    long long v46 = (const void **)"any";
    uint64_t v45 = 3;
    if (!v73)
    {
LABEL_79:
      uint64_t v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
      if (v73) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
      }
      if (v83)
      {
        uint64_t v55 = (void **)__p;
        if (__p)
        {
          uint64_t v56 = v82;
          uint64_t v57 = __p;
          if (v82 != __p)
          {
            do
              uint64_t v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
            while (v56 != v55);
            uint64_t v57 = __p;
          }
          unint64_t v82 = v55;
          operator delete(v57);
        }
        uint64_t v58 = v79;
        if (v79)
        {
          uint64_t v59 = v80;
          uint64_t v60 = v79;
          if (v80 != v79)
          {
            do
            {
              char v62 = (void *)*--v59;
              uint64_t v61 = v62;
              *uint64_t v59 = 0;
              if (v62) {
                operator delete[](v61);
              }
            }
            while (v59 != v58);
            uint64_t v60 = v79;
          }
          uint64_t v80 = v58;
          operator delete(v60);
        }
        if (v75 != v78) {
          free(v75);
        }
      }
      return v24;
    }
LABEL_76:
    __int16 v72 = 261;
    uint64_t v69 = v46;
    unint64_t v70 = (const char *)v45;
    mlir::Diagnostic::operator<<((uint64_t)v74, &v69);
    if (v73)
    {
      LODWORD(v69) = 3;
      unint64_t v70 = "'!";
      uint64_t v71 = 2;
      long long v51 = &v69;
      long long v52 = (char *)v75;
      if (v76 >= v77)
      {
        unint64_t v65 = v76 + 1;
        if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
        {
          int64_t v68 = (char *)&v69 - (unsigned char *)v75;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v65, 24);
          long long v52 = (char *)v75;
          long long v51 = (const void ***)((char *)v75 + v68);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v65, 24);
          long long v51 = &v69;
          long long v52 = (char *)v75;
        }
      }
      uint64_t v53 = &v52[24 * v76];
      long long v54 = *(_OWORD *)v51;
      *((void *)v53 + 2) = v51[2];
      *(_OWORD *)uint64_t v53 = v54;
      ++v76;
    }
    goto LABEL_79;
  }
  return v24;
}

uint64_t mlir::detail::OpToOpPassAdaptor::tryMergeInto(mlir::detail::OpToOpPassAdaptor *this, mlir::MLIRContext *a2, mlir::detail::OpToOpPassAdaptor *a3)
{
  uint64_t v5 = *((unsigned int *)this + 88);
  if (!v5)
  {
    uint64_t v7 = (uint64_t **)*((void *)this + 43);
LABEL_10:
    if (v7 == (uint64_t **)(*((void *)this + 43) + 8 * v5)) {
      goto LABEL_30;
    }
    uint64_t v8 = *((unsigned int *)a3 + 88);
    if (!v8) {
      goto LABEL_30;
    }
    uint64_t v9 = (uint64_t *)*((void *)a3 + 43);
    uint64_t v10 = 8 * v8;
    while (1)
    {
      uint64_t v11 = (uint64_t *)*v9;
      char v12 = *(unsigned char *)(*v9 + 23);
      if (v12 < 0)
      {
        if (!v11[1]) {
          goto LABEL_27;
        }
      }
      else if (!*(unsigned char *)(*v9 + 23))
      {
        goto LABEL_27;
      }
      if (!*((unsigned char *)v11 + 32))
      {
        if (v12 >= 0) {
          unint64_t v13 = (uint64_t *)*v9;
        }
        else {
          unint64_t v13 = (uint64_t *)*v11;
        }
        if (v12 >= 0) {
          uint64_t v14 = *(unsigned __int8 *)(*v9 + 23);
        }
        else {
          uint64_t v14 = v11[1];
        }
        mlir::OperationName::OperationName(&v85, v13, v14, a2);
        if (!*((unsigned char *)v11 + 32)) {
          *((unsigned char *)v11 + 32) = 1;
        }
        v11[3] = v85;
      }
LABEL_27:
      if (!*((unsigned char *)v11 + 32) || (mlir::detail::OpPassManagerImpl::canScheduleOn(*v7, (uint64_t)a2, v11[3]) & 1) != 0) {
        return 0;
      }
      ++v9;
      v10 -= 8;
      if (!v10) {
        goto LABEL_30;
      }
    }
  }
  uint64_t v6 = 8 * v5;
  uint64_t v7 = (uint64_t **)*((void *)this + 43);
  do
  {
    if (*((char *)*v7 + 23) < 0)
    {
      if (!(*v7)[1]) {
        goto LABEL_10;
      }
    }
    else if (!*((unsigned char *)*v7 + 23))
    {
      goto LABEL_10;
    }
    ++v7;
    v6 -= 8;
  }
  while (v6);
LABEL_30:
  int v81 = this;
  unint64_t v82 = (void **)((char *)a3 + 344);
  uint64_t v15 = *((unsigned int *)a3 + 88);
  if (!v15)
  {
    uint64_t v17 = (uint64_t **)*((void *)a3 + 43);
LABEL_39:
    unint64_t v18 = (uint64_t *)*((void *)this + 43);
    uint64_t v19 = *((unsigned int *)this + 88);
    if (v17 == (uint64_t **)(*((void *)a3 + 43) + 8 * v15)) {
      goto LABEL_60;
    }
    if (!v19) {
      goto LABEL_149;
    }
    uint64_t v20 = 8 * v19;
    while (1)
    {
      uint64_t v21 = *v18;
      char v22 = *(unsigned char *)(*v18 + 23);
      if (v22 < 0)
      {
        if (!*(void *)(v21 + 8)) {
          goto LABEL_56;
        }
      }
      else if (!*(unsigned char *)(*v18 + 23))
      {
        goto LABEL_56;
      }
      if (!*(unsigned char *)(v21 + 32))
      {
        if (v22 >= 0) {
          uint64_t v23 = *v18;
        }
        else {
          uint64_t v23 = *(void *)v21;
        }
        if (v22 >= 0) {
          uint64_t v24 = *(unsigned __int8 *)(*v18 + 23);
        }
        else {
          uint64_t v24 = *(void *)(v21 + 8);
        }
        mlir::OperationName::OperationName(&v85, v23, v24, a2);
        if (!*(unsigned char *)(v21 + 32)) {
          *(unsigned char *)(v21 + 32) = 1;
        }
        *(void *)(v21 + 24) = v85;
      }
LABEL_56:
      if (!*(unsigned char *)(v21 + 32)
        || (mlir::detail::OpPassManagerImpl::canScheduleOn(*v17, (uint64_t)a2, *(void *)(v21 + 24)) & 1) != 0)
      {
        return 0;
      }
      ++v18;
      v20 -= 8;
      if (!v20) {
        goto LABEL_59;
      }
    }
  }
  uint64_t v16 = 8 * v15;
  uint64_t v17 = (uint64_t **)*((void *)a3 + 43);
  do
  {
    if (*((char *)*v17 + 23) < 0)
    {
      if (!(*v17)[1]) {
        goto LABEL_39;
      }
    }
    else if (!*((unsigned char *)*v17 + 23))
    {
      goto LABEL_39;
    }
    ++v17;
    v16 -= 8;
  }
  while (v16);
LABEL_59:
  unint64_t v18 = (uint64_t *)*((void *)this + 43);
  LODWORD(v19) = *((_DWORD *)this + 88);
LABEL_60:
  if (v19)
  {
    char v83 = &v18[v19];
    while (1)
    {
      uint64_t v25 = *v18;
      char v26 = *(unsigned char *)(*v18 + 23);
      if (v26 < 0)
      {
        if (!*(void *)(v25 + 8))
        {
LABEL_92:
          uint64_t v27 = "any";
          size_t v28 = 3;
          __int16 v29 = (const char **)*((void *)a3 + 43);
          uint64_t v30 = *((unsigned int *)a3 + 88);
          if (v30) {
            goto LABEL_72;
          }
          goto LABEL_93;
        }
      }
      else if (!*(unsigned char *)(*v18 + 23))
      {
        goto LABEL_92;
      }
      if (v26 >= 0) {
        uint64_t v27 = (unsigned __int8 *)*v18;
      }
      else {
        uint64_t v27 = *(unsigned __int8 **)v25;
      }
      if (v26 >= 0) {
        size_t v28 = *(unsigned __int8 *)(*v18 + 23);
      }
      else {
        size_t v28 = *(void *)(v25 + 8);
      }
      __int16 v29 = (const char **)*((void *)a3 + 43);
      uint64_t v30 = *((unsigned int *)a3 + 88);
      if (v30)
      {
LABEL_72:
        if (v28 == 3)
        {
          uint64_t v31 = 8 * v30;
          unint64_t v32 = v29;
          while (1)
          {
            uint64_t v33 = *v32;
            char v37 = (*v32)[23];
            if (v37 < 0)
            {
              if (!*((void *)v33 + 1))
              {
LABEL_74:
                uint64_t v33 = "any";
                goto LABEL_75;
              }
            }
            else if (!(*v32)[23])
            {
              goto LABEL_74;
            }
            if (v37 >= 0) {
              uint64_t v38 = *((unsigned __int8 *)*v32 + 23);
            }
            else {
              uint64_t v38 = *((void *)v33 + 1);
            }
            if (v38 != 3) {
              goto LABEL_79;
            }
            if (v37 < 0) {
              uint64_t v33 = *(const char **)v33;
            }
LABEL_75:
            int v34 = *(unsigned __int16 *)v33;
            int v35 = *((unsigned __int8 *)v33 + 2);
            if (v34 == *(unsigned __int16 *)v27 && v35 == v27[2]) {
              goto LABEL_94;
            }
LABEL_79:
            ++v32;
            v31 -= 8;
            if (!v31) {
              goto LABEL_62;
            }
          }
        }
        uint64_t v71 = 8 * v30;
        unint64_t v32 = v29;
        while (2)
        {
          __int16 v72 = *v32;
          char v73 = (*v32)[23];
          if (v73 < 0)
          {
            if (!*((void *)v72 + 1)) {
              goto LABEL_127;
            }
          }
          else if (!(*v32)[23])
          {
LABEL_127:
            ++v32;
            v71 -= 8;
            if (!v71) {
              goto LABEL_62;
            }
            continue;
          }
          break;
        }
        if (v73 >= 0) {
          uint64_t v74 = *((unsigned __int8 *)*v32 + 23);
        }
        else {
          uint64_t v74 = *((void *)v72 + 1);
        }
        if (v74 == v28)
        {
          if (!v28) {
            goto LABEL_94;
          }
          uint64_t v75 = v73 >= 0 ? *v32 : *(const char **)v72;
          if (!memcmp(v75, v27, v28)) {
            goto LABEL_94;
          }
        }
        goto LABEL_127;
      }
LABEL_93:
      unint64_t v32 = v29;
LABEL_94:
      if (v32 == &v29[v30] || !v32)
      {
LABEL_62:
        llvm::SmallVectorImpl<mlir::OpPassManager>::emplace_back<mlir::OpPassManager>((uint64_t)v82, v18++);
        if (v18 == v83) {
          break;
        }
      }
      else
      {
        uint64_t v40 = *(uint64_t **)(v25 + 40);
        __int16 v39 = *(uint64_t **)(v25 + 48);
        if (v40 == v39) {
          goto LABEL_143;
        }
        int v41 = *v32;
        long long v42 = (void *)*((void *)*v32 + 6);
        do
        {
          unint64_t v44 = *((void *)v41 + 7);
          if ((unint64_t)v42 < v44)
          {
            uint64_t v43 = *v40;
            *uint64_t v40 = 0;
            *v42++ = v43;
          }
          else
          {
            uint64_t v45 = *((void *)v41 + 5);
            long long v46 = (char *)v42 - v45;
            uint64_t v47 = ((uint64_t)v42 - v45) >> 3;
            if ((unint64_t)(v47 + 1) >> 61) {
              abort();
            }
            uint64_t v48 = v44 - v45;
            uint64_t v49 = v48 >> 2;
            if (v48 >> 2 <= (unint64_t)(v47 + 1)) {
              uint64_t v49 = v47 + 1;
            }
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v50 = v49;
            }
            if (v50)
            {
              if (v50 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              long long v51 = (char *)operator new(8 * v50);
            }
            else
            {
              long long v51 = 0;
            }
            long long v52 = &v51[8 * v47];
            uint64_t v53 = &v51[8 * v50];
            uint64_t v54 = *v40;
            *uint64_t v40 = 0;
            *(void *)long long v52 = v54;
            long long v42 = v52 + 8;
            uint64_t v55 = (char *)*((void *)v41 + 5);
            uint64_t v56 = (char *)*((void *)v41 + 6);
            uint64_t v57 = (char *)(v56 - v55);
            if (v56 == v55)
            {
              *((void *)v41 + 5) = v52;
              *((void *)v41 + 6) = v42;
              *((void *)v41 + 7) = v53;
            }
            else
            {
              uint64_t v58 = v57 - 8;
              if ((unint64_t)(v57 - 8) < 0x78
                || &v56[-8 * ((unint64_t)v58 >> 3) - 8] < v52
                && &v46[(void)v51 - ((unint64_t)v58 & 0xFFFFFFFFFFFFFFF8) - 8] < v56)
              {
                goto LABEL_157;
              }
              uint64_t v59 = ((unint64_t)v58 >> 3) + 1;
              uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v61 = &v56[-v60];
              v52 -= v60;
              char v62 = &v46[(void)v51 - 16];
              unint64_t v63 = v56 - 16;
              uint64_t v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v66 = *((_OWORD *)v63 - 1);
                long long v65 = *(_OWORD *)v63;
                *((_OWORD *)v63 - 1) = 0uLL;
                *(_OWORD *)unint64_t v63 = 0uLL;
                *((_OWORD *)v62 - 1) = v66;
                *(_OWORD *)char v62 = v65;
                v62 -= 32;
                v63 -= 32;
                v64 -= 4;
              }
              while (v64);
              uint64_t v56 = v61;
              if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_157:
                do
                {
                  uint64_t v67 = *((void *)v56 - 1);
                  v56 -= 8;
                  *(void *)uint64_t v56 = 0;
                  *((void *)v52 - 1) = v67;
                  v52 -= 8;
                }
                while (v56 != v55);
              }
              uint64_t v56 = (char *)*((void *)v41 + 5);
              int64_t v68 = (char *)*((void *)v41 + 6);
              *((void *)v41 + 5) = v52;
              *((void *)v41 + 6) = v42;
              *((void *)v41 + 7) = v53;
              while (v68 != v56)
              {
                uint64_t v70 = *((void *)v68 - 1);
                v68 -= 8;
                uint64_t v69 = v70;
                *(void *)int64_t v68 = 0;
                if (v70) {
                  (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
                }
              }
            }
            if (v56) {
              operator delete(v56);
            }
          }
          *((void *)v41 + 6) = v42;
          ++v40;
        }
        while (v40 != v39);
        unsigned int v76 = *(uint64_t **)(v25 + 40);
        uint64_t v40 = *(uint64_t **)(v25 + 48);
        if (v40 == v76)
        {
LABEL_143:
          *(void *)(v25 + 48) = v40;
          if (++v18 == v83) {
            break;
          }
        }
        else
        {
          do
          {
            uint64_t v78 = *--v40;
            uint64_t v77 = v78;
            *uint64_t v40 = 0;
            if (v78) {
              (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
            }
          }
          while (v40 != v76);
          *(void *)(v25 + 48) = v76;
          if (++v18 == v83) {
            break;
          }
        }
      }
    }
  }
LABEL_149:
  llvm::SmallVectorImpl<mlir::OpPassManager>::clear((uint64_t)v81 + 344);
  size_t v79 = *((unsigned int *)a3 + 88);
  if (v79 >= 2) {
    qsort(*v82, v79, 8uLL, (int (__cdecl *)(const void *, const void *))mlir::detail::OpToOpPassAdaptor::tryMergeInto(mlir::MLIRContext *,mlir::detail::OpToOpPassAdaptor&)::$_2::__invoke);
  }
  return 1;
}

uint64_t **llvm::erase_if<std::vector<std::unique_ptr<mlir::Pass>>,std::logical_not<std::unique_ptr<mlir::Pass>>>(uint64_t **result)
{
  uint64_t v1 = *result;
  unint64_t v2 = result[1];
  if (*result != v2)
  {
    uint64_t v3 = result;
    while (*v1)
    {
      if (++v1 == v2) {
        return result;
      }
    }
    if (v1 != v2)
    {
      size_t v4 = v1 + 1;
      if (v1 + 1 != v2)
      {
        do
        {
          uint64_t v5 = *v4;
          if (*v4)
          {
            uint64_t *v4 = 0;
            uint64_t result = (uint64_t **)*v1;
            uint64_t *v1 = v5;
            if (result) {
              uint64_t result = (uint64_t **)((uint64_t (*)(uint64_t **))(*result)[1])(result);
            }
            ++v1;
          }
          ++v4;
        }
        while (v4 != v2);
        unint64_t v2 = v3[1];
      }
    }
    if (v1 != v2)
    {
      while (v2 != v1)
      {
        uint64_t v6 = (uint64_t **)*--v2;
        uint64_t result = v6;
        uint64_t *v2 = 0;
        if (v6) {
          uint64_t result = (uint64_t **)((uint64_t (*)(uint64_t **))(*result)[1])(result);
        }
      }
      v3[1] = v1;
    }
  }
  return result;
}

uint64_t mlir::detail::OpPassManagerImpl::canScheduleOn(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v6 = *((unsigned char *)a1 + 23);
  if (v6 < 0)
  {
    if (!a1[1]) {
      goto LABEL_6;
    }
  }
  else if (!*((unsigned char *)a1 + 23))
  {
LABEL_6:
    if (*((unsigned char *)a1 + 32)) {
      return a1[3] == a3;
    }
    goto LABEL_17;
  }
  if (*((unsigned char *)a1 + 32)) {
    goto LABEL_6;
  }
  if (v6 >= 0) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = (uint64_t *)*a1;
  }
  if (v6 >= 0) {
    uint64_t v9 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v9 = a1[1];
  }
  mlir::OperationName::OperationName(v19, v8, v9, a2);
  uint64_t v10 = v19[0];
  if (!*((unsigned char *)a1 + 32))
  {
    *((unsigned char *)a1 + 32) = 1;
    a1[3] = v10;
    return a1[3] == a3;
  }
  a1[3] = v19[0];
  if (*((unsigned char *)a1 + 32)) {
    return a1[3] == a3;
  }
LABEL_17:
  uint64_t v11 = *(void **)(a3 + 16);
  BOOL v12 = v11 == &mlir::detail::TypeIDResolver<void,void>::id;
  BOOL v13 = v11 != &mlir::detail::TypeIDResolver<void,void>::id;
  uint64_t v14 = a3;
  if (v12) {
    uint64_t v14 = 0;
  }
  v19[0] = v14 | a3 & 0xFFFFFFFFFFFFFF00;
  v19[1] = v13;
  if (v12) {
    return 0;
  }
  uint64_t result = mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>(v19);
  if (result)
  {
    uint64_t v15 = a1[5];
    uint64_t v16 = a1[6];
    if (v15 == v16)
    {
      return 1;
    }
    else
    {
      uint64_t v17 = v15 + 8;
      do
      {
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v17 - 8) + 72))(*(void *)(v17 - 8), v19[0]);
        if (result) {
          BOOL v18 = v17 == v16;
        }
        else {
          BOOL v18 = 1;
        }
        v17 += 8;
      }
      while (!v18);
    }
  }
  return result;
}

void *mlir::OpPassManager::OpPassManager(void *a1, unsigned char *a2, size_t a3, int a4)
{
  uint64_t v8 = operator new(0x48uLL);
  uint64_t v9 = v8;
  if (a3 == 3)
  {
    if (*(_WORD *)a2 == 28257 && a2[2] == 121)
    {
      v8[23] = 0;
      unsigned char *v8 = 0;
      goto LABEL_20;
    }
    if (a2)
    {
      v8[23] = 3;
      uint64_t v11 = v8;
      goto LABEL_18;
    }
  }
  else if (a2)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (a3 >= 0x17)
    {
      uint64_t v12 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v12 = a3 | 7;
      }
      uint64_t v13 = v12 + 1;
      uint64_t v11 = operator new(v12 + 1);
      *((void *)v9 + 1) = a3;
      *((void *)v9 + 2) = v13 | 0x8000000000000000;
      *(void *)uint64_t v9 = v11;
    }
    else
    {
      v8[23] = a3;
      uint64_t v11 = v8;
      if (!a3) {
        goto LABEL_19;
      }
    }
LABEL_18:
    memmove(v11, a2, a3);
LABEL_19:
    *((unsigned char *)v11 + a3) = 0;
    goto LABEL_20;
  }
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
LABEL_20:
  void v9[24] = 0;
  v9[32] = 0;
  *((void *)v9 + 6) = 0;
  *((void *)v9 + 7) = 0;
  *((void *)v9 + 5) = 0;
  *((_DWORD *)v9 + 16) = 0;
  *((_DWORD *)v9 + 17) = a4;
  *a1 = v9;
  return a1;
}

uint64_t *mlir::OpPassManager::OpPassManager(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    uint64_t v5 = *(void **)(v4 + 40);
    if (v5)
    {
      char v6 = *(void **)(v4 + 48);
      uint64_t v7 = *(void **)(v4 + 40);
      if (v6 != v5)
      {
        do
        {
          uint64_t v9 = *--v6;
          uint64_t v8 = v9;
          *char v6 = 0;
          if (v9) {
            (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
          }
        }
        while (v6 != v5);
        uint64_t v7 = *(void **)(v4 + 40);
      }
      *(void *)(v4 + 48) = v5;
      operator delete(v7);
    }
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    operator delete((void *)v4);
  }
  return a1;
}

std::string **mlir::OpPassManager::operator=(std::string **a1, const mlir::detail::OpPassManagerImpl **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::string *)operator new(0x48uLL);
  uint64_t v5 = mlir::detail::OpPassManagerImpl::OpPassManagerImpl(v4, v3);
  char v6 = *a1;
  *a1 = v5;
  if (v6)
  {
    uint64_t v7 = (void *)v6[1].__r_.__value_.__r.__words[2];
    if (v7)
    {
      data = v6[2].__r_.__value_.__l.__data_;
      uint64_t v9 = (void *)v6[1].__r_.__value_.__r.__words[2];
      if (data != v7)
      {
        do
        {
          uint64_t v11 = *--data;
          uint64_t v10 = v11;
          void *data = 0;
          if (v11) {
            (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
          }
        }
        while (data != v7);
        uint64_t v9 = (void *)v6[1].__r_.__value_.__r.__words[2];
      }
      v6[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
      operator delete(v9);
    }
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6->__r_.__value_.__l.__data_);
    }
    operator delete(v6);
  }
  return a1;
}

std::string **mlir::OpPassManager::OpPassManager(std::string **this, const mlir::detail::OpPassManagerImpl **a2)
{
  *this = 0;
  return mlir::OpPassManager::operator=(this, a2);
}

void mlir::OpPassManager::~OpPassManager(mlir::OpPassManager *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1)
  {
    unint64_t v2 = *(void **)(v1 + 40);
    if (v2)
    {
      uint64_t v3 = *(void **)(v1 + 48);
      uint64_t v4 = *(void **)(v1 + 40);
      if (v3 != v2)
      {
        do
        {
          uint64_t v6 = *--v3;
          uint64_t v5 = v6;
          void *v3 = 0;
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
          }
        }
        while (v3 != v2);
        uint64_t v4 = *(void **)(v1 + 40);
      }
      *(void *)(v1 + 48) = v2;
      operator delete(v4);
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t mlir::OpPassManager::begin(mlir::OpPassManager *this)
{
  return *(void *)(*(void *)this + 40);
}

uint64_t mlir::OpPassManager::nest(uint64_t *a1, unsigned char *a2, size_t a3)
{
  return mlir::detail::OpPassManagerImpl::nest(*a1, a2, a3);
}

const char *mlir::OpPassManager::getOpAnchorName(mlir::OpPassManager *this)
{
  uint64_t v1 = *(void **)this;
  if ((*(char *)(*(void *)this + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(*(void *)this + 23)) {
      goto LABEL_3;
    }
    return "any";
  }
  if (!v1[1]) {
    return "any";
  }
LABEL_3:
  if (*(char *)(*(void *)this + 23) >= 0) {
    return *(const char **)this;
  }
  else {
    return (const char *)*v1;
  }
}

llvm::raw_ostream *mlir::OpPassManager::printAsTextualPipeline(const char **this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *this;
  char v5 = (*this)[23];
  if ((v5 & 0x80000000) == 0)
  {
    if ((*this)[23]) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t v7 = (void *)((char *)a2 + 24);
    uint64_t v10 = (void *)((char *)a2 + 32);
    uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
    unint64_t v12 = *((void *)a2 + 3) - (void)result;
    uint64_t v6 = "any";
    size_t v8 = 3;
    if (v12 > 2) {
      goto LABEL_18;
    }
LABEL_14:
    uint64_t result = llvm::raw_ostream::write(a2, v6, v8);
    uint64_t v11 = result;
    goto LABEL_15;
  }
  if (!*((void *)v4 + 1)) {
    goto LABEL_13;
  }
LABEL_3:
  if (v5 >= 0) {
    uint64_t v6 = *this;
  }
  else {
    uint64_t v6 = *(const char **)v4;
  }
  uint64_t v7 = (void *)((char *)a2 + 24);
  if (v5 >= 0) {
    size_t v8 = *((unsigned __int8 *)*this + 23);
  }
  else {
    size_t v8 = *((void *)v4 + 1);
  }
  uint64_t v10 = (void *)((char *)a2 + 32);
  uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v8 > *((void *)a2 + 3) - (void)result) {
    goto LABEL_14;
  }
  uint64_t v11 = a2;
  if (!v8)
  {
LABEL_15:
    uint64_t v13 = (unsigned char *)*((void *)v11 + 4);
    if (*((unsigned char **)v11 + 3) != v13) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = (llvm::raw_ostream *)memcpy(result, v6, v8);
  *v10 += v8;
  uint64_t v11 = a2;
  uint64_t v13 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) != v13)
  {
LABEL_16:
    *uint64_t v13 = 40;
    ++*((void *)v11 + 4);
    uint64_t v14 = (mlir::Pass **)*((void *)*this + 5);
    uint64_t v15 = (mlir::Pass **)*((void *)*this + 6);
    if (v14 == v15) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = llvm::raw_ostream::write(v11, "(", 1uLL);
  uint64_t v14 = (mlir::Pass **)*((void *)*this + 5);
  uint64_t v15 = (mlir::Pass **)*((void *)*this + 6);
  if (v14 == v15) {
    goto LABEL_25;
  }
LABEL_20:
  uint64_t v17 = *v14;
  uint64_t v16 = v14 + 1;
  for (uint64_t result = (llvm::raw_ostream *)mlir::Pass::printAsTextualPipeline(v17, a2);
        v16 != v15;
        uint64_t result = (llvm::raw_ostream *)mlir::Pass::printAsTextualPipeline(v19, a2))
  {
    while (*v7 != *v10)
    {
      *(unsigned char *)(*v10)++ = 44;
      BOOL v18 = *v16++;
      uint64_t result = (llvm::raw_ostream *)mlir::Pass::printAsTextualPipeline(v18, a2);
      if (v16 == v15) {
        goto LABEL_25;
      }
    }
    llvm::raw_ostream::write(a2, ",", 1uLL);
    uint64_t v19 = *v16++;
  }
LABEL_25:
  if (*v7 == *v10)
  {
    return llvm::raw_ostream::write(a2, ")", 1uLL);
  }
  else
  {
    *(unsigned char *)(*v10)++ = 41;
  }
  return result;
}

uint64_t mlir::OpPassManager::setNesting(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)result + 68) = a2;
  return result;
}

uint64_t mlir::OpPassManager::getNesting(mlir::OpPassManager *this)
{
  return *(unsigned int *)(*(void *)this + 68);
}

uint64_t mlir::OpPassManager::initialize(mlir::OpPassManager *this, mlir::MLIRContext *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 64) == a3) {
    return 1;
  }
  *(_DWORD *)(v3 + 64) = a3;
  char v5 = *(uint64_t **)(v3 + 40);
  uint64_t v6 = *(uint64_t **)(v3 + 48);
  if (v6 == v5) {
    return 1;
  }
  while (1)
  {
    uint64_t v8 = *v5;
    uint64_t v9 = *(void *)(*v5 + 8);
    {
      uint64_t v22 = v8;
      uint64_t v8 = v22;
      if (v13)
      {
        uint64_t v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
        unint64_t v24 = 81;
        unint64_t v14 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
        if (v24 >= v14) {
          unint64_t v15 = v14;
        }
        else {
          unint64_t v15 = v24;
        }
        uint64_t v16 = &v23[v15];
        unint64_t v17 = v24 - v15;
        if (v24 - v15 >= 0x12) {
          uint64_t v18 = 18;
        }
        else {
          uint64_t v18 = v24 - v15;
        }
        unint64_t v19 = v17 - v18;
        if (v19 >= v19 - 1) {
          uint64_t v20 = v19 - 1;
        }
        else {
          uint64_t v20 = v19;
        }
        mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
        uint64_t v8 = v22;
      }
    }
    if (v9 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id) {
      break;
    }
    if (!(*(unsigned __int8 (**)(uint64_t, mlir::MLIRContext *))(*(void *)v8 + 64))(v8, a2)) {
      return 0;
    }
LABEL_5:
    if (++v5 == v6) {
      return 1;
    }
  }
  uint64_t v10 = *(unsigned int *)(v8 + 352);
  if (!v10) {
    goto LABEL_5;
  }
  uint64_t v11 = *(mlir::OpPassManager **)(v8 + 344);
  uint64_t v12 = 8 * v10;
  while (mlir::OpPassManager::initialize(v11, a2, a3))
  {
    uint64_t v11 = (mlir::OpPassManager *)((char *)v11 + 8);
    v12 -= 8;
    if (!v12) {
      goto LABEL_5;
    }
  }
  return 0;
}

unint64_t mlir::OpPassManager::hash(mlir::OpPassManager *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(uint64_t **)(*(void *)this + 40);
  unint64_t v2 = *(uint64_t **)(*(void *)this + 48);
  if (v2 == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v22 = *(uint64_t **)(*(void *)this + 48);
  do
  {
    uint64_t v5 = *v1;
    uint64_t v6 = *(void *)(*v1 + 8);
    if ((atomic_load_explicit((atomic_uchar *volatile)v4, memory_order_acquire) & 1) == 0 && __cxa_guard_acquire(v4))
    {
      *(void *)&long long v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      *((void *)&v23 + 1) = 81;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((void *)&v23 + 1) >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = *((void *)&v23 + 1);
      }
      uint64_t v15 = v23 + v14;
      unint64_t v16 = *((void *)&v23 + 1) - v14;
      uint64_t v17 = 18;
      if (v16 < 0x12) {
        uint64_t v17 = v16;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v15 + v17, v19);
      __cxa_guard_release(v4);
    }
    if (v6 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
    {
      uint64_t v7 = *(unsigned int *)(v5 + 352);
      if (v7)
      {
        uint64_t v8 = v4;
        uint64_t v9 = *(mlir::OpPassManager **)(v5 + 344);
        uint64_t v10 = 8 * v7;
        do
        {
          uint64_t v11 = mlir::OpPassManager::hash(v9);
          uint64_t v30 = 0;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v23 = 0u;
          {
            unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v12 = 0xFF51AFD7ED558CCDLL;
            }
            llvm::hashing::detail::get_execution_seed(void)::seed = v12;
          }
          uint64_t v31 = llvm::hashing::detail::get_execution_seed(void)::seed;
          *(void *)&long long v23 = v3;
          *((void *)&v23 + 1) = v11;
          llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v23, 0, (char *)&v24, (char *)&v27);
          uint64_t v9 = (mlir::OpPassManager *)((char *)v9 + 8);
          v10 -= 8;
        }
        while (v10);
        uint64_t v4 = v8;
        unint64_t v2 = v22;
      }
    }
    else
    {
      uint64_t v30 = 0;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      {
        unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v20 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      }
      uint64_t v31 = llvm::hashing::detail::get_execution_seed(void)::seed;
      *(void *)&long long v23 = v3;
      *((void *)&v23 + 1) = v5;
      unint64_t v3 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v23, 0, (char *)&v24, (char *)&v27);
    }
    ++v1;
  }
  while (v1 != v2);
  return v3;
}

uint64_t mlir::detail::OpToOpPassAdaptor::run(uint64_t a1, mlir *a2, mlir::detail::NestedAnalysisMap *a3, char a4, int a5)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  uint64_t v110 = (void *)a1;
  uint64_t v111 = a3;
  unint64_t v109 = a2;
  char v108 = a4;
  int v107 = a5;
  uint64_t v9 = *((void *)a2 + 6);
  uint64_t v5 = *(void **)(v9 + 16);
  BOOL v6 = v5 == &mlir::detail::TypeIDResolver<void,void>::id;
  BOOL v7 = v5 != &mlir::detail::TypeIDResolver<void,void>::id;
  unint64_t v8 = v9 & 0xFFFFFFFFFFFFFF00;
  uint64_t v9 = v9;
  if (v6) {
    uint64_t v9 = 0;
  }
  v106[0] = v9 | v8;
  v106[1] = v7;
  if (v6)
  {
    __int16 v105 = 257;
    mlir::Operation::emitOpError((uint64_t *)a2, &v102, (uint64_t)v116);
    if (v116[0])
    {
      LODWORD(v112) = 3;
      unint64_t v113 = (unint64_t)"trying to schedule a pass on an unregistered operation";
      uint64_t v114 = 54;
      uint64_t v30 = &v112;
      uint64_t v31 = v117;
      if (v118 >= HIDWORD(v118))
      {
        unint64_t v79 = v118 + 1;
        if (v117 <= &v112 && &v117[3 * v118] > &v112)
        {
          int64_t v96 = (char *)&v112 - (char *)v117;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v79, 24);
          uint64_t v31 = v117;
          uint64_t v30 = (const char **)((char *)v117 + v96);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v79, 24);
          uint64_t v30 = &v112;
          uint64_t v31 = v117;
        }
      }
      uint64_t v32 = &v31[3 * v118];
      long long v33 = *(_OWORD *)v30;
      v32[2] = v30[2];
      *(_OWORD *)uint64_t v32 = v33;
      LODWORD(v118) = v118 + 1;
    }
    uint64_t v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v116);
    if (v116[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v116);
    }
    if (v124)
    {
      int v35 = v122;
      if (v122)
      {
        uint64_t v36 = v123;
        char v37 = v122;
        if (v123 != v122)
        {
          do
            uint64_t v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
          while (v36 != v35);
          char v37 = v122;
        }
        uint64_t v123 = v35;
        operator delete(v37);
      }
      uint64_t v38 = v120;
      if (!v120) {
        goto LABEL_77;
      }
      __int16 v39 = v121;
      uint64_t v40 = v120;
      if (v121 == v120) {
        goto LABEL_76;
      }
      do
      {
        long long v42 = (void *)*--v39;
        int v41 = v42;
        *__int16 v39 = 0;
        if (v42) {
          operator delete[](v41);
        }
      }
      while (v39 != v38);
      goto LABEL_75;
    }
  }
  else if (mlir::OperationName::hasTrait<mlir::OpTrait::IsIsolatedFromAbove>(v106))
  {
    uint64_t v13 = *((void *)v109 + 6);
    uint64_t v11 = *(void **)(v13 + 16);
    unint64_t v12 = v13 & 0xFFFFFFFFFFFFFF00;
    uint64_t v13 = v13;
    if (v11 == &mlir::detail::TypeIDResolver<void,void>::id) {
      uint64_t v13 = 0;
    }
    unint64_t v14 = (llvm *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 72))(a1, v13 | v12);
    if (v14)
    {
      uint64_t v15 = v111;
      uint64_t v16 = *((void *)v111 + 9);
      unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      if ((v16 & 4) == 0 && v17)
      {
        do
        {
          uint64_t v18 = *(void *)(v17 + 72);
          unint64_t v17 = v18 & 0xFFFFFFFFFFFFFFF8;
        }
        while ((v18 & 4) == 0 && v17);
      }
      uint64_t v101 = (std::recursive_mutex **)v17;
      v100[0] = llvm::get_threadid(v14);
      v100[1] = a1;
      v116[0] = &v109;
      v116[1] = &v107;
      v116[2] = &v111;
      int v117 = (const char **)&v108;
      unsigned int v118 = &v101;
      v119[0] = v100;
      if (*(unsigned char *)(a1 + 120))
      {
        uint64_t v19 = *(void **)(a1 + 64);
        if (v19 != *(void **)(a1 + 56))
        {
          free(v19);
          uint64_t v15 = v111;
          unint64_t v17 = (unint64_t)v101;
        }
      }
      unint64_t v20 = v109;
      *(void *)(a1 + 40) = (unint64_t)v109 & 0xFFFFFFFFFFFFFFFBLL;
      *(void *)(a1 + 48) = v15;
      *(void *)(a1 + 56) = a1 + 88;
      *(void *)(a1 + 64) = a1 + 88;
      *(void *)(a1 + 72) = 2;
      *(_DWORD *)(a1 + 80) = 0;
      *(void *)(a1 + 104) = llvm::function_ref<mlir::LogicalResult ()(mlir::OpPassManager &,mlir::Operation *)>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass *,mlir::Operation *,mlir::AnalysisManager,BOOL,unsigned int)::$_0>;
      *(void *)(a1 + 112) = v116;
      *(unsigned char *)(a1 + 120) = 1;
      if (v17)
      {
        uint64_t v21 = *(std::recursive_mutex **)v17;
        std::recursive_mutex::lock(*(std::recursive_mutex **)v17);
        uint64_t v22 = *(std::recursive_mutex **)v17;
        long long v23 = *(uint64_t **)(*(void *)v17 + 72);
        long long v24 = *(uint64_t **)&v22[1].__m_.__opaque[8];
        while (v23 != v24)
        {
          uint64_t v25 = *v23++;
          (*(void (**)(uint64_t, uint64_t, mlir *))(*(void *)v25 + 32))(v25, a1, v20);
        }
        std::recursive_mutex::unlock(v21);
        unint64_t v20 = v109;
      }
      unsigned __int8 v99 = 0;
      uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir *)((char *)v20 + 24));
      uint64_t v102 = (const void **)&v110;
      unint64_t v103 = (unint64_t)&v108;
      unint64_t v104 = (BOOL *)&v99;
      uint64_t v27 = (uint64_t)v110;
      unint64_t v115 = (unint64_t)v109 & 0xFFFFFFFFFFFFFFF9;
      if (mlir::MLIRContext::hasActionHandler((mlir::MLIRContext *)Context))
      {
        mlir::MLIRContext::executeActionInternal<mlir::PassExecutionAction,mlir::Pass &>(Context, (uint64_t)llvm::function_ref<void ()(void)>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass *,mlir::Operation *,mlir::AnalysisManager,BOOL,unsigned int)::$_1>, (uint64_t)&v102, (uint64_t)&v115, 1, v27);
        mlir::detail::NestedAnalysisMap::invalidate(v111, (const mlir::detail::PreservedAnalyses *)(v110 + 7));
        int v68 = v99;
        if (v99)
        {
LABEL_89:
          uint64_t v71 = v101;
          if (v101)
          {
            char v73 = v109;
            __int16 v72 = v110;
            uint64_t v74 = *v101;
            std::recursive_mutex::lock(*v101);
            uint64_t v76 = *(void *)(*v71)[1].__m_.__opaque;
            uint64_t v75 = *(void *)&(*v71)[1].__m_.__opaque[8];
            if (v68)
            {
              while (v75 != v76)
              {
                uint64_t v77 = *(void *)(v75 - 8);
                v75 -= 8;
                (*(void (**)(uint64_t, void *, mlir *))(*(void *)v77 + 48))(v77, v72, v73);
              }
            }
            else
            {
              while (v75 != v76)
              {
                uint64_t v78 = *(void *)(v75 - 8);
                v75 -= 8;
                (*(void (**)(uint64_t, void *, mlir *))(*(void *)v78 + 40))(v78, v72, v73);
              }
            }
            std::recursive_mutex::unlock(v74);
            int v68 = v99;
          }
          return v68 ^ 1u;
        }
      }
      else
      {
        long long v28 = (mlir::detail::OpToOpPassAdaptor *)v110;
        uint64_t v29 = v110[1];
        {
          uint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
          unint64_t v113 = 81;
          unint64_t v82 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
          if (v113 >= v82) {
            unint64_t v83 = v82;
          }
          else {
            unint64_t v83 = v113;
          }
          uint64_t v84 = &v112[v83];
          uint64_t v85 = (const char *)(v113 - v83);
          if (v113 - v83 >= 0x12) {
            uint64_t v86 = 18;
          }
          else {
            uint64_t v86 = v113 - v83;
          }
          unint64_t v87 = (unint64_t)&v85[-v86];
          if (v87 >= v87 - 1) {
            uint64_t v88 = v87 - 1;
          }
          else {
            uint64_t v88 = v87;
          }
          mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
        }
        if (v29 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
        {
          int v64 = *(unsigned __int8 *)v103;
          long long v65 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)((*((void *)v28 + 5) & 0xFFFFFFFFFFFFFFF8)
                                                                                   + 24));
          int isMultithreadingEnabled = mlir::MLIRContext::isMultithreadingEnabled(v65);
          BOOL v67 = v64 != 0;
          if (isMultithreadingEnabled) {
            mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(v28, v67);
          }
          mlir::detail::OpToOpPassAdaptor::runOnOperationImpl(v28, v67);
        }
        else
        {
          (*(void (**)(void))(*(void *)*v102 + 56))();
        }
        *unint64_t v104 = (*((unsigned char *)*v102 + 40) & 4) != 0;
        mlir::detail::NestedAnalysisMap::invalidate(v111, (const mlir::detail::PreservedAnalyses *)(v110 + 7));
        int v68 = v99;
        if (v99) {
          goto LABEL_89;
        }
      }
      if (v108)
      {
        uint64_t v69 = v110[1];
        {
          uint64_t v102 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
          unint64_t v103 = 81;
          unint64_t v89 = llvm::StringRef::find((uint64_t *)&v102, "DesiredTypeName = ", 0x12uLL, 0);
          if (v103 >= v89) {
            unint64_t v90 = v89;
          }
          else {
            unint64_t v90 = v103;
          }
          __int16 v91 = (char *)v102 + v90;
          unint64_t v92 = v103 - v90;
          if (v103 - v90 >= 0x12) {
            uint64_t v93 = 18;
          }
          else {
            uint64_t v93 = v103 - v90;
          }
          unint64_t v94 = v92 - v93;
          if (v94 >= v94 - 1) {
            uint64_t v95 = v94 - 1;
          }
          else {
            uint64_t v95 = v94;
          }
          mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
        }
        uint64_t v70 = mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id;
        if (!mlir::detail::PreservedAnalyses::isAll((mlir::detail::PreservedAnalyses *)(v110 + 7))) {
          mlir::verify(v109, (mlir::Operation *)(v69 != v70));
        }
        int v68 = v99;
      }
      goto LABEL_89;
    }
    __int16 v105 = 257;
    mlir::Operation::emitOpError((uint64_t *)v109, &v102, (uint64_t)v116);
    if (v116[0])
    {
      LODWORD(v112) = 3;
      unint64_t v113 = (unint64_t)"trying to schedule a pass on an unsupported operation";
      uint64_t v114 = 53;
      uint64_t v53 = &v112;
      uint64_t v54 = v117;
      if (v118 >= HIDWORD(v118))
      {
        unint64_t v81 = v118 + 1;
        if (v117 <= &v112 && &v117[3 * v118] > &v112)
        {
          int64_t v98 = (char *)&v112 - (char *)v117;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v81, 24);
          uint64_t v54 = v117;
          uint64_t v53 = (const char **)((char *)v117 + v98);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v81, 24);
          uint64_t v53 = &v112;
          uint64_t v54 = v117;
        }
      }
      uint64_t v55 = &v54[3 * v118];
      long long v56 = *(_OWORD *)v53;
      void v55[2] = v53[2];
      *(_OWORD *)uint64_t v55 = v56;
      LODWORD(v118) = v118 + 1;
    }
    uint64_t v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v116);
    if (v116[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v116);
    }
    if (v124)
    {
      uint64_t v57 = v122;
      if (v122)
      {
        uint64_t v58 = v123;
        uint64_t v59 = v122;
        if (v123 != v122)
        {
          do
            uint64_t v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
          while (v58 != v57);
          uint64_t v59 = v122;
        }
        uint64_t v123 = v57;
        operator delete(v59);
      }
      uint64_t v38 = v120;
      if (!v120) {
        goto LABEL_77;
      }
      uint64_t v60 = v121;
      uint64_t v40 = v120;
      if (v121 == v120)
      {
LABEL_76:
        int64x2_t v121 = v38;
        operator delete(v40);
LABEL_77:
        if (v117 != v119) {
          free(v117);
        }
        return v34;
      }
      do
      {
        char v62 = (void *)*--v60;
        uint64_t v61 = v62;
        *uint64_t v60 = 0;
        if (v62) {
          operator delete[](v61);
        }
      }
      while (v60 != v38);
LABEL_75:
      uint64_t v40 = v120;
      goto LABEL_76;
    }
  }
  else
  {
    __int16 v105 = 257;
    mlir::Operation::emitOpError((uint64_t *)v109, &v102, (uint64_t)v116);
    if (v116[0])
    {
      LODWORD(v112) = 3;
      unint64_t v113 = (unint64_t)"trying to schedule a pass on an operation not marked as 'IsolatedFromAbove'";
      uint64_t v114 = 75;
      uint64_t v43 = &v112;
      unint64_t v44 = v117;
      if (v118 >= HIDWORD(v118))
      {
        unint64_t v80 = v118 + 1;
        if (v117 <= &v112 && &v117[3 * v118] > &v112)
        {
          int64_t v97 = (char *)&v112 - (char *)v117;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v80, 24);
          unint64_t v44 = v117;
          uint64_t v43 = (const char **)((char *)v117 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v80, 24);
          uint64_t v43 = &v112;
          unint64_t v44 = v117;
        }
      }
      uint64_t v45 = &v44[3 * v118];
      long long v46 = *(_OWORD *)v43;
      v45[2] = v43[2];
      *(_OWORD *)uint64_t v45 = v46;
      LODWORD(v118) = v118 + 1;
    }
    uint64_t v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v116);
    if (v116[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v116);
    }
    if (v124)
    {
      uint64_t v47 = v122;
      if (v122)
      {
        uint64_t v48 = v123;
        uint64_t v49 = v122;
        if (v123 != v122)
        {
          do
            uint64_t v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
          while (v48 != v47);
          uint64_t v49 = v122;
        }
        uint64_t v123 = v47;
        operator delete(v49);
      }
      uint64_t v38 = v120;
      if (!v120) {
        goto LABEL_77;
      }
      unint64_t v50 = v121;
      uint64_t v40 = v120;
      if (v121 == v120) {
        goto LABEL_76;
      }
      do
      {
        long long v52 = (void *)*--v50;
        long long v51 = v52;
        *unint64_t v50 = 0;
        if (v52) {
          operator delete[](v51);
        }
      }
      while (v50 != v38);
      goto LABEL_75;
    }
  }
  return v34;
}

BOOL mlir::detail::PreservedAnalyses::isAll(mlir::detail::PreservedAnalyses *this)
{
  {
    unint64_t v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::PreservedAnalyses::AllAnalysesType]";
    unint64_t v21 = 98;
    unint64_t v13 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
    if (v21 >= v13) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = v21;
    }
    uint64_t v15 = &v20[v14];
    unint64_t v16 = v21 - v14;
    if (v21 - v14 >= 0x12) {
      uint64_t v17 = 18;
    }
    else {
      uint64_t v17 = v21 - v14;
    }
    unint64_t v18 = v16 - v17;
    if (v18 >= v18 - 1) {
      uint64_t v19 = v18 - 1;
    }
    else {
      uint64_t v19 = v18;
    }
    mlir::detail::TypeIDResolver<mlir::detail::PreservedAnalyses::AllAnalysesType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
  }
  uint64_t v2 = mlir::detail::TypeIDResolver<mlir::detail::PreservedAnalyses::AllAnalysesType,void>::resolveTypeID(void)::id;
  uint64_t v3 = *((void *)this + 1);
  if (v3 == *(void *)this)
  {
    uint64_t v7 = *((unsigned int *)this + 5);
    BucketFor = (const void **)(v3 + 8 * v7);
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v7;
      while (*(void *)(v3 + v8) != mlir::detail::TypeIDResolver<mlir::detail::PreservedAnalyses::AllAnalysesType,void>::resolveTypeID(void)::id)
      {
        v8 += 8;
        if (v9 == v8) {
          goto LABEL_13;
        }
      }
      BucketFor = (const void **)(v3 + v8);
    }
LABEL_13:
    uint64_t v5 = *((void *)this + 1);
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor(this, (const void *)mlir::detail::TypeIDResolver<mlir::detail::PreservedAnalyses::AllAnalysesType,void>::resolveTypeID(void)::id);
    uint64_t v3 = *(void *)this;
    uint64_t v5 = *((void *)this + 1);
    if (*BucketFor != (const void *)v2)
    {
      uint64_t v6 = 16;
      if (v5 == v3) {
        uint64_t v6 = 20;
      }
      BucketFor = (const void **)(v5 + 8 * *(unsigned int *)((char *)this + v6));
    }
  }
  BOOL v10 = v5 == v3;
  uint64_t v11 = 16;
  if (v10) {
    uint64_t v11 = 20;
  }
  return BucketFor != (const void **)(v5 + 8 * *(unsigned int *)((char *)this + v11));
}

uint64_t mlir::detail::OpToOpPassAdaptor::runPipeline(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::recursive_mutex **a6, uint64_t a7)
{
  uint64_t v8 = a6;
  uint64_t v47 = a3;
  if (!a6) {
    goto LABEL_19;
  }
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v15 = (uint64_t *)*a1;
  char v16 = *(unsigned char *)(*a1 + 23);
  if ((v16 & 0x80000000) == 0)
  {
    uint64_t v45 = a1;
    if (!*(unsigned char *)(*a1 + 23)) {
      goto LABEL_16;
    }
LABEL_6:
    if (!*((unsigned char *)v15 + 32))
    {
      if (v16 >= 0) {
        uint64_t v17 = (uint64_t *)*a1;
      }
      else {
        uint64_t v17 = (uint64_t *)*v15;
      }
      if (v16 >= 0) {
        uint64_t v18 = *(unsigned __int8 *)(*a1 + 23);
      }
      else {
        uint64_t v18 = v15[1];
      }
      mlir::OperationName::OperationName(&v48, v17, v18, Context);
      uint64_t v19 = v48;
      if (!*((unsigned char *)v15 + 32)) {
        *((unsigned char *)v15 + 32) = 1;
      }
      void v15[3] = v19;
    }
    goto LABEL_16;
  }
  uint64_t v45 = a1;
  if (v15[1]) {
    goto LABEL_6;
  }
LABEL_16:
  uint64_t v20 = v15[3];
  uint64_t v21 = v15[4];
  uint64_t v22 = *v8;
  std::recursive_mutex::lock(*v8);
  long long v46 = v8;
  long long v23 = *v8;
  uint64_t v25 = *(uint64_t **)(*v8)[1].__m_.__opaque;
  long long v24 = *(uint64_t **)&v23[1].__m_.__opaque[8];
  while (v25 != v24)
  {
    uint64_t v26 = *v25++;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v20, v21, a7);
  }
  std::recursive_mutex::unlock(v22);
  a1 = v45;
  uint64_t v8 = v46;
LABEL_19:
  uint64_t v27 = *(void **)(*a1 + 40);
  uint64_t v28 = *(void *)(*a1 + 48) - (void)v27;
  if (!v28)
  {
LABEL_23:
    if (!v8)
    {
LABEL_42:
      uint64_t v34 = 1;
      goto LABEL_43;
    }
    uint64_t v30 = v8;
    uint64_t v31 = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    uint64_t v32 = (void *)*a1;
    char v33 = *(unsigned char *)(*a1 + 23);
    if (v33 < 0)
    {
      if (!v32[1])
      {
LABEL_39:
        uint64_t v38 = v32[3];
        uint64_t v39 = v32[4];
        uint64_t v40 = *v30;
        std::recursive_mutex::lock(*v30);
        uint64_t v42 = *(void *)(*v30)[1].__m_.__opaque;
        for (uint64_t i = *(void *)&(*v30)[1].__m_.__opaque[8]; i != v42; i -= 8)
        {
          uint64_t v43 = *(void *)(i - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v43 + 24))(v43, v38, v39, a7);
        }
        std::recursive_mutex::unlock(v40);
        goto LABEL_42;
      }
    }
    else if (!*(unsigned char *)(*a1 + 23))
    {
      goto LABEL_39;
    }
    if (!*((unsigned char *)v32 + 32))
    {
      if (v33 >= 0) {
        int v35 = (uint64_t *)*a1;
      }
      else {
        int v35 = (uint64_t *)*v32;
      }
      if (v33 >= 0) {
        uint64_t v36 = *(unsigned __int8 *)(*a1 + 23);
      }
      else {
        uint64_t v36 = v32[1];
      }
      mlir::OperationName::OperationName(&v48, v35, v36, v31);
      uint64_t v37 = v48;
      if (!*((unsigned char *)v32 + 32)) {
        *((unsigned char *)v32 + 32) = 1;
      }
      void v32[3] = v37;
    }
    goto LABEL_39;
  }
  uint64_t v29 = 8 * (v28 >> 3);
  while (mlir::detail::OpToOpPassAdaptor::run(*v27, a2, a3, a4, a5))
  {
    ++v27;
    v29 -= 8;
    if (!v29) {
      goto LABEL_23;
    }
  }
  uint64_t v34 = 0;
LABEL_43:
  mlir::AnalysisManager::clear(&v47);
  return v34;
}

double mlir::PassWrapper<mlir::detail::OpToOpPassAdaptor,mlir::OperationPass<void>>::PassWrapper(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v12;
    }
  }
  *(void *)(a1 + 8) = *(void *)(v1 + 2968);
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x400000000;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x1000000000;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)a1 = &unk_1EC9A4A78;
  return result;
}

uint64_t llvm::SmallVectorImpl<mlir::OpPassManager>::emplace_back<mlir::OpPassManager>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    return llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::growAndEmplaceBack<mlir::OpPassManager>(a1, a2);
  }
  else
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = 8 * v3;
    *(void *)(v4 + v5) = 0;
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = *(void *)(v4 + 8 * v3);
    *(void *)(v4 + v5) = v6;
    if (v7)
    {
      unint64_t v8 = *(void **)(v7 + 40);
      if (v8)
      {
        uint64_t v9 = *(void **)(v7 + 48);
        unint64_t v10 = *(void **)(v7 + 40);
        if (v9 != v8)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            *uint64_t v9 = 0;
            if (v12) {
              (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
            }
          }
          while (v9 != v8);
          unint64_t v10 = *(void **)(v7 + 40);
        }
        *(void *)(v7 + 48) = v8;
        operator delete(v10);
      }
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      operator delete((void *)v7);
      LODWORD(v3) = *(_DWORD *)(a1 + 8);
    }
    unsigned int v13 = v3 + 1;
    *(_DWORD *)(a1 + 8) = v13;
    return *(void *)a1 + 8 * v13 - 8;
  }
}

uint64_t mlir::detail::OpToOpPassAdaptor::getDependentDialects(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 352);
  if (v2)
  {
    uint64_t v4 = *(void *)(result + 344);
    uint64_t v5 = v4 + 8 * v2;
    do
    {
      uint64_t v6 = *(uint64_t **)(*(void *)v4 + 40);
      uint64_t v7 = *(void *)(*(void *)v4 + 48) - (void)v6;
      if (v7)
      {
        uint64_t v8 = 8 * (v7 >> 3);
        do
        {
          uint64_t v9 = *v6++;
          double result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 24))(v9, a2);
          v8 -= 8;
        }
        while (v8);
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  return result;
}

void llvm::SmallVectorImpl<mlir::OpPassManager>::clear(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void **)a1;
    uint64_t v4 = (void *)(*(void *)a1 + 8 * v2);
    do
    {
      uint64_t v6 = *--v4;
      uint64_t v5 = v6;
      void *v4 = 0;
      if (v6)
      {
        uint64_t v7 = *(void **)(v5 + 40);
        if (v7)
        {
          uint64_t v8 = *(void **)(v5 + 48);
          uint64_t v9 = *(void **)(v5 + 40);
          if (v8 != v7)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
              }
            }
            while (v8 != v7);
            uint64_t v9 = *(void **)(v5 + 40);
          }
          *(void *)(v5 + 48) = v7;
          operator delete(v9);
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        operator delete((void *)v5);
      }
    }
    while (v4 != v3);
  }
  *(_DWORD *)(a1 + 8) = 0;
}

void mlir::detail::OpToOpPassAdaptor::getAdaptorName(mlir::detail::OpToOpPassAdaptor *this@<X0>, std::string *a2@<X8>)
{
  __p = operator new(0x19uLL);
  long long v39 = xmmword_1810FDFC0;
  strcpy((char *)__p, "Pipeline Collection : [");
  int v30 = 0;
  char v34 = 0;
  uint64_t v35 = 0;
  int v36 = 1;
  unint64_t v32 = 0;
  char v33 = 0;
  uint64_t v31 = 0;
  uint64_t v29 = &unk_1EC9A38B8;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v29, 0, 0, 0);
  uint64_t v4 = *((unsigned int *)this + 88);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)this + 43);
    uint64_t v6 = v33;
    if ((unint64_t)v33 >= v32)
    {
      uint64_t v7 = llvm::raw_ostream::write((llvm::raw_ostream *)&v29, 39);
      uint64_t v8 = *v5;
      size_t v9 = *(unsigned __int8 *)(*v5 + 23);
      if ((*(char *)(*v5 + 23) & 0x80000000) == 0)
      {
LABEL_4:
        if (v9) {
          goto LABEL_5;
        }
        goto LABEL_16;
      }
    }
    else
    {
      char v33 = (_WORD *)((char *)v33 + 1);
      *uint64_t v6 = 39;
      uint64_t v7 = (llvm::raw_ostream *)&v29;
      uint64_t v8 = *v5;
      size_t v9 = *(unsigned __int8 *)(*v5 + 23);
      if ((*(char *)(*v5 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    if (*(void *)(v8 + 8))
    {
LABEL_5:
      if ((v9 & 0x80u) == 0) {
        uint64_t v10 = (const char *)v8;
      }
      else {
        uint64_t v10 = *(const char **)v8;
      }
      if ((v9 & 0x80u) == 0) {
        size_t v11 = v9;
      }
      else {
        size_t v11 = *(void *)(v8 + 8);
      }
      unsigned int v13 = (void *)((char *)v7 + 32);
      uint64_t v12 = (void *)*((void *)v7 + 4);
      if (v11 <= *((void *)v7 + 3) - (void)v12)
      {
        if (!v11)
        {
LABEL_18:
          unint64_t v14 = (unsigned char *)*((void *)v7 + 4);
          if ((unint64_t)v14 < *((void *)v7 + 3)) {
            goto LABEL_19;
          }
          goto LABEL_22;
        }
LABEL_21:
        memcpy(v12, v10, v11);
        *v13 += v11;
        unint64_t v14 = (unsigned char *)*((void *)v7 + 4);
        if ((unint64_t)v14 < *((void *)v7 + 3))
        {
LABEL_19:
          *((void *)v7 + 4) = v14 + 1;
          *unint64_t v14 = 39;
          if (v4 == 1) {
            goto LABEL_49;
          }
          goto LABEL_23;
        }
LABEL_22:
        llvm::raw_ostream::write(v7, 39);
        if (v4 == 1) {
          goto LABEL_49;
        }
LABEL_23:
        uint64_t v15 = v5 + 1;
        uint64_t v16 = 8 * v4 - 8;
        while (1)
        {
          if (v32 - (unint64_t)v33 > 1)
          {
            *char v33 = 8236;
            uint64_t v17 = v33 + 1;
            char v33 = v17;
            if ((unint64_t)v17 < v32) {
              goto LABEL_39;
            }
LABEL_27:
            uint64_t v18 = llvm::raw_ostream::write((llvm::raw_ostream *)&v29, 39);
            uint64_t v19 = *v15;
            size_t v20 = *(unsigned __int8 *)(*v15 + 23);
            if ((*(char *)(*v15 + 23) & 0x80000000) == 0) {
              goto LABEL_28;
            }
LABEL_40:
            if (!*(void *)(v19 + 8)) {
              goto LABEL_41;
            }
LABEL_29:
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = (const char *)v19;
            }
            else {
              uint64_t v21 = *(const char **)v19;
            }
            if ((v20 & 0x80u) == 0) {
              size_t v22 = v20;
            }
            else {
              size_t v22 = *(void *)(v19 + 8);
            }
            long long v24 = (void *)((char *)v18 + 32);
            long long v23 = (void *)*((void *)v18 + 4);
            if (v22 > *((void *)v18 + 3) - (void)v23) {
              goto LABEL_43;
            }
            if (v22) {
              goto LABEL_47;
            }
LABEL_44:
            uint64_t v25 = (unsigned char *)*((void *)v18 + 4);
            if ((unint64_t)v25 >= *((void *)v18 + 3)) {
              goto LABEL_48;
            }
LABEL_24:
            *((void *)v18 + 4) = v25 + 1;
            unsigned char *v25 = 39;
            ++v15;
            v16 -= 8;
            if (!v16) {
              goto LABEL_49;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v29, ", ", 2uLL);
            uint64_t v17 = v33;
            if ((unint64_t)v33 >= v32) {
              goto LABEL_27;
            }
LABEL_39:
            char v33 = v17 + 1;
            unsigned char *v17 = 39;
            uint64_t v18 = (llvm::raw_ostream *)&v29;
            uint64_t v19 = *v15;
            size_t v20 = *(unsigned __int8 *)(*v15 + 23);
            if (*(char *)(*v15 + 23) < 0) {
              goto LABEL_40;
            }
LABEL_28:
            if (v20) {
              goto LABEL_29;
            }
LABEL_41:
            long long v24 = (void *)((char *)v18 + 32);
            long long v23 = (void *)*((void *)v18 + 4);
            if (*((void *)v18 + 3) - (void)v23 <= 2uLL)
            {
              uint64_t v21 = "any";
              size_t v22 = 3;
LABEL_43:
              uint64_t v18 = llvm::raw_ostream::write(v18, v21, v22);
              goto LABEL_44;
            }
            size_t v22 = 3;
            uint64_t v21 = "any";
LABEL_47:
            memcpy(v23, v21, v22);
            *v24 += v22;
            uint64_t v25 = (unsigned char *)*((void *)v18 + 4);
            if ((unint64_t)v25 < *((void *)v18 + 3)) {
              goto LABEL_24;
            }
LABEL_48:
            llvm::raw_ostream::write(v18, 39);
            ++v15;
            v16 -= 8;
            if (!v16) {
              goto LABEL_49;
            }
          }
        }
      }
LABEL_17:
      uint64_t v7 = llvm::raw_ostream::write(v7, v10, v11);
      goto LABEL_18;
    }
LABEL_16:
    unsigned int v13 = (void *)((char *)v7 + 32);
    uint64_t v12 = (void *)*((void *)v7 + 4);
    uint64_t v10 = "any";
    size_t v11 = 3;
    if (*((void *)v7 + 3) - (void)v12 > 2uLL) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
LABEL_49:
  uint64_t v26 = v33;
  if ((unint64_t)v33 >= v32)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v29, 93);
    uint64_t v27 = p_p;
    if ((*((char *)p_p + 23) & 0x80000000) == 0)
    {
LABEL_51:
      long long v28 = *(_OWORD *)v27;
      a2->__r_.__value_.__r.__words[2] = (std::string::size_type)v27[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v28;
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v29);
      if ((SHIBYTE(v39) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_52;
    }
  }
  else
  {
    char v33 = (_WORD *)((char *)v33 + 1);
    *uint64_t v26 = 93;
    uint64_t v27 = p_p;
    if ((*((char *)p_p + 23) & 0x80000000) == 0) {
      goto LABEL_51;
    }
  }
  std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v27, (std::string::size_type)v27[1]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v29);
  if (SHIBYTE(v39) < 0) {
LABEL_52:
  }
    operator delete(__p);
}

void mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(mlir::detail::OpToOpPassAdaptor *this, char a2)
{
  uint64_t v2 = this;
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  char v118 = a2;
  uint64_t v3 = *((void *)this + 5);
  uint64_t v4 = *((void *)this + 6);
  uint64_t v117 = v4;
  uint64_t Context = (mlir::MemRefType *)mlir::Attribute::getContext((mlir::Attribute *)((v3 & 0xFFFFFFFFFFFFFFF8) + 24));
  int8x16_t v106 = Context;
  if (*((_DWORD *)v2 + 94))
  {
    uint64_t v6 = (uint64_t *)*((void *)v2 + 46);
    uint64_t v7 = *((unsigned int *)v6 + 2);
    if (v7 == *((_DWORD *)v2 + 88))
    {
      if (!v7) {
        goto LABEL_9;
      }
      uint64_t v8 = *v6;
      uint64_t v9 = *((void *)v2 + 43);
      while (*(void *)(*(void *)v8 + 48) - *(void *)(*(void *)v8 + 40) == *(void *)(*(void *)v9 + 48)
                                                                                     - *(void *)(*(void *)v9 + 40))
      {
        v9 += 8;
        v8 += 8;
        if (!--v7) {
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t MemorySpace = mlir::MemRefType::getMemorySpace(Context);
  llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpPassManager,1u>>::assign((uint64_t)v2 + 368, *(unsigned int *)(MemorySpace + 308), (uint64_t)v2 + 344);
LABEL_9:
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  unsigned int v116 = 0;
  unint64_t v11 = *((void *)v2 + 5) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = *(unsigned int *)(v11 + 44);
  __int16 v105 = v2;
  if ((v12 & 0x7FFFFF) != 0)
  {
    unsigned int v13 = 0;
    unint64_t v14 = 0;
    char v108 = 0;
    uint64_t v15 = (mlir::Region *)(((v11 + 16 * ((v12 >> 23) & 1) + ((v12 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *(unsigned int *)(v11 + 40));
    unint64_t v103 = (char *)v15 + 24 * (v12 & 0x7FFFFF);
    while (1)
    {
      mlir::Region::OpIterator::OpIterator(&v130, v15, 0);
      unint64_t v104 = v15;
      mlir::Region::OpIterator::OpIterator(&v128, v15, 1);
      uint64_t v16 = v131;
      uint64_t v127 = v131;
      long long v126 = v130;
      *(_OWORD *)__p = v130;
      unint64_t v113 = v131;
      uint64_t v17 = v129;
      int v107 = v129;
      while (v16 != v17)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v16);
        uint64_t v19 = v18;
        uint64_t v20 = *((void *)v18 + 6);
        int v21 = v116;
        if (!v116) {
          goto LABEL_115;
        }
        unsigned int v22 = ((v20 >> 4) ^ (v20 >> 9)) & (v116 - 1);
        long long v23 = (char *)v114 + 16 * v22;
        uint64_t v24 = *(void *)v23;
        if (v20 == *(void *)v23) {
          goto LABEL_77;
        }
        uint64_t v25 = 0;
        int v26 = 1;
        while (v24 != -4096)
        {
          if (v25) {
            BOOL v27 = 0;
          }
          else {
            BOOL v27 = v24 == -8192;
          }
          if (v27) {
            uint64_t v25 = v23;
          }
          unsigned int v28 = v22 + v26++;
          unsigned int v22 = v28 & (v116 - 1);
          long long v23 = (char *)v114 + 16 * v22;
          uint64_t v24 = *(void *)v23;
          if (v20 == *(void *)v23) {
            goto LABEL_77;
          }
        }
        if (v25) {
          long long v23 = v25;
        }
        if (4 * (int)v115 + 4 < 3 * v116)
        {
          if (v116 + ~v115 - HIDWORD(v115) > v116 >> 3) {
            goto LABEL_29;
          }
        }
        else
        {
LABEL_115:
          int v21 = 2 * v116;
        }
        llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow((uint64_t)&v114, v21);
        unsigned int v68 = (v116 - 1) & ((v20 >> 4) ^ (v20 >> 9));
        long long v23 = (char *)v114 + 16 * v68;
        uint64_t v69 = *(void *)v23;
        if (v20 == *(void *)v23)
        {
          uint64_t v29 = v20;
          goto LABEL_30;
        }
        uint64_t v70 = 0;
        int v71 = 1;
        do
        {
          if (v69 == -4096)
          {
            if (v70) {
              long long v23 = v70;
            }
            uint64_t v2 = v105;
LABEL_29:
            uint64_t v29 = *(void *)v23;
            goto LABEL_30;
          }
          if (v70) {
            BOOL v72 = 0;
          }
          else {
            BOOL v72 = v69 == -8192;
          }
          if (v72) {
            uint64_t v70 = v23;
          }
          unsigned int v73 = v68 + v71++;
          unsigned int v68 = v73 & (v116 - 1);
          long long v23 = (char *)v114 + 16 * v68;
          uint64_t v69 = *(void *)v23;
        }
        while (v20 != *(void *)v23);
        uint64_t v29 = v20;
        uint64_t v2 = v105;
LABEL_30:
        LODWORD(v115) = v115 + 1;
        if (v29 != -4096) {
          --HIDWORD(v115);
        }
        *(void *)long long v23 = v20;
        v23[8] = 0;
        v23[12] = 0;
        int v30 = (uint64_t *)*((void *)v2 + 43);
        uint64_t v31 = *((unsigned int *)v2 + 88);
        unint64_t v32 = &v30[v31];
        if (!v31)
        {
LABEL_72:
          if (v30 != v32 && v30)
          {
            uint64_t v49 = *((void *)v2 + 43);
            if (!v23[12]) {
              v23[12] = 1;
            }
            *((_DWORD *)v23 + 2) = ((unint64_t)v30 - v49) >> 3;
          }
LABEL_77:
          if (!v23[12]) {
            goto LABEL_14;
          }
LABEL_78:
          uint64_t v50 = v117;
          long long v51 = *(mlir::Block **)(v117 + 24);
          uint64_t ParentOp = (mlir::Block *)*((void *)v19 + 2);
          if (ParentOp) {
            uint64_t ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
          }
          if (v51 == ParentOp)
          {
            uint64_t v50 = mlir::AnalysisManager::nestImmediate((mlir::AnalysisManager *)&v117, v19);
            unsigned int v60 = *((_DWORD *)v23 + 2);
            if (v14 >= (unsigned int *)v108) {
              goto LABEL_96;
            }
          }
          else
          {
            *(void *)&long long v130 = &v131;
            *((void *)&v130 + 1) = 0x400000000;
            uint64_t v53 = (uint64_t)v19;
            do
            {
              while (1)
              {
                uint64_t v54 = DWORD2(v130);
                if (DWORD2(v130) >= (unint64_t)HIDWORD(v130))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, &v131, DWORD2(v130) + 1, 8);
                  uint64_t v54 = DWORD2(v130);
                }
                *(void *)(v130 + 8 * v54) = v53;
                ++DWORD2(v130);
                uint64_t v55 = *(mlir::Block **)(v53 + 16);
                if (!v55) {
                  break;
                }
                uint64_t v53 = mlir::Block::getParentOp(v55);
                if ((mlir::Block *)v53 == v51) {
                  goto LABEL_87;
                }
              }
              uint64_t v53 = 0;
            }
            while (v51);
LABEL_87:
            uint64_t threadid = v50;
            long long v56 = (mlir::GenericProgramPoint **)v130;
            if (DWORD2(v130))
            {
              uint64_t v57 = 8 * DWORD2(v130);
              uint64_t v58 = v130 - 8;
              do
              {
                uint64_t v59 = mlir::AnalysisManager::nestImmediate((mlir::AnalysisManager *)&threadid, *(mlir::Operation **)(v58 + v57));
                uint64_t threadid = v59;
                v57 -= 8;
              }
              while (v57);
              uint64_t v50 = v59;
              long long v56 = (mlir::GenericProgramPoint **)v130;
            }
            if (v56 != &v131) {
              free(v56);
            }
            unsigned int v60 = *((_DWORD *)v23 + 2);
            if (v14 >= (unsigned int *)v108)
            {
LABEL_96:
              unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v13) >> 3) + 1;
              if (v61 > 0xAAAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              if (0x5555555555555556 * ((v108 - (char *)v13) >> 3) > v61) {
                unint64_t v61 = 0x5555555555555556 * ((v108 - (char *)v13) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v108 - (char *)v13) >> 3) >= 0x555555555555555) {
                unint64_t v61 = 0xAAAAAAAAAAAAAAALL;
              }
              if (v61 > 0xAAAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v62 = 24 * v61;
              unint64_t v63 = (char *)operator new(24 * v61);
              int v64 = &v63[8 * (((char *)v14 - (char *)v13) >> 3)];
              *(_DWORD *)int v64 = v60;
              *((void *)v64 + 1) = v19;
              *((void *)v64 + 2) = v50;
              if (v14 == v13)
              {
                BOOL v67 = &v63[8 * (((char *)v14 - (char *)v13) >> 3)];
                char v108 = &v63[v62];
                unint64_t v14 = (unsigned int *)(v64 + 24);
                if (v13) {
                  goto LABEL_106;
                }
              }
              else
              {
                long long v65 = &v63[8 * (((char *)v14 - (char *)v13) >> 3)];
                do
                {
                  long long v66 = *(_OWORD *)(v14 - 6);
                  BOOL v67 = v65 - 24;
                  *((void *)v65 - 1) = *((void *)v14 - 1);
                  *(_OWORD *)(v65 - 24) = v66;
                  v14 -= 6;
                  v65 -= 24;
                }
                while (v14 != v13);
                char v108 = &v63[v62];
                unint64_t v14 = (unsigned int *)(v64 + 24);
                if (v13) {
LABEL_106:
                }
                  operator delete(v13);
              }
              unsigned int v13 = (unsigned int *)v67;
              goto LABEL_14;
            }
          }
          *unint64_t v14 = v60;
          *((void *)v14 + 1) = v19;
          *((void *)v14 + 2) = v50;
          v14 += 6;
          goto LABEL_14;
        }
        uint64_t v33 = *((void *)v19 + 6);
        do
        {
          char v34 = (uint64_t *)*v30;
          char v35 = *(unsigned char *)(*v30 + 23);
          if (v35 < 0)
          {
            if (!v34[1]) {
              goto LABEL_35;
            }
          }
          else if (!*(unsigned char *)(*v30 + 23))
          {
            goto LABEL_35;
          }
          if (!*((unsigned char *)v34 + 32))
          {
            if (v35 >= 0) {
              uint64_t v40 = (uint64_t *)*v30;
            }
            else {
              uint64_t v40 = (uint64_t *)*v34;
            }
            if (v35 >= 0) {
              uint64_t v41 = *(unsigned __int8 *)(*v30 + 23);
            }
            else {
              uint64_t v41 = v34[1];
            }
            mlir::OperationName::OperationName(&v130, v40, v41, v106);
            if (!*((unsigned char *)v34 + 32)) {
              *((unsigned char *)v34 + 32) = 1;
            }
            v34[3] = v130;
          }
LABEL_35:
          if (*((unsigned char *)v34 + 32))
          {
            if (v33 == v34[3]) {
              goto LABEL_71;
            }
          }
          else
          {
            if (*(_UNKNOWN **)(v33 + 16) == &mlir::detail::TypeIDResolver<void,void>::id) {
              uint64_t v36 = 0;
            }
            else {
              uint64_t v36 = v33;
            }
            if (*(_UNKNOWN **)(v33 + 16) != &mlir::detail::TypeIDResolver<void,void>::id)
            {
              {
                *(void *)&long long v130 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
                *((void *)&v130 + 1) = 91;
                unint64_t v42 = llvm::StringRef::find((uint64_t *)&v130, "DesiredTypeName = ", 0x12uLL, 0);
                if (*((void *)&v130 + 1) >= v42) {
                  unint64_t v43 = v42;
                }
                else {
                  unint64_t v43 = *((void *)&v130 + 1);
                }
                uint64_t v44 = v130 + v43;
                unint64_t v45 = *((void *)&v130 + 1) - v43;
                uint64_t v46 = 18;
                if (v45 < 0x12) {
                  uint64_t v46 = v45;
                }
                unint64_t v47 = v45 - v46;
                if (v47 >= v47 - 1) {
                  uint64_t v48 = v47 - 1;
                }
                else {
                  uint64_t v48 = v47;
                }
                mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v44 + v46, v48);
              }
              unint64_t v37 = v36 | v33 & 0xFFFFFFFFFFFFFF00;
              if ((*(unsigned int (**)(unint64_t, uint64_t))(*(void *)v37 + 32))(v37, mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id))
              {
                uint64_t v38 = (void *)v34[5];
                long long v39 = (void *)v34[6];
                if (v38 == v39)
                {
LABEL_71:
                  uint64_t v2 = v105;
                  goto LABEL_72;
                }
                while (((*(uint64_t (**)(void, unint64_t))(*(void *)*v38 + 72))(*v38, v37) & 1) != 0)
                {
                  if (++v38 == v39) {
                    goto LABEL_71;
                  }
                }
              }
            }
          }
          ++v30;
        }
        while (v30 != v32);
        uint64_t v2 = v105;
        if (v23[12]) {
          goto LABEL_78;
        }
LABEL_14:
        mlir::Region::OpIterator::operator++((uint64_t *)__p);
        uint64_t v16 = v113;
        uint64_t v17 = v107;
      }
      uint64_t v15 = (mlir::Region *)((char *)v104 + 24);
      if ((char *)v104 + 24 == v103)
      {
        uint64_t v74 = v117;
        uint64_t threadid = llvm::get_threadid(v16);
        uint64_t v111 = v2;
        uint64_t v75 = *(void *)(v74 + 72);
        unint64_t v76 = v75 & 0xFFFFFFFFFFFFFFF8;
        if ((v75 & 4) != 0) {
          goto LABEL_136;
        }
        goto LABEL_133;
      }
    }
  }
  unint64_t v14 = 0;
  unsigned int v13 = 0;
  uint64_t threadid = llvm::get_threadid(Context);
  uint64_t v111 = v2;
  uint64_t v77 = *(void *)(v4 + 72);
  unint64_t v76 = v77 & 0xFFFFFFFFFFFFFFF8;
  if ((v77 & 4) != 0) {
    goto LABEL_136;
  }
LABEL_133:
  if (v76)
  {
    do
    {
      uint64_t v78 = *(void *)(v76 + 72);
      unint64_t v76 = v78 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v78 & 4) == 0 && v76);
  }
LABEL_136:
  unint64_t v109 = v76;
  size_t v79 = *((unsigned int *)v2 + 94);
  __p[1] = 0;
  unint64_t v113 = 0;
  __p[0] = 0;
  if (v79)
  {
    unint64_t v80 = (unsigned __int8 *)operator new(v79);
    __p[0] = v80;
    unint64_t v113 = (mlir::GenericProgramPoint *)&v80[v79];
    bzero(v80, v79);
    __p[1] = &v80[v79];
    unint64_t v81 = v79 + 1;
    do
    {
      atomic_store(0, v80++);
      --v81;
    }
    while (v81 > 1);
  }
  *(void *)&long long v130 = __p;
  *((void *)&v130 + 1) = v105;
  unint64_t v131 = (mlir::GenericProgramPoint *)&v118;
  uint64_t v132 = (std::recursive_mutex ***)&v109;
  p_uint64_t threadid = &threadid;
  uint64_t v125 = v13;
  unsigned int v82 = -1431655765 * ((unint64_t)((char *)v14 - (char *)v13) >> 3);
  unsigned int v124 = v82;
  if (v82)
  {
    if (!mlir::MLIRContext::isMultithreadingEnabled(v106) || v82 == 1)
    {
      if (v13 == v14) {
        goto LABEL_169;
      }
      unint64_t v87 = &__p[1];
      uint64_t v88 = __p;
      unint64_t v89 = (mlir::GenericProgramPoint *)&v118;
      unint64_t v90 = (std::recursive_mutex ***)&v109;
      __int16 v91 = &threadid;
      unint64_t v92 = v13;
      while (1)
      {
        uint64_t v93 = *((void *)&v130 + 1);
        unint64_t v94 = (atomic_uchar *)*v88;
        uint64_t v95 = (atomic_uchar *)*v87;
        if (v94 == v95)
        {
          int v97 = (int)v94;
        }
        else
        {
          do
          {
            char v96 = 0;
            atomic_compare_exchange_strong(v94, (unsigned __int8 *)&v96, 1u);
            if (!v96) {
              goto LABEL_159;
            }
            ++v94;
          }
          while (v94 != v95);
          LODWORD(v94) = v95;
LABEL_159:
          int v97 = (int)v94;
          unint64_t v89 = v131;
          unint64_t v90 = v132;
          unint64_t v94 = *(atomic_uchar **)v130;
          __int16 v91 = p_threadid;
        }
        uint64_t v98 = (v97 - v94);
        unsigned __int8 v99 = (uint64_t *)(*(void *)(*(void *)(v93 + 368) + 24 * v98) + 8 * *v92);
        char v100 = mlir::detail::OpToOpPassAdaptor::runPipeline(v99, *((void *)v92 + 1), *((void *)v92 + 2), *(unsigned __int8 *)v89, *(unsigned int *)(*v99 + 64), *v90, (uint64_t)v91);
        uint64_t v88 = (void **)v130;
        atomic_store(0, (unsigned __int8 *)(*(void *)v130 + v98));
        if (!v100) {
          break;
        }
        unint64_t v87 = v88 + 1;
        unint64_t v92 = v125 + 6;
        uint64_t v125 = v92;
        if (v92 == v14) {
          goto LABEL_169;
        }
      }
      uint64_t v102 = v105;
    }
    else
    {
      mlir::ParallelDiagnosticHandler::ParallelDiagnosticHandler((mlir::ParallelDiagnosticHandler *)v123, v106);
      int v122 = 0;
      unsigned __int8 v121 = 0;
      uint64_t v83 = mlir::MemRefType::getMemorySpace(v106);
      uint64_t v120 = v83;
      if (*(_DWORD *)(v83 + 308) >= v82) {
        int v84 = -1431655765 * ((unint64_t)((char *)v14 - (char *)v13) >> 3);
      }
      else {
        int v84 = *(_DWORD *)(v83 + 308);
      }
      if (v84)
      {
        do
        {
          uint64_t v85 = v120;
          uint64_t v86 = (long long *)operator new(0x38uLL);
          *(void *)uint64_t v86 = &unk_1EC9CF298;
          *((void *)v86 + 1) = &v121;
          *((void *)v86 + 2) = &v122;
          *((void *)v86 + 3) = &v124;
          *((void *)v86 + 4) = v123;
          *((void *)v86 + 5) = &v130;
          *((void *)v86 + 6) = &v125;
          uint64_t v128 = v86;
          llvm::ThreadPool::asyncImpl<void>(v85, &v126, (uint64_t)&v120, (std::future<void> *)&v119);
          if (v128 == &v126)
          {
            (*(void (**)(long long *))(v126 + 32))(&v126);
          }
          else if (v128)
          {
            (*(void (**)(void))(*(void *)v128 + 40))();
          }
          std::shared_future<void>::~shared_future(&v119);
          --v84;
        }
        while (v84);
        uint64_t v83 = v120;
      }
      llvm::ThreadPool::wait(v83, (uint64_t)&v120);
      unsigned __int8 v101 = atomic_load(&v121);
      llvm::ThreadPool::wait(v120, (uint64_t)&v120);
      mlir::ParallelDiagnosticHandler::~ParallelDiagnosticHandler((mlir::ParallelDiagnosticHandler *)v123);
      uint64_t v102 = v105;
      if ((v101 & 1) == 0) {
        goto LABEL_169;
      }
    }
    *((void *)v102 + 5) |= 4uLL;
  }
LABEL_169:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  llvm::deallocate_buffer(v114, (void *)(16 * v116));
}

uint64_t mlir::detail::OpToOpPassAdaptor::runOnOperationImpl(mlir::detail::OpToOpPassAdaptor *this, unsigned int a2)
{
  v61[4] = *MEMORY[0x1E4F143B8];
  uint64_t v57 = *((void *)this + 6);
  uint64_t result = llvm::get_threadid(this);
  v56[0] = result;
  v56[1] = this;
  uint64_t v54 = this;
  uint64_t v4 = *(void *)(v57 + 72);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0 && v5)
  {
    do
    {
      uint64_t v6 = *(void *)(v5 + 72);
      unint64_t v5 = v6 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v6 & 4) == 0 && v5);
  }
  long long v52 = (std::recursive_mutex **)v5;
  unint64_t v7 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(unsigned int *)(v7 + 44);
  unsigned int v9 = v8 & 0x7FFFFF;
  if ((v8 & 0x7FFFFF) != 0)
  {
    unint64_t v10 = ((v7 + 16 * ((v8 >> 23) & 1) + ((v8 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(v7 + 40);
    unint64_t v49 = v10 + 24 * v9;
    while (1)
    {
      uint64_t v11 = *(void *)(v10 + 8);
      unint64_t v50 = v10;
      if (v11 != v10) {
        break;
      }
LABEL_8:
      v10 += 24;
      if (v10 == v49) {
        return result;
      }
    }
    while (1)
    {
      uint64_t v12 = v11 - 8;
      uint64_t v51 = v11;
      if (!v11) {
        uint64_t v12 = 0;
      }
      unsigned int v13 = *(mlir::GenericProgramPoint **)(v12 + 40);
      uint64_t v55 = (mlir::GenericProgramPoint *)(v12 + 32);
      if (v13 != (mlir::GenericProgramPoint *)(v12 + 32)) {
        break;
      }
LABEL_10:
      unint64_t v10 = v50;
      uint64_t v11 = *(void *)(v51 + 8);
      if (v11 == v50) {
        goto LABEL_8;
      }
    }
    while (1)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v13);
      uint64_t v16 = (mlir::Operation *)v15;
      uint64_t v17 = (uint64_t *)*((void *)v54 + 43);
      uint64_t v18 = *((unsigned int *)v54 + 88);
      uint64_t v19 = v15[6];
      uint64_t result = mlir::Attribute::getContext((mlir::Attribute *)(v15 + 3));
      uint64_t v20 = &v17[v18];
      if (v18) {
        break;
      }
LABEL_57:
      if (v17 != v20 && v17 != 0)
      {
        uint64_t v39 = *(unsigned int *)(*v17 + 64);
        uint64_t v14 = v57;
        uint64_t v40 = *(mlir::Block **)(v57 + 24);
        uint64_t ParentOp = (mlir::Block *)*((void *)v16 + 2);
        if (ParentOp) {
          uint64_t ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
        }
        if (v40 == ParentOp)
        {
          uint64_t v14 = mlir::AnalysisManager::nestImmediate((mlir::AnalysisManager *)&v57, v16);
        }
        else
        {
          uint64_t v59 = v61;
          unint64_t v60 = 0x400000000;
          uint64_t v42 = (uint64_t)v16;
          do
          {
            while (1)
            {
              uint64_t v43 = v60;
              if (v60 >= (unint64_t)HIDWORD(v60))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, v60 + 1, 8);
                uint64_t v43 = v60;
              }
              *((void *)v59 + v43) = v42;
              LODWORD(v60) = v60 + 1;
              uint64_t v44 = *(mlir::Block **)(v42 + 16);
              if (!v44) {
                break;
              }
              uint64_t v42 = mlir::Block::getParentOp(v44);
              if ((mlir::Block *)v42 == v40) {
                goto LABEL_70;
              }
            }
            uint64_t v42 = 0;
          }
          while (v40);
LABEL_70:
          uint64_t v58 = v14;
          unint64_t v45 = v59;
          if (v60)
          {
            uint64_t v46 = 8 * v60;
            unint64_t v47 = (char *)v59 - 8;
            do
            {
              uint64_t v48 = mlir::AnalysisManager::nestImmediate((mlir::AnalysisManager *)&v58, *(mlir::Operation **)&v47[v46]);
              uint64_t v58 = v48;
              v46 -= 8;
            }
            while (v46);
            uint64_t v14 = v48;
            unint64_t v45 = v59;
          }
          if (v45 != v61) {
            free(v45);
          }
        }
        uint64_t result = mlir::detail::OpToOpPassAdaptor::runPipeline(v17, (uint64_t)v16, v14, a2, v39, v52, (uint64_t)v56);
        if (!(_BYTE)result)
        {
          *((void *)v54 + 5) |= 4uLL;
          return result;
        }
      }
LABEL_17:
      unsigned int v13 = (mlir::GenericProgramPoint *)*((void *)v13 + 1);
      if (v13 == v55) {
        goto LABEL_10;
      }
    }
    uint64_t v21 = result;
    while (1)
    {
      uint64_t v22 = *v17;
      char v23 = *(unsigned char *)(*v17 + 23);
      if (v23 < 0)
      {
        if (!*(void *)(v22 + 8)) {
          goto LABEL_21;
        }
      }
      else if (!*(unsigned char *)(*v17 + 23))
      {
        goto LABEL_21;
      }
      if (!*(unsigned char *)(v22 + 32))
      {
        if (v23 >= 0) {
          uint64_t v29 = *v17;
        }
        else {
          uint64_t v29 = *(void *)v22;
        }
        if (v23 >= 0) {
          uint64_t v30 = *(unsigned __int8 *)(*v17 + 23);
        }
        else {
          uint64_t v30 = *(void *)(v22 + 8);
        }
        uint64_t result = mlir::OperationName::OperationName(&v59, v29, v30, v21);
        if (!*(unsigned char *)(v22 + 32)) {
          *(unsigned char *)(v22 + 32) = 1;
        }
        *(void *)(v22 + 24) = v59;
      }
LABEL_21:
      if (*(unsigned char *)(v22 + 32))
      {
        if (v19 == *(void *)(v22 + 24)) {
          goto LABEL_57;
        }
      }
      else
      {
        uint64_t v24 = *(void **)(v19 + 16);
        if (v24 == &mlir::detail::TypeIDResolver<void,void>::id) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = v19;
        }
        if (v24 != &mlir::detail::TypeIDResolver<void,void>::id)
        {
          {
            uint64_t v59 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
            unint64_t v60 = 91;
            unint64_t v31 = llvm::StringRef::find((uint64_t *)&v59, "DesiredTypeName = ", 0x12uLL, 0);
            if (v60 >= v31) {
              unint64_t v32 = v31;
            }
            else {
              unint64_t v32 = v60;
            }
            uint64_t v33 = (char *)v59 + v32;
            unint64_t v34 = v60 - v32;
            uint64_t v35 = 18;
            if (v34 < 0x12) {
              uint64_t v35 = v34;
            }
            unint64_t v36 = v34 - v35;
            if (v36 >= v36 - 1) {
              uint64_t v37 = v36 - 1;
            }
            else {
              uint64_t v37 = v36;
            }
            mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v33[v35], v37);
          }
          unint64_t v26 = v25 | v19 & 0xFFFFFFFFFFFFFF00;
          uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v26 + 32))(v26, mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id);
          if (result)
          {
            unsigned int v28 = *(void **)(v22 + 40);
            BOOL v27 = *(void **)(v22 + 48);
            if (v28 == v27) {
              goto LABEL_57;
            }
            while (1)
            {
              uint64_t result = (*(uint64_t (**)(void, unint64_t))(*(void *)*v28 + 72))(*v28, v26);
              if ((result & 1) == 0) {
                break;
              }
              if (++v28 == v27) {
                goto LABEL_57;
              }
            }
          }
        }
      }
      if (++v17 == v20) {
        goto LABEL_17;
      }
    }
  }
  return result;
}

uint64_t mlir::AnalysisManager::nest(mlir::AnalysisManager *this, mlir::Block **a2)
{
  uint64_t v2 = (mlir::Operation *)a2;
  uint64_t v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(mlir::Block **)(*(void *)this + 24);
  uint64_t ParentOp = a2[2];
  if (ParentOp) {
    uint64_t ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  }
  if (v4 == ParentOp) {
    return mlir::AnalysisManager::nestImmediate(this, v2);
  }
  uint64_t v15 = v17;
  uint64_t v16 = 0x400000000;
  do
  {
    while (1)
    {
      uint64_t v6 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v17, v16 + 1, 8);
        uint64_t v6 = v16;
      }
      *((void *)v15 + v6) = v2;
      LODWORD(v16) = v16 + 1;
      unint64_t v7 = (mlir::Block *)*((void *)v2 + 2);
      if (!v7) {
        break;
      }
      uint64_t v2 = (mlir::Operation *)mlir::Block::getParentOp(v7);
      if (v2 == v4) {
        goto LABEL_10;
      }
    }
    uint64_t v2 = 0;
  }
  while (v4);
LABEL_10:
  uint64_t v8 = *(void *)this;
  uint64_t v14 = v8;
  unsigned int v9 = v15;
  if (v16)
  {
    uint64_t v10 = 8 * v16;
    uint64_t v11 = (char *)v15 - 8;
    do
    {
      uint64_t v12 = mlir::AnalysisManager::nestImmediate((mlir::AnalysisManager *)&v14, *(mlir::Operation **)&v11[v10]);
      uint64_t v14 = v12;
      v10 -= 8;
    }
    while (v10);
    uint64_t v8 = v12;
    unsigned int v9 = v15;
  }
  if (v9 != v17) {
    free(v9);
  }
  return v8;
}

void llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpPassManager,1u>>::assign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2) {
      unint64_t v7 = a2;
    }
    else {
      unint64_t v7 = *(unsigned int *)(a1 + 8);
    }
    if (v7)
    {
      uint64_t v8 = *(void *)a1;
      do
      {
        llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(v8, a3);
        v8 += 24;
        --v7;
      }
      while (v7);
      unint64_t v6 = *(unsigned int *)(a1 + 8);
    }
    unint64_t v9 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        uint64_t v12 = 24 * v6;
        unint64_t v13 = 24 * a2 - v12;
        uint64_t v14 = (char **)(v12 + *(void *)a1 - 24);
        do
        {
          uint64_t v14 = llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector(v14) - 3;
          v13 += 24;
        }
        while (v13);
      }
    }
    else
    {
      uint64_t v10 = (void *)(*(void *)a1 + 24 * v6);
      do
      {
        *uint64_t v10 = v10 + 2;
        v10[1] = 0x100000000;
        if (*(_DWORD *)(a3 + 8)) {
          llvm::SmallVectorImpl<mlir::OpPassManager>::operator=((uint64_t)v10, a3);
        }
        v10 += 3;
      }
      while (!__CFADD__(v9++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
  else
  {
    llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpPassManager,1u>,false>::growAndAssign(a1, a2, a3);
  }
}

int64x2_t mlir::PassManager::PassManager(void *a1, uint64_t a2, unsigned char *a3, size_t a4, int a5)
{
  unint64_t v6 = mlir::OpPassManager::OpPassManager(a1, a3, a4, a5);
  v6[1] = a2;
  *((unsigned char *)v6 + 16) = 0;
  *((unsigned char *)v6 + 20) = 0;
  v6[3] = 0;
  void v6[4] = 0;
  int64x2_t result = vdupq_n_s64(0xFFFFFFFFFFFFFFFELL);
  *(int64x2_t *)(v6 + 5) = result;
  *((unsigned char *)v6 + 56) = v6[7] & 0xFC | 2;
  return result;
}

uint64_t mlir::PassManager::PassManager(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = operator new(0x48uLL);
  uint64_t v15 = *(void *)(a2 + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v15);
  if (AttrData)
  {
    size_t v9 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    uint64_t v10 = (const void *)AttrData;
    if (v8 >= 0x17)
    {
      uint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v12 = v8 | 7;
      }
      uint64_t v13 = v12 + 1;
      uint64_t v11 = operator new(v12 + 1);
      v6[1] = v9;
      v6[2] = v13 | 0x8000000000000000;
      *unint64_t v6 = v11;
    }
    else
    {
      *((unsigned char *)v6 + 23) = v8;
      uint64_t v11 = v6;
      if (!v8) {
        goto LABEL_11;
      }
    }
    memmove(v11, v10, v9);
LABEL_11:
    *((unsigned char *)v11 + v9) = 0;
    goto LABEL_12;
  }
  *unint64_t v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
LABEL_12:
  v6[3] = a2;
  *((unsigned char *)v6 + 32) = 1;
  v6[6] = 0;
  v6[7] = 0;
  v6[5] = 0;
  *((_DWORD *)v6 + 16) = 0;
  *((_DWORD *)v6 + 17) = a3;
  *(void *)a1 = v6;
  uint64_t v15 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = mlir::Attribute::getContext((mlir::Attribute *)&v15);
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(int64x2_t *)(a1 + 40) = vdupq_n_s64(0xFFFFFFFFFFFFFFFELL);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a1 + 56) & 0xFC | 2;
  return a1;
}

void mlir::PassManager::~PassManager(mlir::PassManager *this)
{
  uint64_t v2 = (mlir::detail::PassCrashReproducerGenerator::Impl **)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    mlir::detail::PassCrashReproducerGenerator::~PassCrashReproducerGenerator(v2);
    operator delete(v3);
  }
  std::unique_ptr<mlir::PassInstrumentor>::~unique_ptr[abi:nn180100]((uint64_t **)this + 3);
  uint64_t v4 = *(void *)this;
  *(void *)this = 0;
  if (v4)
  {
    unint64_t v5 = *(void **)(v4 + 40);
    if (v5)
    {
      unint64_t v6 = *(void **)(v4 + 48);
      unint64_t v7 = *(void **)(v4 + 40);
      if (v6 != v5)
      {
        do
        {
          uint64_t v9 = *--v6;
          uint64_t v8 = v9;
          *unint64_t v6 = 0;
          if (v9) {
            (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
          }
        }
        while (v6 != v5);
        unint64_t v7 = *(void **)(v4 + 40);
      }
      *(void *)(v4 + 48) = v5;
      operator delete(v7);
    }
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    operator delete((void *)v4);
  }
}

uint64_t mlir::PassManager::enableVerifier(uint64_t this, int a2)
{
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(this + 56) = *(unsigned char *)(this + 56) & 0xFD | v2;
  return this;
}

uint64_t mlir::PassManager::run(mlir::PassManager *this, mlir::Operation *a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(uint64_t **)this;
  uint64_t v4 = (mlir::MLIRContext *)*((void *)this + 1);
  char v6 = *(unsigned char *)(*(void *)this + 23);
  if (v6 < 0)
  {
    if (!v5[1]) {
      goto LABEL_6;
    }
  }
  else if (!*(unsigned char *)(*(void *)this + 23))
  {
LABEL_6:
    if (!*((unsigned char *)v5 + 32)) {
      goto LABEL_53;
    }
    goto LABEL_7;
  }
  if (*((unsigned char *)v5 + 32)) {
    goto LABEL_6;
  }
  if (v6 >= 0) {
    uint64_t v14 = *(uint64_t **)this;
  }
  else {
    uint64_t v14 = (uint64_t *)*v5;
  }
  if (v6 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(*(void *)this + 23);
  }
  else {
    uint64_t v15 = v5[1];
  }
  mlir::OperationName::OperationName(&v78, v14, v15, v4);
  uint64_t v16 = v78;
  if (*((unsigned char *)v5 + 32))
  {
    v5[3] = (uint64_t)v78;
    if (!*((unsigned char *)v5 + 32)) {
      goto LABEL_53;
    }
  }
  else
  {
    *((unsigned char *)v5 + 32) = 1;
    v5[3] = (uint64_t)v16;
  }
LABEL_7:
  if (*((void *)a2 + 6) != v5[3])
  {
    mlir::emitError(*((void *)a2 + 3), (uint64_t)&v78);
    if (v78)
    {
      LODWORD(v72) = 3;
      unsigned int v73 = "can't run '";
      uint64_t v74 = 11;
      unint64_t v7 = &v72;
      uint64_t v8 = (char *)v81;
      if (v82 >= HIDWORD(v82))
      {
        unint64_t v66 = v82 + 1;
        if (v81 <= &v72 && (char *)v81 + 24 * v82 > (char *)&v72)
        {
          int64_t v69 = (char *)&v72 - (unsigned char *)v81;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v66, 24);
          uint64_t v8 = (char *)v81;
          unint64_t v7 = (char ***)((char *)v81 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v66, 24);
          unint64_t v7 = &v72;
          uint64_t v8 = (char *)v81;
        }
      }
      uint64_t v9 = &v8[24 * v82];
      long long v10 = *(_OWORD *)v7;
      *((void *)v9 + 2) = v7[2];
      *(_OWORD *)uint64_t v9 = v10;
      LODWORD(v82) = v82 + 1;
    }
    uint64_t v11 = *(const char **)this;
    uint64_t v12 = *(unsigned __int8 *)(*(void *)this + 23);
    if (*(char *)(*(void *)this + 23) < 0)
    {
      if (*((void *)v11 + 1))
      {
LABEL_13:
        uint64_t v13 = *((void *)v11 + 1);
        if ((v12 & 0x80u) != 0)
        {
          uint64_t v11 = *(const char **)v11;
          uint64_t v12 = v13;
        }
        if (!v78) {
          goto LABEL_34;
        }
        goto LABEL_28;
      }
    }
    else if (*(unsigned char *)(*(void *)this + 23))
    {
      goto LABEL_13;
    }
    uint64_t v11 = "any";
    uint64_t v12 = 3;
    if (!v78)
    {
LABEL_34:
      uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v78);
      if (v78) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v78);
      }
      if (v92)
      {
        unint64_t v26 = (void **)__p;
        if (__p)
        {
          BOOL v27 = v91;
          unsigned int v28 = __p;
          if (v91 != __p)
          {
            do
              BOOL v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            unsigned int v28 = __p;
          }
          __int16 v91 = v26;
          operator delete(v28);
        }
        uint64_t v29 = v88;
        if (v88)
        {
          uint64_t v30 = v89;
          unint64_t v31 = v88;
          if (v89 != v88)
          {
            do
            {
              uint64_t v33 = (void *)*--v30;
              unint64_t v32 = v33;
              *uint64_t v30 = 0;
              if (v33) {
                operator delete[](v32);
              }
            }
            while (v30 != v29);
            unint64_t v31 = v88;
          }
          unint64_t v89 = v29;
          operator delete(v31);
        }
        if (v81 != &v83) {
          free(v81);
        }
      }
      return v25;
    }
LABEL_28:
    LOWORD(v76) = 261;
    BOOL v72 = (char **)v11;
    unsigned int v73 = (char *)v12;
    mlir::Diagnostic::operator<<((uint64_t)&v79, (const void ***)&v72);
    if (v78)
    {
      LODWORD(v72) = 3;
      unsigned int v73 = "' pass manager on '";
      uint64_t v74 = 19;
      uint64_t v17 = &v72;
      uint64_t v18 = (char *)v81;
      if (v82 >= HIDWORD(v82))
      {
        unint64_t v67 = v82 + 1;
        if (v81 <= &v72 && (char *)v81 + 24 * v82 > (char *)&v72)
        {
          int64_t v70 = (char *)&v72 - (unsigned char *)v81;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v67, 24);
          uint64_t v18 = (char *)v81;
          uint64_t v17 = (char ***)((char *)v81 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v67, 24);
          uint64_t v17 = &v72;
          uint64_t v18 = (char *)v81;
        }
      }
      uint64_t v19 = &v18[24 * v82];
      long long v20 = *(_OWORD *)v17;
      *((void *)v19 + 2) = v17[2];
      *(_OWORD *)uint64_t v19 = v20;
      LODWORD(v82) = v82 + 1;
      if (v78)
      {
        mlir::Diagnostic::operator<<((uint64_t)&v79, *((void *)a2 + 6));
        if (v78)
        {
          LODWORD(v72) = 3;
          unsigned int v73 = "' op";
          uint64_t v74 = 4;
          uint64_t v21 = &v72;
          uint64_t v22 = (char *)v81;
          if (v82 >= HIDWORD(v82))
          {
            unint64_t v68 = v82 + 1;
            if (v81 <= &v72 && (char *)v81 + 24 * v82 > (char *)&v72)
            {
              int64_t v71 = (char *)&v72 - (unsigned char *)v81;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v68, 24);
              uint64_t v22 = (char *)v81;
              uint64_t v21 = (char ***)((char *)v81 + v71);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v68, 24);
              uint64_t v21 = &v72;
              uint64_t v22 = (char *)v81;
            }
          }
          char v23 = &v22[24 * v82];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = v21[2];
          *(_OWORD *)char v23 = v24;
          LODWORD(v82) = v82 + 1;
        }
      }
    }
    goto LABEL_34;
  }
LABEL_53:
  mlir::DialectRegistry::DialectRegistry((mlir::DialectRegistry *)&v72);
  unint64_t v34 = *(uint64_t **)(*(void *)this + 40);
  uint64_t v35 = *(void *)(*(void *)this + 48) - (void)v34;
  if (v35)
  {
    uint64_t v36 = 8 * (v35 >> 3);
    do
    {
      uint64_t v37 = *v34++;
      (*(void (**)(uint64_t, char ***))(*(void *)v37 + 24))(v37, &v72);
      v36 -= 8;
    }
    while (v36);
  }
  mlir::MLIRContext::appendDialectRegistry(v4, (const mlir::DialectRegistry *)&v72);
  uint64_t v38 = v72;
  if (v72 != &v73)
  {
    do
    {
      int v46 = *((char *)v38 + 55);
      if (v46 >= 0) {
        unint64_t v47 = (char *)(v38 + 4);
      }
      else {
        unint64_t v47 = v38[4];
      }
      if (v46 >= 0) {
        size_t v48 = *((unsigned __int8 *)v38 + 55);
      }
      else {
        size_t v48 = (size_t)v38[5];
      }
      mlir::MLIRContext::getOrLoadDialect((uint64_t)v4, v47, v48);
      unint64_t v49 = v38[1];
      if (v49)
      {
        do
        {
          unint64_t v50 = (char **)v49;
          unint64_t v49 = *(char **)v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          unint64_t v50 = (char **)v38[2];
          BOOL v51 = *v50 == (char *)v38;
          uint64_t v38 = v50;
        }
        while (!v51);
      }
      uint64_t v38 = v50;
    }
    while (v50 != &v73);
  }
  if (mlir::detail::OpPassManagerImpl::finalizePassList(*(mlir::detail::OpPassManagerImpl **)this, v4))
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v4);
    unint64_t RegistryHash = mlir::MLIRContext::getRegistryHash(v4);
    unint64_t v40 = mlir::OpPassManager::hash(this);
    if (RegistryHash == *((void *)this + 5) && v40 == *((void *)this + 6))
    {
LABEL_62:
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      int v80 = 0;
      unsigned int v82 = 0;
      uint64_t v83 = 0;
      unint64_t v81 = a2;
      unsigned int v84 = 0;
      uint64_t v41 = *((void *)this + 4);
      uint64_t v42 = *((void *)this + 3) | 4;
      uint64_t v86 = 0;
      v87[0] = v42;
      uint64_t v85 = v87;
      if (v41)
      {
        mlir::PassManager::runWithCrashRecovery((uint64_t)this, (uint64_t)a2, (uint64_t)&v78);
        mlir::GenericProgramPoint::~GenericProgramPoint(v4);
        if (!*((unsigned char *)this + 20)) {
          goto LABEL_65;
        }
      }
      else
      {
        unsigned int v54 = *((unsigned __int8 *)this + 56);
        uint64_t v55 = *(void *)this;
        int v56 = *(_DWORD *)(*(void *)this + 64);
        uint64_t v77 = &v78;
        uint64_t v57 = *(uint64_t **)(v55 + 40);
        uint64_t v58 = *(void *)(v55 + 48) - (void)v57;
        if (v58)
        {
          uint64_t v59 = 8 * (v58 >> 3);
          int v60 = (v54 >> 1) & 1;
          do
          {
            if (!mlir::detail::OpToOpPassAdaptor::run(*v57, a2, (mlir::detail::NestedAnalysisMap *)&v78, v60, v56))break; {
            ++v57;
            }
            v59 -= 8;
          }
          while (v59);
        }
        mlir::AnalysisManager::clear((uint64_t *)&v77);
        mlir::GenericProgramPoint::~GenericProgramPoint(v4);
        if (!*((unsigned char *)this + 20))
        {
LABEL_65:
          uint64_t v43 = v85;
          if (v86)
          {
            uint64_t v44 = (char *)v85 - 8;
            uint64_t v45 = 16 * v86;
            do
            {
              uint64_t v52 = *(void *)&v44[v45];
              *(void *)&v44[v45] = 0;
              if (v52) {
                (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
              }
              v45 -= 16;
            }
            while (v45);
            uint64_t v43 = v85;
          }
          if (v43 != v87) {
            free(v43);
          }
          llvm::deallocate_buffer(v82, (void *)(16 * v84));
        }
      }
      mlir::PassManager::dumpStatistics(this);
      goto LABEL_65;
    }
    if (mlir::OpPassManager::initialize(this, v4, *(_DWORD *)(*(void *)this + 64) + 1))
    {
      *((void *)this + 5) = RegistryHash;
      goto LABEL_62;
    }
  }
  uint64_t v25 = 0;
  uint64_t v53 = v75;
  if (v75)
  {
    unint64_t v61 = v76;
    uint64_t v62 = v75;
    if (v76 != v75)
    {
      do
      {
        uint64_t v64 = *--v61;
        uint64_t v63 = v64;
        *unint64_t v61 = 0;
        if (v64) {
          (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
        }
      }
      while (v61 != v53);
      uint64_t v62 = v75;
    }
    unint64_t v76 = v53;
    operator delete(v62);
  }
  std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::destroy((uint64_t)&v72, v73);
  return v25;
}

uint64_t mlir::PassManager::runPasses(unsigned __int8 *a1, mlir *a2, mlir::detail::NestedAnalysisMap *a3)
{
  unsigned int v3 = a1[56];
  uint64_t v4 = *(void *)a1;
  int v5 = *(_DWORD *)(*(void *)a1 + 64);
  uint64_t v14 = a3;
  char v6 = *(uint64_t **)(v4 + 40);
  uint64_t v7 = *(void *)(v4 + 48) - (void)v6;
  if (v7)
  {
    uint64_t v10 = 8 * (v7 >> 3);
    int v11 = (v3 >> 1) & 1;
    while (mlir::detail::OpToOpPassAdaptor::run(*v6, a2, a3, v11, v5))
    {
      ++v6;
      v10 -= 8;
      if (!v10) {
        goto LABEL_5;
      }
    }
    uint64_t v12 = 0;
  }
  else
  {
LABEL_5:
    uint64_t v12 = 1;
  }
  mlir::AnalysisManager::clear((uint64_t *)&v14);
  return v12;
}

uint64_t mlir::PassManager::addInstrumentation(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *(std::recursive_mutex ***)(a1 + 24);
  if (!v3)
  {
    unsigned int v3 = (std::recursive_mutex **)operator new(8uLL);
    int v5 = operator new(0x60uLL);
    *int v5 = 0u;
    v5[1] = 0u;
    void v5[2] = 0u;
    v5[3] = 0u;
    v5[4] = 0u;
    v5[5] = 0u;
    uint64_t v6 = MEMORY[0x1852FDB50]();
    *(_DWORD *)(v6 + 64) = 0;
    *(void *)(v6 + 80) = 0;
    *(void *)(v6 + 88) = 0;
    *(void *)(v6 + 72) = 0;
    void *v3 = (std::recursive_mutex *)v6;
    uint64_t v7 = *(uint64_t **)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    if (v7)
    {
      uint64_t v8 = *v7;
      *uint64_t v7 = 0;
      if (v8)
      {
        uint64_t v9 = *(void **)(v8 + 72);
        if (v9)
        {
          uint64_t v10 = *(void **)(v8 + 80);
          int v11 = *(void **)(v8 + 72);
          if (v10 != v9)
          {
            do
            {
              uint64_t v13 = *--v10;
              uint64_t v12 = v13;
              *uint64_t v10 = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
              }
            }
            while (v10 != v9);
            int v11 = *(void **)(v8 + 72);
          }
          *(void *)(v8 + 80) = v9;
          operator delete(v11);
        }
        std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)v8);
        operator delete(v14);
      }
      operator delete(v7);
      unsigned int v3 = *(std::recursive_mutex ***)(a1 + 24);
    }
  }
  uint64_t v15 = *a2;
  *a2 = 0;
  uint64_t v20 = v15;
  uint64_t v16 = *v3;
  std::recursive_mutex::lock(*v3);
  uint64_t v17 = *v3;
  uint64_t v18 = *(uint64_t **)&(*v3)[1].__m_.__opaque[8];
  if ((unint64_t)v18 >= *(void *)&(*v3)[1].__m_.__opaque[16])
  {
    *(void *)&v17[1].__m_.__opaque[8] = std::vector<std::unique_ptr<mlir::PassInstrumentation>>::__emplace_back_slow_path<std::unique_ptr<mlir::PassInstrumentation>>(v17[1].__m_.__opaque, &v20);
    std::recursive_mutex::unlock(v16);
    uint64_t result = v20;
    uint64_t v20 = 0;
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v20 = 0;
  *uint64_t v18 = v15;
  *(void *)&v17[1].__m_.__opaque[8] = v18 + 1;
  std::recursive_mutex::unlock(v16);
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::AnalysisManager::nestImmediate(mlir::AnalysisManager *this, mlir::Operation *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v4 = **(void **)this;
  uint64_t v5 = *(unsigned int *)(*(void *)this + 16);
  if (v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = v4 + 16 * v6;
    uint64_t v8 = *(mlir::Operation **)v7;
    if (*(mlir::Operation **)v7 == a2) {
      goto LABEL_8;
    }
    int v9 = 1;
    while (v8 != (mlir::Operation *)-4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(mlir::Operation **)(v4 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = v4 + 16 * v6;
        goto LABEL_8;
      }
    }
  }
  uint64_t v7 = v4 + 16 * v5;
LABEL_8:
  if (v7 == v4 + 16 * v5)
  {
    int v11 = operator new(0x50uLL);
    *int v11 = 0;
    v11[1] = 0;
    *((_DWORD *)v11 + 4) = 0;
    void v11[4] = 0;
    v11[5] = 0;
    v11[3] = a2;
    *((_DWORD *)v11 + 12) = 0;
    v11[9] = v3 & 0xFFFFFFFFFFFFFFFBLL;
    v11[7] = v11 + 9;
    v11[8] = 0;
    uint64_t v29 = (uint64_t)v11;
    if (!v5) {
      goto LABEL_30;
    }
    unsigned int v12 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = v4 + 16 * v12;
    uint64_t v13 = *(mlir::Operation **)v7;
    if (*(mlir::Operation **)v7 == a2)
    {
LABEL_25:
      std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](&v29, 0);
      return *(void *)(v7 + 8);
    }
    uint64_t v14 = 0;
    int v15 = 1;
    while (v13 != (mlir::Operation *)-4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == (mlir::Operation *)-8192;
      }
      if (v16) {
        uint64_t v14 = v7;
      }
      unsigned int v17 = v12 + v15++;
      unsigned int v12 = v17 & (v5 - 1);
      uint64_t v7 = v4 + 16 * v12;
      uint64_t v13 = *(mlir::Operation **)v7;
      if (*(mlir::Operation **)v7 == a2) {
        goto LABEL_25;
      }
    }
    if (v14) {
      uint64_t v7 = v14;
    }
    int v21 = *(_DWORD *)(v3 + 8);
    if (4 * v21 + 4 < (3 * v5))
    {
      if ((int)v5 + ~v21 - *(_DWORD *)(v3 + 12) > v5 >> 3) {
        goto LABEL_22;
      }
    }
    else
    {
LABEL_30:
      LODWORD(v5) = 2 * v5;
    }
    llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::grow(v3, v5);
    int v22 = *(_DWORD *)(v3 + 16) - 1;
    unsigned int v23 = v22 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = *(void *)v3 + 16 * v23;
    long long v24 = *(mlir::Operation **)v7;
    if (*(mlir::Operation **)v7 == a2)
    {
LABEL_32:
      ++*(_DWORD *)(v3 + 8);
      if (a2 == (mlir::Operation *)-4096) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
    uint64_t v25 = 0;
    int v26 = 1;
    while (v24 != (mlir::Operation *)-4096)
    {
      if (v25) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = v24 == (mlir::Operation *)-8192;
      }
      if (v27) {
        uint64_t v25 = v7;
      }
      unsigned int v28 = v23 + v26++;
      unsigned int v23 = v28 & v22;
      uint64_t v7 = *(void *)v3 + 16 * v23;
      long long v24 = *(mlir::Operation **)v7;
      if (*(mlir::Operation **)v7 == a2) {
        goto LABEL_32;
      }
    }
    if (v25) {
      uint64_t v7 = v25;
    }
LABEL_22:
    uint64_t v18 = *(mlir::Operation **)v7;
    ++*(_DWORD *)(v3 + 8);
    if (v18 == (mlir::Operation *)-4096)
    {
LABEL_24:
      *(void *)uint64_t v7 = a2;
      uint64_t v19 = v29;
      uint64_t v29 = 0;
      *(void *)(v7 + 8) = v19;
      goto LABEL_25;
    }
LABEL_23:
    --*(_DWORD *)(v3 + 12);
    goto LABEL_24;
  }
  return *(void *)(v7 + 8);
}

void mlir::detail::NestedAnalysisMap::invalidate(mlir::detail::NestedAnalysisMap *this, const mlir::detail::PreservedAnalyses *a2)
{
  v21[6] = *(const void **)MEMORY[0x1E4F143B8];
  if (!mlir::detail::PreservedAnalyses::isAll(a2))
  {
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v18, v21, a2);
    _ZN4llvm9MapVectorIN4mlir6TypeIDENSt3__110unique_ptrINS1_6detail15AnalysisConceptENS3_14default_deleteIS6_EEEENS_8DenseMapIS2_jNS_12DenseMapInfoIS2_vEENS_6detail12DenseMapPairIS2_jEEEENS_11SmallVectorINS3_4pairIS2_S9_EELj0EEEE9remove_ifIZNS5_11AnalysisMap10invalidateERKNS5_17PreservedAnalysesEEUlRT_E_EEvSR_((uint64_t)this + 32, (uint64_t)&v18);
    if (v19 != v18) {
      free(v19);
    }
    if (*((_DWORD *)a2 + 5) == *((_DWORD *)a2 + 6))
    {
      int v4 = *((_DWORD *)this + 2);
      if (v4 || *((_DWORD *)this + 3))
      {
        uint64_t v5 = *((unsigned int *)this + 4);
        if (v5 > 4 * v4 && v5 >= 0x41)
        {
          llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::shrink_and_clear((uint64_t *)this);
          return;
        }
        if (v5)
        {
          int v15 = (uint64_t *)(*(void *)this + 8);
          for (uint64_t i = 16 * v5; i; i -= 16)
          {
            uint64_t v17 = *(v15 - 1);
            if (v17 != -8192)
            {
              if (v17 == -4096) {
                goto LABEL_35;
              }
              std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](v15, 0);
            }
            *(v15 - 1) = -4096;
LABEL_35:
            v15 += 2;
          }
        }
        *((void *)this + 1) = 0;
      }
    }
    else
    {
      uint64_t v18 = v20;
      HIDWORD(v19) = 8;
      v20[0] = this;
      unsigned int v6 = 1;
      do
      {
        uint64_t v7 = (uint64_t *)*((void *)v18 + --v6);
        LODWORD(v19) = v6;
        if (*((_DWORD *)v7 + 2))
        {
          uint64_t v8 = *v7;
          uint64_t v9 = *((unsigned int *)v7 + 4);
          if (v9)
          {
            uint64_t v10 = 16 * v9;
            uint64_t v11 = v8;
            while ((*(void *)v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v11 += 16;
              v10 -= 16;
              if (!v10) {
                goto LABEL_12;
              }
            }
          }
          else
          {
            uint64_t v11 = v8;
          }
          uint64_t v12 = v8 + 16 * v9;
          if (v11 != v12)
          {
LABEL_21:
            mlir::detail::NestedAnalysisMap::invalidate(*(mlir::detail::NestedAnalysisMap **)(v11 + 8), a2);
            uint64_t v13 = *(void *)(v11 + 8);
            if (*(_DWORD *)(v13 + 8))
            {
              uint64_t v14 = v19;
              if (v19 >= (unint64_t)HIDWORD(v19))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v19 + 1, 8);
                uint64_t v14 = v19;
              }
              *((void *)v18 + v14) = v13;
              LODWORD(v19) = v19 + 1;
            }
            while (1)
            {
              v11 += 16;
              if (v11 == v12) {
                break;
              }
              if ((*(void *)v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if (v11 != v12) {
                  goto LABEL_21;
                }
                break;
              }
            }
            unsigned int v6 = v19;
          }
        }
LABEL_12:
        ;
      }
      while (v6);
      if (v18 != v20) {
        free(v18);
      }
    }
  }
}

void mlir::PassInstrumentor::runBeforeAnalysis(std::recursive_mutex **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  std::recursive_mutex::lock(*a1);
  uint64_t v11 = *a1;
  uint64_t v12 = *(uint64_t **)(*a1)[1].__m_.__opaque;
  uint64_t v13 = *(uint64_t **)&v11[1].__m_.__opaque[8];
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 56))(v14, a2, a3, a4, a5);
  }

  std::recursive_mutex::unlock(v10);
}

void mlir::PassInstrumentor::runAfterAnalysis(std::recursive_mutex **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  std::recursive_mutex::lock(*a1);
  uint64_t v12 = *(void *)(*a1)[1].__m_.__opaque;
  for (uint64_t i = *(void *)&(*a1)[1].__m_.__opaque[8]; i != v12; i -= 8)
  {
    uint64_t v13 = *(void *)(i - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 64))(v13, a2, a3, a4, a5);
  }

  std::recursive_mutex::unlock(v10);
}

const char *mlir::Pass::getArgument(mlir::Pass *this)
{
  return "";
}

const char *mlir::Pass::getDescription(mlir::Pass *this)
{
  return "";
}

const char *mlir::tracing::ActionImpl<mlir::PassExecutionAction>::getTag()
{
  return "pass-execution";
}

uint64_t mlir::tracing::Action::getContextIRUnits(mlir::tracing::Action *this)
{
  return *((void *)this + 2);
}

void mlir::detail::OpToOpPassAdaptor::~OpToOpPassAdaptor(mlir::detail::OpToOpPassAdaptor *this)
{
  *(void *)this = &unk_1EC9CD098;
  char v2 = (char *)*((void *)this + 46);
  uint64_t v3 = *((unsigned int *)this + 94);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    uint64_t v5 = v2 - 24;
    do
    {
      llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)&v5[v4]);
      v4 -= 24;
    }
    while (v4);
    char v2 = (char *)*((void *)this + 46);
  }
  if (v2 != (char *)this + 384) {
    free(v2);
  }
  llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)this + 43);

  mlir::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EC9CD098;
  char v2 = (char *)*((void *)this + 46);
  uint64_t v3 = *((unsigned int *)this + 94);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    uint64_t v5 = v2 - 24;
    do
    {
      llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)&v5[v4]);
      v4 -= 24;
    }
    while (v4);
    char v2 = (char *)*((void *)this + 46);
  }
  if (v2 != (char *)this + 384) {
    free(v2);
  }
  llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)this + 43);
  mlir::Pass::~Pass(this);

  operator delete(v6);
}

const char *mlir::PassWrapper<mlir::detail::OpToOpPassAdaptor,mlir::OperationPass<void>>::getName()
{
  uint64_t v5 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
  unint64_t v6 = 81;
  unint64_t v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0) {
    unint64_t v1 = v0;
  }
  else {
    unint64_t v1 = v6;
  }
  char v2 = &v5[v1];
  if (v6 - v1 >= 0x12) {
    uint64_t v3 = 18;
  }
  else {
    uint64_t v3 = v6 - v1;
  }
  return &v2[v3];
}

uint64_t mlir::OperationPass<void>::canScheduleOn()
{
  return 1;
}

uint64_t mlir::PassWrapper<mlir::detail::OpToOpPassAdaptor,mlir::OperationPass<void>>::clonePass@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t)operator new(0x240uLL);
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)(result + 16) = *(_OWORD *)(a1 + 16);
  *(void *)(result + 32) = *(void *)(a1 + 32);
  *(unsigned char *)(result + 40) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(void *)(result + 176) = 0;
  *(void *)(result + 184) = result + 200;
  *(void *)(result + 192) = 0x400000000;
  *(void *)(result + 232) = result + 248;
  *(void *)(result + 240) = 0x400000000;
  *(void *)(result + 280) = 0;
  *(void *)(result + 288) = 0;
  *(_DWORD *)(result + 296) = 0;
  *(_DWORD *)(result + 300) = 16;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(void *)uint64_t result = &unk_1EC9CD098;
  *(void *)(result + 8) = v6;
  *(void *)(result + 336) = 0;
  *(void *)(result + 344) = result + 360;
  *(void *)(result + 352) = 0x100000000;
  if (*(_DWORD *)(a1 + 352)) {
    uint64_t result = llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(result + 344, a1 + 344);
  }
  *(void *)(v5 + 368) = v5 + 384;
  *(void *)(v5 + 376) = 0x800000000;
  if (*(_DWORD *)(a1 + 376)) {
    uint64_t result = llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpPassManager,1u>>::operator=(v5 + 368, a1 + 368);
  }
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::OpToOpPassAdaptor::tryMergeInto(mlir::MLIRContext *,mlir::detail::OpToOpPassAdaptor&)::$_2::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  size_t v3 = *(unsigned __int8 *)(*a1 + 23);
  if ((*(char *)(*a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(*a1 + 23)) {
      goto LABEL_3;
    }
    return 1;
  }
  if (!*(void *)(v2 + 8)) {
    return 1;
  }
LABEL_3:
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = (const void *)*a1;
  }
  else {
    uint64_t v4 = *(const void **)v2;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v5 = v3;
  }
  else {
    size_t v5 = *(void *)(v2 + 8);
  }
  uint64_t v6 = *(void **)a2;
  char v7 = *(unsigned char *)(*(void *)a2 + 23);
  if ((v7 & 0x80000000) == 0)
  {
    if (*(unsigned char *)(*(void *)a2 + 23)) {
      goto LABEL_11;
    }
    return 0xFFFFFFFFLL;
  }
  if (!v6[1]) {
    return 0xFFFFFFFFLL;
  }
LABEL_11:
  if (v7 >= 0) {
    size_t v8 = *(unsigned __int8 *)(*(void *)a2 + 23);
  }
  else {
    size_t v8 = v6[1];
  }
  if (v8 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v8;
  }
  if (v9)
  {
    uint64_t v10 = v7 >= 0 ? *(const void **)a2 : (const void *)*v6;
    int v11 = memcmp(v4, v10, v9);
    if (v11) {
      return (v11 >> 31) | 1u;
    }
  }
  if (v5 == v8) {
    return 0;
  }
  if (v5 < v8) {
    return 0xFFFFFFFFLL;
  }
  return 1;
}

uint64_t _ZN4llvm9MapVectorIN4mlir6TypeIDENSt3__110unique_ptrINS1_6detail15AnalysisConceptENS3_14default_deleteIS6_EEEENS_8DenseMapIS2_jNS_12DenseMapInfoIS2_vEENS_6detail12DenseMapPairIS2_jEEEENS_11SmallVectorINS3_4pairIS2_S9_EELj0EEEE9remove_ifIZNS5_11AnalysisMap10invalidateERKNS5_17PreservedAnalysesEEUlRT_E_EEvSR_(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (int32x2_t *)result;
  int32x2_t v3 = *(int32x2_t *)(result + 24);
  uint64_t v4 = *(unsigned int *)(result + 32);
  if (!v4)
  {
    char v7 = *(uint64_t **)(result + 24);
    goto LABEL_40;
  }
  uint64_t v6 = *(void *)&v3 + 16 * v4;
  char v7 = *(uint64_t **)(result + 24);
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)&v3 + 8) + 16))(*(void *)(*(void *)&v3 + 8), a2);
    if (!result)
    {
      if ((uint64_t *)v3 == v7) {
        goto LABEL_5;
      }
      *char v7 = **(void **)&v3;
      uint64_t v17 = *(void *)(*(void *)&v3 + 8);
      *(void *)(*(void *)&v3 + 8) = 0;
      uint64_t v18 = v7[1];
      v7[1] = v17;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
      int32x2_t v19 = v2[3];
      __int32 v20 = v2[2].i32[0];
      if (v20)
      {
        __int32 v8 = v20 - 1;
        unsigned int v9 = ((*v7 >> 4) ^ (*v7 >> 9)) & v8;
        uint64_t result = *(void *)v2 + 16 * v9;
        uint64_t v10 = *(void *)result;
        if (*v7 == *(void *)result)
        {
LABEL_4:
          *(_DWORD *)(result + 8) = ((unint64_t)v7 - *(void *)&v19) >> 4;
LABEL_5:
          v7 += 2;
          goto LABEL_6;
        }
        uint64_t v24 = 0;
        int v25 = 1;
        while (v10 != -4096)
        {
          if (v24) {
            BOOL v26 = 0;
          }
          else {
            BOOL v26 = v10 == -8192;
          }
          if (v26) {
            uint64_t v24 = result;
          }
          unsigned int v27 = v9 + v25++;
          unsigned int v9 = v27 & v8;
          uint64_t result = *(void *)v2 + 16 * v9;
          uint64_t v10 = *(void *)result;
          if (*v7 == *(void *)result) {
            goto LABEL_4;
          }
        }
        if (v24) {
          uint64_t v21 = v24;
        }
        else {
          uint64_t v21 = result;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>,mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::InsertIntoBucket<mlir::TypeID const&>((uint64_t)v2, v21, v7);
      goto LABEL_4;
    }
    __int32 v11 = v2[2].i32[0];
    if (v11)
    {
      int32x2_t v12 = *v2;
      __int32 v13 = v11 - 1;
      LODWORD(v14) = ((**(void **)&v3 >> 4) ^ (**(void **)&v3 >> 9)) & (v11 - 1);
      int v15 = (uint64_t *)(*(void *)v2 + 16 * v14);
      uint64_t v16 = *v15;
      if (**(void **)&v3 == *v15)
      {
LABEL_10:
        *int v15 = -8192;
        v2[1] = vadd_s32(v2[1], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        int v22 = 1;
        while (v16 != -4096)
        {
          int v23 = v14 + v22++;
          uint64_t v14 = v23 & v13;
          uint64_t v16 = *(void *)(*(void *)&v12 + 16 * v14);
          if (**(void **)&v3 == v16)
          {
            int v15 = (uint64_t *)(*(void *)&v12 + 16 * v14);
            goto LABEL_10;
          }
        }
      }
    }
LABEL_6:
    *(void *)&v3 += 16;
  }
  while (*(void *)&v3 != v6);
  int32x2_t v3 = v2[3];
  unsigned int v28 = (uint64_t *)(*(void *)&v3 + 16 * v2[4].u32[0]);
  if (v28 != v7)
  {
    do
    {
      uint64_t result = *(v28 - 1);
      *(v28 - 1) = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      v28 -= 2;
    }
    while (v28 != v7);
    int32x2_t v3 = v2[3];
  }
LABEL_40:
  v2[4].i32[0] = ((unint64_t)v7 - *(void *)&v3) >> 4;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>,mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::InsertIntoBucket<mlir::TypeID const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *(void *)a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = *(void *)a1 + 16 * v11;
  uint64_t v12 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a2;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a2 = *(void *)a1 + 16 * (v16 & v10);
      uint64_t v12 = *(void *)a2;
      if (v8 == *(void *)a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)a2 = *a3;
  *(_DWORD *)(a2 + 8) = 0;
  return a2;
}

char **llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = &v2[8 * v3];
    do
    {
      uint64_t v6 = *((void *)v4 - 1);
      v4 -= 8;
      uint64_t v5 = v6;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        unsigned int v7 = *(void **)(v5 + 40);
        if (v7)
        {
          uint64_t v8 = *(void **)(v5 + 48);
          unsigned int v9 = *(void **)(v5 + 40);
          if (v8 != v7)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
              }
            }
            while (v8 != v7);
            unsigned int v9 = *(void **)(v5 + 40);
          }
          *(void *)(v5 + 48) = v7;
          operator delete(v9);
        }
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        operator delete((void *)v5);
      }
    }
    while (v4 != v2);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t *llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::shrink_and_clear(uint64_t *result)
{
  unint64_t v1 = result;
  uint64_t v2 = *((unsigned int *)result + 4);
  int v3 = *((_DWORD *)result + 2);
  uint64_t v4 = (void *)(16 * v2);
  if (v2)
  {
    uint64_t v5 = (uint64_t *)(*result + 8);
    uint64_t v6 = 16 * v2;
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        uint64_t result = std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](v5, 0);
      }
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  if (!v3)
  {
    if (!*((_DWORD *)v1 + 4))
    {
      v1[1] = 0;
      return result;
    }
LABEL_17:
    llvm::deallocate_buffer((llvm *)*v1, v4);
  }
  int v7 = 1 << (33 - __clz(v3 - 1));
  if (v7 <= 64) {
    uint64_t v8 = 64;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 != *((_DWORD *)v1 + 4)) {
    goto LABEL_17;
  }
  v1[1] = 0;
  unsigned int v9 = (llvm *)*v1;
  uint64_t v10 = (v8 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (!v10)
  {
    uint64_t v13 = (llvm *)*v1;
LABEL_20:
    unsigned int v16 = (llvm *)((char *)v9 + 16 * v8);
    do
    {
      *(void *)uint64_t v13 = -4096;
      uint64_t v13 = (llvm *)((char *)v13 + 16);
    }
    while (v13 != v16);
    return result;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v12 = (v10 + 1) & 0x1FFFFFFFFFFFFFFELL;
  uint64_t v13 = (llvm *)((char *)v9 + 16 * v12);
  int v14 = (void *)((char *)v9 + 16);
  uint64_t v15 = v12;
  do
  {
    *(v14 - 2) = -4096;
    *int v14 = -4096;
    v14 += 4;
    v15 -= 2;
  }
  while (v15);
  if (v11 != v12) {
    goto LABEL_20;
  }
  return result;
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<llvm::StringLiteral const&>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (a4)
  {
    unint64_t v11 = 0;
    int AsUnsignedInteger = llvm::getAsUnsignedInteger(a3, a4, 0xAu, &v11);
    unint64_t v7 = v11;
    if (AsUnsignedInteger) {
      unint64_t v7 = -1;
    }
  }
  else
  {
    unint64_t v7 = -1;
  }
  uint64_t v8 = *(const char **)v5;
  if (*(void *)(v5 + 8) >= v7) {
    size_t v9 = v7;
  }
  else {
    size_t v9 = *(void *)(v5 + 8);
  }
  uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v9 > *((void *)a2 + 3) - (void)result) {
    return llvm::raw_ostream::write(a2, v8, v9);
  }
  if (v9)
  {
    uint64_t result = (llvm::raw_ostream *)memcpy(result, v8, v9);
    *((void *)a2 + 4) += v9;
  }
  return result;
}

llvm::raw_ostream *llvm::detail::stream_operator_format_adapter<mlir::OperationName>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  return mlir::OperationName::print((mlir::OperationName *)&v3, a2);
}

void *std::vector<std::unique_ptr<mlir::Pass>>::__push_back_slow_path<std::unique_ptr<mlir::Pass>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    size_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    size_t v9 = 0;
  }
  uint64_t v10 = &v9[8 * v3];
  unint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v12;
  uint64_t v13 = v10 + 8;
  int v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    int32x2_t v19 = &v15[-v18];
    v10 -= v18;
    __int32 v20 = &v9[8 * v3 - 16];
    uint64_t v21 = v15 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v21 - 1);
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)uint64_t v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)__int32 v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    uint64_t v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)uint64_t v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    uint64_t v15 = (char *)*a1;
    BOOL v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)BOOL v26 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

std::string *mlir::detail::OpPassManagerImpl::OpPassManagerImpl(std::string *this, const mlir::detail::OpPassManagerImpl *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = *(_OWORD *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
  uint64_t v6 = *((void *)a2 + 5);
  uint64_t v7 = *((void *)a2 + 6);
  while (v6 != v7)
  {
    uint64_t v8 = *(void *)v6 + 152;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)v6 + 80))(&v13);
    mlir::detail::PassOptions::copyOptionValuesFrom(v13 + 152, v8);
    uint64_t v9 = v13;
    *(void *)(v13 + 336) = *(void *)v6;
    std::string::pointer data = this[2].__r_.__value_.__l.__data_;
    if ((unint64_t)data >= this[2].__r_.__value_.__l.__size_)
    {
      this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)std::vector<std::unique_ptr<mlir::Pass>>::__push_back_slow_path<std::unique_ptr<mlir::Pass>>(&this[1].__r_.__value_.__r.__words[2], &v13);
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      if (!v11) {
        goto LABEL_5;
      }
LABEL_11:
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      goto LABEL_5;
    }
    uint64_t v13 = 0;
    *(void *)std::string::pointer data = v9;
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 8);
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11) {
      goto LABEL_11;
    }
LABEL_5:
    v6 += 8;
  }
  return this;
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(mlir::OpPassManager &,mlir::Operation *)>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass *,mlir::Operation *,mlir::AnalysisManager,BOOL,unsigned int)::$_0>(uint64_t a1, mlir::OpPassManager *a2, Operation *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = **(Operation ***)a1;
  if (v6 != a3 && (mlir::Operation::isProperAncestor(v6, a3) & 1) == 0)
  {
    __int16 v33 = 257;
    mlir::Operation::emitOpError((uint64_t *)a3, &v32, (uint64_t)v37);
    if (v37[0])
    {
      int v34 = 3;
      uint64_t v35 = "Trying to schedule a dynamic pipeline on an operation that isn't nested under the current operation the pass is processing";
      uint64_t v36 = 122;
      uint64_t v13 = &v34;
      int v14 = (char *)v38;
      if (v39 >= v40)
      {
        unint64_t v30 = v39 + 1;
        if (v38 <= &v34 && (char *)v38 + 24 * v39 > (char *)&v34)
        {
          int64_t v31 = (char *)&v34 - (unsigned char *)v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v30, 24);
          int v14 = (char *)v38;
          uint64_t v13 = (int *)((char *)v38 + v31);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v30, 24);
          uint64_t v13 = &v34;
          int v14 = (char *)v38;
        }
      }
      uint64_t v15 = &v14[24 * v39];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = *((void *)v13 + 2);
      *(_OWORD *)uint64_t v15 = v16;
      ++v39;
    }
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (v46)
    {
      uint64_t v17 = (void **)__p;
      if (__p)
      {
        uint64_t v18 = v45;
        int32x2_t v19 = __p;
        if (v45 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          int32x2_t v19 = __p;
        }
        uint64_t v45 = v17;
        operator delete(v19);
      }
      __int32 v20 = v42;
      if (v42)
      {
        uint64_t v21 = v43;
        uint64_t v22 = v42;
        if (v43 != v42)
        {
          do
          {
            long long v24 = (void *)*--v21;
            long long v23 = v24;
            void *v21 = 0;
            if (v24) {
              operator delete[](v23);
            }
          }
          while (v21 != v20);
          uint64_t v22 = v42;
        }
        uint64_t v43 = v20;
        operator delete(v22);
      }
      if (v38 != v41) {
        free(v38);
      }
    }
    return v12;
  }
  uint64_t v7 = *(mlir::detail::OpPassManagerImpl **)a2;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((Operation *)((char *)a3 + 24));
  if (!mlir::detail::OpPassManagerImpl::finalizePassList(v7, Context)) {
    return 0;
  }
  uint64_t v9 = (mlir::MLIRContext *)mlir::Attribute::getContext((Operation *)((char *)a3 + 24));
  if (!mlir::OpPassManager::initialize(a2, v9, **(_DWORD **)(a1 + 8))) {
    return 0;
  }
  uint64_t v10 = *(mlir::AnalysisManager **)(a1 + 16);
  if (**(Operation ***)a1 == a3) {
    uint64_t v11 = *(void *)v10;
  }
  else {
    uint64_t v11 = mlir::AnalysisManager::nest(v10, (mlir::Block **)a3);
  }
  uint64_t v25 = **(unsigned __int8 **)(a1 + 24);
  uint64_t v26 = **(unsigned int **)(a1 + 8);
  uint64_t v27 = **(std::recursive_mutex ****)(a1 + 32);
  uint64_t v28 = *(void *)(a1 + 40);

  return mlir::detail::OpToOpPassAdaptor::runPipeline((uint64_t *)a2, (uint64_t)a3, v11, v25, v26, v27, v28);
}

uint64_t mlir::MLIRContext::executeActionInternal<mlir::PassExecutionAction,mlir::Pass &>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = &unk_1E8EBA000;
  {
    uint64_t v21 = a3;
    uint64_t v22 = a1;
    uint64_t v19 = a6;
    uint64_t v20 = a2;
    uint64_t v17 = a4;
    uint64_t v18 = a5;
    uint64_t v6 = (void *)&unk_1E8EBA000;
    a4 = v17;
    a5 = v18;
    a6 = v19;
    a2 = v20;
    int v9 = v8;
    a3 = v21;
    a1 = v22;
    if (v9)
    {
      long long v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PassExecutionAction]";
      unint64_t v24 = 75;
      unint64_t v10 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v10) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = v24;
      }
      uint64_t v12 = &v23[v11];
      unint64_t v13 = v24 - v11;
      if (v24 - v11 >= 0x12) {
        uint64_t v14 = 18;
      }
      else {
        uint64_t v14 = v24 - v11;
      }
      unint64_t v15 = v13 - v14;
      if (v15 >= v15 - 1) {
        uint64_t v16 = v15 - 1;
      }
      else {
        uint64_t v16 = v15;
      }
      mlir::detail::TypeIDResolver<mlir::PassExecutionAction,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      uint64_t v6 = (void *)&unk_1E8EBA000;
      a4 = v17;
      a5 = v18;
      a6 = v19;
      a2 = v20;
      a3 = v21;
      a1 = v22;
    }
  }
  unint64_t v24 = v6[267];
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  long long v23 = (const char *)&unk_1EC9AAD08;
  return mlir::MLIRContext::executeActionInternal(a1, a2, a3, (uint64_t)&v23);
}

uint64_t llvm::function_ref<void ()(void)>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass *,mlir::Operation *,mlir::AnalysisManager,BOOL,unsigned int)::$_1>(mlir::detail::OpToOpPassAdaptor ***a1)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *((void *)v2 + 1);
  unint64_t v4 = 0x1E8EB8000uLL;
  {
    uint64_t v18 = v3;
    unint64_t v4 = 0x1E8EB8000;
    uint64_t v3 = v18;
    if (v10)
    {
      uint64_t v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      unint64_t v20 = 81;
      unint64_t v11 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v11) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = v20;
      }
      unint64_t v13 = &v19[v12];
      unint64_t v14 = v20 - v12;
      if (v20 - v12 >= 0x12) {
        uint64_t v15 = 18;
      }
      else {
        uint64_t v15 = v20 - v12;
      }
      unint64_t v16 = v14 - v15;
      if (v16 >= v16 - 1) {
        uint64_t v17 = v16 - 1;
      }
      else {
        uint64_t v17 = v16;
      }
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
      unint64_t v4 = 0x1E8EB8000;
      uint64_t v3 = v18;
    }
  }
  if (v3 == *(void *)(v4 + 2968))
  {
    int v6 = *(unsigned __int8 *)a1[1];
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)((*((void *)v2 + 5) & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 24));
    int isMultithreadingEnabled = mlir::MLIRContext::isMultithreadingEnabled(Context);
    BOOL v9 = v6 != 0;
    if (isMultithreadingEnabled) {
      mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(v2, v9);
    }
    uint64_t result = mlir::detail::OpToOpPassAdaptor::runOnOperationImpl(v2, v9);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(mlir::detail::OpToOpPassAdaptor *))(*(void *)**a1 + 56))(**a1);
  }
  *(unsigned char *)a1[2] = (*((unsigned char *)**a1 + 40) & 4) != 0;
  return result;
}

uint64_t *mlir::AnalysisManager::clear(uint64_t *this)
{
  unint64_t v1 = this;
  uint64_t v2 = *this;
  int v3 = *(_DWORD *)(*this + 40);
  if (*(void *)(*this + 40))
  {
    this = (uint64_t *)(v2 + 32);
    uint64_t v4 = *(unsigned int *)(v2 + 48);
    if (v4 > 4 * v3 && v4 >= 0x41)
    {
      this = (uint64_t *)llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)this);
      goto LABEL_5;
    }
    if (v4)
    {
      uint64_t v6 = *this;
      uint64_t v7 = (v4 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v7)
      {
        uint64_t v8 = v7 + 1;
        uint64_t v9 = (v7 + 1) & 0x1FFFFFFFFFFFFFFELL;
        int v10 = (void *)(v6 + 16 * v9);
        unint64_t v11 = (void *)(v6 + 16);
        uint64_t v12 = v9;
        do
        {
          *(v11 - 2) = -4096;
          *unint64_t v11 = -4096;
          v11 += 4;
          v12 -= 2;
        }
        while (v12);
        if (v8 == v9) {
          goto LABEL_16;
        }
      }
      else
      {
        int v10 = (void *)*this;
      }
      unint64_t v13 = (void *)(v6 + 16 * v4);
      do
      {
        *int v10 = -4096;
        v10 += 2;
      }
      while (v10 != v13);
    }
LABEL_16:
    *(void *)(v2 + 40) = 0;
    uint64_t v5 = *(unsigned int *)(v2 + 64);
    if (!v5) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
LABEL_5:
  uint64_t v5 = *(unsigned int *)(v2 + 64);
  if (!v5) {
    goto LABEL_21;
  }
LABEL_17:
  uint64_t v14 = *(void *)(v2 + 56) - 8;
  uint64_t v15 = 16 * v5;
  do
  {
    this = *(uint64_t **)(v14 + v15);
    *(void *)(v14 + v15) = 0;
    if (this) {
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
    v15 -= 16;
  }
  while (v15);
LABEL_21:
  *(_DWORD *)(v2 + 64) = 0;
  unint64_t v16 = (uint64_t *)*v1;
  int v17 = *((_DWORD *)v16 + 2);
  if (!v17 && !*((_DWORD *)v16 + 3)) {
    return this;
  }
  uint64_t v18 = *((unsigned int *)v16 + 4);
  if (v18 <= 4 * v17 || v18 < 0x41)
  {
    if (!v18)
    {
LABEL_35:
      v16[1] = 0;
      return this;
    }
    uint64_t v19 = (uint64_t *)(*v16 + 8);
    uint64_t v20 = 16 * v18;
    while (1)
    {
      uint64_t v21 = *(v19 - 1);
      if (v21 != -8192)
      {
        if (v21 == -4096) {
          goto LABEL_31;
        }
        this = std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](v19, 0);
      }
      *(v19 - 1) = -4096;
LABEL_31:
      v19 += 2;
      v20 -= 16;
      if (!v20) {
        goto LABEL_35;
      }
    }
  }

  return llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::shrink_and_clear(v16);
}

uint64_t llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  int v2 = *(_DWORD *)(result + 8);
  int v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64) {
    int v3 = 64;
  }
  if (v2) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v4 != v1) {
    llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v1));
  }
  *(void *)(result + 8) = 0;
  if (v1)
  {
    uint64_t v5 = *(llvm **)result;
    uint64_t v6 = (v1 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v6)
    {
      uint64_t v7 = v6 + 1;
      uint64_t v8 = (v6 + 1) & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v9 = (llvm *)((char *)v5 + 16 * v8);
      int v10 = (void *)((char *)v5 + 16);
      uint64_t v11 = v8;
      do
      {
        *(v10 - 2) = -4096;
        *int v10 = -4096;
        v10 += 4;
        v11 -= 2;
      }
      while (v11);
      if (v7 == v8) {
        return result;
      }
    }
    else
    {
      uint64_t v9 = *(llvm **)result;
    }
    uint64_t v12 = (llvm *)((char *)v5 + 16 * v1);
    do
    {
      *(void *)uint64_t v9 = -4096;
      uint64_t v9 = (llvm *)((char *)v9 + 16);
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::growAndEmplaceBack<mlir::OpPassManager>(uint64_t a1, uint64_t *a2)
{
  unint64_t v17 = 0;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (uint64_t *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v17);
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  v5[v6] = 0;
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v8 = v5[v6];
  v5[v6] = v7;
  if (v8)
  {
    uint64_t v9 = *(void **)(v8 + 40);
    if (v9)
    {
      int v10 = *(void **)(v8 + 48);
      uint64_t v11 = *(void **)(v8 + 40);
      if (v10 != v9)
      {
        do
        {
          uint64_t v13 = *--v10;
          uint64_t v12 = v13;
          *int v10 = 0;
          if (v13) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
        }
        while (v10 != v9);
        uint64_t v11 = *(void **)(v8 + 40);
      }
      *(void *)(v8 + 48) = v9;
      operator delete(v11);
    }
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    operator delete((void *)v8);
  }
  llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::moveElementsForGrow(a1, v5);
  int v14 = v17;
  if (*(void *)a1 != v4) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  unsigned int v15 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 12) = v14;
  return (uint64_t)&v5[v15 - 1];
}

void llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::moveElementsForGrow(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v5 = *(uint64_t **)a1;
    uint64_t v6 = *(void *)a1 + 8 * v2;
    do
    {
      *a2 = 0;
      uint64_t v7 = *v5;
      *uint64_t v5 = 0;
      uint64_t v8 = *a2;
      *a2 = v7;
      if (v8)
      {
        uint64_t v9 = *(void **)(v8 + 40);
        if (v9)
        {
          int v10 = *(void **)(v8 + 48);
          uint64_t v11 = *(void **)(v8 + 40);
          if (v10 != v9)
          {
            do
            {
              uint64_t v13 = *--v10;
              uint64_t v12 = v13;
              *int v10 = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
              }
            }
            while (v10 != v9);
            uint64_t v11 = *(void **)(v8 + 40);
          }
          *(void *)(v8 + 48) = v9;
          operator delete(v11);
        }
        if (*(char *)(v8 + 23) < 0) {
          operator delete(*(void **)v8);
        }
        operator delete((void *)v8);
      }
      ++a2;
      ++v5;
    }
    while (v5 != (uint64_t *)v6);
    uint64_t v14 = *(unsigned int *)(a1 + 8);
    if (v14)
    {
      unsigned int v15 = *(uint64_t **)a1;
      unint64_t v16 = (uint64_t *)(*(void *)a1 + 8 * v14);
      do
      {
        uint64_t v18 = *--v16;
        uint64_t v17 = v18;
        *unint64_t v16 = 0;
        if (v18)
        {
          uint64_t v19 = *(void **)(v17 + 40);
          if (v19)
          {
            uint64_t v20 = *(void **)(v17 + 48);
            uint64_t v21 = *(void **)(v17 + 40);
            if (v20 != v19)
            {
              do
              {
                uint64_t v23 = *--v20;
                uint64_t v22 = v23;
                *uint64_t v20 = 0;
                if (v23) {
                  (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
                }
              }
              while (v20 != v19);
              uint64_t v21 = *(void **)(v17 + 40);
            }
            *(void *)(v17 + 48) = v19;
            operator delete(v21);
          }
          if (*(char *)(v17 + 23) < 0) {
            operator delete(*(void **)v17);
          }
          operator delete((void *)v17);
        }
      }
      while (v16 != v15);
    }
  }
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpPassManager,1u>,false>::growAndAssign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v16 = 0;
  uint64_t v6 = (char *)(a1 + 16);
  uint64_t v7 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v16);
  uint64_t v8 = v7;
  if (a2)
  {
    uint64_t v9 = v7;
    unint64_t v10 = a2;
    do
    {
      *uint64_t v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (*(_DWORD *)(a3 + 8)) {
        llvm::SmallVectorImpl<mlir::OpPassManager>::operator=((uint64_t)v9, a3);
      }
      v9 += 3;
      --v10;
    }
    while (v10);
  }
  uint64_t v11 = *(char **)a1;
  uint64_t v12 = *(unsigned int *)(a1 + 8);
  if (v12)
  {
    uint64_t v13 = 24 * v12;
    uint64_t v14 = v11 - 24;
    do
    {
      llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)&v14[v13]);
      v13 -= 24;
    }
    while (v13);
    uint64_t v11 = *(char **)a1;
  }
  int v15 = v16;
  if (v11 != v6) {
    free(v11);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v15;
}

uint64_t llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        uint64_t v9 = 0;
        unint64_t v10 = *(const mlir::detail::OpPassManagerImpl ***)a2;
        uint64_t v11 = *(std::string ***)a1;
        do
        {
          mlir::OpPassManager::operator=(&v11[v9], &v10[v9]);
          ++v9;
        }
        while (v4 != v9);
        uint64_t v12 = &v11[v9];
        uint64_t v13 = *(std::string ***)a1;
        uint64_t v5 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        uint64_t v13 = *(std::string ***)a1;
        uint64_t v12 = *(std::string ***)a1;
      }
      unint64_t v16 = &v13[v5];
      while (v16 != v12)
      {
        uint64_t v18 = (uint64_t)*--v16;
        uint64_t v17 = v18;
        *unint64_t v16 = 0;
        if (v18)
        {
          uint64_t v19 = *(void **)(v17 + 40);
          if (v19)
          {
            uint64_t v20 = *(void **)(v17 + 48);
            uint64_t v21 = *(void **)(v17 + 40);
            if (v20 != v19)
            {
              do
              {
                uint64_t v23 = *--v20;
                uint64_t v22 = v23;
                *uint64_t v20 = 0;
                if (v23) {
                  (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
                }
              }
              while (v20 != v19);
              uint64_t v21 = *(void **)(v17 + 40);
            }
            *(void *)(v17 + 48) = v19;
            operator delete(v21);
          }
          if (*(char *)(v17 + 23) < 0) {
            operator delete(*(void **)v17);
          }
          operator delete((void *)v17);
        }
      }
      goto LABEL_35;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      uint64_t v6 = *(std::string ***)a1;
      if (v5)
      {
        uint64_t v14 = *(const mlir::detail::OpPassManagerImpl ***)a2;
        uint64_t v15 = 8 * v5;
        do
        {
          mlir::OpPassManager::operator=(v6++, v14++);
          v15 -= 8;
        }
        while (v15);
        uint64_t v6 = *(std::string ***)a1;
        uint64_t v8 = *(unsigned int *)(a2 + 8);
        if (v5 == v8) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v5 = 0;
        uint64_t v8 = *(unsigned int *)(a2 + 8);
        if (!*(_DWORD *)(a2 + 8))
        {
LABEL_35:
          *(_DWORD *)(a1 + 8) = v4;
          return a1;
        }
      }
    }
    else
    {
      llvm::SmallVectorImpl<mlir::OpPassManager>::clear(a1);
      unint64_t v29 = 0;
      uint64_t v6 = (std::string **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v4, 8, &v29);
      llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::moveElementsForGrow(a1, (uint64_t *)v6);
      int v7 = v29;
      if (*(void *)a1 != a1 + 16) {
        free(*(void **)a1);
      }
      uint64_t v5 = 0;
      *(void *)a1 = v6;
      *(_DWORD *)(a1 + 12) = v7;
      uint64_t v8 = *(unsigned int *)(a2 + 8);
      if (!*(_DWORD *)(a2 + 8)) {
        goto LABEL_35;
      }
    }
    unint64_t v24 = &v6[v5];
    uint64_t v25 = (const mlir::detail::OpPassManagerImpl **)(*(void *)a2 + 8 * v5);
    uint64_t v26 = 8 * v8 - 8 * v5;
    uint64_t v27 = v24;
    do
    {
      *v27++ = 0;
      mlir::OpPassManager::operator=(v24, v25++);
      unint64_t v24 = v27;
      v26 -= 8;
    }
    while (v26);
    goto LABEL_35;
  }
  return a1;
}

{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  if (a1 != a2)
  {
    unint64_t v4 = *(char **)a2;
    if (*(void *)a2 != a2 + 16)
    {
      llvm::SmallVectorImpl<mlir::OpPassManager>::assignRemote((char **)a1, (char **)a2);
      return a1;
    }
    uint64_t v5 = *(unsigned int *)(a2 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      unint64_t v10 = *(char **)a1;
      if (v5)
      {
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,mlir::OpPassManager *,mlir::OpPassManager *,mlir::OpPassManager *,0>((uint64_t *)v4, (uint64_t *)&v4[8 * v5], (uint64_t *)v10);
        uint64_t v12 = v11;
        unint64_t v10 = *(char **)a1;
        uint64_t v6 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        uint64_t v12 = *(char **)a1;
      }
      uint64_t v13 = &v10[8 * v6];
      while (v13 != v12)
      {
        uint64_t v15 = *((void *)v13 - 1);
        v13 -= 8;
        uint64_t v14 = v15;
        *(void *)uint64_t v13 = 0;
        if (v15)
        {
          unint64_t v16 = *(void **)(v14 + 40);
          if (v16)
          {
            uint64_t v17 = *(void **)(v14 + 48);
            uint64_t v18 = *(void **)(v14 + 40);
            if (v17 != v16)
            {
              do
              {
                uint64_t v20 = *--v17;
                uint64_t v19 = v20;
                std::recursive_mutex *v17 = 0;
                if (v20) {
                  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
                }
              }
              while (v17 != v16);
              uint64_t v18 = *(void **)(v14 + 40);
            }
            *(void *)(v14 + 48) = v16;
            operator delete(v18);
          }
          if (*(char *)(v14 + 23) < 0) {
            operator delete(*(void **)v14);
          }
          operator delete((void *)v14);
        }
      }
      goto LABEL_31;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      llvm::SmallVectorImpl<mlir::OpPassManager>::clear(a1);
      __int16 v33 = 0;
      int v7 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v33);
      llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::moveElementsForGrow(a1, (uint64_t *)v7);
      uint64_t v8 = v33;
      if (*(void *)a1 != a1 + 16) {
        free(*(void **)a1);
      }
      uint64_t v6 = 0;
      *(void *)a1 = v7;
      *(_DWORD *)(a1 + 12) = v8;
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      if (!*(_DWORD *)(a2 + 8)) {
        goto LABEL_31;
      }
      goto LABEL_33;
    }
    int v7 = *(char **)a1;
    if (v6)
    {
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,mlir::OpPassManager *,mlir::OpPassManager *,mlir::OpPassManager *,0>((uint64_t *)v4, (uint64_t *)&v4[8 * v6], *(uint64_t **)a1);
      int v7 = *(char **)a1;
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      if (v6 != v9)
      {
LABEL_33:
        uint64_t v22 = *(void *)a2 + 8 * v9;
        uint64_t v23 = 8 * v6;
        unint64_t v24 = &v7[8 * v6];
        uint64_t v25 = (uint64_t *)(*(void *)a2 + v23);
        do
        {
          *(void *)unint64_t v24 = 0;
          uint64_t v26 = *v25;
          char *v25 = 0;
          uint64_t v27 = *(void *)v24;
          *(void *)unint64_t v24 = v26;
          if (v27)
          {
            uint64_t v28 = *(void **)(v27 + 40);
            if (v28)
            {
              unint64_t v29 = *(void **)(v27 + 48);
              unint64_t v30 = *(void **)(v27 + 40);
              if (v29 != v28)
              {
                do
                {
                  unint64_t v32 = *--v29;
                  int64_t v31 = v32;
                  *unint64_t v29 = 0;
                  if (v32) {
                    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
                  }
                }
                while (v29 != v28);
                unint64_t v30 = *(void **)(v27 + 40);
              }
              *(void *)(v27 + 48) = v28;
              operator delete(v30);
            }
            if (*(char *)(v27 + 23) < 0) {
              operator delete(*(void **)v27);
            }
            operator delete((void *)v27);
          }
          v24 += 8;
          ++v25;
        }
        while (v25 != (uint64_t *)v22);
      }
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      if (*(_DWORD *)(a2 + 8)) {
        goto LABEL_33;
      }
    }
LABEL_31:
    *(_DWORD *)(a1 + 8) = v5;
    llvm::SmallVectorImpl<mlir::OpPassManager>::clear(a2);
  }
  return a1;
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EC9CF298;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9CF298;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::operator()(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load(*(unsigned __int8 **)(a1 + 8));
  if ((v1 & 1) == 0)
  {
    do
    {
      uint64_t add = atomic_fetch_add(*(atomic_uint *volatile *)(a1 + 16), 1u);
      if (add >= **(_DWORD **)(a1 + 24)) {
        break;
      }
      mlir::ParallelDiagnosticHandler::setOrderIDForThread(*(mlir::ParallelDiagnosticHandler **)(a1 + 32), add);
      uint64_t v5 = *(atomic_uchar ****)(a1 + 40);
      uint64_t v6 = **(void **)(a1 + 48);
      int v7 = v5[1];
      uint64_t v8 = **v5;
      uint64_t v9 = (*v5)[1];
      if (v8 == v9)
      {
        uint64_t v11 = **v5;
      }
      else
      {
        while (1)
        {
          char v10 = 0;
          atomic_compare_exchange_strong(v8, (unsigned __int8 *)&v10, 1u);
          if (!v10) {
            break;
          }
          if (++v8 == v9)
          {
            LODWORD(v8) = v9;
            break;
          }
        }
        LODWORD(v11) = v8;
        uint64_t v8 = **v5;
      }
      uint64_t v12 = (v11 - v8);
      uint64_t v13 = (uint64_t *)(*(void *)&v7[46][24 * v12]
                      + 8 * *(unsigned int *)(v6 + 24 * add));
      char v14 = mlir::detail::OpToOpPassAdaptor::runPipeline(v13, *(void *)(v6 + 24 * add + 8), *(void *)(v6 + 24 * add + 16), *(unsigned __int8 *)v5[2], *(unsigned int *)(*v13 + 64), (std::recursive_mutex **)*v5[3], (uint64_t)v5[4]);
      atomic_store(0, (unsigned __int8 *)&(**v5)[v12]);
      if (!v14) {
        atomic_store(1u, *(unsigned __int8 **)(a1 + 8));
      }
      mlir::ParallelDiagnosticHandler::eraseOrderIDForThread(*(mlir::ParallelDiagnosticHandler **)(a1 + 32));
      unsigned __int8 v3 = atomic_load(*(unsigned __int8 **)(a1 + 8));
    }
    while ((v3 & 1) == 0);
  }
}

uint64_t std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir23failableParallelForEachINSt3__111__wrap_iterIPZNS_6detail17OpToOpPassAdaptor23runOnOperati"
                     "onAsyncImplEbE8OpPMInfoEERZNS4_23runOnOperationAsyncImplEbE3$_0EENS_13LogicalResultEPNS_11MLIRConte"
                     "xtET_SD_OT0_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir23failableParallelForEachINSt3__111__wrap_iterIPZNS_6detail17OpToOpPassAdaptor23r"
                                "unOnOperationAsyncImplEbE8OpPMInfoEERZNS4_23runOnOperationAsyncImplEbE3$_0EENS_13Logical"
                                "ResultEPNS_11MLIRContextET_SD_OT0_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir23failableParallelForEachINSt3__111__wrap_iterIPZNS_6detail17OpToOpPassAdaptor23runOnOperationAsyncImplEbE8OpPMInfoEERZNS4_23runOnOperationAsyncImplEbE3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SD_OT0_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir23failableParallelForEachINSt3__111__wrap_iterIPZNS_6detail17OpToOpPassAdaptor23runOnOperationAsyncImplEbE8OpPMInfoEERZNS4_23runOnOperationAsyncImplEbE3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SD_OT0_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::target_type()
{
}

uint64_t **std::unique_ptr<mlir::PassInstrumentor>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t *v2 = 0;
    if (v3)
    {
      unint64_t v4 = *(void **)(v3 + 72);
      if (v4)
      {
        uint64_t v5 = *(void **)(v3 + 80);
        uint64_t v6 = *(void **)(v3 + 72);
        if (v5 != v4)
        {
          do
          {
            uint64_t v8 = *--v5;
            uint64_t v7 = v8;
            *uint64_t v5 = 0;
            if (v8) {
              (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
            }
          }
          while (v5 != v4);
          uint64_t v6 = *(void **)(v3 + 72);
        }
        *(void *)(v3 + 80) = v4;
        operator delete(v6);
      }
      std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)v3);
      operator delete(v9);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    uint64_t v3 = *(char **)(v2 + 56);
    uint64_t v4 = *(unsigned int *)(v2 + 64);
    if (v4)
    {
      uint64_t v5 = v3 - 8;
      uint64_t v6 = 16 * v4;
      do
      {
        uint64_t v7 = *(void *)&v5[v6];
        *(void *)&v5[v6] = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        v6 -= 16;
      }
      while (v6);
      uint64_t v3 = *(char **)(v2 + 56);
    }
    if (v3 != (char *)(v2 + 72)) {
      free(v3);
    }
    llvm::deallocate_buffer(*(llvm **)(v2 + 32), (void *)(16 * *(unsigned int *)(v2 + 48)));
  }
  return result;
}

void sub_1805F4BB4()
{
  operator delete(v0);
}

void *llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  char v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      char v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *uint64_t v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        uint64_t v15 = &result[2 * v11];
        do
        {
          *char v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      unint64_t v16 = v4;
      do
      {
        uint64_t v24 = *(void *)v16;
        if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v25 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v26 = v25 & ((v24 >> 4) ^ (v24 >> 9));
          uint64_t v22 = (void *)(*(void *)a1 + 16 * v26);
          uint64_t v27 = *v22;
          if (v24 != *v22)
          {
            uint64_t v28 = 0;
            int v29 = 1;
            while (v27 != -4096)
            {
              if (v28) {
                BOOL v30 = 0;
              }
              else {
                BOOL v30 = v27 == -8192;
              }
              if (v30) {
                uint64_t v28 = v22;
              }
              unsigned int v31 = v26 + v29++;
              unsigned int v26 = v31 & v25;
              uint64_t v22 = (void *)(*(void *)a1 + 16 * (v31 & v25));
              uint64_t v27 = *v22;
              if (v24 == *v22) {
                goto LABEL_24;
              }
            }
            if (v28) {
              uint64_t v22 = v28;
            }
          }
LABEL_24:
          *uint64_t v22 = v24;
          uint64_t v23 = *((void *)v16 + 1);
          *((void *)v16 + 1) = 0;
          v22[1] = v23;
          ++*(_DWORD *)(a1 + 8);
          std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100]((uint64_t *)v16 + 1, 0);
        }
        unint64_t v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    char v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v19 = result + 2;
    uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -4096;
      *uint64_t v19 = -4096;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      uint64_t v21 = &result[2 * v17];
      do
      {
        *char v10 = -4096;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

void *std::vector<std::unique_ptr<mlir::PassInstrumentation>>::__emplace_back_slow_path<std::unique_ptr<mlir::PassInstrumentation>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  char v10 = &v9[8 * v3];
  uint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)char v10 = v12;
  uint64_t v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v19 = &v15[-v18];
    v10 -= v18;
    uint64_t v20 = &v9[8 * v3 - 16];
    uint64_t v21 = v15 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v21 - 1);
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)uint64_t v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)uint64_t v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    uint64_t v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)uint64_t v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    uint64_t v15 = (char *)*a1;
    unsigned int v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)unsigned int v26 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

uint64_t llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpPassManager,1u>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 < v4)
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        if (v5)
        {
          uint64_t v6 = 24 * v5;
          uint64_t v7 = *(void *)a1 - 24;
          do
          {
            llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)(v7 + v6));
            v6 -= 24;
          }
          while (v6);
        }
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpPassManager,1u>,false>::grow(a1, v4);
        uint64_t v5 = 0;
        uint64_t v8 = *(unsigned int *)(a2 + 8);
        if (!*(_DWORD *)(a2 + 8)) {
          goto LABEL_18;
        }
        goto LABEL_24;
      }
      if (v5)
      {
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *(void *)a1;
        uint64_t v15 = 24 * v5;
        do
        {
          llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(v14, v13);
          v13 += 24;
          v14 += 24;
          v15 -= 24;
        }
        while (v15);
        uint64_t v8 = *(unsigned int *)(a2 + 8);
        if (v5 == v8) {
          goto LABEL_18;
        }
LABEL_24:
        uint64_t v17 = *(void *)a2;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = 24 * v5;
        uint64_t v20 = 24 * v8;
        do
        {
          uint64_t v21 = (void *)(v18 + v19);
          void *v21 = v18 + v19 + 16;
          v21[1] = 0x100000000;
          if (*(_DWORD *)(v17 + v19 + 8)) {
            llvm::SmallVectorImpl<mlir::OpPassManager>::operator=((uint64_t)v21, v17 + v19);
          }
          v18 += 24;
          v20 -= 24;
          v17 += 24;
        }
        while (v19 != v20);
        goto LABEL_18;
      }
      uint64_t v5 = 0;
      uint64_t v8 = *(unsigned int *)(a2 + 8);
      if (*(_DWORD *)(a2 + 8)) {
        goto LABEL_24;
      }
LABEL_18:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    if (v4)
    {
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = 24 * v4;
      do
      {
        llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(v10, v9);
        v9 += 24;
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
      uint64_t v12 = (char **)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 8));
      if (v12 == (char **)v10) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v10 = *(void *)a1;
      uint64_t v12 = (char **)(*(void *)a1 + 24 * v5);
      if (v12 == *(char ***)a1) {
        goto LABEL_18;
      }
    }
    do
      uint64_t v12 = llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector(v12 - 3);
    while (v12 != (char **)v10);
    goto LABEL_18;
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpPassManager,1u>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v14 = 0;
  uint64_t v3 = (_DWORD *)(a1 + 16);
  unint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v14);
  uint64_t v5 = v4;
  uint64_t v6 = *(_DWORD **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 24 * v7;
    uint64_t v9 = v4;
    do
    {
      *uint64_t v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (v6[2]) {
        llvm::SmallVectorImpl<mlir::OpPassManager>::operator=((uint64_t)v9, (uint64_t)v6);
      }
      v9 += 3;
      v6 += 6;
      v8 -= 24;
    }
    while (v8);
    uint64_t v6 = *(_DWORD **)a1;
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      uint64_t v11 = 6 * v10;
      uint64_t v12 = v6 - 6;
      do
      {
        llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)&v12[v11]);
        v11 -= 6;
      }
      while (v11 * 4);
      uint64_t v6 = *(_DWORD **)a1;
    }
  }
  int v13 = v14;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

double llvm::SmallVectorImpl<mlir::OpPassManager>::assignRemote(char **a1, char **a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = &v4[8 * v5];
    do
    {
      uint64_t v8 = *((void *)v6 - 1);
      v6 -= 8;
      uint64_t v7 = v8;
      *(void *)uint64_t v6 = 0;
      if (v8)
      {
        uint64_t v9 = *(void **)(v7 + 40);
        if (v9)
        {
          uint64_t v10 = *(void **)(v7 + 48);
          uint64_t v11 = *(void **)(v7 + 40);
          if (v10 != v9)
          {
            do
            {
              uint64_t v13 = *--v10;
              uint64_t v12 = v13;
              *uint64_t v10 = 0;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
              }
            }
            while (v10 != v9);
            uint64_t v11 = *(void **)(v7 + 40);
          }
          *(void *)(v7 + 48) = v9;
          operator delete(v11);
        }
        if (*(char *)(v7 + 23) < 0) {
          operator delete(*(void **)v7);
        }
        operator delete((void *)v7);
      }
    }
    while (v6 != v4);
    unint64_t v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,mlir::OpPassManager *,mlir::OpPassManager *,mlir::OpPassManager *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v6 = *v4;
      uint64_t *v4 = 0;
      uint64_t v7 = *a3;
      *a3 = v6;
      if (v7)
      {
        uint64_t v8 = *(void **)(v7 + 40);
        if (v8)
        {
          uint64_t v9 = *(void **)(v7 + 48);
          uint64_t v10 = *(void **)(v7 + 40);
          if (v9 != v8)
          {
            do
            {
              uint64_t v12 = *--v9;
              uint64_t v11 = v12;
              *uint64_t v9 = 0;
              if (v12) {
                (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
              }
            }
            while (v9 != v8);
            uint64_t v10 = *(void **)(v7 + 40);
          }
          *(void *)(v7 + 48) = v8;
          operator delete(v10);
        }
        if (*(char *)(v7 + 23) < 0) {
          operator delete(*(void **)v7);
        }
        operator delete((void *)v7);
      }
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void mlir::detail::RecoveryReproducerContext::enable(mlir::detail::RecoveryReproducerContext *this)
{
  if (!atomic_load_explicit(&mlir::detail::RecoveryReproducerContext::reproducerMutex, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&mlir::detail::RecoveryReproducerContext::reproducerMutex, (void *(*)(void))llvm::object_creator<llvm::sys::SmartMutex<true>>::call, (void (*)(void *))llvm::object_deleter<llvm::sys::SmartMutex<true>>::call);
  }
  uint64_t v2 = (std::recursive_mutex *)mlir::detail::RecoveryReproducerContext::reproducerMutex;
  std::recursive_mutex::lock((std::recursive_mutex *)mlir::detail::RecoveryReproducerContext::reproducerMutex);
  if (atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerSet, memory_order_acquire))
  {
    if (*(_DWORD *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32)) {
      goto LABEL_5;
    }
LABEL_8:
    llvm::CrashRecoveryContext::Enable(v3);
    goto LABEL_12;
  }
  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
  if (!*(_DWORD *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32)) {
    goto LABEL_8;
  }
LABEL_5:
LABEL_12:
  {
    llvm::sys::AddSignalHandler((llvm::sys *)mlir::detail::RecoveryReproducerContext::crashHandler, 0, v4);
  }
LABEL_9:
  if (!atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerSet, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
  }
  uint64_t v5 = this;
  llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::insert((int64x2_t *)mlir::detail::RecoveryReproducerContext::reproducerSet[0], (uint64_t *)&v5);
  std::recursive_mutex::unlock(v2);
}

void mlir::detail::RecoveryReproducerContext::disable(mlir::detail::RecoveryReproducerContext *this)
{
  if (!atomic_load_explicit(&mlir::detail::RecoveryReproducerContext::reproducerMutex, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&mlir::detail::RecoveryReproducerContext::reproducerMutex, (void *(*)(void))llvm::object_creator<llvm::sys::SmartMutex<true>>::call, (void (*)(void *))llvm::object_deleter<llvm::sys::SmartMutex<true>>::call);
  }
  uint64_t v2 = (std::recursive_mutex *)mlir::detail::RecoveryReproducerContext::reproducerMutex;
  std::recursive_mutex::lock((std::recursive_mutex *)mlir::detail::RecoveryReproducerContext::reproducerMutex);
  if (atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerSet, memory_order_acquire))
  {
    unint64_t v4 = this;
    uint64_t v3 = (llvm::CrashRecoveryContext *)llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::remove((uint64_t *)mlir::detail::RecoveryReproducerContext::reproducerSet[0], &v4);
    if (atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerSet, memory_order_acquire)) {
      goto LABEL_5;
    }
LABEL_8:
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
    if (*(_DWORD *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32)) {
      goto LABEL_6;
    }
LABEL_9:
    llvm::CrashRecoveryContext::Disable(v3);
    goto LABEL_6;
  }
  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
  unint64_t v4 = this;
  uint64_t v3 = (llvm::CrashRecoveryContext *)llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::remove((uint64_t *)mlir::detail::RecoveryReproducerContext::reproducerSet[0], &v4);
  if (!atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerSet, memory_order_acquire)) {
    goto LABEL_8;
  }
LABEL_5:
  if (!*(_DWORD *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32)) {
    goto LABEL_9;
  }
LABEL_6:
  std::recursive_mutex::unlock(v2);
}

void mlir::detail::RecoveryReproducerContext::generate(mlir::detail::AsmStateImpl *a1, uint64_t a2)
{
  int v36 = 0;
  char v40 = 0;
  uint64_t v41 = 0;
  int v42 = 1;
  uint64_t v38 = 0;
  unsigned int v39 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = &unk_1EC9A38B8;
  uint64_t v43 = a2;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v35, 0, 0, 0);
  unint64_t v32 = 0;
  size_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v3 = *(void *)(*((void *)a1 + 4) + 24);
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 48))(&v31);
    uint64_t v4 = v31;
    unint64_t v5 = v38 - (void)v39;
    if (v31)
    {
      if (v5 > 0x18)
      {
        v39 += 25;
        uint64_t v6 = (llvm::raw_ostream *)&v35;
      }
      else
      {
        uint64_t v4 = v31;
      }
      uint64_t v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      size_t v10 = v8;
      uint64_t v11 = (void *)*((void *)v6 + 4);
      if (v8 <= *((void *)v6 + 3) - (void)v11)
      {
        if (v8)
        {
          memcpy(v11, v9, v8);
          *((void *)v6 + 4) += v10;
        }
      }
      else
      {
        uint64_t v6 = llvm::raw_ostream::write(v6, (const char *)v9, v8);
      }
      uint64_t v12 = (unsigned char *)*((void *)v6 + 4);
      if (*((unsigned char **)v6 + 3) == v12)
      {
      }
      else
      {
        *uint64_t v12 = 96;
        ++*((void *)v6 + 4);
      }
      v28[0] = *(void *)(*(void *)(*((void *)a1 + 3) + 48) + 8);
      __int16 v25 = 773;
      v24[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v28);
      v24[1] = v13;
      v24[2] = "(";
      v26[0] = (mlir::detail::AsmStateImpl *)v24;
      v26[2] = a1;
      __int16 v27 = 1026;
      v28[0] = (uint64_t)v26;
      v28[2] = (uint64_t)")";
      __int16 v29 = 770;
      llvm::Twine::str((llvm::Twine *)v28, &__p);
      uint64_t v14 = *((void *)a1 + 3);
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v28);
      mlir::AsmState::AsmState(v26, v14, v28, 0, 0);
      uint64_t v15 = operator new(0x30uLL);
      v15[31] = 15;
      strcpy(v15 + 8, "mlir_reproducer");
      *(void *)uint64_t v15 = &unk_1EC9D0DB8;
      *((void *)v15 + 4) = &__p;
      *((void *)v15 + 5) = a1;
      v28[0] = (uint64_t)v15;
      mlir::AsmState::attachResourcePrinter((uint64_t *)v26, v28);
      uint64_t v16 = v28[0];
      v28[0] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      uint64_t v17 = (const char **)*((void *)a1 + 3);
      uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 24))(v31);
      mlir::Operation::print(v17, v18, (mlir::AsmState *)v26);
      mlir::AsmState::~AsmState(v26);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (v5 > 0x1F)
      {
        qmemcpy(v39, "failed to create output stream: ", 32);
        v39 += 32;
        uint64_t v7 = (llvm::raw_ostream *)&v35;
      }
      else
      {
        uint64_t v7 = llvm::raw_ostream::write((llvm::raw_ostream *)&v35, "failed to create output stream: ", 0x20uLL);
      }
      if (v34 >= 0) {
        uint64_t v19 = (const char *)&v32;
      }
      else {
        uint64_t v19 = v32;
      }
      if (v34 >= 0) {
        size_t v20 = HIBYTE(v34);
      }
      else {
        size_t v20 = v33;
      }
      llvm::raw_ostream::write(v7, v19, v20);
    }
    uint64_t v21 = v31;
    uint64_t v31 = 0;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(v32);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v35);
  }
  else
  {
    uint64_t v22 = (uint64_t *)std::__throw_bad_function_call[abi:nn180100]();
    llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::remove(v22, v23);
  }
}

uint64_t llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::remove(uint64_t *a1, void *a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    int v3 = *((_DWORD *)a1 + 4);
    if (v3)
    {
      uint64_t v4 = *a1;
      unsigned int v5 = v3 - 1;
      LODWORD(v6) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
      uint64_t v7 = (uint64_t *)(*a1 + 8 * v6);
      uint64_t v8 = *v7;
      if (*a2 == *v7)
      {
LABEL_4:
        *uint64_t v7 = -8192;
        int v9 = v2 - 1;
        unsigned int v12 = *((_DWORD *)a1 + 8);
        uint64_t v11 = a1 + 4;
        uint64_t v10 = v12;
        int v13 = *((_DWORD *)a1 + 3) + 1;
        *((_DWORD *)a1 + 2) = v9;
        *((_DWORD *)a1 + 3) = v13;
        uint64_t v14 = (void *)a1[3];
        uint64_t v15 = &v14[v12];
        if (v12)
        {
          uint64_t v16 = 8 * v10;
          while (*v14 != *a2)
          {
            ++v14;
            v16 -= 8;
            if (!v16)
            {
              uint64_t v14 = v15;
              break;
            }
          }
        }
        uint64_t v17 = v14 + 1;
        size_t v18 = (char *)v15 - (char *)(v14 + 1);
        if (v15 == v14 + 1)
        {
          *uint64_t v11 = v10 - 1;
          return 1;
        }
        goto LABEL_21;
      }
      int v25 = 1;
      while (v8 != -4096)
      {
        int v26 = v6 + v25++;
        uint64_t v6 = v26 & v5;
        uint64_t v8 = *(void *)(v4 + 8 * v6);
        if (*a2 == v8)
        {
          uint64_t v7 = (uint64_t *)(v4 + 8 * v6);
          goto LABEL_4;
        }
      }
    }
    return 0;
  }
  unsigned int v21 = *((_DWORD *)a1 + 8);
  uint64_t v11 = a1 + 4;
  uint64_t v20 = v21;
  uint64_t v22 = a1[3];
  long long v23 = (void *)(v22 + 8 * v21);
  if (v21)
  {
    uint64_t v24 = 8 * v20;
    uint64_t v14 = (void *)a1[3];
    while (*v14 != *a2)
    {
      ++v14;
      v24 -= 8;
      if (!v24)
      {
        uint64_t v14 = v23;
        break;
      }
    }
    if (v20 == ((uint64_t)v14 - v22) >> 3) {
      return 0;
    }
  }
  else
  {
    uint64_t v14 = (void *)a1[3];
    if (!v20) {
      return 0;
    }
  }
  uint64_t v17 = v14 + 1;
  size_t v18 = (char *)v23 - (char *)(v14 + 1);
  if (v23 != v14 + 1)
  {
LABEL_21:
    memmove(v14, v17, v18);
    LODWORD(v20) = *v11;
  }
  *uint64_t v11 = v20 - 1;
  return 1;
}

uint64_t llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::insert(int64x2_t *a1, uint64_t *a2)
{
  if (!a1->i32[2])
  {
    uint64_t v7 = (uint64_t **)&a1[1].i64[1];
    uint64_t v8 = (void *)a1[1].i64[1];
    uint64_t v9 = a1[2].u32[0];
    uint64_t v10 = v8;
    if (v9)
    {
      uint64_t v11 = 8 * v9;
      uint64_t v10 = (void *)a1[1].i64[1];
      while (*v10 != *a2)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
        {
          uint64_t v10 = &v8[v9];
          break;
        }
      }
    }
    if (v9 != v10 - v8) {
      return 0;
    }
    if (v9 >= a1[2].i32[1])
    {
      uint64_t v15 = (uint64_t **)&a1[1].i64[1];
      uint64_t v16 = *a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a1[1].i64[1], &a1[2].u64[1], v9 + 1, 8);
      uint64_t v7 = v15;
      *(void *)(a1[1].i64[1] + 8 * a1[2].u32[0]) = v16;
      unsigned int v12 = a1[2].i32[0] + 1;
      a1[2].i32[0] = v12;
      if (v12 >= 2)
      {
LABEL_15:
        int v13 = *v7;
        uint64_t v14 = 8 * v12;
        do
        {
          llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1, v13++, (uint64_t)v17);
          v14 -= 8;
        }
        while (v14);
      }
    }
    else
    {
      v8[v9] = *a2;
      unsigned int v12 = a1[2].i32[0] + 1;
      a1[2].i32[0] = v12;
      if (v12 >= 2) {
        goto LABEL_15;
      }
    }
    return 1;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1, a2, (uint64_t)v17);
  if (v17[16])
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a1[2].u32[0];
    if (v5 >= a1[2].i32[1])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a1[1].i64[1], &a1[2].u64[1], v5 + 1, 8);
      LODWORD(v5) = a1[2].i32[0];
    }
    *(void *)(a1[1].i64[1] + 8 * v5) = v4;
    ++a1[2].i32[0];
    return 1;
  }
  return 0;
}

void mlir::detail::RecoveryReproducerContext::crashHandler(mlir::detail::RecoveryReproducerContext *this, void *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (!atomic_load_explicit(mlir::detail::RecoveryReproducerContext::reproducerSet, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
  }
  uint64_t v2 = *(unsigned int *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32);
  if (v2)
  {
    int v3 = *(mlir::detail::AsmStateImpl ***)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 24);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *v3;
      v26[0] = 0;
      v26[1] = 0;
      uint64_t v27 = 0;
      mlir::detail::RecoveryReproducerContext::generate(v5, (uint64_t)v26);
      mlir::emitError(*(void *)(*((void *)v5 + 3) + 24), (uint64_t)&v32);
      if (v32)
      {
        LODWORD(v28) = 3;
        __int16 v29 = "A signal was caught while processing the MLIR module:";
        uint64_t v30 = 53;
        uint64_t v6 = (char *)v34;
        if (v35 >= v36)
        {
          unint64_t v22 = v35 + 1;
          if (v34 <= &v28 && (char *)v34 + 24 * v35 > (char *)&v28)
          {
            int64_t v24 = (char *)&v28 - (unsigned char *)v34;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v22, 24);
            uint64_t v6 = (char *)v34;
            uint64_t v7 = (void ***)((char *)v34 + v24);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v22, 24);
            uint64_t v7 = &v28;
            uint64_t v6 = (char *)v34;
          }
        }
        else
        {
          uint64_t v7 = &v28;
        }
        uint64_t v8 = &v6[24 * v35];
        long long v9 = *(_OWORD *)v7;
        *((void *)v8 + 2) = v7[2];
        *(_OWORD *)uint64_t v8 = v9;
        ++v35;
        if (v32)
        {
          __int16 v31 = 260;
          uint64_t v28 = v26;
          mlir::Diagnostic::operator<<((uint64_t)&v33, (const void ***)&v28);
          if (v32)
          {
            LODWORD(v28) = 3;
            __int16 v29 = "; marking pass as failed";
            uint64_t v30 = 24;
            uint64_t v10 = (char *)v34;
            if (v35 >= v36)
            {
              unint64_t v23 = v35 + 1;
              if (v34 <= &v28 && (char *)v34 + 24 * v35 > (char *)&v28)
              {
                int64_t v25 = (char *)&v28 - (unsigned char *)v34;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v23, 24);
                uint64_t v10 = (char *)v34;
                uint64_t v11 = (void ***)((char *)v34 + v25);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v23, 24);
                uint64_t v11 = &v28;
                uint64_t v10 = (char *)v34;
              }
            }
            else
            {
              uint64_t v11 = &v28;
            }
            unsigned int v12 = &v10[24 * v35];
            long long v13 = *(_OWORD *)v11;
            *((void *)v12 + 2) = v11[2];
            *(_OWORD *)unsigned int v12 = v13;
            ++v35;
            if (v32) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v32);
            }
          }
        }
      }
      if (v42)
      {
        uint64_t v14 = (void **)__p;
        if (__p)
        {
          uint64_t v15 = v41;
          uint64_t v16 = __p;
          if (v41 != __p)
          {
            do
              uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
            while (v15 != v14);
            uint64_t v16 = __p;
          }
          uint64_t v41 = v14;
          operator delete(v16);
        }
        uint64_t v17 = v38;
        if (v38)
        {
          size_t v18 = v39;
          uint64_t v19 = v38;
          if (v39 != v38)
          {
            do
            {
              unsigned int v21 = (void *)*--v18;
              uint64_t v20 = v21;
              *size_t v18 = 0;
              if (v21) {
                operator delete[](v20);
              }
            }
            while (v18 != v17);
            uint64_t v19 = v38;
          }
          unsigned int v39 = v17;
          operator delete(v19);
        }
        if (v34 != v37) {
          free(v34);
        }
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(v26[0]);
      }
      ++v3;
    }
    while (v3 != v4);
  }
}

void mlir::detail::PassCrashReproducerGenerator::~PassCrashReproducerGenerator(mlir::detail::PassCrashReproducerGenerator::Impl **this)
{
  uint64_t v2 = *this;
  *this = 0;
  if (v2) {
    mlir::detail::PassCrashReproducerGenerator::Impl::~Impl(v2);
  }
}

void mlir::detail::PassCrashReproducerGenerator::prepareReproducerFor(uint64_t a1, mlir::Pass **a2, mlir::Pass **a3, uint64_t a4)
{
  uint64_t v20 = a4;
  memset(__p, 0, sizeof(__p));
  int v11 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  int v17 = 1;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = &unk_1EC9A38B8;
  size_t v18 = __p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v10, 0, 0, 0);
  if (a2 != a3)
  {
    uint64_t v7 = *a2;
    uint64_t v6 = a2 + 1;
    mlir::Pass::printAsTextualPipeline(v7, (llvm::raw_ostream *)&v10);
    while (v6 != a3)
    {
      while ((unint64_t)(v13 - (void)v14) > 1)
      {
        *v14++ = 8236;
        uint64_t v8 = *v6++;
        mlir::Pass::printAsTextualPipeline(v8, (llvm::raw_ostream *)&v10);
        if (v6 == a3) {
          goto LABEL_7;
        }
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)&v10, ", ", 2uLL);
      long long v9 = *v6++;
      mlir::Pass::printAsTextualPipeline(v9, (llvm::raw_ostream *)&v10);
    }
  }
LABEL_7:
  std::make_unique[abi:nn180100]<mlir::detail::RecoveryReproducerContext,std::string &,mlir::Operation *&,std::function<std::unique_ptr<mlir::PassManager::ReproducerStream> ()(std::string &)> &,BOOL &>((uint64_t)v18, &v20);
}

void mlir::detail::PassCrashReproducerGenerator::finalize(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = *(unsigned int *)(*a1 + 48);
  if (!v4) {
    return;
  }
  if (a3)
  {
    uint64_t v5 = 8 * v4;
    uint64_t v6 = *(void *)(v3 + 40) - 8;
    do
    {
      uint64_t v7 = *(void *)(v6 + v5);
      *(void *)(v6 + v5) = 0;
      if (v7)
      {
        mlir::Operation::erase(*(mlir::Operation **)(v7 + 24));
        mlir::detail::RecoveryReproducerContext::disable((mlir::detail::RecoveryReproducerContext *)v7);
        if (*(char *)(v7 + 23) < 0) {
          operator delete(*(void **)v7);
        }
        operator delete((void *)v7);
      }
      v5 -= 8;
    }
    while (v5);
    *(_DWORD *)(v3 + 48) = 0;
    return;
  }
  mlir::emitError(*(void *)(a2 + 24), (uint64_t)&v119);
  long long v9 = v119;
  if (v119)
  {
    LODWORD(v130) = 3;
    unint64_t v131 = "Failures have been detected while processing an MLIR pass pipeline";
    uint64_t v132 = 66;
    uint64_t v10 = &v130;
    int v11 = (char *)__src;
    if (v123 >= HIDWORD(v123))
    {
      unint64_t v102 = v123 + 1;
      if (__src <= &v130 && (char *)__src + 24 * v123 > (char *)&v130)
      {
        int64_t v111 = (char *)&v130 - (unsigned char *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v124, v102, 24);
        int v11 = (char *)__src;
        uint64_t v10 = (void ***)((char *)__src + v111);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v124, v102, 24);
        uint64_t v10 = &v130;
        int v11 = (char *)__src;
      }
    }
    uint64_t v12 = &v11[24 * v123];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = v10[2];
    *(_OWORD *)uint64_t v12 = v13;
    LODWORD(v123) = v123 + 1;
    long long v9 = v119;
  }
  long long v130 = v9;
  LOBYTE(v131) = 0;
  char v140 = 0;
  if (v129)
  {
    unint64_t v131 = v120;
    int v14 = v123;
    LODWORD(v132) = v121;
    __dst = v135;
    uint64_t v134 = 0x400000000;
    if (!v123)
    {
      int v15 = 1;
      goto LABEL_26;
    }
    if (__src != v124)
    {
      __dst = __src;
      uint64_t v134 = v123;
      __src = v124;
      HIDWORD(v123) = 0;
      int v15 = 1;
LABEL_25:
      LODWORD(v123) = 0;
LABEL_26:
      long long v136 = v125;
      long long v125 = 0uLL;
      long long v138 = __p;
      uint64_t v137 = v126;
      uint64_t v139 = v128;
      uint64_t v126 = 0;
      long long __p = 0uLL;
      uint64_t v128 = 0;
      char v140 = 1;
      if (v15)
      {
        if (__src != v124) {
          free(__src);
        }
        unsigned __int8 v129 = 0;
      }
      goto LABEL_30;
    }
    if (v123 < 5)
    {
      uint64_t v16 = v123;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v135, v123, 24);
      uint64_t v16 = v123;
      if (!v123) {
        goto LABEL_24;
      }
    }
    memcpy(__dst, __src, 24 * v16);
LABEL_24:
    LODWORD(v134) = v14;
    int v15 = v129;
    goto LABEL_25;
  }
LABEL_30:
  mlir::InFlightDiagnostic::abandon(&v119);
  if (v119) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v119);
  }
  if (v129)
  {
    int v17 = (void **)__p;
    if ((void)__p)
    {
      size_t v18 = (void **)*((void *)&__p + 1);
      uint64_t v19 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
          size_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        uint64_t v19 = (void *)__p;
      }
      *((void *)&__p + 1) = v17;
      operator delete(v19);
    }
    uint64_t v20 = (void *)v125;
    if ((void)v125)
    {
      unsigned int v21 = (void *)*((void *)&v125 + 1);
      unint64_t v22 = (void *)v125;
      if (*((void *)&v125 + 1) != (void)v125)
      {
        do
        {
          int64_t v24 = (void *)*--v21;
          unint64_t v23 = v24;
          void *v21 = 0;
          if (v24) {
            operator delete[](v23);
          }
        }
        while (v21 != v20);
        unint64_t v22 = (void *)v125;
      }
      *((void *)&v125 + 1) = v20;
      operator delete(v22);
    }
    if (__src != v124) {
      free(__src);
    }
  }
  uint64_t v25 = *a1;
  if (!*(unsigned char *)(*a1 + 32))
  {
    unsigned int v116 = 0;
    uint64_t v117 = 0;
    uint64_t v118 = 0;
    mlir::detail::RecoveryReproducerContext::generate(**(mlir::detail::AsmStateImpl ***)(v25 + 40), (uint64_t)&v116);
    uint64_t v50 = mlir::Diagnostic::attachNote((uint64_t *)&v131, 0, 0);
    uint64_t v51 = v50;
    uint64_t v53 = v50 + 16;
    unint64_t v52 = *(void *)(v50 + 16);
    LODWORD(v119) = 3;
    uint64_t v120 = "Pipeline failed while executing [";
    uint64_t v121 = 33;
    uint64_t v54 = *(unsigned int *)(v50 + 24);
    uint64_t v55 = &v119;
    if (v54 >= *(_DWORD *)(v50 + 28))
    {
      unint64_t v107 = v54 + 1;
      BOOL v108 = v52 + 24 * v54 > (unint64_t)&v119;
      if (v52 <= (unint64_t)&v119 && v108)
      {
        uint64_t v114 = (char *)&v119 - v52;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v50 + 16, (void *)(v50 + 32), v107, 24);
        unint64_t v52 = *(void *)(v51 + 16);
        uint64_t v55 = (void ***)&v114[v52];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v50 + 16, (void *)(v50 + 32), v107, 24);
        unint64_t v52 = *(void *)(v51 + 16);
        uint64_t v55 = &v119;
      }
    }
    uint64_t v56 = v52 + 24 * *(unsigned int *)(v51 + 24);
    long long v57 = *(_OWORD *)v55;
    *(void *)(v56 + 16) = v55[2];
    *(_OWORD *)uint64_t v56 = v57;
    ++*(_DWORD *)(v51 + 24);
    uint64_t v58 = *(unsigned int *)(*a1 + 136);
    if (v58)
    {
      uint64_t v59 = *(void *)(*a1 + 128);
      formatPassOpReproducerMessage(v51, *(void *)v59, *(uint64_t **)(v59 + 8));
      if (v58 != 1)
      {
        int v60 = (uint64_t *)(v59 + 16 * v58);
        unint64_t v61 = (uint64_t *)(v59 + 16);
        do
        {
          LOWORD(v123) = 261;
          std::shared_future<void> v119 = (void **)", ";
          uint64_t v120 = (const char *)2;
          mlir::Diagnostic::operator<<(v51, (const void ***)&v119);
          uint64_t v62 = *v61;
          uint64_t v63 = (uint64_t *)v61[1];
          v61 += 2;
          formatPassOpReproducerMessage(v51, v62, v63);
        }
        while (v61 != v60);
      }
    }
    LODWORD(v119) = 3;
    uint64_t v120 = "]: ";
    uint64_t v121 = 3;
    uint64_t v64 = *(unsigned int *)(v51 + 24);
    unint64_t v65 = *(void *)(v51 + 16);
    unint64_t v66 = &v119;
    if (v64 >= *(_DWORD *)(v51 + 28))
    {
      unint64_t v109 = v64 + 1;
      BOOL v110 = v65 + 24 * v64 > (unint64_t)&v119;
      if (v65 <= (unint64_t)&v119 && v110)
      {
        uint64_t v115 = (char *)&v119 - v65;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v53, (void *)(v51 + 32), v109, 24);
        unint64_t v65 = *(void *)(v51 + 16);
        unint64_t v66 = (void ***)&v115[v65];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v53, (void *)(v51 + 32), v109, 24);
        unint64_t v65 = *(void *)(v51 + 16);
        unint64_t v66 = &v119;
      }
    }
    uint64_t v67 = v65 + 24 * *(unsigned int *)(v51 + 24);
    long long v68 = *(_OWORD *)v66;
    *(void *)(v67 + 16) = v66[2];
    *(_OWORD *)uint64_t v67 = v68;
    ++*(_DWORD *)(v51 + 24);
    LOWORD(v123) = 260;
    std::shared_future<void> v119 = &v116;
    mlir::Diagnostic::operator<<(v51, (const void ***)&v119);
    uint64_t v69 = *a1;
    int v70 = *(_DWORD *)(*a1 + 112);
    if (v70 || *(_DWORD *)(v69 + 116))
    {
      int64_t v71 = (int64x2_t **)(v69 + 104);
      uint64_t v72 = *(unsigned int *)(v69 + 120);
      if (v72 <= 4 * v70 || v72 < 0x41)
      {
        if (v72)
        {
          unint64_t v89 = *v71;
          unint64_t v90 = (v72 - 1) & 0xFFFFFFFFFFFFFFFLL;
          __int16 v91 = *v71;
          if (v90 < 3) {
            goto LABEL_109;
          }
          unint64_t v92 = v90 + 1;
          __int16 v91 = &v89[v92 & 0x1FFFFFFFFFFFFFFCLL];
          uint64_t v93 = v89 + 2;
          int64x2_t v94 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
          uint64_t v95 = v92 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v93[-2] = v94;
            v93[-1] = v94;
            *uint64_t v93 = v94;
            v93[1] = v94;
            v93 += 4;
            v95 -= 4;
          }
          while (v95);
          if (v92 != (v92 & 0x1FFFFFFFFFFFFFFCLL))
          {
LABEL_109:
            char v96 = &v89[v72];
            do
            {
              v91->i64[0] = -4096;
              v91->i64[1] = -4096;
              ++v91;
            }
            while (v91 != v96);
          }
        }
        *(void *)(v69 + 112) = 0;
      }
      else
      {
        llvm::DenseMap<std::pair<mlir::Pass *,mlir::Operation *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::Pass *,mlir::Operation *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::Pass *,mlir::Operation *>>>::shrink_and_clear((uint64_t)v71);
      }
    }
    *(_DWORD *)(v69 + 136) = 0;
    uint64_t v97 = *a1;
    uint64_t v98 = *(unsigned int *)(*a1 + 48);
    if (v98)
    {
      uint64_t v99 = 8 * v98;
      uint64_t v100 = *(void *)(v97 + 40) - 8;
      do
      {
        uint64_t v101 = *(void *)(v100 + v99);
        *(void *)(v100 + v99) = 0;
        if (v101)
        {
          mlir::Operation::erase(*(mlir::Operation **)(v101 + 24));
          mlir::detail::RecoveryReproducerContext::disable((mlir::detail::RecoveryReproducerContext *)v101);
          if (*(char *)(v101 + 23) < 0) {
            operator delete(*(void **)v101);
          }
          operator delete((void *)v101);
        }
        v99 -= 8;
      }
      while (v99);
    }
    *(_DWORD *)(v97 + 48) = 0;
    if ((SHIBYTE(v118) & 0x80000000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  int v26 = *(mlir::detail::AsmStateImpl **)(*(void *)(v25 + 40) + 8 * *(unsigned int *)(v25 + 48) - 8);
  unsigned int v116 = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  mlir::detail::RecoveryReproducerContext::generate(v26, (uint64_t)&v116);
  uint64_t v27 = mlir::Diagnostic::attachNote((uint64_t *)&v131, 0, 0);
  uint64_t v28 = v27;
  uint64_t v30 = v27 + 16;
  unint64_t v29 = *(void *)(v27 + 16);
  LODWORD(v119) = 3;
  uint64_t v120 = "Pipeline failed while executing ";
  uint64_t v121 = 32;
  uint64_t v31 = *(unsigned int *)(v27 + 24);
  uint64_t v32 = &v119;
  if (v31 >= *(_DWORD *)(v27 + 28))
  {
    unint64_t v103 = v31 + 1;
    BOOL v104 = v29 + 24 * v31 > (unint64_t)&v119;
    if (v29 <= (unint64_t)&v119 && v104)
    {
      uint64_t v112 = (char *)&v119 - v29;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v27 + 16, (void *)(v27 + 32), v103, 24);
      unint64_t v29 = *(void *)(v28 + 16);
      uint64_t v32 = (void ***)&v112[v29];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v27 + 16, (void *)(v27 + 32), v103, 24);
      unint64_t v29 = *(void *)(v28 + 16);
      uint64_t v32 = &v119;
    }
  }
  uint64_t v33 = v29 + 24 * *(unsigned int *)(v28 + 24);
  long long v34 = *(_OWORD *)v32;
  *(void *)(v33 + 16) = v32[2];
  *(_OWORD *)uint64_t v33 = v34;
  ++*(_DWORD *)(v28 + 24);
  uint64_t v35 = *(void *)(*a1 + 128) + 16 * *(unsigned int *)(*a1 + 136);
  formatPassOpReproducerMessage(v28, *(void *)(v35 - 16), *(uint64_t **)(v35 - 8));
  LODWORD(v119) = 3;
  uint64_t v120 = ": ";
  uint64_t v121 = 2;
  uint64_t v36 = *(unsigned int *)(v28 + 24);
  unint64_t v37 = *(void *)(v28 + 16);
  uint64_t v38 = &v119;
  if (v36 >= *(_DWORD *)(v28 + 28))
  {
    unint64_t v105 = v36 + 1;
    BOOL v106 = v37 + 24 * v36 > (unint64_t)&v119;
    if (v37 <= (unint64_t)&v119 && v106)
    {
      unint64_t v113 = (char *)&v119 - v37;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v30, (void *)(v28 + 32), v105, 24);
      unint64_t v37 = *(void *)(v28 + 16);
      uint64_t v38 = (void ***)&v113[v37];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v30, (void *)(v28 + 32), v105, 24);
      unint64_t v37 = *(void *)(v28 + 16);
      uint64_t v38 = &v119;
    }
  }
  uint64_t v39 = v37 + 24 * *(unsigned int *)(v28 + 24);
  long long v40 = *(_OWORD *)v38;
  *(void *)(v39 + 16) = v38[2];
  *(_OWORD *)uint64_t v39 = v40;
  ++*(_DWORD *)(v28 + 24);
  LOWORD(v123) = 260;
  std::shared_future<void> v119 = &v116;
  mlir::Diagnostic::operator<<(v28, (const void ***)&v119);
  uint64_t v41 = *a1;
  uint64_t v42 = *(unsigned int *)(*a1 + 48);
  uint64_t v43 = (_DWORD *)*a1;
  if (v42)
  {
    uint64_t v44 = 8 * v42;
    uint64_t v45 = *(void *)(v41 + 40) - 8;
    do
    {
      uint64_t v46 = *(void *)(v45 + v44);
      *(void *)(v45 + v44) = 0;
      if (v46)
      {
        mlir::Operation::erase(*(mlir::Operation **)(v46 + 24));
        mlir::detail::RecoveryReproducerContext::disable((mlir::detail::RecoveryReproducerContext *)v46);
        if (*(char *)(v46 + 23) < 0) {
          operator delete(*(void **)v46);
        }
        operator delete((void *)v46);
      }
      v44 -= 8;
    }
    while (v44);
    uint64_t v43 = (_DWORD *)*a1;
  }
  *(_DWORD *)(v41 + 48) = 0;
  int v47 = v43[28];
  if (v47 || v43[29])
  {
    size_t v48 = (int64x2_t **)(v43 + 26);
    uint64_t v49 = v43[30];
    if (v49 > 4 * v47 && v49 >= 0x41)
    {
      llvm::DenseMap<std::pair<mlir::Pass *,mlir::Operation *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::Pass *,mlir::Operation *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::Pass *,mlir::Operation *>>>::shrink_and_clear((uint64_t)v48);
      v43[34] = 0;
      if (SHIBYTE(v118) < 0) {
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    if (v49)
    {
      unsigned int v73 = *v48;
      unint64_t v74 = (v49 - 1) & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v75 = *v48;
      if (v74 < 3) {
        goto LABEL_81;
      }
      unint64_t v76 = v74 + 1;
      uint64_t v75 = &v73[v76 & 0x1FFFFFFFFFFFFFFCLL];
      uint64_t v77 = v73 + 2;
      int64x2_t v78 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v79 = v76 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v77[-2] = v78;
        v77[-1] = v78;
        int64x2_t *v77 = v78;
        v77[1] = v78;
        v77 += 4;
        v79 -= 4;
      }
      while (v79);
      if (v76 != (v76 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_81:
        int v80 = &v73[v49];
        do
        {
          v75->i64[0] = -4096;
          v75->i64[1] = -4096;
          ++v75;
        }
        while (v75 != v80);
      }
    }
    *((void *)v43 + 14) = 0;
  }
  v43[34] = 0;
  if (SHIBYTE(v118) < 0) {
LABEL_85:
  }
    operator delete(v116);
LABEL_86:
  if (v130) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v130);
  }
  if (v140)
  {
    unint64_t v81 = (void **)v138;
    if ((void)v138)
    {
      unsigned int v82 = (void **)*((void *)&v138 + 1);
      uint64_t v83 = (void *)v138;
      if (*((void *)&v138 + 1) != (void)v138)
      {
        do
          unsigned int v82 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v82 - 1);
        while (v82 != v81);
        uint64_t v83 = (void *)v138;
      }
      *((void *)&v138 + 1) = v81;
      operator delete(v83);
    }
    unsigned int v84 = (void *)v136;
    if ((void)v136)
    {
      uint64_t v85 = (void *)*((void *)&v136 + 1);
      uint64_t v86 = (void *)v136;
      if (*((void *)&v136 + 1) != (void)v136)
      {
        do
        {
          uint64_t v88 = (void *)*--v85;
          unint64_t v87 = v88;
          void *v85 = 0;
          if (v88) {
            operator delete[](v87);
          }
        }
        while (v85 != v84);
        uint64_t v86 = (void *)v136;
      }
      *((void *)&v136 + 1) = v84;
      operator delete(v86);
    }
    if (__dst != v135) {
      free(__dst);
    }
  }
}

mlir::SymbolOpInterface *formatPassOpReproducerMessage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a1 + 16;
  unint64_t v6 = *(void *)(a1 + 16);
  LODWORD(canMapOperands) = 3;
  uint64_t v62 = 1;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  long long v9 = &canMapOperands;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v45 = v8 + 1;
    BOOL v46 = v6 + 24 * v8 > (unint64_t)&canMapOperands;
    if (v6 <= (unint64_t)&canMapOperands && v46)
    {
      uint64_t v55 = (char *)&canMapOperands - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v45, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      long long v9 = (const void ***)&v55[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v45, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      long long v9 = &canMapOperands;
    }
  }
  uint64_t v10 = v6 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = v9[2];
  *(_OWORD *)uint64_t v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  uint64_t v12 = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  __int16 v63 = 261;
  canMapOperands = v12;
  unint64_t v61 = v13;
  uint64_t v14 = mlir::Diagnostic::operator<<(a1, &canMapOperands);
  uint64_t v15 = v14;
  uint64_t v17 = v14 + 16;
  unint64_t v16 = *(void *)(v14 + 16);
  LODWORD(v64) = 3;
  uint64_t v66 = 5;
  uint64_t v18 = *(unsigned int *)(v14 + 24);
  uint64_t v19 = (char *)&v64;
  if (v18 >= *(_DWORD *)(v14 + 28))
  {
    unint64_t v47 = v18 + 1;
    BOOL v48 = v16 + 24 * v18 > (unint64_t)&v64;
    if (v16 <= (unint64_t)&v64 && v48)
    {
      uint64_t v56 = (char *)&v64 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14 + 16, (void *)(v14 + 32), v47, 24);
      unint64_t v16 = *(void *)(v15 + 16);
      uint64_t v19 = &v56[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14 + 16, (void *)(v14 + 32), v47, 24);
      unint64_t v16 = *(void *)(v15 + 16);
      uint64_t v19 = (char *)&v64;
    }
  }
  uint64_t v20 = v16 + 24 * *(unsigned int *)(v15 + 24);
  long long v21 = *(_OWORD *)v19;
  *(void *)(v20 + 16) = *((void *)v19 + 2);
  *(_OWORD *)uint64_t v20 = v21;
  unsigned int v22 = *(_DWORD *)(v15 + 28);
  uint64_t v23 = (*(_DWORD *)(v15 + 24) + 1);
  *(_DWORD *)(v15 + 24) = v23;
  LODWORD(v64) = 3;
  unint64_t v65 = "'";
  uint64_t v66 = 1;
  unint64_t v24 = *(void *)(v15 + 16);
  uint64_t v25 = (char *)&v64;
  if (v23 >= v22)
  {
    unint64_t v49 = v23 + 1;
    BOOL v50 = v24 + 24 * v23 > (unint64_t)&v64;
    if (v24 <= (unint64_t)&v64 && v50)
    {
      long long v57 = (char *)&v64 - v24;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17, (void *)(v15 + 32), v49, 24);
      unint64_t v24 = *(void *)(v15 + 16);
      uint64_t v25 = &v57[v24];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17, (void *)(v15 + 32), v49, 24);
      unint64_t v24 = *(void *)(v15 + 16);
      uint64_t v25 = (char *)&v64;
    }
  }
  uint64_t v26 = v24 + 24 * *(unsigned int *)(v15 + 24);
  long long v27 = *(_OWORD *)v25;
  *(void *)(v26 + 16) = *((void *)v25 + 2);
  *(_OWORD *)uint64_t v26 = v27;
  ++*(_DWORD *)(v15 + 24);
  uint64_t v29 = mlir::Diagnostic::operator<<(v15, a3[6]);
  uint64_t v30 = v29 + 16;
  unint64_t v31 = *(void *)(v29 + 16);
  LODWORD(v64) = 3;
  unint64_t v65 = "' operation";
  uint64_t v66 = 11;
  uint64_t v32 = *(unsigned int *)(v29 + 24);
  uint64_t v33 = (char *)&v64;
  if (v32 >= *(_DWORD *)(v29 + 28))
  {
    unint64_t v51 = v32 + 1;
    BOOL v52 = v31 + 24 * v32 > (unint64_t)&v64;
    if (v31 <= (unint64_t)&v64 && v52)
    {
      uint64_t v58 = (char *)&v64 - v31;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v30, (void *)(v29 + 32), v51, 24);
      unint64_t v31 = *(void *)(v29 + 16);
      uint64_t v33 = &v58[v31];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v30, (void *)(v29 + 32), v51, 24);
      unint64_t v31 = *(void *)(v29 + 16);
      uint64_t v33 = (char *)&v64;
    }
  }
  uint64_t v34 = v31 + 24 * *(unsigned int *)(v29 + 24);
  long long v35 = *(_OWORD *)v33;
  *(void *)(v34 + 16) = *((void *)v33 + 2);
  *(_OWORD *)uint64_t v34 = v35;
  ++*(_DWORD *)(v29 + 24);
  double result = llvm::DefaultDoCastIfPossible<mlir::SymbolOpInterface,mlir::Operation *,llvm::CastInfo<mlir::SymbolOpInterface,mlir::Operation *,void>>::doCastIfPossible((mlir::SymbolOpInterface *)a3, v28);
  uint64_t v64 = result;
  unint64_t v65 = v37;
  if (result)
  {
    LODWORD(canMapOperands) = 3;
    unint64_t v61 = ": @";
    uint64_t v62 = 3;
    uint64_t v38 = *(unsigned int *)(a1 + 24);
    unint64_t v39 = *(void *)(a1 + 16);
    long long v40 = &canMapOperands;
    if (v38 >= *(_DWORD *)(a1 + 28))
    {
      unint64_t v53 = v38 + 1;
      BOOL v54 = v39 + 24 * v38 > (unint64_t)&canMapOperands;
      if (v39 <= (unint64_t)&canMapOperands && v54)
      {
        uint64_t v59 = (char *)&canMapOperands - v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v53, 24);
        unint64_t v39 = *(void *)(a1 + 16);
        long long v40 = (const void ***)&v59[v39];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v53, 24);
        unint64_t v39 = *(void *)(a1 + 16);
        long long v40 = &canMapOperands;
      }
    }
    uint64_t v41 = v39 + 24 * *(unsigned int *)(a1 + 24);
    long long v42 = *(_OWORD *)v40;
    *(void *)(v41 + 16) = v40[2];
    *(_OWORD *)uint64_t v41 = v42;
    ++*(_DWORD *)(a1 + 24);
    canMapOperands = (const void **)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v64);
    uint64_t AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&canMapOperands);
    __int16 v63 = 261;
    canMapOperands = AttrData;
    unint64_t v61 = v44;
    return (mlir::SymbolOpInterface *)mlir::Diagnostic::operator<<(a1, &canMapOperands);
  }
  return result;
}

void std::make_unique[abi:nn180100]<mlir::detail::RecoveryReproducerContext,std::string &,mlir::Operation *&,std::function<std::unique_ptr<mlir::PassManager::ReproducerStream> ()(std::string &)> &,BOOL &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (mlir::Operation::CloneOptions *)operator new(0x30uLL);
  uint64_t v5 = (std::string *)v4;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v8 = *(std::string *)a1;
  }
  uint64_t v6 = *a2;
  *uint64_t v5 = v8;
  memset(&v8, 0, sizeof(v8));
  char v7 = mlir::Operation::CloneOptions::all(v4);
  mlir::Operation::clone(v6, v7);
}

void sub_1805F7690(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  *(void *)(v24 + 24) = a1;
  *(void *)(v24 + 32) = v25;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v27 + 24));
  *(unsigned char *)(v24 + 40) = mlir::MLIRContext::isMultithreadingEnabled(Context) ^ 1;
  *(unsigned char *)(v24 + 41) = v26;
  mlir::detail::RecoveryReproducerContext::enable((mlir::detail::RecoveryReproducerContext *)v24);
  void *v23 = v24;
  if (v30 < 0) {
    operator delete(v29);
  }
}

uint64_t mlir::PassManager::runWithCrashRecovery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a3;
  uint64_t v13 = a2;
  uint64_t v5 = *(uint64_t **)(a1 + 32);
  uint64_t v6 = (mlir::Pass **)mlir::OpPassManager::begin((mlir::OpPassManager *)a1);
  uint64_t MemorySpace = (llvm::CrashRecoveryContext *)mlir::MemRefType::getMemorySpace((mlir::MemRefType *)a1);
  int v8 = (*(unsigned __int8 *)(a1 + 56) >> 1) & 1;
  llvm::CrashRecoveryContext::Enable(MemorySpace);
  uint64_t v9 = *v5;
  *(unsigned char *)(v9 + 144) = v8;
  if (!*(unsigned char *)(v9 + 32)) {
    mlir::detail::PassCrashReproducerGenerator::prepareReproducerFor((uint64_t)v5, v6, (mlir::Pass **)MemorySpace, a2);
  }
  unsigned __int8 v15 = 0;
  llvm::CrashRecoveryContext::CrashRecoveryContext((llvm::CrashRecoveryContext *)v12);
  v11[0] = &v15;
  v11[1] = a1;
  v11[2] = &v13;
  v11[3] = &v14;
  llvm::CrashRecoveryContext::RunSafelyOnThread(v12, (uint64_t)llvm::function_ref<void ()(void)>::callback_fn<mlir::PassManager::runWithCrashRecovery(mlir::Operation *,mlir::AnalysisManager)::$_0>, (uint64_t)v11, 0);
  mlir::detail::PassCrashReproducerGenerator::finalize(*(uint64_t **)(a1 + 32), v13, v15);
  llvm::CrashRecoveryContext::~CrashRecoveryContext((llvm::CrashRecoveryContext *)v12);
  return v15;
}

void mlir::AsmResourcePrinter::fromCallable<mlir::detail::RecoveryReproducerContext::generate(std::string &)::$_0>(llvm::StringRef,mlir::detail::RecoveryReproducerContext::generate(std::string &)::$_0 &&)::Printer::~Printer(void **a1)
{
  mlir::AsmResourcePrinter::~AsmResourcePrinter(a1);

  operator delete(v1);
}

uint64_t mlir::AsmResourcePrinter::fromCallable<mlir::detail::RecoveryReproducerContext::generate(std::string &)::$_0>(llvm::StringRef,mlir::detail::RecoveryReproducerContext::generate(std::string &)::$_0 &&)::Printer::buildResources(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *((char *)v4 + 23);
  if (v6 >= 0) {
    uint64_t v7 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v7 = *v4;
  }
  if (v6 >= 0) {
    uint64_t v8 = *((unsigned __int8 *)v4 + 23);
  }
  else {
    uint64_t v8 = v4[1];
  }
  (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 24))(a3, "pipeline", 8, v7, v8);
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a3 + 16))(a3, "disable_threading", 17, *(unsigned __int8 *)(v5 + 40));
  uint64_t v9 = *(unsigned __int8 *)(v5 + 41);
  uint64_t v10 = *(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t))(*(void *)a3 + 16);

  return v10(a3, "verify_each", 11, v9);
}

uint64_t llvm::object_creator<llvm::sys::SmartMutex<true>>::call()
{
  unint64_t v0 = operator new(0x48uLL);
  *unint64_t v0 = 0u;
  v0[1] = 0u;
  v0[2] = 0u;
  v0[3] = 0u;
  *((void *)v0 + 8) = 0;
  uint64_t result = MEMORY[0x1852FDB50]();
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void llvm::object_deleter<llvm::sys::SmartMutex<true>>::call(std::recursive_mutex *a1)
{
  if (a1)
  {
    std::recursive_mutex::~recursive_mutex(a1);
    operator delete(v1);
  }
}

double llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call()
{
  unint64_t v0 = operator new(0x30uLL);
  double result = 0.0;
  v0[1] = 0u;
  v0[2] = 0u;
  *unint64_t v0 = 0u;
  *((void *)v0 + 3) = (char *)v0 + 40;
  *((_DWORD *)v0 + 9) = 1;
  return result;
}

uint64_t llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 24);
    if (v2 != (void *)(v1 + 40)) {
      free(v2);
    }
    llvm::deallocate_buffer(*(llvm **)v1, (void *)(8 * *(unsigned int *)(v1 + 16)));
  }
  return result;
}

void mlir::detail::PassCrashReproducerGenerator::Impl::~Impl(mlir::detail::PassCrashReproducerGenerator::Impl *this)
{
  uint64_t v2 = (char *)*((void *)this + 16);
  if (v2 != (char *)this + 144) {
    free(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 13), (void *)(16 * *((unsigned int *)this + 30)));
}

void llvm::DenseMap<std::pair<mlir::Pass *,mlir::Operation *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::Pass *,mlir::Operation *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::Pass *,mlir::Operation *>>>::shrink_and_clear(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64) {
    int v3 = 64;
  }
  if (v2) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v4 != v1) {
    llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * v1));
  }
  *(void *)(a1 + 8) = 0;
  if (v1)
  {
    uint64_t v5 = *(llvm **)a1;
    memset_pattern16(v5, &unk_1810FE110, 16 * v1);
  }
}

void llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::detail::RecoveryReproducerContext>,false>::grow(uint64_t a1, unint64_t a2)
{
  unint64_t v24 = 0;
  int v3 = (char *)(a1 + 16);
  int v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v24);
  uint64_t v5 = *(char **)a1;
  int v6 = *(char **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (!v7) {
    goto LABEL_21;
  }
  unint64_t v8 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v9 = 8 * v7;
  if (v8 < 0xB)
  {
    uint64_t v10 = v4;
LABEL_12:
    uint64_t v19 = &v5[8 * v7];
    do
    {
      uint64_t v20 = *(void *)v6;
      *(void *)int v6 = 0;
      v6 += 8;
      *(void *)uint64_t v10 = v20;
      v10 += 8;
    }
    while (v6 != v19);
    goto LABEL_14;
  }
  BOOL v11 = v5 >= &v4[v9] || v4 >= &v5[v9];
  uint64_t v10 = v4;
  if (!v11) {
    goto LABEL_12;
  }
  unint64_t v12 = v8 + 1;
  uint64_t v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v10 = &v4[v13];
  int v6 = &v5[v13];
  uint64_t v14 = (long long *)(v5 + 16);
  unsigned __int8 v15 = v4 + 16;
  uint64_t v16 = v12 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v17 = *(v14 - 1);
    long long v18 = *v14;
    *(v14 - 1) = 0uLL;
    *uint64_t v14 = 0uLL;
    *(v15 - 1) = v17;
    *unsigned __int8 v15 = v18;
    v14 += 2;
    v15 += 2;
    v16 -= 4;
  }
  while (v16);
  if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v21 = *(void *)a1 - 8;
  do
  {
    uint64_t v22 = *(void *)(v21 + v9);
    *(void *)(v21 + v9) = 0;
    if (v22)
    {
      mlir::Operation::erase(*(mlir::Operation **)(v22 + 24));
      mlir::detail::RecoveryReproducerContext::disable((mlir::detail::RecoveryReproducerContext *)v22);
      if (*(char *)(v22 + 23) < 0) {
        operator delete(*(void **)v22);
      }
      operator delete((void *)v22);
    }
    v9 -= 8;
  }
  while (v9);
  int v6 = *(char **)a1;
LABEL_21:
  int v23 = v24;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v23;
}

uint64_t llvm::function_ref<void ()(void)>::callback_fn<mlir::PassManager::runWithCrashRecovery(mlir::Operation *,mlir::AnalysisManager)::$_0>(uint64_t a1)
{
  uint64_t result = mlir::PassManager::runPasses(*(unsigned __int8 **)(a1 + 8), **(mlir ***)(a1 + 16), **(mlir::detail::NestedAnalysisMap ***)(a1 + 24));
  **(unsigned char **)a1 = result;
  return result;
}

uint64_t mlir::detail::pass_options::parseCommaSeparatedList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, unint64_t), uint64_t a7)
{
  unint64_t v9 = a5;
  uint64_t v10 = a4;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  v24[0] = (llvm *)v24;
  unint64_t v25 = (unint64_t)llvm::detail::UniqueFunctionBase<unsigned long,llvm::StringRef,unsigned long,char>::CallbacksHolder<mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0,mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0,void>::Callbacks
      + 2;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, unsigned __int8))(((unint64_t)llvm::detail::UniqueFunctionBase<unsigned long,llvm::StringRef,unsigned long,char>::CallbacksHolder<mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0,mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0,void>::Callbacks + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v24, a4, a5, 0, 0x2Cu);
  if (v11 == -1)
  {
LABEL_14:
    uint64_t v20 = a6(a7, v10, v9);
    unint64_t v21 = v25;
    if (v25 < 8) {
      return v20;
    }
    goto LABEL_17;
  }
  unint64_t v12 = v11;
  while (1)
  {
    unint64_t v13 = v9 >= v12 ? v12 : v9;
    if (!a6(a7, v10, v13)) {
      break;
    }
    if (v9 >= v12 + 1) {
      unint64_t v18 = v12 + 1;
    }
    else {
      unint64_t v18 = v9;
    }
    v10 += v18;
    v9 -= v18;
    if ((v25 & 2) != 0) {
      uint64_t v19 = v24;
    }
    else {
      uint64_t v19 = (llvm **)v24[0];
    }
    unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, unsigned __int8))(v25 & 0xFFFFFFFFFFFFFFF8))((uint64_t)v19, v10, v9, 0, 0x2Cu);
    if (v12 == -1) {
      goto LABEL_14;
    }
  }
  uint64_t v20 = 0;
  unint64_t v21 = v25;
  if (v25 >= 8)
  {
LABEL_17:
    if ((v21 & 4) != 0)
    {
      if ((v21 & 2) != 0) {
        uint64_t v22 = v24;
      }
      else {
        uint64_t v22 = (llvm **)v24[0];
      }
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v22, v14, v15, v16, v17);
    }
    if ((v21 & 2) == 0) {
      llvm::deallocate_buffer(v24[0], v24[1]);
    }
  }
  return v20;
}

uint64_t mlir::detail::PassOptions::copyOptionValuesFrom(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 160);
  uint64_t v3 = *(void *)(result + 168);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a2 + 160);
    uint64_t v5 = *(void *)(a2 + 168);
    if (v4 != v5)
    {
      uint64_t v6 = v4 + 8;
      uint64_t v7 = v2 + 8;
      do
      {
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 - 8) + 40))(*(void *)(v7 - 8), *(void *)(v6 - 8));
        if (v7 == v3) {
          break;
        }
        v7 += 8;
        BOOL v8 = v6 == v5;
        v6 += 8;
      }
      while (!v8);
    }
  }
  return result;
}

uint64_t mlir::detail::PassOptions::parseFromString(uint64_t a1, __int8 *a2, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  unint64_t v3 = a3;
  uint64_t v6 = (uint64_t *)(a1 + 128);
  while (2)
  {
    for (unint64_t i = 0; i != v3; ++i)
    {
      int v8 = a2[i];
      if (v8 == 61)
      {
        if (v3 >= i) {
          unint64_t v22 = i;
        }
        else {
          unint64_t v22 = v3;
        }
        uint64_t v68 = (uint64_t)a2;
        unint64_t v69 = v22;
        unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v68, " \t\n\v\f\r", 6, 0);
        if (first_not_of >= v69) {
          unint64_t v24 = v69;
        }
        else {
          unint64_t v24 = first_not_of;
        }
        unint64_t v25 = v69 - v24;
        int v70 = (int8x16_t *)(v68 + v24);
        unint64_t v71 = v69 - v24;
        uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v70, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
        uint64_t v14 = v70;
        if (last_not_of + 1 < v71) {
          unint64_t v27 = last_not_of + 1;
        }
        else {
          unint64_t v27 = v71;
        }
        uint64_t v28 = (const unsigned __int8 *)(v71 - v25 + v27);
        if (v71 >= (unint64_t)v28) {
          uint64_t v17 = v28;
        }
        else {
          uint64_t v17 = (const unsigned __int8 *)v71;
        }
        int v70 = (int8x16_t *)&a2[v22];
        unint64_t v71 = v3 - v22;
        unint64_t v29 = llvm::StringRef::find_first_not_of(&v70, " \t\n\v\f\r", 6, 0);
        if (v29 >= v71) {
          unint64_t v30 = v71;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v71 <= v29) {
          uint64_t v31 = (uint64_t)v70->i64 + v30;
        }
        else {
          uint64_t v31 = (uint64_t)v70->i64 + v30 + 1;
        }
        uint64_t v32 = 0;
        unint64_t v33 = (__PAIR128__(v71, v29) - __PAIR128__(v30, v71)) >> 64;
        if (v71 - v30 == v71 > v29)
        {
LABEL_87:
          if (v33 >= (unint64_t)v32) {
            unint64_t v51 = (unint64_t)v32;
          }
          else {
            unint64_t v51 = v33;
          }
          uint64_t v68 = v31;
          unint64_t v69 = v51;
          unint64_t v52 = llvm::StringRef::find_first_not_of(&v68, " \t\n\v\f\r", 6, 0);
          if (v52 >= v69) {
            unint64_t v53 = v69;
          }
          else {
            unint64_t v53 = v52;
          }
          unint64_t v54 = v69 - v53;
          int v70 = (int8x16_t *)(v68 + v53);
          unint64_t v71 = v69 - v53;
          uint64_t v55 = llvm::StringRef::find_last_not_of(&v70, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v20 = (char *)v70;
          if (v55 + 1 < v71) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v71;
          }
          size_t v57 = v71 - v54 + v56;
          if (v71 >= v57) {
            size_t v19 = v57;
          }
          else {
            size_t v19 = v71;
          }
          int v70 = (int8x16_t *)(v31 + v51);
          unint64_t v71 = v33 - v51;
          unint64_t v58 = llvm::StringRef::find_first_not_of(&v70, " \t\n\v\f\r", 6, 0);
          if (v58 >= v71) {
            unint64_t v59 = v71;
          }
          else {
            unint64_t v59 = v58;
          }
          a2 = &v70->i8[v59];
          unint64_t v3 = v71 - v59;
          if (!v17) {
            goto LABEL_3;
          }
LABEL_103:
          int Key = (llvm *)llvm::StringMapImpl::FindKey(v6, v14, v17);
          if (Key != -1 && (int)Key != (unint64_t)*(unsigned int *)(a1 + 136))
          {
            if ((llvm::cl::ProvidePositionalOption(*(void *)(*(void *)(*v6 + 8 * (int)Key) + 8), v20, v19, 0) & 1) == 0) {
              goto LABEL_3;
            }
            return 0;
          }
          uint64_t v62 = (llvm::raw_ostream *)llvm::errs(Key);
          __int16 v63 = v62;
          uint64_t v64 = (void *)*((void *)v62 + 4);
          if (*((void *)v62 + 3) - (void)v64 > 0x25uLL)
          {
            qmemcpy(v64, "<Pass-Options-Parser>: no such option ", 38);
            unint64_t v65 = (void *)(*((void *)v62 + 4) + 38);
            *((void *)v63 + 4) = v65;
            if ((unint64_t)v17 <= *((void *)v63 + 3) - (void)v65)
            {
LABEL_110:
              memcpy(v65, v14, (size_t)v17);
              uint64_t v66 = (unsigned __int8 *)*((void *)v63 + 3);
              uint64_t v67 = (unsigned __int8 *)&v17[*((void *)v63 + 4)];
              *((void *)v63 + 4) = v67;
              if (v66 != v67)
              {
LABEL_111:
                uint64_t result = 0;
                unsigned __int8 *v67 = 10;
                ++*((void *)v63 + 4);
                return result;
              }
LABEL_115:
              llvm::raw_ostream::write(v63, "\n", 1uLL);
              return 0;
            }
          }
          else
          {
            __int16 v63 = llvm::raw_ostream::write(v62, "<Pass-Options-Parser>: no such option ", 0x26uLL);
            unint64_t v65 = (void *)*((void *)v63 + 4);
            if ((unint64_t)v17 <= *((void *)v63 + 3) - (void)v65) {
              goto LABEL_110;
            }
          }
          __int16 v63 = llvm::raw_ostream::write(v63, v14->i8, (size_t)v17);
          uint64_t v67 = (unsigned __int8 *)*((void *)v63 + 4);
          if (*((unsigned __int8 **)v63 + 3) != v67) {
            goto LABEL_111;
          }
          goto LABEL_115;
        }
        while (1)
        {
          int v36 = v32[v31];
          switch(v36)
          {
            case '""':
              size_t v48 = v33 - (void)(v32 + 1);
              if (v33 > (unint64_t)(v32 + 1))
              {
                unint64_t v49 = &v32[v31 + 1];
                int v50 = 34;
                goto LABEL_46;
              }
              break;
            case '\'':
              size_t v48 = v33 - (void)(v32 + 1);
              if (v33 > (unint64_t)(v32 + 1))
              {
                unint64_t v49 = &v32[v31 + 1];
                int v50 = 39;
LABEL_46:
                uint64_t v34 = (char *)memchr(v49, v50, v48);
                BOOL v35 = &v34[-v31] == (char *)-1 || v34 == 0;
                if (!v35) {
                  uint64_t v32 = &v34[-v31];
                }
              }
              break;
            case ' ':
              goto LABEL_87;
            default:
              unint64_t v37 = v32 + 1;
              if (v36 == 123 && v37 != (char *)v33)
              {
                uint64_t v39 = 1;
                do
                {
                  unsigned int v40 = v37[v31];
                  if (v40 > 0x7A)
                  {
                    if (v40 == 123)
                    {
                      ++v39;
                    }
                    else if (v40 == 125 && !--v39)
                    {
                      goto LABEL_51;
                    }
                  }
                  else if (v40 == 34)
                  {
                    size_t v43 = v33 - (void)(v32 + 2);
                    if (v33 > (unint64_t)(v32 + 2))
                    {
                      uint64_t v44 = &v32[v31 + 2];
                      int v45 = 34;
LABEL_76:
                      BOOL v46 = (char *)memchr(v44, v45, v43);
                      if (&v46[-v31] != (char *)-1 && v46 != 0) {
                        unint64_t v37 = &v46[-v31];
                      }
                    }
                  }
                  else
                  {
                    BOOL v35 = v40 == 39;
                    uint64_t v41 = v32 + 2;
                    if (v35 && v33 > (unint64_t)v41)
                    {
                      size_t v43 = v33 - (void)v41;
                      uint64_t v44 = &v41[v31];
                      int v45 = 39;
                      goto LABEL_76;
                    }
                  }
                  uint64_t v32 = v37++;
                }
                while (v37 != (char *)v33);
              }
              break;
          }
LABEL_51:
          if (++v32 == (char *)v33)
          {
            uint64_t v32 = (char *)v33;
            goto LABEL_87;
          }
        }
      }
      if (v8 == 32) {
        goto LABEL_9;
      }
    }
    unint64_t i = v3;
LABEL_9:
    if (v3 >= i) {
      unint64_t v9 = i;
    }
    else {
      unint64_t v9 = v3;
    }
    uint64_t v68 = (uint64_t)a2;
    unint64_t v69 = v9;
    unint64_t v10 = llvm::StringRef::find_first_not_of(&v68, " \t\n\v\f\r", 6, 0);
    if (v10 >= v69) {
      unint64_t v11 = v69;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t v12 = v69 - v11;
    int v70 = (int8x16_t *)(v68 + v11);
    unint64_t v71 = v69 - v11;
    uint64_t v13 = llvm::StringRef::find_last_not_of(&v70, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v14 = v70;
    if (v13 + 1 < v71) {
      unint64_t v15 = v13 + 1;
    }
    else {
      unint64_t v15 = v71;
    }
    uint64_t v16 = (const unsigned __int8 *)(v71 - v12 + v15);
    if (v71 >= (unint64_t)v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = (const unsigned __int8 *)v71;
    }
    int v70 = (int8x16_t *)&a2[v9];
    unint64_t v71 = v3 - v9;
    unint64_t v18 = llvm::StringRef::find_first_not_of(&v70, " \t\n\v\f\r", 6, 0);
    size_t v19 = 0;
    uint64_t v20 = 0;
    if (v18 >= v71) {
      unint64_t v21 = v71;
    }
    else {
      unint64_t v21 = v18;
    }
    a2 = &v70->i8[v21];
    unint64_t v3 = v71 - v21;
    if (v17) {
      goto LABEL_103;
    }
LABEL_3:
    if (v3) {
      continue;
    }
    return 1;
  }
}

void mlir::detail::PassOptions::print(mlir::detail::PassOptions *this, llvm::raw_ostream *a2)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 35)) {
    return;
  }
  uint64_t v4 = (char *)*((void *)this + 20);
  unint64_t v3 = (char *)*((void *)this + 21);
  __base = v30;
  uint64_t v29 = 0x400000000;
  uint64_t v5 = v3 - v4;
  if ((unint64_t)(v3 - v4) < 0x21)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    if (v4 == v3) {
      goto LABEL_12;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, v30, v5 >> 3, 8);
    uint64_t v6 = v29;
    int v7 = v29;
    if (v4 == v3) {
      goto LABEL_12;
    }
  }
  int v8 = (char *)__base + 8 * v6;
  if ((unint64_t)(v5 - 8) < 0x38) {
    goto LABEL_32;
  }
  unint64_t v9 = (char *)__base + 8 * v6;
  if ((unint64_t)(v9 - v4) < 0x20) {
    goto LABEL_32;
  }
  unint64_t v10 = ((unint64_t)(v5 - 8) >> 3) + 1;
  uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
  int v8 = (void *)((char *)v8 + v11);
  unint64_t v12 = &v4[v11];
  uint64_t v13 = (long long *)(v4 + 16);
  uint64_t v14 = v9 + 16;
  uint64_t v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v16 = *v13;
    *(v14 - 1) = *(v13 - 1);
    *uint64_t v14 = v16;
    v13 += 2;
    v14 += 2;
    v15 -= 4;
  }
  while (v15);
  uint64_t v4 = v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_32:
    do
    {
      uint64_t v17 = *(void *)v4;
      v4 += 8;
      *v8++ = v17;
    }
    while (v4 != v3);
  }
LABEL_12:
  size_t v18 = v7 + ((unint64_t)v5 >> 3);
  LODWORD(v29) = v18;
  if (v18 >= 2) {
    qsort(__base, v18, 8uLL, (int (__cdecl *)(const void *, const void *))mlir::detail::PassOptions::print(llvm::raw_ostream &)::$_0::__invoke);
  }
  size_t v19 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v19 < *((void *)a2 + 3))
  {
    *((void *)a2 + 4) = v19 + 1;
    *size_t v19 = 123;
    uint64_t v20 = v29;
    if (!v29) {
      goto LABEL_19;
    }
LABEL_18:
    unint64_t v21 = (char *)__base;
    (*(void (**)(void, llvm::raw_ostream *))(**(void **)__base + 24))(*(void *)__base, a2);
    if (v20 != 1)
    {
      unint64_t v24 = (uint64_t *)(v21 + 8);
      uint64_t v25 = 8 * v20 - 8;
      do
      {
        unint64_t v27 = (unsigned char *)*((void *)a2 + 4);
        if (*((unsigned char **)a2 + 3) == v27)
        {
          llvm::raw_ostream::write(a2, " ", 1uLL);
        }
        else
        {
          unsigned char *v27 = 32;
          ++*((void *)a2 + 4);
        }
        uint64_t v26 = *v24++;
        (*(void (**)(uint64_t, llvm::raw_ostream *))(*(void *)v26 + 24))(v26, a2);
        v25 -= 8;
      }
      while (v25);
    }
    goto LABEL_19;
  }
  llvm::raw_ostream::write(a2, 123);
  uint64_t v20 = v29;
  if (v29) {
    goto LABEL_18;
  }
LABEL_19:
  unint64_t v22 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v22 >= *((void *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 125);
    int v23 = __base;
    if (__base == v30) {
      return;
    }
  }
  else
  {
    *((void *)a2 + 4) = v22 + 1;
    *unint64_t v22 = 125;
    int v23 = __base;
    if (__base == v30) {
      return;
    }
  }
  free(v23);
}

uint64_t llvm::cl::OptionValue<mlir::OpPassManager>::~OptionValue(uint64_t a1)
{
  uint64_t v2 = *(mlir::OpPassManager **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2)
  {
    mlir::OpPassManager::~OpPassManager(v2);
    operator delete(v3);
  }
  return a1;
}

void mlir::parsePassPipeline(const char *a1@<X0>, size_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a1;
  size_t v27 = a2;
  unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v26, " \t\n\v\f\r", 6, 0);
  if (first_not_of >= v27) {
    unint64_t v7 = v27;
  }
  else {
    unint64_t v7 = first_not_of;
  }
  size_t v8 = v27 - v7;
  uint64_t v28 = (char *)&v26[v7];
  unint64_t v29 = v27 - v7;
  uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v28, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  unint64_t v10 = v28;
  if (last_not_of + 1 < v29) {
    unint64_t v11 = last_not_of + 1;
  }
  else {
    unint64_t v11 = v29;
  }
  size_t v12 = v29 - v8 + v11;
  if (v29 >= v12) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v29;
  }
  uint64_t v26 = v28;
  size_t v27 = v13;
  if (v13
    && ((uint64_t v14 = memchr(v28, 40, v13)) == 0 ? (v15 = -1) : (v15 = v14 - v10),
        (unint64_t v16 = v15 + 1, v15 + 1 >= 2) && v10[v13 - 1] == 41))
  {
    size_t v17 = v13 - 1;
    if (v13 < v13 - 1) {
      size_t v17 = v13;
    }
    size_t v27 = v17;
    uint64_t v28 = v10;
    if (v17 <= v15) {
      unint64_t v18 = v17;
    }
    else {
      unint64_t v18 = v14 - v10;
    }
    unint64_t v29 = v18;
    uint64_t v19 = llvm::StringRef::find_last_not_of(&v28, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
    if (v19 + 1 < v29) {
      unint64_t v20 = v19 + 1;
    }
    else {
      unint64_t v20 = v29;
    }
    unint64_t v21 = v29 - v18 + v20;
    if (v29 >= v21) {
      unint64_t v22 = v21;
    }
    else {
      unint64_t v22 = v29;
    }
    mlir::OpPassManager::OpPassManager(&v28, v28, v22, 1);
    if (v27 >= v16) {
      unint64_t v23 = v16;
    }
    else {
      unint64_t v23 = v27;
    }
    if (mlir::parsePassPipeline(&v26[v23], v27 - v23, (mlir::OpPassManager *)&v28, a3))
    {
      mlir::OpPassManager::OpPassManager((uint64_t *)a4, (uint64_t *)&v28);
      char v24 = 1;
    }
    else
    {
      char v24 = 0;
      *(unsigned char *)a4 = 0;
    }
    *(unsigned char *)(a4 + 8) = v24;
    mlir::OpPassManager::~OpPassManager((mlir::OpPassManager *)&v28);
  }
  else
  {
    uint64_t v25 = (void *)a3[2].n128_u64[0];
    if (a3[1].n128_u64[1] - (unint64_t)v25 > 0x5E)
    {
      qmemcpy(v25, "expected pass pipeline to be wrapped with the anchor operation type, e.g. 'builtin.module(...)'", 95);
      a3[2].n128_u64[0] += 95;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a3, "expected pass pipeline to be wrapped with the anchor operation type, e.g. 'builtin.module(...)'", 0x5FuLL);
    }
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 8) = 0;
  }
}

BOOL llvm::cl::parser<mlir::OpPassManager>::parse(llvm *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, size_t a6, mlir::OpPassManager **a7)
{
  unint64_t v10 = (__n128 *)llvm::errs(a1);
  mlir::parsePassPipeline(a5, a6, v10, (uint64_t)&v16);
  int v11 = v17;
  if (v17)
  {
    size_t v12 = (uint64_t *)operator new(8uLL);
    mlir::OpPassManager::OpPassManager(v12, &v16);
    size_t v13 = *a7;
    *a7 = (mlir::OpPassManager *)v12;
    if (v13)
    {
      mlir::OpPassManager::~OpPassManager(v13);
      operator delete(v14);
    }
    if (v17) {
      mlir::OpPassManager::~OpPassManager((mlir::OpPassManager *)&v16);
    }
  }
  return v11 == 0;
}

llvm::raw_ostream *llvm::cl::parser<mlir::OpPassManager>::print(llvm::raw_ostream *a1, const char **this)
{
  return mlir::OpPassManager::printAsTextualPipeline(this, a1);
}

mlir::OpPassManager **llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager::~ParsedPassManager(mlir::OpPassManager **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    mlir::OpPassManager::~OpPassManager(v2);
    operator delete(v3);
  }
  return a1;
}

BOOL mlir::parsePassPipeline(const char *a1, uint64_t a2, mlir::OpPassManager *a3, __n128 *a4)
{
  v96[4] = *MEMORY[0x1E4F143B8];
  long long __p = 0;
  int v80 = 0;
  uint64_t v81 = 0;
  if (!a2)
  {
LABEL_96:
    uint64_t v85 = a4;
    int Nesting = mlir::OpPassManager::getNesting(a3);
    mlir::OpPassManager::setNesting((uint64_t)a3, 1);
    mlir::OpPassManager::setNesting((uint64_t)a3, Nesting);
    BOOL v68 = v72 != 0;
    unint64_t v69 = (char *)__p;
    if (__p) {
      goto LABEL_97;
    }
    return v68;
  }
  llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)&v85);
  llvm::MemoryBuffer::getMemBuffer((uint64_t)a1, a2, (uint64_t)"MLIR Textual PassPipeline Parser", 32, &v84);
  v96[0] = 0;
  size_t v8 = v84;
  unsigned int v84 = 0;
  __n128 v95 = (__n128)(unint64_t)v8;
  if ((unint64_t)v86 >= v87)
  {
    unint64_t v10 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>(&v85, &v95);
  }
  else
  {
    llvm::SourceMgr::SrcBuffer::SrcBuffer(v86, &v95);
    unint64_t v10 = (__n128 *)(v9 + 24);
  }
  uint64_t v86 = v10;
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v95);
  int v11 = v84;
  unsigned int v84 = 0;
  if (v11) {
    (*(void (**)(char *))(*(void *)v11 + 8))(v11);
  }
  unsigned int v82 = (uint64_t *)&v85;
  uint64_t v83 = (llvm::raw_ostream *)a4;
  int64x2_t v78 = a4;
  unint64_t v90 = a1;
  unint64_t v91 = a2;
  size_t v12 = v96;
  v95.n128_u64[0] = (unint64_t)v96;
  v96[0] = &__p;
  v95.n128_u64[1] = 0x400000001;
  unsigned __int32 v13 = 1;
  uint64_t v14 = " \t\n\v\f\r";
  for (unint64_t i = v96; ; unint64_t i = (void *)v95.n128_u64[0])
  {
LABEL_8:
    uint64_t v16 = (void **)i[v13 - 1];
    unint64_t first_of = llvm::StringRef::find_first_of(&v90, ",(){", 4, 0);
    unint64_t v18 = first_of;
    unint64_t v19 = v91;
    if (v91 >= first_of) {
      unint64_t v19 = first_of;
    }
    uint64_t v88 = v90;
    unint64_t v89 = v19;
    unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v88, v14, 6, 0);
    if (first_not_of >= v89) {
      unint64_t v21 = v89;
    }
    else {
      unint64_t v21 = first_not_of;
    }
    unint64_t v22 = v89 - v21;
    unint64_t v92 = &v88[v21];
    unint64_t v93 = v89 - v21;
    unint64_t v23 = v14;
    uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v92, v14, 6, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v26 = v92;
    if (last_not_of + 1 < v93) {
      unint64_t v27 = last_not_of + 1;
    }
    else {
      unint64_t v27 = v93;
    }
    unint64_t v28 = v93 - v22 + v27;
    if (v93 >= v28) {
      unint64_t v29 = v28;
    }
    else {
      unint64_t v29 = v93;
    }
    uint64_t v31 = (char *)v16[1];
    unint64_t v30 = (unint64_t)v16[2];
    if ((unint64_t)v31 < v30)
    {
      *(void *)uint64_t v31 = v92;
      *((void *)v31 + 1) = v29;
      *((_OWORD *)v31 + 1) = 0u;
      *((_OWORD *)v31 + 2) = 0u;
      uint64_t v32 = v31 + 64;
      *((_OWORD *)v31 + 3) = 0u;
      uint64_t v14 = v23;
      goto LABEL_43;
    }
    unint64_t v76 = a3;
    uint64_t v77 = v12;
    unint64_t v33 = (char *)*v16;
    uint64_t v34 = (v31 - (unsigned char *)*v16) >> 6;
    unint64_t v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 58) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v36 = v30 - (void)v33;
    if (v36 >> 5 > v35) {
      unint64_t v35 = v36 >> 5;
    }
    unint64_t v37 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFC0 ? 0x3FFFFFFFFFFFFFFLL : v35;
    if (v37)
    {
      if (v37 >> 58) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v38 = (char *)operator new(v37 << 6);
    }
    else
    {
      uint64_t v38 = 0;
    }
    uint64_t v39 = &v38[64 * v34];
    *(void *)uint64_t v39 = v26;
    *((void *)v39 + 1) = v29;
    unsigned int v40 = &v38[64 * v37];
    *((_OWORD *)v39 + 1) = 0u;
    *((_OWORD *)v39 + 2) = 0u;
    *((_OWORD *)v39 + 3) = 0u;
    uint64_t v32 = v39 + 64;
    if (v31 == v33)
    {
      *uint64_t v16 = v39;
      v16[1] = v32;
      void v16[2] = v40;
      a3 = v76;
      size_t v12 = v77;
      uint64_t v14 = v23;
      if (v31) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v14 = v23;
      do
      {
        long long v41 = *((_OWORD *)v31 - 4);
        long long v42 = *((_OWORD *)v31 - 3);
        *((void *)v39 - 4) = *((void *)v31 - 4);
        *((_OWORD *)v39 - 4) = v41;
        *((_OWORD *)v39 - 3) = v42;
        *((void *)v39 - 2) = 0;
        *((void *)v39 - 1) = 0;
        *(_OWORD *)(v39 - 24) = *(_OWORD *)(v31 - 24);
        *((void *)v39 - 1) = *((void *)v31 - 1);
        v39 -= 64;
        *((void *)v31 - 3) = 0;
        *((void *)v31 - 2) = 0;
        *((void *)v31 - 1) = 0;
        v31 -= 64;
      }
      while (v31 != v33);
      uint64_t v31 = (char *)*v16;
      size_t v43 = (char *)v16[1];
      *uint64_t v16 = v39;
      v16[1] = v32;
      void v16[2] = v40;
      if (v43 == v31)
      {
        a3 = v76;
      }
      else
      {
        a3 = v76;
        do
        while (v43 != v31);
      }
      size_t v12 = v77;
      if (v31) {
LABEL_42:
      }
        operator delete(v31);
    }
LABEL_43:
    v16[1] = v32;
    if (v18 == -1) {
      goto LABEL_85;
    }
    uint64_t v44 = v90;
    unint64_t v45 = v91 >= v18 ? v18 : v91;
    BOOL v46 = &v90[v45];
    unint64_t v47 = v91 - v45;
    v90 += v45;
    v91 -= v45;
    int v48 = v44[v45];
    if (v48 != 40) {
      break;
    }
    if (v47) {
      uint64_t v62 = v46 + 1;
    }
    else {
      uint64_t v62 = v46;
    }
    unint64_t v90 = v62;
    unint64_t v91 = v47 - (v47 != 0);
    __int16 v63 = (char *)v16[1];
    uint64_t v64 = v95.n128_u32[2];
    if (v95.n128_u32[2] >= (unint64_t)v95.n128_u32[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v12, v95.n128_u32[2] + 1, 8);
      uint64_t v64 = v95.n128_u32[2];
    }
    *(void *)(v95.n128_u64[0] + 8 * v64) = v63 - 24;
    unsigned __int32 v13 = ++v95.n128_u32[2];
  }
  if (v48 != 123) {
    goto LABEL_68;
  }
  if (v47) {
    unint64_t v49 = v46 + 1;
  }
  else {
    unint64_t v49 = v46;
  }
  unint64_t v50 = v47 - (v47 != 0);
  unint64_t v90 = v49;
  unint64_t v91 = v50;
  uint64_t v51 = v47 - (v47 != 0);
  if (v47 == (v47 != 0))
  {
LABEL_84:
    unint64_t v65 = "missing closing '}' while processing pass options";
    BOOL v46 = v49 - 1;
    goto LABEL_90;
  }
  unint64_t v52 = 0;
  int v53 = 1;
  while (2)
  {
    int v54 = v49[v52];
    if (v54 != 125)
    {
      if (v54 == 123) {
        ++v53;
      }
LABEL_56:
      if (v51 == ++v52) {
        goto LABEL_84;
      }
      continue;
    }
    break;
  }
  if (--v53) {
    goto LABEL_56;
  }
  if (v50 >= v52) {
    unint64_t v50 = v52;
  }
  uint64_t v55 = v16[1];
  *(v55 - 6) = v49;
  *(v55 - 5) = v50;
  if (v91 >= v52 + 1) {
    unint64_t v56 = v52 + 1;
  }
  else {
    unint64_t v56 = v91;
  }
  v90 += v56;
  v91 -= v56;
  unint64_t v57 = llvm::StringRef::find_first_not_of(&v90, v14, 6, 0);
  if (v57 >= v91) {
    unint64_t v58 = v91;
  }
  else {
    unint64_t v58 = v57;
  }
  BOOL v46 = &v90[v58];
  unint64_t v47 = v91 - v58;
  v90 += v58;
  v91 -= v58;
LABEL_68:
  if (v47)
  {
    while (1)
    {
      int v59 = *(unsigned __int8 *)v46;
      if (v59 != 41) {
        break;
      }
      unint64_t v90 = v46 + 1;
      unint64_t v91 = v47 - 1;
      if (v95.n128_u32[2] == 1)
      {
        unint64_t v65 = "encountered extra closing ')' creating unbalanced parentheses while parsing pipeline";
        goto LABEL_90;
      }
      --v95.n128_u32[2];
      unint64_t v60 = llvm::StringRef::find_first_not_of(&v90, v14, 6, 0);
      if (v60 >= v91) {
        unint64_t v61 = v91;
      }
      else {
        unint64_t v61 = v60;
      }
      BOOL v46 = &v90[v61];
      unint64_t v47 = v91 - v61;
      v90 += v61;
      unint64_t v91 = v47;
      if (!v47) {
        goto LABEL_85;
      }
    }
    if (v59 == 44)
    {
      unint64_t v90 = v46 + 1;
      unint64_t v91 = v47 - 1;
      unsigned __int32 v13 = v95.n128_u32[2];
      unint64_t i = (void *)v95.n128_u64[0];
      goto LABEL_8;
    }
    unint64_t v65 = "expected ',' after parsing pipeline";
LABEL_90:
    unint64_t v92 = v65;
    __int16 v94 = 259;
    int v66 = 1;
    llvm::SourceMgr::PrintMessage(v82, v83, v46, 0, (llvm::Twine *)&v92, 0, 0, v25, 0, 0, 1);
    a4 = v78;
    uint64_t v67 = (void *)v95.n128_u64[0];
    if ((void *)v95.n128_u64[0] != v12) {
LABEL_91:
    }
      free(v67);
    goto LABEL_92;
  }
LABEL_85:
  a4 = v78;
  if (v95.n128_u32[2] < 2)
  {
    int v66 = 0;
    uint64_t v67 = (void *)v95.n128_u64[0];
    if ((void *)v95.n128_u64[0] != v12) {
      goto LABEL_91;
    }
  }
  else
  {
    unint64_t v92 = "encountered unbalanced parentheses while parsing pipeline";
    __int16 v94 = 259;
    int v66 = 1;
    llvm::SourceMgr::PrintMessage(v82, v83, v90, 0, (llvm::Twine *)&v92, 0, 0, v25, 0, 0, 1);
    uint64_t v67 = (void *)v95.n128_u64[0];
    if ((void *)v95.n128_u64[0] != v12) {
      goto LABEL_91;
    }
  }
LABEL_92:
  if (!v66)
  {
    llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)&v85);
    if (!v70)
    {
      BOOL v68 = 0;
      unint64_t v69 = (char *)__p;
      if (!__p) {
        return v68;
      }
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)&v85);
  BOOL v68 = 0;
  unint64_t v69 = (char *)__p;
  if (!__p) {
    return v68;
  }
LABEL_97:
  unsigned int v73 = v80;
  unint64_t v74 = v69;
  if (v80 != v69)
  {
    do
    while (v73 != v69);
    unint64_t v74 = __p;
  }
  int v80 = v69;
  operator delete(v74);
  return v68;
}

const char *llvm::cl::parser<mlir::OpPassManager>::getValueName()
{
  return "pass-manager";
}

uint64_t mlir::detail::PassOptions::print(llvm::raw_ostream &)::$_0::__invoke(void *a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 32))(*a1);
  uint64_t v4 = *(const void **)(v3 + 16);
  size_t v5 = *(void *)(v3 + 24);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a2 + 32))();
  size_t v7 = *(void *)(v6 + 24);
  if (v7 >= v5) {
    size_t v8 = v5;
  }
  else {
    size_t v8 = *(void *)(v6 + 24);
  }
  if (v8)
  {
    int v9 = memcmp(v4, *(const void **)(v6 + 16), v8);
    if (v9) {
      return (v9 >> 31) | 1u;
    }
  }
  if (v5 < v7) {
    unsigned int v11 = -1;
  }
  else {
    unsigned int v11 = 1;
  }
  if (v5 == v7) {
    return 0;
  }
  else {
    return v11;
  }
}

uint64_t anonymous namespace'::TextualPipeline::resolvePipelineElements(uint64_t a1, uint64_t a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4)
{
  if (!a2) {
    return 1;
  }
  uint64_t v6 = a2 << 6;
  for (unint64_t i = (void *)(a1 + 32); i[1] != i[2]; i += 8)
  {
      return 0;
LABEL_4:
    v6 -= 64;
    if (!v6) {
      return 1;
    }
  }
  size_t v8 = (int8x16_t *)*(i - 4);
  int v9 = (const unsigned __int8 *)*(i - 3);
  if (!atomic_load_explicit(_MergedGlobals_43, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)_MergedGlobals_43, (void *(*)(void))llvm::object_creator<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call, (void (*)(void *))llvm::object_deleter<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call);
  }
  uint64_t v10 = _MergedGlobals_43[0];
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)_MergedGlobals_43[0], v8, v9);
  uint64_t v12 = *(void *)v10;
  if (Key != -1)
  {
    uint64_t v13 = Key;
    if (atomic_load_explicit(_MergedGlobals_43, memory_order_acquire)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v13 = *(unsigned int *)(v10 + 8);
  if (!atomic_load_explicit(_MergedGlobals_43, memory_order_acquire)) {
LABEL_12:
  }
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)_MergedGlobals_43, (void *(*)(void))llvm::object_creator<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call, (void (*)(void *))llvm::object_deleter<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call);
LABEL_13:
  uint64_t v14 = (void *)(v12 + 8 * v13);
  if (v14 != (void *)(*(void *)_MergedGlobals_43[0] + 8 * *(unsigned int *)(_MergedGlobals_43[0] + 8)))
  {
LABEL_3:
    *unint64_t i = *v14 + 8;
    goto LABEL_4;
  }
  *unint64_t i = 0;
  unint64_t v15 = (int8x16_t *)*(i - 4);
  uint64_t v16 = (const unsigned __int8 *)*(i - 3);
  if (!atomic_load_explicit(qword_1EB215B30, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EB215B30, (void *(*)(void))llvm::object_creator<llvm::StringMap<mlir::PassInfo,llvm::MallocAllocator>>::call, (void (*)(void *))llvm::object_deleter<llvm::StringMap<mlir::PassInfo,llvm::MallocAllocator>>::call);
  }
  uint64_t v17 = qword_1EB215B30[0];
  int v18 = llvm::StringMapImpl::FindKey((uint64_t *)qword_1EB215B30[0], v15, v16);
  uint64_t v19 = *(void *)v17;
  if (v18 != -1)
  {
    uint64_t v20 = v18;
    if (atomic_load_explicit(qword_1EB215B30, memory_order_acquire)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v20 = *(unsigned int *)(v17 + 8);
  if (!atomic_load_explicit(qword_1EB215B30, memory_order_acquire)) {
LABEL_18:
  }
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EB215B30, (void *(*)(void))llvm::object_creator<llvm::StringMap<mlir::PassInfo,llvm::MallocAllocator>>::call, (void (*)(void *))llvm::object_deleter<llvm::StringMap<mlir::PassInfo,llvm::MallocAllocator>>::call);
LABEL_19:
  uint64_t v14 = (void *)(v19 + 8 * v20);
  if (v14 != (void *)(*(void *)qword_1EB215B30[0] + 8 * *(unsigned int *)(qword_1EB215B30[0] + 8))) {
    goto LABEL_3;
  }
  *unint64_t i = 0;
  uint64_t v21 = *(i - 4);
  __int16 v24 = 1283;
  v23[0] = "'";
  unint64_t v23[2] = v21;
  v23[3] = *(i - 3);
  unint64_t v27 = v23;
  unint64_t v28 = "' does not refer to a registered pass or pass pipeline";
  __int16 v29 = 770;
  int v30 = v25;
  __int16 v31 = v26;
  if (a3(a4)) {
    goto LABEL_4;
  }
  return 0;
}

void anonymous namespace'::TextualPipeline::PipelineElement::~PipelineElement(_anonymous_namespace_::TextualPipeline::PipelineElement *this)
{
  uint64_t v2 = (char *)*((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = (char *)*((void *)this + 6);
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
      while (v3 != v2);
      uint64_t v4 = (char *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(char const*,llvm::Twine)>::callback_fn<anonymous namespace'::TextualPipeline::initialize(llvm::StringRef,llvm::raw_ostream &)::$_0>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v8;
  uint64_t v11 = *(void *)(a3 + 32);
  llvm::SourceMgr::PrintMessage(*(uint64_t **)a1, *(llvm::raw_ostream **)(a1 + 8), a2, 0, (llvm::Twine *)v10, 0, 0, a8, 0, 0, 1);
  return 0;
}

uint64_t anonymous namespace'::TextualPipeline::addToPipeline(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, long long *), uint64_t a5)
{
  if (!a2) {
    return 1;
  }
  long long v8 = (uint64_t *)(a1 + 24);
  uint64_t v9 = a2 << 6;
  while (1)
  {
    uint64_t v13 = v8[1];
    if (v13) {
      break;
    }
    uint64_t v10 = v8[2];
    uint64_t v11 = (v8[3] - v10) >> 6;
    uint64_t v12 = mlir::OpPassManager::nest(a3, (unsigned char *)*(v8 - 3), *(v8 - 2));
    {
      __int16 v24 = 1283;
      uint64_t v22 = *(v8 - 3);
      uint64_t v23 = *(v8 - 2);
      v25[0] = v21;
      __int16 v27 = 770;
      uint64_t v20 = *(v8 - 1);
      uint64_t v19 = *v8;
      v28[0] = v25;
      uint64_t v29 = v20;
      uint64_t v30 = v19;
      __int16 v31 = 1282;
      goto LABEL_11;
    }
LABEL_4:
    v8 += 8;
    v9 -= 64;
    if (!v9) {
      return 1;
    }
  }
  long long v32 = *(_OWORD *)(v8 - 1);
  v28[0] = a4;
  v28[1] = a5;
  uint64_t v14 = *(void *)(v13 + 72);
  if (v14)
  {
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, long long *, void *))(*(void *)v14 + 48))(v14, a3, &v32, v28))
    {
      __int16 v24 = 1283;
      uint64_t v22 = *(v8 - 3);
      uint64_t v23 = *(v8 - 2);
      v25[0] = v21;
      __int16 v27 = 770;
      uint64_t v16 = *(v8 - 1);
      uint64_t v15 = *v8;
      v28[0] = v25;
      uint64_t v29 = v16;
      uint64_t v30 = v15;
      __int16 v31 = 1282;
LABEL_11:
      *(void *)&long long v32 = v28;
      unint64_t v33 = v17;
      __int16 v34 = 770;
      return a4(a5, &v32);
    }
    goto LABEL_4;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (uint64_t)llvm::object_creator<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call();
}

void *llvm::object_creator<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call()
{
  uint64_t result = operator new(0x18uLL);
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0x7800000000;
  return result;
}

void llvm::object_deleter<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call(uint64_t a1)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      uint64_t v2 = *(unsigned int *)(a1 + 8);
      if (v2)
      {
        uint64_t v3 = 0;
        do
        {
          uint64_t v4 = *(llvm **)(*(void *)a1 + v3);
          if (v4 != (llvm *)-8 && v4 != 0) {
            llvm::StringMapEntry<mlir::PassPipelineInfo>::Destroy<llvm::MallocAllocator>(v4);
          }
          v3 += 8;
        }
        while (8 * v2 != v3);
      }
    }
    free(*(void **)a1);
    operator delete((void *)a1);
  }
}

void llvm::StringMapEntry<mlir::PassPipelineInfo>::Destroy<llvm::MallocAllocator>(llvm *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (char *)this + 88;
  uint64_t v4 = (char *)*((void *)this + 14);
  if (v4 == v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 32))(v3);
    size_t v5 = (char *)this + 56;
    uint64_t v6 = (llvm *)*((void *)this + 10);
    if (v6 != (llvm *)((char *)this + 56)) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v4) {
      (*(void (**)(char *))(*(void *)v4 + 40))(v4);
    }
    size_t v5 = (char *)this + 56;
    uint64_t v6 = (llvm *)*((void *)this + 10);
    if (v6 != (llvm *)((char *)this + 56))
    {
LABEL_5:
      if (v6) {
        (*(void (**)(llvm *))(*(void *)v6 + 40))(v6);
      }
      if ((*((char *)this + 55) & 0x80000000) == 0)
      {
LABEL_8:
        if ((*((char *)this + 31) & 0x80000000) == 0) {
          goto LABEL_9;
        }
LABEL_15:
        operator delete(*((void **)this + 1));
LABEL_9:
        llvm::deallocate_buffer(this, (void *)(v2 + 121));
      }
LABEL_14:
      operator delete(*((void **)this + 4));
      if ((*((char *)this + 31) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  (*(void (**)(char *))(*(void *)v5 + 32))(v5);
  if ((*((char *)this + 55) & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_14;
}

void *llvm::object_creator<llvm::StringMap<mlir::PassInfo,llvm::MallocAllocator>>::call()
{
  uint64_t result = operator new(0x18uLL);
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0x7800000000;
  return result;
}

void llvm::object_deleter<llvm::StringMap<mlir::PassInfo,llvm::MallocAllocator>>::call(uint64_t a1)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      uint64_t v2 = *(unsigned int *)(a1 + 8);
      if (v2)
      {
        uint64_t v3 = 0;
        do
        {
          uint64_t v4 = *(llvm **)(*(void *)a1 + v3);
          if (v4 != (llvm *)-8 && v4 != 0) {
            llvm::StringMapEntry<mlir::PassPipelineInfo>::Destroy<llvm::MallocAllocator>(v4);
          }
          v3 += 8;
        }
        while (8 * v2 != v3);
      }
    }
    free(*(void **)a1);
    operator delete((void *)a1);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<unsigned long,llvm::StringRef,unsigned long,char>::CallImpl<mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  if (a3 <= a4) {
    return -1;
  }
  int v8 = a5;
  while (1)
  {
    int v10 = *(unsigned __int8 *)(a2 + a4);
    if (v10 == v8) {
      return a4;
    }
    if (*(unsigned __int8 *)(a2 + a4) <= 0x27u)
    {
      if (v10 == 34)
      {
        size_t v11 = a3 - (a4 + 1);
        if (a3 > a4 + 1)
        {
          uint64_t v12 = (void *)(a2 + a4 + 1);
          int v13 = 34;
LABEL_19:
          uint64_t v14 = memchr(v12, v13, v11);
          if (v14) {
            a4 = (unint64_t)v14 - a2;
          }
          else {
            a4 = -1;
          }
          goto LABEL_4;
        }
        goto LABEL_22;
      }
      if (v10 == 39)
      {
        size_t v11 = a3 - (a4 + 1);
        if (a3 > a4 + 1)
        {
          uint64_t v12 = (void *)(a2 + a4 + 1);
          int v13 = 39;
          goto LABEL_19;
        }
LABEL_22:
        a4 = -1;
      }
    }
    else
    {
      switch(v10)
      {
        case '(':
          uint64_t v9 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 24) & 0xFFFFFFFFFFFFFFF8);
          break;
        case '[':
          uint64_t v9 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 24) & 0xFFFFFFFFFFFFFFF8);
          break;
        case '{':
          uint64_t v9 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 24) & 0xFFFFFFFFFFFFFFF8);
          break;
        default:
          goto LABEL_4;
      }
      a4 = v9();
    }
LABEL_4:
    if (++a4 >= a3) {
      return -1;
    }
  }
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(llvm::Twine const&)>::callback_fn<mlir::parsePassPipeline(llvm::StringRef,mlir::OpPassManager &,llvm::raw_ostream &)::$_0>(llvm::raw_ostream **a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v2;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v3 = *a1;
  llvm::Twine::print((llvm::Twine *)v6, *a1);
  uint64_t v4 = (unsigned char *)*((void *)v3 + 4);
  if (*((unsigned char **)v3 + 3) == v4)
  {
    llvm::raw_ostream::write(v3, "\n", 1uLL);
  }
  else
  {
    unsigned char *v4 = 10;
    ++*((void *)v3 + 4);
  }
  return 0;
}

void llvm::cl::alias::done(llvm::cl::alias *this)
{
  uint64_t v1 = this;
  if (*((void *)this + 3))
  {
    if (*((void *)this + 16)) {
      goto LABEL_3;
    }
  }
  else
  {
    v11[0] = "cl::alias must have argument name specified!";
    __int16 v12 = 259;
    uint64_t v3 = (llvm::raw_ostream *)llvm::errs(this);
    this = (llvm::cl::alias *)llvm::cl::Option::error(v1, (llvm::Twine *)v11, 0, 0, v3);
    if (*((void *)v1 + 16))
    {
LABEL_3:
      if (*((_DWORD *)v1 + 27) == *((_DWORD *)v1 + 28)) {
        goto LABEL_4;
      }
LABEL_8:
      v11[0] = "cl::alias must not have cl::sub(), aliased option's cl::sub() will be used!";
      __int16 v12 = 259;
      size_t v5 = (llvm::raw_ostream *)llvm::errs(this);
      llvm::cl::Option::error(v1, (llvm::Twine *)v11, 0, 0, v5);
      uint64_t v2 = *((void *)v1 + 16);
      if ((llvm::cl::alias *)v2 == v1) {
        goto LABEL_20;
      }
      goto LABEL_9;
    }
  }
  v11[0] = "cl::alias must have an cl::aliasopt(option) specified!";
  __int16 v12 = 259;
  uint64_t v4 = (llvm::raw_ostream *)llvm::errs(this);
  this = (llvm::cl::alias *)llvm::cl::Option::error(v1, (llvm::Twine *)v11, 0, 0, v4);
  if (*((_DWORD *)v1 + 27) != *((_DWORD *)v1 + 28)) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v2 = *((void *)v1 + 16);
  if ((llvm::cl::alias *)v2 == v1) {
    goto LABEL_20;
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::CopyFrom((llvm::cl::alias *)((char *)v1 + 88), (const llvm::SmallPtrSetImplBase *)(v2 + 88));
  uint64_t v6 = *((void *)v1 + 16);
  if ((llvm::cl::alias *)v6 != v1)
  {
    uint64_t v7 = (void **)((char *)v1 + 64);
    unint64_t v8 = *(unsigned int *)(v6 + 72);
    uint64_t v9 = *((unsigned int *)v1 + 18);
    if (v9 >= v8)
    {
      if (v8) {
        memmove(*v7, *(const void **)(v6 + 64), 8 * v8);
      }
      goto LABEL_19;
    }
    if (*((_DWORD *)v1 + 19) >= v8)
    {
      if (v9)
      {
        memmove(*v7, *(const void **)(v6 + 64), 8 * v9);
        uint64_t v10 = *(unsigned int *)(v6 + 72);
        if (v9 == v10)
        {
LABEL_19:
          *((_DWORD *)v1 + 18) = v8;
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(unsigned int *)(v6 + 72);
        if (!*(_DWORD *)(v6 + 72)) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      *((_DWORD *)v1 + 18) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1 + 64, (char *)v1 + 80, v8, 8);
      uint64_t v9 = 0;
      uint64_t v10 = *(unsigned int *)(v6 + 72);
      if (!*(_DWORD *)(v6 + 72)) {
        goto LABEL_19;
      }
    }
    memcpy((char *)*v7 + 8 * v9, (const void *)(*(void *)(v6 + 64) + 8 * v9), 8 * v10 - 8 * v9);
    goto LABEL_19;
  }
LABEL_20:
  llvm::cl::Option::addArgument(v1);
}

mlir::Pass::Statistic *mlir::Pass::Statistic::Statistic(mlir::Pass::Statistic *this, mlir::Pass *a2, const char *a3, const char *a4)
{
  uint64_t v7 = (char *)*((void *)a2 + 17);
  unint64_t v6 = *((void *)a2 + 18);
  unint64_t v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    *(void *)uint64_t v7 = this;
    uint64_t v9 = (uint64_t)(v7 + 8);
    goto LABEL_23;
  }
  uint64_t v10 = (char *)*((void *)a2 + 16);
  uint64_t v11 = (v7 - v10) >> 3;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61) {
    abort();
  }
  uint64_t v13 = v6 - (void)v10;
  if (v13 >> 2 > v12) {
    unint64_t v12 = v13 >> 2;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = (char *)operator new(8 * v14);
    uint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = this;
    uint64_t v9 = (uint64_t)(v16 + 8);
    int v18 = (char *)(v7 - v10);
    if (v7 == v10) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v15 = 0;
  uint64_t v16 = (char *)(8 * v11);
  uint64_t v17 = 0;
  *(void *)(8 * v11) = this;
  uint64_t v9 = 8 * v11 + 8;
  int v18 = (char *)(v7 - v10);
  if (v7 != v10)
  {
LABEL_14:
    unint64_t v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v10 - v15) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v8 = &v7[-v21];
    v16 -= v21;
    uint64_t v22 = &v15[8 * v11 - 16];
    uint64_t v23 = (long long *)(v7 - 16);
    uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *v23;
      *((_OWORD *)v22 - 1) = *(v23 - 1);
      *(_OWORD *)uint64_t v22 = v25;
      v22 -= 32;
      v23 -= 2;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v26 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v16 - 1) = v26;
        v16 -= 8;
      }
      while (v8 != v10);
    }
    unint64_t v8 = (char *)*((void *)a2 + 16);
  }
LABEL_21:
  *((void *)a2 + 16) = v16;
  *((void *)a2 + 17) = v9;
  *((void *)a2 + 18) = v17;
  if (v8) {
    operator delete(v8);
  }
LABEL_23:
  *((void *)a2 + 17) = v9;
  return this;
}

void mlir::OpPassManager::mergeStatisticsInto(mlir::OpPassManager *this, mlir::OpPassManager *a2)
{
  uint64_t v4 = mlir::OpPassManager::begin(this);
  uint64_t MemorySpace = mlir::MemRefType::getMemorySpace(this);
  unint64_t v6 = (uint64_t *)mlir::OpPassManager::begin(a2);
  uint64_t v7 = mlir::MemRefType::getMemorySpace(a2);
  if (v4 != MemorySpace)
  {
    unint64_t v8 = (uint64_t *)v7;
    if ((uint64_t *)v7 != v6)
    {
      do
      {
        uint64_t v9 = *(void *)v4;
        uint64_t v10 = *v6;
        uint64_t v11 = *(void *)(*(void *)v4 + 8);
        {
          __int16 v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
          unint64_t v28 = 81;
          unint64_t v20 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
          if (v28 >= v20) {
            unint64_t v21 = v20;
          }
          else {
            unint64_t v21 = v28;
          }
          uint64_t v22 = &v27[v21];
          unint64_t v23 = v28 - v21;
          uint64_t v24 = 18;
          if (v23 < 0x12) {
            uint64_t v24 = v23;
          }
          unint64_t v25 = v23 - v24;
          if (v25 >= v25 - 1) {
            uint64_t v26 = v25 - 1;
          }
          else {
            uint64_t v26 = v25;
          }
          mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
        }
        if (v11 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
        {
          uint64_t v12 = *(unsigned int *)(v9 + 352);
          uint64_t v13 = *(unsigned int *)(v10 + 352);
          if (v12 && v13 != 0)
          {
            uint64_t v15 = *(mlir::OpPassManager **)(v9 + 344);
            uint64_t v16 = *(mlir::OpPassManager **)(v10 + 344);
            uint64_t v17 = 8 * v13 - 8;
            uint64_t v18 = 8 * v12 - 8;
            do
            {
              mlir::OpPassManager::mergeStatisticsInto(v15, v16);
              if (!v18) {
                break;
              }
              uint64_t v15 = (mlir::OpPassManager *)((char *)v15 + 8);
              uint64_t v16 = (mlir::OpPassManager *)((char *)v16 + 8);
              uint64_t v19 = v17;
              v17 -= 8;
              v18 -= 8;
            }
            while (v19);
          }
        }
        v4 += 8;
        if (v4 == MemorySpace) {
          break;
        }
        ++v6;
      }
      while (v6 != v8);
    }
  }
}

llvm::raw_ostream *mlir::PassManager::dumpStatistics(mlir::PassManager *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  prepareStatistics(this);
  int v2 = *((_DWORD *)this + 4);
  llvm::CreateInfoOutputFile(&v25);
  uint64_t v3 = v25;
  uint64_t v4 = *((void *)v25 + 4);
  if ((unint64_t)(*((void *)v25 + 3) - v4) > 2)
  {
    *(unsigned char *)(v4 + 2) = 61;
    *(_WORD *)uint64_t v4 = 15677;
    *((void *)v3 + 4) += 3;
  }
  else
  {
    uint64_t v3 = llvm::raw_ostream::write(v25, "===", 3uLL);
  }
  size_t v5 = operator new(0x50uLL);
  *(void *)&long long v6 = 0x2D2D2D2D2D2D2D2DLL;
  *((void *)&v6 + 1) = 0x2D2D2D2D2D2D2D2DLL;
  *size_t v5 = v6;
  v5[1] = v6;
  void v5[2] = v6;
  v5[3] = v6;
  *(_OWORD *)((char *)v5 + 57) = v6;
  *((unsigned char *)v5 + 73) = 0;
  uint64_t v7 = llvm::raw_ostream::write(v3, (const char *)v5, 0x49uLL);
  unint64_t v8 = (_DWORD *)*((void *)v7 + 4);
  if (*((void *)v7 + 3) - (void)v8 > 3uLL)
  {
    _DWORD *v8 = 171785533;
    *((void *)v7 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v7, "===\n", 4uLL);
  }
  operator delete(v5);
  uint64_t v9 = llvm::raw_ostream::indent(v25, 0x19u);
  uint64_t v10 = (void *)*((void *)v9 + 4);
  if (*((void *)v9 + 3) - (void)v10 <= 0x1DuLL)
  {
    uint64_t v9 = llvm::raw_ostream::write(v9, "... Pass statistics report ...", 0x1EuLL);
    uint64_t v11 = (unsigned char *)*((void *)v9 + 4);
    if ((unint64_t)v11 >= *((void *)v9 + 3)) {
      goto LABEL_9;
    }
LABEL_12:
    *((void *)v9 + 4) = v11 + 1;
    *uint64_t v11 = 10;
    uint64_t v12 = v25;
    uint64_t v13 = *((void *)v25 + 4);
    if ((unint64_t)(*((void *)v25 + 3) - v13) > 2) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  qmemcpy(v10, "... Pass statistics report ...", 30);
  unint64_t v14 = *((void *)v9 + 3);
  uint64_t v11 = (unsigned char *)(*((void *)v9 + 4) + 30);
  *((void *)v9 + 4) = v11;
  if ((unint64_t)v11 < v14) {
    goto LABEL_12;
  }
LABEL_9:
  llvm::raw_ostream::write(v9, 10);
  uint64_t v12 = v25;
  uint64_t v13 = *((void *)v25 + 4);
  if ((unint64_t)(*((void *)v25 + 3) - v13) > 2)
  {
LABEL_10:
    *(unsigned char *)(v13 + 2) = 61;
    *(_WORD *)uint64_t v13 = 15677;
    *((void *)v12 + 4) += 3;
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v12 = llvm::raw_ostream::write(v12, "===", 3uLL);
LABEL_14:
  uint64_t v15 = operator new(0x50uLL);
  *(void *)&long long v16 = 0x2D2D2D2D2D2D2D2DLL;
  *((void *)&v16 + 1) = 0x2D2D2D2D2D2D2D2DLL;
  *uint64_t v15 = v16;
  v15[1] = v16;
  v15[2] = v16;
  void v15[3] = v16;
  *(_OWORD *)((char *)v15 + 57) = v16;
  *((unsigned char *)v15 + 73) = 0;
  uint64_t v17 = llvm::raw_ostream::write(v12, (const char *)v15, 0x49uLL);
  uint64_t v18 = (_DWORD *)*((void *)v17 + 4);
  if (*((void *)v17 + 3) - (void)v18 > 3uLL)
  {
    *uint64_t v18 = 171785533;
    *((void *)v17 + 4) += 4;
    operator delete(v15);
    if (v2) {
      goto LABEL_25;
    }
  }
  else
  {
    llvm::raw_ostream::write(v17, "===\n", 4uLL);
    operator delete(v15);
    if (v2) {
      goto LABEL_25;
    }
  }
  v27[0] = &unk_1EC9CEB28;
  v27[1] = v27;
  unint64_t v28 = v27;
  uint64_t v19 = (uint64_t *)mlir::OpPassManager::begin(this);
  uint64_t MemorySpace = mlir::MemRefType::getMemorySpace(this);
  if (v19 != (uint64_t *)MemorySpace)
  {
    unint64_t v21 = (uint64_t *)MemorySpace;
    do
    {
      uint64_t v26 = *v19;
      if (!v28) {
        std::__throw_bad_function_call[abi:nn180100]();
      }
      (*(void (**)(void *, uint64_t *))(*v28 + 48))(v28, &v26);
      ++v19;
    }
    while (v19 != v21);
  }
  if (v28 != v27)
  {
    if (v28) {
      (*(void (**)(void))(*v28 + 40))();
    }
LABEL_25:
    uint64_t v22 = v25;
    unint64_t v23 = (unsigned char *)*((void *)v25 + 4);
    if (*((unsigned char **)v25 + 3) != v23) {
      goto LABEL_26;
    }
    goto LABEL_30;
  }
  (*(void (**)(void *))(v27[0] + 32))(v27);
  uint64_t v22 = v25;
  unint64_t v23 = (unsigned char *)*((void *)v25 + 4);
  if (*((unsigned char **)v25 + 3) != v23)
  {
LABEL_26:
    unsigned char *v23 = 10;
    ++*((void *)v22 + 4);
    uint64_t result = v25;
    if (*((void *)v25 + 4) != *((void *)v25 + 2)) {
      goto LABEL_27;
    }
LABEL_31:
    unint64_t v25 = 0;
    return (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)result + 8))(result);
  }
LABEL_30:
  llvm::raw_ostream::write(v22, "\n", 1uLL);
  uint64_t result = v25;
  if (*((void *)v25 + 4) == *((void *)v25 + 2)) {
    goto LABEL_31;
  }
LABEL_27:
  llvm::raw_ostream::flush_nonempty(result);
  uint64_t result = v25;
  unint64_t v25 = 0;
  if (result) {
    return (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)result + 8))(result);
  }
  return result;
}

void prepareStatistics(mlir::OpPassManager *a1)
{
  uint64_t v2 = mlir::OpPassManager::begin(a1);
  uint64_t MemorySpace = mlir::MemRefType::getMemorySpace(a1);
  if (v2 != MemorySpace)
  {
    uint64_t v4 = MemorySpace;
    do
    {
      uint64_t v5 = *(void *)v2;
      uint64_t v6 = *(void *)(*(void *)v2 + 8);
      {
        unint64_t v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
        unint64_t v24 = 81;
        unint64_t v16 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
        if (v24 >= v16) {
          unint64_t v17 = v16;
        }
        else {
          unint64_t v17 = v24;
        }
        uint64_t v18 = &v23[v17];
        unint64_t v19 = v24 - v17;
        uint64_t v20 = 18;
        if (v19 < 0x12) {
          uint64_t v20 = v19;
        }
        unint64_t v21 = v19 - v20;
        if (v21 >= v21 - 1) {
          uint64_t v22 = v21 - 1;
        }
        else {
          uint64_t v22 = v21;
        }
        mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v18[v20], v22);
      }
      if (v6 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
      {
        uint64_t v7 = *(mlir::OpPassManager **)(v5 + 344);
        uint64_t v8 = *(unsigned int *)(v5 + 352);
        unsigned int v9 = *(_DWORD *)(v5 + 376);
        if (v9)
        {
          uint64_t v10 = *(void *)(v5 + 368);
          uint64_t v11 = v10 + 24 * v9;
          do
          {
            uint64_t v12 = *(unsigned int *)(v10 + 8);
            if (v12)
            {
              uint64_t v13 = 0;
              uint64_t v14 = 8 * v12;
              do
              {
                prepareStatistics((mlir::OpPassManager *)(*(void *)v10 + v13));
                mlir::OpPassManager::mergeStatisticsInto((mlir::OpPassManager *)(*(void *)v10 + v13), (mlir::OpPassManager *)((char *)v7 + v13));
                v13 += 8;
              }
              while (v14 != v13);
            }
            v10 += 24;
          }
          while (v10 != v11);
        }
        if (v8)
        {
          uint64_t v15 = 8 * v8;
          do
          {
            prepareStatistics(v7);
            uint64_t v7 = (mlir::OpPassManager *)((char *)v7 + 8);
            v15 -= 8;
          }
          while (v15);
        }
      }
      v2 += 8;
    }
    while (v2 != v4);
  }
}

void *std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EC9CEB28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EC9CEB28;
  a2[1] = v2;
  return result;
}

void std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(const char ***)(*a2 + 8);
  unint64_t v5 = 0x1E8EB8000uLL;
  while (v4 == *(const char ***)(v5 + 2968))
  {
    uint64_t v6 = *(unsigned int *)(v3 + 352);
    if (!v6) {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 344);
    uint64_t v7 = v3 + 8 * v6;
    while (1)
    {
      uint64_t v4 = (const char **)mlir::OpPassManager::begin((mlir::OpPassManager *)v3);
      uint64_t MemorySpace = mlir::MemRefType::getMemorySpace((mlir::MemRefType *)v3);
      if (v4 != (const char **)MemorySpace) {
        break;
      }
LABEL_6:
      v3 += 8;
      if (v3 == v7) {
        return;
      }
    }
    unint64_t v5 = MemorySpace;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v18 = *v4;
      uint64_t v10 = *(void *)(v9 + 24);
      if (!v10) {
        break;
      }
      (*(void (**)(uint64_t, const char **))(*(void *)v10 + 48))(v10, &v18);
      if (++v4 == (const char **)v5) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_13:
    {
      uint64_t v18 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      unint64_t v19 = 81;
      unint64_t v11 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
      if (v19 >= v11) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = v19;
      }
      uint64_t v13 = &v18[v12];
      unint64_t v14 = v19 - v12;
      if (v19 - v12 >= 0x12) {
        uint64_t v15 = 18;
      }
      else {
        uint64_t v15 = v19 - v12;
      }
      unint64_t v16 = v14 - v15;
      if (v16 >= v16 - 1) {
        uint64_t v17 = v16 - 1;
      }
      else {
        uint64_t v17 = v16;
      }
      *(void *)(v5 + 2968) = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
    }
  }
}

uint64_t std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::target_type()
{
}

char *mlir::PassManager::enableTiming(mlir::PassManager *this)
{
  uint64_t v2 = (mlir::DefaultTimingManager *)operator new(0x18uLL);
  uint64_t v3 = mlir::DefaultTimingManager::DefaultTimingManager(v2);
  mlir::DefaultTimingManager::setEnabled(v3, 1);
  if (mlir::TimingManager::getRootTimer(v2))
  {
    uint64_t v4 = (char *)operator new(0x58uLL);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)uint64_t v4 = &unk_1EC997558;
    *((_DWORD *)v4 + 6) = 0;
    *((void *)v4 + 4) = 0;
    *((void *)v4 + 5) = 0;
    *((_DWORD *)v4 + 12) = 0;
    *((void *)v4 + 7) = v2;
    mlir::TimingManager::getRootScope(v2, (mlir::TimingManager **)v4 + 8);
    *((void *)v4 + 10) = v4 + 64;
    uint64_t v7 = v4;
    mlir::PassManager::addInstrumentation((uint64_t)this, (uint64_t *)&v7);
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result) {
      return (char *)(*(uint64_t (**)(char *))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(mlir::DefaultTimingManager *))(*(void *)v2 + 8);
    return (char *)v6(v2);
  }
  return result;
}

void anonymous namespace'::PassTiming::~PassTiming(_anonymous_namespace_::PassTiming *this)
{
  *(void *)this = &unk_1EC997558;
  uint64_t v3 = (void *)((char *)this + 64);
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 32))(v2, *((void *)this + 9));
  }
  void *v3 = 0;
  v3[1] = 0;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  unsigned int v5 = *((_DWORD *)this + 12);
  uint64_t v6 = *((void *)this + 4);
  if (v5)
  {
    uint64_t v7 = v6 + 88 * v5;
    do
    {
      if (*(void *)v6 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v8 = *(char **)(v6 + 8);
        uint64_t v9 = *(unsigned int *)(v6 + 16);
        if (v9)
        {
          uint64_t v10 = 16 * v9;
          do
          {
            uint64_t v11 = *(void *)&v8[v10 - 16];
            if (v11) {
              (*(void (**)(uint64_t, void))(*(void *)v11 + 32))(v11, *(void *)&v8[v10 - 8]);
            }
            *(void *)&v8[v10 - 16] = 0;
            *(void *)&v8[v10 - 8] = 0;
            v10 -= 16;
          }
          while (v10);
          uint64_t v8 = *(char **)(v6 + 8);
        }
        if (v8 != (char *)(v6 + 24)) {
          free(v8);
        }
      }
      v6 += 88;
    }
    while (v6 != v7);
    uint64_t v6 = *((void *)this + 4);
    uint64_t v12 = 88 * *((unsigned int *)this + 12);
  }
  else
  {
    uint64_t v12 = 0;
  }
  llvm::deallocate_buffer((llvm *)v6, (void *)v12);
}

{
}

void sub_1805FAC80()
{
  llvm::deallocate_buffer(*(llvm **)(v0 + 8), (void *)(24 * *(unsigned int *)(v0 + 24)));
}

void sub_1805FAC98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  mlir::GenericProgramPoint::~GenericProgramPoint(v16);
}

void sub_1805FACD0(void *__p)
{
  operator delete(__p);
}

uint64_t anonymous namespace'::PassTiming::runBeforePipeline(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t *a4)
{
  uint64_t threadid = llvm::get_threadid((llvm *)a1);
  uint64_t v41 = threadid;
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = *(_DWORD *)(a1 + 48);
  if (!v10)
  {
    unint64_t v19 = 0;
LABEL_13:
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>(a1 + 32, v19, &v41);
    goto LABEL_14;
  }
  int v11 = v10 - 1;
  unsigned int v12 = v11 & (37 * threadid);
  inserted = (uint64_t *)(v9 + 88 * v12);
  uint64_t v14 = *inserted;
  if (threadid != *inserted)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != -1)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == -2;
      }
      if (v17) {
        uint64_t v15 = inserted;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & v11;
      inserted = (uint64_t *)(v9 + 88 * v12);
      uint64_t v14 = *inserted;
      if (threadid == *inserted) {
        goto LABEL_14;
      }
    }
    if (v15) {
      unint64_t v19 = v15;
    }
    else {
      unint64_t v19 = inserted;
    }
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v42 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>,mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::LookupBucketFor<mlir::PassInstrumentation::PipelineParentInfo>((uint64_t *)(a1 + 8), a4, &v42))
  {
    uint64_t v20 = v42;
    if (v42 != *(void *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 24))
    {
      int v21 = *(_DWORD *)(a1 + 48);
      if (v21)
      {
        uint64_t v22 = *(void *)(a1 + 32);
        int v23 = v21 - 1;
        unsigned int v24 = (37 * *a4) & v23;
        unint64_t v25 = (uint64_t *)(v22 + 88 * v24);
        uint64_t v26 = *v25;
        if (*a4 == *v25) {
          goto LABEL_34;
        }
        __int16 v27 = 0;
        int v28 = 1;
        while (v26 != -1)
        {
          if (v27) {
            BOOL v29 = 0;
          }
          else {
            BOOL v29 = v26 == -2;
          }
          if (v29) {
            __int16 v27 = v25;
          }
          unsigned int v30 = v24 + v28++;
          unsigned int v24 = v30 & v23;
          unint64_t v25 = (uint64_t *)(v22 + 88 * v24);
          uint64_t v26 = *v25;
          if (*a4 == *v25) {
            goto LABEL_34;
          }
        }
        if (v27) {
          uint64_t v36 = v27;
        }
        else {
          uint64_t v36 = v25;
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      unint64_t v25 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>(a1 + 32, v36, a4);
LABEL_34:
      __int16 v31 = (uint64_t *)(v25[1] + 16 * *(unsigned int *)(v20 + 16));
      uint64_t v32 = a3;
      uint64_t v42 = a2;
      uint64_t v43 = a3;
      uint64_t v33 = *v31;
      if (!*v31) {
        goto LABEL_35;
      }
      goto LABEL_28;
    }
  }
  __int16 v31 = *(uint64_t **)(a1 + 80);
  uint64_t v32 = a3;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v33 = *v31;
  if (!*v31)
  {
LABEL_35:
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    goto LABEL_36;
  }
LABEL_28:
  if (v32) {
    uint64_t v34 = a2;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v39 = v33;
  uint64_t v40 = v35;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 24))(v33, v35);
LABEL_36:
  Address = llvm::SmallVectorTemplateBase<mlir::TimingScope,false>::reserveForParamAndGetAddress((uint64_t)(inserted + 1), (unint64_t)&v39, 1);
  *(_OWORD *)(inserted[1] + 16 * *((unsigned int *)inserted + 4)) = *Address;
  *(void *)Address = 0;
  *((void *)Address + 1) = 0;
  ++*((_DWORD *)inserted + 4);
  uint64_t result = v39;
  if (v39) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v39 + 32))(v39, v40);
  }
  return result;
}

uint64_t anonymous namespace'::PassTiming::runAfterPipeline(llvm *a1)
{
  uint64_t threadid = llvm::get_threadid(a1);
  uint64_t v5 = *((void *)a1 + 4);
  uint64_t v4 = (uint64_t)a1 + 32;
  uint64_t v3 = v5;
  uint64_t v19 = threadid;
  int v6 = *(_DWORD *)(v4 + 16);
  if (v6)
  {
    int v7 = v6 - 1;
    unsigned int v8 = (v6 - 1) & (37 * threadid);
    inserted = (uint64_t *)(v3 + 88 * v8);
    uint64_t v10 = *inserted;
    if (threadid == *inserted) {
      goto LABEL_14;
    }
    int v11 = 0;
    int v12 = 1;
    while (v10 != -1)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == -2;
      }
      if (v13) {
        int v11 = inserted;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      inserted = (uint64_t *)(v3 + 88 * (v14 & v7));
      uint64_t v10 = *inserted;
      if (threadid == *inserted) {
        goto LABEL_14;
      }
    }
    if (v11) {
      uint64_t v15 = v11;
    }
    else {
      uint64_t v15 = inserted;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>(v4, v15, &v19);
LABEL_14:
  unsigned int v16 = *((_DWORD *)inserted + 4) - 1;
  *((_DWORD *)inserted + 4) = v16;
  BOOL v17 = (uint64_t *)(inserted[1] + 16 * v16);
  uint64_t result = *v17;
  if (*v17) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, v17[1]);
  }
  uint64_t *v17 = 0;
  v17[1] = 0;
  return result;
}

uint64_t anonymous namespace'::PassTiming::runBeforePass(_anonymous_namespace_::PassTiming *this, mlir::Pass *a2, mlir::Operation *a3)
{
  uint64_t threadid = llvm::get_threadid(this);
  uint64_t v60 = threadid;
  uint64_t v6 = *((void *)this + 4);
  int v7 = *((_DWORD *)this + 12);
  if (v7)
  {
    int v8 = v7 - 1;
    unsigned int v9 = v8 & (37 * threadid);
    inserted = (uint64_t *)(v6 + 88 * v9);
    uint64_t v11 = *inserted;
    if (threadid == *inserted) {
      goto LABEL_14;
    }
    int v12 = 0;
    int v13 = 1;
    while (v11 != -1)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -2;
      }
      if (v14) {
        int v12 = inserted;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & v8;
      inserted = (uint64_t *)(v6 + 88 * v9);
      uint64_t v11 = *inserted;
      if (threadid == *inserted) {
        goto LABEL_14;
      }
    }
    if (v12) {
      unsigned int v16 = v12;
    }
    else {
      unsigned int v16 = inserted;
    }
  }
  else
  {
    unsigned int v16 = 0;
  }
  inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>((uint64_t)this + 32, v16, &v60);
LABEL_14:
  uint64_t v17 = *((unsigned int *)inserted + 4);
  if (v17)
  {
    unsigned int v18 = (void *)(inserted[1] + 16 * v17 - 16);
    uint64_t v19 = *((void *)a2 + 1);
    unint64_t v20 = 0x1E8EB8000;
  }
  else
  {
    unsigned int v18 = (void *)*((void *)this + 10);
    uint64_t v19 = *((void *)a2 + 1);
    unint64_t v20 = 0x1E8EB8000uLL;
  }
  unint64_t v20 = 0x1E8EB8000;
  if (v52)
  {
    *(void *)&long long v61 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
    *((void *)&v61 + 1) = 81;
    unint64_t v53 = llvm::StringRef::find((uint64_t *)&v61, "DesiredTypeName = ", 0x12uLL, 0);
    if (*((void *)&v61 + 1) >= v53) {
      unint64_t v54 = v53;
    }
    else {
      unint64_t v54 = *((void *)&v61 + 1);
    }
    uint64_t v55 = v61 + v54;
    unint64_t v56 = *((void *)&v61 + 1) - v54;
    if (*((void *)&v61 + 1) - v54 >= 0x12) {
      uint64_t v57 = 18;
    }
    else {
      uint64_t v57 = *((void *)&v61 + 1) - v54;
    }
    unint64_t v58 = v56 - v57;
    if (v58 >= v58 - 1) {
      uint64_t v59 = v58 - 1;
    }
    else {
      uint64_t v59 = v58;
    }
    mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v55 + v57, v59);
    unint64_t v20 = 0x1E8EB8000;
  }
LABEL_18:
  if (v19 != *(void *)(v20 + 2968))
  {
    int v21 = (mlir::Pass *)*((void *)a2 + 42);
    uint64_t v62 = a2;
    uint64_t v22 = *v18;
    if (*v18)
    {
      if (v21) {
        int v23 = v21;
      }
      else {
        int v23 = a2;
      }
      *(void *)&long long v61 = v22;
      *((void *)&v61 + 1) = v24;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 24))(v22, v24);
      goto LABEL_54;
    }
LABEL_53:
    long long v61 = 0uLL;
    goto LABEL_54;
  }
  int v25 = *((_DWORD *)inserted + 4);
  uint64_t v28 = *((void *)this + 1);
  __int16 v27 = (char *)this + 8;
  uint64_t v26 = v28;
  *(void *)&long long v61 = v60;
  *((void *)&v61 + 1) = a2;
  int v29 = *((_DWORD *)v27 + 4);
  if (!v29)
  {
    unint64_t v45 = 0;
LABEL_46:
    uint64_t v35 = llvm::DenseMapBase<llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>,mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::InsertIntoBucketImpl<mlir::PassInstrumentation::PipelineParentInfo>((uint64_t)v27, (uint64_t)&v61, &v61, v45);
    *(_OWORD *)uint64_t v35 = v61;
    *((_DWORD *)v35 + 4) = 0;
    goto LABEL_47;
  }
  unint64_t v30 = ((0x2500000000 * v60) | (a2 >> 4) ^ (a2 >> 9))
      + ~((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32);
  unint64_t v31 = (v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13);
  unint64_t v32 = (9 * (v31 ^ (v31 >> 8))) ^ ((9 * (v31 ^ (v31 >> 8))) >> 15);
  int v33 = v29 - 1;
  unsigned int v34 = v33 & (((v32 + ~(v32 << 27)) >> 31) ^ (v32 + ~(v32 << 27)));
  uint64_t v35 = (void *)(v26 + 24 * v34);
  uint64_t v36 = *v35;
  unint64_t v37 = (mlir::Pass *)v35[1];
  if (v60 != *v35 || v37 != a2)
  {
    uint64_t v39 = 0;
    int v40 = 1;
    while (v36 != -1 || v37 != (mlir::Pass *)-4096)
    {
      if (v39) {
        BOOL v41 = 0;
      }
      else {
        BOOL v41 = v37 == (mlir::Pass *)-8192;
      }
      if (v41 && v36 == -2) {
        uint64_t v39 = v35;
      }
      unsigned int v43 = v34 + v40++;
      unsigned int v34 = v43 & v33;
      uint64_t v35 = (void *)(v26 + 24 * v34);
      uint64_t v36 = *v35;
      unint64_t v37 = (mlir::Pass *)v35[1];
      if (v60 == *v35 && v37 == a2) {
        goto LABEL_47;
      }
    }
    if (v39) {
      unint64_t v45 = v39;
    }
    else {
      unint64_t v45 = v35;
    }
    goto LABEL_46;
  }
LABEL_47:
  *((_DWORD *)v35 + 4) = v25;
  BOOL v46 = (mlir::Pass *)*((void *)a2 + 42);
  uint64_t v62 = a2;
  uint64_t v47 = *v18;
  if (!*v18) {
    goto LABEL_53;
  }
  if (v46) {
    int v48 = v46;
  }
  else {
    int v48 = a2;
  }
  *(void *)&long long v61 = v47;
  *((void *)&v61 + 1) = v49;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 24))(v47, v49);
  if (*((_DWORD *)a2 + 88) < 2u) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 48))(v47, v49);
  }
LABEL_54:
  Address = llvm::SmallVectorTemplateBase<mlir::TimingScope,false>::reserveForParamAndGetAddress((uint64_t)(inserted + 1), (unint64_t)&v61, 1);
  *(_OWORD *)(inserted[1] + 16 * *((unsigned int *)inserted + 4)) = *Address;
  *(void *)Address = 0;
  *((void *)Address + 1) = 0;
  ++*((_DWORD *)inserted + 4);
  uint64_t result = v61;
  if ((void)v61) {
    return (*(uint64_t (**)(void, void))(*(void *)v61 + 32))(v61, *((void *)&v61 + 1));
  }
  return result;
}

uint64_t anonymous namespace'::PassTiming::runAfterPass(int32x2_t *this, mlir::Pass *a2, mlir::Operation *a3)
{
  uint64_t threadid = llvm::get_threadid((llvm *)this);
  uint64_t v5 = *((void *)a2 + 1);
  unint64_t v6 = 0x1E8EB8000uLL;
  {
    uint64_t v45 = v5;
    unint64_t v6 = 0x1E8EB8000;
    uint64_t v5 = v45;
    if (v37)
    {
      uint64_t v47 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      unint64_t v48 = 81;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v47, "DesiredTypeName = ", 0x12uLL, 0);
      if (v48 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v48;
      }
      int v40 = &v47[v39];
      unint64_t v41 = v48 - v39;
      if (v48 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v48 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      unint64_t v6 = 0x1E8EB8000;
      uint64_t v5 = v45;
    }
  }
  if (v5 == *(void *)(v6 + 2968))
  {
    __int32 v7 = this[3].i32[0];
    if (v7)
    {
      int32x2_t v8 = this[1];
      unint64_t v9 = ~((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32)
         + ((a2 >> 4) ^ (a2 >> 9))
         + 0x2500000000 * threadid;
      unint64_t v10 = (v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13);
      unint64_t v11 = (9 * (v10 ^ (v10 >> 8))) ^ ((9 * (v10 ^ (v10 >> 8))) >> 15);
      __int32 v12 = v7 - 1;
      unsigned int v13 = v12 & (((v11 + ~(v11 << 27)) >> 31) ^ (v11 + ~(v11 << 27)));
      BOOL v14 = (uint64_t *)(*(void *)&v8 + 24 * v13);
      uint64_t v16 = *v14;
      unsigned int v15 = (mlir::Pass *)v14[1];
      if (threadid == *v14 && v15 == a2)
      {
LABEL_9:
        *(_OWORD *)BOOL v14 = xmmword_18110BE90;
        this[2] = vadd_s32(this[2], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        int v34 = 1;
        while (v16 != -1 || v15 != (mlir::Pass *)-4096)
        {
          unsigned int v35 = v13 + v34++;
          unsigned int v13 = v35 & v12;
          BOOL v14 = (uint64_t *)(*(void *)&v8 + 24 * v13);
          uint64_t v16 = *v14;
          unsigned int v15 = (mlir::Pass *)v14[1];
          if (threadid == *v14 && v15 == a2) {
            goto LABEL_9;
          }
        }
      }
    }
  }
  int32x2_t v20 = this[4];
  uint64_t v19 = this + 4;
  int32x2_t v18 = v20;
  __int32 v21 = v19[2].i32[0];
  if (v21)
  {
    __int32 v22 = v21 - 1;
    unsigned int v23 = (37 * threadid) & v22;
    inserted = (uint64_t *)(*(void *)&v18 + 88 * v23);
    uint64_t v25 = *inserted;
    if (threadid == *inserted) {
      goto LABEL_23;
    }
    uint64_t v26 = 0;
    int v27 = 1;
    while (v25 != -1)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == -2;
      }
      if (v28) {
        uint64_t v26 = inserted;
      }
      unsigned int v29 = v23 + v27++;
      unsigned int v23 = v29 & v22;
      inserted = (uint64_t *)(*(void *)&v18 + 88 * v23);
      uint64_t v25 = *inserted;
      if (threadid == *inserted) {
        goto LABEL_23;
      }
    }
    if (v26) {
      unint64_t v30 = v26;
    }
    else {
      unint64_t v30 = inserted;
    }
  }
  else
  {
    unint64_t v30 = 0;
  }
  inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>((uint64_t)v19, v30, &threadid);
LABEL_23:
  unsigned int v31 = *((_DWORD *)inserted + 4) - 1;
  *((_DWORD *)inserted + 4) = v31;
  unint64_t v32 = (uint64_t *)(inserted[1] + 16 * v31);
  uint64_t result = *v32;
  if (*v32) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, v32[1]);
  }
  *unint64_t v32 = 0;
  v32[1] = 0;
  return result;
}

uint64_t anonymous namespace'::PassTiming::runAfterPassFailed(_anonymous_namespace_::PassTiming *this, mlir::Pass *a2, mlir::Operation *a3)
{
  return (*(uint64_t (**)(_anonymous_namespace_::PassTiming *, mlir::Pass *, mlir::Operation *))(*(void *)this + 40))(this, a2, a3);
}

uint64_t anonymous namespace'::PassTiming::runBeforeAnalysis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t threadid = llvm::get_threadid((llvm *)a1);
  uint64_t v30 = threadid;
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = *(_DWORD *)(a1 + 48);
  if (v10)
  {
    int v11 = v10 - 1;
    unsigned int v12 = v11 & (37 * threadid);
    inserted = (uint64_t *)(v9 + 88 * v12);
    uint64_t v14 = *inserted;
    if (threadid == *inserted) {
      goto LABEL_14;
    }
    unsigned int v15 = 0;
    int v16 = 1;
    while (v14 != -1)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == -2;
      }
      if (v17) {
        unsigned int v15 = inserted;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & v11;
      inserted = (uint64_t *)(v9 + 88 * v12);
      uint64_t v14 = *inserted;
      if (threadid == *inserted) {
        goto LABEL_14;
      }
    }
    if (v15) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = inserted;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>(a1 + 32, v19, &v30);
LABEL_14:
  uint64_t v20 = *((unsigned int *)inserted + 4);
  if (v20)
  {
    uint64_t v21 = inserted[1] + 16 * v20;
    uint64_t v31 = a2;
    uint64_t v32 = a3;
    uint64_t v24 = *(void *)(v21 - 16);
    __int32 v22 = (uint64_t *)(v21 - 16);
    uint64_t v23 = v24;
    if (v24)
    {
LABEL_16:
      uint64_t v28 = v23;
      uint64_t v29 = v25;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 24))(v23, v25);
      goto LABEL_19;
    }
  }
  else
  {
    __int32 v22 = *(uint64_t **)(a1 + 80);
    uint64_t v31 = a2;
    uint64_t v32 = a3;
    uint64_t v23 = *v22;
    if (*v22) {
      goto LABEL_16;
    }
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
LABEL_19:
  Address = llvm::SmallVectorTemplateBase<mlir::TimingScope,false>::reserveForParamAndGetAddress((uint64_t)(inserted + 1), (unint64_t)&v28, 1);
  *(_OWORD *)(inserted[1] + 16 * *((unsigned int *)inserted + 4)) = *Address;
  *(void *)Address = 0;
  *((void *)Address + 1) = 0;
  ++*((_DWORD *)inserted + 4);
  uint64_t result = v28;
  if (v28) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v28 + 32))(v28, v29);
  }
  return result;
}

uint64_t anonymous namespace'::PassTiming::runAfterAnalysis(llvm *a1)
{
  uint64_t threadid = llvm::get_threadid(a1);
  uint64_t v5 = *((void *)a1 + 4);
  uint64_t v4 = (uint64_t)a1 + 32;
  uint64_t v3 = v5;
  uint64_t v19 = threadid;
  int v6 = *(_DWORD *)(v4 + 16);
  if (v6)
  {
    int v7 = v6 - 1;
    unsigned int v8 = (v6 - 1) & (37 * threadid);
    inserted = (uint64_t *)(v3 + 88 * v8);
    uint64_t v10 = *inserted;
    if (threadid == *inserted) {
      goto LABEL_14;
    }
    int v11 = 0;
    int v12 = 1;
    while (v10 != -1)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == -2;
      }
      if (v13) {
        int v11 = inserted;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      inserted = (uint64_t *)(v3 + 88 * (v14 & v7));
      uint64_t v10 = *inserted;
      if (threadid == *inserted) {
        goto LABEL_14;
      }
    }
    if (v11) {
      unsigned int v15 = v11;
    }
    else {
      unsigned int v15 = inserted;
    }
  }
  else
  {
    unsigned int v15 = 0;
  }
  inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>(v4, v15, &v19);
LABEL_14:
  unsigned int v16 = *((_DWORD *)inserted + 4) - 1;
  *((_DWORD *)inserted + 4) = v16;
  BOOL v17 = (uint64_t *)(inserted[1] + 16 * v16);
  uint64_t result = *v17;
  if (*v17) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, v17[1]);
  }
  uint64_t *v17 = 0;
  v17[1] = 0;
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    int v9 = 2 * v6;
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      uint64_t v7 = *a2;
      goto LABEL_4;
    }
    int v9 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v10 = *(uint64_t **)a1;
  unint64_t v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40) {
    unsigned int v14 = v13 + 1;
  }
  else {
    unsigned int v14 = 64;
  }
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(88 * v14, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v10)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::moveFromOldBuckets(a1, v10, &v10[11 * v6]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(88 * v6));
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v16 = *(_DWORD *)(a1 + 16);
  unint64_t v17 = 88 * v16 - 88;
  unsigned int v18 = buffer;
  if (v17 < 0x58) {
    goto LABEL_34;
  }
  unint64_t v19 = v17 / 0x58 + 1;
  unsigned int v18 = &buffer[11 * (v19 & 0x7FFFFFFFFFFFFFELL)];
  uint64_t v20 = v19 & 0x7FFFFFFFFFFFFFELL;
  uint64_t v21 = buffer;
  do
  {
    void *v21 = -1;
    v21[11] = -1;
    v21 += 22;
    v20 -= 2;
  }
  while (v20);
  if (v19 != (v19 & 0x7FFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *unsigned int v18 = -1;
      v18 += 11;
    }
    while (v18 != &buffer[11 * v16]);
  }
  uint64_t v7 = *a3;
  unsigned int v22 = v16 - 1;
  unsigned int v23 = (37 * *a3) & v22;
  a2 = &buffer[11 * v23];
  uint64_t v24 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v25 = 0;
    int v26 = 1;
    while (v24 != -1)
    {
      if (v25) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = v24 == -2;
      }
      if (v27) {
        uint64_t v25 = a2;
      }
      unsigned int v28 = v23 + v26++;
      unsigned int v23 = v28 & v22;
      a2 = &buffer[11 * v23];
      uint64_t v24 = *a2;
      if (v7 == *a2) {
        goto LABEL_4;
      }
    }
    if (v25) {
      a2 = v25;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x400000000;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)a1;
    unint64_t v8 = 88 * v6 - 88;
    if (v8 < 0x58)
    {
      int v9 = *(void **)a1;
LABEL_7:
      int v13 = &v7[11 * v6];
      do
      {
        *int v9 = -1;
        v9 += 11;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x58 + 1;
    int v9 = &v7[11 * (v10 & 0x7FFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    unint64_t v12 = *(void **)a1;
    do
    {
      *unint64_t v12 = -1;
      v12[11] = -1;
      v12 += 22;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    while (1)
    {
      unint64_t v14 = *v4;
      if ((unint64_t)*v4 <= 0xFFFFFFFFFFFFFFFDLL) {
        break;
      }
LABEL_11:
      v4 += 11;
      if (v4 == a3) {
        return;
      }
    }
    int v15 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v16 = v15 & (37 * v14);
    unint64_t v17 = (unint64_t *)(*(void *)a1 + 88 * v16);
    unint64_t v18 = *v17;
    if (v14 != *v17)
    {
      unsigned int v23 = 0;
      int v24 = 1;
      while (v18 != -1)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v18 == -2;
        }
        if (v25) {
          unsigned int v23 = v17;
        }
        unsigned int v26 = v16 + v24++;
        unsigned int v16 = v26 & v15;
        unint64_t v17 = (unint64_t *)(*(void *)a1 + 88 * (v26 & v15));
        unint64_t v18 = *v17;
        if (v14 == *v17) {
          goto LABEL_14;
        }
      }
      if (v23) {
        unint64_t v17 = v23;
      }
    }
LABEL_14:
    unint64_t *v17 = v14;
    v17[1] = (unint64_t)(v17 + 3);
    unint64_t v17[2] = 0x400000000;
    if (*((_DWORD *)v4 + 4))
    {
      llvm::SmallVectorImpl<mlir::TimingScope>::operator=((uint64_t)(v17 + 1), v4 + 1);
      uint64_t v19 = *((unsigned int *)v4 + 4);
      ++*(_DWORD *)(a1 + 8);
      uint64_t v20 = (char *)v4[1];
      if (!v19) {
        goto LABEL_22;
      }
      uint64_t v21 = 16 * v19;
      do
      {
        uint64_t v22 = *(void *)&v20[v21 - 16];
        if (v22) {
          (*(void (**)(uint64_t, void))(*(void *)v22 + 32))(v22, *(void *)&v20[v21 - 8]);
        }
        *(void *)&v20[v21 - 16] = 0;
        *(void *)&v20[v21 - 8] = 0;
        v21 -= 16;
      }
      while (v21);
    }
    else
    {
      ++*(_DWORD *)(a1 + 8);
    }
    uint64_t v20 = (char *)v4[1];
LABEL_22:
    if (v20 != (char *)(v4 + 3)) {
      free(v20);
    }
    goto LABEL_11;
  }
}

uint64_t llvm::SmallVectorImpl<mlir::TimingScope>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = a2 + 2;
    uint64_t v5 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      unsigned int v6 = *(void **)a1;
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7)
      {
        uint64_t v8 = 2 * v7;
        do
        {
          uint64_t v9 = v6[v8 - 2];
          if (v9) {
            (*(void (**)(uint64_t, void))(*(void *)v9 + 32))(v9, v6[v8 - 1]);
          }
          v6[v8 - 2] = 0;
          v6[v8 - 1] = 0;
          v8 -= 2;
        }
        while (v8 * 8);
        unsigned int v6 = *(void **)a1;
      }
      if (v6 != (void *)(a1 + 16)) {
        free(v6);
      }
      *(void *)a1 = *a2;
      unint64_t v10 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v4;
      *((_DWORD *)a2 + 3) = 0;
LABEL_12:
      *unint64_t v10 = 0;
      return a1;
    }
    unint64_t v10 = a2 + 1;
    unint64_t v12 = *((unsigned int *)a2 + 2);
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (v13 < v12)
    {
      if (*(_DWORD *)(a1 + 12) >= v12)
      {
        int v24 = *(void **)a1;
        if (v13)
        {
          uint64_t v25 = 16 * v13;
          do
          {
            if (*v24) {
              (*(void (**)(void, void))(*(void *)*v24 + 32))(*v24, v24[1]);
            }
            *int v24 = 0;
            v24[1] = 0;
            *(_OWORD *)int v24 = *(_OWORD *)v5;
            v24 += 2;
            *(void *)uint64_t v5 = 0;
            *(void *)(v5 + 8) = 0;
            v5 += 16;
            v25 -= 16;
          }
          while (v25);
          int v24 = *(void **)a1;
        }
        else
        {
          uint64_t v13 = 0;
        }
      }
      else
      {
        if (v13)
        {
          unint64_t v14 = *(void **)a1;
          uint64_t v15 = 2 * v13;
          do
          {
            uint64_t v16 = v14[v15 - 2];
            if (v16) {
              (*(void (**)(uint64_t, void))(*(void *)v16 + 32))(v16, v14[v15 - 1]);
            }
            v14[v15 - 2] = 0;
            v14[v15 - 1] = 0;
            v15 -= 2;
          }
          while (v15 * 8);
        }
        *(_DWORD *)(a1 + 8) = 0;
        unint64_t v50 = 0;
        unsigned int v26 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v12, 16, &v50);
        int v24 = v26;
        BOOL v27 = *(void **)a1;
        uint64_t v28 = *(unsigned int *)(a1 + 8);
        if (v28)
        {
          uint64_t v29 = 16 * v28;
          uint64_t v30 = v26;
          do
          {
            *v30++ = *(_OWORD *)v27;
            void *v27 = 0;
            v27[1] = 0;
            v27 += 2;
            v29 -= 16;
          }
          while (v29);
          BOOL v27 = *(void **)a1;
          uint64_t v31 = *(unsigned int *)(a1 + 8);
          if (v31)
          {
            uint64_t v32 = 2 * v31;
            do
            {
              uint64_t v33 = v27[v32 - 2];
              if (v33) {
                (*(void (**)(uint64_t, void))(*(void *)v33 + 32))(v33, v27[v32 - 1]);
              }
              v27[v32 - 2] = 0;
              v27[v32 - 1] = 0;
              v32 -= 2;
            }
            while (v32 * 8);
            BOOL v27 = *(void **)a1;
          }
        }
        int v41 = v50;
        if (v27 != (void *)(a1 + 16)) {
          free(v27);
        }
        uint64_t v13 = 0;
        *(void *)a1 = v24;
        *(_DWORD *)(a1 + 12) = v41;
      }
      uint64_t v42 = *a2;
      uint64_t v43 = *((unsigned int *)a2 + 2);
      if (v13 != v43)
      {
        uint64_t v44 = &v24[2 * v13];
        uint64_t v45 = v42 + 16 * v13;
        uint64_t v46 = 16 * v43 - 16 * v13;
        do
        {
          *v44++ = *(_OWORD *)v45;
          *(void *)uint64_t v45 = 0;
          *(void *)(v45 + 8) = 0;
          v45 += 16;
          v46 -= 16;
        }
        while (v46);
        uint64_t v42 = *a2;
      }
      *(_DWORD *)(a1 + 8) = v12;
      uint64_t v47 = *v10;
      if (v47)
      {
        uint64_t v48 = 16 * v47;
        do
        {
          uint64_t v49 = *(void *)(v42 + v48 - 16);
          if (v49) {
            (*(void (**)(uint64_t, void))(*(void *)v49 + 32))(v49, *(void *)(v42 + v48 - 8));
          }
          *(void *)(v42 + v48 - 16) = 0;
          *(void *)(v42 + v48 - 8) = 0;
          v48 -= 16;
        }
        while (v48);
      }
      goto LABEL_12;
    }
    unint64_t v17 = *(void **)a1;
    if (v12)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t v20 = &v17[v18];
        uint64_t v21 = v17[v18];
        if (v21) {
          (*(void (**)(uint64_t, void))(*(void *)v21 + 32))(v21, v20[1]);
        }
        uint64_t v19 = (void *)(v5 + v18 * 8);
        *uint64_t v20 = 0;
        v20[1] = 0;
        *(_OWORD *)uint64_t v20 = *(_OWORD *)(v5 + v18 * 8);
        *uint64_t v19 = 0;
        v19[1] = 0;
        v18 += 2;
      }
      while (2 * v12 != v18);
      uint64_t v22 = &v17[v18];
      uint64_t v23 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 8);
      if ((void *)v23 == &v17[v18]) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v22 = *(void **)a1;
      uint64_t v23 = (uint64_t)&v17[2 * v13];
      if ((void *)v23 == v17)
      {
LABEL_46:
        *(_DWORD *)(a1 + 8) = v12;
        uint64_t v37 = *((unsigned int *)a2 + 2);
        if (v37)
        {
          uint64_t v38 = *a2;
          uint64_t v39 = 16 * v37;
          do
          {
            uint64_t v40 = *(void *)(v38 + v39 - 16);
            if (v40) {
              (*(void (**)(uint64_t, void))(*(void *)v40 + 32))(v40, *(void *)(v38 + v39 - 8));
            }
            *(void *)(v38 + v39 - 16) = 0;
            *(void *)(v38 + v39 - 8) = 0;
            v39 -= 16;
          }
          while (v39);
        }
        goto LABEL_12;
      }
    }
    int v34 = (void *)v23;
    do
    {
      uint64_t v36 = *(v34 - 2);
      v34 -= 2;
      uint64_t v35 = v36;
      if (v36) {
        (*(void (**)(uint64_t, void))(*(void *)v35 + 32))(v35, *(void *)(v23 - 8));
      }
      *int v34 = 0;
      v34[1] = 0;
      uint64_t v23 = (uint64_t)v34;
    }
    while (v34 != v22);
    goto LABEL_46;
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>,mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::LookupBucketFor<mlir::PassInstrumentation::PipelineParentInfo>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a2[1];
    unint64_t v6 = ((0x2500000000 * *a2) | (v5 >> 4) ^ (v5 >> 9))
       + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
    unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
    int v10 = v3 - 1;
    unsigned int v11 = (v3 - 1) & v9;
    unint64_t v12 = (void *)(*a1 + 24 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    if (*a2 == *v12 && v5 == v14)
    {
      uint64_t result = 1;
      *a3 = v12;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      uint64_t result = 1;
      while (v13 != -1 || v14 != -4096)
      {
        if (v16) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v14 == -8192;
        }
        if (v19 && v13 == -2) {
          uint64_t v16 = v12;
        }
        unsigned int v21 = v11 + v17++;
        unsigned int v11 = v21 & v10;
        unint64_t v12 = (void *)(v4 + 24 * (v21 & v10));
        uint64_t v13 = *v12;
        uint64_t v14 = v12[1];
        if (*a2 == *v12 && v5 == v14)
        {
          *a3 = v12;
          return result;
        }
      }
      uint64_t result = 0;
      if (v16) {
        unint64_t v12 = v16;
      }
      *a3 = v12;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

_OWORD *llvm::SmallVectorTemplateBase<mlir::TimingScope,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v8 = *(void *)a1 + 16 * v4;
    if (*(void *)a1 <= a2 && v8 > a2)
    {
      uint64_t v21 = a2 - *(void *)a1;
      unint64_t v34 = 0;
      uint64_t v22 = (void *)(a1 + 16);
      uint64_t v23 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 16, &v34);
      int v24 = v23;
      uint64_t v25 = *(void **)a1;
      uint64_t v26 = *(unsigned int *)(a1 + 8);
      if (v26)
      {
        uint64_t v27 = 16 * v26;
        uint64_t v28 = v23;
        do
        {
          *v28++ = *(_OWORD *)v25;
          void *v25 = 0;
          v25[1] = 0;
          v25 += 2;
          v27 -= 16;
        }
        while (v27);
        uint64_t v25 = *(void **)a1;
        uint64_t v29 = *(unsigned int *)(a1 + 8);
        if (v29)
        {
          uint64_t v30 = 2 * v29;
          do
          {
            uint64_t v31 = v25[v30 - 2];
            if (v31) {
              (*(void (**)(uint64_t, void))(*(void *)v31 + 32))(v31, v25[v30 - 1]);
            }
            v25[v30 - 2] = 0;
            v25[v30 - 1] = 0;
            v30 -= 2;
          }
          while (v30 * 8);
          uint64_t v25 = *(void **)a1;
        }
      }
      uint64_t v32 = v21 >> 4;
      int v33 = v34;
      if (v25 != v22) {
        free(v25);
      }
      *(void *)a1 = v24;
      *(_DWORD *)(a1 + 12) = v33;
      return &v24[v32];
    }
    else
    {
      unint64_t v34 = 0;
      int v10 = (void *)(a1 + 16);
      unsigned int v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 16, &v34);
      unint64_t v12 = v11;
      uint64_t v13 = *(void **)a1;
      uint64_t v14 = *(unsigned int *)(a1 + 8);
      if (v14)
      {
        uint64_t v15 = 16 * v14;
        uint64_t v16 = v11;
        do
        {
          *v16++ = *(_OWORD *)v13;
          *uint64_t v13 = 0;
          v13[1] = 0;
          v13 += 2;
          v15 -= 16;
        }
        while (v15);
        uint64_t v13 = *(void **)a1;
        uint64_t v17 = *(unsigned int *)(a1 + 8);
        if (v17)
        {
          uint64_t v18 = 2 * v17;
          do
          {
            uint64_t v19 = v13[v18 - 2];
            if (v19) {
              (*(void (**)(uint64_t, void))(*(void *)v19 + 32))(v19, v13[v18 - 1]);
            }
            v13[v18 - 2] = 0;
            v13[v18 - 1] = 0;
            v18 -= 2;
          }
          while (v18 * 8);
          uint64_t v13 = *(void **)a1;
        }
      }
      int v20 = v34;
      if (v13 != v10) {
        free(v13);
      }
      *(void *)a1 = v12;
      *(_DWORD *)(a1 + 12) = v20;
    }
  }
  return (_OWORD *)v3;
}

void llvm::function_ref<std::string ()(void)>::callback_fn<anonymous namespace'::PassTiming::runBeforePipeline(std::optional<mlir::OperationName>,mlir::PassInstrumentation::PipelineParentInfo const&)::{lambda(void)#1}>(unsigned char *a1@<X0>, std::string *a2@<X8>)
{
  if (a1[8])
  {
    v7[0] = *(void *)(*(void *)a1 + 8);
    uint64_t AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v7);
  }
  else
  {
    uint64_t AttrData = "any";
    uint64_t v4 = 3;
  }
  __int16 v6 = 1283;
  v5[0] = "'";
  void v5[2] = AttrData;
  v5[3] = v4;
  v7[0] = v5;
  void v7[2] = "' Pipeline";
  __int16 v8 = 770;
  llvm::Twine::str((llvm::Twine *)v7, a2);
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>,mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::InsertIntoBucketImpl<mlir::PassInstrumentation::PipelineParentInfo>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    ++*(_DWORD *)(a1 + 8);
    if (*a4 != -1) {
      goto LABEL_8;
    }
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::grow(a1, v7);
  int v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>,mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::LookupBucketFor<mlir::PassInstrumentation::PipelineParentInfo>((uint64_t *)a1, a3, &v9);
  a4 = v9;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    goto LABEL_8;
  }
LABEL_4:
  if (a4[1] == -4096) {
    return a4;
  }
LABEL_8:
  --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      unint64_t v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      uint64_t v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v18 = result;
      do
      {
        *uint64_t v18 = xmmword_18110BEA0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_18110BEA0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if (v3)
        {
          uint64_t v20 = 24 * v3;
          uint64_t v21 = v4;
          do
          {
            uint64_t v23 = *((void *)v21 + 1);
            if ((*(void *)v21 != -1 || v23 != -4096) && (*(void *)v21 != -2 || v23 != -8192))
            {
              uint64_t v28 = 0;
              llvm::DenseMapBase<llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>,mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::LookupBucketFor<mlir::PassInstrumentation::PipelineParentInfo>((uint64_t *)a1, v21, &v28);
              uint64_t v22 = v28;
              *uint64_t v28 = *(_OWORD *)v21;
              *((_DWORD *)v22 + 4) = *((_DWORD *)v21 + 4);
              ++*(_DWORD *)(a1 + 8);
            }
            uint64_t v21 = (llvm *)((char *)v21 + 24);
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      unint64_t v12 = result;
    }
    uint64_t v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *unint64_t v12 = xmmword_18110BEA0;
      unint64_t v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      uint64_t v15 = result;
LABEL_29:
      uint64_t v27 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *uint64_t v15 = xmmword_18110BEA0;
        uint64_t v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v27);
      return result;
    }
    unint64_t v24 = v14 / 0x18 + 1;
    uint64_t v15 = (_OWORD *)((char *)result + 24 * (v24 & 0x1FFFFFFFFFFFFFFELL));
    uint64_t v25 = v24 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v26 = result;
    do
    {
      *uint64_t v26 = xmmword_18110BEA0;
      *(_OWORD *)((char *)v26 + 24) = xmmword_18110BEA0;
      v26 += 3;
      v25 -= 2;
    }
    while (v25);
    if (v24 != (v24 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_29;
    }
  }
  return result;
}

void llvm::function_ref<std::string ()(void)>::callback_fn<anonymous namespace'::PassTiming::runBeforePass(mlir::Pass *,mlir::Operation *)::{lambda(void)#1}>(mlir::detail::OpToOpPassAdaptor **a1@<X0>, std::string *a2@<X8>)
{
}

void *llvm::function_ref<std::string ()(void)>::callback_fn<anonymous namespace'::PassTiming::runBeforePass(mlir::Pass *,mlir::Operation *)::{lambda(void)#2}>@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)*a1 + 16))(*a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  unint64_t v5 = result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  uint64_t result = memmove(a2, v5, v6);
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

void llvm::function_ref<std::string ()(void)>::callback_fn<anonymous namespace'::PassTiming::runBeforeAnalysis(llvm::StringRef,mlir::TypeID,mlir::Operation *)::{lambda(void)#1}>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(const void **)a1;
  if (!*(void *)a1)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_12;
  }
  std::string::size_type v4 = *(void *)(a1 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v4;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(a1 + 8);
    p_dst = &__dst;
    if (!v4) {
      goto LABEL_11;
    }
  }
  memmove(p_dst, v3, v4);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[v4] = 0;
LABEL_12:
  uint64_t v8 = std::string::insert(&__dst, 0, "(A) ");
  *a2 = *v8;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

mlir::pdl::PDLDialect *mlir::pdl::PDLDialect::PDLDialect(mlir::pdl::PDLDialect *this, mlir::MLIRContext *a2)
{
  uint64_t v3 = (void *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"pdl", 3, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::PDLDialect,void>::id);
  void *v3 = &unk_1EC9CAAF0;
  mlir::Dialect::addOperations<mlir::pdl::ApplyNativeConstraintOp,mlir::pdl::ApplyNativeRewriteOp,mlir::pdl::AttributeOp,mlir::pdl::EraseOp,mlir::pdl::OperandOp,mlir::pdl::OperandsOp,mlir::pdl::OperationOp,mlir::pdl::PatternOp,mlir::pdl::RangeOp,mlir::pdl::ReplaceOp,mlir::pdl::ResultOp,mlir::pdl::ResultsOp,mlir::pdl::RewriteOp,mlir::pdl::TypeOp,mlir::pdl::TypesOp>((uint64_t)v3);
  mlir::pdl::PDLDialect::registerTypes(this);
  return this;
}

void mlir::pdl::PDLDialect::~PDLDialect(llvm **this)
{
}

void sub_1805FCD10(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::Dialect::addOperations<mlir::pdl::ApplyNativeConstraintOp,mlir::pdl::ApplyNativeRewriteOp,mlir::pdl::AttributeOp,mlir::pdl::EraseOp,mlir::pdl::OperandOp,mlir::pdl::OperandsOp,mlir::pdl::OperationOp,mlir::pdl::PatternOp,mlir::pdl::RangeOp,mlir::pdl::ReplaceOp,mlir::pdl::ResultOp,mlir::pdl::ResultsOp,mlir::pdl::RewriteOp,mlir::pdl::TypeOp,mlir::pdl::TypesOp>(uint64_t a1)
{
  mlir::RegisteredOperationName::insert<mlir::pdl::ApplyNativeConstraintOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::ApplyNativeRewriteOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::AttributeOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::EraseOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::OperandOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::OperandsOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::OperationOp>(a1);
  uint64_t v2 = operator new(0x70uLL);
  int v9 = mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v9, (uint64_t)&mlir::pdl::PatternOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v3 = (uint64_t)v9;
  int v9 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  mlir::RegisteredOperationName::insert<mlir::pdl::RangeOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::ReplaceOp>(a1);
  std::string::size_type v4 = operator new(0x70uLL);
  int v9 = mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v9, (uint64_t)&mlir::pdl::ResultOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v5 = (uint64_t)v9;
  int v9 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = operator new(0x70uLL);
  int v9 = mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v9, (uint64_t)&mlir::pdl::ResultsOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v7 = (uint64_t)v9;
  int v9 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  mlir::RegisteredOperationName::insert<mlir::pdl::RewriteOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::TypeOp>(a1);
  return mlir::RegisteredOperationName::insert<mlir::pdl::TypesOp>(a1);
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::verify(uint64_t **this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)*this + 46) & 0x80) != 0 && *((_DWORD *)*this + 17)) {
    return 1;
  }
  unint64_t v11 = (const void **)"expected at least one argument";
  __int16 v12 = 259;
  mlir::OpState::emitOpError(this, &v11, (uint64_t)v13);
  uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v13);
  if (v13[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
  }
  if (v20)
  {
    uint64_t v3 = (void **)__p;
    if (__p)
    {
      std::string::size_type v4 = v19;
      uint64_t v5 = __p;
      if (v19 != __p)
      {
        do
          std::string::size_type v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 1);
        while (v4 != v3);
        uint64_t v5 = __p;
      }
      uint64_t v19 = v3;
      operator delete(v5);
    }
    uint64_t v6 = v16;
    if (v16)
    {
      uint64_t v7 = v17;
      uint64_t v8 = v16;
      if (v17 != v16)
      {
        do
        {
          unsigned int v10 = (void *)*--v7;
          int v9 = v10;
          *uint64_t v7 = 0;
          if (v10) {
            operator delete[](v9);
          }
        }
        while (v7 != v6);
        uint64_t v8 = v16;
      }
      uint64_t v17 = v6;
      operator delete(v8);
    }
    if (v14 != &v15) {
      free(v14);
    }
  }
  return v1;
}

uint64_t mlir::pdl::ApplyNativeRewriteOp::verify(uint64_t **this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0 && *((_DWORD *)v1 + 17) || *((_DWORD *)v1 + 9)) {
    return 1;
  }
  __int16 v12 = (const void **)"expected at least one argument or result";
  __int16 v13 = 259;
  mlir::OpState::emitOpError(this, &v12, (uint64_t)v14);
  uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  }
  if (v21)
  {
    std::string::size_type v4 = (void **)__p;
    if (__p)
    {
      uint64_t v5 = v20;
      uint64_t v6 = __p;
      if (v20 != __p)
      {
        do
          uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        uint64_t v6 = __p;
      }
      char v20 = v4;
      operator delete(v6);
    }
    uint64_t v7 = v17;
    if (v17)
    {
      uint64_t v8 = v18;
      int v9 = v17;
      if (v18 != v17)
      {
        do
        {
          unint64_t v11 = (void *)*--v8;
          unsigned int v10 = v11;
          void *v8 = 0;
          if (v11) {
            operator delete[](v10);
          }
        }
        while (v8 != v7);
        int v9 = v17;
      }
      uint64_t v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16) {
      free(v15);
    }
  }
  return v2;
}

uint64_t mlir::pdl::AttributeOp::verify(uint64_t **this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  unint64_t v3 = *((unsigned int *)*this + 11);
  if ((v3 & 0x800000) != 0 && *((_DWORD *)v2 + 17))
  {
    uint64_t v4 = *(void *)(v2[9] + 24);
    if (v2[2 * ((v3 >> 23) & 1) + 8])
    {
LABEL_4:
      if (!v4) {
        return 1;
      }
      __int16 v23 = 259;
      mlir::OpState::emitOpError(this, v22, (uint64_t)v24);
      uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
      if (v24[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
      }
      if (!v31) {
        return v5;
      }
      uint64_t v6 = (void **)__p;
      if (__p)
      {
        uint64_t v7 = v30;
        uint64_t v8 = __p;
        if (v30 != __p)
        {
          do
            uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          uint64_t v8 = __p;
        }
        uint64_t v30 = v6;
        operator delete(v8);
      }
      int v9 = v27;
      if (!v27)
      {
LABEL_41:
        if (v25 != &v26) {
          free(v25);
        }
        return v5;
      }
      unsigned int v10 = v28;
      unint64_t v11 = v27;
      if (v28 == v27)
      {
LABEL_40:
        uint64_t v28 = v9;
        operator delete(v11);
        goto LABEL_41;
      }
      do
      {
        __int16 v13 = (void *)*--v10;
        __int16 v12 = v13;
        *unsigned int v10 = 0;
        if (v13) {
          operator delete[](v12);
        }
      }
      while (v10 != v9);
LABEL_39:
      unint64_t v11 = v27;
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v2[2 * ((v3 >> 23) & 1) + 8]) {
      goto LABEL_4;
    }
  }
  if (*(_UNKNOWN **)(*(void *)(mlir::Block::getParentOp((mlir::Block *)v2[2]) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
  {
    __int16 v23 = 259;
    mlir::OpState::emitOpError(this, v22, (uint64_t)v24);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (!v31) {
      return v5;
    }
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      uint64_t v17 = v30;
      uint64_t v18 = __p;
      if (v30 != __p)
      {
        do
          uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      uint64_t v30 = v16;
      operator delete(v18);
    }
    int v9 = v27;
    if (!v27) {
      goto LABEL_41;
    }
    uint64_t v19 = v28;
    unint64_t v11 = v27;
    if (v28 == v27) {
      goto LABEL_40;
    }
    do
    {
      char v21 = (void *)*--v19;
      char v20 = v21;
      *uint64_t v19 = 0;
      if (v21) {
        operator delete[](v20);
      }
    }
    while (v19 != v9);
    goto LABEL_39;
  }
  unint64_t v14 = *this;

  return verifyHasBindingUse((mlir::Operation *)v14);
}

uint64_t mlir::pdl::AttributeOp::getValueType(mlir::pdl::AttributeOp *this)
{
  uint64_t v1 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0 && *(_DWORD *)(v1 + 68)) {
    return *(void *)(*(void *)(v1 + 72) + 24);
  }
  else {
    return 0;
  }
}

uint64_t verifyHasBindingUse(mlir::Operation *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (mlir::Block *)*((void *)a1 + 2);
  if (!v2) {
    return 1;
  }
  uint64_t ParentOp = mlir::Block::getParentOp(v2);
  if (!ParentOp
    || *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id
    || (hasBindingUse(a1) & 1) != 0)
  {
    return 1;
  }
  __int16 v15 = 259;
  mlir::Operation::emitOpError((uint64_t *)a1, &v14, (uint64_t)v16);
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
  if (v16[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
  }
  if (v23)
  {
    uint64_t v6 = (void **)__p;
    if (__p)
    {
      uint64_t v7 = v22;
      uint64_t v8 = __p;
      if (v22 != __p)
      {
        do
          uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        uint64_t v8 = __p;
      }
      uint64_t v22 = v6;
      operator delete(v8);
    }
    int v9 = v19;
    if (v19)
    {
      unsigned int v10 = v20;
      unint64_t v11 = v19;
      if (v20 != v19)
      {
        do
        {
          __int16 v13 = (void *)*--v10;
          __int16 v12 = v13;
          *unsigned int v10 = 0;
          if (v13) {
            operator delete[](v12);
          }
        }
        while (v10 != v9);
        unint64_t v11 = v19;
      }
      char v20 = v9;
      operator delete(v11);
    }
    if (v17 != &v18) {
      free(v17);
    }
  }
  return v4;
}

uint64_t mlir::pdl::OperationOp::verify(mlir::Operation **this)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (mlir::Block *)*((void *)*this + 2);
  if (!v2
    || (uint64_t ParentOp = mlir::Block::getParentOp(v2)) == 0
    || *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
  {
    int v4 = 0;
    goto LABEL_5;
  }
  unint64_t v65 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v65 = 0;
  }
  *(void *)&long long v143 = *(void *)(v65 + 8);
  if ((void)v143)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v143);
    int v4 = 1;
LABEL_5:
    unint64_t v5 = *((unsigned int *)*this + 11);
    uint64_t v6 = (uint64_t)*this + 16 * ((v5 >> 23) & 1);
    uint64_t v8 = *(void *)(v6 + 64);
    uint64_t v7 = v6 + 64;
    uint64_t v133 = v8;
    if (!BYTE3(v5)) {
      uint64_t v7 = 0;
    }
    unint64_t v9 = (*(_DWORD *)(v7 + 20) + *(_DWORD *)(v7 + 16)) - (unint64_t)*(unsigned int *)(v7 + 16);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v133);
    if (v10 == v9)
    {
      if (!v4) {
        return verifyHasBindingUse(*this);
      }
      unint64_t v11 = *this;
      unint64_t v12 = *((unsigned int *)*this + 11);
      uint64_t v13 = (v12 >> 23) & 1;
      uint64_t v14 = (uint64_t)*this + 16 * v13 + 64;
      if (!HIBYTE(*((_DWORD *)*this + 11))) {
        uint64_t v14 = 0;
      }
      *(void *)&long long v143 = *(void *)(v14 + 8);
      if ((void)v143)
      {
        uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v143);
        uint64_t v17 = v16;
        uint64_t Context = mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
        mlir::OperationName::OperationName(&v143, AttrData, v17, Context);
        if (mlir::OperationName::mightHaveInterface<mlir::InferTypeOpInterface>((uint64_t *)&v143)) {
          return verifyHasBindingUse(*this);
        }
        unint64_t v11 = *this;
        unint64_t v12 = *((unsigned int *)*this + 11);
        uint64_t v13 = (v12 >> 23) & 1;
      }
      uint64_t v19 = (_DWORD *)((char *)v11 + 16 * v13 + 64);
      if (!BYTE3(v12)) {
        uint64_t v19 = 0;
      }
      if ((v12 & 0x800000) != 0) {
        uint64_t v20 = *((void *)v11 + 9);
      }
      else {
        uint64_t v20 = 0;
      }
      int v21 = v19[4];
      int v22 = v19[5];
      int v23 = v19[6];
      uint64_t v139 = v11;
      uint64_t v24 = *((void *)v11 + 2);
      int v25 = *((_DWORD *)v11 + 9);
      uint64_t v26 = (char *)v11 - 16;
      if (v25) {
        uint64_t v27 = (uint64_t)v26;
      }
      else {
        uint64_t v27 = 0;
      }
      for (unint64_t i = *(void **)mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0); i; unint64_t i = (void *)*i)
      {
        uint64_t v29 = i[2];
        if (v29) {
          BOOL v30 = *(void *)(*(void *)(v29 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::ReplaceOp,void>::id;
        }
        else {
          BOOL v30 = 0;
        }
        if (v30)
        {
          if (mlir::OpOperand::getOperandNumber((unint64_t)i))
          {
            *(void *)&long long v143 = *(void *)(*(void *)(v29 + 72) + 24);
            uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v143);
            if (*(void *)(DefiningOp + 16) != v24
              || mlir::Operation::isBeforeInBlock((mlir::Block **)DefiningOp, v139))
            {
              return verifyHasBindingUse(*this);
            }
          }
        }
      }
      if (v23)
      {
        int v66 = 0;
        uint64_t v67 = (v22 + v21);
        uint64_t v68 = (v23 + v67);
        uint64_t v69 = v20 + 32 * v67;
        int v70 = (char *)(v68 - v67);
        while (1)
        {
          uint64_t v71 = *(void *)(v69 + 32 * (void)v66 + 24);
          uint64_t v137 = v66;
          uint64_t v138 = v71;
          uint64_t v72 = mlir::Value::getDefiningOp((mlir::Value *)&v138);
          unsigned int v73 = *(void **)(*(void *)(v72 + 48) + 16);
          if (v73 != &mlir::detail::TypeIDResolver<mlir::pdl::ApplyNativeRewriteOp,void>::id)
          {
            uint64_t v74 = v72;
            if (v73 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id)
            {
              *(void *)&long long v143 = *(void *)(v72 + 16 * (((unint64_t)*(unsigned int *)(v72 + 44) >> 23) & 1) + 64);
              if (!(void)v143)
              {
                uint64_t v85 = (const char *)*(unsigned int *)(v72 + 36);
                if (v85) {
                  uint64_t v86 = (char *)(v72 - 16);
                }
                else {
                  uint64_t v86 = 0;
                }
                uint64_t v134 = v86;
                long long v135 = v85;
                mlir::ResultRange::use_begin((uint64_t *)&v134, (uint64_t *)&v140);
                unint64_t v87 = (const char *)*(unsigned int *)(v74 + 36);
                if (v87) {
                  uint64_t v88 = (char *)(v74 - 16);
                }
                else {
                  uint64_t v88 = 0;
                }
                uint64_t v134 = v88;
                long long v135 = v87;
                mlir::ResultRange::use_end((uint64_t *)&v134, v146);
                uint64_t v89 = v142;
                uint64_t v145 = v142;
                long long v143 = v140;
                long long v144 = v141;
                uint64_t v90 = v147;
                while (v89 != v90)
                {
                  uint64_t v91 = *(void *)(v89 + 16);
                  if (*(void *)(v91 + 16) != v24)
                  {
                    unint64_t v92 = *(void **)(*(void *)(v91 + 48) + 16);
                    BOOL v93 = v92 == &mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id
                       || v92 == &mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id;
                    if (v93 || v92 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id) {
                      goto LABEL_67;
                    }
                  }
                  mlir::ResultRange::UseIterator::operator++((uint64_t *)&v140);
                  uint64_t v89 = v142;
                }
LABEL_110:
                LOWORD(v142) = 259;
                mlir::OpState::emitOpError((uint64_t **)&v139, (const void ***)&v140, (uint64_t)&v143);
                uint64_t v95 = mlir::Diagnostic::attachNote((uint64_t *)&v143 + 1, 0, 0);
                uint64_t v134 = v137;
                mlir::Diagnostic::append<char const(&)[18],unsigned long,char const(&)[8]>(v95, "result type #", &v134, " was not constrained");
                char v96 = mlir::Diagnostic::operator mlir::LogicalResult();
                if ((void)v143) {
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v143);
                }
                if (v152)
                {
                  uint64_t v97 = (void **)__p;
                  if (__p)
                  {
                    uint64_t v98 = v151;
                    uint64_t v99 = __p;
                    if (v151 != __p)
                    {
                      do
                        uint64_t v98 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v98 - 1);
                      while (v98 != v97);
                      uint64_t v99 = __p;
                    }
                    unint64_t v151 = v97;
                    operator delete(v99);
                  }
                  uint64_t v100 = v148;
                  if (v148)
                  {
                    uint64_t v101 = v149;
                    unint64_t v102 = v148;
                    if (v149 != v148)
                    {
                      do
                      {
                        BOOL v104 = (void *)*--v101;
                        unint64_t v103 = v104;
                        void *v101 = 0;
                        if (v104) {
                          operator delete[](v103);
                        }
                      }
                      while (v101 != v100);
                      unint64_t v102 = v148;
                    }
                    uint64_t v149 = v100;
                    operator delete(v102);
                  }
                  if (*((uint64_t **)&v144 + 1) != v146) {
                    free(*((void **)&v144 + 1));
                  }
                }
                if (v96) {
                  return verifyHasBindingUse(*this);
                }
                return 0;
              }
              mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v143);
            }
            else
            {
              if (v73 != &mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id) {
                goto LABEL_110;
              }
              if (!*(void *)(v72 + 16 * (((unint64_t)*(unsigned int *)(v72 + 44) >> 23) & 1) + 64))
              {
                uint64_t v75 = (const char *)*(unsigned int *)(v72 + 36);
                if (v75) {
                  unint64_t v76 = (char *)(v72 - 16);
                }
                else {
                  unint64_t v76 = 0;
                }
                uint64_t v134 = v76;
                long long v135 = v75;
                mlir::ResultRange::use_begin((uint64_t *)&v134, (uint64_t *)&v140);
                uint64_t v77 = (const char *)*(unsigned int *)(v74 + 36);
                if (v77) {
                  int64x2_t v78 = (char *)(v74 - 16);
                }
                else {
                  int64x2_t v78 = 0;
                }
                uint64_t v134 = v78;
                long long v135 = v77;
                mlir::ResultRange::use_end((uint64_t *)&v134, v146);
                uint64_t v79 = v142;
                uint64_t v145 = v142;
                long long v143 = v140;
                long long v144 = v141;
                uint64_t v80 = v147;
                while (v79 != v80)
                {
                  uint64_t v81 = *(void *)(v79 + 16);
                  if (*(void *)(v81 + 16) != v24)
                  {
                    unsigned int v82 = *(void **)(*(void *)(v81 + 48) + 16);
                    BOOL v83 = v82 == &mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id
                       || v82 == &mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id;
                    if (v83 || v82 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id) {
                      goto LABEL_67;
                    }
                  }
                  mlir::ResultRange::UseIterator::operator++((uint64_t *)&v140);
                  uint64_t v79 = v142;
                }
                goto LABEL_110;
              }
            }
          }
LABEL_67:
          if (++v66 == v70) {
            return verifyHasBindingUse(*this);
          }
        }
      }
      int64_t v111 = (char *)v139 + 16 * (((unint64_t)*((unsigned int *)v139 + 11) >> 23) & 1) + 64;
      if (!HIBYTE(*((_DWORD *)v139 + 11))) {
        int64_t v111 = 0;
      }
      *(void *)&long long v143 = *((void *)v111 + 1);
      if (!(void)v143) {
        return verifyHasBindingUse(*this);
      }
      uint64_t v112 = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v143);
      uint64_t v114 = v113;
      uint64_t v115 = (uint64_t *)mlir::Attribute::getContext((mlir::Operation *)((char *)v139 + 24));
      uint64_t v134 = (char *)mlir::RegisteredOperationName::lookup(v112, v114, v115);
      long long v135 = v116;
      if (!(_BYTE)v116) {
        return verifyHasBindingUse(*this);
      }
      if (mlir::OperationName::hasTrait<mlir::OpTrait::ZeroResults>(&v134)) {
        return verifyHasBindingUse(*this);
      }
      if (mlir::OperationName::hasTrait<mlir::OpTrait::VariadicResults>(&v134)) {
        return verifyHasBindingUse(*this);
      }
      LOWORD(v142) = 259;
      mlir::OpState::emitOpError((uint64_t **)&v139, (const void ***)&v140, (uint64_t)&v143);
      uint64_t v118 = mlir::Diagnostic::attachNote((uint64_t *)&v143 + 1, 0, 0);
      mlir::Diagnostic::append<char const(&)[56],mlir::RegisteredOperationName &,char const(&)[42]>(v118, "operation is created in a non-inferrable context, but '", (uint64_t *)&v134, "' does not implement InferTypeOpInterface");
      char v119 = mlir::Diagnostic::operator mlir::LogicalResult();
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v143);
      if (v119) {
        return verifyHasBindingUse(*this);
      }
      return 0;
    }
    LOWORD(v142) = 257;
    mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v140, (uint64_t)&v143);
    if ((void)v143)
    {
      LODWORD(v134) = 3;
      long long v135 = "expected the same number of attribute values and attribute names, got ";
      uint64_t v136 = 70;
      uint64_t v32 = &v134;
      uint64_t v33 = *((void *)&v144 + 1);
      if (v145 >= HIDWORD(v145))
      {
        unint64_t v120 = v145 + 1;
        if (*((void *)&v144 + 1) <= (unint64_t)&v134
          && *((void *)&v144 + 1) + 24 * (unint64_t)v145 > (unint64_t)&v134)
        {
          uint64_t v128 = (char *)&v134 - *((void *)&v144 + 1);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144 + 8, v146, v120, 24);
          uint64_t v33 = *((void *)&v144 + 1);
          uint64_t v32 = (char **)&v128[*((void *)&v144 + 1)];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144 + 8, v146, v120, 24);
          uint64_t v32 = &v134;
          uint64_t v33 = *((void *)&v144 + 1);
        }
      }
      uint64_t v34 = v33 + 24 * v145;
      long long v35 = *(_OWORD *)v32;
      *(void *)(v34 + 16) = v32[2];
      *(_OWORD *)uint64_t v34 = v35;
      LODWORD(v145) = v145 + 1;
    }
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v133);
    if ((void)v143)
    {
      LODWORD(v134) = 5;
      long long v135 = v36;
      uint64_t v37 = &v134;
      uint64_t v38 = *((void *)&v144 + 1);
      if (v145 >= HIDWORD(v145))
      {
        unint64_t v121 = v145 + 1;
        if (*((void *)&v144 + 1) <= (unint64_t)&v134
          && *((void *)&v144 + 1) + 24 * (unint64_t)v145 > (unint64_t)&v134)
        {
          unsigned __int8 v129 = (char *)&v134 - *((void *)&v144 + 1);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144 + 8, v146, v121, 24);
          uint64_t v38 = *((void *)&v144 + 1);
          uint64_t v37 = (char **)&v129[*((void *)&v144 + 1)];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144 + 8, v146, v121, 24);
          uint64_t v37 = &v134;
          uint64_t v38 = *((void *)&v144 + 1);
        }
      }
      uint64_t v39 = v38 + 24 * v145;
      long long v40 = *(_OWORD *)v37;
      *(void *)(v39 + 16) = v37[2];
      *(_OWORD *)uint64_t v39 = v40;
      uint64_t v41 = (v145 + 1);
      LODWORD(v145) = v145 + 1;
      if ((void)v143)
      {
        LODWORD(v134) = 3;
        long long v135 = " names and ";
        uint64_t v136 = 11;
        uint64_t v42 = &v134;
        uint64_t v43 = *((void *)&v144 + 1);
        if (v41 >= HIDWORD(v145))
        {
          unint64_t v122 = v41 + 1;
          BOOL v123 = *((void *)&v144 + 1) + 24 * (unint64_t)v41 > (unint64_t)&v134;
          if (*((void *)&v144 + 1) <= (unint64_t)&v134 && v123)
          {
            long long v130 = (char *)&v134 - *((void *)&v144 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144 + 8, v146, v122, 24);
            uint64_t v43 = *((void *)&v144 + 1);
            uint64_t v42 = (char **)&v130[*((void *)&v144 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144 + 8, v146, v122, 24);
            uint64_t v42 = &v134;
            uint64_t v43 = *((void *)&v144 + 1);
          }
        }
        uint64_t v44 = v43 + 24 * v145;
        long long v45 = *(_OWORD *)v42;
        *(void *)(v44 + 16) = v42[2];
        *(_OWORD *)uint64_t v44 = v45;
        uint64_t v46 = (v145 + 1);
        LODWORD(v145) = v145 + 1;
        if ((void)v143)
        {
          LODWORD(v134) = 5;
          long long v135 = (const char *)v9;
          uint64_t v47 = &v134;
          uint64_t v48 = *((void *)&v144 + 1);
          if (v46 >= HIDWORD(v145))
          {
            unint64_t v124 = v46 + 1;
            BOOL v125 = *((void *)&v144 + 1) + 24 * (unint64_t)v46 > (unint64_t)&v134;
            if (*((void *)&v144 + 1) <= (unint64_t)&v134 && v125)
            {
              unint64_t v131 = (char *)&v134 - *((void *)&v144 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144 + 8, v146, v124, 24);
              uint64_t v48 = *((void *)&v144 + 1);
              uint64_t v47 = (char **)&v131[*((void *)&v144 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144 + 8, v146, v124, 24);
              uint64_t v47 = &v134;
              uint64_t v48 = *((void *)&v144 + 1);
            }
          }
          uint64_t v49 = v48 + 24 * v145;
          long long v50 = *(_OWORD *)v47;
          *(void *)(v49 + 16) = v47[2];
          *(_OWORD *)uint64_t v49 = v50;
          uint64_t v51 = (v145 + 1);
          LODWORD(v145) = v145 + 1;
          if ((void)v143)
          {
            LODWORD(v134) = 3;
            long long v135 = " values";
            uint64_t v136 = 7;
            int v52 = &v134;
            uint64_t v53 = *((void *)&v144 + 1);
            if (v51 >= HIDWORD(v145))
            {
              unint64_t v126 = v51 + 1;
              BOOL v127 = *((void *)&v144 + 1) + 24 * (unint64_t)v51 > (unint64_t)&v134;
              if (*((void *)&v144 + 1) <= (unint64_t)&v134 && v127)
              {
                uint64_t v132 = (char *)&v134 - *((void *)&v144 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144 + 8, v146, v126, 24);
                uint64_t v53 = *((void *)&v144 + 1);
                int v52 = (char **)&v132[*((void *)&v144 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144 + 8, v146, v126, 24);
                int v52 = &v134;
                uint64_t v53 = *((void *)&v144 + 1);
              }
            }
            uint64_t v54 = v53 + 24 * v145;
            long long v55 = *(_OWORD *)v52;
            *(void *)(v54 + 16) = v52[2];
            *(_OWORD *)uint64_t v54 = v55;
            LODWORD(v145) = v145 + 1;
          }
        }
      }
    }
    uint64_t v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v143);
    if ((void)v143) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v143);
    }
    if (v152)
    {
      uint64_t v57 = (void **)__p;
      if (__p)
      {
        unint64_t v58 = v151;
        uint64_t v59 = __p;
        if (v151 != __p)
        {
          do
            unint64_t v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
          while (v58 != v57);
          uint64_t v59 = __p;
        }
        unint64_t v151 = v57;
        operator delete(v59);
      }
      uint64_t v60 = v148;
      if (!v148) {
        goto LABEL_140;
      }
      long long v61 = v149;
      uint64_t v62 = v148;
      if (v149 == v148)
      {
LABEL_139:
        uint64_t v149 = v60;
        operator delete(v62);
LABEL_140:
        if (*((uint64_t **)&v144 + 1) != v146) {
          free(*((void **)&v144 + 1));
        }
        return v56;
      }
      do
      {
        uint64_t v64 = (void *)*--v61;
        __int16 v63 = v64;
        *long long v61 = 0;
        if (v64) {
          operator delete[](v63);
        }
      }
      while (v61 != v60);
LABEL_138:
      uint64_t v62 = v148;
      goto LABEL_139;
    }
    return v56;
  }
  LOWORD(v142) = 259;
  mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v140, (uint64_t)&v143);
  uint64_t v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v143);
  if ((void)v143) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v143);
  }
  if (v152)
  {
    unint64_t v105 = (void **)__p;
    if (__p)
    {
      BOOL v106 = v151;
      unint64_t v107 = __p;
      if (v151 != __p)
      {
        do
          BOOL v106 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v106 - 1);
        while (v106 != v105);
        unint64_t v107 = __p;
      }
      unint64_t v151 = v105;
      operator delete(v107);
    }
    uint64_t v60 = v148;
    if (!v148) {
      goto LABEL_140;
    }
    BOOL v108 = v149;
    uint64_t v62 = v148;
    if (v149 == v148) {
      goto LABEL_139;
    }
    do
    {
      BOOL v110 = (void *)*--v108;
      unint64_t v109 = v110;
      *BOOL v108 = 0;
      if (v110) {
        operator delete[](v109);
      }
    }
    while (v108 != v60);
    goto LABEL_138;
  }
  return v56;
}

uint64_t mlir::pdl::OperationOp::getOpName@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = 0;
  }
  uint64_t v5 = *(void *)(v3 + 8);
  if (v5)
  {
    this = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v5);
    *(void *)a2 = this;
    *(void *)(a2 + 8) = v4;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return this;
}

uint64_t mlir::pdl::OperationOp::getAttributeValues(mlir::pdl::OperationOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(unsigned int *)(v2 + 16);
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

uint64_t mlir::pdl::OperationOp::getTypeValues(mlir::pdl::OperationOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (*(_DWORD *)(v2 + 20) + *(_DWORD *)(v2 + 16));
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

BOOL mlir::pdl::OperationOp::hasTypeInference(mlir::pdl::OperationOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v8 = *(void *)(v1 + 8);
  if (!v8) {
    return 0;
  }
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v8);
  uint64_t v5 = v4;
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  mlir::OperationName::OperationName(&v8, AttrData, v5, Context);
  return mlir::OperationName::hasInterface<mlir::InferTypeOpInterface>((uint64_t)&v8);
}

BOOL mlir::OperationName::hasInterface<mlir::InferTypeOpInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      int v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v22 = 76;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      __int16 v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(*(void *)a1 + 40);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 3864);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = &v4[2 * v2];
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  return v4 != v5 && *v4 == v3 && v4[1] != 0;
}

BOOL mlir::OperationName::mightHaveInterface<mlir::InferTypeOpInterface>(uint64_t *a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    int v21 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v13 = v12;
    a1 = v21;
    if (v13)
    {
      unint64_t v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v23 = 76;
      unint64_t v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = v23;
      }
      unint64_t v16 = &v22[v15];
      unint64_t v17 = v23 - v15;
      if (v23 - v15 >= 0x12) {
        uint64_t v18 = 18;
      }
      else {
        uint64_t v18 = v23 - v15;
      }
      unint64_t v19 = v17 - v18;
      if (v19 >= v19 - 1) {
        uint64_t v20 = v19 - 1;
      }
      else {
        uint64_t v20 = v19;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v21;
    }
  }
  uint64_t v2 = *a1;
  if (*(_UNKNOWN **)(*a1 + 16) == &mlir::detail::TypeIDResolver<void,void>::id) {
    return 1;
  }
  unint64_t v3 = *(unsigned int *)(v2 + 40);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = *(void *)(v1 + 3864);
  uint64_t v5 = *(void **)(v2 + 32);
  unint64_t v6 = &v5[2 * v3];
  do
  {
    unint64_t v7 = v3 >> 1;
    uint64_t v8 = &v5[2 * (v3 >> 1)];
    unint64_t v10 = *v8;
    unint64_t v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4) {
      uint64_t v5 = v9;
    }
    else {
      unint64_t v3 = v7;
    }
  }
  while (v3);
  return v5 != v6 && *v5 == v4 && v5[1] != 0;
}

uint64_t mlir::pdl::PatternOp::verifyRegions(uint64_t **this)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *((unsigned int *)*this + 11);
  if ((v2 & 0x7FFFFF) != 0) {
    unint64_t v3 = (((unint64_t)&(*this)[2 * ((v2 >> 23) & 1) + 8] + ((v2 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
  }
       + 32 * *((unsigned int *)*this + 10);
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4) {
    uint64_t v5 = (mlir::GenericProgramPoint **)(v4 - 8);
  }
  else {
    uint64_t v5 = 0;
  }
  mlir::Block::getTerminator(v5);
  if (v6) {
    BOOL v7 = *(void *)(*(void *)(v6 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    *(void *)&long long v101 = this;
    uint64_t v25 = *(void *)(v3 + 8);
    unint64_t v26 = v3;
    if (v25 != v3)
    {
      do
      {
        uint64_t v27 = v25 - 8;
        if (!v25) {
          uint64_t v27 = 0;
        }
        uint64_t v28 = (mlir::GenericProgramPoint *)(v27 + 32);
        uint64_t v29 = *(mlir::GenericProgramPoint **)(v27 + 40);
        while (v29 != v28)
        {
          BOOL v30 = (mlir::GenericProgramPoint *)*((void *)v29 + 1);
          mlir::GenericProgramPoint::~GenericProgramPoint(v29);
          int v32 = mlir::detail::walk<mlir::ForwardIterator>(v31, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::pdl::PatternOp::verifyRegions(void)::$_0>, (uint64_t)&v101, 1);
          uint64_t v29 = v30;
          if (!v32) {
            return 0;
          }
        }
        uint64_t v25 = *(void *)(v25 + 8);
      }
      while (v25 != v3);
      unint64_t v26 = *(void *)(v3 + 8);
    }
    if (v26) {
      unint64_t v33 = v26 - 8;
    }
    else {
      unint64_t v33 = 0;
    }
    uint64_t v34 = (mlir::GenericProgramPoint *)(v33 + 32);
    long long v35 = *(mlir::GenericProgramPoint **)(v33 + 40);
    if (v35 != (mlir::GenericProgramPoint *)(v33 + 32))
    {
      while (1)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v35);
        if (*(_UNKNOWN **)(*(void *)(v36 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id) {
          break;
        }
        long long v35 = (mlir::GenericProgramPoint *)*((void *)v35 + 1);
        if (v35 == v34) {
          goto LABEL_52;
        }
      }
      if (v35 != v34)
      {
        unsigned int v95 = 0;
        int64x2_t v94 = 0uLL;
        uint64_t v38 = *(void *)(v3 + 8);
        if (v38) {
          uint64_t v39 = v38 - 8;
        }
        else {
          uint64_t v39 = 0;
        }
        long long v40 = (mlir::GenericProgramPoint *)(v39 + 32);
        uint64_t v41 = *(mlir::GenericProgramPoint **)(v39 + 40);
        if (v41 == (mlir::GenericProgramPoint *)(v39 + 32)) {
          goto LABEL_109;
        }
        char v42 = 1;
LABEL_69:
        mlir::GenericProgramPoint::~GenericProgramPoint(v41);
        int v52 = *(int **)(*(void *)(v51 + 48) + 16);
        if (v52 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id
          && v52 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id
          && v52 != &mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id
          && v52 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id
          && v52 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id)
        {
          goto LABEL_68;
        }
        uint64_t v57 = v51;
        unint64_t v58 = (const char *)*(unsigned int *)(v51 + 36);
        uint64_t v59 = v51 - 16;
        if (v58) {
          uint64_t v60 = v51 - 16;
        }
        else {
          uint64_t v60 = 0;
        }
        uint64_t v98 = v60;
        uint64_t v99 = v58;
        mlir::ResultRange::use_begin(&v98, (uint64_t *)v96);
        long long v61 = (const char *)*(unsigned int *)(v57 + 36);
        if (v61) {
          uint64_t v62 = v59;
        }
        else {
          uint64_t v62 = 0;
        }
        uint64_t v98 = v62;
        uint64_t v99 = v61;
        mlir::ResultRange::use_end(&v98, v104);
        uint64_t v63 = v97;
        uint64_t v103 = v97;
        long long v101 = v96[0];
        long long v102 = v96[1];
        uint64_t v64 = v104[4];
        while (1)
        {
          if (v63 == v64) {
            goto LABEL_68;
          }
          uint64_t v65 = *(void *)(v63 + 16);
          int v66 = *(mlir::Block **)(v65 + 16);
          if (v66)
          {
            unint64_t Parent = mlir::Block::getParent(v66);
            if (*(_UNKNOWN **)(*(void *)(v65 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id
              || Parent
              && *(_UNKNOWN **)(*(void *)(*(void *)(Parent + 16) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
            {
LABEL_97:
              if (v42)
              {
                visit(v57, &v94);
              }
              else
              {
                if (!v95) {
                  goto LABEL_110;
                }
                unsigned int v68 = (v95 - 1) & ((v57 >> 4) ^ (v57 >> 9));
                uint64_t v69 = *(void *)(v94.i64[0] + 8 * v68);
                if (v69 != v57)
                {
                  int v70 = 1;
                  while (v69 != -4096)
                  {
                    char v42 = 0;
                    unsigned int v71 = v68 + v70++;
                    unsigned int v68 = v71 & (v95 - 1);
                    uint64_t v69 = *(void *)(v94.i64[0] + 8 * v68);
                    if (v69 == v57) {
                      goto LABEL_68;
                    }
                  }
LABEL_110:
                  *(void *)&v96[0] = "the operations must form a connected component";
                  LOWORD(v97) = 259;
                  mlir::OpState::emitOpError(this, (const void ***)v96, (uint64_t)&v101);
                  uint64_t v73 = mlir::Diagnostic::attachNote((uint64_t *)&v101 + 1, *(void *)(v57 + 24), 1);
                  uint64_t v74 = v73 + 16;
                  unint64_t v75 = *(void *)(v73 + 16);
                  LODWORD(v98) = 3;
                  uint64_t v99 = "see a disconnected value / operation here";
                  uint64_t v100 = 41;
                  uint64_t v76 = *(unsigned int *)(v73 + 24);
                  uint64_t v77 = &v98;
                  if (v76 >= *(_DWORD *)(v73 + 28))
                  {
                    unint64_t v90 = v76 + 1;
                    BOOL v91 = v75 + 24 * v76 > (unint64_t)&v98;
                    if (v75 <= (unint64_t)&v98 && v91)
                    {
                      BOOL v93 = (char *)&v98 - v75;
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v74, (void *)(v73 + 32), v90, 24);
                      unint64_t v75 = *(void *)(v73 + 16);
                      uint64_t v77 = (uint64_t *)&v93[v75];
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v74, (void *)(v73 + 32), v90, 24);
                      unint64_t v75 = *(void *)(v73 + 16);
                      uint64_t v77 = &v98;
                    }
                  }
                  uint64_t v78 = v75 + 24 * *(unsigned int *)(v73 + 24);
                  long long v79 = *(_OWORD *)v77;
                  *(void *)(v78 + 16) = v77[2];
                  *(_OWORD *)uint64_t v78 = v79;
                  ++*(_DWORD *)(v73 + 24);
                  mlir::Diagnostic::operator mlir::LogicalResult();
                  if ((void)v101) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v101);
                  }
                  if (v109)
                  {
                    uint64_t v80 = (void **)__p;
                    if (__p)
                    {
                      uint64_t v81 = v108;
                      unsigned int v82 = __p;
                      if (v108 != __p)
                      {
                        do
                          uint64_t v81 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v81 - 1);
                        while (v81 != v80);
                        unsigned int v82 = __p;
                      }
                      BOOL v108 = v80;
                      operator delete(v82);
                    }
                    BOOL v83 = v105;
                    if (v105)
                    {
                      unsigned int v84 = v106;
                      uint64_t v85 = v105;
                      if (v106 != v105)
                      {
                        do
                        {
                          unint64_t v87 = (void *)*--v84;
                          uint64_t v86 = v87;
                          *unsigned int v84 = 0;
                          if (v87) {
                            operator delete[](v86);
                          }
                        }
                        while (v84 != v83);
                        uint64_t v85 = v105;
                      }
                      BOOL v106 = v83;
                      operator delete(v85);
                    }
                    if (*((uint64_t **)&v102 + 1) != v104) {
                      free(*((void **)&v102 + 1));
                    }
                  }
LABEL_109:
                  llvm::deallocate_buffer((llvm *)v94.i64[0], (void *)(8 * v95));
                }
              }
              char v42 = 0;
LABEL_68:
              uint64_t v41 = (mlir::GenericProgramPoint *)*((void *)v41 + 1);
              if (v41 == v40) {
                goto LABEL_109;
              }
              goto LABEL_69;
            }
          }
          else if (*(_UNKNOWN **)(*(void *)(v65 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
          {
            goto LABEL_97;
          }
          mlir::ResultRange::UseIterator::operator++((uint64_t *)v96);
          uint64_t v63 = v97;
        }
      }
    }
LABEL_52:
    LOWORD(v97) = 259;
    mlir::OpState::emitOpError(this, (const void ***)v96, (uint64_t)&v101);
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v101);
    if ((void)v101) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v101);
    }
    if (v109)
    {
      uint64_t v43 = (void **)__p;
      if (__p)
      {
        uint64_t v44 = v108;
        long long v45 = __p;
        if (v108 != __p)
        {
          do
            uint64_t v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
          while (v44 != v43);
          long long v45 = __p;
        }
        BOOL v108 = v43;
        operator delete(v45);
      }
      uint64_t v46 = v105;
      if (v105)
      {
        uint64_t v47 = v106;
        uint64_t v48 = v105;
        if (v106 != v105)
        {
          do
          {
            long long v50 = (void *)*--v47;
            uint64_t v49 = v50;
            *uint64_t v47 = 0;
            if (v50) {
              operator delete[](v49);
            }
          }
          while (v47 != v46);
          uint64_t v48 = v105;
        }
        BOOL v106 = v46;
        operator delete(v48);
      }
      uint64_t v37 = (void *)*((void *)&v102 + 1);
      if (*((uint64_t **)&v102 + 1) != v104) {
        goto LABEL_107;
      }
    }
  }
  else
  {
    uint64_t v8 = v6;
    LOWORD(v97) = 259;
    mlir::OpState::emitOpError(this, (const void ***)v96, (uint64_t)&v101);
    uint64_t v9 = mlir::Diagnostic::attachNote((uint64_t *)&v101 + 1, *(void *)(v8 + 24), 1);
    uint64_t v10 = v9 + 16;
    unint64_t v11 = *(void *)(v9 + 16);
    LODWORD(v98) = 3;
    uint64_t v99 = "see terminator defined here";
    uint64_t v100 = 27;
    uint64_t v12 = *(unsigned int *)(v9 + 24);
    int v13 = &v98;
    if (v12 >= *(_DWORD *)(v9 + 28))
    {
      unint64_t v88 = v12 + 1;
      BOOL v89 = v11 + 24 * v12 > (unint64_t)&v98;
      if (v11 <= (unint64_t)&v98 && v89)
      {
        unint64_t v92 = (char *)&v98 - v11;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 32), v88, 24);
        unint64_t v11 = *(void *)(v9 + 16);
        int v13 = (uint64_t *)&v92[v11];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 32), v88, 24);
        unint64_t v11 = *(void *)(v9 + 16);
        int v13 = &v98;
      }
    }
    uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 24);
    long long v15 = *(_OWORD *)v13;
    *(void *)(v14 + 16) = v13[2];
    *(_OWORD *)uint64_t v14 = v15;
    ++*(_DWORD *)(v9 + 24);
    uint64_t v16 = mlir::Diagnostic::operator mlir::LogicalResult();
    if ((void)v101) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v101);
    }
    if (v109)
    {
      unint64_t v17 = (void **)__p;
      if (__p)
      {
        uint64_t v18 = v108;
        unint64_t v19 = __p;
        if (v108 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          unint64_t v19 = __p;
        }
        BOOL v108 = v17;
        operator delete(v19);
      }
      uint64_t v20 = v105;
      if (v105)
      {
        int v21 = v106;
        unint64_t v22 = v105;
        if (v106 != v105)
        {
          do
          {
            uint64_t v24 = (void *)*--v21;
            unint64_t v23 = v24;
            void *v21 = 0;
            if (v24) {
              operator delete[](v23);
            }
          }
          while (v21 != v20);
          unint64_t v22 = v105;
        }
        BOOL v106 = v20;
        operator delete(v22);
      }
      uint64_t v37 = (void *)*((void *)&v102 + 1);
      if (*((uint64_t **)&v102 + 1) != v104) {
LABEL_107:
      }
        free(v37);
    }
  }
  return v16;
}

uint64_t *visit(uint64_t a1, int64x2_t *a2)
{
  uint64_t v33 = a1;
  uint64_t result = (uint64_t *)mlir::Block::getParentOp(*(mlir::Block **)(a1 + 16));
  if (*(_UNKNOWN **)(result[6] + 16) != &mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id
    || *(_UNKNOWN **)(*(void *)(a1 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
  {
    return result;
  }
  uint64_t v5 = a2->i64[0];
  uint64_t v6 = a2[1].u32[0];
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    uint64_t v8 = (uint64_t *)(v5 + 8 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a1) {
      goto LABEL_11;
    }
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(void *)(v5 + 8 * v7);
      if (v9 == a1)
      {
        uint64_t v8 = (uint64_t *)(v5 + 8 * v7);
        goto LABEL_11;
      }
    }
  }
  uint64_t v8 = (uint64_t *)(v5 + 8 * v6);
LABEL_11:
  if (v8 != (uint64_t *)(v5 + 8 * v6)) {
    return result;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a2, &v33, (uint64_t)v29);
  uint64_t v12 = *(int **)(*(void *)(v33 + 48) + 16);
  if (!v33 || v12 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id)
  {
    *(void *)&v34[0] = a2;
    if (v33 && v12 == &mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id)
    {
      *(void *)&v29[0] = *(void *)(*(void *)(v33 + 72) + 24);
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v29);
      visit(DefiningOp, a2);
    }
    else if (v33 && v12 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id)
    {
      visit(mlir::Operation *,llvm::DenseSet<mlir::Operation *,llvm::DenseMapInfo<mlir::Operation *,void>> &)::$_1::operator()<mlir::pdl::ResultsOp>(v34, v33);
    }
    goto LABEL_27;
  }
  unint64_t v13 = *(unsigned int *)(v33 + 44);
  uint64_t v14 = v33 + 16 * ((v13 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(v33 + 44))) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(unsigned int *)(v14 + 16);
  if ((v13 & 0x800000) != 0)
  {
    uint64_t v16 = *(void *)(v33 + 72);
    if (!v15) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v16 = 0;
    if (!v15) {
      goto LABEL_27;
    }
  }
  unint64_t v17 = (uint64_t *)(v16 + 24);
  do
  {
    uint64_t v18 = *v17;
    v17 += 4;
    *(void *)&v29[0] = v18;
    uint64_t v19 = mlir::Value::getDefiningOp((mlir::Value *)v29);
    visit(v19, a2);
    --v15;
  }
  while (v15);
LABEL_27:
  uint64_t v21 = v33;
  uint64_t v22 = *(unsigned int *)(v33 + 36);
  uint64_t v23 = v33 - 16;
  if (v22) {
    uint64_t v24 = v33 - 16;
  }
  else {
    uint64_t v24 = 0;
  }
  *(void *)&v29[0] = v24;
  *((void *)&v29[0] + 1) = v22;
  mlir::ResultRange::use_begin((uint64_t *)v29, (uint64_t *)v34);
  uint64_t v25 = *(unsigned int *)(v21 + 36);
  if (v25) {
    uint64_t v26 = v23;
  }
  else {
    uint64_t v26 = 0;
  }
  v36[0] = v26;
  v36[1] = v25;
  uint64_t result = mlir::ResultRange::use_end(v36, v31);
  uint64_t v27 = v35;
  uint64_t v30 = v35;
  v29[0] = v34[0];
  v29[1] = v34[1];
  for (i = v32; v35 != i; uint64_t v27 = v35)
  {
    visit(*(void *)(v27 + 16), a2);
    uint64_t result = mlir::ResultRange::UseIterator::operator++((uint64_t *)v34);
  }
  return result;
}

_OWORD *mlir::Region::emplaceBlock(mlir::Region *this)
{
  unint64_t v2 = operator new(0x48uLL);
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = v2 + 2;
  *((void *)v2 + 5) = v2 + 2;
  *((void *)v2 + 7) = 0;
  *((void *)v2 + 8) = 0;
  *((void *)v2 + 6) = 0;
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)this, (uint64_t)v2);
  uint64_t v3 = *(void *)this;
  *((void *)v2 + 2) = this;
  *((void *)v2 + 1) = v3;
  *(void *)(v3 + 8) = (char *)v2 + 8;
  *(void *)this = (char *)v2 + 8;
  return v2;
}

void mlir::pdl::PatternOp::getRewriter(mlir::pdl::PatternOp *this)
{
  uint64_t v1 = *(void *)(((*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)this + 40)
                 + 8);
  if (v1) {
    mlir::Block::getTerminator((mlir::GenericProgramPoint **)(v1 - 8));
  }
  else {
    mlir::Block::getTerminator(0);
  }
}

uint64_t mlir::pdl::RangeOp::verify(uint64_t **this)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  v53[0] = *(*this - 1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v53);
  uint64_t v3 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v4 = v3[9];
    uint64_t v5 = *((unsigned int *)v3 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v53[0] = v4;
  v53[1] = v5;
  mlir::OperandRange::getTypes(v53, &v46);
  uint64_t v6 = v46;
  uint64_t v7 = v48;
  if (v46 == v48 && v47 == v49) {
    return 1;
  }
  uint64_t v8 = v46 + 32 * v47 + 24;
  uint64_t v9 = ~v47 + v49;
  while (1)
  {
    Rangeuint64_t ElementTypeOrSelf = mlir::pdl::getRangeElementTypeOrSelf((void *)(*(void *)(*(void *)v8 + 8) & 0xFFFFFFFFFFFFFFF8));
    if (RangeElementTypeOrSelf != (void *)Value) {
      break;
    }
    BOOL v12 = v9-- != 0;
    v8 += 32;
    if (v6 == v7 && !v12) {
      return 1;
    }
  }
  uint64_t v15 = (uint64_t)RangeElementTypeOrSelf;
  uint64_t v44 = (const void **)"expected operand to have element type ";
  __int16 v45 = 259;
  mlir::OpState::emitOpError(this, &v44, (uint64_t)v53);
  if (v53[0])
  {
    uint64_t v16 = &v50;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, Value);
    unint64_t v17 = (char *)v54;
    if (v55 >= v56)
    {
      unint64_t v37 = v55 + 1;
      if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
      {
        int64_t v41 = (char *)&v50 - (unsigned char *)v54;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
        unint64_t v17 = (char *)v54;
        uint64_t v16 = (int *)((char *)v54 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
        uint64_t v16 = &v50;
        unint64_t v17 = (char *)v54;
      }
    }
    uint64_t v18 = &v17[24 * v55];
    long long v19 = *(_OWORD *)v16;
    *((void *)v18 + 2) = *((void *)v16 + 2);
    *(_OWORD *)uint64_t v18 = v19;
    uint64_t v20 = ++v55;
    if (v53[0])
    {
      int v50 = 3;
      uint64_t v51 = ", but got ";
      uint64_t v52 = 10;
      uint64_t v21 = &v50;
      uint64_t v22 = (char *)v54;
      if (v20 >= v56)
      {
        unint64_t v38 = v20 + 1;
        BOOL v39 = (char *)v54 + 24 * v20 > (char *)&v50;
        if (v54 <= &v50 && v39)
        {
          int64_t v42 = (char *)&v50 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          uint64_t v22 = (char *)v54;
          uint64_t v21 = (int *)((char *)v54 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          uint64_t v21 = &v50;
          uint64_t v22 = (char *)v54;
        }
      }
      uint64_t v23 = &v22[24 * v55];
      long long v24 = *(_OWORD *)v21;
      *((void *)v23 + 2) = *((void *)v21 + 2);
      *(_OWORD *)uint64_t v23 = v24;
      ++v55;
      if (v53[0])
      {
        uint64_t v25 = &v50;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, v15);
        uint64_t v26 = (char *)v54;
        if (v55 >= v56)
        {
          unint64_t v40 = v55 + 1;
          if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
          {
            int64_t v43 = (char *)&v50 - (unsigned char *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
            uint64_t v26 = (char *)v54;
            uint64_t v25 = (int *)((char *)v54 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
            uint64_t v25 = &v50;
            uint64_t v26 = (char *)v54;
          }
        }
        uint64_t v27 = &v26[24 * v55];
        long long v28 = *(_OWORD *)v25;
        *((void *)v27 + 2) = *((void *)v25 + 2);
        *(_OWORD *)uint64_t v27 = v28;
        ++v55;
      }
    }
  }
  uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  }
  if (v62)
  {
    uint64_t v29 = (void **)__p;
    if (__p)
    {
      uint64_t v30 = v61;
      char v31 = __p;
      if (v61 != __p)
      {
        do
          uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        char v31 = __p;
      }
      long long v61 = v29;
      operator delete(v31);
    }
    uint64_t v32 = v58;
    if (v58)
    {
      uint64_t v33 = v59;
      uint64_t v34 = v58;
      if (v59 != v58)
      {
        do
        {
          uint64_t v36 = (void *)*--v33;
          uint64_t v35 = v36;
          *uint64_t v33 = 0;
          if (v36) {
            operator delete[](v35);
          }
        }
        while (v33 != v32);
        uint64_t v34 = v58;
      }
      uint64_t v59 = v32;
      operator delete(v34);
    }
    if (v54 != v57) {
      free(v54);
    }
  }
  return v13;
}

uint64_t mlir::pdl::ReplaceOp::verify(uint64_t **this)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *((unsigned int *)*this + 11);
  unint64_t v2 = &(*this)[2 * ((v1 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v2 = 0;
  }
  unsigned int v3 = *((_DWORD *)v2 + 1);
  if ((v1 & 0x800000) == 0)
  {
    uint64_t v4 = 0;
    if (v3) {
      goto LABEL_5;
    }
    return 1;
  }
  uint64_t v4 = (*this)[9];
  if (!v3) {
    return 1;
  }
LABEL_5:
  if (!*(void *)(v4 + 32 * *(unsigned int *)v2 + 24) || !*((_DWORD *)v2 + 2)) {
    return 1;
  }
  __int16 v22 = 257;
  mlir::OpState::emitOpError(this, &v21, (uint64_t)v26);
  if (v26[0])
  {
    int v23 = 3;
    long long v24 = "expected no replacement values to be provided when the replacement operation is present";
    uint64_t v25 = 87;
    uint64_t v5 = &v23;
    uint64_t v6 = (char *)v27;
    if (v28 >= v29)
    {
      unint64_t v19 = v28 + 1;
      if (v27 <= &v23 && (char *)v27 + 24 * v28 > (char *)&v23)
      {
        int64_t v20 = (char *)&v23 - (unsigned char *)v27;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v19, 24);
        uint64_t v6 = (char *)v27;
        uint64_t v5 = (int *)((char *)v27 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v19, 24);
        uint64_t v5 = &v23;
        uint64_t v6 = (char *)v27;
      }
    }
    uint64_t v7 = &v6[24 * v28];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    ++v28;
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
  if (v26[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  }
  if (v35)
  {
    int v10 = (void **)__p;
    if (__p)
    {
      int v11 = v34;
      BOOL v12 = __p;
      if (v34 != __p)
      {
        do
          int v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        BOOL v12 = __p;
      }
      uint64_t v34 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v31;
    if (v31)
    {
      uint64_t v14 = v32;
      uint64_t v15 = v31;
      if (v32 != v31)
      {
        do
        {
          unint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v31;
      }
      uint64_t v32 = v13;
      operator delete(v15);
    }
    if (v27 != v30) {
      free(v27);
    }
  }
  return v9;
}

uint64_t mlir::pdl::ReplaceOp::getReplOperation(mlir::pdl::ReplaceOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  unint64_t v2 = (unsigned int *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = 0;
  }
  unsigned int v3 = v2[1];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * *v2 + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * *v2 + 24);
    }
  }
  return 0;
}

uint64_t mlir::pdl::ReplaceOp::getReplValues(mlir::pdl::ReplaceOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t v3 = (v2[1] + *v2);
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

uint64_t mlir::pdl::ResultsOp::verify(uint64_t **this)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *this;
  v27[0] = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v27[0])
  {
    mlir::IntegerAttr::getValue(v27, (llvm::APInt *)&__p);
    if (v33 >= 0x41 && __p != 0) {
      operator delete[](__p);
    }
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)(*(v1 - 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
    return 1;
  }
  __int16 v28 = 257;
  mlir::OpState::emitOpError(this, v27, (uint64_t)&__p);
  if (__p)
  {
    int v29 = 3;
    uint64_t v31 = 77;
    uint64_t v6 = &v29;
    uint64_t v7 = (char *)v34;
    if (v35 >= v36)
    {
      unint64_t v23 = v35 + 1;
      if (v34 <= &v29 && (char *)v34 + 24 * v35 > (char *)&v29)
      {
        int64_t v25 = (char *)&v29 - (unsigned char *)v34;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v23, 24);
        uint64_t v7 = (char *)v34;
        uint64_t v6 = (int *)((char *)v34 + v25);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v23, 24);
        uint64_t v6 = &v29;
        uint64_t v7 = (char *)v34;
      }
    }
    long long v8 = &v7[24 * v35];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)long long v8 = v9;
    ++v35;
    if (__p)
    {
      unint64_t v10 = *(*this - 1) & 0xFFFFFFFFFFFFFFF8;
      int v11 = &v29;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v29, v10);
      BOOL v12 = (char *)v34;
      if (v35 >= v36)
      {
        unint64_t v24 = v35 + 1;
        if (v34 <= &v29 && (char *)v34 + 24 * v35 > (char *)&v29)
        {
          int64_t v26 = (char *)&v29 - (unsigned char *)v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          BOOL v12 = (char *)v34;
          int v11 = (int *)((char *)v34 + v26);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          int v11 = &v29;
          BOOL v12 = (char *)v34;
        }
      }
      uint64_t v13 = &v12[24 * v35];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)uint64_t v13 = v14;
      ++v35;
    }
  }
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  }
  if (v42)
  {
    uint64_t v15 = (void **)v40;
    if (v40)
    {
      uint64_t v16 = v41;
      unint64_t v17 = v40;
      if (v41 != v40)
      {
        do
          uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        unint64_t v17 = v40;
      }
      int64_t v41 = v15;
      operator delete(v17);
    }
    uint64_t v18 = v38;
    if (v38)
    {
      unint64_t v19 = v39;
      int64_t v20 = v38;
      if (v39 != v38)
      {
        do
        {
          __int16 v22 = (void *)*--v19;
          uint64_t v21 = v22;
          *unint64_t v19 = 0;
          if (v22) {
            operator delete[](v21);
          }
        }
        while (v19 != v18);
        int64_t v20 = v38;
      }
      BOOL v39 = v18;
      operator delete(v20);
    }
    if (v34 != v37) {
      free(v34);
    }
  }
  return v3;
}

uint64_t mlir::pdl::ResultsOp::getIndex(mlir::pdl::ResultsOp *this)
{
  uint64_t v7 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (!v7) {
    return 0;
  }
  mlir::IntegerAttr::getValue(&v7, (llvm::APInt *)&__p);
  if (v6 >= 0x41) {
    p_p = (unsigned int *)__p;
  }
  else {
    p_p = (unsigned int *)&__p;
  }
  uint64_t v2 = *p_p;
  if (v6 >= 0x41 && __p != 0) {
    operator delete[](__p);
  }
  return v2 | 0x100000000;
}

uint64_t mlir::pdl::RewriteOp::verifyRegions(uint64_t **this)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  unint64_t v3 = *((unsigned int *)*this + 11);
  if ((v3 & 0x7FFFFF) != 0)
  {
    uint64_t v4 = (v3 >> 23) & 1;
    uint64_t v5 = (void *)((((unint64_t)&v2[2 * v4 + 8] + ((v3 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v2 + 10));
    unsigned int v6 = &v2[2 * v4];
    uint64_t v8 = v6[8];
    uint64_t v7 = v6 + 8;
    v57[0] = v8;
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = 0;
    __int16 v22 = &v2[2 * ((v3 >> 23) & 1)];
    uint64_t v23 = v22[8];
    uint64_t v7 = v22 + 8;
    v57[0] = v23;
    if (v23)
    {
LABEL_3:
      mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v57);
      if ((void *)*v5 != v5)
      {
        __int16 v53 = 257;
        mlir::OpState::emitOpError(this, v52, (uint64_t)v57);
        if (v57[0])
        {
          int v54 = 3;
          unsigned int v55 = "expected rewrite region to be empty when rewrite is external";
          uint64_t v56 = 60;
          long long v9 = &v54;
          unint64_t v10 = (char *)v58;
          if (v59 >= v60)
          {
            unint64_t v46 = v59 + 1;
            if (v58 <= &v54 && (char *)v58 + 24 * v59 > (char *)&v54)
            {
              int64_t v49 = (char *)&v54 - (unsigned char *)v58;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v46, 24);
              unint64_t v10 = (char *)v58;
              long long v9 = (int *)((char *)v58 + v49);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v46, 24);
              long long v9 = &v54;
              unint64_t v10 = (char *)v58;
            }
          }
          int v11 = &v10[24 * v59];
          long long v12 = *(_OWORD *)v9;
          *((void *)v11 + 2) = *((void *)v9 + 2);
          *(_OWORD *)int v11 = v12;
          ++v59;
        }
        uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
        if (v57[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
        }
        if (v66)
        {
          long long v14 = (void **)__p;
          if (__p)
          {
            uint64_t v15 = v65;
            uint64_t v16 = __p;
            if (v65 != __p)
            {
              do
                uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
              while (v15 != v14);
              uint64_t v16 = __p;
            }
            uint64_t v65 = v14;
            operator delete(v16);
          }
          unint64_t v17 = v62;
          if (!v62) {
            goto LABEL_64;
          }
          uint64_t v18 = v63;
          unint64_t v19 = v62;
          if (v63 == v62)
          {
LABEL_63:
            uint64_t v63 = v17;
            operator delete(v19);
LABEL_64:
            if (v58 != v61) {
              free(v58);
            }
            return v13;
          }
          do
          {
            uint64_t v21 = (void *)*--v18;
            int64_t v20 = v21;
            *uint64_t v18 = 0;
            if (v21) {
              operator delete[](v20);
            }
          }
          while (v18 != v17);
LABEL_62:
          unint64_t v19 = v62;
          goto LABEL_63;
        }
        return v13;
      }
      return 1;
    }
  }
  if ((void *)*v5 == v5)
  {
    __int16 v53 = 257;
    mlir::OpState::emitOpError(this, v52, (uint64_t)v57);
    if (v57[0])
    {
      int v54 = 3;
      unsigned int v55 = "expected rewrite region to be non-empty if external name is not specified";
      uint64_t v56 = 73;
      unsigned int v35 = &v54;
      unsigned int v36 = (char *)v58;
      if (v59 >= v60)
      {
        unint64_t v48 = v59 + 1;
        if (v58 <= &v54 && (char *)v58 + 24 * v59 > (char *)&v54)
        {
          int64_t v51 = (char *)&v54 - (unsigned char *)v58;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v48, 24);
          unsigned int v36 = (char *)v58;
          unsigned int v35 = (int *)((char *)v58 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v48, 24);
          unsigned int v35 = &v54;
          unsigned int v36 = (char *)v58;
        }
      }
      unint64_t v37 = &v36[24 * v59];
      long long v38 = *(_OWORD *)v35;
      *((void *)v37 + 2) = *((void *)v35 + 2);
      *(_OWORD *)unint64_t v37 = v38;
      ++v59;
    }
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
    if (v57[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
    }
    if (v66)
    {
      BOOL v39 = (void **)__p;
      if (__p)
      {
        unint64_t v40 = v65;
        int64_t v41 = __p;
        if (v65 != __p)
        {
          do
            unint64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
          while (v40 != v39);
          int64_t v41 = __p;
        }
        uint64_t v65 = v39;
        operator delete(v41);
      }
      unint64_t v17 = v62;
      if (!v62) {
        goto LABEL_64;
      }
      char v42 = v63;
      unint64_t v19 = v62;
      if (v63 == v62) {
        goto LABEL_63;
      }
      do
      {
        uint64_t v44 = (void *)*--v42;
        uint64_t v43 = v44;
        *char v42 = 0;
        if (v44) {
          operator delete[](v43);
        }
      }
      while (v42 != v17);
      goto LABEL_62;
    }
    return v13;
  }
  if (BYTE3(v3)) {
    unint64_t v24 = v7;
  }
  else {
    unint64_t v24 = 0;
  }
  if (!*((_DWORD *)v24 + 3)) {
    return 1;
  }
  __int16 v53 = 257;
  mlir::OpState::emitOpError(this, v52, (uint64_t)v57);
  if (v57[0])
  {
    int v54 = 3;
    unsigned int v55 = "expected no external arguments when the rewrite is specified inline";
    uint64_t v56 = 67;
    int64_t v25 = &v54;
    int64_t v26 = (char *)v58;
    if (v59 >= v60)
    {
      unint64_t v47 = v59 + 1;
      if (v58 <= &v54 && (char *)v58 + 24 * v59 > (char *)&v54)
      {
        int64_t v50 = (char *)&v54 - (unsigned char *)v58;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v47, 24);
        int64_t v26 = (char *)v58;
        int64_t v25 = (int *)((char *)v58 + v50);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v47, 24);
        int64_t v25 = &v54;
        int64_t v26 = (char *)v58;
      }
    }
    uint64_t v27 = &v26[24 * v59];
    long long v28 = *(_OWORD *)v25;
    *((void *)v27 + 2) = *((void *)v25 + 2);
    *(_OWORD *)uint64_t v27 = v28;
    ++v59;
  }
  uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
  if (v57[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
  }
  if (v66)
  {
    int v29 = (void **)__p;
    if (__p)
    {
      uint64_t v30 = v65;
      uint64_t v31 = __p;
      if (v65 != __p)
      {
        do
          uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        uint64_t v31 = __p;
      }
      uint64_t v65 = v29;
      operator delete(v31);
    }
    unint64_t v17 = v62;
    if (!v62) {
      goto LABEL_64;
    }
    uint64_t v32 = v63;
    unint64_t v19 = v62;
    if (v63 == v62) {
      goto LABEL_63;
    }
    do
    {
      uint64_t v34 = (void *)*--v32;
      unsigned int v33 = v34;
      *uint64_t v32 = 0;
      if (v34) {
        operator delete[](v33);
      }
    }
    while (v32 != v17);
    goto LABEL_62;
  }
  return v13;
}

uint64_t mlir::pdl::RewriteOp::getExternalArgs(mlir::pdl::RewriteOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(unsigned int *)(v2 + 8);
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v75 = v6;
  if (!v6)
  {
    a3(v79, a4);
    if (v79[0])
    {
      int v76 = 3;
      uint64_t v77 = "expected DictionaryAttr to set properties";
      uint64_t v78 = 41;
      long long v28 = &v76;
      int v29 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v63 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v69 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          int v29 = (char *)v80;
          long long v28 = (int *)((char *)v80 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          long long v28 = &v76;
          int v29 = (char *)v80;
        }
      }
      uint64_t v30 = &v29[24 * v81];
      long long v31 = *(_OWORD *)v28;
      *((void *)v30 + 2) = *((void *)v28 + 2);
      *(_OWORD *)uint64_t v30 = v31;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88) {
      return 0;
    }
    uint64_t v32 = (void **)__p;
    if (__p)
    {
      unsigned int v33 = v87;
      uint64_t v34 = __p;
      if (v87 != __p)
      {
        do
          unsigned int v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        uint64_t v34 = __p;
      }
      unint64_t v87 = v32;
      operator delete(v34);
    }
    uint64_t v23 = v84;
    if (!v84) {
      goto LABEL_80;
    }
    unsigned int v35 = v85;
    int64_t v25 = v84;
    if (v85 == v84) {
      goto LABEL_79;
    }
    do
    {
      unint64_t v37 = (void *)*--v35;
      unsigned int v36 = v37;
      void *v35 = 0;
      if (v37) {
        operator delete[](v36);
      }
    }
    while (v35 != v23);
    goto LABEL_78;
  }
  uint64_t v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v75, "isNegated", 9uLL);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    if (!mlir::BoolAttr::classof(v8))
    {
      a3(v79, a4);
      if (v79[0])
      {
        int v76 = 3;
        uint64_t v78 = 54;
        long long v38 = &v76;
        BOOL v39 = (char *)v80;
        if (v81 >= v82)
        {
          unint64_t v64 = v81 + 1;
          if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
          {
            int64_t v70 = (char *)&v76 - (unsigned char *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            BOOL v39 = (char *)v80;
            long long v38 = (int *)((char *)v80 + v70);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            long long v38 = &v76;
            BOOL v39 = (char *)v80;
          }
        }
        unint64_t v40 = &v39[24 * v81];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = *((void *)v38 + 2);
        *(_OWORD *)unint64_t v40 = v41;
        ++v81;
        if (v79[0])
        {
          char v42 = &v76;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v9);
          uint64_t v43 = (char *)v80;
          if (v81 >= v82)
          {
            unint64_t v67 = v81 + 1;
            if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
            {
              int64_t v73 = (char *)&v76 - (unsigned char *)v80;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
              uint64_t v43 = (char *)v80;
              char v42 = (int *)((char *)v80 + v73);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
              char v42 = &v76;
              uint64_t v43 = (char *)v80;
            }
          }
          uint64_t v44 = &v43[24 * v81];
          long long v45 = *(_OWORD *)v42;
          *((void *)v44 + 2) = *((void *)v42 + 2);
          *(_OWORD *)uint64_t v44 = v45;
          ++v81;
          if (v79[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
          }
        }
      }
      if (!v88) {
        return 0;
      }
      unint64_t v46 = (void **)__p;
      if (__p)
      {
        unint64_t v47 = v87;
        unint64_t v48 = __p;
        if (v87 != __p)
        {
          do
            unint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          unint64_t v48 = __p;
        }
        unint64_t v87 = v46;
        operator delete(v48);
      }
      uint64_t v23 = v84;
      if (!v84) {
        goto LABEL_80;
      }
      int64_t v49 = v85;
      int64_t v25 = v84;
      if (v85 == v84) {
        goto LABEL_79;
      }
      do
      {
        int64_t v51 = (void *)*--v49;
        int64_t v50 = v51;
        void *v49 = 0;
        if (v51) {
          operator delete[](v50);
        }
      }
      while (v49 != v23);
      goto LABEL_78;
    }
    *a1 = v9;
  }
  uint64_t v10 = mlir::DictionaryAttr::get((uint64_t)&v75, "name", 4uLL);
  if (!v10)
  {
    a3(v79, a4);
    if (v79[0])
    {
      int v76 = 3;
      uint64_t v77 = "expected key entry for name in DictionaryAttr to set Properties.";
      uint64_t v78 = 64;
      uint64_t v52 = &v76;
      __int16 v53 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v66 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v72 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
          __int16 v53 = (char *)v80;
          uint64_t v52 = (int *)((char *)v80 + v72);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
          uint64_t v52 = &v76;
          __int16 v53 = (char *)v80;
        }
      }
      int v54 = &v53[24 * v81];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = *((void *)v52 + 2);
      *(_OWORD *)int v54 = v55;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88) {
      return 0;
    }
    uint64_t v56 = (void **)__p;
    if (__p)
    {
      uint64_t v57 = v87;
      unint64_t v58 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        unint64_t v58 = __p;
      }
      unint64_t v87 = v56;
      operator delete(v58);
    }
    uint64_t v23 = v84;
    if (!v84) {
      goto LABEL_80;
    }
    unsigned int v59 = v85;
    int64_t v25 = v84;
    if (v85 == v84) {
      goto LABEL_79;
    }
    do
    {
      long long v61 = (void *)*--v59;
      unsigned int v60 = v61;
      *unsigned int v59 = 0;
      if (v61) {
        operator delete[](v60);
      }
    }
    while (v59 != v23);
    goto LABEL_78;
  }
  uint64_t v11 = v10;
  if (*(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a1[1] = v10;
    return 1;
  }
  a3(v79, a4);
  if (v79[0])
  {
    int v76 = 3;
    uint64_t v78 = 49;
    long long v12 = &v76;
    uint64_t v13 = (char *)v80;
    if (v81 >= v82)
    {
      unint64_t v65 = v81 + 1;
      if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
      {
        int64_t v71 = (char *)&v76 - (unsigned char *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
        uint64_t v13 = (char *)v80;
        long long v12 = (int *)((char *)v80 + v71);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
        long long v12 = &v76;
        uint64_t v13 = (char *)v80;
      }
    }
    long long v14 = &v13[24 * v81];
    long long v15 = *(_OWORD *)v12;
    *((void *)v14 + 2) = *((void *)v12 + 2);
    *(_OWORD *)long long v14 = v15;
    ++v81;
    if (v79[0])
    {
      uint64_t v16 = &v76;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v11);
      unint64_t v17 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v68 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v74 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          unint64_t v17 = (char *)v80;
          uint64_t v16 = (int *)((char *)v80 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          uint64_t v16 = &v76;
          unint64_t v17 = (char *)v80;
        }
      }
      uint64_t v18 = &v17[24 * v81];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
  }
  if (v88)
  {
    int64_t v20 = (void **)__p;
    if (__p)
    {
      uint64_t v21 = v87;
      __int16 v22 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        __int16 v22 = __p;
      }
      unint64_t v87 = v20;
      operator delete(v22);
    }
    uint64_t v23 = v84;
    if (!v84) {
      goto LABEL_80;
    }
    unint64_t v24 = v85;
    int64_t v25 = v84;
    if (v85 == v84)
    {
LABEL_79:
      uint64_t v85 = v23;
      operator delete(v25);
LABEL_80:
      if (v80 != v83) {
        free(v80);
      }
      return 0;
    }
    do
    {
      uint64_t v27 = (void *)*--v24;
      int64_t v26 = v27;
      *unint64_t v24 = 0;
      if (v27) {
        operator delete[](v26);
      }
    }
    while (v24 != v23);
LABEL_78:
    int64_t v25 = v84;
    goto LABEL_79;
  }
  return 0;
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v21[6] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a1;
  long long v19 = v21;
  uint64_t v20 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"isNegated", 9, *a2);
    uint64_t v5 = v4;
    unsigned int v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      unsigned int v6 = v20;
    }
    uint64_t v7 = (uint64_t *)((char *)v19 + 16 * v6);
    *uint64_t v7 = NamedAttr;
    v7[1] = v5;
    unsigned int v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    uint64_t v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      uint64_t v10 = (uint64_t *)v19;
      if (v8) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t DictionaryAttr = 0;
      if (v10 == v21) {
        return DictionaryAttr;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"name", 4, v9);
  uint64_t v15 = v14;
  unsigned int v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    unsigned int v16 = v20;
  }
  unint64_t v17 = (uint64_t *)((char *)v19 + 16 * v16);
  uint64_t *v17 = v13;
  v17[1] = v15;
  unsigned int v8 = v20 + 1;
  LODWORD(v20) = v8;
  uint64_t v10 = (uint64_t *)v19;
  if (!v8) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  uint64_t v10 = (uint64_t *)v19;
  if (v19 != v21) {
LABEL_7:
  }
    free(v10);
  return DictionaryAttr;
}

BOOL mlir::pdl::ApplyNativeConstraintOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  unsigned int v8 = (void *)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v8, (const void **)"isNegated", (const char *)9, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v9, (const void **)"name", (const char *)4, a3, a4))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x10uLL);
    void *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &unk_1E8EBA000;
    {
      uint64_t v4 = (void *)&unk_1E8EBA000;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorB"
              "ase::Properties]";
        unint64_t v14 = 122;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        unsigned int v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = (void *)&unk_1E8EBA000;
      }
    }
    a1[33] = v4[317];
    return a1[32];
  }
  return result;
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::getName(mlir::pdl::ApplyNativeConstraintOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 8);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v3);
}

BOOL mlir::pdl::ApplyNativeConstraintOp::getIsNegated(mlir::pdl::ApplyNativeConstraintOp *this)
{
  uint64_t v2 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  return mlir::BoolAttr::getValue((mlir::BoolAttr *)&v2);
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4)
  {
    int v5 = *(void **)v3;
    v22[0] = v2;
    if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v4, (const void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22))return 0; {
    v22[0] = *this;
    }
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v5, (const void **)"isNegated", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22))return 0; {
    unint64_t v6 = *this;
    }
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v7 = *((unsigned int *)v6 + 17);
      if (v7)
      {
        uint64_t v8 = 0;
        for (uint64_t i = v6[9] + 24;
              mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*this, *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v8);
              i += 32)
        {
          if (v7 == ++v8) {
            return 1;
          }
        }
        return 0;
      }
    }
    return 1;
  }
  else
  {
    uint64_t v20 = (const void **)"requires attribute 'name'";
    __int16 v21 = 259;
    mlir::OpState::emitOpError(this, &v20, (uint64_t)v22);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      unint64_t v11 = (void **)__p;
      if (__p)
      {
        uint64_t v12 = v28;
        uint64_t v13 = __p;
        if (v28 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          uint64_t v13 = __p;
        }
        long long v28 = v11;
        operator delete(v13);
      }
      unint64_t v14 = v25;
      if (v25)
      {
        uint64_t v15 = v26;
        unsigned int v16 = v25;
        if (v26 != v25)
        {
          do
          {
            uint64_t v18 = (void *)*--v15;
            unint64_t v17 = v18;
            *uint64_t v15 = 0;
            if (v18) {
              operator delete[](v17);
            }
          }
          while (v15 != v14);
          unsigned int v16 = v25;
        }
        int64_t v26 = v14;
        operator delete(v16);
      }
      if (v23 != &v24) {
        free(v23);
      }
    }
  }
  return v10;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (mlir::pdl::PDLType::classof(a2)) {
    return 1;
  }
  __int16 v49 = 261;
  v48[0] = a3;
  v48[1] = a4;
  mlir::Operation::emitOpError(a1, v48, (uint64_t)v53);
  if (v53[0])
  {
    int v50 = 3;
    int64_t v51 = " #";
    uint64_t v52 = 2;
    unint64_t v11 = &v50;
    uint64_t v12 = (char *)v54;
    if (v55 >= v56)
    {
      unint64_t v38 = v55 + 1;
      if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
      {
        int64_t v44 = (char *)&v50 - (unsigned char *)v54;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        uint64_t v12 = (char *)v54;
        unint64_t v11 = (int *)((char *)v54 + v44);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        unint64_t v11 = &v50;
        uint64_t v12 = (char *)v54;
      }
    }
    uint64_t v13 = &v12[24 * v55];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = *((void *)v11 + 2);
    *(_OWORD *)uint64_t v13 = v14;
    uint64_t v15 = ++v55;
    if (v53[0])
    {
      int v50 = 5;
      int64_t v51 = (const char *)a5;
      unsigned int v16 = &v50;
      unint64_t v17 = (char *)v54;
      if (v15 >= v56)
      {
        unint64_t v39 = v15 + 1;
        BOOL v40 = (char *)v54 + 24 * v15 > (char *)&v50;
        if (v54 <= &v50 && v40)
        {
          int64_t v45 = (char *)&v50 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          unint64_t v17 = (char *)v54;
          unsigned int v16 = (int *)((char *)v54 + v45);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          unsigned int v16 = &v50;
          unint64_t v17 = (char *)v54;
        }
      }
      uint64_t v18 = &v17[24 * v55];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      uint64_t v20 = ++v55;
      if (v53[0])
      {
        int v50 = 3;
        int64_t v51 = " must be variadic of pdl type, but got ";
        uint64_t v52 = 39;
        __int16 v21 = &v50;
        __int16 v22 = (char *)v54;
        if (v20 >= v56)
        {
          unint64_t v41 = v20 + 1;
          BOOL v42 = (char *)v54 + 24 * v20 > (char *)&v50;
          if (v54 <= &v50 && v42)
          {
            int64_t v46 = (char *)&v50 - (unsigned char *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            __int16 v22 = (char *)v54;
            __int16 v21 = (int *)((char *)v54 + v46);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            __int16 v21 = &v50;
            __int16 v22 = (char *)v54;
          }
        }
        uint64_t v23 = &v22[24 * v55];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v23 = v24;
        ++v55;
        if (v53[0])
        {
          int64_t v25 = &v50;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, a2);
          int64_t v26 = (char *)v54;
          if (v55 >= v56)
          {
            unint64_t v43 = v55 + 1;
            if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
            {
              int64_t v47 = (char *)&v50 - (unsigned char *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              int64_t v26 = (char *)v54;
              int64_t v25 = (int *)((char *)v54 + v47);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              int64_t v25 = &v50;
              int64_t v26 = (char *)v54;
            }
          }
          uint64_t v27 = &v26[24 * v55];
          long long v28 = *(_OWORD *)v25;
          *((void *)v27 + 2) = *((void *)v25 + 2);
          *(_OWORD *)uint64_t v27 = v28;
          ++v55;
        }
      }
    }
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  }
  if (v62)
  {
    char v29 = (void **)__p;
    if (__p)
    {
      uint64_t v30 = v61;
      long long v31 = __p;
      if (v61 != __p)
      {
        do
          uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        long long v31 = __p;
      }
      long long v61 = v29;
      operator delete(v31);
    }
    uint64_t v32 = v58;
    if (v58)
    {
      unsigned int v33 = v59;
      uint64_t v34 = v58;
      if (v59 != v58)
      {
        do
        {
          unsigned int v36 = (void *)*--v33;
          unsigned int v35 = v36;
          *unsigned int v33 = 0;
          if (v36) {
            operator delete[](v35);
          }
        }
        while (v33 != v32);
        uint64_t v34 = v58;
      }
      unsigned int v59 = v32;
      operator delete(v34);
    }
    if (v54 != v57) {
      free(v54);
    }
  }
  return v10;
}

BOOL mlir::pdl::ApplyNativeConstraintOp::parse(uint64_t a1, void *a2)
{
  v18[16] = *MEMORY[0x1E4F143B8];
  v17[0] = v18;
  v17[1] = (void *)0x400000000;
  uint64_t v14 = 0;
  v15[0] = &v16;
  v15[1] = (void *)0x100000000;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v14, v6)) {
    goto LABEL_12;
  }
  if (v14)
  {
    uint64_t v7 = mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(a2);
    *(void *)(v7 + 8) = v14;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)
    && (uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, v17, 0, 1, 0xFFFFFFFFLL))&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)&& mlir::AsmParser::parseTypeList(a1, (uint64_t)v15)&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1)&& (uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1), (*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14))&& (v9 = a2[1], v12[0] = a1, v12[1] = &v13, v12[2] = a2, mlir::pdl::ApplyNativeConstraintOp::verifyInherentAttrs(v9, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ApplyNativeConstraintOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v12)))
  {
    BOOL v10 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)v17, (uint64_t)v15, v8, (uint64_t)(a2 + 2)) != 0;
  }
  else
  {
LABEL_12:
    BOOL v10 = 0;
  }
  if (v15[0] != &v16) {
    free(v15[0]);
  }
  if (v17[0] != v18) {
    free(v17[0]);
  }
  return v10;
}

void mlir::pdl::ApplyNativeConstraintOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *int v5 = 32;
  }
  unint64_t v6 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v6 = 0;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(v6 + 8));
  uint64_t v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v8 = (unsigned char *)*((void *)v7 + 4);
  if (*((unsigned char **)v7 + 3) == v8)
  {
    llvm::raw_ostream::write(v7, "(", 1uLL);
    uint64_t v9 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
      goto LABEL_8;
    }
  }
  else
  {
    unsigned char *v8 = 40;
    ++*((void *)v7 + 4);
    uint64_t v9 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
LABEL_8:
      uint64_t v10 = *((unsigned int *)v9 + 17);
      uint64_t v11 = *((void *)v9 + 9);
      goto LABEL_9;
    }
  }
  uint64_t v11 = 0;
  uint64_t v10 = 0;
LABEL_9:
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v33 = ", ";
  uint64_t v34 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v11, 0, v11, v10, (uint64_t)a2, v12, (uint64_t)&v33);
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *uint64_t v14 = 32;
  }
  uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if (*((unsigned char **)v15 + 3) == v16)
  {
    llvm::raw_ostream::write(v15, ":", 1uLL);
  }
  else
  {
    *uint64_t v16 = 58;
    ++*((void *)v15 + 4);
  }
  unint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    *uint64_t v18 = 32;
  }
  long long v19 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v20 = *((unsigned int *)v19 + 17);
    uint64_t v21 = *((void *)v19 + 9);
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
  }
  v31[0] = v21;
  v31[1] = v20;
  mlir::OperandRange::getTypes(v31, (uint64_t *)&v33);
  v32[0] = (mlir::BoolAttr *)", ";
  v32[1] = (mlir::BoolAttr *)2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v33, v34, (uint64_t)v35, v36, (uint64_t)a2, (uint64_t)a2, (uint64_t)v32);
  __int16 v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v23 = (unsigned char *)*((void *)v22 + 4);
  if (*((unsigned char **)v22 + 3) == v23)
  {
    llvm::raw_ostream::write(v22, ")", 1uLL);
  }
  else
  {
    unsigned char *v23 = 41;
    ++*((void *)v22 + 4);
  }
  unsigned int v33 = &v35;
  unsigned int v35 = "name";
  uint64_t v36 = 4;
  uint64_t v34 = 0x200000001;
  v32[0] = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  uint64_t v24 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v24 && v24 == mlir::Builder::getBoolAttr(v32, 0))
  {
    unsigned int v27 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, &v35, v34 + 1, 16);
      unsigned int v27 = v34;
    }
    long long v28 = (char *)v33 + 16 * v27;
    *long long v28 = "isNegated";
    v28[1] = 9;
    LODWORD(v34) = v34 + 1;
    int64_t v25 = *this;
    if (!*((unsigned char *)*this + 47)) {
      goto LABEL_28;
    }
  }
  else
  {
    int64_t v25 = *this;
    if (!*((unsigned char *)*this + 47))
    {
LABEL_28:
      int64_t v26 = (mlir::Operation *)((char *)v25 + 56);
      goto LABEL_33;
    }
  }
  v32[0] = (mlir::BoolAttr *)mlir::Operation::getAttrDictionary(v25);
  int64_t v26 = (mlir::ArrayAttr *)v32;
LABEL_33:
  uint64_t Value = mlir::ArrayAttr::getValue(v26);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v30, v33, v34);
  if (v33 != &v35) {
    free(v33);
  }
}

uint64_t mlir::pdl::ApplyNativeRewriteOp::getResults(mlir::pdl::ApplyNativeRewriteOp *this)
{
  if (*(_DWORD *)(*(void *)this + 36)) {
    return *(void *)this - 16;
  }
  else {
    return 0;
  }
}

uint64_t mlir::pdl::ApplyNativeRewriteOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      int64_t v26 = &v56;
      unsigned int v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          unsigned int v27 = (char *)v60;
          int64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          int64_t v26 = &v56;
          unsigned int v27 = (char *)v60;
        }
      }
      long long v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)long long v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      long long v31 = v67;
      uint64_t v32 = __p;
      if (v67 != __p)
      {
        do
          long long v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      unint64_t v67 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    unsigned int v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      unsigned int v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *unsigned int v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "name", 4uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected key entry for name in DictionaryAttr to set Properties.";
      uint64_t v58 = 64;
      uint64_t v36 = &v56;
      uint64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v37 = (char *)v60;
          uint64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v36 = &v56;
          uint64_t v37 = (char *)v60;
        }
      }
      unint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)unint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    BOOL v40 = (void **)__p;
    if (__p)
    {
      unint64_t v41 = v67;
      BOOL v42 = __p;
      if (v67 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        BOOL v42 = __p;
      }
      unint64_t v67 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    unint64_t v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      int64_t v45 = (void *)*--v43;
      int64_t v44 = v45;
      void *v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 49;
    uint64_t v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        uint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      uint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      uint64_t v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v15 = (char *)v60;
          uint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v14 = &v56;
          uint64_t v15 = (char *)v60;
        }
      }
      uint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      long long v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          long long v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v67 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    __int16 v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      unint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      int64_t v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *__int16 v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    unint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &unk_1E8EBA000;
    {
      uint64_t v4 = (void *)&unk_1E8EBA000;
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 119;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = (void *)&unk_1E8EBA000;
      }
    }
    a1[33] = v4[319];
    return a1[32];
  }
  return result;
}

uint64_t mlir::pdl::ApplyNativeRewriteOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v25[0] = v2;
    if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v3, (const void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))return 0; {
    uint64_t v4 = *this;
    }
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v5 = *((unsigned int *)v4 + 17);
      if (v5)
      {
        uint64_t v6 = 0;
        uint64_t v7 = v4[9] + 24;
        while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*this, *(void *)(*(void *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v6))
        {
          ++v6;
          v7 += 32;
          if (v5 == v6)
          {
            uint64_t v4 = *this;
            goto LABEL_9;
          }
        }
        return 0;
      }
    }
LABEL_9:
    uint64_t v8 = *((unsigned int *)v4 + 9);
    uint64_t v9 = (uint64_t)(v4 - 2);
    if (v8) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v8)
    {
      uint64_t v11 = 0;
      while (1)
      {
        NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, v11);
        if (!mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, v11))break; {
        if (v8 == ++v11)
        }
          return 1;
      }
      return 0;
    }
    return 1;
  }
  else
  {
    uint64_t v23 = (const void **)"requires attribute 'name'";
    __int16 v24 = 259;
    mlir::OpState::emitOpError(this, &v23, (uint64_t)v25);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
    if (v25[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
    }
    if (v32)
    {
      unint64_t v14 = (void **)__p;
      if (__p)
      {
        uint64_t v15 = v31;
        uint64_t v16 = __p;
        if (v31 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          uint64_t v16 = __p;
        }
        long long v31 = v14;
        operator delete(v16);
      }
      long long v17 = v28;
      if (v28)
      {
        uint64_t v18 = v29;
        long long v19 = v28;
        if (v29 != v28)
        {
          do
          {
            uint64_t v21 = (void *)*--v18;
            uint64_t v20 = v21;
            *uint64_t v18 = 0;
            if (v21) {
              operator delete[](v20);
            }
          }
          while (v18 != v17);
          long long v19 = v28;
        }
        long long v29 = v17;
        operator delete(v19);
      }
      if (v26 != &v27) {
        free(v26);
      }
    }
  }
  return v13;
}

BOOL mlir::pdl::ApplyNativeRewriteOp::parse(uint64_t a1, uint64_t a2)
{
  v27[16] = *MEMORY[0x1E4F143B8];
  v26[0] = v27;
  v26[1] = (void *)0x400000000;
  v24[0] = &v25;
  v24[1] = (void *)0x100000000;
  uint64_t v20 = 0;
  __src = &v23;
  uint64_t v22 = 0x100000000;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v20, v6)) {
    goto LABEL_22;
  }
  if (v20)
  {
    uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>((void *)a2);
    *uint64_t v7 = v20;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 272))(a1))
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, v26, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v24)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
    {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1)
    && !mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src)
    || (uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    || (uint64_t v9 = *(void *)(a2 + 8),
        v18[0] = a1,
        v18[1] = &v19,
        v18[2] = a2,
        (uint64_t v10 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v9 + 96))) != 0)
    && !mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v10, (const void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ApplyNativeRewriteOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v18))
  {
LABEL_22:
    BOOL v15 = 0;
    uint64_t v16 = __src;
    if (__src == &v23) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v11 = __src;
  uint64_t v12 = v22;
  uint64_t v13 = *(unsigned int *)(a2 + 72);
  unint64_t v14 = v13 + v22;
  if (v14 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  if (v12)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v13), v11, 8 * v12);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + v12;
  BOOL v15 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)v26, (uint64_t)v24, v8, a2 + 16) != 0;
  uint64_t v16 = __src;
  if (__src != &v23) {
LABEL_23:
  }
    free(v16);
LABEL_24:
  if (v24[0] != &v25) {
    free(v24[0]);
  }
  if (v26[0] != v27) {
    free(v26[0]);
  }
  return v15;
}

void mlir::pdl::ApplyNativeRewriteOp::print(mlir::pdl::ApplyNativeRewriteOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64));
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0 || !*(_DWORD *)(*(void *)this + 68)) {
    goto LABEL_24;
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "(", 1uLL);
    uint64_t v8 = *(void *)this;
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
      goto LABEL_8;
    }
LABEL_15:
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    goto LABEL_9;
  }
  *uint64_t v7 = 40;
  ++*((void *)v6 + 4);
  uint64_t v8 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v9 = *(unsigned int *)(v8 + 68);
  uint64_t v10 = *(void *)(v8 + 72);
LABEL_9:
  uint64_t v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v39 = ", ";
  uint64_t v40 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v10, 0, v10, v9, (uint64_t)a2, v11, (uint64_t)&v39);
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    *uint64_t v13 = 32;
  }
  unint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  BOOL v15 = (unsigned char *)*((void *)v14 + 4);
  if (*((unsigned char **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, ":", 1uLL);
  }
  else
  {
    *BOOL v15 = 58;
    ++*((void *)v14 + 4);
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    unsigned char *v17 = 32;
  }
  uint64_t v18 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
  {
    uint64_t v19 = *(unsigned int *)(v18 + 68);
    uint64_t v20 = *(void *)(v18 + 72);
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
  }
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  mlir::OperandRange::getTypes(&v35, (uint64_t *)&v39);
  unint64_t AttrDictionary = ", ";
  uint64_t v38 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v39, v40, (uint64_t)v41, v42, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  uint64_t v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v22 = (unsigned char *)*((void *)v21 + 4);
  if (*((unsigned char **)v21 + 3) == v22)
  {
    llvm::raw_ostream::write(v21, ")", 1uLL);
    uint64_t v23 = *(unsigned char **)this;
    if (!*(_DWORD *)(*(void *)this + 36)) {
      goto LABEL_37;
    }
    goto LABEL_25;
  }
  *uint64_t v22 = 41;
  ++*((void *)v21 + 4);
LABEL_24:
  uint64_t v23 = *(unsigned char **)this;
  if (!*(_DWORD *)(*(void *)this + 36)) {
    goto LABEL_37;
  }
LABEL_25:
  __int16 v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v25 = (unsigned char *)*((void *)v24 + 4);
  if ((unint64_t)v25 >= *((void *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((void *)v24 + 4) = v25 + 1;
    unsigned char *v25 = 32;
  }
  int64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v27 = (unsigned char *)*((void *)v26 + 4);
  if (*((unsigned char **)v26 + 3) == v27)
  {
    llvm::raw_ostream::write(v26, ":", 1uLL);
  }
  else
  {
    unsigned char *v27 = 58;
    ++*((void *)v26 + 4);
  }
  long long v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v29 = (unsigned char *)*((void *)v28 + 4);
  if ((unint64_t)v29 >= *((void *)v28 + 3))
  {
    llvm::raw_ostream::write(v28, 32);
  }
  else
  {
    *((void *)v28 + 4) = v29 + 1;
    *long long v29 = 32;
  }
  uint64_t v30 = *(unsigned int *)(*(void *)this + 36);
  uint64_t v31 = *(void *)this - 16;
  if (!v30) {
    uint64_t v31 = 0;
  }
  uint64_t v35 = v31;
  uint64_t v36 = v30;
  mlir::OperandRange::getTypes(&v35, (uint64_t *)&v39);
  unint64_t AttrDictionary = ", ";
  uint64_t v38 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v39, v40, (uint64_t)v41, v42, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  uint64_t v23 = *(unsigned char **)this;
LABEL_37:
  long long v39 = &v41;
  unint64_t v41 = "name";
  uint64_t v42 = 4;
  uint64_t v40 = 0x200000001;
  if (v23[47])
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary((mlir::Operation *)v23);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v23 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v34, v39, v40);
  if (v39 != &v41) {
    free(v39);
  }
}

uint64_t mlir::pdl::AttributeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v22 = v4;
  if (v4)
  {
    uint64_t v6 = mlir::DictionaryAttr::get((uint64_t)&v22, "value", 5uLL);
    if (v6) {
      *a1 = v6;
    }
    return 1;
  }
  else
  {
    a3(v26, a4);
    if (v26[0])
    {
      int v23 = 3;
      __int16 v24 = "expected DictionaryAttr to set properties";
      uint64_t v25 = 41;
      uint64_t v8 = &v23;
      uint64_t v9 = (char *)v27;
      if (v28 >= v29)
      {
        unint64_t v20 = v28 + 1;
        if (v27 <= &v23 && (char *)v27 + 24 * v28 > (char *)&v23)
        {
          int64_t v21 = (char *)&v23 - (unsigned char *)v27;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v20, 24);
          uint64_t v9 = (char *)v27;
          uint64_t v8 = (int *)((char *)v27 + v21);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v20, 24);
          uint64_t v8 = &v23;
          uint64_t v9 = (char *)v27;
        }
      }
      uint64_t v10 = &v9[24 * v28];
      long long v11 = *(_OWORD *)v8;
      *((void *)v10 + 2) = *((void *)v8 + 2);
      *(_OWORD *)uint64_t v10 = v11;
      ++v28;
      if (v26[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
      }
    }
    if (v35)
    {
      uint64_t v12 = (void **)__p;
      if (__p)
      {
        uint64_t v13 = v34;
        unint64_t v14 = __p;
        if (v34 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          unint64_t v14 = __p;
        }
        uint64_t v34 = v12;
        operator delete(v14);
      }
      BOOL v15 = v31;
      if (v31)
      {
        uint64_t v16 = v32;
        long long v17 = v31;
        if (v32 != v31)
        {
          do
          {
            uint64_t v19 = (void *)*--v16;
            uint64_t v18 = v19;
            *uint64_t v16 = 0;
            if (v19) {
              operator delete[](v18);
            }
          }
          while (v16 != v15);
          long long v17 = v31;
        }
        char v32 = v15;
        operator delete(v17);
      }
      if (v27 != v30) {
        free(v27);
      }
    }
    return 0;
  }
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &unk_1E8EBA000;
    {
      uint64_t v4 = (void *)&unk_1E8EBA000;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 110;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = (void *)&unk_1E8EBA000;
      }
    }
    a1[33] = v4[321];
    return a1[32];
  }
  return result;
}

BOOL mlir::pdl::AttributeOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if ((*((unsigned char *)v2 + 46) & 0x80) == 0) {
    goto LABEL_27;
  }
  uint64_t v3 = (const char *)*((unsigned int *)v2 + 17);
  if (v3 < 2)
  {
    if (v3)
    {
      if (!mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1(v2, *(void *)(*(void *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0; {
      uint64_t v2 = *this;
      }
    }
LABEL_27:
    if (*((_DWORD *)v2 + 9)) {
      uint64_t v27 = (uint64_t)(v2 - 2);
    }
    else {
      uint64_t v27 = 0;
    }
    unint64_t v28 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(void *)v28 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id) {
      return 1;
    }
    unsigned int v29 = *this;
    __int16 v77 = 261;
    v76[0] = (const void **)"result";
    v76[1] = (const void **)6;
    mlir::Operation::emitOpError(v29, v76, (uint64_t)v81);
    if (v81[0])
    {
      int v78 = 3;
      long long v79 = " #";
      uint64_t v80 = 2;
      uint64_t v30 = &v78;
      uint64_t v31 = (char *)v82;
      if (v83 >= v84)
      {
        unint64_t v61 = v83 + 1;
        if (v82 <= &v78 && (char *)v82 + 24 * v83 > (char *)&v78)
        {
          int64_t v71 = (char *)&v78 - (unsigned char *)v82;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v61, 24);
          uint64_t v31 = (char *)v82;
          uint64_t v30 = (int *)((char *)v82 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v61, 24);
          uint64_t v30 = &v78;
          uint64_t v31 = (char *)v82;
        }
      }
      char v32 = &v31[24 * v83];
      long long v33 = *(_OWORD *)v30;
      *((void *)v32 + 2) = *((void *)v30 + 2);
      *(_OWORD *)char v32 = v33;
      uint64_t v34 = ++v83;
      if (v81[0])
      {
        int v78 = 5;
        long long v79 = 0;
        char v35 = &v78;
        uint64_t v36 = (char *)v82;
        if (v34 >= v84)
        {
          unint64_t v64 = v34 + 1;
          BOOL v65 = (char *)v82 + 24 * v34 > (char *)&v78;
          if (v82 <= &v78 && v65)
          {
            int64_t v73 = (char *)&v78 - (unsigned char *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v64, 24);
            uint64_t v36 = (char *)v82;
            char v35 = (int *)((char *)v82 + v73);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v64, 24);
            char v35 = &v78;
            uint64_t v36 = (char *)v82;
          }
        }
        uint64_t v37 = &v36[24 * v83];
        long long v38 = *(_OWORD *)v35;
        *((void *)v37 + 2) = *((void *)v35 + 2);
        *(_OWORD *)uint64_t v37 = v38;
        uint64_t v39 = ++v83;
        if (v81[0])
        {
          int v78 = 3;
          uint64_t v80 = 53;
          uint64_t v40 = &v78;
          unint64_t v41 = (char *)v82;
          if (v39 >= v84)
          {
            unint64_t v66 = v39 + 1;
            BOOL v67 = (char *)v82 + 24 * v39 > (char *)&v78;
            if (v82 <= &v78 && v67)
            {
              int64_t v74 = (char *)&v78 - (unsigned char *)v82;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
              unint64_t v41 = (char *)v82;
              uint64_t v40 = (int *)((char *)v82 + v74);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
              uint64_t v40 = &v78;
              unint64_t v41 = (char *)v82;
            }
          }
          uint64_t v42 = &v41[24 * v83];
          long long v43 = *(_OWORD *)v40;
          *((void *)v42 + 2) = *((void *)v40 + 2);
          *(_OWORD *)uint64_t v42 = v43;
          ++v83;
          if (v81[0])
          {
            int64_t v44 = &v78;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v78, v28);
            int64_t v45 = (char *)v82;
            if (v83 >= v84)
            {
              unint64_t v68 = v83 + 1;
              if (v82 <= &v78 && (char *)v82 + 24 * v83 > (char *)&v78)
              {
                int64_t v75 = (char *)&v78 - (unsigned char *)v82;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v68, 24);
                int64_t v45 = (char *)v82;
                int64_t v44 = (int *)((char *)v82 + v75);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v68, 24);
                int64_t v44 = &v78;
                int64_t v45 = (char *)v82;
              }
            }
            int64_t v46 = &v45[24 * v83];
            long long v47 = *(_OWORD *)v44;
            *((void *)v46 + 2) = *((void *)v44 + 2);
            *(_OWORD *)int64_t v46 = v47;
            ++v83;
          }
        }
      }
    }
    char v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v81);
    if (v81[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v81);
    }
    if (v90)
    {
      unint64_t v49 = (void **)__p;
      if (__p)
      {
        unint64_t v50 = v89;
        int64_t v51 = __p;
        if (v89 != __p)
        {
          do
            unint64_t v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
          while (v50 != v49);
          int64_t v51 = __p;
        }
        uint64_t v89 = v49;
        operator delete(v51);
      }
      int64_t v52 = v86;
      if (v86)
      {
        int64_t v53 = v87;
        int64_t v54 = v86;
        if (v87 != v86)
        {
          do
          {
            int v56 = (void *)*--v53;
            uint64_t v55 = v56;
            *int64_t v53 = 0;
            if (v56) {
              operator delete[](v55);
            }
          }
          while (v53 != v52);
          int64_t v54 = v86;
        }
        unint64_t v87 = v52;
        operator delete(v54);
      }
      if (v82 != v85) {
        free(v82);
      }
    }
    return v48 != 0;
  }
  v76[0] = (const void **)"operand group starting at #";
  __int16 v77 = 259;
  mlir::OpState::emitOpError(this, v76, (uint64_t)v81);
  if (v81[0])
  {
    int v78 = 5;
    long long v79 = 0;
    uint64_t v4 = &v78;
    int v5 = (char *)v82;
    if (v83 >= v84)
    {
      unint64_t v58 = v83 + 1;
      if (v82 <= &v78 && (char *)v82 + 24 * v83 > (char *)&v78)
      {
        int64_t v69 = (char *)&v78 - (unsigned char *)v82;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v58, 24);
        int v5 = (char *)v82;
        uint64_t v4 = (int *)((char *)v82 + v69);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v58, 24);
        uint64_t v4 = &v78;
        int v5 = (char *)v82;
      }
    }
    unint64_t v6 = &v5[24 * v83];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *(_OWORD *)unint64_t v6 = v7;
    uint64_t v8 = ++v83;
    if (v81[0])
    {
      int v78 = 3;
      long long v79 = " requires 0 or 1 element, but found ";
      uint64_t v80 = 36;
      unint64_t v9 = &v78;
      uint64_t v10 = (char *)v82;
      if (v8 >= v84)
      {
        unint64_t v59 = v8 + 1;
        BOOL v60 = (char *)v82 + 24 * v8 > (char *)&v78;
        if (v82 <= &v78 && v60)
        {
          int64_t v70 = (char *)&v78 - (unsigned char *)v82;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v59, 24);
          uint64_t v10 = (char *)v82;
          unint64_t v9 = (int *)((char *)v82 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v59, 24);
          unint64_t v9 = &v78;
          uint64_t v10 = (char *)v82;
        }
      }
      unint64_t v11 = &v10[24 * v83];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)unint64_t v11 = v12;
      uint64_t v13 = ++v83;
      if (v81[0])
      {
        int v78 = 5;
        long long v79 = v3;
        unint64_t v14 = &v78;
        BOOL v15 = (char *)v82;
        if (v13 >= v84)
        {
          unint64_t v62 = v13 + 1;
          BOOL v63 = (char *)v82 + 24 * v13 > (char *)&v78;
          if (v82 <= &v78 && v63)
          {
            int64_t v72 = (char *)&v78 - (unsigned char *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v62, 24);
            BOOL v15 = (char *)v82;
            unint64_t v14 = (int *)((char *)v82 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v62, 24);
            unint64_t v14 = &v78;
            BOOL v15 = (char *)v82;
          }
        }
        uint64_t v16 = &v15[24 * v83];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v83;
      }
    }
  }
  uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v81);
  if (v81[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v81);
  }
  if (v90)
  {
    uint64_t v19 = (void **)__p;
    if (__p)
    {
      unint64_t v20 = v89;
      int64_t v21 = __p;
      if (v89 != __p)
      {
        do
          unint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        int64_t v21 = __p;
      }
      uint64_t v89 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v86;
    if (v86)
    {
      int v23 = v87;
      __int16 v24 = v86;
      if (v87 != v86)
      {
        do
        {
          int64_t v26 = (void *)*--v23;
          uint64_t v25 = v26;
          void *v23 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v23 != v22);
        __int16 v24 = v86;
      }
      unint64_t v87 = v22;
      operator delete(v24);
    }
    if (v82 != v85) {
      free(v82);
    }
  }
  return v18;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
    return 1;
  }
  __int16 v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    int v47 = 3;
    char v48 = " #";
    uint64_t v49 = 2;
    long long v7 = &v47;
    uint64_t v8 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        int64_t v41 = (char *)&v47 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        uint64_t v8 = (char *)v51;
        long long v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        long long v7 = &v47;
        uint64_t v8 = (char *)v51;
      }
    }
    unint64_t v9 = &v8[24 * v52];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)unint64_t v9 = v10;
    uint64_t v11 = ++v52;
    if (v50[0])
    {
      int v47 = 5;
      char v48 = (const char *)a5;
      long long v12 = &v47;
      uint64_t v13 = (char *)v51;
      if (v11 >= v53)
      {
        unint64_t v36 = v11 + 1;
        BOOL v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          int64_t v42 = (char *)&v47 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          uint64_t v13 = (char *)v51;
          long long v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          long long v12 = &v47;
          uint64_t v13 = (char *)v51;
        }
      }
      unint64_t v14 = &v13[24 * v52];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)unint64_t v14 = v15;
      uint64_t v16 = ++v52;
      if (v50[0])
      {
        int v47 = 3;
        uint64_t v49 = 48;
        long long v17 = &v47;
        uint64_t v18 = (char *)v51;
        if (v16 >= v53)
        {
          unint64_t v38 = v16 + 1;
          BOOL v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            int64_t v43 = (char *)&v47 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            uint64_t v18 = (char *)v51;
            long long v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            long long v17 = &v47;
            uint64_t v18 = (char *)v51;
          }
        }
        uint64_t v19 = &v18[24 * v52];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        ++v52;
        if (v50[0])
        {
          int64_t v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          uint64_t v22 = (char *)v51;
          if (v52 >= v53)
          {
            unint64_t v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              int64_t v44 = (char *)&v47 - (unsigned char *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              uint64_t v22 = (char *)v51;
              int64_t v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              int64_t v21 = &v47;
              uint64_t v22 = (char *)v51;
            }
          }
          int v23 = &v22[24 * v52];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)int v23 = v24;
          ++v52;
        }
      }
    }
  }
  uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  }
  if (v59)
  {
    int64_t v26 = (void **)__p;
    if (__p)
    {
      uint64_t v27 = v58;
      unint64_t v28 = __p;
      if (v58 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        unint64_t v28 = __p;
      }
      unint64_t v58 = v26;
      operator delete(v28);
    }
    unsigned int v29 = v55;
    if (v55)
    {
      uint64_t v30 = v56;
      uint64_t v31 = v55;
      if (v56 != v55)
      {
        do
        {
          long long v33 = (void *)*--v30;
          char v32 = v33;
          *uint64_t v30 = 0;
          if (v33) {
            operator delete[](v32);
          }
        }
        while (v30 != v29);
        uint64_t v31 = v55;
      }
      int v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
  return v25;
}

uint64_t mlir::pdl::AttributeOp::parse(uint64_t a1, uint64_t a2)
{
  v29[16] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  uint64_t v27 = v29;
  uint64_t v28 = 0x400000000;
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    memset(v25, 0, 24);
    unsigned __int16 v4 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 680))(a1, v25, 1);
    if (v4 >= 0x100u)
    {
      if (!(_BYTE)v4) {
        goto LABEL_19;
      }
      int v5 = v25;
      unint64_t v6 = (char *)v27;
      if (v28 >= HIDWORD(v28))
      {
        unint64_t v23 = v28 + 1;
        if (v27 <= v25 && (char *)v27 + 32 * v28 > (char *)v25)
        {
          int64_t v24 = (char *)v25 - (unsigned char *)v27;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v23, 32);
          unint64_t v6 = (char *)v27;
          int v5 = (char *)v27 + v24;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v23, 32);
          int v5 = v25;
          unint64_t v6 = (char *)v27;
        }
      }
      long long v7 = &v6[32 * v28];
      long long v8 = v5[1];
      *(_OWORD *)long long v7 = *v5;
      *((_OWORD *)v7 + 1) = v8;
      LODWORD(v28) = v28 + 1;
    }
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 144))(a1))
  {
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 408))(a1, &v26, 0)) {
      goto LABEL_19;
    }
    if (v26)
    {
      unint64_t v9 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>((void *)a2);
      *unint64_t v9 = v26;
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 464))(a1, a2 + 112))
  {
    mlir::NamedAttrList::get(a2 + 112, **(void **)(*(void *)(a2 + 8) + 96));
    long long v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v10);
    uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id);
    uint64_t v13 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    unint64_t v14 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v13);
    uint64_t v15 = mlir::StorageUniquer::getSingletonImpl(v14, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
    uint64_t v16 = *(unsigned int *)(a2 + 72);
    if (v16 >= *(_DWORD *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16 + 1, 8);
      LODWORD(v16) = *(_DWORD *)(a2 + 72);
    }
    *(void *)(*(void *)(a2 + 64) + 8 * v16) = SingletonImpl;
    ++*(_DWORD *)(a2 + 72);
    if (!v28)
    {
LABEL_17:
      uint64_t v20 = 1;
      int64_t v21 = v27;
      if (v27 == v29) {
        return v20;
      }
      goto LABEL_20;
    }
    uint64_t v17 = a2 + 16;
    uint64_t v18 = (char *)v27;
    uint64_t v19 = 32 * v28;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v18, v15, v17))
    {
      v18 += 32;
      v19 -= 32;
      if (!v19) {
        goto LABEL_17;
      }
    }
  }
LABEL_19:
  uint64_t v20 = 0;
  int64_t v21 = v27;
  if (v27 != v29) {
LABEL_20:
  }
    free(v21);
  return v20;
}

void mlir::pdl::AttributeOp::print(mlir::pdl::AttributeOp *this, mlir::OpAsmPrinter *a2)
{
  void v24[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)this;
  unsigned int v5 = *(_DWORD *)(v4 + 44);
  if ((v5 & 0x800000) != 0 && *(_DWORD *)(v4 + 68) && *(void *)(*(void *)(v4 + 72) + 24))
  {
    unint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v7 = (unsigned char *)*((void *)v6 + 4);
    if ((unint64_t)v7 >= *((void *)v6 + 3))
    {
      llvm::raw_ostream::write(v6, 32);
    }
    else
    {
      *((void *)v6 + 4) = v7 + 1;
      *long long v7 = 32;
    }
    long long v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v9 = (unsigned char *)*((void *)v8 + 4);
    if (*((unsigned char **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, ":", 1uLL);
    }
    else
    {
      *unint64_t v9 = 58;
      ++*((void *)v8 + 4);
    }
    long long v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if ((unint64_t)v11 >= *((void *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((void *)v10 + 4) = v11 + 1;
      *uint64_t v11 = 32;
    }
    uint64_t v4 = *(void *)this;
    unsigned int v5 = *(_DWORD *)(*(void *)this + 44);
    if ((v5 & 0x800000) != 0 && *(_DWORD *)(v4 + 68) && *(void *)(*(void *)(v4 + 72) + 24))
    {
      (*(void (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 160))(a2);
      uint64_t v4 = *(void *)this;
      unsigned int v5 = *(_DWORD *)(*(void *)this + 44);
    }
  }
  if (*(void *)(v4 + 16 * ((v5 >> 23) & 1) + 64))
  {
    long long v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if ((unint64_t)v13 >= *((void *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((void *)v12 + 4) = v13 + 1;
      *uint64_t v13 = 32;
    }
    unint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
    if (*((unsigned char **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, "=", 1uLL);
    }
    else
    {
      *uint64_t v15 = 61;
      ++*((void *)v14 + 4);
    }
    uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
    if ((unint64_t)v17 >= *((void *)v16 + 3))
    {
      llvm::raw_ostream::write(v16, 32);
    }
    else
    {
      *((void *)v16 + 4) = v17 + 1;
      unsigned char *v17 = 32;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 40))(a2, *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64));
    uint64_t v4 = *(void *)this;
    unsigned int v5 = *(_DWORD *)(*(void *)this + 44);
  }
  uint64_t v22 = v24;
  v24[0] = "value";
  v24[1] = 5;
  uint64_t v23 = 0x200000001;
  if (HIBYTE(v5))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 200))(a2, Value, v20, v22, v23);
  if (v22 != v24) {
    free(v22);
  }
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id) {
    return 1;
  }
  __int16 v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    int v47 = 3;
    char v48 = " #";
    uint64_t v49 = 2;
    long long v7 = &v47;
    long long v8 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        int64_t v41 = (char *)&v47 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        long long v8 = (char *)v51;
        long long v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        long long v7 = &v47;
        long long v8 = (char *)v51;
      }
    }
    unint64_t v9 = &v8[24 * v52];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)unint64_t v9 = v10;
    uint64_t v11 = ++v52;
    if (v50[0])
    {
      int v47 = 5;
      char v48 = (const char *)a5;
      long long v12 = &v47;
      uint64_t v13 = (char *)v51;
      if (v11 >= v53)
      {
        unint64_t v36 = v11 + 1;
        BOOL v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          int64_t v42 = (char *)&v47 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          uint64_t v13 = (char *)v51;
          long long v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          long long v12 = &v47;
          uint64_t v13 = (char *)v51;
        }
      }
      unint64_t v14 = &v13[24 * v52];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)unint64_t v14 = v15;
      uint64_t v16 = ++v52;
      if (v50[0])
      {
        int v47 = 3;
        uint64_t v49 = 55;
        uint64_t v17 = &v47;
        uint64_t v18 = (char *)v51;
        if (v16 >= v53)
        {
          unint64_t v38 = v16 + 1;
          BOOL v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            int64_t v43 = (char *)&v47 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            uint64_t v18 = (char *)v51;
            uint64_t v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            uint64_t v17 = &v47;
            uint64_t v18 = (char *)v51;
          }
        }
        uint64_t v19 = &v18[24 * v52];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        ++v52;
        if (v50[0])
        {
          int64_t v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          uint64_t v22 = (char *)v51;
          if (v52 >= v53)
          {
            unint64_t v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              int64_t v44 = (char *)&v47 - (unsigned char *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              uint64_t v22 = (char *)v51;
              int64_t v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              int64_t v21 = &v47;
              uint64_t v22 = (char *)v51;
            }
          }
          uint64_t v23 = &v22[24 * v52];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)uint64_t v23 = v24;
          ++v52;
        }
      }
    }
  }
  uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  }
  if (v59)
  {
    uint64_t v26 = (void **)__p;
    if (__p)
    {
      uint64_t v27 = v58;
      uint64_t v28 = __p;
      if (v58 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        uint64_t v28 = __p;
      }
      unint64_t v58 = v26;
      operator delete(v28);
    }
    unsigned int v29 = v55;
    if (v55)
    {
      uint64_t v30 = v56;
      uint64_t v31 = v55;
      if (v56 != v55)
      {
        do
        {
          long long v33 = (void *)*--v30;
          char v32 = v33;
          *uint64_t v30 = 0;
          if (v33) {
            operator delete[](v32);
          }
        }
        while (v30 != v29);
        uint64_t v31 = v55;
      }
      int v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
  return v25;
}

BOOL mlir::pdl::EraseOp::parse(uint64_t a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v4 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v4);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, SingletonImpl, a2 + 16) != 0;
}

void mlir::pdl::EraseOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unsigned int v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v11 = v13;
  uint64_t v12 = 0x200000000;
  unint64_t v6 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v9, v11, v12);
  if (v11 != v13) {
    free(v11);
  }
}

BOOL mlir::pdl::OperandOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if ((*((unsigned char *)v2 + 46) & 0x80) == 0)
  {
LABEL_27:
    if (*((_DWORD *)v2 + 9)) {
      uint64_t v27 = (uint64_t)(v2 - 2);
    }
    else {
      uint64_t v27 = 0;
    }
    NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0);
    return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps4(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
  }
  uint64_t v3 = (const char *)*((unsigned int *)v2 + 17);
  if (v3 < 2)
  {
    if (v3)
    {
      if (!mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1(v2, *(void *)(*(void *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0; {
      uint64_t v2 = *this;
      }
    }
    goto LABEL_27;
  }
  unint64_t v38 = (const void **)"operand group starting at #";
  __int16 v39 = 259;
  mlir::OpState::emitOpError(this, &v38, (uint64_t)v43);
  if (v43[0])
  {
    int v40 = 5;
    int64_t v41 = 0;
    uint64_t v4 = &v40;
    unsigned int v5 = (char *)v44;
    if (v45 >= v46)
    {
      unint64_t v30 = v45 + 1;
      if (v44 <= &v40 && (char *)v44 + 24 * v45 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v30, 24);
        unsigned int v5 = (char *)v44;
        uint64_t v4 = (int *)((char *)v44 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v30, 24);
        uint64_t v4 = &v40;
        unsigned int v5 = (char *)v44;
      }
    }
    unint64_t v6 = &v5[24 * v45];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *(_OWORD *)unint64_t v6 = v7;
    uint64_t v8 = ++v45;
    if (v43[0])
    {
      int v40 = 3;
      int64_t v41 = " requires 0 or 1 element, but found ";
      uint64_t v42 = 36;
      uint64_t v9 = &v40;
      long long v10 = (char *)v44;
      if (v8 >= v46)
      {
        unint64_t v31 = v8 + 1;
        BOOL v32 = (char *)v44 + 24 * v8 > (char *)&v40;
        if (v44 <= &v40 && v32)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
          long long v10 = (char *)v44;
          uint64_t v9 = (int *)((char *)v44 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
          uint64_t v9 = &v40;
          long long v10 = (char *)v44;
        }
      }
      uint64_t v11 = &v10[24 * v45];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      uint64_t v13 = ++v45;
      if (v43[0])
      {
        int v40 = 5;
        int64_t v41 = v3;
        unint64_t v14 = &v40;
        long long v15 = (char *)v44;
        if (v13 >= v46)
        {
          unint64_t v33 = v13 + 1;
          BOOL v34 = (char *)v44 + 24 * v13 > (char *)&v40;
          if (v44 <= &v40 && v34)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v44;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
            long long v15 = (char *)v44;
            unint64_t v14 = (int *)((char *)v44 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
            unint64_t v14 = &v40;
            long long v15 = (char *)v44;
          }
        }
        uint64_t v16 = &v15[24 * v45];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v45;
      }
    }
  }
  uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
  if (v43[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
  }
  if (v52)
  {
    uint64_t v19 = (void **)__p;
    if (__p)
    {
      long long v20 = v51;
      int64_t v21 = __p;
      if (v51 != __p)
      {
        do
          long long v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        int64_t v21 = __p;
      }
      int64_t v51 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v48;
    if (v48)
    {
      uint64_t v23 = v49;
      long long v24 = v48;
      if (v49 != v48)
      {
        do
        {
          uint64_t v26 = (void *)*--v23;
          uint64_t v25 = v26;
          void *v23 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v23 != v22);
        long long v24 = v48;
      }
      uint64_t v49 = v22;
      operator delete(v24);
    }
    if (v44 != v47) {
      free(v44);
    }
  }
  return v18;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps4(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
    return 1;
  }
  __int16 v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    int v47 = 3;
    char v48 = " #";
    uint64_t v49 = 2;
    long long v7 = &v47;
    uint64_t v8 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        int64_t v41 = (char *)&v47 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        uint64_t v8 = (char *)v51;
        long long v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        long long v7 = &v47;
        uint64_t v8 = (char *)v51;
      }
    }
    uint64_t v9 = &v8[24 * v52];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    uint64_t v11 = ++v52;
    if (v50[0])
    {
      int v47 = 5;
      char v48 = (const char *)a5;
      long long v12 = &v47;
      uint64_t v13 = (char *)v51;
      if (v11 >= v53)
      {
        unint64_t v36 = v11 + 1;
        BOOL v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          int64_t v42 = (char *)&v47 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          uint64_t v13 = (char *)v51;
          long long v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          long long v12 = &v47;
          uint64_t v13 = (char *)v51;
        }
      }
      unint64_t v14 = &v13[24 * v52];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)unint64_t v14 = v15;
      uint64_t v16 = ++v52;
      if (v50[0])
      {
        int v47 = 3;
        uint64_t v49 = 50;
        long long v17 = &v47;
        uint64_t v18 = (char *)v51;
        if (v16 >= v53)
        {
          unint64_t v38 = v16 + 1;
          BOOL v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            int64_t v43 = (char *)&v47 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            uint64_t v18 = (char *)v51;
            long long v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            long long v17 = &v47;
            uint64_t v18 = (char *)v51;
          }
        }
        uint64_t v19 = &v18[24 * v52];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        ++v52;
        if (v50[0])
        {
          int64_t v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          uint64_t v22 = (char *)v51;
          if (v52 >= v53)
          {
            unint64_t v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              int64_t v44 = (char *)&v47 - (unsigned char *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              uint64_t v22 = (char *)v51;
              int64_t v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              int64_t v21 = &v47;
              uint64_t v22 = (char *)v51;
            }
          }
          uint64_t v23 = &v22[24 * v52];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)uint64_t v23 = v24;
          ++v52;
        }
      }
    }
  }
  uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  }
  if (v59)
  {
    uint64_t v26 = (void **)__p;
    if (__p)
    {
      uint64_t v27 = v58;
      uint64_t v28 = __p;
      if (v58 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        uint64_t v28 = __p;
      }
      unint64_t v58 = v26;
      operator delete(v28);
    }
    unsigned int v29 = v55;
    if (v55)
    {
      unint64_t v30 = v56;
      unint64_t v31 = v55;
      if (v56 != v55)
      {
        do
        {
          unint64_t v33 = (void *)*--v30;
          BOOL v32 = v33;
          *unint64_t v30 = 0;
          if (v33) {
            operator delete[](v32);
          }
        }
        while (v30 != v29);
        unint64_t v31 = v55;
      }
      int v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
  return v25;
}

uint64_t mlir::pdl::OperandOp::parse(uint64_t a1, uint64_t a2)
{
  v27[16] = *MEMORY[0x1E4F143B8];
  uint64_t v25 = v27;
  uint64_t v26 = 0x400000000;
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    memset(v24, 0, 24);
    unsigned __int16 v4 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 680))(a1, v24, 1);
    if (v4 >= 0x100u)
    {
      if (!(_BYTE)v4) {
        goto LABEL_15;
      }
      unsigned int v5 = v24;
      unint64_t v6 = (char *)v25;
      if (v26 >= HIDWORD(v26))
      {
        unint64_t v22 = v26 + 1;
        if (v25 <= v24 && (char *)v25 + 32 * v26 > (char *)v24)
        {
          int64_t v23 = (char *)v24 - (unsigned char *)v25;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v22, 32);
          unint64_t v6 = (char *)v25;
          unsigned int v5 = (void **)((char *)v25 + v23);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v22, 32);
          unsigned int v5 = v24;
          unint64_t v6 = (char *)v25;
        }
      }
      long long v7 = &v6[32 * v26];
      long long v8 = *((_OWORD *)v5 + 1);
      *(_OWORD *)long long v7 = *(_OWORD *)v5;
      *((_OWORD *)v7 + 1) = v8;
      LODWORD(v26) = v26 + 1;
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
    uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    long long v12 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v13 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v12);
    uint64_t v14 = mlir::StorageUniquer::getSingletonImpl(v13, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
    uint64_t v15 = *(unsigned int *)(a2 + 72);
    if (v15 >= *(_DWORD *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15 + 1, 8);
      LODWORD(v15) = *(_DWORD *)(a2 + 72);
    }
    *(void *)(*(void *)(a2 + 64) + 8 * v15) = SingletonImpl;
    ++*(_DWORD *)(a2 + 72);
    if (!v26)
    {
LABEL_13:
      uint64_t v19 = 1;
      long long v20 = v25;
      if (v25 == v27) {
        return v19;
      }
      goto LABEL_16;
    }
    uint64_t v16 = a2 + 16;
    long long v17 = (char *)v25;
    uint64_t v18 = 32 * v26;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v17, v14, v16))
    {
      v17 += 32;
      v18 -= 32;
      if (!v18) {
        goto LABEL_13;
      }
    }
  }
LABEL_15:
  uint64_t v19 = 0;
  long long v20 = v25;
  if (v25 != v27) {
LABEL_16:
  }
    free(v20);
  return v19;
}

void mlir::pdl::OperandOp::print(mlir::pdl::OperandOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v18[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)this;
  unsigned int v5 = *(_DWORD *)(v4 + 44);
  if ((v5 & 0x800000) != 0 && *(_DWORD *)(v4 + 68) && *(void *)(*(void *)(v4 + 72) + 24))
  {
    unint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v7 = (unsigned char *)*((void *)v6 + 4);
    if ((unint64_t)v7 >= *((void *)v6 + 3))
    {
      llvm::raw_ostream::write(v6, 32);
    }
    else
    {
      *((void *)v6 + 4) = v7 + 1;
      *long long v7 = 32;
    }
    long long v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
    if (*((unsigned char **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, ":", 1uLL);
    }
    else
    {
      *uint64_t v9 = 58;
      ++*((void *)v8 + 4);
    }
    long long v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if ((unint64_t)v11 >= *((void *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((void *)v10 + 4) = v11 + 1;
      *uint64_t v11 = 32;
    }
    uint64_t v4 = *(void *)this;
    unsigned int v5 = *(_DWORD *)(*(void *)this + 44);
    if ((v5 & 0x800000) != 0 && *(_DWORD *)(v4 + 68) && *(void *)(*(void *)(v4 + 72) + 24))
    {
      (*(void (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 160))(a2);
      uint64_t v4 = *(void *)this;
      unsigned int v5 = *(_DWORD *)(*(void *)this + 44);
    }
  }
  uint64_t v16 = v18;
  uint64_t v17 = 0x200000000;
  if (HIBYTE(v5))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v14, v16, v17);
  if (v16 != v18) {
    free(v16);
  }
}

BOOL mlir::pdl::OperandsOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if ((*((unsigned char *)v2 + 46) & 0x80) == 0) {
    goto LABEL_27;
  }
  uint64_t v3 = (const char *)*((unsigned int *)v2 + 17);
  if (v3 < 2)
  {
    if (v3)
    {
      if (!mlir::pdl::__mlir_ods_local_type_constraint_PDLOps5(v2, *(void *)(*(void *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0; {
      uint64_t v2 = *this;
      }
    }
LABEL_27:
    if (*((_DWORD *)v2 + 9)) {
      uint64_t v27 = (uint64_t)(v2 - 2);
    }
    else {
      uint64_t v27 = 0;
    }
    NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0);
    unsigned int v29 = *this;
    unint64_t v30 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(void *)v30 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      v82[0] = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v82) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
        return 1;
      }
    }
    __int16 v78 = 261;
    v77[0] = (const void **)"result";
    v77[1] = (const void **)6;
    mlir::Operation::emitOpError(v29, v77, (uint64_t)v82);
    if (v82[0])
    {
      int v79 = 3;
      uint64_t v80 = " #";
      uint64_t v81 = 2;
      unint64_t v31 = &v79;
      BOOL v32 = (char *)v83;
      if (v84 >= v85)
      {
        unint64_t v60 = v84 + 1;
        if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
        {
          int64_t v71 = (char *)&v79 - (unsigned char *)v83;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v60, 24);
          BOOL v32 = (char *)v83;
          unint64_t v31 = (int *)((char *)v83 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v60, 24);
          unint64_t v31 = &v79;
          BOOL v32 = (char *)v83;
        }
      }
      unint64_t v33 = &v32[24 * v84];
      long long v34 = *(_OWORD *)v31;
      *((void *)v33 + 2) = *((void *)v31 + 2);
      *(_OWORD *)unint64_t v33 = v34;
      uint64_t v35 = ++v84;
      if (v82[0])
      {
        int v79 = 5;
        uint64_t v80 = 0;
        unint64_t v36 = &v79;
        BOOL v37 = (char *)v83;
        if (v35 >= v85)
        {
          unint64_t v63 = v35 + 1;
          BOOL v64 = (char *)v83 + 24 * v35 > (char *)&v79;
          if (v83 <= &v79 && v64)
          {
            int64_t v73 = (char *)&v79 - (unsigned char *)v83;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v63, 24);
            BOOL v37 = (char *)v83;
            unint64_t v36 = (int *)((char *)v83 + v73);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v63, 24);
            unint64_t v36 = &v79;
            BOOL v37 = (char *)v83;
          }
        }
        unint64_t v38 = &v37[24 * v84];
        long long v39 = *(_OWORD *)v36;
        *((void *)v38 + 2) = *((void *)v36 + 2);
        *(_OWORD *)unint64_t v38 = v39;
        uint64_t v40 = ++v84;
        if (v82[0])
        {
          int v79 = 3;
          uint64_t v81 = 66;
          int64_t v41 = &v79;
          int64_t v42 = (char *)v83;
          if (v40 >= v85)
          {
            unint64_t v67 = v40 + 1;
            BOOL v68 = (char *)v83 + 24 * v40 > (char *)&v79;
            if (v83 <= &v79 && v68)
            {
              int64_t v75 = (char *)&v79 - (unsigned char *)v83;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v67, 24);
              int64_t v42 = (char *)v83;
              int64_t v41 = (int *)((char *)v83 + v75);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v67, 24);
              int64_t v41 = &v79;
              int64_t v42 = (char *)v83;
            }
          }
          int64_t v43 = &v42[24 * v84];
          long long v44 = *(_OWORD *)v41;
          *((void *)v43 + 2) = *((void *)v41 + 2);
          *(_OWORD *)int64_t v43 = v44;
          ++v84;
          if (v82[0])
          {
            unsigned int v45 = &v79;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v79, v30);
            __int16 v46 = (char *)v83;
            if (v84 >= v85)
            {
              unint64_t v69 = v84 + 1;
              if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
              {
                int64_t v76 = (char *)&v79 - (unsigned char *)v83;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v69, 24);
                __int16 v46 = (char *)v83;
                unsigned int v45 = (int *)((char *)v83 + v76);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v69, 24);
                unsigned int v45 = &v79;
                __int16 v46 = (char *)v83;
              }
            }
            int v47 = &v46[24 * v84];
            long long v48 = *(_OWORD *)v45;
            *((void *)v47 + 2) = *((void *)v45 + 2);
            *(_OWORD *)int v47 = v48;
            ++v84;
          }
        }
      }
    }
    char v49 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v82);
    if (v82[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v82);
    }
    if (v91)
    {
      unint64_t v50 = (void **)__p;
      if (__p)
      {
        int64_t v51 = v90;
        unsigned int v52 = __p;
        if (v90 != __p)
        {
          do
            int64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          unsigned int v52 = __p;
        }
        char v90 = v50;
        operator delete(v52);
      }
      unsigned int v53 = v87;
      if (v87)
      {
        int64_t v54 = v88;
        uint64_t v55 = v87;
        if (v88 != v87)
        {
          do
          {
            uint64_t v57 = (void *)*--v54;
            int v56 = v57;
            *int64_t v54 = 0;
            if (v57) {
              operator delete[](v56);
            }
          }
          while (v54 != v53);
          uint64_t v55 = v87;
        }
        char v88 = v53;
        operator delete(v55);
      }
      if (v83 != v86) {
        free(v83);
      }
    }
    return v49 != 0;
  }
  v77[0] = (const void **)"operand group starting at #";
  __int16 v78 = 259;
  mlir::OpState::emitOpError(this, v77, (uint64_t)v82);
  if (v82[0])
  {
    int v79 = 5;
    uint64_t v80 = 0;
    uint64_t v4 = &v79;
    unsigned int v5 = (char *)v83;
    if (v84 >= v85)
    {
      unint64_t v59 = v84 + 1;
      if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
      {
        int64_t v70 = (char *)&v79 - (unsigned char *)v83;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v59, 24);
        unsigned int v5 = (char *)v83;
        uint64_t v4 = (int *)((char *)v83 + v70);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v59, 24);
        uint64_t v4 = &v79;
        unsigned int v5 = (char *)v83;
      }
    }
    unint64_t v6 = &v5[24 * v84];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *(_OWORD *)unint64_t v6 = v7;
    uint64_t v8 = ++v84;
    if (v82[0])
    {
      int v79 = 3;
      uint64_t v80 = " requires 0 or 1 element, but found ";
      uint64_t v81 = 36;
      uint64_t v9 = &v79;
      long long v10 = (char *)v83;
      if (v8 >= v85)
      {
        unint64_t v61 = v8 + 1;
        BOOL v62 = (char *)v83 + 24 * v8 > (char *)&v79;
        if (v83 <= &v79 && v62)
        {
          int64_t v72 = (char *)&v79 - (unsigned char *)v83;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v61, 24);
          long long v10 = (char *)v83;
          uint64_t v9 = (int *)((char *)v83 + v72);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v61, 24);
          uint64_t v9 = &v79;
          long long v10 = (char *)v83;
        }
      }
      uint64_t v11 = &v10[24 * v84];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      uint64_t v13 = ++v84;
      if (v82[0])
      {
        int v79 = 5;
        uint64_t v80 = v3;
        uint64_t v14 = &v79;
        uint64_t v15 = (char *)v83;
        if (v13 >= v85)
        {
          unint64_t v65 = v13 + 1;
          BOOL v66 = (char *)v83 + 24 * v13 > (char *)&v79;
          if (v83 <= &v79 && v66)
          {
            int64_t v74 = (char *)&v79 - (unsigned char *)v83;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v65, 24);
            uint64_t v15 = (char *)v83;
            uint64_t v14 = (int *)((char *)v83 + v74);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v65, 24);
            uint64_t v14 = &v79;
            uint64_t v15 = (char *)v83;
          }
        }
        uint64_t v16 = &v15[24 * v84];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v84;
      }
    }
  }
  uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v82);
  if (v82[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v82);
  }
  if (v91)
  {
    uint64_t v19 = (void **)__p;
    if (__p)
    {
      long long v20 = v90;
      int64_t v21 = __p;
      if (v90 != __p)
      {
        do
          long long v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        int64_t v21 = __p;
      }
      char v90 = v19;
      operator delete(v21);
    }
    unint64_t v22 = v87;
    if (v87)
    {
      int64_t v23 = v88;
      long long v24 = v87;
      if (v88 != v87)
      {
        do
        {
          uint64_t v26 = (void *)*--v23;
          uint64_t v25 = v26;
          void *v23 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v23 != v22);
        long long v24 = v87;
      }
      char v88 = v22;
      operator delete(v24);
    }
    if (v83 != v86) {
      free(v83);
    }
  }
  return v18;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps5(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v53[0] = a2;
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v53) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
      return 1;
    }
  }
  __int16 v49 = 261;
  v48[0] = a3;
  v48[1] = a4;
  mlir::Operation::emitOpError(a1, v48, (uint64_t)v53);
  if (v53[0])
  {
    int v50 = 3;
    int64_t v51 = " #";
    uint64_t v52 = 2;
    long long v10 = &v50;
    uint64_t v11 = (char *)v54;
    if (v55 >= v56)
    {
      unint64_t v38 = v55 + 1;
      if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
      {
        int64_t v44 = (char *)&v50 - (unsigned char *)v54;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        uint64_t v11 = (char *)v54;
        long long v10 = (int *)((char *)v54 + v44);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        long long v10 = &v50;
        uint64_t v11 = (char *)v54;
      }
    }
    long long v12 = &v11[24 * v55];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)long long v12 = v13;
    uint64_t v14 = ++v55;
    if (v53[0])
    {
      int v50 = 5;
      int64_t v51 = (const char *)a5;
      uint64_t v15 = &v50;
      uint64_t v16 = (char *)v54;
      if (v14 >= v56)
      {
        unint64_t v39 = v14 + 1;
        BOOL v40 = (char *)v54 + 24 * v14 > (char *)&v50;
        if (v54 <= &v50 && v40)
        {
          int64_t v45 = (char *)&v50 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          uint64_t v16 = (char *)v54;
          uint64_t v15 = (int *)((char *)v54 + v45);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          uint64_t v15 = &v50;
          uint64_t v16 = (char *)v54;
        }
      }
      long long v17 = &v16[24 * v55];
      long long v18 = *(_OWORD *)v15;
      *((void *)v17 + 2) = *((void *)v15 + 2);
      *(_OWORD *)long long v17 = v18;
      uint64_t v19 = ++v55;
      if (v53[0])
      {
        int v50 = 3;
        uint64_t v52 = 64;
        long long v20 = &v50;
        int64_t v21 = (char *)v54;
        if (v19 >= v56)
        {
          unint64_t v41 = v19 + 1;
          BOOL v42 = (char *)v54 + 24 * v19 > (char *)&v50;
          if (v54 <= &v50 && v42)
          {
            int64_t v46 = (char *)&v50 - (unsigned char *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            int64_t v21 = (char *)v54;
            long long v20 = (int *)((char *)v54 + v46);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            long long v20 = &v50;
            int64_t v21 = (char *)v54;
          }
        }
        unint64_t v22 = &v21[24 * v55];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = *((void *)v20 + 2);
        *(_OWORD *)unint64_t v22 = v23;
        ++v55;
        if (v53[0])
        {
          long long v24 = &v50;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, a2);
          uint64_t v25 = (char *)v54;
          if (v55 >= v56)
          {
            unint64_t v43 = v55 + 1;
            if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
            {
              int64_t v47 = (char *)&v50 - (unsigned char *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              uint64_t v25 = (char *)v54;
              long long v24 = (int *)((char *)v54 + v47);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              long long v24 = &v50;
              uint64_t v25 = (char *)v54;
            }
          }
          uint64_t v26 = &v25[24 * v55];
          long long v27 = *(_OWORD *)v24;
          *((void *)v26 + 2) = *((void *)v24 + 2);
          *(_OWORD *)uint64_t v26 = v27;
          ++v55;
        }
      }
    }
  }
  uint64_t v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  }
  if (v62)
  {
    unsigned int v29 = (void **)__p;
    if (__p)
    {
      unint64_t v30 = v61;
      unint64_t v31 = __p;
      if (v61 != __p)
      {
        do
          unint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        unint64_t v31 = __p;
      }
      unint64_t v61 = v29;
      operator delete(v31);
    }
    BOOL v32 = v58;
    if (v58)
    {
      unint64_t v33 = v59;
      long long v34 = v58;
      if (v59 != v58)
      {
        do
        {
          unint64_t v36 = (void *)*--v33;
          uint64_t v35 = v36;
          *unint64_t v33 = 0;
          if (v36) {
            operator delete[](v35);
          }
        }
        while (v33 != v32);
        long long v34 = v58;
      }
      unint64_t v59 = v32;
      operator delete(v34);
    }
    if (v54 != v57) {
      free(v54);
    }
  }
  return v28;
}

uint64_t mlir::pdl::OperandsOp::parse(uint64_t a1, uint64_t a2)
{
  v29[16] = *MEMORY[0x1E4F143B8];
  long long v27 = v29;
  uint64_t v28 = 0x400000000;
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    memset(v26, 0, 24);
    unsigned __int16 v4 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 680))(a1, v26, 1);
    if (v4 >= 0x100u)
    {
      if (!(_BYTE)v4) {
        goto LABEL_15;
      }
      unsigned int v5 = v26;
      unint64_t v6 = (char *)v27;
      if (v28 >= HIDWORD(v28))
      {
        unint64_t v24 = v28 + 1;
        if (v27 <= v26 && (char *)v27 + 32 * v28 > (char *)v26)
        {
          int64_t v25 = (char *)v26 - (unsigned char *)v27;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v24, 32);
          unint64_t v6 = (char *)v27;
          unsigned int v5 = (void **)((char *)v27 + v25);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v24, 32);
          unsigned int v5 = v26;
          unint64_t v6 = (char *)v27;
        }
      }
      long long v7 = &v6[32 * v28];
      long long v8 = *((_OWORD *)v5 + 1);
      *(_OWORD *)long long v7 = *(_OWORD *)v5;
      *((_OWORD *)v7 + 1) = v8;
      LODWORD(v28) = v28 + 1;
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
    uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    uint64_t v12 = mlir::pdl::RangeType::get(SingletonImpl);
    long long v13 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v14 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v13);
    uint64_t v15 = mlir::StorageUniquer::getSingletonImpl(v14, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
    uint64_t v16 = mlir::pdl::RangeType::get(v15);
    uint64_t v17 = *(unsigned int *)(a2 + 72);
    if (v17 >= *(_DWORD *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17 + 1, 8);
      LODWORD(v17) = *(_DWORD *)(a2 + 72);
    }
    *(void *)(*(void *)(a2 + 64) + 8 * v17) = v12;
    ++*(_DWORD *)(a2 + 72);
    if (!v28)
    {
LABEL_13:
      uint64_t v21 = 1;
      unint64_t v22 = v27;
      if (v27 == v29) {
        return v21;
      }
      goto LABEL_16;
    }
    uint64_t v18 = a2 + 16;
    uint64_t v19 = (char *)v27;
    uint64_t v20 = 32 * v28;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v19, v16, v18))
    {
      v19 += 32;
      v20 -= 32;
      if (!v20) {
        goto LABEL_13;
      }
    }
  }
LABEL_15:
  uint64_t v21 = 0;
  unint64_t v22 = v27;
  if (v27 != v29) {
LABEL_16:
  }
    free(v22);
  return v21;
}

uint64_t mlir::pdl::OperationOp::getOperandValues(mlir::pdl::OperationOp *this)
{
  if ((*(_DWORD *)(*(void *)this + 44) & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72);
  }
  else {
    return 0;
  }
}

BOOL mlir::pdl::OperationOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v88 = v6;
  if (!v6)
  {
    a3(v92, a4);
    if (v92[0])
    {
      int v89 = 3;
      char v90 = "expected DictionaryAttr to set properties";
      uint64_t v91 = 41;
      uint64_t v26 = &v89;
      long long v27 = (char *)v93;
      if (v94 >= v95)
      {
        unint64_t v74 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          int64_t v81 = (char *)&v89 - (unsigned char *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v74, 24);
          long long v27 = (char *)v93;
          uint64_t v26 = (int *)((char *)v93 + v81);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v74, 24);
          uint64_t v26 = &v89;
          long long v27 = (char *)v93;
        }
      }
      uint64_t v28 = &v27[24 * v94];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v94;
      if (v92[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
      }
    }
    if (!v101) {
      return 0;
    }
    unint64_t v30 = (void **)__p;
    if (__p)
    {
      unint64_t v31 = v100;
      BOOL v32 = __p;
      if (v100 != __p)
      {
        do
          unint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        BOOL v32 = __p;
      }
      uint64_t v100 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v97;
    if (!v97) {
      goto LABEL_100;
    }
    unint64_t v33 = v98;
    long long v23 = v97;
    if (v98 == v97)
    {
LABEL_99:
      uint64_t v98 = v21;
      operator delete(v23);
LABEL_100:
      if (v93 != v96) {
        free(v93);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      long long v34 = v35;
      *unint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_98:
    long long v23 = v97;
    goto LABEL_99;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v88, "attributeValueNames", 0x13uLL);
  if (!v8)
  {
    a3(v92, a4);
    if (v92[0])
    {
      int v89 = 3;
      char v90 = "expected key entry for attributeValueNames in DictionaryAttr to set Properties.";
      uint64_t v91 = 79;
      unint64_t v36 = &v89;
      BOOL v37 = (char *)v93;
      if (v94 >= v95)
      {
        unint64_t v76 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          int64_t v83 = (char *)&v89 - (unsigned char *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v76, 24);
          BOOL v37 = (char *)v93;
          unint64_t v36 = (int *)((char *)v93 + v83);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v76, 24);
          unint64_t v36 = &v89;
          BOOL v37 = (char *)v93;
        }
      }
      unint64_t v38 = &v37[24 * v94];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)unint64_t v38 = v39;
      ++v94;
      if (v92[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
      }
    }
    if (!v101) {
      return 0;
    }
    BOOL v40 = (void **)__p;
    if (__p)
    {
      unint64_t v41 = v100;
      BOOL v42 = __p;
      if (v100 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        BOOL v42 = __p;
      }
      uint64_t v100 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v97;
    if (!v97) {
      goto LABEL_100;
    }
    unint64_t v43 = v98;
    long long v23 = v97;
    if (v98 == v97) {
      goto LABEL_99;
    }
    do
    {
      int64_t v45 = (void *)*--v43;
      int64_t v44 = v45;
      void *v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_98;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    a3(v92, a4);
    if (v92[0])
    {
      int v89 = 3;
      uint64_t v91 = 64;
      long long v10 = &v89;
      uint64_t v11 = (char *)v93;
      if (v94 >= v95)
      {
        unint64_t v75 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          int64_t v82 = (char *)&v89 - (unsigned char *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v75, 24);
          uint64_t v11 = (char *)v93;
          long long v10 = (int *)((char *)v93 + v82);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v75, 24);
          long long v10 = &v89;
          uint64_t v11 = (char *)v93;
        }
      }
      uint64_t v12 = &v11[24 * v94];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v94;
      if (v92[0])
      {
        uint64_t v14 = &v89;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v89, v9);
        uint64_t v15 = (char *)v93;
        if (v94 >= v95)
        {
          unint64_t v77 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            int64_t v84 = (char *)&v89 - (unsigned char *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
            uint64_t v15 = (char *)v93;
            uint64_t v14 = (int *)((char *)v93 + v84);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
            uint64_t v14 = &v89;
            uint64_t v15 = (char *)v93;
          }
        }
        uint64_t v16 = &v15[24 * v94];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v94;
        if (v92[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
        }
      }
    }
    if (!v101) {
      return 0;
    }
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v100;
      uint64_t v20 = __p;
      if (v100 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v100 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v97;
    if (!v97) {
      goto LABEL_100;
    }
    unint64_t v22 = v98;
    long long v23 = v97;
    if (v98 == v97) {
      goto LABEL_99;
    }
    do
    {
      int64_t v25 = (void *)*--v22;
      unint64_t v24 = v25;
      *unint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
    goto LABEL_98;
  }
  *a1 = v8;
  uint64_t v46 = mlir::DictionaryAttr::get((uint64_t)&v88, "opName", 6uLL);
  if (v46)
  {
    uint64_t v47 = v46;
    if (*(_UNKNOWN **)(*(void *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    {
      a3(v92, a4);
      if (v92[0])
      {
        int v89 = 3;
        uint64_t v91 = 51;
        long long v48 = &v89;
        __int16 v49 = (char *)v93;
        if (v94 >= v95)
        {
          unint64_t v78 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            int64_t v85 = (char *)&v89 - (unsigned char *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v78, 24);
            __int16 v49 = (char *)v93;
            long long v48 = (int *)((char *)v93 + v85);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v78, 24);
            long long v48 = &v89;
            __int16 v49 = (char *)v93;
          }
        }
        int v50 = &v49[24 * v94];
        long long v51 = *(_OWORD *)v48;
        *((void *)v50 + 2) = *((void *)v48 + 2);
        *(_OWORD *)int v50 = v51;
        ++v94;
        if (v92[0])
        {
          uint64_t v52 = &v89;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v89, v47);
          unsigned int v53 = (char *)v93;
          if (v94 >= v95)
          {
            unint64_t v79 = v94 + 1;
            if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
            {
              int64_t v86 = (char *)&v89 - (unsigned char *)v93;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v79, 24);
              unsigned int v53 = (char *)v93;
              uint64_t v52 = (int *)((char *)v93 + v86);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v79, 24);
              uint64_t v52 = &v89;
              unsigned int v53 = (char *)v93;
            }
          }
          int64_t v54 = &v53[24 * v94];
          long long v55 = *(_OWORD *)v52;
          *((void *)v54 + 2) = *((void *)v52 + 2);
          *(_OWORD *)int64_t v54 = v55;
          ++v94;
          if (v92[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
          }
        }
      }
      if (!v101) {
        return 0;
      }
      unsigned int v56 = (void **)__p;
      if (__p)
      {
        uint64_t v57 = v100;
        unint64_t v58 = __p;
        if (v100 != __p)
        {
          do
            uint64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
          while (v57 != v56);
          unint64_t v58 = __p;
        }
        uint64_t v100 = v56;
        operator delete(v58);
      }
      uint64_t v21 = v97;
      if (!v97) {
        goto LABEL_100;
      }
      unint64_t v59 = v98;
      long long v23 = v97;
      if (v98 == v97) {
        goto LABEL_99;
      }
      do
      {
        unint64_t v61 = (void *)*--v59;
        unint64_t v60 = v61;
        *unint64_t v59 = 0;
        if (v61) {
          operator delete[](v60);
        }
      }
      while (v59 != v21);
      goto LABEL_98;
    }
    a1[1] = v46;
  }
  char v62 = (void *)mlir::DictionaryAttr::get((uint64_t)&v88, "operandSegmentSizes", 0x13uLL);
  if (!v62)
  {
    char v62 = (void *)mlir::DictionaryAttr::get((uint64_t)&v88, "operand_segment_sizes", 0x15uLL);
    if (!v62)
    {
      a3(v92, a4);
      if (v92[0])
      {
        int v89 = 3;
        char v90 = "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.";
        uint64_t v91 = 79;
        BOOL v64 = &v89;
        unint64_t v65 = (char *)v93;
        if (v94 >= v95)
        {
          unint64_t v80 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            int64_t v87 = (char *)&v89 - (unsigned char *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v80, 24);
            unint64_t v65 = (char *)v93;
            BOOL v64 = (int *)((char *)v93 + v87);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v80, 24);
            BOOL v64 = &v89;
            unint64_t v65 = (char *)v93;
          }
        }
        BOOL v66 = &v65[24 * v94];
        long long v67 = *(_OWORD *)v64;
        *((void *)v66 + 2) = *((void *)v64 + 2);
        *(_OWORD *)BOOL v66 = v67;
        ++v94;
        if (v92[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
        }
      }
      if (!v101) {
        return 0;
      }
      BOOL v68 = (void **)__p;
      if (__p)
      {
        unint64_t v69 = v100;
        int64_t v70 = __p;
        if (v100 != __p)
        {
          do
            unint64_t v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
          while (v69 != v68);
          int64_t v70 = __p;
        }
        uint64_t v100 = v68;
        operator delete(v70);
      }
      uint64_t v21 = v97;
      if (!v97) {
        goto LABEL_100;
      }
      int64_t v71 = v98;
      long long v23 = v97;
      if (v98 == v97) {
        goto LABEL_99;
      }
      do
      {
        int64_t v73 = (void *)*--v71;
        int64_t v72 = v73;
        *int64_t v71 = 0;
        if (v73) {
          operator delete[](v72);
        }
      }
      while (v71 != v21);
      goto LABEL_98;
    }
  }
  return mlir::convertFromAttribute(a1 + 2, (const char *)3, v62, a3, a4) != 0;
}

uint64_t mlir::pdl::OperationOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v29[6] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a1;
  long long v27 = v29;
  uint64_t v28 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v26, (uint64_t)"attributeValueNames", 19, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
      unsigned int v7 = v28;
    }
    uint64_t v8 = (uint64_t *)((char *)v27 + 16 * v7);
    uint64_t *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v28) = v28 + 1;
  }
  uint64_t v9 = a2[1];
  if (v9)
  {
    uint64_t v10 = mlir::Builder::getNamedAttr(&v26, (uint64_t)"opName", 6, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
      unsigned int v13 = v28;
    }
    uint64_t v14 = (uint64_t *)((char *)v27 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    LODWORD(v28) = v28 + 1;
  }
  uint64_t v15 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 2), 3);
  uint64_t v16 = mlir::Builder::getNamedAttr(&v26, (uint64_t)"operandSegmentSizes", 19, v15);
  uint64_t v18 = v17;
  unsigned int v19 = v28;
  if (v28 >= HIDWORD(v28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
    unsigned int v19 = v28;
  }
  uint64_t v20 = (uint64_t *)((char *)v27 + 16 * v19);
  *uint64_t v20 = v16;
  v20[1] = v18;
  BOOL v21 = __CFADD__(v28, 1);
  uint64_t v22 = (v28 + 1);
  LODWORD(v28) = v28 + 1;
  if (v21)
  {
    uint64_t DictionaryAttr = 0;
    unint64_t v24 = v27;
    if (v27 == v29) {
      return DictionaryAttr;
    }
    goto LABEL_16;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v26, (uint64_t *)v27, v22);
  unint64_t v24 = v27;
  if (v27 != v29) {
LABEL_16:
  }
    free(v24);
  return DictionaryAttr;
}

uint64_t mlir::pdl::OperationOp::getInherentAttr(mlir::MLIRContext *a1, void *a2, char *__s1, size_t __n)
{
  if (__n == 6)
  {
    if (!memcmp(__s1, "opName", 6uLL)) {
      return a2[1];
    }
    return 0;
  }
  if (__n == 21)
  {
    if (!memcmp(__s1, "operand_segment_sizes", 0x15uLL)) {
      return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 2), 3);
    }
    return 0;
  }
  if (__n != 19) {
    return 0;
  }
  if (*(void *)__s1 != 0x7475626972747461
    || *((void *)__s1 + 1) != 0x614E65756C615665
    || *(void *)(__s1 + 11) != 0x73656D614E65756CLL)
  {
    if (!memcmp(__s1, "operandSegmentSizes", 0x13uLL)) {
      return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 2), 3);
    }
    return 0;
  }
  return *a2;
}

uint64_t mlir::pdl::OperationOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, void *a4)
{
  uint64_t v5 = result;
  if (a3 == 6)
  {
    uint64_t result = memcmp(__s1, "opName", 6uLL);
    if (!result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
          uint64_t v8 = a4;
        }
        else {
          uint64_t v8 = 0;
        }
        *(void *)(v5 + 8) = v8;
      }
      else
      {
        *(void *)(v5 + 8) = 0;
      }
    }
  }
  else
  {
    if (a3 == 21)
    {
      uint64_t result = memcmp(__s1, "operand_segment_sizes", 0x15uLL);
      if (result) {
        return result;
      }
    }
    else
    {
      if (a3 != 19) {
        return result;
      }
      if (*(void *)__s1 == 0x7475626972747461
        && *((void *)__s1 + 1) == 0x614E65756C615665
        && *(void *)(__s1 + 11) == 0x73656D614E65756CLL)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
            uint64_t v11 = a4;
          }
          else {
            uint64_t v11 = 0;
          }
          *(void *)uint64_t result = v11;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
        return result;
      }
      uint64_t result = memcmp(__s1, "operandSegmentSizes", 0x13uLL);
      if (result) {
        return result;
      }
    }
    if (a4)
    {
      uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
      if (result) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v12 = v9;
      if (result)
      {
        uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
        if (result == 3)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
          if (v10) {
            return (uint64_t)memmove((void *)(v5 + 16), (const void *)result, 4 * v10);
          }
        }
      }
    }
  }
  return result;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    uint64_t v39 = a1;
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    uint64_t v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    uint64_t v29 = v27 + 8 * v28;
    if (v29 != Value)
    {
      while (*(void *)Value
           && *(_UNKNOWN **)(**(void **)Value + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
      {
        Value += 8;
        if (Value == v29) {
          return 1;
        }
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v39, a5);
  if (v39)
  {
    LODWORD(v35) = 3;
    unint64_t v36 = "attribute '";
    uint64_t v37 = 11;
    uint64_t v9 = &v35;
    uint64_t v10 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v31 = v42 + 1;
      if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
      {
        int64_t v33 = (char *)&v35 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        uint64_t v10 = (char *)v41;
        uint64_t v9 = (const void ***)((char *)v41 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        uint64_t v9 = &v35;
        uint64_t v10 = (char *)v41;
      }
    }
    uint64_t v11 = &v10[24 * v42];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)uint64_t v11 = v12;
    ++v42;
    if (v39)
    {
      __int16 v38 = 261;
      uint64_t v35 = a2;
      unint64_t v36 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v40, &v35);
      if (v39)
      {
        LODWORD(v35) = 3;
        unint64_t v36 = "' failed to satisfy constraint: string array attribute";
        uint64_t v37 = 54;
        unsigned int v13 = &v35;
        uint64_t v14 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v32 = v42 + 1;
          if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
          {
            int64_t v34 = (char *)&v35 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            uint64_t v14 = (char *)v41;
            unsigned int v13 = (const void ***)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            unsigned int v13 = &v35;
            uint64_t v14 = (char *)v41;
          }
        }
        uint64_t v15 = &v14[24 * v42];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)uint64_t v15 = v16;
        ++v42;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  if (v39) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  }
  if (v49)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      unsigned int v19 = v48;
      uint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          unsigned int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      long long v48 = v18;
      operator delete(v20);
    }
    BOOL v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      long long v23 = v45;
      if (v46 != v45)
      {
        do
        {
          int64_t v25 = (void *)*--v22;
          unint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        long long v23 = v45;
      }
      uint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v17;
}

BOOL mlir::pdl::OperationOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 1))
  {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 4)
    {
      uint64_t v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        unsigned __int16 v4 = (void **)__p;
        if (__p)
        {
          uint64_t v5 = v24;
          uint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            uint64_t v6 = __p;
          }
          unint64_t v24 = v4;
          operator delete(v6);
        }
        unsigned int v7 = v21;
        if (v21)
        {
          uint64_t v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = (void *)*--v8;
              uint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                operator delete[](v10);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          uint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    long long v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 2, v12, 4 * v13);
    }
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 4, (const char *)3);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x20uLL);
    v3[1] = 0;
    void v3[2] = 0;
    void *v3 = 0;
    *((_DWORD *)v3 + 6) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    unsigned __int16 v4 = &unk_1E8EBA000;
    {
      unsigned __int16 v4 = (void *)&unk_1E8EBA000;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 110;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        unsigned __int16 v4 = (void *)&unk_1E8EBA000;
      }
    }
    a1[33] = v4[323];
    return a1[32];
  }
  return result;
}

BOOL mlir::pdl::OperationOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = v3[1];
    v131[0] = v2;
    if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v5, (const void **)"opName", (const char *)6, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v131))return 0; {
    v131[0] = *this;
    }
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v4, (const void **)"attributeValueNames", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v131))return 0; {
    unint64_t v6 = *this;
    }
    unint64_t v7 = *((unsigned int *)*this + 11);
    uint64_t v8 = (v7 >> 23) & 1;
    uint64_t v9 = (uint64_t)&(*this)[2 * v8 + 8];
    if (!HIBYTE(*((_DWORD *)*this + 11))) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(unsigned int *)(v9 + 16);
    if ((v7 & 0x800000) != 0)
    {
      uint64_t v11 = v6[9];
      if (v10) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v11 = 0;
      if (v10)
      {
LABEL_11:
        uint64_t v12 = 0;
        uint64_t v13 = v11 + 24;
        while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps7(*this, *(void *)(*(void *)v13 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v12))
        {
          ++v12;
          v13 += 32;
          if (v10 == v12)
          {
            unint64_t v6 = *this;
            unint64_t v7 = *((unsigned int *)*this + 11);
            uint64_t v8 = (v7 >> 23) & 1;
            int v14 = v7 & 0x800000;
            goto LABEL_35;
          }
        }
        return 0;
      }
    }
    int v14 = v7 & 0x800000;
LABEL_35:
    uint64_t v24 = (uint64_t)&v6[2 * v8 + 8];
    if (BYTE3(v7)) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    int v26 = *(_DWORD *)(v25 + 20);
    if (v14)
    {
      uint64_t v27 = v6[9];
      if (v26) {
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v27 = 0;
      if (v26)
      {
LABEL_40:
        uint64_t v28 = 0;
        uint64_t v29 = *(unsigned int *)(v25 + 16);
        uint64_t v30 = v27 + 32 * v29;
        uint64_t v31 = (v26 + v29) - v29;
        do
        {
          unint64_t v32 = *(void *)(*(void *)(v30 + 32 * v28 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
          if (*(_UNKNOWN **)(*(void *)v32 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
          {
            int64_t v33 = *this;
            __int16 v127 = 261;
            BOOL v125 = (const void **)"operand";
            uint64_t v126 = 7;
            mlir::Operation::emitOpError(v33, &v125, (uint64_t)v131);
            if (v131[0])
            {
              int v128 = 3;
              unsigned __int8 v129 = " #";
              uint64_t v130 = 2;
              int64_t v34 = (char *)v132;
              if (v133 >= v134)
              {
                unint64_t v61 = v133 + 1;
                if (v132 <= &v128 && (char *)v132 + 24 * v133 > (char *)&v128)
                {
                  int64_t v67 = (char *)&v128 - (unsigned char *)v132;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v61, 24);
                  int64_t v34 = (char *)v132;
                  uint64_t v35 = (int *)((char *)v132 + v67);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v61, 24);
                  uint64_t v35 = &v128;
                  int64_t v34 = (char *)v132;
                }
              }
              else
              {
                uint64_t v35 = &v128;
              }
              unint64_t v36 = &v34[24 * v133];
              long long v37 = *(_OWORD *)v35;
              *((void *)v36 + 2) = *((void *)v35 + 2);
              *(_OWORD *)unint64_t v36 = v37;
              uint64_t v38 = ++v133;
              if (v131[0])
              {
                int v128 = 5;
                unsigned __int8 v129 = (const char *)v10;
                uint64_t v39 = (char *)v132;
                if (v38 >= v134)
                {
                  unint64_t v62 = v38 + 1;
                  BOOL v63 = (char *)v132 + 24 * v38 > (char *)&v128;
                  if (v132 <= &v128 && v63)
                  {
                    int64_t v68 = (char *)&v128 - (unsigned char *)v132;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v62, 24);
                    uint64_t v39 = (char *)v132;
                    uint64_t v40 = (int *)((char *)v132 + v68);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v62, 24);
                    uint64_t v40 = &v128;
                    uint64_t v39 = (char *)v132;
                  }
                }
                else
                {
                  uint64_t v40 = &v128;
                }
                unint64_t v41 = &v39[24 * v133];
                long long v42 = *(_OWORD *)v40;
                *((void *)v41 + 2) = *((void *)v40 + 2);
                *(_OWORD *)unint64_t v41 = v42;
                uint64_t v43 = ++v133;
                if (v131[0])
                {
                  int v128 = 3;
                  uint64_t v130 = 65;
                  int64_t v44 = (char *)v132;
                  if (v43 >= v134)
                  {
                    unint64_t v64 = v43 + 1;
                    BOOL v65 = (char *)v132 + 24 * v43 > (char *)&v128;
                    if (v132 <= &v128 && v65)
                    {
                      int64_t v69 = (char *)&v128 - (unsigned char *)v132;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v64, 24);
                      int64_t v44 = (char *)v132;
                      int64_t v45 = (int *)((char *)v132 + v69);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v64, 24);
                      int64_t v45 = &v128;
                      int64_t v44 = (char *)v132;
                    }
                  }
                  else
                  {
                    int64_t v45 = &v128;
                  }
                  uint64_t v46 = &v44[24 * v133];
                  long long v47 = *(_OWORD *)v45;
                  *((void *)v46 + 2) = *((void *)v45 + 2);
                  *(_OWORD *)uint64_t v46 = v47;
                  ++v133;
                  if (v131[0])
                  {
                    long long v48 = &v128;
                    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v128, v32);
                    char v49 = (char *)v132;
                    if (v133 >= v134)
                    {
                      unint64_t v66 = v133 + 1;
                      if (v132 <= &v128 && (char *)v132 + 24 * v133 > (char *)&v128)
                      {
                        int64_t v70 = (char *)&v128 - (unsigned char *)v132;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v66, 24);
                        char v49 = (char *)v132;
                        long long v48 = (int *)((char *)v132 + v70);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v66, 24);
                        long long v48 = &v128;
                        char v49 = (char *)v132;
                      }
                    }
                    uint64_t v50 = &v49[24 * v133];
                    long long v51 = *(_OWORD *)v48;
                    *((void *)v50 + 2) = *((void *)v48 + 2);
                    *(_OWORD *)uint64_t v50 = v51;
                    ++v133;
                  }
                }
              }
            }
            char v52 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v131);
            if (v131[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v131);
            }
            if (v140)
            {
              unsigned int v53 = (void **)__p;
              if (__p)
              {
                int64_t v54 = v139;
                long long v55 = __p;
                if (v139 != __p)
                {
                  do
                    int64_t v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
                  while (v54 != v53);
                  long long v55 = __p;
                }
                uint64_t v139 = v53;
                operator delete(v55);
              }
              unsigned int v56 = v136;
              if (v136)
              {
                uint64_t v57 = v137;
                unint64_t v58 = v136;
                if (v137 != v136)
                {
                  do
                  {
                    unint64_t v60 = (void *)*--v57;
                    unint64_t v59 = v60;
                    *uint64_t v57 = 0;
                    if (v60) {
                      operator delete[](v59);
                    }
                  }
                  while (v57 != v56);
                  unint64_t v58 = v136;
                }
                uint64_t v137 = v56;
                operator delete(v58);
              }
              if (v132 != v135) {
                free(v132);
              }
            }
            if (!v52) {
              return 0;
            }
          }
          LODWORD(v10) = v10 + 1;
        }
        while (++v28 != v31);
      }
    }
    int64_t v71 = *this;
    unint64_t v72 = *((unsigned int *)*this + 11);
    if (HIBYTE(*((_DWORD *)*this + 11))) {
      int64_t v73 = &(*this)[2 * ((v72 >> 23) & 1) + 8];
    }
    else {
      int64_t v73 = 0;
    }
    int v74 = *((_DWORD *)v73 + 6);
    if ((v72 & 0x800000) != 0)
    {
      uint64_t v75 = v71[9];
      if (v74) {
        goto LABEL_96;
      }
    }
    else
    {
      uint64_t v75 = 0;
      if (v74)
      {
LABEL_96:
        uint64_t v76 = 0;
        uint64_t v77 = (*((_DWORD *)v73 + 5) + *((_DWORD *)v73 + 4));
        uint64_t v78 = v75 + 32 * v77;
        uint64_t v79 = (v74 + v77) - v77;
        while (1)
        {
          unint64_t v80 = *(void *)(*(void *)(v78 + 32 * v76 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
          int64_t v81 = *(void **)(*(void *)v80 + 136);
          if (v81 != &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
          {
            int64_t v82 = *this;
            if (v81 != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id
              || (v131[0] = *(void *)(*(void *)(v78 + 32 * v76 + 24) + 8) & 0xFFFFFFFFFFFFFFF8,
                  *(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v131) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id))
            {
              __int16 v127 = 261;
              BOOL v125 = (const void **)"operand";
              uint64_t v126 = 7;
              mlir::Operation::emitOpError(v82, &v125, (uint64_t)v131);
              if (v131[0])
              {
                int v128 = 3;
                unsigned __int8 v129 = " #";
                uint64_t v130 = 2;
                int64_t v83 = (char *)v132;
                if (v133 >= v134)
                {
                  unint64_t v110 = v133 + 1;
                  if (v132 <= &v128 && (char *)v132 + 24 * v133 > (char *)&v128)
                  {
                    int64_t v116 = (char *)&v128 - (unsigned char *)v132;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v110, 24);
                    int64_t v83 = (char *)v132;
                    int64_t v84 = (int *)((char *)v132 + v116);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v110, 24);
                    int64_t v84 = &v128;
                    int64_t v83 = (char *)v132;
                  }
                }
                else
                {
                  int64_t v84 = &v128;
                }
                int64_t v85 = &v83[24 * v133];
                long long v86 = *(_OWORD *)v84;
                *((void *)v85 + 2) = *((void *)v84 + 2);
                *(_OWORD *)int64_t v85 = v86;
                uint64_t v87 = ++v133;
                if (v131[0])
                {
                  int v128 = 5;
                  unsigned __int8 v129 = (const char *)v10;
                  uint64_t v88 = (char *)v132;
                  if (v87 >= v134)
                  {
                    unint64_t v111 = v87 + 1;
                    BOOL v112 = (char *)v132 + 24 * v87 > (char *)&v128;
                    if (v132 <= &v128 && v112)
                    {
                      int64_t v117 = (char *)&v128 - (unsigned char *)v132;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v111, 24);
                      uint64_t v88 = (char *)v132;
                      int v89 = (int *)((char *)v132 + v117);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v111, 24);
                      int v89 = &v128;
                      uint64_t v88 = (char *)v132;
                    }
                  }
                  else
                  {
                    int v89 = &v128;
                  }
                  char v90 = &v88[24 * v133];
                  long long v91 = *(_OWORD *)v89;
                  *((void *)v90 + 2) = *((void *)v89 + 2);
                  *(_OWORD *)char v90 = v91;
                  uint64_t v92 = ++v133;
                  if (v131[0])
                  {
                    int v128 = 3;
                    uint64_t v130 = 87;
                    BOOL v93 = (char *)v132;
                    if (v92 >= v134)
                    {
                      unint64_t v113 = v92 + 1;
                      BOOL v114 = (char *)v132 + 24 * v92 > (char *)&v128;
                      if (v132 <= &v128 && v114)
                      {
                        int64_t v118 = (char *)&v128 - (unsigned char *)v132;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v113, 24);
                        BOOL v93 = (char *)v132;
                        unsigned int v94 = (int *)((char *)v132 + v118);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v113, 24);
                        unsigned int v94 = &v128;
                        BOOL v93 = (char *)v132;
                      }
                    }
                    else
                    {
                      unsigned int v94 = &v128;
                    }
                    unsigned int v95 = &v93[24 * v133];
                    long long v96 = *(_OWORD *)v94;
                    *((void *)v95 + 2) = *((void *)v94 + 2);
                    *(_OWORD *)unsigned int v95 = v96;
                    ++v133;
                    if (v131[0])
                    {
                      uint64_t v97 = &v128;
                      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v128, v80);
                      uint64_t v98 = (char *)v132;
                      if (v133 >= v134)
                      {
                        unint64_t v115 = v133 + 1;
                        if (v132 <= &v128 && (char *)v132 + 24 * v133 > (char *)&v128)
                        {
                          int64_t v119 = (char *)&v128 - (unsigned char *)v132;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v115, 24);
                          uint64_t v98 = (char *)v132;
                          uint64_t v97 = (int *)((char *)v132 + v119);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v115, 24);
                          uint64_t v97 = &v128;
                          uint64_t v98 = (char *)v132;
                        }
                      }
                      uint64_t v99 = &v98[24 * v133];
                      long long v100 = *(_OWORD *)v97;
                      *((void *)v99 + 2) = *((void *)v97 + 2);
                      *(_OWORD *)uint64_t v99 = v100;
                      ++v133;
                    }
                  }
                }
              }
              char v101 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v131);
              if (v131[0]) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v131);
              }
              if (v140)
              {
                uint64_t v102 = (void **)__p;
                if (__p)
                {
                  uint64_t v103 = v139;
                  BOOL v104 = __p;
                  if (v139 != __p)
                  {
                    do
                      uint64_t v103 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v103 - 1);
                    while (v103 != v102);
                    BOOL v104 = __p;
                  }
                  uint64_t v139 = v102;
                  operator delete(v104);
                }
                unint64_t v105 = v136;
                if (v136)
                {
                  BOOL v106 = v137;
                  unint64_t v107 = v136;
                  if (v137 != v136)
                  {
                    do
                    {
                      char v109 = (void *)*--v106;
                      BOOL v108 = v109;
                      void *v106 = 0;
                      if (v109) {
                        operator delete[](v108);
                      }
                    }
                    while (v106 != v105);
                    unint64_t v107 = v136;
                  }
                  uint64_t v137 = v105;
                  operator delete(v107);
                }
                if (v132 != v135) {
                  free(v132);
                }
              }
              if (!v101) {
                return 0;
              }
            }
          }
          LODWORD(v10) = v10 + 1;
          if (++v76 == v79)
          {
            int64_t v71 = *this;
            break;
          }
        }
      }
    }
    int v120 = *((_DWORD *)v71 + 9);
    unint64_t v121 = v71 - 2;
    if (v120) {
      uint64_t v122 = (uint64_t)v121;
    }
    else {
      uint64_t v122 = 0;
    }
    NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v122, 0);
    return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
  }
  else
  {
    BOOL v125 = (const void **)"requires attribute 'attributeValueNames'";
    __int16 v127 = 259;
    mlir::OpState::emitOpError(this, &v125, (uint64_t)v131);
    uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v131);
    if (v131[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v131);
    }
    if (v140)
    {
      __int16 v16 = (void **)__p;
      if (__p)
      {
        uint64_t v17 = v139;
        uint64_t v18 = __p;
        if (v139 != __p)
        {
          do
            uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          uint64_t v18 = __p;
        }
        uint64_t v139 = v16;
        operator delete(v18);
      }
      unsigned int v19 = v136;
      if (v136)
      {
        uint64_t v20 = v137;
        BOOL v21 = v136;
        if (v137 != v136)
        {
          do
          {
            long long v23 = (void *)*--v20;
            uint64_t v22 = v23;
            *uint64_t v20 = 0;
            if (v23) {
              operator delete[](v22);
            }
          }
          while (v20 != v19);
          BOOL v21 = v136;
        }
        uint64_t v137 = v19;
        operator delete(v21);
      }
      if (v132 != v135) {
        free(v132);
      }
    }
  }
  return v15;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps7(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void **)(*(void *)a2 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v54[0] = a2;
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v54) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
      return 1;
    }
  }
  __int16 v50 = 261;
  v49[0] = a3;
  v49[1] = a4;
  mlir::Operation::emitOpError(a1, v49, (uint64_t)v54);
  if (v54[0])
  {
    int v51 = 3;
    char v52 = " #";
    uint64_t v53 = 2;
    uint64_t v11 = &v51;
    uint64_t v12 = (char *)v55;
    if (v56 >= v57)
    {
      unint64_t v39 = v56 + 1;
      if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
      {
        int64_t v45 = (char *)&v51 - (unsigned char *)v55;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        uint64_t v12 = (char *)v55;
        uint64_t v11 = (int *)((char *)v55 + v45);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        uint64_t v11 = &v51;
        uint64_t v12 = (char *)v55;
      }
    }
    uint64_t v13 = &v12[24 * v56];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = *((void *)v11 + 2);
    *(_OWORD *)uint64_t v13 = v14;
    uint64_t v15 = ++v56;
    if (v54[0])
    {
      int v51 = 5;
      char v52 = (const char *)a5;
      __int16 v16 = &v51;
      uint64_t v17 = (char *)v55;
      if (v15 >= v57)
      {
        unint64_t v40 = v15 + 1;
        BOOL v41 = (char *)v55 + 24 * v15 > (char *)&v51;
        if (v55 <= &v51 && v41)
        {
          int64_t v46 = (char *)&v51 - (unsigned char *)v55;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          uint64_t v17 = (char *)v55;
          __int16 v16 = (int *)((char *)v55 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          __int16 v16 = &v51;
          uint64_t v17 = (char *)v55;
        }
      }
      uint64_t v18 = &v17[24 * v56];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      uint64_t v20 = ++v56;
      if (v54[0])
      {
        int v51 = 3;
        uint64_t v53 = 89;
        BOOL v21 = &v51;
        uint64_t v22 = (char *)v55;
        if (v20 >= v57)
        {
          unint64_t v42 = v20 + 1;
          BOOL v43 = (char *)v55 + 24 * v20 > (char *)&v51;
          if (v55 <= &v51 && v43)
          {
            int64_t v47 = (char *)&v51 - (unsigned char *)v55;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            uint64_t v22 = (char *)v55;
            BOOL v21 = (int *)((char *)v55 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            BOOL v21 = &v51;
            uint64_t v22 = (char *)v55;
          }
        }
        long long v23 = &v22[24 * v56];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)long long v23 = v24;
        ++v56;
        if (v54[0])
        {
          uint64_t v25 = &v51;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v51, a2);
          int v26 = (char *)v55;
          if (v56 >= v57)
          {
            unint64_t v44 = v56 + 1;
            if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
            {
              int64_t v48 = (char *)&v51 - (unsigned char *)v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              int v26 = (char *)v55;
              uint64_t v25 = (int *)((char *)v55 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              uint64_t v25 = &v51;
              int v26 = (char *)v55;
            }
          }
          uint64_t v27 = &v26[24 * v56];
          long long v28 = *(_OWORD *)v25;
          *((void *)v27 + 2) = *((void *)v25 + 2);
          *(_OWORD *)uint64_t v27 = v28;
          ++v56;
        }
      }
    }
  }
  uint64_t v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
  if (v54[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
  }
  if (v63)
  {
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v62;
      unint64_t v32 = __p;
      if (v62 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      unint64_t v62 = v30;
      operator delete(v32);
    }
    int64_t v33 = v59;
    if (v59)
    {
      int64_t v34 = v60;
      uint64_t v35 = v59;
      if (v60 != v59)
      {
        do
        {
          long long v37 = (void *)*--v34;
          unint64_t v36 = v37;
          *int64_t v34 = 0;
          if (v37) {
            operator delete[](v36);
          }
        }
        while (v34 != v33);
        uint64_t v35 = v59;
      }
      unint64_t v60 = v33;
      operator delete(v35);
    }
    if (v55 != v58) {
      free(v55);
    }
  }
  return v29;
}

BOOL mlir::pdl::OperationOp::parse(uint64_t a1, uint64_t a2)
{
  v54[4] = *MEMORY[0x1E4F143B8];
  uint64_t v37 = 0;
  char v49 = v51;
  uint64_t v50 = 0x400000000;
  v47[0] = &v48;
  v47[1] = (void *)0x100000000;
  unint64_t v44 = v46;
  uint64_t v45 = 0x400000000;
  BOOL v41 = v43;
  uint64_t v42 = 0x400000000;
  v39[0] = &v40;
  v39[1] = (void *)0x100000000;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  unsigned __int16 v7 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 440))(a1, &v37, v6);
  if (v7 >= 0x100u)
  {
    if (!(_BYTE)v7) {
      goto LABEL_18;
    }
    if (v37)
    {
      uint64_t v8 = mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>((void *)a2);
      *(void *)(v8 + 8) = v37;
    }
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 272))(a1))
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v49, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v47)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
    {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v36 = v9;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  char v52 = v54;
  uint64_t v53 = 0x400000000;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 80))(a1)
    || (v38[0] = a1,
        v38[1] = &v52,
        v38[2] = &v44,
        (*(unsigned __int8 (**)(uint64_t, void, uint64_t (*)(uint64_t *), void *, void, void))(*(void *)a1 + 360))(a1, 0, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseOperationOpAttributes(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::ArrayAttr &)::$_0>, v38, 0, 0))&& (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 88))(a1))
  {
    uint64_t ArrayAttr = mlir::Builder::getArrayAttr(v10, (uint64_t)v52, v53);
    char v12 = 0;
    uint64_t v13 = v52;
    if (v52 == v54) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t ArrayAttr = 0;
  char v12 = 1;
  uint64_t v13 = v52;
  if (v52 != v54) {
LABEL_16:
  }
    free(v13);
LABEL_17:
  if (v12) {
    goto LABEL_18;
  }
  *(void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>((void *)a2) = ArrayAttr;
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
      goto LABEL_18;
    }
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v41, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v39)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
    {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  v38[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    goto LABEL_18;
  }
  uint64_t v18 = *(void *)(a2 + 8);
  char v52 = (void *)a1;
  uint64_t v53 = (uint64_t)v38;
  v54[0] = a2;
  uint64_t v19 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v18 + 96));
  if (v19)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v19, (const void **)"attributeValueNames", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::OperationOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v52))goto LABEL_18; {
  }
    }
  uint64_t v20 = mlir::NamedAttrList::get(a2 + 112, *(void *)(*(void *)(v18 + 96) + 8));
  if (v20)
  {
    if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v20, (const void **)"opName", (const char *)6, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::OperationOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v52))goto LABEL_18; {
  }
    }
  uint64_t v35 = v17;
  int v21 = v50;
  int v22 = v45;
  int v23 = v42;
  long long v24 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>((void *)a2);
  void v24[4] = v21;
  void v24[5] = v22;
  void v24[6] = v23;
  uint64_t v25 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v25);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  long long v28 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v29 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v28);
  uint64_t v30 = mlir::StorageUniquer::getSingletonImpl(v29, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id);
  uint64_t v31 = *(unsigned int *)(a2 + 72);
  if (v31 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v31 + 1, 8);
    LODWORD(v31) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v31) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  uint64_t v32 = a2 + 16;
  if (!mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v49, (uint64_t)v47, v36, v32))
  {
LABEL_18:
    BOOL v14 = 0;
    uint64_t v15 = v39[0];
    if (v39[0] == &v40) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v45)
  {
    int64_t v33 = (char *)v44;
    uint64_t v34 = 32 * v45;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v33, v30, v32))
    {
      v33 += 32;
      v34 -= 32;
      if (!v34) {
        goto LABEL_51;
      }
    }
    goto LABEL_18;
  }
LABEL_51:
  BOOL v14 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v41, (uint64_t)v39, v35, v32) != 0;
  uint64_t v15 = v39[0];
  if (v39[0] != &v40) {
LABEL_19:
  }
    free(v15);
LABEL_20:
  if (v41 != v43) {
    free(v41);
  }
  if (v44 != v46) {
    free(v44);
  }
  if (v47[0] != &v48) {
    free(v47[0]);
  }
  if (v49 != v51) {
    free(v49);
  }
  return v14;
}

void mlir::pdl::OperationOp::print(mlir::pdl::OperationOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v3 = this;
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)this;
  unint64_t v5 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v6 = (v5 >> 23) & 1;
  uint64_t v7 = *(void *)this + 16 * v6 + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v7 = 0;
  }
  if (*(void *)(v7 + 8))
  {
    uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
    if ((unint64_t)v9 >= *((void *)v8 + 3))
    {
      llvm::raw_ostream::write(v8, 32);
    }
    else
    {
      *((void *)v8 + 4) = v9 + 1;
      *uint64_t v9 = 32;
    }
    unint64_t v10 = *(void *)v3 + 16 * (((unint64_t)*(unsigned int *)(*(void *)v3 + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
      unint64_t v10 = 0;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(v10 + 8));
    uint64_t v4 = *(void *)v3;
    unint64_t v5 = *(unsigned int *)(*(void *)v3 + 44);
    uint64_t v6 = (v5 >> 23) & 1;
  }
  uint64_t v11 = v4 + 16 * v6 + 64;
  if (!BYTE3(v5)) {
    uint64_t v11 = 0;
  }
  if (*(_DWORD *)(v11 + 16))
  {
    char v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if (*((unsigned char **)v12 + 3) == v13)
    {
      llvm::raw_ostream::write(v12, "(", 1uLL);
    }
    else
    {
      *uint64_t v13 = 40;
      ++*((void *)v12 + 4);
    }
    unint64_t v14 = *(unsigned int *)(*(void *)v3 + 44);
    uint64_t v15 = *(void *)v3 + 16 * ((v14 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(unsigned int *)(v15 + 16);
    if ((v14 & 0x800000) != 0) {
      uint64_t v17 = *(void *)(*(void *)v3 + 72);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v102 = ", ";
    uint64_t v103 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v17, 0, v17, v16, (uint64_t)a2, v18, (uint64_t)&v102);
    uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v20 = (unsigned char *)*((void *)v19 + 4);
    if ((unint64_t)v20 >= *((void *)v19 + 3))
    {
      llvm::raw_ostream::write(v19, 32);
    }
    else
    {
      *((void *)v19 + 4) = v20 + 1;
      *uint64_t v20 = 32;
    }
    int v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int v22 = (unsigned char *)*((void *)v21 + 4);
    if (*((unsigned char **)v21 + 3) == v22)
    {
      llvm::raw_ostream::write(v21, ":", 1uLL);
    }
    else
    {
      *int v22 = 58;
      ++*((void *)v21 + 4);
    }
    int v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v24 = (unsigned char *)*((void *)v23 + 4);
    if ((unint64_t)v24 >= *((void *)v23 + 3))
    {
      llvm::raw_ostream::write(v23, 32);
    }
    else
    {
      *((void *)v23 + 4) = v24 + 1;
      *long long v24 = 32;
    }
    unint64_t v25 = *(unsigned int *)(*(void *)v3 + 44);
    uint64_t v26 = *(void *)v3 + 16 * ((v25 >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
      uint64_t v26 = 0;
    }
    uint64_t v27 = *(unsigned int *)(v26 + 16);
    if ((v25 & 0x800000) != 0) {
      uint64_t v28 = *(void *)(*(void *)v3 + 72);
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v98 = v28;
    uint64_t v99 = v27;
    mlir::OperandRange::getTypes(&v98, (uint64_t *)&v102);
    unint64_t AttrDictionary = ", ";
    uint64_t v101 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v102, v103, (uint64_t)v104, v105, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
    uint64_t v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v30 = (unsigned char *)*((void *)v29 + 4);
    if (*((unsigned char **)v29 + 3) == v30)
    {
      llvm::raw_ostream::write(v29, ")", 1uLL);
    }
    else
    {
      *uint64_t v30 = 41;
      ++*((void *)v29 + 4);
    }
  }
  uint64_t v31 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v32 = (unsigned char *)*((void *)v31 + 4);
  if ((unint64_t)v32 >= *((void *)v31 + 3))
  {
    llvm::raw_ostream::write(v31, 32);
  }
  else
  {
    *((void *)v31 + 4) = v32 + 1;
    *uint64_t v32 = 32;
  }
  unint64_t v33 = *(unsigned int *)(*(void *)v3 + 44);
  uint64_t v34 = (void **)(*(void *)v3 + 16 * ((v33 >> 23) & 1) + 64);
  if (HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
    uint64_t v35 = *(void *)v3 + 16 * ((v33 >> 23) & 1) + 64;
  }
  else {
    uint64_t v35 = 0;
  }
  if ((v33 & 0x800000) != 0)
  {
    uint64_t v36 = *(void *)(*(void *)v3 + 72);
    uint64_t v37 = *(unsigned int *)(v35 + 16);
    uint64_t v102 = *v34;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
    if (!v38) {
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v37 = *(unsigned int *)(v35 + 16);
    uint64_t v102 = *v34;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
    if (!v96) {
      goto LABEL_57;
    }
  }
  unint64_t v39 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v40 = (_WORD *)*((void *)v39 + 4);
  uint64_t v97 = v3;
  if (*((void *)v39 + 3) - (void)v40 <= 1uLL)
  {
    llvm::raw_ostream::write(v39, " {", 2uLL);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
    uint64_t v42 = v41 << 32;
    if (!(v41 << 32)) {
      goto LABEL_53;
    }
LABEL_49:
    int v43 = v41;
    uint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 40))(a2, *Value);
    uint64_t v45 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v46 = *((void *)v45 + 4);
    if ((unint64_t)(*((void *)v45 + 3) - v46) > 2)
    {
      *(unsigned char *)(v46 + 2) = 32;
      *(_WORD *)uint64_t v46 = 15648;
      *((void *)v45 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v45, " = ", 3uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(v36 + 32 * v37 + 24));
    if (v42 != 0x100000000)
    {
      uint64_t v88 = v36 + 32 * v37;
      uint64_t v89 = 1;
      uint64_t v90 = 0x100000000;
      do
      {
        long long v91 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        uint64_t v92 = (_WORD *)*((void *)v91 + 4);
        if (*((void *)v91 + 3) - (void)v92 > 1uLL)
        {
          _WORD *v92 = 8236;
          *((void *)v91 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v91, ", ", 2uLL);
        }
        uint64_t v93 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
        (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 40))(a2, *(void *)(v93 + 8 * v89));
        unsigned int v94 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        uint64_t v95 = *((void *)v94 + 4);
        if ((unint64_t)(*((void *)v94 + 3) - v95) > 2)
        {
          *(unsigned char *)(v95 + 2) = 32;
          *(_WORD *)uint64_t v95 = 15648;
          *((void *)v94 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v94, " = ", 3uLL);
        }
        (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(v88 + (v90 >> 27) + 24));
        ++v89;
        v90 += 0x100000000;
      }
      while (v43 != v89);
    }
    goto LABEL_53;
  }
  *uint64_t v40 = 31520;
  *((void *)v39 + 4) += 2;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
  uint64_t v42 = v41 << 32;
  if (v41 << 32) {
    goto LABEL_49;
  }
LABEL_53:
  int64_t v47 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v48 = (unsigned char *)*((void *)v47 + 4);
  if ((unint64_t)v48 >= *((void *)v47 + 3))
  {
    llvm::raw_ostream::write(v47, 125);
  }
  else
  {
    *((void *)v47 + 4) = v48 + 1;
    unsigned char *v48 = 125;
  }
  uint64_t v3 = v97;
LABEL_57:
  unint64_t v49 = *(void *)v3 + 16 * (((unint64_t)*(unsigned int *)(*(void *)v3 + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
    unint64_t v49 = 0;
  }
  if (*(_DWORD *)(v49 + 24))
  {
    uint64_t v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int v51 = (unsigned char *)*((void *)v50 + 4);
    if ((unint64_t)v51 >= *((void *)v50 + 3))
    {
      llvm::raw_ostream::write(v50, 32);
    }
    else
    {
      *((void *)v50 + 4) = v51 + 1;
      *int v51 = 32;
    }
    char v52 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v53 = (_WORD *)*((void *)v52 + 4);
    if (*((void *)v52 + 3) - (void)v53 > 1uLL)
    {
      *uint64_t v53 = 15917;
      *((void *)v52 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v52, "->", 2uLL);
    }
    int64_t v54 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v55 = (unsigned char *)*((void *)v54 + 4);
    if ((unint64_t)v55 >= *((void *)v54 + 3))
    {
      llvm::raw_ostream::write(v54, 32);
    }
    else
    {
      *((void *)v54 + 4) = v55 + 1;
      unsigned char *v55 = 32;
    }
    unsigned int v56 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unsigned int v57 = (unsigned char *)*((void *)v56 + 4);
    if (*((unsigned char **)v56 + 3) == v57)
    {
      llvm::raw_ostream::write(v56, "(", 1uLL);
    }
    else
    {
      *unsigned int v57 = 40;
      ++*((void *)v56 + 4);
    }
    unint64_t v58 = *(unsigned int *)(*(void *)v3 + 44);
    if (HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
      unint64_t v59 = (_DWORD *)(*(void *)v3 + 16 * ((v58 >> 23) & 1) + 64);
    }
    else {
      unint64_t v59 = 0;
    }
    int v60 = v59[4];
    int v61 = v59[5];
    int v62 = v59[6];
    if ((v58 & 0x800000) != 0) {
      uint64_t v63 = *(void *)(*(void *)v3 + 72);
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t v64 = (v61 + v60);
    uint64_t v65 = v63 + 32 * v64;
    uint64_t v66 = (v62 + v64) - v64;
    int64_t v67 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v102 = ", ";
    uint64_t v103 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v65, 0, v65, v66, (uint64_t)a2, v67, (uint64_t)&v102);
    int64_t v68 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int64_t v69 = (unsigned char *)*((void *)v68 + 4);
    if ((unint64_t)v69 >= *((void *)v68 + 3))
    {
      llvm::raw_ostream::write(v68, 32);
    }
    else
    {
      *((void *)v68 + 4) = v69 + 1;
      *int64_t v69 = 32;
    }
    int64_t v70 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int64_t v71 = (unsigned char *)*((void *)v70 + 4);
    if (*((unsigned char **)v70 + 3) == v71)
    {
      llvm::raw_ostream::write(v70, ":", 1uLL);
    }
    else
    {
      *int64_t v71 = 58;
      ++*((void *)v70 + 4);
    }
    unint64_t v72 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int64_t v73 = (unsigned char *)*((void *)v72 + 4);
    if ((unint64_t)v73 >= *((void *)v72 + 3))
    {
      llvm::raw_ostream::write(v72, 32);
    }
    else
    {
      *((void *)v72 + 4) = v73 + 1;
      unsigned char *v73 = 32;
    }
    unint64_t v74 = *(unsigned int *)(*(void *)v3 + 44);
    if (HIBYTE(*(_DWORD *)(*(void *)v3 + 44))) {
      uint64_t v75 = (_DWORD *)(*(void *)v3 + 16 * ((v74 >> 23) & 1) + 64);
    }
    else {
      uint64_t v75 = 0;
    }
    int v76 = v75[4];
    int v77 = v75[5];
    int v78 = v75[6];
    if ((v74 & 0x800000) != 0) {
      uint64_t v79 = *(void *)(*(void *)v3 + 72);
    }
    else {
      uint64_t v79 = 0;
    }
    uint64_t v80 = (v77 + v76);
    uint64_t v98 = v79 + 32 * v80;
    uint64_t v99 = (v78 + v80) - v80;
    mlir::OperandRange::getTypes(&v98, (uint64_t *)&v102);
    unint64_t AttrDictionary = ", ";
    uint64_t v101 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v102, v103, (uint64_t)v104, v105, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
    int64_t v81 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int64_t v82 = (unsigned char *)*((void *)v81 + 4);
    if (*((unsigned char **)v81 + 3) == v82)
    {
      llvm::raw_ostream::write(v81, ")", 1uLL);
    }
    else
    {
      unsigned char *v82 = 41;
      ++*((void *)v81 + 4);
    }
  }
  uint64_t v102 = &v104;
  BOOL v104 = "operandSegmentSizes";
  uint64_t v105 = 19;
  BOOL v106 = "opName";
  uint64_t v107 = 6;
  uint64_t v103 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, 3uLL, 16);
  int64_t v83 = (char *)v102 + 16 * v103;
  *int64_t v83 = "attributeValueNames";
  v83[1] = 19;
  LODWORD(v103) = v103 + 1;
  int64_t v84 = *(mlir::Operation **)v3;
  if (*(unsigned char *)(*(void *)v3 + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v84);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v84 + 56);
  }
  uint64_t v86 = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, v86, v87, v102, v103);
  if (v102 != &v104) {
    free(v102);
  }
}

uint64_t mlir::pdl::PatternOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v75 = v6;
  if (!v6)
  {
    a3(v79, a4);
    if (v79[0])
    {
      int v76 = 3;
      int v77 = "expected DictionaryAttr to set properties";
      uint64_t v78 = 41;
      uint64_t v26 = &v76;
      uint64_t v27 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v63 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v69 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          uint64_t v27 = (char *)v80;
          uint64_t v26 = (int *)((char *)v80 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          uint64_t v26 = &v76;
          uint64_t v27 = (char *)v80;
        }
      }
      uint64_t v28 = &v27[24 * v81];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v87;
      uint64_t v32 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      uint64_t v87 = v30;
      operator delete(v32);
    }
    int v21 = v84;
    if (!v84) {
      goto LABEL_79;
    }
    unint64_t v33 = v85;
    int v23 = v84;
    if (v85 == v84) {
      goto LABEL_78;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *unint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_77;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v75, "benefit", 7uLL);
  if (!v8)
  {
    a3(v79, a4);
    if (v79[0])
    {
      int v76 = 3;
      int v77 = "expected key entry for benefit in DictionaryAttr to set Properties.";
      uint64_t v78 = 67;
      uint64_t v36 = &v76;
      uint64_t v37 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v65 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v71 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
          uint64_t v37 = (char *)v80;
          uint64_t v36 = (int *)((char *)v80 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
          uint64_t v36 = &v76;
          uint64_t v37 = (char *)v80;
        }
      }
      uint64_t v38 = &v37[24 * v81];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88) {
      return 0;
    }
    uint64_t v40 = (void **)__p;
    if (__p)
    {
      uint64_t v41 = v87;
      uint64_t v42 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      uint64_t v87 = v40;
      operator delete(v42);
    }
    int v21 = v84;
    if (!v84) {
      goto LABEL_79;
    }
    int v43 = v85;
    int v23 = v84;
    if (v85 == v84) {
      goto LABEL_78;
    }
    do
    {
      uint64_t v45 = (void *)*--v43;
      unint64_t v44 = v45;
      void *v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_77;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a3(v79, a4);
    if (v79[0])
    {
      int v76 = 3;
      uint64_t v78 = 52;
      unint64_t v10 = &v76;
      uint64_t v11 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v64 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v70 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
          uint64_t v11 = (char *)v80;
          unint64_t v10 = (int *)((char *)v80 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
          unint64_t v10 = &v76;
          uint64_t v11 = (char *)v80;
        }
      }
      char v12 = &v11[24 * v81];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)char v12 = v13;
      ++v81;
      if (v79[0])
      {
        unint64_t v14 = &v76;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v9);
        uint64_t v15 = (char *)v80;
        if (v81 >= v82)
        {
          unint64_t v66 = v81 + 1;
          if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
          {
            int64_t v72 = (char *)&v76 - (unsigned char *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
            uint64_t v15 = (char *)v80;
            unint64_t v14 = (int *)((char *)v80 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
            unint64_t v14 = &v76;
            uint64_t v15 = (char *)v80;
          }
        }
        uint64_t v16 = &v15[24 * v81];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v81;
        if (v79[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
        }
      }
    }
    if (!v88) {
      return 0;
    }
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v87;
      uint64_t v20 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v87 = v18;
      operator delete(v20);
    }
    int v21 = v84;
    if (!v84) {
      goto LABEL_79;
    }
    int v22 = v85;
    int v23 = v84;
    if (v85 == v84) {
      goto LABEL_78;
    }
    do
    {
      unint64_t v25 = (void *)*--v22;
      long long v24 = v25;
      *int v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
    goto LABEL_77;
  }
  *a1 = v8;
  uint64_t v46 = mlir::DictionaryAttr::get((uint64_t)&v75, "sym_name", 8uLL);
  if (!v46) {
    return 1;
  }
  uint64_t v47 = v46;
  if (*(_UNKNOWN **)(*(void *)v46 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a1[1] = v46;
    return 1;
  }
  a3(v79, a4);
  if (v79[0])
  {
    int v76 = 3;
    uint64_t v78 = 53;
    uint64_t v48 = &v76;
    unint64_t v49 = (char *)v80;
    if (v81 >= v82)
    {
      unint64_t v67 = v81 + 1;
      if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
      {
        int64_t v73 = (char *)&v76 - (unsigned char *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
        unint64_t v49 = (char *)v80;
        uint64_t v48 = (int *)((char *)v80 + v73);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
        uint64_t v48 = &v76;
        unint64_t v49 = (char *)v80;
      }
    }
    uint64_t v50 = &v49[24 * v81];
    long long v51 = *(_OWORD *)v48;
    *((void *)v50 + 2) = *((void *)v48 + 2);
    *(_OWORD *)uint64_t v50 = v51;
    ++v81;
    if (v79[0])
    {
      char v52 = &v76;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v47);
      uint64_t v53 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v68 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          int64_t v74 = (char *)&v76 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          uint64_t v53 = (char *)v80;
          char v52 = (int *)((char *)v80 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          char v52 = &v76;
          uint64_t v53 = (char *)v80;
        }
      }
      int64_t v54 = &v53[24 * v81];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = *((void *)v52 + 2);
      *(_OWORD *)int64_t v54 = v55;
      ++v81;
      if (v79[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
  }
  if (v88)
  {
    unsigned int v56 = (void **)__p;
    if (__p)
    {
      unsigned int v57 = v87;
      unint64_t v58 = __p;
      if (v87 != __p)
      {
        do
          unsigned int v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        unint64_t v58 = __p;
      }
      uint64_t v87 = v56;
      operator delete(v58);
    }
    int v21 = v84;
    if (!v84) {
      goto LABEL_79;
    }
    unint64_t v59 = v85;
    int v23 = v84;
    if (v85 == v84)
    {
LABEL_78:
      int64_t v85 = v21;
      operator delete(v23);
LABEL_79:
      if (v80 != v83) {
        free(v80);
      }
      return 0;
    }
    do
    {
      int v61 = (void *)*--v59;
      int v60 = v61;
      *unint64_t v59 = 0;
      if (v61) {
        operator delete[](v60);
      }
    }
    while (v59 != v21);
LABEL_77:
    int v23 = v84;
    goto LABEL_78;
  }
  return 0;
}

uint64_t mlir::pdl::PatternOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v21[6] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a1;
  uint64_t v19 = v21;
  uint64_t v20 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"benefit", 7, *a2);
    uint64_t v5 = v4;
    unsigned int v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      unsigned int v6 = v20;
    }
    uint64_t v7 = (uint64_t *)((char *)v19 + 16 * v6);
    *uint64_t v7 = NamedAttr;
    v7[1] = v5;
    unsigned int v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    uint64_t v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      unint64_t v10 = (uint64_t *)v19;
      if (v8) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t DictionaryAttr = 0;
      if (v10 == v21) {
        return DictionaryAttr;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"sym_name", 8, v9);
  uint64_t v15 = v14;
  unsigned int v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    unsigned int v16 = v20;
  }
  long long v17 = (uint64_t *)((char *)v19 + 16 * v16);
  uint64_t *v17 = v13;
  v17[1] = v15;
  unsigned int v8 = v20 + 1;
  LODWORD(v20) = v8;
  unint64_t v10 = (uint64_t *)v19;
  if (!v8) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  unint64_t v10 = (uint64_t *)v19;
  if (v19 != v21) {
LABEL_7:
  }
    free(v10);
  return DictionaryAttr;
}

BOOL mlir::pdl::PatternOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(v8, (const void **)"benefit", (const char *)7, (void (*)(void **__return_ptr, uint64_t))a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v9, (const void **)"sym_name", (const char *)8, a3, a4))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(uint64_t a1, const void **a2, const char *a3, void (*a4)(void **__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    goto LABEL_11;
  }
  uint64_t v36 = a1;
  uint64_t Value = (const void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&Value, 16)) {
    goto LABEL_11;
  }
  uint64_t v35 = a1;
  mlir::IntegerAttr::getValue(&v35, (llvm::APInt *)&__p);
  unsigned int v10 = v42[0] - 1;
  if (v42[0] >= 0x41) {
    p_p = (void **)((char *)__p + 8 * (v10 >> 6));
  }
  else {
    p_p = &__p;
  }
  uint64_t v12 = (1 << v10) & (unint64_t)*p_p;
  if (v42[0] >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (!v12) {
    return 1;
  }
LABEL_11:
  a4(&__p, a5);
  if (__p)
  {
    LODWORD(Value) = 3;
    uint64_t v38 = "attribute '";
    uint64_t v39 = 11;
    uint64_t p_Value = &Value;
    uint64_t v14 = (char *)v43;
    if (v44 >= v45)
    {
      unint64_t v31 = v44 + 1;
      if (v43 <= &Value && (char *)v43 + 24 * v44 > (char *)&Value)
      {
        int64_t v33 = (char *)&Value - (unsigned char *)v43;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
        uint64_t v14 = (char *)v43;
        uint64_t p_Value = (const void ***)((char *)v43 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
        uint64_t p_Value = &Value;
        uint64_t v14 = (char *)v43;
      }
    }
    uint64_t v15 = &v14[24 * v44];
    long long v16 = *(_OWORD *)p_Value;
    *((void *)v15 + 2) = p_Value[2];
    *(_OWORD *)uint64_t v15 = v16;
    ++v44;
    if (__p)
    {
      __int16 v40 = 261;
      uint64_t Value = a2;
      uint64_t v38 = a3;
      mlir::Diagnostic::operator<<((uint64_t)v42, &Value);
      if (__p)
      {
        LODWORD(Value) = 3;
        uint64_t v38 = "' failed to satisfy constraint: 16-bit signless integer attribute whose value is non-negative";
        uint64_t v39 = 93;
        long long v17 = &Value;
        uint64_t v18 = (char *)v43;
        if (v44 >= v45)
        {
          unint64_t v32 = v44 + 1;
          if (v43 <= &Value && (char *)v43 + 24 * v44 > (char *)&Value)
          {
            int64_t v34 = (char *)&Value - (unsigned char *)v43;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
            uint64_t v18 = (char *)v43;
            long long v17 = (const void ***)((char *)v43 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
            long long v17 = &Value;
            uint64_t v18 = (char *)v43;
          }
        }
        uint64_t v19 = &v18[24 * v44];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = v17[2];
        *(_OWORD *)uint64_t v19 = v20;
        ++v44;
      }
    }
  }
  uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  }
  if (v51)
  {
    int v22 = (void **)v49;
    if (v49)
    {
      int v23 = v50;
      long long v24 = v49;
      if (v50 != v49)
      {
        do
          int v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        long long v24 = v49;
      }
      uint64_t v50 = v22;
      operator delete(v24);
    }
    unint64_t v25 = v47;
    if (v47)
    {
      uint64_t v26 = v48;
      uint64_t v27 = v47;
      if (v48 != v47)
      {
        do
        {
          long long v29 = (void *)*--v26;
          uint64_t v28 = v29;
          *uint64_t v26 = 0;
          if (v29) {
            operator delete[](v28);
          }
        }
        while (v26 != v25);
        uint64_t v27 = v47;
      }
      uint64_t v48 = v25;
      operator delete(v27);
    }
    if (v43 != v46) {
      free(v43);
    }
  }
  return v21;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0x10uLL);
    void *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &unk_1E8EBA000;
    {
      uint64_t v4 = (void *)&unk_1E8EBA000;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 108;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = (void *)&unk_1E8EBA000;
      }
    }
    a1[33] = v4[325];
    return a1[32];
  }
  return result;
}

BOOL mlir::pdl::PatternOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = v3[1];
    uint64_t v50 = v2;
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(v4, (const void **)"benefit", (const char *)7, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v50))return 0; {
    uint64_t v50 = *this;
    }
    if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v5, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v50))return 0; {
    unint64_t v6 = *this;
    }
    unint64_t v7 = (((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
         + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)*this + 10);
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8 != v7 && *(void *)(v8 + 8) == v7) {
      return 1;
    }
    v45[0] = (const void **)"region #";
    __int16 v46 = 259;
    mlir::Operation::emitOpError(v6, v45, (uint64_t)&v50);
    if (v50)
    {
      LODWORD(v43[0]) = 5;
      v43[1] = 0;
      unint64_t v9 = v43;
      uint64_t v10 = (char *)v52;
      if (v53 >= v54)
      {
        unint64_t v37 = v53 + 1;
        if (v52 <= v43 && (char *)v52 + 24 * v53 > (char *)v43)
        {
          int64_t v39 = (char *)v43 - (unsigned char *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
          uint64_t v10 = (char *)v52;
          unint64_t v9 = (const void ***)((char *)v52 + v39);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
          unint64_t v9 = v43;
          uint64_t v10 = (char *)v52;
        }
      }
      unint64_t v11 = &v10[24 * v53];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = v9[2];
      *(_OWORD *)unint64_t v11 = v12;
      ++v53;
      BOOL v13 = v50 == 0;
    }
    else
    {
      BOOL v13 = 1;
    }
    __int16 v42 = 1283;
    v41[0] = " ('";
    v41[2] = "bodyRegion";
    v41[3] = 10;
    v43[0] = (const void **)v41;
    v43[2] = (const void **)"') ";
    __int16 v44 = 770;
    if (!v13)
    {
      mlir::Diagnostic::operator<<((uint64_t)&v51, v43);
      if (v50)
      {
        int v47 = 3;
        uint64_t v48 = "failed to verify constraint: region with 1 blocks";
        uint64_t v49 = 49;
        int v23 = &v47;
        long long v24 = (char *)v52;
        if (v53 >= v54)
        {
          unint64_t v38 = v53 + 1;
          if (v52 <= &v47 && (char *)v52 + 24 * v53 > (char *)&v47)
          {
            int64_t v40 = (char *)&v47 - (unsigned char *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
            long long v24 = (char *)v52;
            int v23 = (int *)((char *)v52 + v40);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
            int v23 = &v47;
            long long v24 = (char *)v52;
          }
        }
        unint64_t v25 = &v24[24 * v53];
        long long v26 = *(_OWORD *)v23;
        *((void *)v25 + 2) = *((void *)v23 + 2);
        *(_OWORD *)unint64_t v25 = v26;
        ++v53;
      }
    }
    char v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v50);
    if (v50) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v50);
    }
    if (v60)
    {
      uint64_t v28 = (void **)__p;
      if (__p)
      {
        long long v29 = v59;
        uint64_t v30 = __p;
        if (v59 != __p)
        {
          do
            long long v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          uint64_t v30 = __p;
        }
        unint64_t v59 = v28;
        operator delete(v30);
      }
      unint64_t v31 = v56;
      if (v56)
      {
        unint64_t v32 = v57;
        int64_t v33 = v56;
        if (v57 != v56)
        {
          do
          {
            uint64_t v35 = (void *)*--v32;
            int64_t v34 = v35;
            *unint64_t v32 = 0;
            if (v35) {
              operator delete[](v34);
            }
          }
          while (v32 != v31);
          int64_t v33 = v56;
        }
        unsigned int v57 = v31;
        operator delete(v33);
      }
      if (v52 != v55) {
        free(v52);
      }
    }
    return v27 != 0;
  }
  else
  {
    v45[0] = (const void **)"requires attribute 'benefit'";
    __int16 v46 = 259;
    mlir::OpState::emitOpError(this, v45, (uint64_t)&v50);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v50);
    if (v50) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v50);
    }
    if (v60)
    {
      uint64_t v15 = (void **)__p;
      if (__p)
      {
        long long v16 = v59;
        long long v17 = __p;
        if (v59 != __p)
        {
          do
            long long v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          long long v17 = __p;
        }
        unint64_t v59 = v15;
        operator delete(v17);
      }
      uint64_t v18 = v56;
      if (v56)
      {
        uint64_t v19 = v57;
        long long v20 = v56;
        if (v57 != v56)
        {
          do
          {
            int v22 = (void *)*--v19;
            uint64_t v21 = v22;
            *uint64_t v19 = 0;
            if (v22) {
              operator delete[](v21);
            }
          }
          while (v19 != v18);
          long long v20 = v56;
        }
        unsigned int v57 = v18;
        operator delete(v20);
      }
      if (v52 != v55) {
        free(v52);
      }
    }
  }
  return v14;
}

uint64_t mlir::pdl::PatternOp::parse(uint64_t a1, void *a2)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v4 = (mlir::Region *)operator new(0x18uLL);
  *(void *)uint64_t v4 = v4;
  *((void *)v4 + 1) = v4;
  *((void *)v4 + 2) = 0;
  uint64_t v14 = v4;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 496))(a1, &v16);
  if (v16)
  {
    uint64_t v5 = mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(a2);
    *(void *)(v5 + 8) = v16;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    goto LABEL_17;
  }
  __int16 v18 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "benefit", 7, v17))goto LABEL_17; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1))
  }
    goto LABEL_17;
  unint64_t v6 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IntegerType = mlir::Builder::getIntegerType(v6, 0x10u);
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, &v15, IntegerType)) {
    goto LABEL_17;
  }
  if (v15)
  {
    uint64_t v8 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(a2);
    void *v8 = v15;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1)
    || (uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 464))(a1, a2 + 14))
    || (uint64_t v9 = a2[1],
        v17[0] = a1,
        v17[1] = &v13,
        unint64_t v17[2] = a2,
        !mlir::pdl::PatternOp::verifyInherentAttrs(v9, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::PatternOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v17))|| !(*(unsigned __int8 (**)(uint64_t, mlir::Region *, void, void, void))(*(void *)a1 + 744))(a1, v4, 0, 0, 0))
  {
LABEL_17:
    uint64_t v10 = 0;
    uint64_t v14 = 0;
LABEL_18:
    mlir::Region::~Region(v4);
    operator delete(v11);
    return v10;
  }
  if (*(mlir::Region **)v4 == v4) {
    mlir::Region::emplaceBlock(v4);
  }
  mlir::OperationState::addRegion((uint64_t)a2, (unint64_t)&v14);
  uint64_t v4 = v14;
  uint64_t v14 = 0;
  uint64_t v10 = 1;
  if (v4) {
    goto LABEL_18;
  }
  return v10;
}

void mlir::pdl::PatternOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v34[4] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v4 = 0;
  }
  if (*(void *)(v4 + 8))
  {
    uint64_t v5 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v6 = (unsigned char *)*((void *)v5 + 4);
    if ((unint64_t)v6 >= *((void *)v5 + 3))
    {
      llvm::raw_ostream::write(v5, 32);
    }
    else
    {
      *((void *)v5 + 4) = v6 + 1;
      *unint64_t v6 = 32;
    }
    unint64_t v7 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
    if (!HIBYTE(*((_DWORD *)*this + 11))) {
      unint64_t v7 = 0;
    }
    unint64_t v32 = *(void **)(v7 + 8);
    uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v32);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, AttrData, v9);
  }
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *unint64_t v11 = 32;
  }
  long long v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    *uint64_t v13 = 58;
    ++*((void *)v12 + 4);
  }
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    *uint64_t v15 = 32;
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v17 = (_DWORD *)*((void *)v16 + 4);
  if (*((void *)v16 + 3) - (void)v17 > 6uLL)
  {
    *(_DWORD *)((char *)v17 + 3) = 1953064549;
    _DWORD *v17 = 1701733730;
    *((void *)v16 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v16, "benefit", 7uLL);
  }
  __int16 v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if (*((unsigned char **)v18 + 3) == v19)
  {
    llvm::raw_ostream::write(v18, "(", 1uLL);
  }
  else
  {
    *uint64_t v19 = 40;
    ++*((void *)v18 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  long long v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if (*((unsigned char **)v20 + 3) == v21)
  {
    llvm::raw_ostream::write(v20, ")", 1uLL);
  }
  else
  {
    unsigned char *v21 = 41;
    ++*((void *)v20 + 4);
  }
  unint64_t v32 = v34;
  v34[0] = "sym_name";
  v34[1] = 8;
  _OWORD v34[2] = "benefit";
  v34[3] = 7;
  uint64_t v33 = 0x200000002;
  int v22 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v22);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v22 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 200))(a2, Value, v25, v32, v33);
  long long v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v27 = (unsigned char *)*((void *)v26 + 4);
  if ((unint64_t)v27 >= *((void *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
    uint64_t v28 = *this;
    unint64_t v29 = *((unsigned int *)*this + 11);
    if ((v29 & 0x7FFFFF) != 0) {
      goto LABEL_33;
    }
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    unsigned char *v27 = 32;
    uint64_t v28 = *this;
    unint64_t v29 = *((unsigned int *)*this + 11);
    if ((v29 & 0x7FFFFF) != 0)
    {
LABEL_33:
      unint64_t v30 = (((unint64_t)v28 + 16 * ((v29 >> 23) & 1) + ((v29 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v28 + 10);
      goto LABEL_36;
    }
  }
  unint64_t v30 = 0;
LABEL_36:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 224))(a2, v30, 1, 1, 0);
  if (v32 != v34) {
    free(v32);
  }
}

uint64_t mlir::pdl::RangeOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0 && (uint64_t v3 = *((unsigned int *)v2 + 17), v3))
  {
    uint64_t v4 = 0;
    uint64_t v5 = v2[9] + 24;
    while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*this, *(void *)(*(void *)v5 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v4))
    {
      ++v4;
      v5 += 32;
      if (v3 == v4)
      {
        uint64_t v2 = *this;
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    int v6 = *((_DWORD *)v2 + 9);
    unint64_t v7 = v2 - 2;
    if (v6) {
      uint64_t v8 = (uint64_t)v7;
    }
    else {
      uint64_t v8 = 0;
    }
    NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
    uint64_t v10 = *this;
    unint64_t v11 = (const void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    if (*((_UNKNOWN **)*v11 + 17) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      v55[0] = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v55) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id) {
        return 1;
      }
      v50[0] = v11;
      if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v50) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
        return 1;
      }
    }
    __int16 v51 = 261;
    v50[0] = (const void **)"result";
    v50[1] = (const void **)6;
    mlir::Operation::emitOpError(v10, v50, (uint64_t)v55);
    if (v55[0])
    {
      int v52 = 3;
      unsigned int v53 = " #";
      uint64_t v54 = 2;
      long long v12 = &v52;
      uint64_t v13 = (char *)v56;
      if (v57 >= v58)
      {
        unint64_t v40 = v57 + 1;
        if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
        {
          int64_t v46 = (char *)&v52 - (unsigned char *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          uint64_t v13 = (char *)v56;
          long long v12 = (int *)((char *)v56 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          long long v12 = &v52;
          uint64_t v13 = (char *)v56;
        }
      }
      uint64_t v14 = &v13[24 * v57];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)uint64_t v14 = v15;
      uint64_t v16 = ++v57;
      if (v55[0])
      {
        int v52 = 5;
        unsigned int v53 = 0;
        long long v17 = &v52;
        __int16 v18 = (char *)v56;
        if (v16 >= v58)
        {
          unint64_t v41 = v16 + 1;
          BOOL v42 = (char *)v56 + 24 * v16 > (char *)&v52;
          if (v56 <= &v52 && v42)
          {
            int64_t v47 = (char *)&v52 - (unsigned char *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            __int16 v18 = (char *)v56;
            long long v17 = (int *)((char *)v56 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            long long v17 = &v52;
            __int16 v18 = (char *)v56;
          }
        }
        uint64_t v19 = &v18[24 * v57];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        uint64_t v21 = ++v57;
        if (v55[0])
        {
          int v52 = 3;
          uint64_t v54 = 99;
          int v22 = &v52;
          int v23 = (char *)v56;
          if (v21 >= v58)
          {
            unint64_t v43 = v21 + 1;
            BOOL v44 = (char *)v56 + 24 * v21 > (char *)&v52;
            if (v56 <= &v52 && v44)
            {
              int64_t v48 = (char *)&v52 - (unsigned char *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              int v23 = (char *)v56;
              int v22 = (int *)((char *)v56 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              int v22 = &v52;
              int v23 = (char *)v56;
            }
          }
          long long v24 = &v23[24 * v57];
          long long v25 = *(_OWORD *)v22;
          *((void *)v24 + 2) = *((void *)v22 + 2);
          *(_OWORD *)long long v24 = v25;
          ++v57;
          if (v55[0])
          {
            long long v26 = &v52;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, (uint64_t)v11);
            char v27 = (char *)v56;
            if (v57 >= v58)
            {
              unint64_t v45 = v57 + 1;
              if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
              {
                int64_t v49 = (char *)&v52 - (unsigned char *)v56;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                char v27 = (char *)v56;
                long long v26 = (int *)((char *)v56 + v49);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                long long v26 = &v52;
                char v27 = (char *)v56;
              }
            }
            uint64_t v28 = &v27[24 * v57];
            long long v29 = *(_OWORD *)v26;
            *((void *)v28 + 2) = *((void *)v26 + 2);
            *(_OWORD *)uint64_t v28 = v29;
            ++v57;
          }
        }
      }
    }
    char v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    }
    if (v64)
    {
      unint64_t v31 = (void **)__p;
      if (__p)
      {
        unint64_t v32 = v63;
        uint64_t v33 = __p;
        if (v63 != __p)
        {
          do
            unint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          uint64_t v33 = __p;
        }
        unint64_t v63 = v31;
        operator delete(v33);
      }
      int64_t v34 = v60;
      if (v60)
      {
        uint64_t v35 = v61;
        uint64_t v36 = v60;
        if (v61 != v60)
        {
          do
          {
            unint64_t v38 = (void *)*--v35;
            unint64_t v37 = v38;
            void *v35 = 0;
            if (v38) {
              operator delete[](v37);
            }
          }
          while (v35 != v34);
          uint64_t v36 = v60;
        }
        uint64_t v61 = v34;
        operator delete(v36);
      }
      if (v56 != v59) {
        free(v56);
      }
    }
    if (v30) {
      return 1;
    }
  }
  return 0;
}

BOOL mlir::pdl::RangeOp::parse(uint64_t a1, uint64_t a2)
{
  v18[16] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = v18;
  uint64_t v17 = 0x400000000;
  uint64_t v12 = 0;
  uint64_t v13 = &v15;
  uint64_t v14 = 0x100000000;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v16, 0, 1, 0xFFFFFFFFLL)|| v17&& (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)&v13)))
  {
    goto LABEL_13;
  }
  mlir::ValueRange::ValueRange(v11, (uint64_t)v13, v14);
  if (v11[1])
  {
    uint64_t v5 = (void *)mlir::TypeRange::dereference_iterator(v11[0], 0);
    Rangeuint64_t ElementTypeOrSelf = mlir::pdl::getRangeElementTypeOrSelf(v5);
    uint64_t v12 = mlir::pdl::RangeType::get((uint64_t)RangeElementTypeOrSelf);
  }
  else if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 544))(a1, &v12))
  {
    goto LABEL_13;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
LABEL_13:
    BOOL v8 = 0;
    uint64_t v9 = v13;
    if (v13 == &v15) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v7 = *(unsigned int *)(a2 + 72);
  if (v7 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v7) = v12;
  ++*(_DWORD *)(a2 + 72);
  BOOL v8 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v16, (uint64_t)&v13, v4, a2 + 16) != 0;
  uint64_t v9 = v13;
  if (v13 != &v15) {
LABEL_14:
  }
    free(v9);
LABEL_15:
  if (v16 != v18) {
    free(v16);
  }
  return v8;
}

void mlir::pdl::RangeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v42[2] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)*this + 46) & 0x80) != 0 && *((_DWORD *)*this + 17))
  {
    uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v5 >= *((void *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 32);
    }
    else
    {
      *((void *)v4 + 4) = v5 + 1;
      *uint64_t v5 = 32;
    }
    int v6 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v7 = *((unsigned int *)v6 + 17);
      uint64_t v8 = *((void *)v6 + 9);
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    uint64_t v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int64_t v39 = ", ";
    unint64_t v40 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8, 0, v8, v7, (uint64_t)a2, v9, (uint64_t)&v39);
    uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if ((unint64_t)v11 >= *((void *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((void *)v10 + 4) = v11 + 1;
      *unint64_t v11 = 32;
    }
    uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if (*((unsigned char **)v12 + 3) == v13)
    {
      llvm::raw_ostream::write(v12, ":", 1uLL);
    }
    else
    {
      *uint64_t v13 = 58;
      ++*((void *)v12 + 4);
    }
    uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
    if ((unint64_t)v15 >= *((void *)v14 + 3))
    {
      llvm::raw_ostream::write(v14, 32);
    }
    else
    {
      *((void *)v14 + 4) = v15 + 1;
      *uint64_t v15 = 32;
    }
    uint64_t v16 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
      uint64_t v17 = *((unsigned int *)v16 + 17);
      uint64_t v18 = *((void *)v16 + 9);
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v17 = 0;
    }
    v36[0] = v18;
    v36[1] = v17;
    mlir::OperandRange::getTypes(v36, (uint64_t *)&v39);
    unint64_t AttrDictionary = ", ";
    uint64_t v38 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v39, v40, v41[0], v41[1], (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  }
  uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v20 = (unsigned char *)*((void *)v19 + 4);
  if ((unint64_t)v20 >= *((void *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 32);
  }
  else
  {
    *((void *)v19 + 4) = v20 + 1;
    *long long v20 = 32;
  }
  uint64_t v21 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v22 = *((unsigned int *)v21 + 17);
    int v23 = (const char *)*((void *)v21 + 9);
  }
  else
  {
    int v23 = 0;
    uint64_t v22 = 0;
  }
  unint64_t AttrDictionary = v23;
  uint64_t v38 = v22;
  mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, &v33);
  mlir::ValueRange::ValueRange((unint64_t *)&v39, v33 + 32 * v34, v35 - v34);
  mlir::TypeRange::TypeRange(v42, (uint64_t)v39, v40);
  if (*((_DWORD *)*this + 9)) {
    uint64_t v24 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v24 = 0;
  }
  NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v24, 0);
  if (!v42[1])
  {
    unint64_t v26 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    char v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v28 = (_WORD *)*((void *)v27 + 4);
    if (*((void *)v27 + 3) - (void)v28 > 1uLL)
    {
      *uint64_t v28 = 8250;
      *((void *)v27 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v27, ": ", 2uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, v26);
  }
  int64_t v39 = v41;
  unint64_t v40 = 0x200000000;
  long long v29 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v29);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v29 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v32, v39, v40);
  if (v39 != v41) {
    free(v39);
  }
}

BOOL mlir::pdl::ReplaceOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(a2);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 4)
    {
      uint64_t v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        uint64_t v4 = (void **)__p;
        if (__p)
        {
          uint64_t v5 = v24;
          int v6 = __p;
          if (v24 != __p)
          {
            do
              uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            int v6 = __p;
          }
          uint64_t v24 = v4;
          operator delete(v6);
        }
        uint64_t v7 = v21;
        if (v21)
        {
          uint64_t v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              unint64_t v11 = (void *)*--v8;
              uint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                operator delete[](v10);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          uint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    uint64_t v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3, v12, 4 * v13);
    }
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, v3, (const char *)3);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(0xCuLL);
    *(void *)uint64_t v3 = 0;
    void v3[2] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &unk_1E8EBA000;
    {
      uint64_t v4 = (void *)&unk_1E8EBA000;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 108;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = (void *)&unk_1E8EBA000;
      }
    }
    a1[33] = v4[327];
    return a1[32];
  }
  return result;
}

uint64_t mlir::pdl::ReplaceOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  unint64_t v3 = *((unsigned int *)*this + 11);
  uint64_t v4 = (v3 >> 23) & 1;
  int v5 = (const char *)LODWORD((*this)[2 * v4 + 8]);
  if ((v3 & 0x800000) != 0)
  {
    uint64_t v6 = v2[9];
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (v5)
    {
LABEL_3:
      unint64_t v7 = 0;
      uint64_t v8 = v6 + 24;
      while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*this, *(void *)(*(void *)v8 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v7))
      {
        ++v7;
        v8 += 32;
        if (v5 == v7)
        {
          uint64_t v2 = *this;
          unint64_t v3 = *((unsigned int *)*this + 11);
          uint64_t v4 = (v3 >> 23) & 1;
          int v9 = v3 & 0x800000;
          goto LABEL_9;
        }
      }
      return 0;
    }
  }
  int v9 = v3 & 0x800000;
LABEL_9:
  if (BYTE3(v3)) {
    uint64_t v10 = &v2[2 * v4 + 8];
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(unsigned int *)v10;
  unsigned int v12 = *((_DWORD *)v10 + 1);
  if (v9)
  {
    uint64_t v13 = v2[9];
    unint64_t v14 = v12 + v11 - v11;
    if (v14 > 1)
    {
LABEL_14:
      long long v55 = (const void **)"operand group starting at #";
      __int16 v56 = 259;
      mlir::OpState::emitOpError(this, &v55, (uint64_t)v60);
      if (v60[0])
      {
        int v57 = 5;
        unsigned int v58 = v5;
        uint64_t v15 = &v57;
        __int16 v16 = (char *)v61;
        if (v62 >= v63)
        {
          unint64_t v47 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            int64_t v52 = (char *)&v57 - (unsigned char *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
            __int16 v16 = (char *)v61;
            uint64_t v15 = (int *)((char *)v61 + v52);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
            uint64_t v15 = &v57;
            __int16 v16 = (char *)v61;
          }
        }
        uint64_t v17 = &v16[24 * v62];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = *((void *)v15 + 2);
        *(_OWORD *)uint64_t v17 = v18;
        uint64_t v19 = ++v62;
        if (v60[0])
        {
          int v57 = 3;
          unsigned int v58 = " requires 0 or 1 element, but found ";
          uint64_t v59 = 36;
          uint64_t v20 = &v57;
          uint64_t v21 = (char *)v61;
          if (v19 >= v63)
          {
            unint64_t v48 = v19 + 1;
            BOOL v49 = (char *)v61 + 24 * v19 > (char *)&v57;
            if (v61 <= &v57 && v49)
            {
              int64_t v53 = (char *)&v57 - (unsigned char *)v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
              uint64_t v21 = (char *)v61;
              uint64_t v20 = (int *)((char *)v61 + v53);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
              uint64_t v20 = &v57;
              uint64_t v21 = (char *)v61;
            }
          }
          uint64_t v22 = &v21[24 * v62];
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          uint64_t v24 = ++v62;
          if (v60[0])
          {
            int v57 = 5;
            unsigned int v58 = (const char *)v14;
            char v25 = &v57;
            uint64_t v26 = (char *)v61;
            if (v24 >= v63)
            {
              unint64_t v50 = v24 + 1;
              BOOL v51 = (char *)v61 + 24 * v24 > (char *)&v57;
              if (v61 <= &v57 && v51)
              {
                int64_t v54 = (char *)&v57 - (unsigned char *)v61;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
                uint64_t v26 = (char *)v61;
                char v25 = (int *)((char *)v61 + v54);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
                char v25 = &v57;
                uint64_t v26 = (char *)v61;
              }
            }
            char v27 = &v26[24 * v62];
            long long v28 = *(_OWORD *)v25;
            *((void *)v27 + 2) = *((void *)v25 + 2);
            *(_OWORD *)char v27 = v28;
            ++v62;
          }
        }
      }
      uint64_t v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v60);
      if (v60[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
      if (v69)
      {
        char v30 = (void **)__p;
        if (__p)
        {
          unint64_t v31 = v68;
          uint64_t v32 = __p;
          if (v68 != __p)
          {
            do
              unint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
            while (v31 != v30);
            uint64_t v32 = __p;
          }
          unint64_t v68 = v30;
          operator delete(v32);
        }
        uint64_t v33 = v65;
        if (v65)
        {
          uint64_t v34 = v66;
          uint64_t v35 = v65;
          if (v66 != v65)
          {
            do
            {
              unint64_t v37 = (void *)*--v34;
              uint64_t v36 = v37;
              *uint64_t v34 = 0;
              if (v37) {
                operator delete[](v36);
              }
            }
            while (v34 != v33);
            uint64_t v35 = v65;
          }
          unint64_t v66 = v33;
          operator delete(v35);
        }
        if (v61 != v64) {
          free(v61);
        }
      }
      return v29;
    }
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = v12 + v11 - v11;
    if (v14 > 1) {
      goto LABEL_14;
    }
  }
  if (!v12)
  {
LABEL_45:
    uint64_t v39 = (uint64_t)&v2[2 * v4 + 8];
    if (BYTE3(v3)) {
      unint64_t v40 = (_DWORD *)v39;
    }
    else {
      unint64_t v40 = 0;
    }
    int v41 = v40[2];
    if (v9)
    {
      uint64_t v42 = v2[9];
      if (v41) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if (v41)
      {
LABEL_50:
        uint64_t v43 = (v40[1] + *v40);
        uint64_t v44 = (v41 + v43) - v43;
        for (uint64_t i = v42 + 32 * v43 + 24;
              mlir::pdl::__mlir_ods_local_type_constraint_PDLOps7(*this, *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v5);
              i += 32)
        {
          LODWORD(v5) = v5 + 1;
          if (!--v44) {
            return 1;
          }
        }
        return 0;
      }
    }
    return 1;
  }
  uint64_t v38 = v13 + 32 * v11 + 24;
  while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*this, *(void *)(*(void *)v38 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v5))
  {
    LODWORD(v5) = v5 + 1;
    v38 += 32;
    if (!--v14)
    {
      uint64_t v2 = *this;
      unint64_t v3 = *((unsigned int *)*this + 11);
      uint64_t v4 = (v3 >> 23) & 1;
      int v9 = v3 & 0x800000;
      goto LABEL_45;
    }
  }
  return 0;
}

BOOL mlir::pdl::ReplaceOp::parse(uint64_t a1, void *a2)
{
  v34[4] = *MEMORY[0x1E4F143B8];
  memset(v34, 0, 24);
  unint64_t v31 = v33;
  uint64_t v32 = 0x400000000;
  v29[0] = &v30;
  v29[1] = (void *)0x100000000;
  uint64_t v26 = v28;
  uint64_t v27 = 0x400000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v34, 1)) {
    goto LABEL_22;
  }
  __int16 v25 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "with", 4, v24))goto LABEL_22; {
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 272))(a1))
  }
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v31, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v29)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
    {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  memset(v24, 0, 24);
  unsigned __int16 v5 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 680))(a1, v24, 1);
  if (v5 >= 0x100u)
  {
    if (!(_BYTE)v5) {
      goto LABEL_22;
    }
    uint64_t v6 = v24;
    unint64_t v7 = (char *)v26;
    if (v27 >= HIDWORD(v27))
    {
      unint64_t v22 = v27 + 1;
      if (v26 <= v24 && (char *)v26 + 32 * v27 > (char *)v24)
      {
        int64_t v23 = (char *)v24 - (unsigned char *)v26;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v22, 32);
        unint64_t v7 = (char *)v26;
        uint64_t v6 = (char *)v26 + v23;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v22, 32);
        uint64_t v6 = v24;
        unint64_t v7 = (char *)v26;
      }
    }
    uint64_t v8 = &v7[32 * v27];
    long long v9 = v6[1];
    *(_OWORD *)uint64_t v8 = *v6;
    *((_OWORD *)v8 + 1) = v9;
    LODWORD(v27) = v27 + 1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14)) {
    goto LABEL_22;
  }
  int v10 = v27;
  int v11 = v32;
  unsigned int v12 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(a2);
  *unsigned int v12 = 1;
  v12[1] = v10;
  void v12[2] = v11;
  uint64_t v13 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v13);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  uint64_t v16 = (uint64_t)(a2 + 2);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v34, SingletonImpl, v16))
  {
LABEL_22:
    BOOL v19 = 0;
    uint64_t v20 = v26;
    if (v26 == v28) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v27)
  {
    uint64_t v17 = (char *)v26;
    uint64_t v18 = 32 * v27;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v17, SingletonImpl, v16))
    {
      v17 += 32;
      v18 -= 32;
      if (!v18) {
        goto LABEL_20;
      }
    }
    goto LABEL_22;
  }
LABEL_20:
  BOOL v19 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v31, (uint64_t)v29, v4, v16) != 0;
  uint64_t v20 = v26;
  if (v26 != v28) {
LABEL_23:
  }
    free(v20);
LABEL_24:
  if (v29[0] != &v30) {
    free(v29[0]);
  }
  if (v31 != v33) {
    free(v31);
  }
  return v19;
}

void mlir::pdl::ReplaceOp::print(mlir::pdl::ReplaceOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned __int16 v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unsigned __int16 v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    *unint64_t v7 = 32;
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v9 = (_DWORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 3uLL)
  {
    *long long v9 = 1752459639;
    *((void *)v8 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v8, "with", 4uLL);
  }
  unint64_t v10 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v10 = 0;
  }
  if (*(_DWORD *)(v10 + 8))
  {
    int v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unsigned int v12 = (unsigned char *)*((void *)v11 + 4);
    if (*((unsigned char **)v11 + 3) == v12)
    {
      llvm::raw_ostream::write(v11, "(", 1uLL);
    }
    else
    {
      *unsigned int v12 = 40;
      ++*((void *)v11 + 4);
    }
    unint64_t v13 = *(unsigned int *)(*(void *)this + 44);
    if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      unint64_t v14 = (int *)(*(void *)this + 16 * ((v13 >> 23) & 1) + 64);
    }
    else {
      unint64_t v14 = 0;
    }
    int v15 = *v14;
    int v16 = v14[1];
    int v17 = v14[2];
    if ((v13 & 0x800000) != 0) {
      uint64_t v18 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (v16 + v15);
    uint64_t v20 = v18 + 32 * v19;
    uint64_t v21 = (v17 + v19) - v19;
    unint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int64_t v53 = ", ";
    uint64_t v54 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v20, 0, v20, v21, (uint64_t)a2, v22, (uint64_t)&v53);
    int64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v24 = (unsigned char *)*((void *)v23 + 4);
    if ((unint64_t)v24 >= *((void *)v23 + 3))
    {
      llvm::raw_ostream::write(v23, 32);
    }
    else
    {
      *((void *)v23 + 4) = v24 + 1;
      *uint64_t v24 = 32;
    }
    __int16 v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
    if (*((unsigned char **)v25 + 3) == v26)
    {
      llvm::raw_ostream::write(v25, ":", 1uLL);
    }
    else
    {
      *uint64_t v26 = 58;
      ++*((void *)v25 + 4);
    }
    uint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v28 = (unsigned char *)*((void *)v27 + 4);
    if ((unint64_t)v28 >= *((void *)v27 + 3))
    {
      llvm::raw_ostream::write(v27, 32);
    }
    else
    {
      *((void *)v27 + 4) = v28 + 1;
      *long long v28 = 32;
    }
    unint64_t v29 = *(unsigned int *)(*(void *)this + 44);
    if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v30 = (int *)(*(void *)this + 16 * ((v29 >> 23) & 1) + 64);
    }
    else {
      uint64_t v30 = 0;
    }
    int v31 = *v30;
    int v32 = v30[1];
    int v33 = v30[2];
    if ((v29 & 0x800000) != 0) {
      uint64_t v34 = *(void *)(*(void *)this + 72);
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v35 = (v32 + v31);
    v51[0] = v34 + 32 * v35;
    v51[1] = (v33 + v35) - v35;
    mlir::OperandRange::getTypes(v51, (uint64_t *)&v53);
    v52[0] = ", ";
    v52[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v53, v54, (uint64_t)v55, v56, (uint64_t)a2, (uint64_t)a2, (uint64_t)v52);
    uint64_t v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v37 = (unsigned char *)*((void *)v36 + 4);
    if (*((unsigned char **)v36 + 3) == v37)
    {
      llvm::raw_ostream::write(v36, ")", 1uLL);
    }
    else
    {
      unsigned char *v37 = 41;
      ++*((void *)v36 + 4);
    }
  }
  uint64_t v38 = *(void **)this;
  unint64_t v39 = *(unsigned int *)(*(void *)this + 44);
  unint64_t v40 = (unsigned int *)(*(void *)this + 16 * ((v39 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v40 = 0;
  }
  unsigned int v41 = v40[1];
  if ((v39 & 0x800000) != 0)
  {
    uint64_t v42 = v38[9];
    if (!v41) {
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t v42 = 0;
    if (!v41) {
      goto LABEL_52;
    }
  }
  if (!*(void *)(v42 + 32 * *v40 + 24)) {
    goto LABEL_52;
  }
  uint64_t v43 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v44 = (unsigned char *)*((void *)v43 + 4);
  if ((unint64_t)v44 >= *((void *)v43 + 3))
  {
    llvm::raw_ostream::write(v43, 32);
  }
  else
  {
    *((void *)v43 + 4) = v44 + 1;
    *uint64_t v44 = 32;
  }
  uint64_t v38 = *(void **)this;
  unint64_t v39 = *(unsigned int *)(*(void *)this + 44);
  unint64_t v45 = (unsigned int *)(*(void *)this + 16 * ((v39 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v45 = 0;
  }
  unsigned int v46 = v45[1];
  if ((v39 & 0x800000) != 0)
  {
    uint64_t v47 = v38[9];
    if (!v46) {
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t v47 = 0;
    if (!v46) {
      goto LABEL_52;
    }
  }
  if (*(void *)(v47 + 32 * *v45 + 24))
  {
    (*(void (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 160))(a2);
    uint64_t v38 = *(void **)this;
    LODWORD(v39) = *(_DWORD *)(*(void *)this + 44);
  }
LABEL_52:
  int64_t v53 = &v55;
  long long v55 = "operandSegmentSizes";
  uint64_t v56 = 19;
  uint64_t v54 = 0x200000001;
  if (BYTE3(v39))
  {
    v52[0] = mlir::Operation::getAttrDictionary((mlir::Operation *)v38);
    unint64_t v48 = (mlir::ArrayAttr *)v52;
  }
  else
  {
    unint64_t v48 = (mlir::ArrayAttr *)(v38 + 7);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v48);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v50, v53, v54);
  if (v53 != &v55) {
    free(v53);
  }
}

uint64_t mlir::pdl::ResultOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      uint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          uint64_t v27 = (char *)v60;
        }
      }
      long long v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)long long v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      int v31 = v67;
      int v32 = __p;
      if (v67 != __p)
      {
        do
          int v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        int v32 = __p;
      }
      unint64_t v67 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    int v33 = v65;
    int64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *int v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "index", 5uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      uint64_t v57 = "expected key entry for index in DictionaryAttr to set Properties.";
      uint64_t v58 = 65;
      uint64_t v36 = &v56;
      unint64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          unint64_t v37 = (char *)v60;
          uint64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v36 = &v56;
          unint64_t v37 = (char *)v60;
        }
      }
      uint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    unint64_t v40 = (void **)__p;
    if (__p)
    {
      unsigned int v41 = v67;
      uint64_t v42 = __p;
      if (v67 != __p)
      {
        do
          unsigned int v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      unint64_t v67 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v43 = v65;
    int64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      unint64_t v45 = (void *)*--v43;
      uint64_t v44 = v45;
      void *v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 50;
    unint64_t v10 = &v56;
    int v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        int v11 = (char *)v60;
        unint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        unint64_t v10 = &v56;
        int v11 = (char *)v60;
      }
    }
    unsigned int v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)unsigned int v12 = v13;
    ++v61;
    if (v59[0])
    {
      unint64_t v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      int v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          int v15 = (char *)v60;
          unint64_t v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unint64_t v14 = &v56;
          int v15 = (char *)v60;
        }
      }
      int v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)int v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v67 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    unint64_t v22 = v65;
    int64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      uint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      __int16 v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *unint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_57:
    int64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::pdl::ResultOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  unsigned int v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"index", 5, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  unint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  unint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(const void **a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  if (*((_UNKNOWN **)*a1 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    int v31 = a1;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v31);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&Value, 32)) {
      return 1;
    }
  }
  a4(&Value, a5);
  if (Value)
  {
    LODWORD(v31) = 3;
    int v32 = "attribute '";
    uint64_t v33 = 11;
    unint64_t v10 = &v31;
    int v11 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        int v11 = (char *)v37;
        unint64_t v10 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        unint64_t v10 = &v31;
        int v11 = (char *)v37;
      }
    }
    unsigned int v12 = &v11[24 * v38];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = v10[2];
    *(_OWORD *)unsigned int v12 = v13;
    ++v38;
    if (Value)
    {
      __int16 v34 = 261;
      int v31 = a2;
      int v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (Value)
      {
        LODWORD(v31) = 3;
        int v32 = "' failed to satisfy constraint: 32-bit signless integer attribute";
        uint64_t v33 = 65;
        uint64_t v14 = &v31;
        int v15 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            int v15 = (char *)v37;
            uint64_t v14 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            uint64_t v14 = &v31;
            int v15 = (char *)v37;
          }
        }
        int v16 = &v15[24 * v38];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = v14[2];
        *(_OWORD *)int v16 = v17;
        ++v38;
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  }
  if (v45)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v44;
      uint64_t v20 = __p;
      if (v44 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v44 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v41;
    if (v41)
    {
      unint64_t v22 = v42;
      int64_t v23 = v41;
      if (v42 != v41)
      {
        do
        {
          __int16 v25 = (void *)*--v22;
          uint64_t v24 = v25;
          *unint64_t v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        int64_t v23 = v41;
      }
      uint64_t v42 = v21;
      operator delete(v23);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v9;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &unk_1E8EBA000;
    {
      uint64_t v4 = (void *)&unk_1E8EBA000;
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 107;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = (void *)&unk_1E8EBA000;
      }
    }
    a1[33] = v4[329];
    return a1[32];
  }
  return result;
}

void *mlir::pdl::ResultOp::getIndex(mlir::pdl::ResultOp *this)
{
  uint64_t v5 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  mlir::IntegerAttr::getValue(&v5, (llvm::APInt *)&__p);
  if (v4 <= 0x40) {
    return __p;
  }
  uint64_t v2 = *(void *)__p;
  operator delete[](__p);
  return (void *)v2;
}

BOOL mlir::pdl::ResultOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v18[0] = v2;
    if (mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v3, (const void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      if (*((_DWORD *)*this + 9)) {
        uint64_t v4 = (uint64_t)(*this - 2);
      }
      else {
        uint64_t v4 = 0;
      }
      NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps4(*this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    int v16 = (const void **)"requires attribute 'index'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError(this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      unint64_t v7 = (void **)__p;
      if (__p)
      {
        BOOL v8 = v24;
        unint64_t v9 = __p;
        if (v24 != __p)
        {
          do
            BOOL v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          unint64_t v9 = __p;
        }
        uint64_t v24 = v7;
        operator delete(v9);
      }
      uint64_t v10 = v21;
      if (v21)
      {
        unint64_t v11 = v22;
        uint64_t v12 = v21;
        if (v22 != v21)
        {
          do
          {
            unint64_t v14 = (void *)*--v11;
            long long v13 = v14;
            *unint64_t v11 = 0;
            if (v14) {
              operator delete[](v13);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v21;
        }
        unint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

BOOL mlir::pdl::ResultOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  memset(v21, 0, 24);
  uint64_t v4 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IntegerType = mlir::Builder::getIntegerType(v4, 0x20u);
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, &v18, IntegerType)) {
    return 0;
  }
  if (v18)
  {
    uint64_t v6 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>((void *)a2);
    *uint64_t v6 = v18;
  }
  __int16 v20 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "of", 2, v19))return 0; {
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v21, 1)) {
    return 0;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  v19[0] = a1;
  v19[1] = &v17;
  void v19[2] = a2;
  BOOL v8 = (const void **)mlir::NamedAttrList::get(a2 + 112, **(void **)(v7 + 96));
  if (v8)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v8, (const void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ResultOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v19))return 0; {
  }
    }
  unint64_t v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
  uint64_t v12 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  long long v13 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v12);
  uint64_t v14 = mlir::StorageUniquer::getSingletonImpl(v13, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  uint64_t v15 = *(unsigned int *)(a2 + 72);
  if (v15 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v15) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v21, v14, a2 + 16) != 0;
}

void mlir::pdl::ResultOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    *uint64_t v7 = 32;
  }
  BOOL v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *unint64_t v9 = 26223;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "of", 2uLL);
  }
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *unint64_t v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v17 = v19;
  v19[0] = "index";
  v19[1] = 5;
  uint64_t v18 = 0x200000001;
  uint64_t v12 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v12);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v12 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v15, v17, v18);
  if (v17 != v19) {
    free(v17);
  }
}

uint64_t mlir::pdl::ResultsOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      char v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      uint64_t v26 = &v44;
      unint64_t v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          unint64_t v27 = (char *)v48;
          uint64_t v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v26 = &v44;
          unint64_t v27 = (char *)v48;
        }
      }
      unint64_t v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)unint64_t v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    int64_t v30 = (void **)__p;
    if (__p)
    {
      int v31 = v55;
      int v32 = __p;
      if (v55 != __p)
      {
        do
          int v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        int v32 = __p;
      }
      uint64_t v55 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    uint64_t v33 = v53;
    int64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      __int16 v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "index", 5uLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 50;
    uint64_t v10 = &v44;
    unint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        unint64_t v11 = (char *)v48;
        uint64_t v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v10 = &v44;
        unint64_t v11 = (char *)v48;
      }
    }
    uint64_t v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v49;
    if (v47[0])
    {
      uint64_t v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      uint64_t v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v15 = (char *)v48;
          uint64_t v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v14 = &v44;
          uint64_t v15 = (char *)v48;
        }
      }
      int v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)int v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  uint64_t v18 = (void **)__p;
  if (__p)
  {
    uint64_t v19 = v55;
    __int16 v20 = __p;
    if (v55 != __p)
    {
      do
        uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      __int16 v20 = __p;
    }
    uint64_t v55 = v18;
    operator delete(v20);
  }
  uint64_t v21 = v52;
  if (v52)
  {
    unint64_t v22 = v53;
    int64_t v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      char v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *unint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_41:
    int64_t v23 = v52;
LABEL_42:
    int64_t v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &unk_1E8EBA000;
    {
      uint64_t v4 = (void *)&unk_1E8EBA000;
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 108;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = (void *)&unk_1E8EBA000;
      }
    }
    a1[33] = v4[331];
    return a1[32];
  }
  return result;
}

BOOL mlir::pdl::ResultsOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v52[0] = v2;
  if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v3, (const void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v52)|| !mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*this, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  uint64_t v4 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  unint64_t v6 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = *(void **)(*(void *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
    return 1;
  }
  uint64_t v8 = *this;
  if (v7 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v52[0] = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v52) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id) {
      return 1;
    }
  }
  __int16 v48 = 261;
  v47[0] = (const void **)"result";
  v47[1] = (const void **)6;
  mlir::Operation::emitOpError(v8, v47, (uint64_t)v52);
  if (v52[0])
  {
    int v49 = 3;
    unsigned int v50 = " #";
    uint64_t v51 = 2;
    unint64_t v9 = &v49;
    uint64_t v10 = (char *)v53;
    if (v54 >= v55)
    {
      unint64_t v37 = v54 + 1;
      if (v53 <= &v49 && (char *)v53 + 24 * v54 > (char *)&v49)
      {
        int64_t v43 = (char *)&v49 - (unsigned char *)v53;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v37, 24);
        uint64_t v10 = (char *)v53;
        unint64_t v9 = (int *)((char *)v53 + v43);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v37, 24);
        unint64_t v9 = &v49;
        uint64_t v10 = (char *)v53;
      }
    }
    unint64_t v11 = &v10[24 * v54];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = *((void *)v9 + 2);
    *(_OWORD *)unint64_t v11 = v12;
    uint64_t v13 = ++v54;
    if (v52[0])
    {
      int v49 = 5;
      unsigned int v50 = 0;
      unint64_t v14 = &v49;
      uint64_t v15 = (char *)v53;
      if (v13 >= v55)
      {
        unint64_t v38 = v13 + 1;
        BOOL v39 = (char *)v53 + 24 * v13 > (char *)&v49;
        if (v53 <= &v49 && v39)
        {
          int64_t v44 = (char *)&v49 - (unsigned char *)v53;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v38, 24);
          uint64_t v15 = (char *)v53;
          unint64_t v14 = (int *)((char *)v53 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v38, 24);
          unint64_t v14 = &v49;
          uint64_t v15 = (char *)v53;
        }
      }
      int v16 = &v15[24 * v54];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)int v16 = v17;
      uint64_t v18 = ++v54;
      if (v52[0])
      {
        int v49 = 3;
        uint64_t v51 = 77;
        uint64_t v19 = &v49;
        __int16 v20 = (char *)v53;
        if (v18 >= v55)
        {
          unint64_t v40 = v18 + 1;
          BOOL v41 = (char *)v53 + 24 * v18 > (char *)&v49;
          if (v53 <= &v49 && v41)
          {
            int64_t v45 = (char *)&v49 - (unsigned char *)v53;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v40, 24);
            __int16 v20 = (char *)v53;
            uint64_t v19 = (int *)((char *)v53 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v40, 24);
            uint64_t v19 = &v49;
            __int16 v20 = (char *)v53;
          }
        }
        uint64_t v21 = &v20[24 * v54];
        long long v22 = *(_OWORD *)v19;
        *((void *)v21 + 2) = *((void *)v19 + 2);
        *(_OWORD *)uint64_t v21 = v22;
        ++v54;
        if (v52[0])
        {
          int64_t v23 = &v49;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v49, v6);
          uint64_t v24 = (char *)v53;
          if (v54 >= v55)
          {
            unint64_t v42 = v54 + 1;
            if (v53 <= &v49 && (char *)v53 + 24 * v54 > (char *)&v49)
            {
              int64_t v46 = (char *)&v49 - (unsigned char *)v53;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v42, 24);
              uint64_t v24 = (char *)v53;
              int64_t v23 = (int *)((char *)v53 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v42, 24);
              int64_t v23 = &v49;
              uint64_t v24 = (char *)v53;
            }
          }
          char v25 = &v24[24 * v54];
          long long v26 = *(_OWORD *)v23;
          *((void *)v25 + 2) = *((void *)v23 + 2);
          *(_OWORD *)char v25 = v26;
          ++v54;
        }
      }
    }
  }
  char v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v52);
  if (v52[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
  }
  if (v61)
  {
    unint64_t v28 = (void **)__p;
    if (__p)
    {
      long long v29 = v60;
      int64_t v30 = __p;
      if (v60 != __p)
      {
        do
          long long v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        int64_t v30 = __p;
      }
      char v60 = v28;
      operator delete(v30);
    }
    int v31 = v57;
    if (v57)
    {
      int v32 = v58;
      uint64_t v33 = v57;
      if (v58 != v57)
      {
        do
        {
          uint64_t v35 = (void *)*--v32;
          __int16 v34 = v35;
          *int v32 = 0;
          if (v35) {
            operator delete[](v34);
          }
        }
        while (v32 != v31);
        uint64_t v33 = v57;
      }
      uint64_t v58 = v31;
      operator delete(v33);
    }
    if (v53 != v56) {
      free(v53);
    }
  }
  return v27 != 0;
}

BOOL mlir::pdl::ResultsOp::parse(uint64_t *a1, uint64_t a2)
{
  void v24[4] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 0;
  memset(v24, 0, 24);
  uint64_t v23 = 0;
  uint64_t v4 = (mlir::Builder *)(*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  uint64_t IntegerType = mlir::Builder::getIntegerType(v4, 0x20u);
  unsigned __int16 v6 = (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*a1 + 424))(a1, &v20, IntegerType);
  if (v6 >= 0x100u)
  {
    if (!(_BYTE)v6) {
      return 0;
    }
    if (v20)
    {
      unint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>((void *)a2);
      *unint64_t v7 = v20;
    }
  }
  __int16 v22 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t *, const char *, uint64_t, void *))(*a1 + 368))(a1, "of", 2, v21)) {
    return 0;
  }
  (*(void (**)(uint64_t *))(*a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t *, void *, uint64_t))(*a1 + 672))(a1, v24, 1)) {
    return 0;
  }
  uint64_t v8 = *a1;
  if (v20)
  {
    if (!(*(unsigned __int8 (**)(uint64_t *))(v8 + 56))(a1)
      || !(*(unsigned __int8 (**)(uint64_t *, uint64_t *))(*a1 + 504))(a1, &v23))
    {
      return 0;
    }
  }
  else
  {
    unint64_t v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t *))(v8 + 32))(a1);
    TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
    uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    uint64_t v23 = mlir::pdl::RangeType::get(SingletonImpl);
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t *, uint64_t))(*a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v12 = *(void *)(a2 + 8);
  v21[0] = a1;
  v21[1] = &v19;
  void v21[2] = a2;
  uint64_t v13 = (const void **)mlir::NamedAttrList::get(a2 + 112, **(void **)(v12 + 96));
  if (v13)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v13, (const void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ResultsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v21))return 0; {
  }
    }
  unint64_t v14 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  uint64_t v15 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v14);
  uint64_t v16 = mlir::StorageUniquer::getSingletonImpl(v15, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  if (v17 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v17) = v23;
  ++*(_DWORD *)(a2 + 72);
  return (*(unsigned __int8 (**)(uint64_t *, void *, uint64_t, uint64_t))(*a1 + 696))(a1, v24, v16, a2 + 16) != 0;
}

void mlir::pdl::ResultsOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v27[4] = *MEMORY[0x1E4F143B8];
  if (*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8))
  {
    uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    int v5 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v5 >= *((void *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 32);
    }
    else
    {
      *((void *)v4 + 4) = v5 + 1;
      *int v5 = 32;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  }
  unsigned __int16 v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    *unint64_t v7 = 32;
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *unint64_t v9 = 26223;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "of", 2uLL);
  }
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *unint64_t v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    *uint64_t v13 = 32;
  }
  uint64_t v14 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (*((_DWORD *)*this + 9)) {
    uint64_t v15 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v15 = 0;
  }
  NextResultAtunsigned int Offset = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0);
  if (v14)
  {
    unint64_t v17 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v19 = (_DWORD *)*((void *)v18 + 4);
    if (*((void *)v18 + 3) - (void)v19 > 3uLL)
    {
      *uint64_t v19 = 540945696;
      *((void *)v18 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v18, " -> ", 4uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, v17);
  }
  char v25 = v27;
  v27[0] = "index";
  v27[1] = 5;
  uint64_t v26 = 0x200000001;
  uint64_t v20 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v20);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v20 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v23, v25, v26);
  if (v25 != v27) {
    free(v25);
  }
}

uint64_t mlir::pdl::RewriteOp::getRoot(mlir::pdl::RewriteOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = *(_DWORD *)(v2 + 8);
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 24);
    }
  }
  return 0;
}

BOOL mlir::pdl::RewriteOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v56 = v6;
  if (!v6)
  {
    a3(v60, a4);
    if (v60[0])
    {
      int v57 = 3;
      uint64_t v58 = "expected DictionaryAttr to set properties";
      uint64_t v59 = 41;
      uint64_t v26 = &v57;
      char v27 = (char *)v61;
      if (v62 >= v63)
      {
        unint64_t v48 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          int64_t v52 = (char *)&v57 - (unsigned char *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          char v27 = (char *)v61;
          uint64_t v26 = (int *)((char *)v61 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          uint64_t v26 = &v57;
          char v27 = (char *)v61;
        }
      }
      unint64_t v28 = &v27[24 * v62];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)unint64_t v28 = v29;
      ++v62;
      if (v60[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
    }
    if (!v69) {
      return 0;
    }
    int64_t v30 = (void **)__p;
    if (__p)
    {
      int v31 = v68;
      int v32 = __p;
      if (v68 != __p)
      {
        do
          int v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        int v32 = __p;
      }
      char v68 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v65;
    if (!v65) {
      goto LABEL_64;
    }
    uint64_t v33 = v66;
    uint64_t v23 = v65;
    if (v66 == v65)
    {
LABEL_63:
      unint64_t v66 = v21;
      operator delete(v23);
LABEL_64:
      if (v61 != v64) {
        free(v61);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      __int16 v34 = v35;
      *uint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
LABEL_62:
    uint64_t v23 = v65;
    goto LABEL_63;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v56, "name", 4uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    {
      a3(v60, a4);
      if (v60[0])
      {
        int v57 = 3;
        uint64_t v59 = 49;
        uint64_t v10 = &v57;
        unint64_t v11 = (char *)v61;
        if (v62 >= v63)
        {
          unint64_t v49 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            int64_t v53 = (char *)&v57 - (unsigned char *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
            unint64_t v11 = (char *)v61;
            uint64_t v10 = (int *)((char *)v61 + v53);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
            uint64_t v10 = &v57;
            unint64_t v11 = (char *)v61;
          }
        }
        uint64_t v12 = &v11[24 * v62];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v12 = v13;
        ++v62;
        if (v60[0])
        {
          uint64_t v14 = &v57;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v57, v9);
          uint64_t v15 = (char *)v61;
          if (v62 >= v63)
          {
            unint64_t v50 = v62 + 1;
            if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
            {
              int64_t v54 = (char *)&v57 - (unsigned char *)v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
              uint64_t v15 = (char *)v61;
              uint64_t v14 = (int *)((char *)v61 + v54);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
              uint64_t v14 = &v57;
              uint64_t v15 = (char *)v61;
            }
          }
          uint64_t v16 = &v15[24 * v62];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = *((void *)v14 + 2);
          *(_OWORD *)uint64_t v16 = v17;
          ++v62;
          if (v60[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
          }
        }
      }
      if (!v69) {
        return 0;
      }
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v68;
        uint64_t v20 = __p;
        if (v68 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        char v68 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v65;
      if (!v65) {
        goto LABEL_64;
      }
      __int16 v22 = v66;
      uint64_t v23 = v65;
      if (v66 == v65) {
        goto LABEL_63;
      }
      do
      {
        char v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *__int16 v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_62;
    }
    *a1 = v8;
  }
  uint64_t v36 = (void *)mlir::DictionaryAttr::get((uint64_t)&v56, "operandSegmentSizes", 0x13uLL);
  if (!v36)
  {
    uint64_t v36 = (void *)mlir::DictionaryAttr::get((uint64_t)&v56, "operand_segment_sizes", 0x15uLL);
    if (!v36)
    {
      a3(v60, a4);
      if (v60[0])
      {
        int v57 = 3;
        uint64_t v58 = "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.";
        uint64_t v59 = 79;
        unint64_t v38 = &v57;
        BOOL v39 = (char *)v61;
        if (v62 >= v63)
        {
          unint64_t v51 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            int64_t v55 = (char *)&v57 - (unsigned char *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
            BOOL v39 = (char *)v61;
            unint64_t v38 = (int *)((char *)v61 + v55);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
            unint64_t v38 = &v57;
            BOOL v39 = (char *)v61;
          }
        }
        unint64_t v40 = &v39[24 * v62];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = *((void *)v38 + 2);
        *(_OWORD *)unint64_t v40 = v41;
        ++v62;
        if (v60[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
        }
      }
      if (!v69) {
        return 0;
      }
      unint64_t v42 = (void **)__p;
      if (__p)
      {
        int64_t v43 = v68;
        int64_t v44 = __p;
        if (v68 != __p)
        {
          do
            int64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          int64_t v44 = __p;
        }
        char v68 = v42;
        operator delete(v44);
      }
      uint64_t v21 = v65;
      if (!v65) {
        goto LABEL_64;
      }
      int64_t v45 = v66;
      uint64_t v23 = v65;
      if (v66 == v65) {
        goto LABEL_63;
      }
      do
      {
        unint64_t v47 = (void *)*--v45;
        int64_t v46 = v47;
        void *v45 = 0;
        if (v47) {
          operator delete[](v46);
        }
      }
      while (v45 != v21);
      goto LABEL_62;
    }
  }
  return mlir::convertFromAttribute(a1 + 1, (const char *)2, v36, a3, a4) != 0;
}

uint64_t mlir::pdl::RewriteOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v23[6] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a1;
  uint64_t v21 = v23;
  uint64_t v22 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v20, (uint64_t)"name", 4, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v22;
    if (v22 >= HIDWORD(v22))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 16);
      unsigned int v7 = v22;
    }
    uint64_t v8 = (uint64_t *)((char *)v21 + 16 * v7);
    uint64_t *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v22) = v22 + 1;
  }
  uint64_t v9 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 1), 2);
  uint64_t v10 = mlir::Builder::getNamedAttr(&v20, (uint64_t)"operandSegmentSizes", 19, v9);
  uint64_t v12 = v11;
  unsigned int v13 = v22;
  if (v22 >= HIDWORD(v22))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 16);
    unsigned int v13 = v22;
  }
  uint64_t v14 = (uint64_t *)((char *)v21 + 16 * v13);
  *uint64_t v14 = v10;
  v14[1] = v12;
  BOOL v15 = __CFADD__(v22, 1);
  uint64_t v16 = (v22 + 1);
  LODWORD(v22) = v22 + 1;
  if (v15)
  {
    uint64_t DictionaryAttr = 0;
    uint64_t v18 = v21;
    if (v21 == v23) {
      return DictionaryAttr;
    }
    goto LABEL_12;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v20, (uint64_t *)v21, v16);
  uint64_t v18 = v21;
  if (v21 != v23) {
LABEL_12:
  }
    free(v18);
  return DictionaryAttr;
}

uint64_t mlir::pdl::RewriteOp::setInherentAttr(uint64_t result, _DWORD *__s1, uint64_t a3, void *a4)
{
  uint64_t v5 = result;
  if (a3 == 21)
  {
    uint64_t result = memcmp(__s1, "operand_segment_sizes", 0x15uLL);
    if (result) {
      return result;
    }
  }
  else
  {
    if (a3 != 19)
    {
      if (a3 == 4 && *__s1 == 1701667182)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
            uint64_t v8 = a4;
          }
          else {
            uint64_t v8 = 0;
          }
          *(void *)uint64_t result = v8;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      return result;
    }
    uint64_t result = memcmp(__s1, "operandSegmentSizes", 0x13uLL);
    if (result) {
      return result;
    }
  }
  if (a4)
  {
    uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
    uint64_t v6 = result ? a4 : 0;
    uint64_t v9 = v6;
    if (result)
    {
      uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v9);
      if (result == 2)
      {
        uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v9);
        if (v7) {
          return (uint64_t)memmove((void *)(v5 + 8), (const void *)result, 4 * v7);
        }
      }
    }
  }
  return result;
}

BOOL mlir::pdl::RewriteOp::readProperties(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3)) {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 3)
    {
      BOOL v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        uint64_t v4 = (void **)__p;
        if (__p)
        {
          uint64_t v5 = v24;
          uint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            uint64_t v6 = __p;
          }
          uint64_t v24 = v4;
          operator delete(v6);
        }
        uint64_t v7 = v21;
        if (v21)
        {
          uint64_t v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = (void *)*--v8;
              uint64_t v10 = v11;
              void *v8 = 0;
              if (v11) {
                operator delete[](v10);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          uint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    uint64_t v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 1, v12, 4 * v13);
    }
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 2, (const char *)2);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    int v3 = operator new(0x10uLL);
    void *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &unk_1E8EBA000;
    {
      uint64_t v4 = (void *)&unk_1E8EBA000;
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 108;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        uint64_t v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = (void *)&unk_1E8EBA000;
      }
    }
    a1[33] = v4[333];
    return a1[32];
  }
  return result;
}

uint64_t mlir::pdl::RewriteOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v55[0] = v2;
  if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v3, (const void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v55))return 0; {
  uint64_t v4 = *this;
  }
  unint64_t v5 = *((unsigned int *)*this + 11);
  uint64_t v6 = (v5 >> 23) & 1;
  uint64_t v7 = (uint64_t)&(*this)[2 * v6 + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (const char *)*(unsigned int *)(v7 + 8);
  if ((v5 & 0x800000) == 0)
  {
    uint64_t v9 = 0;
    if (v8 > 1) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
  uint64_t v9 = v4[9];
  if (v8 <= 1)
  {
LABEL_32:
    if (!v8)
    {
      int v33 = v5 & 0x800000;
LABEL_36:
      uint64_t v34 = (uint64_t)&v4[2 * v6 + 8];
      if (BYTE3(v5)) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = 0;
      }
      int v36 = *(_DWORD *)(v35 + 12);
      if (v33)
      {
        uint64_t v37 = v4[9];
        if (v36) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v37 = 0;
        if (v36)
        {
LABEL_41:
          uint64_t v38 = *(unsigned int *)(v35 + 8);
          uint64_t v39 = (v36 + v38) - v38;
          for (uint64_t i = v37 + 32 * v38 + 24;
                mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*this, *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v8);
                i += 32)
          {
            LODWORD(v8) = v8 + 1;
            if (!--v39) {
              return 1;
            }
          }
          return 0;
        }
      }
      return 1;
    }
    if (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(v4, *(void *)(*(void *)(v9 + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      uint64_t v4 = *this;
      unint64_t v5 = *((unsigned int *)*this + 11);
      uint64_t v6 = (v5 >> 23) & 1;
      int v33 = v5 & 0x800000;
      LODWORD(v8) = 1;
      goto LABEL_36;
    }
    return 0;
  }
LABEL_6:
  unint64_t v50 = (const void **)"operand group starting at #";
  __int16 v51 = 259;
  mlir::OpState::emitOpError(this, &v50, (uint64_t)v55);
  if (v55[0])
  {
    int v52 = 5;
    int64_t v53 = 0;
    uint64_t v10 = &v52;
    unint64_t v11 = (char *)v56;
    if (v57 >= v58)
    {
      unint64_t v42 = v57 + 1;
      if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
      {
        int64_t v47 = (char *)&v52 - (unsigned char *)v56;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v42, 24);
        unint64_t v11 = (char *)v56;
        uint64_t v10 = (int *)((char *)v56 + v47);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v42, 24);
        uint64_t v10 = &v52;
        unint64_t v11 = (char *)v56;
      }
    }
    uint64_t v12 = &v11[24 * v57];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    uint64_t v14 = ++v57;
    if (v55[0])
    {
      int v52 = 3;
      int64_t v53 = " requires 0 or 1 element, but found ";
      uint64_t v54 = 36;
      BOOL v15 = &v52;
      __int16 v16 = (char *)v56;
      if (v14 >= v58)
      {
        unint64_t v43 = v14 + 1;
        BOOL v44 = (char *)v56 + 24 * v14 > (char *)&v52;
        if (v56 <= &v52 && v44)
        {
          int64_t v48 = (char *)&v52 - (unsigned char *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
          __int16 v16 = (char *)v56;
          BOOL v15 = (int *)((char *)v56 + v48);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
          BOOL v15 = &v52;
          __int16 v16 = (char *)v56;
        }
      }
      uint64_t v17 = &v16[24 * v57];
      long long v18 = *(_OWORD *)v15;
      *((void *)v17 + 2) = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v17 = v18;
      uint64_t v19 = ++v57;
      if (v55[0])
      {
        int v52 = 5;
        int64_t v53 = v8;
        uint64_t v20 = &v52;
        uint64_t v21 = (char *)v56;
        if (v19 >= v58)
        {
          unint64_t v45 = v19 + 1;
          BOOL v46 = (char *)v56 + 24 * v19 > (char *)&v52;
          if (v56 <= &v52 && v46)
          {
            int64_t v49 = (char *)&v52 - (unsigned char *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
            uint64_t v21 = (char *)v56;
            uint64_t v20 = (int *)((char *)v56 + v49);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
            uint64_t v20 = &v52;
            uint64_t v21 = (char *)v56;
          }
        }
        uint64_t v22 = &v21[24 * v57];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = *((void *)v20 + 2);
        *(_OWORD *)uint64_t v22 = v23;
        ++v57;
      }
    }
  }
  uint64_t v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
  if (v55[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
  }
  if (v64)
  {
    char v25 = (void **)__p;
    if (__p)
    {
      uint64_t v26 = v63;
      char v27 = __p;
      if (v63 != __p)
      {
        do
          uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        char v27 = __p;
      }
      unsigned int v63 = v25;
      operator delete(v27);
    }
    unint64_t v28 = v60;
    if (v60)
    {
      long long v29 = v61;
      int64_t v30 = v60;
      if (v61 != v60)
      {
        do
        {
          int v32 = (void *)*--v29;
          int v31 = v32;
          *long long v29 = 0;
          if (v32) {
            operator delete[](v31);
          }
        }
        while (v29 != v28);
        int64_t v30 = v60;
      }
      char v61 = v28;
      operator delete(v30);
    }
    if (v56 != v59) {
      free(v56);
    }
  }
  return v24;
}

BOOL mlir::pdl::RewriteOp::parse(uint64_t a1, void *a2)
{
  v47[16] = *MEMORY[0x1E4F143B8];
  unint64_t v45 = v47;
  uint64_t v46 = 0x400000000;
  unint64_t v42 = v44;
  uint64_t v43 = 0x400000000;
  uint64_t v39 = 0;
  v40[0] = &v41;
  v40[1] = (void *)0x100000000;
  uint64_t v4 = (mlir::Region *)operator new(0x18uLL);
  *(void *)uint64_t v4 = v4;
  *((void *)v4 + 1) = v4;
  *((void *)v4 + 2) = 0;
  uint64_t v38 = v4;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v35 = 0;
  int v36 = 0;
  uint64_t v37 = 0;
  unsigned __int16 v5 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 680))(a1, &v35, 1);
  if (v5 >= 0x100u)
  {
    if (!(_BYTE)v5) {
      goto LABEL_28;
    }
    uint64_t v6 = &v35;
    uint64_t v7 = (char *)v45;
    if (v46 >= HIDWORD(v46))
    {
      unint64_t v32 = v46 + 1;
      if (v45 <= &v35 && (char *)v45 + 32 * v46 > (char *)&v35)
      {
        int64_t v33 = (char *)&v35 - (unsigned char *)v45;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v47, v32, 32);
        uint64_t v7 = (char *)v45;
        uint64_t v6 = (uint64_t *)((char *)v45 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v47, v32, 32);
        uint64_t v6 = &v35;
        uint64_t v7 = (char *)v45;
      }
    }
    uint64_t v8 = &v7[32 * v46];
    long long v9 = *((_OWORD *)v6 + 1);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v6;
    *((_OWORD *)v8 + 1) = v9;
    LODWORD(v46) = v46 + 1;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "with", 4))
  {
LABEL_15:
    uint64_t v14 = 0;
    goto LABEL_16;
  }
  uint64_t v10 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v12 = mlir::NoneType::get(*v10, v11);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v39, v12))
  {
LABEL_28:
    BOOL v16 = 0;
    goto LABEL_29;
  }
  if (v39)
  {
    long long v13 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(a2);
    *long long v13 = v39;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 272))(a1)) {
    goto LABEL_15;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v42, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v40)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
  {
    goto LABEL_28;
  }
LABEL_16:
  unsigned __int16 v15 = (*(uint64_t (**)(uint64_t, mlir::Region *, void, void, void))(*(void *)a1 + 752))(a1, v4, 0, 0, 0);
  BOOL v16 = 0;
  if (v15 < 0x100u || v15 != 0)
  {
    uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 464))(a1, a2 + 14))
    {
      uint64_t v18 = a2[1];
      uint64_t v35 = a1;
      int v36 = &v34;
      uint64_t v37 = a2;
      uint64_t v19 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(void **)(v18 + 96));
      if (!v19
        || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v19, (const void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::RewriteOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v35))
      {
        mlir::OperationState::addRegion((uint64_t)a2, (unint64_t)&v38);
        uint64_t v20 = v46;
        uint64_t v21 = v43;
        *(void *)(mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(a2)
                  + 8) = v20 | (v21 << 32);
        uint64_t v22 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
        TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v22);
        uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
        uint64_t v25 = (uint64_t)(a2 + 2);
        if (!v46)
        {
LABEL_27:
          BOOL v16 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v42, (uint64_t)v40, v14, v25) != 0;
          goto LABEL_29;
        }
        uint64_t v26 = SingletonImpl;
        char v27 = (char *)v45;
        uint64_t v28 = 32 * v46;
        while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v27, v26, v25))
        {
          v27 += 32;
          v28 -= 32;
          if (!v28) {
            goto LABEL_27;
          }
        }
      }
    }
    goto LABEL_28;
  }
LABEL_29:
  long long v29 = v38;
  uint64_t v38 = 0;
  if (v29)
  {
    mlir::Region::~Region(v29);
    operator delete(v30);
  }
  if (v40[0] != &v41) {
    free(v40[0]);
  }
  if (v42 != v44) {
    free(v42);
  }
  if (v45 != v47) {
    free(v45);
  }
  return v16;
}

void mlir::pdl::RewriteOp::print(unsigned int **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *this;
  unint64_t v5 = (*this)[11];
  unint64_t v6 = (v5 >> 23) & 1;
  uint64_t v7 = (uint64_t)&(*this)[4 * v6 + 16];
  if (!HIBYTE((*this)[11])) {
    uint64_t v7 = 0;
  }
  int v8 = *(_DWORD *)(v7 + 8);
  if ((v5 & 0x800000) != 0)
  {
    uint64_t v9 = *((void *)v4 + 9);
    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (!v8) {
      goto LABEL_15;
    }
  }
  if (*(void *)(v9 + 24))
  {
    uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if ((unint64_t)v11 >= *((void *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((void *)v10 + 4) = v11 + 1;
      *unint64_t v11 = 32;
    }
    uint64_t v4 = *this;
    unint64_t v12 = (*this)[11];
    unint64_t v6 = (v12 >> 23) & 1;
    uint64_t v13 = (uint64_t)&(*this)[4 * v6 + 16];
    if (!HIBYTE((*this)[11])) {
      uint64_t v13 = 0;
    }
    int v14 = *(_DWORD *)(v13 + 8);
    if ((v12 & 0x800000) != 0)
    {
      uint64_t v15 = *((void *)v4 + 9);
      if (!v14) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v15 = 0;
      if (!v14) {
        goto LABEL_15;
      }
    }
    if (*(void *)(v15 + 24))
    {
      (*(void (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 160))(a2);
      uint64_t v4 = *this;
      unint64_t v6 = ((unint64_t)(*this)[11] >> 23) & 1;
    }
  }
LABEL_15:
  if (!*(void *)&v4[4 * v6 + 16]) {
    goto LABEL_52;
  }
  BOOL v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    unsigned char *v17 = 32;
  }
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (_DWORD *)*((void *)v18 + 4);
  if (*((void *)v18 + 3) - (void)v19 > 3uLL)
  {
    *uint64_t v19 = 1752459639;
    *((void *)v18 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v18, "with", 4uLL);
  }
  uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
  if ((unint64_t)v21 >= *((void *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    unsigned char *v21 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)&(*this)[4 * (((unint64_t)(*this)[11] >> 23) & 1) + 16]);
  unint64_t v22 = (unint64_t)&(*this)[4 * (((unint64_t)(*this)[11] >> 23) & 1) + 16];
  if (!HIBYTE((*this)[11])) {
    unint64_t v22 = 0;
  }
  if (!*(_DWORD *)(v22 + 12))
  {
LABEL_52:
    uint64_t v46 = *this;
    unint64_t v47 = (*this)[11];
    if ((v47 & 0x7FFFFF) != 0) {
      goto LABEL_53;
    }
LABEL_56:
    if (!MEMORY[0]) {
      goto LABEL_63;
    }
LABEL_57:
    int64_t v49 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v50 = (unsigned char *)*((void *)v49 + 4);
    if ((unint64_t)v50 >= *((void *)v49 + 3))
    {
      llvm::raw_ostream::write(v49, 32);
      __int16 v51 = *this;
      unint64_t v52 = (*this)[11];
      if ((v52 & 0x7FFFFF) != 0) {
        goto LABEL_59;
      }
    }
    else
    {
      *((void *)v49 + 4) = v50 + 1;
      *unint64_t v50 = 32;
      __int16 v51 = *this;
      unint64_t v52 = (*this)[11];
      if ((v52 & 0x7FFFFF) != 0)
      {
LABEL_59:
        unint64_t v53 = (((unint64_t)&v51[4 * ((v52 >> 23) & 1) + 17] + ((v52 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
            + 32 * v51[10];
LABEL_62:
        (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 224))(a2, v53, 1, 1, 0);
        uint64_t v46 = *this;
        LODWORD(v47) = (*this)[11];
        goto LABEL_63;
      }
    }
    unint64_t v53 = 0;
    goto LABEL_62;
  }
  long long v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v24 = (unsigned char *)*((void *)v23 + 4);
  if (*((unsigned char **)v23 + 3) == v24)
  {
    llvm::raw_ostream::write(v23, "(", 1uLL);
  }
  else
  {
    *uint64_t v24 = 40;
    ++*((void *)v23 + 4);
  }
  unint64_t v25 = (*this)[11];
  if (HIBYTE((*this)[11])) {
    uint64_t v26 = (uint64_t)&(*this)[4 * ((v25 >> 23) & 1) + 16];
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = *(unsigned int *)(v26 + 8);
  int v28 = *(_DWORD *)(v26 + 12);
  if ((v25 & 0x800000) != 0) {
    uint64_t v29 = *((void *)*this + 9);
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v30 = v29 + 32 * v27;
  uint64_t v31 = (v28 + v27) - v27;
  unint64_t v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v59 = ", ";
  uint64_t v60 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v30, 0, v30, v31, (uint64_t)a2, v32, (uint64_t)&v59);
  int64_t v33 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v34 = (unsigned char *)*((void *)v33 + 4);
  if ((unint64_t)v34 >= *((void *)v33 + 3))
  {
    llvm::raw_ostream::write(v33, 32);
  }
  else
  {
    *((void *)v33 + 4) = v34 + 1;
    *uint64_t v34 = 32;
  }
  uint64_t v35 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v36 = (unsigned char *)*((void *)v35 + 4);
  if (*((unsigned char **)v35 + 3) == v36)
  {
    llvm::raw_ostream::write(v35, ":", 1uLL);
  }
  else
  {
    *int v36 = 58;
    ++*((void *)v35 + 4);
  }
  uint64_t v37 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v38 = (unsigned char *)*((void *)v37 + 4);
  if ((unint64_t)v38 >= *((void *)v37 + 3))
  {
    llvm::raw_ostream::write(v37, 32);
  }
  else
  {
    *((void *)v37 + 4) = v38 + 1;
    *uint64_t v38 = 32;
  }
  unint64_t v39 = (*this)[11];
  if (HIBYTE((*this)[11])) {
    uint64_t v40 = (uint64_t)&(*this)[4 * ((v39 >> 23) & 1) + 16];
  }
  else {
    uint64_t v40 = 0;
  }
  uint64_t v41 = *(unsigned int *)(v40 + 8);
  int v42 = *(_DWORD *)(v40 + 12);
  if ((v39 & 0x800000) != 0) {
    uint64_t v43 = *((void *)*this + 9);
  }
  else {
    uint64_t v43 = 0;
  }
  v57[0] = v43 + 32 * v41;
  v57[1] = (v42 + v41) - v41;
  mlir::OperandRange::getTypes(v57, (uint64_t *)&v59);
  v58[0] = ", ";
  v58[1] = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v59, v60, (uint64_t)v61, v62, (uint64_t)a2, (uint64_t)a2, (uint64_t)v58);
  BOOL v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v45 = (unsigned char *)*((void *)v44 + 4);
  if (*((unsigned char **)v44 + 3) != v45)
  {
    unsigned char *v45 = 41;
    ++*((void *)v44 + 4);
    goto LABEL_52;
  }
  llvm::raw_ostream::write(v44, ")", 1uLL);
  uint64_t v46 = *this;
  unint64_t v47 = (*this)[11];
  if ((v47 & 0x7FFFFF) == 0) {
    goto LABEL_56;
  }
LABEL_53:
  int64_t v48 = (void *)((((unint64_t)&v46[4 * ((v47 >> 23) & 1) + 17] + ((v47 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * v46[10]);
  if ((void *)*v48 != v48) {
    goto LABEL_57;
  }
LABEL_63:
  uint64_t v59 = &v61;
  char v61 = "operandSegmentSizes";
  uint64_t v62 = 19;
  unsigned int v63 = "name";
  uint64_t v64 = 4;
  uint64_t v60 = 0x200000002;
  if (BYTE3(v47))
  {
    v58[0] = mlir::Operation::getAttrDictionary((mlir::Operation *)v46);
    uint64_t v54 = (mlir::ArrayAttr *)v58;
  }
  else
  {
    uint64_t v54 = (mlir::ArrayAttr *)(v46 + 14);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v54);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 200))(a2, Value, v56, v59, v60);
  if (v59 != &v61) {
    free(v59);
  }
}

uint64_t mlir::pdl::TypeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      unint64_t v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      uint64_t v26 = &v44;
      uint64_t v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v27 = (char *)v48;
          uint64_t v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v26 = &v44;
          uint64_t v27 = (char *)v48;
        }
      }
      int v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)int v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v55;
      unint64_t v32 = __p;
      if (v55 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      int64_t v55 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    int64_t v33 = v53;
    long long v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v35 = (void *)*--v33;
      uint64_t v34 = v35;
      *int64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "constantType", 0xCuLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 57;
    uint64_t v10 = &v44;
    unint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        unint64_t v11 = (char *)v48;
        uint64_t v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v10 = &v44;
        unint64_t v11 = (char *)v48;
      }
    }
    unint64_t v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)unint64_t v12 = v13;
    ++v49;
    if (v47[0])
    {
      int v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      uint64_t v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v15 = (char *)v48;
          int v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          int v14 = &v44;
          uint64_t v15 = (char *)v48;
        }
      }
      BOOL v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)BOOL v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  uint64_t v18 = (void **)__p;
  if (__p)
  {
    uint64_t v19 = v55;
    uint64_t v20 = __p;
    if (v55 != __p)
    {
      do
        uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      uint64_t v20 = __p;
    }
    int64_t v55 = v18;
    operator delete(v20);
  }
  uint64_t v21 = v52;
  if (v52)
  {
    unint64_t v22 = v53;
    long long v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      unint64_t v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *unint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_41:
    long long v23 = v52;
LABEL_42:
    unint64_t v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

uint64_t mlir::pdl::TypeOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  unint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"constantType", 12, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    uint64_t v33 = a1;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v33);
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    uint64_t v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    BOOL v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        BOOL v8 = (char *)v35;
        uint64_t v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        BOOL v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      long long v29 = a2;
      uint64_t v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        uint64_t v30 = "' failed to satisfy constraint: any type attribute";
        uint64_t v31 = 50;
        unint64_t v11 = &v29;
        unint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            unint64_t v12 = (char *)v35;
            unint64_t v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            unint64_t v11 = &v29;
            unint64_t v12 = (char *)v35;
          }
        }
        long long v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)long long v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    BOOL v16 = (void **)__p;
    if (__p)
    {
      long long v17 = v42;
      uint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          long long v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      int64_t v42 = v16;
      operator delete(v18);
    }
    uint64_t v19 = v39;
    if (v39)
    {
      uint64_t v20 = v40;
      uint64_t v21 = v39;
      if (v40 != v39)
      {
        do
        {
          long long v23 = (void *)*--v20;
          unint64_t v22 = v23;
          *uint64_t v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v39;
      }
      int64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &unk_1E8EBA000;
    {
      uint64_t v4 = (void *)&unk_1E8EBA000;
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 105;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = (void *)&unk_1E8EBA000;
      }
    }
    a1[33] = v4[335];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::TypeAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  int v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        unint64_t v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    BOOL v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)BOOL v8 = v9;
    ++v47;
  }
  int64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypeAttr]";
  unint64_t v41 = 64;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    int64_t v40 = (const void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      unint64_t v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          unint64_t v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      BOOL v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)BOOL v16 = v17;
      ++v47;
      if (v44)
      {
        uint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        uint64_t v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v19 = (char *)v46;
            uint64_t v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v18 = &v40;
            uint64_t v19 = (char *)v46;
          }
        }
        uint64_t v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    long long v23 = (void **)__p;
    if (__p)
    {
      uint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      unint64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = (void *)*--v27;
          long long v29 = v30;
          void *v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      __int16 v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::pdl::TypeOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  v15[0] = a1;
  v15[1] = &v16;
  v15[2] = a2;
  uint64_t v5 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v4 + 96));
  if (v5)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v5, (const void **)"constantType", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::TypeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v15))return 0; {
  }
    }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1))
  {
    unint64_t v6 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v8 = mlir::NoneType::get(*v6, v7);
    if (mlir::AsmParser::parseAttribute<mlir::TypeAttr>(a1, &v17, v8))
    {
      if (v17)
      {
        long long v9 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>((void *)a2);
        *long long v9 = v17;
      }
      goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  unint64_t v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v10);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
  uint64_t v13 = *(unsigned int *)(a2 + 72);
  if (v13 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v13) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::pdl::TypeOp::print(mlir::pdl::TypeOp *this, mlir::OpAsmPrinter *a2)
{
  void v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = v17;
  v17[0] = "constantType";
  v17[1] = 12;
  uint64_t v16 = 0x200000001;
  uint64_t v4 = *(unsigned char **)this;
  if (v4[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v7, v15, v16);
  if (*(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64))
  {
    uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    long long v9 = (unsigned char *)*((void *)v8 + 4);
    if ((unint64_t)v9 >= *((void *)v8 + 3))
    {
      llvm::raw_ostream::write(v8, 32);
    }
    else
    {
      *((void *)v8 + 4) = v9 + 1;
      *long long v9 = 32;
    }
    unint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if (*((unsigned char **)v10 + 3) == v11)
    {
      llvm::raw_ostream::write(v10, ":", 1uLL);
    }
    else
    {
      *unint64_t v11 = 58;
      ++*((void *)v10 + 4);
    }
    uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if ((unint64_t)v13 >= *((void *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((void *)v12 + 4) = v13 + 1;
      *uint64_t v13 = 32;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64));
  }
  if (v15 != v17) {
    free(v15);
  }
}

uint64_t mlir::pdl::TypesOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      uint64_t v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      unint64_t v26 = &v44;
      int64_t v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          int64_t v27 = (char *)v48;
          unint64_t v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          unint64_t v26 = &v44;
          int64_t v27 = (char *)v48;
        }
      }
      int64_t v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)int64_t v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v55;
      unint64_t v32 = __p;
      if (v55 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      uint64_t v55 = v30;
      operator delete(v32);
    }
    long long v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    unint64_t v33 = v53;
    long long v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      int64_t v35 = (void *)*--v33;
      unint64_t v34 = v35;
      *unint64_t v33 = 0;
      if (v35) {
        operator delete[](v34);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "constantTypes", 0xDuLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 58;
    unint64_t v10 = &v44;
    unint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        unint64_t v11 = (char *)v48;
        unint64_t v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        unint64_t v10 = &v44;
        unint64_t v11 = (char *)v48;
      }
    }
    uint64_t v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v49;
    if (v47[0])
    {
      unint64_t v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      uint64_t v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v15 = (char *)v48;
          unint64_t v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          unint64_t v14 = &v44;
          uint64_t v15 = (char *)v48;
        }
      }
      uint64_t v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  uint64_t v18 = (void **)__p;
  if (__p)
  {
    uint64_t v19 = v55;
    uint64_t v20 = __p;
    if (v55 != __p)
    {
      do
        uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      uint64_t v20 = __p;
    }
    uint64_t v55 = v18;
    operator delete(v20);
  }
  long long v21 = v52;
  if (v52)
  {
    uint64_t v22 = v53;
    long long v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      unint64_t v25 = (void *)*--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        operator delete[](v24);
      }
    }
    while (v22 != v21);
LABEL_41:
    long long v23 = v52;
LABEL_42:
    unint64_t v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

uint64_t mlir::pdl::TypesOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"constantTypes", 13, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(const void **a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  if (*((_UNKNOWN **)*a1 + 17) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    int64_t v35 = a1;
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    uint64_t v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    uint64_t v29 = v27 + 8 * v28;
    if (v29 != Value)
    {
      while (*(void *)Value
           && *(_UNKNOWN **)(**(void **)Value + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
      {
        uint64_t v39 = *(void *)Value;
        mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v39);
        Value += 8;
        if (Value == v29) {
          return 1;
        }
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v39, a5);
  if (v39)
  {
    LODWORD(v35) = 3;
    int64_t v36 = "attribute '";
    uint64_t v37 = 11;
    uint64_t v9 = &v35;
    unint64_t v10 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v31 = v42 + 1;
      if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
      {
        int64_t v33 = (char *)&v35 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        unint64_t v10 = (char *)v41;
        uint64_t v9 = (const void ***)((char *)v41 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        uint64_t v9 = &v35;
        unint64_t v10 = (char *)v41;
      }
    }
    unint64_t v11 = &v10[24 * v42];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)unint64_t v11 = v12;
    ++v42;
    if (v39)
    {
      __int16 v38 = 261;
      int64_t v35 = a2;
      int64_t v36 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v40, &v35);
      if (v39)
      {
        LODWORD(v35) = 3;
        int64_t v36 = "' failed to satisfy constraint: type array attribute";
        uint64_t v37 = 52;
        long long v13 = &v35;
        uint64_t v14 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v32 = v42 + 1;
          if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
          {
            int64_t v34 = (char *)&v35 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            uint64_t v14 = (char *)v41;
            long long v13 = (const void ***)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            long long v13 = &v35;
            uint64_t v14 = (char *)v41;
          }
        }
        uint64_t v15 = &v14[24 * v42];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)uint64_t v15 = v16;
        ++v42;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  if (v39) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  }
  if (v49)
  {
    uint64_t v18 = (void **)__p;
    if (__p)
    {
      uint64_t v19 = v48;
      uint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unsigned int v48 = v18;
      operator delete(v20);
    }
    long long v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      long long v23 = v45;
      if (v46 != v45)
      {
        do
        {
          unint64_t v25 = (void *)*--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        long long v23 = v45;
      }
      uint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v17;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    uint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    uint64_t v4 = &unk_1E8EBA000;
    {
      uint64_t v4 = (void *)&unk_1E8EBA000;
      if (v5)
      {
        long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 106;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        BOOL v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
        uint64_t v4 = (void *)&unk_1E8EBA000;
      }
    }
    a1[33] = v4[337];
    return a1[32];
  }
  return result;
}

uint64_t mlir::pdl::TypesOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = 0;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  v16[0] = a1;
  v16[1] = &v17;
  void v16[2] = a2;
  int v5 = (const void **)mlir::NamedAttrList::get(a2 + 112, **(void **)(v4 + 96));
  if (v5)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v5, (const void **)"constantTypes", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::TypesOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v16))return 0; {
  }
    }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 112))(a1))
  {
    unint64_t v6 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v8 = mlir::NoneType::get(*v6, v7);
    if (mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v18, v8))
    {
      if (v18)
      {
        unint64_t v9 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>((void *)a2);
        *unint64_t v9 = v18;
      }
      goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  uint64_t v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v10);
  uint64_t SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
  uint64_t v13 = mlir::pdl::RangeType::get(SingletonImpl);
  uint64_t v14 = *(unsigned int *)(a2 + 72);
  if (v14 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v14) = v13;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::pdl::TypesOp::print(mlir::pdl::TypesOp *this, mlir::OpAsmPrinter *a2)
{
  void v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = v17;
  v17[0] = "constantTypes";
  v17[1] = 13;
  uint64_t v16 = 0x200000001;
  uint64_t v4 = *(unsigned char **)this;
  if (v4[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v7, v15, v16);
  if (*(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64))
  {
    uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v9 = (unsigned char *)*((void *)v8 + 4);
    if ((unint64_t)v9 >= *((void *)v8 + 3))
    {
      llvm::raw_ostream::write(v8, 32);
    }
    else
    {
      *((void *)v8 + 4) = v9 + 1;
      *unint64_t v9 = 32;
    }
    uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unint64_t v11 = (unsigned char *)*((void *)v10 + 4);
    if (*((unsigned char **)v10 + 3) == v11)
    {
      llvm::raw_ostream::write(v10, ":", 1uLL);
    }
    else
    {
      *unint64_t v11 = 58;
      ++*((void *)v10 + 4);
    }
    uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if ((unint64_t)v13 >= *((void *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((void *)v12 + 4) = v13 + 1;
      *uint64_t v13 = 32;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64));
  }
  if (v15 != v17) {
    free(v15);
  }
}

uint64_t hasBindingUse(mlir::Operation *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 9);
  uint64_t v3 = (char *)a1 - 16;
  if (v2) {
    uint64_t v4 = (char *)a1 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)&v13[0] = v4;
  *((void *)&v13[0] + 1) = v2;
  mlir::ResultRange::use_begin((uint64_t *)v13, (uint64_t *)v17);
  uint64_t v5 = *((unsigned int *)a1 + 9);
  if (v5) {
    uint64_t v6 = (uint64_t)v3;
  }
  else {
    uint64_t v6 = 0;
  }
  v19[0] = v6;
  v19[1] = v5;
  mlir::ResultRange::use_end(v19, v15);
  uint64_t v7 = v18;
  uint64_t v14 = v18;
  v13[0] = v17[0];
  v13[1] = v17[1];
  uint64_t v8 = v16;
  if (v18 == v16) {
    return 0;
  }
  while (1)
  {
    unint64_t v9 = *(mlir::Operation **)(v7 + 16);
    uint64_t v10 = *(int **)(*((void *)v9 + 6) + 16);
    BOOL v11 = v10 == &mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id
       || v10 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id;
    if (!v11 || (hasBindingUse(v9) & 1) != 0) {
      break;
    }
    mlir::ResultRange::UseIterator::operator++((uint64_t *)v17);
    uint64_t v7 = v18;
    if (v18 == v8) {
      return 0;
    }
  }
  return 1;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::ZeroResults>(void *a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v14 = 83;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, v1[5]);
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::VariadicResults>(void *a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v14 = 87;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, v1[449]);
}

uint64_t mlir::Diagnostic::append<char const(&)[56],mlir::RegisteredOperationName &,char const(&)[42]>(uint64_t a1, char *__s, uint64_t *a3, const char *a4)
{
  size_t v8 = strlen(__s);
  uint64_t v9 = a1 + 16;
  unint64_t v10 = *(void *)(a1 + 16);
  int v19 = 3;
  uint64_t v20 = __s;
  size_t v21 = v8;
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  uint64_t v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v16 = v11 + 1;
    BOOL v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      uint64_t v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      uint64_t v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      uint64_t v12 = &v19;
    }
  }
  uint64_t v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  long long v14 = *(_OWORD *)v12;
  *(void *)(v13 + 16) = *((void *)v12 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<mlir::RegisteredOperationName &,char const(&)[42]>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<mlir::RegisteredOperationName &,char const(&)[42]>(uint64_t a1, uint64_t *a2, const char *a3)
{
  mlir::Diagnostic::operator<<(a1, *a2);
  size_t v5 = strlen(a3);
  uint64_t v6 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  int v16 = 3;
  BOOL v17 = a3;
  size_t v18 = v5;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = &v16;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v13 = v8 + 1;
    BOOL v14 = v7 + 24 * v8 > (unint64_t)&v16;
    if (v7 <= (unint64_t)&v16 && v14)
    {
      uint64_t v15 = (char *)&v16 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v13, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      uint64_t v9 = (int *)&v15[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v13, 24);
      unint64_t v7 = *(void *)(a1 + 16);
      uint64_t v9 = &v16;
    }
  }
  uint64_t v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t visit(mlir::Operation *,llvm::DenseSet<mlir::Operation *,llvm::DenseMapInfo<mlir::Operation *,void>> &)::$_1::operator()<mlir::pdl::ResultsOp>(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)(a2 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v5);
  return visit(DefiningOp, *a1);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseOperationOpAttributes(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::ArrayAttr &)::$_0>(uint64_t *a1)
{
  uint64_t v18 = 0;
  memset(v17, 0, 24);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(*a1, &v18, 0)
    || !(*(unsigned __int8 (**)(void))(*(void *)*a1 + 136))()
    || !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)*a1 + 672))(*a1, v17, 1))
  {
    return 0;
  }
  uint64_t v2 = a1[1];
  uint64_t v3 = v18;
  uint64_t v4 = *(unsigned int *)(v2 + 8);
  if (v4 >= *(_DWORD *)(v2 + 12))
  {
    uint64_t v15 = v18;
    uint64_t v16 = a1[1];
    llvm::SmallVectorBase<unsigned int>::grow_pod(v2, (void *)(v2 + 16), v4 + 1, 8);
    uint64_t v3 = v15;
    uint64_t v2 = v16;
    LODWORD(v4) = *(_DWORD *)(v16 + 8);
  }
  *(void *)(*(void *)v2 + 8 * v4) = v3;
  ++*(_DWORD *)(v2 + 8);
  uint64_t v5 = a1[2];
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  unint64_t v7 = *(void *)v5;
  uint64_t v8 = (char *)v17;
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    unint64_t v12 = v6 + 1;
    BOOL v13 = v7 + 32 * v6 > (unint64_t)v17;
    if (v7 <= (unint64_t)v17 && v13)
    {
      BOOL v14 = (char *)v17 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v12, 32);
      unint64_t v7 = *(void *)v5;
      uint64_t v8 = &v14[*(void *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v12, 32);
      unint64_t v7 = *(void *)v5;
      uint64_t v8 = (char *)v17;
    }
  }
  uint64_t v9 = (_OWORD *)(v7 + 32 * *(unsigned int *)(v5 + 8));
  long long v10 = *((_OWORD *)v8 + 1);
  *uint64_t v9 = *(_OWORD *)v8;
  v9[1] = v10;
  ++*(_DWORD *)(v5 + 8);
  return 1;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::ApplyNativeConstraintOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.apply_native_constraint", 27, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ApplyNativeConstraintOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9B87D8;
  uint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::ApplyNativeConstraintOp::getAttributeNames(void)::attrNames, 2);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::ApplyNativeRewriteOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.apply_native_rewrite", 24, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ApplyNativeRewriteOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9B8710;
  uint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::ApplyNativeRewriteOp::getAttributeNames(void)::attrNames, 1);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::AttributeOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.attribute", 13, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9B8580;
  uint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::AttributeOp::getAttributeNames(void)::attrNames, 1);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::EraseOp>(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.erase", 9, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::EraseOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9B8968;
  uint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::OperandOp>(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.operand", 11, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9B8C88;
  uint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::OperandsOp>(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.operands", 12, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9B84B8;
  uint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::OperationOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::OperationOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.operation", 13, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9B8648;
  uint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::OperationOp::getAttributeNames(void)::attrNames, 3);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::RangeOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::RangeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::RangeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.range", 9, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::RangeOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9B8A30;
  uint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::ReplaceOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ReplaceOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.replace", 11, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ReplaceOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9B8E18;
  uint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::ReplaceOp::getAttributeNames(void)::attrNames, 1);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::RewriteOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.rewrite", 11, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9B8FA8;
  uint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::RewriteOp::getAttributeNames(void)::attrNames, 2);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::TypeOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.type", 8, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9B88A0;
  uint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::TypeOp::getAttributeNames(void)::attrNames, 1);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::TypesOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypesOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.types", 9, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  void *v2 = &unk_1EC9B8AF8;
  uint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::TypesOp::getAttributeNames(void)::attrNames, 1);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::getParseAssemblyFn(void *a1@<X8>)
{
  *a1 = mlir::pdl::ApplyNativeConstraintOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v7 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v7 = 0;
  }
  if (a4 == 4)
  {
    if (*(_DWORD *)a3 != 1701667182) {
      return 0;
    }
    return v7[1];
  }
  else
  {
    if (a4 != 9) {
      return 0;
    }
    if (*(void *)a3 != 0x65746167654E7369 || *(unsigned char *)(a3 + 8) != 100) {
      return 0;
    }
    return *v7;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v11 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v11);
  if (v7 == 4)
  {
    if (*(_DWORD *)result == 1701667182)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
          char v9 = a4;
        }
        else {
          char v9 = 0;
        }
        v5[1] = v9;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (v7 == 9 && *(void *)result == 0x65746167654E7369 && *(unsigned char *)(result + 8) == 100)
  {
    if (a4)
    {
      uint64_t result = mlir::BoolAttr::classof(a4);
      if (result) {
        uint64_t v10 = a4;
      }
      else {
        uint64_t v10 = 0;
      }
      *uint64_t v5 = v10;
    }
    else
    {
      *uint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"isNegated", 9, *v5);
  }
  uint64_t v6 = v5[1];
  if (v6)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, v6);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  char v9 = (void *)mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  BOOL result = 0;
  if (!v9
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v9, (const void **)"isNegated", (const char *)9, a4, a5))
  {
    uint64_t v10 = mlir::NamedAttrList::get(a3, *(void *)(*(void *)(a2 + 96) + 8));
    if (!v10
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v10, (const void **)"name", (const char *)4, a4, a5))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::getOpPropertyByteSize()
{
  return 16;
}

mlir::BoolAttr *mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  uint64_t v6 = *(mlir::BoolAttr **)(a2 + 8);
  BOOL result = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  uint64_t v6 = result;
  if (!*(void *)a3)
  {
    BOOL result = (mlir::BoolAttr *)mlir::Builder::getBoolAttr(&v6, 0);
    *(void *)a3 = result;
  }
  return result;
}

mlir::BoolAttr *mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t v5 = *(mlir::BoolAttr **)(a2 + 8);
  BOOL result = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v5);
  uint64_t v5 = result;
  if (!*a3)
  {
    BOOL result = (mlir::BoolAttr *)mlir::Builder::getBoolAttr(&v5, 0);
    *a3 = result;
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ApplyNativeConstraintOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::pdl::ApplyNativeConstraintOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::ModuleOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (void *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::BoolAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    int v4 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    int v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *v4);
  uint64_t v5 = v4[1];
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 16);

  return v6(a3, v5);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v105 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      unint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v113 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      int64_t v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[5];
  uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      unsigned int v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[12];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v113 = 88;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      unint64_t v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[14];
  uint64_t v9 = &unk_1E8EBA000;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    uint64_t v9 = (void *)&unk_1E8EBA000;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<Empty>]";
      unint64_t v113 = 109;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      char v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v9 = (void *)&unk_1E8EBA000;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[269];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      uint64_t v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v113 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      uint64_t v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || *(void *)(v13 + 2744) == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::ApplyNativeConstraintOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::ApplyNativeConstraintOp>::verifyTrait((uint64_t *)a1)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::pdl::ApplyNativeConstraintOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::pdl::ApplyNativeConstraintOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::ApplyNativeConstraintOp>::verifyTrait(uint64_t *a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    unint64_t v35 = "expects parent op ";
    uint64_t v36 = 18;
    uint64_t v4 = &v34;
    uint64_t v5 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        int64_t v29 = (char *)&v34 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v5 = (char *)v39;
        uint64_t v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = &v34;
        uint64_t v5 = (char *)v39;
      }
    }
    uint64_t v6 = &v5[24 * v40];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v40;
  }
  int v31 = "'";
  uint64_t v8 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  uint64_t v9 = (uint64_t)v8;
  v37[0] = "pdl.pattern";
  v37[1] = 11;
  if (*v8)
  {
    int64_t v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(void *)v9)
    {
      uint64_t v10 = v9 + 24;
      unint64_t v11 = *(void *)(v9 + 24);
      LODWORD(v34) = 3;
      unint64_t v35 = "'";
      uint64_t v36 = 1;
      uint64_t v12 = *(unsigned int *)(v9 + 32);
      unint64_t v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        unint64_t v27 = v12 + 1;
        BOOL v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          int v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          unint64_t v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          unint64_t v13 = &v34;
        }
      }
      uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    BOOL v17 = (void **)__p;
    if (__p)
    {
      uint64_t v18 = v46;
      int v19 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        int v19 = __p;
      }
      unint64_t v46 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v43;
    if (v43)
    {
      int v21 = v44;
      int v22 = v43;
      if (v44 != v43)
      {
        do
        {
          unint64_t v24 = (void *)*--v21;
          unint64_t v23 = v24;
          void *v21 = 0;
          if (v24) {
            operator delete[](v23);
          }
        }
        while (v21 != v20);
        int v22 = v43;
      }
      unint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

uint64_t mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::ApplyNativeRewriteOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (a4 == 4 && *a3 == 1701667182) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

_DWORD *mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  __n128 result = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 4 && *result == 1701667182)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
        uint64_t v8 = a4;
      }
      else {
        uint64_t v8 = 0;
      }
      *uint64_t v5 = v8;
    }
    else
    {
      *uint64_t v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, v5);
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7 = mlir::NamedAttrList::get(a3, **(void **)(a2 + 96));
  return !v7
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v7, (const void **)"name", (const char *)4, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ApplyNativeRewriteOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::GetGlobalOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>::readProperties(uint64_t a1, void *a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v105 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      unint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v113 = 87;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      int64_t v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[449];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      unsigned int v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[12];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v113 = 88;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      unint64_t v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[14];
  uint64_t v9 = &unk_1E8EBA000;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    uint64_t v9 = (void *)&unk_1E8EBA000;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<Empty>]";
      unint64_t v113 = 109;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      char v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v9 = (void *)&unk_1E8EBA000;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[275];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      uint64_t v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v113 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      uint64_t v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || *(void *)(v13 + 2744) == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::ApplyNativeRewriteOp::print((mlir::pdl::ApplyNativeRewriteOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ApplyNativeRewriteOp>::verifyTrait((uint64_t *)a1)) {
    return 0;
  }
  unint64_t v5 = a1;
  if (!mlir::pdl::ApplyNativeRewriteOp::verifyInvariantsImpl((uint64_t **)&v5)) {
    return 0;
  }
  unint64_t v5 = a1;
  return mlir::pdl::ApplyNativeRewriteOp::verify((uint64_t **)&v5) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ApplyNativeRewriteOp>::verifyTrait(uint64_t *a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    unint64_t v35 = "expects parent op ";
    uint64_t v36 = 18;
    uint64_t v4 = &v34;
    unint64_t v5 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        int64_t v29 = (char *)&v34 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        unint64_t v5 = (char *)v39;
        uint64_t v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = &v34;
        unint64_t v5 = (char *)v39;
      }
    }
    uint64_t v6 = &v5[24 * v40];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v40;
  }
  int v31 = "'";
  uint64_t v8 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  uint64_t v9 = (uint64_t)v8;
  v37[0] = "pdl.rewrite";
  v37[1] = 11;
  if (*v8)
  {
    int64_t v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(void *)v9)
    {
      uint64_t v10 = v9 + 24;
      unint64_t v11 = *(void *)(v9 + 24);
      LODWORD(v34) = 3;
      unint64_t v35 = "'";
      uint64_t v36 = 1;
      uint64_t v12 = *(unsigned int *)(v9 + 32);
      unint64_t v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        unint64_t v27 = v12 + 1;
        BOOL v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          int v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          unint64_t v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          unint64_t v13 = &v34;
        }
      }
      uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    BOOL v17 = (void **)__p;
    if (__p)
    {
      uint64_t v18 = v46;
      int v19 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        int v19 = __p;
      }
      unint64_t v46 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v43;
    if (v43)
    {
      int v21 = v44;
      int v22 = v43;
      if (v44 != v43)
      {
        do
        {
          unint64_t v24 = (void *)*--v21;
          unint64_t v23 = v24;
          void *v21 = 0;
          if (v24) {
            operator delete[](v23);
          }
        }
        while (v21 != v20);
        int v22 = v43;
      }
      unint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

uint64_t mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::AttributeOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1970037110 ? (BOOL v7 = *(unsigned char *)(a3 + 4) == 101) : (BOOL v7 = 0), v7)) {
    return *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 5 && *(_DWORD *)result == 1970037110 && *(unsigned char *)(result + 4) == 101) {
    *uint64_t v5 = a4;
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"value", 5, v5);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::AttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::arith::ConstantOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>::readProperties(uint64_t a1, void *a2)
{
  uint64_t v3 = mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>(a2);
  return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 24))(a3, *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(uint64_t a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v105 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      unint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v113 = 81;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      int64_t v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = &unk_1E8EBA000;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    unint64_t v5 = (void *)&unk_1E8EBA000;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<Empty>]";
      unint64_t v113 = 118;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      unsigned int v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v5 = (void *)&unk_1E8EBA000;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[279];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      unint64_t v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[12];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v113 = 88;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      char v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[14];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      uint64_t v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v113 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      uint64_t v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || *(void *)(v13 + 2744) == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::AttributeOp::print((mlir::pdl::AttributeOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::pdl::AttributeOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::pdl::AttributeOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::EraseOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    int v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          BOOL v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v87 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v19 = v18;
    a1 = v87;
    if (v19)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v94 = 83;
      unint64_t v20 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v20) {
        unint64_t v21 = v20;
      }
      else {
        unint64_t v21 = v94;
      }
      int v22 = &v93[v21];
      unint64_t v23 = v94 - v21;
      if (v94 - v21 >= 0x12) {
        uint64_t v24 = 18;
      }
      else {
        uint64_t v24 = v94 - v21;
      }
      unint64_t v25 = v23 - v24;
      if (v25 >= v25 - 1) {
        uint64_t v26 = v25 - 1;
      }
      else {
        uint64_t v26 = v25;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v87;
    }
  }
  uint64_t v2 = v1[4];
  char v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v82 = v2;
    uint64_t v88 = a1;
    char v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v28 = v27;
    uint64_t v2 = v82;
    a1 = v88;
    if (v28)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v94 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v94;
      }
      int v31 = &v93[v30];
      unint64_t v32 = v94 - v30;
      if (v94 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v94 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      char v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v82;
      a1 = v88;
    }
  }
  uint64_t v4 = v3[5];
  uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v83 = v2;
    uint64_t v89 = a1;
    uint64_t v78 = v4;
    uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v78;
    uint64_t v2 = v83;
    int v37 = v36;
    a1 = v89;
    if (v37)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v94 = 86;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v94;
      }
      int v40 = &v93[v39];
      unint64_t v41 = v94 - v39;
      if (v94 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v94 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v78;
      uint64_t v2 = v83;
      a1 = v89;
    }
  }
  uint64_t v6 = v5[12];
  unint64_t v7 = 0x1E8EB8000uLL;
  {
    uint64_t v84 = v2;
    uint64_t v90 = a1;
    uint64_t v75 = v6;
    uint64_t v79 = v4;
    unint64_t v7 = 0x1E8EB8000;
    uint64_t v6 = v75;
    uint64_t v4 = v79;
    int v46 = v45;
    uint64_t v2 = v84;
    a1 = v90;
    if (v46)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v94 = 82;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v94;
      }
      int v49 = &v93[v48];
      unint64_t v50 = v94 - v48;
      if (v94 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v94 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v7 = 0x1E8EB8000;
      uint64_t v6 = v75;
      uint64_t v4 = v79;
      uint64_t v2 = v84;
      a1 = v90;
    }
  }
  uint64_t v8 = *(void *)(v7 + 4080);
  long long v9 = &unk_1E8EBA000;
  {
    uint64_t v85 = v2;
    uint64_t v91 = a1;
    uint64_t v76 = v6;
    uint64_t v80 = v4;
    uint64_t v73 = v8;
    long long v9 = (void *)&unk_1E8EBA000;
    uint64_t v8 = v73;
    uint64_t v6 = v76;
    uint64_t v4 = v80;
    uint64_t v2 = v85;
    int v55 = v54;
    a1 = v91;
    if (v55)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<Empty>]";
      unint64_t v94 = 109;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v94;
      }
      int v58 = &v93[v57];
      unint64_t v59 = v94 - v57;
      if (v94 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v94 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      long long v9 = (void *)&unk_1E8EBA000;
      uint64_t v8 = v73;
      uint64_t v6 = v76;
      uint64_t v4 = v80;
      uint64_t v2 = v85;
      a1 = v91;
    }
  }
  uint64_t v10 = v9[275];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v86 = v2;
    uint64_t v92 = a1;
    uint64_t v77 = v6;
    uint64_t v81 = v4;
    uint64_t v72 = v10;
    uint64_t v74 = v8;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v72;
    uint64_t v8 = v74;
    uint64_t v6 = v77;
    uint64_t v4 = v81;
    int v64 = v63;
    uint64_t v2 = v86;
    a1 = v92;
    if (v64)
    {
      uint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v94 = 84;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v94;
      }
      int v67 = &v93[v66];
      unint64_t v68 = v94 - v66;
      if (v94 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v94 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v72;
      uint64_t v8 = v74;
      uint64_t v6 = v77;
      uint64_t v4 = v81;
      uint64_t v2 = v86;
      a1 = v92;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v11[9] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  unint64_t v7 = a2;
  mlir::pdl::EraseOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::EraseOp>,mlir::OpTrait::ZeroResults<mlir::pdl::EraseOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::EraseOp>,mlir::OpTrait::OneOperand<mlir::pdl::EraseOp>,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::EraseOp>,mlir::OpTrait::OpInvariants<mlir::pdl::EraseOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::EraseOp>,mlir::OpTrait::ZeroResults<mlir::pdl::EraseOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::EraseOp>,mlir::OpTrait::OneOperand<mlir::pdl::EraseOp>,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::EraseOp>,mlir::OpTrait::OpInvariants<mlir::pdl::EraseOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ApplyNativeRewriteOp>::verifyTrait((uint64_t *)a1)
      && mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3((uint64_t *)a1, *(void *)(*(void *)(*((void *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0) != 0;
}

uint64_t mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::OperandOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    int v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          BOOL v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v105 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      unint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[4];
  char v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    char v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v113 = 81;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      uint64_t v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      char v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[27];
  uint64_t v5 = &unk_1E8EBA000;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    uint64_t v5 = (void *)&unk_1E8EBA000;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl<Empty>]";
      unint64_t v113 = 114;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      unint64_t v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v5 = (void *)&unk_1E8EBA000;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[283];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      unint64_t v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[12];
  long long v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    long long v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v113 = 88;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      unint64_t v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      long long v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[14];
  uint64_t v11 = &unk_1E8EBA000;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = (void *)&unk_1E8EBA000;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<Empty>]";
      unint64_t v113 = 109;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      unint64_t v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = (void *)&unk_1E8EBA000;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[269];
  uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      BOOL v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      uint64_t v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v13[9] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::pdl::OperandOp::print((mlir::pdl::OperandOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::Operation *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::ApplyNativeConstraintOp>::verifyTrait((uint64_t *)a1)
    && (uint64_t v6 = a1, mlir::pdl::OperandOp::verifyInvariantsImpl((uint64_t **)&v6)))
  {
    return verifyHasBindingUse(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::OperandsOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}